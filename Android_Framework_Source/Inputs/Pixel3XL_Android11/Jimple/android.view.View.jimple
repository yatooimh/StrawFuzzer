public class android.view.View extends java.lang.Object implements android.graphics.drawable.Drawable$Callback, android.view.KeyEvent$Callback, android.view.accessibility.AccessibilityEventSource
{
    public static final int ACCESSIBILITY_CURSOR_POSITION_UNDEFINED;
    public static final int ACCESSIBILITY_LIVE_REGION_ASSERTIVE;
    static final int ACCESSIBILITY_LIVE_REGION_DEFAULT;
    public static final int ACCESSIBILITY_LIVE_REGION_NONE;
    public static final int ACCESSIBILITY_LIVE_REGION_POLITE;
    static final int ALL_RTL_PROPERTIES_RESOLVED;
    public static final android.util.Property ALPHA;
    public static final int AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS;
    private static final int[] AUTOFILL_HIGHLIGHT_ATTR;
    public static final java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE;
    public static final java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY;
    public static final java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH;
    public static final java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR;
    public static final java.lang.String AUTOFILL_HINT_CREDIT_CARD_NUMBER;
    public static final java.lang.String AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE;
    public static final java.lang.String AUTOFILL_HINT_EMAIL_ADDRESS;
    public static final java.lang.String AUTOFILL_HINT_NAME;
    public static final java.lang.String AUTOFILL_HINT_PASSWORD;
    public static final java.lang.String AUTOFILL_HINT_PHONE;
    public static final java.lang.String AUTOFILL_HINT_POSTAL_ADDRESS;
    public static final java.lang.String AUTOFILL_HINT_POSTAL_CODE;
    public static final java.lang.String AUTOFILL_HINT_USERNAME;
    private static final java.lang.String AUTOFILL_LOG_TAG;
    public static final int AUTOFILL_TYPE_DATE;
    public static final int AUTOFILL_TYPE_LIST;
    public static final int AUTOFILL_TYPE_NONE;
    public static final int AUTOFILL_TYPE_TEXT;
    public static final int AUTOFILL_TYPE_TOGGLE;
    static final int CLICKABLE;
    private static final java.lang.String CONTENT_CAPTURE_LOG_TAG;
    static final int CONTEXT_CLICKABLE;
    private static final boolean DBG;
    private static final boolean DEBUG_CONTENT_CAPTURE;
    static final int DEBUG_CORNERS_COLOR;
    static final int DEBUG_CORNERS_SIZE_DIP;
    public static boolean DEBUG_DRAW;
    static final int DISABLED;
    public static final int DRAG_FLAG_GLOBAL;
    public static final int DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION;
    public static final int DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION;
    public static final int DRAG_FLAG_GLOBAL_URI_READ;
    public static final int DRAG_FLAG_GLOBAL_URI_WRITE;
    public static final int DRAG_FLAG_OPAQUE;
    static final int DRAG_MASK;
    static final int DRAWING_CACHE_ENABLED;
    public static final int DRAWING_CACHE_QUALITY_AUTO;
    private static final int[] DRAWING_CACHE_QUALITY_FLAGS;
    public static final int DRAWING_CACHE_QUALITY_HIGH;
    public static final int DRAWING_CACHE_QUALITY_LOW;
    static final int DRAWING_CACHE_QUALITY_MASK;
    static final int DRAW_MASK;
    static final int DUPLICATE_PARENT_STATE;
    protected static final int[] EMPTY_STATE_SET;
    static final int ENABLED;
    protected static final int[] ENABLED_FOCUSED_SELECTED_STATE_SET;
    protected static final int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
    static final int ENABLED_MASK;
    protected static final int[] ENABLED_SELECTED_STATE_SET;
    protected static final int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] ENABLED_STATE_SET;
    protected static final int[] ENABLED_WINDOW_FOCUSED_STATE_SET;
    static final int FADING_EDGE_HORIZONTAL;
    static final int FADING_EDGE_MASK;
    static final int FADING_EDGE_NONE;
    static final int FADING_EDGE_VERTICAL;
    static final int FILTER_TOUCHES_WHEN_OBSCURED;
    public static final int FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS;
    public static final int FIND_VIEWS_WITH_CONTENT_DESCRIPTION;
    public static final int FIND_VIEWS_WITH_TEXT;
    private static final int FITS_SYSTEM_WINDOWS;
    public static final int FOCUSABLE;
    public static final int FOCUSABLES_ALL;
    public static final int FOCUSABLES_TOUCH_MODE;
    public static final int FOCUSABLE_AUTO;
    static final int FOCUSABLE_IN_TOUCH_MODE;
    private static final int FOCUSABLE_MASK;
    protected static final int[] FOCUSED_SELECTED_STATE_SET;
    protected static final int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] FOCUSED_STATE_SET;
    protected static final int[] FOCUSED_WINDOW_FOCUSED_STATE_SET;
    public static final int FOCUS_BACKWARD;
    public static final int FOCUS_DOWN;
    public static final int FOCUS_FORWARD;
    public static final int FOCUS_LEFT;
    public static final int FOCUS_RIGHT;
    public static final int FOCUS_UP;
    public static final int GONE;
    public static final int HAPTIC_FEEDBACK_ENABLED;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_AUTO;
    static final int IMPORTANT_FOR_ACCESSIBILITY_DEFAULT;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_NO;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS;
    public static final int IMPORTANT_FOR_ACCESSIBILITY_YES;
    public static final int IMPORTANT_FOR_AUTOFILL_AUTO;
    public static final int IMPORTANT_FOR_AUTOFILL_NO;
    public static final int IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS;
    public static final int IMPORTANT_FOR_AUTOFILL_YES;
    public static final int IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS;
    public static final int IMPORTANT_FOR_CONTENT_CAPTURE_AUTO;
    public static final int IMPORTANT_FOR_CONTENT_CAPTURE_NO;
    public static final int IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS;
    public static final int IMPORTANT_FOR_CONTENT_CAPTURE_YES;
    public static final int IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS;
    public static final int INVISIBLE;
    public static final int KEEP_SCREEN_ON;
    public static final int LAST_APP_AUTOFILL_ID;
    public static final int LAYER_TYPE_HARDWARE;
    public static final int LAYER_TYPE_NONE;
    public static final int LAYER_TYPE_SOFTWARE;
    private static final int LAYOUT_DIRECTION_DEFAULT;
    private static final int[] LAYOUT_DIRECTION_FLAGS;
    public static final int LAYOUT_DIRECTION_INHERIT;
    public static final int LAYOUT_DIRECTION_LOCALE;
    public static final int LAYOUT_DIRECTION_LTR;
    static final int LAYOUT_DIRECTION_RESOLVED_DEFAULT;
    public static final int LAYOUT_DIRECTION_RTL;
    public static final int LAYOUT_DIRECTION_UNDEFINED;
    static final int LONG_CLICKABLE;
    public static final int MEASURED_HEIGHT_STATE_SHIFT;
    public static final int MEASURED_SIZE_MASK;
    public static final int MEASURED_STATE_MASK;
    public static final int MEASURED_STATE_TOO_SMALL;
    public static final int NAVIGATION_BAR_TRANSIENT;
    public static final int NAVIGATION_BAR_TRANSLUCENT;
    public static final int NAVIGATION_BAR_TRANSPARENT;
    public static final int NAVIGATION_BAR_UNHIDE;
    public static final int NOT_FOCUSABLE;
    public static final int NO_ID;
    static final int OPTIONAL_FITS_SYSTEM_WINDOWS;
    public static final int OVER_SCROLL_ALWAYS;
    public static final int OVER_SCROLL_IF_CONTENT_SCROLLS;
    public static final int OVER_SCROLL_NEVER;
    static final int PARENT_SAVE_DISABLED;
    static final int PARENT_SAVE_DISABLED_MASK;
    static final int PFLAG2_ACCESSIBILITY_FOCUSED;
    static final int PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK;
    static final int PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT;
    static final int PFLAG2_DRAG_CAN_ACCEPT;
    static final int PFLAG2_DRAG_HOVERED;
    static final int PFLAG2_DRAWABLE_RESOLVED;
    static final int PFLAG2_HAS_TRANSIENT_STATE;
    static final int PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK;
    static final int PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT;
    static final int PFLAG2_LAYOUT_DIRECTION_MASK;
    static final int PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT;
    static final int PFLAG2_LAYOUT_DIRECTION_RESOLVED;
    static final int PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK;
    static final int PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
    static final int PFLAG2_PADDING_RESOLVED;
    static final int PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED;
    private static final int[] PFLAG2_TEXT_ALIGNMENT_FLAGS;
    static final int PFLAG2_TEXT_ALIGNMENT_MASK;
    static final int PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT;
    static final int PFLAG2_TEXT_ALIGNMENT_RESOLVED;
    private static final int PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
    static final int PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK;
    static final int PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT;
    private static final int[] PFLAG2_TEXT_DIRECTION_FLAGS;
    static final int PFLAG2_TEXT_DIRECTION_MASK;
    static final int PFLAG2_TEXT_DIRECTION_MASK_SHIFT;
    static final int PFLAG2_TEXT_DIRECTION_RESOLVED;
    static final int PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
    static final int PFLAG2_TEXT_DIRECTION_RESOLVED_MASK;
    static final int PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT;
    static final int PFLAG2_VIEW_QUICK_REJECTED;
    private static final int PFLAG3_ACCESSIBILITY_HEADING;
    private static final int PFLAG3_AGGREGATED_VISIBLE;
    static final int PFLAG3_APPLYING_INSETS;
    static final int PFLAG3_ASSIST_BLOCKED;
    private static final int PFLAG3_AUTOFILLID_EXPLICITLY_SET;
    static final int PFLAG3_CALLED_SUPER;
    private static final int PFLAG3_CLUSTER;
    private static final int PFLAG3_FINGER_DOWN;
    static final int PFLAG3_FITTING_SYSTEM_WINDOWS;
    private static final int PFLAG3_FOCUSED_BY_DEFAULT;
    private static final int PFLAG3_HAS_OVERLAPPING_RENDERING_FORCED;
    static final int PFLAG3_IMPORTANT_FOR_AUTOFILL_MASK;
    static final int PFLAG3_IMPORTANT_FOR_AUTOFILL_SHIFT;
    private static final int PFLAG3_IS_AUTOFILLED;
    static final int PFLAG3_IS_LAID_OUT;
    static final int PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;
    static final int PFLAG3_NESTED_SCROLLING_ENABLED;
    static final int PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT;
    private static final int PFLAG3_NO_REVEAL_ON_FOCUS;
    private static final int PFLAG3_OVERLAPPING_RENDERING_FORCED_VALUE;
    private static final int PFLAG3_SCREEN_READER_FOCUSABLE;
    static final int PFLAG3_SCROLL_INDICATOR_BOTTOM;
    static final int PFLAG3_SCROLL_INDICATOR_END;
    static final int PFLAG3_SCROLL_INDICATOR_LEFT;
    static final int PFLAG3_SCROLL_INDICATOR_RIGHT;
    static final int PFLAG3_SCROLL_INDICATOR_START;
    static final int PFLAG3_SCROLL_INDICATOR_TOP;
    static final int PFLAG3_TEMPORARY_DETACH;
    static final int PFLAG3_VIEW_IS_ANIMATING_ALPHA;
    static final int PFLAG3_VIEW_IS_ANIMATING_TRANSFORM;
    private static final int PFLAG4_AUTOFILL_HIDE_HIGHLIGHT;
    private static final int PFLAG4_CONTENT_CAPTURE_IMPORTANCE_CACHED_VALUE;
    private static final int PFLAG4_CONTENT_CAPTURE_IMPORTANCE_IS_CACHED;
    private static final int PFLAG4_CONTENT_CAPTURE_IMPORTANCE_MASK;
    static final int PFLAG4_FRAMEWORK_OPTIONAL_FITS_SYSTEM_WINDOWS;
    private static final int PFLAG4_IMPORTANT_FOR_CONTENT_CAPTURE_MASK;
    private static final int PFLAG4_NOTIFIED_CONTENT_CAPTURE_APPEARED;
    private static final int PFLAG4_NOTIFIED_CONTENT_CAPTURE_DISAPPEARED;
    static final int PFLAG4_SCROLL_CAPTURE_HINT_MASK;
    static final int PFLAG4_SCROLL_CAPTURE_HINT_SHIFT;
    static final int PFLAG_ACTIVATED;
    static final int PFLAG_ALPHA_SET;
    static final int PFLAG_ANIMATION_STARTED;
    private static final int PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH;
    static final int PFLAG_CANCEL_NEXT_UP_EVENT;
    static final int PFLAG_DIRTY;
    static final int PFLAG_DIRTY_MASK;
    static final int PFLAG_DRAWABLE_STATE_DIRTY;
    static final int PFLAG_DRAWING_CACHE_VALID;
    static final int PFLAG_DRAWN;
    static final int PFLAG_DRAW_ANIMATION;
    static final int PFLAG_FOCUSED;
    static final int PFLAG_FORCE_LAYOUT;
    static final int PFLAG_HAS_BOUNDS;
    private static final int PFLAG_HOVERED;
    static final int PFLAG_INVALIDATED;
    static final int PFLAG_IS_ROOT_NAMESPACE;
    static final int PFLAG_LAYOUT_REQUIRED;
    static final int PFLAG_MEASURED_DIMENSION_SET;
    private static final int PFLAG_NOTIFY_AUTOFILL_MANAGER_ON_CLICK;
    static final int PFLAG_OPAQUE_BACKGROUND;
    static final int PFLAG_OPAQUE_MASK;
    static final int PFLAG_OPAQUE_SCROLLBARS;
    private static final int PFLAG_PREPRESSED;
    private static final int PFLAG_PRESSED;
    static final int PFLAG_REQUEST_TRANSPARENT_REGIONS;
    private static final int PFLAG_SAVE_STATE_CALLED;
    static final int PFLAG_SCROLL_CONTAINER;
    static final int PFLAG_SCROLL_CONTAINER_ADDED;
    static final int PFLAG_SELECTED;
    static final int PFLAG_SKIP_DRAW;
    static final int PFLAG_WANTS_FOCUS;
    private static final int POPULATING_ACCESSIBILITY_EVENT_TYPES;
    protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_STATE_SET;
    protected static final int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_SELECTED_STATE_SET;
    protected static final int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET;
    protected static final int[] PRESSED_STATE_SET;
    protected static final int[] PRESSED_WINDOW_FOCUSED_STATE_SET;
    private static final int PROVIDER_BACKGROUND;
    private static final int PROVIDER_BOUNDS;
    private static final int PROVIDER_NONE;
    private static final int PROVIDER_PADDED_BOUNDS;
    public static final int PUBLIC_STATUS_BAR_VISIBILITY_MASK;
    public static final android.util.Property ROTATION;
    public static final android.util.Property ROTATION_X;
    public static final android.util.Property ROTATION_Y;
    static final int SAVE_DISABLED;
    static final int SAVE_DISABLED_MASK;
    public static final android.util.Property SCALE_X;
    public static final android.util.Property SCALE_Y;
    public static final int SCREEN_STATE_OFF;
    public static final int SCREEN_STATE_ON;
    static final int SCROLLBARS_HORIZONTAL;
    static final int SCROLLBARS_INSET_MASK;
    public static final int SCROLLBARS_INSIDE_INSET;
    public static final int SCROLLBARS_INSIDE_OVERLAY;
    static final int SCROLLBARS_MASK;
    static final int SCROLLBARS_NONE;
    public static final int SCROLLBARS_OUTSIDE_INSET;
    static final int SCROLLBARS_OUTSIDE_MASK;
    public static final int SCROLLBARS_OUTSIDE_OVERLAY;
    static final int SCROLLBARS_STYLE_MASK;
    static final int SCROLLBARS_VERTICAL;
    public static final int SCROLLBAR_POSITION_DEFAULT;
    public static final int SCROLLBAR_POSITION_LEFT;
    public static final int SCROLLBAR_POSITION_RIGHT;
    public static final int SCROLL_AXIS_HORIZONTAL;
    public static final int SCROLL_AXIS_NONE;
    public static final int SCROLL_AXIS_VERTICAL;
    public static final int SCROLL_CAPTURE_HINT_AUTO;
    public static final int SCROLL_CAPTURE_HINT_EXCLUDE;
    public static final int SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTS;
    public static final int SCROLL_CAPTURE_HINT_INCLUDE;
    static final int SCROLL_INDICATORS_NONE;
    static final int SCROLL_INDICATORS_PFLAG3_MASK;
    static final int SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT;
    public static final int SCROLL_INDICATOR_BOTTOM;
    public static final int SCROLL_INDICATOR_END;
    public static final int SCROLL_INDICATOR_LEFT;
    public static final int SCROLL_INDICATOR_RIGHT;
    public static final int SCROLL_INDICATOR_START;
    public static final int SCROLL_INDICATOR_TOP;
    protected static final int[] SELECTED_STATE_SET;
    protected static final int[] SELECTED_WINDOW_FOCUSED_STATE_SET;
    public static final int SOUND_EFFECTS_ENABLED;
    public static final int STATUS_BAR_DISABLE_BACK;
    public static final int STATUS_BAR_DISABLE_CLOCK;
    public static final int STATUS_BAR_DISABLE_EXPAND;
    public static final int STATUS_BAR_DISABLE_HOME;
    public static final int STATUS_BAR_DISABLE_NOTIFICATION_ALERTS;
    public static final int STATUS_BAR_DISABLE_NOTIFICATION_ICONS;
    public static final int STATUS_BAR_DISABLE_NOTIFICATION_TICKER;
    public static final int STATUS_BAR_DISABLE_RECENT;
    public static final int STATUS_BAR_DISABLE_SEARCH;
    public static final int STATUS_BAR_DISABLE_SYSTEM_INFO;
    public static final int STATUS_BAR_HIDDEN;
    public static final int STATUS_BAR_TRANSIENT;
    public static final int STATUS_BAR_TRANSLUCENT;
    public static final int STATUS_BAR_TRANSPARENT;
    public static final int STATUS_BAR_UNHIDE;
    public static final int STATUS_BAR_VISIBLE;
    public static final int SYSTEM_UI_CLEARABLE_FLAGS;
    public static final int SYSTEM_UI_FLAG_FULLSCREEN;
    public static final int SYSTEM_UI_FLAG_HIDE_NAVIGATION;
    public static final int SYSTEM_UI_FLAG_IMMERSIVE;
    public static final int SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
    public static final int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN;
    public static final int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;
    public static final int SYSTEM_UI_FLAG_LAYOUT_STABLE;
    public static final int SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR;
    public static final int SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;
    public static final int SYSTEM_UI_FLAG_LOW_PROFILE;
    public static final int SYSTEM_UI_FLAG_VISIBLE;
    public static final int SYSTEM_UI_LAYOUT_FLAGS;
    private static final int SYSTEM_UI_RESERVED_LEGACY1;
    private static final int SYSTEM_UI_RESERVED_LEGACY2;
    public static final int SYSTEM_UI_TRANSPARENT;
    public static final int TEXT_ALIGNMENT_CENTER;
    private static final int TEXT_ALIGNMENT_DEFAULT;
    public static final int TEXT_ALIGNMENT_GRAVITY;
    public static final int TEXT_ALIGNMENT_INHERIT;
    static final int TEXT_ALIGNMENT_RESOLVED_DEFAULT;
    public static final int TEXT_ALIGNMENT_TEXT_END;
    public static final int TEXT_ALIGNMENT_TEXT_START;
    public static final int TEXT_ALIGNMENT_VIEW_END;
    public static final int TEXT_ALIGNMENT_VIEW_START;
    public static final int TEXT_DIRECTION_ANY_RTL;
    private static final int TEXT_DIRECTION_DEFAULT;
    public static final int TEXT_DIRECTION_FIRST_STRONG;
    public static final int TEXT_DIRECTION_FIRST_STRONG_LTR;
    public static final int TEXT_DIRECTION_FIRST_STRONG_RTL;
    public static final int TEXT_DIRECTION_INHERIT;
    public static final int TEXT_DIRECTION_LOCALE;
    public static final int TEXT_DIRECTION_LTR;
    static final int TEXT_DIRECTION_RESOLVED_DEFAULT;
    public static final int TEXT_DIRECTION_RTL;
    static final int TOOLTIP;
    public static final android.util.Property TRANSLATION_X;
    public static final android.util.Property TRANSLATION_Y;
    public static final android.util.Property TRANSLATION_Z;
    private static final int UNDEFINED_PADDING;
    protected static final java.lang.String VIEW_LOG_TAG;
    protected static final int VIEW_STRUCTURE_FOR_ASSIST;
    protected static final int VIEW_STRUCTURE_FOR_AUTOFILL;
    protected static final int VIEW_STRUCTURE_FOR_CONTENT_CAPTURE;
    private static final int[] VISIBILITY_FLAGS;
    static final int VISIBILITY_MASK;
    public static final int VISIBLE;
    static final int WILL_NOT_CACHE_DRAWING;
    static final int WILL_NOT_DRAW;
    protected static final int[] WINDOW_FOCUSED_STATE_SET;
    public static final android.util.Property X;
    public static final android.util.Property Y;
    public static final android.util.Property Z;
    private static android.util.SparseArray mAttributeMap;
    private static boolean sAcceptZeroSizeDragShadow;
    private static boolean sAlwaysAssignFocus;
    private static boolean sAlwaysRemeasureExactly;
    private static boolean sAutoFocusableOffUIThreadWontNotifyParents;
    static boolean sBrokenInsetsDispatch;
    protected static boolean sBrokenWindowBackground;
    private static boolean sCanFocusZeroSized;
    static boolean sCascadedDragDrop;
    private static boolean sCompatibilityDone;
    private static android.graphics.Paint sDebugPaint;
    public static boolean sDebugViewAttributes;
    public static java.lang.String sDebugViewAttributesApplicationPackage;
    static boolean sForceLayoutWhenInsetsChanged;
    static boolean sHasFocusableExcludeAutoFocusable;
    private static boolean sIgnoreMeasureCache;
    private static int sNextAccessibilityViewId;
    private static final java.util.concurrent.atomic.AtomicInteger sNextGeneratedId;
    protected static boolean sPreserveMarginParamsInLayoutParamConversion;
    static boolean sTextureViewIgnoresDrawableSetters;
    static final java.lang.ThreadLocal sThreadLocal;
    private static boolean sThrowOnInvalidFloatProperties;
    private static boolean sUseBrokenMakeMeasureSpec;
    private static boolean sUseDefaultFocusHighlight;
    static boolean sUseZeroUnspecifiedMeasureSpec;
    private int mAccessibilityCursorPosition;
    android.view.View$AccessibilityDelegate mAccessibilityDelegate;
    private java.lang.CharSequence mAccessibilityPaneTitle;
    private int mAccessibilityTraversalAfterId;
    private int mAccessibilityTraversalBeforeId;
    private int mAccessibilityViewId;
    private float mAmbiguousGestureMultiplier;
    private android.view.ViewPropertyAnimator mAnimator;
    android.view.View$AttachInfo mAttachInfo;
    private android.util.SparseArray mAttributeResolutionStacks;
    private android.util.SparseIntArray mAttributeSourceResId;
    public java.lang.String[] mAttributes;
    private java.lang.String[] mAutofillHints;
    private android.view.autofill.AutofillId mAutofillId;
    private int mAutofillViewId;
    private android.graphics.drawable.Drawable mBackground;
    android.graphics.RenderNode mBackgroundRenderNode;
    private int mBackgroundResource;
    private boolean mBackgroundSizeChanged;
    private android.view.View$TintInfo mBackgroundTint;
    protected int mBottom;
    public boolean mCachingFailed;
    android.graphics.Rect mClipBounds;
    private android.view.contentcapture.ContentCaptureSession mContentCaptureSession;
    private boolean mContentCaptureSessionCached;
    private java.lang.CharSequence mContentDescription;
    protected android.content.Context mContext;
    protected android.view.animation.Animation mCurrentAnimation;
    private android.graphics.drawable.Drawable mDefaultFocusHighlight;
    private android.graphics.drawable.Drawable mDefaultFocusHighlightCache;
    boolean mDefaultFocusHighlightEnabled;
    private boolean mDefaultFocusHighlightSizeChanged;
    private int[] mDrawableState;
    private android.graphics.Bitmap mDrawingCache;
    private int mDrawingCacheBackgroundColor;
    private int mExplicitStyle;
    private android.view.ViewTreeObserver mFloatingTreeObserver;
    private android.view.View$ForegroundInfo mForegroundInfo;
    private java.util.ArrayList mFrameMetricsObservers;
    android.view.GhostView mGhostView;
    private boolean mHasPerformedLongPress;
    private boolean mHoveringTouchDelegate;
    int mID;
    private boolean mIgnoreNextUpEvent;
    private boolean mInContextButtonPress;
    protected final android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier;
    private android.util.SparseArray mKeyedTags;
    private int mLabelForId;
    private boolean mLastIsOpaque;
    android.graphics.Paint mLayerPaint;
    int mLayerType;
    private android.graphics.Insets mLayoutInsets;
    protected android.view.ViewGroup$LayoutParams mLayoutParams;
    protected int mLeft;
    private boolean mLeftPaddingDefined;
    android.view.View$ListenerInfo mListenerInfo;
    private float mLongClickX;
    private float mLongClickY;
    private android.view.View$MatchIdPredicate mMatchIdPredicate;
    private android.view.View$MatchLabelForPredicate mMatchLabelForPredicate;
    private android.util.LongSparseLongArray mMeasureCache;
    int mMeasuredHeight;
    int mMeasuredWidth;
    private int mMinHeight;
    private int mMinWidth;
    private android.view.ViewParent mNestedScrollingParent;
    int mNextClusterForwardId;
    private int mNextFocusDownId;
    int mNextFocusForwardId;
    private int mNextFocusLeftId;
    private int mNextFocusRightId;
    private int mNextFocusUpId;
    int mOldHeightMeasureSpec;
    int mOldWidthMeasureSpec;
    android.view.ViewOutlineProvider mOutlineProvider;
    private int mOverScrollMode;
    android.view.ViewOverlay mOverlay;
    protected int mPaddingBottom;
    protected int mPaddingLeft;
    protected int mPaddingRight;
    protected int mPaddingTop;
    protected android.view.ViewParent mParent;
    private android.view.View$CheckForLongPress mPendingCheckForLongPress;
    private android.view.View$CheckForTap mPendingCheckForTap;
    private android.view.View$PerformClick mPerformClick;
    private android.view.PointerIcon mPointerIcon;
    public int mPrivateFlags;
    int mPrivateFlags2;
    int mPrivateFlags3;
    private int mPrivateFlags4;
    boolean mRecreateDisplayList;
    final android.graphics.RenderNode mRenderNode;
    private final android.content.res.Resources mResources;
    protected int mRight;
    private boolean mRightPaddingDefined;
    private android.view.RoundScrollbarRenderer mRoundScrollbarRenderer;
    private android.view.HandlerActionQueue mRunQueue;
    private android.view.View$ScrollabilityCache mScrollCache;
    private android.graphics.drawable.Drawable mScrollIndicatorDrawable;
    protected int mScrollX;
    protected int mScrollY;
    private android.view.View$SendAccessibilityEventThrottle mSendStateChangedAccessibilityEvent;
    private android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent;
    private boolean mSendingHoverAccessibilityEvents;
    private int mSourceLayoutId;
    java.lang.String mStartActivityRequestWho;
    private java.lang.CharSequence mStateDescription;
    private android.animation.StateListAnimator mStateListAnimator;
    int mSystemUiVisibility;
    protected java.lang.Object mTag;
    private int[] mTempNestedScrollConsumed;
    android.view.View$TooltipInfo mTooltipInfo;
    protected int mTop;
    private android.view.TouchDelegate mTouchDelegate;
    private int mTouchSlop;
    public android.view.View$TransformationInfo mTransformationInfo;
    int mTransientStateCount;
    private java.lang.String mTransitionName;
    int mUnbufferedInputSource;
    private android.graphics.Bitmap mUnscaledDrawingCache;
    private android.view.View$UnsetPressedState mUnsetPressedState;
    protected int mUserPaddingBottom;
    int mUserPaddingEnd;
    protected int mUserPaddingLeft;
    int mUserPaddingLeftInitial;
    protected int mUserPaddingRight;
    int mUserPaddingRightInitial;
    int mUserPaddingStart;
    private float mVerticalScrollFactor;
    private int mVerticalScrollbarPosition;
    int mViewFlags;
    private android.os.Handler mVisibilityChangeForAutofillHandler;
    int mWindowAttachCount;

    static void <clinit>()
    {
        int[] $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r37, $r38, $r39;
        int $i0;
        android.view.'-$$Lambda$Y3lG3v_J32-xL0IjMGgNorZjESw' $r35;
        java.lang.ThreadLocal $r36;
        java.util.concurrent.atomic.AtomicInteger r53;
        android.view.View$2 r54;
        android.view.View$3 r55;
        android.view.View$4 r56;
        android.view.View$5 r57;
        android.view.View$6 r58;
        android.view.View$7 r59;
        android.view.View$8 r60;
        android.view.View$9 r61;
        android.view.View$10 r62;
        android.view.View$11 r63;
        android.view.View$12 r64;
        android.view.View$13 r65;
        java.util.function.Supplier r66;

        <android.view.View: int WILL_NOT_DRAW> = 128;

        <android.view.View: int WILL_NOT_CACHE_DRAWING> = 131072;

        <android.view.View: int VISIBLE> = 0;

        <android.view.View: int VISIBILITY_MASK> = 12;

        <android.view.View: int VIEW_STRUCTURE_FOR_CONTENT_CAPTURE> = 2;

        <android.view.View: int VIEW_STRUCTURE_FOR_AUTOFILL> = 1;

        <android.view.View: int VIEW_STRUCTURE_FOR_ASSIST> = 0;

        <android.view.View: java.lang.String VIEW_LOG_TAG> = "View";

        <android.view.View: int UNDEFINED_PADDING> = -2147483648;

        <android.view.View: int TOOLTIP> = 1073741824;

        <android.view.View: int TEXT_DIRECTION_RTL> = 4;

        <android.view.View: int TEXT_DIRECTION_RESOLVED_DEFAULT> = 1;

        <android.view.View: int TEXT_DIRECTION_LTR> = 3;

        <android.view.View: int TEXT_DIRECTION_LOCALE> = 5;

        <android.view.View: int TEXT_DIRECTION_INHERIT> = 0;

        <android.view.View: int TEXT_DIRECTION_FIRST_STRONG_RTL> = 7;

        <android.view.View: int TEXT_DIRECTION_FIRST_STRONG_LTR> = 6;

        <android.view.View: int TEXT_DIRECTION_FIRST_STRONG> = 1;

        <android.view.View: int TEXT_DIRECTION_DEFAULT> = 0;

        <android.view.View: int TEXT_DIRECTION_ANY_RTL> = 2;

        <android.view.View: int TEXT_ALIGNMENT_VIEW_START> = 5;

        <android.view.View: int TEXT_ALIGNMENT_VIEW_END> = 6;

        <android.view.View: int TEXT_ALIGNMENT_TEXT_START> = 2;

        <android.view.View: int TEXT_ALIGNMENT_TEXT_END> = 3;

        <android.view.View: int TEXT_ALIGNMENT_RESOLVED_DEFAULT> = 1;

        <android.view.View: int TEXT_ALIGNMENT_INHERIT> = 0;

        <android.view.View: int TEXT_ALIGNMENT_GRAVITY> = 1;

        <android.view.View: int TEXT_ALIGNMENT_DEFAULT> = 1;

        <android.view.View: int TEXT_ALIGNMENT_CENTER> = 4;

        <android.view.View: int SYSTEM_UI_TRANSPARENT> = 32776;

        <android.view.View: int SYSTEM_UI_RESERVED_LEGACY2> = 65536;

        <android.view.View: int SYSTEM_UI_RESERVED_LEGACY1> = 16384;

        <android.view.View: int SYSTEM_UI_LAYOUT_FLAGS> = 1536;

        <android.view.View: int SYSTEM_UI_FLAG_VISIBLE> = 0;

        <android.view.View: int SYSTEM_UI_FLAG_LOW_PROFILE> = 1;

        <android.view.View: int SYSTEM_UI_FLAG_LIGHT_STATUS_BAR> = 8192;

        <android.view.View: int SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR> = 16;

        <android.view.View: int SYSTEM_UI_FLAG_LAYOUT_STABLE> = 256;

        <android.view.View: int SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION> = 512;

        <android.view.View: int SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN> = 1024;

        <android.view.View: int SYSTEM_UI_FLAG_IMMERSIVE_STICKY> = 4096;

        <android.view.View: int SYSTEM_UI_FLAG_IMMERSIVE> = 2048;

        <android.view.View: int SYSTEM_UI_FLAG_HIDE_NAVIGATION> = 2;

        <android.view.View: int SYSTEM_UI_FLAG_FULLSCREEN> = 4;

        <android.view.View: int SYSTEM_UI_CLEARABLE_FLAGS> = 7;

        <android.view.View: int STATUS_BAR_VISIBLE> = 0;

        <android.view.View: int STATUS_BAR_UNHIDE> = 268435456;

        <android.view.View: int STATUS_BAR_TRANSPARENT> = 8;

        <android.view.View: int STATUS_BAR_TRANSLUCENT> = 1073741824;

        <android.view.View: int STATUS_BAR_TRANSIENT> = 67108864;

        <android.view.View: int STATUS_BAR_HIDDEN> = 1;

        <android.view.View: int STATUS_BAR_DISABLE_SYSTEM_INFO> = 1048576;

        <android.view.View: int STATUS_BAR_DISABLE_SEARCH> = 33554432;

        <android.view.View: int STATUS_BAR_DISABLE_RECENT> = 16777216;

        <android.view.View: int STATUS_BAR_DISABLE_NOTIFICATION_TICKER> = 524288;

        <android.view.View: int STATUS_BAR_DISABLE_NOTIFICATION_ICONS> = 131072;

        <android.view.View: int STATUS_BAR_DISABLE_NOTIFICATION_ALERTS> = 262144;

        <android.view.View: int STATUS_BAR_DISABLE_HOME> = 2097152;

        <android.view.View: int STATUS_BAR_DISABLE_EXPAND> = 65536;

        <android.view.View: int STATUS_BAR_DISABLE_CLOCK> = 8388608;

        <android.view.View: int STATUS_BAR_DISABLE_BACK> = 4194304;

        <android.view.View: int SOUND_EFFECTS_ENABLED> = 134217728;

        <android.view.View: int SCROLL_INDICATOR_TOP> = 1;

        <android.view.View: int SCROLL_INDICATOR_START> = 16;

        <android.view.View: int SCROLL_INDICATOR_RIGHT> = 8;

        <android.view.View: int SCROLL_INDICATOR_LEFT> = 4;

        <android.view.View: int SCROLL_INDICATOR_END> = 32;

        <android.view.View: int SCROLL_INDICATOR_BOTTOM> = 2;

        <android.view.View: int SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT> = 8;

        <android.view.View: int SCROLL_INDICATORS_PFLAG3_MASK> = 16128;

        <android.view.View: int SCROLL_INDICATORS_NONE> = 0;

        <android.view.View: int SCROLL_CAPTURE_HINT_INCLUDE> = 2;

        <android.view.View: int SCROLL_CAPTURE_HINT_EXCLUDE_DESCENDANTS> = 4;

        <android.view.View: int SCROLL_CAPTURE_HINT_EXCLUDE> = 1;

        <android.view.View: int SCROLL_CAPTURE_HINT_AUTO> = 0;

        <android.view.View: int SCROLL_AXIS_VERTICAL> = 2;

        <android.view.View: int SCROLL_AXIS_NONE> = 0;

        <android.view.View: int SCROLL_AXIS_HORIZONTAL> = 1;

        <android.view.View: int SCROLLBAR_POSITION_RIGHT> = 2;

        <android.view.View: int SCROLLBAR_POSITION_LEFT> = 1;

        <android.view.View: int SCROLLBAR_POSITION_DEFAULT> = 0;

        <android.view.View: int SCROLLBARS_VERTICAL> = 512;

        <android.view.View: int SCROLLBARS_STYLE_MASK> = 50331648;

        <android.view.View: int SCROLLBARS_OUTSIDE_OVERLAY> = 33554432;

        <android.view.View: int SCROLLBARS_OUTSIDE_MASK> = 33554432;

        <android.view.View: int SCROLLBARS_OUTSIDE_INSET> = 50331648;

        <android.view.View: int SCROLLBARS_NONE> = 0;

        <android.view.View: int SCROLLBARS_MASK> = 768;

        <android.view.View: int SCROLLBARS_INSIDE_OVERLAY> = 0;

        <android.view.View: int SCROLLBARS_INSIDE_INSET> = 16777216;

        <android.view.View: int SCROLLBARS_INSET_MASK> = 16777216;

        <android.view.View: int SCROLLBARS_HORIZONTAL> = 256;

        <android.view.View: int SCREEN_STATE_ON> = 1;

        <android.view.View: int SCREEN_STATE_OFF> = 0;

        <android.view.View: int SAVE_DISABLED_MASK> = 65536;

        <android.view.View: int SAVE_DISABLED> = 65536;

        <android.view.View: int PUBLIC_STATUS_BAR_VISIBILITY_MASK> = 16375;

        <android.view.View: int PROVIDER_PADDED_BOUNDS> = 3;

        <android.view.View: int PROVIDER_NONE> = 1;

        <android.view.View: int PROVIDER_BOUNDS> = 2;

        <android.view.View: int PROVIDER_BACKGROUND> = 0;

        <android.view.View: int POPULATING_ACCESSIBILITY_EVENT_TYPES> = 172479;

        <android.view.View: int PFLAG_WANTS_FOCUS> = 1;

        <android.view.View: int PFLAG_SKIP_DRAW> = 128;

        <android.view.View: int PFLAG_SELECTED> = 4;

        <android.view.View: int PFLAG_SCROLL_CONTAINER_ADDED> = 1048576;

        <android.view.View: int PFLAG_SCROLL_CONTAINER> = 524288;

        <android.view.View: int PFLAG_SAVE_STATE_CALLED> = 131072;

        <android.view.View: int PFLAG_REQUEST_TRANSPARENT_REGIONS> = 512;

        <android.view.View: int PFLAG_PRESSED> = 16384;

        <android.view.View: int PFLAG_PREPRESSED> = 33554432;

        <android.view.View: int PFLAG_OPAQUE_SCROLLBARS> = 16777216;

        <android.view.View: int PFLAG_OPAQUE_MASK> = 25165824;

        <android.view.View: int PFLAG_OPAQUE_BACKGROUND> = 8388608;

        <android.view.View: int PFLAG_NOTIFY_AUTOFILL_MANAGER_ON_CLICK> = 536870912;

        <android.view.View: int PFLAG_MEASURED_DIMENSION_SET> = 2048;

        <android.view.View: int PFLAG_LAYOUT_REQUIRED> = 8192;

        <android.view.View: int PFLAG_IS_ROOT_NAMESPACE> = 8;

        <android.view.View: int PFLAG_INVALIDATED> = -2147483648;

        <android.view.View: int PFLAG_HOVERED> = 268435456;

        <android.view.View: int PFLAG_HAS_BOUNDS> = 16;

        <android.view.View: int PFLAG_FORCE_LAYOUT> = 4096;

        <android.view.View: int PFLAG_FOCUSED> = 2;

        <android.view.View: int PFLAG_DRAW_ANIMATION> = 64;

        <android.view.View: int PFLAG_DRAWN> = 32;

        <android.view.View: int PFLAG_DRAWING_CACHE_VALID> = 32768;

        <android.view.View: int PFLAG_DRAWABLE_STATE_DIRTY> = 1024;

        <android.view.View: int PFLAG_DIRTY_MASK> = 2097152;

        <android.view.View: int PFLAG_DIRTY> = 2097152;

        <android.view.View: int PFLAG_CANCEL_NEXT_UP_EVENT> = 67108864;

        <android.view.View: int PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH> = 134217728;

        <android.view.View: int PFLAG_ANIMATION_STARTED> = 65536;

        <android.view.View: int PFLAG_ALPHA_SET> = 262144;

        <android.view.View: int PFLAG_ACTIVATED> = 1073741824;

        <android.view.View: int PFLAG4_SCROLL_CAPTURE_HINT_SHIFT> = 10;

        <android.view.View: int PFLAG4_SCROLL_CAPTURE_HINT_MASK> = 7168;

        <android.view.View: int PFLAG4_NOTIFIED_CONTENT_CAPTURE_DISAPPEARED> = 32;

        <android.view.View: int PFLAG4_NOTIFIED_CONTENT_CAPTURE_APPEARED> = 16;

        <android.view.View: int PFLAG4_IMPORTANT_FOR_CONTENT_CAPTURE_MASK> = 15;

        <android.view.View: int PFLAG4_FRAMEWORK_OPTIONAL_FITS_SYSTEM_WINDOWS> = 256;

        <android.view.View: int PFLAG4_CONTENT_CAPTURE_IMPORTANCE_MASK> = 192;

        <android.view.View: int PFLAG4_CONTENT_CAPTURE_IMPORTANCE_IS_CACHED> = 64;

        <android.view.View: int PFLAG4_CONTENT_CAPTURE_IMPORTANCE_CACHED_VALUE> = 128;

        <android.view.View: int PFLAG4_AUTOFILL_HIDE_HIGHLIGHT> = 512;

        <android.view.View: int PFLAG3_VIEW_IS_ANIMATING_TRANSFORM> = 1;

        <android.view.View: int PFLAG3_VIEW_IS_ANIMATING_ALPHA> = 2;

        <android.view.View: int PFLAG3_TEMPORARY_DETACH> = 33554432;

        <android.view.View: int PFLAG3_SCROLL_INDICATOR_TOP> = 256;

        <android.view.View: int PFLAG3_SCROLL_INDICATOR_START> = 4096;

        <android.view.View: int PFLAG3_SCROLL_INDICATOR_RIGHT> = 2048;

        <android.view.View: int PFLAG3_SCROLL_INDICATOR_LEFT> = 1024;

        <android.view.View: int PFLAG3_SCROLL_INDICATOR_END> = 8192;

        <android.view.View: int PFLAG3_SCROLL_INDICATOR_BOTTOM> = 512;

        <android.view.View: int PFLAG3_SCREEN_READER_FOCUSABLE> = 268435456;

        <android.view.View: int PFLAG3_OVERLAPPING_RENDERING_FORCED_VALUE> = 8388608;

        <android.view.View: int PFLAG3_NO_REVEAL_ON_FOCUS> = 67108864;

        <android.view.View: int PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT> = 134217728;

        <android.view.View: int PFLAG3_NESTED_SCROLLING_ENABLED> = 128;

        <android.view.View: int PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT> = 8;

        <android.view.View: int PFLAG3_IS_LAID_OUT> = 4;

        <android.view.View: int PFLAG3_IS_AUTOFILLED> = 65536;

        <android.view.View: int PFLAG3_IMPORTANT_FOR_AUTOFILL_SHIFT> = 19;

        <android.view.View: int PFLAG3_IMPORTANT_FOR_AUTOFILL_MASK> = 7864320;

        <android.view.View: int PFLAG3_HAS_OVERLAPPING_RENDERING_FORCED> = 16777216;

        <android.view.View: int PFLAG3_FOCUSED_BY_DEFAULT> = 262144;

        <android.view.View: int PFLAG3_FITTING_SYSTEM_WINDOWS> = 64;

        <android.view.View: int PFLAG3_FINGER_DOWN> = 131072;

        <android.view.View: int PFLAG3_CLUSTER> = 32768;

        <android.view.View: int PFLAG3_CALLED_SUPER> = 16;

        <android.view.View: int PFLAG3_AUTOFILLID_EXPLICITLY_SET> = 1073741824;

        <android.view.View: int PFLAG3_ASSIST_BLOCKED> = 16384;

        <android.view.View: int PFLAG3_APPLYING_INSETS> = 32;

        <android.view.View: int PFLAG3_AGGREGATED_VISIBLE> = 536870912;

        <android.view.View: int PFLAG3_ACCESSIBILITY_HEADING> = -2147483648;

        <android.view.View: int PFLAG2_VIEW_QUICK_REJECTED> = 268435456;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT> = 10;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_RESOLVED_MASK> = 7168;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT> = 1024;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_RESOLVED> = 512;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_MASK_SHIFT> = 6;

        <android.view.View: int PFLAG2_TEXT_DIRECTION_MASK> = 448;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT> = 17;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK> = 917504;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT> = 131072;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_RESOLVED> = 65536;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT> = 13;

        <android.view.View: int PFLAG2_TEXT_ALIGNMENT_MASK> = 57344;

        <android.view.View: int PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED> = 134217728;

        <android.view.View: int PFLAG2_PADDING_RESOLVED> = 536870912;

        <android.view.View: int PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL> = 16;

        <android.view.View: int PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK> = 48;

        <android.view.View: int PFLAG2_LAYOUT_DIRECTION_RESOLVED> = 32;

        <android.view.View: int PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT> = 2;

        <android.view.View: int PFLAG2_LAYOUT_DIRECTION_MASK> = 12;

        <android.view.View: int PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT> = 20;

        <android.view.View: int PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK> = 7340032;

        <android.view.View: int PFLAG2_HAS_TRANSIENT_STATE> = -2147483648;

        <android.view.View: int PFLAG2_DRAWABLE_RESOLVED> = 1073741824;

        <android.view.View: int PFLAG2_DRAG_HOVERED> = 2;

        <android.view.View: int PFLAG2_DRAG_CAN_ACCEPT> = 1;

        <android.view.View: int PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT> = 23;

        <android.view.View: int PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK> = 25165824;

        <android.view.View: int PFLAG2_ACCESSIBILITY_FOCUSED> = 67108864;

        <android.view.View: int PARENT_SAVE_DISABLED_MASK> = 536870912;

        <android.view.View: int PARENT_SAVE_DISABLED> = 536870912;

        <android.view.View: int OVER_SCROLL_NEVER> = 2;

        <android.view.View: int OVER_SCROLL_IF_CONTENT_SCROLLS> = 1;

        <android.view.View: int OVER_SCROLL_ALWAYS> = 0;

        <android.view.View: int OPTIONAL_FITS_SYSTEM_WINDOWS> = 2048;

        <android.view.View: int NO_ID> = -1;

        <android.view.View: int NOT_FOCUSABLE> = 0;

        <android.view.View: int NAVIGATION_BAR_UNHIDE> = 536870912;

        <android.view.View: int NAVIGATION_BAR_TRANSPARENT> = 32768;

        <android.view.View: int NAVIGATION_BAR_TRANSLUCENT> = -2147483648;

        <android.view.View: int NAVIGATION_BAR_TRANSIENT> = 134217728;

        <android.view.View: int MEASURED_STATE_TOO_SMALL> = 16777216;

        <android.view.View: int MEASURED_STATE_MASK> = -16777216;

        <android.view.View: int MEASURED_SIZE_MASK> = 16777215;

        <android.view.View: int MEASURED_HEIGHT_STATE_SHIFT> = 16;

        <android.view.View: int LONG_CLICKABLE> = 2097152;

        <android.view.View: int LAYOUT_DIRECTION_UNDEFINED> = -1;

        <android.view.View: int LAYOUT_DIRECTION_RTL> = 1;

        <android.view.View: int LAYOUT_DIRECTION_RESOLVED_DEFAULT> = 0;

        <android.view.View: int LAYOUT_DIRECTION_LTR> = 0;

        <android.view.View: int LAYOUT_DIRECTION_LOCALE> = 3;

        <android.view.View: int LAYOUT_DIRECTION_INHERIT> = 2;

        <android.view.View: int LAYOUT_DIRECTION_DEFAULT> = 2;

        <android.view.View: int LAYER_TYPE_SOFTWARE> = 1;

        <android.view.View: int LAYER_TYPE_NONE> = 0;

        <android.view.View: int LAYER_TYPE_HARDWARE> = 2;

        <android.view.View: int LAST_APP_AUTOFILL_ID> = 1073741823;

        <android.view.View: int KEEP_SCREEN_ON> = 67108864;

        <android.view.View: int INVISIBLE> = 4;

        <android.view.View: int IMPORTANT_FOR_CONTENT_CAPTURE_YES_EXCLUDE_DESCENDANTS> = 4;

        <android.view.View: int IMPORTANT_FOR_CONTENT_CAPTURE_YES> = 1;

        <android.view.View: int IMPORTANT_FOR_CONTENT_CAPTURE_NO_EXCLUDE_DESCENDANTS> = 8;

        <android.view.View: int IMPORTANT_FOR_CONTENT_CAPTURE_NO> = 2;

        <android.view.View: int IMPORTANT_FOR_CONTENT_CAPTURE_AUTO> = 0;

        <android.view.View: int IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS> = 4;

        <android.view.View: int IMPORTANT_FOR_AUTOFILL_YES> = 1;

        <android.view.View: int IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS> = 8;

        <android.view.View: int IMPORTANT_FOR_AUTOFILL_NO> = 2;

        <android.view.View: int IMPORTANT_FOR_AUTOFILL_AUTO> = 0;

        <android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_YES> = 1;

        <android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS> = 4;

        <android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_NO> = 2;

        <android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_DEFAULT> = 0;

        <android.view.View: int IMPORTANT_FOR_ACCESSIBILITY_AUTO> = 0;

        <android.view.View: int HAPTIC_FEEDBACK_ENABLED> = 268435456;

        <android.view.View: int GONE> = 8;

        <android.view.View: int FOCUS_UP> = 33;

        <android.view.View: int FOCUS_RIGHT> = 66;

        <android.view.View: int FOCUS_LEFT> = 17;

        <android.view.View: int FOCUS_FORWARD> = 2;

        <android.view.View: int FOCUS_DOWN> = 130;

        <android.view.View: int FOCUS_BACKWARD> = 1;

        <android.view.View: int FOCUSABLE_MASK> = 17;

        <android.view.View: int FOCUSABLE_IN_TOUCH_MODE> = 262144;

        <android.view.View: int FOCUSABLE_AUTO> = 16;

        <android.view.View: int FOCUSABLES_TOUCH_MODE> = 1;

        <android.view.View: int FOCUSABLES_ALL> = 0;

        <android.view.View: int FOCUSABLE> = 1;

        <android.view.View: int FITS_SYSTEM_WINDOWS> = 2;

        <android.view.View: int FIND_VIEWS_WITH_TEXT> = 1;

        <android.view.View: int FIND_VIEWS_WITH_CONTENT_DESCRIPTION> = 2;

        <android.view.View: int FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS> = 4;

        <android.view.View: int FILTER_TOUCHES_WHEN_OBSCURED> = 1024;

        <android.view.View: int FADING_EDGE_VERTICAL> = 8192;

        <android.view.View: int FADING_EDGE_NONE> = 0;

        <android.view.View: int FADING_EDGE_MASK> = 12288;

        <android.view.View: int FADING_EDGE_HORIZONTAL> = 4096;

        <android.view.View: int ENABLED_MASK> = 32;

        <android.view.View: int ENABLED> = 0;

        <android.view.View: int DUPLICATE_PARENT_STATE> = 4194304;

        <android.view.View: int DRAW_MASK> = 128;

        <android.view.View: int DRAWING_CACHE_QUALITY_MASK> = 1572864;

        <android.view.View: int DRAWING_CACHE_QUALITY_LOW> = 524288;

        <android.view.View: int DRAWING_CACHE_QUALITY_HIGH> = 1048576;

        <android.view.View: int DRAWING_CACHE_QUALITY_AUTO> = 0;

        <android.view.View: int DRAWING_CACHE_ENABLED> = 32768;

        <android.view.View: int DRAG_MASK> = 3;

        <android.view.View: int DRAG_FLAG_OPAQUE> = 512;

        <android.view.View: int DRAG_FLAG_GLOBAL_URI_WRITE> = 2;

        <android.view.View: int DRAG_FLAG_GLOBAL_URI_READ> = 1;

        <android.view.View: int DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION> = 128;

        <android.view.View: int DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION> = 64;

        <android.view.View: int DRAG_FLAG_GLOBAL> = 256;

        <android.view.View: int DISABLED> = 32;

        <android.view.View: int DEBUG_CORNERS_SIZE_DIP> = 8;

        <android.view.View: boolean DEBUG_CONTENT_CAPTURE> = 0;

        <android.view.View: boolean DBG> = 0;

        <android.view.View: int CONTEXT_CLICKABLE> = 8388608;

        <android.view.View: java.lang.String CONTENT_CAPTURE_LOG_TAG> = "View.ContentCapture";

        <android.view.View: int CLICKABLE> = 16384;

        <android.view.View: int AUTOFILL_TYPE_TOGGLE> = 2;

        <android.view.View: int AUTOFILL_TYPE_TEXT> = 1;

        <android.view.View: int AUTOFILL_TYPE_NONE> = 0;

        <android.view.View: int AUTOFILL_TYPE_LIST> = 3;

        <android.view.View: int AUTOFILL_TYPE_DATE> = 4;

        <android.view.View: java.lang.String AUTOFILL_LOG_TAG> = "View.Autofill";

        <android.view.View: java.lang.String AUTOFILL_HINT_USERNAME> = "username";

        <android.view.View: java.lang.String AUTOFILL_HINT_POSTAL_CODE> = "postalCode";

        <android.view.View: java.lang.String AUTOFILL_HINT_POSTAL_ADDRESS> = "postalAddress";

        <android.view.View: java.lang.String AUTOFILL_HINT_PHONE> = "phone";

        <android.view.View: java.lang.String AUTOFILL_HINT_PASSWORD> = "password";

        <android.view.View: java.lang.String AUTOFILL_HINT_NAME> = "name";

        <android.view.View: java.lang.String AUTOFILL_HINT_EMAIL_ADDRESS> = "emailAddress";

        <android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_SECURITY_CODE> = "creditCardSecurityCode";

        <android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_NUMBER> = "creditCardNumber";

        <android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_YEAR> = "creditCardExpirationYear";

        <android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_MONTH> = "creditCardExpirationMonth";

        <android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DAY> = "creditCardExpirationDay";

        <android.view.View: java.lang.String AUTOFILL_HINT_CREDIT_CARD_EXPIRATION_DATE> = "creditCardExpirationDate";

        <android.view.View: int AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS> = 1;

        <android.view.View: int ALL_RTL_PROPERTIES_RESOLVED> = 1610678816;

        <android.view.View: int ACCESSIBILITY_LIVE_REGION_POLITE> = 1;

        <android.view.View: int ACCESSIBILITY_LIVE_REGION_NONE> = 0;

        <android.view.View: int ACCESSIBILITY_LIVE_REGION_DEFAULT> = 0;

        <android.view.View: int ACCESSIBILITY_LIVE_REGION_ASSERTIVE> = 2;

        <android.view.View: int ACCESSIBILITY_CURSOR_POSITION_UNDEFINED> = -1;

        <android.view.View: boolean DEBUG_DRAW> = 0;

        <android.view.View: boolean sDebugViewAttributes> = 0;

        $r0 = newarray (int)[1];

        $r0[0] = 16844136;

        <android.view.View: int[] AUTOFILL_HIGHLIGHT_ATTR> = $r0;

        <android.view.View: boolean sCompatibilityDone> = 0;

        <android.view.View: boolean sUseBrokenMakeMeasureSpec> = 0;

        <android.view.View: boolean sUseZeroUnspecifiedMeasureSpec> = 0;

        <android.view.View: boolean sIgnoreMeasureCache> = 0;

        <android.view.View: boolean sAlwaysRemeasureExactly> = 0;

        <android.view.View: boolean sTextureViewIgnoresDrawableSetters> = 0;

        $r1 = newarray (int)[3];

        $r1[0] = 0;

        $r1[1] = 4;

        $r1[2] = 8;

        <android.view.View: int[] VISIBILITY_FLAGS> = $r1;

        $r2 = newarray (int)[3];

        $r2[0] = 0;

        $r2[1] = 524288;

        $r2[2] = 1048576;

        <android.view.View: int[] DRAWING_CACHE_QUALITY_FLAGS> = $r2;

        $r3 = staticinvoke <android.util.StateSet: int[] get(int)>(0);

        <android.view.View: int[] EMPTY_STATE_SET> = $r3;

        $r4 = staticinvoke <android.util.StateSet: int[] get(int)>(1);

        <android.view.View: int[] WINDOW_FOCUSED_STATE_SET> = $r4;

        $r5 = staticinvoke <android.util.StateSet: int[] get(int)>(2);

        <android.view.View: int[] SELECTED_STATE_SET> = $r5;

        $r6 = staticinvoke <android.util.StateSet: int[] get(int)>(3);

        <android.view.View: int[] SELECTED_WINDOW_FOCUSED_STATE_SET> = $r6;

        $r7 = staticinvoke <android.util.StateSet: int[] get(int)>(4);

        <android.view.View: int[] FOCUSED_STATE_SET> = $r7;

        $r8 = staticinvoke <android.util.StateSet: int[] get(int)>(5);

        <android.view.View: int[] FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r8;

        $r9 = staticinvoke <android.util.StateSet: int[] get(int)>(6);

        <android.view.View: int[] FOCUSED_SELECTED_STATE_SET> = $r9;

        $r10 = staticinvoke <android.util.StateSet: int[] get(int)>(7);

        <android.view.View: int[] FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r10;

        $r11 = staticinvoke <android.util.StateSet: int[] get(int)>(8);

        <android.view.View: int[] ENABLED_STATE_SET> = $r11;

        $r12 = staticinvoke <android.util.StateSet: int[] get(int)>(9);

        <android.view.View: int[] ENABLED_WINDOW_FOCUSED_STATE_SET> = $r12;

        $r13 = staticinvoke <android.util.StateSet: int[] get(int)>(10);

        <android.view.View: int[] ENABLED_SELECTED_STATE_SET> = $r13;

        $r14 = staticinvoke <android.util.StateSet: int[] get(int)>(11);

        <android.view.View: int[] ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r14;

        $r15 = staticinvoke <android.util.StateSet: int[] get(int)>(12);

        <android.view.View: int[] ENABLED_FOCUSED_STATE_SET> = $r15;

        $r16 = staticinvoke <android.util.StateSet: int[] get(int)>(13);

        <android.view.View: int[] ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r16;

        $r17 = staticinvoke <android.util.StateSet: int[] get(int)>(14);

        <android.view.View: int[] ENABLED_FOCUSED_SELECTED_STATE_SET> = $r17;

        $r18 = staticinvoke <android.util.StateSet: int[] get(int)>(15);

        <android.view.View: int[] ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r18;

        $r19 = staticinvoke <android.util.StateSet: int[] get(int)>(16);

        <android.view.View: int[] PRESSED_STATE_SET> = $r19;

        $r20 = staticinvoke <android.util.StateSet: int[] get(int)>(17);

        <android.view.View: int[] PRESSED_WINDOW_FOCUSED_STATE_SET> = $r20;

        $r21 = staticinvoke <android.util.StateSet: int[] get(int)>(18);

        <android.view.View: int[] PRESSED_SELECTED_STATE_SET> = $r21;

        $r22 = staticinvoke <android.util.StateSet: int[] get(int)>(19);

        <android.view.View: int[] PRESSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r22;

        $r23 = staticinvoke <android.util.StateSet: int[] get(int)>(20);

        <android.view.View: int[] PRESSED_FOCUSED_STATE_SET> = $r23;

        $r24 = staticinvoke <android.util.StateSet: int[] get(int)>(21);

        <android.view.View: int[] PRESSED_FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r24;

        $r25 = staticinvoke <android.util.StateSet: int[] get(int)>(22);

        <android.view.View: int[] PRESSED_FOCUSED_SELECTED_STATE_SET> = $r25;

        $r26 = staticinvoke <android.util.StateSet: int[] get(int)>(23);

        <android.view.View: int[] PRESSED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r26;

        $r27 = staticinvoke <android.util.StateSet: int[] get(int)>(24);

        <android.view.View: int[] PRESSED_ENABLED_STATE_SET> = $r27;

        $r28 = staticinvoke <android.util.StateSet: int[] get(int)>(25);

        <android.view.View: int[] PRESSED_ENABLED_WINDOW_FOCUSED_STATE_SET> = $r28;

        $r29 = staticinvoke <android.util.StateSet: int[] get(int)>(26);

        <android.view.View: int[] PRESSED_ENABLED_SELECTED_STATE_SET> = $r29;

        $r30 = staticinvoke <android.util.StateSet: int[] get(int)>(27);

        <android.view.View: int[] PRESSED_ENABLED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r30;

        $r31 = staticinvoke <android.util.StateSet: int[] get(int)>(28);

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_STATE_SET> = $r31;

        $r32 = staticinvoke <android.util.StateSet: int[] get(int)>(29);

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_WINDOW_FOCUSED_STATE_SET> = $r32;

        $r33 = staticinvoke <android.util.StateSet: int[] get(int)>(30);

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_STATE_SET> = $r33;

        $r34 = staticinvoke <android.util.StateSet: int[] get(int)>(31);

        <android.view.View: int[] PRESSED_ENABLED_FOCUSED_SELECTED_WINDOW_FOCUSED_STATE_SET> = $r34;

        $i0 = staticinvoke <android.graphics.Color: int rgb(int,int,int)>(63, 127, 255);

        <android.view.View: int DEBUG_CORNERS_COLOR> = $i0;

        $r35 = <android.view._$$Lambda$Y3lG3v_J32_xL0IjMGgNorZjESw: android.view.'-$$Lambda$Y3lG3v_J32-xL0IjMGgNorZjESw' INSTANCE>;

        r66 = (java.util.function.Supplier) $r35;

        $r36 = staticinvoke <java.lang.ThreadLocal: java.lang.ThreadLocal withInitial(java.util.function.Supplier)>(r66);

        <android.view.View: java.lang.ThreadLocal sThreadLocal> = $r36;

        $r37 = newarray (int)[4];

        $r37[0] = 0;

        $r37[1] = 1;

        $r37[2] = 2;

        $r37[3] = 3;

        <android.view.View: int[] LAYOUT_DIRECTION_FLAGS> = $r37;

        $r38 = newarray (int)[8];

        $r38[0] = 0;

        $r38[1] = 64;

        $r38[2] = 128;

        $r38[3] = 192;

        $r38[4] = 256;

        $r38[5] = 320;

        $r38[6] = 384;

        $r38[7] = 448;

        <android.view.View: int[] PFLAG2_TEXT_DIRECTION_FLAGS> = $r38;

        $r39 = newarray (int)[7];

        $r39[0] = 0;

        $r39[1] = 8192;

        $r39[2] = 16384;

        $r39[3] = 24576;

        $r39[4] = 32768;

        $r39[5] = 40960;

        $r39[6] = 49152;

        <android.view.View: int[] PFLAG2_TEXT_ALIGNMENT_FLAGS> = $r39;

        r53 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke r53.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        <android.view.View: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId> = r53;

        r54 = new android.view.View$2;

        specialinvoke r54.<android.view.View$2: void <init>(java.lang.String)>("alpha");

        <android.view.View: android.util.Property ALPHA> = r54;

        r55 = new android.view.View$3;

        specialinvoke r55.<android.view.View$3: void <init>(java.lang.String)>("translationX");

        <android.view.View: android.util.Property TRANSLATION_X> = r55;

        r56 = new android.view.View$4;

        specialinvoke r56.<android.view.View$4: void <init>(java.lang.String)>("translationY");

        <android.view.View: android.util.Property TRANSLATION_Y> = r56;

        r57 = new android.view.View$5;

        specialinvoke r57.<android.view.View$5: void <init>(java.lang.String)>("translationZ");

        <android.view.View: android.util.Property TRANSLATION_Z> = r57;

        r58 = new android.view.View$6;

        specialinvoke r58.<android.view.View$6: void <init>(java.lang.String)>("x");

        <android.view.View: android.util.Property X> = r58;

        r59 = new android.view.View$7;

        specialinvoke r59.<android.view.View$7: void <init>(java.lang.String)>("y");

        <android.view.View: android.util.Property Y> = r59;

        r60 = new android.view.View$8;

        specialinvoke r60.<android.view.View$8: void <init>(java.lang.String)>("z");

        <android.view.View: android.util.Property Z> = r60;

        r61 = new android.view.View$9;

        specialinvoke r61.<android.view.View$9: void <init>(java.lang.String)>("rotation");

        <android.view.View: android.util.Property ROTATION> = r61;

        r62 = new android.view.View$10;

        specialinvoke r62.<android.view.View$10: void <init>(java.lang.String)>("rotationX");

        <android.view.View: android.util.Property ROTATION_X> = r62;

        r63 = new android.view.View$11;

        specialinvoke r63.<android.view.View$11: void <init>(java.lang.String)>("rotationY");

        <android.view.View: android.util.Property ROTATION_Y> = r63;

        r64 = new android.view.View$12;

        specialinvoke r64.<android.view.View$12: void <init>(java.lang.String)>("scaleX");

        <android.view.View: android.util.Property SCALE_X> = r64;

        r65 = new android.view.View$13;

        specialinvoke r65.<android.view.View$13: void <init>(java.lang.String)>("scaleY");

        <android.view.View: android.util.Property SCALE_Y> = r65;

        return;
    }

    void <init>()
    {
        android.view.View r0;
        android.view.ViewOutlineProvider $r1;
        boolean $z0;
        java.lang.Class $r2;
        java.lang.String $r3;
        android.view.ViewAnimationHostBridge $r4;
        android.graphics.RenderNode $r5;
        android.view.InputEventConsistencyVerifier $r6, r7;

        r0 := @this: android.view.View;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        r0.<android.view.View: boolean mRecreateDisplayList> = 0;

        r0.<android.view.View: int mID> = -1;

        r0.<android.view.View: int mAutofillViewId> = -1;

        r0.<android.view.View: int mAccessibilityViewId> = -1;

        r0.<android.view.View: int mAccessibilityCursorPosition> = -1;

        r0.<android.view.View: java.lang.Object mTag> = null;

        r0.<android.view.View: int mTransientStateCount> = 0;

        r0.<android.view.View: android.graphics.Rect mClipBounds> = null;

        r0.<android.view.View: int mPaddingLeft> = 0;

        r0.<android.view.View: int mPaddingRight> = 0;

        r0.<android.view.View: int mLabelForId> = -1;

        r0.<android.view.View: int mAccessibilityTraversalBeforeId> = -1;

        r0.<android.view.View: int mAccessibilityTraversalAfterId> = -1;

        r0.<android.view.View: boolean mLeftPaddingDefined> = 0;

        r0.<android.view.View: boolean mRightPaddingDefined> = 0;

        r0.<android.view.View: int mOldWidthMeasureSpec> = -2147483648;

        r0.<android.view.View: int mOldHeightMeasureSpec> = -2147483648;

        r0.<android.view.View: float mLongClickX> = #NaNF;

        r0.<android.view.View: float mLongClickY> = #NaNF;

        r0.<android.view.View: int[] mDrawableState> = null;

        $r1 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BACKGROUND>;

        r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider> = $r1;

        r0.<android.view.View: int mNextFocusLeftId> = -1;

        r0.<android.view.View: int mNextFocusRightId> = -1;

        r0.<android.view.View: int mNextFocusUpId> = -1;

        r0.<android.view.View: int mNextFocusDownId> = -1;

        r0.<android.view.View: int mNextFocusForwardId> = -1;

        r0.<android.view.View: int mNextClusterForwardId> = -1;

        r0.<android.view.View: boolean mDefaultFocusHighlightEnabled> = 1;

        r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap> = null;

        r0.<android.view.View: android.view.TouchDelegate mTouchDelegate> = null;

        r0.<android.view.View: boolean mHoveringTouchDelegate> = 0;

        r0.<android.view.View: int mDrawingCacheBackgroundColor> = 0;

        r0.<android.view.View: android.view.ViewPropertyAnimator mAnimator> = null;

        r0.<android.view.View: int mLayerType> = 0;

        $z0 = staticinvoke <android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()>();

        if $z0 == 0 goto label1;

        $r6 = new android.view.InputEventConsistencyVerifier;

        specialinvoke $r6.<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int)>(r0, 0);

        r7 = $r6;

        goto label2;

     label1:
        r7 = null;

     label2:
        r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier> = r7;

        r0.<android.view.View: int mSourceLayoutId> = 0;

        r0.<android.view.View: int mUnbufferedInputSource> = 0;

        r0.<android.view.View: android.content.res.Resources mResources> = null;

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = new android.view.ViewAnimationHostBridge;

        specialinvoke $r4.<android.view.ViewAnimationHostBridge: void <init>(android.view.View)>(r0);

        $r5 = staticinvoke <android.graphics.RenderNode: android.graphics.RenderNode create(java.lang.String,android.graphics.RenderNode$AnimationHost)>($r3, $r4);

        r0.<android.view.View: android.graphics.RenderNode mRenderNode> = $r5;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.view.View r0;
        android.content.Context r1;
        int i0, $i1, $i2;
        android.view.ViewOutlineProvider $r2;
        boolean $z0, $z1, $z2, z3, z4, z5, z6, z7, z8, z9, z10, z11, z12, z13, z14, z15, z16, z17, z18, z19, z20, z21;
        float $f0;
        java.lang.Class $r3;
        java.lang.String $r4;
        android.view.ViewAnimationHostBridge $r5;
        android.graphics.RenderNode $r6;
        android.content.pm.ApplicationInfo $r7;
        android.content.res.Resources $r8, r11;
        android.view.InputEventConsistencyVerifier $r9, r10;
        android.view.ViewConfiguration r12;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        r0.<android.view.View: boolean mRecreateDisplayList> = 0;

        r0.<android.view.View: int mID> = -1;

        r0.<android.view.View: int mAutofillViewId> = -1;

        r0.<android.view.View: int mAccessibilityViewId> = -1;

        r0.<android.view.View: int mAccessibilityCursorPosition> = -1;

        r0.<android.view.View: java.lang.Object mTag> = null;

        r0.<android.view.View: int mTransientStateCount> = 0;

        r0.<android.view.View: android.graphics.Rect mClipBounds> = null;

        r0.<android.view.View: int mPaddingLeft> = 0;

        r0.<android.view.View: int mPaddingRight> = 0;

        r0.<android.view.View: int mLabelForId> = -1;

        r0.<android.view.View: int mAccessibilityTraversalBeforeId> = -1;

        r0.<android.view.View: int mAccessibilityTraversalAfterId> = -1;

        r0.<android.view.View: boolean mLeftPaddingDefined> = 0;

        r0.<android.view.View: boolean mRightPaddingDefined> = 0;

        r0.<android.view.View: int mOldWidthMeasureSpec> = -2147483648;

        r0.<android.view.View: int mOldHeightMeasureSpec> = -2147483648;

        r0.<android.view.View: float mLongClickX> = #NaNF;

        r0.<android.view.View: float mLongClickY> = #NaNF;

        r0.<android.view.View: int[] mDrawableState> = null;

        $r2 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BACKGROUND>;

        r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider> = $r2;

        r0.<android.view.View: int mNextFocusLeftId> = -1;

        r0.<android.view.View: int mNextFocusRightId> = -1;

        r0.<android.view.View: int mNextFocusUpId> = -1;

        r0.<android.view.View: int mNextFocusDownId> = -1;

        r0.<android.view.View: int mNextFocusForwardId> = -1;

        r0.<android.view.View: int mNextClusterForwardId> = -1;

        r0.<android.view.View: boolean mDefaultFocusHighlightEnabled> = 1;

        r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap> = null;

        r0.<android.view.View: android.view.TouchDelegate mTouchDelegate> = null;

        r0.<android.view.View: boolean mHoveringTouchDelegate> = 0;

        r0.<android.view.View: int mDrawingCacheBackgroundColor> = 0;

        r0.<android.view.View: android.view.ViewPropertyAnimator mAnimator> = null;

        r0.<android.view.View: int mLayerType> = 0;

        $z0 = staticinvoke <android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()>();

        if $z0 == 0 goto label01;

        $r9 = new android.view.InputEventConsistencyVerifier;

        specialinvoke $r9.<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int)>(r0, 0);

        r10 = $r9;

        goto label02;

     label01:
        r10 = null;

     label02:
        r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier> = r10;

        r0.<android.view.View: int mSourceLayoutId> = 0;

        r0.<android.view.View: int mUnbufferedInputSource> = 0;

        r0.<android.view.View: android.content.Context mContext> = r1;

        r11 = null;

        if r1 == null goto label03;

        r11 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

     label03:
        r0.<android.view.View: android.content.res.Resources mResources> = r11;

        r0.<android.view.View: int mViewFlags> = 402653200;

        r0.<android.view.View: int mPrivateFlags2> = 140296;

        r12 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        $i1 = virtualinvoke r12.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        r0.<android.view.View: int mTouchSlop> = $i1;

        $f0 = virtualinvoke r12.<android.view.ViewConfiguration: float getScaledAmbiguousGestureMultiplier()>();

        r0.<android.view.View: float mAmbiguousGestureMultiplier> = $f0;

        virtualinvoke r0.<android.view.View: void setOverScrollMode(int)>(1);

        r0.<android.view.View: int mUserPaddingStart> = -2147483648;

        r0.<android.view.View: int mUserPaddingEnd> = -2147483648;

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = new android.view.ViewAnimationHostBridge;

        specialinvoke $r5.<android.view.ViewAnimationHostBridge: void <init>(android.view.View)>(r0);

        $r6 = staticinvoke <android.graphics.RenderNode: android.graphics.RenderNode create(java.lang.String,android.graphics.RenderNode$AnimationHost)>($r4, $r5);

        r0.<android.view.View: android.graphics.RenderNode mRenderNode> = $r6;

        $z1 = <android.view.View: boolean sCompatibilityDone>;

        if $z1 != 0 goto label42;

        if r1 == null goto label42;

        $r7 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i0 = $r7.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if i0 > 17 goto label04;

        z3 = 1;

        goto label05;

     label04:
        z3 = 0;

     label05:
        <android.view.View: boolean sUseBrokenMakeMeasureSpec> = z3;

        if i0 >= 19 goto label06;

        z4 = 1;

        goto label07;

     label06:
        z4 = 0;

     label07:
        <android.view.View: boolean sIgnoreMeasureCache> = z4;

        if i0 >= 23 goto label08;

        z5 = 1;

        goto label09;

     label08:
        z5 = 0;

     label09:
        <android.graphics.Canvas: boolean sCompatibilityRestore> = z5;

        if i0 >= 26 goto label10;

        z6 = 1;

        goto label11;

     label10:
        z6 = 0;

     label11:
        <android.graphics.Canvas: boolean sCompatibilitySetBitmap> = z6;

        staticinvoke <android.graphics.Canvas: void setCompatibilityVersion(int)>(i0);

        if i0 >= 23 goto label12;

        z7 = 1;

        goto label13;

     label12:
        z7 = 0;

     label13:
        <android.view.View: boolean sUseZeroUnspecifiedMeasureSpec> = z7;

        if i0 > 23 goto label14;

        z8 = 1;

        goto label15;

     label14:
        z8 = 0;

     label15:
        <android.view.View: boolean sAlwaysRemeasureExactly> = z8;

        if i0 > 23 goto label16;

        z9 = 1;

        goto label17;

     label16:
        z9 = 0;

     label17:
        <android.view.View: boolean sTextureViewIgnoresDrawableSetters> = z9;

        if i0 < 24 goto label18;

        z10 = 1;

        goto label19;

     label18:
        z10 = 0;

     label19:
        <android.view.View: boolean sPreserveMarginParamsInLayoutParamConversion> = z10;

        if i0 >= 24 goto label20;

        z11 = 1;

        goto label21;

     label20:
        z11 = 0;

     label21:
        <android.view.View: boolean sCascadedDragDrop> = z11;

        if i0 >= 26 goto label22;

        z12 = 1;

        goto label23;

     label22:
        z12 = 0;

     label23:
        <android.view.View: boolean sHasFocusableExcludeAutoFocusable> = z12;

        if i0 >= 26 goto label24;

        z13 = 1;

        goto label25;

     label24:
        z13 = 0;

     label25:
        <android.view.View: boolean sAutoFocusableOffUIThreadWontNotifyParents> = z13;

        $r8 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z2 = virtualinvoke $r8.<android.content.res.Resources: boolean getBoolean(int)>(17891569);

        <android.view.View: boolean sUseDefaultFocusHighlight> = $z2;

        if i0 < 28 goto label26;

        z14 = 1;

        goto label27;

     label26:
        z14 = 0;

     label27:
        <android.view.View: boolean sThrowOnInvalidFloatProperties> = z14;

        if i0 >= 28 goto label28;

        z15 = 1;

        goto label29;

     label28:
        z15 = 0;

     label29:
        <android.view.View: boolean sCanFocusZeroSized> = z15;

        if i0 >= 28 goto label30;

        z16 = 1;

        goto label31;

     label30:
        z16 = 0;

     label31:
        <android.view.View: boolean sAlwaysAssignFocus> = z16;

        if i0 >= 28 goto label32;

        z17 = 1;

        goto label33;

     label32:
        z17 = 0;

     label33:
        <android.view.View: boolean sAcceptZeroSizeDragShadow> = z17;

        $i2 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if $i2 != 2 goto label35;

        if i0 >= 30 goto label34;

        goto label35;

     label34:
        z18 = 0;

        goto label36;

     label35:
        z18 = 1;

     label36:
        <android.view.View: boolean sBrokenInsetsDispatch> = z18;

        if i0 >= 29 goto label37;

        z19 = 1;

        goto label38;

     label37:
        z19 = 0;

     label38:
        <android.view.View: boolean sBrokenWindowBackground> = z19;

        if i0 < 29 goto label39;

        z20 = 1;

        goto label40;

     label39:
        z20 = 0;

     label40:
        <android.graphics.drawable.GradientDrawable: boolean sWrapNegativeAngleMeasurements> = z20;

        z21 = 0;

        if i0 >= 30 goto label41;

        z21 = 1;

     label41:
        <android.view.View: boolean sForceLayoutWhenInsetsChanged> = z21;

        <android.view.View: boolean sCompatibilityDone> = 1;

     label42:
        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.view.View r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.view.View r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.view.View r0;
        android.content.Context r1;
        android.content.res.TypedArray r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, i58, i59, i60, i61, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78, i79, i80, i81, i82, i83, i84, i85, i86, i87, i88, i89, i90, i91, i92, i93, i96, i97, i98, i99, i100, i102, i103, i104, i105, i106, i107;
        int[] $r3, $r5, $r40, $r41, $r42, $r47, $r48;
        android.content.res.Resources$Theme $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, z33, z34, z35, z36, z37, z38, z39, z40, z41, z42, z43, $z45, z46, $z47, $z48;
        android.view.View$ForegroundInfo $r6, r55, r62;
        android.util.TypedValue $r8, $r10, $r12, $r13, $r14, $r19, $r20, $r22, $r56;
        android.graphics.RenderNode $r9;
        java.lang.String $r11, $r16, $r17, $r39, $r43, r57, r61;
        java.lang.Object $r15;
        java.lang.CharSequence $r21, $r49, r68;
        android.view.PointerIcon $r23, $r25;
        android.content.res.Resources $r24, $r51;
        android.graphics.BlendMode $r26, $r30;
        android.content.res.ColorStateList $r27, $r35;
        android.view.View$TintInfo $r28, $r29, $r31, $r33, $r34, $r36, r64, r65;
        android.animation.StateListAnimator $r38;
        float $f0, $f1, $f2, f3, f4, f5, f6, f7, f8, f9, f10, f11;
        android.graphics.drawable.Drawable $r46, r54;
        android.content.res.Resources$NotFoundException $r50;
        android.util.AttributeSet r52;
        android.content.pm.ApplicationInfo r53;
        java.lang.Object[] r58;
        java.lang.String[] r60;
        java.lang.IllegalArgumentException r63;
        android.view.View$DeclaredOnClickListener r66;
        java.lang.IllegalStateException r67;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.Context;

        r52 := @parameter1: android.util.AttributeSet;

        i58 := @parameter2: int;

        i59 := @parameter3: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context)>(r1);

        $i2 = staticinvoke <android.content.res.Resources: int getAttributeSetSourceResId(android.util.AttributeSet)>(r52);

        r0.<android.view.View: int mSourceLayoutId> = $i2;

        $r3 = <com.android.internal.R$styleable: int[] View>;

        r2 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r52, $r3, i58, i59);

        $r4 = virtualinvoke r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        specialinvoke r0.<android.view.View: void retrieveExplicitStyle(android.content.res.Resources$Theme,android.util.AttributeSet)>($r4, r52);

        $r5 = <com.android.internal.R$styleable: int[] View>;

        virtualinvoke r0.<android.view.View: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>(r1, $r5, r52, r2, i58, i59);

        $z0 = <android.view.View: boolean sDebugViewAttributes>;

        if $z0 == 0 goto label001;

        specialinvoke r0.<android.view.View: void saveAttributeData(android.util.AttributeSet,android.content.res.TypedArray)>(r52, r2);

     label001:
        z33 = 0;

        i60 = 0;

        i61 = r0.<android.view.View: int mOverScrollMode>;

        z34 = 0;

        z35 = 0;

        z36 = 0;

        z37 = 0;

        r53 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i62 = -1;

        i0 = r53.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        i63 = -1;

        i1 = virtualinvoke r2.<android.content.res.TypedArray: int getIndexCount()>();

        i64 = 0 | 16;

        f3 = 0.0F;

        f4 = 0.0F;

        f5 = 0.0F;

        f6 = 0.0F;

        f7 = 0.0F;

        f8 = 0.0F;

        f9 = 0.0F;

        f10 = 1.0F;

        f11 = 1.0F;

        z38 = 0;

        z39 = 0;

        i65 = -1;

        i66 = -1;

        i67 = 0;

        i68 = 0;

        i69 = -2147483648;

        i70 = -1;

        z40 = 0;

        i71 = 0 | 16;

        i72 = -1;

        i73 = -2147483648;

        i74 = -1;

        r54 = null;

        i75 = 0;

     label002:
        if i75 >= i1 goto label137;

        i76 = virtualinvoke r2.<android.content.res.TypedArray: int getIndex(int)>(i75);

        tableswitch(i76)
        {
            case 8: goto label133;
            case 9: goto label132;
            case 10: goto label131;
            case 11: goto label130;
            case 12: goto label129;
            case 13: goto label128;
            case 14: goto label127;
            case 15: goto label126;
            case 16: goto label125;
            case 17: goto label124;
            case 18: goto label123;
            case 19: goto label121;
            case 20: goto label120;
            case 21: goto label119;
            case 22: goto label118;
            case 23: goto label117;
            case 24: goto label115;
            case 25: goto label003;
            case 26: goto label114;
            case 27: goto label113;
            case 28: goto label112;
            case 29: goto label111;
            case 30: goto label110;
            case 31: goto label109;
            case 32: goto label108;
            case 33: goto label107;
            case 34: goto label106;
            case 35: goto label104;
            case 36: goto label103;
            case 37: goto label102;
            case 38: goto label100;
            case 39: goto label099;
            case 40: goto label098;
            case 41: goto label096;
            case 42: goto label095;
            case 43: goto label093;
            case 44: goto label092;
            case 45: goto label003;
            case 46: goto label003;
            case 47: goto label003;
            case 48: goto label091;
            case 49: goto label090;
            case 50: goto label089;
            case 51: goto label088;
            case 52: goto label087;
            case 53: goto label086;
            case 54: goto label085;
            case 55: goto label084;
            case 56: goto label083;
            case 57: goto label082;
            case 58: goto label081;
            case 59: goto label080;
            case 60: goto label079;
            case 61: goto label078;
            case 62: goto label077;
            case 63: goto label076;
            case 64: goto label075;
            case 65: goto label074;
            case 66: goto label073;
            case 67: goto label070;
            case 68: goto label067;
            case 69: goto label064;
            case 70: goto label063;
            case 71: goto label062;
            case 72: goto label061;
            case 73: goto label060;
            case 74: goto label059;
            case 75: goto label058;
            case 76: goto label057;
            case 77: goto label055;
            case 78: goto label053;
            case 79: goto label051;
            case 80: goto label049;
            case 81: goto label048;
            case 82: goto label047;
            case 83: goto label046;
            case 84: goto label045;
            case 85: goto label044;
            case 86: goto label041;
            case 87: goto label040;
            case 88: goto label039;
            case 89: goto label038;
            case 90: goto label037;
            case 91: goto label036;
            case 92: goto label035;
            case 93: goto label034;
            case 94: goto label022;
            case 95: goto label020;
            case 96: goto label018;
            case 97: goto label016;
            case 98: goto label014;
            case 99: goto label013;
            case 100: goto label012;
            case 101: goto label011;
            case 102: goto label010;
            case 103: goto label009;
            case 104: goto label003;
            case 105: goto label003;
            case 106: goto label003;
            case 107: goto label003;
            case 108: goto label003;
            case 109: goto label005;
            case 110: goto label004;
            default: goto label003;
        };

     label003:
        goto label135;

     label004:
        $i4 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        virtualinvoke r0.<android.view.View: void setScrollCaptureHint(int)>($i4);

        goto label135;

     label005:
        if i0 >= 23 goto label007;

        $z6 = r0 instanceof android.widget.FrameLayout;

        if $z6 == 0 goto label006;

        goto label007;

     label006:
        goto label135;

     label007:
        $r6 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if $r6 != null goto label008;

        r62 = new android.view.View$ForegroundInfo;

        specialinvoke r62.<android.view.View$ForegroundInfo: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo> = r62;

        goto label008;

     label008:
        r55 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $z3 = staticinvoke <android.view.View$ForegroundInfo: boolean access$100(android.view.View$ForegroundInfo)>(r55);

        $z4 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, $z3);

        staticinvoke <android.view.View$ForegroundInfo: boolean access$102(android.view.View$ForegroundInfo,boolean)>(r55, $z4);

        goto label135;

     label009:
        $r8 = virtualinvoke r2.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i76);

        if $r8 == null goto label018;

        $i5 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        virtualinvoke r0.<android.view.View: void setImportantForContentCapture(int)>($i5);

        goto label018;

     label010:
        $r9 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z8 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 1);

        virtualinvoke $r9.<android.graphics.RenderNode: boolean setForceDarkAllowed(boolean)>($z8);

        goto label135;

     label011:
        $i6 = virtualinvoke r2.<android.content.res.TypedArray: int getColor(int,int)>(i76, -16777216);

        virtualinvoke r0.<android.view.View: void setOutlineAmbientShadowColor(int)>($i6);

        goto label135;

     label012:
        $i7 = virtualinvoke r2.<android.content.res.TypedArray: int getColor(int,int)>(i76, -16777216);

        virtualinvoke r0.<android.view.View: void setOutlineSpotShadowColor(int)>($i7);

        goto label135;

     label013:
        $z10 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        virtualinvoke r0.<android.view.View: void setAccessibilityHeading(boolean)>($z10);

        goto label135;

     label014:
        $r10 = virtualinvoke r2.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i76);

        if $r10 == null goto label015;

        $r11 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.String getString(int)>(i76);

        virtualinvoke r0.<android.view.View: void setAccessibilityPaneTitle(java.lang.CharSequence)>($r11);

        goto label135;

     label015:
        goto label135;

     label016:
        $r12 = virtualinvoke r2.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i76);

        if $r12 == null goto label017;

        $z11 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        virtualinvoke r0.<android.view.View: void setScreenReaderFocusable(boolean)>($z11);

        goto label135;

     label017:
        goto label135;

     label018:
        $r56 = virtualinvoke r2.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i76);

        if $r56 == null goto label019;

        $z7 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 1);

        virtualinvoke r0.<android.view.View: void setDefaultFocusHighlightEnabled(boolean)>($z7);

        goto label135;

     label019:
        goto label135;

     label020:
        $r13 = virtualinvoke r2.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i76);

        if $r13 == null goto label021;

        $i8 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        virtualinvoke r0.<android.view.View: void setImportantForAutofill(int)>($i8);

        goto label135;

     label021:
        goto label135;

     label022:
        $r14 = virtualinvoke r2.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i76);

        if $r14 == null goto label033;

        r57 = null;

        $i9 = virtualinvoke r2.<android.content.res.TypedArray: int getType(int)>(i76);

        if $i9 != 1 goto label027;

        i77 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, 0);

     label023:
        r58 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)>(i76);

     label024:
        goto label026;

     label025:
        $r50 := @caughtexception;

        $r51 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        r57 = virtualinvoke $r51.<android.content.res.Resources: java.lang.String getString(int)>(i77);

        r58 = null;

     label026:
        goto label028;

     label027:
        r57 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.String getString(int)>(i76);

        r58 = null;

     label028:
        if r58 != null goto label030;

        if r57 == null goto label029;

        r58 = virtualinvoke r57.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        goto label030;

     label029:
        r63 = new java.lang.IllegalArgumentException;

        specialinvoke r63.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Could not resolve autofillHints");

        throw r63;

     label030:
        $i10 = lengthof r58;

        r60 = newarray (java.lang.String)[$i10];

        i78 = lengthof r58;

        i79 = 0;

     label031:
        if i79 >= i78 goto label032;

        $r15 = r58[i79];

        r68 = (java.lang.CharSequence) $r15;

        $r16 = interfaceinvoke r68.<java.lang.CharSequence: java.lang.String toString()>();

        $r17 = virtualinvoke $r16.<java.lang.String: java.lang.String trim()>();

        r60[i79] = $r17;

        i79 = i79 + 1;

        goto label031;

     label032:
        virtualinvoke r0.<android.view.View: void setAutofillHints(java.lang.String[])>(r60);

        goto label135;

     label033:
        goto label135;

     label034:
        $r19 = virtualinvoke r2.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i76);

        if $r19 == null goto label135;

        $z12 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 1);

        virtualinvoke r0.<android.view.View: void setFocusedByDefault(boolean)>($z12);

        goto label135;

     label035:
        $i11 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, -1);

        r0.<android.view.View: int mNextClusterForwardId> = $i11;

        goto label135;

     label036:
        $r20 = virtualinvoke r2.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i76);

        if $r20 == null goto label135;

        $z13 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 1);

        virtualinvoke r0.<android.view.View: void setKeyboardNavigationCluster(boolean)>($z13);

        goto label135;

     label037:
        i70 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, -1);

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label038:
        i66 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, -1);

        r0.<android.view.View: int mUserPaddingLeftInitial> = i66;

        r0.<android.view.View: int mUserPaddingRightInitial> = i66;

        z39 = 1;

        z38 = 1;

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label039:
        $r21 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>(i76);

        virtualinvoke r0.<android.view.View: void setTooltipText(java.lang.CharSequence)>($r21);

        goto label135;

     label040:
        $r22 = virtualinvoke r2.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(i76);

        if $r22 == null goto label135;

        $z14 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 1);

        virtualinvoke r0.<android.view.View: void forceHasOverlappingRendering(boolean)>($z14);

        goto label135;

     label041:
        i82 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, 0);

        if i82 == 0 goto label042;

        $r24 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r25 = staticinvoke <android.view.PointerIcon: android.view.PointerIcon load(android.content.res.Resources,int)>($r24, i82);

        virtualinvoke r0.<android.view.View: void setPointerIcon(android.view.PointerIcon)>($r25);

        goto label135;

     label042:
        i83 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 1);

        if i83 == 1 goto label043;

        $r23 = staticinvoke <android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>(r1, i83);

        virtualinvoke r0.<android.view.View: void setPointerIcon(android.view.PointerIcon)>($r23);

     label043:
        goto label135;

     label044:
        $z15 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        if $z15 == 0 goto label135;

        i80 = i71 | 8388608;

        i81 = 8388608 | i64;

        z41 = z33;

        goto label136;

     label045:
        $i12 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        $i13 = $i12 << 8;

        i84 = $i13 & 16128;

        if i84 == 0 goto label135;

        $i14 = r0.<android.view.View: int mPrivateFlags3>;

        $i15 = $i14 | i84;

        r0.<android.view.View: int mPrivateFlags3> = $i15;

        z35 = 1;

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label046:
        $i16 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, -1);

        virtualinvoke r0.<android.view.View: void setAccessibilityTraversalAfter(int)>($i16);

        goto label135;

     label047:
        $i17 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, -1);

        virtualinvoke r0.<android.view.View: void setAccessibilityTraversalBefore(int)>($i17);

        goto label135;

     label048:
        $i18 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(81, 0);

        specialinvoke r0.<android.view.View: void setOutlineProviderFromAttribute(int)>($i18);

        goto label135;

     label049:
        if i0 >= 23 goto label050;

        $z16 = r0 instanceof android.widget.FrameLayout;

        if $z16 == 0 goto label135;

     label050:
        $i19 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, -1);

        $r26 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.BlendMode parseBlendMode(int,android.graphics.BlendMode)>($i19, null);

        virtualinvoke r0.<android.view.View: void setForegroundTintBlendMode(android.graphics.BlendMode)>($r26);

        goto label135;

     label051:
        if i0 >= 23 goto label052;

        $z17 = r0 instanceof android.widget.FrameLayout;

        if $z17 == 0 goto label135;

     label052:
        $r27 = virtualinvoke r2.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(i76);

        virtualinvoke r0.<android.view.View: void setForegroundTintList(android.content.res.ColorStateList)>($r27);

        goto label135;

     label053:
        $r28 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r28 != null goto label054;

        r64 = new android.view.View$TintInfo;

        specialinvoke r64.<android.view.View$TintInfo: void <init>()>();

        r0.<android.view.View: android.view.View$TintInfo mBackgroundTint> = r64;

     label054:
        $r29 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $i20 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(78, -1);

        $r30 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.BlendMode parseBlendMode(int,android.graphics.BlendMode)>($i20, null);

        $r29.<android.view.View$TintInfo: android.graphics.BlendMode mBlendMode> = $r30;

        $r31 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r31.<android.view.View$TintInfo: boolean mHasTintMode> = 1;

        goto label135;

     label055:
        $r33 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r33 != null goto label056;

        r65 = new android.view.View$TintInfo;

        specialinvoke r65.<android.view.View$TintInfo: void <init>()>();

        r0.<android.view.View: android.view.View$TintInfo mBackgroundTint> = r65;

     label056:
        $r34 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r35 = virtualinvoke r2.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(77);

        $r34.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList> = $r35;

        $r36 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r36.<android.view.View$TintInfo: boolean mHasTintList> = 1;

        goto label135;

     label057:
        $i21 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, 0);

        $r38 = staticinvoke <android.animation.AnimatorInflater: android.animation.StateListAnimator loadStateListAnimator(android.content.Context,int)>(r1, $i21);

        virtualinvoke r0.<android.view.View: void setStateListAnimator(android.animation.StateListAnimator)>($r38);

        goto label135;

     label058:
        f6 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(i76, 0.0F);

        z41 = 1;

        i80 = i71;

        i81 = i64;

        goto label136;

     label059:
        $z18 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        virtualinvoke r0.<android.view.View: void setNestedScrollingEnabled(boolean)>($z18);

        goto label135;

     label060:
        $r39 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.String getString(int)>(i76);

        virtualinvoke r0.<android.view.View: void setTransitionName(java.lang.String)>($r39);

        goto label135;

     label061:
        f5 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(i76, 0.0F);

        z41 = 1;

        i80 = i71;

        i81 = i64;

        goto label136;

     label062:
        $i22 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        virtualinvoke r0.<android.view.View: void setAccessibilityLiveRegion(int)>($i22);

        goto label135;

     label063:
        $i23 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, -1);

        virtualinvoke r0.<android.view.View: void setLabelFor(int)>($i23);

        goto label135;

     label064:
        i73 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, -2147483648);

        if i73 == -2147483648 goto label065;

        z42 = 1;

        goto label066;

     label065:
        z42 = 0;

     label066:
        z37 = z42;

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label067:
        i69 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, -2147483648);

        if i69 == -2147483648 goto label068;

        z43 = 1;

        goto label069;

     label068:
        z43 = 0;

     label069:
        z36 = z43;

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label070:
        $i24 = r0.<android.view.View: int mPrivateFlags2>;

        $i25 = $i24 & -61;

        r0.<android.view.View: int mPrivateFlags2> = $i25;

        i85 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, -1);

        if i85 == -1 goto label071;

        $r40 = <android.view.View: int[] LAYOUT_DIRECTION_FLAGS>;

        i86 = $r40[i85];

        goto label072;

     label071:
        i86 = 2;

     label072:
        $i27 = r0.<android.view.View: int mPrivateFlags2>;

        $i26 = i86 << 2;

        $i28 = $i27 | $i26;

        r0.<android.view.View: int mPrivateFlags2> = $i28;

        goto label135;

     label073:
        $i29 = r0.<android.view.View: int mPrivateFlags2>;

        $i30 = $i29 & -57345;

        r0.<android.view.View: int mPrivateFlags2> = $i30;

        i87 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 1);

        $i32 = r0.<android.view.View: int mPrivateFlags2>;

        $r41 = <android.view.View: int[] PFLAG2_TEXT_ALIGNMENT_FLAGS>;

        $i31 = $r41[i87];

        $i33 = $i32 | $i31;

        r0.<android.view.View: int mPrivateFlags2> = $i33;

        goto label135;

     label074:
        $i34 = r0.<android.view.View: int mPrivateFlags2>;

        $i35 = $i34 & -449;

        r0.<android.view.View: int mPrivateFlags2> = $i35;

        i88 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, -1);

        if i88 == -1 goto label135;

        $i37 = r0.<android.view.View: int mPrivateFlags2>;

        $r42 = <android.view.View: int[] PFLAG2_TEXT_DIRECTION_FLAGS>;

        $i36 = $r42[i88];

        $i38 = $i37 | $i36;

        r0.<android.view.View: int mPrivateFlags2> = $i38;

        goto label135;

     label075:
        $i39 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        virtualinvoke r0.<android.view.View: void setImportantForAccessibility(int)>($i39);

        goto label135;

     label076:
        goto label116;

     label077:
        $i40 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        virtualinvoke r0.<android.view.View: void setLayerType(int,android.graphics.Paint)>($i40, null);

        goto label135;

     label078:
        $i41 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, -1);

        r0.<android.view.View: int mNextFocusForwardId> = $i41;

        goto label135;

     label079:
        $i42 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        r0.<android.view.View: int mVerticalScrollbarPosition> = $i42;

        goto label135;

     label080:
        f9 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(i76, 0.0F);

        z41 = 1;

        i80 = i71;

        i81 = i64;

        goto label136;

     label081:
        f8 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(i76, 0.0F);

        z41 = 1;

        i80 = i71;

        i81 = i64;

        goto label136;

     label082:
        f7 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(i76, 0.0F);

        z41 = 1;

        i80 = i71;

        i81 = i64;

        goto label136;

     label083:
        f11 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(i76, 1.0F);

        z41 = 1;

        i80 = i71;

        i81 = i64;

        goto label136;

     label084:
        f10 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(i76, 1.0F);

        z41 = 1;

        i80 = i71;

        i81 = i64;

        goto label136;

     label085:
        f4 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(i76, 0.0F);

        z41 = 1;

        i80 = i71;

        i81 = i64;

        goto label136;

     label086:
        f3 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(i76, 0.0F);

        z41 = 1;

        i80 = i71;

        i81 = i64;

        goto label136;

     label087:
        $f0 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(i76, 0.0F);

        virtualinvoke r0.<android.view.View: void setPivotY(float)>($f0);

        goto label135;

     label088:
        $f1 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(i76, 0.0F);

        virtualinvoke r0.<android.view.View: void setPivotX(float)>($f1);

        goto label135;

     label089:
        $f2 = virtualinvoke r2.<android.content.res.TypedArray: float getFloat(int,float)>(i76, 1.0F);

        virtualinvoke r0.<android.view.View: void setAlpha(float)>($f2);

        goto label135;

     label090:
        $z19 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        if $z19 == 0 goto label135;

        i81 = i64 | 1024;

        i80 = i71 | 1024;

        z41 = z33;

        goto label136;

     label091:
        i61 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 1);

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label092:
        $r43 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.String getString(int)>(i76);

        virtualinvoke r0.<android.view.View: void setContentDescription(java.lang.CharSequence)>($r43);

        goto label135;

     label093:
        $z20 = virtualinvoke r1.<android.content.Context: boolean isRestricted()>();

        if $z20 != 0 goto label094;

        r61 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.String getString(int)>(i76);

        if r61 == null goto label135;

        r66 = new android.view.View$DeclaredOnClickListener;

        specialinvoke r66.<android.view.View$DeclaredOnClickListener: void <init>(android.view.View,java.lang.String)>(r0, r61);

        virtualinvoke r0.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>(r66);

        goto label135;

     label094:
        r67 = new java.lang.IllegalStateException;

        specialinvoke r67.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The android:onClick attribute cannot be used within a restricted context");

        throw r67;

     label095:
        $z21 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 1);

        if $z21 != 0 goto label135;

        i81 = 268435456 | i64;

        i80 = -268435457 & i71;

        z41 = z33;

        goto label136;

     label096:
        $z22 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        if $z22 == 0 goto label097;

        virtualinvoke r0.<android.view.View: void setScrollContainer(boolean)>(1);

     label097:
        z40 = 1;

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label098:
        $z23 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        if $z23 == 0 goto label135;

        i80 = i71 | 67108864;

        i81 = 67108864 | i64;

        z41 = z33;

        goto label136;

     label099:
        $z24 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 1);

        if $z24 != 0 goto label135;

        i81 = 134217728 | i64;

        i80 = -134217729 & i71;

        z41 = z33;

        goto label136;

     label100:
        if i0 >= 23 goto label101;

        $z25 = r0 instanceof android.widget.FrameLayout;

        if $z25 == 0 goto label135;

     label101:
        $i43 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        virtualinvoke r0.<android.view.View: void setForegroundGravity(int)>($i43);

        goto label135;

     label102:
        $i44 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, 0);

        r0.<android.view.View: int mMinHeight> = $i44;

        goto label135;

     label103:
        $i45 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, 0);

        r0.<android.view.View: int mMinWidth> = $i45;

        goto label135;

     label104:
        if i0 >= 23 goto label105;

        $z26 = r0 instanceof android.widget.FrameLayout;

        if $z26 == 0 goto label135;

     label105:
        $r46 = virtualinvoke r2.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(i76);

        virtualinvoke r0.<android.view.View: void setForeground(android.graphics.drawable.Drawable)>($r46);

        goto label135;

     label106:
        $z27 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        if $z27 == 0 goto label135;

        i80 = i71 | 4194304;

        i81 = 4194304 | i64;

        z41 = z33;

        goto label136;

     label107:
        i89 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        if i89 == 0 goto label135;

        $r47 = <android.view.View: int[] DRAWING_CACHE_QUALITY_FLAGS>;

        $i46 = $r47[i89];

        i80 = i71 | $i46;

        i81 = 1572864 | i64;

        z41 = z33;

        goto label136;

     label108:
        $z28 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 1);

        if $z28 != 0 goto label135;

        i80 = i71 | 65536;

        i81 = 65536 | i64;

        z41 = z33;

        goto label136;

     label109:
        $z29 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        if $z29 == 0 goto label135;

        i80 = i71 | 2097152;

        i81 = 2097152 | i64;

        z41 = z33;

        goto label136;

     label110:
        $z30 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        if $z30 == 0 goto label135;

        i81 = i64 | 16384;

        i80 = i71 | 16384;

        z41 = z33;

        goto label136;

     label111:
        $i47 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, -1);

        r0.<android.view.View: int mNextFocusDownId> = $i47;

        goto label135;

     label112:
        $i48 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, -1);

        r0.<android.view.View: int mNextFocusUpId> = $i48;

        goto label135;

     label113:
        $i49 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, -1);

        r0.<android.view.View: int mNextFocusRightId> = $i49;

        goto label135;

     label114:
        $i50 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, -1);

        r0.<android.view.View: int mNextFocusLeftId> = $i50;

        goto label135;

     label115:
        if i0 < 14 goto label116;

        goto label135;

     label116:
        i90 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        if i90 == 0 goto label135;

        i80 = i71 | i90;

        virtualinvoke r0.<android.view.View: void initializeFadingEdgeInternal(android.content.res.TypedArray)>(r2);

        i81 = i64 | 12288;

        z41 = z33;

        goto label136;

     label117:
        i91 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        if i91 == 0 goto label135;

        i80 = i71 | i91;

        z34 = 1;

        i81 = i64 | 768;

        z41 = z33;

        goto label136;

     label118:
        $z31 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        if $z31 == 0 goto label135;

        i81 = i64 | 2;

        i80 = i71 | 2;

        z41 = z33;

        goto label136;

     label119:
        i92 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        if i92 == 0 goto label135;

        $r48 = <android.view.View: int[] VISIBILITY_FLAGS>;

        $i51 = $r48[i92];

        i80 = i71 | $i51;

        i81 = i64 | 12;

        z41 = z33;

        goto label136;

     label120:
        $z32 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i76, 0);

        if $z32 == 0 goto label135;

        i81 = 262161 | i64;

        $i52 = i71 & -17;

        i80 = $i52 | 262145;

        z41 = z33;

        goto label136;

     label121:
        $i53 = i71 & -18;

        $i54 = specialinvoke r0.<android.view.View: int getFocusableAttribute(android.content.res.TypedArray)>(r2);

        i80 = $i53 | $i54;

        $i55 = i80 & 16;

        if $i55 != 0 goto label122;

        i81 = i64 | 17;

        z41 = z33;

        goto label136;

     label122:
        i81 = i64;

        z41 = z33;

        goto label136;

     label123:
        i72 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, -1);

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label124:
        i65 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, -1);

        r0.<android.view.View: int mUserPaddingRightInitial> = i65;

        z39 = 1;

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label125:
        i63 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, -1);

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label126:
        i62 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, -1);

        r0.<android.view.View: int mUserPaddingLeftInitial> = i62;

        z38 = 1;

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label127:
        i74 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(i76, -1);

        r0.<android.view.View: int mUserPaddingLeftInitial> = i74;

        r0.<android.view.View: int mUserPaddingRightInitial> = i74;

        z39 = 1;

        z38 = 1;

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label128:
        r54 = virtualinvoke r2.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(i76);

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label129:
        i68 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i76, 0);

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label130:
        i67 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i76, 0);

        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label131:
        $r49 = virtualinvoke r2.<android.content.res.TypedArray: java.lang.CharSequence getText(int)>(i76);

        r0.<android.view.View: java.lang.Object mTag> = $r49;

        goto label135;

     label132:
        $i56 = virtualinvoke r2.<android.content.res.TypedArray: int getResourceId(int,int)>(i76, -1);

        r0.<android.view.View: int mID> = $i56;

        goto label135;

     label133:
        i60 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(i76, 0);

        if i60 == 0 goto label134;

        $i57 = i60 & 50331648;

        i80 = i71 | $i57;

        i81 = 50331648 | i64;

        z41 = z33;

        goto label136;

     label134:
        i80 = i71;

        i81 = i64;

        z41 = z33;

        goto label136;

     label135:
        z41 = z33;

        i81 = i64;

        i80 = i71;

     label136:
        i75 = i75 + 1;

        i71 = i80;

        i64 = i81;

        z33 = z41;

        goto label002;

     label137:
        virtualinvoke r0.<android.view.View: void setOverScrollMode(int)>(i61);

        r0.<android.view.View: int mUserPaddingStart> = i69;

        r0.<android.view.View: int mUserPaddingEnd> = i73;

        if r54 == null goto label138;

        virtualinvoke r0.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>(r54);

     label138:
        r0.<android.view.View: boolean mLeftPaddingDefined> = z38;

        r0.<android.view.View: boolean mRightPaddingDefined> = z39;

        if i74 < 0 goto label139;

        i93 = i74;

        r0.<android.view.View: int mUserPaddingLeftInitial> = i74;

        r0.<android.view.View: int mUserPaddingRightInitial> = i74;

        i96 = i74;

        i97 = i74;

        i98 = i74;

        goto label143;

     label139:
        if i66 < 0 goto label140;

        i99 = i66;

        i100 = i66;

        r0.<android.view.View: int mUserPaddingLeftInitial> = i66;

        r0.<android.view.View: int mUserPaddingRightInitial> = i66;

        goto label141;

     label140:
        i100 = i65;

        i99 = i62;

     label141:
        if i70 < 0 goto label142;

        i97 = i99;

        i96 = i100;

        i93 = i70;

        i98 = i70;

        goto label143;

     label142:
        i96 = i100;

        i97 = i99;

        i98 = i72;

        i93 = i63;

     label143:
        $z45 = specialinvoke r0.<android.view.View: boolean isRtlCompatibilityMode()>();

        if $z45 == 0 goto label150;

        i102 = i97;

        $z1 = r0.<android.view.View: boolean mLeftPaddingDefined>;

        if $z1 != 0 goto label144;

        i102 = i97;

        if z36 == 0 goto label144;

        i102 = i69;

     label144:
        if i102 < 0 goto label145;

        i103 = i102;

        goto label146;

     label145:
        i103 = r0.<android.view.View: int mUserPaddingLeftInitial>;

     label146:
        r0.<android.view.View: int mUserPaddingLeftInitial> = i103;

        i104 = i96;

        $z2 = r0.<android.view.View: boolean mRightPaddingDefined>;

        if $z2 != 0 goto label147;

        i104 = i96;

        if z37 == 0 goto label147;

        i104 = i73;

     label147:
        if i104 < 0 goto label148;

        i105 = i104;

        goto label149;

     label148:
        i105 = r0.<android.view.View: int mUserPaddingRightInitial>;

     label149:
        r0.<android.view.View: int mUserPaddingRightInitial> = i105;

        goto label154;

     label150:
        if z36 != 0 goto label151;

        z46 = 0;

        if z37 == 0 goto label152;

     label151:
        z46 = 1;

     label152:
        $z47 = r0.<android.view.View: boolean mLeftPaddingDefined>;

        if $z47 == 0 goto label153;

        if z46 != 0 goto label153;

        r0.<android.view.View: int mUserPaddingLeftInitial> = i97;

     label153:
        $z48 = r0.<android.view.View: boolean mRightPaddingDefined>;

        if $z48 == 0 goto label154;

        if z46 != 0 goto label154;

        r0.<android.view.View: int mUserPaddingRightInitial> = i96;

     label154:
        i106 = r0.<android.view.View: int mUserPaddingLeftInitial>;

        if i93 < 0 goto label155;

        goto label156;

     label155:
        i93 = r0.<android.view.View: int mPaddingTop>;

     label156:
        i107 = r0.<android.view.View: int mUserPaddingRightInitial>;

        if i98 < 0 goto label157;

        goto label158;

     label157:
        i98 = r0.<android.view.View: int mPaddingBottom>;

     label158:
        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>(i106, i93, i107, i98);

        if i64 == 0 goto label159;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i71, i64);

     label159:
        if z34 == 0 goto label160;

        virtualinvoke r0.<android.view.View: void initializeScrollbarsInternal(android.content.res.TypedArray)>(r2);

     label160:
        if z35 == 0 goto label161;

        specialinvoke r0.<android.view.View: void initializeScrollIndicatorsInternal()>();

     label161:
        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        if i60 == 0 goto label162;

        virtualinvoke r0.<android.view.View: void recomputePadding()>();

     label162:
        if i67 != 0 goto label164;

        if i68 == 0 goto label163;

        goto label164;

     label163:
        goto label165;

     label164:
        virtualinvoke r0.<android.view.View: void scrollTo(int,int)>(i67, i68);

     label165:
        if z33 == 0 goto label166;

        virtualinvoke r0.<android.view.View: void setTranslationX(float)>(f3);

        virtualinvoke r0.<android.view.View: void setTranslationY(float)>(f4);

        virtualinvoke r0.<android.view.View: void setTranslationZ(float)>(f5);

        virtualinvoke r0.<android.view.View: void setElevation(float)>(f6);

        virtualinvoke r0.<android.view.View: void setRotation(float)>(f7);

        virtualinvoke r0.<android.view.View: void setRotationX(float)>(f8);

        virtualinvoke r0.<android.view.View: void setRotationY(float)>(f9);

        virtualinvoke r0.<android.view.View: void setScaleX(float)>(f10);

        virtualinvoke r0.<android.view.View: void setScaleY(float)>(f11);

        goto label166;

     label166:
        if z40 != 0 goto label167;

        $i3 = i71 & 512;

        if $i3 == 0 goto label167;

        virtualinvoke r0.<android.view.View: void setScrollContainer(boolean)>(1);

     label167:
        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        return;

        catch android.content.res.Resources$NotFoundException from label023 to label024 with label025;
    }

    static boolean access$3100()
    {
        boolean $z0;

        $z0 = <android.view.View: boolean sUseBrokenMakeMeasureSpec>;

        return $z0;
    }

    static void access$3200(android.view.View, int)
    {
        android.view.View r0;
        int i0;

        r0 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.View: void recordGestureClassification(int)>(i0);

        return;
    }

    static boolean access$3302(android.view.View, boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        r0.<android.view.View: boolean mHasPerformedLongPress> = z0;

        return z0;
    }

    static void access$3400(android.view.View, boolean, float, float)
    {
        android.view.View r0;
        boolean z0;
        float f0, f1;

        r0 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        specialinvoke r0.<android.view.View: void setPressed(boolean,float,float)>(z0, f0, f1);

        return;
    }

    static void access$3500(android.view.View, long, float, float, int)
    {
        android.view.View r0;
        long l0;
        float f0, f1;
        int i1;

        r0 := @parameter0: android.view.View;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        i1 := @parameter4: int;

        specialinvoke r0.<android.view.View: void checkForLongClick(long,float,float,int)>(l0, f0, f1, i1);

        return;
    }

    static boolean access$3600(android.view.View)
    {
        android.view.View r0;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        $z0 = specialinvoke r0.<android.view.View: boolean performClickInternal()>();

        return $z0;
    }

    static void access$3700(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.accessibility.AccessibilityEvent;

        specialinvoke r0.<android.view.View: void requestParentSendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        return;
    }

    static int access$3800(android.view.View)
    {
        android.view.View r0;
        int $i0;

        r0 := @parameter0: android.view.View;

        $i0 = r0.<android.view.View: int mLabelForId>;

        return $i0;
    }

    private void applyBackgroundTint()
    {
        android.view.View r0;
        android.view.View$TintInfo r1, $r3;
        android.graphics.drawable.Drawable $r2, $r4, $r5, $r6, $r7, $r10, $r12;
        boolean $z0, $z1, $z2, $z3, $z5;
        int[] $r8;
        android.graphics.BlendMode $r9;
        android.content.res.ColorStateList $r11;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r2 == null goto label4;

        $r3 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r3 == null goto label4;

        r1 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $z0 = r1.<android.view.View$TintInfo: boolean mHasTintList>;

        if $z0 != 0 goto label1;

        $z5 = r1.<android.view.View$TintInfo: boolean mHasTintMode>;

        if $z5 == 0 goto label4;

     label1:
        $r4 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $r5 = virtualinvoke $r4.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        r0.<android.view.View: android.graphics.drawable.Drawable mBackground> = $r5;

        $z1 = r1.<android.view.View$TintInfo: boolean mHasTintList>;

        if $z1 == 0 goto label2;

        $r12 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $r11 = r1.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList>;

        virtualinvoke $r12.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>($r11);

     label2:
        $z2 = r1.<android.view.View$TintInfo: boolean mHasTintMode>;

        if $z2 == 0 goto label3;

        $r10 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $r9 = r1.<android.view.View$TintInfo: android.graphics.BlendMode mBlendMode>;

        virtualinvoke $r10.<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>($r9);

     label3:
        $r6 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $z3 = virtualinvoke $r6.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z3 == 0 goto label4;

        $r7 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $r8 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $r7.<android.graphics.drawable.Drawable: boolean setState(int[])>($r8);

     label4:
        return;
    }

    private void applyForegroundTint()
    {
        android.view.View r0;
        android.view.View$ForegroundInfo r1, $r3, $r5, $r9, $r11, $r14, $r17, r20;
        android.graphics.drawable.Drawable $r2, $r6, $r7, $r10, $r12, $r15, $r18;
        android.view.View$TintInfo $r4, r21;
        boolean $z0, $z1, $z2, $z3, $z5;
        int[] $r13;
        android.graphics.BlendMode $r16;
        android.content.res.ColorStateList $r19;

        r0 := @this: android.view.View;

        r20 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r20 == null goto label4;

        $r2 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r20);

        if $r2 == null goto label4;

        $r3 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r4 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r3);

        if $r4 == null goto label4;

        $r5 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        r21 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r5);

        $z0 = r21.<android.view.View$TintInfo: boolean mHasTintList>;

        if $z0 != 0 goto label1;

        $z5 = r21.<android.view.View$TintInfo: boolean mHasTintMode>;

        if $z5 == 0 goto label4;

     label1:
        r1 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r6 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r1);

        $r7 = virtualinvoke $r6.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1602(android.view.View$ForegroundInfo,android.graphics.drawable.Drawable)>(r1, $r7);

        $z1 = r21.<android.view.View$TintInfo: boolean mHasTintList>;

        if $z1 == 0 goto label2;

        $r17 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r18 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r17);

        $r19 = r21.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList>;

        virtualinvoke $r18.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>($r19);

     label2:
        $z2 = r21.<android.view.View$TintInfo: boolean mHasTintMode>;

        if $z2 == 0 goto label3;

        $r14 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r15 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r14);

        $r16 = r21.<android.view.View$TintInfo: android.graphics.BlendMode mBlendMode>;

        virtualinvoke $r15.<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>($r16);

     label3:
        $r9 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r10 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r9);

        $z3 = virtualinvoke $r10.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z3 == 0 goto label4;

        $r11 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r12 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r11);

        $r13 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $r12.<android.graphics.drawable.Drawable: boolean setState(int[])>($r13);

     label4:
        return;
    }

    private void applyInsets(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r0.<android.view.View: int mUserPaddingStart> = -2147483648;

        r0.<android.view.View: int mUserPaddingEnd> = -2147483648;

        $i0 = r1.<android.graphics.Rect: int left>;

        r0.<android.view.View: int mUserPaddingLeftInitial> = $i0;

        $i1 = r1.<android.graphics.Rect: int right>;

        r0.<android.view.View: int mUserPaddingRightInitial> = $i1;

        $i5 = r1.<android.graphics.Rect: int left>;

        $i4 = r1.<android.graphics.Rect: int top>;

        $i3 = r1.<android.graphics.Rect: int right>;

        $i2 = r1.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i5, $i4, $i3, $i2);

        return;
    }

    private boolean applyLegacyAnimation(android.view.ViewGroup, long, android.view.animation.Animation, boolean)
    {
        android.view.View r0;
        android.view.ViewGroup r1;
        long l0;
        android.view.animation.Animation r2;
        boolean z0, z1, $z2, $z3;
        android.graphics.RectF r3, $r4, $r5;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i43, i44;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6;
        android.view.View$AttachInfo $r6, r10;
        byte $b28;
        android.view.animation.Transformation $r7, $r8, r11;
        android.os.Handler $r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewGroup;

        l0 := @parameter1: long;

        r2 := @parameter2: android.view.animation.Animation;

        z0 := @parameter3: boolean;

        i43 = r1.<android.view.ViewGroup: int mGroupFlags>;

        $z2 = virtualinvoke r2.<android.view.animation.Animation: boolean isInitialized()>();

        if $z2 != 0 goto label2;

        $i30 = r0.<android.view.View: int mRight>;

        $i29 = r0.<android.view.View: int mLeft>;

        $i33 = $i30 - $i29;

        $i32 = r0.<android.view.View: int mBottom>;

        $i31 = r0.<android.view.View: int mTop>;

        $i34 = $i32 - $i31;

        $i35 = virtualinvoke r1.<android.view.ViewGroup: int getWidth()>();

        $i36 = virtualinvoke r1.<android.view.ViewGroup: int getHeight()>();

        virtualinvoke r2.<android.view.animation.Animation: void initialize(int,int,int,int)>($i33, $i34, $i35, $i36);

        $i38 = r0.<android.view.View: int mRight>;

        $i37 = r0.<android.view.View: int mLeft>;

        $i42 = $i38 - $i37;

        $i40 = r0.<android.view.View: int mBottom>;

        $i39 = r0.<android.view.View: int mTop>;

        $i41 = $i40 - $i39;

        virtualinvoke r2.<android.view.animation.Animation: void initializeInvalidateRegion(int,int,int,int)>(0, 0, $i42, $i41);

        r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r10 == null goto label1;

        $r9 = r10.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke r2.<android.view.animation.Animation: void setListenerHandler(android.os.Handler)>($r9);

     label1:
        virtualinvoke r0.<android.view.View: void onAnimationStart()>();

     label2:
        r11 = virtualinvoke r1.<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>();

        z1 = virtualinvoke r2.<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>(l0, r11, 1.0F);

        if z0 == 0 goto label4;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $f6 = $r6.<android.view.View$AttachInfo: float mApplicationScale>;

        $b28 = $f6 cmpl 1.0F;

        if $b28 == 0 goto label4;

        $r7 = r1.<android.view.ViewGroup: android.view.animation.Transformation mInvalidationTransformation>;

        if $r7 != null goto label3;

        $r8 = new android.view.animation.Transformation;

        specialinvoke $r8.<android.view.animation.Transformation: void <init>()>();

        r1.<android.view.ViewGroup: android.view.animation.Transformation mInvalidationTransformation> = $r8;

     label3:
        r11 = r1.<android.view.ViewGroup: android.view.animation.Transformation mInvalidationTransformation>;

        virtualinvoke r2.<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>(l0, r11, 1.0F);

        goto label4;

     label4:
        if z1 == 0 goto label8;

        $z3 = virtualinvoke r2.<android.view.animation.Animation: boolean willChangeBounds()>();

        if $z3 != 0 goto label6;

        $i18 = i43 & 144;

        if $i18 != 128 goto label5;

        $i26 = r1.<android.view.ViewGroup: int mGroupFlags>;

        $i27 = $i26 | 4;

        r1.<android.view.ViewGroup: int mGroupFlags> = $i27;

        goto label8;

     label5:
        $i19 = i43 & 4;

        if $i19 != 0 goto label8;

        $i20 = r1.<android.view.ViewGroup: int mPrivateFlags>;

        $i21 = $i20 | 64;

        r1.<android.view.ViewGroup: int mPrivateFlags> = $i21;

        $i25 = r0.<android.view.View: int mLeft>;

        $i24 = r0.<android.view.View: int mTop>;

        $i23 = r0.<android.view.View: int mRight>;

        $i22 = r0.<android.view.View: int mBottom>;

        virtualinvoke r1.<android.view.ViewGroup: void invalidate(int,int,int,int)>($i25, $i24, $i23, $i22);

        goto label8;

     label6:
        $r4 = r1.<android.view.ViewGroup: android.graphics.RectF mInvalidateRegion>;

        if $r4 != null goto label7;

        $r5 = new android.graphics.RectF;

        specialinvoke $r5.<android.graphics.RectF: void <init>()>();

        r1.<android.view.ViewGroup: android.graphics.RectF mInvalidateRegion> = $r5;

     label7:
        r3 = r1.<android.view.ViewGroup: android.graphics.RectF mInvalidateRegion>;

        $i3 = r0.<android.view.View: int mRight>;

        $i2 = r0.<android.view.View: int mLeft>;

        $i7 = $i3 - $i2;

        $i5 = r0.<android.view.View: int mBottom>;

        $i4 = r0.<android.view.View: int mTop>;

        $i6 = $i5 - $i4;

        virtualinvoke r2.<android.view.animation.Animation: void getInvalidateRegion(int,int,int,int,android.graphics.RectF,android.view.animation.Transformation)>(0, 0, $i7, $i6, r3, r11);

        $i8 = r1.<android.view.ViewGroup: int mPrivateFlags>;

        $i9 = $i8 | 64;

        r1.<android.view.ViewGroup: int mPrivateFlags> = $i9;

        $i11 = r0.<android.view.View: int mLeft>;

        $f0 = r3.<android.graphics.RectF: float left>;

        $i10 = (int) $f0;

        i44 = $i11 + $i10;

        $i13 = r0.<android.view.View: int mTop>;

        $f1 = r3.<android.graphics.RectF: float top>;

        $i12 = (int) $f1;

        i1 = $i13 + $i12;

        $f2 = virtualinvoke r3.<android.graphics.RectF: float width()>();

        $f3 = $f2 + 0.5F;

        $i14 = (int) $f3;

        $i15 = $i14 + i44;

        $f4 = virtualinvoke r3.<android.graphics.RectF: float height()>();

        $f5 = $f4 + 0.5F;

        $i16 = (int) $f5;

        $i17 = $i16 + i1;

        virtualinvoke r1.<android.view.ViewGroup: void invalidate(int,int,int,int)>(i44, i1, $i15, $i17);

     label8:
        return z1;
    }

    private void buildDrawingCacheImpl(boolean)
    {
        android.view.View r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8, z9, z10;
        android.view.View$AttachInfo r1, r30;
        int i0, $i3, $i4, $i5, $i6, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, $i19, $i20, $i21, i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, $i32;
        long l1, l2;
        android.graphics.Canvas r2, $r17, $r20, r29;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5, $r12;
        byte $b8, b18;
        android.content.res.Resources $r13, $r15;
        android.util.DisplayMetrics $r14, $r16;
        android.view.ViewOverlay $r18, r31;
        android.view.ViewGroup $r19;
        java.lang.OutOfMemoryError $r21, $r22;
        android.content.Context $r23;
        android.view.ViewConfiguration $r24;
        android.graphics.Bitmap r25, r26;
        android.graphics.Bitmap$Config r27;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        r0.<android.view.View: boolean mCachingFailed> = 0;

        $i4 = r0.<android.view.View: int mRight>;

        $i3 = r0.<android.view.View: int mLeft>;

        i14 = $i4 - $i3;

        $i6 = r0.<android.view.View: int mBottom>;

        $i5 = r0.<android.view.View: int mTop>;

        i15 = $i6 - $i5;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label01;

        $z5 = r1.<android.view.View$AttachInfo: boolean mScalingRequired>;

        if $z5 == 0 goto label01;

        z6 = 1;

        goto label02;

     label01:
        z6 = 0;

     label02:
        i16 = i14;

        i17 = i15;

        if z0 == 0 goto label03;

        i16 = i14;

        i17 = i15;

        if z6 == 0 goto label03;

        $f2 = (float) i14;

        $f1 = r1.<android.view.View$AttachInfo: float mApplicationScale>;

        $f3 = $f2 * $f1;

        $f4 = $f3 + 0.5F;

        i16 = (int) $f4;

        $f6 = (float) i15;

        $f5 = r1.<android.view.View$AttachInfo: float mApplicationScale>;

        $f7 = $f6 * $f5;

        $f8 = $f7 + 0.5F;

        i17 = (int) $f8;

     label03:
        i0 = r0.<android.view.View: int mDrawingCacheBackgroundColor>;

        if i0 != 0 goto label05;

        $z4 = virtualinvoke r0.<android.view.View: boolean isOpaque()>();

        if $z4 == 0 goto label04;

        goto label05;

     label04:
        z7 = 0;

        goto label06;

     label05:
        z7 = 1;

     label06:
        if r1 == null goto label07;

        $z3 = r1.<android.view.View$AttachInfo: boolean mUse32BitDrawingCache>;

        if $z3 == 0 goto label07;

        z8 = 1;

        goto label08;

     label07:
        z8 = 0;

     label08:
        if z7 == 0 goto label09;

        if z8 != 0 goto label09;

        b18 = 2;

        goto label10;

     label09:
        b18 = 4;

     label10:
        $i19 = i16 * i17;

        $i20 = $i19 * b18;

        l1 = (long) $i20;

        $r23 = r0.<android.view.View: android.content.Context mContext>;

        $r24 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r23);

        $i21 = virtualinvoke $r24.<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()>();

        l2 = (long) $i21;

        if i16 <= 0 goto label44;

        if i17 <= 0 goto label44;

        $b8 = l1 cmp l2;

        if $b8 <= 0 goto label11;

        goto label44;

     label11:
        z9 = 1;

        if z0 == 0 goto label12;

        r25 = r0.<android.view.View: android.graphics.Bitmap mDrawingCache>;

        goto label13;

     label12:
        r25 = r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache>;

     label13:
        if r25 == null goto label14;

        $i12 = virtualinvoke r25.<android.graphics.Bitmap: int getWidth()>();

        if $i12 != i16 goto label14;

        r26 = r25;

        $i13 = virtualinvoke r25.<android.graphics.Bitmap: int getHeight()>();

        if $i13 == i17 goto label29;

     label14:
        if z7 != 0 goto label15;

        r27 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        goto label17;

     label15:
        if z8 == 0 goto label16;

        r27 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        goto label17;

     label16:
        r27 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

     label17:
        if r25 == null goto label18;

        virtualinvoke r25.<android.graphics.Bitmap: void recycle()>();

     label18:
        $r13 = r0.<android.view.View: android.content.res.Resources mResources>;

        $r14 = virtualinvoke $r13.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        r26 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>($r14, i16, i17, r27);

        $r15 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        $r16 = virtualinvoke $r15.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i9 = $r16.<android.util.DisplayMetrics: int densityDpi>;

        virtualinvoke r26.<android.graphics.Bitmap: void setDensity(int)>($i9);

     label19:
        if z0 == 0 goto label23;

     label20:
        r0.<android.view.View: android.graphics.Bitmap mDrawingCache> = r26;

     label21:
        goto label24;

     label22:
        $r21 := @caughtexception;

        goto label41;

     label23:
        r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache> = r26;

     label24:
        if z7 == 0 goto label27;

        if z8 == 0 goto label27;

     label25:
        virtualinvoke r26.<android.graphics.Bitmap: void setHasAlpha(boolean)>(0);

     label26:
        goto label27;

     label27:
        z10 = 0;

        if i0 == 0 goto label28;

        z10 = 1;

     label28:
        z9 = z10;

     label29:
        if r1 == null goto label31;

        r2 = r1.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas>;

        r29 = r2;

        if r2 != null goto label30;

        $r20 = new android.graphics.Canvas;

        specialinvoke $r20.<android.graphics.Canvas: void <init>()>();

        r29 = $r20;

     label30:
        virtualinvoke r29.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(r26);

        r1.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = null;

        goto label32;

     label31:
        $r17 = new android.graphics.Canvas;

        specialinvoke $r17.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r26);

        r29 = $r17;

     label32:
        if z9 == 0 goto label33;

        virtualinvoke r26.<android.graphics.Bitmap: void eraseColor(int)>(i0);

     label33:
        virtualinvoke r0.<android.view.View: void computeScroll()>();

        i22 = virtualinvoke r29.<android.graphics.Canvas: int save()>();

        if z0 == 0 goto label34;

        if z6 == 0 goto label34;

        f0 = r1.<android.view.View$AttachInfo: float mApplicationScale>;

        virtualinvoke r29.<android.graphics.Canvas: void scale(float,float)>(f0, f0);

        goto label34;

     label34:
        $i23 = r0.<android.view.View: int mScrollX>;

        $i24 = neg $i23;

        $f9 = (float) $i24;

        $i25 = r0.<android.view.View: int mScrollY>;

        $i26 = neg $i25;

        $f10 = (float) $i26;

        virtualinvoke r29.<android.graphics.Canvas: void translate(float,float)>($f9, $f10);

        $i27 = r0.<android.view.View: int mPrivateFlags>;

        $i28 = $i27 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i28;

        r30 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r30 == null goto label35;

        $z2 = r30.<android.view.View$AttachInfo: boolean mHardwareAccelerated>;

        if $z2 == 0 goto label35;

        $i11 = r0.<android.view.View: int mLayerType>;

        if $i11 == 0 goto label36;

     label35:
        $i29 = r0.<android.view.View: int mPrivateFlags>;

        $i30 = $i29 | 32768;

        r0.<android.view.View: int mPrivateFlags> = $i30;

     label36:
        i31 = r0.<android.view.View: int mPrivateFlags>;

        $i32 = i31 & 128;

        if $i32 != 128 goto label37;

        $i10 = i31 & -2097153;

        r0.<android.view.View: int mPrivateFlags> = $i10;

        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r29);

        specialinvoke r0.<android.view.View: void drawAutofilledHighlight(android.graphics.Canvas)>(r29);

        r31 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if r31 == null goto label38;

        $z1 = virtualinvoke r31.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z1 != 0 goto label38;

        $r18 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r19 = virtualinvoke $r18.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r19.<android.view.ViewGroup: void draw(android.graphics.Canvas)>(r29);

        goto label38;

     label37:
        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r29);

     label38:
        virtualinvoke r29.<android.graphics.Canvas: void restoreToCount(int)>(i22);

        virtualinvoke r29.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        if r1 == null goto label39;

        r1.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = r29;

     label39:
        return;

     label40:
        $r22 := @caughtexception;

     label41:
        if z0 == 0 goto label42;

        r0.<android.view.View: android.graphics.Bitmap mDrawingCache> = null;

        goto label43;

     label42:
        r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache> = null;

     label43:
        r0.<android.view.View: boolean mCachingFailed> = 1;

        return;

     label44:
        if i16 <= 0 goto label45;

        if i17 <= 0 goto label45;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not displayed because it is too large to fit into a software layer (or drawing cache), needs ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes, only ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" available");

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r12);

     label45:
        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

        r0.<android.view.View: boolean mCachingFailed> = 1;

        return;

        catch java.lang.OutOfMemoryError from label18 to label19 with label40;
        catch java.lang.OutOfMemoryError from label20 to label21 with label22;
        catch java.lang.OutOfMemoryError from label23 to label24 with label40;
        catch java.lang.OutOfMemoryError from label25 to label26 with label22;
    }

    private boolean calculateIsImportantForContentCapture()
    {
        android.view.View r0, $r9, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r2, $r10, $r17;
        java.lang.String $r7, $r15, $r24;
        java.lang.String[] $r8;
        int $i1, i4, i5, i6;
        android.view.ViewParent r25;
        android.view.ViewGroup r27;

        r0 := @this: android.view.View;

        r25 = r0.<android.view.View: android.view.ViewParent mParent>;

     label01:
        $z0 = r25 instanceof android.view.View;

        if $z0 == 0 goto label05;

        $r16 = (android.view.View) r25;

        i4 = virtualinvoke $r16.<android.view.View: int getImportantForContentCapture()>();

        if i4 == 8 goto label03;

        if i4 != 4 goto label02;

        goto label03;

     label02:
        r25 = interfaceinvoke r25.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label01;

     label03:
        $z4 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("View.ContentCapture", 2);

        if $z4 == 0 goto label04;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View (");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not important for content capture because parent ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'s importance is ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r24 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("View.ContentCapture", $r24);

     label04:
        return 0;

     label05:
        i5 = virtualinvoke r0.<android.view.View: int getImportantForContentCapture()>();

        if i5 == 4 goto label15;

        if i5 != 1 goto label06;

        goto label15;

     label06:
        if i5 == 8 goto label13;

        if i5 != 2 goto label07;

        goto label13;

     label07:
        if i5 == 0 goto label08;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid content capture importance (");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on view ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View.ContentCapture", $r15);

        return 0;

     label08:
        $z2 = r0 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label11;

        r27 = (android.view.ViewGroup) r0;

        i6 = 0;

     label09:
        $i1 = virtualinvoke r27.<android.view.ViewGroup: int getChildCount()>();

        if i6 >= $i1 goto label11;

        $r9 = virtualinvoke r27.<android.view.ViewGroup: android.view.View getChildAt(int)>(i6);

        $z3 = virtualinvoke $r9.<android.view.View: boolean isImportantForContentCapture()>();

        if $z3 == 0 goto label10;

        return 1;

     label10:
        i6 = i6 + 1;

        goto label09;

     label11:
        $r8 = virtualinvoke r0.<android.view.View: java.lang.String[] getAutofillHints()>();

        if $r8 == null goto label12;

        return 1;

     label12:
        return 0;

     label13:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("View.ContentCapture", 2);

        if $z1 == 0 goto label14;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View (");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not important for content capture because its importance is ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("View.ContentCapture", $r7);

     label14:
        return 0;

     label15:
        return 1;
    }

    private boolean canTakeFocus()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: android.view.View;

        i0 = r0.<android.view.View: int mViewFlags>;

        z3 = 1;

        $i1 = i0 & 12;

        if $i1 != 0 goto label2;

        $i2 = i0 & 1;

        if $i2 != 1 goto label2;

        $i3 = i0 & 32;

        if $i3 != 0 goto label2;

        $z0 = <android.view.View: boolean sCanFocusZeroSized>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutValid()>();

        if $z1 == 0 goto label1;

        $z2 = specialinvoke r0.<android.view.View: boolean hasSize()>();

        if $z2 == 0 goto label2;

     label1:
        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    private void cancel(android.view.View$SendAccessibilityEventThrottle)
    {
        android.view.View r0;
        android.view.View$SendAccessibilityEventThrottle r1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$SendAccessibilityEventThrottle;

        if r1 == null goto label2;

        $z0 = r1.<android.view.View$SendAccessibilityEventThrottle: boolean mIsPending>;

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>(r1);

        virtualinvoke r1.<android.view.View$SendAccessibilityEventThrottle: void reset()>();

        return;

     label2:
        return;
    }

    private void checkForLongClick(long, float, float, int)
    {
        android.view.View r0;
        long l0;
        float f0, f1;
        int i1, i2, $i3, $i4;
        android.view.View$CheckForLongPress $r1, $r2, $r3, $r4, $r5, $r6, $r7;

        r0 := @this: android.view.View;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        i1 := @parameter3: int;

        i2 = r0.<android.view.View: int mViewFlags>;

        $i3 = i2 & 2097152;

        if $i3 == 2097152 goto label1;

        $i4 = i2 & 1073741824;

        if $i4 != 1073741824 goto label3;

     label1:
        r0.<android.view.View: boolean mHasPerformedLongPress> = 0;

        $r1 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r1 != null goto label2;

        $r7 = new android.view.View$CheckForLongPress;

        specialinvoke $r7.<android.view.View$CheckForLongPress: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress> = $r7;

     label2:
        $r2 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r2.<android.view.View$CheckForLongPress: void setAnchor(float,float)>(f0, f1);

        $r3 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r3.<android.view.View$CheckForLongPress: void rememberWindowAttachCount()>();

        $r4 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r4.<android.view.View$CheckForLongPress: void rememberPressedState()>();

        $r5 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke $r5.<android.view.View$CheckForLongPress: void setClassification(int)>(i1);

        $r6 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r6, l0);

     label3:
        return;
    }

    private void cleanupDraw()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void resetDisplayList()>();

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r2.<android.view.ViewRootImpl: void cancelInvalidate(android.view.View)>(r0);

     label1:
        return;
    }

    private void clearAccessibilityThrottles()
    {
        android.view.View r0;
        android.view.View$SendViewScrolledAccessibilityEvent $r1;
        android.view.View$SendAccessibilityEventThrottle $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent>;

        specialinvoke r0.<android.view.View: void cancel(android.view.View$SendAccessibilityEventThrottle)>($r1);

        $r2 = r0.<android.view.View: android.view.View$SendAccessibilityEventThrottle mSendStateChangedAccessibilityEvent>;

        specialinvoke r0.<android.view.View: void cancel(android.view.View$SendAccessibilityEventThrottle)>($r2);

        return;
    }

    public static int combineMeasuredStates(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 | i1;

        return $i2;
    }

    private final void debugDrawFocus(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        android.graphics.Paint r2;
        boolean $z0;
        android.graphics.Paint$Style $r3, $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        $z0 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z0 == 0 goto label1;

        i0 = virtualinvoke r0.<android.view.View: int dipsToPixels(int)>(8);

        i1 = r0.<android.view.View: int mScrollX>;

        $i5 = r0.<android.view.View: int mRight>;

        $i7 = $i5 + i1;

        $i6 = r0.<android.view.View: int mLeft>;

        i2 = $i7 - $i6;

        i3 = r0.<android.view.View: int mScrollY>;

        $i8 = r0.<android.view.View: int mBottom>;

        $i10 = $i8 + i3;

        $i9 = r0.<android.view.View: int mTop>;

        i4 = $i10 - $i9;

        r2 = staticinvoke <android.view.View: android.graphics.Paint getDebugPaint()>();

        $i11 = <android.view.View: int DEBUG_CORNERS_COLOR>;

        virtualinvoke r2.<android.graphics.Paint: void setColor(int)>($i11);

        $r3 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r3);

        $f3 = (float) i1;

        $f2 = (float) i3;

        $i12 = i1 + i0;

        $f1 = (float) $i12;

        $i13 = i3 + i0;

        $f0 = (float) $i13;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r2);

        $i14 = i2 - i0;

        $f7 = (float) $i14;

        $f6 = (float) i3;

        $f5 = (float) i2;

        $i15 = i3 + i0;

        $f4 = (float) $i15;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f7, $f6, $f5, $f4, r2);

        $f11 = (float) i1;

        $i16 = i4 - i0;

        $f10 = (float) $i16;

        $i17 = i1 + i0;

        $f9 = (float) $i17;

        $f8 = (float) i4;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f11, $f10, $f9, $f8, r2);

        $i18 = i2 - i0;

        $f15 = (float) $i18;

        $i19 = i4 - i0;

        $f14 = (float) $i19;

        $f13 = (float) i2;

        $f12 = (float) i4;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f15, $f14, $f13, $f12, r2);

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $f19 = (float) i1;

        $f18 = (float) i3;

        $f17 = (float) i2;

        $f16 = (float) i4;

        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f19, $f18, $f17, $f16, r2);

        $f23 = (float) i1;

        $f22 = (float) i4;

        $f21 = (float) i2;

        $f20 = (float) i3;

        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f23, $f22, $f21, $f20, r2);

     label1:
        return;
    }

    protected static java.lang.String debugIndent(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        $i1 = i0 * 2;

        $i2 = $i1 + 3;

        $i3 = $i2 * 2;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i3);

        i6 = 0;

     label1:
        $i4 = i0 * 2;

        $i5 = $i4 + 3;

        if i6 >= $i5 goto label2;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        i6 = i6 + 1;

        goto label1;

     label2:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private boolean dispatchGenericMotionEventInternal(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int i0, i1, $i2, $i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        float $f0, $f1, $f2, $f3;
        android.view.View$OnGenericMotionListener $r2, $r3;
        android.view.View$ListenerInfo r4;
        android.view.InputEventConsistencyVerifier r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        r4 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r4 == null goto label1;

        $r2 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnGenericMotionListener access$600(android.view.View$ListenerInfo)>(r4);

        if $r2 == null goto label1;

        $i2 = r0.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 32;

        if $i3 != 0 goto label1;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnGenericMotionListener access$600(android.view.View$ListenerInfo)>(r4);

        $z5 = interfaceinvoke $r3.<android.view.View$OnGenericMotionListener: boolean onGenericMotion(android.view.View,android.view.MotionEvent)>(r0, r1);

        if $z5 == 0 goto label1;

        return 1;

     label1:
        $z6 = virtualinvoke r0.<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>(r1);

        if $z6 == 0 goto label2;

        return 1;

     label2:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionButton()>();

        i1 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i1 == 11 goto label5;

        if i1 == 12 goto label3;

        goto label7;

     label3:
        $z4 = r0.<android.view.View: boolean mInContextButtonPress>;

        if $z4 == 0 goto label7;

        if i0 == 32 goto label4;

        if i0 != 2 goto label7;

     label4:
        r0.<android.view.View: boolean mInContextButtonPress> = 0;

        r0.<android.view.View: boolean mIgnoreNextUpEvent> = 1;

        goto label7;

     label5:
        $z0 = virtualinvoke r0.<android.view.View: boolean isContextClickable()>();

        if $z0 == 0 goto label7;

        $z1 = r0.<android.view.View: boolean mInContextButtonPress>;

        if $z1 != 0 goto label7;

        $z2 = r0.<android.view.View: boolean mHasPerformedLongPress>;

        if $z2 != 0 goto label7;

        if i0 == 32 goto label6;

        if i0 != 2 goto label7;

     label6:
        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z3 = virtualinvoke r0.<android.view.View: boolean performContextClick(float,float)>($f0, $f1);

        if $z3 == 0 goto label7;

        r0.<android.view.View: boolean mInContextButtonPress> = 1;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        specialinvoke r0.<android.view.View: void setPressed(boolean,float,float)>(1, $f2, $f3);

        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        return 1;

     label7:
        r5 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if r5 == null goto label8;

        virtualinvoke r5.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 0);

     label8:
        return 0;
    }

    private void dispatchProvideStructure(android.view.ViewStructure, int, int)
    {
        android.view.View r0;
        android.view.ViewStructure r1;
        int i0, i1;
        boolean $z0;
        java.lang.CharSequence $r2;
        java.lang.String $r3;
        android.view.autofill.AutofillId $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if i0 != 1 goto label1;

        $r4 = virtualinvoke r0.<android.view.View: android.view.autofill.AutofillId getAutofillId()>();

        virtualinvoke r1.<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)>($r4);

        virtualinvoke r0.<android.view.View: void onProvideAutofillStructure(android.view.ViewStructure,int)>(r1, i1);

        virtualinvoke r0.<android.view.View: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)>(r1, i1);

        goto label3;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean isAssistBlocked()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<android.view.View: void onProvideStructure(android.view.ViewStructure)>(r1);

        virtualinvoke r0.<android.view.View: void onProvideVirtualStructure(android.view.ViewStructure)>(r1);

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getAccessibilityClassName()>();

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r1.<android.view.ViewStructure: void setClassName(java.lang.String)>($r3);

        virtualinvoke r1.<android.view.ViewStructure: void setAssistBlocked(boolean)>(1);

     label3:
        return;
    }

    private boolean dispatchTouchExplorationHoverEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        boolean z0, $z3, $z4, $z5, $z8, $z9, $z10, $z11, $z13, $z14, $z15, z16, z17, z18, z19;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        android.content.Context $r1;
        android.view.TouchDelegate $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        android.graphics.Region $r10;
        float $f0, $f1;
        android.view.MotionEvent r11;
        android.view.accessibility.AccessibilityManager r12;
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r13;

        r0 := @this: android.view.View;

        r11 := @parameter0: android.view.MotionEvent;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        r12 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r1);

        $z3 = virtualinvoke r12.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z3 == 0 goto label20;

        $z4 = virtualinvoke r12.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z4 != 0 goto label01;

        goto label20;

     label01:
        z0 = r0.<android.view.View: boolean mHoveringTouchDelegate>;

        i0 = virtualinvoke r11.<android.view.MotionEvent: int getActionMasked()>();

        z16 = 0;

        $r2 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        r13 = virtualinvoke $r2.<android.view.TouchDelegate: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>();

        i6 = 0;

     label02:
        $i1 = virtualinvoke r13.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int getRegionCount()>();

        if i6 >= $i1 goto label04;

        $r10 = virtualinvoke r13.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.graphics.Region getRegionAt(int)>(i6);

        $f0 = virtualinvoke r11.<android.view.MotionEvent: float getX()>();

        $i4 = (int) $f0;

        $f1 = virtualinvoke r11.<android.view.MotionEvent: float getY()>();

        $i5 = (int) $f1;

        $z15 = virtualinvoke $r10.<android.graphics.Region: boolean contains(int,int)>($i4, $i5);

        if $z15 == 0 goto label03;

        z16 = 1;

     label03:
        i6 = i6 + 1;

        goto label02;

     label04:
        if z0 != 0 goto label06;

        if i0 == 9 goto label05;

        if i0 != 7 goto label08;

     label05:
        $z14 = virtualinvoke r0.<android.view.View: boolean pointInHoveredChild(android.view.MotionEvent)>(r11);

        if $z14 != 0 goto label08;

        if z16 == 0 goto label08;

        r0.<android.view.View: boolean mHoveringTouchDelegate> = 1;

        goto label08;

     label06:
        if i0 == 10 goto label07;

        if i0 != 7 goto label08;

        $z13 = virtualinvoke r0.<android.view.View: boolean pointInHoveredChild(android.view.MotionEvent)>(r11);

        if $z13 != 0 goto label07;

        if z16 != 0 goto label08;

     label07:
        r0.<android.view.View: boolean mHoveringTouchDelegate> = 0;

     label08:
        if i0 == 7 goto label11;

        if i0 == 9 goto label10;

        if i0 == 10 goto label09;

        z17 = 0;

        goto label19;

     label09:
        z17 = 0;

        if z0 == 0 goto label19;

        $r9 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        virtualinvoke $r9.<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>(r11);

        z17 = 0;

        goto label19;

     label10:
        z17 = 0;

        if z0 != 0 goto label19;

        z17 = 0;

        $z11 = r0.<android.view.View: boolean mHoveringTouchDelegate>;

        if $z11 == 0 goto label19;

        $r8 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        z17 = virtualinvoke $r8.<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>(r11);

        goto label19;

     label11:
        if z0 == 0 goto label12;

        $z10 = r0.<android.view.View: boolean mHoveringTouchDelegate>;

        if $z10 == 0 goto label12;

        $r7 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        z17 = virtualinvoke $r7.<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>(r11);

        goto label19;

     label12:
        if z0 != 0 goto label16;

        $z8 = r0.<android.view.View: boolean mHoveringTouchDelegate>;

        if $z8 == 0 goto label16;

        $i3 = virtualinvoke r11.<android.view.MotionEvent: int getHistorySize()>();

        if $i3 != 0 goto label13;

        goto label14;

     label13:
        r11 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r11);

     label14:
        virtualinvoke r11.<android.view.MotionEvent: void setAction(int)>(9);

        $r5 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        z18 = virtualinvoke $r5.<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>(r11);

        virtualinvoke r11.<android.view.MotionEvent: void setAction(int)>(i0);

        $r6 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        $z9 = virtualinvoke $r6.<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>(r11);

        z17 = z18 | $z9;

     label15:
        goto label19;

     label16:
        z17 = 0;

        if z0 == 0 goto label15;

        z17 = 0;

        $z5 = r0.<android.view.View: boolean mHoveringTouchDelegate>;

        if $z5 != 0 goto label15;

        z19 = virtualinvoke r11.<android.view.MotionEvent: boolean isHoverExitPending()>();

        virtualinvoke r11.<android.view.MotionEvent: void setHoverExitPending(boolean)>(1);

        $r3 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        virtualinvoke $r3.<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>(r11);

        $i2 = virtualinvoke r11.<android.view.MotionEvent: int getHistorySize()>();

        if $i2 != 0 goto label17;

        goto label18;

     label17:
        r11 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r11);

     label18:
        virtualinvoke r11.<android.view.MotionEvent: void setHoverExitPending(boolean)>(z19);

        virtualinvoke r11.<android.view.MotionEvent: void setAction(int)>(10);

        $r4 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        virtualinvoke $r4.<android.view.TouchDelegate: boolean onTouchExplorationHoverEvent(android.view.MotionEvent)>(r11);

        z17 = 0;

     label19:
        return z17;

     label20:
        return 0;
    }

    private void drawAutofilledHighlight(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        $z0 = virtualinvoke r0.<android.view.View: boolean isAutofilled()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.view.View: boolean hideAutofillHighlight()>();

        if $z1 != 0 goto label1;

        r2 = specialinvoke r0.<android.view.View: android.graphics.drawable.Drawable getAutofilledDrawable()>();

        if r2 == null goto label1;

        $i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i1 = virtualinvoke r0.<android.view.View: int getHeight()>();

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i0, $i1);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label1:
        return;
    }

    private void drawBackground(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        int i0, i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3;
        android.view.ThreadedRenderer $r3;
        android.graphics.RenderNode $r4, $r5, r8;
        android.graphics.RecordingCanvas $r6;
        android.view.View$AttachInfo r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r2 != null goto label1;

        return;

     label1:
        virtualinvoke r0.<android.view.View: void setBackgroundBounds()>();

        $z0 = virtualinvoke r1.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        if $z0 == 0 goto label2;

        r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r7 == null goto label2;

        $r3 = r7.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r3 == null goto label2;

        $r4 = r0.<android.view.View: android.graphics.RenderNode mBackgroundRenderNode>;

        $r5 = specialinvoke r0.<android.view.View: android.graphics.RenderNode getDrawableRenderNode(android.graphics.drawable.Drawable,android.graphics.RenderNode)>(r2, $r4);

        r0.<android.view.View: android.graphics.RenderNode mBackgroundRenderNode> = $r5;

        r8 = r0.<android.view.View: android.graphics.RenderNode mBackgroundRenderNode>;

        if r8 == null goto label2;

        $z1 = virtualinvoke r8.<android.graphics.RenderNode: boolean hasDisplayList()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<android.view.View: void setBackgroundRenderNodeProperties(android.graphics.RenderNode)>(r8);

        $r6 = (android.graphics.RecordingCanvas) r1;

        virtualinvoke $r6.<android.graphics.RecordingCanvas: void drawRenderNode(android.graphics.RenderNode)>(r8);

        return;

     label2:
        i0 = r0.<android.view.View: int mScrollX>;

        i1 = r0.<android.view.View: int mScrollY>;

        $i4 = i0 | i1;

        if $i4 != 0 goto label3;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        goto label4;

     label3:
        $f1 = (float) i0;

        $f0 = (float) i1;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        $i2 = neg i0;

        $f3 = (float) $i2;

        $i3 = neg i1;

        $f2 = (float) $i3;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f3, $f2);

     label4:
        return;
    }

    private void drawDefaultFocusHighlight(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        android.graphics.drawable.Drawable $r2, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if $r2 == null goto label2;

        $z0 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z0 == 0 goto label2;

        $z1 = r0.<android.view.View: boolean mDefaultFocusHighlightSizeChanged>;

        if $z1 == 0 goto label1;

        r0.<android.view.View: boolean mDefaultFocusHighlightSizeChanged> = 0;

        i0 = r0.<android.view.View: int mScrollX>;

        i1 = r0.<android.view.View: int mRight>;

        i2 = r0.<android.view.View: int mLeft>;

        i3 = r0.<android.view.View: int mScrollY>;

        i4 = r0.<android.view.View: int mBottom>;

        i5 = r0.<android.view.View: int mTop>;

        $r4 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        $i6 = i1 + i0;

        $i9 = $i6 - i2;

        $i7 = i4 + i3;

        $i8 = $i7 - i5;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i0, i3, $i9, $i8);

     label1:
        $r3 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label2:
        return;
    }

    private static void dumpFlag(java.util.HashMap, java.lang.String, int)
    {
        java.util.HashMap r0;
        java.lang.String r1, r2, $r4, $r5, $r14, r17, r18;
        java.lang.Object[] $r3;
        java.lang.StringBuilder $r6, $r10;
        int i0, i1;

        r0 := @parameter0: java.util.HashMap;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>(i0);

        $r3[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%32s", $r3);

        r2 = virtualinvoke $r5.<java.lang.String: java.lang.String replace(char,char)>(48, 32);

        i1 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(95);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        if i1 <= 0 goto label1;

        r17 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

        goto label2;

     label1:
        r17 = r1;

     label2:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        r18 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r14);

        return;
    }

    private static void dumpFlags()
    {
        java.lang.reflect.Field[] r0;
        int i0, $i2, $i3, i4, i5, i6, i7;
        int[] r1;
        java.lang.StringBuilder r2;
        java.lang.Class $r3, $r9, $r10, $r11;
        java.util.Set $r4;
        boolean $z1, $z2, $z3, $z4, $z5;
        java.lang.Object $r5, $r7, $r12;
        java.lang.String $r6, $r8, $r13, $r18, $r19;
        java.lang.Throwable $r20;
        java.lang.RuntimeException $r21;
        java.util.HashMap r22;
        java.lang.reflect.Field r23;
        java.util.ArrayList r24;
        java.util.Iterator r25;

        r22 = staticinvoke <com.google.android.collect.Maps: java.util.HashMap newHashMap()>();

     label01:
        $r3 = class "Landroid/view/View;";

        r0 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>();

        i0 = lengthof r0;

     label02:
        i4 = 0;

     label03:
        if i4 >= i0 goto label11;

        r23 = r0[i4];

     label04:
        i5 = virtualinvoke r23.<java.lang.reflect.Field: int getModifiers()>();

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i5);

        if $z2 == 0 goto label10;

        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>(i5);

        if $z3 == 0 goto label10;

        $r9 = virtualinvoke r23.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r10 = <java.lang.Integer: java.lang.Class TYPE>;

        $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r10);

        if $z4 == 0 goto label06;

        i6 = virtualinvoke r23.<java.lang.reflect.Field: int getInt(java.lang.Object)>(null);

        $r19 = virtualinvoke r23.<java.lang.reflect.Field: java.lang.String getName()>();

        staticinvoke <android.view.View: void dumpFlag(java.util.HashMap,java.lang.String,int)>(r22, $r19, i6);

     label05:
        goto label10;

     label06:
        $r11 = virtualinvoke r23.<java.lang.reflect.Field: java.lang.Class getType()>();

        $z5 = virtualinvoke $r11.<java.lang.Object: boolean equals(java.lang.Object)>(class "[I");

        if $z5 == 0 goto label10;

        $r12 = virtualinvoke r23.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(null);

        r1 = (int[]) $r12;

     label07:
        i7 = 0;

     label08:
        $i2 = lengthof r1;

        if i7 >= $i2 goto label10;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke r23.<java.lang.reflect.Field: java.lang.String getName()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r18 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i3 = r1[i7];

        staticinvoke <android.view.View: void dumpFlag(java.util.HashMap,java.lang.String,int)>(r22, $r18, $i3);

     label09:
        i7 = i7 + 1;

        goto label08;

     label10:
        i4 = i4 + 1;

        goto label03;

     label11:
        r24 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        $r4 = virtualinvoke r22.<java.util.HashMap: java.util.Set keySet()>();

        virtualinvoke r24.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        staticinvoke <java.util.Collections: void sort(java.util.List)>(r24);

        r25 = virtualinvoke r24.<java.util.ArrayList: java.util.Iterator iterator()>();

     label12:
        $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label13;

        $r5 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.String) $r5;

        $r7 = virtualinvoke r22.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        $r8 = (java.lang.String) $r7;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r8);

        goto label12;

     label13:
        return;

     label14:
        $r20 := @caughtexception;

        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r20);

        throw $r21;

        catch java.lang.IllegalAccessException from label01 to label02 with label14;
        catch java.lang.IllegalAccessException from label04 to label05 with label14;
        catch java.lang.IllegalAccessException from label06 to label07 with label14;
        catch java.lang.IllegalAccessException from label08 to label09 with label14;
    }

    private android.view.View findAccessibilityFocusHost(boolean)
    {
        android.view.View r0, r2;
        boolean z0, $z1, $z2;
        android.view.ViewRootImpl r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocusedViewOrHost()>();

        if $z1 == 0 goto label1;

        return r0;

     label1:
        if z0 == 0 goto label2;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label2;

        r2 = virtualinvoke r1.<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()>();

        if r2 == null goto label2;

        $z2 = staticinvoke <android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>(r2, r0);

        if $z2 == 0 goto label2;

        return r2;

     label2:
        return null;
    }

    private android.view.FrameMetricsObserver findFrameMetricsObserver(android.view.Window$OnFrameMetricsAvailableListener)
    {
        android.view.View r0;
        android.view.Window$OnFrameMetricsAvailableListener r1, $r7;
        android.view.FrameMetricsObserver r2;
        java.util.ArrayList $r3, $r4, $r5;
        int $i0, i1;
        java.lang.Object $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.Window$OnFrameMetricsAvailableListener;

        $r3 = r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers>;

        if $r3 == null goto label3;

        i1 = 0;

     label1:
        $r4 = r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label3;

        $r5 = r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (android.view.FrameMetricsObserver) $r6;

        $r7 = r2.<android.view.FrameMetricsObserver: android.view.Window$OnFrameMetricsAvailableListener mListener>;

        if $r7 != r1 goto label2;

        return r2;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return null;
    }

    private android.view.View findLabelForView(android.view.View, int)
    {
        android.view.View r0, r1, $r5;
        int i0;
        android.view.View$MatchLabelForPredicate $r2, $r3, $r4, $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.View: android.view.View$MatchLabelForPredicate mMatchLabelForPredicate>;

        if $r2 != null goto label1;

        $r6 = new android.view.View$MatchLabelForPredicate;

        specialinvoke $r6.<android.view.View$MatchLabelForPredicate: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$MatchLabelForPredicate mMatchLabelForPredicate> = $r6;

     label1:
        $r3 = r0.<android.view.View: android.view.View$MatchLabelForPredicate mMatchLabelForPredicate>;

        staticinvoke <android.view.View$MatchLabelForPredicate: int access$1302(android.view.View$MatchLabelForPredicate,int)>($r3, i0);

        $r4 = r0.<android.view.View: android.view.View$MatchLabelForPredicate mMatchLabelForPredicate>;

        $r5 = virtualinvoke r0.<android.view.View: android.view.View findViewByPredicateInsideOut(android.view.View,java.util.function.Predicate)>(r1, $r4);

        return $r5;
    }

    private android.view.View findViewInsideOutShouldExist(android.view.View, int)
    {
        android.view.View r0, r1, $r2;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,android.view.View,int)>(r1, r0, i0);

        return $r2;
    }

    private android.view.View findViewInsideOutShouldExist(android.view.View, android.view.View, int)
    {
        android.view.View r0, r9, r10, r11;
        int i0;
        android.view.View$MatchIdPredicate $r1, $r2, $r3, $r8;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;

        r0 := @this: android.view.View;

        r9 := @parameter0: android.view.View;

        r10 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        $r1 = r0.<android.view.View: android.view.View$MatchIdPredicate mMatchIdPredicate>;

        if $r1 != null goto label1;

        $r8 = new android.view.View$MatchIdPredicate;

        specialinvoke $r8.<android.view.View$MatchIdPredicate: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$MatchIdPredicate mMatchIdPredicate> = $r8;

     label1:
        $r2 = r0.<android.view.View: android.view.View$MatchIdPredicate mMatchIdPredicate>;

        $r2.<android.view.View$MatchIdPredicate: int mId> = i0;

        $r3 = r0.<android.view.View: android.view.View$MatchIdPredicate mMatchIdPredicate>;

        r11 = virtualinvoke r9.<android.view.View: android.view.View findViewByPredicateInsideOut(android.view.View,java.util.function.Predicate)>(r10, $r3);

        if r11 != null goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("couldn\'t find view with id ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r7);

     label2:
        return r11;
    }

    private boolean fitSystemWindowsInt(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, r2;
        boolean z0;
        int $i0, $i1;
        java.lang.ThreadLocal $r3;
        java.lang.Object $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 2;

        if $i1 != 2 goto label1;

        $r3 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r2 = (android.graphics.Rect) $r4;

        z0 = virtualinvoke r0.<android.view.View: boolean computeFitSystemWindows(android.graphics.Rect,android.graphics.Rect)>(r1, r2);

        specialinvoke r0.<android.view.View: void applyInsets(android.graphics.Rect)>(r2);

        return z0;

     label1:
        return 0;
    }

    public static int generateViewId()
    {
        int i0, i1, i2;
        java.util.concurrent.atomic.AtomicInteger $r0, $r1;
        boolean $z0;

     label1:
        $r0 = <android.view.View: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        i1 = i0 + 1;

        i2 = i1;

        if i1 <= 16777215 goto label2;

        i2 = 1;

     label2:
        $r1 = <android.view.View: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId>;

        $z0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>(i0, i2);

        if $z0 == 0 goto label3;

        return i0;

     label3:
        goto label1;
    }

    private android.view.contentcapture.ContentCaptureSession getAndCacheContentCaptureSession()
    {
        android.view.View r0, $r4;
        android.view.ViewParent r1;
        boolean $z0;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.view.contentcapture.ContentCaptureSession r5, r6;
        android.view.contentcapture.ContentCaptureManager r7;
        android.view.contentcapture.MainContentCaptureSession r8;

        r0 := @this: android.view.View;

        r5 = r0.<android.view.View: android.view.contentcapture.ContentCaptureSession mContentCaptureSession>;

        if r5 == null goto label1;

        return r5;

     label1:
        r6 = null;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r1 instanceof android.view.View;

        if $z0 == 0 goto label2;

        $r4 = (android.view.View) r1;

        r6 = virtualinvoke $r4.<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>();

     label2:
        if r6 != null goto label5;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/view/contentcapture/ContentCaptureManager;");

        r7 = (android.view.contentcapture.ContentCaptureManager) $r3;

        if r7 != null goto label3;

        r8 = null;

        goto label4;

     label3:
        r8 = virtualinvoke r7.<android.view.contentcapture.ContentCaptureManager: android.view.contentcapture.MainContentCaptureSession getMainContentCaptureSession()>();

     label4:
        return r8;

     label5:
        return r6;
    }

    private static android.util.SparseArray getAttributeMap()
    {
        android.util.SparseArray $r0, $r1, $r2;

        $r0 = <android.view.View: android.util.SparseArray mAttributeMap>;

        if $r0 != null goto label1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        <android.view.View: android.util.SparseArray mAttributeMap> = $r2;

     label1:
        $r1 = <android.view.View: android.util.SparseArray mAttributeMap>;

        return $r1;
    }

    private android.view.autofill.AutofillManager getAutofillManager()
    {
        android.view.View r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.view.autofill.AutofillManager $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/view/autofill/AutofillManager;");

        $r3 = (android.view.autofill.AutofillManager) $r2;

        return $r3;
    }

    private android.graphics.drawable.Drawable getAutofilledDrawable()
    {
        android.view.View r0, $r5;
        android.content.Context r1;
        int i0;
        android.graphics.drawable.Drawable $r2, $r4, $r9;
        android.view.View$AttachInfo $r3, $r8, r10;
        android.content.res.Resources$Theme $r6;
        int[] $r7;
        android.content.res.TypedArray r11;

        r0 := @this: android.view.View;

        r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r10 != null goto label1;

        return null;

     label1:
        $r2 = r10.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAutofilledDrawable>;

        if $r2 != null goto label2;

        $r5 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        r1 = virtualinvoke $r5.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke r1.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $r7 = <android.view.View: int[] AUTOFILL_HIGHLIGHT_ATTR>;

        r11 = virtualinvoke $r6.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>($r7);

        i0 = virtualinvoke r11.<android.content.res.TypedArray: int getResourceId(int,int)>(0, 0);

        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r9 = virtualinvoke r1.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i0);

        $r8.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAutofilledDrawable> = $r9;

        virtualinvoke r11.<android.content.res.TypedArray: void recycle()>();

     label2:
        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAutofilledDrawable>;

        return $r4;
    }

    static android.graphics.Paint getDebugPaint()
    {
        android.graphics.Paint $r1, $r2, $r3;

        $r1 = <android.view.View: android.graphics.Paint sDebugPaint>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        <android.view.View: android.graphics.Paint sDebugPaint> = $r3;

        virtualinvoke $r3.<android.graphics.Paint: void setAntiAlias(boolean)>(0);

     label1:
        $r2 = <android.view.View: android.graphics.Paint sDebugPaint>;

        return $r2;
    }

    private android.graphics.drawable.Drawable getDefaultFocusHighlightDrawable()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1, $r3, $r6;
        int[] $r2;
        android.content.Context r4;
        android.content.res.TypedArray r5;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlightCache>;

        if $r1 != null goto label1;

        r4 = r0.<android.view.View: android.content.Context mContext>;

        if r4 == null goto label1;

        $r2 = newarray (int)[1];

        $r2[0] = 16843534;

        r5 = virtualinvoke r4.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r2);

        $r3 = virtualinvoke r5.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(0);

        r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlightCache> = $r3;

        virtualinvoke r5.<android.content.res.TypedArray: void recycle()>();

     label1:
        $r6 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlightCache>;

        return $r6;
    }

    public static int getDefaultSize(int, int)
    {
        int i1, i2, i3, i4;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i1 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i3);

        i4 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i3);

        if i1 == -2147483648 goto label2;

        if i1 == 0 goto label1;

        if i1 == 1073741824 goto label2;

        goto label3;

     label1:
        goto label3;

     label2:
        i2 = i4;

     label3:
        return i2;
    }

    private android.graphics.RenderNode getDrawableRenderNode(android.graphics.drawable.Drawable, android.graphics.RenderNode)
    {
        android.view.View r0;
        android.graphics.RecordingCanvas r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        float $f0, $f1;
        boolean $z1;
        java.lang.Class $r2;
        java.lang.String $r3;
        android.view.ViewAnimationHostBridge $r4;
        java.lang.Throwable $r5;
        android.graphics.drawable.Drawable r6;
        android.graphics.RenderNode r7, r8;
        android.graphics.Rect r9;

        r0 := @this: android.view.View;

        r6 := @parameter0: android.graphics.drawable.Drawable;

        r7 := @parameter1: android.graphics.RenderNode;

        r8 = r7;

        if r7 != null goto label1;

        $r2 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        $r4 = new android.view.ViewAnimationHostBridge;

        specialinvoke $r4.<android.view.ViewAnimationHostBridge: void <init>(android.view.View)>(r0);

        r8 = staticinvoke <android.graphics.RenderNode: android.graphics.RenderNode create(java.lang.String,android.graphics.RenderNode$AnimationHost)>($r3, $r4);

        virtualinvoke r8.<android.graphics.RenderNode: void setUsageHint(int)>(1);

     label1:
        r9 = virtualinvoke r6.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $i0 = virtualinvoke r9.<android.graphics.Rect: int width()>();

        $i1 = virtualinvoke r9.<android.graphics.Rect: int height()>();

        r1 = virtualinvoke r8.<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>($i0, $i1);

        $i2 = r9.<android.graphics.Rect: int left>;

        $i3 = neg $i2;

        $f1 = (float) $i3;

        $i4 = r9.<android.graphics.Rect: int top>;

        $i5 = neg $i4;

        $f0 = (float) $i5;

        virtualinvoke r1.<android.graphics.RecordingCanvas: void translate(float,float)>($f1, $f0);

     label2:
        virtualinvoke r6.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label3:
        virtualinvoke r8.<android.graphics.RenderNode: void endRecording()>();

        $i9 = r9.<android.graphics.Rect: int left>;

        $i8 = r9.<android.graphics.Rect: int top>;

        $i7 = r9.<android.graphics.Rect: int right>;

        $i6 = r9.<android.graphics.Rect: int bottom>;

        virtualinvoke r8.<android.graphics.RenderNode: boolean setLeftTopRightBottom(int,int,int,int)>($i9, $i8, $i7, $i6);

        $z1 = virtualinvoke r6.<android.graphics.drawable.Drawable: boolean isProjected()>();

        virtualinvoke r8.<android.graphics.RenderNode: boolean setProjectBackwards(boolean)>($z1);

        virtualinvoke r8.<android.graphics.RenderNode: boolean setProjectionReceiver(boolean)>(1);

        virtualinvoke r8.<android.graphics.RenderNode: boolean setClipToBounds(boolean)>(0);

        return r8;

     label4:
        $r5 := @caughtexception;

        virtualinvoke r8.<android.graphics.RenderNode: void endRecording()>();

        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private float getFinalAlpha()
    {
        android.view.View r0;
        android.view.View$TransformationInfo r1, $r2;
        float $f0, $f1, $f2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if r1 == null goto label1;

        $f0 = staticinvoke <android.view.View$TransformationInfo: float access$2500(android.view.View$TransformationInfo)>(r1);

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f1 = $r2.<android.view.View$TransformationInfo: float mTransitionAlpha>;

        $f2 = $f0 * $f1;

        return $f2;

     label1:
        return 1.0F;
    }

    private int getFocusableAttribute(android.content.res.TypedArray)
    {
        android.view.View r0;
        android.content.res.TypedArray r1;
        android.util.TypedValue $r3;
        boolean $z0;
        int $i0, $i1, $i2;
        byte b3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.TypedArray;

        $r3 = new android.util.TypedValue;

        specialinvoke $r3.<android.util.TypedValue: void <init>()>();

        $z0 = virtualinvoke r1.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(19, $r3);

        if $z0 == 0 goto label4;

        $i0 = $r3.<android.util.TypedValue: int type>;

        if $i0 != 18 goto label3;

        $i2 = $r3.<android.util.TypedValue: int data>;

        if $i2 != 0 goto label1;

        b3 = 0;

        goto label2;

     label1:
        b3 = 1;

     label2:
        return b3;

     label3:
        $i1 = $r3.<android.util.TypedValue: int data>;

        return $i1;

     label4:
        return 16;
    }

    private void getHorizontalScrollBarBounds(android.graphics.Rect, android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i42, i45, i46, i47, i48, i49;
        boolean $z0, $z1, z2;
        android.view.View$ScrollabilityCache $r2;
        byte b44;

        r0 := @this: android.view.View;

        r3 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        if r3 == null goto label01;

        goto label02;

     label01:
        r3 = r1;

     label02:
        if r3 != null goto label03;

        return;

     label03:
        i42 = r0.<android.view.View: int mViewFlags>;

        $i3 = i42 & 33554432;

        if $i3 != 0 goto label04;

        b44 = -1;

        goto label05;

     label04:
        b44 = 0;

     label05:
        $z0 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarEnabled()>();

        if $z0 == 0 goto label06;

        $z1 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarHidden()>();

        if $z1 != 0 goto label06;

        z2 = 1;

        goto label07;

     label06:
        z2 = 0;

     label07:
        i0 = virtualinvoke r0.<android.view.View: int getHorizontalScrollbarHeight()>();

        if z2 == 0 goto label08;

        i45 = virtualinvoke r0.<android.view.View: int getVerticalScrollbarWidth()>();

        goto label09;

     label08:
        i45 = 0;

     label09:
        i1 = r0.<android.view.View: int mRight>;

        i2 = r0.<android.view.View: int mLeft>;

        $i5 = r0.<android.view.View: int mBottom>;

        $i4 = r0.<android.view.View: int mTop>;

        i46 = $i5 - $i4;

        $i6 = r0.<android.view.View: int mScrollY>;

        $i7 = $i6 + i46;

        $i10 = $i7 - i0;

        $i8 = r0.<android.view.View: int mUserPaddingBottom>;

        $i9 = $i8 & b44;

        $i11 = $i10 - $i9;

        r3.<android.graphics.Rect: int top> = $i11;

        $i14 = r0.<android.view.View: int mScrollX>;

        $i12 = r0.<android.view.View: int mPaddingLeft>;

        $i13 = $i12 & b44;

        $i15 = $i14 + $i13;

        r3.<android.graphics.Rect: int left> = $i15;

        $i17 = r0.<android.view.View: int mScrollX>;

        $i16 = i1 - i2;

        $i20 = $i17 + $i16;

        $i18 = r0.<android.view.View: int mUserPaddingRight>;

        $i19 = $i18 & b44;

        $i21 = $i20 - $i19;

        $i22 = $i21 - i45;

        r3.<android.graphics.Rect: int right> = $i22;

        $i23 = r3.<android.graphics.Rect: int top>;

        $i24 = $i23 + i0;

        r3.<android.graphics.Rect: int bottom> = $i24;

        if r1 != null goto label10;

        return;

     label10:
        if r1 == r3 goto label11;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>(r3);

     label11:
        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        i47 = $r2.<android.view.View$ScrollabilityCache: int scrollBarMinTouchTarget>;

        $i25 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        if $i25 >= i47 goto label12;

        $i33 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $i34 = i47 - $i33;

        i48 = $i34 / 2;

        $i35 = r1.<android.graphics.Rect: int bottom>;

        $i38 = $i35 + i48;

        $i36 = r0.<android.view.View: int mScrollY>;

        $i37 = $i36 + i46;

        $i39 = staticinvoke <java.lang.Math: int min(int,int)>($i38, $i37);

        r1.<android.graphics.Rect: int bottom> = $i39;

        $i40 = r1.<android.graphics.Rect: int bottom>;

        $i41 = $i40 - i47;

        r1.<android.graphics.Rect: int top> = $i41;

     label12:
        $i26 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        if $i26 >= i47 goto label13;

        $i27 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i28 = i47 - $i27;

        i49 = $i28 / 2;

        $i29 = r1.<android.graphics.Rect: int left>;

        $i30 = $i29 - i49;

        r1.<android.graphics.Rect: int left> = $i30;

        $i31 = r1.<android.graphics.Rect: int left>;

        $i32 = $i31 + i47;

        r1.<android.graphics.Rect: int right> = $i32;

     label13:
        return;
    }

    private android.view.View getProjectionReceiver()
    {
        android.view.View r0, r1;
        boolean $z0, $z1;
        android.view.ViewParent r2;

        r0 := @this: android.view.View;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

     label1:
        if r2 == null goto label3;

        $z0 = r2 instanceof android.view.View;

        if $z0 == 0 goto label3;

        r1 = (android.view.View) r2;

        $z1 = specialinvoke r1.<android.view.View: boolean isProjectionReceiver()>();

        if $z1 == 0 goto label2;

        return r1;

     label2:
        r2 = interfaceinvoke r2.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return null;
    }

    private void getRoundVerticalScrollBarBounds(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        i0 = r0.<android.view.View: int mRight>;

        i1 = r0.<android.view.View: int mLeft>;

        i2 = r0.<android.view.View: int mBottom>;

        i3 = r0.<android.view.View: int mTop>;

        $i4 = r0.<android.view.View: int mScrollX>;

        r1.<android.graphics.Rect: int left> = $i4;

        $i5 = r0.<android.view.View: int mScrollY>;

        r1.<android.graphics.Rect: int top> = $i5;

        $i7 = r1.<android.graphics.Rect: int left>;

        $i6 = i0 - i1;

        $i8 = $i7 + $i6;

        r1.<android.graphics.Rect: int right> = $i8;

        $i10 = r0.<android.view.View: int mScrollY>;

        $i9 = i2 - i3;

        $i11 = $i10 + $i9;

        r1.<android.graphics.Rect: int bottom> = $i11;

        return;
    }

    private android.view.HandlerActionQueue getRunQueue()
    {
        android.view.View r0;
        android.view.HandlerActionQueue $r1, $r2, $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.HandlerActionQueue mRunQueue>;

        if $r1 != null goto label1;

        $r3 = new android.view.HandlerActionQueue;

        specialinvoke $r3.<android.view.HandlerActionQueue: void <init>()>();

        r0.<android.view.View: android.view.HandlerActionQueue mRunQueue> = $r3;

     label1:
        $r2 = r0.<android.view.View: android.view.HandlerActionQueue mRunQueue>;

        return $r2;
    }

    private android.view.View$ScrollabilityCache getScrollCache()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        return $r1;
    }

    private void getStraightVerticalScrollBarBounds(android.graphics.Rect, android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, i49, i50, i51, $i52, $i53, i54, i55, i56, $i57, i58;
        android.view.View$ScrollabilityCache $r2;
        boolean $z0;
        byte b48;

        r0 := @this: android.view.View;

        r3 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        if r3 == null goto label01;

        goto label02;

     label01:
        r3 = r1;

     label02:
        if r3 != null goto label03;

        return;

     label03:
        $i2 = r0.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 33554432;

        if $i3 != 0 goto label04;

        b48 = -1;

        goto label05;

     label04:
        b48 = 0;

     label05:
        i49 = virtualinvoke r0.<android.view.View: int getVerticalScrollbarWidth()>();

        i50 = r0.<android.view.View: int mVerticalScrollbarPosition>;

        i51 = i50;

        if i50 != 0 goto label07;

        $z0 = virtualinvoke r0.<android.view.View: boolean isLayoutRtl()>();

        if $z0 == 0 goto label06;

        i51 = 1;

        goto label07;

     label06:
        i51 = 2;

     label07:
        $i52 = r0.<android.view.View: int mRight>;

        $i53 = r0.<android.view.View: int mLeft>;

        i54 = $i52 - $i53;

        i0 = r0.<android.view.View: int mBottom>;

        i1 = r0.<android.view.View: int mTop>;

        if i51 == 1 goto label08;

        $i42 = r0.<android.view.View: int mScrollX>;

        $i43 = $i42 + i54;

        $i46 = $i43 - i49;

        $i44 = r0.<android.view.View: int mUserPaddingRight>;

        $i45 = $i44 & b48;

        $i47 = $i46 - $i45;

        r3.<android.graphics.Rect: int left> = $i47;

        goto label09;

     label08:
        $i6 = r0.<android.view.View: int mScrollX>;

        $i4 = r0.<android.view.View: int mUserPaddingLeft>;

        $i5 = $i4 & b48;

        $i7 = $i6 + $i5;

        r3.<android.graphics.Rect: int left> = $i7;

     label09:
        $i10 = r0.<android.view.View: int mScrollY>;

        $i8 = r0.<android.view.View: int mPaddingTop>;

        $i9 = $i8 & b48;

        $i11 = $i10 + $i9;

        r3.<android.graphics.Rect: int top> = $i11;

        $i12 = r3.<android.graphics.Rect: int left>;

        $i13 = $i12 + i49;

        r3.<android.graphics.Rect: int right> = $i13;

        $i15 = r0.<android.view.View: int mScrollY>;

        $i14 = i0 - i1;

        $i18 = $i15 + $i14;

        $i16 = r0.<android.view.View: int mUserPaddingBottom>;

        $i17 = $i16 & b48;

        $i19 = $i18 - $i17;

        r3.<android.graphics.Rect: int bottom> = $i19;

        if r1 != null goto label10;

        return;

     label10:
        if r1 == r3 goto label11;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>(r3);

     label11:
        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        i55 = $r2.<android.view.View$ScrollabilityCache: int scrollBarMinTouchTarget>;

        $i20 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        if $i20 >= i55 goto label13;

        $i27 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i28 = i55 - $i27;

        i56 = $i28 / 2;

        if i51 != 2 goto label12;

        $i35 = r1.<android.graphics.Rect: int right>;

        $i38 = $i35 + i56;

        $i36 = r0.<android.view.View: int mScrollX>;

        $i37 = $i36 + i54;

        $i39 = staticinvoke <java.lang.Math: int min(int,int)>($i38, $i37);

        r1.<android.graphics.Rect: int right> = $i39;

        $i40 = r1.<android.graphics.Rect: int right>;

        $i41 = $i40 - i55;

        r1.<android.graphics.Rect: int left> = $i41;

        goto label13;

     label12:
        $i29 = r1.<android.graphics.Rect: int left>;

        $i31 = $i29 + i56;

        $i30 = r0.<android.view.View: int mScrollX>;

        $i32 = staticinvoke <java.lang.Math: int max(int,int)>($i31, $i30);

        r1.<android.graphics.Rect: int left> = $i32;

        $i33 = r1.<android.graphics.Rect: int left>;

        $i34 = $i33 + i55;

        r1.<android.graphics.Rect: int right> = $i34;

     label13:
        $i57 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        if $i57 >= i55 goto label14;

        $i21 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $i22 = i55 - $i21;

        i58 = $i22 / 2;

        $i23 = r1.<android.graphics.Rect: int top>;

        $i24 = $i23 - i58;

        r1.<android.graphics.Rect: int top> = $i24;

        $i25 = r1.<android.graphics.Rect: int top>;

        $i26 = $i25 + i55;

        r1.<android.graphics.Rect: int bottom> = $i26;

     label14:
        return;
    }

    private android.view.View$SendAccessibilityEventThrottle getThrottleForAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        int $i0, $i1, $i2, $i3;
        android.view.View$SendAccessibilityEventThrottle $r2, $r3, $r4;
        android.view.View$SendViewScrolledAccessibilityEvent $r5, $r6, $r7;
        boolean z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if $i0 != 4096 goto label2;

        $r5 = r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent>;

        if $r5 != null goto label1;

        $r7 = new android.view.View$SendViewScrolledAccessibilityEvent;

        specialinvoke $r7.<android.view.View$SendViewScrolledAccessibilityEvent: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent> = $r7;

     label1:
        $r6 = r0.<android.view.View: android.view.View$SendViewScrolledAccessibilityEvent mSendViewScrolledAccessibilityEvent>;

        return $r6;

     label2:
        $i1 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>();

        $i2 = $i1 & 64;

        if $i2 == 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        $i3 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if $i3 != 2048 goto label6;

        if z0 == 0 goto label6;

        $r2 = r0.<android.view.View: android.view.View$SendAccessibilityEventThrottle mSendStateChangedAccessibilityEvent>;

        if $r2 != null goto label5;

        $r4 = new android.view.View$SendAccessibilityEventThrottle;

        specialinvoke $r4.<android.view.View$SendAccessibilityEventThrottle: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$SendAccessibilityEventThrottle mSendStateChangedAccessibilityEvent> = $r4;

     label5:
        $r3 = r0.<android.view.View: android.view.View$SendAccessibilityEventThrottle mSendStateChangedAccessibilityEvent>;

        return $r3;

     label6:
        return null;
    }

    private void getVerticalScrollBarBounds(android.graphics.Rect, android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, r3;
        android.view.RoundScrollbarRenderer $r2;

        r0 := @this: android.view.View;

        r3 := @parameter0: android.graphics.Rect;

        r1 := @parameter1: android.graphics.Rect;

        $r2 = r0.<android.view.View: android.view.RoundScrollbarRenderer mRoundScrollbarRenderer>;

        if $r2 != null goto label1;

        specialinvoke r0.<android.view.View: void getStraightVerticalScrollBarBounds(android.graphics.Rect,android.graphics.Rect)>(r3, r1);

        goto label4;

     label1:
        if r3 == null goto label2;

        goto label3;

     label2:
        r3 = r1;

     label3:
        specialinvoke r0.<android.view.View: void getRoundVerticalScrollBarBounds(android.graphics.Rect)>(r3);

     label4:
        return;
    }

    private void handleTooltipUp()
    {
        android.view.View r0;
        android.view.View$TooltipInfo r1, $r3, $r5;
        com.android.internal.view.TooltipPopup $r2;
        java.lang.Runnable $r4, $r6;
        int $i0;
        long $l1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        if r1 == null goto label2;

        $r2 = r1.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup>;

        if $r2 != null goto label1;

        goto label2;

     label1:
        $r3 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r4 = $r3.<android.view.View$TooltipInfo: java.lang.Runnable mHideTooltipRunnable>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r4);

        $r5 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r6 = $r5.<android.view.View$TooltipInfo: java.lang.Runnable mHideTooltipRunnable>;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTooltipHideTimeout()>();

        $l1 = (long) $i0;

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r6, $l1);

        return;

     label2:
        return;
    }

    private boolean hasAncestorThatBlocksDescendantFocus()
    {
        android.view.View r0;
        boolean z0, $z1, $z2;
        int $i0;
        android.view.ViewParent r1;
        android.view.ViewGroup r2;

        r0 := @this: android.view.View;

        z0 = virtualinvoke r0.<android.view.View: boolean isFocusableInTouchMode()>();

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

     label1:
        $z1 = r1 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label4;

        r2 = (android.view.ViewGroup) r1;

        $i0 = virtualinvoke r2.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 == 393216 goto label3;

        if z0 != 0 goto label2;

        $z2 = virtualinvoke r2.<android.view.ViewGroup: boolean shouldBlockFocusForTouchscreen()>();

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        r1 = virtualinvoke r2.<android.view.ViewGroup: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return 1;

     label4:
        return 0;
    }

    private boolean hasListenersForAccessibility()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.TouchDelegate $r2;
        android.view.View$OnKeyListener $r3;
        android.view.View$OnTouchListener $r4;
        android.view.View$OnGenericMotionListener $r5;
        android.view.View$OnHoverListener $r6;
        android.view.View$OnDragListener $r7;
        boolean z0;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        if $r2 != null goto label2;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnKeyListener access$400(android.view.View$ListenerInfo)>(r1);

        if $r3 != null goto label2;

        $r4 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnTouchListener access$500(android.view.View$ListenerInfo)>(r1);

        if $r4 != null goto label2;

        $r5 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnGenericMotionListener access$600(android.view.View$ListenerInfo)>(r1);

        if $r5 != null goto label2;

        $r6 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnHoverListener access$700(android.view.View$ListenerInfo)>(r1);

        if $r6 != null goto label2;

        $r7 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnDragListener access$800(android.view.View$ListenerInfo)>(r1);

        if $r7 == null goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean hasParentWantsFocus()
    {
        android.view.View r0;
        boolean $z0;
        int $i0, $i1;
        android.view.ViewParent r1;
        android.view.ViewGroup r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

     label1:
        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label3;

        r2 = (android.view.ViewGroup) r1;

        $i0 = r2.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label2;

        return 1;

     label2:
        r1 = r2.<android.view.ViewGroup: android.view.ViewParent mParent>;

        goto label1;

     label3:
        return 0;
    }

    private boolean hasPendingLongPressCallback()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.View$CheckForLongPress $r2, $r3;
        android.os.Handler $r4;
        boolean $z0;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if $r2 != null goto label1;

        return 0;

     label1:
        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 != null goto label2;

        return 0;

     label2:
        $r4 = r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r3 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        $z0 = virtualinvoke $r4.<android.os.Handler: boolean hasCallbacks(java.lang.Runnable)>($r3);

        return $z0;
    }

    private boolean hasRtlSupport()
    {
        android.view.View r0;
        android.content.Context $r1;
        android.content.pm.ApplicationInfo $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $z0 = virtualinvoke $r2.<android.content.pm.ApplicationInfo: boolean hasRtlSupport()>();

        return $z0;
    }

    private boolean hasSize()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mBottom>;

        $i0 = r0.<android.view.View: int mTop>;

        if $i1 <= $i0 goto label1;

        $i3 = r0.<android.view.View: int mRight>;

        $i2 = r0.<android.view.View: int mLeft>;

        if $i3 <= $i2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static android.view.View inflate(android.content.Context, int, android.view.ViewGroup)
    {
        android.content.Context r0;
        int i0;
        android.view.ViewGroup r1;
        android.view.LayoutInflater $r2;
        android.view.View $r3;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.ViewGroup;

        $r2 = staticinvoke <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>(r0);

        $r3 = virtualinvoke $r2.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i0, r1);

        return $r3;
    }

    private void initScrollCache()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r2;
        android.content.Context $r3;
        android.view.ViewConfiguration $r4;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 != null goto label1;

        $r2 = new android.view.View$ScrollabilityCache;

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r3);

        specialinvoke $r2.<android.view.View$ScrollabilityCache: void <init>(android.view.ViewConfiguration,android.view.View)>($r4, r0);

        r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache> = $r2;

     label1:
        return;
    }

    private boolean initialAwakenScrollBars()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        int $i0, $i1;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        z1 = 1;

        if r1 == null goto label1;

        $i0 = r1.<android.view.View$ScrollabilityCache: int scrollBarDefaultDelayBeforeFade>;

        $i1 = $i0 * 4;

        $z0 = virtualinvoke r0.<android.view.View: boolean awakenScrollBars(int,boolean)>($i1, 1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private void initializeScrollBarDrawable()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r4, $r5, $r8;
        android.widget.ScrollBarDrawable $r2, $r3, $r6, $r9;
        int[] $r7;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r2 = $r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if $r2 != null goto label1;

        $r4 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r3 = new android.widget.ScrollBarDrawable;

        specialinvoke $r3.<android.widget.ScrollBarDrawable: void <init>()>();

        $r4.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar> = $r3;

        $r5 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r6 = $r5.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        $r7 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $r6.<android.widget.ScrollBarDrawable: boolean setState(int[])>($r7);

        $r8 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r9 = $r8.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r9.<android.widget.ScrollBarDrawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

     label1:
        return;
    }

    private void initializeScrollIndicatorsInternal()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1, $r3;
        android.content.Context $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mScrollIndicatorDrawable>;

        if $r1 != null goto label1;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(17303417);

        r0.<android.view.View: android.graphics.drawable.Drawable mScrollIndicatorDrawable> = $r3;

     label1:
        return;
    }

    private boolean isAccessibilityPane()
    {
        android.view.View r0;
        java.lang.CharSequence $r1;
        boolean z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: java.lang.CharSequence mAccessibilityPaneTitle>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isAutofillable()
    {
        android.view.View r0;
        int i0, $i1;
        boolean $z0, $z1, z2;
        android.content.Context $r1, $r2;
        android.content.AutofillOptions r3;
        android.view.autofill.AutofillManager r4;

        r0 := @this: android.view.View;

        i0 = virtualinvoke r0.<android.view.View: int getAutofillType()>();

        z2 = 0;

        if i0 != 0 goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean isImportantForAutofill()>();

        if $z0 != 0 goto label5;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        r3 = virtualinvoke $r1.<android.content.Context: android.content.AutofillOptions getAutofillOptions()>();

        if r3 == null goto label4;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $z1 = virtualinvoke r3.<android.content.AutofillOptions: boolean isAugmentedAutofillEnabled(android.content.Context)>($r2);

        if $z1 != 0 goto label2;

        goto label4;

     label2:
        r4 = specialinvoke r0.<android.view.View: android.view.autofill.AutofillManager getAutofillManager()>();

        if r4 != null goto label3;

        return 0;

     label3:
        virtualinvoke r4.<android.view.autofill.AutofillManager: void notifyViewEnteredForAugmentedAutofill(android.view.View)>(r0);

        goto label5;

     label4:
        return 0;

     label5:
        $i1 = virtualinvoke r0.<android.view.View: int getAutofillViewId()>();

        if $i1 <= 1073741823 goto label6;

        z2 = 1;

     label6:
        return z2;
    }

    public static boolean isDefaultFocusHighlightEnabled()
    {
        boolean $z0;

        $z0 = <android.view.View: boolean sUseDefaultFocusHighlight>;

        return $z0;
    }

    private boolean isHoverable()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0;

        r0 := @this: android.view.View;

        i0 = r0.<android.view.View: int mViewFlags>;

        z0 = 0;

        $i1 = i0 & 32;

        if $i1 != 32 goto label1;

        return 0;

     label1:
        $i2 = i0 & 16384;

        if $i2 == 16384 goto label2;

        $i3 = i0 & 2097152;

        if $i3 == 2097152 goto label2;

        $i4 = i0 & 8388608;

        if $i4 != 8388608 goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public static boolean isLayoutModeOptical(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, z2;
        android.view.ViewGroup $r1;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r1 = (android.view.ViewGroup) r0;

        $z1 = virtualinvoke $r1.<android.view.ViewGroup: boolean isLayoutModeOptical()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isOnHorizontalScrollbarThumb(float, float)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i16, $i18, i20, i21, i22, i23, i24;
        android.graphics.Rect r1, r2;
        android.view.View$ScrollabilityCache $r3, $r4, $r5, $r6;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6, f7, f8, f9;
        byte $b12, $b15, $b17, $b19;

        r0 := @this: android.view.View;

        f6 := @parameter0: float;

        f7 := @parameter1: float;

        $r3 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r3 == null goto label3;

        $z0 = virtualinvoke r0.<android.view.View: boolean isHorizontalScrollBarEnabled()>();

        if $z0 != 0 goto label1;

        goto label3;

     label1:
        i20 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        i0 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        if i20 <= i0 goto label2;

        $i2 = virtualinvoke r0.<android.view.View: int getScrollX()>();

        $f0 = (float) $i2;

        f8 = f6 + $f0;

        $i3 = virtualinvoke r0.<android.view.View: int getScrollY()>();

        $f1 = (float) $i3;

        f9 = f7 + $f1;

        $r4 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        r1 = $r4.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarBounds>;

        $r5 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        r2 = $r5.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarTouchBounds>;

        specialinvoke r0.<android.view.View: void getHorizontalScrollBarBounds(android.graphics.Rect,android.graphics.Rect)>(r1, r2);

        i21 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollOffset()>();

        $i4 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i5 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        i1 = staticinvoke <com.android.internal.widget.ScrollBarUtils: int getThumbLength(int,int,int,int)>($i4, $i5, i0, i20);

        $i6 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        i22 = staticinvoke <com.android.internal.widget.ScrollBarUtils: int getThumbOffset(int,int,int,int,int)>($i6, i1, i0, i20, i21);

        $i7 = r1.<android.graphics.Rect: int left>;

        i23 = $i7 + i22;

        $r6 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i8 = $r6.<android.view.View$ScrollabilityCache: int scrollBarMinTouchTarget>;

        $i9 = $i8 - i1;

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>($i9, 0);

        i24 = $i10 / 2;

        $i11 = i23 - i24;

        $f2 = (float) $i11;

        $b12 = f8 cmpl $f2;

        if $b12 < 0 goto label2;

        $i13 = i23 + i1;

        $i14 = $i13 + i24;

        $f3 = (float) $i14;

        $b15 = f8 cmpg $f3;

        if $b15 > 0 goto label2;

        $i16 = r2.<android.graphics.Rect: int top>;

        $f4 = (float) $i16;

        $b17 = f9 cmpl $f4;

        if $b17 < 0 goto label2;

        $i18 = r2.<android.graphics.Rect: int bottom>;

        $f5 = (float) $i18;

        $b19 = f9 cmpg $f5;

        if $b19 > 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    private boolean isOnVerticalScrollbarThumb(float, float)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i15, $i17, $i18, i20, i21, i22, i23, i24;
        android.graphics.Rect r1, r2;
        android.view.View$ScrollabilityCache $r3, $r4, $r5, $r6;
        boolean $z0, $z1;
        float $f0, $f1, $f2, $f3, $f4, $f5, f6, f7, f8, f9;
        byte $b12, $b14, $b16, $b19;

        r0 := @this: android.view.View;

        f6 := @parameter0: float;

        f7 := @parameter1: float;

        $r3 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r3 == null goto label3;

        $z0 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarEnabled()>();

        if $z0 == 0 goto label3;

        $z1 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarHidden()>();

        if $z1 == 0 goto label1;

        goto label3;

     label1:
        i20 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        i0 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        if i20 <= i0 goto label2;

        $i2 = virtualinvoke r0.<android.view.View: int getScrollX()>();

        $f0 = (float) $i2;

        f8 = f6 + $f0;

        $i3 = virtualinvoke r0.<android.view.View: int getScrollY()>();

        $f1 = (float) $i3;

        f9 = f7 + $f1;

        $r4 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        r1 = $r4.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarBounds>;

        $r5 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        r2 = $r5.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarTouchBounds>;

        specialinvoke r0.<android.view.View: void getVerticalScrollBarBounds(android.graphics.Rect,android.graphics.Rect)>(r1, r2);

        i21 = virtualinvoke r0.<android.view.View: int computeVerticalScrollOffset()>();

        $i4 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $i5 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        i1 = staticinvoke <com.android.internal.widget.ScrollBarUtils: int getThumbLength(int,int,int,int)>($i4, $i5, i0, i20);

        $i6 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        i22 = staticinvoke <com.android.internal.widget.ScrollBarUtils: int getThumbOffset(int,int,int,int,int)>($i6, i1, i0, i20, i21);

        $i7 = r1.<android.graphics.Rect: int top>;

        i23 = $i7 + i22;

        $r6 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i8 = $r6.<android.view.View$ScrollabilityCache: int scrollBarMinTouchTarget>;

        $i9 = $i8 - i1;

        $i10 = staticinvoke <java.lang.Math: int max(int,int)>($i9, 0);

        i24 = $i10 / 2;

        $i11 = r2.<android.graphics.Rect: int left>;

        $f2 = (float) $i11;

        $b12 = f8 cmpl $f2;

        if $b12 < 0 goto label2;

        $i13 = r2.<android.graphics.Rect: int right>;

        $f3 = (float) $i13;

        $b14 = f8 cmpg $f3;

        if $b14 > 0 goto label2;

        $i15 = i23 - i24;

        $f4 = (float) $i15;

        $b16 = f9 cmpl $f4;

        if $b16 < 0 goto label2;

        $i17 = i23 + i1;

        $i18 = $i17 + i24;

        $f5 = (float) $i18;

        $b19 = f9 cmpg $f5;

        if $b19 > 0 goto label2;

        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    private boolean isProjectionReceiver()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1;
        boolean z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isRtlCompatibilityMode()
    {
        android.view.View r0;
        android.content.Context $r1;
        android.content.pm.ApplicationInfo $r2;
        int $i0;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i0 = $r2.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i0 < 17 goto label2;

        $z0 = specialinvoke r0.<android.view.View: boolean hasRtlSupport()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    private static boolean isViewIdGenerated(int)
    {
        int i0, $i1, $i2;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = -16777216 & i0;

        if $i1 != 0 goto label1;

        $i2 = 16777215 & i0;

        if $i2 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static boolean lambda$findUserSetNextKeyboardNavigationCluster$1(int, android.view.View)
    {
        int i0, $i1;
        android.view.View r0;
        boolean z0;

        i0 := @parameter0: int;

        r0 := @parameter1: android.view.View;

        $i1 = r0.<android.view.View: int mNextClusterForwardId>;

        if $i1 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean lambda$llq76MkPXP4bNcb9oJt_msw0fnQ(android.view.View)
    {
        android.view.View r0;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        $z0 = specialinvoke r0.<android.view.View: boolean showHoverTooltip()>();

        return $z0;
    }

    protected static int[] mergeDrawableStates(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        $i0 = lengthof r0;

        i4 = $i0 - 1;

     label1:
        if i4 < 0 goto label2;

        $i3 = r0[i4];

        if $i3 != 0 goto label2;

        i4 = i4 + -1;

        goto label1;

     label2:
        $i2 = i4 + 1;

        $i1 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, $i2, $i1);

        return r0;
    }

    private boolean needRtlPropertiesResolution()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 1610678816;

        if $i1 == 1610678816 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void notifyAppearedOrDisappearedForContentCaptureIfNeeded(boolean)
    {
        android.view.View r0;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r1;
        java.lang.Class $r5;
        java.lang.String $r6, $r8;
        java.lang.Throwable $r9;
        android.view.View$AttachInfo r10;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r10 == null goto label1;

        $z2 = r10.<android.view.View$AttachInfo: boolean mReadyForContentCaptureUpdates>;

        if $z2 != 0 goto label1;

        return;

     label1:
        $z1 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(8L);

        if $z1 == 0 goto label2;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyContentCapture(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") for ");

        $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, $r8);

     label2:
        specialinvoke r0.<android.view.View: void notifyAppearedOrDisappearedForContentCaptureIfNeededNoTrace(boolean)>(z0);

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label4:
        $r9 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void notifyAppearedOrDisappearedForContentCaptureIfNeededNoTrace(boolean)
    {
        android.view.View r0;
        boolean z0, $z1, $z2;
        android.view.View$AttachInfo r1;
        android.view.contentcapture.ContentCaptureSession r2;
        android.content.Context $r3;
        android.content.ContentCaptureOptions $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentCaptureOptions getContentCaptureOptions()>();

        if $r4 != null goto label1;

        return;

     label1:
        if z0 == 0 goto label3;

        $z2 = virtualinvoke r0.<android.view.View: boolean isLaidOut()>();

        if $z2 == 0 goto label2;

        $i4 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        if $i4 != 0 goto label2;

        $i5 = r0.<android.view.View: int mPrivateFlags4>;

        $i6 = $i5 & 16;

        if $i6 == 0 goto label4;

     label2:
        return;

     label3:
        i7 = r0.<android.view.View: int mPrivateFlags4>;

        $i0 = i7 & 16;

        if $i0 == 0 goto label9;

        $i1 = i7 & 32;

        if $i1 == 0 goto label4;

        goto label9;

     label4:
        r2 = virtualinvoke r0.<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>();

        if r2 != null goto label5;

        return;

     label5:
        $z1 = virtualinvoke r0.<android.view.View: boolean isImportantForContentCapture()>();

        if $z1 != 0 goto label6;

        return;

     label6:
        if z0 == 0 goto label7;

        specialinvoke r0.<android.view.View: void setNotifiedContentCaptureAppeared()>();

        if r1 == null goto label8;

        staticinvoke <android.view.View$AttachInfo: void access$1100(android.view.View$AttachInfo,android.view.contentcapture.ContentCaptureSession,android.view.View,boolean)>(r1, r2, r0, z0);

        goto label8;

     label7:
        $i2 = r0.<android.view.View: int mPrivateFlags4>;

        i8 = $i2 | 32;

        r0.<android.view.View: int mPrivateFlags4> = i8;

        $i3 = i8 & -17;

        r0.<android.view.View: int mPrivateFlags4> = $i3;

        if r1 == null goto label8;

        staticinvoke <android.view.View$AttachInfo: void access$1100(android.view.View$AttachInfo,android.view.contentcapture.ContentCaptureSession,android.view.View,boolean)>(r1, r2, r0, z0);

     label8:
        return;

     label9:
        return;
    }

    private void notifyAutofillManagerOnClick()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.autofill.AutofillManager $r2;
        java.lang.Throwable $r3;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label4;

     label1:
        $r2 = specialinvoke r0.<android.view.View: android.view.autofill.AutofillManager getAutofillManager()>();

        virtualinvoke $r2.<android.view.autofill.AutofillManager: void notifyViewClicked(android.view.View)>(r0);

     label2:
        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = -536870913 & $i2;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        goto label4;

     label3:
        $r3 := @caughtexception;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = -536870913 & $i4;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        throw $r3;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void notifyFocusChangeToImeFocusController(boolean)
    {
        android.view.View r0;
        boolean z0;
        android.view.View$AttachInfo r1;
        android.view.ViewRootImpl $r2;
        android.view.ImeFocusController $r3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r3 = virtualinvoke $r2.<android.view.ViewRootImpl: android.view.ImeFocusController getImeFocusController()>();

        virtualinvoke $r3.<android.view.ImeFocusController: void onViewFocusChanged(android.view.View,boolean)>(r0, z0);

        return;
    }

    private static int numViewsForAccessibility(android.view.View)
    {
        android.view.View r0;
        boolean $z0, $z1;
        android.view.ViewGroup $r1;
        int $i0;

        r0 := @parameter0: android.view.View;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<android.view.View: boolean includeForAccessibility()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r0 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label2;

        $r1 = (android.view.ViewGroup) r0;

        $i0 = virtualinvoke $r1.<android.view.ViewGroup: int getNumChildrenForAccessibility()>();

        return $i0;

     label2:
        return 0;
    }

    private android.view.WindowInsets onApplyFrameworkOptionalFitSystemWindows(android.view.WindowInsets)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        java.lang.ThreadLocal $r2;
        java.lang.Object $r3;
        android.view.WindowInsets r4, r5;

        r0 := @this: android.view.View;

        r4 := @parameter0: android.view.WindowInsets;

        $r2 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        $r3 = virtualinvoke $r2.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (android.graphics.Rect) $r3;

        r5 = virtualinvoke r0.<android.view.View: android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets,android.graphics.Rect)>(r4, r1);

        specialinvoke r0.<android.view.View: void applyInsets(android.graphics.Rect)>(r1);

        return r5;
    }

    private void onDrawScrollIndicators(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        int i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, $i29, $i30, $i31, $i34, $i36;
        android.graphics.Rect r3;
        android.view.View$AttachInfo $r4;
        short $s5, s32, s33, $s35;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        $i1 = r0.<android.view.View: int mPrivateFlags3>;

        $i2 = $i1 & 16128;

        if $i2 != 0 goto label1;

        return;

     label1:
        r2 = r0.<android.view.View: android.graphics.drawable.Drawable mScrollIndicatorDrawable>;

        if r2 != null goto label2;

        return;

     label2:
        i28 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        i0 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r3 = $r4.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        virtualinvoke r0.<android.view.View: void getScrollIndicatorBounds(android.graphics.Rect)>(r3);

        $i3 = r0.<android.view.View: int mPrivateFlags3>;

        $i4 = $i3 & 256;

        if $i4 == 0 goto label3;

        $z3 = virtualinvoke r0.<android.view.View: boolean canScrollVertically(int)>(-1);

        if $z3 == 0 goto label3;

        $i27 = r3.<android.graphics.Rect: int left>;

        $i26 = r3.<android.graphics.Rect: int top>;

        $i25 = r3.<android.graphics.Rect: int right>;

        $i23 = r3.<android.graphics.Rect: int top>;

        $i24 = $i23 + i28;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i27, $i26, $i25, $i24);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label3:
        $i29 = r0.<android.view.View: int mPrivateFlags3>;

        $i30 = $i29 & 512;

        if $i30 == 0 goto label4;

        $z2 = virtualinvoke r0.<android.view.View: boolean canScrollVertically(int)>(1);

        if $z2 == 0 goto label4;

        $i22 = r3.<android.graphics.Rect: int left>;

        $i18 = r3.<android.graphics.Rect: int bottom>;

        $i21 = $i18 - i28;

        $i20 = r3.<android.graphics.Rect: int right>;

        $i19 = r3.<android.graphics.Rect: int bottom>;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i22, $i21, $i20, $i19);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label4:
        $i31 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        if $i31 != 1 goto label5;

        s32 = 8192;

        s33 = 4096;

        goto label6;

     label5:
        s32 = 4096;

        s33 = 8192;

     label6:
        $i6 = r0.<android.view.View: int mPrivateFlags3>;

        $s5 = s32 | 1024;

        $i7 = $i6 & $s5;

        if $i7 == 0 goto label7;

        $z1 = virtualinvoke r0.<android.view.View: boolean canScrollHorizontally(int)>(-1);

        if $z1 == 0 goto label7;

        $i17 = r3.<android.graphics.Rect: int left>;

        $i16 = r3.<android.graphics.Rect: int top>;

        $i13 = r3.<android.graphics.Rect: int left>;

        $i15 = $i13 + i0;

        $i14 = r3.<android.graphics.Rect: int bottom>;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i17, $i16, $i15, $i14);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label7:
        $i34 = r0.<android.view.View: int mPrivateFlags3>;

        $s35 = s33 | 2048;

        $i36 = $i34 & $s35;

        if $i36 == 0 goto label8;

        $z0 = virtualinvoke r0.<android.view.View: boolean canScrollHorizontally(int)>(1);

        if $z0 == 0 goto label8;

        $i8 = r3.<android.graphics.Rect: int right>;

        $i12 = $i8 - i0;

        $i11 = r3.<android.graphics.Rect: int top>;

        $i10 = r3.<android.graphics.Rect: int right>;

        $i9 = r3.<android.graphics.Rect: int bottom>;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i12, $i11, $i10, $i9);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label8:
        return;
    }

    private void onProvideVirtualStructureCompat(android.view.ViewStructure, boolean)
    {
        android.view.View r0;
        android.view.ViewStructure r1, $r9;
        boolean z0, $z1;
        android.view.accessibility.AccessibilityNodeProvider r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        android.view.accessibility.AccessibilityNodeInfo r8;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r2 == null goto label2;

        if z0 == 0 goto label1;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("View.Autofill", 2);

        if $z1 == 0 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onProvideVirtualStructureCompat() for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("View.Autofill", $r6);

     label1:
        r8 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()>();

        virtualinvoke r1.<android.view.ViewStructure: void setChildCount(int)>(1);

        $r9 = virtualinvoke r1.<android.view.ViewStructure: android.view.ViewStructure newChild(int)>(0);

        specialinvoke r0.<android.view.View: void populateVirtualStructure(android.view.ViewStructure,android.view.accessibility.AccessibilityNodeProvider,android.view.accessibility.AccessibilityNodeInfo,boolean)>($r9, r2, r8, z0);

        virtualinvoke r8.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

     label2:
        return;
    }

    private boolean performClickInternal()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void notifyAutofillManagerOnClick()>();

        $z0 = virtualinvoke r0.<android.view.View: boolean performClick()>();

        return $z0;
    }

    private boolean performLongClickInternal(float, float)
    {
        android.view.View r0;
        float f0, f1;
        android.view.View$ListenerInfo r1;
        int $i0, $i1, $i2, $i3;
        boolean $z1, $z2, z4, z5, z6, z7;
        android.view.View$OnLongClickListener $r2, $r3;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(2);

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        z4 = 0;

        if r1 == null goto label1;

        z4 = 0;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnLongClickListener mOnLongClickListener>;

        if $r2 == null goto label1;

        $r3 = r1.<android.view.View$ListenerInfo: android.view.View$OnLongClickListener mOnLongClickListener>;

        z4 = interfaceinvoke $r3.<android.view.View$OnLongClickListener: boolean onLongClick(android.view.View)>(r0);

     label1:
        z5 = z4;

        if z4 != 0 goto label5;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z2 != 0 goto label2;

        z6 = 1;

        goto label3;

     label2:
        z6 = 0;

     label3:
        if z6 == 0 goto label4;

        z5 = virtualinvoke r0.<android.view.View: boolean showContextMenu(float,float)>(f0, f1);

        goto label5;

     label4:
        z5 = virtualinvoke r0.<android.view.View: boolean showContextMenu()>();

     label5:
        z7 = z5;

        $i2 = r0.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 1073741824;

        if $i3 != 1073741824 goto label6;

        z7 = z5;

        if z5 != 0 goto label6;

        $i1 = (int) f0;

        $i0 = (int) f1;

        z7 = specialinvoke r0.<android.view.View: boolean showLongClickTooltip(int,int)>($i1, $i0);

     label6:
        if z7 == 0 goto label7;

        virtualinvoke r0.<android.view.View: boolean performHapticFeedback(int)>(0);

     label7:
        return z7;
    }

    private void populateAccessibilityNodeInfoDrawingOrderInParent(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.View r0, $r6, $r8, r9;
        android.view.accessibility.AccessibilityNodeInfo r1;
        android.view.ViewParent r2, r3;
        android.view.ViewGroup r4;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10, i11, i12, i13, i14;
        java.util.ArrayList r5;
        boolean z0, $z1;
        java.lang.Object $r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 16;

        if $i2 != 0 goto label01;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)>(0);

        return;

     label01:
        i5 = 1;

        r9 = r0;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParentForAccessibility()>();

     label02:
        i6 = i5;

        if r9 == r2 goto label15;

        r3 = virtualinvoke r9.<android.view.View: android.view.ViewParent getParent()>();

        $z1 = r3 instanceof android.view.ViewGroup;

        if $z1 != 0 goto label03;

        i6 = 0;

        goto label15;

     label03:
        r4 = (android.view.ViewGroup) r3;

        i0 = virtualinvoke r4.<android.view.ViewGroup: int getChildCount()>();

        i7 = i5;

        if i0 <= 1 goto label14;

        r5 = virtualinvoke r4.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r5 == null goto label06;

        i8 = interfaceinvoke r5.<java.util.List: int indexOf(java.lang.Object)>(r9);

        i9 = 0;

     label04:
        if i9 >= i8 goto label05;

        $r7 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i9);

        $r8 = (android.view.View) $r7;

        $i4 = staticinvoke <android.view.View: int numViewsForAccessibility(android.view.View)>($r8);

        i5 = i5 + $i4;

        i9 = i9 + 1;

        goto label04;

     label05:
        i7 = i5;

        goto label14;

     label06:
        i10 = virtualinvoke r4.<android.view.ViewGroup: int indexOfChild(android.view.View)>(r9);

        z0 = virtualinvoke r4.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if i10 < 0 goto label07;

        if z0 == 0 goto label07;

        i10 = virtualinvoke r4.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>(i0, i10);

        goto label07;

     label07:
        if z0 == 0 goto label08;

        i11 = i0;

        goto label09;

     label08:
        i11 = i10;

     label09:
        i7 = i5;

        if i10 == 0 goto label14;

        i12 = 0;

     label10:
        i7 = i5;

        if i12 >= i11 goto label14;

        if z0 == 0 goto label11;

        i13 = virtualinvoke r4.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>(i0, i12);

        goto label12;

     label11:
        i13 = i12;

     label12:
        i14 = i5;

        if i13 >= i10 goto label13;

        $r6 = virtualinvoke r4.<android.view.ViewGroup: android.view.View getChildAt(int)>(i12);

        $i3 = staticinvoke <android.view.View: int numViewsForAccessibility(android.view.View)>($r6);

        i14 = i5 + $i3;

     label13:
        i12 = i12 + 1;

        i5 = i14;

        goto label10;

     label14:
        r9 = (android.view.View) r3;

        i5 = i7;

        goto label02;

     label15:
        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setDrawingOrder(int)>(i6);

        return;
    }

    private void populateVirtualStructure(android.view.ViewStructure, android.view.accessibility.AccessibilityNodeProvider, android.view.accessibility.AccessibilityNodeInfo, boolean)
    {
        android.view.View r0;
        android.view.ViewStructure r1, $r6;
        android.view.accessibility.AccessibilityNodeProvider r2;
        android.view.accessibility.AccessibilityNodeInfo r3, r17;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13;
        long $l0, $l5, $l7, $l12;
        int $i1, $i2, $i3, $i4, $i6, $i8, $i10, $i11, $i13, i14, i15, i16, i17, i18, i19;
        java.lang.CharSequence $r4, $r8, $r9, r15, r16;
        android.util.LongArray $r5;
        android.view.autofill.AutofillValue $r7;
        android.view.autofill.AutofillId $r10, $r11;
        java.lang.String r12, r13;
        android.graphics.Rect r14;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        r2 := @parameter1: android.view.accessibility.AccessibilityNodeProvider;

        r3 := @parameter2: android.view.accessibility.AccessibilityNodeInfo;

        z0 := @parameter3: boolean;

        $l0 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        i14 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l0);

        r12 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getViewIdResourceName()>();

        r13 = null;

        virtualinvoke r1.<android.view.ViewStructure: void setId(int,java.lang.String,java.lang.String,java.lang.String)>(i14, null, null, r12);

        r14 = virtualinvoke r1.<android.view.ViewStructure: android.graphics.Rect getTempRect()>();

        virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>(r14);

        $i1 = r14.<android.graphics.Rect: int left>;

        $i2 = r14.<android.graphics.Rect: int top>;

        $i3 = virtualinvoke r14.<android.graphics.Rect: int width()>();

        $i4 = virtualinvoke r14.<android.graphics.Rect: int height()>();

        virtualinvoke r1.<android.view.ViewStructure: void setDimens(int,int,int,int,int,int)>($i1, $i2, 0, 0, $i3, $i4);

        virtualinvoke r1.<android.view.ViewStructure: void setVisibility(int)>(0);

        $z1 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        virtualinvoke r1.<android.view.ViewStructure: void setEnabled(boolean)>($z1);

        $z2 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>();

        if $z2 == 0 goto label01;

        virtualinvoke r1.<android.view.ViewStructure: void setClickable(boolean)>(1);

     label01:
        $z3 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>();

        if $z3 == 0 goto label02;

        virtualinvoke r1.<android.view.ViewStructure: void setFocusable(boolean)>(1);

     label02:
        $z4 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>();

        if $z4 == 0 goto label03;

        virtualinvoke r1.<android.view.ViewStructure: void setFocused(boolean)>(1);

     label03:
        $z5 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isAccessibilityFocused()>();

        if $z5 == 0 goto label04;

        virtualinvoke r1.<android.view.ViewStructure: void setAccessibilityFocused(boolean)>(1);

     label04:
        $z6 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>();

        if $z6 == 0 goto label05;

        virtualinvoke r1.<android.view.ViewStructure: void setSelected(boolean)>(1);

     label05:
        $z7 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>();

        if $z7 == 0 goto label06;

        virtualinvoke r1.<android.view.ViewStructure: void setLongClickable(boolean)>(1);

     label06:
        $z8 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>();

        if $z8 == 0 goto label07;

        virtualinvoke r1.<android.view.ViewStructure: void setCheckable(boolean)>(1);

        $z11 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>();

        if $z11 == 0 goto label07;

        virtualinvoke r1.<android.view.ViewStructure: void setChecked(boolean)>(1);

     label07:
        $z12 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isContextClickable()>();

        if $z12 == 0 goto label08;

        virtualinvoke r1.<android.view.ViewStructure: void setContextClickable(boolean)>(1);

     label08:
        if z0 == 0 goto label09;

        $r10 = new android.view.autofill.AutofillId;

        $r11 = virtualinvoke r0.<android.view.View: android.view.autofill.AutofillId getAutofillId()>();

        $l12 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        $i13 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l12);

        specialinvoke $r10.<android.view.autofill.AutofillId: void <init>(android.view.autofill.AutofillId,int)>($r11, $i13);

        virtualinvoke r1.<android.view.ViewStructure: void setAutofillId(android.view.autofill.AutofillId)>($r10);

     label09:
        r15 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>();

        if r15 == null goto label10;

        r13 = interfaceinvoke r15.<java.lang.CharSequence: java.lang.String toString()>();

     label10:
        virtualinvoke r1.<android.view.ViewStructure: void setClassName(java.lang.String)>(r13);

        $r4 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        virtualinvoke r1.<android.view.ViewStructure: void setContentDescription(java.lang.CharSequence)>($r4);

        if z0 == 0 goto label12;

        i15 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: int getMaxTextLength()>();

        if i15 == -1 goto label11;

        virtualinvoke r1.<android.view.ViewStructure: void setMaxTextLength(int)>(i15);

     label11:
        $r9 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getHintText()>();

        virtualinvoke r1.<android.view.ViewStructure: void setHint(java.lang.CharSequence)>($r9);

     label12:
        r16 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        if r16 != null goto label14;

        $r8 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getError()>();

        if $r8 == null goto label13;

        goto label14;

     label13:
        z13 = 0;

        goto label15;

     label14:
        z13 = 1;

     label15:
        if z13 == 0 goto label16;

        $i10 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionStart()>();

        $i11 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: int getTextSelectionEnd()>();

        virtualinvoke r1.<android.view.ViewStructure: void setText(java.lang.CharSequence,int,int)>(r16, $i10, $i11);

     label16:
        if z0 == 0 goto label20;

        $z9 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isEditable()>();

        if $z9 == 0 goto label19;

        virtualinvoke r1.<android.view.ViewStructure: void setDataIsSensitive(boolean)>(1);

        if z13 == 0 goto label17;

        virtualinvoke r1.<android.view.ViewStructure: void setAutofillType(int)>(1);

        $r7 = staticinvoke <android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forText(java.lang.CharSequence)>(r16);

        virtualinvoke r1.<android.view.ViewStructure: void setAutofillValue(android.view.autofill.AutofillValue)>($r7);

     label17:
        i16 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: int getInputType()>();

        i17 = i16;

        if i16 != 0 goto label18;

        i17 = i16;

        $z10 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>();

        if $z10 == 0 goto label18;

        i17 = 129;

     label18:
        virtualinvoke r1.<android.view.ViewStructure: void setInputType(int)>(i17);

        goto label20;

     label19:
        virtualinvoke r1.<android.view.ViewStructure: void setDataIsSensitive(boolean)>(0);

     label20:
        i18 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        if i18 <= 0 goto label24;

        virtualinvoke r1.<android.view.ViewStructure: void setChildCount(int)>(i18);

        i19 = 0;

     label21:
        if i19 >= i18 goto label24;

        $r5 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: android.util.LongArray getChildNodeIds()>();

        $l5 = virtualinvoke $r5.<android.util.LongArray: long get(int)>(i19);

        $i6 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l5);

        if $i6 != -1 goto label22;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("View", "Virtual view pointing to its host. Ignoring");

        goto label23;

     label22:
        $l7 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: long getChildId(int)>(i19);

        $i8 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l7);

        r17 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>($i8);

        $r6 = virtualinvoke r1.<android.view.ViewStructure: android.view.ViewStructure newChild(int)>(i19);

        specialinvoke r0.<android.view.View: void populateVirtualStructure(android.view.ViewStructure,android.view.accessibility.AccessibilityNodeProvider,android.view.accessibility.AccessibilityNodeInfo,boolean)>($r6, r2, r17, z0);

        virtualinvoke r17.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

     label23:
        i19 = i19 + 1;

        goto label21;

     label24:
        return;
    }

    private void postSendViewScrolledAccessibilityEventCallback(int, int)
    {
        android.view.View r0;
        int i0, i1;
        android.view.accessibility.AccessibilityEvent r1;
        android.content.Context $r2;
        android.view.accessibility.AccessibilityManager $r3;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r2);

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        r1 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(4096);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setScrollDeltaX(int)>(i0);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setScrollDeltaY(int)>(i1);

        virtualinvoke r0.<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>(r1);

     label1:
        return;
    }

    private static java.lang.String printFlags(int)
    {
        int $i0, i1, i2, i3;
        java.lang.StringBuilder $r0, $r3, $r6, $r9, $r12;
        java.lang.String r15, r17, r20;

        i1 := @parameter0: int;

        r15 = "";

        i2 = 0;

        $i0 = i1 & 1;

        if $i0 != 1 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TAKES_FOCUS");

        r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        i2 = 0 + 1;

     label1:
        i3 = i1 & 12;

        if i3 == 4 goto label4;

        if i3 == 8 goto label2;

        goto label6;

     label2:
        r17 = r15;

        if i2 <= 0 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r17 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GONE");

        r15 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label4:
        r20 = r15;

        if i2 <= 0 goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r20 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INVISIBLE");

        r15 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

     label6:
        return r15;
    }

    private static java.lang.String printPrivateFlags(int)
    {
        int i0, $i1, $i2, i3, i4, i5, $i6, i7, $i8, i9, $i10, $i11;
        java.lang.StringBuilder $r0, $r3, $r6, $r9, $r12, $r15, $r18, $r21, $r24, $r27, $r30;
        java.lang.String r33, r35, r36, r39, r40, r43, r44, r47, r48, r51, r52;

        i0 := @parameter0: int;

        r33 = "";

        i3 = 0;

        $i1 = i0 & 1;

        if $i1 != 1 goto label01;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("");

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WANTS_FOCUS");

        r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        i3 = 0 + 1;

     label01:
        r35 = r33;

        i4 = i3;

        $i2 = i0 & 2;

        if $i2 != 2 goto label03;

        r36 = r33;

        if i3 <= 0 goto label02;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r36 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

     label02:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r36);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FOCUSED");

        r35 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        i4 = i3 + 1;

     label03:
        r39 = r35;

        i5 = i4;

        $i6 = i0 & 4;

        if $i6 != 4 goto label05;

        r40 = r35;

        if i4 <= 0 goto label04;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r40 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

     label04:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECTED");

        r39 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        i5 = i4 + 1;

     label05:
        r43 = r39;

        i7 = i5;

        $i8 = i0 & 8;

        if $i8 != 8 goto label07;

        r44 = r39;

        if i5 <= 0 goto label06;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r39);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r44 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label06:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r44);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IS_ROOT_NAMESPACE");

        r43 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        i7 = i5 + 1;

     label07:
        r47 = r43;

        i9 = i7;

        $i10 = i0 & 16;

        if $i10 != 16 goto label09;

        r48 = r43;

        if i7 <= 0 goto label08;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r48 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r48);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HAS_BOUNDS");

        r47 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        i9 = i7 + 1;

     label09:
        r51 = r47;

        $i11 = i0 & 32;

        if $i11 != 32 goto label11;

        r52 = r47;

        if i9 <= 0 goto label10;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r47);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        r52 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

     label10:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r52);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DRAWN");

        r51 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        return r51;
    }

    private void rebuildOutline()
    {
        android.view.View r0;
        android.view.ViewOutlineProvider $r1, $r2;
        android.graphics.RenderNode $r3, $r4;
        android.view.View$AttachInfo r5;
        android.graphics.Outline r6;

        r0 := @this: android.view.View;

        r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r5 != null goto label1;

        return;

     label1:
        $r1 = r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider>;

        if $r1 != null goto label2;

        $r4 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r4.<android.graphics.RenderNode: boolean setOutline(android.graphics.Outline)>(null);

        goto label3;

     label2:
        r6 = r5.<android.view.View$AttachInfo: android.graphics.Outline mTmpOutline>;

        virtualinvoke r6.<android.graphics.Outline: void setEmpty()>();

        virtualinvoke r6.<android.graphics.Outline: void setAlpha(float)>(1.0F);

        $r2 = r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider>;

        virtualinvoke $r2.<android.view.ViewOutlineProvider: void getOutline(android.view.View,android.graphics.Outline)>(r0, r6);

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setOutline(android.graphics.Outline)>(r6);

     label3:
        return;
    }

    private void recordGestureClassification(int)
    {
        android.view.View r0;
        int i0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,java.lang.String,int)>(177, $r2, i0);

        return;
    }

    private void registerPendingFrameMetricsObservers()
    {
        android.view.View r0;
        android.view.ThreadedRenderer r1;
        java.util.Iterator r2;
        java.util.ArrayList $r3, $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.view.FrameMetricsObserver $r6;
        android.graphics.HardwareRendererObserver $r7;

        r0 := @this: android.view.View;

        $r3 = r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers>;

        if $r3 == null goto label4;

        r1 = virtualinvoke r0.<android.view.View: android.view.ThreadedRenderer getThreadedRenderer()>();

        if r1 == null goto label3;

        $r4 = r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers>;

        r2 = virtualinvoke $r4.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.view.FrameMetricsObserver) $r5;

        $r7 = virtualinvoke $r6.<android.view.FrameMetricsObserver: android.graphics.HardwareRendererObserver getRendererObserver()>();

        virtualinvoke r1.<android.view.ThreadedRenderer: void addObserver(android.graphics.HardwareRendererObserver)>($r7);

        goto label1;

     label2:
        goto label4;

     label3:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "View not hardware-accelerated. Unable to observe frame stats");

     label4:
        return;
    }

    private void removeLongPressCallback()
    {
        android.view.View r0;
        android.view.View$CheckForLongPress r1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$CheckForLongPress mPendingCheckForLongPress>;

        if r1 == null goto label1;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>(r1);

     label1:
        return;
    }

    private void removePerformClickCallback()
    {
        android.view.View r0;
        android.view.View$PerformClick r1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$PerformClick mPerformClick>;

        if r1 == null goto label1;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>(r1);

     label1:
        return;
    }

    private void removeTapCallback()
    {
        android.view.View r0;
        android.view.View$CheckForTap r1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        if r1 == null goto label1;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -33554433;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>(r1);

     label1:
        return;
    }

    private void removeUnsetPressCallback()
    {
        android.view.View r0;
        int $i0, $i1;
        android.view.View$UnsetPressedState $r1, $r2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        $r1 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        if $r1 == null goto label1;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

        $r2 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    private boolean requestFocusNoSearch(int, android.graphics.Rect)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4;
        android.graphics.Rect r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $z0 = specialinvoke r0.<android.view.View: boolean canTakeFocus()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean isInTouchMode()>();

        if $z1 == 0 goto label2;

        $i3 = r0.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 262144;

        if 262144 == $i4 goto label2;

        return 0;

     label2:
        $z2 = specialinvoke r0.<android.view.View: boolean hasAncestorThatBlocksDescendantFocus()>();

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $z3 = virtualinvoke r0.<android.view.View: boolean isLayoutValid()>();

        if $z3 != 0 goto label4;

        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 | 1;

        r0.<android.view.View: int mPrivateFlags> = $i2;

        goto label5;

     label4:
        virtualinvoke r0.<android.view.View: void clearParentsWantFocus()>();

     label5:
        virtualinvoke r0.<android.view.View: void handleFocusGainInternal(int,android.graphics.Rect)>(i0, r1);

        return 1;
    }

    private void requestParentSendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        if $r2 == null goto label1;

        $r3 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        interfaceinvoke $r3.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

     label1:
        return;
    }

    private void resetDisplayList()
    {
        android.view.View r0;
        android.graphics.RenderNode r1, $r2;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r2.<android.graphics.RenderNode: void discardDisplayList()>();

        r1 = r0.<android.view.View: android.graphics.RenderNode mBackgroundRenderNode>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.RenderNode: void discardDisplayList()>();

     label1:
        return;
    }

    private void resetPressedState()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 32 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean isPressed()>();

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

        $z1 = r0.<android.view.View: boolean mHasPerformedLongPress>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

     label2:
        return;
    }

    public static int resolveSize(int, int)
    {
        int i0, i1, $i2, $i3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.view.View: int resolveSizeAndState(int,int,int)>(i0, i1, 0);

        $i3 = $i2 & 16777215;

        return $i3;
    }

    public static int resolveSizeAndState(int, int, int)
    {
        int i0, i1, i2, i3, i4, $i5, $i6;

        i2 := @parameter0: int;

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i3);

        i4 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i3);

        if i1 == -2147483648 goto label2;

        if i1 == 1073741824 goto label1;

        goto label3;

     label1:
        i2 = i4;

        goto label3;

     label2:
        if i4 >= i2 goto label3;

        i2 = 16777216 | i4;

        goto label3;

     label3:
        $i5 = -16777216 & i0;

        $i6 = $i5 | i2;

        return $i6;
    }

    private void retrieveExplicitStyle(android.content.res.Resources$Theme, android.util.AttributeSet)
    {
        android.view.View r0;
        android.content.res.Resources$Theme r1;
        android.util.AttributeSet r2;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.Resources$Theme;

        r2 := @parameter1: android.util.AttributeSet;

        $z0 = <android.view.View: boolean sDebugViewAttributes>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = virtualinvoke r1.<android.content.res.Resources$Theme: int getExplicitStyle(android.util.AttributeSet)>(r2);

        r0.<android.view.View: int mExplicitStyle> = $i0;

        return;
    }

    private static float sanitizeFloatPropertyValue(float, java.lang.String)
    {
        float f0, $f1;
        java.lang.String r0;

        f0 := @parameter0: float;

        r0 := @parameter1: java.lang.String;

        $f1 = staticinvoke <android.view.View: float sanitizeFloatPropertyValue(float,java.lang.String,float,float)>(f0, r0, -3.4028235E38F, 3.4028235E38F);

        return $f1;
    }

    private static float sanitizeFloatPropertyValue(float, java.lang.String, float, float)
    {
        float f0, f1, f2;
        byte $b0, $b1, $b2, $b3, $b4, $b5;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r0, $r9, $r18, $r23;
        java.lang.IllegalArgumentException $r7, $r16, $r27;
        java.lang.String $r8, $r17, $r22, $r28, r29;
        java.lang.IllegalStateException $r21;

        f0 := @parameter0: float;

        r29 := @parameter1: java.lang.String;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $b0 = f0 cmpl f1;

        if $b0 < 0 goto label1;

        $b5 = f0 cmpg f2;

        if $b5 > 0 goto label1;

        return f0;

     label1:
        $b1 = f0 cmpg f1;

        if $b1 < 0 goto label8;

        $b2 = f0 cmpl #-InfinityF;

        if $b2 != 0 goto label2;

        goto label8;

     label2:
        $b3 = f0 cmpl f2;

        if $b3 > 0 goto label6;

        $b4 = f0 cmpl #InfinityF;

        if $b4 != 0 goto label3;

        goto label6;

     label3:
        $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z2 == 0 goto label5;

        $z3 = <android.view.View: boolean sThrowOnInvalidFloatProperties>;

        if $z3 != 0 goto label4;

        return 0.0F;

     label4:
        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set \'");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to Float.NaN");

        $r27 = new java.lang.IllegalArgumentException;

        $r28 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label5:
        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("How do you get here?? ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r21 = new java.lang.IllegalStateException;

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r22);

        throw $r21;

     label6:
        $z1 = <android.view.View: boolean sThrowOnInvalidFloatProperties>;

        if $z1 != 0 goto label7;

        return f2;

     label7:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set \'");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", the value must be <= ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f2);

        $r16 = new java.lang.IllegalArgumentException;

        $r17 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label8:
        $z0 = <android.view.View: boolean sThrowOnInvalidFloatProperties>;

        if $z0 != 0 goto label9;

        return f1;

     label9:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set \'");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", the value must be >= ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f1);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    private void saveAttributeData(android.util.AttributeSet, android.content.res.TypedArray)
    {
        android.view.View r0;
        android.content.res.TypedArray r1;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i9, i10, i11, $i12;
        java.lang.String[] r2, r19;
        android.content.res.Resources r3;
        android.util.SparseArray r4;
        java.lang.String r5, $r7, $r8, $r12, r15, $r18;
        boolean $z0;
        java.lang.Object $r6;
        android.content.res.Resources$NotFoundException $r9;
        java.lang.StringBuilder $r10;
        android.util.AttributeSet r14;

        r0 := @this: android.view.View;

        r14 := @parameter0: android.util.AttributeSet;

        r1 := @parameter1: android.content.res.TypedArray;

        if r14 != null goto label01;

        i5 = 0;

        goto label02;

     label01:
        i5 = interfaceinvoke r14.<android.util.AttributeSet: int getAttributeCount()>();

     label02:
        i0 = virtualinvoke r1.<android.content.res.TypedArray: int getIndexCount()>();

        $i2 = i5 + i0;

        $i3 = $i2 * 2;

        r2 = newarray (java.lang.String)[$i3];

        i6 = 0;

        i7 = 0;

     label03:
        if i7 >= i5 goto label04;

        $r7 = interfaceinvoke r14.<android.util.AttributeSet: java.lang.String getAttributeName(int)>(i7);

        r2[i6] = $r7;

        $i4 = i6 + 1;

        $r8 = interfaceinvoke r14.<android.util.AttributeSet: java.lang.String getAttributeValue(int)>(i7);

        r2[$i4] = $r8;

        i6 = i6 + 2;

        i7 = i7 + 1;

        goto label03;

     label04:
        r3 = virtualinvoke r1.<android.content.res.TypedArray: android.content.res.Resources getResources()>();

        r4 = staticinvoke <android.view.View: android.util.SparseArray getAttributeMap()>();

        i9 = i6;

        i10 = 0;

     label05:
        if i10 >= i0 goto label14;

        i1 = virtualinvoke r1.<android.content.res.TypedArray: int getIndex(int)>(i10);

        $z0 = virtualinvoke r1.<android.content.res.TypedArray: boolean hasValueOrEmpty(int)>(i1);

        if $z0 != 0 goto label06;

        goto label13;

     label06:
        i11 = virtualinvoke r1.<android.content.res.TypedArray: int getResourceId(int,int)>(i1, 0);

        if i11 != 0 goto label07;

        goto label13;

     label07:
        $r6 = virtualinvoke r4.<android.util.SparseArray: java.lang.Object get(int)>(i11);

        r5 = (java.lang.String) $r6;

        r15 = r5;

        if r5 != null goto label12;

     label08:
        r15 = virtualinvoke r3.<android.content.res.Resources: java.lang.String getResourceName(int)>(i11);

     label09:
        goto label11;

     label10:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label11:
        virtualinvoke r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i11, r15);

     label12:
        r2[i9] = r15;

        $i12 = i9 + 1;

        $r18 = virtualinvoke r1.<android.content.res.TypedArray: java.lang.String getString(int)>(i1);

        r2[$i12] = $r18;

        i9 = i9 + 2;

     label13:
        i10 = i10 + 1;

        goto label05;

     label14:
        r19 = newarray (java.lang.String)[i9];

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r19, 0, i9);

        r0.<android.view.View: java.lang.String[] mAttributes> = r19;

        return;

        catch android.content.res.Resources$NotFoundException from label08 to label09 with label10;
    }

    private void sendAccessibilityHoverEvent(int)
    {
        android.view.View r0, r1;
        int i0;
        boolean $z0, $z1;
        android.view.ViewParent r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 = r0;

     label1:
        $z0 = virtualinvoke r1.<android.view.View: boolean includeForAccessibility()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void sendAccessibilityEvent(int)>(i0);

        return;

     label2:
        r2 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        $z1 = r2 instanceof android.view.View;

        if $z1 == 0 goto label3;

        r1 = (android.view.View) r2;

        goto label1;

     label3:
        return;
    }

    private void sendViewTextTraversedAtGranularityEvent(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 != null goto label1;

        return;

     label1:
        r1 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(131072);

        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        virtualinvoke r0.<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setFromIndex(int)>(i2);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setToIndex(int)>(i3);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setAction(int)>(i0);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setMovementGranularity(int)>(i1);

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        return;
    }

    private void setBackgroundRenderNodeProperties(android.graphics.RenderNode)
    {
        android.view.View r0;
        android.graphics.RenderNode r1;
        int $i0, $i1;
        float $f0, $f1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.RenderNode;

        $i0 = r0.<android.view.View: int mScrollX>;

        $f0 = (float) $i0;

        virtualinvoke r1.<android.graphics.RenderNode: boolean setTranslationX(float)>($f0);

        $i1 = r0.<android.view.View: int mScrollY>;

        $f1 = (float) $i1;

        virtualinvoke r1.<android.graphics.RenderNode: boolean setTranslationY(float)>($f1);

        return;
    }

    private void setDefaultFocusHighlight(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.graphics.drawable.Drawable $r1, $r2, r4;
        boolean $z1, $z2, $z4, z6;
        int[] $r3;
        android.view.View$ForegroundInfo r5;

        r0 := @this: android.view.View;

        r4 := @parameter0: android.graphics.drawable.Drawable;

        r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight> = r4;

        z6 = 1;

        r0.<android.view.View: boolean mDefaultFocusHighlightSizeChanged> = 1;

        if r4 == null goto label6;

        i0 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = i0 & 128;

        if $i5 == 0 goto label1;

        $i8 = i0 & -129;

        r0.<android.view.View: int mPrivateFlags> = $i8;

     label1:
        $i6 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r4.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>($i6);

        $z1 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke r4.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3);

     label2:
        $z2 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z2 == 0 goto label5;

        $i7 = virtualinvoke r0.<android.view.View: int getWindowVisibility()>();

        if $i7 != 0 goto label3;

        $z4 = virtualinvoke r0.<android.view.View: boolean isShown()>();

        if $z4 == 0 goto label3;

        goto label4;

     label3:
        z6 = 0;

     label4:
        virtualinvoke r4.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z6, 0);

     label5:
        virtualinvoke r4.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        goto label8;

     label6:
        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 128;

        if $i2 == 0 goto label8;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r1 != null goto label8;

        r5 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r5 == null goto label7;

        $r2 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r5);

        if $r2 != null goto label8;

     label7:
        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 | 128;

        r0.<android.view.View: int mPrivateFlags> = $i4;

     label8:
        virtualinvoke r0.<android.view.View: void invalidate()>();

        return;
    }

    private void setFocusedInCluster(android.view.View)
    {
        android.view.View r0, r1, r5;
        boolean $z0, $z1;
        android.view.ViewGroup $r2, $r3;
        android.view.ViewParent r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        $z0 = r0 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r3 = (android.view.ViewGroup) r0;

        $r3.<android.view.ViewGroup: android.view.View mFocusedInCluster> = null;

     label1:
        if r1 != r0 goto label2;

        return;

     label2:
        r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        r5 = r0;

     label3:
        $z1 = r4 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label5;

        $r2 = (android.view.ViewGroup) r4;

        $r2.<android.view.ViewGroup: android.view.View mFocusedInCluster> = r5;

        if r4 != r1 goto label4;

        goto label5;

     label4:
        r5 = (android.view.View) r4;

        r4 = interfaceinvoke r4.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label3;

     label5:
        return;
    }

    private void setKeyedTag(int, java.lang.Object)
    {
        android.view.View r0;
        int i0;
        java.lang.Object r1;
        android.util.SparseArray $r2, $r3, $r4;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $r2 = r0.<android.view.View: android.util.SparseArray mKeyedTags>;

        if $r2 != null goto label1;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>(int)>(2);

        r0.<android.view.View: android.util.SparseArray mKeyedTags> = $r4;

     label1:
        $r3 = r0.<android.view.View: android.util.SparseArray mKeyedTags>;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r1);

        return;
    }

    private void setMeasuredDimensionRaw(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0.<android.view.View: int mMeasuredWidth> = i0;

        r0.<android.view.View: int mMeasuredHeight> = i1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 | 2048;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        return;
    }

    private void setNotifiedContentCaptureAppeared()
    {
        android.view.View r0;
        int i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mPrivateFlags4>;

        i0 = $i1 | 16;

        r0.<android.view.View: int mPrivateFlags4> = i0;

        $i2 = i0 & -33;

        r0.<android.view.View: int mPrivateFlags4> = $i2;

        return;
    }

    private boolean setOpticalFrame(int, int, int, int)
    {
        android.view.View r0, $r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        android.graphics.Insets r1, r4;
        boolean $z0, $z1;
        android.view.ViewParent r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r3 instanceof android.view.View;

        if $z0 == 0 goto label1;

        $r2 = (android.view.View) r3;

        r4 = virtualinvoke $r2.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        goto label2;

     label1:
        r4 = <android.graphics.Insets: android.graphics.Insets NONE>;

     label2:
        r1 = virtualinvoke r0.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        $i4 = r4.<android.graphics.Insets: int left>;

        $i6 = $i4 + i0;

        $i5 = r1.<android.graphics.Insets: int left>;

        $i19 = $i6 - $i5;

        $i7 = r4.<android.graphics.Insets: int top>;

        $i9 = $i7 + i1;

        $i8 = r1.<android.graphics.Insets: int top>;

        $i18 = $i9 - $i8;

        $i10 = r4.<android.graphics.Insets: int left>;

        $i12 = $i10 + i2;

        $i11 = r1.<android.graphics.Insets: int right>;

        $i17 = $i12 + $i11;

        $i13 = r4.<android.graphics.Insets: int top>;

        $i15 = $i13 + i3;

        $i14 = r1.<android.graphics.Insets: int bottom>;

        $i16 = $i15 + $i14;

        $z1 = virtualinvoke r0.<android.view.View: boolean setFrame(int,int,int,int)>($i19, $i18, $i17, $i16);

        return $z1;
    }

    private void setOutlineProviderFromAttribute(int)
    {
        android.view.View r0;
        int i0;
        android.view.ViewOutlineProvider $r1, $r2, $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        goto label5;

     label1:
        $r3 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider PADDED_BOUNDS>;

        virtualinvoke r0.<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>($r3);

        goto label5;

     label2:
        $r2 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BOUNDS>;

        virtualinvoke r0.<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>($r2);

        goto label5;

     label3:
        virtualinvoke r0.<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>(null);

        goto label5;

     label4:
        $r1 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BACKGROUND>;

        virtualinvoke r0.<android.view.View: void setOutlineProvider(android.view.ViewOutlineProvider)>($r1);

     label5:
        return;
    }

    private void setPressed(boolean, float, float)
    {
        android.view.View r0;
        boolean z0;
        float f0, f1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void drawableHotspotChanged(float,float)>(f0, f1);

     label1:
        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(z0);

        return;
    }

    private boolean showHoverTooltip()
    {
        android.view.View r0;
        android.view.View$TooltipInfo $r1, $r2;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $i1 = $r1.<android.view.View$TooltipInfo: int mAnchorX>;

        $r2 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $i0 = $r2.<android.view.View$TooltipInfo: int mAnchorY>;

        $z0 = specialinvoke r0.<android.view.View: boolean showTooltip(int,int,boolean)>($i1, $i0, 0);

        return $z0;
    }

    private boolean showLongClickTooltip(int, int)
    {
        android.view.View r0;
        int i0, i1;
        android.view.View$TooltipInfo $r1, $r3;
        java.lang.Runnable $r2, $r4;
        boolean $z2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r2 = $r1.<android.view.View$TooltipInfo: java.lang.Runnable mShowTooltipRunnable>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r2);

        $r3 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r4 = $r3.<android.view.View$TooltipInfo: java.lang.Runnable mHideTooltipRunnable>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r4);

        $z2 = specialinvoke r0.<android.view.View: boolean showTooltip(int,int,boolean)>(i0, i1, 1);

        return $z2;
    }

    private boolean showTooltip(int, int, boolean)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        android.view.View$AttachInfo $r1, $r13;
        android.view.View$TooltipInfo $r2, $r3, $r5, $r7, $r9, $r10;
        java.lang.CharSequence $r4, $r11;
        boolean $z0, z1, z2;
        com.android.internal.view.TooltipPopup $r6, $r12;
        android.content.Context $r8;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z1 := @parameter2: boolean;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label6;

        $r2 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        if $r2 != null goto label1;

        goto label6;

     label1:
        if z1 == 0 goto label2;

        $i4 = r0.<android.view.View: int mViewFlags>;

        $i5 = $i4 & 32;

        if $i5 == 0 goto label2;

        return 0;

     label2:
        $r3 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r4 = $r3.<android.view.View$TooltipInfo: java.lang.CharSequence mTooltipText>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z0 == 0 goto label3;

        return 0;

     label3:
        virtualinvoke r0.<android.view.View: void hideTooltip()>();

        $r5 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r5.<android.view.View$TooltipInfo: boolean mTooltipFromLongClick> = z1;

        $r7 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r6 = new com.android.internal.view.TooltipPopup;

        $r8 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        specialinvoke $r6.<com.android.internal.view.TooltipPopup: void <init>(android.content.Context)>($r8);

        $r7.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup> = $r6;

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & 131072;

        if $i3 != 131072 goto label4;

        z2 = 1;

        goto label5;

     label4:
        z2 = 0;

     label5:
        $r9 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r12 = $r9.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup>;

        $r10 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r11 = $r10.<android.view.View$TooltipInfo: java.lang.CharSequence mTooltipText>;

        virtualinvoke $r12.<com.android.internal.view.TooltipPopup: void show(android.view.View,int,int,boolean,java.lang.CharSequence)>(r0, i0, i1, z2, $r11);

        $r13 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r13.<android.view.View$AttachInfo: android.view.View mTooltipHost> = r0;

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        return 1;

     label6:
        return 0;
    }

    private void sizeChange(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.view.ViewGroup $r1, $r4, $r5, $r7;
        android.view.ViewParent $r2, $r3, r9, r10;
        android.view.ViewOverlay $r6, r8;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.View: void onSizeChanged(int,int,int,int)>(i0, i1, i2, i3);

        r8 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if r8 == null goto label1;

        $r5 = virtualinvoke r8.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r5.<android.view.ViewGroup: void setRight(int)>(i0);

        $r6 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r7 = virtualinvoke $r6.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r7.<android.view.ViewGroup: void setBottom(int)>(i1);

     label1:
        $z0 = <android.view.View: boolean sCanFocusZeroSized>;

        if $z0 != 0 goto label7;

        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutValid()>();

        if $z1 == 0 goto label7;

        r9 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z2 = r9 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label2;

        $r4 = (android.view.ViewGroup) r9;

        $z6 = virtualinvoke $r4.<android.view.ViewGroup: boolean isLayoutSuppressed()>();

        if $z6 != 0 goto label7;

     label2:
        if i0 <= 0 goto label5;

        if i1 > 0 goto label3;

        goto label5;

     label3:
        if i2 <= 0 goto label4;

        if i3 > 0 goto label7;

     label4:
        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label7;

        $z5 = specialinvoke r0.<android.view.View: boolean canTakeFocus()>();

        if $z5 == 0 goto label7;

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void focusableViewAvailable(android.view.View)>(r0);

        goto label7;

     label5:
        $z3 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        if $z3 == 0 goto label6;

        virtualinvoke r0.<android.view.View: void clearFocus()>();

        r10 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z4 = r10 instanceof android.view.ViewGroup;

        if $z4 == 0 goto label6;

        $r1 = (android.view.ViewGroup) r10;

        virtualinvoke $r1.<android.view.ViewGroup: void clearFocusedInCluster()>();

     label6:
        virtualinvoke r0.<android.view.View: void clearAccessibilityFocus()>();

     label7:
        specialinvoke r0.<android.view.View: void rebuildOutline()>();

        return;
    }

    private boolean skipInvalidate()
    {
        android.view.View r0;
        android.view.ViewParent r1;
        int $i0, $i1;
        android.view.animation.Animation $r2;
        boolean $z0, $z1, z2;
        android.view.ViewGroup $r3;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        if $i1 == 0 goto label2;

        $r2 = r0.<android.view.View: android.view.animation.Animation mCurrentAnimation>;

        if $r2 != null goto label2;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r3 = (android.view.ViewGroup) r1;

        $z1 = virtualinvoke $r3.<android.view.ViewGroup: boolean isViewTransitioning(android.view.View)>(r0);

        if $z1 != 0 goto label2;

     label1:
        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    private void switchDefaultFocusHighlight()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1, $r2, $r3, r5;
        boolean z0, $z1, z2;
        android.view.View$ForegroundInfo r4;

        r0 := @this: android.view.View;

        $z1 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z1 == 0 goto label6;

        r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        r4 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r4 != null goto label1;

        r5 = null;

        goto label2;

     label1:
        r5 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r4);

     label2:
        z0 = virtualinvoke r0.<android.view.View: boolean isDefaultFocusHighlightNeeded(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)>(r1, r5);

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if $r2 == null goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        if z0 == 0 goto label5;

        if z2 != 0 goto label5;

        $r3 = specialinvoke r0.<android.view.View: android.graphics.drawable.Drawable getDefaultFocusHighlightDrawable()>();

        specialinvoke r0.<android.view.View: void setDefaultFocusHighlight(android.graphics.drawable.Drawable)>($r3);

        goto label6;

     label5:
        if z0 != 0 goto label6;

        if z2 == 0 goto label6;

        specialinvoke r0.<android.view.View: void setDefaultFocusHighlight(android.graphics.drawable.Drawable)>(null);

     label6:
        return;
    }

    private boolean traverseAtGranularity(int, boolean, boolean)
    {
        android.view.View r0;
        int i0, $i1, i2, i3, i4, i5, i6, i7, i8;
        boolean z0, z1, $z2;
        java.lang.CharSequence r1;
        android.view.AccessibilityIterators$TextSegmentIterator r2;
        int[] r3;
        short s9;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r1 == null goto label18;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i1 != 0 goto label01;

        goto label18;

     label01:
        r2 = virtualinvoke r0.<android.view.View: android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(int)>(i0);

        if r2 != null goto label02;

        return 0;

     label02:
        i2 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionEnd()>();

        i3 = i2;

        if i2 != -1 goto label04;

        if z0 == 0 goto label03;

        i3 = 0;

        goto label04;

     label03:
        i3 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

     label04:
        if z0 == 0 goto label05;

        r3 = interfaceinvoke r2.<android.view.AccessibilityIterators$TextSegmentIterator: int[] following(int)>(i3);

        goto label06;

     label05:
        r3 = interfaceinvoke r2.<android.view.AccessibilityIterators$TextSegmentIterator: int[] preceding(int)>(i3);

     label06:
        if r3 != null goto label07;

        return 0;

     label07:
        i4 = r3[0];

        i5 = r3[1];

        if z1 == 0 goto label12;

        $z2 = virtualinvoke r0.<android.view.View: boolean isAccessibilitySelectionExtendable()>();

        if $z2 == 0 goto label12;

        i6 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionStart()>();

        i7 = i6;

        if i6 != -1 goto label09;

        if z0 == 0 goto label08;

        i7 = i4;

        goto label09;

     label08:
        i7 = i5;

     label09:
        if z0 == 0 goto label10;

        i8 = i5;

        goto label11;

     label10:
        i8 = i4;

     label11:
        goto label15;

     label12:
        if z0 == 0 goto label13;

        i7 = i5;

        goto label14;

     label13:
        i7 = i4;

     label14:
        i8 = i7;

     label15:
        virtualinvoke r0.<android.view.View: void setAccessibilitySelection(int,int)>(i7, i8);

        if z0 == 0 goto label16;

        s9 = 256;

        goto label17;

     label16:
        s9 = 512;

     label17:
        specialinvoke r0.<android.view.View: void sendViewTextTraversedAtGranularityEvent(int,int,int,int)>(s9, i0, i4, i5);

        return 1;

     label18:
        return 0;
    }

    private void updateFocusedInCluster(android.view.View, int)
    {
        android.view.View r0, r1, r2, $r3;
        int i0, $i1;
        android.view.ViewParent $r4, $r5, $r8;
        boolean $z0, $z1, $z2;
        android.view.ViewGroup $r6, $r7, $r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        if r1 == null goto label4;

        r2 = virtualinvoke r1.<android.view.View: android.view.View findKeyboardNavigationCluster()>();

        $r3 = virtualinvoke r0.<android.view.View: android.view.View findKeyboardNavigationCluster()>();

        if r2 == $r3 goto label4;

        specialinvoke r1.<android.view.View: void setFocusedInCluster(android.view.View)>(r2);

        $r4 = r1.<android.view.View: android.view.ViewParent mParent>;

        $z0 = $r4 instanceof android.view.ViewGroup;

        if $z0 != 0 goto label1;

        return;

     label1:
        if i0 == 2 goto label3;

        if i0 != 1 goto label2;

        goto label3;

     label2:
        $z1 = r1 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label4;

        $r7 = (android.view.ViewGroup) r1;

        $i1 = virtualinvoke $r7.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i1 != 262144 goto label4;

        $z2 = staticinvoke <android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>(r0, r1);

        if $z2 == 0 goto label4;

        $r8 = r1.<android.view.View: android.view.ViewParent mParent>;

        $r9 = (android.view.ViewGroup) $r8;

        virtualinvoke $r9.<android.view.ViewGroup: void clearFocusedInCluster(android.view.View)>(r1);

        goto label4;

     label3:
        $r5 = r1.<android.view.View: android.view.ViewParent mParent>;

        $r6 = (android.view.ViewGroup) $r5;

        virtualinvoke $r6.<android.view.ViewGroup: void clearFocusedInCluster(android.view.View)>(r1);

     label4:
        return;
    }

    private void updatePflags3AndNotifyA11yIfChanged(int, boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0, $i1, i2, i3;

        r0 := @this: android.view.View;

        i2 := @parameter0: int;

        z0 := @parameter1: boolean;

        i0 = r0.<android.view.View: int mPrivateFlags3>;

        if z0 == 0 goto label1;

        i3 = i0 | i2;

        goto label2;

     label1:
        i3 = i0 & i2;

     label2:
        $i1 = r0.<android.view.View: int mPrivateFlags3>;

        if i3 == $i1 goto label3;

        r0.<android.view.View: int mPrivateFlags3> = i3;

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label3:
        return;
    }

    public void addChildrenForAccessibility(java.util.ArrayList)
    {
        android.view.View r0;
        java.util.ArrayList r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.ArrayList;

        return;
    }

    public void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo, java.lang.String, android.os.Bundle)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        java.lang.String r2;
        android.os.Bundle r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Bundle;

        return;
    }

    public void addFocusables(java.util.ArrayList, int)
    {
        android.view.View r0;
        java.util.ArrayList r1;
        int i0, i1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean isInTouchMode()>();

        i1 = (int) $z0;

        virtualinvoke r0.<android.view.View: void addFocusables(java.util.ArrayList,int,int)>(r1, i0, i1);

        return;
    }

    public void addFocusables(java.util.ArrayList, int, int)
    {
        android.view.View r0;
        java.util.ArrayList r1;
        int i0, i1, $i2;
        boolean $z0, $z2;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r1 != null goto label1;

        return;

     label1:
        $z0 = specialinvoke r0.<android.view.View: boolean canTakeFocus()>();

        if $z0 != 0 goto label2;

        return;

     label2:
        $i2 = i1 & 1;

        if $i2 != 1 goto label3;

        $z2 = virtualinvoke r0.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z2 != 0 goto label3;

        return;

     label3:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void addFrameMetricsListener(android.view.Window, android.view.Window$OnFrameMetricsAvailableListener, android.os.Handler)
    {
        android.view.View r0;
        android.view.Window$OnFrameMetricsAvailableListener r1;
        android.os.Handler r2;
        android.view.View$AttachInfo r3, $r12;
        java.util.ArrayList $r4, $r6, $r7, $r9, $r11, $r15;
        android.view.FrameMetricsObserver $r5, $r10;
        android.view.ThreadedRenderer $r8, $r13;
        android.graphics.HardwareRendererObserver $r14;
        android.view.Window r16;

        r0 := @this: android.view.View;

        r16 := @parameter0: android.view.Window;

        r1 := @parameter1: android.view.Window$OnFrameMetricsAvailableListener;

        r2 := @parameter2: android.os.Handler;

        r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r3 == null goto label3;

        $r8 = r3.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r8 == null goto label2;

        $r9 = r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers>;

        if $r9 != null goto label1;

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>()>();

        r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers> = $r15;

     label1:
        $r10 = new android.view.FrameMetricsObserver;

        specialinvoke $r10.<android.view.FrameMetricsObserver: void <init>(android.view.Window,android.os.Handler,android.view.Window$OnFrameMetricsAvailableListener)>(r16, r2, r1);

        $r11 = r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $r12 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r13 = $r12.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $r14 = virtualinvoke $r10.<android.view.FrameMetricsObserver: android.graphics.HardwareRendererObserver getRendererObserver()>();

        virtualinvoke $r13.<android.view.ThreadedRenderer: void addObserver(android.graphics.HardwareRendererObserver)>($r14);

        goto label5;

     label2:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "View not hardware-accelerated. Unable to observe frame stats");

        goto label5;

     label3:
        $r4 = r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers>;

        if $r4 != null goto label4;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers> = $r7;

     label4:
        $r5 = new android.view.FrameMetricsObserver;

        specialinvoke $r5.<android.view.FrameMetricsObserver: void <init>(android.view.Window,android.os.Handler,android.view.Window$OnFrameMetricsAvailableListener)>(r16, r2, r1);

        $r6 = r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label5:
        return;
    }

    public void addKeyboardNavigationClusters(java.util.Collection, int)
    {
        android.view.View r0;
        java.util.Collection r1;
        int i0;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean isKeyboardNavigationCluster()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean hasFocusable()>();

        if $z1 != 0 goto label2;

        return;

     label2:
        interfaceinvoke r1.<java.util.Collection: boolean add(java.lang.Object)>(r0);

        return;
    }

    public void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)
    {
        android.view.View r0;
        android.view.View$OnAttachStateChangeListener r1;
        android.view.View$ListenerInfo r2;
        java.util.concurrent.CopyOnWriteArrayList $r3, $r4, $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnAttachStateChangeListener;

        r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r3 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$300(android.view.View$ListenerInfo)>(r2);

        if $r3 != null goto label1;

        $r5 = new java.util.concurrent.CopyOnWriteArrayList;

        specialinvoke $r5.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>();

        staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$302(android.view.View$ListenerInfo,java.util.concurrent.CopyOnWriteArrayList)>(r2, $r5);

     label1:
        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$300(android.view.View$ListenerInfo)>(r2);

        virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)
    {
        android.view.View r0;
        android.view.View$OnLayoutChangeListener r1;
        android.view.View$ListenerInfo r2;
        java.util.ArrayList $r3, $r4, $r5, $r6;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnLayoutChangeListener;

        r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r3 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$200(android.view.View$ListenerInfo)>(r2);

        if $r3 != null goto label1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$202(android.view.View$ListenerInfo,java.util.ArrayList)>(r2, $r6);

     label1:
        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$200(android.view.View$ListenerInfo)>(r2);

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r5 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$200(android.view.View$ListenerInfo)>(r2);

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void addOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)
    {
        android.view.View r0;
        java.util.ArrayList r1, $r4, r8;
        android.view.View$ListenerInfo $r2, $r5;
        int $i0;
        boolean $z1;
        android.view.ViewGroup $r3;
        android.view.View$OnUnhandledKeyEventListener r7;
        android.view.ViewParent r9;

        r0 := @this: android.view.View;

        r7 := @parameter0: android.view.View$OnUnhandledKeyEventListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        r1 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4200(android.view.View$ListenerInfo)>($r2);

        r8 = r1;

        if r1 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r8 = $r4;

        $r5 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4202(android.view.View$ListenerInfo,java.util.ArrayList)>($r5, $r4);

     label1:
        virtualinvoke r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r7);

        $i0 = virtualinvoke r8.<java.util.ArrayList: int size()>();

        if $i0 != 1 goto label2;

        r9 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z1 = r9 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label2;

        $r3 = (android.view.ViewGroup) r9;

        virtualinvoke $r3.<android.view.ViewGroup: void incrementChildUnhandledKeyListeners()>();

     label2:
        return;
    }

    public void addTouchables(java.util.ArrayList)
    {
        android.view.View r0;
        java.util.ArrayList r1;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.ArrayList;

        i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = i0 & 16384;

        if $i1 == 16384 goto label1;

        $i2 = i0 & 2097152;

        if $i2 == 2097152 goto label1;

        $i3 = i0 & 8388608;

        if $i3 != 8388608 goto label2;

     label1:
        $i4 = i0 & 32;

        if $i4 != 0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label2:
        return;
    }

    public android.view.ViewPropertyAnimator animate()
    {
        android.view.View r0;
        android.view.ViewPropertyAnimator $r1, $r2, $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewPropertyAnimator mAnimator>;

        if $r1 != null goto label1;

        $r3 = new android.view.ViewPropertyAnimator;

        specialinvoke $r3.<android.view.ViewPropertyAnimator: void <init>(android.view.View)>(r0);

        r0.<android.view.View: android.view.ViewPropertyAnimator mAnimator> = $r3;

     label1:
        $r2 = r0.<android.view.View: android.view.ViewPropertyAnimator mAnimator>;

        return $r2;
    }

    public void announceForAccessibility(java.lang.CharSequence)
    {
        android.view.View r0;
        java.lang.CharSequence r1;
        android.view.accessibility.AccessibilityEvent r2;
        android.content.Context $r3;
        android.view.accessibility.AccessibilityManager $r4;
        boolean $z0;
        android.view.ViewParent $r5, $r7;
        java.util.List $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.CharSequence;

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r3);

        $z0 = virtualinvoke $r4.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r5 == null goto label1;

        r2 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(16384);

        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r2);

        $r6 = virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: java.util.List getText()>();

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1);

        virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: void setContentDescription(java.lang.CharSequence)>(null);

        $r7 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r7.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r2);

     label1:
        return;
    }

    public void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable, android.graphics.Region)
    {
        android.view.View r0;
        android.graphics.Region r1, r2;
        android.graphics.Rect r3;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        android.graphics.Region$Op $r4, $r5, $r6, $r7, $r8, $r9;
        android.graphics.drawable.Drawable r10;
        android.view.View$AttachInfo r11;
        int[] r12;

        r0 := @this: android.view.View;

        r10 := @parameter0: android.graphics.drawable.Drawable;

        r1 := @parameter1: android.graphics.Region;

        r2 = virtualinvoke r10.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>();

        r3 = virtualinvoke r10.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        r11 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label5;

        if r11 == null goto label5;

        $i2 = virtualinvoke r0.<android.view.View: int getRight()>();

        $i3 = virtualinvoke r0.<android.view.View: int getLeft()>();

        i0 = $i2 - $i3;

        $i4 = virtualinvoke r0.<android.view.View: int getBottom()>();

        $i5 = virtualinvoke r0.<android.view.View: int getTop()>();

        i1 = $i4 - $i5;

        $i6 = r3.<android.graphics.Rect: int left>;

        if $i6 <= 0 goto label1;

        $i15 = r3.<android.graphics.Rect: int left>;

        $r9 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r2.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(0, 0, $i15, i1, $r9);

     label1:
        $i7 = r3.<android.graphics.Rect: int right>;

        if $i7 >= i0 goto label2;

        $i14 = r3.<android.graphics.Rect: int right>;

        $r8 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r2.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i14, 0, i0, i1, $r8);

     label2:
        $i8 = r3.<android.graphics.Rect: int top>;

        if $i8 <= 0 goto label3;

        $i13 = r3.<android.graphics.Rect: int top>;

        $r7 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r2.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(0, 0, i0, $i13, $r7);

     label3:
        $i9 = r3.<android.graphics.Rect: int bottom>;

        if $i9 >= i1 goto label4;

        $i12 = r3.<android.graphics.Rect: int bottom>;

        $r6 = <android.graphics.Region$Op: android.graphics.Region$Op UNION>;

        virtualinvoke r2.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(0, $i12, i0, i1, $r6);

     label4:
        r12 = r11.<android.view.View$AttachInfo: int[] mTransparentLocation>;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r12);

        $i11 = r12[0];

        $i10 = r12[1];

        virtualinvoke r2.<android.graphics.Region: void translate(int,int)>($i11, $i10);

        $r5 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke r1.<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>(r2, $r5);

        goto label6;

     label5:
        $r4 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r1.<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>(r3, $r4);

     label6:
        return;
    }

    boolean areDrawablesResolved()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 1073741824;

        if $i1 != 1073741824 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void assignParent(android.view.ViewParent)
    {
        android.view.View r0;
        android.view.ViewParent $r1, r8;
        java.lang.StringBuilder $r2;
        java.lang.RuntimeException $r6;
        java.lang.String $r7;

        r0 := @this: android.view.View;

        r8 := @parameter0: android.view.ViewParent;

        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r1 != null goto label1;

        r0.<android.view.View: android.view.ViewParent mParent> = r8;

        goto label2;

     label1:
        if r8 != null goto label3;

        r0.<android.view.View: android.view.ViewParent mParent> = null;

     label2:
        return;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" being added, but it already has a parent");

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public void autofill(android.util.SparseArray)
    {
        android.view.View r0;
        android.util.SparseArray r1;
        android.view.accessibility.AccessibilityNodeProvider r2;
        int i0, i1, i2;
        java.lang.CharSequence r3;
        android.content.Context $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        android.os.Bundle $r6;
        android.view.autofill.AutofillValue r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.util.SparseArray;

        $r4 = r0.<android.view.View: android.content.Context mContext>;

        $z0 = virtualinvoke $r4.<android.content.Context: boolean isAutofillCompatibilityEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r2 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r2 != null goto label2;

        return;

     label2:
        i0 = virtualinvoke r1.<android.util.SparseArray: int size()>();

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        $r5 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r7 = (android.view.autofill.AutofillValue) $r5;

        $z1 = virtualinvoke r7.<android.view.autofill.AutofillValue: boolean isText()>();

        if $z1 == 0 goto label4;

        i1 = virtualinvoke r1.<android.util.SparseArray: int keyAt(int)>(i2);

        r3 = virtualinvoke r7.<android.view.autofill.AutofillValue: java.lang.CharSequence getTextValue()>();

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        virtualinvoke $r6.<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>("ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE", r3);

        virtualinvoke r2.<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>(i1, 2097152, $r6);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return;
    }

    public void autofill(android.view.autofill.AutofillValue)
    {
        android.view.View r0;
        android.view.autofill.AutofillValue r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.autofill.AutofillValue;

        return;
    }

    protected boolean awakenScrollBars()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        int $i0;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        z1 = 1;

        if r1 == null goto label1;

        $i0 = r1.<android.view.View$ScrollabilityCache: int scrollBarDefaultDelayBeforeFade>;

        $z0 = virtualinvoke r0.<android.view.View: boolean awakenScrollBars(int,boolean)>($i0, 1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    protected boolean awakenScrollBars(int)
    {
        android.view.View r0;
        int i0;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean awakenScrollBars(int,boolean)>(i0, 1);

        return $z0;
    }

    protected boolean awakenScrollBars(int, boolean)
    {
        android.view.View r0;
        int i0, $i2, i5;
        boolean z0, $z1, $z2, $z4;
        android.view.View$ScrollabilityCache r1;
        long l1, $l3, $l4;
        android.view.View$AttachInfo r2, $r5;
        android.widget.ScrollBarDrawable $r3, $r7, $r8, $r10;
        android.os.Handler $r4, $r6;
        int[] $r9;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label8;

        $z1 = r1.<android.view.View$ScrollabilityCache: boolean fadeScrollBars>;

        if $z1 != 0 goto label1;

        goto label8;

     label1:
        $r3 = r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if $r3 != null goto label2;

        $r7 = new android.widget.ScrollBarDrawable;

        specialinvoke $r7.<android.widget.ScrollBarDrawable: void <init>()>();

        r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar> = $r7;

        $r8 = r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        $r9 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $r8.<android.widget.ScrollBarDrawable: boolean setState(int[])>($r9);

        $r10 = r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r10.<android.widget.ScrollBarDrawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

     label2:
        $z2 = virtualinvoke r0.<android.view.View: boolean isHorizontalScrollBarEnabled()>();

        if $z2 != 0 goto label4;

        $z4 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarEnabled()>();

        if $z4 == 0 goto label3;

        goto label4;

     label3:
        return 0;

     label4:
        if z0 == 0 goto label5;

        virtualinvoke r0.<android.view.View: void postInvalidateOnAnimation()>();

     label5:
        i5 = i0;

        $i2 = r1.<android.view.View$ScrollabilityCache: int state>;

        if $i2 != 0 goto label6;

        i5 = staticinvoke <java.lang.Math: int max(int,int)>(750, i0);

     label6:
        $l3 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        $l4 = (long) i5;

        l1 = $l3 + $l4;

        r1.<android.view.View$ScrollabilityCache: long fadeStartTime> = l1;

        r1.<android.view.View$ScrollabilityCache: int state> = 1;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label7;

        $r4 = r2.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>(r1);

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r6.<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>(r1, l1);

     label7:
        return 1;

     label8:
        return 0;
    }

    public void bringToFront()
    {
        android.view.View r0;
        android.view.ViewParent r1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.view.ViewParent: void bringChildToFront(android.view.View)>(r0);

     label1:
        return;
    }

    public void buildDrawingCache()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(0);

        return;
    }

    public void buildDrawingCache(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1;
        java.lang.StringBuilder $r1;
        java.lang.Class $r3;
        java.lang.String $r4, $r6;
        android.graphics.Bitmap $r7, $r8;
        java.lang.Throwable $r9;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 32768;

        if $i1 == 0 goto label2;

        if z0 == 0 goto label1;

        $r8 = r0.<android.view.View: android.graphics.Bitmap mDrawingCache>;

        if $r8 != null goto label5;

        goto label2;

     label1:
        $r7 = r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache>;

        if $r7 != null goto label5;

     label2:
        $z1 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(8L);

        if $z1 == 0 goto label3;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("buildDrawingCache/SW Layer for ");

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, $r6);

     label3:
        specialinvoke r0.<android.view.View: void buildDrawingCacheImpl(boolean)>(z0);

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

     label5:
        return;

     label6:
        $r9 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw $r9;

        catch java.lang.Throwable from label3 to label4 with label6;
    }

    public void buildLayer()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        int i0, $i1, $i2, $i3;
        java.lang.IllegalStateException $r2;
        android.view.ThreadedRenderer $r4, $r7;
        android.graphics.RenderNode $r5, $r6;
        boolean $z0;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mLayerType>;

        if $i1 != 0 goto label1;

        return;

     label1:
        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label7;

        $i2 = virtualinvoke r0.<android.view.View: int getWidth()>();

        if $i2 == 0 goto label6;

        $i3 = virtualinvoke r0.<android.view.View: int getHeight()>();

        if $i3 != 0 goto label2;

        goto label6;

     label2:
        i0 = r0.<android.view.View: int mLayerType>;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        goto label5;

     label3:
        virtualinvoke r0.<android.view.View: android.graphics.RenderNode updateDisplayListIfDirty()>();

        $r4 = r1.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r4 == null goto label5;

        $r5 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r5.<android.graphics.RenderNode: boolean hasDisplayList()>();

        if $z0 == 0 goto label5;

        $r7 = r1.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $r6 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r7.<android.view.ThreadedRenderer: void buildLayer(android.graphics.RenderNode)>($r6);

        goto label5;

     label4:
        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(1);

     label5:
        return;

     label6:
        return;

     label7:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("This view must be attached to a window first");

        throw $r2;
    }

    final boolean callDragEventHandler(android.view.DragEvent)
    {
        android.view.View r0;
        android.view.DragEvent r1;
        android.view.View$ListenerInfo r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        android.view.View$OnDragListener $r3, $r4;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.DragEvent;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnDragListener access$800(android.view.View$ListenerInfo)>(r2);

        if $r3 == null goto label1;

        $i7 = r0.<android.view.View: int mViewFlags>;

        $i8 = $i7 & 32;

        if $i8 != 0 goto label1;

        $r4 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnDragListener access$800(android.view.View$ListenerInfo)>(r2);

        $z0 = interfaceinvoke $r4.<android.view.View$OnDragListener: boolean onDrag(android.view.View,android.view.DragEvent)>(r0, r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = virtualinvoke r0.<android.view.View: boolean onDragEvent(android.view.DragEvent)>(r1);

     label2:
        i0 = r1.<android.view.DragEvent: int mAction>;

        if i0 == 4 goto label5;

        if i0 == 5 goto label4;

        if i0 == 6 goto label3;

        goto label6;

     label3:
        $i5 = r0.<android.view.View: int mPrivateFlags2>;

        $i6 = $i5 & -3;

        r0.<android.view.View: int mPrivateFlags2> = $i6;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        goto label6;

     label4:
        $i3 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = $i3 | 2;

        r0.<android.view.View: int mPrivateFlags2> = $i4;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        goto label6;

     label5:
        $i1 = r0.<android.view.View: int mPrivateFlags2>;

        $i2 = $i1 & -4;

        r0.<android.view.View: int mPrivateFlags2> = $i2;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

     label6:
        return z1;
    }

    public boolean callOnClick()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnClickListener $r2, $r3;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener>;

        if $r2 == null goto label1;

        $r3 = r1.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener>;

        interfaceinvoke $r3.<android.view.View$OnClickListener: void onClick(android.view.View)>(r0);

        return 1;

     label1:
        return 0;
    }

    boolean canAcceptDrag()
    {
        android.view.View r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        i0 = r0.<android.view.View: int mPrivateFlags2>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean canHaveDisplayList()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ThreadedRenderer $r2;
        boolean z0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean canNotifyAutofillEnterExitEvent()
    {
        android.view.View r0;
        boolean $z0, $z1, z2;

        r0 := @this: android.view.View;

        $z0 = specialinvoke r0.<android.view.View: boolean isAutofillable()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    protected boolean canReceivePointerEvents()
    {
        android.view.View r0;
        int $i0, $i1;
        android.view.animation.Animation $r1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        if $i1 == 0 goto label2;

        $r1 = virtualinvoke r0.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r1 == null goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public boolean canResolveLayoutDirection()
    {
        android.view.View r0;
        boolean z0;
        int $i0;
        java.lang.AbstractMethodError $r2;
        java.lang.StringBuilder $r3;
        android.view.ViewParent $r4, r10;
        java.lang.Class $r5;
        java.lang.String $r6, $r9;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawLayoutDirection()>();

        if $i0 == 2 goto label1;

        return 1;

     label1:
        r10 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r10 == null goto label5;

     label2:
        z0 = interfaceinvoke r10.<android.view.ViewParent: boolean canResolveLayoutDirection()>();

     label3:
        return z0;

     label4:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r9, $r2);

     label5:
        return 0;

        catch java.lang.AbstractMethodError from label2 to label3 with label4;
    }

    public boolean canResolveTextAlignment()
    {
        android.view.View r0;
        boolean z0;
        int $i0;
        java.lang.AbstractMethodError $r2;
        java.lang.StringBuilder $r3;
        android.view.ViewParent $r4, r10;
        java.lang.Class $r5;
        java.lang.String $r6, $r9;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawTextAlignment()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        r10 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r10 == null goto label5;

     label2:
        z0 = interfaceinvoke r10.<android.view.ViewParent: boolean canResolveTextAlignment()>();

     label3:
        return z0;

     label4:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r9, $r2);

     label5:
        return 0;

        catch java.lang.AbstractMethodError from label2 to label3 with label4;
    }

    public boolean canResolveTextDirection()
    {
        android.view.View r0;
        boolean z0;
        int $i0;
        java.lang.AbstractMethodError $r2;
        java.lang.StringBuilder $r3;
        android.view.ViewParent $r4, r10;
        java.lang.Class $r5;
        java.lang.String $r6, $r9;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawTextDirection()>();

        if $i0 == 0 goto label1;

        return 1;

     label1:
        r10 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r10 == null goto label5;

     label2:
        z0 = interfaceinvoke r10.<android.view.ViewParent: boolean canResolveTextDirection()>();

     label3:
        return z0;

     label4:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r9, $r2);

     label5:
        return 0;

        catch java.lang.AbstractMethodError from label2 to label3 with label4;
    }

    public boolean canScrollHorizontally(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5;
        boolean z1, z2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollOffset()>();

        $i3 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        $i4 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        i2 = $i3 - $i4;

        z1 = 0;

        if i2 != 0 goto label1;

        return 0;

     label1:
        if i0 >= 0 goto label3;

        if i1 <= 0 goto label2;

        z1 = 1;

     label2:
        return z1;

     label3:
        z2 = 0;

        $i5 = i2 - 1;

        if i1 >= $i5 goto label4;

        z2 = 1;

     label4:
        return z2;
    }

    public boolean canScrollVertically(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5;
        boolean z1, z2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<android.view.View: int computeVerticalScrollOffset()>();

        $i3 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        $i4 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        i2 = $i3 - $i4;

        z1 = 0;

        if i2 != 0 goto label1;

        return 0;

     label1:
        if i0 >= 0 goto label3;

        if i1 <= 0 goto label2;

        z1 = 1;

     label2:
        return z1;

     label3:
        z2 = 0;

        $i5 = i2 - 1;

        if i1 >= $i5 goto label4;

        z2 = 1;

     label4:
        return z2;
    }

    public final void cancelDragAndDrop()
    {
        android.view.View r0;
        android.os.IBinder $r1, $r4;
        android.view.View$AttachInfo $r2, $r3, $r6, r8;
        android.view.IWindowSession $r5;
        java.lang.Exception $r7;

        r0 := @this: android.view.View;

        r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r8 != null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "cancelDragAndDrop called on a detached view.");

        return;

     label1:
        $r1 = r8.<android.view.View$AttachInfo: android.os.IBinder mDragToken>;

        if $r1 == null goto label6;

     label2:
        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r2.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.os.IBinder mDragToken>;

        interfaceinvoke $r5.<android.view.IWindowSession: void cancelDragAndDrop(android.os.IBinder,boolean)>($r4, 0);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Unable to cancel drag", $r7);

     label5:
        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r6.<android.view.View$AttachInfo: android.os.IBinder mDragToken> = null;

        goto label7;

     label6:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("View", "No active drag to cancel");

     label7:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public void cancelLongPress()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        return;
    }

    public final void cancelPendingInputEvents()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void dispatchCancelPendingInputEvents()>();

        return;
    }

    public void captureTransitioningViews(java.util.List)
    {
        android.view.View r0;
        java.util.List r1;
        int $i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.List;

        $i0 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        if $i0 != 0 goto label1;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

     label1:
        return;
    }

    public boolean checkInputConnectionProxy(android.view.View)
    {
        android.view.View r0, r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        return 0;
    }

    public void clearAccessibilityFocus()
    {
        android.view.View r0, r2;
        android.view.ViewRootImpl r1;
        boolean $z0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void clearAccessibilityFocusNoCallbacks(int)>(0);

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()>();

        if r2 == null goto label1;

        $z0 = staticinvoke <android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>(r2, r0);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

     label1:
        return;
    }

    void clearAccessibilityFocusNoCallbacks(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View$AccessibilityDelegate r2;
        android.content.Context $r3;
        android.view.accessibility.AccessibilityManager $r4;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 = r0.<android.view.View: int mPrivateFlags2>;

        $i2 = 67108864 & i1;

        if $i2 == 0 goto label2;

        $i3 = i1 & -67108865;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        virtualinvoke r0.<android.view.View: void invalidate()>();

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r3);

        $z0 = virtualinvoke $r4.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label2;

        r1 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(65536);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setAction(int)>(i0);

        r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>(r1);

     label2:
        return;
    }

    public void clearAnimation()
    {
        android.view.View r0;
        android.view.animation.Animation r1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.animation.Animation mCurrentAnimation>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.animation.Animation: void detach()>();

     label1:
        r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

        return;
    }

    public void clearFocus()
    {
        android.view.View r0;
        boolean $z0, $z1, z2;

        r0 := @this: android.view.View;

        $z0 = <android.view.View: boolean sAlwaysAssignFocus>;

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<android.view.View: boolean isInTouchMode()>();

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        virtualinvoke r0.<android.view.View: void clearFocusInternal(android.view.View,boolean,boolean)>(null, 1, z2);

        return;
    }

    void clearFocusInternal(android.view.View, boolean, boolean)
    {
        android.view.View r0, r1;
        boolean z0, z1, $z2;
        int i0, $i1, $i2;
        android.view.ViewParent r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = i0 & 2;

        if $i1 == 0 goto label3;

        $i2 = i0 & -3;

        r0.<android.view.View: int mPrivateFlags> = $i2;

        virtualinvoke r0.<android.view.View: void clearParentsWantFocus()>();

        if z0 == 0 goto label1;

        r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r2 == null goto label1;

        interfaceinvoke r2.<android.view.ViewParent: void clearChildFocus(android.view.View)>(r0);

     label1:
        virtualinvoke r0.<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>(0, 0, null);

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        if z0 == 0 goto label3;

        if z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<android.view.View: boolean rootViewRequestFocus()>();

        if $z2 != 0 goto label3;

     label2:
        virtualinvoke r0.<android.view.View: void notifyGlobalFocusCleared(android.view.View)>(r0);

     label3:
        return;
    }

    void clearParentsWantFocus()
    {
        android.view.View r0, r2, $r3;
        android.view.ViewParent r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r1 instanceof android.view.View;

        if $z0 == 0 goto label1;

        r2 = (android.view.View) r1;

        $i0 = r2.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -2;

        r2.<android.view.View: int mPrivateFlags> = $i1;

        $r3 = (android.view.View) r1;

        virtualinvoke $r3.<android.view.View: void clearParentsWantFocus()>();

     label1:
        return;
    }

    int combineVisibility(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        return $i2;
    }

    protected boolean computeFitSystemWindows(android.graphics.Rect, android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, $r3, r4;
        android.view.WindowInsets $r2, r5;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r4 := @parameter1: android.graphics.Rect;

        $r2 = new android.view.WindowInsets;

        specialinvoke $r2.<android.view.WindowInsets: void <init>(android.graphics.Rect)>(r1);

        r5 = virtualinvoke r0.<android.view.View: android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets,android.graphics.Rect)>($r2, r4);

        $r3 = virtualinvoke r5.<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsetsAsRect()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r3);

        $z0 = virtualinvoke r5.<android.view.WindowInsets: boolean isSystemWindowInsetsConsumed()>();

        return $z0;
    }

    protected int computeHorizontalScrollExtent()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        return $i0;
    }

    protected int computeHorizontalScrollOffset()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mScrollX>;

        return $i0;
    }

    protected int computeHorizontalScrollRange()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        return $i0;
    }

    protected void computeOpaqueFlags()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r1 == null goto label1;

        $i8 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i8 != -1 goto label1;

        $i9 = r0.<android.view.View: int mPrivateFlags>;

        $i10 = $i9 | 8388608;

        r0.<android.view.View: int mPrivateFlags> = $i10;

        goto label2;

     label1:
        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & -8388609;

        r0.<android.view.View: int mPrivateFlags> = $i2;

     label2:
        i0 = r0.<android.view.View: int mViewFlags>;

        $i11 = i0 & 512;

        if $i11 != 0 goto label3;

        $i7 = i0 & 256;

        if $i7 == 0 goto label5;

     label3:
        $i3 = i0 & 50331648;

        if $i3 == 0 goto label5;

        $i4 = 50331648 & i0;

        if $i4 != 33554432 goto label4;

        goto label5;

     label4:
        $i5 = r0.<android.view.View: int mPrivateFlags>;

        $i6 = $i5 & -16777217;

        r0.<android.view.View: int mPrivateFlags> = $i6;

        goto label6;

     label5:
        $i12 = r0.<android.view.View: int mPrivateFlags>;

        $i13 = $i12 | 16777216;

        r0.<android.view.View: int mPrivateFlags> = $i13;

     label6:
        return;
    }

    android.graphics.Insets computeOpticalInsets()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.graphics.Insets r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r1 != null goto label1;

        r2 = <android.graphics.Insets: android.graphics.Insets NONE>;

        goto label2;

     label1:
        r2 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>();

     label2:
        return r2;
    }

    public void computeScroll()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return;
    }

    public android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets, android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, $r2, $r7;
        int $i0, $i1, $i2, $i3;
        android.view.WindowInsets $r3, $r4, $r9, r10;
        java.lang.Object $r5, $r8;
        android.graphics.Insets $r6;
        boolean z0;
        android.view.View$AttachInfo r11;
        android.view.Window$OnContentApplyWindowInsetsListener r12;
        android.util.Pair r13;

        r0 := @this: android.view.View;

        r10 := @parameter0: android.view.WindowInsets;

        r1 := @parameter1: android.graphics.Rect;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 2048;

        if $i1 != 0 goto label2;

        $i2 = r0.<android.view.View: int mPrivateFlags4>;

        $i3 = $i2 & 256;

        if $i3 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        if z0 == 0 goto label5;

        r11 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r11 == null goto label5;

        r12 = r11.<android.view.View$AttachInfo: android.view.Window$OnContentApplyWindowInsetsListener mContentOnApplyWindowInsetsListener>;

        if r12 != null goto label4;

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

        return r10;

     label4:
        r13 = interfaceinvoke r12.<android.view.Window$OnContentApplyWindowInsetsListener: android.util.Pair onContentApplyWindowInsets(android.view.View,android.view.WindowInsets)>(r0, r10);

        $r5 = r13.<android.util.Pair: java.lang.Object first>;

        $r6 = (android.graphics.Insets) $r5;

        $r7 = virtualinvoke $r6.<android.graphics.Insets: android.graphics.Rect toRect()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

        $r8 = r13.<android.util.Pair: java.lang.Object second>;

        $r9 = (android.view.WindowInsets) $r8;

        return $r9;

     label5:
        $r2 = virtualinvoke r10.<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsetsAsRect()>();

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        $r3 = virtualinvoke r10.<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>();

        $r4 = virtualinvoke $r3.<android.view.WindowInsets: android.view.WindowInsets inset(android.graphics.Rect)>(r1);

        return $r4;
    }

    protected int computeVerticalScrollExtent()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getHeight()>();

        return $i0;
    }

    protected int computeVerticalScrollOffset()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mScrollY>;

        return $i0;
    }

    protected int computeVerticalScrollRange()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getHeight()>();

        return $i0;
    }

    public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()
    {
        android.view.View r0;
        android.view.View$AccessibilityDelegate r1;
        android.view.accessibility.AccessibilityNodeInfo $r2, $r3;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(android.view.View)>(r0);

        return $r3;

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfoInternal()>();

        return $r2;
    }

    public android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfoInternal()
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityNodeInfo $r1, r3;
        android.view.accessibility.AccessibilityNodeProvider r2;

        r0 := @this: android.view.View;

        r2 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r2 == null goto label1;

        $r1 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>(-1);

        return $r1;

     label1:
        r3 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>(r0);

        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>(r3);

        return r3;
    }

    public void createContextMenu(android.view.ContextMenu)
    {
        android.view.View r0;
        android.view.ContextMenu r1;
        android.view.View$ListenerInfo r2;
        com.android.internal.view.menu.MenuBuilder $r3, $r7;
        android.view.View$OnCreateContextMenuListener $r4, $r5;
        android.view.ContextMenu$ContextMenuInfo r6;
        android.view.ViewParent r8;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ContextMenu;

        r6 = virtualinvoke r0.<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>();

        $r3 = (com.android.internal.view.menu.MenuBuilder) r1;

        virtualinvoke $r3.<com.android.internal.view.menu.MenuBuilder: void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)>(r6);

        virtualinvoke r0.<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>(r1);

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$ListenerInfo: android.view.View$OnCreateContextMenuListener mOnCreateContextMenuListener>;

        if $r4 == null goto label1;

        $r5 = r2.<android.view.View$ListenerInfo: android.view.View$OnCreateContextMenuListener mOnCreateContextMenuListener>;

        interfaceinvoke $r5.<android.view.View$OnCreateContextMenuListener: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>(r1, r0, r6);

     label1:
        $r7 = (com.android.internal.view.menu.MenuBuilder) r1;

        virtualinvoke $r7.<com.android.internal.view.menu.MenuBuilder: void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)>(null);

        r8 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r8 == null goto label2;

        interfaceinvoke r8.<android.view.ViewParent: void createContextMenu(android.view.ContextMenu)>(r1);

     label2:
        return;
    }

    public android.view.ScrollCaptureCallback createScrollCaptureCallbackInternal(android.graphics.Rect, android.graphics.Point)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        android.graphics.Point r2;
        android.view.View$AttachInfo r3, $r5, $r9;
        com.android.internal.view.ScrollCaptureInternal $r4, $r6, $r8;
        android.view.ScrollCaptureCallback $r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Point;

        r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r3 != null goto label1;

        return null;

     label1:
        $r4 = r3.<android.view.View$AttachInfo: com.android.internal.view.ScrollCaptureInternal mScrollCaptureInternal>;

        if $r4 != null goto label2;

        $r9 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r8 = new com.android.internal.view.ScrollCaptureInternal;

        specialinvoke $r8.<com.android.internal.view.ScrollCaptureInternal: void <init>()>();

        $r9.<android.view.View$AttachInfo: com.android.internal.view.ScrollCaptureInternal mScrollCaptureInternal> = $r8;

     label2:
        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: com.android.internal.view.ScrollCaptureInternal mScrollCaptureInternal>;

        $r7 = virtualinvoke $r6.<com.android.internal.view.ScrollCaptureInternal: android.view.ScrollCaptureCallback requestCallback(android.view.View,android.graphics.Rect,android.graphics.Point)>(r0, r1, r2);

        return $r7;
    }

    public android.graphics.Bitmap createSnapshot(android.view.ViewDebug$CanvasProvider, boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12, i13, i14, i15, i16, i17;
        android.view.View$AttachInfo r1;
        android.graphics.Canvas r2, r9, r10;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, f8;
        android.view.ViewOverlay $r3, $r4, $r5;
        android.view.ViewGroup $r6;
        java.lang.Throwable $r7;
        android.view.ViewDebug$CanvasProvider r8;
        android.graphics.Bitmap r11;

        r0 := @this: android.view.View;

        r8 := @parameter0: android.view.ViewDebug$CanvasProvider;

        z0 := @parameter1: boolean;

        i9 = r0.<android.view.View: int mRight>;

        i0 = r0.<android.view.View: int mLeft>;

        i10 = r0.<android.view.View: int mBottom>;

        i11 = r0.<android.view.View: int mTop>;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label01;

        f8 = r1.<android.view.View$AttachInfo: float mApplicationScale>;

        goto label02;

     label01:
        f8 = 1.0F;

     label02:
        $i1 = i9 - i0;

        $f0 = (float) $i1;

        $f1 = $f0 * f8;

        $f2 = $f1 + 0.5F;

        i12 = (int) $f2;

        $i2 = i10 - i11;

        $f3 = (float) $i2;

        $f4 = $f3 * f8;

        $f5 = $f4 + 0.5F;

        i13 = (int) $f5;

        r9 = null;

        i14 = 1;

        if i12 <= 0 goto label03;

        goto label04;

     label03:
        i12 = 1;

     label04:
        if i13 <= 0 goto label05;

        i14 = i13;

     label05:
        r10 = null;

     label06:
        r2 = interfaceinvoke r8.<android.view.ViewDebug$CanvasProvider: android.graphics.Canvas getCanvas(android.view.View,int,int)>(r0, i12, i14);

     label07:
        if r1 == null goto label11;

        r10 = null;

     label08:
        r9 = r1.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas>;

     label09:
        r10 = r9;

     label10:
        r1.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = null;

     label11:
        r10 = r9;

     label12:
        virtualinvoke r0.<android.view.View: void computeScroll()>();

     label13:
        r10 = r9;

     label14:
        i15 = virtualinvoke r2.<android.graphics.Canvas: int save()>();

     label15:
        r10 = r9;

     label16:
        virtualinvoke r2.<android.graphics.Canvas: void scale(float,float)>(f8, f8);

     label17:
        r10 = r9;

     label18:
        $i3 = r0.<android.view.View: int mScrollX>;

        $i4 = neg $i3;

        $f7 = (float) $i4;

        $i5 = r0.<android.view.View: int mScrollY>;

        $i6 = neg $i5;

        $f6 = (float) $i6;

        virtualinvoke r2.<android.graphics.Canvas: void translate(float,float)>($f7, $f6);

     label19:
        r10 = r9;

     label20:
        i16 = r0.<android.view.View: int mPrivateFlags>;

     label21:
        r10 = r9;

     label22:
        $i7 = r0.<android.view.View: int mPrivateFlags>;

        i17 = $i7 & -2097153;

     label23:
        r10 = r9;

     label24:
        r0.<android.view.View: int mPrivateFlags> = i17;

     label25:
        $i8 = i17 & 128;

        if $i8 != 128 goto label36;

        r10 = r9;

     label26:
        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r2);

     label27:
        r10 = r9;

     label28:
        specialinvoke r0.<android.view.View: void drawAutofilledHighlight(android.graphics.Canvas)>(r2);

     label29:
        r10 = r9;

     label30:
        $r3 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r3 == null goto label38;

     label31:
        r10 = r9;

     label32:
        $r4 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $z1 = virtualinvoke $r4.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z1 != 0 goto label38;

     label33:
        r10 = r9;

     label34:
        $r5 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r6 = virtualinvoke $r5.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r6.<android.view.ViewGroup: void draw(android.graphics.Canvas)>(r2);

     label35:
        goto label38;

     label36:
        r10 = r9;

     label37:
        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r2);

     label38:
        r10 = r9;

     label39:
        r0.<android.view.View: int mPrivateFlags> = i16;

     label40:
        r10 = r9;

     label41:
        virtualinvoke r2.<android.graphics.Canvas: void restoreToCount(int)>(i15);

     label42:
        r10 = r9;

     label43:
        r11 = interfaceinvoke r8.<android.view.ViewDebug$CanvasProvider: android.graphics.Bitmap createBitmap()>();

     label44:
        if r9 == null goto label45;

        r1.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = r9;

     label45:
        return r11;

     label46:
        $r7 := @caughtexception;

        if r10 == null goto label47;

        r1.<android.view.View$AttachInfo: android.graphics.Canvas mCanvas> = r10;

     label47:
        throw $r7;

        catch java.lang.Throwable from label06 to label07 with label46;
        catch java.lang.Throwable from label08 to label09 with label46;
        catch java.lang.Throwable from label10 to label11 with label46;
        catch java.lang.Throwable from label12 to label13 with label46;
        catch java.lang.Throwable from label14 to label15 with label46;
        catch java.lang.Throwable from label16 to label17 with label46;
        catch java.lang.Throwable from label18 to label19 with label46;
        catch java.lang.Throwable from label20 to label21 with label46;
        catch java.lang.Throwable from label22 to label23 with label46;
        catch java.lang.Throwable from label24 to label25 with label46;
        catch java.lang.Throwable from label26 to label27 with label46;
        catch java.lang.Throwable from label28 to label29 with label46;
        catch java.lang.Throwable from label30 to label31 with label46;
        catch java.lang.Throwable from label32 to label33 with label46;
        catch java.lang.Throwable from label34 to label35 with label46;
        catch java.lang.Throwable from label37 to label38 with label46;
        catch java.lang.Throwable from label39 to label40 with label46;
        catch java.lang.Throwable from label41 to label42 with label46;
        catch java.lang.Throwable from label43 to label44 with label46;
    }

    protected void damageInParent()
    {
        android.view.View r0;
        android.view.ViewParent r1;
        android.view.View$AttachInfo $r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        interfaceinvoke r1.<android.view.ViewParent: void onDescendantInvalidated(android.view.View,android.view.View)>(r0, r0);

     label1:
        return;
    }

    public void debug()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void debug(int)>(0);

        return;
    }

    protected void debug(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i17, $i19, $i21, $i22, $i23, $i25, $i26, $i27, $i28, $i29, $i30;
        java.lang.Object r1;
        java.lang.StringBuilder $r2, $r6, $r37, $r40, $r44, $r48, $r51, $r55, $r59, $r62, $r67, $r72, $r88, $r92;
        java.lang.String $r21, $r42, $r47, $r53, $r58, $r63, $r66, r77, r79, r80, r82, r85, r87, $r90, r91, $r94, r95, r98, r99, r101, r103, r105, r107, r109;
        android.view.ViewGroup$LayoutParams r96;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i2 = i0 - 1;

        r77 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>($i2);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r77);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+ ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        r79 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = virtualinvoke r0.<android.view.View: int getId()>();

        r80 = r79;

        if i1 == -1 goto label1;

        $r72 = new java.lang.StringBuilder;

        specialinvoke $r72.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r79);

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (id=");

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r80 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r1 = virtualinvoke r0.<android.view.View: java.lang.Object getTag()>();

        r82 = r80;

        if r1 == null goto label2;

        $r67 = new java.lang.StringBuilder;

        specialinvoke $r67.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r80);

        virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (tag=");

        virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r82 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r82);

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label3;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" FOCUSED");

        $r66 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r66);

     label3:
        r85 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r85);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("frame={");

        $i6 = r0.<android.view.View: int mLeft>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i7 = r0.<android.view.View: int mTop>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i8 = r0.<android.view.View: int mRight>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i9 = r0.<android.view.View: int mBottom>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} scroll={");

        $i10 = r0.<android.view.View: int mScrollX>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i11 = r0.<android.view.View: int mScrollY>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("} ");

        $r21 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r21);

        $i13 = r0.<android.view.View: int mPaddingLeft>;

        if $i13 != 0 goto label4;

        $i21 = r0.<android.view.View: int mPaddingTop>;

        if $i21 != 0 goto label4;

        $i22 = r0.<android.view.View: int mPaddingRight>;

        if $i22 != 0 goto label4;

        $i23 = r0.<android.view.View: int mPaddingBottom>;

        if $i23 == 0 goto label5;

     label4:
        r87 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r88 = new java.lang.StringBuilder;

        specialinvoke $r88.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r87);

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("padding={");

        $i25 = r0.<android.view.View: int mPaddingLeft>;

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i25);

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i26 = r0.<android.view.View: int mPaddingTop>;

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i26);

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i27 = r0.<android.view.View: int mPaddingRight>;

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i27);

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $i28 = r0.<android.view.View: int mPaddingBottom>;

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i28);

        virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r90 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r90);

     label5:
        r91 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r92 = new java.lang.StringBuilder;

        specialinvoke $r92.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r91);

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mMeasureWidth=");

        $i29 = r0.<android.view.View: int mMeasuredWidth>;

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mMeasureHeight=");

        $i30 = r0.<android.view.View: int mMeasuredHeight>;

        virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        $r94 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r94);

        r95 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        r96 = r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        if r96 != null goto label6;

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r95);

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BAD! no layout params");

        r98 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label7;

     label6:
        r98 = virtualinvoke r96.<android.view.ViewGroup$LayoutParams: java.lang.String debug(java.lang.String)>(r95);

     label7:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", r98);

        r99 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r99);

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("flags={");

        r101 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r101);

        $i17 = r0.<android.view.View: int mViewFlags>;

        $r42 = staticinvoke <android.view.View: java.lang.String printFlags(int)>($i17);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42);

        r103 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r103);

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r47);

        r105 = staticinvoke <android.view.View: java.lang.String debugIndent(int)>(i0);

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105);

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("privateFlags={");

        r107 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r107);

        $i19 = r0.<android.view.View: int mPrivateFlags>;

        $r53 = staticinvoke <android.view.View: java.lang.String printPrivateFlags(int)>($i19);

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        r109 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r109);

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r58);

        return;
    }

    public void destroyDrawingCache()
    {
        android.view.View r0;
        android.graphics.Bitmap r1, r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.graphics.Bitmap mDrawingCache>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.Bitmap: void recycle()>();

        r0.<android.view.View: android.graphics.Bitmap mDrawingCache> = null;

     label1:
        r2 = r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.Bitmap: void recycle()>();

        r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache> = null;

     label2:
        return;
    }

    protected void destroyHardwareResources()
    {
        android.view.View r0;
        android.view.ViewGroup $r1;
        android.view.ViewOverlay r2;
        android.view.GhostView r3;

        r0 := @this: android.view.View;

        r2 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if r2 == null goto label1;

        $r1 = virtualinvoke r2.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r1.<android.view.ViewGroup: void destroyHardwareResources()>();

     label1:
        r3 = r0.<android.view.View: android.view.GhostView mGhostView>;

        if r3 == null goto label2;

        virtualinvoke r3.<android.view.GhostView: void destroyHardwareResources()>();

     label2:
        return;
    }

    final int dipsToPixels(int)
    {
        android.view.View r0;
        int i0, $i1;
        float f0, $f1, $f2, $f3;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        android.util.DisplayMetrics $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        f0 = $r3.<android.util.DisplayMetrics: float density>;

        $f1 = (float) i0;

        $f2 = $f1 * f0;

        $f3 = $f2 + 0.5F;

        $i1 = (int) $f3;

        return $i1;
    }

    public boolean dispatchActivityResult(java.lang.String, int, int, android.content.Intent)
    {
        android.view.View r0;
        java.lang.String r1, r3;
        int i0, i1;
        android.content.Intent r2;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.content.Intent;

        r3 = r0.<android.view.View: java.lang.String mStartActivityRequestWho>;

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void onActivityResult(int,int,android.content.Intent)>(i0, i1, r2);

        r0.<android.view.View: java.lang.String mStartActivityRequestWho> = null;

        return 1;

     label1:
        return 0;
    }

    public android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.View$ListenerInfo $r1, $r2, $r4;
        android.view.View$OnApplyWindowInsetsListener $r3, $r5;
        java.lang.Throwable $r6;
        android.view.WindowInsets r7, r8, r9;

        r0 := @this: android.view.View;

        r7 := @parameter0: android.view.WindowInsets;

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 | 32;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

        $r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if $r1 == null goto label3;

        $r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r3 = $r2.<android.view.View$ListenerInfo: android.view.View$OnApplyWindowInsetsListener mOnApplyWindowInsetsListener>;

        if $r3 == null goto label3;

        $r4 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r5 = $r4.<android.view.View$ListenerInfo: android.view.View$OnApplyWindowInsetsListener mOnApplyWindowInsetsListener>;

        r8 = interfaceinvoke $r5.<android.view.View$OnApplyWindowInsetsListener: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)>(r0, r7);

     label2:
        $i4 = r0.<android.view.View: int mPrivateFlags3>;

        $i5 = $i4 & -33;

        r0.<android.view.View: int mPrivateFlags3> = $i5;

        return r8;

     label3:
        r9 = virtualinvoke r0.<android.view.View: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)>(r7);

     label4:
        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & -33;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        return r9;

     label5:
        $r6 := @caughtexception;

        $i6 = r0.<android.view.View: int mPrivateFlags3>;

        $i7 = $i6 & -33;

        r0.<android.view.View: int mPrivateFlags3> = $i7;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    void dispatchAttachedToWindow(android.view.View$AttachInfo, int)
    {
        android.view.View r0;
        android.view.View$AttachInfo r1, $r2, $r6;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        boolean $z0, $z1, z3;
        java.lang.Object $r3;
        android.view.View$OnAttachStateChangeListener $r4;
        android.os.Handler $r5;
        java.util.ArrayList $r7;
        android.view.ViewTreeObserver $r8, $r9, r12;
        android.view.ViewGroup $r10;
        android.view.ViewOverlay r11;
        java.util.concurrent.CopyOnWriteArrayList r13;
        android.view.HandlerActionQueue r14;
        android.view.View$ListenerInfo r15;
        java.util.Iterator r16;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        r0.<android.view.View: android.view.View$AttachInfo mAttachInfo> = r1;

        r11 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if r11 == null goto label01;

        $r10 = virtualinvoke r11.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r10.<android.view.ViewGroup: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>(r1, i0);

     label01:
        $i2 = r0.<android.view.View: int mWindowAttachCount>;

        $i3 = $i2 + 1;

        r0.<android.view.View: int mWindowAttachCount> = $i3;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 | 1024;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        r12 = r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        r13 = null;

        if r12 == null goto label02;

        $r9 = r1.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        $r8 = r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        virtualinvoke $r9.<android.view.ViewTreeObserver: void merge(android.view.ViewTreeObserver)>($r8);

        r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver> = null;

     label02:
        specialinvoke r0.<android.view.View: void registerPendingFrameMetricsObservers()>();

        $i6 = r0.<android.view.View: int mPrivateFlags>;

        $i7 = $i6 & 524288;

        if $i7 == 0 goto label03;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        $i9 = r0.<android.view.View: int mPrivateFlags>;

        $i10 = $i9 | 1048576;

        r0.<android.view.View: int mPrivateFlags> = $i10;

     label03:
        r14 = r0.<android.view.View: android.view.HandlerActionQueue mRunQueue>;

        if r14 == null goto label04;

        $r5 = r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke r14.<android.view.HandlerActionQueue: void executeActions(android.os.Handler)>($r5);

        r0.<android.view.View: android.view.HandlerActionQueue mRunQueue> = null;

     label04:
        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        virtualinvoke r0.<android.view.View: void performCollectViewAttributes(android.view.View$AttachInfo,int)>($r2, i0);

        virtualinvoke r0.<android.view.View: void onAttachedToWindow()>();

        r15 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r15 == null goto label05;

        r13 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$300(android.view.View$ListenerInfo)>(r15);

     label05:
        if r13 == null goto label07;

        $i8 = virtualinvoke r13.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        if $i8 <= 0 goto label07;

        r16 = virtualinvoke r13.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label06:
        $z1 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label07;

        $r3 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>();

        $r4 = (android.view.View$OnAttachStateChangeListener) $r3;

        interfaceinvoke $r4.<android.view.View$OnAttachStateChangeListener: void onViewAttachedToWindow(android.view.View)>(r0);

        goto label06;

     label07:
        i1 = r1.<android.view.View$AttachInfo: int mWindowVisibility>;

        if i1 == 8 goto label10;

        virtualinvoke r0.<android.view.View: void onWindowVisibilityChanged(int)>(i1);

        $z0 = virtualinvoke r0.<android.view.View: boolean isShown()>();

        if $z0 == 0 goto label10;

        if i1 != 0 goto label08;

        z3 = 1;

        goto label09;

     label08:
        z3 = 0;

     label09:
        virtualinvoke r0.<android.view.View: void onVisibilityAggregated(boolean)>(z3);

     label10:
        virtualinvoke r0.<android.view.View: void onVisibilityChanged(android.view.View,int)>(r0, i0);

        $i11 = r0.<android.view.View: int mPrivateFlags>;

        $i12 = $i11 & 1024;

        if $i12 == 0 goto label11;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

     label11:
        virtualinvoke r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(0);

        virtualinvoke r0.<android.view.View: void notifyEnterOrExitForAutoFillIfNeeded(boolean)>(1);

        specialinvoke r0.<android.view.View: void notifyAppearedOrDisappearedForContentCaptureIfNeeded(boolean)>(1);

        return;
    }

    void dispatchCancelPendingInputEvents()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;
        java.lang.StringBuilder $r2;
        java.lang.Class $r4;
        java.lang.String $r5, $r9;
        android.util.SuperNotCalledException $r8;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & -17;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

        virtualinvoke r0.<android.view.View: void onCancelPendingInputEvents()>();

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" did not call through to super.onCancelPendingInputEvents()");

        $r8 = new android.util.SuperNotCalledException;

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<android.util.SuperNotCalledException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public boolean dispatchCapturedPointerEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.view.View$ListenerInfo r2;
        boolean $z0, $z1, $z2;
        android.view.View$OnCapturedPointerListener $r3, $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r0.<android.view.View: boolean hasPointerCapture()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label2;

        $r3 = r2.<android.view.View$ListenerInfo: android.view.View$OnCapturedPointerListener mOnCapturedPointerListener>;

        if $r3 == null goto label2;

        $r4 = r2.<android.view.View$ListenerInfo: android.view.View$OnCapturedPointerListener mOnCapturedPointerListener>;

        $z1 = interfaceinvoke $r4.<android.view.View$OnCapturedPointerListener: boolean onCapturedPointer(android.view.View,android.view.MotionEvent)>(r0, r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        $z2 = virtualinvoke r0.<android.view.View: boolean onCapturedPointerEvent(android.view.MotionEvent)>(r1);

        return $z2;
    }

    void dispatchCollectViewAttributes(android.view.View$AttachInfo, int)
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.View: void performCollectViewAttributes(android.view.View$AttachInfo,int)>(r1, i0);

        return;
    }

    public void dispatchConfigurationChanged(android.content.res.Configuration)
    {
        android.view.View r0;
        android.content.res.Configuration r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.Configuration;

        virtualinvoke r0.<android.view.View: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        return;
    }

    void dispatchDetachedFromWindow()
    {
        android.view.View r0;
        android.view.ViewGroup $r1;
        android.view.View$AttachInfo $r2, r8;
        java.util.ArrayList $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z1, $z2;
        java.lang.Object $r4;
        android.view.View$OnAttachStateChangeListener $r5;
        android.view.ViewRootImpl $r6;
        android.view.ImeFocusController $r7;
        android.view.View$ListenerInfo r9;
        java.util.concurrent.CopyOnWriteArrayList r10;
        java.util.Iterator r11;
        android.view.ViewOverlay r12;

        r0 := @this: android.view.View;

        r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r8 == null goto label1;

        $i3 = r8.<android.view.View$AttachInfo: int mWindowVisibility>;

        if $i3 == 8 goto label1;

        virtualinvoke r0.<android.view.View: void onWindowVisibilityChanged(int)>(8);

        $z2 = virtualinvoke r0.<android.view.View: boolean isShown()>();

        if $z2 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void onVisibilityAggregated(boolean)>(0);

     label1:
        virtualinvoke r0.<android.view.View: void onDetachedFromWindow()>();

        virtualinvoke r0.<android.view.View: void onDetachedFromWindowInternal()>();

        if r8 == null goto label2;

        $r6 = r8.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r7 = virtualinvoke $r6.<android.view.ViewRootImpl: android.view.ImeFocusController getImeFocusController()>();

        virtualinvoke $r7.<android.view.ImeFocusController: void onViewDetachedFromWindow(android.view.View)>(r0);

     label2:
        r9 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r9 == null goto label3;

        r10 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$300(android.view.View$ListenerInfo)>(r9);

        goto label4;

     label3:
        r10 = null;

     label4:
        if r10 == null goto label6;

        $i2 = virtualinvoke r10.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        if $i2 <= 0 goto label6;

        r11 = virtualinvoke r10.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>();

     label5:
        $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (android.view.View$OnAttachStateChangeListener) $r4;

        interfaceinvoke $r5.<android.view.View$OnAttachStateChangeListener: void onViewDetachedFromWindow(android.view.View)>(r0);

        goto label5;

     label6:
        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 1048576;

        if $i5 == 0 goto label7;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -1048577;

        r0.<android.view.View: int mPrivateFlags> = $i1;

     label7:
        r0.<android.view.View: android.view.View$AttachInfo mAttachInfo> = null;

        r12 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if r12 == null goto label8;

        $r1 = virtualinvoke r12.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r1.<android.view.ViewGroup: void dispatchDetachedFromWindow()>();

     label8:
        virtualinvoke r0.<android.view.View: void notifyEnterOrExitForAutoFillIfNeeded(boolean)>(0);

        specialinvoke r0.<android.view.View: void notifyAppearedOrDisappearedForContentCaptureIfNeeded(boolean)>(0);

        return;
    }

    public void dispatchDisplayHint(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void onDisplayHint(int)>(i0);

        return;
    }

    boolean dispatchDragEnterExitInPreN(android.view.DragEvent)
    {
        android.view.View r0;
        android.view.DragEvent r1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.DragEvent;

        $z0 = virtualinvoke r0.<android.view.View: boolean callDragEventHandler(android.view.DragEvent)>(r1);

        return $z0;
    }

    public boolean dispatchDragEvent(android.view.DragEvent)
    {
        android.view.View r0;
        android.view.DragEvent r1;
        int $i0, $i1;
        android.view.ViewRootImpl $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.DragEvent;

        r1.<android.view.DragEvent: boolean mEventHandlerWasCalled> = 1;

        $i0 = r1.<android.view.DragEvent: int mAction>;

        if $i0 == 2 goto label1;

        $i1 = r1.<android.view.DragEvent: int mAction>;

        if $i1 != 3 goto label2;

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void setDragFocus(android.view.View,android.view.DragEvent)>(r0, r1);

     label2:
        $z0 = virtualinvoke r0.<android.view.View: boolean callDragEventHandler(android.view.DragEvent)>(r1);

        return $z0;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        return;
    }

    public void dispatchDrawableHotspotChanged(float, float)
    {
        android.view.View r0;
        float f0, f1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        return;
    }

    public void dispatchFinishTemporaryDetach()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & -33554433;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

        virtualinvoke r0.<android.view.View: void onFinishTemporaryDetach()>();

        $z0 = virtualinvoke r0.<android.view.View: boolean hasWindowFocus()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<android.view.View: void notifyFocusChangeToImeFocusController(boolean)>(1);

     label1:
        virtualinvoke r0.<android.view.View: void notifyEnterOrExitForAutoFillIfNeeded(boolean)>(1);

        specialinvoke r0.<android.view.View: void notifyAppearedOrDisappearedForContentCaptureIfNeeded(boolean)>(1);

        return;
    }

    protected boolean dispatchGenericFocusedEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    public boolean dispatchGenericMotionEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3;
        android.view.InputEventConsistencyVerifier r2, r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        r2 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.InputEventConsistencyVerifier: void onGenericMotionEvent(android.view.MotionEvent,int)>(r1, 0);

     label1:
        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getSource()>();

        $i2 = $i1 & 2;

        if $i2 == 0 goto label4;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if i0 == 9 goto label3;

        if i0 == 7 goto label3;

        if i0 != 10 goto label2;

        goto label3;

     label2:
        $z1 = virtualinvoke r0.<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label5;

        return 1;

     label3:
        $z2 = virtualinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        if $z2 == 0 goto label5;

        return 1;

     label4:
        $z0 = virtualinvoke r0.<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>(r1);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        $z3 = specialinvoke r0.<android.view.View: boolean dispatchGenericMotionEventInternal(android.view.MotionEvent)>(r1);

        if $z3 == 0 goto label6;

        return 1;

     label6:
        r3 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if r3 == null goto label7;

        virtualinvoke r3.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 0);

     label7:
        return 0;
    }

    protected boolean dispatchGenericPointerEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    protected void dispatchGetDisplayList()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return;
    }

    protected boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.view.View$ListenerInfo r2;
        android.view.View$OnHoverListener $r3, $r4;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnHoverListener access$700(android.view.View$ListenerInfo)>(r2);

        if $r3 == null goto label1;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label1;

        $r4 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnHoverListener access$700(android.view.View$ListenerInfo)>(r2);

        $z0 = interfaceinvoke $r4.<android.view.View$OnHoverListener: boolean onHover(android.view.View,android.view.MotionEvent)>(r0, r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>(r1);

        return $z1;
    }

    public void dispatchInitialProvideContentCaptureStructure()
    {
        android.view.View r0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r1, $r5, $r9;
        java.lang.String $r4, $r8, $r12;
        java.lang.Throwable $r13;
        android.view.View$AttachInfo r14;
        android.view.contentcapture.ContentCaptureManager r16;
        android.view.contentcapture.ContentCaptureSession r18;

        r0 := @this: android.view.View;

        r14 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r14 != null goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatchProvideContentCaptureStructure(): no AttachInfo for ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View.ContentCapture", $r12);

        return;

     label1:
        r16 = r14.<android.view.View$AttachInfo: android.view.contentcapture.ContentCaptureManager mContentCaptureManager>;

        if r16 != null goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatchProvideContentCaptureStructure(): no ContentCaptureManager for ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View.ContentCapture", $r8);

        return;

     label2:
        r14.<android.view.View$AttachInfo: boolean mReadyForContentCaptureUpdates> = 1;

        $z0 = virtualinvoke r0.<android.view.View: boolean isImportantForContentCapture()>();

        if $z0 != 0 goto label4;

        $z2 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("View.ContentCapture", 3);

        if $z2 == 0 goto label3;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View.ContentCapture", "dispatchProvideContentCaptureStructure(): decorView is not important");

     label3:
        return;

     label4:
        r14.<android.view.View$AttachInfo: android.view.contentcapture.ContentCaptureManager mContentCaptureManager> = r16;

        r18 = virtualinvoke r0.<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>();

        if r18 != null goto label6;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("View.ContentCapture", 3);

        if $z1 == 0 goto label5;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatchProvideContentCaptureStructure(): no session for ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View.ContentCapture", $r4);

     label5:
        return;

     label6:
        virtualinvoke r18.<android.view.contentcapture.ContentCaptureSession: void internalNotifyViewTreeEvent(boolean)>(1);

     label7:
        virtualinvoke r0.<android.view.View: void dispatchProvideContentCaptureStructure()>();

     label8:
        virtualinvoke r18.<android.view.contentcapture.ContentCaptureSession: void internalNotifyViewTreeEvent(boolean)>(0);

        return;

     label9:
        $r13 := @caughtexception;

        virtualinvoke r18.<android.view.contentcapture.ContentCaptureSession: void internalNotifyViewTreeEvent(boolean)>(0);

        throw $r13;

        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        boolean $z0, $z1;
        android.view.View$OnKeyListener $r2, $r3;
        int $i0, $i1, $i2;
        android.view.InputEventConsistencyVerifier r4, r8;
        android.view.View$ListenerInfo r5;
        android.view.View$AttachInfo r6;
        android.view.KeyEvent$DispatcherState r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.KeyEvent;

        r4 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if r4 == null goto label1;

        virtualinvoke r4.<android.view.InputEventConsistencyVerifier: void onKeyEvent(android.view.KeyEvent,int)>(r1, 0);

     label1:
        r5 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r5 == null goto label2;

        $r2 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnKeyListener access$400(android.view.View$ListenerInfo)>(r5);

        if $r2 == null goto label2;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label2;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnKeyListener access$400(android.view.View$ListenerInfo)>(r5);

        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z1 = interfaceinvoke $r3.<android.view.View$OnKeyListener: boolean onKey(android.view.View,int,android.view.KeyEvent)>(r0, $i2, r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r6 == null goto label3;

        r7 = r6.<android.view.View$AttachInfo: android.view.KeyEvent$DispatcherState mKeyDispatchState>;

        goto label4;

     label3:
        r7 = null;

     label4:
        $z0 = virtualinvoke r1.<android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)>(r0, r7, r0);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        r8 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if r8 == null goto label6;

        virtualinvoke r8.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 0);

     label6:
        return 0;
    }

    public boolean dispatchKeyEventPreIme(android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = virtualinvoke r0.<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>($i0, r1);

        return $z0;
    }

    public boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        int $i0;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z0 = virtualinvoke r0.<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>($i0, r1);

        return $z0;
    }

    void dispatchMovedToDisplay(android.view.Display, android.content.res.Configuration)
    {
        android.view.View r0;
        android.view.Display r1;
        android.content.res.Configuration r2;
        android.view.View$AttachInfo $r3, $r4;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.Display;

        r2 := @parameter1: android.content.res.Configuration;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: android.view.Display mDisplay> = r1;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i0 = virtualinvoke r1.<android.view.Display: int getState()>();

        $r4.<android.view.View$AttachInfo: int mDisplayState> = $i0;

        $i1 = virtualinvoke r1.<android.view.Display: int getDisplayId()>();

        virtualinvoke r0.<android.view.View: void onMovedToDisplay(int,android.content.res.Configuration)>($i1, r2);

        return;
    }

    public boolean dispatchNestedFling(float, float, boolean)
    {
        android.view.View r0;
        float f0, f1;
        boolean z0, $z1, $z2;
        android.view.ViewParent r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        if $z1 == 0 goto label1;

        r1 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if r1 == null goto label1;

        $z2 = interfaceinvoke r1.<android.view.ViewParent: boolean onNestedFling(android.view.View,float,float,boolean)>(r0, f0, f1, z0);

        return $z2;

     label1:
        return 0;
    }

    public boolean dispatchNestedPreFling(float, float)
    {
        android.view.View r0;
        float f0, f1;
        android.view.ViewParent r1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        if $z0 == 0 goto label1;

        r1 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if r1 == null goto label1;

        $z1 = interfaceinvoke r1.<android.view.ViewParent: boolean onNestedPreFling(android.view.View,float,float)>(r0, f0, f1);

        return $z1;

     label1:
        return 0;
    }

    public boolean dispatchNestedPrePerformAccessibilityAction(int, android.os.Bundle)
    {
        android.view.View r0;
        int i0;
        android.os.Bundle r1;
        boolean $z0;
        android.view.ViewParent r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

     label1:
        if r2 == null goto label3;

        $z0 = interfaceinvoke r2.<android.view.ViewParent: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>(r0, i0, r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        r2 = interfaceinvoke r2.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return 0;
    }

    public boolean dispatchNestedPreScroll(int, int, int[], int[])
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        int[] r1, r2, $r4, $r5, r6;
        boolean z0, z1;
        android.view.ViewParent $r3, $r7;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        r2 := @parameter3: int[];

        z0 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        z1 = 0;

        if z0 == 0 goto label9;

        $r3 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if $r3 == null goto label9;

        if i0 != 0 goto label2;

        if i1 == 0 goto label1;

        goto label2;

     label1:
        if r2 == null goto label9;

        r2[0] = 0;

        r2[1] = 0;

        goto label9;

     label2:
        i8 = 0;

        i9 = 0;

        if r2 == null goto label3;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r2);

        i8 = r2[0];

        i9 = r2[1];

     label3:
        r6 = r1;

        if r1 != null goto label5;

        $r4 = r0.<android.view.View: int[] mTempNestedScrollConsumed>;

        if $r4 != null goto label4;

        $r5 = newarray (int)[2];

        r0.<android.view.View: int[] mTempNestedScrollConsumed> = $r5;

     label4:
        r6 = r0.<android.view.View: int[] mTempNestedScrollConsumed>;

     label5:
        r6[0] = 0;

        r6[1] = 0;

        $r7 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        interfaceinvoke $r7.<android.view.ViewParent: void onNestedPreScroll(android.view.View,int,int,int[])>(r0, i0, i1, r6);

        if r2 == null goto label6;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r2);

        $i4 = r2[0];

        $i5 = $i4 - i8;

        r2[0] = $i5;

        $i6 = r2[1];

        $i7 = $i6 - i9;

        r2[1] = $i7;

     label6:
        $i2 = r6[0];

        if $i2 != 0 goto label7;

        $i3 = r6[1];

        if $i3 == 0 goto label8;

     label7:
        z1 = 1;

     label8:
        return z1;

     label9:
        return 0;
    }

    public boolean dispatchNestedScroll(int, int, int, int, int[])
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, i8, i9;
        int[] r1;
        boolean $z0;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 := @parameter4: int[];

        $z0 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        if $z0 == 0 goto label5;

        $r2 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if $r2 == null goto label5;

        if i0 != 0 goto label2;

        if i1 != 0 goto label2;

        if i2 != 0 goto label2;

        if i3 == 0 goto label1;

        goto label2;

     label1:
        if r1 == null goto label5;

        r1[0] = 0;

        r1[1] = 0;

        goto label5;

     label2:
        i8 = 0;

        i9 = 0;

        if r1 == null goto label3;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r1);

        i8 = r1[0];

        i9 = r1[1];

     label3:
        $r3 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void onNestedScroll(android.view.View,int,int,int,int)>(r0, i0, i1, i2, i3);

        if r1 == null goto label4;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r1);

        $i4 = r1[0];

        $i5 = $i4 - i8;

        r1[0] = $i5;

        $i6 = r1[1];

        $i7 = $i6 - i9;

        r1[1] = $i7;

     label4:
        return 1;

     label5:
        return 0;
    }

    public void dispatchPointerCaptureChanged(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.view.View: void onPointerCaptureChange(boolean)>(z0);

        return;
    }

    public final boolean dispatchPointerEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isTouchEvent()>();

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r0.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r1);

        return $z2;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        return $z1;
    }

    public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View$AccessibilityDelegate r2;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        return $z1;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r1);

        return $z0;
    }

    public boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        virtualinvoke r0.<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        return 0;
    }

    public void dispatchProvideAutofillStructure(android.view.ViewStructure, int)
    {
        android.view.View r0;
        android.view.ViewStructure r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.View: void dispatchProvideStructure(android.view.ViewStructure,int,int)>(r1, 1, i0);

        return;
    }

    void dispatchProvideContentCaptureStructure()
    {
        android.view.View r0;
        android.view.contentcapture.ContentCaptureSession r1;
        android.view.ViewStructure r2;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>();

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newViewStructure(android.view.View)>(r0);

        virtualinvoke r0.<android.view.View: void onProvideContentCaptureStructure(android.view.ViewStructure,int)>(r2, 0);

        specialinvoke r0.<android.view.View: void setNotifiedContentCaptureAppeared()>();

        virtualinvoke r1.<android.view.contentcapture.ContentCaptureSession: void notifyViewAppeared(android.view.ViewStructure)>(r2);

     label1:
        return;
    }

    public void dispatchProvideStructure(android.view.ViewStructure)
    {
        android.view.View r0;
        android.view.ViewStructure r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        specialinvoke r0.<android.view.View: void dispatchProvideStructure(android.view.ViewStructure,int,int)>(r1, 0, 0);

        return;
    }

    protected void dispatchRestoreInstanceState(android.util.SparseArray)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object $r1;
        java.lang.IllegalStateException $r2;
        android.util.SparseArray r3;
        android.os.Parcelable r4;

        r0 := @this: android.view.View;

        r3 := @parameter0: android.util.SparseArray;

        i0 = r0.<android.view.View: int mID>;

        if i0 == -1 goto label2;

        $r1 = virtualinvoke r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (android.os.Parcelable) $r1;

        if r4 == null goto label2;

        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & -131073;

        r0.<android.view.View: int mPrivateFlags> = $i2;

        virtualinvoke r0.<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>(r4);

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 & 131072;

        if $i4 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Derived class did not call super.onRestoreInstanceState()");

        throw $r2;

     label2:
        return;
    }

    protected void dispatchSaveInstanceState(android.util.SparseArray)
    {
        android.view.View r0;
        android.util.SparseArray r1;
        android.os.Parcelable r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.util.SparseArray;

        $i0 = r0.<android.view.View: int mID>;

        if $i0 == -1 goto label2;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 65536;

        if $i2 != 0 goto label2;

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 & -131073;

        r0.<android.view.View: int mPrivateFlags> = $i4;

        r2 = virtualinvoke r0.<android.view.View: android.os.Parcelable onSaveInstanceState()>();

        $i5 = r0.<android.view.View: int mPrivateFlags>;

        $i6 = $i5 & 131072;

        if $i6 == 0 goto label1;

        if r2 == null goto label2;

        $i7 = r0.<android.view.View: int mID>;

        virtualinvoke r1.<android.util.SparseArray: void put(int,java.lang.Object)>($i7, r2);

        goto label2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Derived class did not call super.onSaveInstanceState()");

        throw $r3;

     label2:
        return;
    }

    void dispatchScreenStateChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void onScreenStateChanged(int)>(i0);

        return;
    }

    public void dispatchScrollCaptureSearch(android.graphics.Rect, android.graphics.Point, java.util.Queue)
    {
        android.view.View r0;
        android.graphics.Rect r1, $r5;
        java.util.Queue r2;
        int $i0, $i1, $i2, $i3;
        android.graphics.Point $r3, r6;
        android.view.ScrollCaptureTarget $r4;
        android.view.View$ListenerInfo r7;
        android.view.ScrollCaptureCallback r8, r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r6 := @parameter1: android.graphics.Point;

        r2 := @parameter2: java.util.Queue;

        $i0 = virtualinvoke r0.<android.view.View: int getScrollCaptureHint()>();

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        return;

     label1:
        r7 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r7 != null goto label2;

        r8 = null;

        goto label3;

     label2:
        r8 = r7.<android.view.View$ListenerInfo: android.view.ScrollCaptureCallback mScrollCaptureCallback>;

     label3:
        r9 = r8;

        if r8 != null goto label4;

        r9 = virtualinvoke r0.<android.view.View: android.view.ScrollCaptureCallback createScrollCaptureCallbackInternal(android.graphics.Rect,android.graphics.Point)>(r1, r6);

     label4:
        if r9 == null goto label5;

        $r3 = new android.graphics.Point;

        $i3 = r6.<android.graphics.Point: int x>;

        $i2 = r6.<android.graphics.Point: int y>;

        specialinvoke $r3.<android.graphics.Point: void <init>(int,int)>($i3, $i2);

        $r4 = new android.view.ScrollCaptureTarget;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r1);

        specialinvoke $r4.<android.view.ScrollCaptureTarget: void <init>(android.view.View,android.graphics.Rect,android.graphics.Point,android.view.ScrollCaptureCallback)>(r0, $r5, $r3, r9);

        interfaceinvoke r2.<java.util.Queue: boolean add(java.lang.Object)>($r4);

     label5:
        return;
    }

    protected void dispatchSetActivated(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        return;
    }

    protected void dispatchSetPressed(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        return;
    }

    protected void dispatchSetSelected(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        return;
    }

    public void dispatchStartTemporaryDetach()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 | 33554432;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

        virtualinvoke r0.<android.view.View: void notifyEnterOrExitForAutoFillIfNeeded(boolean)>(0);

        specialinvoke r0.<android.view.View: void notifyAppearedOrDisappearedForContentCaptureIfNeeded(boolean)>(0);

        virtualinvoke r0.<android.view.View: void onStartTemporaryDetach()>();

        return;
    }

    public void dispatchSystemUiVisibilityChanged(int)
    {
        android.view.View r0;
        int i0, $i1;
        android.view.View$ListenerInfo r1;
        android.view.View$OnSystemUiVisibilityChangeListener $r2, $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnSystemUiVisibilityChangeListener access$1800(android.view.View$ListenerInfo)>(r1);

        if $r2 == null goto label1;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnSystemUiVisibilityChangeListener access$1800(android.view.View$ListenerInfo)>(r1);

        $i1 = i0 & 16375;

        interfaceinvoke $r3.<android.view.View$OnSystemUiVisibilityChangeListener: void onSystemUiVisibilityChange(int)>($i1);

     label1:
        return;
    }

    boolean dispatchTooltipHoverEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.view.View$TooltipInfo $r2, $r3, $r4, $r5, $r7, $r9, $r11, $r13, $r15, $r16;
        int $i0, $i1, $i2, $i3, $i5, i7, i8;
        boolean $z0, $z1, $z6;
        com.android.internal.view.TooltipPopup $r6;
        java.lang.Runnable $r8, $r10, $r12, $r14;
        long $l4, $l6;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        if $r2 != null goto label1;

        return 0;

     label1:
        i7 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if i7 == 7 goto label3;

        if i7 == 10 goto label2;

        goto label4;

     label2:
        $r15 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        staticinvoke <android.view.View$TooltipInfo: void access$4000(android.view.View$TooltipInfo)>($r15);

        $r16 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $z6 = $r16.<android.view.View$TooltipInfo: boolean mTooltipFromLongClick>;

        if $z6 != 0 goto label4;

        virtualinvoke r0.<android.view.View: void hideTooltip()>();

        goto label4;

     label3:
        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 1073741824;

        if $i1 == 1073741824 goto label5;

     label4:
        return 0;

     label5:
        $r3 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $z0 = $r3.<android.view.View$TooltipInfo: boolean mTooltipFromLongClick>;

        if $z0 != 0 goto label9;

        $r4 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $z1 = staticinvoke <android.view.View$TooltipInfo: boolean access$4100(android.view.View$TooltipInfo,android.view.MotionEvent)>($r4, r1);

        if $z1 == 0 goto label9;

        $r5 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r6 = $r5.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup>;

        if $r6 != null goto label6;

        $r11 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r12 = $r11.<android.view.View$TooltipInfo: java.lang.Runnable mShowTooltipRunnable>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r12);

        $r13 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r14 = $r13.<android.view.View$TooltipInfo: java.lang.Runnable mShowTooltipRunnable>;

        $i5 = staticinvoke <android.view.ViewConfiguration: int getHoverTooltipShowTimeout()>();

        $l6 = (long) $i5;

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r14, $l6);

     label6:
        $i2 = virtualinvoke r0.<android.view.View: int getWindowSystemUiVisibility()>();

        $i3 = $i2 & 1;

        if $i3 != 1 goto label7;

        i8 = staticinvoke <android.view.ViewConfiguration: int getHoverTooltipHideShortTimeout()>();

        goto label8;

     label7:
        i8 = staticinvoke <android.view.ViewConfiguration: int getHoverTooltipHideTimeout()>();

     label8:
        $r7 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r8 = $r7.<android.view.View$TooltipInfo: java.lang.Runnable mHideTooltipRunnable>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r8);

        $r9 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r10 = $r9.<android.view.View$TooltipInfo: java.lang.Runnable mHideTooltipRunnable>;

        $l4 = (long) i8;

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r10, $l4);

     label9:
        return 1;
    }

    public boolean dispatchTouchEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z8, z9;
        android.view.View$OnTouchListener $r2, $r3;
        android.view.InputEventConsistencyVerifier r4, r6;
        android.view.View$ListenerInfo r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isTargetAccessibilityFocus()>();

        if $z0 == 0 goto label02;

        $z5 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocusedViewOrHost()>();

        if $z5 != 0 goto label01;

        return 0;

     label01:
        virtualinvoke r1.<android.view.MotionEvent: void setTargetAccessibilityFocus(boolean)>(0);

     label02:
        z6 = 0;

        r4 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if r4 == null goto label03;

        virtualinvoke r4.<android.view.InputEventConsistencyVerifier: void onTouchEvent(android.view.MotionEvent,int)>(r1, 0);

     label03:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i0 != 0 goto label04;

        virtualinvoke r0.<android.view.View: void stopNestedScroll()>();

     label04:
        $z1 = virtualinvoke r0.<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label07;

        z8 = 0;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 32;

        if $i2 != 0 goto label05;

        z8 = 0;

        $z4 = virtualinvoke r0.<android.view.View: boolean handleScrollBarDragging(android.view.MotionEvent)>(r1);

        if $z4 == 0 goto label05;

        z8 = 1;

     label05:
        r5 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        z9 = z8;

        if r5 == null goto label06;

        z9 = z8;

        $r2 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnTouchListener access$500(android.view.View$ListenerInfo)>(r5);

        if $r2 == null goto label06;

        z9 = z8;

        $i3 = r0.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 32;

        if $i4 != 0 goto label06;

        z9 = z8;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnTouchListener access$500(android.view.View$ListenerInfo)>(r5);

        $z3 = interfaceinvoke $r3.<android.view.View$OnTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)>(r0, r1);

        if $z3 == 0 goto label06;

        z9 = 1;

     label06:
        z6 = z9;

        if z9 != 0 goto label07;

        z6 = z9;

        $z2 = virtualinvoke r0.<android.view.View: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        if $z2 == 0 goto label07;

        z6 = 1;

     label07:
        if z6 != 0 goto label08;

        r6 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if r6 == null goto label08;

        virtualinvoke r6.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 0);

     label08:
        if i0 == 1 goto label09;

        if i0 == 3 goto label09;

        if i0 != 0 goto label10;

        if z6 != 0 goto label10;

     label09:
        virtualinvoke r0.<android.view.View: void stopNestedScroll()>();

     label10:
        return z6;
    }

    public boolean dispatchTrackballEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.view.InputEventConsistencyVerifier r2;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        r2 = r0.<android.view.View: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.InputEventConsistencyVerifier: void onTrackballEvent(android.view.MotionEvent,int)>(r1, 0);

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    android.view.View dispatchUnhandledKeyEvent(android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.KeyEvent;

        $z0 = virtualinvoke r0.<android.view.View: boolean onUnhandledKeyEvent(android.view.KeyEvent)>(r1);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        return null;
    }

    public boolean dispatchUnhandledMove(android.view.View, int)
    {
        android.view.View r0, r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        return 0;
    }

    boolean dispatchVisibilityAggregated(boolean)
    {
        android.view.View r0;
        boolean z1, z2, z3;
        int i0;

        r0 := @this: android.view.View;

        z1 := @parameter0: boolean;

        i0 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        if i0 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 != 0 goto label3;

        if z1 != 0 goto label4;

     label3:
        virtualinvoke r0.<android.view.View: void onVisibilityAggregated(boolean)>(z1);

     label4:
        if z2 == 0 goto label5;

        if z1 == 0 goto label5;

        z3 = 1;

        goto label6;

     label5:
        z3 = 0;

     label6:
        return z3;
    }

    protected void dispatchVisibilityChanged(android.view.View, int)
    {
        android.view.View r0, r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.View: void onVisibilityChanged(android.view.View,int)>(r1, i0);

        return;
    }

    public void dispatchWindowFocusChanged(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.view.View: void onWindowFocusChanged(boolean)>(z0);

        return;
    }

    public void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)
    {
        android.view.View r0;
        android.view.WindowInsetsAnimation r1;
        android.view.View$ListenerInfo r2, $r4;
        android.view.WindowInsetsAnimation$Callback $r3, $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.WindowInsetsAnimation;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        $r3 = r2.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r5 = $r4.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback>;

        virtualinvoke $r5.<android.view.WindowInsetsAnimation$Callback: void onEnd(android.view.WindowInsetsAnimation)>(r1);

     label1:
        return;
    }

    public void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)
    {
        android.view.View r0;
        android.view.WindowInsetsAnimation r1;
        android.view.View$ListenerInfo r2, $r4;
        android.view.WindowInsetsAnimation$Callback $r3, $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.WindowInsetsAnimation;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        $r3 = r2.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r5 = $r4.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback>;

        virtualinvoke $r5.<android.view.WindowInsetsAnimation$Callback: void onPrepare(android.view.WindowInsetsAnimation)>(r1);

     label1:
        return;
    }

    public android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets, java.util.List)
    {
        android.view.View r0;
        android.view.WindowInsets r1, $r7;
        java.util.List r2;
        android.view.View$ListenerInfo r3, $r5;
        android.view.WindowInsetsAnimation$Callback $r4, $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.WindowInsets;

        r2 := @parameter1: java.util.List;

        r3 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r3 == null goto label1;

        $r4 = r3.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback>;

        if $r4 == null goto label1;

        $r5 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r6 = $r5.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback>;

        $r7 = virtualinvoke $r6.<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)>(r1, r2);

        return $r7;

     label1:
        return r1;
    }

    public android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation, android.view.WindowInsetsAnimation$Bounds)
    {
        android.view.View r0;
        android.view.WindowInsetsAnimation r1;
        android.view.WindowInsetsAnimation$Bounds r2, $r7;
        android.view.View$ListenerInfo r3, $r5;
        android.view.WindowInsetsAnimation$Callback $r4, $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.WindowInsetsAnimation;

        r2 := @parameter1: android.view.WindowInsetsAnimation$Bounds;

        r3 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r3 == null goto label1;

        $r4 = r3.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback>;

        if $r4 == null goto label1;

        $r5 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r6 = $r5.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback>;

        $r7 = virtualinvoke $r6.<android.view.WindowInsetsAnimation$Callback: android.view.WindowInsetsAnimation$Bounds onStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>(r1, r2);

        return $r7;

     label1:
        return r2;
    }

    public void dispatchWindowSystemUiVisiblityChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void onWindowSystemUiVisibilityChanged(int)>(i0);

        return;
    }

    public void dispatchWindowVisibilityChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void onWindowVisibilityChanged(int)>(i0);

        return;
    }

    public void draw(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        boolean z0, $z1, $z9, z10, z11, $z12, z13, z14, z15, z16, z17, z18, z19, z20, $z21;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, i40, i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i53, i54, i55;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, $f35, $f36, $f37, $f38, $f39, $f40, f41, f42, f43, f44;
        android.graphics.Paint r2;
        android.view.ViewOverlay $r3, $r9, r11, r15;
        android.view.ViewGroup $r4, $r10;
        byte $b27, $b28, $b29, $b30;
        android.view.View$ScrollabilityCache r12;
        android.graphics.Matrix r13;
        android.graphics.Shader r14;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = -2097153 & $i4;

        $i6 = $i5 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i6;

        specialinvoke r0.<android.view.View: void drawBackground(android.graphics.Canvas)>(r1);

        i40 = r0.<android.view.View: int mViewFlags>;

        $i7 = i40 & 4096;

        if $i7 == 0 goto label01;

        z10 = 1;

        goto label02;

     label01:
        z10 = 0;

     label02:
        $i8 = i40 & 8192;

        if $i8 == 0 goto label03;

        z11 = 1;

        goto label04;

     label03:
        z11 = 0;

     label04:
        if z11 != 0 goto label07;

        if z10 != 0 goto label07;

        virtualinvoke r0.<android.view.View: void onDraw(android.graphics.Canvas)>(r1);

        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r1);

        specialinvoke r0.<android.view.View: void drawAutofilledHighlight(android.graphics.Canvas)>(r1);

        r11 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if r11 == null goto label05;

        $z9 = virtualinvoke r11.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z9 != 0 goto label05;

        $r9 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r10 = virtualinvoke $r9.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r10.<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>(r1);

     label05:
        virtualinvoke r0.<android.view.View: void onDrawForeground(android.graphics.Canvas)>(r1);

        specialinvoke r0.<android.view.View: void drawDefaultFocusHighlight(android.graphics.Canvas)>(r1);

        $z12 = virtualinvoke r0.<android.view.View: boolean isShowingLayoutBounds()>();

        if $z12 == 0 goto label06;

        specialinvoke r0.<android.view.View: void debugDrawFocus(android.graphics.Canvas)>(r1);

     label06:
        return;

     label07:
        f41 = 0.0F;

        f42 = 0.0F;

        f43 = 0.0F;

        i41 = r0.<android.view.View: int mPaddingLeft>;

        z0 = virtualinvoke r0.<android.view.View: boolean isPaddingOffsetRequired()>();

        if z0 == 0 goto label08;

        $i39 = virtualinvoke r0.<android.view.View: int getLeftPaddingOffset()>();

        i41 = i41 + $i39;

        goto label08;

     label08:
        $i9 = r0.<android.view.View: int mScrollX>;

        i0 = $i9 + i41;

        i42 = r0.<android.view.View: int mRight>;

        z13 = 0;

        $i11 = i42 + i0;

        $i10 = r0.<android.view.View: int mLeft>;

        $i13 = $i11 - $i10;

        $i12 = r0.<android.view.View: int mPaddingRight>;

        $i14 = $i13 - $i12;

        i43 = $i14 - i41;

        $i15 = r0.<android.view.View: int mScrollY>;

        $i16 = virtualinvoke r0.<android.view.View: int getFadeTop(boolean)>(z0);

        i1 = $i15 + $i16;

        $i17 = virtualinvoke r0.<android.view.View: int getFadeHeight(boolean)>(z0);

        i44 = i1 + $i17;

        if z0 == 0 goto label09;

        $i37 = virtualinvoke r0.<android.view.View: int getRightPaddingOffset()>();

        i43 = i43 + $i37;

        $i38 = virtualinvoke r0.<android.view.View: int getBottomPaddingOffset()>();

        i44 = i44 + $i38;

        goto label09;

     label09:
        r12 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        z14 = 0;

        $i18 = r12.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        f0 = (float) $i18;

        z15 = 0;

        i45 = (int) f0;

        if z11 == 0 goto label10;

        i46 = i45;

        $i35 = i1 + i45;

        $i34 = i44 - i45;

        if $i35 <= $i34 goto label11;

        $i36 = i44 - i1;

        i46 = $i36 / 2;

        goto label11;

     label10:
        i46 = i45;

     label11:
        f44 = 0.0F;

        z16 = 0;

        if z10 == 0 goto label12;

        $i32 = i0 + i46;

        $i31 = i43 - i46;

        if $i32 <= $i31 goto label12;

        $i33 = i43 - i0;

        i47 = $i33 / 2;

        goto label13;

     label12:
        i47 = i46;

     label13:
        if z11 == 0 goto label18;

        $f35 = virtualinvoke r0.<android.view.View: float getTopFadingEdgeStrength()>();

        $f36 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f35);

        f44 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f36);

        $f37 = f44 * f0;

        $b29 = $f37 cmpl 1.0F;

        if $b29 <= 0 goto label14;

        z17 = 1;

        goto label15;

     label14:
        z17 = 0;

     label15:
        z13 = z17;

        $f38 = virtualinvoke r0.<android.view.View: float getBottomFadingEdgeStrength()>();

        $f39 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f38);

        f41 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f39);

        $f40 = f41 * f0;

        $b30 = $f40 cmpl 1.0F;

        if $b30 <= 0 goto label16;

        z18 = 1;

        goto label17;

     label16:
        z18 = 0;

     label17:
        z14 = z18;

        goto label18;

     label18:
        if z10 == 0 goto label23;

        $f29 = virtualinvoke r0.<android.view.View: float getLeftFadingEdgeStrength()>();

        $f30 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f29);

        f42 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f30);

        $f31 = f42 * f0;

        $b27 = $f31 cmpl 1.0F;

        if $b27 <= 0 goto label19;

        z19 = 1;

        goto label20;

     label19:
        z19 = 0;

     label20:
        $f32 = virtualinvoke r0.<android.view.View: float getRightFadingEdgeStrength()>();

        $f33 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f32);

        f43 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f33);

        $f34 = f43 * f0;

        $b28 = $f34 cmpl 1.0F;

        if $b28 <= 0 goto label21;

        z20 = 1;

        goto label22;

     label21:
        z20 = 0;

     label22:
        z15 = z19;

        z16 = z20;

        goto label23;

     label23:
        i2 = virtualinvoke r1.<android.graphics.Canvas: int getSaveCount()>();

        i48 = -1;

        i49 = -1;

        i50 = -1;

        i3 = virtualinvoke r0.<android.view.View: int getSolidColor()>();

        if i3 != 0 goto label28;

        if z13 == 0 goto label24;

        $i26 = i1 + i47;

        i48 = virtualinvoke r1.<android.graphics.Canvas: int saveUnclippedLayer(int,int,int,int)>(i0, i1, i43, $i26);

        goto label24;

     label24:
        if z14 == 0 goto label25;

        $i25 = i44 - i47;

        i49 = virtualinvoke r1.<android.graphics.Canvas: int saveUnclippedLayer(int,int,int,int)>(i0, $i25, i43, i44);

        goto label25;

     label25:
        if z15 == 0 goto label26;

        $i24 = i0 + i47;

        i50 = virtualinvoke r1.<android.graphics.Canvas: int saveUnclippedLayer(int,int,int,int)>(i0, i1, $i24, i44);

     label26:
        if z16 == 0 goto label27;

        $i23 = i43 - i47;

        i51 = virtualinvoke r1.<android.graphics.Canvas: int saveUnclippedLayer(int,int,int,int)>($i23, i1, i43, i44);

        i53 = i50;

        i54 = i49;

        i55 = i51;

        goto label29;

     label27:
        i53 = i50;

        i54 = i49;

        i55 = -1;

        goto label29;

     label28:
        virtualinvoke r12.<android.view.View$ScrollabilityCache: void setFadeColor(int)>(i3);

        i54 = -1;

        i53 = -1;

        i48 = -1;

        i55 = -1;

     label29:
        virtualinvoke r0.<android.view.View: void onDraw(android.graphics.Canvas)>(r1);

        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r1);

        r2 = r12.<android.view.View$ScrollabilityCache: android.graphics.Paint paint>;

        r13 = r12.<android.view.View$ScrollabilityCache: android.graphics.Matrix matrix>;

        r14 = r12.<android.view.View$ScrollabilityCache: android.graphics.Shader shader>;

        if z16 == 0 goto label31;

        $f22 = f0 * f43;

        virtualinvoke r13.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f22);

        virtualinvoke r13.<android.graphics.Matrix: boolean postRotate(float)>(90.0F);

        $f24 = (float) i43;

        $f23 = (float) i1;

        virtualinvoke r13.<android.graphics.Matrix: boolean postTranslate(float,float)>($f24, $f23);

        virtualinvoke r14.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>(r13);

        virtualinvoke r2.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r14);

        if i3 != 0 goto label30;

        virtualinvoke r1.<android.graphics.Canvas: void restoreUnclippedLayer(int,android.graphics.Paint)>(i55, r2);

        goto label31;

     label30:
        $i22 = i43 - i47;

        $f28 = (float) $i22;

        $f27 = (float) i1;

        $f26 = (float) i43;

        $f25 = (float) i44;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f28, $f27, $f26, $f25, r2);

        goto label31;

     label31:
        if z15 == 0 goto label33;

        $f15 = f0 * f42;

        virtualinvoke r13.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f15);

        virtualinvoke r13.<android.graphics.Matrix: boolean postRotate(float)>(-90.0F);

        $f17 = (float) i0;

        $f16 = (float) i1;

        virtualinvoke r13.<android.graphics.Matrix: boolean postTranslate(float,float)>($f17, $f16);

        virtualinvoke r14.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>(r13);

        virtualinvoke r2.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r14);

        if i3 != 0 goto label32;

        virtualinvoke r1.<android.graphics.Canvas: void restoreUnclippedLayer(int,android.graphics.Paint)>(i53, r2);

        goto label33;

     label32:
        $f21 = (float) i0;

        $f20 = (float) i1;

        $i21 = i0 + i47;

        $f19 = (float) $i21;

        $f18 = (float) i44;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f21, $f20, $f19, $f18, r2);

        goto label33;

     label33:
        if z14 == 0 goto label35;

        $f8 = f0 * f41;

        virtualinvoke r13.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f8);

        virtualinvoke r13.<android.graphics.Matrix: boolean postRotate(float)>(180.0F);

        $f10 = (float) i0;

        $f9 = (float) i44;

        virtualinvoke r13.<android.graphics.Matrix: boolean postTranslate(float,float)>($f10, $f9);

        virtualinvoke r14.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>(r13);

        virtualinvoke r2.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r14);

        if i3 != 0 goto label34;

        virtualinvoke r1.<android.graphics.Canvas: void restoreUnclippedLayer(int,android.graphics.Paint)>(i54, r2);

        goto label35;

     label34:
        $f14 = (float) i0;

        $i20 = i44 - i47;

        $f13 = (float) $i20;

        $f12 = (float) i43;

        $f11 = (float) i44;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f14, $f13, $f12, $f11, r2);

        goto label35;

     label35:
        if z13 == 0 goto label37;

        $f1 = f0 * f44;

        virtualinvoke r13.<android.graphics.Matrix: void setScale(float,float)>(1.0F, $f1);

        $f3 = (float) i0;

        $f2 = (float) i1;

        virtualinvoke r13.<android.graphics.Matrix: boolean postTranslate(float,float)>($f3, $f2);

        virtualinvoke r14.<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>(r13);

        virtualinvoke r2.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>(r14);

        if i3 != 0 goto label36;

        virtualinvoke r1.<android.graphics.Canvas: void restoreUnclippedLayer(int,android.graphics.Paint)>(i48, r2);

        goto label37;

     label36:
        $f7 = (float) i0;

        $f6 = (float) i1;

        $f5 = (float) i43;

        $i19 = i1 + i47;

        $f4 = (float) $i19;

        virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f7, $f6, $f5, $f4, r2);

     label37:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i2);

        specialinvoke r0.<android.view.View: void drawAutofilledHighlight(android.graphics.Canvas)>(r1);

        r15 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if r15 == null goto label38;

        $z1 = virtualinvoke r15.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z1 != 0 goto label38;

        $r3 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r4 = virtualinvoke $r3.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r4.<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>(r1);

     label38:
        virtualinvoke r0.<android.view.View: void onDrawForeground(android.graphics.Canvas)>(r1);

        specialinvoke r0.<android.view.View: void drawDefaultFocusHighlight(android.graphics.Canvas)>(r1);

        $z21 = virtualinvoke r0.<android.view.View: boolean isShowingLayoutBounds()>();

        if $z21 == 0 goto label39;

        specialinvoke r0.<android.view.View: void debugDrawFocus(android.graphics.Canvas)>(r1);

     label39:
        return;
    }

    boolean draw(android.graphics.Canvas, android.view.ViewGroup, long)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.view.ViewGroup r2;
        long l0;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12, z13, z14, z15, z16, $z17, z18, z19, z20, z21;
        int i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i42, $i43, $i44, $i45, $i46, $i47, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, i83, i84, $i85, $i86, $i87, $i88, i89, i90, i91, i92, i93, i94, i95, i96, i98, i99, i100;
        android.view.animation.Animation r3;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, f32, f33, f34;
        byte $b3, $b13, $b14, $b41, $b48, $b97;
        android.graphics.Paint $r4, $r5, $r6, $r7, r22, r23, r24;
        android.graphics.RecordingCanvas $r8;
        android.graphics.Matrix $r9, $r10, $r11;
        android.view.View$AttachInfo $r12, r15, r16;
        android.graphics.RenderNode $r13, r20;
        android.view.animation.Transformation $r14, r17, r18;
        android.graphics.Bitmap r19;
        android.graphics.Rect r21;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.view.ViewGroup;

        l0 := @parameter2: long;

        z0 = virtualinvoke r1.<android.graphics.Canvas: boolean isHardwareAccelerated()>();

        r15 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r15 == null goto label01;

        $z11 = r15.<android.view.View$AttachInfo: boolean mHardwareAccelerated>;

        if $z11 == 0 goto label01;

        if z0 == 0 goto label01;

        z12 = 1;

        goto label02;

     label01:
        z12 = 0;

     label02:
        z1 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        i1 = r2.<android.view.ViewGroup: int mGroupFlags>;

        $i82 = i1 & 256;

        if $i82 == 0 goto label03;

        $r14 = virtualinvoke r2.<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>();

        virtualinvoke $r14.<android.view.animation.Transformation: void clear()>();

        $i80 = r2.<android.view.ViewGroup: int mGroupFlags>;

        $i81 = $i80 & -257;

        r2.<android.view.ViewGroup: int mGroupFlags> = $i81;

     label03:
        r16 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r16 == null goto label04;

        $z10 = r16.<android.view.View$AttachInfo: boolean mScalingRequired>;

        if $z10 == 0 goto label04;

        z13 = 1;

        goto label05;

     label04:
        z13 = 0;

     label05:
        r3 = virtualinvoke r0.<android.view.View: android.view.animation.Animation getAnimation()>();

        if r3 == null goto label07;

        z14 = specialinvoke r0.<android.view.View: boolean applyLegacyAnimation(android.view.ViewGroup,long,android.view.animation.Animation,boolean)>(r2, l0, r3, z13);

        z15 = virtualinvoke r3.<android.view.animation.Animation: boolean willChangeTransformationMatrix()>();

        if z15 == 0 goto label06;

        $i78 = r0.<android.view.View: int mPrivateFlags3>;

        $i79 = $i78 | 1;

        r0.<android.view.View: int mPrivateFlags3> = $i79;

     label06:
        r17 = virtualinvoke r2.<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>();

        goto label12;

     label07:
        i83 = r0.<android.view.View: int mPrivateFlags3>;

        $i2 = i83 & 1;

        if $i2 == 0 goto label08;

        $r13 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r13.<android.graphics.RenderNode: boolean setAnimationMatrix(android.graphics.Matrix)>(null);

        $i76 = r0.<android.view.View: int mPrivateFlags3>;

        $i77 = $i76 & -2;

        r0.<android.view.View: int mPrivateFlags3> = $i77;

     label08:
        z14 = 0;

        r17 = null;

        z15 = 0;

        if z12 != 0 goto label12;

        z14 = 0;

        r17 = null;

        z15 = 0;

        $i74 = i1 & 2048;

        if $i74 == 0 goto label12;

        r18 = virtualinvoke r2.<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>();

        z14 = 0;

        r17 = null;

        z15 = 0;

        $z9 = virtualinvoke r2.<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>(r0, r18);

        if $z9 == 0 goto label12;

        i84 = virtualinvoke r18.<android.view.animation.Transformation: int getTransformationType()>();

        r17 = null;

        if i84 == 0 goto label09;

        r17 = r18;

     label09:
        $i75 = i84 & 2;

        if $i75 == 0 goto label10;

        z16 = 1;

        goto label11;

     label10:
        z16 = 0;

     label11:
        z15 = z16;

        z14 = 0;

     label12:
        $z17 = z1 ^ 1;

        z2 = z15 | $z17;

        $i85 = r0.<android.view.View: int mPrivateFlags>;

        $i86 = $i85 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i86;

        if z2 != 0 goto label13;

        $i65 = i1 & 2049;

        if $i65 != 1 goto label13;

        $i66 = r0.<android.view.View: int mLeft>;

        $f31 = (float) $i66;

        $i67 = r0.<android.view.View: int mTop>;

        $f30 = (float) $i67;

        $i68 = r0.<android.view.View: int mRight>;

        $f29 = (float) $i68;

        $i69 = r0.<android.view.View: int mBottom>;

        $f28 = (float) $i69;

        $z8 = virtualinvoke r1.<android.graphics.Canvas: boolean quickReject(float,float,float,float)>($f31, $f30, $f29, $f28);

        if $z8 == 0 goto label13;

        $i70 = r0.<android.view.View: int mPrivateFlags>;

        $i71 = $i70 & 64;

        if $i71 != 0 goto label13;

        $i72 = r0.<android.view.View: int mPrivateFlags2>;

        $i73 = $i72 | 268435456;

        r0.<android.view.View: int mPrivateFlags2> = $i73;

        return z14;

     label13:
        $i87 = r0.<android.view.View: int mPrivateFlags2>;

        $i88 = $i87 & -268435457;

        r0.<android.view.View: int mPrivateFlags2> = $i88;

        if z0 == 0 goto label16;

        $i61 = r0.<android.view.View: int mPrivateFlags>;

        $i62 = $i61 & -2147483648;

        if $i62 == 0 goto label14;

        z18 = 1;

        goto label15;

     label14:
        z18 = 0;

     label15:
        r0.<android.view.View: boolean mRecreateDisplayList> = z18;

        $i63 = r0.<android.view.View: int mPrivateFlags>;

        $i64 = $i63 & 2147483647;

        r0.<android.view.View: int mPrivateFlags> = $i64;

     label16:
        i89 = virtualinvoke r0.<android.view.View: int getLayerType()>();

        if i89 == 1 goto label18;

        if z12 != 0 goto label17;

        goto label18;

     label17:
        r19 = null;

        i90 = i89;

        goto label20;

     label18:
        i91 = i89;

        if i89 == 0 goto label19;

        i91 = 1;

        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(1);

     label19:
        r19 = virtualinvoke r0.<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>(1);

        i90 = i91;

     label20:
        if z12 == 0 goto label22;

        r20 = virtualinvoke r0.<android.view.View: android.graphics.RenderNode updateDisplayListIfDirty()>();

        $z7 = virtualinvoke r20.<android.graphics.RenderNode: boolean hasDisplayList()>();

        if $z7 != 0 goto label21;

        z19 = 0;

        r20 = null;

        goto label23;

     label21:
        z19 = z12;

        goto label23;

     label22:
        r20 = null;

        z19 = z12;

     label23:
        if z19 != 0 goto label24;

        virtualinvoke r0.<android.view.View: void computeScroll()>();

        i92 = r0.<android.view.View: int mScrollX>;

        i93 = r0.<android.view.View: int mScrollY>;

        goto label25;

     label24:
        i92 = 0;

        i93 = 0;

     label25:
        if r19 == null goto label26;

        if z19 != 0 goto label26;

        z20 = 1;

        goto label27;

     label26:
        z20 = 0;

     label27:
        if r19 != null goto label28;

        if z19 != 0 goto label28;

        z21 = 1;

        goto label29;

     label28:
        z21 = 0;

     label29:
        i94 = -1;

        if z19 == 0 goto label30;

        if r17 == null goto label31;

     label30:
        i94 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

     label31:
        if z21 == 0 goto label32;

        $i57 = r0.<android.view.View: int mLeft>;

        $i58 = $i57 - i92;

        $f27 = (float) $i58;

        $i59 = r0.<android.view.View: int mTop>;

        $i60 = $i59 - i93;

        $f26 = (float) $i60;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f27, $f26);

        goto label35;

     label32:
        if z19 != 0 goto label33;

        $i55 = r0.<android.view.View: int mLeft>;

        $f25 = (float) $i55;

        $i56 = r0.<android.view.View: int mTop>;

        $f24 = (float) $i56;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f25, $f24);

     label33:
        if z13 == 0 goto label35;

        if z19 == 0 goto label34;

        i94 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

     label34:
        $r12 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $f23 = $r12.<android.view.View$AttachInfo: float mApplicationScale>;

        f32 = 1.0F / $f23;

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float)>(f32, f32);

        goto label35;

     label35:
        if z19 == 0 goto label36;

        f33 = 1.0F;

        goto label37;

     label36:
        $f1 = virtualinvoke r0.<android.view.View: float getAlpha()>();

        $f2 = virtualinvoke r0.<android.view.View: float getTransitionAlpha()>();

        f33 = $f1 * $f2;

     label37:
        if r17 != null goto label40;

        $b48 = f33 cmpg 1.0F;

        if $b48 < 0 goto label40;

        $z6 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z6 == 0 goto label40;

        $i49 = r0.<android.view.View: int mPrivateFlags3>;

        $i50 = $i49 & 2;

        if $i50 == 0 goto label38;

        goto label40;

     label38:
        $i51 = r0.<android.view.View: int mPrivateFlags>;

        $i52 = $i51 & 262144;

        if $i52 != 262144 goto label39;

        virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>(255);

        $i53 = r0.<android.view.View: int mPrivateFlags>;

        $i54 = $i53 & -262145;

        r0.<android.view.View: int mPrivateFlags> = $i54;

     label39:
        goto label60;

     label40:
        if r17 != null goto label42;

        if z1 != 0 goto label41;

        goto label42;

     label41:
        goto label51;

     label42:
        i95 = 0;

        if z21 == 0 goto label43;

        i95 = neg i92;

        i96 = neg i93;

        goto label44;

     label43:
        i96 = 0;

     label44:
        if r17 == null goto label48;

        if z2 == 0 goto label47;

        if z19 == 0 goto label45;

        $r11 = virtualinvoke r17.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke r20.<android.graphics.RenderNode: boolean setAnimationMatrix(android.graphics.Matrix)>($r11);

        goto label46;

     label45:
        $i44 = neg i95;

        $f20 = (float) $i44;

        $i45 = neg i96;

        $f19 = (float) $i45;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f20, $f19);

        $r10 = virtualinvoke r17.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke r1.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r10);

        $f22 = (float) i95;

        $f21 = (float) i96;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f22, $f21);

     label46:
        $i46 = r2.<android.view.ViewGroup: int mGroupFlags>;

        $i47 = $i46 | 256;

        r2.<android.view.ViewGroup: int mGroupFlags> = $i47;

        goto label47;

     label47:
        f0 = virtualinvoke r17.<android.view.animation.Transformation: float getAlpha()>();

        f34 = f33;

        $b41 = f0 cmpg 1.0F;

        if $b41 >= 0 goto label49;

        f34 = f33 * f0;

        $i42 = r2.<android.view.ViewGroup: int mGroupFlags>;

        $i43 = $i42 | 256;

        r2.<android.view.ViewGroup: int mGroupFlags> = $i43;

        goto label49;

     label48:
        f34 = f33;

     label49:
        if z1 != 0 goto label50;

        if z19 != 0 goto label50;

        $i39 = neg i95;

        $f16 = (float) $i39;

        $i40 = neg i96;

        $f15 = (float) $i40;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f16, $f15);

        $r9 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke r1.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r9);

        $f18 = (float) i95;

        $f17 = (float) i96;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f18, $f17);

     label50:
        f33 = f34;

     label51:
        $b97 = f33 cmpg 1.0F;

        if $b97 < 0 goto label53;

        $i37 = r0.<android.view.View: int mPrivateFlags3>;

        $i38 = $i37 & 2;

        if $i38 == 0 goto label52;

        goto label53;

     label52:
        goto label60;

     label53:
        $b3 = f33 cmpg 1.0F;

        if $b3 >= 0 goto label54;

        $i35 = r0.<android.view.View: int mPrivateFlags3>;

        $i36 = $i35 | 2;

        r0.<android.view.View: int mPrivateFlags3> = $i36;

        goto label55;

     label54:
        $i4 = r0.<android.view.View: int mPrivateFlags3>;

        $i5 = $i4 & -3;

        r0.<android.view.View: int mPrivateFlags3> = $i5;

     label55:
        $i6 = r2.<android.view.ViewGroup: int mGroupFlags>;

        $i7 = $i6 | 256;

        r2.<android.view.ViewGroup: int mGroupFlags> = $i7;

        if z20 != 0 goto label60;

        $f6 = f33 * 255.0F;

        i98 = (int) $f6;

        $z5 = virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>(i98);

        if $z5 != 0 goto label58;

        if z19 == 0 goto label56;

        $f11 = virtualinvoke r0.<android.view.View: float getAlpha()>();

        $f12 = $f11 * f33;

        $f13 = virtualinvoke r0.<android.view.View: float getTransitionAlpha()>();

        $f14 = $f12 * $f13;

        virtualinvoke r20.<android.graphics.RenderNode: boolean setAlpha(float)>($f14);

        goto label59;

     label56:
        if i90 != 0 goto label57;

        $f7 = (float) i92;

        $f8 = (float) i93;

        $i31 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i32 = $i31 + i92;

        $f9 = (float) $i32;

        $i33 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i34 = i93 + $i33;

        $f10 = (float) $i34;

        virtualinvoke r1.<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int)>($f7, $f8, $f9, $f10, i98);

        goto label59;

     label57:
        goto label59;

     label58:
        $i29 = r0.<android.view.View: int mPrivateFlags>;

        $i30 = $i29 | 262144;

        r0.<android.view.View: int mPrivateFlags> = $i30;

     label59:
        goto label60;

     label60:
        if z19 != 0 goto label65;

        $i20 = i1 & 1;

        if $i20 == 0 goto label64;

        if r19 != null goto label64;

        if z21 == 0 goto label61;

        $i25 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i26 = i92 + $i25;

        $i27 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i28 = i93 + $i27;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(int,int,int,int)>(i92, i93, $i26, $i28);

        goto label64;

     label61:
        if z13 == 0 goto label63;

        if r19 != null goto label62;

        goto label63;

     label62:
        $i23 = virtualinvoke r19.<android.graphics.Bitmap: int getWidth()>();

        $i24 = virtualinvoke r19.<android.graphics.Bitmap: int getHeight()>();

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(int,int,int,int)>(0, 0, $i23, $i24);

        goto label64;

     label63:
        $i21 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i22 = virtualinvoke r0.<android.view.View: int getHeight()>();

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(int,int,int,int)>(0, 0, $i21, $i22);

     label64:
        r21 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        if r21 == null goto label65;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>(r21);

     label65:
        if z20 != 0 goto label68;

        if z19 == 0 goto label66;

        $i18 = r0.<android.view.View: int mPrivateFlags>;

        $i19 = -2097153 & $i18;

        r0.<android.view.View: int mPrivateFlags> = $i19;

        $r8 = (android.graphics.RecordingCanvas) r1;

        virtualinvoke $r8.<android.graphics.RecordingCanvas: void drawRenderNode(android.graphics.RenderNode)>(r20);

        goto label73;

     label66:
        i99 = r0.<android.view.View: int mPrivateFlags>;

        $i16 = i99 & 128;

        if $i16 != 128 goto label67;

        $i17 = -2097153 & i99;

        r0.<android.view.View: int mPrivateFlags> = $i17;

        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r1);

        goto label73;

     label67:
        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r1);

        goto label73;

     label68:
        if r19 == null goto label73;

        $i10 = r0.<android.view.View: int mPrivateFlags>;

        $i11 = -2097153 & $i10;

        r0.<android.view.View: int mPrivateFlags> = $i11;

        if i90 == 0 goto label71;

        r22 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        if r22 != null goto label69;

        goto label71;

     label69:
        i100 = virtualinvoke r22.<android.graphics.Paint: int getAlpha()>();

        $b13 = f33 cmpg 1.0F;

        if $b13 >= 0 goto label70;

        $r7 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        $f4 = (float) i100;

        $f5 = $f4 * f33;

        $i15 = (int) $f5;

        virtualinvoke $r7.<android.graphics.Paint: void setAlpha(int)>($i15);

     label70:
        $r5 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r19, 0.0F, 0.0F, $r5);

        $b14 = f33 cmpg 1.0F;

        if $b14 >= 0 goto label73;

        $r6 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        virtualinvoke $r6.<android.graphics.Paint: void setAlpha(int)>(i100);

        goto label73;

     label71:
        r23 = r2.<android.view.ViewGroup: android.graphics.Paint mCachePaint>;

        r24 = r23;

        if r23 != null goto label72;

        $r4 = new android.graphics.Paint;

        specialinvoke $r4.<android.graphics.Paint: void <init>()>();

        r24 = $r4;

        virtualinvoke $r4.<android.graphics.Paint: void setDither(boolean)>(0);

        r2.<android.view.ViewGroup: android.graphics.Paint mCachePaint> = $r4;

     label72:
        $f3 = f33 * 255.0F;

        $i12 = (int) $f3;

        virtualinvoke r24.<android.graphics.Paint: void setAlpha(int)>($i12);

        virtualinvoke r1.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r19, 0.0F, 0.0F, r24);

     label73:
        if i94 < 0 goto label74;

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i94);

     label74:
        if r3 == null goto label76;

        if z14 != 0 goto label76;

        if z0 != 0 goto label75;

        $z4 = virtualinvoke r3.<android.view.animation.Animation: boolean getFillAfter()>();

        if $z4 != 0 goto label75;

        virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>(255);

     label75:
        virtualinvoke r2.<android.view.ViewGroup: void finishAnimatingView(android.view.View,android.view.animation.Animation)>(r0, r3);

     label76:
        if z14 == 0 goto label77;

        if z0 == 0 goto label77;

        $z3 = virtualinvoke r3.<android.view.animation.Animation: boolean hasAlpha()>();

        if $z3 == 0 goto label77;

        $i8 = r0.<android.view.View: int mPrivateFlags>;

        $i9 = $i8 & 262144;

        if $i9 != 262144 goto label77;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label77:
        r0.<android.view.View: boolean mRecreateDisplayList> = 0;

        return z14;
    }

    public void drawableHotspotChanged(float, float)
    {
        android.view.View r0;
        float f0, f1;
        android.graphics.drawable.Drawable $r1, $r3, r4, r5;
        android.view.View$ForegroundInfo $r2, r6;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r4 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r4 == null goto label1;

        virtualinvoke r4.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label1:
        r5 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if r5 == null goto label2;

        virtualinvoke r5.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label2:
        r6 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r6 == null goto label3;

        $r1 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r6);

        if $r1 == null goto label3;

        $r2 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r3 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r2);

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label3:
        virtualinvoke r0.<android.view.View: void dispatchDrawableHotspotChanged(float,float)>(f0, f1);

        return;
    }

    protected void drawableStateChanged()
    {
        android.view.View r0;
        int[] r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z9, z10, z11, z12, z13;
        android.view.View$ScrollabilityCache $r2, r7;
        int $i0;
        android.graphics.drawable.Drawable r3, r4, r6;
        android.view.View$ForegroundInfo r5;
        android.widget.ScrollBarDrawable r8;
        android.animation.StateListAnimator r9;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        r3 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        z9 = 0;

        if r3 == null goto label01;

        z9 = 0;

        $z6 = virtualinvoke r3.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z6 == 0 goto label01;

        $z7 = virtualinvoke r3.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1);

        z9 = 0 | $z7;

     label01:
        r4 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        z10 = z9;

        if r4 == null goto label02;

        z10 = z9;

        $z4 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z4 == 0 goto label02;

        $z5 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1);

        z10 = z9 | $z5;

     label02:
        r5 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r5 == null goto label03;

        r6 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r5);

        goto label04;

     label03:
        r6 = null;

     label04:
        z11 = z10;

        if r6 == null goto label05;

        z11 = z10;

        $z2 = virtualinvoke r6.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z2 == 0 goto label05;

        $z3 = virtualinvoke r6.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1);

        z11 = z10 | $z3;

     label05:
        r7 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        z12 = z11;

        if r7 == null goto label08;

        r8 = r7.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        z12 = z11;

        if r8 == null goto label08;

        z12 = z11;

        $z0 = virtualinvoke r8.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label08;

        $z1 = virtualinvoke r8.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1);

        if $z1 == 0 goto label06;

        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i0 = $r2.<android.view.View$ScrollabilityCache: int state>;

        if $i0 == 0 goto label06;

        z13 = 1;

        goto label07;

     label06:
        z13 = 0;

     label07:
        z12 = z11 | z13;

     label08:
        r9 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        if r9 == null goto label09;

        virtualinvoke r9.<android.animation.StateListAnimator: void setState(int[])>(r1);

     label09:
        if z12 == 0 goto label10;

        virtualinvoke r0.<android.view.View: void invalidate()>();

     label10:
        return;
    }

    public void encode(android.view.ViewHierarchyEncoder)
    {
        android.view.View r0;
        android.view.ViewHierarchyEncoder r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewHierarchyEncoder;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void beginObject(java.lang.Object)>(r0);

        virtualinvoke r0.<android.view.View: void encodeProperties(android.view.ViewHierarchyEncoder)>(r1);

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void endObject()>();

        return;
    }

    protected void encodeProperties(android.view.ViewHierarchyEncoder)
    {
        android.view.View r0;
        android.view.ViewHierarchyEncoder r1;
        android.content.Context $r2, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, i38, i39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        java.lang.String $r3, $r8, $r10, $r12, $r13, r18, r23;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, f13;
        java.lang.StringBuilder $r5;
        java.lang.String[] $r7, $r11, r20;
        java.lang.Object r14;
        android.view.View$TransformationInfo r15;
        android.view.ViewGroup$LayoutParams r16;
        android.graphics.Rect r17;
        android.content.res.Resources$Theme r19;
        java.lang.CharSequence r22;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewHierarchyEncoder;

        $r2 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $i0 = r0.<android.view.View: int mID>;

        r14 = staticinvoke <android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>($r2, $i0);

        $z0 = r14 instanceof java.lang.String;

        if $z0 == 0 goto label01;

        $r13 = (java.lang.String) r14;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,java.lang.String)>("id", $r13);

        goto label02;

     label01:
        $i1 = r0.<android.view.View: int mID>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("id", $i1);

     label02:
        r15 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if r15 == null goto label03;

        f13 = staticinvoke <android.view.View$TransformationInfo: float access$2500(android.view.View$TransformationInfo)>(r15);

        goto label04;

     label03:
        f13 = 0.0F;

     label04:
        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("misc:transformation.alpha", f13);

        $r3 = virtualinvoke r0.<android.view.View: java.lang.String getTransitionName()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,java.lang.String)>("misc:transitionName", $r3);

        $i2 = r0.<android.view.View: int mLeft>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("layout:left", $i2);

        $i3 = r0.<android.view.View: int mRight>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("layout:right", $i3);

        $i4 = r0.<android.view.View: int mTop>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("layout:top", $i4);

        $i5 = r0.<android.view.View: int mBottom>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("layout:bottom", $i5);

        $i6 = virtualinvoke r0.<android.view.View: int getWidth()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("layout:width", $i6);

        $i7 = virtualinvoke r0.<android.view.View: int getHeight()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("layout:height", $i7);

        $i8 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("layout:layoutDirection", $i8);

        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutRtl()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("layout:layoutRtl", $z1);

        $z2 = virtualinvoke r0.<android.view.View: boolean hasTransientState()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("layout:hasTransientState", $z2);

        $i9 = virtualinvoke r0.<android.view.View: int getBaseline()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("layout:baseline", $i9);

        r16 = virtualinvoke r0.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        if r16 == null goto label05;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addPropertyKey(java.lang.String)>("layoutParams");

        virtualinvoke r16.<android.view.ViewGroup$LayoutParams: void encode(android.view.ViewHierarchyEncoder)>(r1);

     label05:
        $i10 = r0.<android.view.View: int mScrollX>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("scrolling:scrollX", $i10);

        $i11 = r0.<android.view.View: int mScrollY>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("scrolling:scrollY", $i11);

        $i12 = r0.<android.view.View: int mPaddingLeft>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("padding:paddingLeft", $i12);

        $i13 = r0.<android.view.View: int mPaddingRight>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("padding:paddingRight", $i13);

        $i14 = r0.<android.view.View: int mPaddingTop>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("padding:paddingTop", $i14);

        $i15 = r0.<android.view.View: int mPaddingBottom>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("padding:paddingBottom", $i15);

        $i16 = r0.<android.view.View: int mUserPaddingRight>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("padding:userPaddingRight", $i16);

        $i17 = r0.<android.view.View: int mUserPaddingLeft>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("padding:userPaddingLeft", $i17);

        $i18 = r0.<android.view.View: int mUserPaddingBottom>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("padding:userPaddingBottom", $i18);

        $i19 = r0.<android.view.View: int mUserPaddingStart>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("padding:userPaddingStart", $i19);

        $i20 = r0.<android.view.View: int mUserPaddingEnd>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("padding:userPaddingEnd", $i20);

        $i21 = r0.<android.view.View: int mMinHeight>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("measurement:minHeight", $i21);

        $i22 = r0.<android.view.View: int mMinWidth>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("measurement:minWidth", $i22);

        $i23 = r0.<android.view.View: int mMeasuredWidth>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("measurement:measuredWidth", $i23);

        $i24 = r0.<android.view.View: int mMeasuredHeight>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("measurement:measuredHeight", $i24);

        $f0 = virtualinvoke r0.<android.view.View: float getElevation()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:elevation", $f0);

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationX()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:translationX", $f1);

        $f2 = virtualinvoke r0.<android.view.View: float getTranslationY()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:translationY", $f2);

        $f3 = virtualinvoke r0.<android.view.View: float getTranslationZ()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:translationZ", $f3);

        $f4 = virtualinvoke r0.<android.view.View: float getRotation()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:rotation", $f4);

        $f5 = virtualinvoke r0.<android.view.View: float getRotationX()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:rotationX", $f5);

        $f6 = virtualinvoke r0.<android.view.View: float getRotationY()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:rotationY", $f6);

        $f7 = virtualinvoke r0.<android.view.View: float getScaleX()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:scaleX", $f7);

        $f8 = virtualinvoke r0.<android.view.View: float getScaleY()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:scaleY", $f8);

        $f9 = virtualinvoke r0.<android.view.View: float getPivotX()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:pivotX", $f9);

        $f10 = virtualinvoke r0.<android.view.View: float getPivotY()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:pivotY", $f10);

        r17 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        if r17 != null goto label06;

        r18 = null;

        goto label07;

     label06:
        r18 = virtualinvoke r17.<android.graphics.Rect: java.lang.String toString()>();

     label07:
        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,java.lang.String)>("drawing:clipBounds", r18);

        $z3 = virtualinvoke r0.<android.view.View: boolean isOpaque()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("drawing:opaque", $z3);

        $f11 = virtualinvoke r0.<android.view.View: float getAlpha()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:alpha", $f11);

        $f12 = virtualinvoke r0.<android.view.View: float getTransitionAlpha()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,float)>("drawing:transitionAlpha", $f12);

        $z4 = virtualinvoke r0.<android.view.View: boolean hasShadow()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("drawing:shadow", $z4);

        $i25 = virtualinvoke r0.<android.view.View: int getSolidColor()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("drawing:solidColor", $i25);

        $i26 = r0.<android.view.View: int mLayerType>;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("drawing:layerType", $i26);

        $z5 = virtualinvoke r0.<android.view.View: boolean willNotDraw()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("drawing:willNotDraw", $z5);

        $z6 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("drawing:hardwareAccelerated", $z6);

        $z7 = virtualinvoke r0.<android.view.View: boolean willNotCacheDrawing()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("drawing:willNotCacheDrawing", $z7);

        $z8 = virtualinvoke r0.<android.view.View: boolean isDrawingCacheEnabled()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("drawing:drawingCacheEnabled", $z8);

        $z9 = virtualinvoke r0.<android.view.View: boolean hasOverlappingRendering()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("drawing:overlappingRendering", $z9);

        $i27 = virtualinvoke r0.<android.view.View: int getOutlineAmbientShadowColor()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("drawing:outlineAmbientShadowColor", $i27);

        $i28 = virtualinvoke r0.<android.view.View: int getOutlineSpotShadowColor()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("drawing:outlineSpotShadowColor", $i28);

        $z10 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("focus:hasFocus", $z10);

        $z11 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("focus:isFocused", $z11);

        $i29 = virtualinvoke r0.<android.view.View: int getFocusable()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("focus:focusable", $i29);

        $z12 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("focus:isFocusable", $z12);

        $z13 = virtualinvoke r0.<android.view.View: boolean isFocusableInTouchMode()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("focus:isFocusableInTouchMode", $z13);

        $z14 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:clickable", $z14);

        $z15 = virtualinvoke r0.<android.view.View: boolean isPressed()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:pressed", $z15);

        $z16 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:selected", $z16);

        $z17 = virtualinvoke r0.<android.view.View: boolean isInTouchMode()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:touchMode", $z17);

        $z18 = virtualinvoke r0.<android.view.View: boolean isHovered()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:hovered", $z18);

        $z19 = virtualinvoke r0.<android.view.View: boolean isActivated()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:activated", $z19);

        $i30 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("misc:visibility", $i30);

        $z20 = virtualinvoke r0.<android.view.View: boolean getFitsSystemWindows()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:fitsSystemWindows", $z20);

        $z21 = virtualinvoke r0.<android.view.View: boolean getFilterTouchesWhenObscured()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:filterTouchesWhenObscured", $z21);

        $z22 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:enabled", $z22);

        $z23 = virtualinvoke r0.<android.view.View: boolean isSoundEffectsEnabled()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:soundEffectsEnabled", $z23);

        $z24 = virtualinvoke r0.<android.view.View: boolean isHapticFeedbackEnabled()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("misc:hapticFeedbackEnabled", $z24);

        $r4 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        r19 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        if r19 == null goto label08;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addPropertyKey(java.lang.String)>("theme");

        virtualinvoke r19.<android.content.res.Resources$Theme: void encode(android.view.ViewHierarchyEncoder)>(r1);

     label08:
        r20 = r0.<android.view.View: java.lang.String[] mAttributes>;

        if r20 == null goto label09;

        i38 = lengthof r20;

        goto label10;

     label09:
        i38 = 0;

     label10:
        $i31 = i38 / 2;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("meta:__attrCount__", $i31);

        i39 = 0;

     label11:
        if i39 >= i38 goto label12;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("meta:__attr__");

        $r7 = r0.<android.view.View: java.lang.String[] mAttributes>;

        $r8 = $r7[i39];

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = r0.<android.view.View: java.lang.String[] mAttributes>;

        $i37 = i39 + 1;

        $r12 = $r11[$i37];

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,java.lang.String)>($r10, $r12);

        i39 = i39 + 2;

        goto label11;

     label12:
        $i32 = virtualinvoke r0.<android.view.View: int getScrollBarStyle()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("misc:scrollBarStyle", $i32);

        $i33 = virtualinvoke r0.<android.view.View: int getTextDirection()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("text:textDirection", $i33);

        $i34 = virtualinvoke r0.<android.view.View: int getTextAlignment()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("text:textAlignment", $i34);

        r22 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getContentDescription()>();

        if r22 != null goto label13;

        r23 = "";

        goto label14;

     label13:
        r23 = interfaceinvoke r22.<java.lang.CharSequence: java.lang.String toString()>();

     label14:
        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addUserProperty(java.lang.String,java.lang.String)>("accessibility:contentDescription", r23);

        $i35 = virtualinvoke r0.<android.view.View: int getLabelFor()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("accessibility:labelFor", $i35);

        $i36 = virtualinvoke r0.<android.view.View: int getImportantForAccessibility()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("accessibility:importantForAccessibility", $i36);

        return;
    }

    void ensureTransformationInfo()
    {
        android.view.View r0;
        android.view.View$TransformationInfo $r1, $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if $r1 != null goto label1;

        $r2 = new android.view.View$TransformationInfo;

        specialinvoke $r2.<android.view.View$TransformationInfo: void <init>()>();

        r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo> = $r2;

     label1:
        return;
    }

    public android.view.View findFocus()
    {
        android.view.View r0, r1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        r1 = r0;

        goto label2;

     label1:
        r1 = null;

     label2:
        return r1;
    }

    android.view.View findKeyboardNavigationCluster()
    {
        android.view.View r0, $r1, r3;
        boolean $z0, $z1;
        android.view.ViewParent r2;

        r0 := @this: android.view.View;

        r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r2 instanceof android.view.View;

        if $z0 == 0 goto label2;

        $r1 = (android.view.View) r2;

        r3 = virtualinvoke $r1.<android.view.View: android.view.View findKeyboardNavigationCluster()>();

        if r3 == null goto label1;

        return r3;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean isKeyboardNavigationCluster()>();

        if $z1 == 0 goto label2;

        return r0;

     label2:
        return null;
    }

    public void findNamedViews(java.util.Map)
    {
        android.view.View r0;
        java.util.Map r1;
        java.lang.String r2;
        int $i0;
        android.view.GhostView $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.Map;

        $i0 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        if $i0 == 0 goto label1;

        $r4 = r0.<android.view.View: android.view.GhostView mGhostView>;

        if $r4 == null goto label2;

     label1:
        r2 = virtualinvoke r0.<android.view.View: java.lang.String getTransitionName()>();

        if r2 == null goto label2;

        interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r0);

     label2:
        return;
    }

    android.view.View findUserSetNextFocus(android.view.View, int)
    {
        android.view.View r0, r1, $r3, $r4, $r5, $r6, $r7, $r8;
        int $i0, i1, i2, i3, i4, i5, i6;
        android.view._$$Lambda$View$bhR1vB5ZYp3dv_Kth4jtLSS0KEs $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i1 := @parameter1: int;

        if i1 == 1 goto label11;

        if i1 == 2 goto label09;

        if i1 == 17 goto label07;

        if i1 == 33 goto label05;

        if i1 == 66 goto label03;

        if i1 == 130 goto label01;

        return null;

     label01:
        i2 = r0.<android.view.View: int mNextFocusDownId>;

        if i2 != -1 goto label02;

        return null;

     label02:
        $r8 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, i2);

        return $r8;

     label03:
        i3 = r0.<android.view.View: int mNextFocusRightId>;

        if i3 != -1 goto label04;

        return null;

     label04:
        $r7 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, i3);

        return $r7;

     label05:
        i4 = r0.<android.view.View: int mNextFocusUpId>;

        if i4 != -1 goto label06;

        return null;

     label06:
        $r6 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, i4);

        return $r6;

     label07:
        i5 = r0.<android.view.View: int mNextFocusLeftId>;

        if i5 != -1 goto label08;

        return null;

     label08:
        $r5 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, i5);

        return $r5;

     label09:
        i6 = r0.<android.view.View: int mNextFocusForwardId>;

        if i6 != -1 goto label10;

        return null;

     label10:
        $r4 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, i6);

        return $r4;

     label11:
        $i0 = r0.<android.view.View: int mID>;

        if $i0 != -1 goto label12;

        return null;

     label12:
        $r2 = new android.view._$$Lambda$View$bhR1vB5ZYp3dv_Kth4jtLSS0KEs;

        specialinvoke $r2.<android.view._$$Lambda$View$bhR1vB5ZYp3dv_Kth4jtLSS0KEs: void <init>(android.view.View,android.view.View,android.view.View)>(r0, r1, r0);

        $r3 = virtualinvoke r1.<android.view.View: android.view.View findViewByPredicateInsideOut(android.view.View,java.util.function.Predicate)>(r0, $r2);

        return $r3;
    }

    android.view.View findUserSetNextKeyboardNavigationCluster(android.view.View, int)
    {
        android.view.View r0, r1, $r3, $r4;
        int $i0, $i1, i2, i3;
        android.view._$$Lambda$View$1Ho5ifN6XtJ0tTt_C9rQGIcLJ3E $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i2 := @parameter1: int;

        if i2 == 1 goto label3;

        if i2 == 2 goto label1;

        return null;

     label1:
        i3 = r0.<android.view.View: int mNextClusterForwardId>;

        if i3 != -1 goto label2;

        return null;

     label2:
        $r4 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r1, i3);

        return $r4;

     label3:
        $i0 = r0.<android.view.View: int mID>;

        if $i0 != -1 goto label4;

        return null;

     label4:
        $r2 = new android.view._$$Lambda$View$1Ho5ifN6XtJ0tTt_C9rQGIcLJ3E;

        $i1 = r0.<android.view.View: int mID>;

        specialinvoke $r2.<android.view._$$Lambda$View$1Ho5ifN6XtJ0tTt_C9rQGIcLJ3E: void <init>(int)>($i1);

        $r3 = virtualinvoke r1.<android.view.View: android.view.View findViewByPredicateInsideOut(android.view.View,java.util.function.Predicate)>(r0, $r2);

        return $r3;
    }

    public android.view.View findViewByAccessibilityIdTraversal(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.View: int getAccessibilityViewId()>();

        if $i1 != i0 goto label1;

        return r0;

     label1:
        return null;
    }

    public android.view.View findViewByAutofillIdTraversal(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.View: int getAutofillViewId()>();

        if $i1 != i0 goto label1;

        return r0;

     label1:
        return null;
    }

    public final android.view.View findViewById(int)
    {
        android.view.View r0, $r1;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 != -1 goto label1;

        return null;

     label1:
        $r1 = virtualinvoke r0.<android.view.View: android.view.View findViewTraversal(int)>(i0);

        return $r1;
    }

    public final android.view.View findViewByPredicate(java.util.function.Predicate)
    {
        android.view.View r0, $r2;
        java.util.function.Predicate r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.function.Predicate;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View findViewByPredicateTraversal(java.util.function.Predicate,android.view.View)>(r1, null);

        return $r2;
    }

    public final android.view.View findViewByPredicateInsideOut(android.view.View, java.util.function.Predicate)
    {
        android.view.View r0, r2, r3, r4, r5;
        java.util.function.Predicate r1;
        boolean $z0;
        android.view.ViewParent r6;

        r0 := @this: android.view.View;

        r3 := @parameter0: android.view.View;

        r1 := @parameter1: java.util.function.Predicate;

        r4 = null;

     label1:
        r5 = virtualinvoke r3.<android.view.View: android.view.View findViewByPredicateTraversal(java.util.function.Predicate,android.view.View)>(r1, r4);

        if r5 != null goto label5;

        if r3 != r0 goto label2;

        goto label5;

     label2:
        r6 = virtualinvoke r3.<android.view.View: android.view.ViewParent getParent()>();

        if r6 == null goto label4;

        $z0 = r6 instanceof android.view.View;

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        r2 = (android.view.View) r6;

        r4 = r3;

        r3 = r2;

        goto label1;

     label4:
        return null;

     label5:
        return r5;
    }

    protected android.view.View findViewByPredicateTraversal(java.util.function.Predicate, android.view.View)
    {
        android.view.View r0, r2;
        java.util.function.Predicate r1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.function.Predicate;

        r2 := @parameter1: android.view.View;

        $z0 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        return null;
    }

    protected android.view.View findViewTraversal(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mID>;

        if i0 != $i1 goto label1;

        return r0;

     label1:
        return null;
    }

    public final android.view.View findViewWithTag(java.lang.Object)
    {
        android.view.View r0, $r2;
        java.lang.Object r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Object;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.View findViewWithTagTraversal(java.lang.Object)>(r1);

        return $r2;
    }

    protected android.view.View findViewWithTagTraversal(java.lang.Object)
    {
        android.view.View r0;
        java.lang.Object r1, $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = r0.<android.view.View: java.lang.Object mTag>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        return null;
    }

    public void findViewsWithText(java.util.ArrayList, java.lang.CharSequence, int)
    {
        android.view.View r0;
        java.util.ArrayList r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.CharSequence r2, $r5, r8;
        android.view.accessibility.AccessibilityNodeProvider $r3;
        java.lang.String $r4, $r6, $r7, r9;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.ArrayList;

        r8 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        $r3 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $r3 == null goto label1;

        $i4 = i0 & 4;

        if $i4 == 0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        goto label2;

     label1:
        $i1 = i0 & 2;

        if $i1 == 0 goto label2;

        if r8 == null goto label2;

        $i2 = interfaceinvoke r8.<java.lang.CharSequence: int length()>();

        if $i2 <= 0 goto label2;

        r2 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        if r2 == null goto label2;

        $i3 = interfaceinvoke r2.<java.lang.CharSequence: int length()>();

        if $i3 <= 0 goto label2;

        $r4 = interfaceinvoke r8.<java.lang.CharSequence: java.lang.String toString()>();

        r9 = virtualinvoke $r4.<java.lang.String: java.lang.String toLowerCase()>();

        $r5 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        $r6 = interfaceinvoke $r5.<java.lang.CharSequence: java.lang.String toString()>();

        $r7 = virtualinvoke $r6.<java.lang.String: java.lang.String toLowerCase()>();

        $z0 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>(r9);

        if $z0 == 0 goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

     label2:
        return;
    }

    public void finishMovingTask()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r2, $r3;
        android.view.IWindow $r4;
        android.view.IWindowSession $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.view.View;

     label1:
        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r2.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        interfaceinvoke $r5.<android.view.IWindowSession: void finishMovingTask(android.view.IWindow)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Unable to finish moving", $r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    protected boolean fitSystemWindows(android.graphics.Rect)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.WindowInsets r1, $r2;
        boolean z0, $z1;
        java.lang.Throwable $r3;
        android.graphics.Rect r4;

        r0 := @this: android.view.View;

        r4 := @parameter0: android.graphics.Rect;

        i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = i0 & 32;

        if $i1 != 0 goto label4;

        if r4 != null goto label1;

        return 0;

     label1:
        $i2 = i0 | 64;

        r0.<android.view.View: int mPrivateFlags3> = $i2;

        r1 = new android.view.WindowInsets;

        specialinvoke r1.<android.view.WindowInsets: void <init>(android.graphics.Rect)>(r4);

        $r2 = virtualinvoke r0.<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>(r1);

        z0 = virtualinvoke $r2.<android.view.WindowInsets: boolean isConsumed()>();

     label2:
        $i3 = r0.<android.view.View: int mPrivateFlags3>;

        $i4 = $i3 & -65;

        r0.<android.view.View: int mPrivateFlags3> = $i4;

        return z0;

     label3:
        $r3 := @caughtexception;

        $i5 = r0.<android.view.View: int mPrivateFlags3>;

        $i6 = $i5 & -65;

        r0.<android.view.View: int mPrivateFlags3> = $i6;

        throw $r3;

     label4:
        $z1 = specialinvoke r0.<android.view.View: boolean fitSystemWindowsInt(android.graphics.Rect)>(r4);

        return $z1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean fitsSystemWindows()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean getFitsSystemWindows()>();

        return $z0;
    }

    public android.view.View focusSearch(int)
    {
        android.view.View r0, $r2;
        int i0;
        android.view.ViewParent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label1;

        $r2 = interfaceinvoke r1.<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>(r0, i0);

        return $r2;

     label1:
        return null;
    }

    public void forceHasOverlappingRendering(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i1 = r0.<android.view.View: int mPrivateFlags3>;

        i0 = $i1 | 16777216;

        r0.<android.view.View: int mPrivateFlags3> = i0;

        if z0 == 0 goto label1;

        $i3 = i0 | 8388608;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        goto label2;

     label1:
        $i2 = i0 & -8388609;

        r0.<android.view.View: int mPrivateFlags3> = $i2;

     label2:
        return;
    }

    public void forceLayout()
    {
        android.view.View r0;
        android.util.LongSparseLongArray r1;
        int i0, $i1, $i2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.util.LongSparseLongArray: void clear()>();

     label1:
        $i1 = r0.<android.view.View: int mPrivateFlags>;

        i0 = $i1 | 4096;

        r0.<android.view.View: int mPrivateFlags> = i0;

        $i2 = i0 | -2147483648;

        r0.<android.view.View: int mPrivateFlags> = $i2;

        return;
    }

    public boolean gatherTransparentRegion(android.graphics.Region)
    {
        android.view.View r0;
        android.graphics.Region r1;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23;
        android.graphics.drawable.Drawable $r2, $r3, $r5, $r7, $r8, r12, r14;
        android.view.View$ForegroundInfo $r4, $r6, r13;
        float $f0, $f1;
        byte $b5;
        android.graphics.Region$Op $r9;
        android.view.View$AttachInfo r10;
        int[] r11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Region;

        r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label6;

        if r10 == null goto label6;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 128;

        if $i1 != 0 goto label3;

        r11 = r10.<android.view.View$AttachInfo: int[] mTransparentLocation>;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r11);

        $f0 = virtualinvoke r0.<android.view.View: float getZ()>();

        $b5 = $f0 cmpl 0.0F;

        if $b5 <= 0 goto label1;

        $f1 = virtualinvoke r0.<android.view.View: float getZ()>();

        i23 = (int) $f1;

        goto label2;

     label1:
        i23 = 0;

     label2:
        $i6 = r11[0];

        $i22 = $i6 - i23;

        $i7 = r11[1];

        $i21 = $i7 - i23;

        $i9 = r11[0];

        $i8 = r0.<android.view.View: int mRight>;

        $i11 = $i9 + $i8;

        $i10 = r0.<android.view.View: int mLeft>;

        $i12 = $i11 - $i10;

        $i20 = $i12 + i23;

        $i14 = r11[1];

        $i13 = r0.<android.view.View: int mBottom>;

        $i16 = $i14 + $i13;

        $i15 = r0.<android.view.View: int mTop>;

        $i18 = $i16 - $i15;

        $i17 = i23 * 3;

        $i19 = $i18 + $i17;

        $r9 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r1.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>($i22, $i21, $i20, $i19, $r9);

        goto label6;

     label3:
        r12 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r12 == null goto label4;

        $i4 = virtualinvoke r12.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i4 == -2 goto label4;

        $r8 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke r0.<android.view.View: void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable,android.graphics.Region)>($r8, r1);

     label4:
        r13 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r13 == null goto label5;

        $r3 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r13);

        if $r3 == null goto label5;

        $r4 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r5 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r4);

        $i3 = virtualinvoke $r5.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i3 == -2 goto label5;

        $r6 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r7 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r6);

        virtualinvoke r0.<android.view.View: void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable,android.graphics.Region)>($r7, r1);

     label5:
        r14 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if r14 == null goto label6;

        $i2 = virtualinvoke r14.<android.graphics.drawable.Drawable: int getOpacity()>();

        if $i2 == -2 goto label6;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        virtualinvoke r0.<android.view.View: void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable,android.graphics.Region)>($r2, r1);

     label6:
        return 1;
    }

    public java.lang.CharSequence getAccessibilityClassName()
    {
        android.view.View r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: android.view.View;

        $r1 = class "Landroid/view/View;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public android.view.View$AccessibilityDelegate getAccessibilityDelegate()
    {
        android.view.View r0;
        android.view.View$AccessibilityDelegate $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        return $r1;
    }

    public int getAccessibilityLiveRegion()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 25165824;

        $i2 = $i1 >> 23;

        return $i2;
    }

    public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
    {
        android.view.View r0;
        android.view.View$AccessibilityDelegate r1;
        android.view.accessibility.AccessibilityNodeProvider $r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.view.View$AccessibilityDelegate: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)>(r0);

        return $r2;

     label1:
        return null;
    }

    public java.lang.CharSequence getAccessibilityPaneTitle()
    {
        android.view.View r0;
        java.lang.CharSequence $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: java.lang.CharSequence mAccessibilityPaneTitle>;

        return $r1;
    }

    public int getAccessibilitySelectionEnd()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionStart()>();

        return $i0;
    }

    public int getAccessibilitySelectionStart()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mAccessibilityCursorPosition>;

        return $i0;
    }

    public int getAccessibilityTraversalAfter()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mAccessibilityTraversalAfterId>;

        return $i0;
    }

    public int getAccessibilityTraversalBefore()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mAccessibilityTraversalBeforeId>;

        return $i0;
    }

    public int getAccessibilityViewId()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mAccessibilityViewId>;

        if $i1 != -1 goto label1;

        i0 = <android.view.View: int sNextAccessibilityViewId>;

        $i3 = i0 + 1;

        <android.view.View: int sNextAccessibilityViewId> = $i3;

        r0.<android.view.View: int mAccessibilityViewId> = i0;

     label1:
        $i2 = r0.<android.view.View: int mAccessibilityViewId>;

        return $i2;
    }

    public int getAccessibilityWindowId()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        int i0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        i0 = r1.<android.view.View$AttachInfo: int mAccessibilityWindowId>;

        goto label2;

     label1:
        i0 = -1;

     label2:
        return i0;
    }

    public float getAlpha()
    {
        android.view.View r0;
        android.view.View$TransformationInfo r1;
        float f0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if r1 == null goto label1;

        f0 = staticinvoke <android.view.View$TransformationInfo: float access$2500(android.view.View$TransformationInfo)>(r1);

        goto label2;

     label1:
        f0 = 1.0F;

     label2:
        return f0;
    }

    public android.view.animation.Animation getAnimation()
    {
        android.view.View r0;
        android.view.animation.Animation $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.animation.Animation mCurrentAnimation>;

        return $r1;
    }

    public android.graphics.Matrix getAnimationMatrix()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        android.graphics.Matrix $r2;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $r2 = virtualinvoke $r1.<android.graphics.RenderNode: android.graphics.Matrix getAnimationMatrix()>();

        return $r2;
    }

    public android.os.IBinder getApplicationWindowToken()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.os.IBinder r2, r3;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label2;

        r2 = r1.<android.view.View$AttachInfo: android.os.IBinder mPanelParentWindowToken>;

        r3 = r2;

        if r2 != null goto label1;

        r3 = r1.<android.view.View$AttachInfo: android.os.IBinder mWindowToken>;

     label1:
        return r3;

     label2:
        return null;
    }

    public int[] getAttributeResolutionStack(int)
    {
        android.view.View r0;
        int[] r1, r6, $r7;
        int i0, $i1, $i2, i3, i4, i5, i7, i8, $i9;
        boolean $z0;
        java.lang.Object $r2, $r4;
        android.util.SparseArray $r3, r5;

        r0 := @this: android.view.View;

        i3 := @parameter0: int;

        $z0 = <android.view.View: boolean sDebugViewAttributes>;

        if $z0 == 0 goto label6;

        r5 = r0.<android.view.View: android.util.SparseArray mAttributeResolutionStacks>;

        if r5 == null goto label6;

        $r2 = virtualinvoke r5.<android.util.SparseArray: java.lang.Object get(int)>(i3);

        if $r2 != null goto label1;

        goto label6;

     label1:
        $r3 = r0.<android.view.View: android.util.SparseArray mAttributeResolutionStacks>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i3);

        r1 = (int[]) $r4;

        i4 = lengthof r1;

        i5 = i4;

        $i1 = r0.<android.view.View: int mSourceLayoutId>;

        if $i1 == 0 goto label2;

        i5 = i4 + 1;

     label2:
        r6 = newarray (int)[i5];

        i0 = r0.<android.view.View: int mSourceLayoutId>;

        i7 = 0;

        if i0 == 0 goto label3;

        r6[0] = i0;

        i7 = 0 + 1;

     label3:
        i8 = 0;

     label4:
        $i9 = lengthof r1;

        if i8 >= $i9 goto label5;

        $i2 = r1[i8];

        r6[i7] = $i2;

        i7 = i7 + 1;

        i8 = i8 + 1;

        goto label4;

     label5:
        return r6;

     label6:
        $r7 = newarray (int)[0];

        return $r7;
    }

    public java.util.Map getAttributeSourceResourceMap()
    {
        android.view.View r0;
        java.util.HashMap $r2;
        boolean $z0;
        android.util.SparseIntArray $r3, $r4, $r5, $r7;
        int $i0, $i1, $i2, i3;
        java.lang.Integer $r6, $r8;

        r0 := @this: android.view.View;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $z0 = <android.view.View: boolean sDebugViewAttributes>;

        if $z0 == 0 goto label4;

        $r3 = r0.<android.view.View: android.util.SparseIntArray mAttributeSourceResId>;

        if $r3 != null goto label1;

        goto label4;

     label1:
        i3 = 0;

     label2:
        $r4 = r0.<android.view.View: android.util.SparseIntArray mAttributeSourceResId>;

        $i0 = virtualinvoke $r4.<android.util.SparseIntArray: int size()>();

        if i3 >= $i0 goto label3;

        $r5 = r0.<android.view.View: android.util.SparseIntArray mAttributeSourceResId>;

        $i1 = virtualinvoke $r5.<android.util.SparseIntArray: int keyAt(int)>(i3);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r7 = r0.<android.view.View: android.util.SparseIntArray mAttributeSourceResId>;

        $i2 = virtualinvoke $r7.<android.util.SparseIntArray: int valueAt(int)>(i3);

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r8);

        i3 = i3 + 1;

        goto label2;

     label3:
        return $r2;

     label4:
        return $r2;
    }

    public java.lang.String[] getAutofillHints()
    {
        android.view.View r0;
        java.lang.String[] $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: java.lang.String[] mAutofillHints>;

        return $r1;
    }

    public final android.view.autofill.AutofillId getAutofillId()
    {
        android.view.View r0;
        android.view.autofill.AutofillId $r1, $r2, $r3;
        int $i0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.autofill.AutofillId mAutofillId>;

        if $r1 != null goto label1;

        $r3 = new android.view.autofill.AutofillId;

        $i0 = virtualinvoke r0.<android.view.View: int getAutofillViewId()>();

        specialinvoke $r3.<android.view.autofill.AutofillId: void <init>(int)>($i0);

        r0.<android.view.View: android.view.autofill.AutofillId mAutofillId> = $r3;

     label1:
        $r2 = r0.<android.view.View: android.view.autofill.AutofillId mAutofillId>;

        return $r2;
    }

    public int getAutofillType()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public android.view.autofill.AutofillValue getAutofillValue()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return null;
    }

    public int getAutofillViewId()
    {
        android.view.View r0;
        int $i0, $i1, $i2;
        android.content.Context $r1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mAutofillViewId>;

        if $i0 != -1 goto label1;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int getNextAutofillId()>();

        r0.<android.view.View: int mAutofillViewId> = $i2;

     label1:
        $i1 = r0.<android.view.View: int mAutofillViewId>;

        return $i1;
    }

    public android.graphics.drawable.Drawable getBackground()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        return $r1;
    }

    public android.graphics.BlendMode getBackgroundTintBlendMode()
    {
        android.view.View r0;
        android.view.View$TintInfo r1;
        android.graphics.BlendMode r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$TintInfo: android.graphics.BlendMode mBlendMode>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public android.content.res.ColorStateList getBackgroundTintList()
    {
        android.view.View r0;
        android.view.View$TintInfo r1;
        android.content.res.ColorStateList r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public android.graphics.PorterDuff$Mode getBackgroundTintMode()
    {
        android.view.View r0;
        android.graphics.BlendMode $r1, $r3;
        android.view.View$TintInfo $r2, r4;
        android.graphics.PorterDuff$Mode r5;

        r0 := @this: android.view.View;

        r4 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if r4 == null goto label1;

        $r1 = r4.<android.view.View$TintInfo: android.graphics.BlendMode mBlendMode>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r3 = $r2.<android.view.View$TintInfo: android.graphics.BlendMode mBlendMode>;

        r5 = staticinvoke <android.graphics.BlendMode: android.graphics.PorterDuff$Mode blendModeToPorterDuffMode(android.graphics.BlendMode)>($r3);

        goto label2;

     label1:
        r5 = null;

     label2:
        return r5;
    }

    public int getBaseline()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return -1;
    }

    public final int getBottom()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mBottom>;

        return $i0;
    }

    protected float getBottomFadingEdgeStrength()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;
        float f0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int computeVerticalScrollOffset()>();

        $i1 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        if $i2 >= $i3 goto label1;

        f0 = 1.0F;

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    protected int getBottomPaddingOffset()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public void getBoundsOnScreen(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        virtualinvoke r0.<android.view.View: void getBoundsOnScreen(android.graphics.Rect,boolean)>(r1, 0);

        return;
    }

    public void getBoundsOnScreen(android.graphics.Rect, boolean)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.view.View$AttachInfo r2;
        android.graphics.RectF r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 != null goto label1;

        return;

     label1:
        r3 = r2.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mLeft>;

        $i2 = $i1 - $i0;

        $f1 = (float) $i2;

        $i4 = r0.<android.view.View: int mBottom>;

        $i3 = r0.<android.view.View: int mTop>;

        $i5 = $i4 - $i3;

        $f0 = (float) $i5;

        virtualinvoke r3.<android.graphics.RectF: void set(float,float,float,float)>(0.0F, 0.0F, $f1, $f0);

        virtualinvoke r0.<android.view.View: void mapRectFromViewToScreenCoords(android.graphics.RectF,boolean)>(r3, z0);

        $f2 = r3.<android.graphics.RectF: float left>;

        $i6 = staticinvoke <java.lang.Math: int round(float)>($f2);

        $f3 = r3.<android.graphics.RectF: float top>;

        $i7 = staticinvoke <java.lang.Math: int round(float)>($f3);

        $f4 = r3.<android.graphics.RectF: float right>;

        $i8 = staticinvoke <java.lang.Math: int round(float)>($f4);

        $f5 = r3.<android.graphics.RectF: float bottom>;

        $i9 = staticinvoke <java.lang.Math: int round(float)>($f5);

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i6, $i7, $i8, $i9);

        return;
    }

    public float getCameraDistance()
    {
        android.view.View r0;
        float f0, $f1, $f2;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;
        int $i0;
        android.graphics.RenderNode $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.content.res.Resources mResources>;

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = $r2.<android.util.DisplayMetrics: int densityDpi>;

        f0 = (float) $i0;

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f1 = virtualinvoke $r3.<android.graphics.RenderNode: float getCameraDistance()>();

        $f2 = $f1 * f0;

        return $f2;
    }

    public android.graphics.Rect getClipBounds()
    {
        android.view.View r0;
        android.graphics.Rect $r1, $r2, $r3, r4;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        if $r1 == null goto label1;

        $r2 = new android.graphics.Rect;

        $r3 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        specialinvoke $r2.<android.graphics.Rect: void <init>(android.graphics.Rect)>($r3);

        r4 = $r2;

        goto label2;

     label1:
        r4 = null;

     label2:
        return r4;
    }

    public boolean getClipBounds(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        if r2 == null goto label1;

        virtualinvoke r1.<android.graphics.Rect: void set(android.graphics.Rect)>(r2);

        return 1;

     label1:
        return 0;
    }

    public final boolean getClipToOutline()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.graphics.RenderNode: boolean getClipToOutline()>();

        return $z0;
    }

    public final android.view.contentcapture.ContentCaptureSession getContentCaptureSession()
    {
        android.view.View r0;
        android.view.contentcapture.ContentCaptureSession r1, $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = r0.<android.view.View: boolean mContentCaptureSessionCached>;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.view.View: android.view.contentcapture.ContentCaptureSession mContentCaptureSession>;

        return $r2;

     label1:
        r1 = specialinvoke r0.<android.view.View: android.view.contentcapture.ContentCaptureSession getAndCacheContentCaptureSession()>();

        r0.<android.view.View: android.view.contentcapture.ContentCaptureSession mContentCaptureSession> = r1;

        r0.<android.view.View: boolean mContentCaptureSessionCached> = 1;

        return r1;
    }

    public java.lang.CharSequence getContentDescription()
    {
        android.view.View r0;
        java.lang.CharSequence $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        return $r1;
    }

    public final android.content.Context getContext()
    {
        android.view.View r0;
        android.content.Context $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        return $r1;
    }

    protected android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return null;
    }

    public final boolean getDefaultFocusHighlightEnabled()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = r0.<android.view.View: boolean mDefaultFocusHighlightEnabled>;

        return $z0;
    }

    public android.view.Display getDisplay()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.Display r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$AttachInfo: android.view.Display mDisplay>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public final int[] getDrawableState()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;
        int[] r1, r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: int[] mDrawableState>;

        if r1 == null goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 1024;

        if $i3 != 0 goto label1;

        return r1;

     label1:
        r2 = virtualinvoke r0.<android.view.View: int[] onCreateDrawableState(int)>(0);

        r0.<android.view.View: int[] mDrawableState> = r2;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -1025;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        return r2;
    }

    public android.graphics.Bitmap getDrawingCache()
    {
        android.view.View r0;
        android.graphics.Bitmap $r1;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>(0);

        return $r1;
    }

    public android.graphics.Bitmap getDrawingCache(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0, $i1, $i2;
        android.graphics.Bitmap r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = i0 & 131072;

        if $i1 != 131072 goto label1;

        return null;

     label1:
        $i2 = i0 & 32768;

        if $i2 != 32768 goto label2;

        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(z0);

     label2:
        if z0 == 0 goto label3;

        r1 = r0.<android.view.View: android.graphics.Bitmap mDrawingCache>;

        goto label4;

     label3:
        r1 = r0.<android.view.View: android.graphics.Bitmap mUnscaledDrawingCache>;

     label4:
        return r1;
    }

    public int getDrawingCacheBackgroundColor()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mDrawingCacheBackgroundColor>;

        return $i0;
    }

    public int getDrawingCacheQuality()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 1572864;

        return $i1;
    }

    public void getDrawingRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $i0 = r0.<android.view.View: int mScrollX>;

        r1.<android.graphics.Rect: int left> = $i0;

        $i1 = r0.<android.view.View: int mScrollY>;

        r1.<android.graphics.Rect: int top> = $i1;

        $i5 = r0.<android.view.View: int mScrollX>;

        $i3 = r0.<android.view.View: int mRight>;

        $i2 = r0.<android.view.View: int mLeft>;

        $i4 = $i3 - $i2;

        $i6 = $i5 + $i4;

        r1.<android.graphics.Rect: int right> = $i6;

        $i10 = r0.<android.view.View: int mScrollY>;

        $i8 = r0.<android.view.View: int mBottom>;

        $i7 = r0.<android.view.View: int mTop>;

        $i9 = $i8 - $i7;

        $i11 = $i10 + $i9;

        r1.<android.graphics.Rect: int bottom> = $i11;

        return;
    }

    public long getDrawingTime()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        long l0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        l0 = r1.<android.view.View$AttachInfo: long mDrawingTime>;

        goto label2;

     label1:
        l0 = 0L;

     label2:
        return l0;
    }

    public float getElevation()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getElevation()>();

        return $f0;
    }

    public int getExplicitStyle()
    {
        android.view.View r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = <android.view.View: boolean sDebugViewAttributes>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = r0.<android.view.View: int mExplicitStyle>;

        return $i0;
    }

    protected int getFadeHeight(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 = r0.<android.view.View: int mPaddingTop>;

        i8 = i0;

        if z0 == 0 goto label1;

        $i7 = virtualinvoke r0.<android.view.View: int getTopPaddingOffset()>();

        i8 = i0 + $i7;

     label1:
        $i2 = r0.<android.view.View: int mBottom>;

        $i1 = r0.<android.view.View: int mTop>;

        $i4 = $i2 - $i1;

        $i3 = r0.<android.view.View: int mPaddingBottom>;

        $i5 = $i4 - $i3;

        $i6 = $i5 - i8;

        return $i6;
    }

    protected int getFadeTop(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0, $i1, i2;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 = r0.<android.view.View: int mPaddingTop>;

        i2 = i0;

        if z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<android.view.View: int getTopPaddingOffset()>();

        i2 = i0 + $i1;

     label1:
        return i2;
    }

    public int getFadingEdge()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12288;

        return $i1;
    }

    public int getFadingEdgeLength()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label1;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12288;

        if $i1 == 0 goto label1;

        $i2 = r1.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        return $i2;

     label1:
        return 0;
    }

    public boolean getFilterTouchesWhenObscured()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean getFitsSystemWindows()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 2;

        if $i1 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public int getFocusable()
    {
        android.view.View r0;
        int $i0, i1, i2;

        r0 := @this: android.view.View;

        i1 = r0.<android.view.View: int mViewFlags>;

        $i0 = i1 & 16;

        if $i0 <= 0 goto label1;

        i2 = 16;

        goto label2;

     label1:
        i2 = i1 & 1;

     label2:
        return i2;
    }

    public java.util.ArrayList getFocusables(int)
    {
        android.view.View r0;
        int i0;
        java.util.ArrayList $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(24);

        virtualinvoke r0.<android.view.View: void addFocusables(java.util.ArrayList,int)>($r2, i0);

        return $r2;
    }

    public void getFocusedRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        virtualinvoke r0.<android.view.View: void getDrawingRect(android.graphics.Rect)>(r1);

        return;
    }

    public android.graphics.drawable.Drawable getForeground()
    {
        android.view.View r0;
        android.view.View$ForegroundInfo r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r1 == null goto label1;

        r2 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public int getForegroundGravity()
    {
        android.view.View r0;
        android.view.View$ForegroundInfo r1;
        int i0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r1 == null goto label1;

        i0 = staticinvoke <android.view.View$ForegroundInfo: int access$2600(android.view.View$ForegroundInfo)>(r1);

        goto label2;

     label1:
        i0 = 8388659;

     label2:
        return i0;
    }

    public android.graphics.BlendMode getForegroundTintBlendMode()
    {
        android.view.View r0;
        android.view.View$TintInfo $r1, $r3;
        android.view.View$ForegroundInfo $r2, r4;
        android.graphics.BlendMode r5;

        r0 := @this: android.view.View;

        r4 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r4 == null goto label1;

        $r1 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>(r4);

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r3 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r2);

        r5 = $r3.<android.view.View$TintInfo: android.graphics.BlendMode mBlendMode>;

        goto label2;

     label1:
        r5 = null;

     label2:
        return r5;
    }

    public android.content.res.ColorStateList getForegroundTintList()
    {
        android.view.View r0;
        android.view.View$TintInfo $r1, $r3;
        android.view.View$ForegroundInfo $r2, r4;
        android.content.res.ColorStateList r5;

        r0 := @this: android.view.View;

        r4 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r4 == null goto label1;

        $r1 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>(r4);

        if $r1 == null goto label1;

        $r2 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r3 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r2);

        r5 = $r3.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList>;

        goto label2;

     label1:
        r5 = null;

     label2:
        return r5;
    }

    public android.graphics.PorterDuff$Mode getForegroundTintMode()
    {
        android.view.View r0;
        android.graphics.PorterDuff$Mode $r1;
        android.view.View$TintInfo $r2, $r4;
        android.view.View$ForegroundInfo $r3, r5;
        android.graphics.BlendMode r6;

        r0 := @this: android.view.View;

        r5 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r5 == null goto label1;

        $r2 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>(r5);

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r4 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r3);

        r6 = $r4.<android.view.View$TintInfo: android.graphics.BlendMode mBlendMode>;

        goto label2;

     label1:
        r6 = null;

     label2:
        if r6 == null goto label3;

        $r1 = staticinvoke <android.graphics.BlendMode: android.graphics.PorterDuff$Mode blendModeToPorterDuffMode(android.graphics.BlendMode)>(r6);

        return $r1;

     label3:
        return null;
    }

    public final boolean getGlobalVisibleRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>(r1, null);

        return $z0;
    }

    public boolean getGlobalVisibleRect(android.graphics.Rect, android.graphics.Point)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        android.graphics.Point r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.ViewParent r3;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Point;

        $i3 = r0.<android.view.View: int mRight>;

        $i2 = r0.<android.view.View: int mLeft>;

        i0 = $i3 - $i2;

        $i5 = r0.<android.view.View: int mBottom>;

        $i4 = r0.<android.view.View: int mTop>;

        i1 = $i5 - $i4;

        z1 = 0;

        if i0 <= 0 goto label4;

        if i1 <= 0 goto label4;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, i0, i1);

        if r2 == null goto label1;

        $i6 = r0.<android.view.View: int mScrollX>;

        $i9 = neg $i6;

        $i7 = r0.<android.view.View: int mScrollY>;

        $i8 = neg $i7;

        virtualinvoke r2.<android.graphics.Point: void set(int,int)>($i9, $i8);

     label1:
        r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r3 == null goto label2;

        $z0 = interfaceinvoke r3.<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>(r0, r1, r2);

        if $z0 == 0 goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;

     label4:
        return 0;
    }

    public android.os.Handler getHandler()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.os.Handler $r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        return $r2;

     label1:
        return null;
    }

    public final boolean getHasOverlappingRendering()
    {
        android.view.View r0;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @this: android.view.View;

        i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = 16777216 & i0;

        if $i1 == 0 goto label2;

        $i2 = i0 & 8388608;

        if $i2 == 0 goto label1;

        z0 = 1;

        goto label3;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = virtualinvoke r0.<android.view.View: boolean hasOverlappingRendering()>();

     label3:
        return z0;
    }

    public final int getHeight()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mBottom>;

        $i0 = r0.<android.view.View: int mTop>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public void getHitRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.graphics.Matrix $r2;
        android.view.View$AttachInfo r3;
        android.graphics.RectF r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label2;

        r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r3 != null goto label1;

        goto label2;

     label1:
        r4 = r3.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        $i4 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $f0 = (float) $i4;

        $i5 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $f1 = (float) $i5;

        virtualinvoke r4.<android.graphics.RectF: void set(float,float,float,float)>(0.0F, 0.0F, $f0, $f1);

        $r2 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r2.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r4);

        $f2 = r4.<android.graphics.RectF: float left>;

        $i7 = (int) $f2;

        $i6 = r0.<android.view.View: int mLeft>;

        $i17 = $i7 + $i6;

        $f3 = r4.<android.graphics.RectF: float top>;

        $i9 = (int) $f3;

        $i8 = r0.<android.view.View: int mTop>;

        $i16 = $i9 + $i8;

        $f4 = r4.<android.graphics.RectF: float right>;

        $i11 = (int) $f4;

        $i10 = r0.<android.view.View: int mLeft>;

        $i15 = $i11 + $i10;

        $f5 = r4.<android.graphics.RectF: float bottom>;

        $i13 = (int) $f5;

        $i12 = r0.<android.view.View: int mTop>;

        $i14 = $i13 + $i12;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i17, $i16, $i15, $i14);

        goto label3;

     label2:
        $i3 = r0.<android.view.View: int mLeft>;

        $i2 = r0.<android.view.View: int mTop>;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mBottom>;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i3, $i2, $i1, $i0);

     label3:
        return;
    }

    public int getHorizontalFadingEdgeLength()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isHorizontalFadingEdgeEnabled()>();

        if $z0 == 0 goto label1;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label1;

        $i0 = r1.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        return $i0;

     label1:
        return 0;
    }

    protected float getHorizontalScrollFactor()
    {
        android.view.View r0;
        float $f0;

        r0 := @this: android.view.View;

        $f0 = virtualinvoke r0.<android.view.View: float getVerticalScrollFactor()>();

        return $f0;
    }

    protected int getHorizontalScrollbarHeight()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        android.widget.ScrollBarDrawable r2;
        int i0, i1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label3;

        r2 = r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if r2 == null goto label2;

        i0 = virtualinvoke r2.<android.widget.ScrollBarDrawable: int getSize(boolean)>(0);

        i1 = i0;

        if i0 > 0 goto label1;

        i1 = r1.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label1:
        return i1;

     label2:
        return 0;

     label3:
        return 0;
    }

    public android.graphics.drawable.Drawable getHorizontalScrollbarThumbDrawable()
    {
        android.view.View r0;
        android.widget.ScrollBarDrawable $r1;
        android.view.View$ScrollabilityCache r2;
        android.graphics.drawable.Drawable r3;

        r0 := @this: android.view.View;

        r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r2 == null goto label1;

        $r1 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        r3 = virtualinvoke $r1.<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getHorizontalThumbDrawable()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public android.graphics.drawable.Drawable getHorizontalScrollbarTrackDrawable()
    {
        android.view.View r0;
        android.widget.ScrollBarDrawable $r1;
        android.view.View$ScrollabilityCache r2;
        android.graphics.drawable.Drawable r3;

        r0 := @this: android.view.View;

        r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r2 == null goto label1;

        $r1 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        r3 = virtualinvoke $r1.<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getHorizontalTrackDrawable()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public void getHotspotBounds(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r2 = virtualinvoke r0.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void getHotspotBounds(android.graphics.Rect)>(r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void getBoundsOnScreen(android.graphics.Rect)>(r1);

     label2:
        return;
    }

    public int getId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mID>;

        return $i0;
    }

    public int getImportantForAccessibility()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 7340032;

        $i2 = $i1 >> 20;

        return $i2;
    }

    public int getImportantForAutofill()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 7864320;

        $i2 = $i1 >> 19;

        return $i2;
    }

    public int getImportantForContentCapture()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags4>;

        $i1 = $i0 & 15;

        return $i1;
    }

    public final android.graphics.Matrix getInverseMatrix()
    {
        android.view.View r0;
        android.graphics.Matrix r1, $r3, $r6;
        android.view.View$TransformationInfo $r2, $r4, $r7;
        android.graphics.RenderNode $r5;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void ensureTransformationInfo()>();

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $r3 = staticinvoke <android.view.View$TransformationInfo: android.graphics.Matrix access$2400(android.view.View$TransformationInfo)>($r2);

        if $r3 != null goto label1;

        $r7 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $r6 = new android.graphics.Matrix;

        specialinvoke $r6.<android.graphics.Matrix: void <init>()>();

        staticinvoke <android.view.View$TransformationInfo: android.graphics.Matrix access$2402(android.view.View$TransformationInfo,android.graphics.Matrix)>($r7, $r6);

     label1:
        $r4 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        r1 = staticinvoke <android.view.View$TransformationInfo: android.graphics.Matrix access$2400(android.view.View$TransformationInfo)>($r4);

        $r5 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r5.<android.graphics.RenderNode: void getInverseMatrix(android.graphics.Matrix)>(r1);

        return r1;
    }

    public java.lang.CharSequence getIterableTextForAccessibility()
    {
        android.view.View r0;
        java.lang.CharSequence $r1;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getContentDescription()>();

        return $r1;
    }

    public android.view.AccessibilityIterators$TextSegmentIterator getIteratorForGranularity(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;
        android.content.Context $r1, $r6;
        android.content.res.Resources $r2, $r7;
        android.content.res.Configuration $r3, $r8;
        java.util.Locale $r4, $r9;
        java.lang.String $r5, $r10, $r11;
        java.lang.CharSequence r12, r14, r16;
        android.view.AccessibilityIterators$ParagraphTextSegmentIterator r13;
        android.view.AccessibilityIterators$WordTextSegmentIterator r15;
        android.view.AccessibilityIterators$CharacterTextSegmentIterator r17;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 == 1 goto label4;

        if i0 == 2 goto label2;

        if i0 == 8 goto label1;

        goto label5;

     label1:
        r12 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r12 == null goto label5;

        $i3 = interfaceinvoke r12.<java.lang.CharSequence: int length()>();

        if $i3 <= 0 goto label5;

        r13 = staticinvoke <android.view.AccessibilityIterators$ParagraphTextSegmentIterator: android.view.AccessibilityIterators$ParagraphTextSegmentIterator getInstance()>();

        $r11 = interfaceinvoke r12.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r13.<android.view.AccessibilityIterators$ParagraphTextSegmentIterator: void initialize(java.lang.String)>($r11);

        return r13;

     label2:
        r14 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r14 == null goto label3;

        $i2 = interfaceinvoke r14.<java.lang.CharSequence: int length()>();

        if $i2 <= 0 goto label3;

        $r6 = r0.<android.view.View: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $r9 = $r8.<android.content.res.Configuration: java.util.Locale locale>;

        r15 = staticinvoke <android.view.AccessibilityIterators$WordTextSegmentIterator: android.view.AccessibilityIterators$WordTextSegmentIterator getInstance(java.util.Locale)>($r9);

        $r10 = interfaceinvoke r14.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r15.<android.view.AccessibilityIterators$WordTextSegmentIterator: void initialize(java.lang.String)>($r10);

        return r15;

     label3:
        goto label5;

     label4:
        r16 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r16 == null goto label5;

        $i1 = interfaceinvoke r16.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label5;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $r4 = $r3.<android.content.res.Configuration: java.util.Locale locale>;

        r17 = staticinvoke <android.view.AccessibilityIterators$CharacterTextSegmentIterator: android.view.AccessibilityIterators$CharacterTextSegmentIterator getInstance(java.util.Locale)>($r4);

        $r5 = interfaceinvoke r16.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r17.<android.view.AccessibilityIterators$CharacterTextSegmentIterator: void initialize(java.lang.String)>($r5);

        return r17;

     label5:
        return null;
    }

    public boolean getKeepScreenOn()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.view.KeyEvent$DispatcherState getKeyDispatcherState()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.KeyEvent$DispatcherState r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$AttachInfo: android.view.KeyEvent$DispatcherState mKeyDispatchState>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public int getLabelFor()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mLabelForId>;

        return $i0;
    }

    public int getLayerType()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mLayerType>;

        return $i0;
    }

    public int getLayoutDirection()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4;
        android.content.Context $r1;
        android.content.pm.ApplicationInfo $r2;
        byte b5;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i0 = $r2.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        b5 = 0;

        if i0 >= 17 goto label1;

        $i3 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = $i3 | 32;

        r0.<android.view.View: int mPrivateFlags2> = $i4;

        return 0;

     label1:
        $i1 = r0.<android.view.View: int mPrivateFlags2>;

        $i2 = $i1 & 16;

        if $i2 != 16 goto label2;

        b5 = 1;

        goto label2;

     label2:
        return b5;
    }

    public android.view.ViewGroup$LayoutParams getLayoutParams()
    {
        android.view.View r0;
        android.view.ViewGroup$LayoutParams $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        return $r1;
    }

    public final int getLeft()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mLeft>;

        return $i0;
    }

    protected float getLeftFadingEdgeStrength()
    {
        android.view.View r0;
        int $i0;
        float f0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollOffset()>();

        if $i0 <= 0 goto label1;

        f0 = 1.0F;

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    protected int getLeftPaddingOffset()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    android.view.View$ListenerInfo getListenerInfo()
    {
        android.view.View r0;
        android.view.View$ListenerInfo $r1, r2;

        r0 := @this: android.view.View;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        return r2;

     label1:
        $r1 = new android.view.View$ListenerInfo;

        specialinvoke $r1.<android.view.View$ListenerInfo: void <init>()>();

        r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo> = $r1;

        return $r1;
    }

    public final boolean getLocalVisibleRect(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        android.graphics.Point $r2, r4;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        android.view.View$AttachInfo r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r3 == null goto label1;

        r4 = r3.<android.view.View$AttachInfo: android.graphics.Point mPoint>;

        goto label2;

     label1:
        $r2 = new android.graphics.Point;

        specialinvoke $r2.<android.graphics.Point: void <init>()>();

        r4 = $r2;

     label2:
        $z0 = virtualinvoke r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>(r1, r4);

        if $z0 == 0 goto label3;

        $i0 = r4.<android.graphics.Point: int x>;

        $i3 = neg $i0;

        $i1 = r4.<android.graphics.Point: int y>;

        $i2 = neg $i1;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i3, $i2);

        return 1;

     label3:
        return 0;
    }

    public void getLocationInSurface(int[])
    {
        android.view.View r0;
        int[] r1;
        android.view.View$AttachInfo r2, $r4, $r8;
        android.view.ViewRootImpl $r3, $r5, $r9;
        android.view.WindowManager$LayoutParams $r6, $r10;
        android.graphics.Rect $r7, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        r1 := @parameter0: int[];

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r1);

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r3 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        if $r3 == null goto label1;

        $i1 = r1[0];

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r6 = $r5.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r7 = $r6.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i0 = $r7.<android.graphics.Rect: int left>;

        $i2 = $i1 + $i0;

        r1[0] = $i2;

        $i4 = r1[1];

        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r8.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r10 = $r9.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r11 = $r10.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i3 = $r11.<android.graphics.Rect: int top>;

        $i5 = $i4 + $i3;

        r1[1] = $i5;

     label1:
        return;
    }

    public void getLocationInWindow(int[])
    {
        android.view.View r0;
        int[] r1;
        java.lang.IllegalArgumentException $r2;
        int $i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: int[];

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 < 2 goto label1;

        r1[0] = 0;

        r1[1] = 0;

        virtualinvoke r0.<android.view.View: void transformFromViewToWindowSpace(int[])>(r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("outLocation must be an array of two integers");

        throw $r2;
    }

    public void getLocationOnScreen(int[])
    {
        android.view.View r0;
        int[] r1;
        android.view.View$AttachInfo r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        r1 := @parameter0: int[];

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r1);

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $i1 = r1[0];

        $i0 = r2.<android.view.View$AttachInfo: int mWindowLeft>;

        $i2 = $i1 + $i0;

        r1[0] = $i2;

        $i4 = r1[1];

        $i3 = r2.<android.view.View$AttachInfo: int mWindowTop>;

        $i5 = $i4 + $i3;

        r1[1] = $i5;

     label1:
        return;
    }

    public int[] getLocationOnScreen()
    {
        android.view.View r0;
        int[] r1;

        r0 := @this: android.view.View;

        r1 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r1);

        return r1;
    }

    public android.graphics.Matrix getMatrix()
    {
        android.view.View r0;
        android.graphics.Matrix r1;
        android.view.View$TransformationInfo $r2;
        android.graphics.RenderNode $r3;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void ensureTransformationInfo()>();

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        r1 = staticinvoke <android.view.View$TransformationInfo: android.graphics.Matrix access$2300(android.view.View$TransformationInfo)>($r2);

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.graphics.RenderNode: void getMatrix(android.graphics.Matrix)>(r1);

        return r1;
    }

    public final int getMeasuredHeight()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMeasuredHeight>;

        $i1 = $i0 & 16777215;

        return $i1;
    }

    public final int getMeasuredHeightAndState()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMeasuredHeight>;

        return $i0;
    }

    public final int getMeasuredState()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMeasuredWidth>;

        $i4 = $i0 & -16777216;

        $i1 = r0.<android.view.View: int mMeasuredHeight>;

        $i2 = $i1 >> 16;

        $i3 = $i2 & -256;

        $i5 = $i4 | $i3;

        return $i5;
    }

    public final int getMeasuredWidth()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMeasuredWidth>;

        $i1 = $i0 & 16777215;

        return $i1;
    }

    public final int getMeasuredWidthAndState()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMeasuredWidth>;

        return $i0;
    }

    public int getMinimumHeight()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMinHeight>;

        return $i0;
    }

    public int getMinimumWidth()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mMinWidth>;

        return $i0;
    }

    public int getNextClusterForwardId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextClusterForwardId>;

        return $i0;
    }

    public int getNextFocusDownId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextFocusDownId>;

        return $i0;
    }

    public int getNextFocusForwardId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextFocusForwardId>;

        return $i0;
    }

    public int getNextFocusLeftId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextFocusLeftId>;

        return $i0;
    }

    public int getNextFocusRightId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextFocusRightId>;

        return $i0;
    }

    public int getNextFocusUpId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mNextFocusUpId>;

        return $i0;
    }

    protected boolean getNotifiedContentCaptureAppeared()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags4>;

        $i1 = $i0 & 16;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.view.View$OnFocusChangeListener getOnFocusChangeListener()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnFocusChangeListener r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnFocusChangeListener mOnFocusChangeListener>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public android.view.View$OnLongClickListener getOnLongClickListener()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnLongClickListener r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnLongClickListener mOnLongClickListener>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public android.graphics.Insets getOpticalInsets()
    {
        android.view.View r0;
        android.graphics.Insets $r1, $r2, $r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.Insets mLayoutInsets>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<android.view.View: android.graphics.Insets computeOpticalInsets()>();

        r0.<android.view.View: android.graphics.Insets mLayoutInsets> = $r3;

     label1:
        $r2 = r0.<android.view.View: android.graphics.Insets mLayoutInsets>;

        return $r2;
    }

    public int getOutlineAmbientShadowColor()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        int $i0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $i0 = virtualinvoke $r1.<android.graphics.RenderNode: int getAmbientShadowColor()>();

        return $i0;
    }

    public android.view.ViewOutlineProvider getOutlineProvider()
    {
        android.view.View r0;
        android.view.ViewOutlineProvider $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider>;

        return $r1;
    }

    public int getOutlineSpotShadowColor()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        int $i0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $i0 = virtualinvoke $r1.<android.graphics.RenderNode: int getSpotShadowColor()>();

        return $i0;
    }

    public int getOverScrollMode()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mOverScrollMode>;

        return $i0;
    }

    public android.view.ViewOverlay getOverlay()
    {
        android.view.View r0;
        android.view.ViewOverlay $r1, $r2, $r3;
        android.content.Context $r4;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r1 != null goto label1;

        $r3 = new android.view.ViewOverlay;

        $r4 = r0.<android.view.View: android.content.Context mContext>;

        specialinvoke $r3.<android.view.ViewOverlay: void <init>(android.content.Context,android.view.View)>($r4, r0);

        r0.<android.view.View: android.view.ViewOverlay mOverlay> = $r3;

     label1:
        $r2 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        return $r2;
    }

    public int getPaddingBottom()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPaddingBottom>;

        return $i0;
    }

    public int getPaddingEnd()
    {
        android.view.View r0;
        boolean $z0;
        int $i0, i1;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isPaddingResolved()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        $i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        if $i0 != 1 goto label2;

        i1 = r0.<android.view.View: int mPaddingLeft>;

        goto label3;

     label2:
        i1 = r0.<android.view.View: int mPaddingRight>;

     label3:
        return i1;
    }

    public int getPaddingLeft()
    {
        android.view.View r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isPaddingResolved()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        $i0 = r0.<android.view.View: int mPaddingLeft>;

        return $i0;
    }

    public int getPaddingRight()
    {
        android.view.View r0;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isPaddingResolved()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        $i0 = r0.<android.view.View: int mPaddingRight>;

        return $i0;
    }

    public int getPaddingStart()
    {
        android.view.View r0;
        boolean $z0;
        int $i0, i1;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isPaddingResolved()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        $i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        if $i0 != 1 goto label2;

        i1 = r0.<android.view.View: int mPaddingRight>;

        goto label3;

     label2:
        i1 = r0.<android.view.View: int mPaddingLeft>;

     label3:
        return i1;
    }

    public int getPaddingTop()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPaddingTop>;

        return $i0;
    }

    public final android.view.ViewParent getParent()
    {
        android.view.View r0;
        android.view.ViewParent $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        return $r1;
    }

    public android.view.ViewParent getParentForAccessibility()
    {
        android.view.View r0, $r2;
        android.view.ViewParent r1, $r3, $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r1 instanceof android.view.View;

        if $z0 == 0 goto label2;

        $r2 = (android.view.View) r1;

        $z1 = virtualinvoke $r2.<android.view.View: boolean includeForAccessibility()>();

        if $z1 == 0 goto label1;

        $r5 = r0.<android.view.View: android.view.ViewParent mParent>;

        return $r5;

     label1:
        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r4 = interfaceinvoke $r3.<android.view.ViewParent: android.view.ViewParent getParentForAccessibility()>();

        return $r4;

     label2:
        return null;
    }

    public float getPivotX()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getPivotX()>();

        return $f0;
    }

    public float getPivotY()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getPivotY()>();

        return $f0;
    }

    public android.view.PointerIcon getPointerIcon()
    {
        android.view.View r0;
        android.view.PointerIcon $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.PointerIcon mPointerIcon>;

        return $r1;
    }

    public int getRawLayoutDirection()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 12;

        $i2 = $i1 >> 2;

        return $i2;
    }

    public int getRawTextAlignment()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 57344;

        $i2 = $i1 >> 13;

        return $i2;
    }

    public int getRawTextDirection()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 448;

        $i2 = $i1 >> 6;

        return $i2;
    }

    public android.content.res.Resources getResources()
    {
        android.view.View r0;
        android.content.res.Resources $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.content.res.Resources mResources>;

        return $r1;
    }

    public final boolean getRevealOnFocusHint()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 67108864;

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final int getRight()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mRight>;

        return $i0;
    }

    protected float getRightFadingEdgeStrength()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;
        float f0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollOffset()>();

        $i1 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        $i2 = $i0 + $i1;

        $i3 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        if $i2 >= $i3 goto label1;

        f0 = 1.0F;

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    protected int getRightPaddingOffset()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public android.view.View getRootView()
    {
        android.view.View r0, r3, r4;
        android.view.ViewParent r1;
        boolean $z0;
        android.view.View$AttachInfo r2;

        r0 := @this: android.view.View;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        r3 = r2.<android.view.View$AttachInfo: android.view.View mRootView>;

        if r3 == null goto label1;

        return r3;

     label1:
        r4 = r0;

     label2:
        r1 = r4.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label3;

        $z0 = r1 instanceof android.view.View;

        if $z0 == 0 goto label3;

        r4 = (android.view.View) r1;

        goto label2;

     label3:
        return r4;
    }

    public android.view.WindowInsets getRootWindowInsets()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ViewRootImpl $r2;
        android.view.WindowInsets $r3;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r3 = virtualinvoke $r2.<android.view.ViewRootImpl: android.view.WindowInsets getWindowInsets(boolean)>(0);

        return $r3;

     label1:
        return null;
    }

    public float getRotation()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getRotationZ()>();

        return $f0;
    }

    public float getRotationX()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getRotationX()>();

        return $f0;
    }

    public float getRotationY()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getRotationY()>();

        return $f0;
    }

    public float getScaleX()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getScaleX()>();

        return $f0;
    }

    public float getScaleY()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getScaleY()>();

        return $f0;
    }

    public int getScrollBarDefaultDelayBeforeFade()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        int i0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 != null goto label1;

        i0 = staticinvoke <android.view.ViewConfiguration: int getScrollDefaultDelay()>();

        goto label2;

     label1:
        i0 = r1.<android.view.View$ScrollabilityCache: int scrollBarDefaultDelayBeforeFade>;

     label2:
        return i0;
    }

    public int getScrollBarFadeDuration()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        int i0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 != null goto label1;

        i0 = staticinvoke <android.view.ViewConfiguration: int getScrollBarFadeDuration()>();

        goto label2;

     label1:
        i0 = r1.<android.view.View$ScrollabilityCache: int scrollBarFadeDuration>;

     label2:
        return i0;
    }

    public int getScrollBarSize()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        android.content.Context $r2;
        android.view.ViewConfiguration $r3;
        int i0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 != null goto label1;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r2);

        i0 = virtualinvoke $r3.<android.view.ViewConfiguration: int getScaledScrollBarSize()>();

        goto label2;

     label1:
        i0 = r1.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label2:
        return i0;
    }

    public int getScrollBarStyle()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 50331648;

        return $i1;
    }

    public int getScrollCaptureHint()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags4>;

        $i1 = $i0 & 7168;

        $i2 = $i1 >> 10;

        return $i2;
    }

    void getScrollIndicatorBounds(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $i0 = r0.<android.view.View: int mScrollX>;

        r1.<android.graphics.Rect: int left> = $i0;

        $i2 = r0.<android.view.View: int mScrollX>;

        $i1 = r0.<android.view.View: int mRight>;

        $i4 = $i2 + $i1;

        $i3 = r0.<android.view.View: int mLeft>;

        $i5 = $i4 - $i3;

        r1.<android.graphics.Rect: int right> = $i5;

        $i6 = r0.<android.view.View: int mScrollY>;

        r1.<android.graphics.Rect: int top> = $i6;

        $i8 = r0.<android.view.View: int mScrollY>;

        $i7 = r0.<android.view.View: int mBottom>;

        $i10 = $i8 + $i7;

        $i9 = r0.<android.view.View: int mTop>;

        $i11 = $i10 - $i9;

        r1.<android.graphics.Rect: int bottom> = $i11;

        return;
    }

    public int getScrollIndicators()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 16128;

        $i2 = $i1 >>> 8;

        return $i2;
    }

    public final int getScrollX()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mScrollX>;

        return $i0;
    }

    public final int getScrollY()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mScrollY>;

        return $i0;
    }

    android.view.View getSelfOrParentImportantForA11y()
    {
        android.view.View r0, $r2;
        android.view.ViewParent r1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isImportantForAccessibility()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParentForAccessibility()>();

        $z1 = r1 instanceof android.view.View;

        if $z1 == 0 goto label2;

        $r2 = (android.view.View) r1;

        return $r2;

     label2:
        return null;
    }

    public int getSolidColor()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public int getSourceLayoutResId()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mSourceLayoutId>;

        return $i0;
    }

    public final java.lang.CharSequence getStateDescription()
    {
        android.view.View r0;
        java.lang.CharSequence $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: java.lang.CharSequence mStateDescription>;

        return $r1;
    }

    public android.animation.StateListAnimator getStateListAnimator()
    {
        android.view.View r0;
        android.animation.StateListAnimator $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        return $r1;
    }

    protected int getSuggestedMinimumHeight()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        int $i0, $i1, i2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r1 != null goto label1;

        i2 = r0.<android.view.View: int mMinHeight>;

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mMinHeight>;

        $i1 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

     label2:
        return i2;
    }

    protected int getSuggestedMinimumWidth()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        int $i0, $i1, i2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r1 != null goto label1;

        i2 = r0.<android.view.View: int mMinWidth>;

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mMinWidth>;

        $i1 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i0, $i1);

     label2:
        return i2;
    }

    public java.util.List getSystemGestureExclusionRects()
    {
        android.view.View r0;
        java.util.List $r1, r3;
        android.view.View$ListenerInfo r2;

        r0 := @this: android.view.View;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label1;

        r3 = staticinvoke <android.view.View$ListenerInfo: java.util.List access$1400(android.view.View$ListenerInfo)>(r2);

        if r3 == null goto label1;

        return r3;

     label1:
        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;
    }

    public int getSystemUiVisibility()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mSystemUiVisibility>;

        return $i0;
    }

    public java.lang.Object getTag()
    {
        android.view.View r0;
        java.lang.Object $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: java.lang.Object mTag>;

        return $r1;
    }

    public java.lang.Object getTag(int)
    {
        android.view.View r0;
        int i0;
        android.util.SparseArray r1;
        java.lang.Object $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 = r0.<android.view.View: android.util.SparseArray mKeyedTags>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        return $r2;

     label1:
        return null;
    }

    public int getTextAlignment()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 917504;

        $i2 = $i1 >> 17;

        return $i2;
    }

    public int getTextDirection()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 7168;

        $i2 = $i1 >> 10;

        return $i2;
    }

    public android.view.ThreadedRenderer getThreadedRenderer()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ThreadedRenderer r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public java.lang.CharSequence getTooltip()
    {
        android.view.View r0;
        java.lang.CharSequence $r1;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getTooltipText()>();

        return $r1;
    }

    public java.lang.CharSequence getTooltipText()
    {
        android.view.View r0;
        android.view.View$TooltipInfo r1;
        java.lang.CharSequence r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$TooltipInfo: java.lang.CharSequence mTooltipText>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public android.view.View getTooltipView()
    {
        android.view.View r0, $r5;
        android.view.View$TooltipInfo r1, $r3;
        com.android.internal.view.TooltipPopup $r2, $r4;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        if r1 == null goto label2;

        $r2 = r1.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup>;

        if $r2 != null goto label1;

        goto label2;

     label1:
        $r3 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r4 = $r3.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup>;

        $r5 = virtualinvoke $r4.<com.android.internal.view.TooltipPopup: android.view.View getContentView()>();

        return $r5;

     label2:
        return null;
    }

    public final int getTop()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mTop>;

        return $i0;
    }

    protected float getTopFadingEdgeStrength()
    {
        android.view.View r0;
        int $i0;
        float f0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int computeVerticalScrollOffset()>();

        if $i0 <= 0 goto label1;

        f0 = 1.0F;

        goto label2;

     label1:
        f0 = 0.0F;

     label2:
        return f0;
    }

    protected int getTopPaddingOffset()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public android.view.TouchDelegate getTouchDelegate()
    {
        android.view.View r0;
        android.view.TouchDelegate $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        return $r1;
    }

    public java.util.ArrayList getTouchables()
    {
        android.view.View r0;
        java.util.ArrayList $r2;

        r0 := @this: android.view.View;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        virtualinvoke r0.<android.view.View: void addTouchables(java.util.ArrayList)>($r2);

        return $r2;
    }

    public float getTransitionAlpha()
    {
        android.view.View r0;
        android.view.View$TransformationInfo r1;
        float f0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if r1 == null goto label1;

        f0 = r1.<android.view.View$TransformationInfo: float mTransitionAlpha>;

        goto label2;

     label1:
        f0 = 1.0F;

     label2:
        return f0;
    }

    public java.lang.String getTransitionName()
    {
        android.view.View r0;
        java.lang.String $r1;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: java.lang.String mTransitionName>;

        return $r1;
    }

    public float getTranslationX()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getTranslationX()>();

        return $f0;
    }

    public float getTranslationY()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getTranslationY()>();

        return $f0;
    }

    public float getTranslationZ()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        float $f0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f0 = virtualinvoke $r1.<android.graphics.RenderNode: float getTranslationZ()>();

        return $f0;
    }

    public long getUniqueDrawingId()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        long $l0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $l0 = virtualinvoke $r1.<android.graphics.RenderNode: long getUniqueId()>();

        return $l0;
    }

    public int getVerticalFadingEdgeLength()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isVerticalFadingEdgeEnabled()>();

        if $z0 == 0 goto label1;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label1;

        $i0 = r1.<android.view.View$ScrollabilityCache: int fadingEdgeLength>;

        return $i0;

     label1:
        return 0;
    }

    protected float getVerticalScrollFactor()
    {
        android.view.View r0;
        float $f0, $f1, $f2;
        byte $b0;
        android.util.TypedValue $r2;
        android.content.Context $r3, $r6;
        android.content.res.Resources$Theme $r4;
        boolean $z0;
        java.lang.IllegalStateException $r5;
        android.content.res.Resources $r7;
        android.util.DisplayMetrics $r8;

        r0 := @this: android.view.View;

        $f0 = r0.<android.view.View: float mVerticalScrollFactor>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 != 0 goto label2;

        $r2 = new android.util.TypedValue;

        specialinvoke $r2.<android.util.TypedValue: void <init>()>();

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $z0 = virtualinvoke $r4.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16842829, $r2, 1);

        if $z0 == 0 goto label1;

        $r6 = r0.<android.view.View: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f2 = virtualinvoke $r2.<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>($r8);

        r0.<android.view.View: float mVerticalScrollFactor> = $f2;

        goto label2;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Expected theme to define listPreferredItemHeight.");

        throw $r5;

     label2:
        $f1 = r0.<android.view.View: float mVerticalScrollFactor>;

        return $f1;
    }

    public int getVerticalScrollbarPosition()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mVerticalScrollbarPosition>;

        return $i0;
    }

    public android.graphics.drawable.Drawable getVerticalScrollbarThumbDrawable()
    {
        android.view.View r0;
        android.widget.ScrollBarDrawable $r1;
        android.view.View$ScrollabilityCache r2;
        android.graphics.drawable.Drawable r3;

        r0 := @this: android.view.View;

        r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r2 == null goto label1;

        $r1 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        r3 = virtualinvoke $r1.<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getVerticalThumbDrawable()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public android.graphics.drawable.Drawable getVerticalScrollbarTrackDrawable()
    {
        android.view.View r0;
        android.widget.ScrollBarDrawable $r1;
        android.view.View$ScrollabilityCache r2;
        android.graphics.drawable.Drawable r3;

        r0 := @this: android.view.View;

        r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r2 == null goto label1;

        $r1 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        r3 = virtualinvoke $r1.<android.widget.ScrollBarDrawable: android.graphics.drawable.Drawable getVerticalTrackDrawable()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    public int getVerticalScrollbarWidth()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        android.widget.ScrollBarDrawable r2;
        int i0, i1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label3;

        r2 = r1.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if r2 == null goto label2;

        i0 = virtualinvoke r2.<android.widget.ScrollBarDrawable: int getSize(boolean)>(1);

        i1 = i0;

        if i0 > 0 goto label1;

        i1 = r1.<android.view.View$ScrollabilityCache: int scrollBarSize>;

     label1:
        return i1;

     label2:
        return 0;

     label3:
        return 0;
    }

    public android.view.ViewRootImpl getViewRootImpl()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        return $r2;

     label1:
        return null;
    }

    public android.view.ViewTreeObserver getViewTreeObserver()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ViewTreeObserver $r2, $r3, $r4, $r6;
        android.content.Context $r5;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r6 = r1.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        return $r6;

     label1:
        $r2 = r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        if $r2 != null goto label2;

        $r4 = new android.view.ViewTreeObserver;

        $r5 = r0.<android.view.View: android.content.Context mContext>;

        specialinvoke $r4.<android.view.ViewTreeObserver: void <init>(android.content.Context)>($r5);

        r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver> = $r4;

     label2:
        $r3 = r0.<android.view.View: android.view.ViewTreeObserver mFloatingTreeObserver>;

        return $r3;
    }

    public int getVisibility()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        return $i1;
    }

    public final int getWidth()
    {
        android.view.View r0;
        int $i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mLeft>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    protected android.view.IWindow getWindow()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.IWindow r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    protected int getWindowAttachCount()
    {
        android.view.View r0;
        int $i0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mWindowAttachCount>;

        return $i0;
    }

    public void getWindowDisplayFrame(android.graphics.Rect)
    {
        android.view.View r0;
        android.view.View$AttachInfo r1, $r4;
        android.hardware.display.DisplayManagerGlobal $r2;
        android.view.Display $r3;
        android.view.IWindow $r5;
        android.view.IWindowSession $r6;
        android.os.RemoteException $r7;
        android.graphics.Rect r8;

        r0 := @this: android.view.View;

        r8 := @parameter0: android.graphics.Rect;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label4;

     label1:
        $r6 = r1.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        interfaceinvoke $r6.<android.view.IWindowSession: void getDisplayFrame(android.view.IWindow,android.graphics.Rect)>($r5, r8);

     label2:
        return;

     label3:
        $r7 := @caughtexception;

        return;

     label4:
        $r2 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        $r3 = virtualinvoke $r2.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        virtualinvoke $r3.<android.view.Display: void getRectSize(android.graphics.Rect)>(r8);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.WindowId getWindowId()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.WindowId $r2, r9, $r11;
        android.os.IBinder $r3;
        android.view.IWindowSession $r4;
        android.view.IWindowId $r5, $r6, $r7;
        android.os.RemoteException $r8;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = r1.<android.view.View$AttachInfo: android.view.WindowId mWindowId>;

        if $r2 != null goto label5;

     label2:
        $r4 = r1.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r3 = r1.<android.view.View$AttachInfo: android.os.IBinder mWindowToken>;

        $r5 = interfaceinvoke $r4.<android.view.IWindowSession: android.view.IWindowId getWindowId(android.os.IBinder)>($r3);

        r1.<android.view.View$AttachInfo: android.view.IWindowId mIWindowId> = $r5;

        $r6 = r1.<android.view.View$AttachInfo: android.view.IWindowId mIWindowId>;

        if $r6 == null goto label3;

        r9 = new android.view.WindowId;

        $r7 = r1.<android.view.View$AttachInfo: android.view.IWindowId mIWindowId>;

        specialinvoke r9.<android.view.WindowId: void <init>(android.view.IWindowId)>($r7);

        r1.<android.view.View$AttachInfo: android.view.WindowId mWindowId> = r9;

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        $r11 = r1.<android.view.View$AttachInfo: android.view.WindowId mWindowId>;

        return $r11;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public android.view.WindowInsetsController getWindowInsetsController()
    {
        android.view.View r0, $r3;
        boolean $z0, $z1;
        android.view.ViewRootImpl $r1, $r5;
        android.view.InsetsController $r2, $r6;
        android.view.WindowInsetsController $r4;
        android.view.View$AttachInfo r7;
        android.view.ViewParent r8;

        r0 := @this: android.view.View;

        r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r7 == null goto label1;

        $r5 = r7.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r6 = virtualinvoke $r5.<android.view.ViewRootImpl: android.view.InsetsController getInsetsController()>();

        return $r6;

     label1:
        r8 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = r8 instanceof android.view.View;

        if $z0 == 0 goto label2;

        $r3 = (android.view.View) r8;

        $r4 = virtualinvoke $r3.<android.view.View: android.view.WindowInsetsController getWindowInsetsController()>();

        return $r4;

     label2:
        $z1 = r8 instanceof android.view.ViewRootImpl;

        if $z1 == 0 goto label3;

        $r1 = (android.view.ViewRootImpl) r8;

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl: android.view.InsetsController getInsetsController()>();

        return $r2;

     label3:
        return null;
    }

    android.view.IWindowSession getWindowSession()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.IWindowSession r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public int getWindowSystemUiVisibility()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        int i0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        i0 = r1.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        goto label2;

     label1:
        i0 = 0;

     label2:
        return i0;
    }

    public android.os.IBinder getWindowToken()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.os.IBinder r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = r1.<android.view.View$AttachInfo: android.os.IBinder mWindowToken>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public int getWindowVisibility()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        int i0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        i0 = r1.<android.view.View$AttachInfo: int mWindowVisibility>;

        goto label2;

     label1:
        i0 = 8;

     label2:
        return i0;
    }

    public void getWindowVisibleDisplayFrame(android.graphics.Rect)
    {
        android.view.View r0;
        android.hardware.display.DisplayManagerGlobal $r1;
        android.view.Display $r2;
        android.view.View$AttachInfo $r3, $r6, r9;
        android.view.IWindow $r4;
        android.view.IWindowSession $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.os.RemoteException $r7;
        android.graphics.Rect r8, r10;

        r0 := @this: android.view.View;

        r8 := @parameter0: android.graphics.Rect;

        r9 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r9 == null goto label4;

     label1:
        $r5 = r9.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        interfaceinvoke $r5.<android.view.IWindowSession: void getDisplayFrame(android.view.IWindow,android.graphics.Rect)>($r4, r8);

     label2:
        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r10 = $r6.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        $i1 = r8.<android.graphics.Rect: int left>;

        $i0 = r10.<android.graphics.Rect: int left>;

        $i2 = $i1 + $i0;

        r8.<android.graphics.Rect: int left> = $i2;

        $i4 = r8.<android.graphics.Rect: int top>;

        $i3 = r10.<android.graphics.Rect: int top>;

        $i5 = $i4 + $i3;

        r8.<android.graphics.Rect: int top> = $i5;

        $i7 = r8.<android.graphics.Rect: int right>;

        $i6 = r10.<android.graphics.Rect: int right>;

        $i8 = $i7 - $i6;

        r8.<android.graphics.Rect: int right> = $i8;

        $i10 = r8.<android.graphics.Rect: int bottom>;

        $i9 = r10.<android.graphics.Rect: int bottom>;

        $i11 = $i10 - $i9;

        r8.<android.graphics.Rect: int bottom> = $i11;

        return;

     label3:
        $r7 := @caughtexception;

        return;

     label4:
        $r1 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        $r2 = virtualinvoke $r1.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        virtualinvoke $r2.<android.view.Display: void getRectSize(android.graphics.Rect)>(r8);

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public float getX()
    {
        android.view.View r0;
        int $i0;
        float $f0, $f1, $f2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mLeft>;

        $f0 = (float) $i0;

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationX()>();

        $f2 = $f0 + $f1;

        return $f2;
    }

    public float getY()
    {
        android.view.View r0;
        int $i0;
        float $f0, $f1, $f2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mTop>;

        $f0 = (float) $i0;

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationY()>();

        $f2 = $f0 + $f1;

        return $f2;
    }

    public float getZ()
    {
        android.view.View r0;
        float $f0, $f1, $f2;

        r0 := @this: android.view.View;

        $f0 = virtualinvoke r0.<android.view.View: float getElevation()>();

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationZ()>();

        $f2 = $f0 + $f1;

        return $f2;
    }

    void handleFocusGainInternal(int, android.graphics.Rect)
    {
        android.view.View r0, $r4, r5;
        int i0, i1, $i2, $i3;
        android.graphics.Rect r1;
        android.view.View$AttachInfo $r2, r7;
        android.view.ViewTreeObserver $r3;
        android.view.ViewParent r6;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = i1 & 2;

        if $i2 != 0 goto label5;

        $i3 = i1 | 2;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label1;

        $r4 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        r5 = virtualinvoke $r4.<android.view.View: android.view.View findFocus()>();

        goto label2;

     label1:
        r5 = null;

     label2:
        r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r6 == null goto label3;

        interfaceinvoke r6.<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>(r0, r0);

        specialinvoke r0.<android.view.View: void updateFocusedInCluster(android.view.View,int)>(r5, i0);

     label3:
        r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r7 == null goto label4;

        $r3 = r7.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r3.<android.view.ViewTreeObserver: void dispatchOnGlobalFocusChange(android.view.View,android.view.View)>(r5, r0);

     label4:
        virtualinvoke r0.<android.view.View: void onFocusChanged(boolean,int,android.graphics.Rect)>(1, i0, r1);

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

     label5:
        return;
    }

    protected boolean handleScrollBarDragging(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r21;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, i23, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33, i34, i35, i36, i37;
        boolean $z0, $z1, $z2, $z3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, f22, f23, f24, f25, f26, f27, f28, f29;
        byte $b11, $b20;
        android.view.MotionEvent r18;
        android.graphics.Rect r19, r20;

        r0 := @this: android.view.View;

        r18 := @parameter0: android.view.MotionEvent;

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 != null goto label01;

        return 0;

     label01:
        f22 = virtualinvoke r18.<android.view.MotionEvent: float getX()>();

        f23 = virtualinvoke r18.<android.view.MotionEvent: float getY()>();

        i23 = virtualinvoke r18.<android.view.MotionEvent: int getAction()>();

        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i0 = $r2.<android.view.View$ScrollabilityCache: int mScrollBarDraggingState>;

        if $i0 != 0 goto label02;

        if i23 != 0 goto label13;

     label02:
        $z0 = virtualinvoke r18.<android.view.MotionEvent: boolean isFromSource(int)>(8194);

        if $z0 == 0 goto label13;

        $z1 = virtualinvoke r18.<android.view.MotionEvent: boolean isButtonPressed(int)>(1);

        if $z1 != 0 goto label03;

        goto label13;

     label03:
        if i23 == 0 goto label09;

        if i23 == 2 goto label04;

        goto label12;

     label04:
        $r9 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i2 = $r9.<android.view.View$ScrollabilityCache: int mScrollBarDraggingState>;

        if $i2 != 0 goto label05;

        return 0;

     label05:
        $r10 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i3 = $r10.<android.view.View$ScrollabilityCache: int mScrollBarDraggingState>;

        if $i3 != 1 goto label07;

        $r15 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        r19 = $r15.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarBounds>;

        specialinvoke r0.<android.view.View: void getVerticalScrollBarBounds(android.graphics.Rect,android.graphics.Rect)>(r19, null);

        i24 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        i25 = virtualinvoke r0.<android.view.View: int computeVerticalScrollOffset()>();

        i26 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        $i14 = virtualinvoke r19.<android.graphics.Rect: int height()>();

        $i15 = virtualinvoke r19.<android.graphics.Rect: int width()>();

        i27 = staticinvoke <com.android.internal.widget.ScrollBarUtils: int getThumbLength(int,int,int,int)>($i14, $i15, i26, i24);

        $i16 = virtualinvoke r19.<android.graphics.Rect: int height()>();

        i28 = staticinvoke <com.android.internal.widget.ScrollBarUtils: int getThumbOffset(int,int,int,int,int)>($i16, i27, i26, i24, i25);

        $r16 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        f24 = $r16.<android.view.View$ScrollabilityCache: float mScrollBarDraggingPos>;

        $i17 = virtualinvoke r19.<android.graphics.Rect: int height()>();

        $i18 = $i17 - i27;

        f25 = (float) $i18;

        $f12 = (float) i28;

        $f11 = f23 - f24;

        $f13 = $f12 + $f11;

        $f14 = staticinvoke <java.lang.Math: float max(float,float)>($f13, 0.0F);

        f26 = staticinvoke <java.lang.Math: float min(float,float)>($f14, f25);

        i29 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i19 = staticinvoke <java.lang.Math: int round(float)>(f26);

        if $i19 == i28 goto label06;

        $b20 = f25 cmpl 0.0F;

        if $b20 <= 0 goto label06;

        if i29 <= 0 goto label06;

        if i26 <= 0 goto label06;

        $i21 = i24 - i26;

        $f18 = (float) $i21;

        $f16 = (float) i26;

        $f15 = (float) i29;

        $f17 = $f16 / $f15;

        $f20 = $f18 / $f17;

        $f19 = f26 / f25;

        $f21 = $f20 * $f19;

        i30 = staticinvoke <java.lang.Math: int round(float)>($f21);

        $i22 = virtualinvoke r0.<android.view.View: int getScrollY()>();

        if i30 == $i22 goto label06;

        $r17 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r17.<android.view.View$ScrollabilityCache: float mScrollBarDraggingPos> = f23;

        virtualinvoke r0.<android.view.View: void setScrollY(int)>(i30);

        goto label06;

     label06:
        return 1;

     label07:
        $r11 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i4 = $r11.<android.view.View$ScrollabilityCache: int mScrollBarDraggingState>;

        if $i4 != 2 goto label09;

        $r12 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        r20 = $r12.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarBounds>;

        specialinvoke r0.<android.view.View: void getHorizontalScrollBarBounds(android.graphics.Rect,android.graphics.Rect)>(r20, null);

        i31 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        i32 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollOffset()>();

        i33 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        $i5 = virtualinvoke r20.<android.graphics.Rect: int width()>();

        $i6 = virtualinvoke r20.<android.graphics.Rect: int height()>();

        i34 = staticinvoke <com.android.internal.widget.ScrollBarUtils: int getThumbLength(int,int,int,int)>($i5, $i6, i33, i31);

        $i7 = virtualinvoke r20.<android.graphics.Rect: int width()>();

        i35 = staticinvoke <com.android.internal.widget.ScrollBarUtils: int getThumbOffset(int,int,int,int,int)>($i7, i34, i33, i31, i32);

        $r13 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        f27 = $r13.<android.view.View$ScrollabilityCache: float mScrollBarDraggingPos>;

        $i8 = virtualinvoke r20.<android.graphics.Rect: int width()>();

        $i9 = $i8 - i34;

        f28 = (float) $i9;

        $f1 = (float) i35;

        $f0 = f22 - f27;

        $f2 = $f1 + $f0;

        $f3 = staticinvoke <java.lang.Math: float max(float,float)>($f2, 0.0F);

        f29 = staticinvoke <java.lang.Math: float min(float,float)>($f3, f28);

        i36 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i10 = staticinvoke <java.lang.Math: int round(float)>(f29);

        if $i10 == i35 goto label08;

        $b11 = f28 cmpl 0.0F;

        if $b11 <= 0 goto label08;

        if i36 <= 0 goto label08;

        if i33 <= 0 goto label08;

        $i12 = i31 - i33;

        $f7 = (float) $i12;

        $f5 = (float) i33;

        $f4 = (float) i36;

        $f6 = $f5 / $f4;

        $f9 = $f7 / $f6;

        $f8 = f29 / f28;

        $f10 = $f9 * $f8;

        i37 = staticinvoke <java.lang.Math: int round(float)>($f10);

        $i13 = virtualinvoke r0.<android.view.View: int getScrollX()>();

        if i37 == $i13 goto label08;

        $r14 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r14.<android.view.View$ScrollabilityCache: float mScrollBarDraggingPos> = f22;

        virtualinvoke r0.<android.view.View: void setScrollX(int)>(i37);

        goto label08;

     label08:
        return 1;

     label09:
        $r3 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $i1 = $r3.<android.view.View$ScrollabilityCache: int state>;

        if $i1 != 0 goto label10;

        return 0;

     label10:
        $z2 = specialinvoke r0.<android.view.View: boolean isOnVerticalScrollbarThumb(float,float)>(f22, f23);

        if $z2 == 0 goto label11;

        $r7 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r7.<android.view.View$ScrollabilityCache: int mScrollBarDraggingState> = 1;

        $r8 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r8.<android.view.View$ScrollabilityCache: float mScrollBarDraggingPos> = f23;

        return 1;

     label11:
        $z3 = specialinvoke r0.<android.view.View: boolean isOnHorizontalScrollbarThumb(float,float)>(f22, f23);

        if $z3 == 0 goto label12;

        $r5 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r5.<android.view.View$ScrollabilityCache: int mScrollBarDraggingState> = 2;

        $r6 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r6.<android.view.View$ScrollabilityCache: float mScrollBarDraggingPos> = f22;

        return 1;

     label12:
        $r4 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r4.<android.view.View$ScrollabilityCache: int mScrollBarDraggingState> = 0;

        return 0;

     label13:
        $r21 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r21.<android.view.View$ScrollabilityCache: int mScrollBarDraggingState> = 0;

        return 0;
    }

    void handleTooltipKey(android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        int i0, $i1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        goto label3;

     label1:
        specialinvoke r0.<android.view.View: void handleTooltipUp()>();

        goto label3;

     label2:
        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 != 0 goto label3;

        virtualinvoke r0.<android.view.View: void hideTooltip()>();

     label3:
        return;
    }

    boolean hasDefaultFocus()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isFocusedByDefault()>();

        return $z0;
    }

    public boolean hasExplicitFocusable()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean hasFocusable(boolean,boolean)>(0, 1);

        return $z0;
    }

    public boolean hasFocus()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean hasFocusable()
    {
        android.view.View r0;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.View;

        $z0 = <android.view.View: boolean sHasFocusableExcludeAutoFocusable>;

        $z1 = $z0 ^ 1;

        $z2 = virtualinvoke r0.<android.view.View: boolean hasFocusable(boolean,boolean)>($z1, 0);

        return $z2;
    }

    boolean hasFocusable(boolean, boolean)
    {
        android.view.View r0;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        int i0, $i1, $i2, $i3;
        android.view.ViewGroup $r1;
        android.view.ViewParent r2;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z2 = virtualinvoke r0.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z2 != 0 goto label3;

        r2 = r0.<android.view.View: android.view.ViewParent mParent>;

     label1:
        $z4 = r2 instanceof android.view.ViewGroup;

        if $z4 == 0 goto label3;

        $r1 = (android.view.ViewGroup) r2;

        $z5 = virtualinvoke $r1.<android.view.ViewGroup: boolean shouldBlockFocusForTouchscreen()>();

        if $z5 == 0 goto label2;

        return 0;

     label2:
        r2 = interfaceinvoke r2.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = i0 & 12;

        if $i1 != 0 goto label7;

        $i2 = i0 & 32;

        if $i2 == 0 goto label4;

        goto label7;

     label4:
        if z0 != 0 goto label5;

        $i3 = virtualinvoke r0.<android.view.View: int getFocusable()>();

        if $i3 == 16 goto label6;

     label5:
        $z3 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        if $z3 == 0 goto label6;

        return 1;

     label6:
        return 0;

     label7:
        return 0;
    }

    protected boolean hasHoveredChild()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public final boolean hasIdentityMatrix()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.graphics.RenderNode: boolean hasIdentityMatrix()>();

        return $z0;
    }

    public boolean hasImeFocus()
    {
        android.view.View r0;
        android.view.ViewRootImpl $r1, $r2;
        android.view.ImeFocusController $r3;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        $r3 = virtualinvoke $r2.<android.view.ViewRootImpl: android.view.ImeFocusController getImeFocusController()>();

        $z0 = virtualinvoke $r3.<android.view.ImeFocusController: boolean hasImeFocus()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean hasNestedScrollingParent()
    {
        android.view.View r0;
        android.view.ViewParent $r1;
        boolean z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean hasOnClickListeners()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnClickListener $r2;
        boolean z0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener>;

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean hasOnLongClickListeners()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnLongClickListener $r2;
        boolean z0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnLongClickListener mOnLongClickListener>;

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean hasOpaqueScrollbars()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 16777216;

        if $i1 != 16777216 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean hasOverlappingRendering()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 1;
    }

    public boolean hasPointerCapture()
    {
        android.view.View r0;
        android.view.ViewRootImpl r1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<android.view.ViewRootImpl: boolean hasPointerCapture()>();

        return $z0;
    }

    public boolean hasShadow()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.graphics.RenderNode: boolean hasShadow()>();

        return $z0;
    }

    public boolean hasTransientState()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -2147483648;

        if $i1 != -2147483648 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean hasUnhandledKeyListener()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1, $r3;
        java.util.ArrayList $r2, $r4;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4200(android.view.View$ListenerInfo)>(r1);

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4200(android.view.View$ListenerInfo)>($r3);

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean hasWindowFocus()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $z0 = r1.<android.view.View$AttachInfo: boolean mHasWindowFocus>;

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean hasWindowInsetsAnimationCallback()
    {
        android.view.View r0;
        android.view.View$ListenerInfo $r1;
        android.view.WindowInsetsAnimation$Callback $r2;
        boolean z0;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2 = $r1.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback>;

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean hideAutofillHighlight()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags4>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void hideTooltip()
    {
        android.view.View r0;
        java.lang.Runnable $r1;
        android.view.View$TooltipInfo $r2, $r4, $r6, $r7, $r8, r9;
        com.android.internal.view.TooltipPopup $r3, $r5;
        android.view.View$AttachInfo r10;

        r0 := @this: android.view.View;

        r9 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        if r9 != null goto label1;

        return;

     label1:
        $r1 = r9.<android.view.View$TooltipInfo: java.lang.Runnable mShowTooltipRunnable>;

        virtualinvoke r0.<android.view.View: boolean removeCallbacks(java.lang.Runnable)>($r1);

        $r2 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r3 = $r2.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup>;

        if $r3 != null goto label2;

        return;

     label2:
        $r4 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r5 = $r4.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup>;

        virtualinvoke $r5.<com.android.internal.view.TooltipPopup: void hide()>();

        $r6 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r6.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup> = null;

        $r7 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r7.<android.view.View$TooltipInfo: boolean mTooltipFromLongClick> = 0;

        $r8 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        staticinvoke <android.view.View$TooltipInfo: void access$4000(android.view.View$TooltipInfo)>($r8);

        r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r10 == null goto label3;

        r10.<android.view.View$AttachInfo: android.view.View mTooltipHost> = null;

     label3:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        return;
    }

    public boolean includeForAccessibility()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        int $i0, $i1;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        z1 = 0;

        if r1 == null goto label3;

        $i0 = r1.<android.view.View$AttachInfo: int mAccessibilityFetchFlags>;

        $i1 = $i0 & 8;

        if $i1 != 0 goto label1;

        $z0 = virtualinvoke r0.<android.view.View: boolean isImportantForAccessibility()>();

        if $z0 == 0 goto label2;

     label1:
        z1 = 1;

     label2:
        return z1;

     label3:
        return 0;
    }

    protected void initializeFadingEdge(android.content.res.TypedArray)
    {
        android.view.View r0;
        int[] $r1;
        android.content.Context $r2;
        android.content.res.TypedArray r3, r4;

        r0 := @this: android.view.View;

        r3 := @parameter0: android.content.res.TypedArray;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r1 = <com.android.internal.R$styleable: int[] View>;

        r4 = virtualinvoke $r2.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r1);

        virtualinvoke r0.<android.view.View: void initializeFadingEdgeInternal(android.content.res.TypedArray)>(r4);

        virtualinvoke r4.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    protected void initializeFadingEdgeInternal(android.content.res.TypedArray)
    {
        android.view.View r0;
        android.content.res.TypedArray r1;
        android.content.Context $r2;
        android.view.View$ScrollabilityCache $r3;
        android.view.ViewConfiguration $r4;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.TypedArray;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        $r3 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r2);

        $i0 = virtualinvoke $r4.<android.view.ViewConfiguration: int getScaledFadingEdgeLength()>();

        $i1 = virtualinvoke r1.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(25, $i0);

        $r3.<android.view.View$ScrollabilityCache: int fadingEdgeLength> = $i1;

        return;
    }

    protected void initializeScrollbars(android.content.res.TypedArray)
    {
        android.view.View r0;
        int[] $r1;
        android.content.Context $r2;
        android.content.res.TypedArray r3, r4;

        r0 := @this: android.view.View;

        r3 := @parameter0: android.content.res.TypedArray;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r1 = <com.android.internal.R$styleable: int[] View>;

        r4 = virtualinvoke $r2.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r1);

        virtualinvoke r0.<android.view.View: void initializeScrollbarsInternal(android.content.res.TypedArray)>(r4);

        virtualinvoke r4.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    protected void initializeScrollbarsInternal(android.content.res.TypedArray)
    {
        android.view.View r0;
        android.content.res.TypedArray r1;
        android.view.View$ScrollabilityCache r2;
        boolean z0, $z1, $z2;
        android.graphics.drawable.Drawable r3, r17, r18, r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.widget.ScrollBarDrawable $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r16;
        android.content.Context $r5;
        android.view.ViewConfiguration $r6;
        int[] $r15;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.TypedArray;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r4 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if $r4 != null goto label1;

        $r13 = new android.widget.ScrollBarDrawable;

        specialinvoke $r13.<android.widget.ScrollBarDrawable: void <init>()>();

        r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar> = $r13;

        $r14 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        $r15 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke $r14.<android.widget.ScrollBarDrawable: boolean setState(int[])>($r15);

        $r16 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r16.<android.widget.ScrollBarDrawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

     label1:
        z0 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(47, 1);

        if z0 != 0 goto label2;

        r2.<android.view.View$ScrollabilityCache: int state> = 1;

     label2:
        r2.<android.view.View$ScrollabilityCache: boolean fadeScrollBars> = z0;

        $i1 = staticinvoke <android.view.ViewConfiguration: int getScrollBarFadeDuration()>();

        $i2 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(45, $i1);

        r2.<android.view.View$ScrollabilityCache: int scrollBarFadeDuration> = $i2;

        $i3 = staticinvoke <android.view.ViewConfiguration: int getScrollDefaultDelay()>();

        $i4 = virtualinvoke r1.<android.content.res.TypedArray: int getInt(int,int)>(46, $i3);

        r2.<android.view.View$ScrollabilityCache: int scrollBarDefaultDelayBeforeFade> = $i4;

        $r5 = r0.<android.view.View: android.content.Context mContext>;

        $r6 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r5);

        $i5 = virtualinvoke $r6.<android.view.ViewConfiguration: int getScaledScrollBarSize()>();

        $i6 = virtualinvoke r1.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(1, $i5);

        r2.<android.view.View$ScrollabilityCache: int scrollBarSize> = $i6;

        r17 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(4);

        $r7 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r7.<android.widget.ScrollBarDrawable: void setHorizontalTrackDrawable(android.graphics.drawable.Drawable)>(r17);

        r18 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(2);

        if r18 == null goto label3;

        $r12 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r12.<android.widget.ScrollBarDrawable: void setHorizontalThumbDrawable(android.graphics.drawable.Drawable)>(r18);

     label3:
        $z1 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(6, 0);

        if $z1 == 0 goto label4;

        $r11 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r11.<android.widget.ScrollBarDrawable: void setAlwaysDrawHorizontalTrack(boolean)>(1);

     label4:
        r3 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(5);

        $r8 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r8.<android.widget.ScrollBarDrawable: void setVerticalTrackDrawable(android.graphics.drawable.Drawable)>(r3);

        r19 = virtualinvoke r1.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(3);

        if r19 == null goto label5;

        $r10 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r10.<android.widget.ScrollBarDrawable: void setVerticalThumbDrawable(android.graphics.drawable.Drawable)>(r19);

     label5:
        $z2 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(7, 0);

        if $z2 == 0 goto label6;

        $r9 = r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r9.<android.widget.ScrollBarDrawable: void setAlwaysDrawVerticalTrack(boolean)>(1);

     label6:
        i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        if r3 == null goto label7;

        virtualinvoke r3.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>(i0);

     label7:
        if r19 == null goto label8;

        virtualinvoke r19.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>(i0);

     label8:
        virtualinvoke r0.<android.view.View: void resolvePadding()>();

        return;
    }

    protected void internalSetPadding(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, i18, i19, $i20, i21, $i22;
        boolean $z1, z2;

        r0 := @this: android.view.View;

        i12 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r0.<android.view.View: int mUserPaddingLeft> = i12;

        r0.<android.view.View: int mUserPaddingRight> = i1;

        r0.<android.view.View: int mUserPaddingBottom> = i2;

        i3 = r0.<android.view.View: int mViewFlags>;

        i13 = i12;

        i14 = i1;

        i15 = i2;

        $i5 = i3 & 768;

        if $i5 == 0 goto label10;

        i16 = i12;

        i17 = i1;

        $i9 = i3 & 512;

        if $i9 == 0 goto label07;

        $i11 = i3 & 16777216;

        if $i11 != 0 goto label01;

        i18 = 0;

        goto label02;

     label01:
        i18 = virtualinvoke r0.<android.view.View: int getVerticalScrollbarWidth()>();

     label02:
        i19 = r0.<android.view.View: int mVerticalScrollbarPosition>;

        if i19 == 0 goto label05;

        if i19 == 1 goto label04;

        if i19 == 2 goto label03;

        i16 = i12;

        i17 = i1;

        goto label07;

     label03:
        i17 = i1 + i18;

        i16 = i12;

        goto label07;

     label04:
        i16 = i12 + i18;

        i17 = i1;

        goto label07;

     label05:
        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutRtl()>();

        if $z1 == 0 goto label06;

        i16 = i12 + i18;

        i17 = i1;

        goto label07;

     label06:
        i17 = i1 + i18;

        i16 = i12;

     label07:
        i13 = i16;

        i14 = i17;

        i15 = i2;

        $i20 = i3 & 256;

        if $i20 == 0 goto label10;

        $i10 = i3 & 16777216;

        if $i10 != 0 goto label08;

        i21 = 0;

        goto label09;

     label08:
        i21 = virtualinvoke r0.<android.view.View: int getHorizontalScrollbarHeight()>();

     label09:
        i15 = i2 + i21;

        i14 = i17;

        i13 = i16;

     label10:
        z2 = 0;

        $i22 = r0.<android.view.View: int mPaddingLeft>;

        if $i22 == i13 goto label11;

        z2 = 1;

        r0.<android.view.View: int mPaddingLeft> = i13;

     label11:
        $i6 = r0.<android.view.View: int mPaddingTop>;

        if $i6 == i0 goto label12;

        z2 = 1;

        r0.<android.view.View: int mPaddingTop> = i0;

     label12:
        $i7 = r0.<android.view.View: int mPaddingRight>;

        if $i7 == i14 goto label13;

        z2 = 1;

        r0.<android.view.View: int mPaddingRight> = i14;

     label13:
        $i8 = r0.<android.view.View: int mPaddingBottom>;

        if $i8 == i15 goto label14;

        z2 = 1;

        r0.<android.view.View: int mPaddingBottom> = i15;

     label14:
        if z2 == 0 goto label15;

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        virtualinvoke r0.<android.view.View: void invalidateOutline()>();

     label15:
        return;
    }

    public void invalidate()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        return;
    }

    public void invalidate(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 = r0.<android.view.View: int mScrollX>;

        i5 = r0.<android.view.View: int mScrollY>;

        $i9 = i0 - i4;

        $i8 = i1 - i5;

        $i7 = i2 - i4;

        $i6 = i3 - i5;

        virtualinvoke r0.<android.view.View: void invalidateInternal(int,int,int,int,boolean,boolean)>($i9, $i8, $i7, $i6, 1, 0);

        return;
    }

    public void invalidate(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        i0 = r0.<android.view.View: int mScrollX>;

        i1 = r0.<android.view.View: int mScrollY>;

        $i2 = r1.<android.graphics.Rect: int left>;

        $i9 = $i2 - i0;

        $i3 = r1.<android.graphics.Rect: int top>;

        $i8 = $i3 - i1;

        $i4 = r1.<android.graphics.Rect: int right>;

        $i7 = $i4 - i0;

        $i5 = r1.<android.graphics.Rect: int bottom>;

        $i6 = $i5 - i1;

        virtualinvoke r0.<android.view.View: void invalidateInternal(int,int,int,int,boolean,boolean)>($i9, $i8, $i7, $i6, 1, 0);

        return;
    }

    public void invalidate(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mLeft>;

        $i5 = $i1 - $i0;

        $i3 = r0.<android.view.View: int mBottom>;

        $i2 = r0.<android.view.View: int mTop>;

        $i4 = $i3 - $i2;

        virtualinvoke r0.<android.view.View: void invalidateInternal(int,int,int,int,boolean,boolean)>(0, 0, $i5, $i4, z0, 1);

        return;
    }

    public void invalidateDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        boolean $z0;
        android.graphics.drawable.Drawable r1;
        android.graphics.Rect r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $z0 = virtualinvoke r0.<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>(r1);

        if $z0 == 0 goto label1;

        r2 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Rect getDirtyBounds()>();

        i0 = r0.<android.view.View: int mScrollX>;

        i1 = r0.<android.view.View: int mScrollY>;

        $i2 = r2.<android.graphics.Rect: int left>;

        $i9 = $i2 + i0;

        $i3 = r2.<android.graphics.Rect: int top>;

        $i8 = $i3 + i1;

        $i4 = r2.<android.graphics.Rect: int right>;

        $i7 = $i4 + i0;

        $i5 = r2.<android.graphics.Rect: int bottom>;

        $i6 = $i5 + i1;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>($i9, $i8, $i7, $i6);

        specialinvoke r0.<android.view.View: void rebuildOutline()>();

     label1:
        return;
    }

    void invalidateInheritedLayoutMode(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    void invalidateInternal(int, int, int, int, boolean, boolean)
    {
        android.view.View r0, r6;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        android.view.GhostView r1;
        android.view.View$AttachInfo r2;
        android.view.ViewParent r3;
        android.graphics.Rect r4;
        android.graphics.drawable.Drawable r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        r1 = r0.<android.view.View: android.view.GhostView mGhostView>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.GhostView: void invalidate(boolean)>(1);

        return;

     label1:
        $z2 = specialinvoke r0.<android.view.View: boolean skipInvalidate()>();

        if $z2 == 0 goto label2;

        return;

     label2:
        $i4 = r0.<android.view.View: int mPrivateFlags4>;

        $i5 = $i4 & -193;

        r0.<android.view.View: int mPrivateFlags4> = $i5;

        r0.<android.view.View: boolean mContentCaptureSessionCached> = 0;

        i14 = r0.<android.view.View: int mPrivateFlags>;

        $i6 = i14 & 48;

        if $i6 == 48 goto label4;

        if z0 == 0 goto label3;

        $i13 = i14 & 32768;

        if $i13 == 32768 goto label4;

     label3:
        $i11 = r0.<android.view.View: int mPrivateFlags>;

        $i12 = $i11 & -2147483648;

        if $i12 != -2147483648 goto label4;

        if z1 == 0 goto label8;

        $z5 = virtualinvoke r0.<android.view.View: boolean isOpaque()>();

        $z6 = r0.<android.view.View: boolean mLastIsOpaque>;

        if $z5 == $z6 goto label8;

     label4:
        if z1 == 0 goto label5;

        $z4 = virtualinvoke r0.<android.view.View: boolean isOpaque()>();

        r0.<android.view.View: boolean mLastIsOpaque> = $z4;

        $i9 = r0.<android.view.View: int mPrivateFlags>;

        $i10 = $i9 & -33;

        r0.<android.view.View: int mPrivateFlags> = $i10;

     label5:
        $i7 = r0.<android.view.View: int mPrivateFlags>;

        i15 = $i7 | 2097152;

        r0.<android.view.View: int mPrivateFlags> = i15;

        if z0 == 0 goto label6;

        i16 = i15 | -2147483648;

        r0.<android.view.View: int mPrivateFlags> = i16;

        $i8 = i16 & -32769;

        r0.<android.view.View: int mPrivateFlags> = $i8;

     label6:
        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r3 == null goto label7;

        if r2 == null goto label7;

        if i0 >= i2 goto label7;

        if i1 >= i3 goto label7;

        r4 = r2.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        virtualinvoke r4.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

        interfaceinvoke r3.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>(r0, r4);

     label7:
        r5 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r5 == null goto label8;

        $z3 = virtualinvoke r5.<android.graphics.drawable.Drawable: boolean isProjected()>();

        if $z3 == 0 goto label8;

        r6 = specialinvoke r0.<android.view.View: android.view.View getProjectionReceiver()>();

        if r6 == null goto label8;

        virtualinvoke r6.<android.view.View: void damageInParent()>();

     label8:
        return;
    }

    public void invalidateOutline()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void rebuildOutline()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        return;
    }

    protected void invalidateParentCaches()
    {
        android.view.View r0, r2;
        boolean $z0;
        int $i0, $i1;
        android.view.ViewParent r1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r1 instanceof android.view.View;

        if $z0 == 0 goto label1;

        r2 = (android.view.View) r1;

        $i0 = r2.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | -2147483648;

        r2.<android.view.View: int mPrivateFlags> = $i1;

     label1:
        return;
    }

    protected void invalidateParentIfNeeded()
    {
        android.view.View r0, $r2;
        android.view.ViewParent r1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z0 == 0 goto label1;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z1 = r1 instanceof android.view.View;

        if $z1 == 0 goto label1;

        $r2 = (android.view.View) r1;

        virtualinvoke $r2.<android.view.View: void invalidate(boolean)>(1);

     label1:
        return;
    }

    protected void invalidateParentIfNeededAndWasQuickRejected()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 268435456;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label1:
        return;
    }

    void invalidateViewProperty(boolean, boolean)
    {
        android.view.View r0;
        boolean z0, z1, $z2, $z3;
        int $i0, $i1, $i2, $i3;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z2 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z2 == 0 goto label2;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z3 = virtualinvoke $r1.<android.graphics.RenderNode: boolean hasDisplayList()>();

        if $z3 == 0 goto label2;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 64;

        if $i3 == 0 goto label1;

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void damageInParent()>();

        goto label5;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

     label3:
        if z1 == 0 goto label4;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i1;

     label4:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(0);

     label5:
        return;
    }

    public boolean isAccessibilityFocused()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isAccessibilityFocusedViewOrHost()
    {
        android.view.View r0, $r3;
        boolean $z0, z1;
        android.view.ViewRootImpl $r1, $r2;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocused()>();

        if $z0 != 0 goto label2;

        $r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        $r3 = virtualinvoke $r2.<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()>();

        if $r3 != r0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public boolean isAccessibilityHeading()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isAccessibilitySelectionExtendable()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public boolean isActionableForAccessibility()
    {
        android.view.View r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    public boolean isActivated()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 1073741824;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isAggregatedVisible()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isAssistBlocked()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 16384;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isAttachedToWindow()
    {
        android.view.View r0;
        android.view.View$AttachInfo $r1;
        boolean z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isAutofilled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 65536;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isClickable()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 16384;

        if $i1 != 16384 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isContextClickable()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 8388608;

        if $i1 != 8388608 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDefaultFocusHighlightNeeded(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1, r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8, $z9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        z7 = 0;

        if r1 == null goto label1;

        $z5 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z5 == 0 goto label1;

        $z6 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean hasFocusStateSpecified()>();

        if $z6 != 0 goto label2;

     label1:
        if r2 == null goto label3;

        $z3 = virtualinvoke r2.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z3 == 0 goto label3;

        $z4 = virtualinvoke r2.<android.graphics.drawable.Drawable: boolean hasFocusStateSpecified()>();

        if $z4 != 0 goto label2;

        goto label3;

     label2:
        z8 = 0;

        goto label4;

     label3:
        z8 = 1;

     label4:
        $z9 = virtualinvoke r0.<android.view.View: boolean isInTouchMode()>();

        if $z9 != 0 goto label5;

        $z0 = virtualinvoke r0.<android.view.View: boolean getDefaultFocusHighlightEnabled()>();

        if $z0 == 0 goto label5;

        if z8 == 0 goto label5;

        $z1 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z1 == 0 goto label5;

        $z2 = <android.view.View: boolean sUseDefaultFocusHighlight>;

        if $z2 == 0 goto label5;

        z7 = 1;

        goto label5;

     label5:
        return z7;
    }

    public boolean isDirty()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 2097152;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isDraggingScrollBar()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        int $i0;
        boolean z0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label1;

        $i0 = r1.<android.view.View$ScrollabilityCache: int mScrollBarDraggingState>;

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDrawingCacheEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32768;

        if $i1 != 32768 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isDuplicateParentStateEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 4194304;

        if $i1 != 4194304 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isFocusable()
    {
        android.view.View r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        i0 = r0.<android.view.View: int mViewFlags>;

        z0 = 1;

        $i1 = i0 & 1;

        if 1 != $i1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isFocusableInTouchMode()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 262144;

        if 262144 != $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isFocused()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isFocusedByDefault()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 262144;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isForceDarkAllowed()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.graphics.RenderNode: boolean isForceDarkAllowed()>();

        return $z0;
    }

    public boolean isForegroundInsidePadding()
    {
        android.view.View r0;
        android.view.View$ForegroundInfo r1;
        boolean z0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r1 == null goto label1;

        z0 = staticinvoke <android.view.View$ForegroundInfo: boolean access$100(android.view.View$ForegroundInfo)>(r1);

        goto label2;

     label1:
        z0 = 1;

     label2:
        return z0;
    }

    public boolean isFrameworkOptionalFitsSystemWindows()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags4>;

        $i1 = $i0 & 256;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isHapticFeedbackEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 268435456;

        if 268435456 != $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isHardwareAccelerated()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $z0 = r1.<android.view.View$AttachInfo: boolean mHardwareAccelerated>;

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isHorizontalFadingEdgeEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 4096;

        if $i1 != 4096 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isHorizontalScrollBarEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 256;

        if $i1 != 256 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isHovered()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 268435456;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isImportantForAccessibility()
    {
        android.view.View r0, $r2;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, z4;
        android.view.accessibility.AccessibilityNodeProvider $r1;
        android.view.ViewParent r3;

        r0 := @this: android.view.View;

        i0 = virtualinvoke r0.<android.view.View: int getImportantForAccessibility()>();

        z4 = 0;

        if i0 == 2 goto label7;

        if i0 != 4 goto label1;

        goto label7;

     label1:
        r3 = r0.<android.view.View: android.view.ViewParent mParent>;

     label2:
        $z0 = r3 instanceof android.view.View;

        if $z0 == 0 goto label4;

        $r2 = (android.view.View) r3;

        $i2 = virtualinvoke $r2.<android.view.View: int getImportantForAccessibility()>();

        if $i2 != 4 goto label3;

        return 0;

     label3:
        r3 = interfaceinvoke r3.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label2;

     label4:
        if i0 == 1 goto label5;

        $z1 = virtualinvoke r0.<android.view.View: boolean isActionableForAccessibility()>();

        if $z1 != 0 goto label5;

        $z2 = specialinvoke r0.<android.view.View: boolean hasListenersForAccessibility()>();

        if $z2 != 0 goto label5;

        $r1 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $r1 != null goto label5;

        $i1 = virtualinvoke r0.<android.view.View: int getAccessibilityLiveRegion()>();

        if $i1 != 0 goto label5;

        $z3 = specialinvoke r0.<android.view.View: boolean isAccessibilityPane()>();

        if $z3 == 0 goto label6;

     label5:
        z4 = 1;

     label6:
        return z4;

     label7:
        return 0;
    }

    public final boolean isImportantForAutofill()
    {
        android.view.View r0, $r7;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r1, $r5, $r8;
        java.lang.String $r2, $r4, $r6, $r9, r15, r16, r17, r19;
        android.content.Context $r3;
        android.content.res.Resources$NotFoundException $r10;
        android.view.ViewParent r11;
        int i0, i1, i2;
        android.content.res.Resources r14;
        java.lang.String[] $r20;

        r0 := @this: android.view.View;

        r11 = r0.<android.view.View: android.view.ViewParent mParent>;

     label01:
        $z0 = r11 instanceof android.view.View;

        if $z0 == 0 goto label05;

        $r7 = (android.view.View) r11;

        i0 = virtualinvoke $r7.<android.view.View: int getImportantForAutofill()>();

        if i0 == 8 goto label03;

        if i0 != 4 goto label02;

        goto label03;

     label02:
        r11 = interfaceinvoke r11.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label01;

     label03:
        $z4 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("View.Autofill", 2);

        if $z4 == 0 goto label04;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View (");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not important for autofill because parent ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r11);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'s importance is ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("View.Autofill", $r9);

     label04:
        return 0;

     label05:
        i1 = virtualinvoke r0.<android.view.View: int getImportantForAutofill()>();

        if i1 == 4 goto label19;

        if i1 != 1 goto label06;

        goto label19;

     label06:
        if i1 == 8 goto label17;

        if i1 != 2 goto label07;

        goto label17;

     label07:
        if i1 == 0 goto label08;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid autofill importance (");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on view ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View.Autofill", $r6);

        return 0;

     label08:
        i2 = r0.<android.view.View: int mID>;

        if i2 == -1 goto label15;

        $z2 = staticinvoke <android.view.View: boolean isViewIdGenerated(int)>(i2);

        if $z2 != 0 goto label15;

        r14 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        r15 = null;

     label09:
        r16 = virtualinvoke r14.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>(i2);

     label10:
        r15 = r16;

     label11:
        r17 = virtualinvoke r14.<android.content.res.Resources: java.lang.String getResourcePackageName(int)>(i2);

     label12:
        r15 = r16;

        r19 = r17;

        goto label14;

     label13:
        $r10 := @caughtexception;

        r19 = null;

     label14:
        if r15 == null goto label15;

        if r19 == null goto label15;

        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        $z3 = virtualinvoke r19.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z3 == 0 goto label15;

        return 1;

     label15:
        $r20 = virtualinvoke r0.<android.view.View: java.lang.String[] getAutofillHints()>();

        if $r20 == null goto label16;

        return 1;

     label16:
        return 0;

     label17:
        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("View.Autofill", 2);

        if $z1 == 0 goto label18;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View (");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is not important for autofill because its importance is ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("View.Autofill", $r2);

     label18:
        return 0;

     label19:
        return 1;

        catch android.content.res.Resources$NotFoundException from label09 to label10 with label13;
        catch android.content.res.Resources$NotFoundException from label11 to label12 with label13;
    }

    public final boolean isImportantForContentCapture()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        boolean z0, z1;

        r0 := @this: android.view.View;

        i6 = r0.<android.view.View: int mPrivateFlags4>;

        $i0 = i6 & 64;

        if $i0 == 0 goto label3;

        $i5 = i6 & 128;

        if $i5 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        z1 = specialinvoke r0.<android.view.View: boolean calculateIsImportantForContentCapture()>();

        $i1 = r0.<android.view.View: int mPrivateFlags4>;

        i7 = $i1 & -129;

        r0.<android.view.View: int mPrivateFlags4> = i7;

        if z1 == 0 goto label4;

        $i4 = i7 | 128;

        r0.<android.view.View: int mPrivateFlags4> = $i4;

     label4:
        $i2 = r0.<android.view.View: int mPrivateFlags4>;

        $i3 = $i2 | 64;

        r0.<android.view.View: int mPrivateFlags4> = $i3;

        return z1;
    }

    public boolean isInEditMode()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public boolean isInLayout()
    {
        android.view.View r0;
        android.view.ViewRootImpl r1;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.view.ViewRootImpl: boolean isInLayout()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isInScrollingContainer()
    {
        android.view.View r0;
        boolean $z0, $z1;
        android.view.ViewGroup $r1;
        android.view.ViewParent r2;

        r0 := @this: android.view.View;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

     label1:
        if r2 == null goto label3;

        $z0 = r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label3;

        $r1 = (android.view.ViewGroup) r2;

        $z1 = virtualinvoke $r1.<android.view.ViewGroup: boolean shouldDelayChildPressedState()>();

        if $z1 == 0 goto label2;

        return 1;

     label2:
        r2 = interfaceinvoke r2.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label1;

     label3:
        return 0;
    }

    public boolean isInTouchMode()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $z1 = r1.<android.view.View$AttachInfo: boolean mInTouchMode>;

        return $z1;

     label1:
        $z0 = staticinvoke <android.view.ViewRootImpl: boolean isInTouchMode()>();

        return $z0;
    }

    public final boolean isKeyboardNavigationCluster()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 32768;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isLaidOut()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 4;

        if $i1 != 4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isLayoutDirectionInherited()
    {
        android.view.View r0;
        int $i0;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawLayoutDirection()>();

        if $i0 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isLayoutDirectionResolved()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 32;

        if $i1 != 32 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isLayoutRequested()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 4096;

        if $i1 != 4096 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isLayoutRtl()
    {
        android.view.View r0;
        int i0;
        boolean z0;

        r0 := @this: android.view.View;

        i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isLayoutValid()
    {
        android.view.View r0;
        boolean $z0, z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isLaidOut()>();

        if $z0 == 0 goto label1;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 4096;

        if $i1 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isLongClickable()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 2097152;

        if $i1 != 2097152 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isNestedScrollingEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 128;

        if $i1 != 128 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isOnScrollbar(float, float)
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache $r1, $r2, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        float $f0, $f1, f2, f3, f4, f5;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z6;
        android.graphics.Rect r4, r5;

        r0 := @this: android.view.View;

        f2 := @parameter0: float;

        f3 := @parameter1: float;

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if $r1 != null goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<android.view.View: int getScrollX()>();

        $f0 = (float) $i0;

        f4 = f2 + $f0;

        $i1 = virtualinvoke r0.<android.view.View: int getScrollY()>();

        $f1 = (float) $i1;

        f5 = f3 + $f1;

        $i2 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        $i3 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        if $i2 <= $i3 goto label2;

        z5 = 1;

        goto label3;

     label2:
        z5 = 0;

     label3:
        $z0 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarEnabled()>();

        if $z0 == 0 goto label4;

        $z3 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarHidden()>();

        if $z3 != 0 goto label4;

        if z5 == 0 goto label4;

        $r3 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        r4 = $r3.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarTouchBounds>;

        specialinvoke r0.<android.view.View: void getVerticalScrollBarBounds(android.graphics.Rect,android.graphics.Rect)>(null, r4);

        $i7 = (int) f4;

        $i6 = (int) f5;

        $z4 = virtualinvoke r4.<android.graphics.Rect: boolean contains(int,int)>($i7, $i6);

        if $z4 == 0 goto label4;

        return 1;

     label4:
        $i8 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        $i9 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        if $i8 <= $i9 goto label5;

        z6 = 1;

        goto label6;

     label5:
        z6 = 0;

     label6:
        $z1 = virtualinvoke r0.<android.view.View: boolean isHorizontalScrollBarEnabled()>();

        if $z1 == 0 goto label7;

        if z6 == 0 goto label7;

        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        r5 = $r2.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarTouchBounds>;

        specialinvoke r0.<android.view.View: void getHorizontalScrollBarBounds(android.graphics.Rect,android.graphics.Rect)>(null, r5);

        $i5 = (int) f4;

        $i4 = (int) f5;

        $z2 = virtualinvoke r5.<android.graphics.Rect: boolean contains(int,int)>($i5, $i4);

        if $z2 == 0 goto label7;

        return 1;

     label7:
        return 0;
    }

    boolean isOnScrollbarThumb(float, float)
    {
        android.view.View r0;
        float f0, f1;
        boolean $z0, $z1, z2;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = specialinvoke r0.<android.view.View: boolean isOnVerticalScrollbarThumb(float,float)>(f0, f1);

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<android.view.View: boolean isOnHorizontalScrollbarThumb(float,float)>(f0, f1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean isOpaque()
    {
        android.view.View r0;
        int $i0, $i1;
        float $f0;
        byte $b2;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 25165824;

        if $i1 != 25165824 goto label1;

        $f0 = specialinvoke r0.<android.view.View: float getFinalAlpha()>();

        $b2 = $f0 cmpl 1.0F;

        if $b2 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean isPaddingOffsetRequired()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public boolean isPaddingRelative()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mUserPaddingStart>;

        if $i0 != -2147483648 goto label2;

        $i1 = r0.<android.view.View: int mUserPaddingEnd>;

        if $i1 == -2147483648 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean isPaddingResolved()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 536870912;

        if $i1 != 536870912 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isPivotSet()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.graphics.RenderNode: boolean isPivotExplicitlySet()>();

        return $z0;
    }

    public boolean isPressed()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 16384;

        if $i1 != 16384 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isRootNamespace()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 8;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isSaveEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 65536;

        if $i1 == 65536 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isSaveFromParentEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 536870912 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isScreenReaderFocusable()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 268435456;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isScrollContainer()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 1048576;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isScrollbarFadingEnabled()
    {
        android.view.View r0;
        android.view.View$ScrollabilityCache r1;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r1 == null goto label1;

        $z0 = r1.<android.view.View$ScrollabilityCache: boolean fadeScrollBars>;

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isSelected()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isShowingLayoutBounds()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        boolean $z0, $z1, z2;

        r0 := @this: android.view.View;

        $z0 = <android.view.View: boolean DEBUG_DRAW>;

        if $z0 != 0 goto label2;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $z1 = r1.<android.view.View$AttachInfo: boolean mDebugLayout>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean isShown()
    {
        android.view.View r0, r1;
        int $i0, $i1;
        boolean $z0;
        android.view.ViewParent r2;

        r0 := @this: android.view.View;

        r1 = r0;

     label1:
        $i0 = r1.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        if $i1 == 0 goto label2;

        return 0;

     label2:
        r2 = r1.<android.view.View: android.view.ViewParent mParent>;

        if r2 != null goto label3;

        return 0;

     label3:
        $z0 = r2 instanceof android.view.View;

        if $z0 != 0 goto label4;

        return 1;

     label4:
        r1 = (android.view.View) r2;

        if r1 != null goto label5;

        return 0;

     label5:
        goto label1;
    }

    public boolean isSoundEffectsEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 134217728;

        if 134217728 != $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isTemporarilyDetached()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 33554432;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isTextAlignmentInherited()
    {
        android.view.View r0;
        int $i0;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawTextAlignment()>();

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isTextAlignmentResolved()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 65536;

        if $i1 != 65536 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isTextDirectionInherited()
    {
        android.view.View r0;
        int $i0;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = virtualinvoke r0.<android.view.View: int getRawTextDirection()>();

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isTextDirectionResolved()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & 512;

        if $i1 != 512 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isVerticalFadingEdgeEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 8192;

        if $i1 != 8192 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isVerticalScrollBarEnabled()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 512;

        if $i1 != 512 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean isVerticalScrollBarHidden()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public boolean isVisibleToUser()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isVisibleToUser(android.graphics.Rect)>(null);

        return $z0;
    }

    protected boolean isVisibleToUser(android.graphics.Rect)
    {
        android.view.View r0, r7;
        android.graphics.Rect r1, r8;
        android.graphics.Point r2;
        int $i0, $i1, $i2, $i3, $i4, $i7;
        boolean $z0, $z1, $z2;
        android.view.View$AttachInfo $r3, $r4, r5;
        float $f0, $f1;
        byte $b5, $b6;
        java.lang.Object r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r5 == null goto label8;

        $i0 = r5.<android.view.View$AttachInfo: int mWindowVisibility>;

        if $i0 == 0 goto label1;

        return 0;

     label1:
        r6 = r0;

     label2:
        $z0 = r6 instanceof android.view.View;

        if $z0 == 0 goto label5;

        r7 = (android.view.View) r6;

        $f0 = virtualinvoke r7.<android.view.View: float getAlpha()>();

        $b5 = $f0 cmpg 0.0F;

        if $b5 <= 0 goto label4;

        $f1 = virtualinvoke r7.<android.view.View: float getTransitionAlpha()>();

        $b6 = $f1 cmpg 0.0F;

        if $b6 <= 0 goto label4;

        $i7 = virtualinvoke r7.<android.view.View: int getVisibility()>();

        if $i7 == 0 goto label3;

        goto label4;

     label3:
        r6 = r7.<android.view.View: android.view.ViewParent mParent>;

        goto label2;

     label4:
        return 0;

     label5:
        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r8 = $r3.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r4.<android.view.View$AttachInfo: android.graphics.Point mPoint>;

        $z1 = virtualinvoke r0.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>(r8, r2);

        if $z1 != 0 goto label6;

        return 0;

     label6:
        if r1 == null goto label7;

        $i1 = r2.<android.graphics.Point: int x>;

        $i4 = neg $i1;

        $i2 = r2.<android.graphics.Point: int y>;

        $i3 = neg $i2;

        virtualinvoke r8.<android.graphics.Rect: void offset(int,int)>($i4, $i3);

        $z2 = virtualinvoke r1.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r8);

        return $z2;

     label7:
        return 1;

     label8:
        return 0;
    }

    public boolean isVisibleToUserForAutofill(int)
    {
        android.view.View r0;
        int i0;
        android.content.Context $r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;
        android.view.accessibility.AccessibilityNodeProvider r7;
        android.view.accessibility.AccessibilityNodeInfo r8;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $z0 = virtualinvoke $r1.<android.content.Context: boolean isAutofillCompatibilityEnabled()>();

        if $z0 == 0 goto label4;

        r7 = virtualinvoke r0.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r7 == null goto label2;

        r8 = virtualinvoke r7.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>(i0);

        if r8 == null goto label1;

        $z1 = virtualinvoke r8.<android.view.accessibility.AccessibilityNodeInfo: boolean isVisibleToUser()>();

        return $z1;

     label1:
        goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isVisibleToUserForAutofill(");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): no provider");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r6);

     label3:
        return 0;

     label4:
        return 1;
    }

    public void jumpDrawablesToCurrentState()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable $r1, $r3, r4, r6;
        android.view.View$ForegroundInfo $r2, r7;
        android.animation.StateListAnimator r5;

        r0 := @this: android.view.View;

        r4 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r4 == null goto label1;

        virtualinvoke r4.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

     label1:
        r5 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        if r5 == null goto label2;

        virtualinvoke r5.<android.animation.StateListAnimator: void jumpToCurrentState()>();

     label2:
        r6 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if r6 == null goto label3;

        virtualinvoke r6.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

     label3:
        r7 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r7 == null goto label4;

        $r1 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r7);

        if $r1 == null goto label4;

        $r2 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r3 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r2);

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

     label4:
        return;
    }

    public android.view.View keyboardNavigationClusterSearch(android.view.View, int)
    {
        android.view.View r0, $r2, $r4, r5;
        int i0;
        android.view.ViewParent r1;
        boolean $z0, $z1;
        android.view.FocusFinder $r3;

        r0 := @this: android.view.View;

        r5 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean isKeyboardNavigationCluster()>();

        if $z0 == 0 goto label1;

        r5 = r0;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean isRootNamespace()>();

        if $z1 == 0 goto label2;

        $r3 = staticinvoke <android.view.FocusFinder: android.view.FocusFinder getInstance()>();

        $r4 = virtualinvoke $r3.<android.view.FocusFinder: android.view.View findNextKeyboardNavigationCluster(android.view.View,android.view.View,int)>(r0, r5, i0);

        return $r4;

     label2:
        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label3;

        $r2 = interfaceinvoke r1.<android.view.ViewParent: android.view.View keyboardNavigationClusterSearch(android.view.View,int)>(r5, i0);

        return $r2;

     label3:
        return null;
    }

    public boolean lambda$findUserSetNextFocus$0$View(android.view.View, android.view.View, android.view.View)
    {
        android.view.View r0, r1, r2, r3, $r4;
        int $i0;
        boolean z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        r3 := @parameter2: android.view.View;

        $i0 = r3.<android.view.View: int mNextFocusForwardId>;

        $r4 = specialinvoke r0.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,android.view.View,int)>(r1, r3, $i0);

        if $r4 != r2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void layout(int, int, int, int)
    {
        android.view.View r0, r13;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, i21, $i22, $i23, i24, $i25, $i26, $i27, $i28, i29, i30, $i31;
        java.util.ArrayList r1, $r5, $r6;
        android.view.ViewParent $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9;
        android.view.ViewRootImpl $r3, $r4;
        java.lang.Object $r7, $r8;
        android.view.View$OnLayoutChangeListener $r9;
        android.view.RoundScrollbarRenderer $r10, $r11;
        android.view.View$ListenerInfo r12;

        r0 := @this: android.view.View;

        i21 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i8 = r0.<android.view.View: int mPrivateFlags3>;

        $i9 = $i8 & 8;

        if $i9 == 0 goto label01;

        $i18 = r0.<android.view.View: int mOldWidthMeasureSpec>;

        $i17 = r0.<android.view.View: int mOldHeightMeasureSpec>;

        virtualinvoke r0.<android.view.View: void onMeasure(int,int)>($i18, $i17);

        $i19 = r0.<android.view.View: int mPrivateFlags3>;

        $i20 = $i19 & -9;

        r0.<android.view.View: int mPrivateFlags3> = $i20;

     label01:
        i3 = r0.<android.view.View: int mLeft>;

        i4 = r0.<android.view.View: int mTop>;

        i5 = r0.<android.view.View: int mBottom>;

        i6 = r0.<android.view.View: int mRight>;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = staticinvoke <android.view.View: boolean isLayoutModeOptical(java.lang.Object)>($r2);

        if $z0 == 0 goto label02;

        z8 = specialinvoke r0.<android.view.View: boolean setOpticalFrame(int,int,int,int)>(i21, i0, i1, i2);

        goto label03;

     label02:
        z8 = virtualinvoke r0.<android.view.View: boolean setFrame(int,int,int,int)>(i21, i0, i1, i2);

     label03:
        if z8 != 0 goto label05;

        $i15 = r0.<android.view.View: int mPrivateFlags>;

        $i16 = $i15 & 8192;

        if $i16 != 8192 goto label04;

        goto label05;

     label04:
        goto label10;

     label05:
        virtualinvoke r0.<android.view.View: void onLayout(boolean,int,int,int,int)>(z8, i21, i0, i1, i2);

        $z1 = virtualinvoke r0.<android.view.View: boolean shouldDrawRoundScrollbar()>();

        if $z1 == 0 goto label06;

        $r10 = r0.<android.view.View: android.view.RoundScrollbarRenderer mRoundScrollbarRenderer>;

        if $r10 != null goto label07;

        $r11 = new android.view.RoundScrollbarRenderer;

        specialinvoke $r11.<android.view.RoundScrollbarRenderer: void <init>(android.view.View)>(r0);

        r0.<android.view.View: android.view.RoundScrollbarRenderer mRoundScrollbarRenderer> = $r11;

        goto label07;

     label06:
        r0.<android.view.View: android.view.RoundScrollbarRenderer mRoundScrollbarRenderer> = null;

     label07:
        $i22 = r0.<android.view.View: int mPrivateFlags>;

        $i23 = $i22 & -8193;

        r0.<android.view.View: int mPrivateFlags> = $i23;

        r12 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r12 == null goto label10;

        $r5 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$200(android.view.View$ListenerInfo)>(r12);

        if $r5 == null goto label10;

        $r6 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$200(android.view.View$ListenerInfo)>(r12);

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object clone()>();

        r1 = (java.util.ArrayList) $r7;

        i7 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i24 = 0;

     label08:
        if i24 >= i7 goto label09;

        $r8 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i24);

        $r9 = (android.view.View$OnLayoutChangeListener) $r8;

        interfaceinvoke $r9.<android.view.View$OnLayoutChangeListener: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>(r0, i21, i0, i1, i2, i3, i4, i6, i5);

        i24 = i24 + 1;

        goto label08;

     label09:
        goto label10;

     label10:
        z9 = virtualinvoke r0.<android.view.View: boolean isLayoutValid()>();

        $i25 = r0.<android.view.View: int mPrivateFlags>;

        $i26 = $i25 & -4097;

        r0.<android.view.View: int mPrivateFlags> = $i26;

        $i27 = r0.<android.view.View: int mPrivateFlags3>;

        $i28 = $i27 | 4;

        r0.<android.view.View: int mPrivateFlags3> = $i28;

        if z9 != 0 goto label14;

        $z4 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z4 == 0 goto label14;

        $i13 = r0.<android.view.View: int mPrivateFlags>;

        $i14 = $i13 & -2;

        r0.<android.view.View: int mPrivateFlags> = $i14;

        $z5 = specialinvoke r0.<android.view.View: boolean canTakeFocus()>();

        if $z5 == 0 goto label11;

        virtualinvoke r0.<android.view.View: void clearParentsWantFocus()>();

        goto label15;

     label11:
        $r3 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if $r3 == null goto label13;

        $r4 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        $z6 = virtualinvoke $r4.<android.view.ViewRootImpl: boolean isInLayout()>();

        if $z6 != 0 goto label12;

        goto label13;

     label12:
        $z7 = specialinvoke r0.<android.view.View: boolean hasParentWantsFocus()>();

        if $z7 != 0 goto label15;

        virtualinvoke r0.<android.view.View: void clearFocusInternal(android.view.View,boolean,boolean)>(null, 1, 0);

        goto label15;

     label13:
        virtualinvoke r0.<android.view.View: void clearFocusInternal(android.view.View,boolean,boolean)>(null, 1, 0);

        virtualinvoke r0.<android.view.View: void clearParentsWantFocus()>();

        goto label15;

     label14:
        i29 = r0.<android.view.View: int mPrivateFlags>;

        $i10 = i29 & 1;

        if $i10 == 0 goto label15;

        $i12 = i29 & -2;

        r0.<android.view.View: int mPrivateFlags> = $i12;

        r13 = virtualinvoke r0.<android.view.View: android.view.View findFocus()>();

        if r13 == null goto label15;

        $z2 = virtualinvoke r0.<android.view.View: boolean restoreDefaultFocus()>();

        if $z2 != 0 goto label15;

        $z3 = specialinvoke r0.<android.view.View: boolean hasParentWantsFocus()>();

        if $z3 != 0 goto label15;

        virtualinvoke r13.<android.view.View: void clearFocusInternal(android.view.View,boolean,boolean)>(null, 1, 0);

     label15:
        i30 = r0.<android.view.View: int mPrivateFlags3>;

        $i31 = 134217728 & i30;

        if $i31 == 0 goto label16;

        $i11 = i30 & -134217729;

        r0.<android.view.View: int mPrivateFlags3> = $i11;

        virtualinvoke r0.<android.view.View: void notifyEnterOrExitForAutoFillIfNeeded(boolean)>(1);

     label16:
        specialinvoke r0.<android.view.View: void notifyAppearedOrDisappearedForContentCaptureIfNeeded(boolean)>(1);

        return;
    }

    public void makeFrameworkOptionalFitsSystemWindows()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags4>;

        $i1 = $i0 | 256;

        r0.<android.view.View: int mPrivateFlags4> = $i1;

        return;
    }

    public void makeOptionalFitsSystemWindows()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(2048, 2048);

        return;
    }

    public void mapRectFromViewToScreenCoords(android.graphics.RectF, boolean)
    {
        android.view.View r0, r8;
        android.graphics.RectF r1;
        boolean z0, $z1, $z2, $z3, $z6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;
        android.view.View$AttachInfo $r2, $r3;
        android.view.ViewRootImpl $r4;
        android.graphics.Matrix $r5, $r6;
        android.view.ViewParent r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.RectF;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z1 != 0 goto label1;

        $r6 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r6.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r1);

     label1:
        $i0 = r0.<android.view.View: int mLeft>;

        $f1 = (float) $i0;

        $i1 = r0.<android.view.View: int mTop>;

        $f0 = (float) $i1;

        virtualinvoke r1.<android.graphics.RectF: void offset(float,float)>($f1, $f0);

        r7 = r0.<android.view.View: android.view.ViewParent mParent>;

     label2:
        $z6 = r7 instanceof android.view.View;

        if $z6 == 0 goto label5;

        r8 = (android.view.View) r7;

        $i6 = r8.<android.view.View: int mScrollX>;

        $i7 = neg $i6;

        $f6 = (float) $i7;

        $i8 = r8.<android.view.View: int mScrollY>;

        $i9 = neg $i8;

        $f5 = (float) $i9;

        virtualinvoke r1.<android.graphics.RectF: void offset(float,float)>($f6, $f5);

        if z0 == 0 goto label3;

        $f9 = r1.<android.graphics.RectF: float left>;

        $f10 = staticinvoke <java.lang.Math: float max(float,float)>($f9, 0.0F);

        r1.<android.graphics.RectF: float left> = $f10;

        $f11 = r1.<android.graphics.RectF: float top>;

        $f12 = staticinvoke <java.lang.Math: float max(float,float)>($f11, 0.0F);

        r1.<android.graphics.RectF: float top> = $f12;

        $f13 = r1.<android.graphics.RectF: float right>;

        $i12 = virtualinvoke r8.<android.view.View: int getWidth()>();

        $f14 = (float) $i12;

        $f15 = staticinvoke <java.lang.Math: float min(float,float)>($f13, $f14);

        r1.<android.graphics.RectF: float right> = $f15;

        $f16 = r1.<android.graphics.RectF: float bottom>;

        $i13 = virtualinvoke r8.<android.view.View: int getHeight()>();

        $f17 = (float) $i13;

        $f18 = staticinvoke <java.lang.Math: float min(float,float)>($f16, $f17);

        r1.<android.graphics.RectF: float bottom> = $f18;

     label3:
        $z3 = virtualinvoke r8.<android.view.View: boolean hasIdentityMatrix()>();

        if $z3 != 0 goto label4;

        $r5 = virtualinvoke r8.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r5.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r1);

     label4:
        $i10 = r8.<android.view.View: int mLeft>;

        $f8 = (float) $i10;

        $i11 = r8.<android.view.View: int mTop>;

        $f7 = (float) $i11;

        virtualinvoke r1.<android.graphics.RectF: void offset(float,float)>($f8, $f7);

        r7 = r8.<android.view.View: android.view.ViewParent mParent>;

        goto label2;

     label5:
        $z2 = r7 instanceof android.view.ViewRootImpl;

        if $z2 == 0 goto label6;

        $r4 = (android.view.ViewRootImpl) r7;

        $i4 = $r4.<android.view.ViewRootImpl: int mCurScrollY>;

        $i5 = neg $i4;

        $f4 = (float) $i5;

        virtualinvoke r1.<android.graphics.RectF: void offset(float,float)>(0.0F, $f4);

     label6:
        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i2 = $r2.<android.view.View$AttachInfo: int mWindowLeft>;

        $f3 = (float) $i2;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i3 = $r3.<android.view.View$AttachInfo: int mWindowTop>;

        $f2 = (float) $i3;

        virtualinvoke r1.<android.graphics.RectF: void offset(float,float)>($f3, $f2);

        return;
    }

    public final void measure(int, int)
    {
        android.view.View r0;
        boolean z0, $z2, $z4, $z5, z6, z7, z8, z9, z10;
        long l0, $l1, $l2, $l3, $l4, $l15, $l16, $l17, $l18, $l19, l46, l49;
        android.view.ViewParent $r1;
        android.util.LongSparseLongArray $r2, $r3, $r14, $r15, r17;
        int $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, i32, i33, i34, i35, i36, i37, i38, i39, i41, $i42, $i43, $i44, i45, i47, $i48;
        java.lang.StringBuilder $r4;
        java.lang.Class $r8;
        java.lang.String $r9, $r13;
        java.lang.IllegalStateException $r12;
        android.graphics.Insets r16;

        r0 := @this: android.view.View;

        i32 := @parameter0: int;

        i33 := @parameter1: int;

        z0 = staticinvoke <android.view.View: boolean isLayoutModeOptical(java.lang.Object)>(r0);

        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z2 = staticinvoke <android.view.View: boolean isLayoutModeOptical(java.lang.Object)>($r1);

        if z0 == $z2 goto label04;

        r16 = virtualinvoke r0.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        $i29 = r16.<android.graphics.Insets: int left>;

        $i28 = r16.<android.graphics.Insets: int right>;

        i34 = $i29 + $i28;

        $i31 = r16.<android.graphics.Insets: int top>;

        $i30 = r16.<android.graphics.Insets: int bottom>;

        i35 = $i31 + $i30;

        if z0 == 0 goto label01;

        i34 = neg i34;

        goto label01;

     label01:
        i36 = staticinvoke <android.view.View$MeasureSpec: int adjust(int,int)>(i32, i34);

        if z0 == 0 goto label02;

        i37 = neg i35;

        goto label03;

     label02:
        i37 = i35;

     label03:
        i38 = staticinvoke <android.view.View$MeasureSpec: int adjust(int,int)>(i33, i37);

        i39 = i36;

        goto label05;

     label04:
        i38 = i33;

        i39 = i32;

     label05:
        $l1 = (long) i39;

        $l4 = $l1 << 32;

        $l2 = (long) i38;

        $l3 = $l2 & 4294967295L;

        l0 = $l4 | $l3;

        $r2 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        if $r2 != null goto label06;

        $r15 = new android.util.LongSparseLongArray;

        specialinvoke $r15.<android.util.LongSparseLongArray: void <init>(int)>(2);

        r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache> = $r15;

     label06:
        i41 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = i41 & 4096;

        if $i5 != 4096 goto label07;

        z6 = 1;

        goto label08;

     label07:
        z6 = 0;

     label08:
        $i6 = r0.<android.view.View: int mOldWidthMeasureSpec>;

        if i39 != $i6 goto label10;

        $i27 = r0.<android.view.View: int mOldHeightMeasureSpec>;

        if i38 == $i27 goto label09;

        goto label10;

     label09:
        z7 = 0;

        goto label11;

     label10:
        z7 = 1;

     label11:
        $i42 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i39);

        if $i42 != 1073741824 goto label12;

        $i26 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i38);

        if $i26 != 1073741824 goto label12;

        z8 = 1;

        goto label13;

     label12:
        z8 = 0;

     label13:
        $i43 = virtualinvoke r0.<android.view.View: int getMeasuredWidth()>();

        $i44 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i39);

        if $i43 != $i44 goto label14;

        $i24 = virtualinvoke r0.<android.view.View: int getMeasuredHeight()>();

        $i25 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i38);

        if $i24 != $i25 goto label14;

        z9 = 1;

        goto label15;

     label14:
        z9 = 0;

     label15:
        if z7 == 0 goto label17;

        $z5 = <android.view.View: boolean sAlwaysRemeasureExactly>;

        if $z5 != 0 goto label16;

        if z8 == 0 goto label16;

        if z9 != 0 goto label17;

     label16:
        z10 = 1;

        goto label18;

     label17:
        z10 = 0;

     label18:
        if z6 != 0 goto label20;

        if z10 == 0 goto label19;

        goto label20;

     label19:
        goto label26;

     label20:
        $i7 = r0.<android.view.View: int mPrivateFlags>;

        $i8 = $i7 & -2049;

        r0.<android.view.View: int mPrivateFlags> = $i8;

        virtualinvoke r0.<android.view.View: boolean resolveRtlPropertiesIfNeeded()>();

        if z6 == 0 goto label21;

        i45 = -1;

        goto label22;

     label21:
        $r3 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        i45 = virtualinvoke $r3.<android.util.LongSparseLongArray: int indexOfKey(long)>(l0);

     label22:
        if i45 < 0 goto label24;

        $z4 = <android.view.View: boolean sIgnoreMeasureCache>;

        if $z4 == 0 goto label23;

        goto label24;

     label23:
        $r14 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        l46 = virtualinvoke $r14.<android.util.LongSparseLongArray: long valueAt(int)>(i45);

        $l19 = l46 >> 32;

        $i21 = (int) $l19;

        $i20 = (int) l46;

        specialinvoke r0.<android.view.View: void setMeasuredDimensionRaw(int,int)>($i21, $i20);

        $i22 = r0.<android.view.View: int mPrivateFlags3>;

        $i23 = $i22 | 8;

        r0.<android.view.View: int mPrivateFlags3> = $i23;

        goto label25;

     label24:
        virtualinvoke r0.<android.view.View: void onMeasure(int,int)>(i39, i38);

        $i9 = r0.<android.view.View: int mPrivateFlags3>;

        $i10 = $i9 & -9;

        r0.<android.view.View: int mPrivateFlags3> = $i10;

     label25:
        i47 = r0.<android.view.View: int mPrivateFlags>;

        $i48 = i47 & 2048;

        if $i48 != 2048 goto label27;

        $i12 = i47 | 8192;

        r0.<android.view.View: int mPrivateFlags> = $i12;

     label26:
        r0.<android.view.View: int mOldWidthMeasureSpec> = i39;

        r0.<android.view.View: int mOldHeightMeasureSpec> = i38;

        r17 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        $i13 = r0.<android.view.View: int mMeasuredWidth>;

        l49 = (long) $i13;

        $i14 = r0.<android.view.View: int mMeasuredHeight>;

        $l15 = (long) $i14;

        $l17 = $l15 & 4294967295L;

        $l16 = l49 << 32;

        $l18 = $l17 | $l16;

        virtualinvoke r17.<android.util.LongSparseLongArray: void put(long,long)>(l0, $l18);

        return;

     label27:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("View with id ");

        $i11 = virtualinvoke r0.<android.view.View: int getId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#onMeasure() did not set the measured dimension by calling setMeasuredDimension()");

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;
    }

    void needGlobalAttributesUpdate(boolean)
    {
        android.view.View r0;
        boolean z0, $z1, $z2, $z3;
        android.view.View$AttachInfo r1;
        int $i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label2;

        $z1 = r1.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z1 != 0 goto label2;

        if z0 != 0 goto label1;

        $z2 = r1.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z2 != 0 goto label1;

        $i0 = r1.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        if $i0 != 0 goto label1;

        $z3 = r1.<android.view.View$AttachInfo: boolean mHasSystemUiListeners>;

        if $z3 == 0 goto label2;

     label1:
        r1.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

     label2:
        return;
    }

    public void notifyEnterOrExitForAutoFillIfNeeded(boolean)
    {
        android.view.View r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        android.view.autofill.AutofillManager r1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean canNotifyAutofillEnterExitEvent()>();

        if $z1 == 0 goto label3;

        r1 = specialinvoke r0.<android.view.View: android.view.autofill.AutofillManager getAutofillManager()>();

        if r1 == null goto label3;

        if z0 == 0 goto label2;

        $z3 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z3 == 0 goto label2;

        $z4 = virtualinvoke r0.<android.view.View: boolean isLaidOut()>();

        if $z4 != 0 goto label1;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 | 134217728;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

        goto label3;

     label1:
        $z5 = virtualinvoke r0.<android.view.View: boolean isVisibleToUser()>();

        if $z5 == 0 goto label3;

        virtualinvoke r1.<android.view.autofill.AutofillManager: void notifyViewEntered(android.view.View)>(r0);

        goto label3;

     label2:
        if z0 != 0 goto label3;

        $z2 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z2 != 0 goto label3;

        virtualinvoke r1.<android.view.autofill.AutofillManager: void notifyViewExited(android.view.View)>(r0);

     label3:
        return;
    }

    void notifyGlobalFocusCleared(android.view.View)
    {
        android.view.View r0, r1;
        android.view.View$AttachInfo r2;
        android.view.ViewTreeObserver $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        if r1 == null goto label1;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r3 = r2.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r3.<android.view.ViewTreeObserver: void dispatchOnGlobalFocusChange(android.view.View,android.view.View)>(r1, null);

     label1:
        return;
    }

    public void notifySubtreeAccessibilityStateChangedIfNeeded()
    {
        android.view.View r0;
        int i0, $i1, $i2;
        android.content.Context $r2;
        android.view.accessibility.AccessibilityManager $r3;
        boolean $z0;
        android.view.View$AttachInfo $r4;
        java.lang.AbstractMethodError $r5;
        java.lang.StringBuilder $r6;
        android.view.ViewParent $r7, r13;
        java.lang.Class $r8;
        java.lang.String $r9, $r12;

        r0 := @this: android.view.View;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r2);

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label6;

        $r4 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 != null goto label1;

        goto label6;

     label1:
        i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = i0 & 134217728;

        if $i1 != 0 goto label5;

        $i2 = i0 | 134217728;

        r0.<android.view.View: int mPrivateFlags2> = $i2;

        r13 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r13 == null goto label5;

     label2:
        interfaceinvoke r13.<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>(r0, r0, 1);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r12, $r5);

     label5:
        return;

     label6:
        return;

        catch java.lang.AbstractMethodError from label2 to label3 with label4;
    }

    public void notifyViewAccessibilityStateChangedIfNeeded(int)
    {
        android.view.View r0;
        int i0, $i1, $i4;
        android.content.Context $r1;
        android.view.accessibility.AccessibilityManager $r2;
        boolean $z0, $z1;
        android.view.View$AttachInfo $r3;
        java.lang.AbstractMethodError $r4, $r12;
        java.lang.StringBuilder $r5, $r13;
        android.view.ViewParent $r6, $r14, r21, r25;
        java.lang.Class $r7, $r15;
        java.lang.String $r8, $r11, $r16, $r19;
        android.view.accessibility.AccessibilityEvent r20, r24;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $r2 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r1);

        $z0 = virtualinvoke $r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label13;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 != null goto label01;

        goto label13;

     label01:
        if i0 == 1 goto label07;

        $z1 = specialinvoke r0.<android.view.View: boolean isAccessibilityPane()>();

        if $z1 == 0 goto label07;

        $i1 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        if $i1 == 0 goto label02;

        if i0 != 32 goto label07;

     label02:
        r20 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>();

        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r20);

        virtualinvoke r20.<android.view.accessibility.AccessibilityEvent: void setEventType(int)>(32);

        virtualinvoke r20.<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>(i0);

        virtualinvoke r20.<android.view.accessibility.AccessibilityEvent: void setSource(android.view.View)>(r0);

        virtualinvoke r0.<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r20);

        r21 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r21 == null goto label06;

     label03:
        interfaceinvoke r21.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r20);

     label04:
        goto label06;

     label05:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r11, $r4);

     label06:
        return;

     label07:
        $i4 = virtualinvoke r0.<android.view.View: int getAccessibilityLiveRegion()>();

        if $i4 == 0 goto label08;

        r24 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>();

        virtualinvoke r24.<android.view.accessibility.AccessibilityEvent: void setEventType(int)>(2048);

        virtualinvoke r24.<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>(i0);

        virtualinvoke r0.<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>(r24);

        goto label12;

     label08:
        r25 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r25 == null goto label12;

     label09:
        interfaceinvoke r25.<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>(r0, r0, i0);

     label10:
        goto label12;

     label11:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r15 = virtualinvoke $r14.<java.lang.Object: java.lang.Class getClass()>();

        $r16 = virtualinvoke $r15.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r19 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r19, $r12);

        goto label12;

     label12:
        return;

     label13:
        return;

        catch java.lang.AbstractMethodError from label03 to label04 with label05;
        catch java.lang.AbstractMethodError from label09 to label10 with label11;
    }

    public void offsetLeftAndRight(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, $i9, $i10, $i11, $i12;
        boolean z0, $z2, $z3;
        android.view.ViewParent r1;
        android.view.View$AttachInfo r2;
        android.graphics.Rect r3;
        android.graphics.RenderNode $r4;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 == 0 goto label10;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label05;

        $z2 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z2 == 0 goto label01;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        goto label06;

     label01:
        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label04;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label04;

        r3 = r2.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        if i0 >= 0 goto label02;

        $i6 = r0.<android.view.View: int mLeft>;

        i7 = $i6 + i0;

        i8 = r0.<android.view.View: int mRight>;

        goto label03;

     label02:
        i7 = r0.<android.view.View: int mLeft>;

        $i1 = r0.<android.view.View: int mRight>;

        i8 = $i1 + i0;

     label03:
        $i5 = i8 - i7;

        $i3 = r0.<android.view.View: int mBottom>;

        $i2 = r0.<android.view.View: int mTop>;

        $i4 = $i3 - $i2;

        virtualinvoke r3.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i5, $i4);

        interfaceinvoke r1.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>(r0, r3);

     label04:
        goto label06;

     label05:
        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

     label06:
        $i9 = r0.<android.view.View: int mLeft>;

        $i10 = $i9 + i0;

        r0.<android.view.View: int mLeft> = $i10;

        $i11 = r0.<android.view.View: int mRight>;

        $i12 = $i11 + i0;

        r0.<android.view.View: int mRight> = $i12;

        $r4 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r4.<android.graphics.RenderNode: boolean offsetLeftAndRight(int)>(i0);

        $z3 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z3 == 0 goto label07;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        goto label09;

     label07:
        if z0 != 0 goto label08;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

     label08:
        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label09:
        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label10:
        return;
    }

    public void offsetTopAndBottom(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, $i10, $i11, $i12, $i13;
        boolean z0, $z2, $z3;
        android.view.ViewParent r1;
        android.view.View$AttachInfo r2;
        android.graphics.Rect r3;
        android.graphics.RenderNode $r4;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 == 0 goto label10;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label05;

        $z2 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z2 == 0 goto label01;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        goto label06;

     label01:
        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label04;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label04;

        r3 = r2.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        if i0 >= 0 goto label02;

        $i6 = r0.<android.view.View: int mTop>;

        i7 = $i6 + i0;

        i8 = r0.<android.view.View: int mBottom>;

        i9 = i0;

        goto label03;

     label02:
        i7 = r0.<android.view.View: int mTop>;

        $i1 = r0.<android.view.View: int mBottom>;

        i8 = $i1 + i0;

        i9 = 0;

     label03:
        $i3 = r0.<android.view.View: int mRight>;

        $i2 = r0.<android.view.View: int mLeft>;

        $i5 = $i3 - $i2;

        $i4 = i8 - i7;

        virtualinvoke r3.<android.graphics.Rect: void set(int,int,int,int)>(0, i9, $i5, $i4);

        interfaceinvoke r1.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>(r0, r3);

     label04:
        goto label06;

     label05:
        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

     label06:
        $i10 = r0.<android.view.View: int mTop>;

        $i11 = $i10 + i0;

        r0.<android.view.View: int mTop> = $i11;

        $i12 = r0.<android.view.View: int mBottom>;

        $i13 = $i12 + i0;

        r0.<android.view.View: int mBottom> = $i13;

        $r4 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r4.<android.graphics.RenderNode: boolean offsetTopAndBottom(int)>(i0);

        $z3 = virtualinvoke r0.<android.view.View: boolean isHardwareAccelerated()>();

        if $z3 == 0 goto label07;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        goto label09;

     label07:
        if z0 != 0 goto label08;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

     label08:
        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label09:
        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label10:
        return;
    }

    public void onActivityResult(int, int, android.content.Intent)
    {
        android.view.View r0;
        int i0, i1;
        android.content.Intent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.content.Intent;

        return;
    }

    protected void onAnimationEnd()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -65537;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        return;
    }

    protected void onAnimationStart()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 65536;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        return;
    }

    public android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)
    {
        android.view.View r0;
        android.view.WindowInsets r1, $r3, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Rect $r2, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.WindowInsets;

        $i0 = r0.<android.view.View: int mPrivateFlags4>;

        $i1 = $i0 & 256;

        if $i1 == 0 goto label1;

        $i4 = r0.<android.view.View: int mViewFlags>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label1;

        $r6 = specialinvoke r0.<android.view.View: android.view.WindowInsets onApplyFrameworkOptionalFitSystemWindows(android.view.WindowInsets)>(r1);

        return $r6;

     label1:
        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & 64;

        if $i3 != 0 goto label2;

        $r4 = virtualinvoke r1.<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsetsAsRect()>();

        $z1 = virtualinvoke r0.<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>($r4);

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r1.<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>();

        return $r5;

     label2:
        $r2 = virtualinvoke r1.<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsetsAsRect()>();

        $z0 = specialinvoke r0.<android.view.View: boolean fitSystemWindowsInt(android.graphics.Rect)>($r2);

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r1.<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>();

        return $r3;

     label3:
        return r1;
    }

    protected void onAttachedToWindow()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3, $i4;
        android.view.accessibility.AccessibilityNodeIdManager $r1;
        boolean $z0;
        android.view.ViewParent $r2;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 512;

        if $i1 == 0 goto label1;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void requestTransparentRegion(android.view.View)>(r0);

     label1:
        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & -5;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        virtualinvoke r0.<android.view.View: void jumpDrawablesToCurrentState()>();

        $r1 = staticinvoke <android.view.accessibility.AccessibilityNodeIdManager: android.view.accessibility.AccessibilityNodeIdManager getInstance()>();

        $i4 = virtualinvoke r0.<android.view.View: int getAccessibilityViewId()>();

        virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeIdManager: void registerViewWithId(android.view.View,int)>(r0, $i4);

        virtualinvoke r0.<android.view.View: void resetSubtreeAccessibilityStateChanged()>();

        specialinvoke r0.<android.view.View: void rebuildOutline()>();

        $z0 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z0 == 0 goto label2;

        specialinvoke r0.<android.view.View: void notifyFocusChangeToImeFocusController(boolean)>(1);

     label2:
        return;
    }

    public void onCancelPendingInputEvents()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void removePerformClickCallback()>();

        virtualinvoke r0.<android.view.View: void cancelLongPress()>();

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 | 16;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

        return;
    }

    public boolean onCapturedPointerEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    public boolean onCheckIsTextEditor()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return 0;
    }

    public void onCloseSystemDialogs(java.lang.String)
    {
        android.view.View r0;
        java.lang.String r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.String;

        return;
    }

    protected void onConfigurationChanged(android.content.res.Configuration)
    {
        android.view.View r0;
        android.content.res.Configuration r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.Configuration;

        return;
    }

    protected void onCreateContextMenu(android.view.ContextMenu)
    {
        android.view.View r0;
        android.view.ContextMenu r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ContextMenu;

        return;
    }

    protected int[] onCreateDrawableState(int)
    {
        android.view.View r0, $r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, $i22, i23;
        int[] r1, $r3, r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.view.ViewParent r4;
        short s14, s15, s16, s17, s18, s19, s20, s21, s24, s25;
        android.view.View$AttachInfo r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 4194304;

        if $i2 != 4194304 goto label01;

        r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z4 = r4 instanceof android.view.View;

        if $z4 == 0 goto label01;

        $r2 = (android.view.View) r4;

        $r3 = virtualinvoke $r2.<android.view.View: int[] onCreateDrawableState(int)>(i0);

        return $r3;

     label01:
        i13 = r0.<android.view.View: int mPrivateFlags>;

        s14 = 0;

        $i3 = i13 & 16384;

        if $i3 == 0 goto label02;

        s14 = 0 | 16;

     label02:
        s15 = s14;

        $i4 = r0.<android.view.View: int mViewFlags>;

        $i5 = $i4 & 32;

        if $i5 != 0 goto label03;

        s15 = s14 | 8;

     label03:
        s16 = s15;

        $z0 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z0 == 0 goto label04;

        s16 = s15 | 4;

     label04:
        s17 = s16;

        $i6 = i13 & 4;

        if $i6 == 0 goto label05;

        s17 = s16 | 2;

     label05:
        s18 = s17;

        $z1 = virtualinvoke r0.<android.view.View: boolean hasWindowFocus()>();

        if $z1 == 0 goto label06;

        s18 = s17 | 1;

     label06:
        s19 = s18;

        $i7 = 1073741824 & i13;

        if $i7 == 0 goto label07;

        s19 = s18 | 32;

     label07:
        r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        s20 = s19;

        if r5 == null goto label08;

        s20 = s19;

        $z2 = r5.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested>;

        if $z2 == 0 goto label08;

        s20 = s19;

        $z3 = staticinvoke <android.view.ThreadedRenderer: boolean isAvailable()>();

        if $z3 == 0 goto label08;

        s20 = s19 | 64;

     label08:
        s21 = s20;

        $i22 = 268435456 & i13;

        if $i22 == 0 goto label09;

        s21 = s20 | 128;

     label09:
        i23 = r0.<android.view.View: int mPrivateFlags2>;

        s24 = s21;

        $i8 = i23 & 1;

        if $i8 == 0 goto label10;

        s24 = s21 | 256;

     label10:
        s25 = s24;

        $i9 = i23 & 2;

        if $i9 == 0 goto label11;

        s25 = s24 | 512;

     label11:
        r1 = staticinvoke <android.util.StateSet: int[] get(int)>(s25);

        if i0 != 0 goto label12;

        return r1;

     label12:
        if r1 == null goto label13;

        $i10 = lengthof r1;

        $i11 = $i10 + i0;

        r6 = newarray (int)[$i11];

        $i12 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r6, 0, $i12);

        goto label14;

     label13:
        r6 = newarray (int)[i0];

     label14:
        return r6;
    }

    public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
    {
        android.view.View r0;
        android.view.inputmethod.EditorInfo r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        return null;
    }

    protected void onDetachedFromWindow()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return;
    }

    protected void onDetachedFromWindowInternal()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.accessibility.AccessibilityNodeIdManager $r1;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & -67108865;

        r0.<android.view.View: int mPrivateFlags> = $i2;

        $i3 = r0.<android.view.View: int mPrivateFlags3>;

        i0 = $i3 & -5;

        r0.<android.view.View: int mPrivateFlags3> = i0;

        $i4 = i0 & -33554433;

        r0.<android.view.View: int mPrivateFlags3> = $i4;

        specialinvoke r0.<android.view.View: void removeUnsetPressCallback()>();

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        specialinvoke r0.<android.view.View: void removePerformClickCallback()>();

        specialinvoke r0.<android.view.View: void clearAccessibilityThrottles()>();

        virtualinvoke r0.<android.view.View: void stopNestedScroll()>();

        virtualinvoke r0.<android.view.View: void jumpDrawablesToCurrentState()>();

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

        specialinvoke r0.<android.view.View: void cleanupDraw()>();

        r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = null;

        $i5 = r0.<android.view.View: int mViewFlags>;

        $i6 = $i5 & 1073741824;

        if $i6 != 1073741824 goto label1;

        virtualinvoke r0.<android.view.View: void hideTooltip()>();

     label1:
        $r1 = staticinvoke <android.view.accessibility.AccessibilityNodeIdManager: android.view.accessibility.AccessibilityNodeIdManager getInstance()>();

        $i7 = virtualinvoke r0.<android.view.View: int getAccessibilityViewId()>();

        virtualinvoke $r1.<android.view.accessibility.AccessibilityNodeIdManager: void unregisterViewWithId(int)>($i7);

        return;
    }

    protected void onDisplayHint(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    public boolean onDragEvent(android.view.DragEvent)
    {
        android.view.View r0;
        android.view.DragEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.DragEvent;

        return 0;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        return;
    }

    public void onDrawForeground(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2, r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.view.View$ForegroundInfo $r4, $r5, $r6, $r7, $r8, $r9, r10;
        boolean $z0, $z2;
        android.graphics.drawable.Drawable r11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        specialinvoke r0.<android.view.View: void onDrawScrollIndicators(android.graphics.Canvas)>(r1);

        virtualinvoke r0.<android.view.View: void onDrawScrollBars(android.graphics.Canvas)>(r1);

        r10 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r10 == null goto label1;

        r11 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r10);

        goto label2;

     label1:
        r11 = null;

     label2:
        if r11 == null goto label6;

        $r4 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $z0 = staticinvoke <android.view.View$ForegroundInfo: boolean access$2200(android.view.View$ForegroundInfo)>($r4);

        if $z0 == 0 goto label5;

        $r5 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        staticinvoke <android.view.View$ForegroundInfo: boolean access$2202(android.view.View$ForegroundInfo,boolean)>($r5, 0);

        $r6 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        r2 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.Rect access$2800(android.view.View$ForegroundInfo)>($r6);

        $r7 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        r3 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.Rect access$2900(android.view.View$ForegroundInfo)>($r7);

        $r8 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $z2 = staticinvoke <android.view.View$ForegroundInfo: boolean access$100(android.view.View$ForegroundInfo)>($r8);

        if $z2 == 0 goto label3;

        $i12 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i13 = virtualinvoke r0.<android.view.View: int getHeight()>();

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i12, $i13);

        goto label4;

     label3:
        $i1 = virtualinvoke r0.<android.view.View: int getPaddingLeft()>();

        $i2 = virtualinvoke r0.<android.view.View: int getPaddingTop()>();

        $i3 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $i4 = virtualinvoke r0.<android.view.View: int getPaddingRight()>();

        $i5 = $i3 - $i4;

        $i6 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $i7 = virtualinvoke r0.<android.view.View: int getPaddingBottom()>();

        $i8 = $i6 - $i7;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i1, $i2, $i5, $i8);

     label4:
        i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        $r9 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $i9 = staticinvoke <android.view.View$ForegroundInfo: int access$2600(android.view.View$ForegroundInfo)>($r9);

        $i10 = virtualinvoke r11.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i11 = virtualinvoke r11.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        staticinvoke <android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>($i9, $i10, $i11, r2, r3, i0);

        virtualinvoke r11.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r3);

     label5:
        virtualinvoke r11.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label6:
        return;
    }

    protected void onDrawHorizontalScrollBar(android.graphics.Canvas, android.graphics.drawable.Drawable, int, int, int, int)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    protected final void onDrawScrollBars(android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        boolean z0, $z1, $z2, z3, z4;
        android.graphics.Rect r2, r17, r19;
        android.widget.ScrollBarDrawable $r3, $r4, $r5, $r11, $r12, r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16;
        android.view.RoundScrollbarRenderer $r6, $r16;
        float $f0, $f1, $f2;
        float[] $r7, $r13, r15;
        android.graphics.Interpolator $r8;
        android.graphics.Interpolator$Result $r9, $r10;
        android.view.View$ScrollabilityCache r14;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        r14 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        if r14 == null goto label14;

        i16 = r14.<android.view.View$ScrollabilityCache: int state>;

        if i16 != 0 goto label01;

        return;

     label01:
        if i16 != 2 goto label05;

        $r7 = r14.<android.view.View$ScrollabilityCache: float[] interpolatorValues>;

        if $r7 != null goto label02;

        $r13 = newarray (float)[1];

        r14.<android.view.View$ScrollabilityCache: float[] interpolatorValues> = $r13;

     label02:
        r15 = r14.<android.view.View$ScrollabilityCache: float[] interpolatorValues>;

        $r8 = r14.<android.view.View$ScrollabilityCache: android.graphics.Interpolator scrollBarInterpolator>;

        $r9 = virtualinvoke $r8.<android.graphics.Interpolator: android.graphics.Interpolator$Result timeToValues(float[])>(r15);

        $r10 = <android.graphics.Interpolator$Result: android.graphics.Interpolator$Result FREEZE_END>;

        if $r9 != $r10 goto label03;

        r14.<android.view.View$ScrollabilityCache: int state> = 0;

        goto label04;

     label03:
        $r11 = r14.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        $r12 = virtualinvoke $r11.<android.widget.ScrollBarDrawable: android.widget.ScrollBarDrawable mutate()>();

        $f2 = r15[0];

        $i15 = staticinvoke <java.lang.Math: int round(float)>($f2);

        virtualinvoke $r12.<android.widget.ScrollBarDrawable: void setAlpha(int)>($i15);

     label04:
        z3 = 1;

        goto label06;

     label05:
        $r3 = r14.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        $r4 = virtualinvoke $r3.<android.widget.ScrollBarDrawable: android.widget.ScrollBarDrawable mutate()>();

        virtualinvoke $r4.<android.widget.ScrollBarDrawable: void setAlpha(int)>(255);

        z3 = 0;

     label06:
        z0 = virtualinvoke r0.<android.view.View: boolean isHorizontalScrollBarEnabled()>();

        $z1 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarEnabled()>();

        if $z1 == 0 goto label07;

        $z2 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarHidden()>();

        if $z2 != 0 goto label07;

        z4 = 1;

        goto label08;

     label07:
        z4 = 0;

     label08:
        $r16 = r0.<android.view.View: android.view.RoundScrollbarRenderer mRoundScrollbarRenderer>;

        if $r16 == null goto label11;

        if z4 == 0 goto label10;

        r17 = r14.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarBounds>;

        specialinvoke r0.<android.view.View: void getVerticalScrollBarBounds(android.graphics.Rect,android.graphics.Rect)>(r17, null);

        $r6 = r0.<android.view.View: android.view.RoundScrollbarRenderer mRoundScrollbarRenderer>;

        $r5 = r14.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        $i14 = virtualinvoke $r5.<android.widget.ScrollBarDrawable: int getAlpha()>();

        $f0 = (float) $i14;

        $f1 = $f0 / 255.0F;

        virtualinvoke $r6.<android.view.RoundScrollbarRenderer: void drawRoundScrollbars(android.graphics.Canvas,float,android.graphics.Rect)>(r1, $f1, r17);

        if z3 == 0 goto label09;

        virtualinvoke r0.<android.view.View: void invalidate()>();

     label09:
        goto label14;

     label10:
        goto label14;

     label11:
        if z4 != 0 goto label12;

        if z0 == 0 goto label14;

     label12:
        r18 = r14.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        if z0 == 0 goto label13;

        $i7 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        $i8 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollOffset()>();

        $i9 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        virtualinvoke r18.<android.widget.ScrollBarDrawable: void setParameters(int,int,int,boolean)>($i7, $i8, $i9, 0);

        r2 = r14.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarBounds>;

        specialinvoke r0.<android.view.View: void getHorizontalScrollBarBounds(android.graphics.Rect,android.graphics.Rect)>(r2, null);

        $i13 = r2.<android.graphics.Rect: int left>;

        $i12 = r2.<android.graphics.Rect: int top>;

        $i11 = r2.<android.graphics.Rect: int right>;

        $i10 = r2.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.view.View: void onDrawHorizontalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>(r1, r18, $i13, $i12, $i11, $i10);

        if z3 == 0 goto label13;

        virtualinvoke r0.<android.view.View: void invalidate(android.graphics.Rect)>(r2);

        goto label13;

     label13:
        if z4 == 0 goto label14;

        $i0 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        $i1 = virtualinvoke r0.<android.view.View: int computeVerticalScrollOffset()>();

        $i2 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        virtualinvoke r18.<android.widget.ScrollBarDrawable: void setParameters(int,int,int,boolean)>($i0, $i1, $i2, 1);

        r19 = r14.<android.view.View$ScrollabilityCache: android.graphics.Rect mScrollBarBounds>;

        specialinvoke r0.<android.view.View: void getVerticalScrollBarBounds(android.graphics.Rect,android.graphics.Rect)>(r19, null);

        $i6 = r19.<android.graphics.Rect: int left>;

        $i5 = r19.<android.graphics.Rect: int top>;

        $i4 = r19.<android.graphics.Rect: int right>;

        $i3 = r19.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.view.View: void onDrawVerticalScrollBar(android.graphics.Canvas,android.graphics.drawable.Drawable,int,int,int,int)>(r1, r18, $i6, $i5, $i4, $i3);

        if z3 == 0 goto label14;

        virtualinvoke r0.<android.view.View: void invalidate(android.graphics.Rect)>(r19);

        goto label14;

     label14:
        return;
    }

    protected void onDrawVerticalScrollBar(android.graphics.Canvas, android.graphics.drawable.Drawable, int, int, int, int)
    {
        android.view.View r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.drawable.Drawable;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i0, i1, i2, i3);

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    public boolean onFilterTouchEventForSecurity(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 1024;

        if $i1 == 0 goto label1;

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getFlags()>();

        $i3 = $i2 & 1;

        if $i3 == 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    protected void onFinishInflate()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return;
    }

    public void onFinishTemporaryDetach()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        return;
    }

    protected void onFocusChanged(boolean, int, android.graphics.Rect)
    {
        android.view.View r0;
        boolean z0, $z1, $z2, $z3;
        int i0;
        android.view.KeyEvent$DispatcherState $r1;
        android.view.View$OnFocusChangeListener $r2, $r3;
        android.graphics.Rect r4;
        android.view.View$ListenerInfo r5;
        android.view.View$AttachInfo r6;
        android.view.ViewParent r7;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r4 := @parameter2: android.graphics.Rect;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(8);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label2:
        specialinvoke r0.<android.view.View: void switchDefaultFocusHighlight()>();

        if z0 != 0 goto label5;

        $z2 = virtualinvoke r0.<android.view.View: boolean isPressed()>();

        if $z2 == 0 goto label3;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

     label3:
        $z3 = virtualinvoke r0.<android.view.View: boolean hasWindowFocus()>();

        if $z3 == 0 goto label4;

        specialinvoke r0.<android.view.View: void notifyFocusChangeToImeFocusController(boolean)>(0);

     label4:
        virtualinvoke r0.<android.view.View: void onFocusLost()>();

        goto label6;

     label5:
        $z1 = virtualinvoke r0.<android.view.View: boolean hasWindowFocus()>();

        if $z1 == 0 goto label6;

        specialinvoke r0.<android.view.View: void notifyFocusChangeToImeFocusController(boolean)>(1);

     label6:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        r5 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r5 == null goto label7;

        $r2 = r5.<android.view.View$ListenerInfo: android.view.View$OnFocusChangeListener mOnFocusChangeListener>;

        if $r2 == null goto label7;

        $r3 = r5.<android.view.View$ListenerInfo: android.view.View$OnFocusChangeListener mOnFocusChangeListener>;

        interfaceinvoke $r3.<android.view.View$OnFocusChangeListener: void onFocusChange(android.view.View,boolean)>(r0, z0);

     label7:
        r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r6 == null goto label8;

        $r1 = r6.<android.view.View$AttachInfo: android.view.KeyEvent$DispatcherState mKeyDispatchState>;

        virtualinvoke $r1.<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)>(r0);

     label8:
        r7 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r7 == null goto label9;

        interfaceinvoke r7.<android.view.ViewParent: void onDescendantUnbufferedRequested()>();

     label9:
        virtualinvoke r0.<android.view.View: void notifyEnterOrExitForAutoFillIfNeeded(boolean)>(z0);

        return;
    }

    protected void onFocusLost()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void resetPressedState()>();

        return;
    }

    public boolean onGenericMotionEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    public void onHoverChanged(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean onHoverEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int i0;
        android.view.TouchDelegate $r2;
        boolean $z0, $z1, $z3, $z4, $z6, $z7, $z8, $z9, $z10;
        float $f0, $f1, $f2, $f3, $f4, $f5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        if $r2 == null goto label01;

        $z9 = specialinvoke r0.<android.view.View: boolean dispatchTouchExplorationHoverEvent(android.view.MotionEvent)>(r1);

        if $z9 == 0 goto label01;

        return 1;

     label01:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        $z0 = r0.<android.view.View: boolean mSendingHoverAccessibilityEvents>;

        if $z0 != 0 goto label03;

        if i0 == 9 goto label02;

        if i0 != 7 goto label05;

     label02:
        $z7 = virtualinvoke r0.<android.view.View: boolean hasHoveredChild()>();

        if $z7 != 0 goto label05;

        $f4 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f5 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z8 = virtualinvoke r0.<android.view.View: boolean pointInView(float,float)>($f4, $f5);

        if $z8 == 0 goto label05;

        specialinvoke r0.<android.view.View: void sendAccessibilityHoverEvent(int)>(128);

        r0.<android.view.View: boolean mSendingHoverAccessibilityEvents> = 1;

        goto label05;

     label03:
        if i0 == 10 goto label04;

        if i0 != 7 goto label05;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z6 = virtualinvoke r0.<android.view.View: boolean pointInView(float,float)>($f2, $f3);

        if $z6 != 0 goto label05;

     label04:
        r0.<android.view.View: boolean mSendingHoverAccessibilityEvents> = 0;

        specialinvoke r0.<android.view.View: void sendAccessibilityHoverEvent(int)>(256);

     label05:
        if i0 == 9 goto label06;

        if i0 != 7 goto label07;

     label06:
        $z1 = virtualinvoke r1.<android.view.MotionEvent: boolean isFromSource(int)>(8194);

        if $z1 == 0 goto label07;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z4 = virtualinvoke r0.<android.view.View: boolean isOnScrollbar(float,float)>($f0, $f1);

        if $z4 == 0 goto label07;

        virtualinvoke r0.<android.view.View: boolean awakenScrollBars()>();

     label07:
        $z10 = specialinvoke r0.<android.view.View: boolean isHoverable()>();

        if $z10 != 0 goto label09;

        $z3 = virtualinvoke r0.<android.view.View: boolean isHovered()>();

        if $z3 == 0 goto label08;

        goto label09;

     label08:
        return 0;

     label09:
        if i0 == 9 goto label11;

        if i0 == 10 goto label10;

        goto label12;

     label10:
        virtualinvoke r0.<android.view.View: void setHovered(boolean)>(0);

        goto label12;

     label11:
        virtualinvoke r0.<android.view.View: void setHovered(boolean)>(1);

     label12:
        specialinvoke r0.<android.view.View: boolean dispatchGenericMotionEventInternal(android.view.MotionEvent)>(r1);

        return 1;
    }

    public void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View$AccessibilityDelegate r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r1);

     label2:
        return;
    }

    public void onInitializeAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0, $r7;
        android.view.accessibility.AccessibilityEvent r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.CharSequence $r2, $r5, r9;
        android.content.Context $r3;
        java.lang.String $r4;
        boolean $z0;
        java.util.ArrayList $r6, r11;
        android.view.View$AttachInfo $r8, r10;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setSource(android.view.View)>(r0);

        $r2 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getAccessibilityClassName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setClassName(java.lang.CharSequence)>($r2);

        $r3 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>($r4);

        $z0 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setEnabled(boolean)>($z0);

        $r5 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setContentDescription(java.lang.CharSequence)>($r5);

        $i1 = virtualinvoke r0.<android.view.View: int getScrollX()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setScrollX(int)>($i1);

        $i2 = virtualinvoke r0.<android.view.View: int getScrollY()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setScrollY(int)>($i2);

        i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if i0 == 8 goto label2;

        if i0 == 8192 goto label1;

        goto label5;

     label1:
        r9 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r9 == null goto label5;

        $i5 = interfaceinvoke r9.<java.lang.CharSequence: int length()>();

        if $i5 <= 0 goto label5;

        $i6 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionStart()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setFromIndex(int)>($i6);

        $i7 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionEnd()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setToIndex(int)>($i7);

        $i8 = interfaceinvoke r9.<java.lang.CharSequence: int length()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setItemCount(int)>($i8);

        goto label5;

     label2:
        r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r10 == null goto label3;

        r11 = r10.<android.view.View$AttachInfo: java.util.ArrayList mTempArrayList>;

        goto label4;

     label3:
        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r11 = $r6;

     label4:
        $r7 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        virtualinvoke $r7.<android.view.View: void addFocusables(java.util.ArrayList,int,int)>(r11, 2, 0);

        $i3 = virtualinvoke r11.<java.util.ArrayList: int size()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setItemCount(int)>($i3);

        $i4 = virtualinvoke r11.<java.util.ArrayList: int indexOf(java.lang.Object)>(r0);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setCurrentItemIndex(int)>($i4);

        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r8 == null goto label5;

        virtualinvoke r11.<java.util.ArrayList: void clear()>();

     label5:
        return;
    }

    public void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        android.view.View$AccessibilityDelegate r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(r0, r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>(r1);

     label2:
        return;
    }

    public void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.View r0, $r12, r17, r18, r19, r21, r22, r23, r24, r25, r26, r27, r28, r29;
        android.view.accessibility.AccessibilityNodeInfo r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo $r2;
        android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction $r3, r36, $r38;
        java.lang.CharSequence $r4, $r6, $r32, $r33, $r34, r37, $r39;
        android.view.View$TooltipInfo $r5, $r7, r35;
        com.android.internal.view.TooltipPopup $r8;
        android.view.View$AttachInfo $r9, r14;
        android.content.res.Resources $r10;
        java.lang.String $r11, $r31;
        android.content.res.Resources$NotFoundException $r13;
        android.graphics.Rect r15;
        android.view.ViewParent r16;
        android.content.Context $r30;
        android.view.TouchDelegate r40;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r14 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r14 != null goto label01;

        return;

     label01:
        r15 = r14.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        virtualinvoke r0.<android.view.View: void getDrawingRect(android.graphics.Rect)>(r15);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>(r15);

        virtualinvoke r0.<android.view.View: void getBoundsOnScreen(android.graphics.Rect,boolean)>(r15, 1);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>(r15);

        r16 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParentForAccessibility()>();

        $z0 = r16 instanceof android.view.View;

        if $z0 == 0 goto label02;

        $r12 = (android.view.View) r16;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>($r12);

     label02:
        $i0 = r0.<android.view.View: int mID>;

        if $i0 == -1 goto label08;

        r17 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        r18 = r17;

        if r17 != null goto label03;

        r18 = r0;

     label03:
        $i7 = r0.<android.view.View: int mID>;

        r19 = specialinvoke r18.<android.view.View: android.view.View findLabelForView(android.view.View,int)>(r0, $i7);

        if r19 == null goto label04;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setLabeledBy(android.view.View)>(r19);

     label04:
        $r9 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i8 = $r9.<android.view.View$AttachInfo: int mAccessibilityFetchFlags>;

        $i9 = $i8 & 16;

        if $i9 == 0 goto label08;

        $i10 = r0.<android.view.View: int mID>;

        $z8 = staticinvoke <android.content.res.Resources: boolean resourceHasPackage(int)>($i10);

        if $z8 == 0 goto label08;

     label05:
        $r10 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        $i11 = r0.<android.view.View: int mID>;

        $r11 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String getResourceName(int)>($i11);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setViewIdResourceName(java.lang.String)>($r11);

     label06:
        goto label08;

     label07:
        $r13 := @caughtexception;

     label08:
        $i12 = r0.<android.view.View: int mLabelForId>;

        if $i12 == -1 goto label10;

        r21 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        r22 = r21;

        if r21 != null goto label09;

        r22 = r0;

     label09:
        $i6 = r0.<android.view.View: int mLabelForId>;

        r23 = specialinvoke r22.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r0, $i6);

        if r23 == null goto label10;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setLabelFor(android.view.View)>(r23);

     label10:
        $i13 = r0.<android.view.View: int mAccessibilityTraversalBeforeId>;

        if $i13 == -1 goto label12;

        r24 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        r25 = r24;

        if r24 != null goto label11;

        r25 = r0;

     label11:
        $i5 = r0.<android.view.View: int mAccessibilityTraversalBeforeId>;

        r26 = specialinvoke r25.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r0, $i5);

        if r26 == null goto label12;

        $z7 = virtualinvoke r26.<android.view.View: boolean includeForAccessibility()>();

        if $z7 == 0 goto label12;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setTraversalBefore(android.view.View)>(r26);

     label12:
        $i14 = r0.<android.view.View: int mAccessibilityTraversalAfterId>;

        if $i14 == -1 goto label14;

        r27 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        r28 = r27;

        if r27 != null goto label13;

        r28 = r0;

     label13:
        $i4 = r0.<android.view.View: int mAccessibilityTraversalAfterId>;

        r29 = specialinvoke r28.<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>(r0, $i4);

        if r29 == null goto label14;

        $z6 = virtualinvoke r29.<android.view.View: boolean includeForAccessibility()>();

        if $z6 == 0 goto label14;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setTraversalAfter(android.view.View)>(r29);

     label14:
        $z9 = virtualinvoke r0.<android.view.View: boolean isVisibleToUser()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>($z9);

        $z10 = virtualinvoke r0.<android.view.View: boolean isImportantForAccessibility()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setImportantForAccessibility(boolean)>($z10);

        $r30 = r0.<android.view.View: android.content.Context mContext>;

        $r31 = virtualinvoke $r30.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>($r31);

        $r32 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getAccessibilityClassName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>($r32);

        $r33 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getStateDescription()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setStateDescription(java.lang.CharSequence)>($r33);

        $r34 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getContentDescription()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>($r34);

        $z11 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>($z11);

        $z12 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>($z12);

        $z13 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>($z13);

        $z14 = virtualinvoke r0.<android.view.View: boolean isScreenReaderFocusable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setScreenReaderFocusable(boolean)>($z14);

        $z15 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>($z15);

        $z16 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocused()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>($z16);

        $z17 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>($z17);

        $z18 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>($z18);

        $z19 = virtualinvoke r0.<android.view.View: boolean isContextClickable()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setContextClickable(boolean)>($z19);

        $i15 = virtualinvoke r0.<android.view.View: int getAccessibilityLiveRegion()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setLiveRegion(int)>($i15);

        r35 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        if r35 == null goto label17;

        $r4 = r35.<android.view.View$TooltipInfo: java.lang.CharSequence mTooltipText>;

        if $r4 == null goto label17;

        $r5 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r6 = $r5.<android.view.View$TooltipInfo: java.lang.CharSequence mTooltipText>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setTooltipText(java.lang.CharSequence)>($r6);

        $r7 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r8 = $r7.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup>;

        if $r8 != null goto label15;

        r36 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SHOW_TOOLTIP>;

        goto label16;

     label15:
        r36 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_HIDE_TOOLTIP>;

     label16:
        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>(r36);

     label17:
        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(4);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(8);

        $z20 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        if $z20 == 0 goto label19;

        $z5 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z5 == 0 goto label18;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(2);

        goto label19;

     label18:
        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(1);

     label19:
        $z21 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocused()>();

        if $z21 != 0 goto label20;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(64);

        goto label21;

     label20:
        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(128);

     label21:
        $z1 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        if $z1 == 0 goto label22;

        $z4 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if $z4 == 0 goto label22;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(16);

     label22:
        $z22 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z22 == 0 goto label23;

        $z3 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if $z3 == 0 goto label23;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(32);

     label23:
        $z23 = virtualinvoke r0.<android.view.View: boolean isContextClickable()>();

        if $z23 == 0 goto label24;

        $z2 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if $z2 == 0 goto label24;

        $r3 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CONTEXT_CLICK>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r3);

     label24:
        r37 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if r37 == null goto label25;

        $i1 = interfaceinvoke r37.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label25;

        $i2 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionStart()>();

        $i3 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionEnd()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setTextSelection(int,int)>($i2, $i3);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(131072);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(256);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>(512);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setMovementGranularities(int)>(11);

     label25:
        $r38 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SHOW_ON_SCREEN>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r38);

        specialinvoke r0.<android.view.View: void populateAccessibilityNodeInfoDrawingOrderInParent(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        $r39 = r0.<android.view.View: java.lang.CharSequence mAccessibilityPaneTitle>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setPaneTitle(java.lang.CharSequence)>($r39);

        $z24 = virtualinvoke r0.<android.view.View: boolean isAccessibilityHeading()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setHeading(boolean)>($z24);

        r40 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        if r40 == null goto label26;

        $r2 = virtualinvoke r40.<android.view.TouchDelegate: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo getTouchDelegateInfo()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo)>($r2);

     label26:
        return;

        catch android.content.res.Resources$NotFoundException from label05 to label06 with label07;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        float f0, f1, $f2, $f3;
        boolean $z0, z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, i11, i12;
        long $l7;

        r0 := @this: android.view.View;

        i11 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $z0 = staticinvoke <android.view.KeyEvent: boolean isConfirmKey(int)>(i11);

        if $z0 == 0 goto label7;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 32;

        if $i1 != 32 goto label1;

        return 1;

     label1:
        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i2 != 0 goto label7;

        i12 = r0.<android.view.View: int mViewFlags>;

        $i3 = i12 & 16384;

        if $i3 == 16384 goto label3;

        $i10 = i12 & 2097152;

        if $i10 != 2097152 goto label2;

        goto label3;

     label2:
        z1 = 0;

        goto label4;

     label3:
        z1 = 1;

     label4:
        if z1 != 0 goto label5;

        $i8 = r0.<android.view.View: int mViewFlags>;

        $i9 = $i8 & 1073741824;

        if $i9 != 1073741824 goto label7;

     label5:
        $i4 = virtualinvoke r0.<android.view.View: int getWidth()>();

        $f2 = (float) $i4;

        f0 = $f2 / 2.0F;

        $i5 = virtualinvoke r0.<android.view.View: int getHeight()>();

        $f3 = (float) $i5;

        f1 = $f3 / 2.0F;

        if z1 == 0 goto label6;

        specialinvoke r0.<android.view.View: void setPressed(boolean,float,float)>(1, f0, f1);

     label6:
        $i6 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l7 = (long) $i6;

        specialinvoke r0.<android.view.View: void checkForLongClick(long,float,float,int)>($l7, f0, f1, 0);

        return 1;

     label7:
        return 0;
    }

    public boolean onKeyLongPress(int, android.view.KeyEvent)
    {
        android.view.View r0;
        int i0;
        android.view.KeyEvent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        return 0;
    }

    public boolean onKeyMultiple(int, int, android.view.KeyEvent)
    {
        android.view.View r0;
        int i0, i1;
        android.view.KeyEvent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        return 0;
    }

    public boolean onKeyPreIme(int, android.view.KeyEvent)
    {
        android.view.View r0;
        int i0;
        android.view.KeyEvent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        return 0;
    }

    public boolean onKeyShortcut(int, android.view.KeyEvent)
    {
        android.view.View r0;
        int i0;
        android.view.KeyEvent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        return 0;
    }

    public boolean onKeyUp(int, android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0, $i1, i2, i3;

        r0 := @this: android.view.View;

        i2 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $z0 = staticinvoke <android.view.KeyEvent: boolean isConfirmKey(int)>(i2);

        if $z0 == 0 goto label2;

        i3 = r0.<android.view.View: int mViewFlags>;

        $i0 = i3 & 32;

        if $i0 != 32 goto label1;

        return 1;

     label1:
        $i1 = i3 & 16384;

        if $i1 != 16384 goto label2;

        $z1 = virtualinvoke r0.<android.view.View: boolean isPressed()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

        $z2 = r0.<android.view.View: boolean mHasPerformedLongPress>;

        if $z2 != 0 goto label2;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        $z3 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        if $z3 != 0 goto label2;

        $z4 = specialinvoke r0.<android.view.View: boolean performClickInternal()>();

        return $z4;

     label2:
        return 0;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.view.View r0;
        boolean z0;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    protected void onMeasure(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<android.view.View: int getSuggestedMinimumWidth()>();

        $i3 = staticinvoke <android.view.View: int getDefaultSize(int,int)>($i2, i0);

        $i4 = virtualinvoke r0.<android.view.View: int getSuggestedMinimumHeight()>();

        $i5 = staticinvoke <android.view.View: int getDefaultSize(int,int)>($i4, i1);

        virtualinvoke r0.<android.view.View: void setMeasuredDimension(int,int)>($i3, $i5);

        return;
    }

    public void onMovedToDisplay(int, android.content.res.Configuration)
    {
        android.view.View r0;
        int i0;
        android.content.res.Configuration r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.Configuration;

        return;
    }

    protected void onOverScrolled(int, int, boolean, boolean)
    {
        android.view.View r0;
        int i0, i1;
        boolean z0, z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        return;
    }

    public void onPointerCaptureChange(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        return;
    }

    public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View$AccessibilityDelegate r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void onPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r1);

     label2:
        return;
    }

    public void onPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        int $i0;
        boolean $z0;
        java.util.List $r2;
        java.lang.CharSequence $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if $i0 != 32 goto label1;

        $z0 = specialinvoke r0.<android.view.View: boolean isAccessibilityPane()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: java.util.List getText()>();

        $r3 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getAccessibilityPaneTitle()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

     label1:
        return;
    }

    public void onProvideAutofillStructure(android.view.ViewStructure, int)
    {
        android.view.View r0;
        android.view.ViewStructure r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.View: void onProvideStructure(android.view.ViewStructure,int,int)>(r1, 1, i0);

        return;
    }

    public void onProvideAutofillVirtualStructure(android.view.ViewStructure, int)
    {
        android.view.View r0;
        android.view.ViewStructure r1;
        int i0;
        android.content.Context $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $z0 = virtualinvoke $r2.<android.content.Context: boolean isAutofillCompatibilityEnabled()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<android.view.View: void onProvideVirtualStructureCompat(android.view.ViewStructure,boolean)>(r1, 1);

     label1:
        return;
    }

    public void onProvideContentCaptureStructure(android.view.ViewStructure, int)
    {
        android.view.View r0;
        android.view.ViewStructure r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.View: void onProvideStructure(android.view.ViewStructure,int,int)>(r1, 2, i0);

        return;
    }

    public void onProvideStructure(android.view.ViewStructure)
    {
        android.view.View r0;
        android.view.ViewStructure r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        virtualinvoke r0.<android.view.View: void onProvideStructure(android.view.ViewStructure,int,int)>(r1, 0, 0);

        return;
    }

    protected void onProvideStructure(android.view.ViewStructure, int, int)
    {
        android.view.View r0, r15;
        android.view.ViewStructure r1;
        int i0, $i4, $i5, $i6, $i7, i8, i9, i10, i12, i13, i14, i15, i16, i17, i18, i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.CharSequence $r2, $r4;
        java.lang.String $r3, r11, r12, r13;
        android.widget.Checkable $r5;
        float $f0;
        android.graphics.Matrix $r6;
        java.lang.String[] $r7;
        android.view.autofill.AutofillValue $r8;
        android.content.res.Resources$NotFoundException $r9;
        android.content.res.Resources r10;
        android.view.ViewParent r16, r17;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        i0 := @parameter1: int;

        i8 := @parameter2: int;

        i9 = r0.<android.view.View: int mID>;

        if i9 == -1 goto label05;

        $z13 = staticinvoke <android.view.View: boolean isViewIdGenerated(int)>(i9);

        if $z13 != 0 goto label05;

     label01:
        r10 = virtualinvoke r0.<android.view.View: android.content.res.Resources getResources()>();

        r11 = virtualinvoke r10.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>(i9);

        r12 = virtualinvoke r10.<android.content.res.Resources: java.lang.String getResourceTypeName(int)>(i9);

        r13 = virtualinvoke r10.<android.content.res.Resources: java.lang.String getResourcePackageName(int)>(i9);

     label02:
        goto label04;

     label03:
        $r9 := @caughtexception;

        r11 = null;

        r12 = null;

        r13 = null;

     label04:
        virtualinvoke r1.<android.view.ViewStructure: void setId(int,java.lang.String,java.lang.String,java.lang.String)>(i9, r13, r12, r11);

        goto label06;

     label05:
        virtualinvoke r1.<android.view.ViewStructure: void setId(int,java.lang.String,java.lang.String,java.lang.String)>(i9, null, null, null);

     label06:
        if i0 == 1 goto label07;

        if i0 != 2 goto label09;

     label07:
        i10 = virtualinvoke r0.<android.view.View: int getAutofillType()>();

        if i10 == 0 goto label08;

        virtualinvoke r1.<android.view.ViewStructure: void setAutofillType(int)>(i10);

        $r7 = virtualinvoke r0.<android.view.View: java.lang.String[] getAutofillHints()>();

        virtualinvoke r1.<android.view.ViewStructure: void setAutofillHints(java.lang.String[])>($r7);

        $r8 = virtualinvoke r0.<android.view.View: android.view.autofill.AutofillValue getAutofillValue()>();

        virtualinvoke r1.<android.view.ViewStructure: void setAutofillValue(android.view.autofill.AutofillValue)>($r8);

     label08:
        $i4 = virtualinvoke r0.<android.view.View: int getImportantForAutofill()>();

        virtualinvoke r1.<android.view.ViewStructure: void setImportantForAutofill(int)>($i4);

     label09:
        i12 = 0;

        i13 = 0;

        if i0 != 1 goto label12;

        i12 = 0;

        i13 = 0;

        $i5 = i8 & 1;

        if $i5 != 0 goto label12;

        r15 = null;

        r16 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        i14 = 0;

        i15 = 0;

        $z10 = r16 instanceof android.view.View;

        if $z10 == 0 goto label10;

        r15 = (android.view.View) r16;

        i15 = 0;

        i14 = 0;

     label10:
        i12 = i14;

        i13 = i15;

        if r15 == null goto label12;

        i12 = i14;

        i13 = i15;

        $z11 = virtualinvoke r15.<android.view.View: boolean isImportantForAutofill()>();

        if $z11 != 0 goto label12;

        $i6 = r15.<android.view.View: int mLeft>;

        i14 = i14 + $i6;

        $i7 = r15.<android.view.View: int mTop>;

        i15 = i15 + $i7;

        r17 = virtualinvoke r15.<android.view.View: android.view.ViewParent getParent()>();

        $z12 = r17 instanceof android.view.View;

        if $z12 == 0 goto label11;

        r15 = (android.view.View) r17;

        goto label10;

     label11:
        i16 = i14;

        i17 = i15;

        goto label13;

     label12:
        i17 = i13;

        i16 = i12;

     label13:
        i18 = r0.<android.view.View: int mLeft>;

        i19 = r0.<android.view.View: int mTop>;

        $i20 = i16 + i18;

        $i21 = i17 + i19;

        $i22 = r0.<android.view.View: int mScrollX>;

        $i23 = r0.<android.view.View: int mScrollY>;

        $i24 = r0.<android.view.View: int mRight>;

        $i25 = $i24 - i18;

        $i26 = r0.<android.view.View: int mBottom>;

        $i27 = $i26 - i19;

        virtualinvoke r1.<android.view.ViewStructure: void setDimens(int,int,int,int,int,int)>($i20, $i21, $i22, $i23, $i25, $i27);

        if i0 != 0 goto label15;

        $z9 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z9 != 0 goto label14;

        $r6 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke r1.<android.view.ViewStructure: void setTransformation(android.graphics.Matrix)>($r6);

     label14:
        $f0 = virtualinvoke r0.<android.view.View: float getZ()>();

        virtualinvoke r1.<android.view.ViewStructure: void setElevation(float)>($f0);

     label15:
        $i28 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        virtualinvoke r1.<android.view.ViewStructure: void setVisibility(int)>($i28);

        $z14 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        virtualinvoke r1.<android.view.ViewStructure: void setEnabled(boolean)>($z14);

        $z15 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        if $z15 == 0 goto label16;

        virtualinvoke r1.<android.view.ViewStructure: void setClickable(boolean)>(1);

     label16:
        $z0 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        if $z0 == 0 goto label17;

        virtualinvoke r1.<android.view.ViewStructure: void setFocusable(boolean)>(1);

     label17:
        $z1 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z1 == 0 goto label18;

        virtualinvoke r1.<android.view.ViewStructure: void setFocused(boolean)>(1);

     label18:
        $z2 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocused()>();

        if $z2 == 0 goto label19;

        virtualinvoke r1.<android.view.ViewStructure: void setAccessibilityFocused(boolean)>(1);

     label19:
        $z3 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        if $z3 == 0 goto label20;

        virtualinvoke r1.<android.view.ViewStructure: void setSelected(boolean)>(1);

     label20:
        $z4 = virtualinvoke r0.<android.view.View: boolean isActivated()>();

        if $z4 == 0 goto label21;

        virtualinvoke r1.<android.view.ViewStructure: void setActivated(boolean)>(1);

     label21:
        $z5 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z5 == 0 goto label22;

        virtualinvoke r1.<android.view.ViewStructure: void setLongClickable(boolean)>(1);

     label22:
        $z6 = r0 instanceof android.widget.Checkable;

        if $z6 == 0 goto label23;

        virtualinvoke r1.<android.view.ViewStructure: void setCheckable(boolean)>(1);

        $r5 = (android.widget.Checkable) r0;

        $z8 = interfaceinvoke $r5.<android.widget.Checkable: boolean isChecked()>();

        if $z8 == 0 goto label23;

        virtualinvoke r1.<android.view.ViewStructure: void setChecked(boolean)>(1);

     label23:
        $z16 = virtualinvoke r0.<android.view.View: boolean isOpaque()>();

        if $z16 == 0 goto label24;

        virtualinvoke r1.<android.view.ViewStructure: void setOpaque(boolean)>(1);

     label24:
        $z7 = virtualinvoke r0.<android.view.View: boolean isContextClickable()>();

        if $z7 == 0 goto label25;

        virtualinvoke r1.<android.view.ViewStructure: void setContextClickable(boolean)>(1);

     label25:
        $r2 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getAccessibilityClassName()>();

        $r3 = interfaceinvoke $r2.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke r1.<android.view.ViewStructure: void setClassName(java.lang.String)>($r3);

        $r4 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getContentDescription()>();

        virtualinvoke r1.<android.view.ViewStructure: void setContentDescription(java.lang.CharSequence)>($r4);

        return;

        catch android.content.res.Resources$NotFoundException from label01 to label02 with label03;
    }

    public void onProvideVirtualStructure(android.view.ViewStructure)
    {
        android.view.View r0;
        android.view.ViewStructure r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewStructure;

        specialinvoke r0.<android.view.View: void onProvideVirtualStructureCompat(android.view.ViewStructure,boolean)>(r1, 0);

        return;
    }

    public void onResolveDrawables(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent, int)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int i0;
        float f0, f1;
        boolean $z0, $z1;
        android.content.Context $r2;
        android.view.PointerIcon $r3, $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        i0 := @parameter1: int;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(i0);

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(i0);

        $z0 = virtualinvoke r0.<android.view.View: boolean isDraggingScrollBar()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r0.<android.view.View: boolean isOnScrollbarThumb(float,float)>(f0, f1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r4 = r0.<android.view.View: android.view.PointerIcon mPointerIcon>;

        return $r4;

     label2:
        $r2 = r0.<android.view.View: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>($r2, 1000);

        return $r3;
    }

    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r1, $r9;
        android.view.autofill.AutofillId $r5;
        java.lang.String $r7, $r8, $r12, $r20;
        java.lang.Class $r11;
        android.content.Context $r15;
        java.lang.Object $r16;
        java.lang.IllegalArgumentException $r19;
        android.os.Parcelable r21;
        android.view.View$BaseSavedState r23, r24;

        r0 := @this: android.view.View;

        r21 := @parameter0: android.os.Parcelable;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 131072;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        if r21 == null goto label2;

        $z4 = r21 instanceof android.view.AbsSavedState;

        if $z4 == 0 goto label1;

        goto label2;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong state class, expecting View State but received ");

        $r11 = virtualinvoke r21.<java.lang.Object: java.lang.Class getClass()>();

        $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String toString()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead. This usually happens when two views of different type have the same id in the same hierarchy. This view\'s id is ");

        $r15 = r0.<android.view.View: android.content.Context mContext>;

        $i15 = virtualinvoke r0.<android.view.View: int getId()>();

        $r16 = staticinvoke <android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>($r15, $i15);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Make sure other views do not use the same id.");

        $r19 = new java.lang.IllegalArgumentException;

        $r20 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20);

        throw $r19;

     label2:
        if r21 == null goto label6;

        $z0 = r21 instanceof android.view.View$BaseSavedState;

        if $z0 == 0 goto label6;

        r23 = (android.view.View$BaseSavedState) r21;

        $i2 = r23.<android.view.View$BaseSavedState: int mSavedData>;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label3;

        $r8 = r23.<android.view.View$BaseSavedState: java.lang.String mStartActivityRequestWhoSaved>;

        r0.<android.view.View: java.lang.String mStartActivityRequestWho> = $r8;

     label3:
        $i4 = r23.<android.view.View$BaseSavedState: int mSavedData>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label4;

        $z3 = r23.<android.view.View$BaseSavedState: boolean mIsAutofilled>;

        $z2 = r23.<android.view.View$BaseSavedState: boolean mHideHighlight>;

        virtualinvoke r0.<android.view.View: void setAutofilled(boolean,boolean)>($z3, $z2);

     label4:
        $i6 = r23.<android.view.View$BaseSavedState: int mSavedData>;

        $i7 = $i6 & 4;

        if $i7 == 0 goto label6;

        r24 = (android.view.View$BaseSavedState) r21;

        $i8 = r24.<android.view.View$BaseSavedState: int mSavedData>;

        $i9 = $i8 & -5;

        r24.<android.view.View$BaseSavedState: int mSavedData> = $i9;

        $i10 = r0.<android.view.View: int mPrivateFlags3>;

        $i11 = $i10 & 1073741824;

        if $i11 == 0 goto label5;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("View.Autofill", 3);

        if $z1 == 0 goto label6;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onRestoreInstanceState(): not setting autofillId to ");

        $i13 = r23.<android.view.View$BaseSavedState: int mAutofillViewId>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because view explicitly set it to ");

        $r5 = r0.<android.view.View: android.view.autofill.AutofillId mAutofillId>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View.Autofill", $r7);

        goto label6;

     label5:
        $i12 = r23.<android.view.View$BaseSavedState: int mAutofillViewId>;

        r0.<android.view.View: int mAutofillViewId> = $i12;

        r0.<android.view.View: android.view.autofill.AutofillId mAutofillId> = null;

     label6:
        return;
    }

    public void onRtlPropertiesChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.lang.String $r2, $r3, $r7;
        boolean $z0, $z1, $z2, $z3;
        android.view.AbsSavedState $r4, $r6;
        android.view.View$BaseSavedState $r5;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 131072;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        $r2 = r0.<android.view.View: java.lang.String mStartActivityRequestWho>;

        if $r2 != null goto label2;

        $z3 = virtualinvoke r0.<android.view.View: boolean isAutofilled()>();

        if $z3 != 0 goto label2;

        $i10 = r0.<android.view.View: int mAutofillViewId>;

        if $i10 <= 1073741823 goto label1;

        goto label2;

     label1:
        $r4 = <android.view.View$BaseSavedState: android.view.AbsSavedState EMPTY_STATE>;

        return $r4;

     label2:
        $r5 = new android.view.View$BaseSavedState;

        $r6 = <android.view.AbsSavedState: android.view.AbsSavedState EMPTY_STATE>;

        specialinvoke $r5.<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)>($r6);

        $r7 = r0.<android.view.View: java.lang.String mStartActivityRequestWho>;

        if $r7 == null goto label3;

        $i8 = $r5.<android.view.View$BaseSavedState: int mSavedData>;

        $i9 = $i8 | 1;

        $r5.<android.view.View$BaseSavedState: int mSavedData> = $i9;

     label3:
        $z0 = virtualinvoke r0.<android.view.View: boolean isAutofilled()>();

        if $z0 == 0 goto label4;

        $i6 = $r5.<android.view.View$BaseSavedState: int mSavedData>;

        $i7 = $i6 | 2;

        $r5.<android.view.View$BaseSavedState: int mSavedData> = $i7;

     label4:
        $i2 = r0.<android.view.View: int mAutofillViewId>;

        if $i2 <= 1073741823 goto label5;

        $i4 = $r5.<android.view.View$BaseSavedState: int mSavedData>;

        $i5 = $i4 | 4;

        $r5.<android.view.View$BaseSavedState: int mSavedData> = $i5;

     label5:
        $r3 = r0.<android.view.View: java.lang.String mStartActivityRequestWho>;

        $r5.<android.view.View$BaseSavedState: java.lang.String mStartActivityRequestWhoSaved> = $r3;

        $z1 = virtualinvoke r0.<android.view.View: boolean isAutofilled()>();

        $r5.<android.view.View$BaseSavedState: boolean mIsAutofilled> = $z1;

        $z2 = virtualinvoke r0.<android.view.View: boolean hideAutofillHighlight()>();

        $r5.<android.view.View$BaseSavedState: boolean mHideHighlight> = $z2;

        $i3 = r0.<android.view.View: int mAutofillViewId>;

        $r5.<android.view.View$BaseSavedState: int mAutofillViewId> = $i3;

        return $r5;
    }

    public void onScreenStateChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    protected void onScrollChanged(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.view.View$OnScrollChangeListener $r1, $r3;
        android.view.View$ListenerInfo $r2, r6;
        android.view.View$ForegroundInfo r4;
        android.view.View$AttachInfo r5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        $i5 = i0 - i2;

        $i4 = i1 - i3;

        specialinvoke r0.<android.view.View: void postSendViewScrolledAccessibilityEventCallback(int,int)>($i5, $i4);

        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        r0.<android.view.View: boolean mDefaultFocusHighlightSizeChanged> = 1;

        r4 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r4 == null goto label1;

        staticinvoke <android.view.View$ForegroundInfo: boolean access$2202(android.view.View$ForegroundInfo,boolean)>(r4, 1);

     label1:
        r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r5 == null goto label2;

        r5.<android.view.View$AttachInfo: boolean mViewScrollChanged> = 1;

     label2:
        r6 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r6 == null goto label3;

        $r1 = r6.<android.view.View$ListenerInfo: android.view.View$OnScrollChangeListener mOnScrollChangeListener>;

        if $r1 == null goto label3;

        $r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r3 = $r2.<android.view.View$ListenerInfo: android.view.View$OnScrollChangeListener mOnScrollChangeListener>;

        interfaceinvoke $r3.<android.view.View$OnScrollChangeListener: void onScrollChange(android.view.View,int,int,int,int)>(r0, i0, i1, i2, i3);

     label3:
        return;
    }

    protected boolean onSetAlpha(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return 0;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        return;
    }

    public void onStartTemporaryDetach()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void removeUnsetPressCallback()>();

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 67108864;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        android.view.TouchDelegate r2;
        int i0, $i1, $i2, $i3, $i5, $i6, $i7, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25, $i26, $i32, $i33, $i34, $i35, $i36, $i37, $i38, i39, i40, $i41, $i42, $i43, i44, i45;
        boolean $z2, $z3, $z5, $z6, $z7, $z9, $z10, $z12, $z13, $z14, $z15, $z16, $z17, z18, z19, $z20, z21, z22, z23;
        long $l4, $l8, $l10, $l21, $l27, $l28, $l29, $l30, $l31;
        android.view.View$CheckForTap $r3, $r4, $r5, $r6, $r7;
        android.view.View$UnsetPressedState $r8, $r9, $r10, $r11, $r15;
        android.view.View$PerformClick $r12, $r13, $r14;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        i39 = r0.<android.view.View: int mViewFlags>;

        i40 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        $i1 = i39 & 16384;

        if $i1 == 16384 goto label02;

        $i37 = i39 & 2097152;

        if $i37 == 2097152 goto label02;

        $i38 = i39 & 8388608;

        if $i38 != 8388608 goto label01;

        goto label02;

     label01:
        z18 = 0;

        goto label03;

     label02:
        z18 = 1;

     label03:
        $i41 = i39 & 32;

        if $i41 != 32 goto label05;

        if i40 != 1 goto label04;

        $i35 = r0.<android.view.View: int mPrivateFlags>;

        $i36 = $i35 & 16384;

        if $i36 == 0 goto label04;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

     label04:
        $i42 = r0.<android.view.View: int mPrivateFlags3>;

        $i43 = $i42 & -131073;

        r0.<android.view.View: int mPrivateFlags3> = $i43;

        return z18;

     label05:
        r2 = r0.<android.view.View: android.view.TouchDelegate mTouchDelegate>;

        if r2 == null goto label06;

        $z17 = virtualinvoke r2.<android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        if $z17 == 0 goto label06;

        return 1;

     label06:
        if z18 != 0 goto label08;

        $i34 = i39 & 1073741824;

        if $i34 != 1073741824 goto label07;

        goto label08;

     label07:
        return 0;

     label08:
        if i40 == 0 goto label35;

        if i40 == 1 goto label21;

        if i40 == 2 goto label11;

        if i40 == 3 goto label09;

        goto label41;

     label09:
        if z18 == 0 goto label10;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

     label10:
        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        r0.<android.view.View: boolean mInContextButtonPress> = 0;

        r0.<android.view.View: boolean mHasPerformedLongPress> = 0;

        r0.<android.view.View: boolean mIgnoreNextUpEvent> = 0;

        $i32 = r0.<android.view.View: int mPrivateFlags3>;

        $i33 = $i32 & -131073;

        r0.<android.view.View: int mPrivateFlags3> = $i33;

        goto label41;

     label11:
        if z18 == 0 goto label12;

        virtualinvoke r0.<android.view.View: void drawableHotspotChanged(float,float)>(f0, f1);

     label12:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getClassification()>();

        if i0 != 1 goto label13;

        z19 = 1;

        goto label14;

     label13:
        z19 = 0;

     label14:
        i44 = r0.<android.view.View: int mTouchSlop>;

        if z19 == 0 goto label16;

        $z15 = specialinvoke r0.<android.view.View: boolean hasPendingLongPressCallback()>();

        if $z15 == 0 goto label16;

        $f4 = (float) i44;

        $z16 = virtualinvoke r0.<android.view.View: boolean pointInView(float,float,float)>(f0, f1, $f4);

        if $z16 != 0 goto label15;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        $i26 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $f9 = (float) $i26;

        $f8 = r0.<android.view.View: float mAmbiguousGestureMultiplier>;

        $f10 = $f9 * $f8;

        $l27 = (long) $f10;

        $l28 = virtualinvoke r1.<android.view.MotionEvent: long getEventTime()>();

        $l29 = virtualinvoke r1.<android.view.MotionEvent: long getDownTime()>();

        $l30 = $l28 - $l29;

        $l31 = $l27 - $l30;

        specialinvoke r0.<android.view.View: void checkForLongClick(long,float,float,int)>($l31, f0, f1, 3);

        goto label15;

     label15:
        $f6 = (float) i44;

        $f5 = r0.<android.view.View: float mAmbiguousGestureMultiplier>;

        $f7 = $f6 * $f5;

        i45 = (int) $f7;

        goto label17;

     label16:
        i45 = i44;

     label17:
        $f11 = (float) i45;

        $z20 = virtualinvoke r0.<android.view.View: boolean pointInView(float,float,float)>(f0, f1, $f11);

        if $z20 != 0 goto label19;

        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        $i22 = r0.<android.view.View: int mPrivateFlags>;

        $i23 = $i22 & 16384;

        if $i23 == 0 goto label18;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

     label18:
        $i24 = r0.<android.view.View: int mPrivateFlags3>;

        $i25 = $i24 & -131073;

        r0.<android.view.View: int mPrivateFlags3> = $i25;

     label19:
        z21 = 0;

        if i0 != 2 goto label20;

        z21 = 1;

     label20:
        if z21 == 0 goto label41;

        $z14 = specialinvoke r0.<android.view.View: boolean hasPendingLongPressCallback()>();

        if $z14 == 0 goto label41;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        specialinvoke r0.<android.view.View: void checkForLongClick(long,float,float,int)>(0L, f0, f1, 4);

        goto label41;

     label21:
        $i13 = r0.<android.view.View: int mPrivateFlags3>;

        $i14 = $i13 & -131073;

        r0.<android.view.View: int mPrivateFlags3> = $i14;

        $i15 = i39 & 1073741824;

        if $i15 != 1073741824 goto label22;

        specialinvoke r0.<android.view.View: void handleTooltipUp()>();

     label22:
        if z18 != 0 goto label23;

        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        r0.<android.view.View: boolean mInContextButtonPress> = 0;

        r0.<android.view.View: boolean mHasPerformedLongPress> = 0;

        r0.<android.view.View: boolean mIgnoreNextUpEvent> = 0;

        goto label41;

     label23:
        $i16 = r0.<android.view.View: int mPrivateFlags>;

        $i17 = $i16 & 33554432;

        if $i17 == 0 goto label24;

        z22 = 1;

        goto label25;

     label24:
        z22 = 0;

     label25:
        $i18 = r0.<android.view.View: int mPrivateFlags>;

        $i19 = $i18 & 16384;

        if $i19 != 0 goto label26;

        if z22 == 0 goto label34;

     label26:
        z23 = 0;

        $z5 = virtualinvoke r0.<android.view.View: boolean isFocusable()>();

        if $z5 == 0 goto label27;

        z23 = 0;

        $z12 = virtualinvoke r0.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z12 == 0 goto label27;

        z23 = 0;

        $z13 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z13 != 0 goto label27;

        z23 = virtualinvoke r0.<android.view.View: boolean requestFocus()>();

     label27:
        if z22 == 0 goto label28;

        specialinvoke r0.<android.view.View: void setPressed(boolean,float,float)>(1, f0, f1);

     label28:
        $z6 = r0.<android.view.View: boolean mHasPerformedLongPress>;

        if $z6 != 0 goto label30;

        $z9 = r0.<android.view.View: boolean mIgnoreNextUpEvent>;

        if $z9 != 0 goto label30;

        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        if z23 != 0 goto label30;

        $r12 = r0.<android.view.View: android.view.View$PerformClick mPerformClick>;

        if $r12 != null goto label29;

        $r14 = new android.view.View$PerformClick;

        specialinvoke $r14.<android.view.View$PerformClick: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$PerformClick mPerformClick> = $r14;

     label29:
        $r13 = r0.<android.view.View: android.view.View$PerformClick mPerformClick>;

        $z10 = virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r13);

        if $z10 != 0 goto label30;

        specialinvoke r0.<android.view.View: boolean performClickInternal()>();

     label30:
        $r15 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        if $r15 != null goto label31;

        $r11 = new android.view.View$UnsetPressedState;

        specialinvoke $r11.<android.view.View$UnsetPressedState: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState> = $r11;

     label31:
        if z22 == 0 goto label32;

        $r10 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        $i20 = staticinvoke <android.view.ViewConfiguration: int getPressedStateDuration()>();

        $l21 = (long) $i20;

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r10, $l21);

        goto label33;

     label32:
        $r8 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        $z7 = virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r8);

        if $z7 != 0 goto label33;

        $r9 = r0.<android.view.View: android.view.View$UnsetPressedState mUnsetPressedState>;

        virtualinvoke $r9.<android.view.View$UnsetPressedState: void run()>();

     label33:
        specialinvoke r0.<android.view.View: void removeTapCallback()>();

     label34:
        r0.<android.view.View: boolean mIgnoreNextUpEvent> = 0;

        goto label41;

     label35:
        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getSource()>();

        if $i2 != 4098 goto label36;

        $i11 = r0.<android.view.View: int mPrivateFlags3>;

        $i12 = $i11 | 131072;

        r0.<android.view.View: int mPrivateFlags3> = $i12;

     label36:
        r0.<android.view.View: boolean mHasPerformedLongPress> = 0;

        if z18 != 0 goto label37;

        $i9 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l10 = (long) $i9;

        specialinvoke r0.<android.view.View: void checkForLongClick(long,float,float,int)>($l10, f0, f1, 3);

        goto label41;

     label37:
        $z2 = virtualinvoke r0.<android.view.View: boolean performButtonActionOnTouchDown(android.view.MotionEvent)>(r1);

        if $z2 == 0 goto label38;

        goto label41;

     label38:
        $z3 = virtualinvoke r0.<android.view.View: boolean isInScrollingContainer()>();

        if $z3 == 0 goto label40;

        $i5 = r0.<android.view.View: int mPrivateFlags>;

        $i6 = $i5 | 33554432;

        r0.<android.view.View: int mPrivateFlags> = $i6;

        $r3 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        if $r3 != null goto label39;

        $r7 = new android.view.View$CheckForTap;

        specialinvoke $r7.<android.view.View$CheckForTap: void <init>(android.view.View,android.view.View$1)>(r0, null);

        r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap> = $r7;

     label39:
        $r4 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $r4.<android.view.View$CheckForTap: float x> = $f2;

        $r5 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $r5.<android.view.View$CheckForTap: float y> = $f3;

        $r6 = r0.<android.view.View: android.view.View$CheckForTap mPendingCheckForTap>;

        $i7 = staticinvoke <android.view.ViewConfiguration: int getTapTimeout()>();

        $l8 = (long) $i7;

        virtualinvoke r0.<android.view.View: boolean postDelayed(java.lang.Runnable,long)>($r6, $l8);

        goto label41;

     label40:
        specialinvoke r0.<android.view.View: void setPressed(boolean,float,float)>(1, f0, f1);

        $i3 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        $l4 = (long) $i3;

        specialinvoke r0.<android.view.View: void checkForLongClick(long,float,float,int)>($l4, f0, f1, 3);

     label41:
        return 1;
    }

    public boolean onTrackballEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    boolean onUnhandledKeyEvent(android.view.KeyEvent)
    {
        android.view.View r0;
        android.view.KeyEvent r1;
        android.view.View$ListenerInfo r2, $r4, $r6;
        java.util.ArrayList $r3, $r5, $r7;
        int $i0, i1;
        java.lang.Object $r8;
        android.view.View$OnUnhandledKeyEventListener $r9;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.KeyEvent;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label3;

        $r3 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4200(android.view.View$ListenerInfo)>(r2);

        if $r3 == null goto label3;

        $r4 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r5 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4200(android.view.View$ListenerInfo)>($r4);

        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        $r6 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r7 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4200(android.view.View$ListenerInfo)>($r6);

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r9 = (android.view.View$OnUnhandledKeyEventListener) $r8;

        $z0 = interfaceinvoke $r9.<android.view.View$OnUnhandledKeyEventListener: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)>(r0, r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return 0;
    }

    public void onVisibilityAggregated(boolean)
    {
        android.view.View r0;
        boolean z0, z1, $z2, $z3, $z5, $z7, $z10, $z11;
        android.os.Handler r1, $r2, $r3;
        int $i0, $i1, $i2, i3;
        android.os.Message $r4;
        android.view.View$VisibilityChangeForAutofillHandler $r5;
        android.view.View$AttachInfo $r6;
        android.graphics.drawable.Drawable r7, r8, r10;
        android.view.View$ForegroundInfo r9;
        android.view.autofill.AutofillManager r11;
        byte b4;
        java.util.List $r12;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        z1 = virtualinvoke r0.<android.view.View: boolean isAggregatedVisible()>();

        if z0 == 0 goto label01;

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        i3 = $i2 | 536870912;

        goto label02;

     label01:
        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        i3 = $i0 & -536870913;

     label02:
        r0.<android.view.View: int mPrivateFlags3> = i3;

        if z0 == 0 goto label03;

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r6 == null goto label03;

        specialinvoke r0.<android.view.View: boolean initialAwakenScrollBars()>();

     label03:
        r7 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r7 == null goto label04;

        $z7 = virtualinvoke r7.<android.graphics.drawable.Drawable: boolean isVisible()>();

        if z0 == $z7 goto label04;

        virtualinvoke r7.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, 0);

     label04:
        r8 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if r8 == null goto label05;

        $z5 = virtualinvoke r8.<android.graphics.drawable.Drawable: boolean isVisible()>();

        if z0 == $z5 goto label05;

        virtualinvoke r8.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, 0);

     label05:
        r9 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r9 == null goto label06;

        r10 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r9);

        goto label07;

     label06:
        r10 = null;

     label07:
        if r10 == null goto label08;

        $z3 = virtualinvoke r10.<android.graphics.drawable.Drawable: boolean isVisible()>();

        if z0 == $z3 goto label08;

        virtualinvoke r10.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, 0);

     label08:
        $z10 = specialinvoke r0.<android.view.View: boolean isAutofillable()>();

        if $z10 == 0 goto label12;

        r11 = specialinvoke r0.<android.view.View: android.view.autofill.AutofillManager getAutofillManager()>();

        if r11 == null goto label12;

        $i1 = virtualinvoke r0.<android.view.View: int getAutofillViewId()>();

        if $i1 <= 1073741823 goto label12;

        r1 = r0.<android.view.View: android.os.Handler mVisibilityChangeForAutofillHandler>;

        if r1 == null goto label09;

        virtualinvoke r1.<android.os.Handler: void removeMessages(int)>(0);

     label09:
        if z0 == 0 goto label10;

        virtualinvoke r11.<android.view.autofill.AutofillManager: void notifyViewVisibilityChanged(android.view.View,boolean)>(r0, 1);

        goto label12;

     label10:
        $r2 = r0.<android.view.View: android.os.Handler mVisibilityChangeForAutofillHandler>;

        if $r2 != null goto label11;

        $r5 = new android.view.View$VisibilityChangeForAutofillHandler;

        specialinvoke $r5.<android.view.View$VisibilityChangeForAutofillHandler: void <init>(android.view.autofill.AutofillManager,android.view.View,android.view.View$1)>(r11, r0, null);

        r0.<android.view.View: android.os.Handler mVisibilityChangeForAutofillHandler> = $r5;

     label11:
        $r3 = r0.<android.view.View: android.os.Handler mVisibilityChangeForAutofillHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(0, r0);

        virtualinvoke $r4.<android.os.Message: void sendToTarget()>();

     label12:
        if z0 == z1 goto label16;

        $z2 = specialinvoke r0.<android.view.View: boolean isAccessibilityPane()>();

        if $z2 == 0 goto label15;

        if z0 == 0 goto label13;

        b4 = 16;

        goto label14;

     label13:
        b4 = 32;

     label14:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(b4);

     label15:
        specialinvoke r0.<android.view.View: void notifyAppearedOrDisappearedForContentCaptureIfNeeded(boolean)>(z0);

        $r12 = virtualinvoke r0.<android.view.View: java.util.List getSystemGestureExclusionRects()>();

        $z11 = interfaceinvoke $r12.<java.util.List: boolean isEmpty()>();

        if $z11 != 0 goto label16;

        virtualinvoke r0.<android.view.View: void postUpdateSystemGestureExclusionRects()>();

     label16:
        return;
    }

    protected void onVisibilityChanged(android.view.View, int)
    {
        android.view.View r0, r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        return;
    }

    public void onWindowFocusChanged(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<android.view.View: boolean isPressed()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void setPressed(boolean)>(0);

     label1:
        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & -131073;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label2;

        specialinvoke r0.<android.view.View: void notifyFocusChangeToImeFocusController(boolean)>(0);

     label2:
        specialinvoke r0.<android.view.View: void removeLongPressCallback()>();

        specialinvoke r0.<android.view.View: void removeTapCallback()>();

        virtualinvoke r0.<android.view.View: void onFocusLost()>();

        goto label4;

     label3:
        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label4;

        specialinvoke r0.<android.view.View: void notifyFocusChangeToImeFocusController(boolean)>(1);

     label4:
        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        return;
    }

    public void onWindowSystemUiVisibilityChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        return;
    }

    protected void onWindowVisibilityChanged(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        specialinvoke r0.<android.view.View: boolean initialAwakenScrollBars()>();

     label1:
        return;
    }

    public void outputDirtyFlags(java.lang.String, boolean, int)
    {
        android.view.View r0, r22;
        java.lang.String r1, $r16, $r20;
        boolean z0, $z1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, i13;
        android.view.ViewGroup r2;
        java.lang.StringBuilder $r4, $r17;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("             DIRTY(");

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 2097152;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") DRAWN(");

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 32;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") CACHE_VALID(");

        $i6 = r0.<android.view.View: int mPrivateFlags>;

        $i7 = $i6 & 32768;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") INVALIDATED(");

        $i8 = r0.<android.view.View: int mPrivateFlags>;

        $i9 = $i8 & -2147483648;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r16 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r16);

        if z0 == 0 goto label1;

        $i11 = r0.<android.view.View: int mPrivateFlags>;

        $i12 = $i11 & i0;

        r0.<android.view.View: int mPrivateFlags> = $i12;

     label1:
        $z1 = r0 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        r2 = (android.view.ViewGroup) r0;

        i1 = virtualinvoke r2.<android.view.ViewGroup: int getChildCount()>();

        i13 = 0;

     label2:
        if i13 >= i1 goto label3;

        r22 = virtualinvoke r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(i13);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r22.<android.view.View: void outputDirtyFlags(java.lang.String,boolean,int)>($r20, z0, i0);

        i13 = i13 + 1;

        goto label2;

     label3:
        return;
    }

    protected boolean overScrollBy(int, int, int, int, int, int, int, int, boolean)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20;
        boolean z0, z1, z2, z3, z4, z5, z6, z7;

        r0 := @this: android.view.View;

        i7 := @parameter0: int;

        i8 := @parameter1: int;

        i9 := @parameter2: int;

        i10 := @parameter3: int;

        i11 := @parameter4: int;

        i0 := @parameter5: int;

        i12 := @parameter6: int;

        i1 := @parameter7: int;

        z0 := @parameter8: boolean;

        i2 = r0.<android.view.View: int mOverScrollMode>;

        $i3 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollRange()>();

        $i4 = virtualinvoke r0.<android.view.View: int computeHorizontalScrollExtent()>();

        if $i3 <= $i4 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        $i5 = virtualinvoke r0.<android.view.View: int computeVerticalScrollRange()>();

        $i6 = virtualinvoke r0.<android.view.View: int computeVerticalScrollExtent()>();

        if $i5 <= $i6 goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        if i2 == 0 goto label06;

        if i2 != 1 goto label05;

        if z1 == 0 goto label05;

        goto label06;

     label05:
        z3 = 0;

        goto label07;

     label06:
        z3 = 1;

     label07:
        if i2 == 0 goto label09;

        if i2 != 1 goto label08;

        if z2 == 0 goto label08;

        goto label09;

     label08:
        z4 = 0;

        goto label10;

     label09:
        z4 = 1;

     label10:
        i13 = i9 + i7;

        if z3 != 0 goto label11;

        i14 = 0;

        goto label12;

     label11:
        i14 = i12;

     label12:
        i15 = i10 + i8;

        if z4 != 0 goto label13;

        i16 = 0;

        goto label14;

     label13:
        i16 = i1;

     label14:
        i17 = neg i14;

        i18 = i14 + i11;

        i19 = neg i16;

        i20 = i16 + i0;

        if i13 <= i18 goto label15;

        z5 = 1;

        goto label17;

     label15:
        if i13 >= i17 goto label16;

        i18 = i17;

        z5 = 1;

        goto label17;

     label16:
        z5 = 0;

        i18 = i13;

     label17:
        if i15 <= i20 goto label18;

        z6 = 1;

        goto label20;

     label18:
        if i15 >= i19 goto label19;

        i20 = i19;

        z6 = 1;

        goto label20;

     label19:
        z6 = 0;

        i20 = i15;

     label20:
        virtualinvoke r0.<android.view.View: void onOverScrolled(int,int,boolean,boolean)>(i18, i20, z5, z6);

        if z5 != 0 goto label22;

        if z6 == 0 goto label21;

        goto label22;

     label21:
        z7 = 0;

        goto label23;

     label22:
        z7 = 1;

     label23:
        return z7;
    }

    public boolean performAccessibilityAction(int, android.os.Bundle)
    {
        android.view.View r0;
        int i0;
        android.os.Bundle r1;
        android.view.View$AccessibilityDelegate r2;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<android.view.View$AccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>(r0, i0, r1);

        return $z1;

     label1:
        $z0 = virtualinvoke r0.<android.view.View: boolean performAccessibilityActionInternal(int,android.os.Bundle)>(i0, r1);

        return $z0;
    }

    public boolean performAccessibilityActionInternal(int, android.os.Bundle)
    {
        android.view.View r0;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z14, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z26, $z27;
        com.android.internal.view.TooltipPopup $r1, $r2;
        java.lang.CharSequence $r3;
        int $i0, $i1, $i2, $i3, i4, i5, i6;
        android.view.ViewRootImpl $r4;
        android.os.Bundle r5;
        android.view.View$TooltipInfo r6, r7;
        android.view.View$AttachInfo r8;
        android.graphics.Rect r9;

        r0 := @this: android.view.View;

        i4 := @parameter0: int;

        r5 := @parameter1: android.os.Bundle;

        $z0 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        if $z0 == 0 goto label02;

        if i4 == 8192 goto label01;

        if i4 == 4096 goto label01;

        if i4 == 16908344 goto label01;

        if i4 == 16908345 goto label01;

        if i4 == 16908346 goto label01;

        if i4 != 16908347 goto label02;

     label01:
        $z27 = virtualinvoke r0.<android.view.View: boolean dispatchNestedPrePerformAccessibilityAction(int,android.os.Bundle)>(i4, r5);

        if $z27 == 0 goto label02;

        return 1;

     label02:
        lookupswitch(i4)
        {
            case 1: goto label27;
            case 2: goto label26;
            case 4: goto label25;
            case 8: goto label24;
            case 16: goto label23;
            case 32: goto label22;
            case 64: goto label21;
            case 128: goto label20;
            case 256: goto label19;
            case 512: goto label18;
            case 131072: goto label11;
            case 16908342: goto label10;
            case 16908348: goto label09;
            case 16908356: goto label07;
            case 16908357: goto label04;
            default: goto label03;
        };

     label03:
        goto label28;

     label04:
        r6 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        if r6 == null goto label06;

        $r1 = r6.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup>;

        if $r1 != null goto label05;

        goto label06;

     label05:
        virtualinvoke r0.<android.view.View: void hideTooltip()>();

        return 1;

     label06:
        return 0;

     label07:
        r7 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        if r7 == null goto label08;

        $r2 = r7.<android.view.View$TooltipInfo: com.android.internal.view.TooltipPopup mTooltipPopup>;

        if $r2 == null goto label08;

        return 0;

     label08:
        $z1 = specialinvoke r0.<android.view.View: boolean showLongClickTooltip(int,int)>(0, 0);

        return $z1;

     label09:
        $z2 = virtualinvoke r0.<android.view.View: boolean isContextClickable()>();

        if $z2 == 0 goto label28;

        virtualinvoke r0.<android.view.View: boolean performContextClick()>();

        return 1;

     label10:
        r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r8 == null goto label28;

        r9 = r8.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        virtualinvoke r0.<android.view.View: void getDrawingRect(android.graphics.Rect)>(r9);

        $z4 = virtualinvoke r0.<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>(r9, 1);

        return $z4;

     label11:
        $r3 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        if $r3 != null goto label12;

        return 0;

     label12:
        i5 = -1;

        if r5 == null goto label13;

        i6 = virtualinvoke r5.<android.os.Bundle: int getInt(java.lang.String,int)>("ACTION_ARGUMENT_SELECTION_START_INT", -1);

        goto label14;

     label13:
        i6 = -1;

     label14:
        if r5 == null goto label15;

        i5 = virtualinvoke r5.<android.os.Bundle: int getInt(java.lang.String,int)>("ACTION_ARGUMENT_SELECTION_END_INT", -1);

        goto label15;

     label15:
        $i0 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionStart()>();

        if $i0 != i6 goto label16;

        $i1 = virtualinvoke r0.<android.view.View: int getAccessibilitySelectionEnd()>();

        if $i1 == i5 goto label17;

     label16:
        if i6 != i5 goto label17;

        virtualinvoke r0.<android.view.View: void setAccessibilitySelection(int,int)>(i6, i5);

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        return 1;

     label17:
        goto label28;

     label18:
        if r5 == null goto label28;

        $i2 = virtualinvoke r5.<android.os.Bundle: int getInt(java.lang.String)>("ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT");

        $z5 = virtualinvoke r5.<android.os.Bundle: boolean getBoolean(java.lang.String)>("ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN");

        $z6 = specialinvoke r0.<android.view.View: boolean traverseAtGranularity(int,boolean,boolean)>($i2, 0, $z5);

        return $z6;

     label19:
        if r5 == null goto label28;

        $i3 = virtualinvoke r5.<android.os.Bundle: int getInt(java.lang.String)>("ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT");

        $z7 = virtualinvoke r5.<android.os.Bundle: boolean getBoolean(java.lang.String)>("ACTION_ARGUMENT_EXTEND_SELECTION_BOOLEAN");

        $z8 = specialinvoke r0.<android.view.View: boolean traverseAtGranularity(int,boolean,boolean)>($i3, 1, $z7);

        return $z8;

     label20:
        $z9 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocused()>();

        if $z9 == 0 goto label28;

        virtualinvoke r0.<android.view.View: void clearAccessibilityFocus()>();

        return 1;

     label21:
        $z10 = virtualinvoke r0.<android.view.View: boolean isAccessibilityFocused()>();

        if $z10 != 0 goto label28;

        $z11 = virtualinvoke r0.<android.view.View: boolean requestAccessibilityFocus()>();

        return $z11;

     label22:
        $z12 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z12 == 0 goto label28;

        virtualinvoke r0.<android.view.View: boolean performLongClick()>();

        return 1;

     label23:
        $z14 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        if $z14 == 0 goto label28;

        specialinvoke r0.<android.view.View: boolean performClickInternal()>();

        return 1;

     label24:
        $z16 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        if $z16 == 0 goto label28;

        virtualinvoke r0.<android.view.View: void setSelected(boolean)>(0);

        $z17 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        $z18 = $z17 ^ 1;

        return $z18;

     label25:
        $z19 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        if $z19 != 0 goto label28;

        virtualinvoke r0.<android.view.View: void setSelected(boolean)>(1);

        $z20 = virtualinvoke r0.<android.view.View: boolean isSelected()>();

        return $z20;

     label26:
        $z21 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        if $z21 == 0 goto label28;

        virtualinvoke r0.<android.view.View: void clearFocus()>();

        $z22 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        $z23 = $z22 ^ 1;

        return $z23;

     label27:
        $z24 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        if $z24 != 0 goto label28;

        $r4 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r4.<android.view.ViewRootImpl: boolean ensureTouchMode(boolean)>(0);

        $z26 = virtualinvoke r0.<android.view.View: boolean requestFocus()>();

        return $z26;

     label28:
        return 0;
    }

    protected boolean performButtonActionOnTouchDown(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isFromSource(int)>(8194);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getButtonState()>();

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        virtualinvoke r0.<android.view.View: boolean showContextMenu(float,float)>($f0, $f1);

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 | 67108864;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        return 1;

     label1:
        return 0;
    }

    public boolean performClick()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnClickListener $r2, $r3;
        boolean z0;

        r0 := @this: android.view.View;

        specialinvoke r0.<android.view.View: void notifyAutofillManagerOnClick()>();

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener>;

        if $r2 == null goto label1;

        virtualinvoke r0.<android.view.View: void playSoundEffect(int)>(0);

        $r3 = r1.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener>;

        interfaceinvoke $r3.<android.view.View$OnClickListener: void onClick(android.view.View)>(r0);

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(1);

        virtualinvoke r0.<android.view.View: void notifyEnterOrExitForAutoFillIfNeeded(boolean)>(1);

        return z0;
    }

    void performCollectViewAttributes(android.view.View$AttachInfo, int)
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.View$ListenerInfo r2;
        android.view.View$OnSystemUiVisibilityChangeListener $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        $i1 = i0 & 12;

        if $i1 != 0 goto label2;

        $i2 = r0.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 67108864;

        if $i3 != 67108864 goto label1;

        r1.<android.view.View$AttachInfo: boolean mKeepScreenOn> = 1;

     label1:
        $i5 = r1.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i4 = r0.<android.view.View: int mSystemUiVisibility>;

        $i6 = $i5 | $i4;

        r1.<android.view.View$AttachInfo: int mSystemUiVisibility> = $i6;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label2;

        $r3 = staticinvoke <android.view.View$ListenerInfo: android.view.View$OnSystemUiVisibilityChangeListener access$1800(android.view.View$ListenerInfo)>(r2);

        if $r3 == null goto label2;

        r1.<android.view.View$AttachInfo: boolean mHasSystemUiListeners> = 1;

     label2:
        return;
    }

    public boolean performContextClick()
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1;
        android.view.View$OnContextClickListener $r2, $r3;
        boolean z2;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(8388608);

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        z2 = 0;

        if r1 == null goto label1;

        z2 = 0;

        $r2 = r1.<android.view.View$ListenerInfo: android.view.View$OnContextClickListener mOnContextClickListener>;

        if $r2 == null goto label1;

        $r3 = r1.<android.view.View$ListenerInfo: android.view.View$OnContextClickListener mOnContextClickListener>;

        z2 = interfaceinvoke $r3.<android.view.View$OnContextClickListener: boolean onContextClick(android.view.View)>(r0);

     label1:
        if z2 == 0 goto label2;

        virtualinvoke r0.<android.view.View: boolean performHapticFeedback(int)>(6);

     label2:
        return z2;
    }

    public boolean performContextClick(float, float)
    {
        android.view.View r0;
        float f0, f1;
        boolean $z0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = virtualinvoke r0.<android.view.View: boolean performContextClick()>();

        return $z0;
    }

    public boolean performHapticFeedback(int)
    {
        android.view.View r0;
        int i0;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean performHapticFeedback(int,int)>(i0, 0);

        return $z0;
    }

    public boolean performHapticFeedback(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3;
        android.view.View$AttachInfo $r1, r2;
        boolean $z0, $z1, z2;
        android.view.View$AttachInfo$Callbacks r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        z2 = 0;

        if r2 != null goto label1;

        return 0;

     label1:
        $i2 = i1 & 1;

        if $i2 != 0 goto label2;

        $z1 = virtualinvoke r0.<android.view.View: boolean isHapticFeedbackEnabled()>();

        if $z1 != 0 goto label2;

        return 0;

     label2:
        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r3 = $r1.<android.view.View$AttachInfo: android.view.View$AttachInfo$Callbacks mRootCallbacks>;

        $i3 = i1 & 2;

        if $i3 == 0 goto label3;

        z2 = 1;

     label3:
        $z0 = interfaceinvoke r3.<android.view.View$AttachInfo$Callbacks: boolean performHapticFeedback(int,boolean)>(i0, z2);

        return $z0;
    }

    public boolean performLongClick()
    {
        android.view.View r0;
        float $f0, $f1;
        boolean $z0;

        r0 := @this: android.view.View;

        $f1 = r0.<android.view.View: float mLongClickX>;

        $f0 = r0.<android.view.View: float mLongClickY>;

        $z0 = specialinvoke r0.<android.view.View: boolean performLongClickInternal(float,float)>($f1, $f0);

        return $z0;
    }

    public boolean performLongClick(float, float)
    {
        android.view.View r0;
        float f0, f1;
        boolean z0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r0.<android.view.View: float mLongClickX> = f0;

        r0.<android.view.View: float mLongClickY> = f1;

        z0 = virtualinvoke r0.<android.view.View: boolean performLongClick()>();

        r0.<android.view.View: float mLongClickX> = #NaNF;

        r0.<android.view.View: float mLongClickY> = #NaNF;

        return z0;
    }

    public void playSoundEffect(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$AttachInfo r1, $r3;
        android.view.View$AttachInfo$Callbacks $r2, $r4;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label2;

        $r2 = r1.<android.view.View$AttachInfo: android.view.View$AttachInfo$Callbacks mRootCallbacks>;

        if $r2 == null goto label2;

        $z0 = virtualinvoke r0.<android.view.View: boolean isSoundEffectsEnabled()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.View$AttachInfo$Callbacks mRootCallbacks>;

        interfaceinvoke $r4.<android.view.View$AttachInfo$Callbacks: void playSoundEffect(int)>(i0);

        return;

     label2:
        return;
    }

    protected boolean pointInHoveredChild(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        return 0;
    }

    final boolean pointInView(float, float)
    {
        android.view.View r0;
        float f0, f1;
        boolean $z0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $z0 = virtualinvoke r0.<android.view.View: boolean pointInView(float,float,float)>(f0, f1, 0.0F);

        return $z0;
    }

    public boolean pointInView(float, float, float)
    {
        android.view.View r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8;
        byte $b0, $b1, $b5, $b9;
        int $i2, $i3, $i4, $i6, $i7, $i8;
        boolean z0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = neg f2;

        $b0 = f0 cmpl $f3;

        if $b0 < 0 goto label1;

        $f4 = neg f2;

        $b1 = f1 cmpl $f4;

        if $b1 < 0 goto label1;

        $i3 = r0.<android.view.View: int mRight>;

        $i2 = r0.<android.view.View: int mLeft>;

        $i4 = $i3 - $i2;

        $f5 = (float) $i4;

        $f6 = $f5 + f2;

        $b5 = f0 cmpg $f6;

        if $b5 >= 0 goto label1;

        $i7 = r0.<android.view.View: int mBottom>;

        $i6 = r0.<android.view.View: int mTop>;

        $i8 = $i7 - $i6;

        $f7 = (float) $i8;

        $f8 = $f7 + f2;

        $b9 = f1 cmpg $f8;

        if $b9 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean post(java.lang.Runnable)
    {
        android.view.View r0;
        java.lang.Runnable r1;
        android.view.View$AttachInfo r2;
        android.view.HandlerActionQueue $r3;
        android.os.Handler $r4;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Runnable;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r4.<android.os.Handler: boolean post(java.lang.Runnable)>(r1);

        return $z0;

     label1:
        $r3 = specialinvoke r0.<android.view.View: android.view.HandlerActionQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.HandlerActionQueue: void post(java.lang.Runnable)>(r1);

        return 1;
    }

    public boolean postDelayed(java.lang.Runnable, long)
    {
        android.view.View r0;
        java.lang.Runnable r1;
        long l0;
        android.view.View$AttachInfo r2;
        android.view.HandlerActionQueue $r3;
        android.os.Handler $r4;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $z0 = virtualinvoke $r4.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>(r1, l0);

        return $z0;

     label1:
        $r3 = specialinvoke r0.<android.view.View: android.view.HandlerActionQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.HandlerActionQueue: void postDelayed(java.lang.Runnable,long)>(r1, l0);

        return 1;
    }

    public void postInvalidate()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void postInvalidateDelayed(long)>(0L);

        return;
    }

    public void postInvalidate(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>(0L, i0, i1, i2, i3);

        return;
    }

    public void postInvalidateDelayed(long)
    {
        android.view.View r0;
        long l0;
        android.view.View$AttachInfo r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: android.view.View;

        l0 := @parameter0: long;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r2.<android.view.ViewRootImpl: void dispatchInvalidateDelayed(android.view.View,long)>(r0, l0);

     label1:
        return;
    }

    public void postInvalidateDelayed(long, int, int, int, int)
    {
        android.view.View r0;
        long l0;
        int i1, i2, i3, i4;
        android.view.View$AttachInfo r1;
        android.view.View$AttachInfo$InvalidateInfo r2;
        android.view.ViewRootImpl $r3;

        r0 := @this: android.view.View;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = staticinvoke <android.view.View$AttachInfo$InvalidateInfo: android.view.View$AttachInfo$InvalidateInfo obtain()>();

        r2.<android.view.View$AttachInfo$InvalidateInfo: android.view.View target> = r0;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int left> = i1;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int top> = i2;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int right> = i3;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int bottom> = i4;

        $r3 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r3.<android.view.ViewRootImpl: void dispatchInvalidateRectDelayed(android.view.View$AttachInfo$InvalidateInfo,long)>(r2, l0);

     label1:
        return;
    }

    public void postInvalidateOnAnimation()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r2.<android.view.ViewRootImpl: void dispatchInvalidateOnAnimation(android.view.View)>(r0);

     label1:
        return;
    }

    public void postInvalidateOnAnimation(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;
        android.view.View$AttachInfo r1;
        android.view.View$AttachInfo$InvalidateInfo r2;
        android.view.ViewRootImpl $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r2 = staticinvoke <android.view.View$AttachInfo$InvalidateInfo: android.view.View$AttachInfo$InvalidateInfo obtain()>();

        r2.<android.view.View$AttachInfo$InvalidateInfo: android.view.View target> = r0;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int left> = i0;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int top> = i1;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int right> = i2;

        r2.<android.view.View$AttachInfo$InvalidateInfo: int bottom> = i3;

        $r3 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r3.<android.view.ViewRootImpl: void dispatchInvalidateRectOnAnimation(android.view.View$AttachInfo$InvalidateInfo)>(r2);

     label1:
        return;
    }

    public void postOnAnimation(java.lang.Runnable)
    {
        android.view.View r0;
        java.lang.Runnable r1;
        android.view.View$AttachInfo r2;
        android.view.HandlerActionQueue $r3;
        android.view.ViewRootImpl $r4;
        android.view.Choreographer $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Runnable;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r5 = $r4.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r5.<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>(1, r1, null);

        goto label2;

     label1:
        $r3 = specialinvoke r0.<android.view.View: android.view.HandlerActionQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.HandlerActionQueue: void post(java.lang.Runnable)>(r1);

     label2:
        return;
    }

    public void postOnAnimationDelayed(java.lang.Runnable, long)
    {
        android.view.View r0;
        java.lang.Runnable r1;
        long l0;
        android.view.View$AttachInfo r2;
        android.view.HandlerActionQueue $r3;
        android.view.ViewRootImpl $r4;
        android.view.Choreographer $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Runnable;

        l0 := @parameter1: long;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r5 = $r4.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r5.<android.view.Choreographer: void postCallbackDelayed(int,java.lang.Runnable,java.lang.Object,long)>(1, r1, null, l0);

        goto label2;

     label1:
        $r3 = specialinvoke r0.<android.view.View: android.view.HandlerActionQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.HandlerActionQueue: void postDelayed(java.lang.Runnable,long)>(r1, l0);

     label2:
        return;
    }

    void postUpdateSystemGestureExclusionRects()
    {
        android.view.View r0;
        android.os.Handler r1;
        android.view._$$Lambda$WlJa6OPA72p3gYtA3nVKC7Z1tGY $r2;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.os.Handler getHandler()>();

        if r1 == null goto label1;

        $r2 = new android.view._$$Lambda$WlJa6OPA72p3gYtA3nVKC7Z1tGY;

        specialinvoke $r2.<android.view._$$Lambda$WlJa6OPA72p3gYtA3nVKC7Z1tGY: void <init>(android.view.View)>(r0);

        virtualinvoke r1.<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>($r2);

     label1:
        return;
    }

    protected void recomputePadding()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        $i3 = r0.<android.view.View: int mUserPaddingLeft>;

        $i2 = r0.<android.view.View: int mPaddingTop>;

        $i1 = r0.<android.view.View: int mUserPaddingRight>;

        $i0 = r0.<android.view.View: int mUserPaddingBottom>;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    public void refreshDrawableState()
    {
        android.view.View r0;
        android.view.ViewParent r1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 1024;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        virtualinvoke r0.<android.view.View: void drawableStateChanged()>();

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.view.ViewParent: void childDrawableStateChanged(android.view.View)>(r0);

     label1:
        return;
    }

    public void releasePointerCapture()
    {
        android.view.View r0;
        android.view.ViewRootImpl r1;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.ViewRootImpl: void requestPointerCapture(boolean)>(0);

     label1:
        return;
    }

    public boolean removeCallbacks(java.lang.Runnable)
    {
        android.view.View r0;
        java.lang.Runnable r1;
        android.view.View$AttachInfo r2;
        android.view.HandlerActionQueue $r3;
        android.os.Handler $r4;
        android.view.ViewRootImpl $r5;
        android.view.Choreographer $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Runnable;

        if r1 == null goto label2;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $r4 = r2.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>(r1);

        $r5 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r6 = $r5.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r6.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(1, r1, null);

     label1:
        $r3 = specialinvoke r0.<android.view.View: android.view.HandlerActionQueue getRunQueue()>();

        virtualinvoke $r3.<android.view.HandlerActionQueue: void removeCallbacks(java.lang.Runnable)>(r1);

     label2:
        return 1;
    }

    public void removeFrameMetricsListener(android.view.Window$OnFrameMetricsAvailableListener)
    {
        android.view.View r0;
        android.view.ThreadedRenderer r1;
        java.util.ArrayList r2;
        java.lang.IllegalArgumentException $r3;
        android.graphics.HardwareRendererObserver $r4;
        android.view.Window$OnFrameMetricsAvailableListener r5;
        android.view.FrameMetricsObserver r6;

        r0 := @this: android.view.View;

        r5 := @parameter0: android.view.Window$OnFrameMetricsAvailableListener;

        r1 = virtualinvoke r0.<android.view.View: android.view.ThreadedRenderer getThreadedRenderer()>();

        r6 = specialinvoke r0.<android.view.View: android.view.FrameMetricsObserver findFrameMetricsObserver(android.view.Window$OnFrameMetricsAvailableListener)>(r5);

        if r6 == null goto label2;

        r2 = r0.<android.view.View: java.util.ArrayList mFrameMetricsObservers>;

        if r2 == null goto label1;

        virtualinvoke r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r6);

        if r1 == null goto label1;

        $r4 = virtualinvoke r6.<android.view.FrameMetricsObserver: android.graphics.HardwareRendererObserver getRendererObserver()>();

        virtualinvoke r1.<android.view.ThreadedRenderer: void removeObserver(android.graphics.HardwareRendererObserver)>($r4);

     label1:
        return;

     label2:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("attempt to remove OnFrameMetricsAvailableListener that was never added");

        throw $r3;
    }

    public void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)
    {
        android.view.View r0;
        android.view.View$OnAttachStateChangeListener r1;
        android.view.View$ListenerInfo r2;
        java.util.concurrent.CopyOnWriteArrayList $r3, $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnAttachStateChangeListener;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label2;

        $r3 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$300(android.view.View$ListenerInfo)>(r2);

        if $r3 != null goto label1;

        goto label2;

     label1:
        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.concurrent.CopyOnWriteArrayList access$300(android.view.View$ListenerInfo)>(r2);

        virtualinvoke $r4.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        return;

     label2:
        return;
    }

    public void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)
    {
        android.view.View r0;
        android.view.View$OnLayoutChangeListener r1;
        android.view.View$ListenerInfo r2;
        java.util.ArrayList $r3, $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnLayoutChangeListener;

        r2 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r2 == null goto label2;

        $r3 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$200(android.view.View$ListenerInfo)>(r2);

        if $r3 != null goto label1;

        goto label2;

     label1:
        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$200(android.view.View$ListenerInfo)>(r2);

        virtualinvoke $r4.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return;

     label2:
        return;
    }

    public void removeOnUnhandledKeyEventListener(android.view.View$OnUnhandledKeyEventListener)
    {
        android.view.View r0;
        android.view.View$ListenerInfo r1, $r3, $r5, $r7, $r9;
        java.util.ArrayList $r2, $r4, $r6, $r8;
        boolean $z0, $z2, $z3;
        android.view.ViewGroup $r11;
        android.view.View$OnUnhandledKeyEventListener r12;
        android.view.ViewParent r13;

        r0 := @this: android.view.View;

        r12 := @parameter0: android.view.View$OnUnhandledKeyEventListener;

        r1 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if r1 == null goto label1;

        $r2 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4200(android.view.View$ListenerInfo)>(r1);

        if $r2 == null goto label1;

        $r3 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r4 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4200(android.view.View$ListenerInfo)>($r3);

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r5 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r6 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4200(android.view.View$ListenerInfo)>($r5);

        virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r12);

        $r7 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        $r8 = staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4200(android.view.View$ListenerInfo)>($r7);

        $z2 = virtualinvoke $r8.<java.util.ArrayList: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        $r9 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        staticinvoke <android.view.View$ListenerInfo: java.util.ArrayList access$4202(android.view.View$ListenerInfo,java.util.ArrayList)>($r9, null);

        r13 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z3 = r13 instanceof android.view.ViewGroup;

        if $z3 == 0 goto label1;

        $r11 = (android.view.ViewGroup) r13;

        virtualinvoke $r11.<android.view.ViewGroup: void decrementChildUnhandledKeyListeners()>();

     label1:
        return;
    }

    public boolean requestAccessibilityFocus()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4;
        android.content.Context $r1;
        boolean $z0, $z1;
        android.view.accessibility.AccessibilityManager r2;
        android.view.ViewRootImpl r3;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        r2 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r1);

        $z0 = virtualinvoke r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label5;

        $z1 = virtualinvoke r2.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z1 != 0 goto label1;

        goto label5;

     label1:
        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 12;

        if $i2 == 0 goto label2;

        return 0;

     label2:
        i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = i0 & 67108864;

        if $i3 != 0 goto label4;

        $i4 = i0 | 67108864;

        r0.<android.view.View: int mPrivateFlags2> = $i4;

        r3 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r3 == null goto label3;

        virtualinvoke r3.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(r0, null);

     label3:
        virtualinvoke r0.<android.view.View: void invalidate()>();

        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(32768);

        return 1;

     label4:
        return 0;

     label5:
        return 0;
    }

    public void requestApplyInsets()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void requestFitSystemWindows()>();

        return;
    }

    public void requestFitSystemWindows()
    {
        android.view.View r0;
        android.view.ViewParent r1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.view.ViewParent: void requestFitSystemWindows()>();

     label1:
        return;
    }

    public final boolean requestFocus()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean requestFocus(int)>(130);

        return $z0;
    }

    public final boolean requestFocus(int)
    {
        android.view.View r0;
        int i0;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, null);

        return $z0;
    }

    public boolean requestFocus(int, android.graphics.Rect)
    {
        android.view.View r0;
        int i0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        $z0 = specialinvoke r0.<android.view.View: boolean requestFocusNoSearch(int,android.graphics.Rect)>(i0, r1);

        return $z0;
    }

    public final boolean requestFocusFromTouch()
    {
        android.view.View r0;
        android.view.ViewRootImpl r1;
        boolean $z0, $z2;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isInTouchMode()>();

        if $z0 == 0 goto label1;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.ViewRootImpl: boolean ensureTouchMode(boolean)>(0);

     label1:
        $z2 = virtualinvoke r0.<android.view.View: boolean requestFocus(int)>(130);

        return $z2;
    }

    public void requestKeyboardShortcuts(java.util.List, int)
    {
        android.view.View r0;
        java.util.List r1;
        int i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        return;
    }

    public void requestLayout()
    {
        android.view.View r0, $r1, $r4;
        int i0, $i1, $i2;
        android.view.View$AttachInfo $r2, r6, $r8, r10;
        boolean $z0, $z1, $z2;
        android.view.ViewParent $r3, r9;
        android.util.LongSparseLongArray r5;
        android.view.ViewRootImpl r7;

        r0 := @this: android.view.View;

        r5 = r0.<android.view.View: android.util.LongSparseLongArray mMeasureCache>;

        if r5 == null goto label1;

        virtualinvoke r5.<android.util.LongSparseLongArray: void clear()>();

     label1:
        r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r6 == null goto label3;

        $r4 = r6.<android.view.View$AttachInfo: android.view.View mViewRequestingLayout>;

        if $r4 != null goto label3;

        r7 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r7 == null goto label2;

        $z1 = virtualinvoke r7.<android.view.ViewRootImpl: boolean isInLayout()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r7.<android.view.ViewRootImpl: boolean requestLayoutDuringLayout(android.view.View)>(r0);

        if $z2 != 0 goto label2;

        return;

     label2:
        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r8.<android.view.View$AttachInfo: android.view.View mViewRequestingLayout> = r0;

     label3:
        $i1 = r0.<android.view.View: int mPrivateFlags>;

        i0 = $i1 | 4096;

        r0.<android.view.View: int mPrivateFlags> = i0;

        $i2 = i0 | -2147483648;

        r0.<android.view.View: int mPrivateFlags> = $i2;

        r9 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r9 == null goto label4;

        $z0 = interfaceinvoke r9.<android.view.ViewParent: boolean isLayoutRequested()>();

        if $z0 != 0 goto label4;

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void requestLayout()>();

     label4:
        r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r10 == null goto label5;

        $r1 = r10.<android.view.View$AttachInfo: android.view.View mViewRequestingLayout>;

        if $r1 != r0 goto label5;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r2.<android.view.View$AttachInfo: android.view.View mViewRequestingLayout> = null;

     label5:
        return;
    }

    public void requestPointerCapture()
    {
        android.view.View r0;
        android.view.ViewRootImpl r1;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.ViewRootImpl: void requestPointerCapture(boolean)>(1);

     label1:
        return;
    }

    public boolean requestRectangleOnScreen(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        $z0 = virtualinvoke r0.<android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>(r1, 0);

        return $z0;
    }

    public boolean requestRectangleOnScreen(android.graphics.Rect, boolean)
    {
        android.view.View r0, r4;
        android.graphics.Rect r1;
        boolean z0, $z1, $z2, z3, z4;
        android.view.ViewParent $r2, r7;
        android.graphics.RectF $r3, r6;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.View$AttachInfo r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 != null goto label1;

        return 0;

     label1:
        r4 = r0;

        r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r5 == null goto label2;

        r6 = r5.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        goto label3;

     label2:
        $r3 = new android.graphics.RectF;

        specialinvoke $r3.<android.graphics.RectF: void <init>()>();

        r6 = $r3;

     label3:
        virtualinvoke r6.<android.graphics.RectF: void set(android.graphics.Rect)>(r1);

        r7 = r0.<android.view.View: android.view.ViewParent mParent>;

        z3 = 0;

     label4:
        z4 = z3;

        if r7 == null goto label6;

        $f0 = r6.<android.graphics.RectF: float left>;

        $i3 = (int) $f0;

        $f1 = r6.<android.graphics.RectF: float top>;

        $i2 = (int) $f1;

        $f2 = r6.<android.graphics.RectF: float right>;

        $i1 = (int) $f2;

        $f3 = r6.<android.graphics.RectF: float bottom>;

        $i0 = (int) $f3;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i3, $i2, $i1, $i0);

        $z1 = interfaceinvoke r7.<android.view.ViewParent: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>(r4, r1, z0);

        z3 = z3 | $z1;

        $z2 = r7 instanceof android.view.View;

        if $z2 != 0 goto label5;

        z4 = z3;

        goto label6;

     label5:
        $i4 = r4.<android.view.View: int mLeft>;

        $i5 = virtualinvoke r4.<android.view.View: int getScrollX()>();

        $i6 = $i4 - $i5;

        $f4 = (float) $i6;

        $i7 = r4.<android.view.View: int mTop>;

        $i8 = virtualinvoke r4.<android.view.View: int getScrollY()>();

        $i9 = $i7 - $i8;

        $f5 = (float) $i9;

        virtualinvoke r6.<android.graphics.RectF: void offset(float,float)>($f4, $f5);

        r4 = (android.view.View) r7;

        r7 = virtualinvoke r4.<android.view.View: android.view.ViewParent getParent()>();

        goto label4;

     label6:
        return z4;
    }

    public final void requestUnbufferedDispatch(int)
    {
        android.view.View r0;
        int i0, $i1;
        android.view.ViewParent r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mUnbufferedInputSource>;

        if $i1 != i0 goto label1;

        return;

     label1:
        r0.<android.view.View: int mUnbufferedInputSource> = i0;

        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r1 == null goto label2;

        interfaceinvoke r1.<android.view.ViewParent: void onDescendantUnbufferedRequested()>();

     label2:
        return;
    }

    public final void requestUnbufferedDispatch(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        int i0;
        android.view.View$AttachInfo $r2, $r3;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label3;

        if i0 == 0 goto label1;

        if i0 != 2 goto label3;

     label1:
        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isTouchEvent()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: boolean mUnbufferedDispatchRequested> = 1;

        return;

     label3:
        return;
    }

    public final android.view.View requireViewById(int)
    {
        android.view.View r0, r1;
        int i0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.view.View: android.view.View findViewById(int)>(i0);

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ID does not reference a View inside this View");

        throw $r2;
    }

    public void resetPaddingToInitialValues()
    {
        android.view.View r0;
        boolean $z0, $z1;
        int $i0, $i1, i2, i3, i4, i5;

        r0 := @this: android.view.View;

        $z0 = specialinvoke r0.<android.view.View: boolean isRtlCompatibilityMode()>();

        if $z0 == 0 goto label01;

        $i0 = r0.<android.view.View: int mUserPaddingLeftInitial>;

        r0.<android.view.View: int mPaddingLeft> = $i0;

        $i1 = r0.<android.view.View: int mUserPaddingRightInitial>;

        r0.<android.view.View: int mPaddingRight> = $i1;

        return;

     label01:
        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutRtl()>();

        if $z1 == 0 goto label06;

        i2 = r0.<android.view.View: int mUserPaddingEnd>;

        if i2 < 0 goto label02;

        goto label03;

     label02:
        i2 = r0.<android.view.View: int mUserPaddingLeftInitial>;

     label03:
        r0.<android.view.View: int mPaddingLeft> = i2;

        i3 = r0.<android.view.View: int mUserPaddingStart>;

        if i3 < 0 goto label04;

        goto label05;

     label04:
        i3 = r0.<android.view.View: int mUserPaddingRightInitial>;

     label05:
        r0.<android.view.View: int mPaddingRight> = i3;

        goto label11;

     label06:
        i4 = r0.<android.view.View: int mUserPaddingStart>;

        if i4 < 0 goto label07;

        goto label08;

     label07:
        i4 = r0.<android.view.View: int mUserPaddingLeftInitial>;

     label08:
        r0.<android.view.View: int mPaddingLeft> = i4;

        i5 = r0.<android.view.View: int mUserPaddingEnd>;

        if i5 < 0 goto label09;

        goto label10;

     label09:
        i5 = r0.<android.view.View: int mUserPaddingRightInitial>;

     label10:
        r0.<android.view.View: int mPaddingRight> = i5;

     label11:
        return;
    }

    public void resetPivot()
    {
        android.view.View r0;
        android.graphics.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.graphics.RenderNode: boolean resetPivot()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

     label1:
        return;
    }

    protected void resetResolvedDrawables()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void resetResolvedDrawablesInternal()>();

        return;
    }

    void resetResolvedDrawablesInternal()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -1073741825;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        return;
    }

    public void resetResolvedLayoutDirection()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -49;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        return;
    }

    public void resetResolvedPadding()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void resetResolvedPaddingInternal()>();

        return;
    }

    void resetResolvedPaddingInternal()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -536870913;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        return;
    }

    public void resetResolvedTextAlignment()
    {
        android.view.View r0;
        int i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mPrivateFlags2>;

        i0 = $i1 & -983041;

        r0.<android.view.View: int mPrivateFlags2> = i0;

        $i2 = i0 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i2;

        return;
    }

    public void resetResolvedTextDirection()
    {
        android.view.View r0;
        int i0, $i1, $i2;

        r0 := @this: android.view.View;

        $i1 = r0.<android.view.View: int mPrivateFlags2>;

        i0 = $i1 & -7681;

        r0.<android.view.View: int mPrivateFlags2> = i0;

        $i2 = i0 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i2;

        return;
    }

    public void resetRtlProperties()
    {
        android.view.View r0;

        r0 := @this: android.view.View;

        virtualinvoke r0.<android.view.View: void resetResolvedLayoutDirection()>();

        virtualinvoke r0.<android.view.View: void resetResolvedTextDirection()>();

        virtualinvoke r0.<android.view.View: void resetResolvedTextAlignment()>();

        virtualinvoke r0.<android.view.View: void resetResolvedPadding()>();

        virtualinvoke r0.<android.view.View: void resetResolvedDrawables()>();

        return;
    }

    void resetSubtreeAccessibilityStateChanged()
    {
        android.view.View r0;
        int $i0, $i1;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -134217729;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        return;
    }

    protected void resolveDrawables()
    {
        android.view.View r0;
        boolean $z0, $z1;
        int $i0, $i1, $i2, i3;
        android.graphics.drawable.Drawable $r1, $r3, r4, r6;
        android.view.View$ForegroundInfo $r2, r5;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean isLayoutDirectionResolved()>();

        if $z0 != 0 goto label1;

        $i2 = virtualinvoke r0.<android.view.View: int getRawLayoutDirection()>();

        if $i2 != 2 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutDirectionResolved()>();

        if $z1 == 0 goto label2;

        i3 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        goto label3;

     label2:
        i3 = virtualinvoke r0.<android.view.View: int getRawLayoutDirection()>();

     label3:
        r4 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r4 == null goto label4;

        virtualinvoke r4.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>(i3);

     label4:
        r5 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r5 == null goto label5;

        $r1 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r5);

        if $r1 == null goto label5;

        $r2 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r3 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r2);

        virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>(i3);

     label5:
        r6 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if r6 == null goto label6;

        virtualinvoke r6.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>(i3);

     label6:
        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 | 1073741824;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        virtualinvoke r0.<android.view.View: void onResolveDrawables(int)>(i3);

        return;
    }

    public boolean resolveLayoutDirection()
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14;
        boolean $z0, $z1, $z2;
        android.view.ViewParent $r3, $r4, $r8;
        java.util.Locale $r5;
        java.lang.AbstractMethodError $r6;
        java.lang.StringBuilder $r7;
        java.lang.Class $r9;
        java.lang.String $r10, $r13;

        r0 := @this: android.view.View;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & -49;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        $z0 = specialinvoke r0.<android.view.View: boolean hasRtlSupport()>();

        if $z0 == 0 goto label9;

        i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = i0 & 12;

        i1 = $i4 >> 2;

        if i1 == 1 goto label8;

        if i1 == 2 goto label2;

        if i1 == 3 goto label1;

        goto label9;

     label1:
        $r5 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        $i9 = staticinvoke <android.text.TextUtils: int getLayoutDirectionFromLocale(java.util.Locale)>($r5);

        if 1 != $i9 goto label9;

        $i10 = r0.<android.view.View: int mPrivateFlags2>;

        $i11 = $i10 | 16;

        r0.<android.view.View: int mPrivateFlags2> = $i11;

        goto label9;

     label2:
        $z1 = virtualinvoke r0.<android.view.View: boolean canResolveLayoutDirection()>();

        if $z1 != 0 goto label3;

        return 0;

     label3:
        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z2 = interfaceinvoke $r3.<android.view.ViewParent: boolean isLayoutDirectionResolved()>();

        if $z2 != 0 goto label5;

     label4:
        return 0;

     label5:
        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $i6 = interfaceinvoke $r4.<android.view.ViewParent: int getLayoutDirection()>();

        if $i6 != 1 goto label6;

        $i7 = r0.<android.view.View: int mPrivateFlags2>;

        $i8 = $i7 | 16;

        r0.<android.view.View: int mPrivateFlags2> = $i8;

     label6:
        goto label9;

     label7:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>();

        $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r13, $r6);

        goto label9;

     label8:
        $i5 = i0 | 16;

        r0.<android.view.View: int mPrivateFlags2> = $i5;

     label9:
        $i13 = r0.<android.view.View: int mPrivateFlags2>;

        $i14 = $i13 | 32;

        r0.<android.view.View: int mPrivateFlags2> = $i14;

        return 1;

        catch java.lang.AbstractMethodError from label3 to label4 with label7;
        catch java.lang.AbstractMethodError from label5 to label6 with label7;
    }

    public void resolveLayoutParams()
    {
        android.view.View r0;
        android.view.ViewGroup$LayoutParams r1;
        int $i0;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams>;

        if r1 == null goto label1;

        $i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r1.<android.view.ViewGroup$LayoutParams: void resolveLayoutDirection(int)>($i0);

     label1:
        return;
    }

    public void resolvePadding()
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11, $i12, $i13, $i14, $i15, $i16, $i17;
        android.graphics.Rect r1, $r6, r8;
        boolean $z0, $z1, $z3, $z4, $z5;
        android.graphics.drawable.Drawable $r2, $r5;
        java.lang.ThreadLocal $r3, $r7;
        java.lang.Object $r4;

        r0 := @this: android.view.View;

        i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        $z0 = specialinvoke r0.<android.view.View: boolean isRtlCompatibilityMode()>();

        if $z0 != 0 goto label15;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r2 == null goto label04;

        $z1 = r0.<android.view.View: boolean mLeftPaddingDefined>;

        if $z1 == 0 goto label01;

        $z5 = r0.<android.view.View: boolean mRightPaddingDefined>;

        if $z5 != 0 goto label04;

     label01:
        $r3 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        $r4 = virtualinvoke $r3.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (android.graphics.Rect) $r4;

        r8 = r1;

        if r1 != null goto label02;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r8 = $r6;

        $r7 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        virtualinvoke $r7.<java.lang.ThreadLocal: void set(java.lang.Object)>($r6);

     label02:
        $r5 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r8);

        $z3 = r0.<android.view.View: boolean mLeftPaddingDefined>;

        if $z3 != 0 goto label03;

        $i6 = r8.<android.graphics.Rect: int left>;

        r0.<android.view.View: int mUserPaddingLeftInitial> = $i6;

     label03:
        $z4 = r0.<android.view.View: boolean mRightPaddingDefined>;

        if $z4 != 0 goto label04;

        $i5 = r8.<android.graphics.Rect: int right>;

        r0.<android.view.View: int mUserPaddingRightInitial> = $i5;

     label04:
        if i0 == 1 goto label08;

        i7 = r0.<android.view.View: int mUserPaddingStart>;

        if i7 == -2147483648 goto label05;

        r0.<android.view.View: int mUserPaddingLeft> = i7;

        goto label06;

     label05:
        $i3 = r0.<android.view.View: int mUserPaddingLeftInitial>;

        r0.<android.view.View: int mUserPaddingLeft> = $i3;

     label06:
        i8 = r0.<android.view.View: int mUserPaddingEnd>;

        if i8 == -2147483648 goto label07;

        r0.<android.view.View: int mUserPaddingRight> = i8;

        goto label12;

     label07:
        $i4 = r0.<android.view.View: int mUserPaddingRightInitial>;

        r0.<android.view.View: int mUserPaddingRight> = $i4;

        goto label12;

     label08:
        i9 = r0.<android.view.View: int mUserPaddingStart>;

        if i9 == -2147483648 goto label09;

        r0.<android.view.View: int mUserPaddingRight> = i9;

        goto label10;

     label09:
        $i1 = r0.<android.view.View: int mUserPaddingRightInitial>;

        r0.<android.view.View: int mUserPaddingRight> = $i1;

     label10:
        i10 = r0.<android.view.View: int mUserPaddingEnd>;

        if i10 == -2147483648 goto label11;

        r0.<android.view.View: int mUserPaddingLeft> = i10;

        goto label12;

     label11:
        $i2 = r0.<android.view.View: int mUserPaddingLeftInitial>;

        r0.<android.view.View: int mUserPaddingLeft> = $i2;

     label12:
        i11 = r0.<android.view.View: int mUserPaddingBottom>;

        if i11 < 0 goto label13;

        goto label14;

     label13:
        i11 = r0.<android.view.View: int mPaddingBottom>;

     label14:
        r0.<android.view.View: int mUserPaddingBottom> = i11;

     label15:
        $i12 = r0.<android.view.View: int mUserPaddingLeft>;

        $i13 = r0.<android.view.View: int mPaddingTop>;

        $i14 = r0.<android.view.View: int mUserPaddingRight>;

        $i15 = r0.<android.view.View: int mUserPaddingBottom>;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i12, $i13, $i14, $i15);

        virtualinvoke r0.<android.view.View: void onRtlPropertiesChanged(int)>(i0);

        $i16 = r0.<android.view.View: int mPrivateFlags2>;

        $i17 = $i16 | 536870912;

        r0.<android.view.View: int mPrivateFlags2> = $i17;

        return;
    }

    public boolean resolveRtlPropertiesIfNeeded()
    {
        android.view.View r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        int $i0;

        r0 := @this: android.view.View;

        $z0 = specialinvoke r0.<android.view.View: boolean needRtlPropertiesResolution()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean isLayoutDirectionResolved()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<android.view.View: boolean resolveLayoutDirection()>();

        virtualinvoke r0.<android.view.View: void resolveLayoutParams()>();

     label2:
        $z2 = virtualinvoke r0.<android.view.View: boolean isTextDirectionResolved()>();

        if $z2 != 0 goto label3;

        virtualinvoke r0.<android.view.View: boolean resolveTextDirection()>();

     label3:
        $z3 = virtualinvoke r0.<android.view.View: boolean isTextAlignmentResolved()>();

        if $z3 != 0 goto label4;

        virtualinvoke r0.<android.view.View: boolean resolveTextAlignment()>();

     label4:
        $z4 = virtualinvoke r0.<android.view.View: boolean areDrawablesResolved()>();

        if $z4 != 0 goto label5;

        virtualinvoke r0.<android.view.View: void resolveDrawables()>();

     label5:
        $z5 = virtualinvoke r0.<android.view.View: boolean isPaddingResolved()>();

        if $z5 != 0 goto label6;

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label6:
        $i0 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r0.<android.view.View: void onRtlPropertiesChanged(int)>($i0);

        return 1;
    }

    public boolean resolveTextAlignment()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i21, $i22, i24, i25;
        boolean $z0, $z1, $z2;
        android.view.ViewParent $r1, $r2, $r5, $r13;
        java.lang.AbstractMethodError $r3, $r11;
        java.lang.StringBuilder $r4, $r12;
        java.lang.Class $r6, $r14;
        java.lang.String $r7, $r10, $r15, $r18;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -983041;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        $z0 = specialinvoke r0.<android.view.View: boolean hasRtlSupport()>();

        if $z0 == 0 goto label14;

        i24 = virtualinvoke r0.<android.view.View: int getRawTextAlignment()>();

        tableswitch(i24)
        {
            case 0: goto label03;
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label02;
            case 5: goto label02;
            case 6: goto label02;
            default: goto label01;
        };

     label01:
        $i18 = r0.<android.view.View: int mPrivateFlags2>;

        $i19 = $i18 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i19;

        goto label13;

     label02:
        $i7 = r0.<android.view.View: int mPrivateFlags2>;

        $i6 = i24 << 17;

        $i8 = $i7 | $i6;

        r0.<android.view.View: int mPrivateFlags2> = $i8;

        goto label13;

     label03:
        $z1 = virtualinvoke r0.<android.view.View: boolean canResolveTextAlignment()>();

        if $z1 != 0 goto label04;

        $i16 = r0.<android.view.View: int mPrivateFlags2>;

        $i17 = $i16 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i17;

        return 0;

     label04:
        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z2 = interfaceinvoke $r1.<android.view.ViewParent: boolean isTextAlignmentResolved()>();

        if $z2 != 0 goto label06;

        $i14 = r0.<android.view.View: int mPrivateFlags2>;

        $i15 = 131072 | $i14;

        r0.<android.view.View: int mPrivateFlags2> = $i15;

     label05:
        return 0;

     label06:
        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        i25 = interfaceinvoke $r2.<android.view.ViewParent: int getTextAlignment()>();

     label07:
        goto label09;

     label08:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r18, $r11);

        i25 = 1;

     label09:
        tableswitch(i25)
        {
            case 1: goto label11;
            case 2: goto label11;
            case 3: goto label11;
            case 4: goto label11;
            case 5: goto label11;
            case 6: goto label11;
            default: goto label10;
        };

     label10:
        $i12 = r0.<android.view.View: int mPrivateFlags2>;

        $i13 = $i12 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i13;

        goto label13;

     label11:
        $i10 = r0.<android.view.View: int mPrivateFlags2>;

        $i9 = i25 << 17;

        $i11 = $i10 | $i9;

        r0.<android.view.View: int mPrivateFlags2> = $i11;

        goto label13;

     label12:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r10, $r3);

        $i21 = r0.<android.view.View: int mPrivateFlags2>;

        $i22 = $i21 | 196608;

        r0.<android.view.View: int mPrivateFlags2> = $i22;

        return 1;

     label13:
        goto label15;

     label14:
        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 | 131072;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

     label15:
        $i4 = r0.<android.view.View: int mPrivateFlags2>;

        $i5 = $i4 | 65536;

        r0.<android.view.View: int mPrivateFlags2> = $i5;

        return 1;

        catch java.lang.AbstractMethodError from label04 to label05 with label12;
        catch java.lang.AbstractMethodError from label06 to label07 with label08;
    }

    public boolean resolveTextDirection()
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i22, $i23, i24, i25;
        boolean $z0, $z1, $z2;
        android.view.ViewParent $r1, $r2, $r5, $r13;
        java.lang.AbstractMethodError $r3, $r11;
        java.lang.StringBuilder $r4, $r12;
        java.lang.Class $r6, $r14;
        java.lang.String $r7, $r10, $r15, $r18;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 & -7681;

        r0.<android.view.View: int mPrivateFlags2> = $i1;

        $z0 = specialinvoke r0.<android.view.View: boolean hasRtlSupport()>();

        if $z0 == 0 goto label14;

        i24 = virtualinvoke r0.<android.view.View: int getRawTextDirection()>();

        tableswitch(i24)
        {
            case 0: goto label03;
            case 1: goto label02;
            case 2: goto label02;
            case 3: goto label02;
            case 4: goto label02;
            case 5: goto label02;
            case 6: goto label02;
            case 7: goto label02;
            default: goto label01;
        };

     label01:
        $i18 = r0.<android.view.View: int mPrivateFlags2>;

        $i19 = $i18 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i19;

        goto label13;

     label02:
        $i7 = r0.<android.view.View: int mPrivateFlags2>;

        $i6 = i24 << 10;

        $i8 = $i7 | $i6;

        r0.<android.view.View: int mPrivateFlags2> = $i8;

        goto label13;

     label03:
        $z1 = virtualinvoke r0.<android.view.View: boolean canResolveTextDirection()>();

        if $z1 != 0 goto label04;

        $i16 = r0.<android.view.View: int mPrivateFlags2>;

        $i17 = $i16 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i17;

        return 0;

     label04:
        $r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z2 = interfaceinvoke $r1.<android.view.ViewParent: boolean isTextDirectionResolved()>();

        if $z2 != 0 goto label06;

        $i14 = r0.<android.view.View: int mPrivateFlags2>;

        $i15 = $i14 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i15;

     label05:
        return 0;

     label06:
        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        i25 = interfaceinvoke $r2.<android.view.ViewParent: int getTextDirection()>();

     label07:
        goto label09;

     label08:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r10, $r3);

        i25 = 3;

     label09:
        tableswitch(i25)
        {
            case 1: goto label11;
            case 2: goto label11;
            case 3: goto label11;
            case 4: goto label11;
            case 5: goto label11;
            case 6: goto label11;
            case 7: goto label11;
            default: goto label10;
        };

     label10:
        $i12 = r0.<android.view.View: int mPrivateFlags2>;

        $i13 = $i12 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i13;

        goto label13;

     label11:
        $i10 = r0.<android.view.View: int mPrivateFlags2>;

        $i9 = i25 << 10;

        $i11 = $i10 | $i9;

        r0.<android.view.View: int mPrivateFlags2> = $i11;

        goto label13;

     label12:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r14 = virtualinvoke $r13.<java.lang.Object: java.lang.Class getClass()>();

        $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r18, $r11);

        $i22 = r0.<android.view.View: int mPrivateFlags2>;

        $i23 = $i22 | 1536;

        r0.<android.view.View: int mPrivateFlags2> = $i23;

        return 1;

     label13:
        goto label15;

     label14:
        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 | 1024;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

     label15:
        $i4 = r0.<android.view.View: int mPrivateFlags2>;

        $i5 = $i4 | 512;

        r0.<android.view.View: int mPrivateFlags2> = $i5;

        return 1;

        catch java.lang.AbstractMethodError from label04 to label05 with label12;
        catch java.lang.AbstractMethodError from label06 to label07 with label08;
    }

    public boolean restoreDefaultFocus()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean requestFocus(int)>(130);

        return $z0;
    }

    public boolean restoreFocusInCluster(int)
    {
        android.view.View r0;
        int i0;
        boolean $z0, $z1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean restoreDefaultFocus()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean requestFocus(int)>(i0);

        return $z1;
    }

    public boolean restoreFocusNotInCluster()
    {
        android.view.View r0;
        boolean $z0;

        r0 := @this: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean requestFocus(int)>(130);

        return $z0;
    }

    public void restoreHierarchyState(android.util.SparseArray)
    {
        android.view.View r0;
        android.util.SparseArray r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.util.SparseArray;

        virtualinvoke r0.<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>(r1);

        return;
    }

    boolean rootViewRequestFocus()
    {
        android.view.View r0, r1;
        boolean $z0, z1;

        r0 := @this: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.view.View: boolean requestFocus()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public final void saveAttributeDataForStyleable(android.content.Context, int[], android.util.AttributeSet, android.content.res.TypedArray, int, int)
    {
        android.view.View r0;
        int[] r1, r12;
        android.util.AttributeSet r2;
        android.content.res.TypedArray r3;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        boolean $z0;
        android.content.res.Resources$Theme $r4;
        android.util.SparseArray $r5, $r8, $r10;
        android.util.SparseIntArray $r6, $r7, $r9;
        android.content.Context r11;

        r0 := @this: android.view.View;

        r11 := @parameter0: android.content.Context;

        r1 := @parameter1: int[];

        r2 := @parameter2: android.util.AttributeSet;

        r3 := @parameter3: android.content.res.TypedArray;

        i5 := @parameter4: int;

        i6 := @parameter5: int;

        $z0 = <android.view.View: boolean sDebugViewAttributes>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = virtualinvoke r11.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $i1 = r0.<android.view.View: int mExplicitStyle>;

        r12 = virtualinvoke $r4.<android.content.res.Resources$Theme: int[] getAttributeResolutionStack(int,int,int)>(i5, i6, $i1);

        $r5 = r0.<android.view.View: android.util.SparseArray mAttributeResolutionStacks>;

        if $r5 != null goto label2;

        $r10 = new android.util.SparseArray;

        specialinvoke $r10.<android.util.SparseArray: void <init>()>();

        r0.<android.view.View: android.util.SparseArray mAttributeResolutionStacks> = $r10;

     label2:
        $r6 = r0.<android.view.View: android.util.SparseIntArray mAttributeSourceResId>;

        if $r6 != null goto label3;

        $r9 = new android.util.SparseIntArray;

        specialinvoke $r9.<android.util.SparseIntArray: void <init>()>();

        r0.<android.view.View: android.util.SparseIntArray mAttributeSourceResId> = $r9;

     label3:
        i7 = virtualinvoke r3.<android.content.res.TypedArray: int getIndexCount()>();

        i8 = 0;

     label4:
        if i8 >= i7 goto label5;

        i0 = virtualinvoke r3.<android.content.res.TypedArray: int getIndex(int)>(i8);

        $r7 = r0.<android.view.View: android.util.SparseIntArray mAttributeSourceResId>;

        $i2 = r1[i0];

        $i3 = virtualinvoke r3.<android.content.res.TypedArray: int getSourceResourceId(int,int)>(i0, 0);

        virtualinvoke $r7.<android.util.SparseIntArray: void append(int,int)>($i2, $i3);

        $r8 = r0.<android.view.View: android.util.SparseArray mAttributeResolutionStacks>;

        $i4 = r1[i0];

        virtualinvoke $r8.<android.util.SparseArray: void append(int,java.lang.Object)>($i4, r12);

        i8 = i8 + 1;

        goto label4;

     label5:
        return;
    }

    public void saveHierarchyState(android.util.SparseArray)
    {
        android.view.View r0;
        android.util.SparseArray r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.util.SparseArray;

        virtualinvoke r0.<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>(r1);

        return;
    }

    public void scheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable, long)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;
        android.view.View$AttachInfo r3;
        boolean $z0;
        long $l0, $l1, l2, l3;
        android.view.HandlerActionQueue $r4;
        android.view.ViewRootImpl $r5;
        android.view.Choreographer $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        l2 := @parameter2: long;

        $z0 = virtualinvoke r0.<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>(r1);

        if $z0 == 0 goto label2;

        if r2 == null goto label2;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l3 = l2 - $l0;

        r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r3 == null goto label1;

        $r5 = r3.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r6 = $r5.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $l1 = staticinvoke <android.view.Choreographer: long subtractFrameDelay(long)>(l3);

        virtualinvoke $r6.<android.view.Choreographer: void postCallbackDelayed(int,java.lang.Runnable,java.lang.Object,long)>(1, r2, r1, $l1);

        goto label2;

     label1:
        $r4 = specialinvoke r0.<android.view.View: android.view.HandlerActionQueue getRunQueue()>();

        virtualinvoke $r4.<android.view.HandlerActionQueue: void postDelayed(java.lang.Runnable,long)>(r2, l3);

     label2:
        return;
    }

    public void scrollBy(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<android.view.View: int mScrollX>;

        $i5 = $i2 + i0;

        $i3 = r0.<android.view.View: int mScrollY>;

        $i4 = $i3 + i1;

        virtualinvoke r0.<android.view.View: void scrollTo(int,int)>($i5, $i4);

        return;
    }

    public void scrollTo(int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i4 = r0.<android.view.View: int mScrollX>;

        if $i4 != i0 goto label1;

        $i7 = r0.<android.view.View: int mScrollY>;

        if $i7 == i1 goto label2;

     label1:
        i2 = r0.<android.view.View: int mScrollX>;

        i3 = r0.<android.view.View: int mScrollY>;

        r0.<android.view.View: int mScrollX> = i0;

        r0.<android.view.View: int mScrollY> = i1;

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

        $i6 = r0.<android.view.View: int mScrollX>;

        $i5 = r0.<android.view.View: int mScrollY>;

        virtualinvoke r0.<android.view.View: void onScrollChanged(int,int,int,int)>($i6, $i5, i2, i3);

        $z0 = virtualinvoke r0.<android.view.View: boolean awakenScrollBars()>();

        if $z0 != 0 goto label2;

        virtualinvoke r0.<android.view.View: void postInvalidateOnAnimation()>();

     label2:
        return;
    }

    public void sendAccessibilityEvent(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$AccessibilityDelegate r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)>(r0, i0);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void sendAccessibilityEventInternal(int)>(i0);

     label2:
        return;
    }

    public void sendAccessibilityEventInternal(int)
    {
        android.view.View r0;
        int i0;
        android.content.Context $r1;
        android.view.accessibility.AccessibilityManager $r2;
        boolean $z0;
        android.view.accessibility.AccessibilityEvent $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $r2 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r1);

        $z0 = virtualinvoke $r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(i0);

        virtualinvoke r0.<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>($r3);

     label1:
        return;
    }

    public void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View$AccessibilityDelegate r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        r2 = r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void sendAccessibilityEventUncheckedInternal(android.view.accessibility.AccessibilityEvent)>(r1);

     label2:
        return;
    }

    public void sendAccessibilityEventUncheckedInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.View r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View$SendAccessibilityEventThrottle r2;
        int $i0, $i1, $i2, $i3, i4;
        boolean z2, z3, $z4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        i4 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if i4 != 32 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 == 0 goto label3;

        $i2 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>();

        $i3 = 32 & $i2;

        if $i3 == 0 goto label3;

        z3 = 1;

        goto label4;

     label3:
        z3 = 0;

     label4:
        $z4 = virtualinvoke r0.<android.view.View: boolean isShown()>();

        if $z4 != 0 goto label5;

        if z3 != 0 goto label5;

        return;

     label5:
        virtualinvoke r0.<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        $i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        $i1 = $i0 & 172479;

        if $i1 == 0 goto label6;

        virtualinvoke r0.<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

     label6:
        r2 = specialinvoke r0.<android.view.View: android.view.View$SendAccessibilityEventThrottle getThrottleForAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        if r2 == null goto label7;

        virtualinvoke r2.<android.view.View$SendAccessibilityEventThrottle: void post(android.view.accessibility.AccessibilityEvent)>(r1);

        goto label8;

     label7:
        specialinvoke r0.<android.view.View: void requestParentSendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

     label8:
        return;
    }

    public void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)
    {
        android.view.View r0;
        android.view.View$AccessibilityDelegate r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$AccessibilityDelegate;

        r0.<android.view.View: android.view.View$AccessibilityDelegate mAccessibilityDelegate> = r1;

        return;
    }

    public void setAccessibilityHeading(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.View: void updatePflags3AndNotifyA11yIfChanged(int,boolean)>(-2147483648, z0);

        return;
    }

    public void setAccessibilityLiveRegion(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i2 = virtualinvoke r0.<android.view.View: int getAccessibilityLiveRegion()>();

        if i0 == $i2 goto label1;

        $i3 = r0.<android.view.View: int mPrivateFlags2>;

        i1 = $i3 & -25165825;

        r0.<android.view.View: int mPrivateFlags2> = i1;

        $i4 = i0 << 23;

        $i5 = $i4 & 25165824;

        $i6 = i1 | $i5;

        r0.<android.view.View: int mPrivateFlags2> = $i6;

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label1:
        return;
    }

    public void setAccessibilityPaneTitle(java.lang.CharSequence)
    {
        android.view.View r0;
        java.lang.CharSequence r1, $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.view.View: java.lang.CharSequence mAccessibilityPaneTitle>;

        $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, $r2);

        if $z0 != 0 goto label1;

        r0.<android.view.View: java.lang.CharSequence mAccessibilityPaneTitle> = r1;

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(8);

     label1:
        return;
    }

    public void setAccessibilitySelection(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3;
        java.lang.CharSequence $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != i1 goto label1;

        $i3 = r0.<android.view.View: int mAccessibilityCursorPosition>;

        if i1 != $i3 goto label1;

        return;

     label1:
        if i0 < 0 goto label2;

        if i0 != i1 goto label2;

        $r1 = virtualinvoke r0.<android.view.View: java.lang.CharSequence getIterableTextForAccessibility()>();

        $i2 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>();

        if i1 > $i2 goto label2;

        r0.<android.view.View: int mAccessibilityCursorPosition> = i0;

        goto label3;

     label2:
        r0.<android.view.View: int mAccessibilityCursorPosition> = -1;

     label3:
        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(8192);

        return;
    }

    public void setAccessibilityTraversalAfter(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mAccessibilityTraversalAfterId>;

        if $i1 != i0 goto label1;

        return;

     label1:
        r0.<android.view.View: int mAccessibilityTraversalAfterId> = i0;

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        return;
    }

    public void setAccessibilityTraversalBefore(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mAccessibilityTraversalBeforeId>;

        if $i1 != i0 goto label1;

        return;

     label1:
        r0.<android.view.View: int mAccessibilityTraversalBeforeId> = i0;

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        return;
    }

    public void setActivated(boolean)
    {
        android.view.View r0;
        boolean z0, z1;
        int $i0, $i1, $i2, i3, i4, i5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i3 = r0.<android.view.View: int mPrivateFlags>;

        i4 = 1073741824;

        $i0 = i3 & 1073741824;

        if $i0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z1 == z0 goto label5;

        i5 = r0.<android.view.View: int mPrivateFlags>;

        if z0 == 0 goto label3;

        goto label4;

     label3:
        i4 = 0;

     label4:
        $i1 = i5 & -1073741825;

        $i2 = $i1 | i4;

        r0.<android.view.View: int mPrivateFlags> = $i2;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke r0.<android.view.View: void dispatchSetActivated(boolean)>(z0);

     label5:
        return;
    }

    public void setAlpha(float)
    {
        android.view.View r0;
        float f0, $f1, $f2, $f3;
        android.view.View$TransformationInfo $r1;
        byte $b0;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        android.graphics.RenderNode $r2;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.view.View: void ensureTransformationInfo()>();

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f1 = staticinvoke <android.view.View$TransformationInfo: float access$2500(android.view.View$TransformationInfo)>($r1);

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label2;

        virtualinvoke r0.<android.view.View: void setAlphaInternal(float)>(f0);

        $f2 = 255.0F * f0;

        $i1 = (int) $f2;

        $z0 = virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>($i1);

        if $z0 == 0 goto label1;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 | 262144;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        goto label2;

     label1:
        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -262145;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r2 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f3 = specialinvoke r0.<android.view.View: float getFinalAlpha()>();

        virtualinvoke $r2.<android.graphics.RenderNode: boolean setAlpha(float)>($f3);

     label2:
        return;
    }

    void setAlphaInternal(float)
    {
        android.view.View r0;
        float f0, f1;
        android.view.View$TransformationInfo $r1, $r2;
        byte $b0, $b1;
        boolean $z0, z1, z2;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        f1 = staticinvoke <android.view.View$TransformationInfo: float access$2500(android.view.View$TransformationInfo)>($r1);

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        staticinvoke <android.view.View$TransformationInfo: float access$2502(android.view.View$TransformationInfo,float)>($r2, f0);

        z1 = 1;

        $b0 = f0 cmpl 0.0F;

        if $b0 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $b1 = f1 cmpl 0.0F;

        if $b1 != 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        $z0 = z2 ^ z1;

        if $z0 == 0 goto label5;

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label5:
        return;
    }

    boolean setAlphaNoInvalidation(float)
    {
        android.view.View r0;
        float f0, $f1, $f2, $f3;
        android.view.View$TransformationInfo $r1;
        byte $b0;
        int $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        android.graphics.RenderNode $r2;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.view.View: void ensureTransformationInfo()>();

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f1 = staticinvoke <android.view.View$TransformationInfo: float access$2500(android.view.View$TransformationInfo)>($r1);

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label2;

        virtualinvoke r0.<android.view.View: void setAlphaInternal(float)>(f0);

        $f2 = 255.0F * f0;

        $i1 = (int) $f2;

        $z0 = virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>($i1);

        if $z0 == 0 goto label1;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 | 262144;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        return 1;

     label1:
        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -262145;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        $r2 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f3 = specialinvoke r0.<android.view.View: float getFinalAlpha()>();

        virtualinvoke $r2.<android.graphics.RenderNode: boolean setAlpha(float)>($f3);

     label2:
        return 0;
    }

    public void setAnimation(android.view.animation.Animation)
    {
        android.view.View r0;
        android.view.animation.Animation r1;
        android.view.View$AttachInfo r2;
        int $i0;
        long $l1, $l3;
        byte $b2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.animation.Animation;

        r0.<android.view.View: android.view.animation.Animation mCurrentAnimation> = r1;

        if r1 == null goto label2;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $i0 = r2.<android.view.View$AttachInfo: int mDisplayState>;

        if $i0 != 1 goto label1;

        $l1 = virtualinvoke r1.<android.view.animation.Animation: long getStartTime()>();

        $b2 = $l1 cmp -1L;

        if $b2 != 0 goto label1;

        $l3 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        virtualinvoke r1.<android.view.animation.Animation: void setStartTime(long)>($l3);

     label1:
        virtualinvoke r1.<android.view.animation.Animation: void reset()>();

     label2:
        return;
    }

    public void setAnimationMatrix(android.graphics.Matrix)
    {
        android.view.View r0;
        android.graphics.Matrix r1;
        android.graphics.RenderNode $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Matrix;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r2 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r2.<android.graphics.RenderNode: boolean setAnimationMatrix(android.graphics.Matrix)>(r1);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        return;
    }

    public void setAssistBlocked(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 | 16384;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & -16385;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

     label2:
        return;
    }

    public transient void setAutofillHints(java.lang.String[])
    {
        android.view.View r0;
        java.lang.String[] r1;
        int $i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.String[];

        if r1 == null goto label2;

        $i0 = lengthof r1;

        if $i0 != 0 goto label1;

        goto label2;

     label1:
        r0.<android.view.View: java.lang.String[] mAutofillHints> = r1;

        goto label3;

     label2:
        r0.<android.view.View: java.lang.String[] mAutofillHints> = null;

     label3:
        return;
    }

    public void setAutofillId(android.view.autofill.AutofillId)
    {
        android.view.View r0;
        android.view.autofill.AutofillId r1, $r7;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.StringBuilder $r5;
        java.lang.String $r11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.autofill.AutofillId;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>("View.Autofill", 2);

        if $z0 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAutofill(): from ");

        $r7 = r0.<android.view.View: android.view.autofill.AutofillId mAutofillId>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("View.Autofill", $r11);

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z1 != 0 goto label7;

        if r1 == null goto label3;

        $z2 = virtualinvoke r1.<android.view.autofill.AutofillId: boolean isNonVirtual()>();

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set autofill id assigned to virtual views");

        throw $r4;

     label3:
        if r1 != null goto label4;

        $i5 = r0.<android.view.View: int mPrivateFlags3>;

        $i6 = $i5 & 1073741824;

        if $i6 != 0 goto label4;

        return;

     label4:
        r0.<android.view.View: android.view.autofill.AutofillId mAutofillId> = r1;

        if r1 == null goto label5;

        $i2 = virtualinvoke r1.<android.view.autofill.AutofillId: int getViewId()>();

        r0.<android.view.View: int mAutofillViewId> = $i2;

        $i3 = r0.<android.view.View: int mPrivateFlags3>;

        $i4 = 1073741824 | $i3;

        r0.<android.view.View: int mPrivateFlags3> = $i4;

        goto label6;

     label5:
        r0.<android.view.View: int mAutofillViewId> = -1;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & -1073741825;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

     label6:
        return;

     label7:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Cannot set autofill id when view is attached");

        throw $r3;
    }

    public void setAutofilled(boolean, boolean)
    {
        android.view.View r0;
        boolean z0, z1, $z2, z3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z2 = virtualinvoke r0.<android.view.View: boolean isAutofilled()>();

        if z0 == $z2 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        if z3 == 0 goto label7;

        if z0 == 0 goto label3;

        $i6 = r0.<android.view.View: int mPrivateFlags3>;

        $i7 = $i6 | 65536;

        r0.<android.view.View: int mPrivateFlags3> = $i7;

        goto label4;

     label3:
        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & -65537;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

     label4:
        if z1 == 0 goto label5;

        $i4 = r0.<android.view.View: int mPrivateFlags4>;

        $i5 = $i4 | 512;

        r0.<android.view.View: int mPrivateFlags4> = $i5;

        goto label6;

     label5:
        $i2 = r0.<android.view.View: int mPrivateFlags4>;

        $i3 = $i2 & -513;

        r0.<android.view.View: int mPrivateFlags4> = $i3;

     label6:
        virtualinvoke r0.<android.view.View: void invalidate()>();

     label7:
        return;
    }

    public void setBackground(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        virtualinvoke r0.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    void setBackgroundBounds()
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        $z0 = r0.<android.view.View: boolean mBackgroundSizeChanged>;

        if $z0 == 0 goto label1;

        r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r1 == null goto label1;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mLeft>;

        $i5 = $i1 - $i0;

        $i3 = r0.<android.view.View: int mBottom>;

        $i2 = r0.<android.view.View: int mTop>;

        $i4 = $i3 - $i2;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i5, $i4);

        r0.<android.view.View: boolean mBackgroundSizeChanged> = 0;

        specialinvoke r0.<android.view.View: void rebuildOutline()>();

     label1:
        return;
    }

    public void setBackgroundColor(int)
    {
        android.view.View r0;
        int i0;
        android.graphics.drawable.Drawable r1, $r3;
        boolean $z0;
        android.graphics.drawable.ColorDrawable $r2, $r4;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $z0 = r1 instanceof android.graphics.drawable.ColorDrawable;

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        $r4 = (android.graphics.drawable.ColorDrawable) $r3;

        virtualinvoke $r4.<android.graphics.drawable.ColorDrawable: void setColor(int)>(i0);

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        r0.<android.view.View: int mBackgroundResource> = 0;

        goto label2;

     label1:
        $r2 = new android.graphics.drawable.ColorDrawable;

        specialinvoke $r2.<android.graphics.drawable.ColorDrawable: void <init>(int)>(i0);

        virtualinvoke r0.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>($r2);

     label2:
        return;
    }

    public void setBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.Rect r1, $r8, r15;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        android.graphics.drawable.Drawable $r2, $r3, $r7, $r10, $r11, $r12, r13, r14, r16;
        java.lang.ThreadLocal $r4, $r9;
        java.lang.Object $r5;
        boolean $z1, $z2, $z4, $z6, z8, $z9, z10;
        int[] $r6;
        android.view.View$ForegroundInfo r17;

        r0 := @this: android.view.View;

        r13 := @parameter0: android.graphics.drawable.Drawable;

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        r14 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r13 != r14 goto label01;

        return;

     label01:
        z8 = 0;

        r0.<android.view.View: int mBackgroundResource> = 0;

        if r14 == null goto label03;

        $z6 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z6 == 0 goto label02;

        $r12 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke $r12.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(0, 0);

     label02:
        $r10 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke $r10.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

        $r11 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        virtualinvoke r0.<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>($r11);

     label03:
        if r13 == null goto label15;

        $r4 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>();

        r1 = (android.graphics.Rect) $r5;

        r15 = r1;

        if r1 != null goto label04;

        $r8 = new android.graphics.Rect;

        specialinvoke $r8.<android.graphics.Rect: void <init>()>();

        r15 = $r8;

        $r9 = <android.view.View: java.lang.ThreadLocal sThreadLocal>;

        virtualinvoke $r9.<java.lang.ThreadLocal: void set(java.lang.Object)>($r8);

     label04:
        virtualinvoke r0.<android.view.View: void resetResolvedDrawablesInternal()>();

        $i5 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r13.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>($i5);

        $z1 = virtualinvoke r13.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r15);

        if $z1 == 0 goto label07;

        virtualinvoke r0.<android.view.View: void resetResolvedPaddingInternal()>();

        $i12 = virtualinvoke r13.<android.graphics.drawable.Drawable: int getLayoutDirection()>();

        if $i12 == 1 goto label05;

        $i19 = r15.<android.graphics.Rect: int left>;

        r0.<android.view.View: int mUserPaddingLeftInitial> = $i19;

        $i20 = r15.<android.graphics.Rect: int right>;

        r0.<android.view.View: int mUserPaddingRightInitial> = $i20;

        $i24 = r15.<android.graphics.Rect: int left>;

        $i23 = r15.<android.graphics.Rect: int top>;

        $i22 = r15.<android.graphics.Rect: int right>;

        $i21 = r15.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i24, $i23, $i22, $i21);

        goto label06;

     label05:
        $i13 = r15.<android.graphics.Rect: int right>;

        r0.<android.view.View: int mUserPaddingLeftInitial> = $i13;

        $i14 = r15.<android.graphics.Rect: int left>;

        r0.<android.view.View: int mUserPaddingRightInitial> = $i14;

        $i18 = r15.<android.graphics.Rect: int right>;

        $i17 = r15.<android.graphics.Rect: int top>;

        $i16 = r15.<android.graphics.Rect: int left>;

        $i15 = r15.<android.graphics.Rect: int bottom>;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>($i18, $i17, $i16, $i15);

     label06:
        r0.<android.view.View: boolean mLeftPaddingDefined> = 0;

        r0.<android.view.View: boolean mRightPaddingDefined> = 0;

     label07:
        r16 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r16 == null goto label08;

        $i8 = virtualinvoke r16.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        $i9 = virtualinvoke r13.<android.graphics.drawable.Drawable: int getMinimumHeight()>();

        if $i8 != $i9 goto label08;

        $r7 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        $i10 = virtualinvoke $r7.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        $i11 = virtualinvoke r13.<android.graphics.drawable.Drawable: int getMinimumWidth()>();

        if $i10 == $i11 goto label09;

     label08:
        z8 = 1;

     label09:
        r0.<android.view.View: android.graphics.drawable.Drawable mBackground> = r13;

        $z9 = virtualinvoke r13.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z9 == 0 goto label10;

        $r6 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke r13.<android.graphics.drawable.Drawable: boolean setState(int[])>($r6);

     label10:
        $z2 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z2 == 0 goto label13;

        $i7 = virtualinvoke r0.<android.view.View: int getWindowVisibility()>();

        if $i7 != 0 goto label11;

        $z4 = virtualinvoke r0.<android.view.View: boolean isShown()>();

        if $z4 == 0 goto label11;

        z10 = 1;

        goto label12;

     label11:
        z10 = 0;

     label12:
        virtualinvoke r13.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z10, 0);

     label13:
        specialinvoke r0.<android.view.View: void applyBackgroundTint()>();

        virtualinvoke r13.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        i0 = r0.<android.view.View: int mPrivateFlags>;

        $i25 = i0 & 128;

        if $i25 == 0 goto label14;

        $i6 = i0 & -129;

        r0.<android.view.View: int mPrivateFlags> = $i6;

        z8 = 1;

     label14:
        goto label18;

     label15:
        r0.<android.view.View: android.graphics.drawable.Drawable mBackground> = null;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 128;

        if $i2 == 0 goto label17;

        $r2 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if $r2 != null goto label17;

        r17 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r17 == null goto label16;

        $r3 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r17);

        if $r3 != null goto label17;

     label16:
        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 | 128;

        r0.<android.view.View: int mPrivateFlags> = $i4;

     label17:
        z8 = 1;

     label18:
        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        if z8 == 0 goto label19;

        virtualinvoke r0.<android.view.View: void requestLayout()>();

     label19:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        virtualinvoke r0.<android.view.View: void invalidateOutline()>();

        return;
    }

    public void setBackgroundResource(int)
    {
        android.view.View r0;
        int i0, $i1;
        android.content.Context $r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $i1 = r0.<android.view.View: int mBackgroundResource>;

        if i0 != $i1 goto label1;

        return;

     label1:
        r2 = null;

        if i0 == 0 goto label2;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        r2 = virtualinvoke $r1.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i0);

     label2:
        virtualinvoke r0.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>(r2);

        r0.<android.view.View: int mBackgroundResource> = i0;

        return;
    }

    public void setBackgroundTintBlendMode(android.graphics.BlendMode)
    {
        android.view.View r0;
        android.graphics.BlendMode r1;
        android.view.View$TintInfo $r2, $r3, $r4, $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.BlendMode;

        $r2 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r2 != null goto label1;

        $r5 = new android.view.View$TintInfo;

        specialinvoke $r5.<android.view.View$TintInfo: void <init>()>();

        r0.<android.view.View: android.view.View$TintInfo mBackgroundTint> = $r5;

     label1:
        $r3 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r3.<android.view.View$TintInfo: android.graphics.BlendMode mBlendMode> = r1;

        $r4 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r4.<android.view.View$TintInfo: boolean mHasTintMode> = 1;

        specialinvoke r0.<android.view.View: void applyBackgroundTint()>();

        return;
    }

    public void setBackgroundTintList(android.content.res.ColorStateList)
    {
        android.view.View r0;
        android.content.res.ColorStateList r1;
        android.view.View$TintInfo $r2, $r3, $r4, $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        if $r2 != null goto label1;

        $r5 = new android.view.View$TintInfo;

        specialinvoke $r5.<android.view.View$TintInfo: void <init>()>();

        r0.<android.view.View: android.view.View$TintInfo mBackgroundTint> = $r5;

     label1:
        $r3 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r3.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList> = r1;

        $r4 = r0.<android.view.View: android.view.View$TintInfo mBackgroundTint>;

        $r4.<android.view.View$TintInfo: boolean mHasTintList> = 1;

        specialinvoke r0.<android.view.View: void applyBackgroundTint()>();

        return;
    }

    public void setBackgroundTintMode(android.graphics.PorterDuff$Mode)
    {
        android.view.View r0;
        android.graphics.PorterDuff$Mode r1;
        int $i0;
        android.graphics.BlendMode r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        r2 = null;

        if r1 == null goto label1;

        $i0 = r1.<android.graphics.PorterDuff$Mode: int nativeInt>;

        r2 = staticinvoke <android.graphics.BlendMode: android.graphics.BlendMode fromValue(int)>($i0);

     label1:
        virtualinvoke r0.<android.view.View: void setBackgroundTintBlendMode(android.graphics.BlendMode)>(r2);

        return;
    }

    public final void setBottom(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, i15, $i16, $i17, $i18, $i19;
        boolean z0;
        android.view.View$ForegroundInfo r1;
        android.view.View$AttachInfo $r2;
        android.graphics.RenderNode $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i3 = r0.<android.view.View: int mBottom>;

        if i0 == $i3 goto label7;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label3;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label4;

        $i6 = r0.<android.view.View: int mBottom>;

        if i0 >= $i6 goto label1;

        i12 = r0.<android.view.View: int mBottom>;

        goto label2;

     label1:
        i12 = i0;

     label2:
        $i8 = r0.<android.view.View: int mRight>;

        $i7 = r0.<android.view.View: int mLeft>;

        $i11 = $i8 - $i7;

        $i9 = r0.<android.view.View: int mTop>;

        $i10 = i12 - $i9;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>(0, 0, $i11, $i10);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label4:
        $i13 = r0.<android.view.View: int mRight>;

        $i14 = r0.<android.view.View: int mLeft>;

        i1 = $i13 - $i14;

        i2 = r0.<android.view.View: int mBottom>;

        i15 = r0.<android.view.View: int mTop>;

        r0.<android.view.View: int mBottom> = i0;

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setBottom(int)>(i0);

        $i16 = r0.<android.view.View: int mBottom>;

        $i17 = r0.<android.view.View: int mTop>;

        $i18 = $i16 - $i17;

        $i19 = i2 - i15;

        specialinvoke r0.<android.view.View: void sizeChange(int,int,int,int)>(i1, $i18, i1, $i19);

        if z0 != 0 goto label5;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label5:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        r0.<android.view.View: boolean mDefaultFocusHighlightSizeChanged> = 1;

        r1 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r1 == null goto label6;

        staticinvoke <android.view.View$ForegroundInfo: boolean access$2202(android.view.View$ForegroundInfo,boolean)>(r1, 1);

     label6:
        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label7:
        return;
    }

    public void setCameraDistance(float)
    {
        android.view.View r0;
        float f0, f1, $f2, $f3;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;
        int $i0;
        android.graphics.RenderNode $r3;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $r1 = r0.<android.view.View: android.content.res.Resources mResources>;

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i0 = $r2.<android.util.DisplayMetrics: int densityDpi>;

        f1 = (float) $i0;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $f3 = $f2 / f1;

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setCameraDistance(float)>($f3);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        return;
    }

    public void setClickable(boolean)
    {
        android.view.View r0;
        boolean z0;
        short s0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        s0 = 16384;

        goto label2;

     label1:
        s0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(s0, 16384);

        return;
    }

    public void setClipBounds(android.graphics.Rect)
    {
        android.view.View r0;
        android.graphics.Rect r1, $r2, r3, r4, $r6;
        boolean $z1;
        android.graphics.RenderNode $r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Rect;

        r3 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        if r1 == r3 goto label5;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.graphics.Rect: boolean equals(java.lang.Object)>(r3);

        if $z1 == 0 goto label1;

        goto label5;

     label1:
        if r1 == null goto label3;

        r4 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        if r4 != null goto label2;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r1);

        r0.<android.view.View: android.graphics.Rect mClipBounds> = $r2;

        goto label4;

     label2:
        virtualinvoke r4.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        goto label4;

     label3:
        r0.<android.view.View: android.graphics.Rect mClipBounds> = null;

     label4:
        $r5 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $r6 = r0.<android.view.View: android.graphics.Rect mClipBounds>;

        virtualinvoke $r5.<android.graphics.RenderNode: boolean setClipRect(android.graphics.Rect)>($r6);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        return;

     label5:
        return;
    }

    public void setClipToOutline(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.view.View: void damageInParent()>();

        $z1 = virtualinvoke r0.<android.view.View: boolean getClipToOutline()>();

        if $z1 == z0 goto label1;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setClipToOutline(boolean)>(z0);

     label1:
        return;
    }

    public void setContentCaptureSession(android.view.contentcapture.ContentCaptureSession)
    {
        android.view.View r0;
        android.view.contentcapture.ContentCaptureSession r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.contentcapture.ContentCaptureSession;

        r0.<android.view.View: android.view.contentcapture.ContentCaptureSession mContentCaptureSession> = r1;

        return;
    }

    public void setContentDescription(java.lang.CharSequence)
    {
        android.view.View r0;
        java.lang.CharSequence r1, r2;
        boolean $z0, z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.CharSequence;

        r2 = r0.<android.view.View: java.lang.CharSequence mContentDescription>;

        if r2 != null goto label1;

        if r1 != null goto label2;

        return;

     label1:
        $z0 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        return;

     label2:
        r0.<android.view.View: java.lang.CharSequence mContentDescription> = r1;

        if r1 == null goto label3;

        $i1 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        if z1 == 0 goto label5;

        $i0 = virtualinvoke r0.<android.view.View: int getImportantForAccessibility()>();

        if $i0 != 0 goto label5;

        virtualinvoke r0.<android.view.View: void setImportantForAccessibility(int)>(1);

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        goto label6;

     label5:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(4);

     label6:
        return;
    }

    public void setContextClickable(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i0 = 8388608;

        goto label2;

     label1:
        i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 8388608);

        return;
    }

    public void setDefaultFocusHighlightEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        r0.<android.view.View: boolean mDefaultFocusHighlightEnabled> = z0;

        return;
    }

    public void setDisabledSystemUiVisibility(int)
    {
        android.view.View r0;
        int i0, $i1;
        android.view.View$AttachInfo $r1, r2;
        android.view.ViewParent r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        $i1 = r2.<android.view.View$AttachInfo: int mDisabledSystemUiVisibility>;

        if $i1 == i0 goto label1;

        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r1.<android.view.View$AttachInfo: int mDisabledSystemUiVisibility> = i0;

        r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r3 == null goto label1;

        interfaceinvoke r3.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>(r0);

     label1:
        return;
    }

    void setDisplayListProperties(android.graphics.RenderNode)
    {
        android.view.View r0;
        android.graphics.RenderNode r1;
        android.view.ViewGroup r2, $r3, $r6;
        int i0, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z2, $z6, $z7, $z9, z10, $z11;
        byte $b1, $b2;
        float $f0, $f1, f2, f3, f4, f5;
        android.view.ViewParent $r4, r7, r8;
        android.graphics.Matrix $r5;
        android.view.animation.Transformation r9;
        android.view.View$TransformationInfo $r10;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.RenderNode;

        if r1 == null goto label7;

        $z0 = virtualinvoke r0.<android.view.View: boolean getHasOverlappingRendering()>();

        virtualinvoke r1.<android.graphics.RenderNode: boolean setHasOverlappingRendering(boolean)>($z0);

        r7 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z2 = r7 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label1;

        $r6 = (android.view.ViewGroup) r7;

        $z9 = virtualinvoke $r6.<android.view.ViewGroup: boolean getClipChildren()>();

        if $z9 == 0 goto label1;

        z10 = 1;

        goto label2;

     label1:
        z10 = 0;

     label2:
        virtualinvoke r1.<android.graphics.RenderNode: boolean setClipToBounds(boolean)>(z10);

        f2 = 1.0F;

        r8 = r0.<android.view.View: android.view.ViewParent mParent>;

        f3 = 1.0F;

        $z11 = r8 instanceof android.view.ViewGroup;

        if $z11 == 0 goto label4;

        f3 = 1.0F;

        $r3 = (android.view.ViewGroup) r8;

        $i4 = $r3.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 & 2048;

        if $i5 == 0 goto label4;

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        r2 = (android.view.ViewGroup) $r4;

        r9 = virtualinvoke r2.<android.view.ViewGroup: android.view.animation.Transformation getChildTransformation()>();

        f3 = 1.0F;

        $z7 = virtualinvoke r2.<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>(r0, r9);

        if $z7 == 0 goto label4;

        i0 = virtualinvoke r9.<android.view.animation.Transformation: int getTransformationType()>();

        f3 = 1.0F;

        if i0 == 0 goto label4;

        $i6 = i0 & 1;

        if $i6 == 0 goto label3;

        f2 = virtualinvoke r9.<android.view.animation.Transformation: float getAlpha()>();

     label3:
        f3 = f2;

        $i7 = i0 & 2;

        if $i7 == 0 goto label4;

        $r5 = virtualinvoke r9.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke r1.<android.graphics.RenderNode: boolean setStaticMatrix(android.graphics.Matrix)>($r5);

        f3 = f2;

     label4:
        $r10 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        if $r10 == null goto label6;

        $f0 = specialinvoke r0.<android.view.View: float getFinalAlpha()>();

        f4 = f3 * $f0;

        f5 = f4;

        $b2 = f4 cmpg 1.0F;

        if $b2 >= 0 goto label5;

        f5 = f4;

        $f1 = 255.0F * f4;

        $i3 = (int) $f1;

        $z6 = virtualinvoke r0.<android.view.View: boolean onSetAlpha(int)>($i3);

        if $z6 == 0 goto label5;

        f5 = 1.0F;

     label5:
        virtualinvoke r1.<android.graphics.RenderNode: boolean setAlpha(float)>(f5);

        goto label7;

     label6:
        $b1 = f3 cmpg 1.0F;

        if $b1 >= 0 goto label7;

        virtualinvoke r1.<android.graphics.RenderNode: boolean setAlpha(float)>(f3);

     label7:
        return;
    }

    public void setDrawingCacheBackgroundColor(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mDrawingCacheBackgroundColor>;

        if i0 == $i1 goto label1;

        r0.<android.view.View: int mDrawingCacheBackgroundColor> = i0;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -32769;

        r0.<android.view.View: int mPrivateFlags> = $i3;

     label1:
        return;
    }

    public void setDrawingCacheEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        char c0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        c0 = 0;

        r0.<android.view.View: boolean mCachingFailed> = 0;

        if z0 == 0 goto label1;

        c0 = 32768;

     label1:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(c0, 32768);

        return;
    }

    public void setDrawingCacheQuality(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 1572864);

        return;
    }

    public void setDuplicateParentStateEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i0 = 4194304;

        goto label2;

     label1:
        i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 4194304);

        return;
    }

    public void setElevation(float)
    {
        android.view.View r0;
        float $f0, f1, f2;
        byte $b0;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        f1 := @parameter0: float;

        $f0 = virtualinvoke r0.<android.view.View: float getElevation()>();

        $b0 = f1 cmpl $f0;

        if $b0 == 0 goto label1;

        f2 = staticinvoke <android.view.View: float sanitizeFloatPropertyValue(float,java.lang.String)>(f1, "elevation");

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setElevation(float)>(f2);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

     label1:
        return;
    }

    public void setEnabled(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        byte b0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isEnabled()>();

        if z0 != $z1 goto label1;

        return;

     label1:
        if z0 == 0 goto label2;

        b0 = 0;

        goto label3;

     label2:
        b0 = 32;

     label3:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(b0, 32);

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        if z0 != 0 goto label4;

        virtualinvoke r0.<android.view.View: void cancelPendingInputEvents()>();

     label4:
        return;
    }

    public void setFadingEdgeLength(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$ScrollabilityCache $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        $r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r1.<android.view.View$ScrollabilityCache: int fadingEdgeLength> = i0;

        return;
    }

    public void setFilterTouchesWhenObscured(boolean)
    {
        android.view.View r0;
        boolean z0;
        short s0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        s0 = 1024;

        goto label2;

     label1:
        s0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(s0, 1024);

        return;
    }

    public void setFitsSystemWindows(boolean)
    {
        android.view.View r0;
        boolean z0;
        byte b0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        b0 = 2;

        goto label2;

     label1:
        b0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(b0, 2);

        return;
    }

    void setFlags(int, int)
    {
        android.view.View r0, $r11, $r13;
        boolean z0, $z1, $z2, $z3, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, z16, z17, z18, $z19, $z20, z21, $z22;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i51, $i52, i53, i54, $i55, $i56, $i57, i58, i59, $i61, i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, i71;
        android.content.Context $r1;
        android.view.accessibility.AccessibilityManager $r2;
        android.view.ViewParent $r3, $r4, $r8, $r15, r19, r21, r22, r23, r25, r27, r30;
        android.graphics.drawable.Drawable $r5, $r6, $r7;
        android.view.ViewGroup $r9, $r12, $r14, $r18, r28;
        android.view.View$AttachInfo $r10, r24, r26, $r29, r32;
        java.lang.Thread $r16, $r17;
        byte $b50, b60;
        android.view.ViewRootImpl r20;
        android.view.View$ForegroundInfo r31;

        r0 := @this: android.view.View;

        i53 := @parameter0: int;

        i54 := @parameter1: int;

        $r1 = r0.<android.view.View: android.content.Context mContext>;

        $r2 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r1);

        z0 = virtualinvoke $r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if z0 == 0 goto label01;

        $z13 = virtualinvoke r0.<android.view.View: boolean includeForAccessibility()>();

        if $z13 == 0 goto label01;

        z14 = 1;

        goto label02;

     label01:
        z14 = 0;

     label02:
        i0 = r0.<android.view.View: int mViewFlags>;

        $i55 = r0.<android.view.View: int mViewFlags>;

        $i56 = $i55 & i54;

        $i57 = i53 & i54;

        i1 = $i56 | $i57;

        r0.<android.view.View: int mViewFlags> = i1;

        i2 = i1 ^ i0;

        if i2 != 0 goto label03;

        return;

     label03:
        i3 = r0.<android.view.View: int mPrivateFlags>;

        i58 = i2;

        i59 = 0;

        $i5 = i1 & 16;

        if $i5 == 0 goto label06;

        i58 = i2;

        i59 = 0;

        $i45 = i2 & 16401;

        if $i45 == 0 goto label06;

        $i46 = i1 & 16384;

        if $i46 == 0 goto label04;

        b60 = 1;

        goto label05;

     label04:
        b60 = 0;

     label05:
        $i47 = r0.<android.view.View: int mViewFlags>;

        $i48 = $i47 & -2;

        $i49 = $i48 | b60;

        r0.<android.view.View: int mViewFlags> = $i49;

        $i51 = i0 & 1;

        $b50 = b60 & 1;

        i59 = $i51 ^ $b50;

        $i52 = i2 & -2;

        i58 = $i52 | i59;

     label06:
        z16 = 0;

        $i61 = i58 & 1;

        if $i61 == 0 goto label09;

        z16 = 0;

        $i40 = i3 & 16;

        if $i40 == 0 goto label09;

        $i41 = i0 & 1;

        if $i41 != 1 goto label07;

        $i44 = i3 & 2;

        if $i44 == 0 goto label07;

        virtualinvoke r0.<android.view.View: void clearFocus()>();

        r19 = r0.<android.view.View: android.view.ViewParent mParent>;

        z16 = 0;

        $z12 = r19 instanceof android.view.ViewGroup;

        if $z12 == 0 goto label09;

        $r18 = (android.view.ViewGroup) r19;

        virtualinvoke $r18.<android.view.ViewGroup: void clearFocusedInCluster()>();

        z16 = 0;

        goto label09;

     label07:
        z16 = 0;

        $i42 = i0 & 1;

        if $i42 != 0 goto label09;

        z16 = 0;

        $i43 = i3 & 2;

        if $i43 != 0 goto label09;

        z16 = 0;

        $r15 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r15 == null goto label09;

        r20 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        $z11 = <android.view.View: boolean sAutoFocusableOffUIThreadWontNotifyParents>;

        if $z11 == 0 goto label08;

        if i59 == 0 goto label08;

        if r20 == null goto label08;

        z16 = 0;

        $r16 = r20.<android.view.ViewRootImpl: java.lang.Thread mThread>;

        $r17 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r16 != $r17 goto label09;

     label08:
        z16 = specialinvoke r0.<android.view.View: boolean canTakeFocus()>();

     label09:
        i62 = i53 & 12;

        z17 = z16;

        if i62 != 0 goto label10;

        z17 = z16;

        $i37 = i58 & 12;

        if $i37 == 0 goto label10;

        $i38 = r0.<android.view.View: int mPrivateFlags>;

        $i39 = $i38 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i39;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        virtualinvoke r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(1);

        z17 = specialinvoke r0.<android.view.View: boolean hasSize()>();

     label10:
        z18 = z17;

        $i63 = i58 & 32;

        if $i63 == 0 goto label12;

        $i35 = r0.<android.view.View: int mViewFlags>;

        $i36 = $i35 & 32;

        if $i36 != 0 goto label11;

        z18 = specialinvoke r0.<android.view.View: boolean canTakeFocus()>();

        goto label12;

     label11:
        z18 = z17;

        $z10 = virtualinvoke r0.<android.view.View: boolean isFocused()>();

        if $z10 == 0 goto label12;

        virtualinvoke r0.<android.view.View: void clearFocus()>();

        z18 = z17;

     label12:
        if z18 == 0 goto label13;

        r21 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r21 == null goto label13;

        interfaceinvoke r21.<android.view.ViewParent: void focusableViewAvailable(android.view.View)>(r0);

     label13:
        $i64 = i58 & 8;

        if $i64 == 0 goto label17;

        virtualinvoke r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(0);

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        $i31 = r0.<android.view.View: int mViewFlags>;

        $i32 = $i31 & 12;

        if $i32 != 8 goto label16;

        $z8 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        if $z8 == 0 goto label14;

        virtualinvoke r0.<android.view.View: void clearFocus()>();

        r22 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z9 = r22 instanceof android.view.ViewGroup;

        if $z9 == 0 goto label14;

        $r14 = (android.view.ViewGroup) r22;

        virtualinvoke $r14.<android.view.ViewGroup: void clearFocusedInCluster()>();

     label14:
        virtualinvoke r0.<android.view.View: void clearAccessibilityFocus()>();

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

        r23 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z19 = r23 instanceof android.view.View;

        if $z19 == 0 goto label15;

        $r13 = (android.view.View) r23;

        virtualinvoke $r13.<android.view.View: void invalidate(boolean)>(1);

     label15:
        $i33 = r0.<android.view.View: int mPrivateFlags>;

        $i34 = $i33 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i34;

     label16:
        r24 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r24 == null goto label17;

        r24.<android.view.View$AttachInfo: boolean mViewVisibilityChanged> = 1;

     label17:
        $i65 = i58 & 4;

        if $i65 == 0 goto label20;

        virtualinvoke r0.<android.view.View: void needGlobalAttributesUpdate(boolean)>(0);

        $i27 = r0.<android.view.View: int mPrivateFlags>;

        $i28 = $i27 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i28;

        $i29 = r0.<android.view.View: int mViewFlags>;

        $i30 = $i29 & 12;

        if $i30 != 4 goto label19;

        $r11 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        if $r11 == r0 goto label19;

        $z6 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        if $z6 == 0 goto label18;

        virtualinvoke r0.<android.view.View: void clearFocus()>();

        r25 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z7 = r25 instanceof android.view.ViewGroup;

        if $z7 == 0 goto label18;

        $r12 = (android.view.ViewGroup) r25;

        virtualinvoke $r12.<android.view.ViewGroup: void clearFocusedInCluster()>();

     label18:
        virtualinvoke r0.<android.view.View: void clearAccessibilityFocus()>();

     label19:
        r26 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r26 == null goto label20;

        r26.<android.view.View$AttachInfo: boolean mViewVisibilityChanged> = 1;

     label20:
        $i66 = i58 & 12;

        if $i66 == 0 goto label28;

        if i62 == 0 goto label21;

        $r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r10 == null goto label21;

        specialinvoke r0.<android.view.View: void cleanupDraw()>();

     label21:
        r27 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z20 = r27 instanceof android.view.ViewGroup;

        if $z20 == 0 goto label22;

        r28 = (android.view.ViewGroup) r27;

        $i26 = i58 & 12;

        virtualinvoke r28.<android.view.ViewGroup: void onChildVisibilityChanged(android.view.View,int,int)>(r0, $i26, i62);

        virtualinvoke r28.<android.view.ViewGroup: void invalidate(boolean)>(1);

        goto label23;

     label22:
        if r27 == null goto label23;

        interfaceinvoke r27.<android.view.ViewParent: void invalidateChild(android.view.View,android.graphics.Rect)>(r0, null);

        goto label23;

     label23:
        $r29 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r29 == null goto label28;

        virtualinvoke r0.<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>(r0, i62);

        $r8 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r8 == null goto label27;

        $i25 = virtualinvoke r0.<android.view.View: int getWindowVisibility()>();

        if $i25 != 0 goto label27;

        r30 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z3 = r30 instanceof android.view.ViewGroup;

        if $z3 == 0 goto label24;

        $r9 = (android.view.ViewGroup) r30;

        $z5 = virtualinvoke $r9.<android.view.ViewGroup: boolean isShown()>();

        if $z5 == 0 goto label27;

     label24:
        if i62 != 0 goto label25;

        z21 = 1;

        goto label26;

     label25:
        z21 = 0;

     label26:
        virtualinvoke r0.<android.view.View: boolean dispatchVisibilityAggregated(boolean)>(z21);

     label27:
        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label28:
        $i67 = 131072 & i58;

        if $i67 == 0 goto label29;

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

     label29:
        $i6 = 32768 & i58;

        if $i6 == 0 goto label30;

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

        $i23 = r0.<android.view.View: int mPrivateFlags>;

        $i24 = $i23 & -32769;

        r0.<android.view.View: int mPrivateFlags> = $i24;

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

     label30:
        $i7 = 1572864 & i58;

        if $i7 == 0 goto label31;

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

        $i21 = r0.<android.view.View: int mPrivateFlags>;

        $i22 = $i21 & -32769;

        r0.<android.view.View: int mPrivateFlags> = $i22;

     label31:
        $i8 = i58 & 128;

        if $i8 == 0 goto label36;

        $i15 = r0.<android.view.View: int mViewFlags>;

        $i16 = $i15 & 128;

        if $i16 == 0 goto label34;

        $r5 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r5 != null goto label33;

        $r6 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if $r6 != null goto label33;

        r31 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r31 == null goto label32;

        $r7 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r31);

        if $r7 == null goto label32;

        goto label33;

     label32:
        $i19 = r0.<android.view.View: int mPrivateFlags>;

        $i20 = $i19 | 128;

        r0.<android.view.View: int mPrivateFlags> = $i20;

        goto label35;

     label33:
        $i68 = r0.<android.view.View: int mPrivateFlags>;

        $i69 = $i68 & -129;

        r0.<android.view.View: int mPrivateFlags> = $i69;

        goto label35;

     label34:
        $i17 = r0.<android.view.View: int mPrivateFlags>;

        $i18 = $i17 & -129;

        r0.<android.view.View: int mPrivateFlags> = $i18;

     label35:
        virtualinvoke r0.<android.view.View: void requestLayout()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label36:
        $i70 = 67108864 & i58;

        if $i70 == 0 goto label37;

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r3 == null goto label37;

        r32 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r32 == null goto label37;

        $z2 = r32.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z2 != 0 goto label37;

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r4.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>(r0);

     label37:
        if z0 == 0 goto label42;

        i71 = i58;

        $z1 = specialinvoke r0.<android.view.View: boolean isAccessibilityPane()>();

        if $z1 == 0 goto label38;

        i71 = i58 & -13;

     label38:
        $i9 = i71 & 1;

        if $i9 != 0 goto label40;

        $i10 = i71 & 12;

        if $i10 != 0 goto label40;

        $i11 = i71 & 16384;

        if $i11 != 0 goto label40;

        $i12 = 2097152 & i71;

        if $i12 != 0 goto label40;

        $i13 = 8388608 & i71;

        if $i13 == 0 goto label39;

        goto label40;

     label39:
        $i14 = i71 & 32;

        if $i14 == 0 goto label42;

        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        goto label42;

     label40:
        $z22 = virtualinvoke r0.<android.view.View: boolean includeForAccessibility()>();

        if z14 == $z22 goto label41;

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        goto label42;

     label41:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label42:
        return;
    }

    public void setFocusable(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = i0 & 17;

        if $i1 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(0, 262144);

     label1:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 17);

        return;
    }

    public void setFocusable(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 = (int) z0;

        virtualinvoke r0.<android.view.View: void setFocusable(int)>(i0);

        return;
    }

    public void setFocusableInTouchMode(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i0 = 262144;

        goto label2;

     label1:
        i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 262144);

        if z0 == 0 goto label3;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(1, 17);

     label3:
        return;
    }

    public void setFocusedByDefault(boolean)
    {
        android.view.View r0;
        boolean z0, $z1, z2;
        android.view.ViewParent r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.ViewGroup $r2, $r3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & 262144;

        if $i1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z0 != z2 goto label3;

        return;

     label3:
        if z0 == 0 goto label4;

        $i4 = r0.<android.view.View: int mPrivateFlags3>;

        $i5 = $i4 | 262144;

        r0.<android.view.View: int mPrivateFlags3> = $i5;

        goto label5;

     label4:
        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & -262145;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

     label5:
        r1 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z1 = r1 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label7;

        if z0 == 0 goto label6;

        $r3 = (android.view.ViewGroup) r1;

        virtualinvoke $r3.<android.view.ViewGroup: void setDefaultFocus(android.view.View)>(r0);

        goto label7;

     label6:
        $r2 = (android.view.ViewGroup) r1;

        virtualinvoke $r2.<android.view.ViewGroup: void clearDefaultFocus(android.view.View)>(r0);

     label7:
        return;
    }

    public final void setFocusedInCluster()
    {
        android.view.View r0, $r1;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.view.View findKeyboardNavigationCluster()>();

        specialinvoke r0.<android.view.View: void setFocusedInCluster(android.view.View)>($r1);

        return;
    }

    public void setForceDarkAllowed(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z1 = virtualinvoke $r1.<android.graphics.RenderNode: boolean setForceDarkAllowed(boolean)>(z0);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidate()>();

     label1:
        return;
    }

    public void setForeground(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1, $r5, $r7, $r9, $r10, $r13, $r15, $r17;
        android.view.View$ForegroundInfo r2, $r3, $r4, $r6, $r12, $r14, $r16, $r18, $r19;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z2, $z3, $z5, $z7, z9;
        int[] $r11;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r3 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if $r3 != null goto label02;

        if r1 != null goto label01;

        return;

     label01:
        $r18 = new android.view.View$ForegroundInfo;

        specialinvoke $r18.<android.view.View$ForegroundInfo: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo> = $r18;

     label02:
        $r4 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r5 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r4);

        if r1 != $r5 goto label03;

        return;

     label03:
        $r6 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r7 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r6);

        if $r7 == null goto label05;

        $z7 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z7 == 0 goto label04;

        $r16 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r17 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r16);

        virtualinvoke $r17.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(0, 0);

     label04:
        $r12 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r13 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r12);

        virtualinvoke $r13.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

        $r14 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r15 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>($r14);

        virtualinvoke r0.<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>($r15);

     label05:
        $r19 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1602(android.view.View$ForegroundInfo,android.graphics.drawable.Drawable)>($r19, r1);

        r2 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        z9 = 1;

        staticinvoke <android.view.View$ForegroundInfo: boolean access$2202(android.view.View$ForegroundInfo,boolean)>(r2, 1);

        if r1 == null goto label11;

        i0 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = i0 & 128;

        if $i5 == 0 goto label06;

        $i8 = i0 & -129;

        r0.<android.view.View: int mPrivateFlags> = $i8;

     label06:
        $i6 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>($i6);

        $z2 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z2 == 0 goto label07;

        $r11 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r11);

     label07:
        specialinvoke r0.<android.view.View: void applyForegroundTint()>();

        $z3 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z3 == 0 goto label10;

        $i7 = virtualinvoke r0.<android.view.View: int getWindowVisibility()>();

        if $i7 != 0 goto label08;

        $z5 = virtualinvoke r0.<android.view.View: boolean isShown()>();

        if $z5 == 0 goto label08;

        goto label09;

     label08:
        z9 = 0;

     label09:
        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z9, 0);

     label10:
        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        goto label12;

     label11:
        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 128;

        if $i2 == 0 goto label12;

        $r9 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if $r9 != null goto label12;

        $r10 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if $r10 != null goto label12;

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 | 128;

        r0.<android.view.View: int mPrivateFlags> = $i4;

     label12:
        virtualinvoke r0.<android.view.View: void requestLayout()>();

        virtualinvoke r0.<android.view.View: void invalidate()>();

        return;
    }

    public void setForegroundGravity(int)
    {
        android.view.View r0;
        android.view.View$ForegroundInfo $r1, $r2, $r3, $r4;
        int $i0, $i1, $i2, i4, i5, i6;

        r0 := @this: android.view.View;

        i4 := @parameter0: int;

        $r1 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if $r1 != null goto label1;

        $r4 = new android.view.View$ForegroundInfo;

        specialinvoke $r4.<android.view.View$ForegroundInfo: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo> = $r4;

     label1:
        $r2 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $i0 = staticinvoke <android.view.View$ForegroundInfo: int access$2600(android.view.View$ForegroundInfo)>($r2);

        if $i0 == i4 goto label4;

        i5 = i4;

        $i1 = 8388615 & i4;

        if $i1 != 0 goto label2;

        i5 = i4 | 8388611;

     label2:
        i6 = i5;

        $i2 = i5 & 112;

        if $i2 != 0 goto label3;

        i6 = i5 | 48;

     label3:
        $r3 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        staticinvoke <android.view.View$ForegroundInfo: int access$2602(android.view.View$ForegroundInfo,int)>($r3, i6);

        virtualinvoke r0.<android.view.View: void requestLayout()>();

     label4:
        return;
    }

    public void setForegroundTintBlendMode(android.graphics.BlendMode)
    {
        android.view.View r0;
        android.graphics.BlendMode r1;
        android.view.View$ForegroundInfo $r2, $r3, $r5, $r7, $r10, $r12;
        android.view.View$TintInfo $r4, $r6, $r8, $r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.BlendMode;

        $r2 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if $r2 != null goto label1;

        $r12 = new android.view.View$ForegroundInfo;

        specialinvoke $r12.<android.view.View$ForegroundInfo: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo> = $r12;

     label1:
        $r3 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r4 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r3);

        if $r4 != null goto label2;

        $r10 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r9 = new android.view.View$TintInfo;

        specialinvoke $r9.<android.view.View$TintInfo: void <init>()>();

        staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2702(android.view.View$ForegroundInfo,android.view.View$TintInfo)>($r10, $r9);

     label2:
        $r5 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r6 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r5);

        $r6.<android.view.View$TintInfo: android.graphics.BlendMode mBlendMode> = r1;

        $r7 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r8 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r7);

        $r8.<android.view.View$TintInfo: boolean mHasTintMode> = 1;

        specialinvoke r0.<android.view.View: void applyForegroundTint()>();

        return;
    }

    public void setForegroundTintList(android.content.res.ColorStateList)
    {
        android.view.View r0;
        android.content.res.ColorStateList r1;
        android.view.View$ForegroundInfo $r2, $r3, $r5, $r7, $r10, $r12;
        android.view.View$TintInfo $r4, $r6, $r8, $r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.res.ColorStateList;

        $r2 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if $r2 != null goto label1;

        $r12 = new android.view.View$ForegroundInfo;

        specialinvoke $r12.<android.view.View$ForegroundInfo: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo> = $r12;

     label1:
        $r3 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r4 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r3);

        if $r4 != null goto label2;

        $r10 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r9 = new android.view.View$TintInfo;

        specialinvoke $r9.<android.view.View$TintInfo: void <init>()>();

        staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2702(android.view.View$ForegroundInfo,android.view.View$TintInfo)>($r10, $r9);

     label2:
        $r5 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r6 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r5);

        $r6.<android.view.View$TintInfo: android.content.res.ColorStateList mTintList> = r1;

        $r7 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        $r8 = staticinvoke <android.view.View$ForegroundInfo: android.view.View$TintInfo access$2700(android.view.View$ForegroundInfo)>($r7);

        $r8.<android.view.View$TintInfo: boolean mHasTintList> = 1;

        specialinvoke r0.<android.view.View: void applyForegroundTint()>();

        return;
    }

    public void setForegroundTintMode(android.graphics.PorterDuff$Mode)
    {
        android.view.View r0;
        android.graphics.PorterDuff$Mode r1;
        int $i0;
        android.graphics.BlendMode r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        r2 = null;

        if r1 == null goto label1;

        $i0 = r1.<android.graphics.PorterDuff$Mode: int nativeInt>;

        r2 = staticinvoke <android.graphics.BlendMode: android.graphics.BlendMode fromValue(int)>($i0);

     label1:
        virtualinvoke r0.<android.view.View: void setForegroundTintBlendMode(android.graphics.BlendMode)>(r2);

        return;
    }

    protected boolean setFrame(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25;
        android.view.View$ForegroundInfo r1;
        android.view.GhostView $r2;
        boolean z3, z4;
        android.graphics.RenderNode $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z3 = 0;

        $i9 = r0.<android.view.View: int mLeft>;

        if $i9 != i0 goto label1;

        $i14 = r0.<android.view.View: int mRight>;

        if $i14 != i2 goto label1;

        $i15 = r0.<android.view.View: int mTop>;

        if $i15 != i1 goto label1;

        $i16 = r0.<android.view.View: int mBottom>;

        if $i16 == i3 goto label9;

     label1:
        i4 = r0.<android.view.View: int mPrivateFlags>;

        $i17 = r0.<android.view.View: int mRight>;

        $i18 = r0.<android.view.View: int mLeft>;

        i5 = $i17 - $i18;

        $i19 = r0.<android.view.View: int mBottom>;

        $i20 = r0.<android.view.View: int mTop>;

        i6 = $i19 - $i20;

        i7 = i2 - i0;

        i8 = i3 - i1;

        if i7 != i5 goto label3;

        if i8 == i6 goto label2;

        goto label3;

     label2:
        z4 = 0;

        goto label4;

     label3:
        z4 = 1;

     label4:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(z4);

        r0.<android.view.View: int mLeft> = i0;

        r0.<android.view.View: int mTop> = i1;

        r0.<android.view.View: int mRight> = i2;

        r0.<android.view.View: int mBottom> = i3;

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setLeftTopRightBottom(int,int,int,int)>(i0, i1, i2, i3);

        $i21 = r0.<android.view.View: int mPrivateFlags>;

        $i22 = $i21 | 16;

        r0.<android.view.View: int mPrivateFlags> = $i22;

        if z4 == 0 goto label5;

        specialinvoke r0.<android.view.View: void sizeChange(int,int,int,int)>(i7, i8, i5, i6);

     label5:
        $i10 = r0.<android.view.View: int mViewFlags>;

        $i11 = $i10 & 12;

        if $i11 == 0 goto label6;

        $r2 = r0.<android.view.View: android.view.GhostView mGhostView>;

        if $r2 == null goto label7;

     label6:
        $i12 = r0.<android.view.View: int mPrivateFlags>;

        $i13 = $i12 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i13;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(z4);

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

     label7:
        $i23 = r0.<android.view.View: int mPrivateFlags>;

        $i24 = i4 & 32;

        $i25 = $i23 | $i24;

        r0.<android.view.View: int mPrivateFlags> = $i25;

        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        r0.<android.view.View: boolean mDefaultFocusHighlightSizeChanged> = 1;

        r1 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r1 == null goto label8;

        staticinvoke <android.view.View$ForegroundInfo: boolean access$2202(android.view.View$ForegroundInfo,boolean)>(r1, 1);

     label8:
        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        z3 = 1;

     label9:
        return z3;
    }

    public void setHapticFeedbackEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i0 = 268435456;

        goto label2;

     label1:
        i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 268435456);

        return;
    }

    public void setHasTransientState(boolean)
    {
        android.view.View r0;
        boolean z0, z1, z2;
        int i1, $i2, $i3, $i4, $i5, $i7, i9, i10;
        java.lang.AbstractMethodError $r2;
        java.lang.StringBuilder $r3;
        android.view.ViewParent $r4, r10;
        java.lang.Class $r5;
        java.lang.String $r6, $r9;

        r0 := @this: android.view.View;

        z1 := @parameter0: boolean;

        z0 = virtualinvoke r0.<android.view.View: boolean hasTransientState()>();

        if z1 == 0 goto label01;

        $i7 = r0.<android.view.View: int mTransientStateCount>;

        i9 = $i7 + 1;

        goto label02;

     label01:
        $i2 = r0.<android.view.View: int mTransientStateCount>;

        i9 = $i2 - 1;

     label02:
        r0.<android.view.View: int mTransientStateCount> = i9;

        if i9 >= 0 goto label03;

        r0.<android.view.View: int mTransientStateCount> = 0;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("View", "hasTransientState decremented below 0: unmatched pair of setHasTransientState calls");

        goto label10;

     label03:
        if z1 == 0 goto label04;

        if i9 == 1 goto label05;

     label04:
        if z1 != 0 goto label10;

        $i3 = r0.<android.view.View: int mTransientStateCount>;

        if $i3 != 0 goto label10;

     label05:
        i1 = r0.<android.view.View: int mPrivateFlags2>;

        i10 = 0;

        if z1 == 0 goto label06;

        i10 = -2147483648;

     label06:
        $i4 = i1 & 2147483647;

        $i5 = $i4 | i10;

        r0.<android.view.View: int mPrivateFlags2> = $i5;

        z2 = virtualinvoke r0.<android.view.View: boolean hasTransientState()>();

        r10 = r0.<android.view.View: android.view.ViewParent mParent>;

        if r10 == null goto label10;

        if z2 == z0 goto label10;

     label07:
        interfaceinvoke r10.<android.view.ViewParent: void childHasTransientStateChanged(android.view.View,boolean)>(r0, z2);

     label08:
        goto label10;

     label09:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r9, $r2);

     label10:
        return;

        catch java.lang.AbstractMethodError from label07 to label08 with label09;
    }

    public void setHorizontalFadingEdgeEnabled(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isHorizontalFadingEdgeEnabled()>();

        if $z1 == z0 goto label2;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

     label1:
        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 ^ 4096;

        r0.<android.view.View: int mViewFlags> = $i1;

     label2:
        return;
    }

    public void setHorizontalScrollBarEnabled(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isHorizontalScrollBarEnabled()>();

        if $z1 == z0 goto label1;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 ^ 256;

        r0.<android.view.View: int mViewFlags> = $i1;

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        return;
    }

    public void setHorizontalScrollbarThumbDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.view.View$ScrollabilityCache $r2;
        android.widget.ScrollBarDrawable $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke r0.<android.view.View: void initializeScrollBarDrawable()>();

        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r3.<android.widget.ScrollBarDrawable: void setHorizontalThumbDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    public void setHorizontalScrollbarTrackDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.view.View$ScrollabilityCache $r2;
        android.widget.ScrollBarDrawable $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke r0.<android.view.View: void initializeScrollBarDrawable()>();

        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r3.<android.widget.ScrollBarDrawable: void setHorizontalTrackDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    public void setHovered(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, i4, i5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i4 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = i4 & 268435456;

        if $i2 != 0 goto label2;

        $i3 = 268435456 | i4;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke r0.<android.view.View: void onHoverChanged(boolean)>(1);

        goto label2;

     label1:
        i5 = r0.<android.view.View: int mPrivateFlags>;

        $i0 = 268435456 & i5;

        if $i0 == 0 goto label2;

        $i1 = -268435457 & i5;

        r0.<android.view.View: int mPrivateFlags> = $i1;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke r0.<android.view.View: void onHoverChanged(boolean)>(0);

     label2:
        return;
    }

    public void setId(int)
    {
        android.view.View r0;
        int i0, $i1, $i2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mID> = i0;

        if i0 != -1 goto label1;

        $i1 = r0.<android.view.View: int mLabelForId>;

        if $i1 == -1 goto label1;

        $i2 = staticinvoke <android.view.View: int generateViewId()>();

        r0.<android.view.View: int mID> = $i2;

     label1:
        return;
    }

    public void setImportantForAccessibility(int)
    {
        android.view.View r0, r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        boolean $z1, $z2, z3, z4, z5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i2 = virtualinvoke r0.<android.view.View: int getImportantForAccessibility()>();

        if i0 == i2 goto label12;

        if i0 != 4 goto label01;

        z3 = 1;

        goto label02;

     label01:
        z3 = 0;

     label02:
        if i0 == 2 goto label03;

        if z3 == 0 goto label04;

     label03:
        r1 = specialinvoke r0.<android.view.View: android.view.View findAccessibilityFocusHost(boolean)>(z3);

        if r1 == null goto label04;

        virtualinvoke r1.<android.view.View: void clearAccessibilityFocus()>();

     label04:
        if i2 == 0 goto label06;

        if i0 != 0 goto label05;

        goto label06;

     label05:
        z4 = 0;

        goto label07;

     label06:
        z4 = 1;

     label07:
        if z4 == 0 goto label08;

        $z2 = virtualinvoke r0.<android.view.View: boolean includeForAccessibility()>();

        if $z2 == 0 goto label08;

        z5 = 1;

        goto label09;

     label08:
        z5 = 0;

     label09:
        $i3 = r0.<android.view.View: int mPrivateFlags2>;

        i1 = $i3 & -7340033;

        r0.<android.view.View: int mPrivateFlags2> = i1;

        $i4 = i0 << 20;

        $i5 = $i4 & 7340032;

        $i6 = i1 | $i5;

        r0.<android.view.View: int mPrivateFlags2> = $i6;

        if z4 == 0 goto label11;

        $z1 = virtualinvoke r0.<android.view.View: boolean includeForAccessibility()>();

        if z5 == $z1 goto label10;

        goto label11;

     label10:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        goto label12;

     label11:
        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label12:
        return;
    }

    public void setImportantForAutofill(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        i1 = $i2 & -7864321;

        r0.<android.view.View: int mPrivateFlags3> = i1;

        $i3 = i0 << 19;

        $i4 = $i3 & 7864320;

        $i5 = i1 | $i4;

        r0.<android.view.View: int mPrivateFlags3> = $i5;

        return;
    }

    public void setImportantForContentCapture(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i2 = r0.<android.view.View: int mPrivateFlags4>;

        i1 = $i2 & -16;

        r0.<android.view.View: int mPrivateFlags4> = i1;

        $i3 = i0 & 15;

        $i4 = i1 | $i3;

        r0.<android.view.View: int mPrivateFlags4> = $i4;

        return;
    }

    public void setIsRootNamespace(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 | 8;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -9;

        r0.<android.view.View: int mPrivateFlags> = $i1;

     label2:
        return;
    }

    public void setKeepScreenOn(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i0 = 67108864;

        goto label2;

     label1:
        i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 67108864);

        return;
    }

    public void setKeyboardNavigationCluster(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 | 32768;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & -32769;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

     label2:
        return;
    }

    public void setLabelFor(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mLabelForId>;

        if $i1 != i0 goto label1;

        return;

     label1:
        r0.<android.view.View: int mLabelForId> = i0;

        if i0 == -1 goto label2;

        $i2 = r0.<android.view.View: int mID>;

        if $i2 != -1 goto label2;

        $i3 = staticinvoke <android.view.View: int generateViewId()>();

        r0.<android.view.View: int mID> = $i3;

     label2:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        return;
    }

    public void setLayerPaint(android.graphics.Paint)
    {
        android.view.View r0;
        android.graphics.Paint r1;
        int i0;
        android.graphics.RenderNode $r2;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Paint;

        i0 = virtualinvoke r0.<android.view.View: int getLayerType()>();

        if i0 == 0 goto label2;

        r0.<android.view.View: android.graphics.Paint mLayerPaint> = r1;

        if i0 != 2 goto label1;

        $r2 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r2.<android.graphics.RenderNode: boolean setLayerPaint(android.graphics.Paint)>(r1);

        if $z0 == 0 goto label2;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void invalidate()>();

     label2:
        return;
    }

    public void setLayerType(int, android.graphics.Paint)
    {
        android.view.View r0;
        int i0;
        java.lang.IllegalArgumentException $r1;
        android.graphics.RenderNode $r2, $r3;
        boolean $z0;
        android.graphics.Paint r4;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r4 := @parameter1: android.graphics.Paint;

        if i0 < 0 goto label4;

        if i0 > 2 goto label4;

        $r2 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r2.<android.graphics.RenderNode: boolean setLayerType(int)>(i0);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void setLayerPaint(android.graphics.Paint)>(r4);

        return;

     label1:
        if i0 == 1 goto label2;

        virtualinvoke r0.<android.view.View: void destroyDrawingCache()>();

     label2:
        r0.<android.view.View: int mLayerType> = i0;

        if i0 != 0 goto label3;

        r4 = null;

        goto label3;

     label3:
        r0.<android.view.View: android.graphics.Paint mLayerPaint> = r4;

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setLayerPaint(android.graphics.Paint)>(r4);

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        return;

     label4:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Layer type can only be one of: LAYER_TYPE_NONE, LAYER_TYPE_SOFTWARE or LAYER_TYPE_HARDWARE");

        throw $r1;
    }

    public void setLayoutDirection(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.View: int getRawLayoutDirection()>();

        if $i1 == i0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & -13;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        virtualinvoke r0.<android.view.View: void resetRtlProperties()>();

        $i6 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = i0 << 2;

        $i5 = $i4 & 12;

        $i7 = $i6 | $i5;

        r0.<android.view.View: int mPrivateFlags2> = $i7;

        virtualinvoke r0.<android.view.View: boolean resolveRtlPropertiesIfNeeded()>();

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label1:
        return;
    }

    public void setLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.view.View r0;
        android.view.ViewGroup$LayoutParams r1;
        android.view.ViewParent r2;
        java.lang.NullPointerException $r3;
        boolean $z0;
        android.view.ViewGroup $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        if r1 == null goto label2;

        r0.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams> = r1;

        virtualinvoke r0.<android.view.View: void resolveLayoutParams()>();

        r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r4 = (android.view.ViewGroup) r2;

        virtualinvoke $r4.<android.view.ViewGroup: void onSetLayoutParams(android.view.View,android.view.ViewGroup$LayoutParams)>(r0, r1);

     label1:
        virtualinvoke r0.<android.view.View: void requestLayout()>();

        return;

     label2:
        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>(java.lang.String)>("Layout parameters cannot be null");

        throw $r3;
    }

    public final void setLeft(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, i13, $i14, $i15, i16, $i17, $i18, $i19, $i20;
        boolean z0;
        android.view.View$ForegroundInfo r1;
        android.view.View$AttachInfo $r2;
        android.graphics.RenderNode $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i2 = r0.<android.view.View: int mLeft>;

        if i0 == $i2 goto label7;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label3;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label4;

        i10 = r0.<android.view.View: int mLeft>;

        if i0 >= i10 goto label1;

        i11 = i0;

        i12 = i0 - i10;

        goto label2;

     label1:
        i11 = r0.<android.view.View: int mLeft>;

        i12 = 0;

     label2:
        $i5 = r0.<android.view.View: int mRight>;

        $i9 = $i5 - i11;

        $i7 = r0.<android.view.View: int mBottom>;

        $i6 = r0.<android.view.View: int mTop>;

        $i8 = $i7 - $i6;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>(i12, 0, $i9, $i8);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label4:
        i13 = r0.<android.view.View: int mRight>;

        i1 = r0.<android.view.View: int mLeft>;

        $i14 = r0.<android.view.View: int mBottom>;

        $i15 = r0.<android.view.View: int mTop>;

        i16 = $i14 - $i15;

        r0.<android.view.View: int mLeft> = i0;

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setLeft(int)>(i0);

        $i17 = r0.<android.view.View: int mRight>;

        $i18 = r0.<android.view.View: int mLeft>;

        $i19 = $i17 - $i18;

        $i20 = i13 - i1;

        specialinvoke r0.<android.view.View: void sizeChange(int,int,int,int)>($i19, i16, $i20, i16);

        if z0 != 0 goto label5;

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i4;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label5:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        r0.<android.view.View: boolean mDefaultFocusHighlightSizeChanged> = 1;

        r1 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r1 == null goto label6;

        staticinvoke <android.view.View$ForegroundInfo: boolean access$2202(android.view.View$ForegroundInfo,boolean)>(r1, 1);

     label6:
        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label7:
        return;
    }

    public final void setLeftTopRightBottom(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.View: boolean setFrame(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void setLongClickable(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i0 = 2097152;

        goto label2;

     label1:
        i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 2097152);

        return;
    }

    protected final void setMeasuredDimension(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10;
        boolean z0, $z1;
        android.graphics.Insets r1;
        android.view.ViewParent $r2;

        r0 := @this: android.view.View;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        z0 = staticinvoke <android.view.View: boolean isLayoutModeOptical(java.lang.Object)>(r0);

        i7 = i6;

        i8 = i0;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z1 = staticinvoke <android.view.View: boolean isLayoutModeOptical(java.lang.Object)>($r2);

        if z0 == $z1 goto label5;

        r1 = virtualinvoke r0.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        $i3 = r1.<android.graphics.Insets: int left>;

        $i2 = r1.<android.graphics.Insets: int right>;

        i9 = $i3 + $i2;

        $i5 = r1.<android.graphics.Insets: int top>;

        $i4 = r1.<android.graphics.Insets: int bottom>;

        i1 = $i5 + $i4;

        if z0 == 0 goto label1;

        goto label2;

     label1:
        i9 = neg i9;

     label2:
        i7 = i6 + i9;

        if z0 == 0 goto label3;

        i10 = i1;

        goto label4;

     label3:
        i10 = neg i1;

     label4:
        i8 = i0 + i10;

     label5:
        specialinvoke r0.<android.view.View: void setMeasuredDimensionRaw(int,int)>(i7, i8);

        return;
    }

    public void setMinimumHeight(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mMinHeight> = i0;

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        return;
    }

    public void setMinimumWidth(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mMinWidth> = i0;

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        return;
    }

    public void setNestedScrollingEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 | 128;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void stopNestedScroll()>();

        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 & -129;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

     label2:
        return;
    }

    public void setNextClusterForwardId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextClusterForwardId> = i0;

        return;
    }

    public void setNextFocusDownId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextFocusDownId> = i0;

        return;
    }

    public void setNextFocusForwardId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextFocusForwardId> = i0;

        return;
    }

    public void setNextFocusLeftId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextFocusLeftId> = i0;

        return;
    }

    public void setNextFocusRightId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextFocusRightId> = i0;

        return;
    }

    public void setNextFocusUpId(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r0.<android.view.View: int mNextFocusUpId> = i0;

        return;
    }

    public void setNotifyAutofillManagerOnClick(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 | 536870912;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -536870913;

        r0.<android.view.View: int mPrivateFlags> = $i1;

     label2:
        return;
    }

    public void setOnApplyWindowInsetsListener(android.view.View$OnApplyWindowInsetsListener)
    {
        android.view.View r0;
        android.view.View$OnApplyWindowInsetsListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnApplyWindowInsetsListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnApplyWindowInsetsListener mOnApplyWindowInsetsListener> = r1;

        return;
    }

    public void setOnCapturedPointerListener(android.view.View$OnCapturedPointerListener)
    {
        android.view.View r0;
        android.view.View$OnCapturedPointerListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnCapturedPointerListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnCapturedPointerListener mOnCapturedPointerListener> = r1;

        return;
    }

    public void setOnClickListener(android.view.View$OnClickListener)
    {
        android.view.View r0;
        android.view.View$OnClickListener r1;
        boolean $z0;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnClickListener;

        $z0 = virtualinvoke r0.<android.view.View: boolean isClickable()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void setClickable(boolean)>(1);

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnClickListener mOnClickListener> = r1;

        return;
    }

    public void setOnContextClickListener(android.view.View$OnContextClickListener)
    {
        android.view.View r0;
        android.view.View$OnContextClickListener r1;
        boolean $z0;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnContextClickListener;

        $z0 = virtualinvoke r0.<android.view.View: boolean isContextClickable()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void setContextClickable(boolean)>(1);

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnContextClickListener mOnContextClickListener> = r1;

        return;
    }

    public void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)
    {
        android.view.View r0;
        android.view.View$OnCreateContextMenuListener r1;
        boolean $z0;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnCreateContextMenuListener;

        $z0 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void setLongClickable(boolean)>(1);

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnCreateContextMenuListener mOnCreateContextMenuListener> = r1;

        return;
    }

    public void setOnDragListener(android.view.View$OnDragListener)
    {
        android.view.View r0;
        android.view.View$OnDragListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnDragListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnDragListener access$802(android.view.View$ListenerInfo,android.view.View$OnDragListener)>($r2, r1);

        return;
    }

    public void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)
    {
        android.view.View r0;
        android.view.View$OnFocusChangeListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnFocusChangeListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnFocusChangeListener mOnFocusChangeListener> = r1;

        return;
    }

    public void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)
    {
        android.view.View r0;
        android.view.View$OnGenericMotionListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnGenericMotionListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnGenericMotionListener access$602(android.view.View$ListenerInfo,android.view.View$OnGenericMotionListener)>($r2, r1);

        return;
    }

    public void setOnHoverListener(android.view.View$OnHoverListener)
    {
        android.view.View r0;
        android.view.View$OnHoverListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnHoverListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnHoverListener access$702(android.view.View$ListenerInfo,android.view.View$OnHoverListener)>($r2, r1);

        return;
    }

    public void setOnKeyListener(android.view.View$OnKeyListener)
    {
        android.view.View r0;
        android.view.View$OnKeyListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnKeyListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnKeyListener access$402(android.view.View$ListenerInfo,android.view.View$OnKeyListener)>($r2, r1);

        return;
    }

    public void setOnLongClickListener(android.view.View$OnLongClickListener)
    {
        android.view.View r0;
        android.view.View$OnLongClickListener r1;
        boolean $z0;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnLongClickListener;

        $z0 = virtualinvoke r0.<android.view.View: boolean isLongClickable()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.View: void setLongClickable(boolean)>(1);

     label1:
        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnLongClickListener mOnLongClickListener> = r1;

        return;
    }

    public void setOnScrollChangeListener(android.view.View$OnScrollChangeListener)
    {
        android.view.View r0;
        android.view.View$OnScrollChangeListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnScrollChangeListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.View$OnScrollChangeListener mOnScrollChangeListener> = r1;

        return;
    }

    public void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)
    {
        android.view.View r0;
        android.view.View$ListenerInfo $r1;
        android.view.ViewParent $r3, $r4;
        boolean $z0;
        android.view.View$OnSystemUiVisibilityChangeListener r5;
        android.view.View$AttachInfo r6;

        r0 := @this: android.view.View;

        r5 := @parameter0: android.view.View$OnSystemUiVisibilityChangeListener;

        $r1 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnSystemUiVisibilityChangeListener access$1802(android.view.View$ListenerInfo,android.view.View$OnSystemUiVisibilityChangeListener)>($r1, r5);

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r3 == null goto label1;

        r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r6 == null goto label1;

        $z0 = r6.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z0 != 0 goto label1;

        $r4 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r4.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>(r0);

     label1:
        return;
    }

    public void setOnTouchListener(android.view.View$OnTouchListener)
    {
        android.view.View r0;
        android.view.View$OnTouchListener r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View$OnTouchListener;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        staticinvoke <android.view.View$ListenerInfo: android.view.View$OnTouchListener access$502(android.view.View$ListenerInfo,android.view.View$OnTouchListener)>($r2, r1);

        return;
    }

    public void setOpticalInsets(android.graphics.Insets)
    {
        android.view.View r0;
        android.graphics.Insets r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Insets;

        r0.<android.view.View: android.graphics.Insets mLayoutInsets> = r1;

        return;
    }

    public void setOutlineAmbientShadowColor(int)
    {
        android.view.View r0;
        int i0;
        android.graphics.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.graphics.RenderNode: boolean setAmbientShadowColor(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 1);

     label1:
        return;
    }

    public void setOutlineProvider(android.view.ViewOutlineProvider)
    {
        android.view.View r0;
        android.view.ViewOutlineProvider r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ViewOutlineProvider;

        r0.<android.view.View: android.view.ViewOutlineProvider mOutlineProvider> = r1;

        virtualinvoke r0.<android.view.View: void invalidateOutline()>();

        return;
    }

    public void setOutlineSpotShadowColor(int)
    {
        android.view.View r0;
        int i0;
        android.graphics.RenderNode $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.graphics.RenderNode: boolean setSpotShadowColor(int)>(i0);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 1);

     label1:
        return;
    }

    public void setOverScrollMode(int)
    {
        android.view.View r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label2;

        if i0 != 2 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid overscroll mode ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        r0.<android.view.View: int mOverScrollMode> = i0;

        return;
    }

    public void setPadding(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.View: void resetResolvedPaddingInternal()>();

        r0.<android.view.View: int mUserPaddingStart> = -2147483648;

        r0.<android.view.View: int mUserPaddingEnd> = -2147483648;

        r0.<android.view.View: int mUserPaddingLeftInitial> = i0;

        r0.<android.view.View: int mUserPaddingRightInitial> = i2;

        r0.<android.view.View: boolean mLeftPaddingDefined> = 1;

        r0.<android.view.View: boolean mRightPaddingDefined> = 1;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>(i0, i1, i2, i3);

        return;
    }

    public void setPaddingRelative(int, int, int, int)
    {
        android.view.View r0;
        int i0, i1, i2, i3, $i4;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.View: void resetResolvedPaddingInternal()>();

        r0.<android.view.View: int mUserPaddingStart> = i0;

        r0.<android.view.View: int mUserPaddingEnd> = i2;

        r0.<android.view.View: boolean mLeftPaddingDefined> = 1;

        r0.<android.view.View: boolean mRightPaddingDefined> = 1;

        $i4 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        if $i4 == 1 goto label1;

        r0.<android.view.View: int mUserPaddingLeftInitial> = i0;

        r0.<android.view.View: int mUserPaddingRightInitial> = i2;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>(i0, i1, i2, i3);

        goto label2;

     label1:
        r0.<android.view.View: int mUserPaddingLeftInitial> = i2;

        r0.<android.view.View: int mUserPaddingRightInitial> = i0;

        virtualinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>(i2, i1, i0, i3);

     label2:
        return;
    }

    public void setPivotX(float)
    {
        android.view.View r0;
        float f0, $f1;
        android.graphics.RenderNode $r1, $r2;
        boolean $z0;
        byte $b0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.graphics.RenderNode: boolean isPivotExplicitlySet()>();

        if $z0 == 0 goto label1;

        $f1 = virtualinvoke r0.<android.view.View: float getPivotX()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r2 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r2.<android.graphics.RenderNode: boolean setPivotX(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

     label2:
        return;
    }

    public void setPivotY(float)
    {
        android.view.View r0;
        float f0, $f1;
        android.graphics.RenderNode $r1, $r2;
        boolean $z0;
        byte $b0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke $r1.<android.graphics.RenderNode: boolean isPivotExplicitlySet()>();

        if $z0 == 0 goto label1;

        $f1 = virtualinvoke r0.<android.view.View: float getPivotY()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label2;

     label1:
        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r2 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r2.<android.graphics.RenderNode: boolean setPivotY(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

     label2:
        return;
    }

    public void setPointerIcon(android.view.PointerIcon)
    {
        android.view.View r0;
        boolean $z0;
        android.view.View$AttachInfo $r1, $r2, r7;
        android.view.IWindow $r3;
        android.view.IWindowSession $r4;
        android.os.RemoteException $r5;
        android.view.PointerIcon r6;

        r0 := @this: android.view.View;

        r6 := @parameter0: android.view.PointerIcon;

        r0.<android.view.View: android.view.PointerIcon mPointerIcon> = r6;

        r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r7 == null goto label5;

        $z0 = r7.<android.view.View$AttachInfo: boolean mHandlingPointerEvent>;

        if $z0 == 0 goto label1;

        goto label5;

     label1:
        $r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r1.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        interfaceinvoke $r4.<android.view.IWindowSession: void updatePointerIcon(android.view.IWindow)>($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

     label5:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setPressed(boolean)
    {
        android.view.View r0;
        boolean z0, z1, z2;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        i0 = r0.<android.view.View: int mPrivateFlags>;

        z1 = 1;

        $i1 = i0 & 16384;

        if $i1 != 16384 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z0 == z2 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        if z0 == 0 goto label5;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = 16384 | $i4;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        goto label6;

     label5:
        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -16385;

        r0.<android.view.View: int mPrivateFlags> = $i3;

     label6:
        if z1 == 0 goto label7;

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

     label7:
        virtualinvoke r0.<android.view.View: void dispatchSetPressed(boolean)>(z0);

        return;
    }

    public void setRevealClip(boolean, float, float, float)
    {
        android.view.View r0;
        boolean z0;
        float f0, f1, f2;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setRevealClip(boolean,float,float,float)>(z0, f0, f1, f2);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 0);

        return;
    }

    public final void setRevealOnFocusHint(boolean)
    {
        android.view.View r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = $i2 & -67108865;

        r0.<android.view.View: int mPrivateFlags3> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i1 = $i0 | 67108864;

        r0.<android.view.View: int mPrivateFlags3> = $i1;

     label2:
        return;
    }

    public final void setRight(int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, i15, $i16, $i17, $i18, $i19;
        boolean z0;
        android.view.View$ForegroundInfo r1;
        android.view.View$AttachInfo $r2;
        android.graphics.RenderNode $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i3 = r0.<android.view.View: int mRight>;

        if i0 == $i3 goto label7;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label3;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label4;

        $i6 = r0.<android.view.View: int mRight>;

        if i0 >= $i6 goto label1;

        i12 = r0.<android.view.View: int mRight>;

        goto label2;

     label1:
        i12 = i0;

     label2:
        $i7 = r0.<android.view.View: int mLeft>;

        $i11 = i12 - $i7;

        $i9 = r0.<android.view.View: int mBottom>;

        $i8 = r0.<android.view.View: int mTop>;

        $i10 = $i9 - $i8;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>(0, 0, $i11, $i10);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label4:
        i1 = r0.<android.view.View: int mRight>;

        i2 = r0.<android.view.View: int mLeft>;

        $i13 = r0.<android.view.View: int mBottom>;

        $i14 = r0.<android.view.View: int mTop>;

        i15 = $i13 - $i14;

        r0.<android.view.View: int mRight> = i0;

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setRight(int)>(i0);

        $i16 = r0.<android.view.View: int mRight>;

        $i17 = r0.<android.view.View: int mLeft>;

        $i18 = $i16 - $i17;

        $i19 = i1 - i2;

        specialinvoke r0.<android.view.View: void sizeChange(int,int,int,int)>($i18, i15, $i19, i15);

        if z0 != 0 goto label5;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i5;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label5:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        r0.<android.view.View: boolean mDefaultFocusHighlightSizeChanged> = 1;

        r1 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r1 == null goto label6;

        staticinvoke <android.view.View$ForegroundInfo: boolean access$2202(android.view.View$ForegroundInfo,boolean)>(r1, 1);

     label6:
        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label7:
        return;
    }

    public void setRotation(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getRotation()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setRotationZ(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public void setRotationX(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getRotationX()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setRotationX(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public void setRotationY(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getRotationY()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setRotationY(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public void setSaveEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i0 = 0;

        goto label2;

     label1:
        i0 = 65536;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 65536);

        return;
    }

    public void setSaveFromParentEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i0 = 0;

        goto label2;

     label1:
        i0 = 536870912;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 536870912);

        return;
    }

    public void setScaleX(float)
    {
        android.view.View r0;
        float $f0, f1, f2;
        byte $b0;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        f1 := @parameter0: float;

        $f0 = virtualinvoke r0.<android.view.View: float getScaleX()>();

        $b0 = f1 cmpl $f0;

        if $b0 == 0 goto label1;

        f2 = staticinvoke <android.view.View: float sanitizeFloatPropertyValue(float,java.lang.String)>(f1, "scaleX");

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setScaleX(float)>(f2);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public void setScaleY(float)
    {
        android.view.View r0;
        float $f0, f1, f2;
        byte $b0;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        f1 := @parameter0: float;

        $f0 = virtualinvoke r0.<android.view.View: float getScaleY()>();

        $b0 = f1 cmpl $f0;

        if $b0 == 0 goto label1;

        f2 = staticinvoke <android.view.View: float sanitizeFloatPropertyValue(float,java.lang.String)>(f1, "scaleY");

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setScaleY(float)>(f2);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public void setScreenReaderFocusable(boolean)
    {
        android.view.View r0;
        boolean z0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.View: void updatePflags3AndNotifyA11yIfChanged(int,boolean)>(268435456, z0);

        return;
    }

    public void setScrollBarDefaultDelayBeforeFade(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$ScrollabilityCache $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.view.View: android.view.View$ScrollabilityCache getScrollCache()>();

        $r1.<android.view.View$ScrollabilityCache: int scrollBarDefaultDelayBeforeFade> = i0;

        return;
    }

    public void setScrollBarFadeDuration(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$ScrollabilityCache $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.view.View: android.view.View$ScrollabilityCache getScrollCache()>();

        $r1.<android.view.View$ScrollabilityCache: int scrollBarFadeDuration> = i0;

        return;
    }

    public void setScrollBarSize(int)
    {
        android.view.View r0;
        int i0;
        android.view.View$ScrollabilityCache $r1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<android.view.View: android.view.View$ScrollabilityCache getScrollCache()>();

        $r1.<android.view.View$ScrollabilityCache: int scrollBarSize> = i0;

        return;
    }

    public void setScrollBarStyle(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = i1 & 50331648;

        if i0 == $i2 goto label1;

        $i4 = i1 & -50331649;

        $i3 = 50331648 & i0;

        $i5 = $i4 | $i3;

        r0.<android.view.View: int mViewFlags> = $i5;

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        return;
    }

    public void setScrollCaptureCallback(android.view.ScrollCaptureCallback)
    {
        android.view.View r0;
        android.view.ScrollCaptureCallback r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ScrollCaptureCallback;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.ScrollCaptureCallback mScrollCaptureCallback> = r1;

        return;
    }

    public void setScrollCaptureHint(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i2 = r0.<android.view.View: int mPrivateFlags4>;

        i1 = $i2 & -7169;

        r0.<android.view.View: int mPrivateFlags4> = i1;

        $i3 = i0 << 10;

        $i4 = $i3 & 7168;

        $i5 = i1 | $i4;

        r0.<android.view.View: int mPrivateFlags4> = $i5;

        return;
    }

    public void setScrollContainer(boolean)
    {
        android.view.View r0;
        boolean z0;
        android.view.View$AttachInfo r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.util.ArrayList $r3, $r4;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 1048576;

        if $i5 != 0 goto label1;

        $r4 = r1.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r0);

        $i6 = r0.<android.view.View: int mPrivateFlags>;

        $i7 = 1048576 | $i6;

        r0.<android.view.View: int mPrivateFlags> = $i7;

     label1:
        $i8 = r0.<android.view.View: int mPrivateFlags>;

        $i9 = $i8 | 524288;

        r0.<android.view.View: int mPrivateFlags> = $i9;

        goto label4;

     label2:
        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = 1048576 & $i0;

        if $i1 == 0 goto label3;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        virtualinvoke $r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r0);

     label3:
        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -1572865;

        r0.<android.view.View: int mPrivateFlags> = $i3;

     label4:
        return;
    }

    public void setScrollIndicators(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void setScrollIndicators(int,int)>(i0, 63);

        return;
    }

    public void setScrollIndicators(int, int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7, i8;

        r0 := @this: android.view.View;

        i4 := @parameter0: int;

        i5 := @parameter1: int;

        $i1 = i5 << 8;

        i6 = $i1 & 16128;

        $i2 = i4 << 8;

        i7 = $i2 & i6;

        i0 = r0.<android.view.View: int mPrivateFlags3>;

        $i3 = i6 & i0;

        i8 = $i3 | i7;

        if i0 == i8 goto label2;

        r0.<android.view.View: int mPrivateFlags3> = i8;

        if i7 == 0 goto label1;

        specialinvoke r0.<android.view.View: void initializeScrollIndicatorsInternal()>();

     label1:
        virtualinvoke r0.<android.view.View: void invalidate()>();

     label2:
        return;
    }

    public void setScrollX(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mScrollY>;

        virtualinvoke r0.<android.view.View: void scrollTo(int,int)>(i0, $i1);

        return;
    }

    public void setScrollY(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mScrollX>;

        virtualinvoke r0.<android.view.View: void scrollTo(int,int)>($i1, i0);

        return;
    }

    public void setScrollbarFadingEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        android.view.View$ScrollabilityCache r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

        r1 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        r1.<android.view.View$ScrollabilityCache: boolean fadeScrollBars> = z0;

        if z0 == 0 goto label1;

        r1.<android.view.View$ScrollabilityCache: int state> = 0;

        goto label2;

     label1:
        r1.<android.view.View$ScrollabilityCache: int state> = 1;

     label2:
        return;
    }

    public void setSelected(boolean)
    {
        android.view.View r0;
        boolean z0, z1;
        int i0, $i1, $i2, $i3, $i4;
        byte b5;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 4;

        if $i2 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z1 == z0 goto label7;

        i0 = r0.<android.view.View: int mPrivateFlags>;

        if z0 == 0 goto label3;

        b5 = 4;

        goto label4;

     label3:
        b5 = 0;

     label4:
        $i3 = i0 & -5;

        $i4 = $i3 | b5;

        r0.<android.view.View: int mPrivateFlags> = $i4;

        if z0 != 0 goto label5;

        specialinvoke r0.<android.view.View: void resetPressedState()>();

     label5:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        virtualinvoke r0.<android.view.View: void refreshDrawableState()>();

        virtualinvoke r0.<android.view.View: void dispatchSetSelected(boolean)>(z0);

        if z0 == 0 goto label6;

        virtualinvoke r0.<android.view.View: void sendAccessibilityEvent(int)>(4);

        goto label7;

     label6:
        virtualinvoke r0.<android.view.View: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label7:
        return;
    }

    public final void setShowingLayoutBounds(boolean)
    {
        android.view.View r0;
        boolean z0;
        android.view.View$AttachInfo r1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        r1.<android.view.View$AttachInfo: boolean mDebugLayout> = z0;

     label1:
        return;
    }

    public void setSoundEffectsEnabled(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i0 = 134217728;

        goto label2;

     label1:
        i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 134217728);

        return;
    }

    public void setStateDescription(java.lang.CharSequence)
    {
        android.view.View r0;
        java.lang.CharSequence r1, r2;
        boolean $z0, $z1, $z2;
        int $i0;
        android.content.Context $r3;
        android.view.accessibility.AccessibilityManager $r4;
        android.view.accessibility.AccessibilityEvent r5;

        r0 := @this: android.view.View;

        r2 := @parameter0: java.lang.CharSequence;

        r1 = r0.<android.view.View: java.lang.CharSequence mStateDescription>;

        if r1 != null goto label1;

        if r2 != null goto label2;

        return;

     label1:
        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label2;

        return;

     label2:
        r0.<android.view.View: java.lang.CharSequence mStateDescription> = r2;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z1 != 0 goto label3;

        $i0 = virtualinvoke r0.<android.view.View: int getImportantForAccessibility()>();

        if $i0 != 0 goto label3;

        virtualinvoke r0.<android.view.View: void setImportantForAccessibility(int)>(1);

     label3:
        $r3 = r0.<android.view.View: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r3);

        $z2 = virtualinvoke $r4.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z2 == 0 goto label4;

        r5 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>();

        virtualinvoke r5.<android.view.accessibility.AccessibilityEvent: void setEventType(int)>(2048);

        virtualinvoke r5.<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>(64);

        virtualinvoke r0.<android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)>(r5);

     label4:
        return;
    }

    public void setStateListAnimator(android.animation.StateListAnimator)
    {
        android.view.View r0;
        android.animation.StateListAnimator r1, r2;
        boolean $z0;
        int[] $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.animation.StateListAnimator;

        r2 = r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator>;

        if r2 != r1 goto label1;

        return;

     label1:
        if r2 == null goto label2;

        virtualinvoke r2.<android.animation.StateListAnimator: void setTarget(android.view.View)>(null);

     label2:
        r0.<android.view.View: android.animation.StateListAnimator mStateListAnimator> = r1;

        if r1 == null goto label3;

        virtualinvoke r1.<android.animation.StateListAnimator: void setTarget(android.view.View)>(r0);

        $z0 = virtualinvoke r0.<android.view.View: boolean isAttachedToWindow()>();

        if $z0 == 0 goto label3;

        $r3 = virtualinvoke r0.<android.view.View: int[] getDrawableState()>();

        virtualinvoke r1.<android.animation.StateListAnimator: void setState(int[])>($r3);

     label3:
        return;
    }

    public void setSystemGestureExclusionRects(java.util.List)
    {
        android.view.View r0;
        java.util.List r1;
        android.view.View$ListenerInfo r2, $r12;
        boolean $z0, $z1;
        android.graphics.RenderNode$PositionUpdateListener $r4, $r6, $r9, $r10;
        android.view.View$1 $r5;
        android.graphics.RenderNode $r7, $r11;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.util.List;

        $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r12 = r0.<android.view.View: android.view.View$ListenerInfo mListenerInfo>;

        if $r12 != null goto label1;

        return;

     label1:
        r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        staticinvoke <android.view.View$ListenerInfo: java.util.List access$1402(android.view.View$ListenerInfo,java.util.List)>(r2, null);

        $r9 = r2.<android.view.View$ListenerInfo: android.graphics.RenderNode$PositionUpdateListener mPositionUpdateListener>;

        if $r9 == null goto label3;

        $r11 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $r10 = r2.<android.view.View$ListenerInfo: android.graphics.RenderNode$PositionUpdateListener mPositionUpdateListener>;

        virtualinvoke $r11.<android.graphics.RenderNode: void removePositionUpdateListener(android.graphics.RenderNode$PositionUpdateListener)>($r10);

        goto label3;

     label2:
        staticinvoke <android.view.View$ListenerInfo: java.util.List access$1402(android.view.View$ListenerInfo,java.util.List)>(r2, r1);

        $r4 = r2.<android.view.View$ListenerInfo: android.graphics.RenderNode$PositionUpdateListener mPositionUpdateListener>;

        if $r4 != null goto label3;

        $r5 = new android.view.View$1;

        specialinvoke $r5.<android.view.View$1: void <init>(android.view.View)>(r0);

        r2.<android.view.View$ListenerInfo: android.graphics.RenderNode$PositionUpdateListener mPositionUpdateListener> = $r5;

        $r7 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $r6 = r2.<android.view.View$ListenerInfo: android.graphics.RenderNode$PositionUpdateListener mPositionUpdateListener>;

        virtualinvoke $r7.<android.graphics.RenderNode: void addPositionUpdateListener(android.graphics.RenderNode$PositionUpdateListener)>($r6);

     label3:
        virtualinvoke r0.<android.view.View: void postUpdateSystemGestureExclusionRects()>();

        return;
    }

    public void setSystemUiVisibility(int)
    {
        android.view.View r0;
        int i0, $i1;
        android.view.View$AttachInfo r1;
        android.view.ViewParent $r2, $r3;
        boolean $z0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mSystemUiVisibility>;

        if i0 == $i1 goto label1;

        r0.<android.view.View: int mSystemUiVisibility> = i0;

        $r2 = r0.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label1;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $z0 = r1.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z0 != 0 goto label1;

        $r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>(r0);

     label1:
        return;
    }

    public void setTag(int, java.lang.Object)
    {
        android.view.View r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i1 = i0 >>> 24;

        if $i1 < 2 goto label1;

        specialinvoke r0.<android.view.View: void setKeyedTag(int,java.lang.Object)>(i0, r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The key must be an application-specific resource id.");

        throw $r2;
    }

    public void setTag(java.lang.Object)
    {
        android.view.View r0;
        java.lang.Object r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.Object;

        r0.<android.view.View: java.lang.Object mTag> = r1;

        return;
    }

    public void setTagInternal(int, java.lang.Object)
    {
        android.view.View r0;
        int i0, $i1;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.Object;

        $i1 = i0 >>> 24;

        if $i1 != 1 goto label1;

        specialinvoke r0.<android.view.View: void setKeyedTag(int,java.lang.Object)>(i0, r1);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The key must be a framework-specific resource id.");

        throw $r2;
    }

    public void setTextAlignment(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.View: int getRawTextAlignment()>();

        if i0 == $i1 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & -57345;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        virtualinvoke r0.<android.view.View: void resetResolvedTextAlignment()>();

        $i6 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = i0 << 13;

        $i5 = $i4 & 57344;

        $i7 = $i6 | $i5;

        r0.<android.view.View: int mPrivateFlags2> = $i7;

        virtualinvoke r0.<android.view.View: boolean resolveTextAlignment()>();

        $i8 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r0.<android.view.View: void onRtlPropertiesChanged(int)>($i8);

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label1:
        return;
    }

    public void setTextDirection(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.View: int getRawTextDirection()>();

        if $i1 == i0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags2>;

        $i3 = $i2 & -449;

        r0.<android.view.View: int mPrivateFlags2> = $i3;

        virtualinvoke r0.<android.view.View: void resetResolvedTextDirection()>();

        $i6 = r0.<android.view.View: int mPrivateFlags2>;

        $i4 = i0 << 6;

        $i5 = $i4 & 448;

        $i7 = $i6 | $i5;

        r0.<android.view.View: int mPrivateFlags2> = $i7;

        virtualinvoke r0.<android.view.View: boolean resolveTextDirection()>();

        $i8 = virtualinvoke r0.<android.view.View: int getLayoutDirection()>();

        virtualinvoke r0.<android.view.View: void onRtlPropertiesChanged(int)>($i8);

        virtualinvoke r0.<android.view.View: void requestLayout()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label1:
        return;
    }

    public void setTooltip(java.lang.CharSequence)
    {
        android.view.View r0;
        java.lang.CharSequence r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.CharSequence;

        virtualinvoke r0.<android.view.View: void setTooltipText(java.lang.CharSequence)>(r1);

        return;
    }

    public void setTooltipText(java.lang.CharSequence)
    {
        android.view.View r0;
        java.lang.CharSequence r1;
        boolean $z0;
        android.view.View$TooltipInfo $r3, $r4, $r5, $r8, $r10, $r12;
        android.view._$$Lambda$View$llq76MkPXP4bNcb9oJt_msw0fnQ $r6;
        android.view._$$Lambda$QI1s392qW8l6mC24bcy9050SkuY $r7;
        android.content.Context $r9;
        android.view.ViewConfiguration $r11;
        int $i0;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(0, 1073741824);

        virtualinvoke r0.<android.view.View: void hideTooltip()>();

        r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo> = null;

        goto label3;

     label1:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(1073741824, 1073741824);

        $r3 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        if $r3 != null goto label2;

        $r5 = new android.view.View$TooltipInfo;

        specialinvoke $r5.<android.view.View$TooltipInfo: void <init>(android.view.View$1)>(null);

        r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo> = $r5;

        $r6 = new android.view._$$Lambda$View$llq76MkPXP4bNcb9oJt_msw0fnQ;

        specialinvoke $r6.<android.view._$$Lambda$View$llq76MkPXP4bNcb9oJt_msw0fnQ: void <init>(android.view.View)>(r0);

        $r5.<android.view.View$TooltipInfo: java.lang.Runnable mShowTooltipRunnable> = $r6;

        $r8 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r7 = new android.view._$$Lambda$QI1s392qW8l6mC24bcy9050SkuY;

        specialinvoke $r7.<android.view._$$Lambda$QI1s392qW8l6mC24bcy9050SkuY: void <init>(android.view.View)>(r0);

        $r8.<android.view.View$TooltipInfo: java.lang.Runnable mHideTooltipRunnable> = $r7;

        $r10 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r9 = r0.<android.view.View: android.content.Context mContext>;

        $r11 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r9);

        $i0 = virtualinvoke $r11.<android.view.ViewConfiguration: int getScaledHoverSlop()>();

        $r10.<android.view.View$TooltipInfo: int mHoverSlop> = $i0;

        $r12 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        staticinvoke <android.view.View$TooltipInfo: void access$4000(android.view.View$TooltipInfo)>($r12);

     label2:
        $r4 = r0.<android.view.View: android.view.View$TooltipInfo mTooltipInfo>;

        $r4.<android.view.View$TooltipInfo: java.lang.CharSequence mTooltipText> = r1;

     label3:
        return;
    }

    public final void setTop(int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, i12, $i13, $i14, i15, i16, $i17, $i18, $i19, $i20;
        boolean z0;
        android.view.View$ForegroundInfo r1;
        android.view.View$AttachInfo $r2;
        android.graphics.RenderNode $r3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i2 = r0.<android.view.View: int mTop>;

        if i0 == $i2 goto label7;

        z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if z0 == 0 goto label3;

        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label4;

        i10 = r0.<android.view.View: int mTop>;

        if i0 >= i10 goto label1;

        i11 = i0;

        i12 = i0 - i10;

        goto label2;

     label1:
        i11 = r0.<android.view.View: int mTop>;

        i12 = 0;

     label2:
        $i6 = r0.<android.view.View: int mRight>;

        $i5 = r0.<android.view.View: int mLeft>;

        $i9 = $i6 - $i5;

        $i7 = r0.<android.view.View: int mBottom>;

        $i8 = $i7 - i11;

        virtualinvoke r0.<android.view.View: void invalidate(int,int,int,int)>(0, i12, $i9, $i8);

        goto label4;

     label3:
        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label4:
        $i13 = r0.<android.view.View: int mRight>;

        $i14 = r0.<android.view.View: int mLeft>;

        i15 = $i13 - $i14;

        i1 = r0.<android.view.View: int mBottom>;

        i16 = r0.<android.view.View: int mTop>;

        r0.<android.view.View: int mTop> = i0;

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setTop(int)>(i0);

        $i17 = r0.<android.view.View: int mBottom>;

        $i18 = r0.<android.view.View: int mTop>;

        $i19 = $i17 - $i18;

        $i20 = i1 - i16;

        specialinvoke r0.<android.view.View: void sizeChange(int,int,int,int)>(i15, $i19, i15, $i20);

        if z0 != 0 goto label5;

        $i3 = r0.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 | 32;

        r0.<android.view.View: int mPrivateFlags> = $i4;

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

     label5:
        r0.<android.view.View: boolean mBackgroundSizeChanged> = 1;

        r0.<android.view.View: boolean mDefaultFocusHighlightSizeChanged> = 1;

        r1 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r1 == null goto label6;

        staticinvoke <android.view.View$ForegroundInfo: boolean access$2202(android.view.View$ForegroundInfo,boolean)>(r1, 1);

     label6:
        virtualinvoke r0.<android.view.View: void invalidateParentIfNeeded()>();

     label7:
        return;
    }

    public void setTouchDelegate(android.view.TouchDelegate)
    {
        android.view.View r0;
        android.view.TouchDelegate r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.TouchDelegate;

        r0.<android.view.View: android.view.TouchDelegate mTouchDelegate> = r1;

        return;
    }

    public void setTransitionAlpha(float)
    {
        android.view.View r0;
        float f0, $f1, $f2;
        android.view.View$TransformationInfo $r1, $r2;
        byte $b0;
        int $i1, $i2;
        android.graphics.RenderNode $r3;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        virtualinvoke r0.<android.view.View: void ensureTransformationInfo()>();

        $r1 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $f1 = $r1.<android.view.View$TransformationInfo: float mTransitionAlpha>;

        $b0 = $f1 cmpl f0;

        if $b0 == 0 goto label1;

        $r2 = r0.<android.view.View: android.view.View$TransformationInfo mTransformationInfo>;

        $r2.<android.view.View$TransformationInfo: float mTransitionAlpha> = f0;

        $i1 = r0.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & -262145;

        r0.<android.view.View: int mPrivateFlags> = $i2;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r3 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $f2 = specialinvoke r0.<android.view.View: float getFinalAlpha()>();

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setAlpha(float)>($f2);

     label1:
        return;
    }

    public final void setTransitionName(java.lang.String)
    {
        android.view.View r0;
        java.lang.String r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: java.lang.String;

        r0.<android.view.View: java.lang.String mTransitionName> = r1;

        return;
    }

    public void setTransitionVisibility(int)
    {
        android.view.View r0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mViewFlags>;

        $i2 = $i1 & -13;

        $i3 = $i2 | i0;

        r0.<android.view.View: int mViewFlags> = $i3;

        return;
    }

    public void setTranslationX(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationX()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setTranslationX(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public void setTranslationY(float)
    {
        android.view.View r0;
        float f0, $f1;
        byte $b0;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getTranslationY()>();

        $b0 = f0 cmpl $f1;

        if $b0 == 0 goto label1;

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setTranslationY(float)>(f0);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

        virtualinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label1:
        return;
    }

    public void setTranslationZ(float)
    {
        android.view.View r0;
        float $f0, f1, f2;
        byte $b0;
        android.graphics.RenderNode $r1;

        r0 := @this: android.view.View;

        f1 := @parameter0: float;

        $f0 = virtualinvoke r0.<android.view.View: float getTranslationZ()>();

        $b0 = f1 cmpl $f0;

        if $b0 == 0 goto label1;

        f2 = staticinvoke <android.view.View: float sanitizeFloatPropertyValue(float,java.lang.String)>(f1, "translationZ");

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(1, 0);

        $r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r1.<android.graphics.RenderNode: boolean setTranslationZ(float)>(f2);

        virtualinvoke r0.<android.view.View: void invalidateViewProperty(boolean,boolean)>(0, 1);

        virtualinvoke r0.<android.view.View: void invalidateParentIfNeededAndWasQuickRejected()>();

     label1:
        return;
    }

    public void setVerticalFadingEdgeEnabled(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isVerticalFadingEdgeEnabled()>();

        if $z1 == z0 goto label2;

        if z0 == 0 goto label1;

        specialinvoke r0.<android.view.View: void initScrollCache()>();

     label1:
        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 ^ 8192;

        r0.<android.view.View: int mViewFlags> = $i1;

     label2:
        return;
    }

    public void setVerticalScrollBarEnabled(boolean)
    {
        android.view.View r0;
        boolean z0, $z1;
        int $i0, $i1;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<android.view.View: boolean isVerticalScrollBarEnabled()>();

        if $z1 == z0 goto label1;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 ^ 512;

        r0.<android.view.View: int mViewFlags> = $i1;

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        return;
    }

    public void setVerticalScrollbarPosition(int)
    {
        android.view.View r0;
        int i0, $i1;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.View: int mVerticalScrollbarPosition>;

        if $i1 == i0 goto label1;

        r0.<android.view.View: int mVerticalScrollbarPosition> = i0;

        virtualinvoke r0.<android.view.View: void computeOpaqueFlags()>();

        virtualinvoke r0.<android.view.View: void resolvePadding()>();

     label1:
        return;
    }

    public void setVerticalScrollbarThumbDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.view.View$ScrollabilityCache $r2;
        android.widget.ScrollBarDrawable $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke r0.<android.view.View: void initializeScrollBarDrawable()>();

        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r3.<android.widget.ScrollBarDrawable: void setVerticalThumbDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    public void setVerticalScrollbarTrackDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.view.View$ScrollabilityCache $r2;
        android.widget.ScrollBarDrawable $r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke r0.<android.view.View: void initializeScrollBarDrawable()>();

        $r2 = r0.<android.view.View: android.view.View$ScrollabilityCache mScrollCache>;

        $r3 = $r2.<android.view.View$ScrollabilityCache: android.widget.ScrollBarDrawable scrollBar>;

        virtualinvoke $r3.<android.widget.ScrollBarDrawable: void setVerticalTrackDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    public void setVisibility(int)
    {
        android.view.View r0;
        int i0;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 12);

        return;
    }

    public void setWillNotCacheDrawing(boolean)
    {
        android.view.View r0;
        boolean z0;
        int i0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        i0 = 131072;

        goto label2;

     label1:
        i0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(i0, 131072);

        return;
    }

    public void setWillNotDraw(boolean)
    {
        android.view.View r0;
        boolean z0;
        short s0;

        r0 := @this: android.view.View;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        s0 = 128;

        goto label2;

     label1:
        s0 = 0;

     label2:
        virtualinvoke r0.<android.view.View: void setFlags(int,int)>(s0, 128);

        return;
    }

    public void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)
    {
        android.view.View r0;
        android.view.WindowInsetsAnimation$Callback r1;
        android.view.View$ListenerInfo $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.WindowInsetsAnimation$Callback;

        $r2 = virtualinvoke r0.<android.view.View: android.view.View$ListenerInfo getListenerInfo()>();

        $r2.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback> = r1;

        return;
    }

    public void setX(float)
    {
        android.view.View r0;
        float f0, $f1, $f2;
        int $i0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $i0 = r0.<android.view.View: int mLeft>;

        $f1 = (float) $i0;

        $f2 = f0 - $f1;

        virtualinvoke r0.<android.view.View: void setTranslationX(float)>($f2);

        return;
    }

    public void setY(float)
    {
        android.view.View r0;
        float f0, $f1, $f2;
        int $i0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $i0 = r0.<android.view.View: int mTop>;

        $f1 = (float) $i0;

        $f2 = f0 - $f1;

        virtualinvoke r0.<android.view.View: void setTranslationY(float)>($f2);

        return;
    }

    public void setZ(float)
    {
        android.view.View r0;
        float f0, $f1, $f2;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        $f1 = virtualinvoke r0.<android.view.View: float getElevation()>();

        $f2 = f0 - $f1;

        virtualinvoke r0.<android.view.View: void setTranslationZ(float)>($f2);

        return;
    }

    boolean shouldDrawRoundScrollbar()
    {
        android.view.View r0, r1;
        boolean z0, z1;
        android.view.WindowInsets r2;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7;
        android.content.res.Resources $r3;
        android.content.res.Configuration $r4;
        android.view.View$AttachInfo $r5, $r6, $r8, $r10;
        int[] $r7, $r9, $r11;

        r0 := @this: android.view.View;

        $r3 = r0.<android.view.View: android.content.res.Resources mResources>;

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        z0 = virtualinvoke $r4.<android.content.res.Configuration: boolean isScreenRound()>();

        z1 = 0;

        if z0 == 0 goto label5;

        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 != null goto label1;

        goto label5;

     label1:
        r1 = virtualinvoke r0.<android.view.View: android.view.View getRootView()>();

        r2 = virtualinvoke r0.<android.view.View: android.view.WindowInsets getRootWindowInsets()>();

        i0 = virtualinvoke r0.<android.view.View: int getHeight()>();

        i1 = virtualinvoke r0.<android.view.View: int getWidth()>();

        i2 = virtualinvoke r1.<android.view.View: int getHeight()>();

        i3 = virtualinvoke r1.<android.view.View: int getWidth()>();

        if i0 != i2 goto label4;

        if i1 == i3 goto label2;

        goto label4;

     label2:
        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: int[] mTmpLocation>;

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>($r7);

        $r8 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r8.<android.view.View$AttachInfo: int[] mTmpLocation>;

        $i4 = $r9[0];

        $i5 = virtualinvoke r2.<android.view.WindowInsets: int getStableInsetLeft()>();

        if $i4 != $i5 goto label3;

        $r10 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r11 = $r10.<android.view.View$AttachInfo: int[] mTmpLocation>;

        $i6 = $r11[1];

        $i7 = virtualinvoke r2.<android.view.WindowInsets: int getStableInsetTop()>();

        if $i6 != $i7 goto label3;

        z1 = 1;

        goto label3;

     label3:
        return z1;

     label4:
        return 0;

     label5:
        return 0;
    }

    public boolean showContextMenu()
    {
        android.view.View r0;
        android.view.ViewParent $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        $r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = interfaceinvoke $r1.<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>(r0);

        return $z0;
    }

    public boolean showContextMenu(float, float)
    {
        android.view.View r0;
        float f0, f1;
        android.view.ViewParent $r1;
        boolean $z0;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = interfaceinvoke $r1.<android.view.ViewParent: boolean showContextMenuForChild(android.view.View,float,float)>(r0, f0, f1);

        return $z0;
    }

    public android.view.ActionMode startActionMode(android.view.ActionMode$Callback)
    {
        android.view.View r0;
        android.view.ActionMode$Callback r1;
        android.view.ActionMode $r2;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ActionMode$Callback;

        $r2 = virtualinvoke r0.<android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>(r1, 0);

        return $r2;
    }

    public android.view.ActionMode startActionMode(android.view.ActionMode$Callback, int)
    {
        android.view.View r0;
        android.view.ActionMode$Callback r1;
        int i0;
        android.view.ViewParent r2;
        java.lang.AbstractMethodError $r3;
        android.view.ActionMode $r4, r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.ActionMode$Callback;

        i0 := @parameter1: int;

        r2 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        if r2 != null goto label1;

        return null;

     label1:
        r5 = interfaceinvoke r2.<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>(r0, r1, i0);

     label2:
        return r5;

     label3:
        $r3 := @caughtexception;

        $r4 = interfaceinvoke r2.<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>(r0, r1);

        return $r4;

        catch java.lang.AbstractMethodError from label1 to label2 with label3;
    }

    public void startActivityForResult(android.content.Intent, int)
    {
        android.view.View r0;
        android.content.Intent r1;
        int i0, $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, $r8;
        android.content.Context $r7;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.Intent;

        i0 := @parameter1: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("@android:view:");

        $i1 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<android.view.View: java.lang.String mStartActivityRequestWho> = $r6;

        $r7 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r8 = r0.<android.view.View: java.lang.String mStartActivityRequestWho>;

        virtualinvoke $r7.<android.content.Context: void startActivityForResult(java.lang.String,android.content.Intent,int,android.os.Bundle)>($r8, r1, i0, null);

        return;
    }

    public void startAnimation(android.view.animation.Animation)
    {
        android.view.View r0;
        android.view.animation.Animation r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.animation.Animation;

        virtualinvoke r1.<android.view.animation.Animation: void setStartTime(long)>(-1L);

        virtualinvoke r0.<android.view.View: void setAnimation(android.view.animation.Animation)>(r1);

        virtualinvoke r0.<android.view.View: void invalidateParentCaches()>();

        virtualinvoke r0.<android.view.View: void invalidate(boolean)>(1);

        return;
    }

    public final boolean startDrag(android.content.ClipData, android.view.View$DragShadowBuilder, java.lang.Object, int)
    {
        android.view.View r0;
        android.content.ClipData r1;
        android.view.View$DragShadowBuilder r2;
        java.lang.Object r3;
        int i0;
        boolean $z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.content.ClipData;

        r2 := @parameter1: android.view.View$DragShadowBuilder;

        r3 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean startDragAndDrop(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>(r1, r2, r3, i0);

        return $z0;
    }

    public final boolean startDragAndDrop(android.content.ClipData, android.view.View$DragShadowBuilder, java.lang.Object, int)
    {
        android.view.View r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        android.view.ViewRootImpl r3, $r6;
        android.view.SurfaceControl r5, $r15;
        float f0, f1, f2, f3;
        android.view.Surface $r7, $r20, $r25, $r29;
        boolean $z0, $z1, z2, z3;
        android.graphics.Point $r8, $r9;
        java.lang.IllegalStateException $r10, $r55;
        android.view.View$AttachInfo $r11, $r22, $r23, $r24, $r26, $r27, $r28, r44;
        android.view.SurfaceSession $r12;
        android.view.SurfaceControl$Builder $r13, $r14, $r16, $r17, $r18, $r19;
        android.graphics.PorterDuff$Mode $r21;
        java.lang.Throwable $r30, $r31, $r33, $r35, $r36, $r40, r51;
        java.lang.Exception $r32, $r34, $r37, $r38, $r39, r52;
        android.content.ClipData r41;
        android.view.View$DragShadowBuilder r42;
        java.lang.Object r43;
        android.graphics.Canvas r46;
        android.view.IWindowSession r47;
        android.view.IWindow r48;
        android.os.IBinder r50, r53;

        r0 := @this: android.view.View;

        r41 := @parameter0: android.content.ClipData;

        r42 := @parameter1: android.view.View$DragShadowBuilder;

        r43 := @parameter2: java.lang.Object;

        i0 := @parameter3: int;

        r44 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r44 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "startDragAndDrop called on a detached view.");

        return 0;

     label01:
        $r6 = r44.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r7 = $r6.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z0 = virtualinvoke $r7.<android.view.Surface: boolean isValid()>();

        if $z0 != 0 goto label02;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "startDragAndDrop called with an invalid surface.");

        return 0;

     label02:
        if r41 == null goto label05;

        $i14 = i0 & 256;

        if $i14 == 0 goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        virtualinvoke r41.<android.content.ClipData: void prepareToLeaveProcess(boolean)>(z2);

        goto label05;

     label05:
        $r8 = new android.graphics.Point;

        specialinvoke $r8.<android.graphics.Point: void <init>()>();

        $r9 = new android.graphics.Point;

        specialinvoke $r9.<android.graphics.Point: void <init>()>();

        virtualinvoke r42.<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>($r8, $r9);

        $i3 = $r8.<android.graphics.Point: int x>;

        if $i3 < 0 goto label46;

        $i4 = $r8.<android.graphics.Point: int y>;

        if $i4 < 0 goto label46;

        $i5 = $r9.<android.graphics.Point: int x>;

        if $i5 < 0 goto label46;

        $i6 = $r9.<android.graphics.Point: int y>;

        if $i6 < 0 goto label46;

        $i7 = $r8.<android.graphics.Point: int x>;

        if $i7 == 0 goto label06;

        $i13 = $r8.<android.graphics.Point: int y>;

        if $i13 != 0 goto label07;

     label06:
        $z1 = <android.view.View: boolean sAcceptZeroSizeDragShadow>;

        if $z1 == 0 goto label45;

        $r8.<android.graphics.Point: int x> = 1;

        $r8.<android.graphics.Point: int y> = 1;

     label07:
        $r11 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r3 = $r11.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r12 = new android.view.SurfaceSession;

        specialinvoke $r12.<android.view.SurfaceSession: void <init>()>();

        $r13 = new android.view.SurfaceControl$Builder;

        specialinvoke $r13.<android.view.SurfaceControl$Builder: void <init>(android.view.SurfaceSession)>($r12);

        $r14 = virtualinvoke $r13.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>("drag surface");

        $r15 = virtualinvoke r3.<android.view.ViewRootImpl: android.view.SurfaceControl getSurfaceControl()>();

        $r16 = virtualinvoke $r14.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>($r15);

        $i9 = $r8.<android.graphics.Point: int x>;

        $i8 = $r8.<android.graphics.Point: int y>;

        $r17 = virtualinvoke $r16.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setBufferSize(int,int)>($i9, $i8);

        $r18 = virtualinvoke $r17.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setFormat(int)>(-3);

        $r19 = virtualinvoke $r18.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setCallsite(java.lang.String)>("View.startDragAndDrop");

        r5 = virtualinvoke $r19.<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>();

        $r20 = new android.view.Surface;

        specialinvoke $r20.<android.view.Surface: void <init>()>();

        virtualinvoke $r20.<android.view.Surface: void copyFrom(android.view.SurfaceControl)>(r5);

     label08:
        r46 = virtualinvoke $r20.<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>(null);

     label09:
        $r21 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        virtualinvoke r46.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r21);

        virtualinvoke r42.<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>(r46);

     label10:
        virtualinvoke $r20.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r46);

     label11:
        virtualinvoke r3.<android.view.ViewRootImpl: void getLastTouchPoint(android.graphics.Point)>($r8);

        $r22 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r47 = $r22.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r23 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        r48 = $r23.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        i1 = virtualinvoke r3.<android.view.ViewRootImpl: int getLastTouchSource()>();

        $i10 = $r8.<android.graphics.Point: int x>;

        f0 = (float) $i10;

        $i11 = $r8.<android.graphics.Point: int y>;

        f1 = (float) $i11;

        $i12 = $r9.<android.graphics.Point: int x>;

        f2 = (float) $i12;

        i2 = $r9.<android.graphics.Point: int y>;

     label12:
        f3 = (float) i2;

     label13:
        r50 = interfaceinvoke r47.<android.view.IWindowSession: android.os.IBinder performDrag(android.view.IWindow,int,android.view.SurfaceControl,int,float,float,float,float,android.content.ClipData)>(r48, i0, r5, i1, f0, f1, f2, f3, r41);

     label14:
        if r50 == null goto label25;

     label15:
        $r24 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r25 = $r24.<android.view.View$AttachInfo: android.view.Surface mDragSurface>;

        if $r25 == null goto label16;

        $r28 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r29 = $r28.<android.view.View$AttachInfo: android.view.Surface mDragSurface>;

        virtualinvoke $r29.<android.view.Surface: void release()>();

     label16:
        $r26 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r26.<android.view.View$AttachInfo: android.view.Surface mDragSurface> = $r20;

        $r27 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r27.<android.view.View$AttachInfo: android.os.IBinder mDragToken> = r50;

     label17:
        virtualinvoke r3.<android.view.ViewRootImpl: void setLocalDragState(java.lang.Object)>(r43);

     label18:
        goto label25;

     label19:
        $r33 := @caughtexception;

        r51 = $r33;

        goto label22;

     label20:
        $r39 := @caughtexception;

        r52 = $r39;

        goto label24;

     label21:
        $r36 := @caughtexception;

        r51 = $r36;

     label22:
        goto label43;

     label23:
        $r38 := @caughtexception;

        r52 = $r38;

     label24:
        r53 = r50;

        goto label38;

     label25:
        if r50 == null goto label26;

        z3 = 1;

        goto label27;

     label26:
        z3 = 0;

     label27:
        if r50 != null goto label28;

        virtualinvoke $r20.<android.view.Surface: void destroy()>();

     label28:
        virtualinvoke $r12.<android.view.SurfaceSession: void kill()>();

        return z3;

     label29:
        $r40 := @caughtexception;

        r51 = $r40;

        r50 = null;

        goto label43;

     label30:
        $r34 := @caughtexception;

        r52 = $r34;

        r53 = null;

        goto label38;

     label31:
        $r31 := @caughtexception;

        r50 = null;

     label32:
        virtualinvoke $r20.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r46);

     label33:
        r50 = null;

     label34:
        throw $r31;

     label35:
        $r32 := @caughtexception;

        r52 = $r32;

        r53 = null;

        goto label38;

     label36:
        $r35 := @caughtexception;

        r51 = $r35;

        r50 = null;

        goto label43;

     label37:
        $r37 := @caughtexception;

        r52 = $r37;

        r53 = null;

     label38:
        r50 = r53;

     label39:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Unable to initiate drag", r52);

     label40:
        if r53 != null goto label41;

        virtualinvoke $r20.<android.view.Surface: void destroy()>();

     label41:
        virtualinvoke $r12.<android.view.SurfaceSession: void kill()>();

        return 0;

     label42:
        $r30 := @caughtexception;

        r51 = $r30;

     label43:
        if r50 != null goto label44;

        virtualinvoke $r20.<android.view.Surface: void destroy()>();

     label44:
        virtualinvoke $r12.<android.view.SurfaceSession: void kill()>();

        throw r51;

     label45:
        $r10 = new java.lang.IllegalStateException;

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Drag shadow dimensions must be positive");

        throw $r10;

     label46:
        $r55 = new java.lang.IllegalStateException;

        specialinvoke $r55.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Drag shadow dimensions must not be negative");

        throw $r55;

        catch java.lang.Exception from label08 to label09 with label37;
        catch java.lang.Throwable from label08 to label09 with label36;
        catch java.lang.Throwable from label09 to label10 with label31;
        catch java.lang.Exception from label10 to label11 with label37;
        catch java.lang.Throwable from label10 to label11 with label36;
        catch java.lang.Exception from label11 to label12 with label37;
        catch java.lang.Throwable from label11 to label12 with label36;
        catch java.lang.Exception from label13 to label14 with label30;
        catch java.lang.Throwable from label13 to label14 with label29;
        catch java.lang.Exception from label15 to label16 with label23;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Exception from label16 to label17 with label23;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Exception from label17 to label18 with label20;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Exception from label32 to label33 with label35;
        catch java.lang.Throwable from label32 to label33 with label42;
        catch java.lang.Exception from label34 to label35 with label35;
        catch java.lang.Throwable from label34 to label35 with label42;
        catch java.lang.Throwable from label39 to label40 with label42;
    }

    public final boolean startMovingTask(float, float)
    {
        android.view.View r0;
        float f0, f1;
        boolean z0;
        android.view.View$AttachInfo $r2, $r3;
        android.view.IWindow $r4;
        android.view.IWindowSession $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.view.View;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

     label1:
        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r2.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        z0 = interfaceinvoke $r5.<android.view.IWindowSession: boolean startMovingTask(android.view.IWindow,float,float)>($r4, f0, f1);

     label2:
        return z0;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Unable to start moving", $r6);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean startNestedScroll(int)
    {
        android.view.View r0, r10;
        int i0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.AbstractMethodError $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;
        android.view.ViewParent r9;

        r0 := @this: android.view.View;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<android.view.View: boolean hasNestedScrollingParent()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<android.view.View: boolean isNestedScrollingEnabled()>();

        if $z1 == 0 goto label9;

        r9 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

        r10 = r0;

     label2:
        if r9 == null goto label9;

     label3:
        $z2 = interfaceinvoke r9.<android.view.ViewParent: boolean onStartNestedScroll(android.view.View,android.view.View,int)>(r10, r0, i0);

        if $z2 == 0 goto label5;

        r0.<android.view.View: android.view.ViewParent mNestedScrollingParent> = r9;

        interfaceinvoke r9.<android.view.ViewParent: void onNestedScrollAccepted(android.view.View,android.view.View,int)>(r10, r0, i0);

     label4:
        return 1;

     label5:
        goto label7;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ViewParent ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement interface method onStartNestedScroll");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r8, $r3);

     label7:
        $z3 = r9 instanceof android.view.View;

        if $z3 == 0 goto label8;

        r10 = (android.view.View) r9;

     label8:
        r9 = interfaceinvoke r9.<android.view.ViewParent: android.view.ViewParent getParent()>();

        goto label2;

     label9:
        return 0;

        catch java.lang.AbstractMethodError from label3 to label4 with label6;
    }

    public void stopNestedScroll()
    {
        android.view.View r0;
        android.view.ViewParent r1;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.ViewParent mNestedScrollingParent>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.view.ViewParent: void onStopNestedScroll(android.view.View)>(r0);

        r0.<android.view.View: android.view.ViewParent mNestedScrollingParent> = null;

     label1:
        return;
    }

    public boolean toGlobalMotionEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.graphics.Matrix $r2, r4;
        android.view.View$AttachInfo r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r3 != null goto label1;

        return 0;

     label1:
        r4 = r3.<android.view.View$AttachInfo: android.graphics.Matrix mTmpMatrix>;

        $r2 = <android.graphics.Matrix: android.graphics.Matrix IDENTITY_MATRIX>;

        virtualinvoke r4.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r2);

        virtualinvoke r0.<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>(r4);

        virtualinvoke r1.<android.view.MotionEvent: void transform(android.graphics.Matrix)>(r4);

        return 1;
    }

    public boolean toLocalMotionEvent(android.view.MotionEvent)
    {
        android.view.View r0;
        android.view.MotionEvent r1;
        android.graphics.Matrix $r2, r4;
        android.view.View$AttachInfo r3;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.MotionEvent;

        r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r3 != null goto label1;

        return 0;

     label1:
        r4 = r3.<android.view.View$AttachInfo: android.graphics.Matrix mTmpMatrix>;

        $r2 = <android.graphics.Matrix: android.graphics.Matrix IDENTITY_MATRIX>;

        virtualinvoke r4.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r2);

        virtualinvoke r0.<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>(r4);

        virtualinvoke r1.<android.view.MotionEvent: void transform(android.graphics.Matrix)>(r4);

        return 1;
    }

    public java.lang.String toString()
    {
        android.view.View r0;
        java.lang.String r2, $r5, $r8, $r38, $r43, r57, r58;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, i33, i37, $i39, i49, i73, $i77, $i78, i88, i89;
        android.view.autofill.AutofillId $r40, $r60;
        boolean $z0;
        android.content.res.Resources$NotFoundException $r55;
        char c41, c44, c47, c52, c54, c57, c60, c63, c66, c68, c71, c75, c79, c82, c84, c86;
        android.content.res.Resources r56;

        r0 := @this: android.view.View;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(128);

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123);

        $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i1 = r0.<android.view.View: int mViewFlags>;

        i33 = $i1 & 12;

        if i33 == 0 goto label03;

        if i33 == 4 goto label02;

        if i33 == 8 goto label01;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        goto label04;

     label01:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(71);

        goto label04;

     label02:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(73);

        goto label04;

     label03:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(86);

     label04:
        i37 = r0.<android.view.View: int mViewFlags>;

        $i39 = i37 & 1;

        if $i39 != 1 goto label05;

        c41 = 70;

        goto label06;

     label05:
        c41 = 46;

     label06:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c41);

        $i2 = r0.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 32;

        if $i3 != 0 goto label07;

        c44 = 69;

        goto label08;

     label07:
        c44 = 46;

     label08:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c44);

        $i4 = r0.<android.view.View: int mViewFlags>;

        $i5 = $i4 & 128;

        if $i5 != 128 goto label09;

        c47 = 46;

        goto label10;

     label09:
        c47 = 68;

     label10:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c47);

        i49 = r0.<android.view.View: int mViewFlags>;

        $i6 = i49 & 256;

        if $i6 == 0 goto label11;

        c52 = 72;

        goto label12;

     label11:
        c52 = 46;

     label12:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c52);

        $i7 = r0.<android.view.View: int mViewFlags>;

        $i8 = $i7 & 512;

        if $i8 == 0 goto label13;

        c54 = 86;

        goto label14;

     label13:
        c54 = 46;

     label14:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c54);

        $i9 = r0.<android.view.View: int mViewFlags>;

        $i10 = $i9 & 16384;

        if $i10 == 0 goto label15;

        c57 = 67;

        goto label16;

     label15:
        c57 = 46;

     label16:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c57);

        $i11 = r0.<android.view.View: int mViewFlags>;

        $i12 = $i11 & 2097152;

        if $i12 == 0 goto label17;

        c60 = 76;

        goto label18;

     label17:
        c60 = 46;

     label18:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c60);

        $i13 = r0.<android.view.View: int mViewFlags>;

        $i14 = $i13 & 8388608;

        if $i14 == 0 goto label19;

        c63 = 88;

        goto label20;

     label19:
        c63 = 46;

     label20:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c63);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i15 = r0.<android.view.View: int mPrivateFlags>;

        $i16 = $i15 & 8;

        if $i16 == 0 goto label21;

        c66 = 82;

        goto label22;

     label21:
        c66 = 46;

     label22:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c66);

        $i17 = r0.<android.view.View: int mPrivateFlags>;

        $i18 = $i17 & 2;

        if $i18 == 0 goto label23;

        c68 = 70;

        goto label24;

     label23:
        c68 = 46;

     label24:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c68);

        $i19 = r0.<android.view.View: int mPrivateFlags>;

        $i20 = $i19 & 4;

        if $i20 == 0 goto label25;

        c71 = 83;

        goto label26;

     label25:
        c71 = 46;

     label26:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c71);

        i73 = r0.<android.view.View: int mPrivateFlags>;

        $i21 = 33554432 & i73;

        if $i21 == 0 goto label27;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(112);

        goto label30;

     label27:
        $i22 = i73 & 16384;

        if $i22 == 0 goto label28;

        c75 = 80;

        goto label29;

     label28:
        c75 = 46;

     label29:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c75);

     label30:
        $i77 = r0.<android.view.View: int mPrivateFlags>;

        $i78 = $i77 & 268435456;

        if $i78 == 0 goto label31;

        c79 = 72;

        goto label32;

     label31:
        c79 = 46;

     label32:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c79);

        $i23 = r0.<android.view.View: int mPrivateFlags>;

        $i24 = $i23 & 1073741824;

        if $i24 == 0 goto label33;

        c82 = 65;

        goto label34;

     label33:
        c82 = 46;

     label34:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c82);

        $i25 = r0.<android.view.View: int mPrivateFlags>;

        $i26 = $i25 & -2147483648;

        if $i26 == 0 goto label35;

        c84 = 73;

        goto label36;

     label35:
        c84 = 46;

     label36:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c84);

        c86 = 46;

        $i27 = r0.<android.view.View: int mPrivateFlags>;

        $i28 = $i27 & 2097152;

        if $i28 == 0 goto label37;

        c86 = 68;

     label37:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c86);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i29 = r0.<android.view.View: int mLeft>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i29);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i30 = r0.<android.view.View: int mTop>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i30);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);

        $i31 = r0.<android.view.View: int mRight>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i31);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

        $i32 = r0.<android.view.View: int mBottom>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i32);

        i88 = virtualinvoke r0.<android.view.View: int getId()>();

        if i88 == -1 goto label45;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" #");

        $r43 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i88);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        r56 = r0.<android.view.View: android.content.res.Resources mResources>;

        if i88 <= 0 goto label45;

        $z0 = staticinvoke <android.content.res.Resources: boolean resourceHasPackage(int)>(i88);

        if $z0 == 0 goto label45;

        if r56 == null goto label45;

        i89 = -16777216 & i88;

        if i89 == 16777216 goto label41;

        if i89 == 2130706432 goto label40;

     label38:
        r57 = virtualinvoke r56.<android.content.res.Resources: java.lang.String getResourcePackageName(int)>(i88);

     label39:
        goto label42;

     label40:
        r57 = "app";

        goto label42;

     label41:
        r57 = "android";

     label42:
        r2 = virtualinvoke r56.<android.content.res.Resources: java.lang.String getResourceTypeName(int)>(i88);

        r58 = virtualinvoke r56.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>(i88);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r57);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r58);

     label43:
        goto label45;

     label44:
        $r55 := @caughtexception;

     label45:
        $r60 = r0.<android.view.View: android.view.autofill.AutofillId mAutofillId>;

        if $r60 == null goto label46;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" aid=");

        $r40 = r0.<android.view.View: android.view.autofill.AutofillId mAutofillId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

     label46:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r38 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r38;

        catch android.content.res.Resources$NotFoundException from label38 to label39 with label44;
        catch android.content.res.Resources$NotFoundException from label42 to label43 with label44;
    }

    public void transformFromViewToWindowSpace(int[])
    {
        android.view.View r0, r8;
        int[] r1;
        float[] r2;
        java.lang.IllegalArgumentException $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24;
        boolean $z0, $z1, $z2, $z3;
        android.graphics.Matrix $r4, $r5;
        android.view.View$AttachInfo r6;
        android.view.ViewParent r7;
        android.view.ViewRootImpl r9;

        r0 := @this: android.view.View;

        r1 := @parameter0: int[];

        if r1 == null goto label7;

        $i0 = lengthof r1;

        if $i0 < 2 goto label7;

        r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r6 != null goto label1;

        r1[1] = 0;

        r1[0] = 0;

        return;

     label1:
        r2 = r6.<android.view.View$AttachInfo: float[] mTmpTransformLocation>;

        $i1 = r1[0];

        $f0 = (float) $i1;

        r2[0] = $f0;

        $i2 = r1[1];

        $f1 = (float) $i2;

        r2[1] = $f1;

        $z0 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label2;

        $r5 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r5.<android.graphics.Matrix: void mapPoints(float[])>(r2);

     label2:
        $f3 = r2[0];

        $i3 = r0.<android.view.View: int mLeft>;

        $f2 = (float) $i3;

        $f4 = $f3 + $f2;

        r2[0] = $f4;

        $f6 = r2[1];

        $i4 = r0.<android.view.View: int mTop>;

        $f5 = (float) $i4;

        $f7 = $f6 + $f5;

        r2[1] = $f7;

        r7 = r0.<android.view.View: android.view.ViewParent mParent>;

     label3:
        $z3 = r7 instanceof android.view.View;

        if $z3 == 0 goto label5;

        r8 = (android.view.View) r7;

        $f14 = r2[0];

        $i8 = r8.<android.view.View: int mScrollX>;

        $f13 = (float) $i8;

        $f15 = $f14 - $f13;

        r2[0] = $f15;

        $f17 = r2[1];

        $i9 = r8.<android.view.View: int mScrollY>;

        $f16 = (float) $i9;

        $f18 = $f17 - $f16;

        r2[1] = $f18;

        $z2 = virtualinvoke r8.<android.view.View: boolean hasIdentityMatrix()>();

        if $z2 != 0 goto label4;

        $r4 = virtualinvoke r8.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r4.<android.graphics.Matrix: void mapPoints(float[])>(r2);

     label4:
        $f20 = r2[0];

        $i10 = r8.<android.view.View: int mLeft>;

        $f19 = (float) $i10;

        $f21 = $f20 + $f19;

        r2[0] = $f21;

        $f23 = r2[1];

        $i11 = r8.<android.view.View: int mTop>;

        $f22 = (float) $i11;

        $f24 = $f23 + $f22;

        r2[1] = $f24;

        r7 = r8.<android.view.View: android.view.ViewParent mParent>;

        goto label3;

     label5:
        $z1 = r7 instanceof android.view.ViewRootImpl;

        if $z1 == 0 goto label6;

        r9 = (android.view.ViewRootImpl) r7;

        $f11 = r2[1];

        $i7 = r9.<android.view.ViewRootImpl: int mCurScrollY>;

        $f10 = (float) $i7;

        $f12 = $f11 - $f10;

        r2[1] = $f12;

     label6:
        $f8 = r2[0];

        $i5 = staticinvoke <java.lang.Math: int round(float)>($f8);

        r1[0] = $i5;

        $f9 = r2[1];

        $i6 = staticinvoke <java.lang.Math: int round(float)>($f9);

        r1[1] = $i6;

        return;

     label7:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("inOutLocation must be an array of two integers");

        throw $r3;
    }

    public void transformMatrixToGlobal(android.graphics.Matrix)
    {
        android.view.View r0, r4;
        android.graphics.Matrix r1, $r2;
        boolean $z0, $z1, $z6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        float $f0, $f1, $f2, $f3, $f4;
        android.view.ViewParent r3;
        android.view.ViewRootImpl r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Matrix;

        r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r3 instanceof android.view.View;

        if $z0 == 0 goto label1;

        r4 = (android.view.View) r3;

        virtualinvoke r4.<android.view.View: void transformMatrixToGlobal(android.graphics.Matrix)>(r1);

        $i2 = r4.<android.view.View: int mScrollX>;

        $i3 = neg $i2;

        $f2 = (float) $i3;

        $i4 = r4.<android.view.View: int mScrollY>;

        $i5 = neg $i4;

        $f1 = (float) $i5;

        virtualinvoke r1.<android.graphics.Matrix: boolean preTranslate(float,float)>($f2, $f1);

        goto label2;

     label1:
        $z1 = r3 instanceof android.view.ViewRootImpl;

        if $z1 == 0 goto label2;

        r5 = (android.view.ViewRootImpl) r3;

        virtualinvoke r5.<android.view.ViewRootImpl: void transformMatrixToGlobal(android.graphics.Matrix)>(r1);

        $i0 = r5.<android.view.ViewRootImpl: int mCurScrollY>;

        $i1 = neg $i0;

        $f0 = (float) $i1;

        virtualinvoke r1.<android.graphics.Matrix: boolean preTranslate(float,float)>(0.0F, $f0);

        goto label2;

     label2:
        $i6 = r0.<android.view.View: int mLeft>;

        $f3 = (float) $i6;

        $i7 = r0.<android.view.View: int mTop>;

        $f4 = (float) $i7;

        virtualinvoke r1.<android.graphics.Matrix: boolean preTranslate(float,float)>($f3, $f4);

        $z6 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z6 != 0 goto label3;

        $r2 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke r1.<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>($r2);

     label3:
        return;
    }

    public void transformMatrixToLocal(android.graphics.Matrix)
    {
        android.view.View r0, r4;
        android.graphics.Matrix r1, $r2;
        boolean $z0, $z1, $z6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        float $f0, $f1, $f2, $f3, $f4;
        android.view.ViewParent r3;
        android.view.ViewRootImpl r5;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.Matrix;

        r3 = r0.<android.view.View: android.view.ViewParent mParent>;

        $z0 = r3 instanceof android.view.View;

        if $z0 == 0 goto label1;

        r4 = (android.view.View) r3;

        virtualinvoke r4.<android.view.View: void transformMatrixToLocal(android.graphics.Matrix)>(r1);

        $i1 = r4.<android.view.View: int mScrollX>;

        $f2 = (float) $i1;

        $i2 = r4.<android.view.View: int mScrollY>;

        $f1 = (float) $i2;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>($f2, $f1);

        goto label2;

     label1:
        $z1 = r3 instanceof android.view.ViewRootImpl;

        if $z1 == 0 goto label2;

        r5 = (android.view.ViewRootImpl) r3;

        virtualinvoke r5.<android.view.ViewRootImpl: void transformMatrixToLocal(android.graphics.Matrix)>(r1);

        $i0 = r5.<android.view.ViewRootImpl: int mCurScrollY>;

        $f0 = (float) $i0;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>(0.0F, $f0);

        goto label2;

     label2:
        $i3 = r0.<android.view.View: int mLeft>;

        $i4 = neg $i3;

        $f3 = (float) $i4;

        $i5 = r0.<android.view.View: int mTop>;

        $i6 = neg $i5;

        $f4 = (float) $i6;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>($f3, $f4);

        $z6 = virtualinvoke r0.<android.view.View: boolean hasIdentityMatrix()>();

        if $z6 != 0 goto label3;

        $r2 = virtualinvoke r0.<android.view.View: android.graphics.Matrix getInverseMatrix()>();

        virtualinvoke r1.<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>($r2);

     label3:
        return;
    }

    void unFocus(android.view.View)
    {
        android.view.View r0, r1;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.View: void clearFocusInternal(android.view.View,boolean,boolean)>(r1, 0, 0);

        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        android.view.View$AttachInfo r2;
        android.view.ViewRootImpl $r3;
        android.view.Choreographer $r4;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label1;

        if r1 == null goto label1;

        $r3 = r2.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r4 = $r3.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r4.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(1, null, r1);

     label1:
        return;
    }

    public void unscheduleDrawable(android.graphics.drawable.Drawable, java.lang.Runnable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1;
        java.lang.Runnable r2;
        android.view.View$AttachInfo r3;
        boolean $z0;
        android.view.HandlerActionQueue $r4;
        android.view.ViewRootImpl $r5;
        android.view.Choreographer $r6;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 := @parameter1: java.lang.Runnable;

        $z0 = virtualinvoke r0.<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>(r1);

        if $z0 == 0 goto label2;

        if r2 == null goto label2;

        r3 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r3 == null goto label1;

        $r5 = r3.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $r6 = $r5.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r6.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(1, r2, r1);

     label1:
        $r4 = specialinvoke r0.<android.view.View: android.view.HandlerActionQueue getRunQueue()>();

        virtualinvoke $r4.<android.view.HandlerActionQueue: void removeCallbacks(java.lang.Runnable)>(r2);

     label2:
        return;
    }

    public android.graphics.RenderNode updateDisplayListIfDirty()
    {
        android.view.View r0;
        android.graphics.RenderNode r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22;
        android.graphics.Bitmap r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        float $f0, $f1;
        android.view.ViewOverlay $r3, $r4, $r5;
        android.view.ViewGroup $r6;
        android.graphics.Paint $r7;
        java.lang.Throwable $r8;
        android.graphics.RecordingCanvas r9;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.graphics.RenderNode mRenderNode>;

        $z0 = virtualinvoke r0.<android.view.View: boolean canHaveDisplayList()>();

        if $z0 != 0 goto label01;

        return r1;

     label01:
        $i4 = r0.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 32768;

        if $i5 == 0 goto label03;

        $z3 = virtualinvoke r1.<android.graphics.RenderNode: boolean hasDisplayList()>();

        if $z3 == 0 goto label03;

        $z4 = r0.<android.view.View: boolean mRecreateDisplayList>;

        if $z4 == 0 goto label02;

        goto label03;

     label02:
        $i16 = r0.<android.view.View: int mPrivateFlags>;

        i18 = $i16 | 32800;

        r0.<android.view.View: int mPrivateFlags> = i18;

        $i17 = i18 & -2097153;

        r0.<android.view.View: int mPrivateFlags> = $i17;

        goto label18;

     label03:
        $z5 = virtualinvoke r1.<android.graphics.RenderNode: boolean hasDisplayList()>();

        if $z5 == 0 goto label04;

        $z2 = r0.<android.view.View: boolean mRecreateDisplayList>;

        if $z2 != 0 goto label04;

        $i14 = r0.<android.view.View: int mPrivateFlags>;

        i19 = $i14 | 32800;

        r0.<android.view.View: int mPrivateFlags> = i19;

        $i15 = i19 & -2097153;

        r0.<android.view.View: int mPrivateFlags> = $i15;

        virtualinvoke r0.<android.view.View: void dispatchGetDisplayList()>();

        return r1;

     label04:
        r0.<android.view.View: boolean mRecreateDisplayList> = 1;

        i0 = r0.<android.view.View: int mRight>;

        i1 = r0.<android.view.View: int mLeft>;

        i2 = r0.<android.view.View: int mBottom>;

        i3 = r0.<android.view.View: int mTop>;

        i20 = virtualinvoke r0.<android.view.View: int getLayerType()>();

        $i7 = i0 - i1;

        $i6 = i2 - i3;

        r9 = virtualinvoke r1.<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>($i7, $i6);

        if i20 != 1 goto label09;

     label05:
        virtualinvoke r0.<android.view.View: void buildDrawingCache(boolean)>(1);

        r2 = virtualinvoke r0.<android.view.View: android.graphics.Bitmap getDrawingCache(boolean)>(1);

     label06:
        if r2 == null goto label08;

     label07:
        $r7 = r0.<android.view.View: android.graphics.Paint mLayerPaint>;

        virtualinvoke r9.<android.graphics.RecordingCanvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>(r2, 0.0F, 0.0F, $r7);

     label08:
        goto label17;

     label09:
        virtualinvoke r0.<android.view.View: void computeScroll()>();

        $i8 = r0.<android.view.View: int mScrollX>;

        $i9 = neg $i8;

        $f1 = (float) $i9;

        $i10 = r0.<android.view.View: int mScrollY>;

        $i11 = neg $i10;

        $f0 = (float) $i11;

        virtualinvoke r9.<android.graphics.RecordingCanvas: void translate(float,float)>($f1, $f0);

        $i12 = r0.<android.view.View: int mPrivateFlags>;

        i21 = $i12 | 32800;

        r0.<android.view.View: int mPrivateFlags> = i21;

     label10:
        i22 = i21 & -2097153;

     label11:
        r0.<android.view.View: int mPrivateFlags> = i22;

     label12:
        $i13 = i22 & 128;

        if $i13 != 128 goto label16;

     label13:
        virtualinvoke r0.<android.view.View: void dispatchDraw(android.graphics.Canvas)>(r9);

        specialinvoke r0.<android.view.View: void drawAutofilledHighlight(android.graphics.Canvas)>(r9);

        $r3 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r3 == null goto label14;

        $r4 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $z1 = virtualinvoke $r4.<android.view.ViewOverlay: boolean isEmpty()>();

        if $z1 != 0 goto label14;

        $r5 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r6 = virtualinvoke $r5.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        virtualinvoke $r6.<android.view.ViewGroup: void draw(android.graphics.Canvas)>(r9);

     label14:
        $z6 = virtualinvoke r0.<android.view.View: boolean isShowingLayoutBounds()>();

        if $z6 == 0 goto label17;

        specialinvoke r0.<android.view.View: void debugDrawFocus(android.graphics.Canvas)>(r9);

     label15:
        goto label17;

     label16:
        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r9);

     label17:
        virtualinvoke r1.<android.graphics.RenderNode: void endRecording()>();

        virtualinvoke r0.<android.view.View: void setDisplayListProperties(android.graphics.RenderNode)>(r1);

     label18:
        return r1;

     label19:
        $r8 := @caughtexception;

        virtualinvoke r1.<android.graphics.RenderNode: void endRecording()>();

        virtualinvoke r0.<android.view.View: void setDisplayListProperties(android.graphics.RenderNode)>(r1);

        throw $r8;

        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
    }

    public final void updateDragShadow(android.view.View$DragShadowBuilder)
    {
        android.view.View r0;
        android.os.IBinder $r1;
        android.view.View$AttachInfo $r2, $r5, $r9, r12;
        android.view.Surface $r3, $r6, $r10;
        android.graphics.PorterDuff$Mode $r4;
        java.lang.Exception $r7;
        java.lang.Throwable $r8;
        android.view.View$DragShadowBuilder r11;
        android.graphics.Canvas r13;

        r0 := @this: android.view.View;

        r11 := @parameter0: android.view.View$DragShadowBuilder;

        r12 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r12 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "updateDragShadow called on a detached view.");

        return;

     label01:
        $r1 = r12.<android.view.View$AttachInfo: android.os.IBinder mDragToken>;

        if $r1 == null goto label11;

     label02:
        $r2 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.Surface mDragSurface>;

        r13 = virtualinvoke $r3.<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>(null);

     label03:
        $r4 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        virtualinvoke r13.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r4);

        virtualinvoke r11.<android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)>(r13);

     label04:
        $r5 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.Surface mDragSurface>;

        virtualinvoke $r6.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r13);

     label05:
        goto label10;

     label06:
        $r8 := @caughtexception;

     label07:
        $r9 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r10 = $r9.<android.view.View$AttachInfo: android.view.Surface mDragSurface>;

        virtualinvoke $r10.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r13);

     label08:
        throw $r8;

     label09:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Unable to update drag shadow", $r7);

     label10:
        goto label12;

     label11:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("View", "No active drag");

     label12:
        return;

        catch java.lang.Exception from label02 to label03 with label09;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Exception from label04 to label05 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label08 to label09 with label09;
    }

    boolean updateLocalSystemUiVisibility(int, int)
    {
        android.view.View r0;
        int i0, i1, $i2, $i3, i4, i5;

        r0 := @this: android.view.View;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        i1 = r0.<android.view.View: int mSystemUiVisibility>;

        $i3 = i0 & i1;

        $i2 = i4 & i0;

        i5 = $i3 | $i2;

        if i5 == i1 goto label1;

        virtualinvoke r0.<android.view.View: void setSystemUiVisibility(int)>(i5);

        return 1;

     label1:
        return 0;
    }

    void updateSystemGestureExclusionRects()
    {
        android.view.View r0;
        android.view.View$AttachInfo r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: android.view.View;

        r1 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        virtualinvoke $r2.<android.view.ViewRootImpl: void updateSystemGestureExclusionRectsForView(android.view.View)>(r0);

     label1:
        return;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable)
    {
        android.view.View r0;
        android.graphics.drawable.Drawable r1, $r3, $r4, $r5;
        android.view.View$ForegroundInfo r2;
        boolean z0;

        r0 := @this: android.view.View;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r3 = r0.<android.view.View: android.graphics.drawable.Drawable mBackground>;

        if r1 == $r3 goto label3;

        r2 = r0.<android.view.View: android.view.View$ForegroundInfo mForegroundInfo>;

        if r2 == null goto label1;

        $r5 = staticinvoke <android.view.View$ForegroundInfo: android.graphics.drawable.Drawable access$1600(android.view.View$ForegroundInfo)>(r2);

        if $r5 == r1 goto label3;

     label1:
        $r4 = r0.<android.view.View: android.graphics.drawable.Drawable mDefaultFocusHighlight>;

        if $r4 != r1 goto label2;

        goto label3;

     label2:
        z0 = 0;

        goto label4;

     label3:
        z0 = 1;

     label4:
        return z0;
    }

    public boolean willNotCacheDrawing()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 131072;

        if $i1 != 131072 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean willNotDraw()
    {
        android.view.View r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.View;

        $i0 = r0.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 128;

        if $i1 != 128 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }
}
