public class android.view.ViewConfiguration extends java.lang.Object
{
    private static final int A11Y_SHORTCUT_KEY_TIMEOUT;
    private static final int A11Y_SHORTCUT_KEY_TIMEOUT_AFTER_CONFIRMATION;
    private static final long ACTION_MODE_HIDE_DURATION_DEFAULT;
    private static final float AMBIGUOUS_GESTURE_MULTIPLIER;
    public static final int DEFAULT_LONG_PRESS_TIMEOUT;
    private static final int DEFAULT_MULTI_PRESS_TIMEOUT;
    private static final int DOUBLE_TAP_MIN_TIME;
    private static final int DOUBLE_TAP_SLOP;
    private static final int DOUBLE_TAP_TIMEOUT;
    private static final int DOUBLE_TAP_TOUCH_SLOP;
    private static final int EDGE_SLOP;
    private static final int FADING_EDGE_LENGTH;
    private static final int GLOBAL_ACTIONS_KEY_TIMEOUT;
    private static final int HAS_PERMANENT_MENU_KEY_AUTODETECT;
    private static final int HAS_PERMANENT_MENU_KEY_FALSE;
    private static final int HAS_PERMANENT_MENU_KEY_TRUE;
    private static final float HORIZONTAL_SCROLL_FACTOR;
    private static final int HOVER_TAP_SLOP;
    private static final int HOVER_TAP_TIMEOUT;
    private static final int HOVER_TOOLTIP_HIDE_SHORT_TIMEOUT;
    private static final int HOVER_TOOLTIP_HIDE_TIMEOUT;
    private static final int HOVER_TOOLTIP_SHOW_TIMEOUT;
    private static final int JUMP_TAP_TIMEOUT;
    private static final int KEY_REPEAT_DELAY;
    private static final int LONG_PRESS_TOOLTIP_HIDE_TIMEOUT;
    private static final int MAXIMUM_DRAWING_CACHE_SIZE;
    private static final int MAXIMUM_FLING_VELOCITY;
    private static final int MINIMUM_FLING_VELOCITY;
    private static final int MIN_SCROLLBAR_TOUCH_TARGET;
    private static final int OVERFLING_DISTANCE;
    private static final int OVERSCROLL_DISTANCE;
    private static final int PAGING_TOUCH_SLOP;
    private static final int PRESSED_STATE_DURATION;
    private static final int SCREENSHOT_CHORD_KEY_TIMEOUT;
    private static final int SCROLL_BAR_DEFAULT_DELAY;
    private static final int SCROLL_BAR_FADE_DURATION;
    private static final int SCROLL_BAR_SIZE;
    private static final float SCROLL_FRICTION;
    private static final long SEND_RECURRING_ACCESSIBILITY_EVENTS_INTERVAL_MILLIS;
    private static final java.lang.String TAG;
    private static final int TAP_TIMEOUT;
    private static final int TOUCH_SLOP;
    private static final float VERTICAL_SCROLL_FACTOR;
    private static final int WINDOW_TOUCH_SLOP;
    private static final int ZOOM_CONTROLS_TIMEOUT;
    static final android.util.SparseArray sConfigurations;
    private final float mAmbiguousGestureMultiplier;
    private final boolean mConstructedWithContext;
    private final int mDoubleTapSlop;
    private final int mDoubleTapTouchSlop;
    private final int mEdgeSlop;
    private final int mFadingEdgeLength;
    private final boolean mFadingMarqueeEnabled;
    private final long mGlobalActionsKeyTimeout;
    private final float mHorizontalScrollFactor;
    private final int mHoverSlop;
    private final int mMaximumDrawingCacheSize;
    private final int mMaximumFlingVelocity;
    private final int mMinScalingSpan;
    private final int mMinScrollbarTouchTarget;
    private final int mMinimumFlingVelocity;
    private final int mOverflingDistance;
    private final int mOverscrollDistance;
    private final int mPagingTouchSlop;
    private final long mScreenshotChordKeyTimeout;
    private final int mScrollbarSize;
    private final boolean mShowMenuShortcutsWhenKeyboardPresent;
    private final int mTouchSlop;
    private final float mVerticalScrollFactor;
    private final int mWindowTouchSlop;
    private boolean sHasPermanentMenuKey;
    private boolean sHasPermanentMenuKeySet;

    static void <clinit>()
    {
        android.util.SparseArray $r0;

        <android.view.ViewConfiguration: int ZOOM_CONTROLS_TIMEOUT> = 3000;

        <android.view.ViewConfiguration: int WINDOW_TOUCH_SLOP> = 16;

        <android.view.ViewConfiguration: float VERTICAL_SCROLL_FACTOR> = 64.0F;

        <android.view.ViewConfiguration: int TOUCH_SLOP> = 8;

        <android.view.ViewConfiguration: int TAP_TIMEOUT> = 100;

        <android.view.ViewConfiguration: java.lang.String TAG> = "ViewConfiguration";

        <android.view.ViewConfiguration: long SEND_RECURRING_ACCESSIBILITY_EVENTS_INTERVAL_MILLIS> = 100L;

        <android.view.ViewConfiguration: float SCROLL_FRICTION> = 0.015F;

        <android.view.ViewConfiguration: int SCROLL_BAR_SIZE> = 4;

        <android.view.ViewConfiguration: int SCROLL_BAR_FADE_DURATION> = 250;

        <android.view.ViewConfiguration: int SCROLL_BAR_DEFAULT_DELAY> = 300;

        <android.view.ViewConfiguration: int SCREENSHOT_CHORD_KEY_TIMEOUT> = 500;

        <android.view.ViewConfiguration: int PRESSED_STATE_DURATION> = 64;

        <android.view.ViewConfiguration: int PAGING_TOUCH_SLOP> = 16;

        <android.view.ViewConfiguration: int OVERSCROLL_DISTANCE> = 0;

        <android.view.ViewConfiguration: int OVERFLING_DISTANCE> = 6;

        <android.view.ViewConfiguration: int MIN_SCROLLBAR_TOUCH_TARGET> = 48;

        <android.view.ViewConfiguration: int MINIMUM_FLING_VELOCITY> = 50;

        <android.view.ViewConfiguration: int MAXIMUM_FLING_VELOCITY> = 8000;

        <android.view.ViewConfiguration: int MAXIMUM_DRAWING_CACHE_SIZE> = 1536000;

        <android.view.ViewConfiguration: int LONG_PRESS_TOOLTIP_HIDE_TIMEOUT> = 1500;

        <android.view.ViewConfiguration: int KEY_REPEAT_DELAY> = 50;

        <android.view.ViewConfiguration: int JUMP_TAP_TIMEOUT> = 500;

        <android.view.ViewConfiguration: int HOVER_TOOLTIP_SHOW_TIMEOUT> = 500;

        <android.view.ViewConfiguration: int HOVER_TOOLTIP_HIDE_TIMEOUT> = 15000;

        <android.view.ViewConfiguration: int HOVER_TOOLTIP_HIDE_SHORT_TIMEOUT> = 3000;

        <android.view.ViewConfiguration: int HOVER_TAP_TIMEOUT> = 150;

        <android.view.ViewConfiguration: int HOVER_TAP_SLOP> = 20;

        <android.view.ViewConfiguration: float HORIZONTAL_SCROLL_FACTOR> = 64.0F;

        <android.view.ViewConfiguration: int HAS_PERMANENT_MENU_KEY_TRUE> = 1;

        <android.view.ViewConfiguration: int HAS_PERMANENT_MENU_KEY_FALSE> = 2;

        <android.view.ViewConfiguration: int HAS_PERMANENT_MENU_KEY_AUTODETECT> = 0;

        <android.view.ViewConfiguration: int GLOBAL_ACTIONS_KEY_TIMEOUT> = 500;

        <android.view.ViewConfiguration: int FADING_EDGE_LENGTH> = 12;

        <android.view.ViewConfiguration: int EDGE_SLOP> = 12;

        <android.view.ViewConfiguration: int DOUBLE_TAP_TOUCH_SLOP> = 8;

        <android.view.ViewConfiguration: int DOUBLE_TAP_TIMEOUT> = 300;

        <android.view.ViewConfiguration: int DOUBLE_TAP_SLOP> = 100;

        <android.view.ViewConfiguration: int DOUBLE_TAP_MIN_TIME> = 40;

        <android.view.ViewConfiguration: int DEFAULT_MULTI_PRESS_TIMEOUT> = 300;

        <android.view.ViewConfiguration: int DEFAULT_LONG_PRESS_TIMEOUT> = 400;

        <android.view.ViewConfiguration: float AMBIGUOUS_GESTURE_MULTIPLIER> = 2.0F;

        <android.view.ViewConfiguration: long ACTION_MODE_HIDE_DURATION_DEFAULT> = 2000L;

        <android.view.ViewConfiguration: int A11Y_SHORTCUT_KEY_TIMEOUT_AFTER_CONFIRMATION> = 1000;

        <android.view.ViewConfiguration: int A11Y_SHORTCUT_KEY_TIMEOUT> = 3000;

        $r0 = new android.util.SparseArray;

        specialinvoke $r0.<android.util.SparseArray: void <init>(int)>(2);

        <android.view.ViewConfiguration: android.util.SparseArray sConfigurations> = $r0;

        return;
    }

    public void <init>()
    {
        android.view.ViewConfiguration r0;

        r0 := @this: android.view.ViewConfiguration;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.ViewConfiguration: boolean mConstructedWithContext> = 0;

        r0.<android.view.ViewConfiguration: int mEdgeSlop> = 12;

        r0.<android.view.ViewConfiguration: int mFadingEdgeLength> = 12;

        r0.<android.view.ViewConfiguration: int mMinimumFlingVelocity> = 50;

        r0.<android.view.ViewConfiguration: int mMaximumFlingVelocity> = 8000;

        r0.<android.view.ViewConfiguration: int mScrollbarSize> = 4;

        r0.<android.view.ViewConfiguration: int mTouchSlop> = 8;

        r0.<android.view.ViewConfiguration: int mHoverSlop> = 4;

        r0.<android.view.ViewConfiguration: int mMinScrollbarTouchTarget> = 48;

        r0.<android.view.ViewConfiguration: int mDoubleTapTouchSlop> = 8;

        r0.<android.view.ViewConfiguration: int mPagingTouchSlop> = 16;

        r0.<android.view.ViewConfiguration: int mDoubleTapSlop> = 100;

        r0.<android.view.ViewConfiguration: int mWindowTouchSlop> = 16;

        r0.<android.view.ViewConfiguration: float mAmbiguousGestureMultiplier> = 2.0F;

        r0.<android.view.ViewConfiguration: int mMaximumDrawingCacheSize> = 1536000;

        r0.<android.view.ViewConfiguration: int mOverscrollDistance> = 0;

        r0.<android.view.ViewConfiguration: int mOverflingDistance> = 6;

        r0.<android.view.ViewConfiguration: boolean mFadingMarqueeEnabled> = 1;

        r0.<android.view.ViewConfiguration: long mGlobalActionsKeyTimeout> = 500L;

        r0.<android.view.ViewConfiguration: float mHorizontalScrollFactor> = 64.0F;

        r0.<android.view.ViewConfiguration: float mVerticalScrollFactor> = 64.0F;

        r0.<android.view.ViewConfiguration: boolean mShowMenuShortcutsWhenKeyboardPresent> = 0;

        r0.<android.view.ViewConfiguration: long mScreenshotChordKeyTimeout> = 500L;

        r0.<android.view.ViewConfiguration: int mMinScalingSpan> = 0;

        return;
    }

    private void <init>(android.content.Context)
    {
        android.view.ViewConfiguration r0;
        android.content.res.Resources r1;
        android.util.DisplayMetrics r2;
        boolean $z0, $z1, $z2, z3, $z4, $z5;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, f14, $f15, $f16;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, i16, $i17, $i18, $i19, $i20, $i22, $i23, $i24, $i25;
        android.util.TypedValue $r3;
        java.lang.Object $r4;
        android.view.WindowManager $r5;
        android.view.WindowMetrics $r6;
        android.os.RemoteException $r7;
        android.content.Context r8;
        android.content.res.Configuration r9;
        android.graphics.Rect r11;
        android.view.IWindowManager r12;
        long $l21, $l26;

        r0 := @this: android.view.ViewConfiguration;

        r8 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.ViewConfiguration: boolean mConstructedWithContext> = 1;

        r1 = virtualinvoke r8.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        r9 = virtualinvoke r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        f14 = r2.<android.util.DisplayMetrics: float density>;

        $z0 = virtualinvoke r9.<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>(4);

        if $z0 == 0 goto label01;

        f14 = 1.5F * f14;

        goto label01;

     label01:
        $f0 = f14 * 12.0F;

        $f1 = $f0 + 0.5F;

        $i0 = (int) $f1;

        r0.<android.view.ViewConfiguration: int mEdgeSlop> = $i0;

        $f2 = 12.0F * f14;

        $f3 = $f2 + 0.5F;

        $i1 = (int) $f3;

        r0.<android.view.ViewConfiguration: int mFadingEdgeLength> = $i1;

        $i2 = virtualinvoke r1.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105088);

        r0.<android.view.ViewConfiguration: int mScrollbarSize> = $i2;

        $f4 = 100.0F * f14;

        $f5 = $f4 + 0.5F;

        $i3 = (int) $f5;

        r0.<android.view.ViewConfiguration: int mDoubleTapSlop> = $i3;

        $f6 = 16.0F * f14;

        $f7 = $f6 + 0.5F;

        $i4 = (int) $f7;

        r0.<android.view.ViewConfiguration: int mWindowTouchSlop> = $i4;

        $r3 = new android.util.TypedValue;

        specialinvoke $r3.<android.util.TypedValue: void <init>()>();

        virtualinvoke r1.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>(17105049, $r3, 1);

        $f8 = virtualinvoke $r3.<android.util.TypedValue: float getFloat()>();

        $f9 = staticinvoke <java.lang.Math: float max(float,float)>(1.0F, $f8);

        r0.<android.view.ViewConfiguration: float mAmbiguousGestureMultiplier> = $f9;

        $r4 = virtualinvoke r8.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/view/WindowManager;");

        $r5 = (android.view.WindowManager) $r4;

        $r6 = interfaceinvoke $r5.<android.view.WindowManager: android.view.WindowMetrics getMaximumWindowMetrics()>();

        r11 = virtualinvoke $r6.<android.view.WindowMetrics: android.graphics.Rect getBounds()>();

        $i5 = virtualinvoke r11.<android.graphics.Rect: int width()>();

        $i6 = $i5 * 4;

        $i7 = virtualinvoke r11.<android.graphics.Rect: int height()>();

        $i8 = $i6 * $i7;

        r0.<android.view.ViewConfiguration: int mMaximumDrawingCacheSize> = $i8;

        $f10 = 0.0F * f14;

        $f11 = $f10 + 0.5F;

        $i9 = (int) $f11;

        r0.<android.view.ViewConfiguration: int mOverscrollDistance> = $i9;

        $f12 = 6.0F * f14;

        $f13 = $f12 + 0.5F;

        $i10 = (int) $f13;

        r0.<android.view.ViewConfiguration: int mOverflingDistance> = $i10;

        $z1 = r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKeySet>;

        if $z1 != 0 goto label11;

        i12 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694876);

        if i12 == 1 goto label10;

        if i12 == 2 goto label09;

        r12 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

     label02:
        $i11 = virtualinvoke r8.<android.content.Context: int getDisplayId()>();

        $z2 = interfaceinvoke r12.<android.view.IWindowManager: boolean hasNavigationBar(int)>($i11);

        if $z2 != 0 goto label04;

     label03:
        z3 = 1;

        goto label05;

     label04:
        z3 = 0;

     label05:
        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKey> = z3;

        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKeySet> = 1;

     label06:
        goto label08;

     label07:
        $r7 := @caughtexception;

        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKey> = 0;

     label08:
        goto label11;

     label09:
        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKey> = 0;

        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKeySet> = 1;

        goto label11;

     label10:
        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKey> = 1;

        r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKeySet> = 1;

     label11:
        $z4 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891563);

        r0.<android.view.ViewConfiguration: boolean mFadingMarqueeEnabled> = $z4;

        $i13 = virtualinvoke r1.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105093);

        r0.<android.view.ViewConfiguration: int mTouchSlop> = $i13;

        $i14 = virtualinvoke r1.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105092);

        r0.<android.view.ViewConfiguration: int mHoverSlop> = $i14;

        $i15 = virtualinvoke r1.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105067);

        r0.<android.view.ViewConfiguration: int mMinScrollbarTouchTarget> = $i15;

        i16 = r0.<android.view.ViewConfiguration: int mTouchSlop>;

        $i17 = i16 * 2;

        r0.<android.view.ViewConfiguration: int mPagingTouchSlop> = $i17;

        r0.<android.view.ViewConfiguration: int mDoubleTapTouchSlop> = i16;

        $i18 = virtualinvoke r1.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105095);

        r0.<android.view.ViewConfiguration: int mMinimumFlingVelocity> = $i18;

        $i19 = virtualinvoke r1.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105094);

        r0.<android.view.ViewConfiguration: int mMaximumFlingVelocity> = $i19;

        $i20 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694815);

        $l21 = (long) $i20;

        r0.<android.view.ViewConfiguration: long mGlobalActionsKeyTimeout> = $l21;

        $i22 = virtualinvoke r1.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105061);

        $f15 = (float) $i22;

        r0.<android.view.ViewConfiguration: float mHorizontalScrollFactor> = $f15;

        $i23 = virtualinvoke r1.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105091);

        $f16 = (float) $i23;

        r0.<android.view.ViewConfiguration: float mVerticalScrollFactor> = $f16;

        $z5 = virtualinvoke r1.<android.content.res.Resources: boolean getBoolean(int)>(17891523);

        r0.<android.view.ViewConfiguration: boolean mShowMenuShortcutsWhenKeyboardPresent> = $z5;

        $i24 = virtualinvoke r1.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105065);

        r0.<android.view.ViewConfiguration: int mMinScalingSpan> = $i24;

        $i25 = virtualinvoke r1.<android.content.res.Resources: int getInteger(int)>(17694900);

        $l26 = (long) $i25;

        r0.<android.view.ViewConfiguration: long mScreenshotChordKeyTimeout> = $l26;

        return;

        catch android.os.RemoteException from label02 to label03 with label07;
        catch android.os.RemoteException from label05 to label06 with label07;
    }

    public static android.view.ViewConfiguration get(android.content.Context)
    {
        android.content.Context r0;
        java.lang.String r1, $r11;
        int i0;
        boolean $z0, $z1;
        android.view.ViewConfiguration $r2, r19, r20;
        android.util.SparseArray $r3, $r17;
        java.lang.StringBuilder $r4, $r8;
        java.lang.IllegalArgumentException $r7;
        android.content.res.Resources $r15;
        android.util.DisplayMetrics $r16;
        float $f0, $f1;
        java.lang.Object $r18;

        r0 := @parameter0: android.content.Context;

        $z0 = virtualinvoke r0.<android.content.Context: boolean isUiContext()>();

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <android.os.StrictMode: boolean vmIncorrectContextUseEnabled()>();

        if $z1 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to access UI constants from a non-visual Context:");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        r1 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r1);

        staticinvoke <android.os.StrictMode: void onIncorrectContextUsed(java.lang.String,java.lang.Throwable)>("UI constants, such as display metrics or window metrics, must be accessed from Activity or other visual Context. Use an Activity or a Context created with Context#createWindowContext(int, Bundle), which are adjusted to the configuration and visual bounds of an area on screen", $r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UI constants, such as display metrics or window metrics, must be accessed from Activity or other visual Context. Use an Activity or a Context created with Context#createWindowContext(int, Bundle), which are adjusted to the configuration and visual bounds of an area on screen");

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewConfiguration", $r11, $r7);

     label1:
        $r15 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $r16 = virtualinvoke $r15.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = $r16.<android.util.DisplayMetrics: float density>;

        $f1 = $f0 * 100.0F;

        i0 = (int) $f1;

        $r17 = <android.view.ViewConfiguration: android.util.SparseArray sConfigurations>;

        $r18 = virtualinvoke $r17.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r19 = (android.view.ViewConfiguration) $r18;

        r20 = r19;

        if r19 != null goto label2;

        $r2 = new android.view.ViewConfiguration;

        specialinvoke $r2.<android.view.ViewConfiguration: void <init>(android.content.Context)>(r0);

        r20 = $r2;

        $r3 = <android.view.ViewConfiguration: android.util.SparseArray sConfigurations>;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r2);

     label2:
        return r20;
    }

    public static float getAmbiguousGestureMultiplier()
    {
        return 2.0F;
    }

    public static long getDefaultActionModeHideDuration()
    {
        return 2000L;
    }

    public static int getDoubleTapMinTime()
    {
        return 40;
    }

    public static int getDoubleTapSlop()
    {
        return 100;
    }

    public static int getDoubleTapTimeout()
    {
        return 300;
    }

    public static int getEdgeSlop()
    {
        return 12;
    }

    public static int getFadingEdgeLength()
    {
        return 12;
    }

    public static long getGlobalActionKeyTimeout()
    {
        return 500L;
    }

    public static int getHoverTapSlop()
    {
        return 20;
    }

    public static int getHoverTapTimeout()
    {
        return 150;
    }

    public static int getHoverTooltipHideShortTimeout()
    {
        return 3000;
    }

    public static int getHoverTooltipHideTimeout()
    {
        return 15000;
    }

    public static int getHoverTooltipShowTimeout()
    {
        return 500;
    }

    public static int getJumpTapTimeout()
    {
        return 500;
    }

    public static int getKeyRepeatDelay()
    {
        return 50;
    }

    public static int getKeyRepeatTimeout()
    {
        int $i0;

        $i0 = staticinvoke <android.view.ViewConfiguration: int getLongPressTimeout()>();

        return $i0;
    }

    public static int getLongPressTimeout()
    {
        int $i0;

        $i0 = staticinvoke <android.app.AppGlobals: int getIntCoreSetting(java.lang.String,int)>("long_press_timeout", 400);

        return $i0;
    }

    public static int getLongPressTooltipHideTimeout()
    {
        return 1500;
    }

    public static int getMaximumDrawingCacheSize()
    {
        return 1536000;
    }

    public static int getMaximumFlingVelocity()
    {
        return 8000;
    }

    public static int getMinimumFlingVelocity()
    {
        return 50;
    }

    public static int getMultiPressTimeout()
    {
        int $i0;

        $i0 = staticinvoke <android.app.AppGlobals: int getIntCoreSetting(java.lang.String,int)>("multi_press_timeout", 300);

        return $i0;
    }

    public static int getPressedStateDuration()
    {
        return 64;
    }

    public static int getScrollBarFadeDuration()
    {
        return 250;
    }

    public static int getScrollBarSize()
    {
        return 4;
    }

    public static int getScrollDefaultDelay()
    {
        return 300;
    }

    public static float getScrollFriction()
    {
        return 0.015F;
    }

    public static long getSendRecurringAccessibilityEventsInterval()
    {
        return 100L;
    }

    public static int getTapTimeout()
    {
        return 100;
    }

    public static int getTouchSlop()
    {
        return 8;
    }

    public static int getWindowTouchSlop()
    {
        return 16;
    }

    public static long getZoomControlsTimeout()
    {
        return 3000L;
    }

    public long getAccessibilityShortcutKeyTimeout()
    {
        android.view.ViewConfiguration r0;

        r0 := @this: android.view.ViewConfiguration;

        return 3000L;
    }

    public long getAccessibilityShortcutKeyTimeoutAfterConfirmation()
    {
        android.view.ViewConfiguration r0;

        r0 := @this: android.view.ViewConfiguration;

        return 1000L;
    }

    public long getDeviceGlobalActionKeyTimeout()
    {
        android.view.ViewConfiguration r0;
        long $l0;

        r0 := @this: android.view.ViewConfiguration;

        $l0 = r0.<android.view.ViewConfiguration: long mGlobalActionsKeyTimeout>;

        return $l0;
    }

    public float getScaledAmbiguousGestureMultiplier()
    {
        android.view.ViewConfiguration r0;
        float $f0;

        r0 := @this: android.view.ViewConfiguration;

        $f0 = r0.<android.view.ViewConfiguration: float mAmbiguousGestureMultiplier>;

        return $f0;
    }

    public int getScaledDoubleTapSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mDoubleTapSlop>;

        return $i0;
    }

    public int getScaledDoubleTapTouchSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mDoubleTapTouchSlop>;

        return $i0;
    }

    public int getScaledEdgeSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mEdgeSlop>;

        return $i0;
    }

    public int getScaledFadingEdgeLength()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mFadingEdgeLength>;

        return $i0;
    }

    public float getScaledHorizontalScrollFactor()
    {
        android.view.ViewConfiguration r0;
        float $f0;

        r0 := @this: android.view.ViewConfiguration;

        $f0 = r0.<android.view.ViewConfiguration: float mHorizontalScrollFactor>;

        return $f0;
    }

    public int getScaledHoverSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mHoverSlop>;

        return $i0;
    }

    public int getScaledMaximumDrawingCacheSize()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mMaximumDrawingCacheSize>;

        return $i0;
    }

    public int getScaledMaximumFlingVelocity()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mMaximumFlingVelocity>;

        return $i0;
    }

    public int getScaledMinScrollbarTouchTarget()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mMinScrollbarTouchTarget>;

        return $i0;
    }

    public int getScaledMinimumFlingVelocity()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mMinimumFlingVelocity>;

        return $i0;
    }

    public int getScaledMinimumScalingSpan()
    {
        android.view.ViewConfiguration r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $z0 = r0.<android.view.ViewConfiguration: boolean mConstructedWithContext>;

        if $z0 == 0 goto label1;

        $i0 = r0.<android.view.ViewConfiguration: int mMinScalingSpan>;

        return $i0;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Min scaling span cannot be determined when this method is called on a ViewConfiguration that was instantiated using a constructor with no Context parameter");

        throw $r1;
    }

    public int getScaledOverflingDistance()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mOverflingDistance>;

        return $i0;
    }

    public int getScaledOverscrollDistance()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mOverscrollDistance>;

        return $i0;
    }

    public int getScaledPagingTouchSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mPagingTouchSlop>;

        return $i0;
    }

    public int getScaledScrollBarSize()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mScrollbarSize>;

        return $i0;
    }

    public int getScaledScrollFactor()
    {
        android.view.ViewConfiguration r0;
        float $f0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $f0 = r0.<android.view.ViewConfiguration: float mVerticalScrollFactor>;

        $i0 = (int) $f0;

        return $i0;
    }

    public int getScaledTouchSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mTouchSlop>;

        return $i0;
    }

    public float getScaledVerticalScrollFactor()
    {
        android.view.ViewConfiguration r0;
        float $f0;

        r0 := @this: android.view.ViewConfiguration;

        $f0 = r0.<android.view.ViewConfiguration: float mVerticalScrollFactor>;

        return $f0;
    }

    public int getScaledWindowTouchSlop()
    {
        android.view.ViewConfiguration r0;
        int $i0;

        r0 := @this: android.view.ViewConfiguration;

        $i0 = r0.<android.view.ViewConfiguration: int mWindowTouchSlop>;

        return $i0;
    }

    public long getScreenshotChordKeyTimeout()
    {
        android.view.ViewConfiguration r0;
        long $l0;

        r0 := @this: android.view.ViewConfiguration;

        $l0 = r0.<android.view.ViewConfiguration: long mScreenshotChordKeyTimeout>;

        return $l0;
    }

    public boolean hasPermanentMenuKey()
    {
        android.view.ViewConfiguration r0;
        boolean $z0;

        r0 := @this: android.view.ViewConfiguration;

        $z0 = r0.<android.view.ViewConfiguration: boolean sHasPermanentMenuKey>;

        return $z0;
    }

    public boolean isFadingMarqueeEnabled()
    {
        android.view.ViewConfiguration r0;
        boolean $z0;

        r0 := @this: android.view.ViewConfiguration;

        $z0 = r0.<android.view.ViewConfiguration: boolean mFadingMarqueeEnabled>;

        return $z0;
    }

    public boolean shouldShowMenuShortcutsWhenKeyboardPresent()
    {
        android.view.ViewConfiguration r0;
        boolean $z0;

        r0 := @this: android.view.ViewConfiguration;

        $z0 = r0.<android.view.ViewConfiguration: boolean mShowMenuShortcutsWhenKeyboardPresent>;

        return $z0;
    }
}
