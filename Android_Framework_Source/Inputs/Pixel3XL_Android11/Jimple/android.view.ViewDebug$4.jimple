class android.view.ViewDebug$4 extends java.lang.Object implements java.lang.Runnable
{
    final java.lang.Object[] val$args;
    final java.util.concurrent.atomic.AtomicReference val$exception;
    final java.util.concurrent.CountDownLatch val$latch;
    final java.lang.reflect.Method val$method;
    final java.util.concurrent.atomic.AtomicReference val$result;
    final android.view.View val$view;

    void <init>(java.util.concurrent.atomic.AtomicReference, java.lang.reflect.Method, android.view.View, java.lang.Object[], java.util.concurrent.atomic.AtomicReference, java.util.concurrent.CountDownLatch)
    {
        android.view.ViewDebug$4 r0;
        java.util.concurrent.atomic.AtomicReference r1, r5;
        java.lang.reflect.Method r2;
        android.view.View r3;
        java.lang.Object[] r4;
        java.util.concurrent.CountDownLatch r6;

        r0 := @this: android.view.ViewDebug$4;

        r1 := @parameter0: java.util.concurrent.atomic.AtomicReference;

        r2 := @parameter1: java.lang.reflect.Method;

        r3 := @parameter2: android.view.View;

        r4 := @parameter3: java.lang.Object[];

        r5 := @parameter4: java.util.concurrent.atomic.AtomicReference;

        r6 := @parameter5: java.util.concurrent.CountDownLatch;

        r0.<android.view.ViewDebug$4: java.util.concurrent.atomic.AtomicReference val$result> = r1;

        r0.<android.view.ViewDebug$4: java.lang.reflect.Method val$method> = r2;

        r0.<android.view.ViewDebug$4: android.view.View val$view> = r3;

        r0.<android.view.ViewDebug$4: java.lang.Object[] val$args> = r4;

        r0.<android.view.ViewDebug$4: java.util.concurrent.atomic.AtomicReference val$exception> = r5;

        r0.<android.view.ViewDebug$4: java.util.concurrent.CountDownLatch val$latch> = r6;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void run()
    {
        android.view.ViewDebug$4 r0;
        java.lang.Object[] $r1;
        android.view.View $r2;
        java.lang.reflect.Method $r3;
        java.util.concurrent.atomic.AtomicReference $r4, $r7, $r9;
        java.lang.Object $r5;
        java.lang.Exception $r6;
        java.lang.Throwable $r8, $r10;
        java.util.concurrent.CountDownLatch $r13;
        java.lang.reflect.InvocationTargetException r14;

        r0 := @this: android.view.ViewDebug$4;

     label1:
        $r4 = r0.<android.view.ViewDebug$4: java.util.concurrent.atomic.AtomicReference val$result>;

        $r3 = r0.<android.view.ViewDebug$4: java.lang.reflect.Method val$method>;

        $r2 = r0.<android.view.ViewDebug$4: android.view.View val$view>;

        $r1 = r0.<android.view.ViewDebug$4: java.lang.Object[] val$args>;

        $r5 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r2, $r1);

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r5);

     label2:
        goto label5;

     label3:
        $r6 := @caughtexception;

        $r7 = r0.<android.view.ViewDebug$4: java.util.concurrent.atomic.AtomicReference val$exception>;

        virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r6);

        goto label5;

     label4:
        $r8 := @caughtexception;

        $r9 = r0.<android.view.ViewDebug$4: java.util.concurrent.atomic.AtomicReference val$exception>;

        r14 = (java.lang.reflect.InvocationTargetException) $r8;

        $r10 = virtualinvoke r14.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>();

        virtualinvoke $r9.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>($r10);

     label5:
        $r13 = r0.<android.view.ViewDebug$4: java.util.concurrent.CountDownLatch val$latch>;

        virtualinvoke $r13.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

        catch java.lang.reflect.InvocationTargetException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label3;
    }
}
