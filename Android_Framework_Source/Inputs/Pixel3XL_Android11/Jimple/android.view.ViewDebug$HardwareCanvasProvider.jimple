public class android.view.ViewDebug$HardwareCanvasProvider extends java.lang.Object implements android.view.ViewDebug$CanvasProvider
{
    private android.graphics.Picture mPicture;

    public void <init>()
    {
        android.view.ViewDebug$HardwareCanvasProvider r0;

        r0 := @this: android.view.ViewDebug$HardwareCanvasProvider;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public android.graphics.Bitmap createBitmap()
    {
        android.view.ViewDebug$HardwareCanvasProvider r0;
        android.graphics.Picture $r1, $r2;
        android.graphics.Bitmap $r3;

        r0 := @this: android.view.ViewDebug$HardwareCanvasProvider;

        $r1 = r0.<android.view.ViewDebug$HardwareCanvasProvider: android.graphics.Picture mPicture>;

        virtualinvoke $r1.<android.graphics.Picture: void endRecording()>();

        $r2 = r0.<android.view.ViewDebug$HardwareCanvasProvider: android.graphics.Picture mPicture>;

        $r3 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)>($r2);

        return $r3;
    }

    public android.graphics.Canvas getCanvas(android.view.View, int, int)
    {
        android.view.ViewDebug$HardwareCanvasProvider r0;
        int i0, i1;
        android.graphics.Picture $r1;
        android.graphics.Canvas $r2;
        android.view.View r3;

        r0 := @this: android.view.ViewDebug$HardwareCanvasProvider;

        r3 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new android.graphics.Picture;

        specialinvoke $r1.<android.graphics.Picture: void <init>()>();

        r0.<android.view.ViewDebug$HardwareCanvasProvider: android.graphics.Picture mPicture> = $r1;

        $r2 = virtualinvoke $r1.<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>(i0, i1);

        return $r2;
    }
}
