class android.view.ViewDebug$PictureCallbackHandler extends java.lang.Object implements java.lang.AutoCloseable, android.graphics.HardwareRenderer$PictureCapturedCallback, java.lang.Runnable
{
    private final java.util.function.Function mCallback;
    private final java.util.concurrent.Executor mExecutor;
    private final java.util.concurrent.locks.ReentrantLock mLock;
    private final java.util.ArrayDeque mQueue;
    private java.lang.Thread mRenderThread;
    private final android.graphics.HardwareRenderer mRenderer;
    private boolean mStopListening;

    private void <init>(android.graphics.HardwareRenderer, java.util.function.Function, java.util.concurrent.Executor)
    {
        android.view.ViewDebug$PictureCallbackHandler r0;
        android.graphics.HardwareRenderer r1;
        java.util.function.Function r2;
        java.util.concurrent.Executor r3;
        java.util.concurrent.locks.ReentrantLock $r4;
        java.util.ArrayDeque $r5;

        r0 := @this: android.view.ViewDebug$PictureCallbackHandler;

        r1 := @parameter0: android.graphics.HardwareRenderer;

        r2 := @parameter1: java.util.function.Function;

        r3 := @parameter2: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(0);

        r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock> = $r4;

        $r5 = new java.util.ArrayDeque;

        specialinvoke $r5.<java.util.ArrayDeque: void <init>(int)>(3);

        r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.ArrayDeque mQueue> = $r5;

        r0.<android.view.ViewDebug$PictureCallbackHandler: android.graphics.HardwareRenderer mRenderer> = r1;

        r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.function.Function mCallback> = r2;

        r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.concurrent.Executor mExecutor> = r3;

        virtualinvoke r1.<android.graphics.HardwareRenderer: void setPictureCaptureCallback(android.graphics.HardwareRenderer$PictureCapturedCallback)>(r0);

        return;
    }

    void <init>(android.graphics.HardwareRenderer, java.util.function.Function, java.util.concurrent.Executor, android.view.ViewDebug$1)
    {
        android.view.ViewDebug$PictureCallbackHandler r0;
        android.graphics.HardwareRenderer r1;
        java.util.function.Function r2;
        java.util.concurrent.Executor r3;
        android.view.ViewDebug$1 r4;

        r0 := @this: android.view.ViewDebug$PictureCallbackHandler;

        r1 := @parameter0: android.graphics.HardwareRenderer;

        r2 := @parameter1: java.util.function.Function;

        r3 := @parameter2: java.util.concurrent.Executor;

        r4 := @parameter3: android.view.ViewDebug$1;

        specialinvoke r0.<android.view.ViewDebug$PictureCallbackHandler: void <init>(android.graphics.HardwareRenderer,java.util.function.Function,java.util.concurrent.Executor)>(r1, r2, r3);

        return;
    }

    public void close()
    {
        android.view.ViewDebug$PictureCallbackHandler r0;
        java.util.concurrent.locks.ReentrantLock $r1, $r2;
        android.graphics.HardwareRenderer $r3;

        r0 := @this: android.view.ViewDebug$PictureCallbackHandler;

        $r1 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        r0.<android.view.ViewDebug$PictureCallbackHandler: boolean mStopListening> = 1;

        $r2 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r3 = r0.<android.view.ViewDebug$PictureCallbackHandler: android.graphics.HardwareRenderer mRenderer>;

        virtualinvoke $r3.<android.graphics.HardwareRenderer: void setPictureCaptureCallback(android.graphics.HardwareRenderer$PictureCapturedCallback)>(null);

        return;
    }

    public void onPictureCaptured(android.graphics.Picture)
    {
        android.view.ViewDebug$PictureCallbackHandler r0;
        android.graphics.Picture r1, r13;
        java.util.concurrent.locks.ReentrantLock $r2, $r6, $r11;
        boolean $z0;
        java.lang.Thread $r3, $r10;
        java.util.ArrayDeque $r4, $r5, $r8;
        int $i0;
        java.util.concurrent.Executor $r7;
        java.lang.Object $r9;
        android.graphics.HardwareRenderer $r12;

        r0 := @this: android.view.ViewDebug$PictureCallbackHandler;

        r1 := @parameter0: android.graphics.Picture;

        $r2 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        $z0 = r0.<android.view.ViewDebug$PictureCallbackHandler: boolean mStopListening>;

        if $z0 == 0 goto label1;

        $r11 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r11.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r12 = r0.<android.view.ViewDebug$PictureCallbackHandler: android.graphics.HardwareRenderer mRenderer>;

        virtualinvoke $r12.<android.graphics.HardwareRenderer: void setPictureCaptureCallback(android.graphics.HardwareRenderer$PictureCapturedCallback)>(null);

        return;

     label1:
        $r3 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.lang.Thread mRenderThread>;

        if $r3 != null goto label2;

        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<android.view.ViewDebug$PictureCallbackHandler: java.lang.Thread mRenderThread> = $r10;

     label2:
        r13 = null;

        $r4 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.ArrayDeque mQueue>;

        $i0 = virtualinvoke $r4.<java.util.ArrayDeque: int size()>();

        if $i0 != 3 goto label3;

        $r8 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.ArrayDeque mQueue>;

        $r9 = virtualinvoke $r8.<java.util.ArrayDeque: java.lang.Object removeLast()>();

        r13 = (android.graphics.Picture) $r9;

     label3:
        $r5 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.ArrayDeque mQueue>;

        virtualinvoke $r5.<java.util.ArrayDeque: boolean add(java.lang.Object)>(r1);

        $r6 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        if r13 != null goto label4;

        $r7 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.concurrent.Executor mExecutor>;

        interfaceinvoke $r7.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r0);

        goto label5;

     label4:
        virtualinvoke r13.<android.graphics.Picture: void close()>();

     label5:
        return;
    }

    public void run()
    {
        android.view.ViewDebug$PictureCallbackHandler r0;
        android.graphics.Picture r1;
        boolean z0, $z1;
        java.util.concurrent.locks.ReentrantLock $r2, $r5;
        java.util.ArrayDeque $r3;
        java.lang.Object $r4, $r10;
        java.lang.Thread $r6, $r7;
        java.lang.IllegalStateException $r8;
        java.util.function.Function $r9;
        java.lang.Boolean $r11;

        r0 := @this: android.view.ViewDebug$PictureCallbackHandler;

        $r2 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        $r3 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.ArrayDeque mQueue>;

        $r4 = virtualinvoke $r3.<java.util.ArrayDeque: java.lang.Object poll()>();

        r1 = (android.graphics.Picture) $r4;

        z0 = r0.<android.view.ViewDebug$PictureCallbackHandler: boolean mStopListening>;

        $r5 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.lang.Thread mRenderThread>;

        if $r6 == $r7 goto label3;

        if z0 == 0 goto label1;

        virtualinvoke r1.<android.graphics.Picture: void close()>();

        return;

     label1:
        $r9 = r0.<android.view.ViewDebug$PictureCallbackHandler: java.util.function.Function mCallback>;

        $r10 = interfaceinvoke $r9.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r1);

        $r11 = (java.lang.Boolean) $r10;

        $z1 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>();

        if $z1 != 0 goto label2;

        virtualinvoke r0.<android.view.ViewDebug$PictureCallbackHandler: void close()>();

     label2:
        return;

     label3:
        virtualinvoke r0.<android.view.ViewDebug$PictureCallbackHandler: void close()>();

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ViewDebug#startRenderingCommandsCapture must be given an executor that invokes asynchronously");

        throw $r8;
    }
}
