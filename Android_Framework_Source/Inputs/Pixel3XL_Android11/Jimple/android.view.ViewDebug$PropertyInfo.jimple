abstract class android.view.ViewDebug$PropertyInfo extends java.lang.Object
{
    public java.lang.String entrySuffix;
    public final java.lang.reflect.AccessibleObject member;
    public final java.lang.String name;
    public final java.lang.'annotation'.Annotation property;
    public final java.lang.Class returnType;
    public java.lang.String valueSuffix;

    void <init>(java.lang.Class, java.lang.reflect.AccessibleObject, java.lang.Class)
    {
        android.view.ViewDebug$PropertyInfo r0;
        java.lang.Class r1, r3;
        java.lang.reflect.AccessibleObject r2;
        java.lang.reflect.Member $r4;
        java.lang.String $r5;
        java.lang.'annotation'.Annotation $r6;

        r0 := @this: android.view.ViewDebug$PropertyInfo;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.reflect.AccessibleObject;

        r3 := @parameter2: java.lang.Class;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.ViewDebug$PropertyInfo: java.lang.String entrySuffix> = "";

        r0.<android.view.ViewDebug$PropertyInfo: java.lang.String valueSuffix> = "";

        r0.<android.view.ViewDebug$PropertyInfo: java.lang.reflect.AccessibleObject member> = r2;

        $r4 = (java.lang.reflect.Member) r2;

        $r5 = interfaceinvoke $r4.<java.lang.reflect.Member: java.lang.String getName()>();

        r0.<android.view.ViewDebug$PropertyInfo: java.lang.String name> = $r5;

        $r6 = virtualinvoke r2.<java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(r1);

        r0.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property> = $r6;

        r0.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType> = r3;

        return;
    }

    static android.view.ViewDebug$PropertyInfo forField(java.lang.reflect.Field, java.lang.Class)
    {
        java.lang.reflect.Field r0;
        java.lang.Class r1;
        boolean $z0;
        android.view.ViewDebug$FieldPI $r2;

        r0 := @parameter0: java.lang.reflect.Field;

        r1 := @parameter1: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.reflect.Field: boolean isAnnotationPresent(java.lang.Class)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        virtualinvoke r0.<java.lang.reflect.Field: void setAccessible(boolean)>(1);

        $r2 = new android.view.ViewDebug$FieldPI;

        specialinvoke $r2.<android.view.ViewDebug$FieldPI: void <init>(java.lang.reflect.Field,java.lang.Class)>(r0, r1);

        return $r2;
    }

    static android.view.ViewDebug$PropertyInfo forMethod(java.lang.reflect.Method, java.lang.Class)
    {
        java.lang.Class r0, $r1;
        int i0;
        java.lang.Class[] $r2;
        boolean $z0;
        android.view.ViewDebug$MethodPI $r3;
        java.lang.NoClassDefFoundError $r4;
        java.lang.reflect.Method r5;

        r5 := @parameter0: java.lang.reflect.Method;

        r0 := @parameter1: java.lang.Class;

     label1:
        $r1 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        if $r1 == class "Ljava/lang/Void;" goto label5;

        $r2 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof $r2;

     label2:
        if i0 == 0 goto label3;

        goto label5;

     label3:
        $z0 = virtualinvoke r5.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(r0);

        if $z0 != 0 goto label4;

        return null;

     label4:
        virtualinvoke r5.<java.lang.reflect.Method: void setAccessible(boolean)>(1);

        $r3 = new android.view.ViewDebug$MethodPI;

        specialinvoke $r3.<android.view.ViewDebug$MethodPI: void <init>(java.lang.reflect.Method,java.lang.Class)>(r5, r0);

        $r3.<android.view.ViewDebug$PropertyInfo: java.lang.String entrySuffix> = "()";

        $r3.<android.view.ViewDebug$PropertyInfo: java.lang.String valueSuffix> = ";";

        return $r3;

     label5:
        return null;

     label6:
        $r4 := @caughtexception;

        return null;

        catch java.lang.NoClassDefFoundError from label1 to label2 with label6;
    }

    public abstract java.lang.Object invoke(java.lang.Object) throws java.lang.Exception;
}
