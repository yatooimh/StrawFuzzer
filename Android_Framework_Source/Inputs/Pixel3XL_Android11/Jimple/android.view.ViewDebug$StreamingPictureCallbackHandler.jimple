class android.view.ViewDebug$StreamingPictureCallbackHandler extends java.lang.Object implements java.lang.AutoCloseable, android.graphics.HardwareRenderer$PictureCapturedCallback, java.lang.Runnable
{
    private final java.io.ByteArrayOutputStream mByteStream;
    private final java.util.concurrent.Callable mCallback;
    private final java.util.concurrent.Executor mExecutor;
    private final java.util.concurrent.locks.ReentrantLock mLock;
    private final java.util.ArrayDeque mQueue;
    private java.lang.Thread mRenderThread;
    private final android.graphics.HardwareRenderer mRenderer;
    private boolean mStopListening;

    private void <init>(android.graphics.HardwareRenderer, java.util.concurrent.Callable, java.util.concurrent.Executor)
    {
        android.view.ViewDebug$StreamingPictureCallbackHandler r0;
        android.graphics.HardwareRenderer r1;
        java.util.concurrent.Callable r2;
        java.util.concurrent.Executor r3;
        java.util.concurrent.locks.ReentrantLock $r4;
        java.util.ArrayDeque $r5;
        java.io.ByteArrayOutputStream $r6;

        r0 := @this: android.view.ViewDebug$StreamingPictureCallbackHandler;

        r1 := @parameter0: android.graphics.HardwareRenderer;

        r2 := @parameter1: java.util.concurrent.Callable;

        r3 := @parameter2: java.util.concurrent.Executor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.concurrent.locks.ReentrantLock;

        specialinvoke $r4.<java.util.concurrent.locks.ReentrantLock: void <init>(boolean)>(0);

        r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock> = $r4;

        $r5 = new java.util.ArrayDeque;

        specialinvoke $r5.<java.util.ArrayDeque: void <init>(int)>(3);

        r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.ArrayDeque mQueue> = $r5;

        $r6 = new java.io.ByteArrayOutputStream;

        specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>();

        r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.io.ByteArrayOutputStream mByteStream> = $r6;

        r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: android.graphics.HardwareRenderer mRenderer> = r1;

        r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.Callable mCallback> = r2;

        r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.Executor mExecutor> = r3;

        virtualinvoke r1.<android.graphics.HardwareRenderer: void setPictureCaptureCallback(android.graphics.HardwareRenderer$PictureCapturedCallback)>(r0);

        return;
    }

    void <init>(android.graphics.HardwareRenderer, java.util.concurrent.Callable, java.util.concurrent.Executor, android.view.ViewDebug$1)
    {
        android.view.ViewDebug$StreamingPictureCallbackHandler r0;
        android.graphics.HardwareRenderer r1;
        java.util.concurrent.Callable r2;
        java.util.concurrent.Executor r3;
        android.view.ViewDebug$1 r4;

        r0 := @this: android.view.ViewDebug$StreamingPictureCallbackHandler;

        r1 := @parameter0: android.graphics.HardwareRenderer;

        r2 := @parameter1: java.util.concurrent.Callable;

        r3 := @parameter2: java.util.concurrent.Executor;

        r4 := @parameter3: android.view.ViewDebug$1;

        specialinvoke r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: void <init>(android.graphics.HardwareRenderer,java.util.concurrent.Callable,java.util.concurrent.Executor)>(r1, r2, r3);

        return;
    }

    public void close()
    {
        android.view.ViewDebug$StreamingPictureCallbackHandler r0;
        java.util.concurrent.locks.ReentrantLock $r1, $r2;
        android.graphics.HardwareRenderer $r3;

        r0 := @this: android.view.ViewDebug$StreamingPictureCallbackHandler;

        $r1 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: boolean mStopListening> = 1;

        $r2 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r3 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: android.graphics.HardwareRenderer mRenderer>;

        virtualinvoke $r3.<android.graphics.HardwareRenderer: void setPictureCaptureCallback(android.graphics.HardwareRenderer$PictureCapturedCallback)>(null);

        return;
    }

    public void onPictureCaptured(android.graphics.Picture)
    {
        android.view.ViewDebug$StreamingPictureCallbackHandler r0;
        android.graphics.Picture r1;
        java.util.concurrent.locks.ReentrantLock $r2, $r10, $r15;
        boolean $z0, z2;
        java.lang.Thread $r3, $r14;
        java.util.ArrayDeque $r4, $r7, $r12;
        int $i0;
        java.io.ByteArrayOutputStream $r5, $r6, $r9;
        byte[] $r8;
        java.util.concurrent.Executor $r11;
        android.graphics.HardwareRenderer $r16;

        r0 := @this: android.view.ViewDebug$StreamingPictureCallbackHandler;

        r1 := @parameter0: android.graphics.Picture;

        $r2 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        $z0 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: boolean mStopListening>;

        if $z0 == 0 goto label1;

        $r15 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r15.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r16 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: android.graphics.HardwareRenderer mRenderer>;

        virtualinvoke $r16.<android.graphics.HardwareRenderer: void setPictureCaptureCallback(android.graphics.HardwareRenderer$PictureCapturedCallback)>(null);

        return;

     label1:
        $r3 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.lang.Thread mRenderThread>;

        if $r3 != null goto label2;

        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.lang.Thread mRenderThread> = $r14;

     label2:
        z2 = 1;

        $r4 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.ArrayDeque mQueue>;

        $i0 = virtualinvoke $r4.<java.util.ArrayDeque: int size()>();

        if $i0 != 3 goto label3;

        $r12 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.ArrayDeque mQueue>;

        virtualinvoke $r12.<java.util.ArrayDeque: java.lang.Object removeLast()>();

        z2 = 0;

     label3:
        $r5 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.io.ByteArrayOutputStream mByteStream>;

        virtualinvoke r1.<android.graphics.Picture: void writeToStream(java.io.OutputStream)>($r5);

        $r7 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.ArrayDeque mQueue>;

        $r6 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.io.ByteArrayOutputStream mByteStream>;

        $r8 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r7.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.io.ByteArrayOutputStream mByteStream>;

        virtualinvoke $r9.<java.io.ByteArrayOutputStream: void reset()>();

        $r10 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        if z2 == 0 goto label4;

        $r11 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.Executor mExecutor>;

        interfaceinvoke $r11.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r0);

     label4:
        return;
    }

    public void run()
    {
        android.view.ViewDebug$StreamingPictureCallbackHandler r0;
        byte[] r1;
        boolean z0;
        java.util.concurrent.locks.ReentrantLock $r2, $r5;
        java.util.ArrayDeque $r3;
        java.lang.Object $r4, $r10;
        java.lang.Thread $r6, $r7;
        java.lang.IllegalStateException $r8;
        java.util.concurrent.Callable $r9;
        java.lang.Throwable $r11;
        java.lang.Exception $r12;
        java.io.OutputStream r13, r14;

        r0 := @this: android.view.ViewDebug$StreamingPictureCallbackHandler;

        $r2 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        $r3 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.ArrayDeque mQueue>;

        $r4 = virtualinvoke $r3.<java.util.ArrayDeque: java.lang.Object poll()>();

        r1 = (byte[]) $r4;

        z0 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: boolean mStopListening>;

        $r5 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.locks.ReentrantLock mLock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r7 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.lang.Thread mRenderThread>;

        if $r6 == $r7 goto label11;

        if z0 == 0 goto label01;

        return;

     label01:
        r13 = null;

     label02:
        $r9 = r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: java.util.concurrent.Callable mCallback>;

        $r10 = interfaceinvoke $r9.<java.util.concurrent.Callable: java.lang.Object call()>();

        r14 = (java.io.OutputStream) $r10;

     label03:
        r13 = r14;

        goto label05;

     label04:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewDebug", "Aborting rendering commands capture because callback threw exception", $r12);

     label05:
        if r13 == null goto label09;

     label06:
        virtualinvoke r13.<java.io.OutputStream: void write(byte[])>(r1);

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewDebug", "Aborting rendering commands capture due to IOException writing to output stream", $r11);

        goto label07;

     label09:
        virtualinvoke r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: void close()>();

     label10:
        return;

     label11:
        virtualinvoke r0.<android.view.ViewDebug$StreamingPictureCallbackHandler: void close()>();

        $r8 = new java.lang.IllegalStateException;

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ViewDebug#startRenderingCommandsCapture must be given an executor that invokes asynchronously");

        throw $r8;

        catch java.lang.Exception from label02 to label03 with label04;
        catch java.io.IOException from label06 to label07 with label08;
    }
}
