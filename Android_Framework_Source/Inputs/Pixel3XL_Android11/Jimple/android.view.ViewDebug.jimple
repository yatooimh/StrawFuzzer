public class android.view.ViewDebug extends java.lang.Object
{
    private static final int CAPTURE_TIMEOUT;
    public static final boolean DEBUG_DRAG;
    public static final boolean DEBUG_POSITIONING;
    private static final java.lang.String REMOTE_COMMAND_CAPTURE;
    private static final java.lang.String REMOTE_COMMAND_CAPTURE_LAYERS;
    private static final java.lang.String REMOTE_COMMAND_DUMP;
    public static final java.lang.String REMOTE_COMMAND_DUMP_ENCODED;
    private static final java.lang.String REMOTE_COMMAND_DUMP_THEME;
    private static final java.lang.String REMOTE_COMMAND_INVALIDATE;
    private static final java.lang.String REMOTE_COMMAND_OUTPUT_DISPLAYLIST;
    private static final java.lang.String REMOTE_COMMAND_REQUEST_LAYOUT;
    private static final java.lang.String REMOTE_PROFILE;
    public static final boolean TRACE_HIERARCHY;
    public static final boolean TRACE_RECYCLER;
    private static java.util.HashMap sCapturedViewProperties;
    private static java.util.HashMap sExportProperties;

    public void <init>()
    {
        android.view.ViewDebug r0;

        r0 := @this: android.view.ViewDebug;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void cacheExportedProperties(java.lang.Class)
    {
        int i0, i1;
        java.lang.Class $r0, $r3, r4, r6;
        boolean $z0, $z1, $z2;
        java.lang.'annotation'.Annotation $r1;
        android.view.ViewDebug$ExportedProperty $r2;
        java.util.HashMap r5;
        android.view.ViewDebug$PropertyInfo[] r7;
        android.view.ViewDebug$PropertyInfo r8;

        r4 := @parameter0: java.lang.Class;

        r5 = <android.view.ViewDebug: java.util.HashMap sExportProperties>;

        r6 = r4;

        if r5 == null goto label1;

        r6 = r4;

        $z2 = virtualinvoke r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r4);

        if $z2 == 0 goto label1;

        return;

     label1:
        r7 = staticinvoke <android.view.ViewDebug: android.view.ViewDebug$PropertyInfo[] getExportedProperties(java.lang.Class)>(r6);

        i0 = lengthof r7;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        r8 = r7[i1];

        $r0 = r8.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType>;

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label3;

        $r1 = r8.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r2 = (android.view.ViewDebug$ExportedProperty) $r1;

        $z1 = interfaceinvoke $r2.<android.view.ViewDebug$ExportedProperty: boolean deepExport()>();

        if $z1 == 0 goto label3;

        $r3 = r8.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType>;

        staticinvoke <android.view.ViewDebug: void cacheExportedProperties(java.lang.Class)>($r3);

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        r6 = virtualinvoke r6.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r6 != class "Ljava/lang/Object;" goto label5;

        return;

     label5:
        goto label1;
    }

    private static void cacheExportedPropertiesForChildren(android.view.ViewGroup)
    {
        android.view.ViewGroup r0, $r3;
        int i0, i1;
        android.view.View r1;
        java.lang.Class $r2;
        boolean $z0;

        r0 := @parameter0: android.view.ViewGroup;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <android.view.ViewDebug: void cacheExportedProperties(java.lang.Class)>($r2);

        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        $r3 = (android.view.ViewGroup) r1;

        staticinvoke <android.view.ViewDebug: void cacheExportedPropertiesForChildren(android.view.ViewGroup)>($r3);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public static void capture(android.view.View, java.io.OutputStream, android.view.View) throws java.io.IOException
    {
        android.graphics.Bitmap$CompressFormat $r0;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;
        android.graphics.Bitmap$Config $r3;
        java.lang.Throwable $r4;
        android.view.View r5, r7;
        java.io.OutputStream r6;
        android.graphics.Bitmap r8, r9;
        java.io.BufferedOutputStream r10, r11;

        r5 := @parameter0: android.view.View;

        r6 := @parameter1: java.io.OutputStream;

        r7 := @parameter2: android.view.View;

        r8 = staticinvoke <android.view.ViewDebug: android.graphics.Bitmap performViewCapture(android.view.View,boolean)>(r7, 0);

        r9 = r8;

        if r8 != null goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "Failed to create capture bitmap!");

        $r1 = virtualinvoke r5.<android.view.View: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r9 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>($r2, 1, 1, $r3);

     label01:
        r10 = null;

     label02:
        r11 = new java.io.BufferedOutputStream;

     label03:
        r10 = null;

     label04:
        specialinvoke r11.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>(r6, 32768);

     label05:
        r10 = r11;

     label06:
        $r0 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke r9.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r0, 100, r11);

     label07:
        r10 = r11;

     label08:
        virtualinvoke r11.<java.io.BufferedOutputStream: void flush()>();

     label09:
        virtualinvoke r11.<java.io.BufferedOutputStream: void close()>();

        virtualinvoke r9.<android.graphics.Bitmap: void recycle()>();

        return;

     label10:
        $r4 := @caughtexception;

        if r10 == null goto label11;

        virtualinvoke r10.<java.io.BufferedOutputStream: void close()>();

     label11:
        virtualinvoke r9.<android.graphics.Bitmap: void recycle()>();

        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    private static void capture(android.view.View, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        android.view.View r0, $r3;
        java.io.OutputStream r1;
        java.lang.String r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.OutputStream;

        r2 := @parameter2: java.lang.String;

        $r3 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r0, r2);

        staticinvoke <android.view.ViewDebug: void capture(android.view.View,java.io.OutputStream,android.view.View)>(r0, r1, $r3);

        return;
    }

    public static void captureLayers(android.view.View, java.io.DataOutputStream) throws java.io.IOException
    {
        java.io.DataOutputStream r0;
        android.graphics.Rect r1;
        android.view.View$AttachInfo $r3, $r4;
        android.view.IWindow $r5;
        android.view.IWindowSession $r6;
        int $i0, $i1;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        android.view.View r9;

        r9 := @parameter0: android.view.View;

        r0 := @parameter1: java.io.DataOutputStream;

     label1:
        r1 = new android.graphics.Rect;

        specialinvoke r1.<android.graphics.Rect: void <init>()>();

     label2:
        $r3 = r9.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r3.<android.view.View$AttachInfo: android.view.IWindowSession mSession>;

        $r4 = r9.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.view.IWindow mWindow>;

        interfaceinvoke $r6.<android.view.IWindowSession: void getDisplayFrame(android.view.IWindow,android.graphics.Rect)>($r5, r1);

     label3:
        goto label5;

     label4:
        $r8 := @caughtexception;

     label5:
        $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        virtualinvoke r0.<java.io.DataOutputStream: void writeInt(int)>($i0);

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        virtualinvoke r0.<java.io.DataOutputStream: void writeInt(int)>($i1);

        staticinvoke <android.view.ViewDebug: void captureViewLayer(android.view.View,java.io.DataOutputStream,boolean)>(r9, r0, 1);

        virtualinvoke r0.<java.io.DataOutputStream: void write(int)>(2);

     label6:
        virtualinvoke r0.<java.io.DataOutputStream: void close()>();

        return;

     label7:
        $r7 := @caughtexception;

        virtualinvoke r0.<java.io.DataOutputStream: void close()>();

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label2 to label3 with label4;
        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private static void captureViewLayer(android.view.View, java.io.DataOutputStream, boolean) throws java.io.IOException
    {
        android.view.View r0, $r6;
        java.io.DataOutputStream r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i13;
        android.view.ViewOverlay $r3, $r4;
        android.view.ViewOverlay$OverlayViewGroup $r5;
        java.lang.Class $r7;
        java.io.ByteArrayOutputStream $r8;
        android.graphics.Bitmap$CompressFormat $r9;
        android.content.Context $r10;
        java.lang.Object $r11;
        boolean z1, z2, $z3;
        java.lang.String r12;
        byte b12;
        int[] r13;
        android.graphics.Bitmap r14;
        android.view.ViewGroup r15;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.DataOutputStream;

        z1 := @parameter2: boolean;

        $i1 = virtualinvoke r0.<android.view.View: int getVisibility()>();

        if $i1 != 0 goto label01;

        if z1 == 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        $i9 = r0.<android.view.View: int mPrivateFlags>;

        $i10 = $i9 & 128;

        if $i10 == 128 goto label07;

        i11 = virtualinvoke r0.<android.view.View: int getId()>();

        $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r12 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        if i11 == -1 goto label03;

        $r10 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $r11 = staticinvoke <android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>($r10, i11);

        r12 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

     label03:
        virtualinvoke r1.<java.io.DataOutputStream: void write(int)>(1);

        virtualinvoke r1.<java.io.DataOutputStream: void writeUTF(java.lang.String)>(r12);

        if z2 == 0 goto label04;

        b12 = 1;

        goto label05;

     label04:
        b12 = 0;

     label05:
        virtualinvoke r1.<java.io.DataOutputStream: void writeByte(int)>(b12);

        r13 = newarray (int)[2];

        virtualinvoke r0.<android.view.View: void getLocationInWindow(int[])>(r13);

        $i2 = r13[0];

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i2);

        $i3 = r13[1];

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i3);

        virtualinvoke r1.<java.io.DataOutputStream: void flush()>();

        r14 = staticinvoke <android.view.ViewDebug: android.graphics.Bitmap performViewCapture(android.view.View,boolean)>(r0, 1);

        if r14 == null goto label06;

        $r8 = new java.io.ByteArrayOutputStream;

        $i4 = virtualinvoke r14.<android.graphics.Bitmap: int getWidth()>();

        $i5 = virtualinvoke r14.<android.graphics.Bitmap: int getHeight()>();

        $i6 = $i4 * $i5;

        $i7 = $i6 * 2;

        specialinvoke $r8.<java.io.ByteArrayOutputStream: void <init>(int)>($i7);

        $r9 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat PNG>;

        virtualinvoke r14.<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>($r9, 100, $r8);

        $i8 = virtualinvoke $r8.<java.io.ByteArrayOutputStream: int size()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i8);

        virtualinvoke $r8.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r1);

     label06:
        virtualinvoke r1.<java.io.DataOutputStream: void flush()>();

     label07:
        $z3 = r0 instanceof android.view.ViewGroup;

        if $z3 == 0 goto label09;

        r15 = (android.view.ViewGroup) r0;

        i0 = virtualinvoke r15.<android.view.ViewGroup: int getChildCount()>();

        i13 = 0;

     label08:
        if i13 >= i0 goto label09;

        $r6 = virtualinvoke r15.<android.view.ViewGroup: android.view.View getChildAt(int)>(i13);

        staticinvoke <android.view.ViewDebug: void captureViewLayer(android.view.View,java.io.DataOutputStream,boolean)>($r6, r1, z2);

        i13 = i13 + 1;

        goto label08;

     label09:
        $r3 = r0.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r3 == null goto label10;

        $r4 = virtualinvoke r0.<android.view.View: android.view.ViewOverlay getOverlay()>();

        $r5 = $r4.<android.view.ViewOverlay: android.view.ViewOverlay$OverlayViewGroup mOverlayViewGroup>;

        staticinvoke <android.view.ViewDebug: void captureViewLayer(android.view.View,java.io.DataOutputStream,boolean)>($r5, r1, z2);

     label10:
        return;
    }

    private static android.view.ViewDebug$PropertyInfo[] convertToPropertyInfos(java.lang.reflect.Method[], java.lang.reflect.Field[], java.lang.Class)
    {
        java.lang.reflect.Method[] r0;
        java.lang.reflect.Field[] r1;
        java.lang.Class r2;
        java.util.stream.Stream[] $r3;
        java.util.stream.Stream $r4, $r6, $r7, $r9, $r10, $r12, $r14;
        java.util.function.Function $r11;
        android.view.'-$$Lambda$ViewDebug$nWDBN_NTdi-tDKEGiWZSUZui5DE' $r13;
        android.view.'-$$Lambda$ViewDebug$zYEykESfEZyxNAHOdqQtZB4owCQ' $r15;
        java.lang.Object[] $r16;
        android.view.ViewDebug$PropertyInfo[] $r17;
        android.view._$$Lambda$ViewDebug$oTD19EOl5NKuILAfG60mCu8jfBc r18;
        android.view._$$Lambda$ViewDebug$IfqgQtwO6dHcRW0fkYD_gr6jHow r19;
        java.util.function.Predicate r20;
        java.util.function.IntFunction r21;

        r0 := @parameter0: java.lang.reflect.Method[];

        r1 := @parameter1: java.lang.reflect.Field[];

        r2 := @parameter2: java.lang.Class;

        $r3 = newarray (java.util.stream.Stream)[2];

        $r4 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r0);

        r18 = new android.view._$$Lambda$ViewDebug$oTD19EOl5NKuILAfG60mCu8jfBc;

        specialinvoke r18.<android.view._$$Lambda$ViewDebug$oTD19EOl5NKuILAfG60mCu8jfBc: void <init>(java.lang.Class)>(r2);

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r18);

        $r3[0] = $r6;

        $r7 = staticinvoke <java.util.Arrays: java.util.stream.Stream stream(java.lang.Object[])>(r1);

        r19 = new android.view._$$Lambda$ViewDebug$IfqgQtwO6dHcRW0fkYD_gr6jHow;

        specialinvoke r19.<android.view._$$Lambda$ViewDebug$IfqgQtwO6dHcRW0fkYD_gr6jHow: void <init>(java.lang.Class)>(r2);

        $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>(r19);

        $r3[1] = $r9;

        $r10 = staticinvoke <java.util.stream.Stream: java.util.stream.Stream of(java.lang.Object[])>($r3);

        $r11 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();

        $r12 = interfaceinvoke $r10.<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>($r11);

        $r13 = <android.view._$$Lambda$ViewDebug$nWDBN_NTdi_tDKEGiWZSUZui5DE: android.view.'-$$Lambda$ViewDebug$nWDBN_NTdi-tDKEGiWZSUZui5DE' INSTANCE>;

        r20 = (java.util.function.Predicate) $r13;

        $r14 = interfaceinvoke $r12.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(r20);

        $r15 = <android.view._$$Lambda$ViewDebug$zYEykESfEZyxNAHOdqQtZB4owCQ: android.view.'-$$Lambda$ViewDebug$zYEykESfEZyxNAHOdqQtZB4owCQ' INSTANCE>;

        r21 = (java.util.function.IntFunction) $r15;

        $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>(r21);

        $r17 = (android.view.ViewDebug$PropertyInfo[]) $r16;

        return $r17;
    }

    static void dispatchCommand(android.view.View, java.lang.String, java.lang.String, java.io.OutputStream) throws java.io.IOException
    {
        java.lang.String r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, r18;
        java.io.OutputStream r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        java.io.DataOutputStream $r16;
        android.view.View r17, r19;
        java.lang.String[] r20;

        r17 := @parameter0: android.view.View;

        r0 := @parameter1: java.lang.String;

        r18 := @parameter2: java.lang.String;

        r1 := @parameter3: java.io.OutputStream;

        r19 = virtualinvoke r17.<android.view.View: android.view.View getRootView()>();

        $r2 = "DUMP";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z0 == 0 goto label1;

        staticinvoke <android.view.ViewDebug: void dump(android.view.View,boolean,boolean,java.io.OutputStream)>(r19, 0, 1, r1);

        goto label9;

     label1:
        $r3 = "DUMP_THEME";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z1 == 0 goto label2;

        staticinvoke <android.view.ViewDebug: void dumpTheme(android.view.View,java.io.OutputStream)>(r19, r1);

        goto label9;

     label2:
        $r4 = "DUMP_ENCODED";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z2 == 0 goto label3;

        staticinvoke <android.view.ViewDebug: void dumpEncoded(android.view.View,java.io.OutputStream)>(r19, r1);

        goto label9;

     label3:
        $r5 = "CAPTURE_LAYERS";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z3 == 0 goto label4;

        $r16 = new java.io.DataOutputStream;

        specialinvoke $r16.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r1);

        staticinvoke <android.view.ViewDebug: void captureLayers(android.view.View,java.io.DataOutputStream)>(r19, $r16);

        goto label9;

     label4:
        r20 = virtualinvoke r18.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $r6 = "CAPTURE";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z4 == 0 goto label5;

        $r15 = r20[0];

        staticinvoke <android.view.ViewDebug: void capture(android.view.View,java.io.OutputStream,java.lang.String)>(r19, r1, $r15);

        goto label9;

     label5:
        $r7 = "OUTPUT_DISPLAYLIST";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z5 == 0 goto label6;

        $r14 = r20[0];

        staticinvoke <android.view.ViewDebug: void outputDisplayList(android.view.View,java.lang.String)>(r19, $r14);

        goto label9;

     label6:
        $r8 = "INVALIDATE";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z6 == 0 goto label7;

        $r13 = r20[0];

        staticinvoke <android.view.ViewDebug: void invalidate(android.view.View,java.lang.String)>(r19, $r13);

        goto label9;

     label7:
        $r9 = "REQUEST_LAYOUT";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z7 == 0 goto label8;

        $r12 = r20[0];

        staticinvoke <android.view.ViewDebug: void requestLayout(android.view.View,java.lang.String)>(r19, $r12);

        goto label9;

     label8:
        $r10 = "PROFILE";

        $z8 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r0);

        if $z8 == 0 goto label9;

        $r11 = r20[0];

        staticinvoke <android.view.ViewDebug: void profile(android.view.View,java.io.OutputStream,java.lang.String)>(r19, r1, $r11);

     label9:
        return;
    }

    public static void dump(android.view.View, boolean, boolean, java.io.OutputStream) throws java.io.IOException
    {
        boolean z0, z1, $z2;
        java.io.BufferedWriter r0, r7, r8, r9;
        java.io.OutputStreamWriter r1;
        android.content.Context $r2;
        java.lang.Throwable $r3;
        java.lang.Exception $r4;
        android.view.View r5, r10;
        java.io.OutputStream r6;
        android.view.ViewGroup r11;

        r5 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r6 := @parameter3: java.io.OutputStream;

        r7 = null;

        r8 = null;

     label01:
        r0 = new java.io.BufferedWriter;

     label02:
        r7 = null;

        r8 = null;

     label03:
        r1 = new java.io.OutputStreamWriter;

     label04:
        r7 = null;

        r8 = null;

     label05:
        specialinvoke r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r6, "utf-8");

     label06:
        r7 = null;

        r8 = null;

     label07:
        specialinvoke r0.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>(r1, 32768);

     label08:
        r9 = r0;

        r7 = r0;

        r8 = r0;

     label09:
        r10 = virtualinvoke r5.<android.view.View: android.view.View getRootView()>();

     label10:
        r7 = r0;

        r8 = r0;

     label11:
        $z2 = r10 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label16;

     label12:
        r7 = r0;

        r8 = r0;

     label13:
        r11 = (android.view.ViewGroup) r10;

     label14:
        r7 = r0;

        r8 = r0;

     label15:
        $r2 = virtualinvoke r11.<android.view.ViewGroup: android.content.Context getContext()>();

        staticinvoke <android.view.ViewDebug: void dumpViewHierarchy(android.content.Context,android.view.ViewGroup,java.io.BufferedWriter,int,boolean,boolean)>($r2, r11, r0, 0, z0, z1);

     label16:
        r7 = r0;

        r8 = r0;

     label17:
        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>("DONE.");

     label18:
        r7 = r0;

        r8 = r0;

     label19:
        virtualinvoke r0.<java.io.BufferedWriter: void newLine()>();

     label20:
        virtualinvoke r9.<java.io.BufferedWriter: void close()>();

        goto label25;

     label21:
        $r3 := @caughtexception;

        goto label26;

     label22:
        $r4 := @caughtexception;

        r7 = r8;

     label23:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Problem dumping the view:", $r4);

     label24:
        if r8 == null goto label25;

        r9 = r8;

        goto label20;

     label25:
        return;

     label26:
        if r7 == null goto label27;

        virtualinvoke r7.<java.io.BufferedWriter: void close()>();

     label27:
        throw $r3;

        catch java.lang.Exception from label01 to label02 with label22;
        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Exception from label03 to label04 with label22;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Exception from label05 to label06 with label22;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Exception from label07 to label08 with label22;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Exception from label09 to label10 with label22;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Exception from label11 to label12 with label22;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Exception from label13 to label14 with label22;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Exception from label15 to label16 with label22;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Exception from label17 to label18 with label22;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.lang.Exception from label19 to label20 with label22;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label23 to label24 with label21;
    }

    public static void dumpCapturedView(java.lang.String, java.lang.Object)
    {
        java.lang.String r0, $r4, $r8, $r9, $r11;
        java.lang.Object r1;
        java.lang.Class r2;
        java.lang.StringBuilder $r3, $r7;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r7 = new java.lang.StringBuilder;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>($r8);

        $r9 = staticinvoke <android.view.ViewDebug: java.lang.String exportCapturedViewProperties(java.lang.Object,java.lang.Class,java.lang.String)>(r1, r2, "");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r0, $r11);

        return;
    }

    private static void dumpEncoded(android.view.View, java.io.OutputStream) throws java.io.IOException
    {
        android.view.View r0;
        java.io.OutputStream r1;
        java.io.ByteArrayOutputStream $r4;
        android.view.ViewHierarchyEncoder $r5;
        android.view.View$AttachInfo $r6, $r7;
        int $i0, $i1;
        byte[] $r8;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.OutputStream;

        $r4 = new java.io.ByteArrayOutputStream;

        specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>();

        $r5 = new android.view.ViewHierarchyEncoder;

        specialinvoke $r5.<android.view.ViewHierarchyEncoder: void <init>(java.io.ByteArrayOutputStream)>($r4);

        virtualinvoke $r5.<android.view.ViewHierarchyEncoder: void setUserPropertiesEnabled(boolean)>(0);

        $r6 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r6.<android.view.View$AttachInfo: int mWindowLeft>;

        virtualinvoke $r5.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("window:left", $i0);

        $r7 = r0.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        $i1 = $r7.<android.view.View$AttachInfo: int mWindowTop>;

        virtualinvoke $r5.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("window:top", $i1);

        virtualinvoke r0.<android.view.View: void encode(android.view.ViewHierarchyEncoder)>($r5);

        virtualinvoke $r5.<android.view.ViewHierarchyEncoder: void endStream()>();

        $r8 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r8);

        return;
    }

    public static void dumpTheme(android.view.View, java.io.OutputStream) throws java.io.IOException
    {
        java.io.OutputStreamWriter r0;
        android.content.Context $r1, $r3;
        android.content.res.Resources $r2;
        android.content.res.Resources$Theme $r4;
        int $i0, $i1, i2;
        java.lang.String $r5, $r6, $r7, $r8, $r9;
        java.lang.Exception $r10;
        java.lang.Throwable $r11;
        android.view.View r12;
        java.io.OutputStream r13;
        java.io.BufferedWriter r14, r15, r16, r17;
        java.lang.String[] r18;
        java.lang.StringBuilder r19, r20;

        r12 := @parameter0: android.view.View;

        r13 := @parameter1: java.io.OutputStream;

        r14 = null;

        r15 = null;

     label01:
        r16 = new java.io.BufferedWriter;

     label02:
        r14 = null;

        r15 = null;

     label03:
        r0 = new java.io.OutputStreamWriter;

     label04:
        r14 = null;

        r15 = null;

     label05:
        specialinvoke r0.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>(r13, "utf-8");

     label06:
        r14 = null;

        r15 = null;

     label07:
        specialinvoke r16.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>(r0, 32768);

     label08:
        r17 = r16;

        r14 = r16;

        r15 = r16;

     label09:
        $r1 = virtualinvoke r12.<android.view.View: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke r12.<android.view.View: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        r18 = staticinvoke <android.view.ViewDebug: java.lang.String[] getStyleAttributesDump(android.content.res.Resources,android.content.res.Resources$Theme)>($r2, $r4);

     label10:
        if r18 == null goto label34;

        i2 = 0;

     label11:
        r14 = r16;

        r15 = r16;

     label12:
        $i0 = lengthof r18;

        if i2 >= $i0 goto label34;

     label13:
        $r5 = r18[i2];

        if $r5 == null goto label33;

        r14 = r16;

        r15 = r16;

     label14:
        r19 = new java.lang.StringBuilder;

     label15:
        r14 = r16;

        r15 = r16;

     label16:
        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

     label17:
        r14 = r16;

        r15 = r16;

     label18:
        $r6 = r18[i2];

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label19:
        r14 = r16;

        r15 = r16;

     label20:
        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label21:
        r14 = r16;

        r15 = r16;

     label22:
        $r7 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r16.<java.io.BufferedWriter: void write(java.lang.String)>($r7);

     label23:
        r14 = r16;

        r15 = r16;

     label24:
        r20 = new java.lang.StringBuilder;

     label25:
        r14 = r16;

        r15 = r16;

     label26:
        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

     label27:
        r14 = r16;

        r15 = r16;

     label28:
        $i1 = i2 + 1;

        $r8 = r18[$i1];

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label29:
        r14 = r16;

        r15 = r16;

     label30:
        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

     label31:
        r14 = r16;

        r15 = r16;

     label32:
        $r9 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r16.<java.io.BufferedWriter: void write(java.lang.String)>($r9);

     label33:
        i2 = i2 + 2;

        goto label11;

     label34:
        r14 = r16;

        r15 = r16;

     label35:
        virtualinvoke r16.<java.io.BufferedWriter: void write(java.lang.String)>("DONE.");

     label36:
        r14 = r16;

        r15 = r16;

     label37:
        virtualinvoke r16.<java.io.BufferedWriter: void newLine()>();

     label38:
        virtualinvoke r17.<java.io.BufferedWriter: void close()>();

        goto label43;

     label39:
        $r11 := @caughtexception;

        goto label44;

     label40:
        $r10 := @caughtexception;

        r14 = r15;

     label41:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Problem dumping View Theme:", $r10);

     label42:
        if r15 == null goto label43;

        r17 = r15;

        goto label38;

     label43:
        return;

     label44:
        if r14 == null goto label45;

        virtualinvoke r14.<java.io.BufferedWriter: void close()>();

     label45:
        throw $r11;

        catch java.lang.Exception from label01 to label02 with label40;
        catch java.lang.Throwable from label01 to label02 with label39;
        catch java.lang.Exception from label03 to label04 with label40;
        catch java.lang.Throwable from label03 to label04 with label39;
        catch java.lang.Exception from label05 to label06 with label40;
        catch java.lang.Throwable from label05 to label06 with label39;
        catch java.lang.Exception from label07 to label08 with label40;
        catch java.lang.Throwable from label07 to label08 with label39;
        catch java.lang.Exception from label09 to label10 with label40;
        catch java.lang.Throwable from label09 to label10 with label39;
        catch java.lang.Exception from label12 to label13 with label40;
        catch java.lang.Throwable from label12 to label13 with label39;
        catch java.lang.Exception from label14 to label15 with label40;
        catch java.lang.Throwable from label14 to label15 with label39;
        catch java.lang.Exception from label16 to label17 with label40;
        catch java.lang.Throwable from label16 to label17 with label39;
        catch java.lang.Exception from label18 to label19 with label40;
        catch java.lang.Throwable from label18 to label19 with label39;
        catch java.lang.Exception from label20 to label21 with label40;
        catch java.lang.Throwable from label20 to label21 with label39;
        catch java.lang.Exception from label22 to label23 with label40;
        catch java.lang.Throwable from label22 to label23 with label39;
        catch java.lang.Exception from label24 to label25 with label40;
        catch java.lang.Throwable from label24 to label25 with label39;
        catch java.lang.Exception from label26 to label27 with label40;
        catch java.lang.Throwable from label26 to label27 with label39;
        catch java.lang.Exception from label28 to label29 with label40;
        catch java.lang.Throwable from label28 to label29 with label39;
        catch java.lang.Exception from label30 to label31 with label40;
        catch java.lang.Throwable from label30 to label31 with label39;
        catch java.lang.Exception from label32 to label33 with label40;
        catch java.lang.Throwable from label32 to label33 with label39;
        catch java.lang.Exception from label35 to label36 with label40;
        catch java.lang.Throwable from label35 to label36 with label39;
        catch java.lang.Exception from label37 to label38 with label40;
        catch java.lang.Throwable from label37 to label38 with label39;
        catch java.lang.Throwable from label41 to label42 with label39;
    }

    private static boolean dumpView(android.content.Context, android.view.View, java.io.BufferedWriter, int, boolean)
    {
        android.view.View r0;
        java.io.BufferedWriter r1;
        int i0, $i1, i3;
        boolean z0, $z1;
        java.lang.String r2, $r4, r7;
        java.lang.Class $r3;
        java.lang.Throwable $r5;
        android.content.Context r6;

        r6 := @parameter0: android.content.Context;

        r0 := @parameter1: android.view.View;

        r1 := @parameter2: java.io.BufferedWriter;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        i3 = 0;

     label01:
        if i3 >= i0 goto label04;

     label02:
        virtualinvoke r1.<java.io.BufferedWriter: void write(int)>(32);

     label03:
        i3 = i3 + 1;

        goto label01;

     label04:
        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

     label05:
        r7 = r2;

     label06:
        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("android.view.ViewOverlay$OverlayViewGroup");

        if $z1 == 0 goto label08;

     label07:
        r7 = "ViewOverlay";

     label08:
        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>(r7);

        virtualinvoke r1.<java.io.BufferedWriter: void write(int)>(64);

        $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>($r4);

        virtualinvoke r1.<java.io.BufferedWriter: void write(int)>(32);

     label09:
        if z0 == 0 goto label11;

     label10:
        staticinvoke <android.view.ViewDebug: void dumpViewProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter)>(r6, r0, r1);

     label11:
        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

     label12:
        return 1;

     label13:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "Error while dumping hierarchy tree");

        return 0;

        catch java.io.IOException from label02 to label03 with label13;
        catch java.io.IOException from label04 to label05 with label13;
        catch java.io.IOException from label06 to label07 with label13;
        catch java.io.IOException from label08 to label09 with label13;
        catch java.io.IOException from label10 to label11 with label13;
        catch java.io.IOException from label11 to label12 with label13;
    }

    private static void dumpViewHierarchy(android.content.Context, android.view.ViewGroup, java.io.BufferedWriter, int, boolean, boolean)
    {
        java.io.BufferedWriter r0;
        int i0;
        boolean z0, z1;
        android.os.Handler r1, $r9, r16;
        java.lang.Class $r2;
        android.os.Looper $r3, $r4, $r10;
        java.util.concurrent.FutureTask $r5;
        android.view._$$Lambda$ViewDebug$bTxz__vo_V1ixs_gVm1TKHAK8HQ $r6;
        java.util.concurrent.TimeUnit $r7;
        java.lang.Throwable $r11, $r12;
        java.lang.RuntimeException $r13;
        android.content.Context r14;
        android.view.ViewGroup r15;
        android.os.Message r18;

        r14 := @parameter0: android.content.Context;

        r15 := @parameter1: android.view.ViewGroup;

        r0 := @parameter2: java.io.BufferedWriter;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $r2 = virtualinvoke r15.<java.lang.Object: java.lang.Class getClass()>();

        staticinvoke <android.view.ViewDebug: void cacheExportedProperties(java.lang.Class)>($r2);

        if z0 != 0 goto label1;

        staticinvoke <android.view.ViewDebug: void cacheExportedPropertiesForChildren(android.view.ViewGroup)>(r15);

     label1:
        r1 = virtualinvoke r15.<android.view.ViewGroup: android.os.Handler getHandler()>();

        r16 = r1;

        if r1 != null goto label2;

        $r9 = new android.os.Handler;

        $r10 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r9.<android.os.Handler: void <init>(android.os.Looper)>($r10);

        r16 = $r9;

     label2:
        $r3 = virtualinvoke r16.<android.os.Handler: android.os.Looper getLooper()>();

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r3 != $r4 goto label3;

        staticinvoke <android.view.ViewDebug: void dumpViewHierarchyOnUIThread(android.content.Context,android.view.ViewGroup,java.io.BufferedWriter,int,boolean,boolean)>(r14, r15, r0, i0, z0, z1);

        return;

     label3:
        $r5 = new java.util.concurrent.FutureTask;

        $r6 = new android.view._$$Lambda$ViewDebug$bTxz__vo_V1ixs_gVm1TKHAK8HQ;

        specialinvoke $r6.<android.view._$$Lambda$ViewDebug$bTxz__vo_V1ixs_gVm1TKHAK8HQ: void <init>(android.content.Context,android.view.ViewGroup,java.io.BufferedWriter,int,boolean,boolean)>(r14, r15, r0, i0, z0, z1);

        specialinvoke $r5.<java.util.concurrent.FutureTask: void <init>(java.lang.Runnable,java.lang.Object)>($r6, null);

        r18 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>(r16, $r5);

        virtualinvoke r18.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r16.<android.os.Handler: boolean sendMessage(android.os.Message)>(r18);

     label4:
        $r7 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r5.<java.util.concurrent.FutureTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>(6000L, $r7);

     label5:
        return;

     label6:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        throw $r13;

     label7:
        $r11 := @caughtexception;

        goto label4;

        catch java.lang.InterruptedException from label4 to label5 with label7;
        catch java.util.concurrent.ExecutionException from label4 to label5 with label6;
        catch java.util.concurrent.TimeoutException from label4 to label5 with label6;
    }

    private static void dumpViewHierarchyOnUIThread(android.content.Context, android.view.ViewGroup, java.io.BufferedWriter, int, boolean, boolean)
    {
        android.content.Context r0;
        android.view.ViewGroup r1, $r8;
        java.io.BufferedWriter r2;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        boolean z0, z1, $z2, $z3, $z4;
        android.view.View r3;
        android.view.ViewDebug$HierarchyHandler $r4;
        android.view.ViewOverlay $r5, $r6;
        android.view.ViewOverlay$OverlayViewGroup $r7;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.view.ViewGroup;

        r2 := @parameter2: java.io.BufferedWriter;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        $z2 = staticinvoke <android.view.ViewDebug: boolean dumpView(android.content.Context,android.view.View,java.io.BufferedWriter,int,boolean)>(r0, r1, r2, i0, z1);

        if $z2 != 0 goto label1;

        return;

     label1:
        if z0 == 0 goto label2;

        return;

     label2:
        i1 = virtualinvoke r1.<android.view.ViewGroup: int getChildCount()>();

        i6 = 0;

     label3:
        if i6 >= i1 goto label7;

        r3 = virtualinvoke r1.<android.view.ViewGroup: android.view.View getChildAt(int)>(i6);

        $z4 = r3 instanceof android.view.ViewGroup;

        if $z4 == 0 goto label4;

        $r8 = (android.view.ViewGroup) r3;

        $i5 = i0 + 1;

        staticinvoke <android.view.ViewDebug: void dumpViewHierarchyOnUIThread(android.content.Context,android.view.ViewGroup,java.io.BufferedWriter,int,boolean,boolean)>(r0, $r8, r2, $i5, z0, z1);

        goto label5;

     label4:
        $i3 = i0 + 1;

        staticinvoke <android.view.ViewDebug: boolean dumpView(android.content.Context,android.view.View,java.io.BufferedWriter,int,boolean)>(r0, r3, r2, $i3, z1);

     label5:
        $r5 = r3.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r5 == null goto label6;

        $r6 = virtualinvoke r3.<android.view.View: android.view.ViewOverlay getOverlay()>();

        $r7 = $r6.<android.view.ViewOverlay: android.view.ViewOverlay$OverlayViewGroup mOverlayViewGroup>;

        $i4 = i0 + 2;

        staticinvoke <android.view.ViewDebug: void dumpViewHierarchyOnUIThread(android.content.Context,android.view.ViewGroup,java.io.BufferedWriter,int,boolean,boolean)>(r0, $r7, r2, $i4, z0, z1);

     label6:
        i6 = i6 + 1;

        goto label3;

     label7:
        $z3 = r1 instanceof android.view.ViewDebug$HierarchyHandler;

        if $z3 == 0 goto label8;

        $r4 = (android.view.ViewDebug$HierarchyHandler) r1;

        $i2 = i0 + 1;

        interfaceinvoke $r4.<android.view.ViewDebug$HierarchyHandler: void dumpViewHierarchyWithProperties(java.io.BufferedWriter,int)>(r2, $i2);

     label8:
        return;
    }

    private static void dumpViewProperties(android.content.Context, java.lang.Object, java.io.BufferedWriter) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.Object r1;
        java.io.BufferedWriter r2;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.io.BufferedWriter;

        staticinvoke <android.view.ViewDebug: void dumpViewProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.String)>(r0, r1, r2, "");

        return;
    }

    private static void dumpViewProperties(android.content.Context, java.lang.Object, java.io.BufferedWriter, java.lang.String) throws java.io.IOException
    {
        java.lang.Object r0;
        java.io.BufferedWriter r1;
        java.lang.String r2, $r6;
        java.lang.StringBuilder $r3;
        android.content.Context r7;
        java.lang.Class r9;

        r7 := @parameter0: android.content.Context;

        r0 := @parameter1: java.lang.Object;

        r1 := @parameter2: java.io.BufferedWriter;

        r2 := @parameter3: java.lang.String;

        if r0 != null goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=4,null ");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>($r6);

        return;

     label1:
        r9 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

     label2:
        staticinvoke <android.view.ViewDebug: void writeExportedProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.Class,java.lang.String)>(r7, r0, r1, r9, r2);

        r9 = virtualinvoke r9.<java.lang.Class: java.lang.Class getSuperclass()>();

        if r9 != class "Ljava/lang/Object;" goto label3;

        return;

     label3:
        goto label2;
    }

    public static void dumpv2(android.view.View, java.io.ByteArrayOutputStream) throws java.lang.InterruptedException
    {
        android.view.View r0;
        android.view.ViewHierarchyEncoder $r2;
        java.util.concurrent.CountDownLatch $r3;
        android.view.ViewDebug$3 $r4;
        java.util.concurrent.TimeUnit $r5;
        java.io.ByteArrayOutputStream r6;

        r0 := @parameter0: android.view.View;

        r6 := @parameter1: java.io.ByteArrayOutputStream;

        $r2 = new android.view.ViewHierarchyEncoder;

        specialinvoke $r2.<android.view.ViewHierarchyEncoder: void <init>(java.io.ByteArrayOutputStream)>(r6);

        $r3 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r3.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r4 = new android.view.ViewDebug$3;

        specialinvoke $r4.<android.view.ViewDebug$3: void <init>(android.view.ViewHierarchyEncoder,android.view.View,java.util.concurrent.CountDownLatch)>($r2, r0, $r3);

        virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r4);

        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke $r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(2L, $r5);

        virtualinvoke $r2.<android.view.ViewHierarchyEncoder: void endStream()>();

        return;
    }

    private static java.lang.String exportCapturedViewProperties(java.lang.Object, java.lang.Class, java.lang.String)
    {
        java.lang.Object r0, r32;
        java.lang.String r1, $r7, $r11, $r13, $r17, $r20, $r21, $r23, $r26, $r27;
        int i0, i1;
        android.view.ViewDebug$PropertyInfo r3;
        java.lang.Class r4, r30;
        java.lang.StringBuilder r5, $r6;
        java.lang.'annotation'.Annotation $r8;
        android.view.ViewDebug$CapturedViewProperty $r9;
        boolean $z0;
        java.lang.Exception $r29;
        android.view.ViewDebug$PropertyInfo[] r31;

        r0 := @parameter0: java.lang.Object;

        r30 := @parameter1: java.lang.Class;

        r1 := @parameter2: java.lang.String;

        if r0 != null goto label01;

        return "null";

     label01:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        r31 = staticinvoke <android.view.ViewDebug: android.view.ViewDebug$PropertyInfo[] getCapturedViewProperties(java.lang.Class)>(r30);

        i0 = lengthof r31;

        i1 = 0;

     label02:
        if i1 >= i0 goto label14;

        r3 = r31[i1];

     label03:
        r32 = virtualinvoke r3.<android.view.ViewDebug$PropertyInfo: java.lang.Object invoke(java.lang.Object)>(r0);

        $r8 = r3.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r9 = (android.view.ViewDebug$CapturedViewProperty) $r8;

        $z0 = interfaceinvoke $r9.<android.view.ViewDebug$CapturedViewProperty: boolean retrieveReturn()>();

        if $z0 == 0 goto label05;

        r4 = r3.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType>;

        r5 = new java.lang.StringBuilder;

        specialinvoke r5.<java.lang.StringBuilder: void <init>()>();

        $r23 = r3.<android.view.ViewDebug$PropertyInfo: java.lang.String name>;

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#");

        $r26 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = staticinvoke <android.view.ViewDebug: java.lang.String exportCapturedViewProperties(java.lang.Object,java.lang.Class,java.lang.String)>(r32, r4, $r26);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

     label04:
        goto label11;

     label05:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r11 = r3.<android.view.ViewDebug$PropertyInfo: java.lang.String name>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = r3.<android.view.ViewDebug$PropertyInfo: java.lang.String entrySuffix>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

     label06:
        if r32 == null goto label09;

     label07:
        $r20 = virtualinvoke r32.<java.lang.Object: java.lang.String toString()>();

        $r21 = virtualinvoke $r20.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "\\n");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

     label08:
        goto label10;

     label09:
        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

     label10:
        $r17 = r3.<android.view.ViewDebug$PropertyInfo: java.lang.String valueSuffix>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

     label11:
        goto label13;

     label12:
        $r29 := @caughtexception;

     label13:
        i1 = i1 + 1;

        goto label02;

     label14:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

        catch java.lang.Exception from label03 to label04 with label12;
        catch java.lang.Exception from label05 to label06 with label12;
        catch java.lang.Exception from label07 to label08 with label12;
        catch java.lang.Exception from label09 to label10 with label12;
        catch java.lang.Exception from label10 to label11 with label12;
    }

    private static void exportUnrolledArray(android.content.Context, java.io.BufferedWriter, android.view.ViewDebug$ExportedProperty, int[], java.lang.String, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.io.BufferedWriter r1;
        int[] r2;
        java.lang.String r3, r4, r9, r10, r12, r14;
        android.view.ViewDebug$IntToString[] r5, r6;
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8, i9, i10;
        boolean $z0, z1, z2, z3;
        java.lang.Object $r7;
        android.view.ViewDebug$ExportedProperty r8;
        android.view.ViewDebug$IntToString r11, r13;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.io.BufferedWriter;

        r8 := @parameter2: android.view.ViewDebug$ExportedProperty;

        r2 := @parameter3: int[];

        r3 := @parameter4: java.lang.String;

        r4 := @parameter5: java.lang.String;

        r5 = interfaceinvoke r8.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] indexMapping()>();

        i5 = lengthof r5;

        if i5 <= 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        r6 = interfaceinvoke r8.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>();

        $i2 = lengthof r6;

        if $i2 <= 0 goto label03;

        z2 = 1;

        goto label04;

     label03:
        z2 = 0;

     label04:
        z3 = 0;

        $z0 = interfaceinvoke r8.<android.view.ViewDebug$ExportedProperty: boolean resolveId()>();

        if $z0 == 0 goto label05;

        z3 = 0;

        if r0 == null goto label05;

        z3 = 1;

     label05:
        i0 = lengthof r2;

        i6 = 0;

     label06:
        if i6 >= i0 goto label15;

        i1 = r2[i6];

        r9 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i6);

        r10 = r9;

        if z1 == 0 goto label09;

        i7 = lengthof r5;

        i8 = 0;

     label07:
        r10 = r9;

        if i8 >= i7 goto label09;

        r11 = r5[i8];

        $i4 = interfaceinvoke r11.<android.view.ViewDebug$IntToString: int 'from'()>();

        if $i4 != i6 goto label08;

        r10 = interfaceinvoke r11.<android.view.ViewDebug$IntToString: java.lang.String 'to'()>();

        goto label09;

     label08:
        i8 = i8 + 1;

        goto label07;

     label09:
        r12 = null;

        if z2 == 0 goto label12;

        i9 = lengthof r6;

        i10 = 0;

     label10:
        r12 = null;

        if i10 >= i9 goto label12;

        r13 = r6[i10];

        $i3 = interfaceinvoke r13.<android.view.ViewDebug$IntToString: int 'from'()>();

        if $i3 != i1 goto label11;

        r12 = interfaceinvoke r13.<android.view.ViewDebug$IntToString: java.lang.String 'to'()>();

        goto label12;

     label11:
        i10 = i10 + 1;

        goto label10;

     label12:
        if z3 == 0 goto label13;

        r14 = r12;

        if r12 != null goto label14;

        $r7 = staticinvoke <android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>(r0, i1);

        r14 = (java.lang.String) $r7;

        goto label14;

     label13:
        r14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

     label14:
        staticinvoke <android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r1, r3, r10, r4, r14);

        i6 = i6 + 1;

        goto label06;

     label15:
        return;
    }

    private static void exportUnrolledFlags(java.io.BufferedWriter, android.view.ViewDebug$FlagToString[], int, java.lang.String) throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        android.view.ViewDebug$FlagToString[] r1;
        int i0, i1, i2, $i3, $i4, i5;
        java.lang.String r2, $r4, $r5;
        android.view.ViewDebug$FlagToString r3;
        boolean z0, z1;

        r0 := @parameter0: java.io.BufferedWriter;

        r1 := @parameter1: android.view.ViewDebug$FlagToString[];

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        i1 = lengthof r1;

        i5 = 0;

     label1:
        if i5 >= i1 goto label7;

        r3 = r1[i5];

        z0 = interfaceinvoke r3.<android.view.ViewDebug$FlagToString: boolean outputIf()>();

        $i3 = interfaceinvoke r3.<android.view.ViewDebug$FlagToString: int mask()>();

        i2 = $i3 & i0;

        $i4 = interfaceinvoke r3.<android.view.ViewDebug$FlagToString: int equals()>();

        if i2 != $i4 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        if z1 == 0 goto label4;

        if z0 != 0 goto label5;

     label4:
        if z1 != 0 goto label6;

        if z0 != 0 goto label6;

     label5:
        $r4 = interfaceinvoke r3.<android.view.ViewDebug$FlagToString: java.lang.String name()>();

        $r5 = staticinvoke <android.view.ViewDebug: java.lang.String formatIntToHexString(int)>(i2);

        staticinvoke <android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r0, r2, $r4, "", $r5);

     label6:
        i5 = i5 + 1;

        goto label1;

     label7:
        return;
    }

    public static android.view.View findView(android.view.View, java.lang.String)
    {
        java.lang.String[] r0;
        int $i0, i2, i3;
        android.content.res.Resources $r1;
        android.view.View $r2, $r3, $r6, r7, r10;
        java.lang.String $r4, r8, r9;
        long $l1;
        boolean $z0;
        android.view.ViewGroup $r5;

        r7 := @parameter0: android.view.View;

        r8 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r8.<java.lang.String: int indexOf(int)>(64);

        if $i0 == -1 goto label2;

        r0 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>("@");

        r9 = r0[0];

        $r4 = r0[1];

        $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r4, 16);

        i2 = (int) $l1;

        r10 = virtualinvoke r7.<android.view.View: android.view.View getRootView()>();

        $z0 = r10 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r5 = (android.view.ViewGroup) r10;

        $r6 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.ViewGroup,java.lang.String,int)>($r5, r9, i2);

        return $r6;

     label1:
        return null;

     label2:
        $r1 = virtualinvoke r7.<android.view.View: android.content.res.Resources getResources()>();

        i3 = virtualinvoke $r1.<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>(r8, null, null);

        $r2 = virtualinvoke r7.<android.view.View: android.view.View getRootView()>();

        $r3 = virtualinvoke $r2.<android.view.View: android.view.View findViewById(int)>(i3);

        return $r3;
    }

    private static android.view.View findView(android.view.ViewGroup, java.lang.String, int)
    {
        android.view.ViewGroup r0, $r6;
        java.lang.String r1;
        int i0, i1, i2;
        boolean $z0, $z1, $z2, $z3;
        android.view.ViewOverlay $r2, $r4;
        android.view.ViewDebug$HierarchyHandler $r3;
        android.view.ViewOverlay$OverlayViewGroup $r5;
        android.view.View r7, r8, r9, r10;

        r0 := @parameter0: android.view.ViewGroup;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $z0 = staticinvoke <android.view.ViewDebug: boolean isRequestedView(android.view.View,java.lang.String,int)>(r0, r1, i0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i2 = 0;

     label2:
        if i2 >= i1 goto label8;

        r7 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        $z1 = r7 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label4;

        $r6 = (android.view.ViewGroup) r7;

        r8 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.ViewGroup,java.lang.String,int)>($r6, r1, i0);

        if r8 == null goto label3;

        return r8;

     label3:
        goto label5;

     label4:
        $z2 = staticinvoke <android.view.ViewDebug: boolean isRequestedView(android.view.View,java.lang.String,int)>(r7, r1, i0);

        if $z2 == 0 goto label5;

        return r7;

     label5:
        $r2 = r7.<android.view.View: android.view.ViewOverlay mOverlay>;

        if $r2 == null goto label6;

        $r4 = r7.<android.view.View: android.view.ViewOverlay mOverlay>;

        $r5 = $r4.<android.view.ViewOverlay: android.view.ViewOverlay$OverlayViewGroup mOverlayViewGroup>;

        r9 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.ViewGroup,java.lang.String,int)>($r5, r1, i0);

        if r9 == null goto label6;

        return r9;

     label6:
        $z3 = r7 instanceof android.view.ViewDebug$HierarchyHandler;

        if $z3 == 0 goto label7;

        $r3 = (android.view.ViewDebug$HierarchyHandler) r7;

        r10 = interfaceinvoke $r3.<android.view.ViewDebug$HierarchyHandler: android.view.View findHierarchyView(java.lang.String,int)>(r1, i0);

        if r10 == null goto label7;

        return r10;

     label7:
        i2 = i2 + 1;

        goto label2;

     label8:
        return null;
    }

    public static java.lang.String flagsToString(java.lang.Class, java.lang.String, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        android.view.ViewDebug$FlagToString r0;
        boolean z0, z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r2, $r4, $r7, r9;
        java.lang.Class r8;
        android.view.ViewDebug$FlagToString[] r10;

        r8 := @parameter0: java.lang.Class;

        r9 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r10 = staticinvoke <android.view.ViewDebug: android.view.ViewDebug$FlagToString[] getFlagMapping(java.lang.Class,java.lang.String)>(r8, r9);

        if r10 != null goto label1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        return $r7;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        i1 = lengthof r10;

        i8 = 0;

     label2:
        z1 = 1;

        if i8 >= i1 goto label6;

        r0 = r10[i8];

        z0 = interfaceinvoke r0.<android.view.ViewDebug$FlagToString: boolean outputIf()>();

        $i5 = interfaceinvoke r0.<android.view.ViewDebug$FlagToString: int mask()>();

        $i6 = $i5 & i0;

        $i7 = interfaceinvoke r0.<android.view.ViewDebug$FlagToString: int equals()>();

        if $i6 != $i7 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        if z1 == 0 goto label5;

        if z0 == 0 goto label5;

        $r4 = interfaceinvoke r0.<android.view.ViewDebug$FlagToString: java.lang.String name()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

     label5:
        i8 = i8 + 1;

        goto label2;

     label6:
        $i2 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        if $i2 <= 0 goto label7;

        $i3 = virtualinvoke $r1.<java.lang.StringBuilder: int length()>();

        $i4 = $i3 - 1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder deleteCharAt(int)>($i4);

     label7:
        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private static java.lang.String formatIntToHexString(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r4, $r6;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.String: java.lang.String toUpperCase()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private static android.view.ViewDebug$PropertyInfo[] getCapturedViewProperties(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.HashMap r1, $r3, $r8;
        android.view.ViewDebug$PropertyInfo[] r2, r9;
        java.lang.Object $r4;
        java.lang.reflect.Method[] $r5;
        java.lang.reflect.Field[] $r6;

        r0 := @parameter0: java.lang.Class;

        $r3 = <android.view.ViewDebug: java.util.HashMap sCapturedViewProperties>;

        if $r3 != null goto label1;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        <android.view.ViewDebug: java.util.HashMap sCapturedViewProperties> = $r8;

     label1:
        r1 = <android.view.ViewDebug: java.util.HashMap sCapturedViewProperties>;

        $r4 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (android.view.ViewDebug$PropertyInfo[]) $r4;

        r9 = r2;

        if r2 != null goto label2;

        $r5 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getMethods()>();

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getFields()>();

        r9 = staticinvoke <android.view.ViewDebug: android.view.ViewDebug$PropertyInfo[] convertToPropertyInfos(java.lang.reflect.Method[],java.lang.reflect.Field[],java.lang.Class)>($r5, $r6, class "Landroid/view/ViewDebug$CapturedViewProperty;");

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r9);

     label2:
        return r9;
    }

    private static android.view.ViewDebug$PropertyInfo[] getExportedProperties(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.HashMap r1, $r3, $r4, $r9;
        android.view.ViewDebug$PropertyInfo[] r2, r10;
        java.lang.Object $r5;
        java.lang.reflect.Method[] $r6;
        java.lang.reflect.Field[] $r7;

        r0 := @parameter0: java.lang.Class;

        $r3 = <android.view.ViewDebug: java.util.HashMap sExportProperties>;

        if $r3 != null goto label1;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        <android.view.ViewDebug: java.util.HashMap sExportProperties> = $r9;

     label1:
        r1 = <android.view.ViewDebug: java.util.HashMap sExportProperties>;

        $r4 = <android.view.ViewDebug: java.util.HashMap sExportProperties>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r0);

        r2 = (android.view.ViewDebug$PropertyInfo[]) $r5;

        r10 = r2;

        if r2 != null goto label2;

        $r6 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethodsUnchecked(boolean)>(0);

        $r7 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFieldsUnchecked(boolean)>(0);

        r10 = staticinvoke <android.view.ViewDebug: android.view.ViewDebug$PropertyInfo[] convertToPropertyInfos(java.lang.reflect.Method[],java.lang.reflect.Field[],java.lang.Class)>($r6, $r7, class "Landroid/view/ViewDebug$ExportedProperty;");

        virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r10);

     label2:
        return r10;
    }

    private static android.view.ViewDebug$FlagToString[] getFlagMapping(java.lang.Class, java.lang.String)
    {
        java.lang.String r0;
        java.lang.reflect.Field $r1;
        java.lang.'annotation'.Annotation $r2;
        android.view.ViewDebug$ExportedProperty $r3;
        java.lang.Throwable $r4;
        java.lang.Class r5;
        android.view.ViewDebug$FlagToString[] r6;

        r5 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.String;

     label1:
        $r1 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/view/ViewDebug$ExportedProperty;");

        $r3 = (android.view.ViewDebug$ExportedProperty) $r2;

        r6 = interfaceinvoke $r3.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>();

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
    }

    private static android.view.ViewDebug$IntToString[] getMapping(java.lang.Class, java.lang.String)
    {
        java.lang.String r0;
        java.lang.reflect.Field $r1;
        java.lang.'annotation'.Annotation $r2;
        android.view.ViewDebug$ExportedProperty $r3;
        java.lang.Throwable $r4;
        java.lang.Class r5;
        android.view.ViewDebug$IntToString[] r6;

        r5 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.String;

     label1:
        $r1 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Landroid/view/ViewDebug$ExportedProperty;");

        $r3 = (android.view.ViewDebug$ExportedProperty) $r2;

        r6 = interfaceinvoke $r3.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>();

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

        return null;

        catch java.lang.NoSuchFieldException from label1 to label2 with label3;
    }

    private static java.lang.String[] getStyleAttributesDump(android.content.res.Resources, android.content.res.Resources$Theme)
    {
        android.content.res.Resources r0;
        android.content.res.Resources$Theme r1;
        int[] r3;
        java.lang.String[] r4;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10;
        android.util.TypedValue $r5;
        java.lang.String $r6, $r7, r10;
        boolean $z0;
        java.lang.CharSequence $r8;
        android.content.res.Resources$NotFoundException $r9;

        r0 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: android.content.res.Resources$Theme;

        $r5 = new android.util.TypedValue;

        specialinvoke $r5.<android.util.TypedValue: void <init>()>();

        i8 = 0;

        r3 = virtualinvoke r1.<android.content.res.Resources$Theme: int[] getAllAttributes()>();

        $i2 = lengthof r3;

        $i3 = $i2 * 2;

        r4 = newarray (java.lang.String)[$i3];

        i0 = lengthof r3;

        i9 = 0;

     label01:
        if i9 >= i0 goto label16;

        i1 = r3[i9];

        i10 = i8;

     label02:
        $r6 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getResourceName(int)>(i1);

        r4[i8] = $r6;

     label03:
        i10 = i8;

     label04:
        $z0 = virtualinvoke r1.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(i1, $r5, 1);

        if $z0 == 0 goto label08;

     label05:
        i10 = i8;

     label06:
        $r8 = virtualinvoke $r5.<android.util.TypedValue: java.lang.CharSequence coerceToString()>();

        r10 = interfaceinvoke $r8.<java.lang.CharSequence: java.lang.String toString()>();

     label07:
        goto label09;

     label08:
        r10 = "null";

     label09:
        $i4 = i8 + 1;

        r4[$i4] = r10;

        i8 = i8 + 2;

        i10 = i8;

     label10:
        $i5 = $r5.<android.util.TypedValue: int type>;

        if $i5 != 1 goto label13;

     label11:
        i10 = i8;

     label12:
        $i7 = i8 - 1;

        $i6 = $r5.<android.util.TypedValue: int resourceId>;

        $r7 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getResourceName(int)>($i6);

        r4[$i7] = $r7;

     label13:
        goto label15;

     label14:
        $r9 := @caughtexception;

        i8 = i10;

     label15:
        i9 = i9 + 1;

        goto label01;

     label16:
        return r4;

        catch android.content.res.Resources$NotFoundException from label02 to label03 with label14;
        catch android.content.res.Resources$NotFoundException from label04 to label05 with label14;
        catch android.content.res.Resources$NotFoundException from label06 to label07 with label14;
        catch android.content.res.Resources$NotFoundException from label10 to label11 with label14;
        catch android.content.res.Resources$NotFoundException from label12 to label13 with label14;
    }

    public static long getViewInstanceCount()
    {
        long $l0;

        $l0 = staticinvoke <android.os.Debug: long countInstancesOfClass(java.lang.Class)>(class "Landroid/view/View;");

        return $l0;
    }

    public static long getViewRootImplCount()
    {
        long $l0;

        $l0 = staticinvoke <android.os.Debug: long countInstancesOfClass(java.lang.Class)>(class "Landroid/view/ViewRootImpl;");

        return $l0;
    }

    public static java.lang.String intToString(java.lang.Class, java.lang.String, int)
    {
        int i0, i1, $i2, i3;
        java.lang.String $r0, $r1, $r2, r4;
        java.lang.Class r3;
        android.view.ViewDebug$IntToString[] r5;
        android.view.ViewDebug$IntToString r6;

        r3 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r5 = staticinvoke <android.view.ViewDebug: android.view.ViewDebug$IntToString[] getMapping(java.lang.Class,java.lang.String)>(r3, r4);

        if r5 != null goto label1;

        $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r2;

     label1:
        i1 = lengthof r5;

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        r6 = r5[i3];

        $i2 = interfaceinvoke r6.<android.view.ViewDebug$IntToString: int 'from'()>();

        if $i2 != i0 goto label3;

        $r1 = interfaceinvoke r6.<android.view.ViewDebug$IntToString: java.lang.String 'to'()>();

        return $r1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;
    }

    private static void invalidate(android.view.View, java.lang.String)
    {
        java.lang.String r0;
        android.view.View r1, r2;

        r1 := @parameter0: android.view.View;

        r0 := @parameter1: java.lang.String;

        r2 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r1, r0);

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.View: void postInvalidate()>();

     label1:
        return;
    }

    public static java.lang.Object invokeViewMethod(android.view.View, java.lang.reflect.Method, java.lang.Object[])
    {
        java.lang.reflect.Method r0;
        java.lang.Object[] r1;
        java.util.concurrent.CountDownLatch $r5;
        java.util.concurrent.atomic.AtomicReference $r6, $r7;
        android.view.ViewDebug$4 $r8;
        java.lang.Object $r9, $r11, $r13;
        java.lang.RuntimeException $r10, $r15;
        java.lang.Throwable $r12, $r14;
        android.view.View r16;

        r16 := @parameter0: android.view.View;

        r0 := @parameter1: java.lang.reflect.Method;

        r1 := @parameter2: java.lang.Object[];

        $r5 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r5.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r6 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        $r7 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        $r8 = new android.view.ViewDebug$4;

        specialinvoke $r8.<android.view.ViewDebug$4: void <init>(java.util.concurrent.atomic.AtomicReference,java.lang.reflect.Method,android.view.View,java.lang.Object[],java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch)>($r6, r0, r16, r1, $r7, $r5);

        virtualinvoke r16.<android.view.View: boolean post(java.lang.Runnable)>($r8);

     label1:
        virtualinvoke $r5.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        $r9 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        if $r9 != null goto label3;

        $r13 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        return $r13;

     label3:
        $r10 = new java.lang.RuntimeException;

        $r11 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r12 = (java.lang.Throwable) $r11;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        throw $r10;

     label4:
        $r14 := @caughtexception;

        $r15 = new java.lang.RuntimeException;

        specialinvoke $r15.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r14);

        throw $r15;

        catch java.lang.InterruptedException from label1 to label2 with label4;
    }

    private static boolean isRequestedView(android.view.View, java.lang.String, int)
    {
        java.lang.String r0, r3;
        int i0, $i1;
        java.lang.Class $r1;
        boolean $z0, $z1, $z2;
        android.view.View r2;

        r2 := @parameter0: android.view.View;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r2.<java.lang.Object: int hashCode()>();

        if $i1 != i0 goto label2;

        $r1 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        r3 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ViewOverlay");

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("android.view.ViewOverlay$OverlayViewGroup");

        return $z2;

     label1:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        return $z1;

     label2:
        return 0;
    }

    static android.view.ViewDebug$PropertyInfo lambda$convertToPropertyInfos$6(java.lang.Class, java.lang.reflect.Method)
    {
        java.lang.Class r0;
        java.lang.reflect.Method r1;
        android.view.ViewDebug$PropertyInfo $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Method;

        $r2 = staticinvoke <android.view.ViewDebug$PropertyInfo: android.view.ViewDebug$PropertyInfo forMethod(java.lang.reflect.Method,java.lang.Class)>(r1, r0);

        return $r2;
    }

    static android.view.ViewDebug$PropertyInfo lambda$convertToPropertyInfos$7(java.lang.Class, java.lang.reflect.Field)
    {
        java.lang.Class r0;
        java.lang.reflect.Field r1;
        android.view.ViewDebug$PropertyInfo $r2;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Field;

        $r2 = staticinvoke <android.view.ViewDebug$PropertyInfo: android.view.ViewDebug$PropertyInfo forField(java.lang.reflect.Field,java.lang.Class)>(r1, r0);

        return $r2;
    }

    static boolean lambda$convertToPropertyInfos$8(java.lang.Object)
    {
        java.lang.Object r0;
        boolean z0;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static android.view.ViewDebug$PropertyInfo[] lambda$convertToPropertyInfos$9(int)
    {
        int i0;
        android.view.ViewDebug$PropertyInfo[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (android.view.ViewDebug$PropertyInfo)[i0];

        return $r0;
    }

    static void lambda$dumpViewHierarchy$5(android.content.Context, android.view.ViewGroup, java.io.BufferedWriter, int, boolean, boolean)
    {
        android.content.Context r0;
        android.view.ViewGroup r1;
        java.io.BufferedWriter r2;
        int i0;
        boolean z0, z1;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.view.ViewGroup;

        r2 := @parameter2: java.io.BufferedWriter;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        z1 := @parameter5: boolean;

        staticinvoke <android.view.ViewDebug: void dumpViewHierarchyOnUIThread(android.content.Context,android.view.ViewGroup,java.io.BufferedWriter,int,boolean,boolean)>(r0, r1, r2, i0, z0, z1);

        return;
    }

    static void lambda$performViewCapture$4(android.view.View, android.graphics.Bitmap[], boolean, java.util.concurrent.CountDownLatch)
    {
        android.graphics.Bitmap[] r0;
        boolean z0, $z1;
        java.util.concurrent.CountDownLatch r1;
        android.graphics.Bitmap $r3;
        java.lang.Throwable $r4;
        java.lang.OutOfMemoryError $r5;
        android.view.View r6;
        android.view.ViewDebug$CanvasProvider r7;
        android.view.ViewDebug$HardwareCanvasProvider r10;
        android.view.ViewDebug$SoftwareCanvasProvider r11;

        r6 := @parameter0: android.view.View;

        r0 := @parameter1: android.graphics.Bitmap[];

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.util.concurrent.CountDownLatch;

     label01:
        $z1 = virtualinvoke r6.<android.view.View: boolean isHardwareAccelerated()>();

        if $z1 == 0 goto label03;

        r10 = new android.view.ViewDebug$HardwareCanvasProvider;

        r7 = r10;

        specialinvoke r10.<android.view.ViewDebug$HardwareCanvasProvider: void <init>()>();

     label02:
        goto label04;

     label03:
        r11 = new android.view.ViewDebug$SoftwareCanvasProvider;

        specialinvoke r11.<android.view.ViewDebug$SoftwareCanvasProvider: void <init>()>();

        r7 = r11;

     label04:
        $r3 = virtualinvoke r6.<android.view.View: android.graphics.Bitmap createSnapshot(android.view.ViewDebug$CanvasProvider,boolean)>(r7, z0);

        r0[0] = $r3;

     label05:
        goto label09;

     label06:
        $r4 := @caughtexception;

        goto label10;

     label07:
        $r5 := @caughtexception;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", "Out of memory for bitmap");

     label09:
        virtualinvoke r1.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

     label10:
        virtualinvoke r1.<java.util.concurrent.CountDownLatch: void countDown()>();

        throw $r4;

        catch java.lang.OutOfMemoryError from label01 to label02 with label07;
        catch java.lang.Throwable from label01 to label02 with label06;
        catch java.lang.OutOfMemoryError from label03 to label04 with label07;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.OutOfMemoryError from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label08 to label09 with label06;
    }

    static void lambda$profileViewDraw$1(android.view.View, android.graphics.RecordingCanvas)
    {
        android.view.View r0;
        android.graphics.RecordingCanvas r1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.RecordingCanvas;

        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    static void lambda$profileViewDraw$2(android.view.View, android.graphics.Canvas)
    {
        android.view.View r0;
        android.graphics.Canvas r1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.Canvas;

        virtualinvoke r0.<android.view.View: void draw(android.graphics.Canvas)>(r1);

        return;
    }

    static void lambda$profileViewLayout$0(android.view.View)
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: android.view.View;

        $i3 = r0.<android.view.View: int mLeft>;

        $i2 = r0.<android.view.View: int mTop>;

        $i1 = r0.<android.view.View: int mRight>;

        $i0 = r0.<android.view.View: int mBottom>;

        virtualinvoke r0.<android.view.View: void layout(int,int,int,int)>($i3, $i2, $i1, $i0);

        return;
    }

    static void lambda$profileViewOperation$3(android.view.ViewDebug$ViewOperation, long[], java.util.concurrent.CountDownLatch)
    {
        long[] r0;
        java.util.concurrent.CountDownLatch r1;
        long l0, $l1, $l2;
        java.lang.Throwable $r2;
        android.view.ViewDebug$ViewOperation r3;

        r3 := @parameter0: android.view.ViewDebug$ViewOperation;

        r0 := @parameter1: long[];

        r1 := @parameter2: java.util.concurrent.CountDownLatch;

     label1:
        interfaceinvoke r3.<android.view.ViewDebug$ViewOperation: void pre()>();

        l0 = staticinvoke <android.os.Debug: long threadCpuTimeNanos()>();

        interfaceinvoke r3.<android.view.ViewDebug$ViewOperation: void run()>();

        $l1 = staticinvoke <android.os.Debug: long threadCpuTimeNanos()>();

        $l2 = $l1 - l0;

        r0[0] = $l2;

     label2:
        virtualinvoke r1.<java.util.concurrent.CountDownLatch: void countDown()>();

        return;

     label3:
        $r2 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.CountDownLatch: void countDown()>();

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void outputDisplayList(android.view.View, android.view.View)
    {
        android.view.View r0, r1;
        android.view.ViewRootImpl $r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        $r2 = virtualinvoke r0.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void outputDisplayList(android.view.View)>(r1);

        return;
    }

    private static void outputDisplayList(android.view.View, java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        android.view.ViewRootImpl $r1;
        android.view.View r2, r3;

        r2 := @parameter0: android.view.View;

        r0 := @parameter1: java.lang.String;

        r3 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r2, r0);

        $r1 = virtualinvoke r3.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r1.<android.view.ViewRootImpl: void outputDisplayList(android.view.View)>(r3);

        return;
    }

    private static android.graphics.Bitmap performViewCapture(android.view.View, boolean)
    {
        boolean z0;
        java.util.concurrent.CountDownLatch $r1;
        android.view._$$Lambda$ViewDebug$SYbJuwHeGrHQLha0YsHp4VI9JLg $r2;
        java.util.concurrent.TimeUnit $r3;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        java.lang.Thread $r9;
        android.view.View r10;
        android.graphics.Bitmap[] r11;
        android.graphics.Bitmap r12;

        r10 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        if r10 == null goto label4;

        $r1 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r1.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r11 = newarray (android.graphics.Bitmap)[1];

        $r2 = new android.view._$$Lambda$ViewDebug$SYbJuwHeGrHQLha0YsHp4VI9JLg;

        specialinvoke $r2.<android.view._$$Lambda$ViewDebug$SYbJuwHeGrHQLha0YsHp4VI9JLg: void <init>(android.view.View,android.graphics.Bitmap[],boolean,java.util.concurrent.CountDownLatch)>(r10, r11, z0, $r1);

        virtualinvoke r10.<android.view.View: boolean post(java.lang.Runnable)>($r2);

     label1:
        $r3 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke $r1.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(6000L, $r3);

     label2:
        r12 = r11[0];

        return r12;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not complete the capture of the view ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r8);

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

     label4:
        return null;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private static void profile(android.view.View, java.io.OutputStream, java.lang.String) throws java.io.IOException
    {
        android.view.View r0, r5;
        java.io.BufferedWriter r1, r8, r9;
        java.io.OutputStreamWriter r2;
        java.lang.Exception $r3;
        java.lang.Throwable $r4;
        java.io.OutputStream r6;
        java.lang.String r7;

        r5 := @parameter0: android.view.View;

        r6 := @parameter1: java.io.OutputStream;

        r7 := @parameter2: java.lang.String;

        r0 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r5, r7);

        r8 = null;

        r9 = null;

     label01:
        r1 = new java.io.BufferedWriter;

     label02:
        r8 = null;

        r9 = null;

     label03:
        r2 = new java.io.OutputStreamWriter;

     label04:
        r8 = null;

        r9 = null;

     label05:
        specialinvoke r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r6);

     label06:
        r8 = null;

        r9 = null;

     label07:
        specialinvoke r1.<java.io.BufferedWriter: void <init>(java.io.Writer,int)>(r2, 32768);

     label08:
        if r0 == null goto label11;

        r8 = r1;

        r9 = r1;

     label09:
        staticinvoke <android.view.ViewDebug: void profileViewAndChildren(android.view.View,java.io.BufferedWriter)>(r0, r1);

     label10:
        goto label15;

     label11:
        r8 = r1;

        r9 = r1;

     label12:
        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>("-1 -1 -1");

     label13:
        r8 = r1;

        r9 = r1;

     label14:
        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

     label15:
        r8 = r1;

        r9 = r1;

     label16:
        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>("DONE.");

     label17:
        r8 = r1;

        r9 = r1;

     label18:
        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

     label19:
        r9 = r1;

     label20:
        virtualinvoke r9.<java.io.BufferedWriter: void close()>();

        goto label25;

     label21:
        $r4 := @caughtexception;

        goto label26;

     label22:
        $r3 := @caughtexception;

        r8 = r9;

     label23:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("View", "Problem profiling the view:", $r3);

     label24:
        if r9 == null goto label25;

        goto label20;

     label25:
        return;

     label26:
        if r8 == null goto label27;

        virtualinvoke r8.<java.io.BufferedWriter: void close()>();

     label27:
        throw $r4;

        catch java.lang.Exception from label01 to label02 with label22;
        catch java.lang.Throwable from label01 to label02 with label21;
        catch java.lang.Exception from label03 to label04 with label22;
        catch java.lang.Throwable from label03 to label04 with label21;
        catch java.lang.Exception from label05 to label06 with label22;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Exception from label07 to label08 with label22;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Exception from label09 to label10 with label22;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Exception from label12 to label13 with label22;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Exception from label14 to label15 with label22;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Exception from label16 to label17 with label22;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Exception from label18 to label19 with label22;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label23 to label24 with label21;
    }

    private static void profileViewAndChildren(android.view.View, android.graphics.RenderNode, java.io.BufferedWriter, boolean) throws java.io.IOException
    {
        android.graphics.RenderNode r0;
        java.io.BufferedWriter r1;
        boolean z0, $z1, $z2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i10;
        android.view.View $r2, r3;
        long l7, l8, l9;
        java.lang.String $r4, $r5, $r6;
        android.view.ViewGroup r7;

        r3 := @parameter0: android.view.View;

        r0 := @parameter1: android.graphics.RenderNode;

        r1 := @parameter2: java.io.BufferedWriter;

        z0 := @parameter3: boolean;

        l7 = 0L;

        if z0 != 0 goto label02;

        $i5 = r3.<android.view.View: int mPrivateFlags>;

        $i6 = $i5 & 2048;

        if $i6 == 0 goto label01;

        goto label02;

     label01:
        l8 = 0L;

        goto label03;

     label02:
        l8 = staticinvoke <android.view.ViewDebug: long profileViewMeasure(android.view.View)>(r3);

     label03:
        if z0 != 0 goto label05;

        $i3 = r3.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 & 8192;

        if $i4 == 0 goto label04;

        goto label05;

     label04:
        l9 = 0L;

        goto label06;

     label05:
        l9 = staticinvoke <android.view.ViewDebug: long profileViewLayout(android.view.View)>(r3);

     label06:
        if z0 != 0 goto label08;

        $z1 = virtualinvoke r3.<android.view.View: boolean willNotDraw()>();

        if $z1 == 0 goto label08;

        $i1 = r3.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 32;

        if $i2 == 0 goto label07;

        goto label08;

     label07:
        goto label09;

     label08:
        l7 = staticinvoke <android.view.ViewDebug: long profileViewDraw(android.view.View,android.graphics.RenderNode)>(r3, r0);

     label09:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l8);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>($r4);

        virtualinvoke r1.<java.io.BufferedWriter: void write(int)>(32);

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l9);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>($r5);

        virtualinvoke r1.<java.io.BufferedWriter: void write(int)>(32);

        $r6 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l7);

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>($r6);

        virtualinvoke r1.<java.io.BufferedWriter: void newLine()>();

        $z2 = r3 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label11;

        r7 = (android.view.ViewGroup) r3;

        i0 = virtualinvoke r7.<android.view.ViewGroup: int getChildCount()>();

        i10 = 0;

     label10:
        if i10 >= i0 goto label11;

        $r2 = virtualinvoke r7.<android.view.ViewGroup: android.view.View getChildAt(int)>(i10);

        staticinvoke <android.view.ViewDebug: void profileViewAndChildren(android.view.View,android.graphics.RenderNode,java.io.BufferedWriter,boolean)>($r2, r0, r1, 0);

        i10 = i10 + 1;

        goto label10;

     label11:
        return;
    }

    public static void profileViewAndChildren(android.view.View, java.io.BufferedWriter) throws java.io.IOException
    {
        android.view.View r0;
        java.io.BufferedWriter r1;
        android.graphics.RenderNode $r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: java.io.BufferedWriter;

        $r2 = staticinvoke <android.graphics.RenderNode: android.graphics.RenderNode create(java.lang.String,android.graphics.RenderNode$AnimationHost)>("ViewDebug", null);

        staticinvoke <android.view.ViewDebug: void profileViewAndChildren(android.view.View,android.graphics.RenderNode,java.io.BufferedWriter,boolean)>(r0, $r2, r1, 1);

        return;
    }

    private static long profileViewDraw(android.view.View, android.graphics.RenderNode)
    {
        android.content.res.Resources $r0;
        boolean $z0;
        android.graphics.Bitmap$Config $r1;
        int $i0, $i1, $i2, $i3;
        android.graphics.Canvas $r2;
        java.lang.Throwable $r3, $r4;
        android.view.View r5;
        android.graphics.RenderNode r6;
        android.util.DisplayMetrics r7;
        android.graphics.RecordingCanvas r8;
        android.view._$$Lambda$ViewDebug$flFXZc7_CjFXx7_tYT59WSbUNjI r9;
        long l4, l5;
        android.graphics.Bitmap r11;
        android.view._$$Lambda$ViewDebug$w986pBwzwNi77yEgLa3IWusjPNw r13;

        r5 := @parameter0: android.view.View;

        r6 := @parameter1: android.graphics.RenderNode;

        $r0 = virtualinvoke r5.<android.view.View: android.content.res.Resources getResources()>();

        r7 = virtualinvoke $r0.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        if r7 != null goto label1;

        return 0L;

     label1:
        $z0 = virtualinvoke r5.<android.view.View: boolean isHardwareAccelerated()>();

        if $z0 == 0 goto label5;

        $i3 = r7.<android.util.DisplayMetrics: int widthPixels>;

        $i2 = r7.<android.util.DisplayMetrics: int heightPixels>;

        r8 = virtualinvoke r6.<android.graphics.RenderNode: android.graphics.RecordingCanvas beginRecording(int,int)>($i3, $i2);

     label2:
        r9 = new android.view._$$Lambda$ViewDebug$flFXZc7_CjFXx7_tYT59WSbUNjI;

        specialinvoke r9.<android.view._$$Lambda$ViewDebug$flFXZc7_CjFXx7_tYT59WSbUNjI: void <init>(android.view.View,android.graphics.RecordingCanvas)>(r5, r8);

        l4 = staticinvoke <android.view.ViewDebug: long profileViewOperation(android.view.View,android.view.ViewDebug$ViewOperation)>(r5, r9);

     label3:
        virtualinvoke r6.<android.graphics.RenderNode: void endRecording()>();

        return l4;

     label4:
        $r3 := @caughtexception;

        virtualinvoke r6.<android.graphics.RenderNode: void endRecording()>();

        throw $r3;

     label5:
        $i1 = r7.<android.util.DisplayMetrics: int widthPixels>;

        $i0 = r7.<android.util.DisplayMetrics: int heightPixels>;

        $r1 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config RGB_565>;

        r11 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)>(r7, $i1, $i0, $r1);

        $r2 = new android.graphics.Canvas;

        specialinvoke $r2.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r11);

     label6:
        r13 = new android.view._$$Lambda$ViewDebug$w986pBwzwNi77yEgLa3IWusjPNw;

        specialinvoke r13.<android.view._$$Lambda$ViewDebug$w986pBwzwNi77yEgLa3IWusjPNw: void <init>(android.view.View,android.graphics.Canvas)>(r5, $r2);

        l5 = staticinvoke <android.view.ViewDebug: long profileViewOperation(android.view.View,android.view.ViewDebug$ViewOperation)>(r5, r13);

     label7:
        virtualinvoke $r2.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        virtualinvoke r11.<android.graphics.Bitmap: void recycle()>();

        return l5;

     label8:
        $r4 := @caughtexception;

        virtualinvoke $r2.<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>(null);

        virtualinvoke r11.<android.graphics.Bitmap: void recycle()>();

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    private static long profileViewLayout(android.view.View)
    {
        android.view.View r0;
        android.view._$$Lambda$ViewDebug$inOytI2zZEgp1DJv8Cu4GjQVNiE $r1;
        long $l0;

        r0 := @parameter0: android.view.View;

        $r1 = new android.view._$$Lambda$ViewDebug$inOytI2zZEgp1DJv8Cu4GjQVNiE;

        specialinvoke $r1.<android.view._$$Lambda$ViewDebug$inOytI2zZEgp1DJv8Cu4GjQVNiE: void <init>(android.view.View)>(r0);

        $l0 = staticinvoke <android.view.ViewDebug: long profileViewOperation(android.view.View,android.view.ViewDebug$ViewOperation)>(r0, $r1);

        return $l0;
    }

    private static long profileViewMeasure(android.view.View)
    {
        android.view.View r0;
        android.view.ViewDebug$2 $r1;
        long $l0;

        r0 := @parameter0: android.view.View;

        $r1 = new android.view.ViewDebug$2;

        specialinvoke $r1.<android.view.ViewDebug$2: void <init>(android.view.View)>(r0);

        $l0 = staticinvoke <android.view.ViewDebug: long profileViewOperation(android.view.View,android.view.ViewDebug$ViewOperation)>(r0, $r1);

        return $l0;
    }

    private static long profileViewOperation(android.view.View, android.view.ViewDebug$ViewOperation)
    {
        android.view.View r0;
        long[] r2;
        java.util.concurrent.CountDownLatch $r3;
        android.view._$$Lambda$ViewDebug$5rTN0pemwbr3I3IL2E_xDBeDTDg $r4;
        java.util.concurrent.TimeUnit $r5;
        boolean $z1;
        long $l0;
        java.lang.String $r8, $r13;
        java.lang.Throwable $r9;
        java.lang.StringBuilder $r10, r16;
        java.lang.Thread $r14;
        android.view.ViewDebug$ViewOperation r15;

        r0 := @parameter0: android.view.View;

        r15 := @parameter1: android.view.ViewDebug$ViewOperation;

        $r3 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r3.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        r2 = newarray (long)[1];

        $r4 = new android.view._$$Lambda$ViewDebug$5rTN0pemwbr3I3IL2E_xDBeDTDg;

        specialinvoke $r4.<android.view._$$Lambda$ViewDebug$5rTN0pemwbr3I3IL2E_xDBeDTDg: void <init>(android.view.ViewDebug$ViewOperation,long[],java.util.concurrent.CountDownLatch)>(r15, r2, $r3);

        virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r4);

     label1:
        $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z1 = virtualinvoke $r3.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(6000L, $r5);

        if $z1 != 0 goto label3;

        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not complete the profiling of the view ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r8);

     label2:
        return -1L;

     label3:
        $l0 = r2[0];

        return $l0;

     label4:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not complete the profiling of the view ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r13);

        $r14 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r14.<java.lang.Thread: void interrupt()>();

        return -1L;

        catch java.lang.InterruptedException from label1 to label2 with label4;
    }

    private static void requestLayout(android.view.View, java.lang.String)
    {
        android.view.View r0, r3;
        android.view.ViewDebug$1 $r1;
        java.lang.String r2;

        r0 := @parameter0: android.view.View;

        r2 := @parameter1: java.lang.String;

        r3 = staticinvoke <android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>(r0, r2);

        if r3 == null goto label1;

        $r1 = new android.view.ViewDebug$1;

        specialinvoke $r1.<android.view.ViewDebug$1: void <init>(android.view.View)>(r3);

        virtualinvoke r0.<android.view.View: boolean post(java.lang.Runnable)>($r1);

     label1:
        return;
    }

    static java.lang.Object resolveId(android.content.Context, int)
    {
        int i0;
        android.content.res.Resources r0;
        java.lang.String $r1, $r4, $r9, r13;
        android.content.res.Resources$NotFoundException $r6;
        java.lang.StringBuilder $r7, r12;
        android.content.Context r11;

        r11 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r0 = virtualinvoke r11.<android.content.Context: android.content.res.Resources getResources()>();

        if i0 < 0 goto label5;

     label1:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getResourceTypeName(int)>(i0);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r4 = virtualinvoke r0.<android.content.res.Resources: java.lang.String getResourceEntryName(int)>(i0);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        r13 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id/");

        $r9 = staticinvoke <android.view.ViewDebug: java.lang.String formatIntToHexString(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label4:
        goto label6;

     label5:
        r13 = "NO_ID";

     label6:
        return r13;

        catch android.content.res.Resources$NotFoundException from label1 to label2 with label3;
    }

    public static void setLayoutParameter(android.view.View, java.lang.String, int) throws java.lang.NoSuchFieldException, java.lang.IllegalAccessException
    {
        java.lang.String r0, $r11, $r14;
        int i0;
        android.view.ViewGroup$LayoutParams r1;
        java.lang.reflect.Field r2;
        java.lang.Class $r3, $r4, $r5, $r10;
        java.lang.StringBuilder $r6;
        java.lang.RuntimeException $r13;
        java.lang.Integer $r15;
        android.view.ViewDebug$5 $r16;
        android.view.View r17;

        r17 := @parameter0: android.view.View;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 = virtualinvoke r17.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        r2 = virtualinvoke $r3.<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>(r0);

        $r4 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r4 != $r5 goto label1;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke r2.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, $r15);

        $r16 = new android.view.ViewDebug$5;

        specialinvoke $r16.<android.view.ViewDebug$5: void <init>(android.view.View,android.view.ViewGroup$LayoutParams)>(r17, r1);

        virtualinvoke r17.<android.view.View: boolean post(java.lang.Runnable)>($r16);

        return;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Only integer layout parameters can be set. Field ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is of type ");

        $r10 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = new java.lang.RuntimeException;

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14);

        throw $r13;
    }

    public static void startHierarchyTracing(java.lang.String, android.view.View)
    {
        java.lang.String r0;
        android.view.View r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.view.View;

        return;
    }

    public static void startRecyclerTracing(java.lang.String, android.view.View)
    {
        java.lang.String r0;
        android.view.View r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: android.view.View;

        return;
    }

    public static java.lang.AutoCloseable startRenderingCommandsCapture(android.view.View, java.util.concurrent.Executor, java.util.concurrent.Callable)
    {
        java.util.concurrent.Executor r0;
        java.util.concurrent.Callable r1;
        java.lang.IllegalArgumentException $r2;
        android.os.Handler $r3;
        android.os.Looper $r4, $r5;
        java.lang.IllegalStateException $r6;
        android.view.ViewDebug$StreamingPictureCallbackHandler $r7;
        android.view.View r8;
        android.view.View$AttachInfo r9;
        android.view.ThreadedRenderer r10;

        r8 := @parameter0: android.view.View;

        r0 := @parameter1: java.util.concurrent.Executor;

        r1 := @parameter2: java.util.concurrent.Callable;

        r9 = r8.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r9 == null goto label3;

        $r3 = r9.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Looper getLooper()>();

        $r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r4 != $r5 goto label2;

        r10 = r9.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if r10 == null goto label1;

        $r7 = new android.view.ViewDebug$StreamingPictureCallbackHandler;

        specialinvoke $r7.<android.view.ViewDebug$StreamingPictureCallbackHandler: void <init>(android.graphics.HardwareRenderer,java.util.concurrent.Callable,java.util.concurrent.Executor,android.view.ViewDebug$1)>(r10, r1, r0, null);

        return $r7;

     label1:
        return null;

     label2:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Called on the wrong thread. Must be called on the thread that owns the given View");

        throw $r6;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Given view isn\'t attached");

        throw $r2;
    }

    public static java.lang.AutoCloseable startRenderingCommandsCapture(android.view.View, java.util.concurrent.Executor, java.util.function.Function)
    {
        java.util.concurrent.Executor r0;
        java.util.function.Function r1;
        java.lang.IllegalArgumentException $r2;
        android.os.Handler $r3;
        android.os.Looper $r4, $r5;
        java.lang.IllegalStateException $r6;
        android.view.ViewDebug$PictureCallbackHandler $r7;
        android.view.View r8;
        android.view.View$AttachInfo r9;
        android.view.ThreadedRenderer r10;

        r8 := @parameter0: android.view.View;

        r0 := @parameter1: java.util.concurrent.Executor;

        r1 := @parameter2: java.util.function.Function;

        r9 = r8.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if r9 == null goto label3;

        $r3 = r9.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Looper getLooper()>();

        $r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r4 != $r5 goto label2;

        r10 = r9.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if r10 == null goto label1;

        $r7 = new android.view.ViewDebug$PictureCallbackHandler;

        specialinvoke $r7.<android.view.ViewDebug$PictureCallbackHandler: void <init>(android.graphics.HardwareRenderer,java.util.function.Function,java.util.concurrent.Executor,android.view.ViewDebug$1)>(r10, r1, r0, null);

        return $r7;

     label1:
        return null;

     label2:
        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Called on the wrong thread. Must be called on the thread that owns the given View");

        throw $r6;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Given view isn\'t attached");

        throw $r2;
    }

    public static void stopHierarchyTracing()
    {
        return;
    }

    public static void stopRecyclerTracing()
    {
        return;
    }

    public static void trace(android.view.View, android.view.ViewDebug$HierarchyTraceType)
    {
        android.view.View r0;
        android.view.ViewDebug$HierarchyTraceType r1;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ViewDebug$HierarchyTraceType;

        return;
    }

    public static transient void trace(android.view.View, android.view.ViewDebug$RecyclerTraceType, int[])
    {
        android.view.View r0;
        android.view.ViewDebug$RecyclerTraceType r1;
        int[] r2;

        r0 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ViewDebug$RecyclerTraceType;

        r2 := @parameter2: int[];

        return;
    }

    private static void writeEntry(java.io.BufferedWriter, java.lang.String, java.lang.String, java.lang.String, java.lang.Object) throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        java.lang.String r1, r2, r3;
        java.lang.Object r4;

        r0 := @parameter0: java.io.BufferedWriter;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.Object;

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(r1);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(r2);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(r3);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>("=");

        staticinvoke <android.view.ViewDebug: void writeValue(java.io.BufferedWriter,java.lang.Object)>(r0, r4);

        virtualinvoke r0.<java.io.BufferedWriter: void write(int)>(32);

        return;
    }

    private static void writeExportedProperties(android.content.Context, java.lang.Object, java.io.BufferedWriter, java.lang.Class, java.lang.String) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.Object r1, r81, r91;
        java.io.BufferedWriter r2;
        java.lang.String r3, r6, r7, $r10, $r28, $r31, $r39, $r54, $r56, $r59, $r63, $r67, $r71, $r76, r83, r86, r89, r90, $r100, $r101, $r102;
        android.view.ViewDebug$PropertyInfo[] r4;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12, i13, i14, i15, i16;
        android.view.ViewDebug$PropertyInfo r5;
        java.lang.'annotation'.Annotation $r8, $r13, $r15, $r17, $r19, $r48, $r52, $r57, $r70, $r74;
        android.view.ViewDebug$ExportedProperty $r9, $r14, $r16, $r18, $r20, $r49, $r53, $r58, $r72, $r75;
        java.lang.Class $r11, $r12, $r32, $r33, $r34, $r35, $r43, $r44, $r45, $r46, $r47, r80;
        boolean $z1, $z2, $z3, $z4, $z5, z6;
        java.lang.Integer $r23, $r24, $r41, $r42;
        java.lang.StringBuilder $r25, $r36, $r50, $r60, $r64, $r73, $r98;
        java.lang.Byte $r38;
        byte $b7;
        java.lang.Exception $r79;
        int[] r84;
        java.lang.String[] r87;
        android.view.ViewDebug$FlagToString[] r94;
        android.view.ViewDebug$IntToString[] r96;
        android.view.ViewDebug$IntToString r97;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: java.io.BufferedWriter;

        r80 := @parameter3: java.lang.Class;

        r3 := @parameter4: java.lang.String;

        r4 = staticinvoke <android.view.ViewDebug: android.view.ViewDebug$PropertyInfo[] getExportedProperties(java.lang.Class)>(r80);

        i0 = lengthof r4;

        i13 = 0;

     label01:
        if i13 >= i0 goto label27;

        r5 = r4[i13];

     label02:
        r81 = virtualinvoke r5.<android.view.ViewDebug$PropertyInfo: java.lang.Object invoke(java.lang.Object)>(r1);

     label03:
        $r8 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r9 = (android.view.ViewDebug$ExportedProperty) $r8;

        $r10 = interfaceinvoke $r9.<android.view.ViewDebug$ExportedProperty: java.lang.String category()>();

        $i3 = virtualinvoke $r10.<java.lang.String: int length()>();

        if $i3 == 0 goto label04;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        $r74 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r75 = (android.view.ViewDebug$ExportedProperty) $r74;

        $r76 = interfaceinvoke $r75.<android.view.ViewDebug$ExportedProperty: java.lang.String category()>();

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r76);

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        r83 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label05;

     label04:
        r83 = "";

     label05:
        $r12 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType>;

        $r11 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r12 == $r11 goto label14;

        $r44 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType>;

        $r43 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r44 != $r43 goto label06;

        goto label14;

     label06:
        $r45 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType>;

        if $r45 != class "[I" goto label07;

        r84 = (int[]) r81;

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r83);

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r67 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.String name>;

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r67);

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        r86 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        $r70 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r72 = (android.view.ViewDebug$ExportedProperty) $r70;

        $r71 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.String entrySuffix>;

        staticinvoke <android.view.ViewDebug: void exportUnrolledArray(android.content.Context,java.io.BufferedWriter,android.view.ViewDebug$ExportedProperty,int[],java.lang.String,java.lang.String)>(r0, r2, $r72, r84, r86, $r71);

        goto label26;

     label07:
        $r46 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType>;

        if $r46 != class "[Ljava/lang/String;" goto label13;

        r87 = (java.lang.String[]) r81;

        $r57 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r58 = (android.view.ViewDebug$ExportedProperty) $r57;

        $z5 = interfaceinvoke $r58.<android.view.ViewDebug$ExportedProperty: boolean hasAdjacentMapping()>();

        if $z5 == 0 goto label26;

        if r87 == null goto label26;

        i14 = 0;

     label08:
        $i10 = lengthof r87;

        if i14 >= $i10 goto label12;

        $r59 = r87[i14];

        if $r59 == null goto label11;

        $r60 = new java.lang.StringBuilder;

        specialinvoke $r60.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r83);

        virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        r89 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = r87[i14];

        r7 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.String entrySuffix>;

        $i11 = i14 + 1;

        $r63 = r87[$i11];

        if $r63 != null goto label09;

        r90 = "null";

        goto label10;

     label09:
        $i12 = i14 + 1;

        r90 = r87[$i12];

     label10:
        staticinvoke <android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r2, r89, r6, r7, r90);

     label11:
        i14 = i14 + 2;

        goto label08;

     label12:
        goto label26;

     label13:
        r91 = r81;

        $r47 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType>;

        $z3 = virtualinvoke $r47.<java.lang.Class: boolean isPrimitive()>();

        if $z3 != 0 goto label24;

        r91 = r81;

        $r48 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r49 = (android.view.ViewDebug$ExportedProperty) $r48;

        $z4 = interfaceinvoke $r49.<android.view.ViewDebug$ExportedProperty: boolean deepExport()>();

        if $z4 == 0 goto label24;

        $r50 = new java.lang.StringBuilder;

        specialinvoke $r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r52 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r53 = (android.view.ViewDebug$ExportedProperty) $r52;

        $r54 = interfaceinvoke $r53.<android.view.ViewDebug$ExportedProperty: java.lang.String prefix()>();

        virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54);

        $r56 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.view.ViewDebug: void dumpViewProperties(android.content.Context,java.lang.Object,java.io.BufferedWriter,java.lang.String)>(r0, r81, r2, $r56);

        goto label26;

     label14:
        $r13 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r14 = (android.view.ViewDebug$ExportedProperty) $r13;

        $z1 = interfaceinvoke $r14.<android.view.ViewDebug$ExportedProperty: boolean resolveId()>();

        if $z1 == 0 goto label15;

        if r0 == null goto label15;

        $r42 = (java.lang.Integer) r81;

        $i9 = virtualinvoke $r42.<java.lang.Integer: int intValue()>();

        r91 = staticinvoke <android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>(r0, $i9);

        goto label24;

     label15:
        $r15 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r16 = (android.view.ViewDebug$ExportedProperty) $r15;

        $z2 = interfaceinvoke $r16.<android.view.ViewDebug$ExportedProperty: boolean formatToHexString()>();

        if $z2 == 0 goto label17;

        $r33 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType>;

        $r32 = <java.lang.Integer: java.lang.Class TYPE>;

        if $r33 != $r32 goto label16;

        $r41 = (java.lang.Integer) r81;

        $i8 = virtualinvoke $r41.<java.lang.Integer: int intValue()>();

        r91 = staticinvoke <android.view.ViewDebug: java.lang.String formatIntToHexString(int)>($i8);

        goto label24;

     label16:
        r91 = r81;

        $r35 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.Class returnType>;

        $r34 = <java.lang.Byte: java.lang.Class TYPE>;

        if $r35 != $r34 goto label24;

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $r38 = (java.lang.Byte) r81;

        $b7 = virtualinvoke $r38.<java.lang.Byte: byte byteValue()>();

        $r39 = staticinvoke <libcore.util.HexEncoding: java.lang.String encodeToString(byte,boolean)>($b7, 1);

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        r91 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label24;

     label17:
        $r17 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r18 = (android.view.ViewDebug$ExportedProperty) $r17;

        r94 = interfaceinvoke $r18.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$FlagToString[] flagMapping()>();

        $i4 = lengthof r94;

        if $i4 <= 0 goto label18;

        $r24 = (java.lang.Integer) r81;

        i15 = virtualinvoke $r24.<java.lang.Integer: int intValue()>();

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r83);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r28 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.String name>;

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(95);

        $r31 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.view.ViewDebug: void exportUnrolledFlags(java.io.BufferedWriter,android.view.ViewDebug$FlagToString[],int,java.lang.String)>(r2, r94, i15, $r31);

     label18:
        $r19 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.'annotation'.Annotation property>;

        $r20 = (android.view.ViewDebug$ExportedProperty) $r19;

        r96 = interfaceinvoke $r20.<android.view.ViewDebug$ExportedProperty: android.view.ViewDebug$IntToString[] mapping()>();

        $i5 = lengthof r96;

        if $i5 <= 0 goto label23;

        $r23 = (java.lang.Integer) r81;

        i1 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        i2 = lengthof r96;

        i16 = 0;

     label19:
        if i16 >= i2 goto label21;

        r97 = r96[i16];

        $i6 = interfaceinvoke r97.<android.view.ViewDebug$IntToString: int 'from'()>();

        if $i6 != i1 goto label20;

        r91 = interfaceinvoke r97.<android.view.ViewDebug$IntToString: java.lang.String 'to'()>();

        z6 = 1;

        goto label22;

     label20:
        i16 = i16 + 1;

        goto label19;

     label21:
        z6 = 0;

        r91 = r81;

     label22:
        if z6 != 0 goto label24;

        r91 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        goto label24;

     label23:
        r91 = r81;

     label24:
        $r98 = new java.lang.StringBuilder;

        specialinvoke $r98.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r83);

        virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r100 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>();

        $r101 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.String name>;

        $r102 = r5.<android.view.ViewDebug$PropertyInfo: java.lang.String entrySuffix>;

        staticinvoke <android.view.ViewDebug: void writeEntry(java.io.BufferedWriter,java.lang.String,java.lang.String,java.lang.String,java.lang.Object)>(r2, $r100, $r101, $r102, r91);

        goto label26;

     label25:
        $r79 := @caughtexception;

     label26:
        i13 = i13 + 1;

        goto label01;

     label27:
        return;

        catch java.lang.Exception from label02 to label03 with label25;
    }

    private static void writeValue(java.io.BufferedWriter, java.lang.Object) throws java.io.IOException
    {
        java.io.BufferedWriter r0;
        java.lang.String $r1, $r2, $r4, $r5, r7;
        int $i0, $i1;
        java.lang.Throwable $r3;
        java.lang.Object r6;

        r0 := @parameter0: java.io.BufferedWriter;

        r6 := @parameter1: java.lang.Object;

        if r6 == null goto label4;

     label1:
        $r1 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        r7 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\n", "\\n");

     label2:
        $i0 = virtualinvoke r7.<java.lang.String: int length()>();

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>($r2);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(",");

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(r7);

        goto label5;

     label3:
        $r3 := @caughtexception;

        $r4 = "[EXCEPTION]";

        $i1 = virtualinvoke $r4.<java.lang.String: int length()>();

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>($r5);

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>(",");

        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>("[EXCEPTION]");

        throw $r3;

     label4:
        virtualinvoke r0.<java.io.BufferedWriter: void write(java.lang.String)>("4,null");

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <android.view.ViewDebug: boolean TRACE_RECYCLER> = 0;

        <android.view.ViewDebug: boolean TRACE_HIERARCHY> = 0;

        <android.view.ViewDebug: java.lang.String REMOTE_PROFILE> = "PROFILE";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_REQUEST_LAYOUT> = "REQUEST_LAYOUT";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_OUTPUT_DISPLAYLIST> = "OUTPUT_DISPLAYLIST";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_INVALIDATE> = "INVALIDATE";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_DUMP_THEME> = "DUMP_THEME";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_DUMP_ENCODED> = "DUMP_ENCODED";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_DUMP> = "DUMP";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_CAPTURE_LAYERS> = "CAPTURE_LAYERS";

        <android.view.ViewDebug: java.lang.String REMOTE_COMMAND_CAPTURE> = "CAPTURE";

        <android.view.ViewDebug: boolean DEBUG_POSITIONING> = 0;

        <android.view.ViewDebug: boolean DEBUG_DRAG> = 0;

        <android.view.ViewDebug: int CAPTURE_TIMEOUT> = 6000;

        return;
    }
}
