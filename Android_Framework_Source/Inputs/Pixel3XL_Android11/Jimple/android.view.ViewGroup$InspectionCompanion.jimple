public final class android.view.ViewGroup$InspectionCompanion extends java.lang.Object implements android.view.inspector.InspectionCompanion
{
    private int mAddStatesFromChildrenId;
    private int mAlwaysDrawnWithCacheId;
    private int mAnimationCacheId;
    private int mClipChildrenId;
    private int mClipToPaddingId;
    private int mDescendantFocusabilityId;
    private int mLayoutAnimationId;
    private int mLayoutModeId;
    private int mPersistentDrawingCacheId;
    private boolean mPropertiesMapped;
    private int mSplitMotionEventsId;
    private int mTouchscreenBlocksFocusId;
    private int mTransitionGroupId;

    public void <init>()
    {
        android.view.ViewGroup$InspectionCompanion r0;

        r0 := @this: android.view.ViewGroup$InspectionCompanion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.ViewGroup$InspectionCompanion: boolean mPropertiesMapped> = 0;

        return;
    }

    public void mapProperties(android.view.inspector.PropertyMapper)
    {
        android.view.ViewGroup$InspectionCompanion r0;
        android.view.inspector.PropertyMapper r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.util.SparseArray $r2, $r5, $r8;
        android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI $r4, $r7, $r10;

        r0 := @this: android.view.ViewGroup$InspectionCompanion;

        r1 := @parameter0: android.view.inspector.PropertyMapper;

        $i0 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("addStatesFromChildren", 16842992);

        r0.<android.view.ViewGroup$InspectionCompanion: int mAddStatesFromChildrenId> = $i0;

        $i1 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("alwaysDrawnWithCache", 16842991);

        r0.<android.view.ViewGroup$InspectionCompanion: int mAlwaysDrawnWithCacheId> = $i1;

        $i2 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("animationCache", 16842989);

        r0.<android.view.ViewGroup$InspectionCompanion: int mAnimationCacheId> = $i2;

        $i3 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("clipChildren", 16842986);

        r0.<android.view.ViewGroup$InspectionCompanion: int mClipChildrenId> = $i3;

        $i4 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("clipToPadding", 16842987);

        r0.<android.view.ViewGroup$InspectionCompanion: int mClipToPaddingId> = $i4;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(131072, "beforeDescendants");

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(262144, "afterDescendants");

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(393216, "blocksDescendants");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r4.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r2);

        $i5 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("descendantFocusability", 16842993, $r4);

        r0.<android.view.ViewGroup$InspectionCompanion: int mDescendantFocusabilityId> = $i5;

        $i6 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("layoutAnimation", 16842988);

        r0.<android.view.ViewGroup$InspectionCompanion: int mLayoutAnimationId> = $i6;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "clipBounds");

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "opticalBounds");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        $r7 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r7.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r5);

        $i7 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("layoutMode", 16843738, $r7);

        r0.<android.view.ViewGroup$InspectionCompanion: int mLayoutModeId> = $i7;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "none");

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "animation");

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "scrolling");

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(3, "all");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r8);

        $r10 = new android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r10.<android.view._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r8);

        $i8 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("persistentDrawingCache", 16842990, $r10);

        r0.<android.view.ViewGroup$InspectionCompanion: int mPersistentDrawingCacheId> = $i8;

        $i9 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("splitMotionEvents", 16843503);

        r0.<android.view.ViewGroup$InspectionCompanion: int mSplitMotionEventsId> = $i9;

        $i10 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("touchscreenBlocksFocus", 16843919);

        r0.<android.view.ViewGroup$InspectionCompanion: int mTouchscreenBlocksFocusId> = $i10;

        $i11 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("transitionGroup", 16843777);

        r0.<android.view.ViewGroup$InspectionCompanion: int mTransitionGroupId> = $i11;

        r0.<android.view.ViewGroup$InspectionCompanion: boolean mPropertiesMapped> = 1;

        return;
    }

    public void readProperties(android.view.ViewGroup, android.view.inspector.PropertyReader)
    {
        android.view.ViewGroup$InspectionCompanion r0;
        android.view.ViewGroup r1;
        android.view.inspector.PropertyReader r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.view.inspector.InspectionCompanion$UninitializedPropertyMapException $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        android.view.animation.LayoutAnimationController $r4;

        r0 := @this: android.view.ViewGroup$InspectionCompanion;

        r1 := @parameter0: android.view.ViewGroup;

        r2 := @parameter1: android.view.inspector.PropertyReader;

        $z0 = r0.<android.view.ViewGroup$InspectionCompanion: boolean mPropertiesMapped>;

        if $z0 == 0 goto label1;

        $i0 = r0.<android.view.ViewGroup$InspectionCompanion: int mAddStatesFromChildrenId>;

        $z1 = virtualinvoke r1.<android.view.ViewGroup: boolean addStatesFromChildren()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i0, $z1);

        $i1 = r0.<android.view.ViewGroup$InspectionCompanion: int mAlwaysDrawnWithCacheId>;

        $z2 = virtualinvoke r1.<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i1, $z2);

        $i2 = r0.<android.view.ViewGroup$InspectionCompanion: int mAnimationCacheId>;

        $z3 = virtualinvoke r1.<android.view.ViewGroup: boolean isAnimationCacheEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i2, $z3);

        $i3 = r0.<android.view.ViewGroup$InspectionCompanion: int mClipChildrenId>;

        $z4 = virtualinvoke r1.<android.view.ViewGroup: boolean getClipChildren()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i3, $z4);

        $i4 = r0.<android.view.ViewGroup$InspectionCompanion: int mClipToPaddingId>;

        $z5 = virtualinvoke r1.<android.view.ViewGroup: boolean getClipToPadding()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i4, $z5);

        $i5 = r0.<android.view.ViewGroup$InspectionCompanion: int mDescendantFocusabilityId>;

        $i6 = virtualinvoke r1.<android.view.ViewGroup: int getDescendantFocusability()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i5, $i6);

        $i7 = r0.<android.view.ViewGroup$InspectionCompanion: int mLayoutAnimationId>;

        $r4 = virtualinvoke r1.<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i7, $r4);

        $i8 = r0.<android.view.ViewGroup$InspectionCompanion: int mLayoutModeId>;

        $i9 = virtualinvoke r1.<android.view.ViewGroup: int getLayoutMode()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i8, $i9);

        $i10 = r0.<android.view.ViewGroup$InspectionCompanion: int mPersistentDrawingCacheId>;

        $i11 = virtualinvoke r1.<android.view.ViewGroup: int getPersistentDrawingCache()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i10, $i11);

        $i12 = r0.<android.view.ViewGroup$InspectionCompanion: int mSplitMotionEventsId>;

        $z6 = virtualinvoke r1.<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i12, $z6);

        $i13 = r0.<android.view.ViewGroup$InspectionCompanion: int mTouchscreenBlocksFocusId>;

        $z7 = virtualinvoke r1.<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i13, $z7);

        $i14 = r0.<android.view.ViewGroup$InspectionCompanion: int mTransitionGroupId>;

        $z8 = virtualinvoke r1.<android.view.ViewGroup: boolean isTransitionGroup()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i14, $z8);

        return;

     label1:
        $r3 = new android.view.inspector.InspectionCompanion$UninitializedPropertyMapException;

        specialinvoke $r3.<android.view.inspector.InspectionCompanion$UninitializedPropertyMapException: void <init>()>();

        throw $r3;
    }

    public volatile void readProperties(java.lang.Object, android.view.inspector.PropertyReader)
    {
        android.view.ViewGroup$InspectionCompanion r0;
        java.lang.Object r1;
        android.view.inspector.PropertyReader r2;
        android.view.ViewGroup $r3;

        r0 := @this: android.view.ViewGroup$InspectionCompanion;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: android.view.inspector.PropertyReader;

        $r3 = (android.view.ViewGroup) r1;

        virtualinvoke r0.<android.view.ViewGroup$InspectionCompanion: void readProperties(android.view.ViewGroup,android.view.inspector.PropertyReader)>($r3, r2);

        return;
    }
}
