public abstract class android.view.ViewGroup extends android.view.View implements android.view.ViewParent, android.view.ViewManager
{
    private static final int ARRAY_CAPACITY_INCREMENT;
    private static final int ARRAY_INITIAL_CAPACITY;
    private static final int CHILD_LEFT_INDEX;
    private static final int CHILD_TOP_INDEX;
    protected static final int CLIP_TO_PADDING_MASK;
    private static final boolean DBG;
    private static final int[] DESCENDANT_FOCUSABILITY_FLAGS;
    private static final int FLAG_ADD_STATES_FROM_CHILDREN;
    private static final int FLAG_ALWAYS_DRAWN_WITH_CACHE;
    private static final int FLAG_ANIMATION_CACHE;
    static final int FLAG_ANIMATION_DONE;
    private static final int FLAG_CHILDREN_DRAWN_WITH_CACHE;
    static final int FLAG_CLEAR_TRANSFORMATION;
    static final int FLAG_CLIP_CHILDREN;
    private static final int FLAG_CLIP_TO_PADDING;
    protected static final int FLAG_DISALLOW_INTERCEPT;
    static final int FLAG_INVALIDATE_REQUIRED;
    static final int FLAG_IS_TRANSITION_GROUP;
    static final int FLAG_IS_TRANSITION_GROUP_SET;
    private static final int FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET;
    private static final int FLAG_MASK_FOCUSABILITY;
    private static final int FLAG_NOTIFY_ANIMATION_LISTENER;
    private static final int FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE;
    static final int FLAG_OPTIMIZE_INVALIDATE;
    private static final int FLAG_PADDING_NOT_NULL;
    private static final int FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
    private static final int FLAG_RUN_ANIMATION;
    private static final int FLAG_SHOW_CONTEXT_MENU_WITH_COORDS;
    private static final int FLAG_SPLIT_MOTION_EVENTS;
    private static final int FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED;
    private static final int FLAG_START_ACTION_MODE_FOR_CHILD_IS_TYPED;
    protected static final int FLAG_SUPPORT_STATIC_TRANSFORMATIONS;
    static final int FLAG_TOUCHSCREEN_BLOCKS_FOCUS;
    protected static final int FLAG_USE_CHILD_DRAWING_ORDER;
    public static final int FOCUS_AFTER_DESCENDANTS;
    public static final int FOCUS_BEFORE_DESCENDANTS;
    public static final int FOCUS_BLOCK_DESCENDANTS;
    public static final int LAYOUT_MODE_CLIP_BOUNDS;
    public static int LAYOUT_MODE_DEFAULT;
    public static final int LAYOUT_MODE_OPTICAL_BOUNDS;
    private static final int LAYOUT_MODE_UNDEFINED;
    public static final int PERSISTENT_ALL_CACHES;
    public static final int PERSISTENT_ANIMATION_CACHE;
    public static final int PERSISTENT_NO_CACHE;
    public static final int PERSISTENT_SCROLLING_CACHE;
    private static final android.view.ActionMode SENTINEL_ACTION_MODE;
    private static final java.lang.String TAG;
    private static float[] sDebugLines;
    private android.view.animation.Animation$AnimationListener mAnimationListener;
    android.graphics.Paint mCachePaint;
    private int mChildCountWithTransientState;
    private android.view.animation.Transformation mChildTransformation;
    int mChildUnhandledKeyListeners;
    private android.view.View[] mChildren;
    private int mChildrenCount;
    private java.util.HashSet mChildrenInterestedInDrag;
    private android.view.View mCurrentDragChild;
    private android.view.DragEvent mCurrentDragStartEvent;
    private android.view.View mDefaultFocus;
    protected java.util.ArrayList mDisappearingChildren;
    private android.view.ViewGroup$HoverTarget mFirstHoverTarget;
    private android.view.ViewGroup$TouchTarget mFirstTouchTarget;
    private android.view.View mFocused;
    android.view.View mFocusedInCluster;
    protected int mGroupFlags;
    private boolean mHoveredSelf;
    private int mInsetsAnimationDispatchMode;
    android.graphics.RectF mInvalidateRegion;
    android.view.animation.Transformation mInvalidationTransformation;
    private boolean mIsInterestedInDrag;
    private int mLastTouchDownIndex;
    private long mLastTouchDownTime;
    private float mLastTouchDownX;
    private float mLastTouchDownY;
    private android.view.animation.LayoutAnimationController mLayoutAnimationController;
    private boolean mLayoutCalledWhileSuppressed;
    private int mLayoutMode;
    private android.animation.LayoutTransition$TransitionListener mLayoutTransitionListener;
    private android.graphics.PointF mLocalPoint;
    private int mNestedScrollAxes;
    protected android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener;
    protected int mPersistentDrawingCache;
    private java.util.ArrayList mPreSortedChildren;
    boolean mSuppressLayout;
    private int[] mTempLocation;
    private android.graphics.Point mTempPoint;
    private float[] mTempPosition;
    private android.graphics.Rect mTempRect;
    private android.view.View mTooltipHoverTarget;
    private boolean mTooltipHoveredSelf;
    private java.util.List mTransientIndices;
    private java.util.List mTransientViews;
    private android.animation.LayoutTransition mTransition;
    private java.util.ArrayList mTransitioningViews;
    private java.util.ArrayList mVisibilityChangingChildren;

    static void <clinit>()
    {
        int[] $r0;
        android.view.ViewGroup$1 $r1;

        <android.view.ViewGroup: java.lang.String TAG> = "ViewGroup";

        <android.view.ViewGroup: int PERSISTENT_SCROLLING_CACHE> = 2;

        <android.view.ViewGroup: int PERSISTENT_NO_CACHE> = 0;

        <android.view.ViewGroup: int PERSISTENT_ANIMATION_CACHE> = 1;

        <android.view.ViewGroup: int PERSISTENT_ALL_CACHES> = 3;

        <android.view.ViewGroup: int LAYOUT_MODE_UNDEFINED> = -1;

        <android.view.ViewGroup: int LAYOUT_MODE_OPTICAL_BOUNDS> = 1;

        <android.view.ViewGroup: int LAYOUT_MODE_CLIP_BOUNDS> = 0;

        <android.view.ViewGroup: int FOCUS_BLOCK_DESCENDANTS> = 393216;

        <android.view.ViewGroup: int FOCUS_BEFORE_DESCENDANTS> = 131072;

        <android.view.ViewGroup: int FOCUS_AFTER_DESCENDANTS> = 262144;

        <android.view.ViewGroup: int FLAG_USE_CHILD_DRAWING_ORDER> = 1024;

        <android.view.ViewGroup: int FLAG_TOUCHSCREEN_BLOCKS_FOCUS> = 67108864;

        <android.view.ViewGroup: int FLAG_SUPPORT_STATIC_TRANSFORMATIONS> = 2048;

        <android.view.ViewGroup: int FLAG_START_ACTION_MODE_FOR_CHILD_IS_TYPED> = 134217728;

        <android.view.ViewGroup: int FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED> = 268435456;

        <android.view.ViewGroup: int FLAG_SPLIT_MOTION_EVENTS> = 2097152;

        <android.view.ViewGroup: int FLAG_SHOW_CONTEXT_MENU_WITH_COORDS> = 536870912;

        <android.view.ViewGroup: int FLAG_RUN_ANIMATION> = 8;

        <android.view.ViewGroup: int FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW> = 4194304;

        <android.view.ViewGroup: int FLAG_PADDING_NOT_NULL> = 32;

        <android.view.ViewGroup: int FLAG_OPTIMIZE_INVALIDATE> = 128;

        <android.view.ViewGroup: int FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE> = 65536;

        <android.view.ViewGroup: int FLAG_NOTIFY_ANIMATION_LISTENER> = 512;

        <android.view.ViewGroup: int FLAG_MASK_FOCUSABILITY> = 393216;

        <android.view.ViewGroup: int FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET> = 8388608;

        <android.view.ViewGroup: int FLAG_IS_TRANSITION_GROUP_SET> = 33554432;

        <android.view.ViewGroup: int FLAG_IS_TRANSITION_GROUP> = 16777216;

        <android.view.ViewGroup: int FLAG_INVALIDATE_REQUIRED> = 4;

        <android.view.ViewGroup: int FLAG_DISALLOW_INTERCEPT> = 524288;

        <android.view.ViewGroup: int FLAG_CLIP_TO_PADDING> = 2;

        <android.view.ViewGroup: int FLAG_CLIP_CHILDREN> = 1;

        <android.view.ViewGroup: int FLAG_CLEAR_TRANSFORMATION> = 256;

        <android.view.ViewGroup: int FLAG_CHILDREN_DRAWN_WITH_CACHE> = 32768;

        <android.view.ViewGroup: int FLAG_ANIMATION_DONE> = 16;

        <android.view.ViewGroup: int FLAG_ANIMATION_CACHE> = 64;

        <android.view.ViewGroup: int FLAG_ALWAYS_DRAWN_WITH_CACHE> = 16384;

        <android.view.ViewGroup: int FLAG_ADD_STATES_FROM_CHILDREN> = 8192;

        <android.view.ViewGroup: boolean DBG> = 0;

        <android.view.ViewGroup: int CLIP_TO_PADDING_MASK> = 34;

        <android.view.ViewGroup: int CHILD_TOP_INDEX> = 1;

        <android.view.ViewGroup: int CHILD_LEFT_INDEX> = 0;

        <android.view.ViewGroup: int ARRAY_INITIAL_CAPACITY> = 12;

        <android.view.ViewGroup: int ARRAY_CAPACITY_INCREMENT> = 12;

        $r0 = newarray (int)[3];

        $r0[0] = 131072;

        $r0[1] = 262144;

        $r0[2] = 393216;

        <android.view.ViewGroup: int[] DESCENDANT_FOCUSABILITY_FLAGS> = $r0;

        <android.view.ViewGroup: int LAYOUT_MODE_DEFAULT> = 0;

        $r1 = new android.view.ViewGroup$1;

        specialinvoke $r1.<android.view.ViewGroup$1: void <init>()>();

        <android.view.ViewGroup: android.view.ActionMode SENTINEL_ACTION_MODE> = $r1;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.view.ViewGroup r0;
        android.content.Context r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.view.ViewGroup r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.view.ViewGroup r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.view.ViewGroup r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0, i1;
        android.view.ViewGroup$4 $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, i1);

        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = -1;

        r0.<android.view.ViewGroup: int mLayoutMode> = -1;

        r0.<android.view.ViewGroup: boolean mSuppressLayout> = 0;

        r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed> = 0;

        r0.<android.view.ViewGroup: int mChildCountWithTransientState> = 0;

        r0.<android.view.ViewGroup: java.util.List mTransientIndices> = null;

        r0.<android.view.ViewGroup: java.util.List mTransientViews> = null;

        r0.<android.view.ViewGroup: int mChildUnhandledKeyListeners> = 0;

        r0.<android.view.ViewGroup: int mInsetsAnimationDispatchMode> = 1;

        $r3 = new android.view.ViewGroup$4;

        specialinvoke $r3.<android.view.ViewGroup$4: void <init>(android.view.ViewGroup)>(r0);

        r0.<android.view.ViewGroup: android.animation.LayoutTransition$TransitionListener mLayoutTransitionListener> = $r3;

        specialinvoke r0.<android.view.ViewGroup: void initViewGroup()>();

        specialinvoke r0.<android.view.ViewGroup: void initFromAttributes(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, i1);

        return;
    }

    static void access$000(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;

        r0 := @parameter0: android.view.ViewGroup;

        specialinvoke r0.<android.view.ViewGroup: void notifyAnimationListener()>();

        return;
    }

    static android.view.animation.LayoutAnimationController access$100(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;
        android.view.animation.LayoutAnimationController $r1;

        r0 := @parameter0: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        return $r1;
    }

    static android.view.animation.Animation$AnimationListener access$200(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;
        android.view.animation.Animation$AnimationListener $r1;

        r0 := @parameter0: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener>;

        return $r1;
    }

    static boolean access$300(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;
        boolean $z0;

        r0 := @parameter0: android.view.ViewGroup;

        $z0 = r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed>;

        return $z0;
    }

    static boolean access$302(android.view.ViewGroup, boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewGroup;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed> = z0;

        return z0;
    }

    static java.util.ArrayList access$400(android.view.ViewGroup)
    {
        android.view.ViewGroup r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        return $r1;
    }

    static void access$500(android.graphics.Canvas, int, int, int, int, int, int, int, int, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        android.graphics.Paint r1;

        r0 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        i5 := @parameter6: int;

        i6 := @parameter7: int;

        i7 := @parameter8: int;

        r1 := @parameter9: android.graphics.Paint;

        staticinvoke <android.view.ViewGroup: void fillDifference(android.graphics.Canvas,int,int,int,int,int,int,int,int,android.graphics.Paint)>(r0, i0, i1, i2, i3, i4, i5, i6, i7, r1);

        return;
    }

    private void addDisappearingView(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        java.util.ArrayList r2, $r3, r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        r4 = r2;

        if r2 != null goto label1;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r4 = $r3;

        r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren> = $r3;

     label1:
        virtualinvoke r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    private void addInArray(android.view.View, int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        java.lang.StringBuilder $r1;
        java.lang.IndexOutOfBoundsException $r6;
        java.lang.String $r7;
        android.view.View[] $r8, r10, r11, r12, r13;
        android.view.View r9;

        r0 := @this: android.view.ViewGroup;

        r9 := @parameter0: android.view.View;

        i11 := @parameter1: int;

        r10 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i12 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i0 = lengthof r10;

        if i11 != i12 goto label2;

        r11 = r10;

        if i0 != i12 goto label1;

        $i10 = i0 + 12;

        r12 = newarray (android.view.View)[$i10];

        r0.<android.view.ViewGroup: android.view.View[] mChildren> = r12;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r12, 0, i0);

        r11 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

     label1:
        i13 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i9 = i13 + 1;

        r0.<android.view.ViewGroup: int mChildrenCount> = $i9;

        r11[i13] = r9;

        goto label5;

     label2:
        if i11 >= i12 goto label6;

        if i0 != i12 goto label3;

        $i6 = i0 + 12;

        r13 = newarray (android.view.View)[$i6];

        r0.<android.view.ViewGroup: android.view.View[] mChildren> = r13;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r13, 0, i11);

        $r8 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $i8 = i11 + 1;

        $i7 = i12 - i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, i11, $r8, $i8, $i7);

        r10 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        goto label4;

     label3:
        $i2 = i11 + 1;

        $i1 = i12 - i11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, i11, r10, $i2, $i1);

     label4:
        r10[i11] = r9;

        $i3 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i4 = $i3 + 1;

        r0.<android.view.ViewGroup: int mChildrenCount> = $i4;

        i14 = r0.<android.view.ViewGroup: int mLastTouchDownIndex>;

        if i14 < i11 goto label5;

        $i5 = i14 + 1;

        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = $i5;

     label5:
        return;

     label6:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("index=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r6 = new java.lang.IndexOutOfBoundsException;

        $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    private android.view.ViewGroup$TouchTarget addTouchTarget(android.view.View, int)
    {
        android.view.ViewGroup r0;
        int i0;
        android.view.ViewGroup$TouchTarget $r1, r3;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        r2 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r3 = staticinvoke <android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget obtain(android.view.View,int)>(r2, i0);

        $r1 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        r3.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next> = $r1;

        r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget> = r3;

        return r3;
    }

    private void addViewInner(android.view.View, int, android.view.ViewGroup$LayoutParams, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r12;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15;
        android.view.ViewParent $r2;
        java.lang.IllegalStateException $r3;
        boolean $z0, $z1, $z2, $z3, $z5, z6, z7, $z8, $z9;
        android.view.DragEvent $r4;
        java.util.List $r5, $r8, r18;
        java.lang.Object $r6;
        java.lang.Integer $r7, $r9;
        android.view.View$AttachInfo $r11, r17;
        android.view.ViewGroup$LayoutParams r13, r16;
        android.animation.LayoutTransition r14, r15;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i13 := @parameter1: int;

        r13 := @parameter2: android.view.ViewGroup$LayoutParams;

        z6 := @parameter3: boolean;

        r14 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if r14 == null goto label01;

        virtualinvoke r14.<android.animation.LayoutTransition: void cancel(int)>(3);

     label01:
        $r2 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        if $r2 != null goto label22;

        r15 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if r15 == null goto label02;

        virtualinvoke r15.<android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)>(r0, r1);

     label02:
        r16 = r13;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>(r13);

        if $z0 != 0 goto label03;

        r16 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>(r13);

     label03:
        if z6 == 0 goto label04;

        r1.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams> = r16;

        goto label05;

     label04:
        virtualinvoke r1.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r16);

     label05:
        i14 = i13;

        if i13 >= 0 goto label06;

        i14 = r0.<android.view.ViewGroup: int mChildrenCount>;

     label06:
        specialinvoke r0.<android.view.ViewGroup: void addInArray(android.view.View,int)>(r1, i14);

        if z6 == 0 goto label07;

        virtualinvoke r1.<android.view.View: void assignParent(android.view.ViewParent)>(r0);

        goto label08;

     label07:
        r1.<android.view.View: android.view.ViewParent mParent> = r0;

     label08:
        $z1 = virtualinvoke r1.<android.view.View: boolean hasUnhandledKeyListener()>();

        if $z1 == 0 goto label09;

        virtualinvoke r0.<android.view.ViewGroup: void incrementChildUnhandledKeyListeners()>();

     label09:
        $z2 = virtualinvoke r1.<android.view.View: boolean hasFocus()>();

        if $z2 == 0 goto label10;

        $r12 = virtualinvoke r1.<android.view.View: android.view.View findFocus()>();

        virtualinvoke r0.<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>(r1, $r12);

     label10:
        r17 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if r17 == null goto label12;

        $i9 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i10 = $i9 & 4194304;

        if $i10 != 0 goto label12;

        z7 = r17.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        r17.<android.view.View$AttachInfo: boolean mKeepScreenOn> = 0;

        $r11 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        $i11 = r0.<android.view.ViewGroup: int mViewFlags>;

        $i12 = $i11 & 12;

        virtualinvoke r1.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>($r11, $i12);

        $z5 = r17.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z5 == 0 goto label11;

        virtualinvoke r0.<android.view.ViewGroup: void needGlobalAttributesUpdate(boolean)>(1);

     label11:
        r17.<android.view.View$AttachInfo: boolean mKeepScreenOn> = z7;

     label12:
        $z8 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z8 == 0 goto label13;

        virtualinvoke r1.<android.view.View: void resetRtlProperties()>();

     label13:
        virtualinvoke r0.<android.view.ViewGroup: void dispatchViewAdded(android.view.View)>(r1);

        $i2 = r1.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 4194304;

        if $i3 != 4194304 goto label14;

        $i7 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i8 = $i7 | 65536;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i8;

     label14:
        $z3 = virtualinvoke r1.<android.view.View: boolean hasTransientState()>();

        if $z3 == 0 goto label15;

        virtualinvoke r0.<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>(r1, 1);

     label15:
        $i4 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i4 == 8 goto label16;

        virtualinvoke r0.<android.view.ViewGroup: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label16:
        r18 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        if r18 == null goto label19;

        i0 = interfaceinvoke r18.<java.util.List: int size()>();

        i15 = 0;

     label17:
        if i15 >= i0 goto label19;

        $r5 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i15);

        $r7 = (java.lang.Integer) $r6;

        i1 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

        if i14 > i1 goto label18;

        $r8 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        $i6 = i1 + 1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        interfaceinvoke $r8.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i15, $r9);

     label18:
        i15 = i15 + 1;

        goto label17;

     label19:
        $r4 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        if $r4 == null goto label20;

        $i5 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i5 != 0 goto label20;

        virtualinvoke r0.<android.view.ViewGroup: boolean notifyChildOfDragStart(android.view.View)>(r1);

     label20:
        $z9 = virtualinvoke r1.<android.view.View: boolean hasDefaultFocus()>();

        if $z9 == 0 goto label21;

        virtualinvoke r0.<android.view.ViewGroup: void setDefaultFocus(android.view.View)>(r1);

     label21:
        specialinvoke r0.<android.view.ViewGroup: void touchAccessibilityNodeProviderIfNeeded(android.view.View)>(r1);

        return;

     label22:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The specified child already has a parent. You must call removeView() on the child\'s parent first.");

        throw $r3;
    }

    private static void applyOpToRegionByBounds(android.graphics.Region, android.view.View, android.graphics.Region$Op)
    {
        android.graphics.Region r0;
        android.view.View r1;
        android.graphics.Region$Op r2;
        int[] r3;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @parameter0: android.graphics.Region;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: android.graphics.Region$Op;

        r3 = newarray (int)[2];

        virtualinvoke r1.<android.view.View: void getLocationInWindow(int[])>(r3);

        i0 = r3[0];

        i1 = r3[1];

        $i2 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $i3 = i0 + $i2;

        $i4 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i5 = i1 + $i4;

        virtualinvoke r0.<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>(i0, i1, $i3, $i5, r2);

        return;
    }

    private void bindLayoutAnimation(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.animation.LayoutAnimationController $r2;
        android.view.animation.Animation $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        $r3 = virtualinvoke $r2.<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>(r1);

        virtualinvoke r1.<android.view.View: void setAnimation(android.view.animation.Animation)>($r3);

        return;
    }

    private android.view.WindowInsets brokenDispatchApplyWindowInsets(android.view.WindowInsets)
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View $r1;
        boolean $z0;
        android.view.WindowInsets r2, r3;

        r0 := @this: android.view.ViewGroup;

        r2 := @parameter0: android.view.WindowInsets;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        r3 = r2;

        if i1 >= i0 goto label3;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        r2 = virtualinvoke $r1.<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>(r2);

        $z0 = virtualinvoke r2.<android.view.WindowInsets: boolean isConsumed()>();

        if $z0 == 0 goto label2;

        r3 = r2;

        goto label3;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return r3;
    }

    private void cancelAndClearTouchTargets(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        long l0;
        android.view.ViewGroup$TouchTarget $r1, r6;
        android.view.View $r2, $r3;
        int $i1;
        android.view.MotionEvent r4, r5;
        boolean z2;

        r0 := @this: android.view.ViewGroup;

        r4 := @parameter0: android.view.MotionEvent;

        $r1 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if $r1 == null goto label4;

        z2 = 0;

        r5 = r4;

        if r4 != null goto label1;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r5 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l0, l0, 3, 0.0F, 0.0F, 0);

        virtualinvoke r5.<android.view.MotionEvent: void setSource(int)>(4098);

        z2 = 1;

     label1:
        r6 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label2:
        if r6 == null goto label3;

        $r2 = r6.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        staticinvoke <android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>($r2);

        $r3 = r6.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        $i1 = r6.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedTouchEvent(android.view.MotionEvent,boolean,android.view.View,int)>(r5, 1, $r3, $i1);

        r6 = r6.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        goto label2;

     label3:
        specialinvoke r0.<android.view.ViewGroup: void clearTouchTargets()>();

        if z2 == 0 goto label4;

        virtualinvoke r5.<android.view.MotionEvent: void recycle()>();

     label4:
        return;
    }

    private void cancelHoverTarget(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        android.view.ViewGroup$HoverTarget r2, r4, r5;
        long l0;
        android.view.MotionEvent r6;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r4 = null;

        r5 = r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget>;

     label1:
        if r5 == null goto label5;

        r2 = r5.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next>;

        $r3 = r5.<android.view.ViewGroup$HoverTarget: android.view.View child>;

        if $r3 != r1 goto label4;

        if r4 != null goto label2;

        r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget> = r2;

        goto label3;

     label2:
        r4.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next> = r2;

     label3:
        virtualinvoke r5.<android.view.ViewGroup$HoverTarget: void recycle()>();

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r6 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l0, l0, 10, 0.0F, 0.0F, 0);

        virtualinvoke r6.<android.view.MotionEvent: void setSource(int)>(4098);

        virtualinvoke r1.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r6);

        virtualinvoke r6.<android.view.MotionEvent: void recycle()>();

        return;

     label4:
        r4 = r5;

        r5 = r2;

        goto label1;

     label5:
        return;
    }

    private void cancelTouchTarget(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        android.view.ViewGroup$TouchTarget r2, r4, r5;
        long l0;
        android.view.MotionEvent r6;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r4 = null;

        r5 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label1:
        if r5 == null goto label5;

        r2 = r5.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        $r3 = r5.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        if $r3 != r1 goto label4;

        if r4 != null goto label2;

        r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget> = r2;

        goto label3;

     label2:
        r4.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next> = r2;

     label3:
        virtualinvoke r5.<android.view.ViewGroup$TouchTarget: void recycle()>();

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r6 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l0, l0, 3, 0.0F, 0.0F, 0);

        virtualinvoke r6.<android.view.MotionEvent: void setSource(int)>(4098);

        virtualinvoke r1.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r6);

        virtualinvoke r6.<android.view.MotionEvent: void recycle()>();

        return;

     label4:
        r4 = r5;

        r5 = r2;

        goto label1;

     label5:
        return;
    }

    private void clearCachedLayoutMode()
    {
        android.view.ViewGroup r0;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean hasBooleanFlag(int)>(8388608);

        if $z0 != 0 goto label1;

        r0.<android.view.ViewGroup: int mLayoutMode> = -1;

     label1:
        return;
    }

    private void clearTouchTargets()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$TouchTarget r1, r2;

        r0 := @this: android.view.ViewGroup;

        r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if r2 == null goto label2;

     label1:
        r1 = r2.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        virtualinvoke r2.<android.view.ViewGroup$TouchTarget: void recycle()>();

        r2 = r1;

        if r1 != null goto label1;

        r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget> = null;

     label2:
        return;
    }

    private android.view.PointerIcon dispatchResolvePointerIcon(android.view.MotionEvent, int, android.view.View)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.MotionEvent r1, r2;
        float f0, f1, $f2, $f3;
        boolean $z0;
        android.view.View r3;
        android.view.PointerIcon r4, r5;

        r0 := @this: android.view.ViewGroup;

        r2 := @parameter0: android.view.MotionEvent;

        i0 := @parameter1: int;

        r3 := @parameter2: android.view.View;

        $z0 = virtualinvoke r3.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label1;

        r1 = specialinvoke r0.<android.view.ViewGroup: android.view.MotionEvent getTransformedMotionEvent(android.view.MotionEvent,android.view.View)>(r2, r3);

        r4 = virtualinvoke r3.<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>(r1, i0);

        virtualinvoke r1.<android.view.MotionEvent: void recycle()>();

        goto label2;

     label1:
        $i2 = r0.<android.view.ViewGroup: int mScrollX>;

        $i1 = r3.<android.view.View: int mLeft>;

        $i3 = $i2 - $i1;

        f0 = (float) $i3;

        $i5 = r0.<android.view.ViewGroup: int mScrollY>;

        $i4 = r3.<android.view.View: int mTop>;

        $i6 = $i5 - $i4;

        f1 = (float) $i6;

        virtualinvoke r2.<android.view.MotionEvent: void offsetLocation(float,float)>(f0, f1);

        r5 = virtualinvoke r3.<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>(r2, i0);

        $f3 = neg f0;

        $f2 = neg f1;

        virtualinvoke r2.<android.view.MotionEvent: void offsetLocation(float,float)>($f3, $f2);

        r4 = r5;

     label2:
        return r4;
    }

    private boolean dispatchTooltipHoverEvent(android.view.MotionEvent, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        float f0, f1, $f2, $f3;
        boolean $z0, z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.MotionEvent r2, r3;

        r0 := @this: android.view.ViewGroup;

        r2 := @parameter0: android.view.MotionEvent;

        r1 := @parameter1: android.view.View;

        $z0 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label1;

        r3 = specialinvoke r0.<android.view.ViewGroup: android.view.MotionEvent getTransformedMotionEvent(android.view.MotionEvent,android.view.View)>(r2, r1);

        z1 = virtualinvoke r1.<android.view.View: boolean dispatchTooltipHoverEvent(android.view.MotionEvent)>(r3);

        virtualinvoke r3.<android.view.MotionEvent: void recycle()>();

        goto label2;

     label1:
        $i1 = r0.<android.view.ViewGroup: int mScrollX>;

        $i0 = r1.<android.view.View: int mLeft>;

        $i2 = $i1 - $i0;

        f0 = (float) $i2;

        $i4 = r0.<android.view.ViewGroup: int mScrollY>;

        $i3 = r1.<android.view.View: int mTop>;

        $i5 = $i4 - $i3;

        f1 = (float) $i5;

        virtualinvoke r2.<android.view.MotionEvent: void offsetLocation(float,float)>(f0, f1);

        z1 = virtualinvoke r1.<android.view.View: boolean dispatchTooltipHoverEvent(android.view.MotionEvent)>(r2);

        $f3 = neg f0;

        $f2 = neg f1;

        virtualinvoke r2.<android.view.MotionEvent: void offsetLocation(float,float)>($f3, $f2);

     label2:
        return z1;
    }

    private boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        float f0, f1, $f2, $f3;
        boolean $z0, z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.MotionEvent r2, r3;

        r0 := @this: android.view.ViewGroup;

        r2 := @parameter0: android.view.MotionEvent;

        r1 := @parameter1: android.view.View;

        $z0 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label1;

        r3 = specialinvoke r0.<android.view.ViewGroup: android.view.MotionEvent getTransformedMotionEvent(android.view.MotionEvent,android.view.View)>(r2, r1);

        z1 = virtualinvoke r1.<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r3);

        virtualinvoke r3.<android.view.MotionEvent: void recycle()>();

        goto label2;

     label1:
        $i1 = r0.<android.view.ViewGroup: int mScrollX>;

        $i0 = r1.<android.view.View: int mLeft>;

        $i2 = $i1 - $i0;

        f0 = (float) $i2;

        $i4 = r0.<android.view.ViewGroup: int mScrollY>;

        $i3 = r1.<android.view.View: int mTop>;

        $i5 = $i4 - $i3;

        f1 = (float) $i5;

        virtualinvoke r2.<android.view.MotionEvent: void offsetLocation(float,float)>(f0, f1);

        z1 = virtualinvoke r1.<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r2);

        $f3 = neg f0;

        $f2 = neg f1;

        virtualinvoke r2.<android.view.MotionEvent: void offsetLocation(float,float)>($f3, $f2);

     label2:
        return z1;
    }

    private void dispatchTransformedScrollCaptureSearch(android.view.View, android.graphics.Rect, android.graphics.Point, java.util.Queue)
    {
        android.view.ViewGroup r0, $r7;
        android.view.View r1;
        android.graphics.Point r2, r9;
        java.util.Queue r3;
        android.graphics.Rect r4, $r5, $r6, r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19;
        boolean $z0, $z1, $z2, z3, z4, z5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r8 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.Point;

        r3 := @parameter3: java.util.Queue;

        r4 = specialinvoke r0.<android.view.ViewGroup: android.graphics.Rect getTempRect()>();

        virtualinvoke r4.<android.graphics.Rect: void set(android.graphics.Rect)>(r8);

        r9 = specialinvoke r0.<android.view.ViewGroup: android.graphics.Point getTempPoint()>();

        $i2 = r2.<android.graphics.Point: int x>;

        $i1 = r2.<android.graphics.Point: int y>;

        virtualinvoke r9.<android.graphics.Point: void set(int,int)>($i2, $i1);

        $i4 = r1.<android.view.View: int mLeft>;

        $i3 = r0.<android.view.ViewGroup: int mScrollX>;

        i19 = $i4 - $i3;

        $i6 = r1.<android.view.View: int mTop>;

        $i5 = r0.<android.view.ViewGroup: int mScrollY>;

        i0 = $i6 - $i5;

        $i8 = neg i19;

        $i7 = neg i0;

        virtualinvoke r4.<android.graphics.Rect: void offset(int,int)>($i8, $i7);

        virtualinvoke r9.<android.graphics.Point: void offset(int,int)>(i19, i0);

        z3 = 1;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean getClipChildren()>();

        if $z0 == 0 goto label1;

        $i17 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $i18 = virtualinvoke r1.<android.view.View: int getHeight()>();

        z3 = virtualinvoke r4.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i17, $i18);

     label1:
        z4 = z3;

        if z3 == 0 goto label2;

        z4 = z3;

        $z1 = r1 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label2;

        z4 = z3;

        $r7 = (android.view.ViewGroup) r1;

        $z2 = virtualinvoke $r7.<android.view.ViewGroup: boolean getClipToPadding()>();

        if $z2 == 0 goto label2;

        $i9 = r1.<android.view.View: int mPaddingLeft>;

        $i10 = r1.<android.view.View: int mPaddingTop>;

        $i11 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $i12 = r1.<android.view.View: int mPaddingRight>;

        $i13 = $i11 - $i12;

        $i14 = virtualinvoke r1.<android.view.View: int getHeight()>();

        $i15 = r1.<android.view.View: int mPaddingBottom>;

        $i16 = $i14 - $i15;

        z4 = virtualinvoke r4.<android.graphics.Rect: boolean intersect(int,int,int,int)>($i9, $i10, $i13, $i16);

     label2:
        z5 = z4;

        if z4 == 0 goto label3;

        z5 = z4;

        $r5 = r1.<android.view.View: android.graphics.Rect mClipBounds>;

        if $r5 == null goto label3;

        $r6 = r1.<android.view.View: android.graphics.Rect mClipBounds>;

        z5 = virtualinvoke r4.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r6);

     label3:
        if z5 == 0 goto label4;

        virtualinvoke r1.<android.view.View: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.Queue)>(r4, r9, r3);

        goto label4;

     label4:
        return;
    }

    private boolean dispatchTransformedTouchEvent(android.view.MotionEvent, boolean, android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        float f0, f1, $f2, $f3, $f4, $f5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15;
        boolean $z0, $z1, z2, z3, z4, z5;
        android.graphics.Matrix $r2;
        android.view.MotionEvent r3, r4;

        r0 := @this: android.view.ViewGroup;

        r3 := @parameter0: android.view.MotionEvent;

        z2 := @parameter1: boolean;

        r1 := @parameter2: android.view.View;

        i12 := @parameter3: int;

        i13 = virtualinvoke r3.<android.view.MotionEvent: int getAction()>();

        if z2 != 0 goto label12;

        if i13 != 3 goto label01;

        goto label12;

     label01:
        i14 = virtualinvoke r3.<android.view.MotionEvent: int getPointerIdBits()>();

        i15 = i14 & i12;

        if i15 != 0 goto label02;

        return 0;

     label02:
        if i15 != i14 goto label07;

        if r1 == null goto label04;

        $z1 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z1 == 0 goto label03;

        goto label04;

     label03:
        r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>(r3);

        goto label08;

     label04:
        if r1 != null goto label05;

        z3 = specialinvoke r0.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r3);

        goto label06;

     label05:
        $i7 = r0.<android.view.ViewGroup: int mScrollX>;

        $i6 = r1.<android.view.View: int mLeft>;

        $i8 = $i7 - $i6;

        f0 = (float) $i8;

        $i10 = r0.<android.view.ViewGroup: int mScrollY>;

        $i9 = r1.<android.view.View: int mTop>;

        $i11 = $i10 - $i9;

        f1 = (float) $i11;

        virtualinvoke r3.<android.view.MotionEvent: void offsetLocation(float,float)>(f0, f1);

        z3 = virtualinvoke r1.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r3);

        $f5 = neg f0;

        $f4 = neg f1;

        virtualinvoke r3.<android.view.MotionEvent: void offsetLocation(float,float)>($f5, $f4);

     label06:
        return z3;

     label07:
        r4 = virtualinvoke r3.<android.view.MotionEvent: android.view.MotionEvent split(int)>(i15);

     label08:
        if r1 != null goto label09;

        z4 = specialinvoke r0.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r4);

        goto label11;

     label09:
        $i1 = r0.<android.view.ViewGroup: int mScrollX>;

        $i0 = r1.<android.view.View: int mLeft>;

        $i2 = $i1 - $i0;

        $f3 = (float) $i2;

        $i4 = r0.<android.view.ViewGroup: int mScrollY>;

        $i3 = r1.<android.view.View: int mTop>;

        $i5 = $i4 - $i3;

        $f2 = (float) $i5;

        virtualinvoke r4.<android.view.MotionEvent: void offsetLocation(float,float)>($f3, $f2);

        $z0 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label10;

        $r2 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getInverseMatrix()>();

        virtualinvoke r4.<android.view.MotionEvent: void transform(android.graphics.Matrix)>($r2);

     label10:
        z4 = virtualinvoke r1.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r4);

     label11:
        virtualinvoke r4.<android.view.MotionEvent: void recycle()>();

        return z4;

     label12:
        virtualinvoke r3.<android.view.MotionEvent: void setAction(int)>(3);

        if r1 != null goto label13;

        z5 = specialinvoke r0.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r3);

        goto label14;

     label13:
        z5 = virtualinvoke r1.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r3);

     label14:
        virtualinvoke r3.<android.view.MotionEvent: void setAction(int)>(i13);

        return z5;
    }

    private static void drawCorner(android.graphics.Canvas, android.graphics.Paint, int, int, int, int, int)
    {
        android.graphics.Canvas r0;
        android.graphics.Paint r1;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;

        r0 := @parameter0: android.graphics.Canvas;

        r1 := @parameter1: android.graphics.Paint;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        i4 := @parameter6: int;

        $i5 = i0 + i2;

        $i6 = staticinvoke <android.view.ViewGroup: int sign(int)>(i3);

        $i7 = $i6 * i4;

        $i8 = i1 + $i7;

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i0, i1, $i5, $i8);

        $i9 = staticinvoke <android.view.ViewGroup: int sign(int)>(i2);

        $i10 = $i9 * i4;

        $i12 = i0 + $i10;

        $i11 = i1 + i3;

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i0, i1, $i12, $i11);

        return;
    }

    private static void drawRect(android.graphics.Canvas, android.graphics.Paint, int, int, int, int)
    {
        android.graphics.Canvas r0;
        android.graphics.Paint r1;
        int i0, i1, i2, i3;
        float[] r2, $r3, $r4;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15;

        r0 := @parameter0: android.graphics.Canvas;

        r1 := @parameter1: android.graphics.Paint;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        $r3 = <android.view.ViewGroup: float[] sDebugLines>;

        if $r3 != null goto label1;

        $r4 = newarray (float)[16];

        <android.view.ViewGroup: float[] sDebugLines> = $r4;

     label1:
        r2 = <android.view.ViewGroup: float[] sDebugLines>;

        $f0 = (float) i0;

        r2[0] = $f0;

        $f1 = (float) i1;

        r2[1] = $f1;

        $f2 = (float) i2;

        r2[2] = $f2;

        $f3 = (float) i1;

        r2[3] = $f3;

        $f4 = (float) i2;

        r2[4] = $f4;

        $f5 = (float) i1;

        r2[5] = $f5;

        $f6 = (float) i2;

        r2[6] = $f6;

        $f7 = (float) i3;

        r2[7] = $f7;

        $f8 = (float) i2;

        r2[8] = $f8;

        $f9 = (float) i3;

        r2[9] = $f9;

        $f10 = (float) i0;

        r2[10] = $f10;

        $f11 = (float) i3;

        r2[11] = $f11;

        $f12 = (float) i0;

        r2[12] = $f12;

        $f13 = (float) i3;

        r2[13] = $f13;

        $f14 = (float) i0;

        r2[14] = $f14;

        $f15 = (float) i1;

        r2[15] = $f15;

        virtualinvoke r0.<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>(r2, r1);

        return;
    }

    private static void drawRectCorners(android.graphics.Canvas, int, int, int, int, android.graphics.Paint, int, int)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9;
        android.graphics.Paint r1;

        r0 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: android.graphics.Paint;

        i4 := @parameter6: int;

        i5 := @parameter7: int;

        staticinvoke <android.view.ViewGroup: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, i0, i1, i4, i4, i5);

        $i6 = neg i4;

        staticinvoke <android.view.ViewGroup: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, i0, i3, i4, $i6, i5);

        $i7 = neg i4;

        staticinvoke <android.view.ViewGroup: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, i2, i1, $i7, i4, i5);

        $i9 = neg i4;

        $i8 = neg i4;

        staticinvoke <android.view.ViewGroup: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, i2, i3, $i9, $i8, i5);

        return;
    }

    private void exitHoverTargets()
    {
        android.view.ViewGroup r0;
        long l0;
        android.view.MotionEvent r1;
        boolean $z0;
        android.view.ViewGroup$HoverTarget $r2;

        r0 := @this: android.view.ViewGroup;

        $z0 = r0.<android.view.ViewGroup: boolean mHoveredSelf>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget>;

        if $r2 == null goto label2;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l0, l0, 10, 0.0F, 0.0F, 0);

        virtualinvoke r1.<android.view.MotionEvent: void setSource(int)>(4098);

        virtualinvoke r0.<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void recycle()>();

     label2:
        return;
    }

    private void exitTooltipHoverTargets()
    {
        android.view.ViewGroup r0;
        long l0;
        android.view.MotionEvent r1;
        boolean $z0;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        $z0 = r0.<android.view.ViewGroup: boolean mTooltipHoveredSelf>;

        if $z0 != 0 goto label1;

        $r2 = r0.<android.view.ViewGroup: android.view.View mTooltipHoverTarget>;

        if $r2 == null goto label2;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(l0, l0, 10, 0.0F, 0.0F, 0);

        virtualinvoke r1.<android.view.MotionEvent: void setSource(int)>(4098);

        virtualinvoke r0.<android.view.ViewGroup: boolean dispatchTooltipHoverEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void recycle()>();

     label2:
        return;
    }

    private static void fillDifference(android.graphics.Canvas, int, int, int, int, int, int, int, int, android.graphics.Paint)
    {
        android.graphics.Canvas r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, i8, i9, i10, i11;
        android.graphics.Paint r1;

        r0 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i8 := @parameter5: int;

        i4 := @parameter6: int;

        i9 := @parameter7: int;

        i5 := @parameter8: int;

        r1 := @parameter9: android.graphics.Paint;

        i10 = i0 - i8;

        i11 = i2 + i9;

        $i6 = i1 - i4;

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i10, $i6, i11, i1);

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i10, i1, i0, i3);

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i2, i1, i11, i3);

        $i7 = i3 + i5;

        staticinvoke <android.view.ViewGroup: void fillRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i10, i3, i11, $i7);

        return;
    }

    private static void fillRect(android.graphics.Canvas, android.graphics.Paint, int, int, int, int)
    {
        android.graphics.Canvas r0;
        android.graphics.Paint r1;
        int i0, i1, i2, i3, i4, i5, i6, i7;
        float $f0, $f1, $f2, $f3;

        r0 := @parameter0: android.graphics.Canvas;

        r1 := @parameter1: android.graphics.Paint;

        i2 := @parameter2: int;

        i0 := @parameter3: int;

        i3 := @parameter4: int;

        i1 := @parameter5: int;

        if i2 == i3 goto label3;

        if i0 == i1 goto label3;

        i4 = i2;

        i5 = i3;

        if i2 <= i3 goto label1;

        i5 = i2;

        i4 = i3;

     label1:
        i6 = i0;

        i7 = i1;

        if i0 <= i1 goto label2;

        i6 = i1;

        i7 = i0;

     label2:
        $f3 = (float) i4;

        $f2 = (float) i6;

        $f1 = (float) i5;

        $f0 = (float) i7;

        virtualinvoke r0.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r1);

     label3:
        return;
    }

    private android.view.View findChildWithAccessibilityFocus()
    {
        android.view.ViewGroup r0;
        boolean $z0;
        android.view.ViewRootImpl r1;
        android.view.View r2;
        android.view.ViewParent r3;

        r0 := @this: android.view.ViewGroup;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewRootImpl getViewRootImpl()>();

        if r1 != null goto label1;

        return null;

     label1:
        r2 = virtualinvoke r1.<android.view.ViewRootImpl: android.view.View getAccessibilityFocusedHost()>();

        if r2 != null goto label2;

        return null;

     label2:
        r3 = virtualinvoke r2.<android.view.View: android.view.ViewParent getParent()>();

     label3:
        $z0 = r3 instanceof android.view.View;

        if $z0 == 0 goto label5;

        if r3 != r0 goto label4;

        return r2;

     label4:
        r2 = (android.view.View) r3;

        r3 = virtualinvoke r2.<android.view.View: android.view.ViewParent getParent()>();

        goto label3;

     label5:
        return null;
    }

    private int getAndVerifyPreorderedIndex(int, int, boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        java.lang.StringBuilder $r2;
        java.lang.IndexOutOfBoundsException $r8;
        java.lang.String $r9;
        int i0, i1, i2, i3;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label2;

        i2 = virtualinvoke r0.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>(i0, i1);

        if i2 >= i0 goto label1;

        i3 = i2;

        goto label3;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getChildDrawingOrder() returned invalid index ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (child count is ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r8 = new java.lang.IndexOutOfBoundsException;

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        i3 = i1;

     label3:
        return i3;
    }

    private static android.view.View getAndVerifyPreorderedView(java.util.ArrayList, android.view.View[], int)
    {
        android.view.View[] r0;
        int i0;
        java.lang.Object $r1;
        java.lang.StringBuilder $r2;
        java.lang.RuntimeException $r5;
        java.lang.String $r6;
        java.util.ArrayList r7;
        android.view.View r8;

        r7 := @parameter0: java.util.ArrayList;

        r0 := @parameter1: android.view.View[];

        i0 := @parameter2: int;

        if r7 == null goto label2;

        $r1 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        r8 = (android.view.View) $r1;

        if r8 == null goto label1;

        goto label3;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid preorderedList contained null child at index ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label2:
        r8 = r0[i0];

     label3:
        return r8;
    }

    public static int getChildMeasureSpec(int, int, int)
    {
        int i0, i1, $i4, i5, i6, i7, i8, i9, i10, $i11;
        boolean $z0, $z1;

        i5 := @parameter0: int;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        i1 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i5);

        i7 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i5);

        i8 = 0;

        $i4 = i7 - i6;

        i9 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i4);

        i10 = 0;

        if i1 == -2147483648 goto label11;

        if i1 == 0 goto label04;

        if i1 == 1073741824 goto label01;

        i8 = 0;

        goto label14;

     label01:
        if i0 < 0 goto label02;

        i8 = i0;

        i10 = 1073741824;

        goto label14;

     label02:
        if i0 != -1 goto label03;

        i8 = i9;

        i10 = 1073741824;

        goto label14;

     label03:
        i8 = 0;

        if i0 != -2 goto label14;

        i8 = i9;

        i10 = -2147483648;

        goto label14;

     label04:
        if i0 < 0 goto label05;

        i8 = i0;

        i10 = 1073741824;

        goto label14;

     label05:
        if i0 != -1 goto label08;

        $z1 = <android.view.View: boolean sUseZeroUnspecifiedMeasureSpec>;

        if $z1 == 0 goto label06;

        goto label07;

     label06:
        i8 = i9;

     label07:
        i10 = 0;

        goto label14;

     label08:
        i8 = 0;

        if i0 != -2 goto label14;

        $z0 = <android.view.View: boolean sUseZeroUnspecifiedMeasureSpec>;

        if $z0 == 0 goto label09;

        i8 = 0;

        goto label10;

     label09:
        i8 = i9;

     label10:
        i10 = 0;

        goto label14;

     label11:
        if i0 < 0 goto label12;

        i8 = i0;

        i10 = 1073741824;

        goto label14;

     label12:
        if i0 != -1 goto label13;

        i8 = i9;

        i10 = -2147483648;

        goto label14;

     label13:
        i8 = 0;

        if i0 != -2 goto label14;

        i8 = i9;

        i10 = -2147483648;

     label14:
        $i11 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i8, i10);

        return $i11;
    }

    private android.view.ViewGroup$ChildListForAutoFillOrContentCapture getChildrenForAutofill(int)
    {
        android.view.ViewGroup r0;
        int i0;
        android.view.ViewGroup$ChildListForAutoFillOrContentCapture r1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.view.ViewGroup$ChildListForAutoFillOrContentCapture: android.view.ViewGroup$ChildListForAutoFillOrContentCapture obtain()>();

        specialinvoke r0.<android.view.ViewGroup: void populateChildrenForAutofill(java.util.ArrayList,int)>(r1, i0);

        return r1;
    }

    private android.view.ViewGroup$ChildListForAutoFillOrContentCapture getChildrenForContentCapture()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$ChildListForAutoFillOrContentCapture r1;

        r0 := @this: android.view.ViewGroup;

        r1 = staticinvoke <android.view.ViewGroup$ChildListForAutoFillOrContentCapture: android.view.ViewGroup$ChildListForAutoFillOrContentCapture obtain()>();

        specialinvoke r0.<android.view.ViewGroup: void populateChildrenForContentCapture(java.util.ArrayList)>(r1);

        return r1;
    }

    private android.graphics.PointF getLocalPoint()
    {
        android.view.ViewGroup r0;
        android.graphics.PointF $r1, $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.graphics.PointF mLocalPoint>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.PointF;

        specialinvoke $r3.<android.graphics.PointF: void <init>()>();

        r0.<android.view.ViewGroup: android.graphics.PointF mLocalPoint> = $r3;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.graphics.PointF mLocalPoint>;

        return $r2;
    }

    private float[] getTempLocationF()
    {
        android.view.ViewGroup r0;
        float[] $r1, $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: float[] mTempPosition>;

        if $r1 != null goto label1;

        $r3 = newarray (float)[2];

        r0.<android.view.ViewGroup: float[] mTempPosition> = $r3;

     label1:
        $r2 = r0.<android.view.ViewGroup: float[] mTempPosition>;

        return $r2;
    }

    private android.graphics.Point getTempPoint()
    {
        android.view.ViewGroup r0;
        android.graphics.Point $r1, $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.graphics.Point mTempPoint>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.Point;

        specialinvoke $r3.<android.graphics.Point: void <init>()>();

        r0.<android.view.ViewGroup: android.graphics.Point mTempPoint> = $r3;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.graphics.Point mTempPoint>;

        return $r2;
    }

    private android.graphics.Rect getTempRect()
    {
        android.view.ViewGroup r0;
        android.graphics.Rect $r1, $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.graphics.Rect mTempRect>;

        if $r1 != null goto label1;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewGroup: android.graphics.Rect mTempRect> = $r3;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.graphics.Rect mTempRect>;

        return $r2;
    }

    private android.view.ViewGroup$TouchTarget getTouchTarget(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r2;
        android.view.ViewGroup$TouchTarget r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r3 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label1:
        if r3 == null goto label3;

        $r2 = r3.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        if $r2 != r1 goto label2;

        return r3;

     label2:
        r3 = r3.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        goto label1;

     label3:
        return null;
    }

    private android.view.MotionEvent getTransformedMotionEvent(android.view.MotionEvent, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        float f0, f1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0;
        android.graphics.Matrix $r2;
        android.view.MotionEvent r3, r4;

        r0 := @this: android.view.ViewGroup;

        r3 := @parameter0: android.view.MotionEvent;

        r1 := @parameter1: android.view.View;

        $i1 = r0.<android.view.ViewGroup: int mScrollX>;

        $i0 = r1.<android.view.View: int mLeft>;

        $i2 = $i1 - $i0;

        f0 = (float) $i2;

        $i4 = r0.<android.view.ViewGroup: int mScrollY>;

        $i3 = r1.<android.view.View: int mTop>;

        $i5 = $i4 - $i3;

        f1 = (float) $i5;

        r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>(r3);

        virtualinvoke r4.<android.view.MotionEvent: void offsetLocation(float,float)>(f0, f1);

        $z0 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label1;

        $r2 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getInverseMatrix()>();

        virtualinvoke r4.<android.view.MotionEvent: void transform(android.graphics.Matrix)>($r2);

     label1:
        return r4;
    }

    private boolean hasBooleanFlag(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i2 = $i1 & i0;

        if $i2 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean hasChildWithZ()
    {
        android.view.ViewGroup r0;
        int $i0, i2;
        android.view.View[] $r1;
        android.view.View $r2;
        float $f0;
        byte $b1;

        r0 := @this: android.view.ViewGroup;

        i2 = 0;

     label1:
        $i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i2 >= $i0 goto label3;

        $r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r2 = $r1[i2];

        $f0 = virtualinvoke $r2.<android.view.View: float getZ()>();

        $b1 = $f0 cmpl 0.0F;

        if $b1 == 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private void initFromAttributes(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.view.ViewGroup r0;
        android.content.Context r1, $r8;
        android.util.AttributeSet r2;
        android.content.res.TypedArray r3;
        int[] $r4, $r5, $r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9;
        android.animation.LayoutTransition $r6;
        android.view.animation.LayoutAnimationController $r9;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i4 := @parameter2: int;

        i5 := @parameter3: int;

        $r4 = <com.android.internal.R$styleable: int[] ViewGroup>;

        r3 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r2, $r4, i4, i5);

        $r5 = <com.android.internal.R$styleable: int[] ViewGroup>;

        virtualinvoke r0.<android.view.ViewGroup: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>(r1, $r5, r2, r3, i4, i5);

        i6 = virtualinvoke r3.<android.content.res.TypedArray: int getIndexCount()>();

        i7 = 0;

     label01:
        if i7 >= i6 goto label17;

        i8 = virtualinvoke r3.<android.content.res.TypedArray: int getIndex(int)>(i7);

        tableswitch(i8)
        {
            case 0: goto label15;
            case 1: goto label14;
            case 2: goto label13;
            case 3: goto label12;
            case 4: goto label11;
            case 5: goto label10;
            case 6: goto label09;
            case 7: goto label08;
            case 8: goto label07;
            case 9: goto label06;
            case 10: goto label05;
            case 11: goto label04;
            case 12: goto label03;
            default: goto label02;
        };

     label02:
        goto label16;

     label03:
        $z0 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i8, 0);

        virtualinvoke r0.<android.view.ViewGroup: void setTouchscreenBlocksFocus(boolean)>($z0);

        goto label16;

     label04:
        $z1 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i8, 0);

        virtualinvoke r0.<android.view.ViewGroup: void setTransitionGroup(boolean)>($z1);

        goto label16;

     label05:
        $i0 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i8, -1);

        virtualinvoke r0.<android.view.ViewGroup: void setLayoutMode(int)>($i0);

        goto label16;

     label06:
        $z2 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i8, 0);

        if $z2 == 0 goto label16;

        $r6 = new android.animation.LayoutTransition;

        specialinvoke $r6.<android.animation.LayoutTransition: void <init>()>();

        virtualinvoke r0.<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>($r6);

        goto label16;

     label07:
        $z3 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i8, 0);

        virtualinvoke r0.<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>($z3);

        goto label16;

     label08:
        $r7 = <android.view.ViewGroup: int[] DESCENDANT_FOCUSABILITY_FLAGS>;

        $i1 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i8, 0);

        $i2 = $r7[$i1];

        virtualinvoke r0.<android.view.ViewGroup: void setDescendantFocusability(int)>($i2);

        goto label16;

     label09:
        $z4 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i8, 0);

        virtualinvoke r0.<android.view.ViewGroup: void setAddStatesFromChildren(boolean)>($z4);

        goto label16;

     label10:
        $z5 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i8, 1);

        virtualinvoke r0.<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>($z5);

        goto label16;

     label11:
        $i3 = virtualinvoke r3.<android.content.res.TypedArray: int getInt(int,int)>(i8, 2);

        virtualinvoke r0.<android.view.ViewGroup: void setPersistentDrawingCache(int)>($i3);

        goto label16;

     label12:
        $z6 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i8, 1);

        virtualinvoke r0.<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>($z6);

        goto label16;

     label13:
        i9 = virtualinvoke r3.<android.content.res.TypedArray: int getResourceId(int,int)>(i8, -1);

        if i9 <= 0 goto label16;

        $r8 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        $r9 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.LayoutAnimationController loadLayoutAnimation(android.content.Context,int)>($r8, i9);

        virtualinvoke r0.<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>($r9);

        goto label16;

     label14:
        $z7 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i8, 1);

        virtualinvoke r0.<android.view.ViewGroup: void setClipToPadding(boolean)>($z7);

        goto label16;

     label15:
        $z8 = virtualinvoke r3.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i8, 1);

        virtualinvoke r0.<android.view.ViewGroup: void setClipChildren(boolean)>($z8);

     label16:
        i7 = i7 + 1;

        goto label01;

     label17:
        virtualinvoke r3.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    private void initViewGroup()
    {
        android.view.ViewGroup r0;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8;
        android.content.Context $r1;
        android.content.pm.ApplicationInfo $r2;
        android.view.View[] $r3;

        r0 := @this: android.view.ViewGroup;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isShowingLayoutBounds()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void setFlags(int,int)>(128, 128);

     label1:
        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        i5 = $i0 | 1;

        r0.<android.view.ViewGroup: int mGroupFlags> = i5;

        i6 = i5 | 2;

        r0.<android.view.ViewGroup: int mGroupFlags> = i6;

        i7 = i6 | 16;

        r0.<android.view.ViewGroup: int mGroupFlags> = i7;

        i8 = i7 | 64;

        r0.<android.view.ViewGroup: int mGroupFlags> = i8;

        $i1 = i8 | 16384;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        $r1 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i2 = $r2.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 < 11 goto label2;

        $i3 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i4 = $i3 | 2097152;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i4;

     label2:
        virtualinvoke r0.<android.view.ViewGroup: void setDescendantFocusability(int)>(131072);

        $r3 = newarray (android.view.View)[12];

        r0.<android.view.ViewGroup: android.view.View[] mChildren> = $r3;

        r0.<android.view.ViewGroup: int mChildrenCount> = 0;

        r0.<android.view.ViewGroup: int mPersistentDrawingCache> = 2;

        return;
    }

    private android.view.WindowInsets newDispatchApplyWindowInsets(android.view.WindowInsets)
    {
        android.view.ViewGroup r0;
        android.view.WindowInsets r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.WindowInsets;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        virtualinvoke $r2.<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return r1;
    }

    private void notifyAnimationListener()
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2;
        android.view.animation.Animation$AnimationListener $r1;
        android.view.ViewGroup$3 $r2;

        r0 := @this: android.view.ViewGroup;

        $i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        i0 = $i1 & -513;

        r0.<android.view.ViewGroup: int mGroupFlags> = i0;

        $i2 = i0 | 16;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i2;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener>;

        if $r1 == null goto label1;

        $r2 = new android.view.ViewGroup$3;

        specialinvoke $r2.<android.view.ViewGroup$3: void <init>(android.view.ViewGroup)>(r0);

        virtualinvoke r0.<android.view.ViewGroup: boolean post(java.lang.Runnable)>($r2);

     label1:
        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;
    }

    private static android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)
    {
        android.view.MotionEvent r0, $r1;
        int $i0;

        r0 := @parameter0: android.view.MotionEvent;

        $i0 = virtualinvoke r0.<android.view.MotionEvent: int getHistorySize()>();

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $r1 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>(r0);

        return $r1;
    }

    private void populateChildrenForAutofill(java.util.ArrayList, int)
    {
        android.view.ViewGroup r0, $r4;
        java.util.ArrayList r1, r2;
        int i0, i1, i2, $i3, i4;
        java.lang.Object $r3;
        boolean $z1, $z2, $z3, z4;
        android.view.View[] $r5;
        android.view.View r6;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i1 > 0 goto label01;

        return;

     label01:
        r2 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r2 != null goto label02;

        $z3 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z3 == 0 goto label02;

        z4 = 1;

        goto label03;

     label02:
        z4 = 0;

     label03:
        i4 = 0;

     label04:
        if i4 >= i1 goto label10;

        i2 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i1, i4, z4);

        if r2 != null goto label05;

        $r5 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r6 = $r5[i2];

        goto label06;

     label05:
        $r3 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r6 = (android.view.View) $r3;

     label06:
        $i3 = i0 & 1;

        if $i3 != 0 goto label08;

        $z1 = virtualinvoke r6.<android.view.View: boolean isImportantForAutofill()>();

        if $z1 == 0 goto label07;

        goto label08;

     label07:
        $z2 = r6 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label09;

        $r4 = (android.view.ViewGroup) r6;

        specialinvoke $r4.<android.view.ViewGroup: void populateChildrenForAutofill(java.util.ArrayList,int)>(r1, i0);

        goto label09;

     label08:
        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

     label09:
        i4 = i4 + 1;

        goto label04;

     label10:
        return;
    }

    private void populateChildrenForContentCapture(java.util.ArrayList)
    {
        android.view.ViewGroup r0, $r4;
        java.util.ArrayList r1, r2;
        int i0, i1, i2;
        java.lang.Object $r3;
        boolean $z0, $z1, $z3, z4;
        android.view.View[] $r5;
        android.view.View r6;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.ArrayList;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 > 0 goto label1;

        return;

     label1:
        r2 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r2 != null goto label2;

        $z3 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z3 == 0 goto label2;

        z4 = 1;

        goto label3;

     label2:
        z4 = 0;

     label3:
        i2 = 0;

     label4:
        if i2 >= i0 goto label9;

        i1 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i0, i2, z4);

        if r2 != null goto label5;

        $r5 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r6 = $r5[i1];

        goto label6;

     label5:
        $r3 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r6 = (android.view.View) $r3;

     label6:
        $z0 = virtualinvoke r6.<android.view.View: boolean isImportantForContentCapture()>();

        if $z0 == 0 goto label7;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r6);

        goto label8;

     label7:
        $z1 = r6 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label8;

        $r4 = (android.view.ViewGroup) r6;

        specialinvoke $r4.<android.view.ViewGroup: void populateChildrenForContentCapture(java.util.ArrayList)>(r1);

     label8:
        i2 = i2 + 1;

        goto label4;

     label9:
        return;
    }

    private void recreateChildDisplayList(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -2147483648;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r1.<android.view.View: boolean mRecreateDisplayList> = z0;

        $i2 = r1.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 2147483647;

        r1.<android.view.View: int mPrivateFlags> = $i3;

        virtualinvoke r1.<android.view.View: android.graphics.RenderNode updateDisplayListIfDirty()>();

        r1.<android.view.View: boolean mRecreateDisplayList> = 0;

        return;
    }

    private void removeFromArray(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, $i8, i9, i10, i11;
        android.view.View[] r1;
        java.util.ArrayList r2;
        android.view.View $r3, $r5;
        java.lang.IndexOutOfBoundsException $r4;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r2 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if r2 == null goto label1;

        $r5 = r1[i0];

        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>($r5);

        if $z0 != 0 goto label2;

     label1:
        $r3 = r1[i0];

        $r3.<android.view.View: android.view.ViewParent mParent> = null;

     label2:
        i7 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i8 = i7 - 1;

        if i0 != $i8 goto label3;

        $i6 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i9 = $i6 - 1;

        r0.<android.view.ViewGroup: int mChildrenCount> = i9;

        r1[i9] = null;

        goto label4;

     label3:
        if i0 < 0 goto label7;

        if i0 >= i7 goto label7;

        $i3 = i0 + 1;

        $i1 = i7 - i0;

        $i2 = $i1 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i3, r1, i0, $i2);

        $i4 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i10 = $i4 - 1;

        r0.<android.view.ViewGroup: int mChildrenCount> = i10;

        r1[i10] = null;

     label4:
        i11 = r0.<android.view.ViewGroup: int mLastTouchDownIndex>;

        if i11 != i0 goto label5;

        r0.<android.view.ViewGroup: long mLastTouchDownTime> = 0L;

        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = -1;

        goto label6;

     label5:
        if i11 <= i0 goto label6;

        $i5 = i11 - 1;

        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = $i5;

     label6:
        return;

     label7:
        $r4 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r4;
    }

    private void removeFromArray(int, int)
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i11, i12, i13;
        android.view.View $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        i8 := @parameter0: int;

        i9 := @parameter1: int;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i10 = staticinvoke <java.lang.Math: int max(int,int)>(0, i8);

        $i2 = i10 + i9;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i2);

        if i10 != i1 goto label1;

        return;

     label1:
        if i1 != i0 goto label4;

        i11 = i10;

     label2:
        if i11 >= i1 goto label3;

        $r3 = r1[i11];

        $r3.<android.view.View: android.view.ViewParent mParent> = null;

        r1[i11] = null;

        i11 = i11 + 1;

        goto label2;

     label3:
        goto label8;

     label4:
        i12 = i10;

     label5:
        if i12 >= i1 goto label6;

        $r2 = r1[i12];

        $r2.<android.view.View: android.view.ViewParent mParent> = null;

        i12 = i12 + 1;

        goto label5;

     label6:
        $i3 = i0 - i1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i1, r1, i10, $i3);

        $i4 = i1 - i10;

        i13 = i0 - $i4;

     label7:
        if i13 >= i0 goto label8;

        r1[i13] = null;

        i13 = i13 + 1;

        goto label7;

     label8:
        $i6 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i5 = i1 - i10;

        $i7 = $i6 - $i5;

        r0.<android.view.ViewGroup: int mChildrenCount> = $i7;

        return;
    }

    private void removePointersFromTouchTargets(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.view.ViewGroup$TouchTarget r1, r2, r3;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r2 = null;

        r3 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label1:
        if r3 == null goto label5;

        r1 = r3.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        $i1 = r3.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label4;

        $i3 = r3.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        $i4 = $i3 & i0;

        r3.<android.view.ViewGroup$TouchTarget: int pointerIdBits> = $i4;

        $i5 = r3.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        if $i5 != 0 goto label4;

        if r2 != null goto label2;

        r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget> = r1;

        goto label3;

     label2:
        r2.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next> = r1;

     label3:
        virtualinvoke r3.<android.view.ViewGroup$TouchTarget: void recycle()>();

        r3 = r1;

        goto label1;

     label4:
        r2 = r3;

        r3 = r1;

        goto label1;

     label5:
        return;
    }

    private void removeViewInternal(int, android.view.View)
    {
        android.view.ViewGroup r0;
        int i0, i1, $i2, $i4, i5, i6;
        android.view.View r1, $r2, $r3, $r5;
        boolean z0, $z1, $z3, $z4, z5;
        android.view.animation.Animation $r4;
        android.view.DragEvent $r6;
        java.util.HashSet $r7;
        java.util.List $r8, $r11, r17;
        java.lang.Object $r9;
        java.lang.Integer $r10, $r12;
        android.view.View$AttachInfo $r14;
        android.animation.LayoutTransition r15;
        java.util.ArrayList r16;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.View;

        r15 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if r15 == null goto label01;

        virtualinvoke r15.<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>(r0, r1);

     label01:
        z5 = 0;

        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r1 != $r2 goto label02;

        virtualinvoke r1.<android.view.View: void unFocus(android.view.View)>(null);

        z5 = 1;

     label02:
        $r3 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        if r1 != $r3 goto label03;

        virtualinvoke r0.<android.view.ViewGroup: void clearFocusedInCluster(android.view.View)>(r1);

     label03:
        virtualinvoke r1.<android.view.View: void clearAccessibilityFocus()>();

        specialinvoke r0.<android.view.ViewGroup: void cancelTouchTarget(android.view.View)>(r1);

        specialinvoke r0.<android.view.ViewGroup: void cancelHoverTarget(android.view.View)>(r1);

        $r4 = virtualinvoke r1.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r4 != null goto label05;

        r16 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if r16 == null goto label04;

        $z4 = virtualinvoke r16.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z4 == 0 goto label04;

        goto label05;

     label04:
        $r14 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r14 == null goto label06;

        virtualinvoke r1.<android.view.View: void dispatchDetachedFromWindow()>();

        goto label06;

     label05:
        specialinvoke r0.<android.view.ViewGroup: void addDisappearingView(android.view.View)>(r1);

     label06:
        z0 = virtualinvoke r1.<android.view.View: boolean hasTransientState()>();

        if z0 == 0 goto label07;

        virtualinvoke r0.<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>(r1, 0);

     label07:
        virtualinvoke r0.<android.view.ViewGroup: void needGlobalAttributesUpdate(boolean)>(0);

        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int)>(i0);

        $z1 = virtualinvoke r1.<android.view.View: boolean hasUnhandledKeyListener()>();

        if $z1 == 0 goto label08;

        virtualinvoke r0.<android.view.ViewGroup: void decrementChildUnhandledKeyListeners()>();

     label08:
        $r5 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        if r1 != $r5 goto label09;

        virtualinvoke r0.<android.view.ViewGroup: void clearDefaultFocus(android.view.View)>(r1);

     label09:
        if z5 == 0 goto label10;

        virtualinvoke r0.<android.view.ViewGroup: void clearChildFocus(android.view.View)>(r1);

        $z3 = virtualinvoke r0.<android.view.ViewGroup: boolean rootViewRequestFocus()>();

        if $z3 != 0 goto label10;

        virtualinvoke r0.<android.view.ViewGroup: void notifyGlobalFocusCleared(android.view.View)>(r0);

     label10:
        virtualinvoke r0.<android.view.ViewGroup: void dispatchViewRemoved(android.view.View)>(r1);

        $i4 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i4 == 8 goto label11;

        virtualinvoke r0.<android.view.ViewGroup: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

     label11:
        r17 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        if r17 != null goto label12;

        i5 = 0;

        goto label13;

     label12:
        i5 = interfaceinvoke r17.<java.util.List: int size()>();

     label13:
        i6 = 0;

     label14:
        if i6 >= i5 goto label16;

        $r8 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i6);

        $r10 = (java.lang.Integer) $r9;

        i1 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if i0 >= i1 goto label15;

        $r11 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        $i2 = i1 - 1;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r11.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i6, $r12);

     label15:
        i6 = i6 + 1;

        goto label14;

     label16:
        $r6 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        if $r6 == null goto label17;

        $r7 = r0.<android.view.ViewGroup: java.util.HashSet mChildrenInterestedInDrag>;

        virtualinvoke $r7.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

     label17:
        return;
    }

    private boolean removeViewInternal(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int indexOfChild(android.view.View)>(r1);

        if i0 < 0 goto label1;

        specialinvoke r0.<android.view.ViewGroup: void removeViewInternal(int,android.view.View)>(i0, r1);

        return 1;

     label1:
        return 0;
    }

    private void removeViewsInternal(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, $i3, i4;
        android.view.View r1, r3, $r5, $r6, r8;
        android.view.View[] r2;
        android.view.View$AttachInfo $r4;
        boolean $z0, $z1, z2, z3, $z4;
        android.view.animation.Animation $r7;
        android.animation.LayoutTransition r9;
        java.util.ArrayList r10;
        java.lang.IndexOutOfBoundsException $r11;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 + i1;

        if i0 < 0 goto label15;

        if i1 < 0 goto label15;

        $i3 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i2 > $i3 goto label15;

        r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        z3 = 0;

        r8 = null;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i4 = i0;

     label03:
        if i4 >= i2 goto label12;

        r3 = r2[i4];

        r9 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if r9 == null goto label04;

        virtualinvoke r9.<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>(r0, r3);

     label04:
        if r3 != r1 goto label05;

        virtualinvoke r3.<android.view.View: void unFocus(android.view.View)>(null);

        z3 = 1;

     label05:
        $r5 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        if r3 != $r5 goto label06;

        r8 = r3;

     label06:
        $r6 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        if r3 != $r6 goto label07;

        virtualinvoke r0.<android.view.ViewGroup: void clearFocusedInCluster(android.view.View)>(r3);

     label07:
        virtualinvoke r3.<android.view.View: void clearAccessibilityFocus()>();

        specialinvoke r0.<android.view.ViewGroup: void cancelTouchTarget(android.view.View)>(r3);

        specialinvoke r0.<android.view.ViewGroup: void cancelHoverTarget(android.view.View)>(r3);

        $r7 = virtualinvoke r3.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r7 != null goto label09;

        r10 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if r10 == null goto label08;

        $z1 = virtualinvoke r10.<java.util.ArrayList: boolean contains(java.lang.Object)>(r3);

        if $z1 == 0 goto label08;

        goto label09;

     label08:
        if z2 == 0 goto label10;

        virtualinvoke r3.<android.view.View: void dispatchDetachedFromWindow()>();

        goto label10;

     label09:
        specialinvoke r0.<android.view.ViewGroup: void addDisappearingView(android.view.View)>(r3);

     label10:
        $z4 = virtualinvoke r3.<android.view.View: boolean hasTransientState()>();

        if $z4 == 0 goto label11;

        virtualinvoke r0.<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>(r3, 0);

     label11:
        virtualinvoke r0.<android.view.ViewGroup: void needGlobalAttributesUpdate(boolean)>(0);

        virtualinvoke r0.<android.view.ViewGroup: void dispatchViewRemoved(android.view.View)>(r3);

        i4 = i4 + 1;

        goto label03;

     label12:
        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int,int)>(i0, i1);

        if r8 == null goto label13;

        virtualinvoke r0.<android.view.ViewGroup: void clearDefaultFocus(android.view.View)>(r8);

     label13:
        if z3 == 0 goto label14;

        virtualinvoke r0.<android.view.ViewGroup: void clearChildFocus(android.view.View)>(r1);

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean rootViewRequestFocus()>();

        if $z0 != 0 goto label14;

        virtualinvoke r0.<android.view.ViewGroup: void notifyGlobalFocusCleared(android.view.View)>(r1);

     label14:
        return;

     label15:
        $r11 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r11.<java.lang.IndexOutOfBoundsException: void <init>()>();

        throw $r11;
    }

    private static boolean resetCancelNextUpFlag(android.view.View)
    {
        android.view.View r0;
        int $i0, $i1, $i2, $i3;

        r0 := @parameter0: android.view.View;

        $i0 = r0.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        $i2 = r0.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & -67108865;

        r0.<android.view.View: int mPrivateFlags> = $i3;

        return 1;

     label1:
        return 0;
    }

    private void resetTouchState()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.ViewGroup: void clearTouchTargets()>();

        staticinvoke <android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>(r0);

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & -524289;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        r0.<android.view.ViewGroup: int mNestedScrollAxes> = 0;

        return;
    }

    private boolean restoreFocusInClusterInternal(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3;
        android.view.View $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        if $r1 == null goto label1;

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i1 == 393216 goto label1;

        $r2 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        $i2 = $r2.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 12;

        if $i3 != 0 goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        $z0 = virtualinvoke $r3.<android.view.View: boolean restoreFocusInCluster(int)>(i0);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<android.view.View: boolean restoreFocusInCluster(int)>(i0);

        return $z1;
    }

    private void setBooleanFlag(int, boolean)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i3 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i4 = $i3 | i0;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i4;

        goto label2;

     label1:
        $i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i2 = $i1 & i0;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i2;

     label2:
        return;
    }

    private void setLayoutMode(int, boolean)
    {
        android.view.ViewGroup r0;
        int i0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewGroup: int mLayoutMode> = i0;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(8388608, z0);

        return;
    }

    private void setTouchscreenBlocksFocusNoRefocus(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 | 67108864;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & -67108865;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

     label2:
        return;
    }

    private static int sign(int)
    {
        int i0;
        byte b1;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        b1 = 1;

        goto label2;

     label1:
        b1 = -1;

     label2:
        return b1;
    }

    private void touchAccessibilityNodeProviderIfNeeded(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.content.Context $r2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        $z0 = virtualinvoke $r2.<android.content.Context: boolean isAutofillCompatibilityEnabled()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

     label1:
        return;
    }

    public void addChildrenForAccessibility(java.util.ArrayList)
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$ChildListForAccessibility r1;
        int i0, $i1, $i2, i3;
        android.view.View r2;
        android.view.accessibility.AccessibilityNodeProvider $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        java.util.ArrayList r5;

        r0 := @this: android.view.ViewGroup;

        r5 := @parameter0: java.util.ArrayList;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $r3 == null goto label01;

        return;

     label01:
        r1 = staticinvoke <android.view.ViewGroup$ChildListForAccessibility: android.view.ViewGroup$ChildListForAccessibility obtain(android.view.ViewGroup,boolean)>(r0, 1);

     label02:
        i0 = virtualinvoke r1.<android.view.ViewGroup$ChildListForAccessibility: int getChildCount()>();

     label03:
        i3 = 0;

     label04:
        if i3 >= i0 goto label09;

     label05:
        r2 = virtualinvoke r1.<android.view.ViewGroup$ChildListForAccessibility: android.view.View getChildAt(int)>(i3);

        $i1 = r2.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 12;

        if $i2 != 0 goto label08;

        $z0 = virtualinvoke r2.<android.view.View: boolean includeForAccessibility()>();

        if $z0 == 0 goto label07;

        virtualinvoke r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label06:
        goto label08;

     label07:
        virtualinvoke r2.<android.view.View: void addChildrenForAccessibility(java.util.ArrayList)>(r5);

     label08:
        i3 = i3 + 1;

        goto label04;

     label09:
        virtualinvoke r1.<android.view.ViewGroup$ChildListForAccessibility: void recycle()>();

        return;

     label10:
        $r4 := @caughtexception;

        virtualinvoke r1.<android.view.ViewGroup$ChildListForAccessibility: void recycle()>();

        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
    }

    public void addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo, java.lang.String, android.os.Bundle)
    {
        android.view.ViewGroup r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        android.os.Bundle r2;
        boolean $z0;
        android.view.ViewGroup$LayoutParams $r3, $r4;
        int $i0, $i1;
        java.lang.String r5;
        android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo r6;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        r5 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Bundle;

        $z0 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("android.view.accessibility.extra.DATA_RENDERING_INFO_KEY");

        if $z0 == 0 goto label1;

        r6 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo obtain()>();

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $i0 = $r3.<android.view.ViewGroup$LayoutParams: int width>;

        $r4 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $i1 = $r4.<android.view.ViewGroup$LayoutParams: int height>;

        virtualinvoke r6.<android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo: void setLayoutSize(int,int)>($i0, $i1);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setExtraRenderingInfo(android.view.accessibility.AccessibilityNodeInfo$ExtraRenderingInfo)>(r6);

     label1:
        return;
    }

    public void addFocusables(java.util.ArrayList, int, int)
    {
        android.view.ViewGroup r0;
        java.util.ArrayList r1;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7, i8, $i9, i10, $i11, i12, i13;
        boolean z0, $z1, $z2, z3;
        android.view.View[] r2, $r5;
        android.view.View r3, $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        i6 := @parameter2: int;

        i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i2 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        z0 = virtualinvoke r0.<android.view.ViewGroup: boolean shouldBlockFocusForTouchscreen()>();

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isFocusableInTouchMode()>();

        if $z1 != 0 goto label02;

        if z0 != 0 goto label01;

        goto label02;

     label01:
        z3 = 0;

        goto label03;

     label02:
        z3 = 1;

     label03:
        if i2 != 393216 goto label05;

        if z3 == 0 goto label04;

        specialinvoke r0.<android.view.View: void addFocusables(java.util.ArrayList,int,int)>(r1, i0, i6);

     label04:
        return;

     label05:
        i7 = i6;

        if z0 == 0 goto label06;

        i7 = i6 | 1;

     label06:
        if i2 != 131072 goto label07;

        if z3 == 0 goto label07;

        specialinvoke r0.<android.view.View: void addFocusables(java.util.ArrayList,int,int)>(r1, i0, i7);

     label07:
        i8 = 0;

        $i9 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = newarray (android.view.View)[$i9];

        i10 = 0;

     label08:
        $i11 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i10 >= $i11 goto label10;

        $r5 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r3 = $r5[i10];

        i12 = i8;

        $i4 = r3.<android.view.View: int mViewFlags>;

        $i5 = $i4 & 12;

        if $i5 != 0 goto label09;

        r2[i8] = r3;

        i12 = i8 + 1;

     label09:
        i10 = i10 + 1;

        i8 = i12;

        goto label08;

     label10:
        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isLayoutRtl()>();

        staticinvoke <android.view.FocusFinder: void sort(android.view.View[],int,int,android.view.ViewGroup,boolean)>(r2, 0, i8, r0, $z2);

        i13 = 0;

     label11:
        if i13 >= i8 goto label12;

        $r4 = r2[i13];

        virtualinvoke $r4.<android.view.View: void addFocusables(java.util.ArrayList,int,int)>(r1, i0, i7);

        i13 = i13 + 1;

        goto label11;

     label12:
        if i2 != 262144 goto label13;

        if z3 == 0 goto label13;

        $i3 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i1 != $i3 goto label13;

        specialinvoke r0.<android.view.View: void addFocusables(java.util.ArrayList,int,int)>(r1, i0, i7);

     label13:
        return;
    }

    public void addKeyboardNavigationClusters(java.util.Collection, int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10, i11;
        boolean z0, $z1, $z2;
        android.view.View[] r1, $r4;
        android.view.View r2, $r3;
        java.lang.Throwable $r5;
        java.util.Collection r6;

        r0 := @this: android.view.ViewGroup;

        r6 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        i7 = interfaceinvoke r6.<java.util.Collection: int size()>();

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isKeyboardNavigationCluster()>();

        if $z1 == 0 goto label04;

        z0 = virtualinvoke r0.<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>();

     label01:
        specialinvoke r0.<android.view.ViewGroup: void setTouchscreenBlocksFocusNoRefocus(boolean)>(0);

        specialinvoke r0.<android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>(r6, i0);

     label02:
        specialinvoke r0.<android.view.ViewGroup: void setTouchscreenBlocksFocusNoRefocus(boolean)>(z0);

        goto label05;

     label03:
        $r5 := @caughtexception;

        specialinvoke r0.<android.view.ViewGroup: void setTouchscreenBlocksFocusNoRefocus(boolean)>(z0);

        throw $r5;

     label04:
        specialinvoke r0.<android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>(r6, i0);

     label05:
        $i1 = interfaceinvoke r6.<java.util.Collection: int size()>();

        if i7 == $i1 goto label06;

        return;

     label06:
        $i2 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i2 != 393216 goto label07;

        return;

     label07:
        i8 = 0;

        $i3 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = newarray (android.view.View)[$i3];

        i9 = 0;

     label08:
        $i4 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i9 >= $i4 goto label10;

        $r4 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r2 = $r4[i9];

        i10 = i8;

        $i5 = r2.<android.view.View: int mViewFlags>;

        $i6 = $i5 & 12;

        if $i6 != 0 goto label09;

        r1[i8] = r2;

        i10 = i8 + 1;

     label09:
        i9 = i9 + 1;

        i8 = i10;

        goto label08;

     label10:
        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isLayoutRtl()>();

        staticinvoke <android.view.FocusFinder: void sort(android.view.View[],int,int,android.view.ViewGroup,boolean)>(r1, 0, i8, r0, $z2);

        i11 = 0;

     label11:
        if i11 >= i8 goto label12;

        $r3 = r1[i11];

        virtualinvoke $r3.<android.view.View: void addKeyboardNavigationClusters(java.util.Collection,int)>(r6, i0);

        i11 = i11 + 1;

        goto label11;

     label12:
        return;

        catch java.lang.Throwable from label01 to label02 with label03;
    }

    public boolean addStatesFromChildren()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void addTouchables(java.util.ArrayList)
    {
        android.view.ViewGroup r0;
        java.util.ArrayList r1;
        int i0, $i1, $i2, i3;
        android.view.View[] r2;
        android.view.View r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.ArrayList;

        specialinvoke r0.<android.view.View: void addTouchables(java.util.ArrayList)>(r1);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r3 = r2[i3];

        $i1 = r3.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 12;

        if $i2 != 0 goto label2;

        virtualinvoke r3.<android.view.View: void addTouchables(java.util.ArrayList)>(r1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public void addTransientView(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1, $i2, $i3, $i4, i5;
        android.view.ViewParent $r3, $r6;
        java.lang.StringBuilder $r4;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9;
        java.util.List $r10, $r11, $r12, $r14, $r17, $r19, $r20;
        java.lang.Integer $r13, $r18, $r22;
        android.view.View$AttachInfo $r15, $r16;
        java.lang.Object $r21;
        java.util.ArrayList $r23, $r24;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        if i0 < 0 goto label10;

        if r1 != null goto label01;

        goto label10;

     label01:
        $r3 = r1.<android.view.View: android.view.ViewParent mParent>;

        if $r3 != null goto label09;

        $r10 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        if $r10 != null goto label02;

        $r23 = new java.util.ArrayList;

        specialinvoke $r23.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewGroup: java.util.List mTransientIndices> = $r23;

        $r24 = new java.util.ArrayList;

        specialinvoke $r24.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewGroup: java.util.List mTransientViews> = $r24;

     label02:
        $r11 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        i1 = interfaceinvoke $r11.<java.util.List: int size()>();

        if i1 <= 0 goto label06;

        i5 = 0;

     label03:
        if i5 >= i1 goto label05;

        $r20 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(i5);

        $r22 = (java.lang.Integer) $r21;

        $i4 = virtualinvoke $r22.<java.lang.Integer: int intValue()>();

        if i0 >= $i4 goto label04;

        goto label05;

     label04:
        i5 = i5 + 1;

        goto label03;

     label05:
        $r17 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r17.<java.util.List: void add(int,java.lang.Object)>(i5, $r18);

        $r19 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        interfaceinvoke $r19.<java.util.List: void add(int,java.lang.Object)>(i5, r1);

        goto label07;

     label06:
        $r12 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>($r13);

        $r14 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        interfaceinvoke $r14.<java.util.List: boolean add(java.lang.Object)>(r1);

     label07:
        r1.<android.view.View: android.view.ViewParent mParent> = r0;

        $r15 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r15 == null goto label08;

        $r16 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        $i2 = r0.<android.view.ViewGroup: int mViewFlags>;

        $i3 = $i2 & 12;

        virtualinvoke r1.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>($r16, $i3);

     label08:
        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;

     label09:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The specified view already has a parent ");

        $r6 = r1.<android.view.View: android.view.ViewParent mParent>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label10:
        return;
    }

    public void addView(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int)>(r1, -1);

        return;
    }

    public void addView(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0;
        android.view.ViewGroup$LayoutParams r2, r5;
        java.lang.IllegalArgumentException $r3, $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        if r1 == null goto label3;

        r2 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r5 = r2;

        if r2 != null goto label2;

        r5 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>();

        if r5 == null goto label1;

        goto label2;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("generateDefaultLayoutParams() cannot return null");

        throw $r4;

     label2:
        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>(r1, i0, r5);

        return;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add a null child view to a ViewGroup");

        throw $r3;
    }

    public void addView(android.view.View, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1;
        android.view.ViewGroup$LayoutParams r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>();

        r2.<android.view.ViewGroup$LayoutParams: int width> = i0;

        r2.<android.view.ViewGroup$LayoutParams: int height> = i1;

        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>(r1, -1, r2);

        return;
    }

    public void addView(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0;
        android.view.ViewGroup$LayoutParams r2;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        if r1 == null goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        specialinvoke r0.<android.view.ViewGroup: void addViewInner(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>(r1, i0, r2, 0);

        return;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add a null child view to a ViewGroup");

        throw $r3;
    }

    public void addView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        virtualinvoke r0.<android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>(r1, -1, r2);

        return;
    }

    protected boolean addViewInLayout(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0;
        android.view.ViewGroup$LayoutParams r2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>(r1, i0, r2, 0);

        return $z0;
    }

    protected boolean addViewInLayout(android.view.View, int, android.view.ViewGroup$LayoutParams, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, $i1, $i2, $i3;
        android.view.ViewGroup$LayoutParams r2;
        boolean z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        z0 := @parameter3: boolean;

        if r1 == null goto label1;

        r1.<android.view.View: android.view.ViewParent mParent> = null;

        specialinvoke r0.<android.view.ViewGroup: void addViewInner(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>(r1, i0, r2, z0);

        $i1 = r1.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & -2097153;

        $i3 = $i2 | 32;

        r1.<android.view.View: int mPrivateFlags> = $i3;

        return 1;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot add a null child view to a ViewGroup");

        throw $r3;
    }

    protected void attachLayoutAnimationParameters(android.view.View, android.view.ViewGroup$LayoutParams, int, int)
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$LayoutParams r1;
        int i0, i1;
        android.view.animation.LayoutAnimationController$AnimationParameters r2, $r3, r5;
        android.view.View r4;

        r0 := @this: android.view.ViewGroup;

        r4 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ViewGroup$LayoutParams;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r2 = r1.<android.view.ViewGroup$LayoutParams: android.view.animation.LayoutAnimationController$AnimationParameters layoutAnimationParameters>;

        r5 = r2;

        if r2 != null goto label1;

        $r3 = new android.view.animation.LayoutAnimationController$AnimationParameters;

        specialinvoke $r3.<android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()>();

        r5 = $r3;

        r1.<android.view.ViewGroup$LayoutParams: android.view.animation.LayoutAnimationController$AnimationParameters layoutAnimationParameters> = $r3;

     label1:
        r5.<android.view.animation.LayoutAnimationController$AnimationParameters: int count> = i1;

        r5.<android.view.animation.LayoutAnimationController$AnimationParameters: int index> = i0;

        return;
    }

    protected void attachViewToParent(android.view.View, int, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        android.view.ViewGroup$LayoutParams r2;
        boolean $z0, $z1, $z3, z4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.ViewGroup$LayoutParams;

        r1.<android.view.View: android.view.ViewGroup$LayoutParams mLayoutParams> = r2;

        i9 = i0;

        if i0 >= 0 goto label1;

        i9 = r0.<android.view.ViewGroup: int mChildrenCount>;

     label1:
        specialinvoke r0.<android.view.ViewGroup: void addInArray(android.view.View,int)>(r1, i9);

        r1.<android.view.View: android.view.ViewParent mParent> = r0;

        $i1 = r1.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & -2097153;

        $i3 = $i2 & -32769;

        $i4 = $i3 | 32;

        $i5 = $i4 | -2147483648;

        r1.<android.view.View: int mPrivateFlags> = $i5;

        $i6 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i7 = $i6 | -2147483648;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i7;

        $z0 = virtualinvoke r1.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label2;

        $r3 = virtualinvoke r1.<android.view.View: android.view.View findFocus()>();

        virtualinvoke r0.<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>(r1, $r3);

     label2:
        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isAttachedToWindow()>();

        if $z1 == 0 goto label3;

        $i8 = virtualinvoke r0.<android.view.ViewGroup: int getWindowVisibility()>();

        if $i8 != 0 goto label3;

        $z3 = virtualinvoke r0.<android.view.ViewGroup: boolean isShown()>();

        if $z3 == 0 goto label3;

        z4 = 1;

        goto label4;

     label3:
        z4 = 0;

     label4:
        virtualinvoke r0.<android.view.ViewGroup: boolean dispatchVisibilityAggregated(boolean)>(z4);

        virtualinvoke r0.<android.view.ViewGroup: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        return;
    }

    public void bringChildToFront(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int indexOfChild(android.view.View)>(r1);

        if i0 < 0 goto label1;

        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int)>(i0);

        $i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        specialinvoke r0.<android.view.ViewGroup: void addInArray(android.view.View,int)>(r1, $i1);

        r1.<android.view.View: android.view.ViewParent mParent> = r0;

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate()>();

     label1:
        return;
    }

    java.util.ArrayList buildOrderedChildList()
    {
        android.view.ViewGroup r0;
        int i0, $i1, i3, i4, i5;
        boolean z0, $z1;
        float f0, $f1;
        java.util.ArrayList $r1, $r2, $r4, $r5, $r8, r9;
        android.view.View[] $r3;
        java.lang.Object $r6;
        android.view.View $r7, r10;
        byte $b2;

        r0 := @this: android.view.ViewGroup;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 <= 1 goto label8;

        $z1 = specialinvoke r0.<android.view.ViewGroup: boolean hasChildWithZ()>();

        if $z1 != 0 goto label1;

        goto label8;

     label1:
        r9 = r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren>;

        if r9 != null goto label2;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>(int)>(i0);

        r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren> = $r8;

        goto label3;

     label2:
        virtualinvoke r9.<java.util.ArrayList: void clear()>();

        $r1 = r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren>;

        virtualinvoke $r1.<java.util.ArrayList: void ensureCapacity(int)>(i0);

     label3:
        z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        i3 = 0;

     label4:
        if i3 >= i0 goto label7;

        i4 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i0, i3, z0);

        $r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r10 = $r3[i4];

        f0 = virtualinvoke r10.<android.view.View: float getZ()>();

        i5 = i3;

     label5:
        if i5 <= 0 goto label6;

        $r5 = r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren>;

        $i1 = i5 - 1;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r7 = (android.view.View) $r6;

        $f1 = virtualinvoke $r7.<android.view.View: float getZ()>();

        $b2 = $f1 cmpl f0;

        if $b2 <= 0 goto label6;

        i5 = i5 + -1;

        goto label5;

     label6:
        $r4 = r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren>;

        virtualinvoke $r4.<java.util.ArrayList: void add(int,java.lang.Object)>(i5, r10);

        i3 = i3 + 1;

        goto label4;

     label7:
        $r2 = r0.<android.view.ViewGroup: java.util.ArrayList mPreSortedChildren>;

        return $r2;

     label8:
        return null;
    }

    public java.util.ArrayList buildTouchDispatchChildList()
    {
        android.view.ViewGroup r0;
        java.util.ArrayList $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        return $r1;
    }

    protected boolean canAnimate()
    {
        android.view.ViewGroup r0;
        android.view.animation.LayoutAnimationController $r1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void captureTransitioningViews(java.util.List)
    {
        android.view.ViewGroup r0;
        java.util.List r1;
        int i0, $i1, i2;
        boolean $z0;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.List;

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getVisibility()>();

        if $i1 == 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransitionGroup()>();

        if $z0 == 0 goto label2;

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r0);

        goto label4;

     label2:
        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i2 = 0;

     label3:
        if i2 >= i0 goto label4;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        virtualinvoke $r2.<android.view.View: void captureTransitioningViews(java.util.List)>(r1);

        i2 = i2 + 1;

        goto label3;

     label4:
        return;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$LayoutParams r1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        if r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void childDrawableStateChanged(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void refreshDrawableState()>();

     label1:
        return;
    }

    public void childHasTransientStateChanged(android.view.View, boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, z1, z2;
        int $i0, $i1, $i2, $i3;
        android.view.ViewParent $r2, $r3, $r6;
        java.lang.AbstractMethodError $r4;
        java.lang.StringBuilder $r5;
        java.lang.Class $r7;
        java.lang.String $r8, $r11;
        android.view.View r12;

        r0 := @this: android.view.ViewGroup;

        r12 := @parameter0: android.view.View;

        z1 := @parameter1: boolean;

        z0 = virtualinvoke r0.<android.view.ViewGroup: boolean hasTransientState()>();

        if z1 == 0 goto label1;

        $i2 = r0.<android.view.ViewGroup: int mChildCountWithTransientState>;

        $i3 = $i2 + 1;

        r0.<android.view.ViewGroup: int mChildCountWithTransientState> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.ViewGroup: int mChildCountWithTransientState>;

        $i1 = $i0 - 1;

        r0.<android.view.ViewGroup: int mChildCountWithTransientState> = $i1;

     label2:
        z2 = virtualinvoke r0.<android.view.ViewGroup: boolean hasTransientState()>();

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label6;

        if z0 == z2 goto label6;

     label3:
        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void childHasTransientStateChanged(android.view.View,boolean)>(r0, z2);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Class getClass()>();

        $r8 = virtualinvoke $r7.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewGroup", $r11, $r4);

     label6:
        return;

        catch java.lang.AbstractMethodError from label3 to label4 with label5;
    }

    protected void cleanupLayoutState(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -4097;

        r1.<android.view.View: int mPrivateFlags> = $i1;

        return;
    }

    public void clearChildFocus(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r0.<android.view.ViewGroup: android.view.View mFocused> = null;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void clearChildFocus(android.view.View)>(r0);

     label1:
        return;
    }

    void clearDefaultFocus(android.view.View)
    {
        android.view.ViewGroup r0, $r4;
        android.view.View r1, $r6, r7, r8;
        android.view.ViewParent $r2, $r3;
        boolean $z0, $z1, $z2, $z3;
        android.view.View[] $r5;
        int i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r7 := @parameter0: android.view.View;

        r1 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        if r1 == r7 goto label1;

        if r1 == null goto label1;

        $z3 = virtualinvoke r1.<android.view.View: boolean isFocusedByDefault()>();

        if $z3 == 0 goto label1;

        return;

     label1:
        r0.<android.view.ViewGroup: android.view.View mDefaultFocus> = null;

        i0 = 0;

     label2:
        $i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 >= $i1 goto label5;

        $r5 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r8 = $r5[i0];

        $z1 = virtualinvoke r8.<android.view.View: boolean isFocusedByDefault()>();

        if $z1 == 0 goto label3;

        r0.<android.view.ViewGroup: android.view.View mDefaultFocus> = r8;

        return;

     label3:
        $r6 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        if $r6 != null goto label4;

        $z2 = virtualinvoke r8.<android.view.View: boolean hasDefaultFocus()>();

        if $z2 == 0 goto label4;

        r0.<android.view.ViewGroup: android.view.View mDefaultFocus> = r8;

     label4:
        i0 = i0 + 1;

        goto label2;

     label5:
        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z0 = $r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label6;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r4 = (android.view.ViewGroup) $r3;

        virtualinvoke $r4.<android.view.ViewGroup: void clearDefaultFocus(android.view.View)>(r0);

     label6:
        return;
    }

    public void clearDisappearingChildren()
    {
        android.view.ViewGroup r0;
        java.util.ArrayList r1;
        int i0, i1;
        android.view.View r2;
        java.lang.Object $r3;
        android.view.View$AttachInfo $r4;

        r0 := @this: android.view.ViewGroup;

        r1 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if r1 == null goto label4;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r2 = (android.view.View) $r3;

        $r4 = r2.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label2;

        virtualinvoke r2.<android.view.View: void dispatchDetachedFromWindow()>();

     label2:
        virtualinvoke r2.<android.view.View: void clearAnimation()>();

        i1 = i1 + 1;

        goto label1;

     label3:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate()>();

     label4:
        return;
    }

    public void clearFocus()
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r2;

        r0 := @this: android.view.ViewGroup;

        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r2 != null goto label1;

        specialinvoke r0.<android.view.View: void clearFocus()>();

        goto label2;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        r0.<android.view.ViewGroup: android.view.View mFocused> = null;

        virtualinvoke r1.<android.view.View: void clearFocus()>();

     label2:
        return;
    }

    void clearFocusedInCluster()
    {
        android.view.ViewGroup r0, $r3;
        android.view.View r1;
        android.view.ViewParent r2, r4;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View findKeyboardNavigationCluster()>();

        r4 = r0;

     label1:
        $r3 = (android.view.ViewGroup) r4;

        $r3.<android.view.ViewGroup: android.view.View mFocusedInCluster> = null;

        if r4 != r1 goto label2;

        goto label3;

     label2:
        r2 = interfaceinvoke r4.<android.view.ViewParent: android.view.ViewParent getParent()>();

        r4 = r2;

        $z0 = r2 instanceof android.view.ViewGroup;

        if $z0 != 0 goto label1;

     label3:
        return;
    }

    void clearFocusedInCluster(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        if $r2 == r1 goto label1;

        return;

     label1:
        virtualinvoke r0.<android.view.ViewGroup: void clearFocusedInCluster()>();

        return;
    }

    android.graphics.Insets computeOpticalInsets()
    {
        android.view.ViewGroup r0;
        boolean $z0;
        android.graphics.Insets $r1, $r2, r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11, i12, i13, i14;
        android.view.View r3;

        r0 := @this: android.view.ViewGroup;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isLayoutModeOptical()>();

        if $z0 == 0 goto label4;

        i6 = 0;

        i7 = 0;

        i8 = 0;

        i9 = 0;

        i10 = 0;

     label1:
        $i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i10 >= $i0 goto label3;

        r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i10);

        i11 = i6;

        i12 = i7;

        i13 = i8;

        i14 = i9;

        $i1 = virtualinvoke r3.<android.view.View: int getVisibility()>();

        if $i1 != 0 goto label2;

        r4 = virtualinvoke r3.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        $i2 = r4.<android.graphics.Insets: int left>;

        i11 = staticinvoke <java.lang.Math: int max(int,int)>(i6, $i2);

        $i3 = r4.<android.graphics.Insets: int top>;

        i12 = staticinvoke <java.lang.Math: int max(int,int)>(i7, $i3);

        $i4 = r4.<android.graphics.Insets: int right>;

        i13 = staticinvoke <java.lang.Math: int max(int,int)>(i8, $i4);

        $i5 = r4.<android.graphics.Insets: int bottom>;

        i14 = staticinvoke <java.lang.Math: int max(int,int)>(i9, $i5);

     label2:
        i10 = i10 + 1;

        i6 = i11;

        i7 = i12;

        i8 = i13;

        i9 = i14;

        goto label1;

     label3:
        $r2 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>(i6, i7, i8, i9);

        return $r2;

     label4:
        $r1 = <android.graphics.Insets: android.graphics.Insets NONE>;

        return $r1;
    }

    public android.graphics.Bitmap createSnapshot(android.view.ViewDebug$CanvasProvider, boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18;
        java.lang.Throwable $r1;
        android.view.ViewDebug$CanvasProvider r2;
        int[] r3, r4;
        android.view.View r5, r7, r9;
        android.graphics.Bitmap r6;

        r0 := @this: android.view.ViewGroup;

        r2 := @parameter0: android.view.ViewDebug$CanvasProvider;

        z0 := @parameter1: boolean;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r3 = null;

        if z0 == 0 goto label3;

        r4 = newarray (int)[i0];

        i16 = 0;

     label1:
        r3 = r4;

        if i16 >= i0 goto label3;

        r5 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i16);

        $i6 = virtualinvoke r5.<android.view.View: int getVisibility()>();

        r4[i16] = $i6;

        $i7 = r4[i16];

        if $i7 != 0 goto label2;

        $i8 = r5.<android.view.View: int mViewFlags>;

        $i9 = $i8 & -13;

        $i10 = $i9 | 4;

        r5.<android.view.View: int mViewFlags> = $i10;

     label2:
        i16 = i16 + 1;

        goto label1;

     label3:
        r6 = specialinvoke r0.<android.view.View: android.graphics.Bitmap createSnapshot(android.view.ViewDebug$CanvasProvider,boolean)>(r2, z0);

     label4:
        if z0 == 0 goto label6;

        i17 = 0;

     label5:
        if i17 >= i0 goto label6;

        r7 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i17);

        $i1 = r7.<android.view.View: int mViewFlags>;

        $i4 = $i1 & -13;

        $i2 = r3[i17];

        $i3 = $i2 & 12;

        $i5 = $i4 | $i3;

        r7.<android.view.View: int mViewFlags> = $i5;

        i17 = i17 + 1;

        goto label5;

     label6:
        return r6;

     label7:
        $r1 := @caughtexception;

        if z0 == 0 goto label9;

        i18 = 0;

     label8:
        if i18 >= i0 goto label9;

        r9 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i18);

        $i11 = r9.<android.view.View: int mViewFlags>;

        $i14 = $i11 & -13;

        $i12 = r3[i18];

        $i13 = $i12 & 12;

        $i15 = $i14 | $i13;

        r9.<android.view.View: int mViewFlags> = $i15;

        i18 = i18 + 1;

        goto label8;

     label9:
        throw $r1;

        catch java.lang.Throwable from label3 to label4 with label7;
    }

    protected void debug(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, $i2, $i3, $i5, $i8, $i10, $i12, i13;
        android.view.View $r1, $r2, $r3, $r9, $r18, $r23, $r28;
        java.lang.StringBuilder $r4, $r10, $r14, $r19, $r24;
        java.lang.String $r7, $r13, $r17, $r22, $r27, r29, r31, r33, r35, r37;
        android.view.View[] $r8;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void debug(int)>(i0);

        $r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r1 == null goto label1;

        r29 = staticinvoke <android.view.ViewGroup: java.lang.String debugIndent(int)>(i0);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mFocused");

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r27);

        $r28 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $i12 = i0 + 1;

        virtualinvoke $r28.<android.view.View: void debug(int)>($i12);

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        if $r2 == null goto label2;

        r31 = staticinvoke <android.view.ViewGroup: java.lang.String debugIndent(int)>(i0);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDefaultFocus");

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r22);

        $r23 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        $i10 = i0 + 1;

        virtualinvoke $r23.<android.view.View: void debug(int)>($i10);

     label2:
        $r3 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        if $r3 == null goto label3;

        r33 = staticinvoke <android.view.ViewGroup: java.lang.String debugIndent(int)>(i0);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mFocusedInCluster");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r17);

        $r18 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        $i8 = i0 + 1;

        virtualinvoke $r18.<android.view.View: void debug(int)>($i8);

     label3:
        $i2 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if $i2 == 0 goto label4;

        r35 = staticinvoke <android.view.ViewGroup: java.lang.String debugIndent(int)>(i0);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r35);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{");

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r13);

     label4:
        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i13 = 0;

     label5:
        if i13 >= i1 goto label6;

        $r8 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r9 = $r8[i13];

        $i5 = i0 + 1;

        virtualinvoke $r9.<android.view.View: void debug(int)>($i5);

        i13 = i13 + 1;

        goto label5;

     label6:
        $i3 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if $i3 == 0 goto label7;

        r37 = staticinvoke <android.view.ViewGroup: java.lang.String debugIndent(int)>(i0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("View", $r7);

     label7:
        return;
    }

    void decrementChildUnhandledKeyListeners()
    {
        android.view.ViewGroup r0, $r3;
        int i0, $i1;
        android.view.ViewParent $r1, $r2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i1 = r0.<android.view.ViewGroup: int mChildUnhandledKeyListeners>;

        i0 = $i1 - 1;

        r0.<android.view.ViewGroup: int mChildUnhandledKeyListeners> = i0;

        if i0 != 0 goto label1;

        $r1 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z0 = $r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r3 = (android.view.ViewGroup) $r2;

        virtualinvoke $r3.<android.view.ViewGroup: void decrementChildUnhandledKeyListeners()>();

     label1:
        return;
    }

    protected void destroyHardwareResources()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View $r1;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void destroyHardwareResources()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        virtualinvoke $r1.<android.view.View: void destroyHardwareResources()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void detachAllViewsFromParent()
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        android.view.View $r2;
        int i0, i1;

        r0 := @this: android.view.ViewGroup;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 > 0 goto label1;

        return;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r0.<android.view.ViewGroup: int mChildrenCount> = 0;

        i1 = i0 + -1;

     label2:
        if i1 < 0 goto label3;

        $r2 = r1[i1];

        $r2.<android.view.View: android.view.ViewParent mParent> = null;

        r1[i1] = null;

        i1 = i1 + -1;

        goto label2;

     label3:
        return;
    }

    protected void detachViewFromParent(int)
    {
        android.view.ViewGroup r0;
        int i0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int)>(i0);

        return;
    }

    protected void detachViewFromParent(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int $i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int indexOfChild(android.view.View)>(r1);

        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int)>($i0);

        return;
    }

    protected void detachViewsFromParent(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.ViewGroup: void removeFromArray(int,int)>(i0, i1);

        return;
    }

    public boolean dispatchActivityResult(java.lang.String, int, int, android.content.Intent)
    {
        android.view.ViewGroup r0;
        java.lang.String r1;
        int i0, i1, i2, i3;
        android.content.Intent r2;
        boolean $z0, $z1;
        android.view.View $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.content.Intent;

        $z0 = specialinvoke r0.<android.view.View: boolean dispatchActivityResult(java.lang.String,int,int,android.content.Intent)>(r1, i0, i1, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        i2 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i3 = 0;

     label2:
        if i3 >= i2 goto label4;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i3);

        $z1 = virtualinvoke $r3.<android.view.View: boolean dispatchActivityResult(java.lang.String,int,int,android.content.Intent)>(r1, i0, i1, r2);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 0;
    }

    public android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)
    {
        android.view.ViewGroup r0;
        boolean $z0, $z1;
        android.view.WindowInsets $r1, $r2, r3, r4;

        r0 := @this: android.view.ViewGroup;

        r3 := @parameter0: android.view.WindowInsets;

        r4 = specialinvoke r0.<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>(r3);

        $z0 = virtualinvoke r4.<android.view.WindowInsets: boolean isConsumed()>();

        if $z0 == 0 goto label1;

        return r4;

     label1:
        $z1 = <android.view.View: boolean sBrokenInsetsDispatch>;

        if $z1 == 0 goto label2;

        $r2 = specialinvoke r0.<android.view.ViewGroup: android.view.WindowInsets brokenDispatchApplyWindowInsets(android.view.WindowInsets)>(r4);

        return $r2;

     label2:
        $r1 = specialinvoke r0.<android.view.ViewGroup: android.view.WindowInsets newDispatchApplyWindowInsets(android.view.WindowInsets)>(r4);

        return $r1;
    }

    void dispatchAttachedToWindow(android.view.View$AttachInfo, int)
    {
        android.view.ViewGroup r0;
        android.view.View$AttachInfo r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10, i11, i12;
        android.view.View[] r2;
        java.util.List $r3, r6;
        java.lang.Object $r4;
        android.view.View r5, r7;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        $i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i2 = $i1 | 4194304;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i2;

        specialinvoke r0.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>(r1, i0);

        $i3 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i4 = $i3 & -4194305;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i4;

        i9 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i10 = 0;

     label1:
        if i10 >= i9 goto label2;

        r5 = r2[i10];

        $i7 = virtualinvoke r5.<android.view.View: int getVisibility()>();

        $i8 = virtualinvoke r0.<android.view.ViewGroup: int combineVisibility(int,int)>(i0, $i7);

        virtualinvoke r5.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>(r1, $i8);

        i10 = i10 + 1;

        goto label1;

     label2:
        r6 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        if r6 != null goto label3;

        i11 = 0;

        goto label4;

     label3:
        i11 = interfaceinvoke r6.<java.util.List: int size()>();

     label4:
        i12 = 0;

     label5:
        if i12 >= i11 goto label6;

        $r3 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i12);

        r7 = (android.view.View) $r4;

        $i5 = virtualinvoke r7.<android.view.View: int getVisibility()>();

        $i6 = virtualinvoke r0.<android.view.ViewGroup: int combineVisibility(int,int)>(i0, $i5);

        virtualinvoke r7.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>(r1, $i6);

        i12 = i12 + 1;

        goto label5;

     label6:
        return;
    }

    void dispatchCancelPendingInputEvents()
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void dispatchCancelPendingInputEvents()>();

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void dispatchCancelPendingInputEvents()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean dispatchCapturedPointerEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        android.view.View r2, $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label1;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label1:
        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r2 == null goto label2;

        $i2 = r2.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label2;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r3.<android.view.View: boolean dispatchCapturedPointerEvent(android.view.MotionEvent)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    void dispatchCollectViewAttributes(android.view.View$AttachInfo, int)
    {
        android.view.ViewGroup r0;
        android.view.View$AttachInfo r1;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        android.view.View[] r2;
        android.view.View r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View$AttachInfo;

        i0 := @parameter1: int;

        $i2 = i0 & 12;

        if $i2 != 0 goto label2;

        specialinvoke r0.<android.view.View: void dispatchCollectViewAttributes(android.view.View$AttachInfo,int)>(r1, i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i6 = 0;

     label1:
        if i6 >= i1 goto label2;

        r3 = r2[i6];

        $i3 = r3.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 12;

        $i5 = $i4 | i0;

        virtualinvoke r3.<android.view.View: void dispatchCollectViewAttributes(android.view.View$AttachInfo,int)>(r1, $i5);

        i6 = i6 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchConfigurationChanged(android.content.res.Configuration)
    {
        android.view.ViewGroup r0;
        android.content.res.Configuration r1;
        int i0, i1;
        android.view.View[] r2;
        android.view.View $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.content.res.Configuration;

        specialinvoke r0.<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>(r1);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        virtualinvoke $r3.<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    void dispatchDetachedFromWindow()
    {
        android.view.ViewGroup r0;
        int i0, i2, i3, i4;
        java.util.List $r1, $r2, $r3;
        java.lang.Object $r4;
        android.view.View $r5, $r6;
        android.view.DragEvent r7;
        android.view.View[] r8;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.ViewGroup: void cancelAndClearTouchTargets(android.view.MotionEvent)>(null);

        specialinvoke r0.<android.view.ViewGroup: void exitHoverTargets()>();

        specialinvoke r0.<android.view.ViewGroup: void exitTooltipHoverTargets()>();

        r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed> = 0;

        r0.<android.view.ViewGroup: java.util.HashSet mChildrenInterestedInDrag> = null;

        r0.<android.view.ViewGroup: boolean mIsInterestedInDrag> = 0;

        r7 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        if r7 == null goto label1;

        virtualinvoke r7.<android.view.DragEvent: void recycle()>();

        r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent> = null;

     label1:
        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r8 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r6 = r8[i2];

        virtualinvoke $r6.<android.view.View: void dispatchDetachedFromWindow()>();

        i2 = i2 + 1;

        goto label2;

     label3:
        virtualinvoke r0.<android.view.ViewGroup: void clearDisappearingChildren()>();

        $r1 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        if $r1 != null goto label4;

        i3 = 0;

        goto label5;

     label4:
        $r2 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        i3 = interfaceinvoke $r2.<java.util.List: int size()>();

     label5:
        i4 = 0;

     label6:
        if i4 >= i3 goto label7;

        $r3 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i4);

        $r5 = (android.view.View) $r4;

        virtualinvoke $r5.<android.view.View: void dispatchDetachedFromWindow()>();

        i4 = i4 + 1;

        goto label6;

     label7:
        specialinvoke r0.<android.view.View: void dispatchDetachedFromWindow()>();

        return;
    }

    public void dispatchDisplayHint(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void dispatchDisplayHint(int)>(i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r1[i2];

        virtualinvoke $r2.<android.view.View: void dispatchDisplayHint(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    boolean dispatchDragEnterExitInPreN(android.view.DragEvent)
    {
        android.view.ViewGroup r0;
        android.view.DragEvent r1;
        android.view.View r2;
        int $i0;
        boolean $z0, $z2, z3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.DragEvent;

        $i0 = r1.<android.view.DragEvent: int mAction>;

        if $i0 != 6 goto label1;

        r2 = r0.<android.view.ViewGroup: android.view.View mCurrentDragChild>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.View: boolean dispatchDragEnterExitInPreN(android.view.DragEvent)>(r1);

        r0.<android.view.ViewGroup: android.view.View mCurrentDragChild> = null;

     label1:
        $z2 = r0.<android.view.ViewGroup: boolean mIsInterestedInDrag>;

        if $z2 == 0 goto label2;

        $z0 = specialinvoke r0.<android.view.View: boolean dispatchDragEnterExitInPreN(android.view.DragEvent)>(r1);

        if $z0 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    public boolean dispatchDragEvent(android.view.DragEvent)
    {
        android.view.ViewGroup r0;
        android.view.DragEvent r1, $r3, $r4, r15;
        float f0, f1, $f2, $f3, $f4, $f5;
        android.graphics.PointF r2;
        int i0, $i1, $i2, $i3, i4, i5, i6;
        android.view.View $r5, $r7, $r8, $r9, $r11, r16, r17, r20;
        boolean $z1, $z2, $z3, $z4, $z5, $z8, $z9, $z10, $z11, z12, z15, z16, z17, z18, z19, z20;
        java.util.HashSet $r6, r13, r18;
        java.lang.Object $r10;
        android.content.ClipData r12;
        java.util.Iterator r14;
        android.view.View[] r19;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.DragEvent;

        z12 = 0;

        f0 = r1.<android.view.DragEvent: float mX>;

        f1 = r1.<android.view.DragEvent: float mY>;

        r12 = r1.<android.view.DragEvent: android.content.ClipData mClipData>;

        r2 = specialinvoke r0.<android.view.ViewGroup: android.graphics.PointF getLocalPoint()>();

        i4 = r1.<android.view.DragEvent: int mAction>;

        if i4 == 1 goto label19;

        if i4 == 2 goto label09;

        if i4 == 3 goto label09;

        if i4 == 4 goto label01;

        z15 = 0;

        goto label26;

     label01:
        r13 = r0.<android.view.ViewGroup: java.util.HashSet mChildrenInterestedInDrag>;

        if r13 == null goto label05;

        r14 = virtualinvoke r13.<java.util.HashSet: java.util.Iterator iterator()>();

        z12 = 0;

     label02:
        $z10 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z10 == 0 goto label04;

        $r10 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        $r11 = (android.view.View) $r10;

        $z11 = virtualinvoke $r11.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        if $z11 == 0 goto label03;

        z12 = 1;

     label03:
        goto label02;

     label04:
        virtualinvoke r13.<java.util.HashSet: void clear()>();

     label05:
        r15 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        if r15 == null goto label06;

        virtualinvoke r15.<android.view.DragEvent: void recycle()>();

        r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent> = null;

     label06:
        z16 = z12;

        $z8 = r0.<android.view.ViewGroup: boolean mIsInterestedInDrag>;

        if $z8 == 0 goto label08;

        $z9 = specialinvoke r0.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        if $z9 == 0 goto label07;

        z12 = 1;

     label07:
        r0.<android.view.ViewGroup: boolean mIsInterestedInDrag> = 0;

        z16 = z12;

     label08:
        z15 = z16;

        goto label26;

     label09:
        $f3 = r1.<android.view.DragEvent: float mX>;

        $f2 = r1.<android.view.DragEvent: float mY>;

        r16 = virtualinvoke r0.<android.view.ViewGroup: android.view.View findFrontmostDroppableChildAt(float,float,android.graphics.PointF)>($f3, $f2, r2);

        $r7 = r0.<android.view.ViewGroup: android.view.View mCurrentDragChild>;

        if r16 == $r7 goto label13;

        $z5 = <android.view.ViewGroup: boolean sCascadedDragDrop>;

        if $z5 == 0 goto label12;

        i5 = r1.<android.view.DragEvent: int mAction>;

        r1.<android.view.DragEvent: float mX> = 0.0F;

        r1.<android.view.DragEvent: float mY> = 0.0F;

        r1.<android.view.DragEvent: android.content.ClipData mClipData> = null;

        $r8 = r0.<android.view.ViewGroup: android.view.View mCurrentDragChild>;

        if $r8 == null goto label10;

        r1.<android.view.DragEvent: int mAction> = 6;

        $r9 = r0.<android.view.ViewGroup: android.view.View mCurrentDragChild>;

        virtualinvoke $r9.<android.view.View: boolean dispatchDragEnterExitInPreN(android.view.DragEvent)>(r1);

     label10:
        if r16 == null goto label11;

        r1.<android.view.DragEvent: int mAction> = 5;

        virtualinvoke r16.<android.view.View: boolean dispatchDragEnterExitInPreN(android.view.DragEvent)>(r1);

     label11:
        r1.<android.view.DragEvent: int mAction> = i5;

        r1.<android.view.DragEvent: float mX> = f0;

        r1.<android.view.DragEvent: float mY> = f1;

        r1.<android.view.DragEvent: android.content.ClipData mClipData> = r12;

     label12:
        r0.<android.view.ViewGroup: android.view.View mCurrentDragChild> = r16;

     label13:
        r17 = r16;

        if r16 != null goto label14;

        r17 = r16;

        $z4 = r0.<android.view.ViewGroup: boolean mIsInterestedInDrag>;

        if $z4 == 0 goto label14;

        r17 = r0;

     label14:
        z15 = 0;

        if r17 == null goto label26;

        if r17 == r0 goto label18;

        $f4 = r2.<android.graphics.PointF: float x>;

        r1.<android.view.DragEvent: float mX> = $f4;

        $f5 = r2.<android.graphics.PointF: float y>;

        r1.<android.view.DragEvent: float mY> = $f5;

        z17 = virtualinvoke r17.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        r1.<android.view.DragEvent: float mX> = f0;

        r1.<android.view.DragEvent: float mY> = f1;

        z15 = z17;

        $z2 = r0.<android.view.ViewGroup: boolean mIsInterestedInDrag>;

        if $z2 == 0 goto label26;

        $z3 = <android.view.ViewGroup: boolean sCascadedDragDrop>;

        if $z3 == 0 goto label15;

        z18 = z17;

        goto label16;

     label15:
        z18 = r1.<android.view.DragEvent: boolean mEventHandlerWasCalled>;

     label16:
        z15 = z17;

        if z18 != 0 goto label17;

        z15 = specialinvoke r0.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

     label17:
        goto label26;

     label18:
        z15 = specialinvoke r0.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        goto label26;

     label19:
        r0.<android.view.ViewGroup: android.view.View mCurrentDragChild> = null;

        $r3 = staticinvoke <android.view.DragEvent: android.view.DragEvent obtain(android.view.DragEvent)>(r1);

        r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent> = $r3;

        r18 = r0.<android.view.ViewGroup: java.util.HashSet mChildrenInterestedInDrag>;

        if r18 != null goto label20;

        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        r0.<android.view.ViewGroup: java.util.HashSet mChildrenInterestedInDrag> = $r6;

        goto label21;

     label20:
        virtualinvoke r18.<java.util.HashSet: void clear()>();

     label21:
        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r19 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i6 = 0;

        z15 = 0;

     label22:
        if i6 >= i0 goto label24;

        r20 = r19[i6];

        $i1 = r20.<android.view.View: int mPrivateFlags2>;

        $i2 = $i1 & -4;

        r20.<android.view.View: int mPrivateFlags2> = $i2;

        z19 = z15;

        $i3 = virtualinvoke r20.<android.view.View: int getVisibility()>();

        if $i3 != 0 goto label23;

        z19 = z15;

        $r5 = r19[i6];

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean notifyChildOfDragStart(android.view.View)>($r5);

        if $z1 == 0 goto label23;

        z19 = 1;

     label23:
        i6 = i6 + 1;

        z15 = z19;

        goto label22;

     label24:
        z20 = specialinvoke r0.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        r0.<android.view.ViewGroup: boolean mIsInterestedInDrag> = z20;

        if z20 == 0 goto label25;

        z15 = 1;

     label25:
        if z15 != 0 goto label26;

        $r4 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        virtualinvoke $r4.<android.view.DragEvent: void recycle()>();

        r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent> = null;

     label26:
        return z15;
    }

    protected void dispatchDraw(android.graphics.Canvas)
    {
        android.view.ViewGroup r0;
        android.graphics.Canvas r1;
        boolean z0, $z1, $z2, $z4, $z5, $z6, $z7, $z8, $z10, $z12, z13, z14, z15, z16, z17, z18, z19, z20, z21;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, i47, i48, i49, i50, $i51, i52, i53, i54, i55, i57, i58, i59, i60, i61;
        long l1;
        android.graphics.RenderNode $r2;
        java.util.ArrayList $r3, r25, r29;
        android.view.animation.LayoutAnimationController $r4, r22;
        android.view.ViewGroup$2 $r5;
        java.lang.Object $r6, $r9, $r13, $r16;
        android.view.View $r7, r21, r26, r27, r28;
        java.util.List $r8, $r12, $r15, r24;
        android.view.animation.Animation $r10, $r11, $r17, $r18;
        java.lang.Integer $r14;
        android.view.ViewGroup$LayoutParams $r19;
        android.view.View[] r20;
        android.view.animation.Animation$AnimationListener r23;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.view.ViewGroup: android.graphics.RenderNode mRenderNode>;

        z0 = virtualinvoke r1.<android.graphics.Canvas: boolean isRecordingFor(java.lang.Object)>($r2);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r20 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i47 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i2 = i47 & 8;

        if $i2 == 0 goto label05;

        $z10 = virtualinvoke r0.<android.view.ViewGroup: boolean canAnimate()>();

        if $z10 == 0 goto label05;

        virtualinvoke r0.<android.view.ViewGroup: boolean isHardwareAccelerated()>();

        i48 = 0;

     label01:
        if i48 >= i0 goto label03;

        r21 = r20[i48];

        $i45 = r21.<android.view.View: int mViewFlags>;

        $i46 = $i45 & 12;

        if $i46 != 0 goto label02;

        $r19 = virtualinvoke r21.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        virtualinvoke r0.<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)>(r21, $r19, i48, i0);

        specialinvoke r0.<android.view.ViewGroup: void bindLayoutAnimation(android.view.View)>(r21);

     label02:
        i48 = i48 + 1;

        goto label01;

     label03:
        r22 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        $z12 = virtualinvoke r22.<android.view.animation.LayoutAnimationController: boolean willOverlap()>();

        if $z12 == 0 goto label04;

        $i43 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i44 = $i43 | 128;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i44;

     label04:
        virtualinvoke r22.<android.view.animation.LayoutAnimationController: void start()>();

        $i41 = r0.<android.view.ViewGroup: int mGroupFlags>;

        i49 = $i41 & -9;

        r0.<android.view.ViewGroup: int mGroupFlags> = i49;

        $i42 = i49 & -17;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i42;

        r23 = r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener>;

        if r23 == null goto label05;

        $r18 = virtualinvoke r22.<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>();

        interfaceinvoke r23.<android.view.animation.Animation$AnimationListener: void onAnimationStart(android.view.animation.Animation)>($r18);

     label05:
        i50 = 0;

        z13 = 0;

        $i51 = i47 & 34;

        if $i51 != 34 goto label06;

        z14 = 1;

        goto label07;

     label06:
        z14 = 0;

     label07:
        if z14 == 0 goto label08;

        i50 = virtualinvoke r1.<android.graphics.Canvas: int save(int)>(2);

        $i22 = r0.<android.view.ViewGroup: int mScrollX>;

        $i21 = r0.<android.view.ViewGroup: int mPaddingLeft>;

        $i40 = $i22 + $i21;

        $i24 = r0.<android.view.ViewGroup: int mScrollY>;

        $i23 = r0.<android.view.ViewGroup: int mPaddingTop>;

        $i39 = $i24 + $i23;

        $i26 = r0.<android.view.ViewGroup: int mScrollX>;

        $i25 = r0.<android.view.ViewGroup: int mRight>;

        $i28 = $i26 + $i25;

        $i27 = r0.<android.view.ViewGroup: int mLeft>;

        $i30 = $i28 - $i27;

        $i29 = r0.<android.view.ViewGroup: int mPaddingRight>;

        $i38 = $i30 - $i29;

        $i32 = r0.<android.view.ViewGroup: int mScrollY>;

        $i31 = r0.<android.view.ViewGroup: int mBottom>;

        $i34 = $i32 + $i31;

        $i33 = r0.<android.view.ViewGroup: int mTop>;

        $i36 = $i34 - $i33;

        $i35 = r0.<android.view.ViewGroup: int mPaddingBottom>;

        $i37 = $i36 - $i35;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(int,int,int,int)>($i40, $i39, $i38, $i37);

     label08:
        $i3 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i4 = $i3 & -65;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i4;

        $i5 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i6 = $i5 & -5;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i6;

        z15 = 0;

        l1 = virtualinvoke r0.<android.view.ViewGroup: long getDrawingTime()>();

        if z0 == 0 goto label09;

        virtualinvoke r1.<android.graphics.Canvas: void insertReorderBarrier()>();

     label09:
        r24 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        if r24 != null goto label10;

        i52 = 0;

        goto label11;

     label10:
        i52 = interfaceinvoke r24.<java.util.List: int size()>();

     label11:
        if i52 == 0 goto label12;

        i53 = 0;

        goto label13;

     label12:
        i53 = -1;

     label13:
        if z0 == 0 goto label14;

        r25 = null;

        goto label15;

     label14:
        r25 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

     label15:
        if r25 != null goto label16;

        $z8 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z8 == 0 goto label16;

        z13 = 1;

        goto label16;

     label16:
        i54 = 0;

     label17:
        if i54 >= i0 goto label26;

        i55 = i53;

        z16 = z15;

     label18:
        if i55 < 0 goto label23;

        $r12 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i55);

        $r14 = (java.lang.Integer) $r13;

        $i18 = virtualinvoke $r14.<java.lang.Integer: int intValue()>();

        if $i18 != i54 goto label22;

        $r15 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        $r16 = interfaceinvoke $r15.<java.util.List: java.lang.Object get(int)>(i55);

        r26 = (android.view.View) $r16;

        $i19 = r26.<android.view.View: int mViewFlags>;

        $i20 = $i19 & 12;

        if $i20 == 0 goto label19;

        z17 = z16;

        $r17 = virtualinvoke r26.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r17 == null goto label20;

     label19:
        $z7 = virtualinvoke r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>(r1, r26, l1);

        z17 = $z7 | z16;

     label20:
        i57 = i55 + 1;

        i58 = i57;

        if i57 < i52 goto label21;

        i58 = -1;

     label21:
        z16 = z17;

        i55 = i58;

        goto label18;

     label22:
        goto label23;

     label23:
        $i15 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i0, i54, z13);

        r27 = staticinvoke <android.view.ViewGroup: android.view.View getAndVerifyPreorderedView(java.util.ArrayList,android.view.View[],int)>(r25, r20, $i15);

        $i16 = r27.<android.view.View: int mViewFlags>;

        $i17 = $i16 & 12;

        if $i17 == 0 goto label24;

        z18 = z16;

        $r11 = virtualinvoke r27.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r11 == null goto label25;

     label24:
        $z6 = virtualinvoke r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>(r1, r27, l1);

        z18 = $z6 | z16;

     label25:
        i54 = i54 + 1;

        z15 = z18;

        i53 = i55;

        goto label17;

     label26:
        i59 = i53;

        z19 = z15;

     label27:
        z20 = z19;

        if i59 < 0 goto label31;

        $r8 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(i59);

        r28 = (android.view.View) $r9;

        $i13 = r28.<android.view.View: int mViewFlags>;

        $i14 = $i13 & 12;

        if $i14 == 0 goto label28;

        z20 = z19;

        $r10 = virtualinvoke r28.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r10 == null goto label29;

     label28:
        $z5 = virtualinvoke r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>(r1, r28, l1);

        z20 = $z5 | z19;

     label29:
        i59 = i59 + 1;

        if i59 < i52 goto label30;

        goto label31;

     label30:
        z19 = z20;

        goto label27;

     label31:
        if r25 == null goto label32;

        virtualinvoke r25.<java.util.ArrayList: void clear()>();

     label32:
        z21 = z20;

        $r3 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if $r3 == null goto label34;

        r29 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        $i12 = virtualinvoke r29.<java.util.ArrayList: int size()>();

        i60 = $i12 - 1;

     label33:
        z21 = z20;

        if i60 < 0 goto label34;

        $r6 = virtualinvoke r29.<java.util.ArrayList: java.lang.Object get(int)>(i60);

        $r7 = (android.view.View) $r6;

        $z4 = virtualinvoke r0.<android.view.ViewGroup: boolean drawChild(android.graphics.Canvas,android.view.View,long)>(r1, $r7, l1);

        z20 = z20 | $z4;

        i60 = i60 + -1;

        goto label33;

     label34:
        if z0 == 0 goto label35;

        virtualinvoke r1.<android.graphics.Canvas: void insertInorderBarrier()>();

     label35:
        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isShowingLayoutBounds()>();

        if $z1 == 0 goto label36;

        virtualinvoke r0.<android.view.ViewGroup: void onDebugDraw(android.graphics.Canvas)>(r1);

     label36:
        if z14 == 0 goto label37;

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i50);

        goto label37;

     label37:
        i61 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i7 = i61 & 4;

        if $i7 != 4 goto label38;

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

     label38:
        $i8 = i61 & 16;

        if $i8 != 0 goto label39;

        $i9 = i61 & 512;

        if $i9 != 0 goto label39;

        $r4 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        $z2 = virtualinvoke $r4.<android.view.animation.LayoutAnimationController: boolean isDone()>();

        if $z2 == 0 goto label39;

        if z21 != 0 goto label39;

        $i10 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i11 = $i10 | 512;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i11;

        $r5 = new android.view.ViewGroup$2;

        specialinvoke $r5.<android.view.ViewGroup$2: void <init>(android.view.ViewGroup)>(r0);

        virtualinvoke r0.<android.view.ViewGroup: boolean post(java.lang.Runnable)>($r5);

     label39:
        return;
    }

    public void dispatchDrawableHotspotChanged(float, float)
    {
        android.view.ViewGroup r0;
        float f0, f1, $f2, $f3;
        int i0, i1, $i2, $i3;
        android.view.View[] r1;
        android.view.View r2;
        float[] r3;
        boolean $z0, $z1, z2, z3;

        r0 := @this: android.view.ViewGroup;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 != 0 goto label1;

        return;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label2:
        if i1 >= i0 goto label9;

        r2 = r1[i1];

        $z0 = virtualinvoke r2.<android.view.View: boolean isClickable()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r2.<android.view.View: boolean isLongClickable()>();

        if $z1 != 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        $i2 = r2.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 4194304;

        if $i3 == 0 goto label5;

        z3 = 1;

        goto label6;

     label5:
        z3 = 0;

     label6:
        if z2 != 0 goto label7;

        if z3 == 0 goto label8;

     label7:
        r3 = specialinvoke r0.<android.view.ViewGroup: float[] getTempLocationF()>();

        r3[0] = f0;

        r3[1] = f1;

        virtualinvoke r0.<android.view.ViewGroup: void transformPointToViewLocal(float[],android.view.View)>(r3, r2);

        $f3 = r3[0];

        $f2 = r3[1];

        virtualinvoke r2.<android.view.View: void drawableHotspotChanged(float,float)>($f3, $f2);

     label8:
        i1 = i1 + 1;

        goto label2;

     label9:
        return;
    }

    public void dispatchFinishTemporaryDetach()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void dispatchFinishTemporaryDetach()>();

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void dispatchFinishTemporaryDetach()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void dispatchFreezeSelfOnly(android.util.SparseArray)
    {
        android.view.ViewGroup r0;
        android.util.SparseArray r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.util.SparseArray;

        specialinvoke r0.<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>(r1);

        return;
    }

    protected boolean dispatchGenericFocusedEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        android.view.View r2, $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label1;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>(r1);

        return $z1;

     label1:
        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r2 == null goto label2;

        $i2 = r2.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label2;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r3.<android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        return $z0;

     label2:
        return 0;
    }

    protected boolean dispatchGenericPointerEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        int i0, $i1, i2;
        float f0, f1;
        java.util.ArrayList r2;
        android.view.View[] r3;
        android.view.View r4;
        boolean $z0, $z1, $z2, $z3, z4, $z5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 == 0 goto label8;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r2 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r2 != null goto label1;

        $z3 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z3 == 0 goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = i0 - 1;

     label3:
        if i2 < 0 goto label7;

        $i1 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i0, i2, z4);

        r4 = staticinvoke <android.view.ViewGroup: android.view.View getAndVerifyPreorderedView(java.util.ArrayList,android.view.View[],int)>(r2, r3, $i1);

        $z0 = virtualinvoke r4.<android.view.View: boolean canReceivePointerEvents()>();

        if $z0 == 0 goto label6;

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>(f0, f1, r4, null);

        if $z1 != 0 goto label4;

        goto label6;

     label4:
        $z2 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r1, r4);

        if $z2 == 0 goto label6;

        if r2 == null goto label5;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label5:
        return 1;

     label6:
        i2 = i2 + -1;

        goto label3;

     label7:
        if r2 == null goto label8;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label8:
        $z5 = specialinvoke r0.<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>(r1);

        return $z5;
    }

    protected void dispatchGetDisplayList()
    {
        android.view.ViewGroup r0, $r9;
        android.view.View r1, $r7, r15;
        java.util.List $r2, $r3, $r10;
        android.view.ViewOverlay $r4, $r8;
        java.util.ArrayList $r5, r16;
        java.lang.Object $r6, $r11;
        int $i0, $i1, $i2, $i3, i4, i5, i6, i7, i8, i9;
        android.view.animation.Animation $r12, $r13;
        android.view.View[] r14;

        r0 := @this: android.view.ViewGroup;

        i4 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r14 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i5 = 0;

     label01:
        if i5 >= i4 goto label04;

        r1 = r14[i5];

        $i2 = r1.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 12;

        if $i3 == 0 goto label02;

        $r13 = virtualinvoke r1.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r13 == null goto label03;

     label02:
        specialinvoke r0.<android.view.ViewGroup: void recreateChildDisplayList(android.view.View)>(r1);

     label03:
        i5 = i5 + 1;

        goto label01;

     label04:
        $r2 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        if $r2 != null goto label05;

        i6 = 0;

        goto label06;

     label05:
        $r3 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        i6 = interfaceinvoke $r3.<java.util.List: int size()>();

     label06:
        i7 = 0;

     label07:
        if i7 >= i6 goto label10;

        $r10 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        $r11 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i7);

        r15 = (android.view.View) $r11;

        $i0 = r15.<android.view.View: int mViewFlags>;

        $i1 = $i0 & 12;

        if $i1 == 0 goto label08;

        $r12 = virtualinvoke r15.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r12 == null goto label09;

     label08:
        specialinvoke r0.<android.view.ViewGroup: void recreateChildDisplayList(android.view.View)>(r15);

     label09:
        i7 = i7 + 1;

        goto label07;

     label10:
        $r4 = r0.<android.view.ViewGroup: android.view.ViewOverlay mOverlay>;

        if $r4 == null goto label11;

        $r8 = r0.<android.view.ViewGroup: android.view.ViewOverlay mOverlay>;

        $r9 = virtualinvoke $r8.<android.view.ViewOverlay: android.view.ViewGroup getOverlayView()>();

        specialinvoke r0.<android.view.ViewGroup: void recreateChildDisplayList(android.view.View)>($r9);

     label11:
        $r5 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if $r5 == null goto label13;

        r16 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        i8 = virtualinvoke r16.<java.util.ArrayList: int size()>();

        i9 = 0;

     label12:
        if i9 >= i8 goto label13;

        $r6 = virtualinvoke r16.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        $r7 = (android.view.View) $r6;

        specialinvoke r0.<android.view.ViewGroup: void recreateChildDisplayList(android.view.View)>($r7);

        i9 = i9 + 1;

        goto label12;

     label13:
        return;
    }

    protected boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1, r11, r21, r23, r25, r28, r29;
        int i0, i1, $i2, i3;
        float f0, f1;
        java.util.ArrayList r2;
        android.view.View[] r3;
        android.view.View r4, $r5, r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, z15, z16, z17, z19, z20, z21, z22, z23, z24, z25, z26, z27, z28, z29;
        android.view.ViewGroup$HoverTarget $r6, r8, r9, r10, r13, r14, r15, r16, r17, r18, r20, r22, r24, r27;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        z14 = virtualinvoke r0.<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(i0);

        z15 = 0;

        z16 = 0;

        r8 = r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget>;

        r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget> = null;

        if z14 != 0 goto label21;

        if i0 == 10 goto label21;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i1 == 0 goto label20;

        r2 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r2 != null goto label01;

        $z13 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z13 == 0 goto label01;

        z17 = 1;

        goto label02;

     label01:
        z17 = 0;

     label02:
        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r9 = null;

        i3 = i1 - 1;

        r10 = r8;

        r11 = r1;

     label03:
        if i3 < 0 goto label18;

        $i2 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i1, i3, z17);

        r4 = staticinvoke <android.view.ViewGroup: android.view.View getAndVerifyPreorderedView(java.util.ArrayList,android.view.View[],int)>(r2, r3, $i2);

        $z7 = virtualinvoke r4.<android.view.View: boolean canReceivePointerEvents()>();

        if $z7 == 0 goto label16;

        $z8 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>(f0, f1, r4, null);

        if $z8 != 0 goto label04;

        goto label16;

     label04:
        r13 = r10;

        z19 = z17;

        r14 = r10;

        r15 = null;

     label05:
        if r14 != null goto label06;

        r16 = staticinvoke <android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget obtain(android.view.View)>(r4);

        r17 = r13;

        z20 = 0;

        r18 = r16;

        goto label09;

     label06:
        $r5 = r14.<android.view.ViewGroup$HoverTarget: android.view.View child>;

        if $r5 != r4 goto label15;

        if r15 == null goto label07;

        $r6 = r14.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next>;

        r15.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next> = $r6;

        goto label08;

     label07:
        r13 = r14.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next>;

     label08:
        r14.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next> = null;

        z20 = 1;

        r18 = r14;

        r17 = r13;

     label09:
        z21 = z19;

        if r9 == null goto label10;

        r9.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next> = r18;

        goto label11;

     label10:
        r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget> = r18;

     label11:
        r20 = r18;

        if i0 != 9 goto label12;

        r21 = r11;

        z22 = z16;

        if z20 != 0 goto label14;

        $z12 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r1, r4);

        z22 = z16 | $z12;

        r21 = r11;

        goto label14;

     label12:
        r21 = r11;

        z22 = z16;

        if i0 != 7 goto label14;

        if z20 != 0 goto label13;

        r21 = staticinvoke <android.view.ViewGroup: android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)>(r11);

        virtualinvoke r21.<android.view.MotionEvent: void setAction(int)>(9);

        z23 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r21, r4);

        virtualinvoke r21.<android.view.MotionEvent: void setAction(int)>(i0);

        $z10 = z16 | z23;

        $z11 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r21, r4);

        z22 = $z10 | $z11;

        goto label14;

     label13:
        $z9 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r1, r4);

        z22 = z16 | $z9;

        r21 = r11;

     label14:
        r11 = r21;

        z16 = z22;

        r22 = r17;

        if z22 == 0 goto label17;

        r23 = r21;

        z16 = z22;

        r24 = r17;

        goto label19;

     label15:
        r15 = r14;

        r14 = r14.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next>;

        goto label05;

     label16:
        z21 = z17;

        r20 = r9;

        r22 = r10;

     label17:
        i3 = i3 + -1;

        z17 = z21;

        r10 = r22;

        r9 = r20;

        goto label03;

     label18:
        r24 = r10;

        r23 = r11;

     label19:
        r25 = r23;

        z15 = z16;

        r8 = r24;

        if r2 == null goto label22;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

        r25 = r23;

        z15 = z16;

        r8 = r24;

        goto label22;

     label20:
        r25 = r1;

        goto label22;

     label21:
        r25 = r1;

     label22:
        if r8 == null goto label26;

        r26 = r8.<android.view.ViewGroup$HoverTarget: android.view.View child>;

        if i0 != 10 goto label23;

        $z6 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r1, r26);

        z15 = z15 | $z6;

        goto label25;

     label23:
        if i0 != 7 goto label24;

        z24 = virtualinvoke r1.<android.view.MotionEvent: boolean isHoverExitPending()>();

        virtualinvoke r1.<android.view.MotionEvent: void setHoverExitPending(boolean)>(1);

        specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r1, r26);

        virtualinvoke r1.<android.view.MotionEvent: void setHoverExitPending(boolean)>(z24);

     label24:
        r25 = staticinvoke <android.view.ViewGroup: android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)>(r25);

        virtualinvoke r25.<android.view.MotionEvent: void setAction(int)>(10);

        specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedGenericPointerEvent(android.view.MotionEvent,android.view.View)>(r25, r26);

        virtualinvoke r25.<android.view.MotionEvent: void setAction(int)>(i0);

     label25:
        r27 = r8.<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget next>;

        virtualinvoke r8.<android.view.ViewGroup$HoverTarget: void recycle()>();

        r8 = r27;

        goto label22;

     label26:
        if z15 != 0 goto label27;

        if i0 == 10 goto label27;

        $z5 = virtualinvoke r1.<android.view.MotionEvent: boolean isHoverExitPending()>();

        if $z5 != 0 goto label27;

        z25 = 1;

        goto label28;

     label27:
        z25 = 0;

     label28:
        z26 = r0.<android.view.ViewGroup: boolean mHoveredSelf>;

        if z25 != z26 goto label29;

        r28 = r25;

        z27 = z15;

        if z25 == 0 goto label35;

        $z4 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        z27 = z15 | $z4;

        r28 = r25;

        goto label35;

     label29:
        r29 = r25;

        z28 = z15;

        if z26 == 0 goto label33;

        if i0 != 10 goto label30;

        $z3 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        z15 = z15 | $z3;

        goto label32;

     label30:
        if i0 != 7 goto label31;

        specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

     label31:
        r25 = staticinvoke <android.view.ViewGroup: android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)>(r25);

        virtualinvoke r25.<android.view.MotionEvent: void setAction(int)>(10);

        specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r25);

        virtualinvoke r25.<android.view.MotionEvent: void setAction(int)>(i0);

     label32:
        r0.<android.view.ViewGroup: boolean mHoveredSelf> = 0;

        z28 = z15;

        r29 = r25;

     label33:
        r28 = r29;

        z27 = z28;

        if z25 == 0 goto label35;

        if i0 != 9 goto label34;

        $z2 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        z27 = z28 | $z2;

        r0.<android.view.ViewGroup: boolean mHoveredSelf> = 1;

        r28 = r29;

        goto label35;

     label34:
        r28 = r29;

        z27 = z28;

        if i0 != 7 goto label35;

        r28 = staticinvoke <android.view.ViewGroup: android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)>(r29);

        virtualinvoke r28.<android.view.MotionEvent: void setAction(int)>(9);

        z29 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r28);

        virtualinvoke r28.<android.view.MotionEvent: void setAction(int)>(i0);

        $z0 = z28 | z29;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r28);

        z27 = $z0 | $z1;

        r0.<android.view.ViewGroup: boolean mHoveredSelf> = 1;

     label35:
        if r28 == r1 goto label36;

        virtualinvoke r28.<android.view.MotionEvent: void recycle()>();

     label36:
        return z27;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        android.view.ViewGroup r0;
        android.view.KeyEvent r1;
        android.view.View r2, $r5;
        android.view.InputEventConsistencyVerifier $r3, $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.KeyEvent;

        $r3 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r3 == null goto label1;

        $r6 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r6.<android.view.InputEventConsistencyVerifier: void onKeyEvent(android.view.KeyEvent,int)>(r1, 1);

     label1:
        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label2;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        if $z1 == 0 goto label3;

        return 1;

     label2:
        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r2 == null goto label3;

        $i2 = r2.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label3;

        $r5 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r5.<android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r7 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r7 == null goto label4;

        $r4 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r4.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 1);

     label4:
        return 0;
    }

    public boolean dispatchKeyEventPreIme(android.view.KeyEvent)
    {
        android.view.ViewGroup r0;
        android.view.KeyEvent r1;
        android.view.View r2, $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.KeyEvent;

        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label1;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>(r1);

        return $z1;

     label1:
        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r2 == null goto label2;

        $i2 = r2.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label2;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r3.<android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)>(r1);

        return $z0;

     label2:
        return 0;
    }

    public boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
    {
        android.view.ViewGroup r0;
        android.view.KeyEvent r1;
        android.view.View r2, $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.KeyEvent;

        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label1;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

        return $z1;

     label1:
        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r2 == null goto label2;

        $i2 = r2.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label2;

        $r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r3.<android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

        return $z0;

     label2:
        return 0;
    }

    void dispatchMovedToDisplay(android.view.Display, android.content.res.Configuration)
    {
        android.view.ViewGroup r0;
        android.view.Display r1;
        android.content.res.Configuration r2;
        int i0, i1;
        android.view.View[] r3;
        android.view.View $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.Display;

        r2 := @parameter1: android.content.res.Configuration;

        specialinvoke r0.<android.view.View: void dispatchMovedToDisplay(android.view.Display,android.content.res.Configuration)>(r1, r2);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = r3[i1];

        virtualinvoke $r4.<android.view.View: void dispatchMovedToDisplay(android.view.Display,android.content.res.Configuration)>(r1, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchPointerCaptureChanged(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void exitHoverTargets()>();

        specialinvoke r0.<android.view.View: void dispatchPointerCaptureChanged(boolean)>(z0);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void dispatchPointerCaptureChanged(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$ChildListForAccessibility r1;
        int i0, $i1, $i2, i3;
        android.view.View r2;
        boolean $z0, z1, z2;
        java.lang.Throwable $r3;
        android.view.accessibility.AccessibilityEvent r4;

        r0 := @this: android.view.ViewGroup;

        r4 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean includeForAccessibility()>();

        if $z0 == 0 goto label1;

        z1 = specialinvoke r0.<android.view.View: boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r4);

        if z1 == 0 goto label1;

        return z1;

     label1:
        r1 = staticinvoke <android.view.ViewGroup$ChildListForAccessibility: android.view.ViewGroup$ChildListForAccessibility obtain(android.view.ViewGroup,boolean)>(r0, 1);

     label2:
        i0 = virtualinvoke r1.<android.view.ViewGroup$ChildListForAccessibility: int getChildCount()>();

     label3:
        i3 = 0;

     label4:
        if i3 >= i0 goto label8;

     label5:
        r2 = virtualinvoke r1.<android.view.ViewGroup$ChildListForAccessibility: android.view.View getChildAt(int)>(i3);

        $i1 = r2.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 12;

        if $i2 != 0 goto label7;

        z2 = virtualinvoke r2.<android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r4);

     label6:
        if z2 == 0 goto label7;

        virtualinvoke r1.<android.view.ViewGroup$ChildListForAccessibility: void recycle()>();

        return z2;

     label7:
        i3 = i3 + 1;

        goto label4;

     label8:
        virtualinvoke r1.<android.view.ViewGroup$ChildListForAccessibility: void recycle()>();

        return 0;

     label9:
        $r3 := @caughtexception;

        virtualinvoke r1.<android.view.ViewGroup$ChildListForAccessibility: void recycle()>();

        throw $r3;

        catch java.lang.Throwable from label2 to label3 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
    }

    public void dispatchProvideAutofillStructure(android.view.ViewStructure, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, $i2, $i3, i5;
        android.view.ViewGroup$ChildListForAutoFillOrContentCapture r1;
        boolean $z0, $z1;
        java.lang.Object $r2;
        android.view.View $r3;
        android.view.ViewStructure $r4, r12;
        java.lang.StringBuilder $r5;
        android.view.autofill.AutofillId $r9;
        java.lang.String $r11;

        r0 := @this: android.view.ViewGroup;

        r12 := @parameter0: android.view.ViewStructure;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>(r12, i0);

        $i2 = virtualinvoke r12.<android.view.ViewStructure: int getChildCount()>();

        if $i2 == 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isLaidOut()>();

        if $z0 != 0 goto label3;

        $z1 = <android.view.autofill.Helper: boolean sVerbose>;

        if $z1 == 0 goto label2;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatchProvideAutofillStructure(): not laid out, ignoring ");

        $i3 = r0.<android.view.ViewGroup: int mChildrenCount>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" children of ");

        $r9 = virtualinvoke r0.<android.view.ViewGroup: android.view.autofill.AutofillId getAutofillId()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("View", $r11);

     label2:
        return;

     label3:
        r1 = specialinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$ChildListForAutoFillOrContentCapture getChildrenForAutofill(int)>(i0);

        i1 = virtualinvoke r1.<android.view.ViewGroup$ChildListForAutoFillOrContentCapture: int size()>();

        virtualinvoke r12.<android.view.ViewStructure: void setChildCount(int)>(i1);

        i5 = 0;

     label4:
        if i5 >= i1 goto label5;

        $r2 = virtualinvoke r1.<android.view.ViewGroup$ChildListForAutoFillOrContentCapture: java.lang.Object get(int)>(i5);

        $r3 = (android.view.View) $r2;

        $r4 = virtualinvoke r12.<android.view.ViewStructure: android.view.ViewStructure newChild(int)>(i5);

        virtualinvoke $r3.<android.view.View: void dispatchProvideAutofillStructure(android.view.ViewStructure,int)>($r4, i0);

        i5 = i5 + 1;

        goto label4;

     label5:
        virtualinvoke r1.<android.view.ViewGroup$ChildListForAutoFillOrContentCapture: void recycle()>();

        return;
    }

    public void dispatchProvideContentCaptureStructure()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$ChildListForAutoFillOrContentCapture r1;
        int i0, i1;
        boolean $z0;
        java.lang.Object $r2;
        android.view.View $r3;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void dispatchProvideContentCaptureStructure()>();

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isLaidOut()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r1 = specialinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$ChildListForAutoFillOrContentCapture getChildrenForContentCapture()>();

        i0 = virtualinvoke r1.<android.view.ViewGroup$ChildListForAutoFillOrContentCapture: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r2 = virtualinvoke r1.<android.view.ViewGroup$ChildListForAutoFillOrContentCapture: java.lang.Object get(int)>(i1);

        $r3 = (android.view.View) $r2;

        virtualinvoke $r3.<android.view.View: void dispatchProvideContentCaptureStructure()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<android.view.ViewGroup$ChildListForAutoFillOrContentCapture: void recycle()>();

        return;
    }

    public void dispatchProvideStructure(android.view.ViewStructure)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i4, $i6, $i7, i8, i9, i10, i11, i12, i13, i14;
        boolean $z0, $z1, $z2, $z3, $z5, z6;
        java.lang.StringBuilder $r2, $r11;
        java.lang.String $r7, $r16;
        java.lang.IndexOutOfBoundsException $r8;
        android.content.Context $r9;
        android.content.pm.ApplicationInfo $r10;
        android.util.SparseBooleanArray $r17;
        java.util.ArrayList $r18, r23;
        android.view.View[] $r19, $r27;
        android.view.View $r20, $r28;
        android.view.ViewStructure r21, $r29;
        int[] r25;

        r0 := @this: android.view.ViewGroup;

        r21 := @parameter0: android.view.ViewStructure;

        specialinvoke r0.<android.view.View: void dispatchProvideStructure(android.view.ViewStructure)>(r21);

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isAssistBlocked()>();

        if $z0 != 0 goto label24;

        $i1 = virtualinvoke r21.<android.view.ViewStructure: int getChildCount()>();

        if $i1 == 0 goto label01;

        goto label24;

     label01:
        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 > 0 goto label02;

        return;

     label02:
        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isLaidOut()>();

        if $z1 != 0 goto label04;

        $z3 = <android.view.autofill.Helper: boolean sVerbose>;

        if $z3 == 0 goto label03;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatchProvideStructure(): not laid out, ignoring ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" children of ");

        $i2 = virtualinvoke r0.<android.view.ViewGroup: int getAccessibilityViewId()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("View", $r7);

     label03:
        return;

     label04:
        virtualinvoke r21.<android.view.ViewStructure: void setChildCount(int)>(i0);

        r23 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r23 != null goto label05;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z2 == 0 goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        i8 = 0;

     label07:
        if i8 >= i0 goto label22;

     label08:
        i9 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i0, i8, z6);

     label09:
        goto label20;

     label10:
        $r8 := @caughtexception;

        $r9 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i4 = $r10.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i4 >= 23 goto label21;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad getChildDrawingOrder while collecting assist @ ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewGroup", $r16, $r8);

        z6 = 0;

        if i8 <= 0 goto label19;

        r25 = newarray (int)[i0];

        $r17 = new android.util.SparseBooleanArray;

        specialinvoke $r17.<android.util.SparseBooleanArray: void <init>()>();

        i10 = 0;

     label11:
        if i10 >= i8 goto label12;

        $i6 = virtualinvoke r0.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>(i0, i10);

        r25[i10] = $i6;

        $i7 = r25[i10];

        virtualinvoke $r17.<android.util.SparseBooleanArray: void put(int,boolean)>($i7, 1);

        i10 = i10 + 1;

        goto label11;

     label12:
        i11 = 0;

        i12 = i8;

     label13:
        if i12 >= i0 goto label16;

     label14:
        $z5 = virtualinvoke $r17.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i11, 0);

        if $z5 == 0 goto label15;

        i11 = i11 + 1;

        goto label14;

     label15:
        r25[i12] = i11;

        i11 = i11 + 1;

        i12 = i12 + 1;

        goto label13;

     label16:
        $r18 = new java.util.ArrayList;

        specialinvoke $r18.<java.util.ArrayList: void <init>(int)>(i0);

        r23 = $r18;

        i13 = 0;

     label17:
        if i13 >= i0 goto label18;

        i14 = r25[i13];

        $r19 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r20 = $r19[i14];

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>($r20);

        i13 = i13 + 1;

        goto label17;

     label18:
        i9 = i8;

        goto label20;

     label19:
        i9 = i8;

     label20:
        $r27 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r28 = staticinvoke <android.view.ViewGroup: android.view.View getAndVerifyPreorderedView(java.util.ArrayList,android.view.View[],int)>(r23, $r27, i9);

        $r29 = virtualinvoke r21.<android.view.ViewStructure: android.view.ViewStructure newChild(int)>(i8);

        virtualinvoke $r28.<android.view.View: void dispatchProvideStructure(android.view.ViewStructure)>($r29);

        i8 = i8 + 1;

        goto label07;

     label21:
        throw $r8;

     label22:
        if r23 == null goto label23;

        virtualinvoke r23.<java.util.ArrayList: void clear()>();

     label23:
        return;

     label24:
        return;

        catch java.lang.IndexOutOfBoundsException from label08 to label09 with label10;
    }

    protected void dispatchRestoreInstanceState(android.util.SparseArray)
    {
        android.view.ViewGroup r0;
        android.util.SparseArray r1;
        int i0, $i1, $i2, i3;
        android.view.View[] r2;
        android.view.View r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.util.SparseArray;

        specialinvoke r0.<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>(r1);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r3 = r2[i3];

        $i1 = r3.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 536870912;

        if $i2 == 536870912 goto label2;

        virtualinvoke r3.<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>(r1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    protected void dispatchSaveInstanceState(android.util.SparseArray)
    {
        android.view.ViewGroup r0;
        android.util.SparseArray r1;
        int i0, $i1, $i2, i3;
        android.view.View[] r2;
        android.view.View r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.util.SparseArray;

        specialinvoke r0.<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>(r1);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r3 = r2[i3];

        $i1 = r3.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 536870912;

        if $i2 == 536870912 goto label2;

        virtualinvoke r3.<android.view.View: void dispatchSaveInstanceState(android.util.SparseArray)>(r1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    void dispatchScreenStateChanged(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void dispatchScreenStateChanged(int)>(i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r1[i2];

        virtualinvoke $r2.<android.view.View: void dispatchScreenStateChanged(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchScrollCaptureSearch(android.graphics.Rect, android.graphics.Point, java.util.Queue)
    {
        android.view.ViewGroup r0;
        android.graphics.Rect r1;
        android.graphics.Point r2;
        java.util.Queue r3;
        int i0, $i1, $i2, $i3, i4;
        android.view.View r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Point;

        r3 := @parameter2: java.util.Queue;

        specialinvoke r0.<android.view.View: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.Queue)>(r1, r2, r3);

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getScrollCaptureHint()>();

        $i2 = $i1 & 4;

        if $i2 != 0 goto label4;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i4 = 0;

     label1:
        if i4 >= i0 goto label4;

        r4 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i4);

        $i3 = virtualinvoke r4.<android.view.View: int getVisibility()>();

        if $i3 == 0 goto label2;

        goto label3;

     label2:
        specialinvoke r0.<android.view.ViewGroup: void dispatchTransformedScrollCaptureSearch(android.view.View,android.graphics.Rect,android.graphics.Point,java.util.Queue)>(r4, r1, r2, r3);

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return;
    }

    public void dispatchSetActivated(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        android.view.View[] r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void setActivated(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void dispatchSetPressed(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, $z1, $z2;
        android.view.View[] r1;
        int i0, i1;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        if z0 == 0 goto label2;

        $z1 = virtualinvoke r2.<android.view.View: boolean isClickable()>();

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r2.<android.view.View: boolean isLongClickable()>();

        if $z2 != 0 goto label3;

     label2:
        virtualinvoke r2.<android.view.View: void setPressed(boolean)>(z0);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public void dispatchSetSelected(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        android.view.View[] r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void setSelected(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchStartTemporaryDetach()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void dispatchStartTemporaryDetach()>();

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void dispatchStartTemporaryDetach()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchSystemUiVisibilityChanged(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void dispatchSystemUiVisibilityChanged(int)>(i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r1[i2];

        virtualinvoke $r2.<android.view.View: void dispatchSystemUiVisibilityChanged(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    protected void dispatchThawSelfOnly(android.util.SparseArray)
    {
        android.view.ViewGroup r0;
        android.util.SparseArray r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.util.SparseArray;

        specialinvoke r0.<android.view.View: void dispatchRestoreInstanceState(android.util.SparseArray)>(r1);

        return;
    }

    boolean dispatchTooltipHoverEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        int i0, i1, i2, i3;
        float f0, f1;
        java.util.ArrayList r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7;
        android.view.View $r3, r4, r5, r7, r8, $r9;
        android.view.View[] r6;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if i0 == 7 goto label04;

        if i0 == 10 goto label01;

        goto label03;

     label01:
        r4 = r0.<android.view.ViewGroup: android.view.View mTooltipHoverTarget>;

        if r4 == null goto label02;

        virtualinvoke r4.<android.view.View: boolean dispatchTooltipHoverEvent(android.view.MotionEvent)>(r1);

        r0.<android.view.ViewGroup: android.view.View mTooltipHoverTarget> = null;

        goto label03;

     label02:
        $z5 = r0.<android.view.ViewGroup: boolean mTooltipHoveredSelf>;

        if $z5 == 0 goto label03;

        specialinvoke r0.<android.view.View: boolean dispatchTooltipHoverEvent(android.view.MotionEvent)>(r1);

        r0.<android.view.ViewGroup: boolean mTooltipHoveredSelf> = 0;

     label03:
        return 0;

     label04:
        r5 = null;

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i1 == 0 goto label11;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r2 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r2 != null goto label05;

        $z4 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z4 == 0 goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        r6 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i3 = i1 - 1;

     label07:
        r7 = null;

        if i3 < 0 goto label10;

        i2 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i1, i3, z6);

        r7 = staticinvoke <android.view.ViewGroup: android.view.View getAndVerifyPreorderedView(java.util.ArrayList,android.view.View[],int)>(r2, r6, i2);

        $z1 = virtualinvoke r7.<android.view.View: boolean canReceivePointerEvents()>();

        if $z1 == 0 goto label09;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>(f0, f1, r7, null);

        if $z2 != 0 goto label08;

        goto label09;

     label08:
        $z3 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTooltipHoverEvent(android.view.MotionEvent,android.view.View)>(r1, r7);

        if $z3 == 0 goto label09;

        goto label10;

     label09:
        i3 = i3 + -1;

        goto label07;

     label10:
        r5 = r7;

        if r2 == null goto label11;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

        r5 = r7;

     label11:
        r8 = r0.<android.view.ViewGroup: android.view.View mTooltipHoverTarget>;

        if r8 == r5 goto label13;

        if r8 == null goto label12;

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(10);

        $r3 = r0.<android.view.ViewGroup: android.view.View mTooltipHoverTarget>;

        virtualinvoke $r3.<android.view.View: boolean dispatchTooltipHoverEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(i0);

     label12:
        r0.<android.view.ViewGroup: android.view.View mTooltipHoverTarget> = r5;

     label13:
        $r9 = r0.<android.view.ViewGroup: android.view.View mTooltipHoverTarget>;

        if $r9 == null goto label15;

        $z0 = r0.<android.view.ViewGroup: boolean mTooltipHoveredSelf>;

        if $z0 == 0 goto label14;

        r0.<android.view.ViewGroup: boolean mTooltipHoveredSelf> = 0;

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(10);

        specialinvoke r0.<android.view.View: boolean dispatchTooltipHoverEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(i0);

     label14:
        return 1;

     label15:
        z7 = specialinvoke r0.<android.view.View: boolean dispatchTooltipHoverEvent(android.view.MotionEvent)>(r1);

        r0.<android.view.ViewGroup: boolean mTooltipHoveredSelf> = z7;

        return z7;
    }

    public boolean dispatchTouchEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, $i14, $i15, $i16, i17, i18, i19, i21, i22, $i23;
        float f0, $f1, $f2, f3, f4;
        android.view.InputEventConsistencyVerifier $r2, $r3, $r4, $r14;
        boolean $z1, $z2, $z3, $z4, $z5, $z7, $z8, $z9, z10, $z11, z12, z13, z14, $z15, z16, z17, z18, z19, z20, z21, z22, z23, z24, z25, $z26;
        android.view.View $r5, $r9, $r10, r20, $r25;
        android.view.ViewGroup$TouchTarget $r6, $r7, $r12, $r13, r15, r16, r17, $r21, r22, r23, r24;
        long $l12;
        android.view.View[] $r8, r19;
        java.util.ArrayList r18;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r2 == null goto label01;

        $r14 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r14.<android.view.InputEventConsistencyVerifier: void onTouchEvent(android.view.MotionEvent,int)>(r1, 1);

     label01:
        $z1 = virtualinvoke r1.<android.view.MotionEvent: boolean isTargetAccessibilityFocus()>();

        if $z1 == 0 goto label02;

        $z9 = virtualinvoke r0.<android.view.ViewGroup: boolean isAccessibilityFocusedViewOrHost()>();

        if $z9 == 0 goto label02;

        virtualinvoke r1.<android.view.MotionEvent: void setTargetAccessibilityFocus(boolean)>(0);

     label02:
        z10 = 0;

        $z11 = virtualinvoke r0.<android.view.ViewGroup: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>(r1);

        if $z11 == 0 goto label62;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        i1 = i0 & 255;

        if i1 != 0 goto label03;

        specialinvoke r0.<android.view.ViewGroup: void cancelAndClearTouchTargets(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.view.ViewGroup: void resetTouchState()>();

     label03:
        if i1 == 0 goto label05;

        $r13 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if $r13 == null goto label04;

        goto label05;

     label04:
        z12 = 1;

        goto label10;

     label05:
        $i3 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i4 = $i3 & 524288;

        if $i4 == 0 goto label06;

        z13 = 1;

        goto label07;

     label06:
        z13 = 0;

     label07:
        if z13 != 0 goto label08;

        z14 = virtualinvoke r0.<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(i0);

        goto label09;

     label08:
        z14 = 0;

     label09:
        z12 = z14;

     label10:
        if z12 != 0 goto label11;

        $r12 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if $r12 == null goto label12;

     label11:
        virtualinvoke r1.<android.view.MotionEvent: void setTargetAccessibilityFocus(boolean)>(0);

     label12:
        $z15 = staticinvoke <android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>(r0);

        if $z15 != 0 goto label14;

        if i1 != 3 goto label13;

        goto label14;

     label13:
        z16 = 0;

        goto label15;

     label14:
        z16 = 1;

     label15:
        $i16 = virtualinvoke r1.<android.view.MotionEvent: int getSource()>();

        if $i16 != 8194 goto label16;

        z17 = 1;

        goto label17;

     label16:
        z17 = 0;

     label17:
        $i5 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i6 = $i5 & 2097152;

        if $i6 == 0 goto label18;

        if z17 != 0 goto label18;

        z18 = 1;

        goto label19;

     label18:
        z18 = 0;

     label19:
        r15 = null;

        r16 = null;

        r17 = null;

        z19 = 0;

        if z16 != 0 goto label47;

        if z12 != 0 goto label47;

        $z3 = virtualinvoke r1.<android.view.MotionEvent: boolean isTargetAccessibilityFocus()>();

        if $z3 == 0 goto label20;

        specialinvoke r0.<android.view.ViewGroup: android.view.View findChildWithAccessibilityFocus()>();

        goto label20;

     label20:
        if i1 == 0 goto label23;

        if z18 == 0 goto label21;

        if i1 == 5 goto label23;

     label21:
        if i1 != 7 goto label22;

        goto label23;

     label22:
        goto label47;

     label23:
        i2 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        if z18 == 0 goto label24;

        $i15 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(i2);

        i17 = 1 << $i15;

        goto label25;

     label24:
        i17 = -1;

     label25:
        specialinvoke r0.<android.view.ViewGroup: void removePointersFromTouchTargets(int)>(i17);

        i18 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i18 == 0 goto label43;

        if z17 == 0 goto label26;

        f3 = virtualinvoke r1.<android.view.MotionEvent: float getXCursorPosition()>();

        goto label27;

     label26:
        f3 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(i2);

     label27:
        f0 = f3;

        if z17 == 0 goto label28;

        f4 = virtualinvoke r1.<android.view.MotionEvent: float getYCursorPosition()>();

        goto label29;

     label28:
        f4 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(i2);

     label29:
        r18 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildTouchDispatchChildList()>();

        if r18 != null goto label30;

        $z8 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z8 == 0 goto label30;

        z20 = 1;

        goto label31;

     label30:
        z20 = 0;

     label31:
        r19 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i19 = i18 - 1;

     label32:
        if i19 < 0 goto label42;

        i21 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i18, i19, z20);

        r20 = staticinvoke <android.view.ViewGroup: android.view.View getAndVerifyPreorderedView(java.util.ArrayList,android.view.View[],int)>(r18, r19, i21);

        $z4 = virtualinvoke r20.<android.view.View: boolean canReceivePointerEvents()>();

        if $z4 == 0 goto label41;

        $z5 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>(f0, f4, r20, null);

        if $z5 != 0 goto label33;

        goto label41;

     label33:
        r17 = specialinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget getTouchTarget(android.view.View)>(r20);

        if r17 == null goto label34;

        $i13 = r17.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        $i14 = $i13 | i17;

        r17.<android.view.ViewGroup$TouchTarget: int pointerIdBits> = $i14;

        goto label42;

     label34:
        staticinvoke <android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>(r20);

        $z7 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedTouchEvent(android.view.MotionEvent,boolean,android.view.View,int)>(r1, 0, r20, i17);

        if $z7 == 0 goto label40;

        $l12 = virtualinvoke r1.<android.view.MotionEvent: long getDownTime()>();

        r0.<android.view.ViewGroup: long mLastTouchDownTime> = $l12;

        if r18 == null goto label38;

        i22 = 0;

     label35:
        if i22 >= i18 goto label37;

        $r10 = r19[i21];

        $r8 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r9 = $r8[i22];

        if $r10 != $r9 goto label36;

        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = i22;

        goto label37;

     label36:
        i22 = i22 + 1;

        goto label35;

     label37:
        goto label39;

     label38:
        r0.<android.view.ViewGroup: int mLastTouchDownIndex> = i21;

     label39:
        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        r0.<android.view.ViewGroup: float mLastTouchDownX> = $f1;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<android.view.ViewGroup: float mLastTouchDownY> = $f2;

        r17 = specialinvoke r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget addTouchTarget(android.view.View,int)>(r20, i17);

        z19 = 1;

        goto label42;

     label40:
        virtualinvoke r1.<android.view.MotionEvent: void setTargetAccessibilityFocus(boolean)>(0);

        goto label41;

     label41:
        i19 = i19 + -1;

        goto label32;

     label42:
        r15 = r17;

        z21 = z19;

        if r18 == null goto label44;

        virtualinvoke r18.<java.util.ArrayList: void clear()>();

        r15 = r17;

        z21 = z19;

        goto label44;

     label43:
        z21 = 0;

     label44:
        r16 = r15;

        z22 = z21;

        if r15 != null goto label48;

        r16 = r15;

        z22 = z21;

        $r6 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if $r6 == null goto label48;

        r16 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label45:
        $r7 = r16.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        if $r7 == null goto label46;

        r16 = r16.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        goto label45;

     label46:
        $i10 = r16.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        $i11 = $i10 | i17;

        r16.<android.view.ViewGroup$TouchTarget: int pointerIdBits> = $i11;

        z22 = z21;

        goto label48;

     label47:
        z22 = 0;

     label48:
        z23 = 0;

        $r21 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

        if $r21 != null goto label49;

        z23 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedTouchEvent(android.view.MotionEvent,boolean,android.view.View,int)>(r1, z16, null, -1);

        goto label59;

     label49:
        r22 = null;

        r23 = r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget>;

     label50:
        if r23 == null goto label59;

        r24 = r23.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next>;

        if z22 == 0 goto label51;

        if r23 != r16 goto label51;

        z24 = 1;

        goto label58;

     label51:
        $r5 = r23.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        $z2 = staticinvoke <android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>($r5);

        if $z2 != 0 goto label53;

        if z12 == 0 goto label52;

        goto label53;

     label52:
        z25 = 0;

        goto label54;

     label53:
        z25 = 1;

     label54:
        $r25 = r23.<android.view.ViewGroup$TouchTarget: android.view.View child>;

        $i23 = r23.<android.view.ViewGroup$TouchTarget: int pointerIdBits>;

        $z26 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchTransformedTouchEvent(android.view.MotionEvent,boolean,android.view.View,int)>(r1, z25, $r25, $i23);

        if $z26 == 0 goto label55;

        z23 = 1;

     label55:
        z24 = z23;

        if z25 == 0 goto label58;

        if r22 != null goto label56;

        r0.<android.view.ViewGroup: android.view.ViewGroup$TouchTarget mFirstTouchTarget> = r24;

        goto label57;

     label56:
        r22.<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget next> = r24;

     label57:
        virtualinvoke r23.<android.view.ViewGroup$TouchTarget: void recycle()>();

        r23 = r24;

        goto label50;

     label58:
        r22 = r23;

        r23 = r24;

        z23 = z24;

        goto label50;

     label59:
        if z16 != 0 goto label61;

        if i1 == 1 goto label61;

        if i1 != 7 goto label60;

        goto label61;

     label60:
        z10 = z23;

        if z18 == 0 goto label62;

        z10 = z23;

        if i1 != 6 goto label62;

        $i7 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        $i8 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>($i7);

        $i9 = 1 << $i8;

        specialinvoke r0.<android.view.ViewGroup: void removePointersFromTouchTargets(int)>($i9);

        z10 = z23;

        goto label62;

     label61:
        specialinvoke r0.<android.view.ViewGroup: void resetTouchState()>();

        z10 = z23;

        goto label62;

     label62:
        if z10 != 0 goto label63;

        $r3 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r3 == null goto label63;

        $r4 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r4.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 1);

     label63:
        return z10;
    }

    public boolean dispatchTrackballEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        android.view.View r2, $r5;
        android.view.InputEventConsistencyVerifier $r3, $r4, $r6, $r7;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $r3 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r3 == null goto label1;

        $r6 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r6.<android.view.InputEventConsistencyVerifier: void onTrackballEvent(android.view.MotionEvent,int)>(r1, 1);

     label1:
        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 18;

        if $i1 != 18 goto label2;

        $z1 = specialinvoke r0.<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>(r1);

        if $z1 == 0 goto label3;

        return 1;

     label2:
        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r2 == null goto label3;

        $i2 = r2.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 & 16;

        if $i3 != 16 goto label3;

        $r5 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $z0 = virtualinvoke $r5.<android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)>(r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r7 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r7 == null goto label4;

        $r4 = r0.<android.view.ViewGroup: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        virtualinvoke $r4.<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>(r1, 1);

     label4:
        return 0;
    }

    android.view.View dispatchUnhandledKeyEvent(android.view.KeyEvent)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r2, $r4, r9;
        boolean $z0, $z1;
        int $i0, $i1, i2, i3;
        java.lang.Object $r3;
        java.lang.Throwable $r5;
        android.view.KeyEvent r6;
        java.util.ArrayList r7;

        r0 := @this: android.view.ViewGroup;

        r6 := @parameter0: android.view.KeyEvent;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean hasUnhandledKeyListener()>();

        if $z0 != 0 goto label01;

        return null;

     label01:
        r7 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r7 == null goto label09;

     label02:
        $i1 = virtualinvoke r7.<java.util.ArrayList: int size()>();

        i2 = $i1 - 1;

     label03:
        if i2 < 0 goto label07;

     label04:
        $r3 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r4 = (android.view.View) $r3;

        r1 = virtualinvoke $r4.<android.view.View: android.view.View dispatchUnhandledKeyEvent(android.view.KeyEvent)>(r6);

     label05:
        if r1 == null goto label06;

        virtualinvoke r7.<java.util.ArrayList: void clear()>();

        return r1;

     label06:
        i2 = i2 + -1;

        goto label03;

     label07:
        virtualinvoke r7.<java.util.ArrayList: void clear()>();

        goto label12;

     label08:
        $r5 := @caughtexception;

        virtualinvoke r7.<java.util.ArrayList: void clear()>();

        throw $r5;

     label09:
        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i3 = $i0 - 1;

     label10:
        if i3 < 0 goto label12;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i3);

        r9 = virtualinvoke $r2.<android.view.View: android.view.View dispatchUnhandledKeyEvent(android.view.KeyEvent)>(r6);

        if r9 == null goto label11;

        return r9;

     label11:
        i3 = i3 + -1;

        goto label10;

     label12:
        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean onUnhandledKeyEvent(android.view.KeyEvent)>(r6);

        if $z1 == 0 goto label13;

        return r0;

     label13:
        return null;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
    }

    public boolean dispatchUnhandledMove(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2;
        int i0;
        boolean $z0, z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>(r1, i0);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    void dispatchViewAdded(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewGroup$OnHierarchyChangeListener r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewGroup: void onViewAdded(android.view.View)>(r1);

        r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener>;

        if r2 == null goto label1;

        interfaceinvoke r2.<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewAdded(android.view.View,android.view.View)>(r0, r1);

     label1:
        return;
    }

    void dispatchViewRemoved(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewGroup$OnHierarchyChangeListener r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewGroup: void onViewRemoved(android.view.View)>(r1);

        r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener>;

        if r2 == null goto label1;

        interfaceinvoke r2.<android.view.ViewGroup$OnHierarchyChangeListener: void onChildViewRemoved(android.view.View,android.view.View)>(r0, r1);

     label1:
        return;
    }

    boolean dispatchVisibilityAggregated(boolean)
    {
        android.view.ViewGroup r0;
        int i0, $i1, i2;
        android.view.View[] r1;
        android.view.View $r2, $r3;
        boolean z1, z2;

        r0 := @this: android.view.ViewGroup;

        z1 := @parameter0: boolean;

        z2 = specialinvoke r0.<android.view.View: boolean dispatchVisibilityAggregated(boolean)>(z1);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r2 = r1[i2];

        $i1 = virtualinvoke $r2.<android.view.View: int getVisibility()>();

        if $i1 != 0 goto label2;

        $r3 = r1[i2];

        virtualinvoke $r3.<android.view.View: boolean dispatchVisibilityAggregated(boolean)>(z2);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return z2;
    }

    protected void dispatchVisibilityChanged(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        int i0, i1, i2;
        android.view.View[] r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>(r1, i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r3 = r2[i2];

        virtualinvoke $r3.<android.view.View: void dispatchVisibilityChanged(android.view.View,int)>(r1, i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchWindowFocusChanged(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.View: void dispatchWindowFocusChanged(boolean)>(z0);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void dispatchWindowFocusChanged(boolean)>(z0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)
    {
        android.view.ViewGroup r0;
        android.view.WindowInsetsAnimation r1;
        int i0, $i1, i2;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.WindowInsetsAnimation;

        specialinvoke r0.<android.view.View: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>(r1);

        $i1 = r0.<android.view.ViewGroup: int mInsetsAnimationDispatchMode>;

        if $i1 != 0 goto label1;

        return;

     label1:
        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        virtualinvoke $r2.<android.view.View: void dispatchWindowInsetsAnimationEnd(android.view.WindowInsetsAnimation)>(r1);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    public void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)
    {
        android.view.ViewGroup r0;
        android.view.WindowInsetsAnimation r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        android.view.View $r2;
        android.view.View$AttachInfo $r3, $r6;
        android.view.View$ListenerInfo $r4;
        android.view.WindowInsetsAnimation$Callback $r5;
        android.view.Window$OnContentApplyWindowInsetsListener $r7;
        boolean $z0, z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.WindowInsetsAnimation;

        specialinvoke r0.<android.view.View: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>(r1);

        $i1 = r0.<android.view.ViewGroup: int mViewFlags>;

        $i2 = $i1 & 2048;

        if $i2 != 0 goto label2;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isFrameworkOptionalFitsSystemWindows()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        if z1 == 0 goto label4;

        $r3 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label4;

        $r4 = virtualinvoke r0.<android.view.ViewGroup: android.view.View$ListenerInfo getListenerInfo()>();

        $r5 = $r4.<android.view.View$ListenerInfo: android.view.WindowInsetsAnimation$Callback mWindowInsetsAnimationCallback>;

        if $r5 != null goto label4;

        $r6 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.Window$OnContentApplyWindowInsetsListener mContentOnApplyWindowInsetsListener>;

        if $r7 == null goto label4;

        $i3 = virtualinvoke r0.<android.view.ViewGroup: int getWindowSystemUiVisibility()>();

        $i4 = $i3 & 1536;

        if $i4 != 0 goto label4;

        r0.<android.view.ViewGroup: int mInsetsAnimationDispatchMode> = 0;

        return;

     label4:
        $i5 = r0.<android.view.ViewGroup: int mInsetsAnimationDispatchMode>;

        if $i5 != 0 goto label5;

        return;

     label5:
        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i6 = 0;

     label6:
        if i6 >= i0 goto label7;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i6);

        virtualinvoke $r2.<android.view.View: void dispatchWindowInsetsAnimationPrepare(android.view.WindowInsetsAnimation)>(r1);

        i6 = i6 + 1;

        goto label6;

     label7:
        return;
    }

    public android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets, java.util.List)
    {
        android.view.ViewGroup r0;
        java.util.List r1;
        int i0, $i1, i2;
        android.view.View $r2;
        android.view.WindowInsets r4, r5;

        r0 := @this: android.view.ViewGroup;

        r4 := @parameter0: android.view.WindowInsets;

        r1 := @parameter1: java.util.List;

        r5 = specialinvoke r0.<android.view.View: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>(r4, r1);

        $i1 = r0.<android.view.ViewGroup: int mInsetsAnimationDispatchMode>;

        if $i1 != 0 goto label1;

        return r5;

     label1:
        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        virtualinvoke $r2.<android.view.View: android.view.WindowInsets dispatchWindowInsetsAnimationProgress(android.view.WindowInsets,java.util.List)>(r5, r1);

        i2 = i2 + 1;

        goto label2;

     label3:
        return r5;
    }

    public android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation, android.view.WindowInsetsAnimation$Bounds)
    {
        android.view.ViewGroup r0;
        android.view.WindowInsetsAnimation r1;
        int i0, $i1, i2;
        android.view.View $r2;
        android.view.WindowInsetsAnimation$Bounds r4, r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.WindowInsetsAnimation;

        r4 := @parameter1: android.view.WindowInsetsAnimation$Bounds;

        r5 = specialinvoke r0.<android.view.View: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>(r1, r4);

        $i1 = r0.<android.view.ViewGroup: int mInsetsAnimationDispatchMode>;

        if $i1 != 0 goto label1;

        return r5;

     label1:
        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        virtualinvoke $r2.<android.view.View: android.view.WindowInsetsAnimation$Bounds dispatchWindowInsetsAnimationStart(android.view.WindowInsetsAnimation,android.view.WindowInsetsAnimation$Bounds)>(r1, r5);

        i2 = i2 + 1;

        goto label2;

     label3:
        return r5;
    }

    public void dispatchWindowSystemUiVisiblityChanged(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>(i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r1[i2];

        virtualinvoke $r2.<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public void dispatchWindowVisibilityChanged(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.View: void dispatchWindowVisibilityChanged(int)>(i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r2 = r1[i2];

        virtualinvoke $r2.<android.view.View: void dispatchWindowVisibilityChanged(int)>(i0);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    protected boolean drawChild(android.graphics.Canvas, android.view.View, long)
    {
        android.view.ViewGroup r0;
        android.graphics.Canvas r1;
        android.view.View r2;
        long l0;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.view.View;

        l0 := @parameter2: long;

        $z0 = virtualinvoke r2.<android.view.View: boolean draw(android.graphics.Canvas,android.view.ViewGroup,long)>(r1, r0, l0);

        return $z0;
    }

    protected void drawableStateChanged()
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        android.view.View r2;
        java.lang.IllegalStateException $r3;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void drawableStateChanged()>();

        i5 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = 65536 & i5;

        if $i1 == 0 goto label4;

        $i2 = i5 & 8192;

        if $i2 != 0 goto label3;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i6 = 0;

     label1:
        if i6 >= i0 goto label4;

        r2 = r1[i6];

        $i3 = r2.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 4194304;

        if $i4 == 0 goto label2;

        virtualinvoke r2.<android.view.View: void refreshDrawableState()>();

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("addStateFromChildren cannot be enabled if a child has duplicateParentState set to true");

        throw $r3;

     label4:
        return;
    }

    protected void encodeProperties(android.view.ViewHierarchyEncoder)
    {
        android.view.ViewGroup r0;
        android.view.ViewHierarchyEncoder r1;
        int i0, $i1, $i2, i4;
        boolean $z0, $z1, $z2;
        short $s3;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        android.view.View $r7;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.ViewHierarchyEncoder;

        specialinvoke r0.<android.view.View: void encodeProperties(android.view.ViewHierarchyEncoder)>(r1);

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("focus:descendantFocusability", $i1);

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean getClipChildren()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("drawing:clipChildren", $z0);

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean getClipToPadding()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("drawing:clipToPadding", $z1);

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("drawing:childrenDrawingOrderEnabled", $z2);

        $i2 = virtualinvoke r0.<android.view.ViewGroup: int getPersistentDrawingCache()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,int)>("drawing:persistentDrawingCache", $i2);

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        $s3 = (short) i0;

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,short)>("meta:__childCount__", $s3);

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("meta:__child__");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addPropertyKey(java.lang.String)>($r6);

        $r7 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i4);

        virtualinvoke $r7.<android.view.View: void encode(android.view.ViewHierarchyEncoder)>(r1);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    public void endViewTransition(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        boolean $z1, $z3;
        android.view.View$AttachInfo $r2;
        android.view.ViewParent $r3;
        java.util.ArrayList $r4, r5, r6, r7;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r5 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if r5 == null goto label4;

        virtualinvoke r5.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        r6 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if r6 == null goto label4;

        $z1 = virtualinvoke r6.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label4;

        virtualinvoke r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        r7 = r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren>;

        if r7 == null goto label1;

        $z3 = virtualinvoke r7.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z3 == 0 goto label1;

        $r4 = r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren>;

        virtualinvoke $r4.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        goto label3;

     label1:
        $r2 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label2;

        virtualinvoke r1.<android.view.View: void dispatchDetachedFromWindow()>();

     label2:
        $r3 = r1.<android.view.View: android.view.ViewParent mParent>;

        if $r3 == null goto label3;

        r1.<android.view.View: android.view.ViewParent mParent> = null;

     label3:
        virtualinvoke r0.<android.view.ViewGroup: void invalidate()>();

     label4:
        return;
    }

    public android.view.View findFocus()
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isFocused()>();

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r1 == null goto label2;

        $r2 = virtualinvoke r1.<android.view.View: android.view.View findFocus()>();

        return $r2;

     label2:
        return null;
    }

    android.view.View findFrontmostDroppableChildAt(float, float, android.graphics.PointF)
    {
        android.view.ViewGroup r0;
        float f0, f1;
        android.graphics.PointF r1;
        android.view.View[] r2;
        android.view.View r3;
        boolean $z0, $z1;
        int i0, i1;

        r0 := @this: android.view.ViewGroup;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: android.graphics.PointF;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = i0 + -1;

     label1:
        if i1 < 0 goto label4;

        r3 = r2[i1];

        $z0 = virtualinvoke r3.<android.view.View: boolean canAcceptDrag()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>(f0, f1, r3, r1);

        if $z1 == 0 goto label3;

        return r3;

     label3:
        i1 = i1 + -1;

        goto label1;

     label4:
        return null;
    }

    public void findNamedViews(java.util.Map)
    {
        android.view.ViewGroup r0;
        java.util.Map r1;
        int i0, $i1, i2;
        android.view.View $r2;
        android.view.GhostView $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.Map;

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getVisibility()>();

        if $i1 == 0 goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.GhostView mGhostView>;

        if $r3 != null goto label1;

        return;

     label1:
        specialinvoke r0.<android.view.View: void findNamedViews(java.util.Map)>(r1);

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i2 = 0;

     label2:
        if i2 >= i0 goto label3;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2);

        virtualinvoke $r2.<android.view.View: void findNamedViews(java.util.Map)>(r1);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    public android.view.View findViewByAccessibilityIdTraversal(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View[] r1;
        android.view.accessibility.AccessibilityNodeProvider $r2;
        android.view.View $r3, r4, r5;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r4 = specialinvoke r0.<android.view.View: android.view.View findViewByAccessibilityIdTraversal(int)>(i0);

        if r4 == null goto label1;

        return r4;

     label1:
        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $r2 == null goto label2;

        return null;

     label2:
        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label3:
        if i2 >= i1 goto label5;

        $r3 = r1[i2];

        r5 = virtualinvoke $r3.<android.view.View: android.view.View findViewByAccessibilityIdTraversal(int)>(i0);

        if r5 == null goto label4;

        return r5;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        return null;
    }

    public android.view.View findViewByAutofillIdTraversal(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2;
        android.view.View r1, $r2, r3;
        android.view.View[] r4;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r3 = specialinvoke r0.<android.view.View: android.view.View findViewByAutofillIdTraversal(int)>(i0);

        if r3 == null goto label1;

        return r3;

     label1:
        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r4 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = 0;

     label2:
        if i2 >= i1 goto label4;

        $r2 = r4[i2];

        r1 = virtualinvoke $r2.<android.view.View: android.view.View findViewByAutofillIdTraversal(int)>(i0);

        if r1 == null goto label3;

        return r1;

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return null;
    }

    protected android.view.View findViewByPredicateTraversal(java.util.function.Predicate, android.view.View)
    {
        android.view.ViewGroup r0;
        java.util.function.Predicate r1;
        android.view.View r2, r4, r5;
        android.view.View[] r3;
        int i0, $i1, $i2, i3;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.function.Predicate;

        r2 := @parameter1: android.view.View;

        $z0 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r0);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        r4 = r3[i3];

        if r4 == r2 goto label3;

        $i1 = r4.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 8;

        if $i2 != 0 goto label3;

        r5 = virtualinvoke r4.<android.view.View: android.view.View findViewByPredicate(java.util.function.Predicate)>(r1);

        if r5 == null goto label3;

        return r5;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return null;
    }

    protected android.view.View findViewTraversal(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, $i2, $i3, $i4, i5;
        android.view.View[] r1;
        android.view.View r2, r3;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i2 = r0.<android.view.ViewGroup: int mID>;

        if i0 != $i2 goto label1;

        return r0;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i5 = 0;

     label2:
        if i5 >= i1 goto label4;

        r2 = r1[i5];

        $i3 = r2.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 & 8;

        if $i4 != 0 goto label3;

        r3 = virtualinvoke r2.<android.view.View: android.view.View findViewById(int)>(i0);

        if r3 == null goto label3;

        return r3;

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        return null;
    }

    protected android.view.View findViewWithTagTraversal(java.lang.Object)
    {
        android.view.ViewGroup r0;
        java.lang.Object r1, $r3;
        android.view.View[] r2;
        int i0, $i1, $i2, i3;
        boolean $z0;
        android.view.View r4, r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: java.lang.Object mTag>;

        $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        return r0;

     label1:
        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        r4 = r2[i3];

        $i1 = r4.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 8;

        if $i2 != 0 goto label3;

        r5 = virtualinvoke r4.<android.view.View: android.view.View findViewWithTag(java.lang.Object)>(r1);

        if r5 == null goto label3;

        return r5;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return null;
    }

    public void findViewsWithText(java.util.ArrayList, java.lang.CharSequence, int)
    {
        android.view.ViewGroup r0;
        java.util.ArrayList r1;
        java.lang.CharSequence r2;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        android.view.View[] r3;
        android.view.View r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: java.util.ArrayList;

        r2 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>(r1, r2, i0);

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i6 = 0;

     label1:
        if i6 >= i1 goto label3;

        r4 = r3[i6];

        $i2 = r4.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 12;

        if $i3 != 0 goto label2;

        $i4 = r4.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & 8;

        if $i5 != 0 goto label2;

        virtualinvoke r4.<android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)>(r1, r2, i0);

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        return;
    }

    void finishAnimatingView(android.view.View, android.view.animation.Animation)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.animation.Animation r2;
        java.util.ArrayList r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1;
        android.view.View$AttachInfo $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.animation.Animation;

        r3 = r0.<android.view.ViewGroup: java.util.ArrayList mDisappearingChildren>;

        if r3 == null goto label2;

        $z1 = virtualinvoke r3.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        virtualinvoke r3.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        $r4 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label1;

        virtualinvoke r1.<android.view.View: void dispatchDetachedFromWindow()>();

     label1:
        virtualinvoke r1.<android.view.View: void clearAnimation()>();

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 | 4;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

     label2:
        if r2 == null goto label3;

        $z0 = virtualinvoke r2.<android.view.animation.Animation: boolean getFillAfter()>();

        if $z0 != 0 goto label3;

        virtualinvoke r1.<android.view.View: void clearAnimation()>();

     label3:
        $i6 = r1.<android.view.View: int mPrivateFlags>;

        $i7 = $i6 & 65536;

        if $i7 != 65536 goto label4;

        virtualinvoke r1.<android.view.View: void onAnimationEnd()>();

        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & -65537;

        r1.<android.view.View: int mPrivateFlags> = $i1;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 | 4;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

     label4:
        return;
    }

    public android.view.View focusSearch(android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r4, $r6;
        int i0;
        boolean $z0;
        android.view.ViewParent $r2, $r3;
        android.view.FocusFinder $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isRootNamespace()>();

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <android.view.FocusFinder: android.view.FocusFinder getInstance()>();

        $r6 = virtualinvoke $r5.<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>(r0, r1, i0);

        return $r6;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r4 = interfaceinvoke $r3.<android.view.ViewParent: android.view.View focusSearch(android.view.View,int)>(r1, i0);

        return $r4;

     label2:
        return null;
    }

    public void focusableViewAvailable(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewParent $r2, $r3;
        int $i0, $i1, $i2, $i3;
        boolean $z0, $z1, $z2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label3;

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 == 393216 goto label3;

        $i1 = r0.<android.view.ViewGroup: int mViewFlags>;

        $i2 = $i1 & 12;

        if $i2 != 0 goto label3;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isFocusableInTouchMode()>();

        if $z0 != 0 goto label1;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean shouldBlockFocusForTouchscreen()>();

        if $z2 != 0 goto label3;

     label1:
        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isFocused()>();

        if $z1 == 0 goto label2;

        $i3 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i3 != 262144 goto label3;

     label2:
        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void focusableViewAvailable(android.view.View)>(r1);

     label3:
        return;
    }

    public boolean gatherTransparentRegion(android.graphics.Region)
    {
        android.view.ViewGroup r0;
        android.graphics.Region r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.util.ArrayList r2;
        android.view.View[] r3;
        android.view.View r4;
        boolean $z2, $z3, z4, z5, z6, z7, z8, z9;
        android.view.animation.Animation $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Region;

        i5 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = i5 & 512;

        if $i1 != 0 goto label01;

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        if z4 == 0 goto label03;

        if r1 != null goto label03;

        return 1;

     label03:
        specialinvoke r0.<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>(r1);

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        z5 = 1;

        z6 = 1;

        if i0 <= 0 goto label10;

        r2 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r2 != null goto label04;

        $z3 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z3 == 0 goto label04;

        z7 = 1;

        goto label05;

     label04:
        z7 = 0;

     label05:
        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i6 = 0;

     label06:
        if i6 >= i0 goto label09;

        $i2 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i0, i6, z7);

        r4 = staticinvoke <android.view.ViewGroup: android.view.View getAndVerifyPreorderedView(java.util.ArrayList,android.view.View[],int)>(r2, r3, $i2);

        $i3 = r4.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 12;

        if $i4 == 0 goto label07;

        z8 = z6;

        $r5 = virtualinvoke r4.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r5 == null goto label08;

     label07:
        z8 = z6;

        $z2 = virtualinvoke r4.<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>(r1);

        if $z2 != 0 goto label08;

        z8 = 0;

     label08:
        i6 = i6 + 1;

        z6 = z8;

        goto label06;

     label09:
        z5 = z6;

        if r2 == null goto label10;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

        z5 = z6;

     label10:
        if z4 != 0 goto label11;

        z9 = 0;

        if z5 == 0 goto label12;

     label11:
        z9 = 1;

     label12:
        return z9;
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$LayoutParams $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r1.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-2, -2);

        return $r1;
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.view.ViewGroup r0;
        android.util.AttributeSet r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.content.Context $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = new android.view.ViewGroup$LayoutParams;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.content.Context getContext()>();

        specialinvoke $r2.<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($r3, r1);

        return $r2;
    }

    protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$LayoutParams r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        return r1;
    }

    public java.lang.CharSequence getAccessibilityClassName()
    {
        android.view.ViewGroup r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: android.view.ViewGroup;

        $r1 = class "Landroid/view/ViewGroup;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public android.view.View getChildAt(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1;
        android.view.View[] $r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        if i0 < 0 goto label2;

        $i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 < $i1 goto label1;

        goto label2;

     label1:
        $r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r2 = $r1[i0];

        return $r2;

     label2:
        return null;
    }

    public int getChildCount()
    {
        android.view.ViewGroup r0;
        int $i0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        return $i0;
    }

    public final int getChildDrawingOrder(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        $i2 = virtualinvoke r0.<android.view.ViewGroup: int getChildDrawingOrder(int,int)>($i1, i0);

        return $i2;
    }

    protected int getChildDrawingOrder(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        return i1;
    }

    protected boolean getChildStaticTransformation(android.view.View, android.view.animation.Transformation)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.animation.Transformation r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.animation.Transformation;

        return 0;
    }

    android.view.animation.Transformation getChildTransformation()
    {
        android.view.ViewGroup r0;
        android.view.animation.Transformation $r1, $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.Transformation mChildTransformation>;

        if $r1 != null goto label1;

        $r3 = new android.view.animation.Transformation;

        specialinvoke $r3.<android.view.animation.Transformation: void <init>()>();

        r0.<android.view.ViewGroup: android.view.animation.Transformation mChildTransformation> = $r3;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.animation.Transformation mChildTransformation>;

        return $r2;
    }

    public boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.graphics.Rect r2;
        android.graphics.Point r3;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Point;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point,boolean)>(r1, r2, r3, 0);

        return $z0;
    }

    public boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point, boolean)
    {
        android.view.ViewGroup r0, $r11, $r18;
        android.view.View r1;
        android.graphics.Rect r2, $r6, $r12, $r13, $r14, $r15;
        android.graphics.Point r3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z8, z9, z10, z11;
        android.view.View$AttachInfo $r4, $r19, $r21, $r23;
        android.graphics.RectF $r5, r24;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, $i22, $i23, $i24, $i25, $i26, $i27, i28, $i29, $i30, i31, $i32, $i33, $i34, $i35;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19;
        android.view.ViewParent $r7, $r8, $r9, $r10, $r16, $r17, $r26;
        android.graphics.Matrix $r20, $r22;
        float[] r25;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Point;

        z0 := @parameter3: boolean;

        $r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label01;

        $r23 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        r24 = $r23.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        goto label02;

     label01:
        $r5 = new android.graphics.RectF;

        specialinvoke $r5.<android.graphics.RectF: void <init>()>();

        r24 = $r5;

     label02:
        virtualinvoke r24.<android.graphics.RectF: void set(android.graphics.Rect)>(r2);

        $z1 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z1 != 0 goto label03;

        $r22 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r22.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r24);

     label03:
        $i1 = r1.<android.view.View: int mLeft>;

        $i0 = r0.<android.view.ViewGroup: int mScrollX>;

        i20 = $i1 - $i0;

        $i3 = r1.<android.view.View: int mTop>;

        $i2 = r0.<android.view.ViewGroup: int mScrollY>;

        i21 = $i3 - $i2;

        $f1 = (float) i20;

        $f0 = (float) i21;

        virtualinvoke r24.<android.graphics.RectF: void offset(float,float)>($f1, $f0);

        if r3 == null goto label07;

        $z5 = virtualinvoke r1.<android.view.View: boolean hasIdentityMatrix()>();

        if $z5 != 0 goto label06;

        $r19 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r19 == null goto label04;

        $r21 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        r25 = $r21.<android.view.View$AttachInfo: float[] mTmpTransformLocation>;

        goto label05;

     label04:
        r25 = newarray (float)[2];

     label05:
        $i16 = r3.<android.graphics.Point: int x>;

        $f12 = (float) $i16;

        r25[0] = $f12;

        $i17 = r3.<android.graphics.Point: int y>;

        $f13 = (float) $i17;

        r25[1] = $f13;

        $r20 = virtualinvoke r1.<android.view.View: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r20.<android.graphics.Matrix: void mapPoints(float[])>(r25);

        $f14 = r25[0];

        $i18 = staticinvoke <java.lang.Math: int round(float)>($f14);

        r3.<android.graphics.Point: int x> = $i18;

        $f15 = r25[1];

        $i19 = staticinvoke <java.lang.Math: int round(float)>($f15);

        r3.<android.graphics.Point: int y> = $i19;

     label06:
        $i22 = r3.<android.graphics.Point: int x>;

        $i23 = $i22 + i20;

        r3.<android.graphics.Point: int x> = $i23;

        $i24 = r3.<android.graphics.Point: int y>;

        $i25 = $i24 + i21;

        r3.<android.graphics.Point: int y> = $i25;

     label07:
        $i26 = r0.<android.view.ViewGroup: int mRight>;

        $i27 = r0.<android.view.ViewGroup: int mLeft>;

        i28 = $i26 - $i27;

        $i29 = r0.<android.view.ViewGroup: int mBottom>;

        $i30 = r0.<android.view.ViewGroup: int mTop>;

        i31 = $i29 - $i30;

        $r26 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r26 == null goto label08;

        z8 = 1;

        $r16 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z3 = $r16 instanceof android.view.ViewGroup;

        if $z3 == 0 goto label09;

        z8 = 1;

        $r17 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r18 = (android.view.ViewGroup) $r17;

        $z4 = virtualinvoke $r18.<android.view.ViewGroup: boolean getClipChildren()>();

        if $z4 == 0 goto label09;

     label08:
        $f3 = (float) i28;

        $f2 = (float) i31;

        z8 = virtualinvoke r24.<android.graphics.RectF: boolean intersect(float,float,float,float)>(0.0F, 0.0F, $f3, $f2);

     label09:
        if z0 != 0 goto label10;

        z9 = z8;

        if z8 == 0 goto label11;

     label10:
        z9 = z8;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 & 34;

        if $i5 != 34 goto label11;

        $i10 = r0.<android.view.ViewGroup: int mPaddingLeft>;

        $f11 = (float) $i10;

        $i11 = r0.<android.view.ViewGroup: int mPaddingTop>;

        $f10 = (float) $i11;

        $i12 = r0.<android.view.ViewGroup: int mPaddingRight>;

        $i13 = i28 - $i12;

        $f9 = (float) $i13;

        $i14 = r0.<android.view.ViewGroup: int mPaddingBottom>;

        $i15 = i31 - $i14;

        $f8 = (float) $i15;

        z9 = virtualinvoke r24.<android.graphics.RectF: boolean intersect(float,float,float,float)>($f11, $f10, $f9, $f8);

     label11:
        if z0 != 0 goto label12;

        z10 = z9;

        if z9 == 0 goto label13;

     label12:
        z10 = z9;

        $r6 = r0.<android.view.ViewGroup: android.graphics.Rect mClipBounds>;

        if $r6 == null goto label13;

        $r12 = r0.<android.view.ViewGroup: android.graphics.Rect mClipBounds>;

        $i6 = $r12.<android.graphics.Rect: int left>;

        $f7 = (float) $i6;

        $r13 = r0.<android.view.ViewGroup: android.graphics.Rect mClipBounds>;

        $i7 = $r13.<android.graphics.Rect: int top>;

        $f6 = (float) $i7;

        $r14 = r0.<android.view.ViewGroup: android.graphics.Rect mClipBounds>;

        $i8 = $r14.<android.graphics.Rect: int right>;

        $f5 = (float) $i8;

        $r15 = r0.<android.view.ViewGroup: android.graphics.Rect mClipBounds>;

        $i9 = $r15.<android.graphics.Rect: int bottom>;

        $f4 = (float) $i9;

        z10 = virtualinvoke r24.<android.graphics.RectF: boolean intersect(float,float,float,float)>($f7, $f6, $f5, $f4);

     label13:
        $f16 = r24.<android.graphics.RectF: float left>;

        $d0 = (double) $f16;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i32 = (int) $d1;

        $f17 = r24.<android.graphics.RectF: float top>;

        $d2 = (double) $f17;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $i33 = (int) $d3;

        $f18 = r24.<android.graphics.RectF: float right>;

        $d4 = (double) $f18;

        $d5 = staticinvoke <java.lang.Math: double ceil(double)>($d4);

        $i34 = (int) $d5;

        $f19 = r24.<android.graphics.RectF: float bottom>;

        $d6 = (double) $f19;

        $d7 = staticinvoke <java.lang.Math: double ceil(double)>($d6);

        $i35 = (int) $d7;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i32, $i33, $i34, $i35);

        if z0 != 0 goto label14;

        z11 = z10;

        if z10 == 0 goto label16;

     label14:
        z11 = z10;

        $r7 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r7 == null goto label16;

        $r8 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z2 = $r8 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label15;

        $r10 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r11 = (android.view.ViewGroup) $r10;

        z11 = virtualinvoke $r11.<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point,boolean)>(r0, r2, r3, z0);

        goto label16;

     label15:
        $r9 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        z11 = interfaceinvoke $r9.<android.view.ViewParent: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>(r0, r2, r3);

     label16:
        return z11;
    }

    public boolean getClipChildren()
    {
        android.view.ViewGroup r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean getClipToPadding()
    {
        android.view.ViewGroup r0;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean hasBooleanFlag(int)>(2);

        return $z0;
    }

    android.view.View getDeepestFocusedChild()
    {
        android.view.ViewGroup r0, $r1;
        boolean $z0, $z1;
        android.view.View r2, r3;

        r0 := @this: android.view.ViewGroup;

        r2 = r0;

     label1:
        r3 = null;

        if r2 == null goto label4;

        $z0 = virtualinvoke r2.<android.view.View: boolean isFocused()>();

        if $z0 == 0 goto label2;

        return r2;

     label2:
        $z1 = r2 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        $r1 = (android.view.ViewGroup) r2;

        r3 = virtualinvoke $r1.<android.view.ViewGroup: android.view.View getFocusedChild()>();

     label3:
        r2 = r3;

        goto label1;

     label4:
        return null;
    }

    public int getDescendantFocusability()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 393216;

        return $i1;
    }

    public android.view.View getFocusedChild()
    {
        android.view.ViewGroup r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        return $r1;
    }

    public android.view.animation.LayoutAnimationController getLayoutAnimation()
    {
        android.view.ViewGroup r0;
        android.view.animation.LayoutAnimationController $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        return $r1;
    }

    public android.view.animation.Animation$AnimationListener getLayoutAnimationListener()
    {
        android.view.ViewGroup r0;
        android.view.animation.Animation$AnimationListener $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener>;

        return $r1;
    }

    public int getLayoutMode()
    {
        android.view.ViewGroup r0, $r3;
        int $i0, i1, $i2;
        android.view.ViewParent $r1, $r2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mLayoutMode>;

        if $i0 != -1 goto label3;

        $r1 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z0 = $r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r3 = (android.view.ViewGroup) $r2;

        i1 = virtualinvoke $r3.<android.view.ViewGroup: int getLayoutMode()>();

        goto label2;

     label1:
        i1 = <android.view.ViewGroup: int LAYOUT_MODE_DEFAULT>;

     label2:
        specialinvoke r0.<android.view.ViewGroup: void setLayoutMode(int,boolean)>(i1, 0);

     label3:
        $i2 = r0.<android.view.ViewGroup: int mLayoutMode>;

        return $i2;
    }

    public android.animation.LayoutTransition getLayoutTransition()
    {
        android.view.ViewGroup r0;
        android.animation.LayoutTransition $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        return $r1;
    }

    public int getNestedScrollAxes()
    {
        android.view.ViewGroup r0;
        int $i0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mNestedScrollAxes>;

        return $i0;
    }

    int getNumChildrenForAccessibility()
    {
        android.view.ViewGroup r0, $r2;
        android.view.View r1;
        int $i0, $i1, i2, i3, i4;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i3 >= $i0 goto label4;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i3);

        $z0 = virtualinvoke r1.<android.view.View: boolean includeForAccessibility()>();

        if $z0 == 0 goto label2;

        i4 = i2 + 1;

        goto label3;

     label2:
        i4 = i2;

        $z1 = r1 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        $r2 = (android.view.ViewGroup) r1;

        $i1 = virtualinvoke $r2.<android.view.ViewGroup: int getNumChildrenForAccessibility()>();

        i4 = i2 + $i1;

     label3:
        i3 = i3 + 1;

        i2 = i4;

        goto label1;

     label4:
        return i2;
    }

    public android.view.ViewGroupOverlay getOverlay()
    {
        android.view.ViewGroup r0;
        android.view.ViewOverlay $r1, $r2;
        android.view.ViewGroupOverlay $r3, $r4;
        android.content.Context $r5;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.ViewOverlay mOverlay>;

        if $r1 != null goto label1;

        $r4 = new android.view.ViewGroupOverlay;

        $r5 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        specialinvoke $r4.<android.view.ViewGroupOverlay: void <init>(android.content.Context,android.view.View)>($r5, r0);

        r0.<android.view.ViewGroup: android.view.ViewOverlay mOverlay> = $r4;

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.ViewOverlay mOverlay>;

        $r3 = (android.view.ViewGroupOverlay) $r2;

        return $r3;
    }

    public volatile android.view.ViewOverlay getOverlay()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroupOverlay $r1;

        r0 := @this: android.view.ViewGroup;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewGroupOverlay getOverlay()>();

        return $r1;
    }

    public int getPersistentDrawingCache()
    {
        android.view.ViewGroup r0;
        int $i0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mPersistentDrawingCache>;

        return $i0;
    }

    void getScrollIndicatorBounds(android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Rect;

        specialinvoke r0.<android.view.View: void getScrollIndicatorBounds(android.graphics.Rect)>(r1);

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 34;

        if $i1 != 34 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        if z0 == 0 goto label3;

        $i3 = r1.<android.graphics.Rect: int left>;

        $i2 = r0.<android.view.ViewGroup: int mPaddingLeft>;

        $i4 = $i3 + $i2;

        r1.<android.graphics.Rect: int left> = $i4;

        $i6 = r1.<android.graphics.Rect: int right>;

        $i5 = r0.<android.view.ViewGroup: int mPaddingRight>;

        $i7 = $i6 - $i5;

        r1.<android.graphics.Rect: int right> = $i7;

        $i9 = r1.<android.graphics.Rect: int top>;

        $i8 = r0.<android.view.ViewGroup: int mPaddingTop>;

        $i10 = $i9 + $i8;

        r1.<android.graphics.Rect: int top> = $i10;

        $i12 = r1.<android.graphics.Rect: int bottom>;

        $i11 = r0.<android.view.ViewGroup: int mPaddingBottom>;

        $i13 = $i12 - $i11;

        r1.<android.graphics.Rect: int bottom> = $i13;

     label3:
        return;
    }

    public boolean getTouchscreenBlocksFocus()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.view.View getTransientView(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1;
        java.util.List r1, $r2;
        java.lang.Object $r3;
        android.view.View $r4;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        if r1 == null goto label2;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 < $i1 goto label1;

        goto label2;

     label1:
        $r2 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (android.view.View) $r3;

        return $r4;

     label2:
        return null;
    }

    public int getTransientViewCount()
    {
        android.view.ViewGroup r0;
        java.util.List r1;
        int i0;

        r0 := @this: android.view.ViewGroup;

        r1 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        if r1 != null goto label1;

        i0 = 0;

        goto label2;

     label1:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

     label2:
        return i0;
    }

    public int getTransientViewIndex(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2;
        java.util.List r1, $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        if i0 < 0 goto label2;

        r1 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        if r1 == null goto label2;

        $i1 = interfaceinvoke r1.<java.util.List: int size()>();

        if i0 < $i1 goto label1;

        goto label2;

     label1:
        $r2 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0);

        $r4 = (java.lang.Integer) $r3;

        $i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>();

        return $i2;

     label2:
        return -1;
    }

    void handleFocusGainInternal(int, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        int i0;
        android.graphics.Rect r1;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.View: void unFocus(android.view.View)>(r0);

        r0.<android.view.ViewGroup: android.view.View mFocused> = null;

        r0.<android.view.ViewGroup: android.view.View mFocusedInCluster> = null;

     label1:
        specialinvoke r0.<android.view.View: void handleFocusGainInternal(int,android.graphics.Rect)>(i0, r1);

        return;
    }

    boolean hasDefaultFocus()
    {
        android.view.ViewGroup r0;
        android.view.View $r1;
        boolean $z0, z1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        if $r1 != null goto label2;

        $z0 = specialinvoke r0.<android.view.View: boolean hasDefaultFocus()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public boolean hasFocus()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        android.view.View $r1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i1 = $i0 & 2;

        if $i1 != 0 goto label2;

        $r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if $r1 == null goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    boolean hasFocusable(boolean, boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, z1, $z2, $z3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $i0 = r0.<android.view.ViewGroup: int mViewFlags>;

        $i1 = $i0 & 12;

        if $i1 == 0 goto label1;

        return 0;

     label1:
        if z0 != 0 goto label2;

        $i3 = virtualinvoke r0.<android.view.ViewGroup: int getFocusable()>();

        if $i3 == 16 goto label3;

     label2:
        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isFocusable()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $i2 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i2 == 393216 goto label4;

        $z3 = virtualinvoke r0.<android.view.ViewGroup: boolean hasFocusableChild(boolean)>(z1);

        return $z3;

     label4:
        return 0;
    }

    boolean hasFocusableChild(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, $z1, $z2;
        int i0, i1;
        android.view.View[] r1;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r2 = r1[i1];

        if z0 == 0 goto label2;

        $z2 = virtualinvoke r2.<android.view.View: boolean hasExplicitFocusable()>();

        if $z2 != 0 goto label3;

     label2:
        if z0 != 0 goto label4;

        $z1 = virtualinvoke r2.<android.view.View: boolean hasFocusable()>();

        if $z1 == 0 goto label4;

     label3:
        return 1;

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        return 0;
    }

    protected boolean hasHoveredChild()
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$HoverTarget $r1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean hasTransientState()
    {
        android.view.ViewGroup r0;
        int $i0;
        boolean $z0, z1;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mChildCountWithTransientState>;

        if $i0 > 0 goto label2;

        $z0 = specialinvoke r0.<android.view.View: boolean hasTransientState()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    boolean hasUnhandledKeyListener()
    {
        android.view.ViewGroup r0;
        int $i0;
        boolean $z0, z1;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mChildUnhandledKeyListeners>;

        if $i0 > 0 goto label2;

        $z0 = specialinvoke r0.<android.view.View: boolean hasUnhandledKeyListener()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public boolean hasWindowInsetsAnimationCallback()
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4, i5;
        boolean $z0, $z1, $z2, z3;
        android.view.View $r1;
        android.view.View$AttachInfo $r2, $r3;
        android.view.Window$OnContentApplyWindowInsetsListener $r4;

        r0 := @this: android.view.ViewGroup;

        $z0 = specialinvoke r0.<android.view.View: boolean hasWindowInsetsAnimationCallback()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $i1 = r0.<android.view.ViewGroup: int mViewFlags>;

        $i2 = $i1 & 2048;

        if $i2 != 0 goto label3;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isFrameworkOptionalFitsSystemWindows()>();

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        z3 = 0;

        goto label4;

     label3:
        z3 = 1;

     label4:
        if z3 == 0 goto label5;

        $r2 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r2 == null goto label5;

        $r3 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.Window$OnContentApplyWindowInsetsListener mContentOnApplyWindowInsetsListener>;

        if $r4 == null goto label5;

        $i3 = virtualinvoke r0.<android.view.ViewGroup: int getWindowSystemUiVisibility()>();

        $i4 = $i3 & 1536;

        if $i4 != 0 goto label5;

        return 0;

     label5:
        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i5 = 0;

     label6:
        if i5 >= i0 goto label8;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i5);

        $z1 = virtualinvoke $r1.<android.view.View: boolean hasWindowInsetsAnimationCallback()>();

        if $z1 == 0 goto label7;

        return 1;

     label7:
        i5 = i5 + 1;

        goto label6;

     label8:
        return 0;
    }

    void incrementChildUnhandledKeyListeners()
    {
        android.view.ViewGroup r0, $r3;
        int i0, $i1;
        android.view.ViewParent $r1, $r2;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $i1 = r0.<android.view.ViewGroup: int mChildUnhandledKeyListeners>;

        i0 = $i1 + 1;

        r0.<android.view.ViewGroup: int mChildUnhandledKeyListeners> = i0;

        if i0 != 1 goto label1;

        $r1 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z0 = $r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r3 = (android.view.ViewGroup) $r2;

        virtualinvoke $r3.<android.view.ViewGroup: void incrementChildUnhandledKeyListeners()>();

     label1:
        return;
    }

    public int indexOfChild(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r3;
        int i0, i1;
        android.view.View[] r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        $r3 = r2[i1];

        if $r3 != r1 goto label2;

        return i1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return -1;
    }

    protected void internalSetPadding(int, int, int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<android.view.View: void internalSetPadding(int,int,int,int)>(i0, i1, i2, i3);

        $i5 = r0.<android.view.ViewGroup: int mPaddingLeft>;

        $i4 = r0.<android.view.ViewGroup: int mPaddingTop>;

        $i7 = $i5 | $i4;

        $i6 = r0.<android.view.ViewGroup: int mPaddingRight>;

        $i9 = $i7 | $i6;

        $i8 = r0.<android.view.ViewGroup: int mPaddingBottom>;

        $i10 = $i9 | $i8;

        if $i10 == 0 goto label1;

        $i13 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i14 = $i13 | 32;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i14;

        goto label2;

     label1:
        $i11 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i12 = $i11 & -33;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i12;

     label2:
        return;
    }

    public final void invalidateChild(android.view.View, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        android.graphics.Rect r1;
        android.view.View$AttachInfo r2;
        int[] r4;
        android.view.animation.Transformation r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27;
        boolean $z0, $z2, $z4, $z5, $z6, $z8, z9, $z10;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15;
        android.view.ViewRootImpl $r6;
        android.graphics.Matrix $r7, r9, r13, r14, r17;
        android.view.View r8, r16;
        android.view.ViewParent r10;
        android.graphics.RectF r12, r18;

        r0 := @this: android.view.ViewGroup;

        r8 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.Rect;

        r2 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if r2 == null goto label01;

        $z8 = r2.<android.view.View$AttachInfo: boolean mHardwareAccelerated>;

        if $z8 == 0 goto label01;

        virtualinvoke r0.<android.view.ViewGroup: void onDescendantInvalidated(android.view.View,android.view.View)>(r8, r8);

        return;

     label01:
        if r2 == null goto label18;

        $i0 = r8.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label02;

        z9 = 1;

        goto label03;

     label02:
        z9 = 0;

     label03:
        r9 = virtualinvoke r8.<android.view.View: android.graphics.Matrix getMatrix()>();

        $i2 = r8.<android.view.View: int mLayerType>;

        if $i2 == 0 goto label04;

        $i24 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i25 = $i24 | -2147483648;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i25;

        $i26 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i27 = $i26 & -32769;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i27;

     label04:
        r4 = r2.<android.view.View$AttachInfo: int[] mInvalidateChildLocation>;

        $i3 = r8.<android.view.View: int mLeft>;

        r4[0] = $i3;

        $i4 = r8.<android.view.View: int mTop>;

        r4[1] = $i4;

        $z0 = virtualinvoke r9.<android.graphics.Matrix: boolean isIdentity()>();

        if $z0 == 0 goto label05;

        r10 = r0;

        $i22 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i23 = $i22 & 2048;

        if $i23 == 0 goto label10;

     label05:
        r12 = r2.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        virtualinvoke r12.<android.graphics.RectF: void set(android.graphics.Rect)>(r1);

        $i5 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i6 = $i5 & 2048;

        if $i6 == 0 goto label08;

        r5 = r2.<android.view.View$AttachInfo: android.view.animation.Transformation mTmpTransformation>;

        $z5 = virtualinvoke r0.<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>(r8, r5);

        if $z5 == 0 goto label06;

        r13 = r2.<android.view.View$AttachInfo: android.graphics.Matrix mTmpMatrix>;

        $r7 = virtualinvoke r5.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke r13.<android.graphics.Matrix: void set(android.graphics.Matrix)>($r7);

        r14 = r13;

        $z6 = virtualinvoke r9.<android.graphics.Matrix: boolean isIdentity()>();

        if $z6 != 0 goto label07;

        virtualinvoke r13.<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>(r9);

        r14 = r13;

        goto label07;

     label06:
        r14 = r9;

     label07:
        goto label09;

     label08:
        r14 = r9;

     label09:
        virtualinvoke r14.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r12);

        $f0 = r12.<android.graphics.RectF: float left>;

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double floor(double)>($d0);

        $i7 = (int) $d1;

        $f1 = r12.<android.graphics.RectF: float top>;

        $d2 = (double) $f1;

        $d3 = staticinvoke <java.lang.Math: double floor(double)>($d2);

        $i8 = (int) $d3;

        $f2 = r12.<android.graphics.RectF: float right>;

        $d4 = (double) $f2;

        $d5 = staticinvoke <java.lang.Math: double ceil(double)>($d4);

        $i9 = (int) $d5;

        $f3 = r12.<android.graphics.RectF: float bottom>;

        $d6 = (double) $f3;

        $d7 = staticinvoke <java.lang.Math: double ceil(double)>($d6);

        $i10 = (int) $d7;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i7, $i8, $i9, $i10);

        r10 = r0;

     label10:
        r16 = null;

        $z10 = r10 instanceof android.view.View;

        if $z10 == 0 goto label11;

        r16 = (android.view.View) r10;

     label11:
        if z9 == 0 goto label13;

        if r16 == null goto label12;

        $i20 = r16.<android.view.View: int mPrivateFlags>;

        $i21 = $i20 | 64;

        r16.<android.view.View: int mPrivateFlags> = $i21;

        goto label13;

     label12:
        $z4 = r10 instanceof android.view.ViewRootImpl;

        if $z4 == 0 goto label13;

        $r6 = (android.view.ViewRootImpl) r10;

        $r6.<android.view.ViewRootImpl: boolean mIsAnimating> = 1;

     label13:
        if r16 == null goto label14;

        $i15 = r16.<android.view.View: int mPrivateFlags>;

        $i16 = $i15 & 2097152;

        if $i16 == 2097152 goto label14;

        $i17 = r16.<android.view.View: int mPrivateFlags>;

        $i18 = $i17 & -2097153;

        $i19 = $i18 | 2097152;

        r16.<android.view.View: int mPrivateFlags> = $i19;

     label14:
        r10 = interfaceinvoke r10.<android.view.ViewParent: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>(r4, r1);

        if r16 == null goto label16;

        r17 = virtualinvoke r16.<android.view.View: android.graphics.Matrix getMatrix()>();

        $z2 = virtualinvoke r17.<android.graphics.Matrix: boolean isIdentity()>();

        if $z2 != 0 goto label15;

        r18 = r2.<android.view.View$AttachInfo: android.graphics.RectF mTmpTransformRect>;

        virtualinvoke r18.<android.graphics.RectF: void set(android.graphics.Rect)>(r1);

        virtualinvoke r17.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r18);

        $f4 = r18.<android.graphics.RectF: float left>;

        $d8 = (double) $f4;

        $d9 = staticinvoke <java.lang.Math: double floor(double)>($d8);

        $i11 = (int) $d9;

        $f5 = r18.<android.graphics.RectF: float top>;

        $d10 = (double) $f5;

        $d11 = staticinvoke <java.lang.Math: double floor(double)>($d10);

        $i12 = (int) $d11;

        $f6 = r18.<android.graphics.RectF: float right>;

        $d12 = (double) $f6;

        $d13 = staticinvoke <java.lang.Math: double ceil(double)>($d12);

        $i13 = (int) $d13;

        $f7 = r18.<android.graphics.RectF: float bottom>;

        $d14 = (double) $f7;

        $d15 = staticinvoke <java.lang.Math: double ceil(double)>($d14);

        $i14 = (int) $d15;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i11, $i12, $i13, $i14);

        goto label16;

     label15:
        goto label16;

     label16:
        if r10 != null goto label17;

        goto label18;

     label17:
        goto label10;

     label18:
        return;
    }

    public android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        int[] r1;
        android.graphics.Rect r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, i43, i44, $i45, $i46, $i47;
        android.view.ViewParent $r3;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.graphics.Rect;

        $i1 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i2 = $i1 & 32800;

        if $i2 == 0 goto label8;

        i43 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = i43 & 144;

        if $i3 == 128 goto label3;

        $i24 = r1[0];

        $i23 = r0.<android.view.ViewGroup: int mScrollX>;

        $i28 = $i24 - $i23;

        $i26 = r1[1];

        $i25 = r0.<android.view.ViewGroup: int mScrollY>;

        $i27 = $i26 - $i25;

        virtualinvoke r2.<android.graphics.Rect: void offset(int,int)>($i28, $i27);

        $i29 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i30 = $i29 & 1;

        if $i30 != 0 goto label1;

        $i38 = r0.<android.view.ViewGroup: int mRight>;

        $i37 = r0.<android.view.ViewGroup: int mLeft>;

        $i42 = $i38 - $i37;

        $i40 = r0.<android.view.ViewGroup: int mBottom>;

        $i39 = r0.<android.view.ViewGroup: int mTop>;

        $i41 = $i40 - $i39;

        virtualinvoke r2.<android.graphics.Rect: void union(int,int,int,int)>(0, 0, $i42, $i41);

     label1:
        i0 = r0.<android.view.ViewGroup: int mLeft>;

        i44 = r0.<android.view.ViewGroup: int mTop>;

        $i31 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i32 = $i31 & 1;

        if $i32 != 1 goto label2;

        $i33 = r0.<android.view.ViewGroup: int mRight>;

        $i36 = $i33 - i0;

        $i34 = r0.<android.view.ViewGroup: int mBottom>;

        $i35 = $i34 - i44;

        $z0 = virtualinvoke r2.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i36, $i35);

        if $z0 != 0 goto label2;

        virtualinvoke r2.<android.graphics.Rect: void setEmpty()>();

     label2:
        r1[0] = i0;

        r1[1] = i44;

        goto label6;

     label3:
        $i4 = i43 & 1;

        if $i4 != 1 goto label4;

        $i18 = r0.<android.view.ViewGroup: int mRight>;

        $i17 = r0.<android.view.ViewGroup: int mLeft>;

        $i22 = $i18 - $i17;

        $i20 = r0.<android.view.ViewGroup: int mBottom>;

        $i19 = r0.<android.view.ViewGroup: int mTop>;

        $i21 = $i20 - $i19;

        virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i22, $i21);

        goto label5;

     label4:
        $i6 = r0.<android.view.ViewGroup: int mRight>;

        $i5 = r0.<android.view.ViewGroup: int mLeft>;

        $i10 = $i6 - $i5;

        $i8 = r0.<android.view.ViewGroup: int mBottom>;

        $i7 = r0.<android.view.ViewGroup: int mTop>;

        $i9 = $i8 - $i7;

        virtualinvoke r2.<android.graphics.Rect: void union(int,int,int,int)>(0, 0, $i10, $i9);

     label5:
        $i11 = r0.<android.view.ViewGroup: int mLeft>;

        r1[0] = $i11;

        $i12 = r0.<android.view.ViewGroup: int mTop>;

        r1[1] = $i12;

        $i13 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i14 = $i13 & -33;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i14;

     label6:
        $i45 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i46 = $i45 & -32769;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i46;

        $i47 = r0.<android.view.ViewGroup: int mLayerType>;

        if $i47 == 0 goto label7;

        $i15 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i16 = $i15 | -2147483648;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i16;

     label7:
        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        return $r3;

     label8:
        return null;
    }

    void invalidateInheritedLayoutMode(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3;
        boolean $z0;
        android.view.View $r1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i2 = r0.<android.view.ViewGroup: int mLayoutMode>;

        if i2 == -1 goto label4;

        if i2 == i0 goto label4;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean hasBooleanFlag(int)>(8388608);

        if $z0 == 0 goto label1;

        goto label4;

     label1:
        specialinvoke r0.<android.view.ViewGroup: void setLayoutMode(int,boolean)>(-1, 0);

        i3 = 0;

        i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

     label2:
        if i3 >= i1 goto label3;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i3);

        virtualinvoke $r1.<android.view.View: void invalidateInheritedLayoutMode(int)>(i0);

        i3 = i3 + 1;

        goto label2;

     label3:
        return;

     label4:
        return;
    }

    public boolean isAlwaysDrawnWithCacheEnabled()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 16384;

        if $i1 != 16384 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isAnimationCacheEnabled()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 64;

        if $i1 != 64 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean isChildrenDrawingOrderEnabled()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 1024;

        if $i1 != 1024 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean isChildrenDrawnWithCacheEnabled()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 32768;

        if $i1 != 32768 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isLayoutModeOptical()
    {
        android.view.ViewGroup r0;
        int i0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        i0 = r0.<android.view.ViewGroup: int mLayoutMode>;

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isLayoutSuppressed()
    {
        android.view.ViewGroup r0;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        $z0 = r0.<android.view.ViewGroup: boolean mSuppressLayout>;

        return $z0;
    }

    public boolean isMotionEventSplittingEnabled()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 2097152;

        if $i1 != 2097152 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public final boolean isShowingContextMenuWithCoords()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 536870912;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected boolean isTransformedTouchPointInView(float, float, android.view.View, android.graphics.PointF)
    {
        android.view.ViewGroup r0;
        float f0, f1, $f2, $f3, $f4, $f5;
        android.view.View r1;
        android.graphics.PointF r2;
        float[] r3;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 := @parameter2: android.view.View;

        r2 := @parameter3: android.graphics.PointF;

        r3 = specialinvoke r0.<android.view.ViewGroup: float[] getTempLocationF()>();

        r3[0] = f0;

        r3[1] = f1;

        virtualinvoke r0.<android.view.ViewGroup: void transformPointToViewLocal(float[],android.view.View)>(r3, r1);

        $f3 = r3[0];

        $f2 = r3[1];

        z0 = virtualinvoke r1.<android.view.View: boolean pointInView(float,float)>($f3, $f2);

        if z0 == 0 goto label1;

        if r2 == null goto label1;

        $f5 = r3[0];

        $f4 = r3[1];

        virtualinvoke r2.<android.graphics.PointF: void set(float,float)>($f5, $f4);

     label1:
        return z0;
    }

    public boolean isTransitionGroup()
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2;
        android.view.ViewOutlineProvider r1, $r4;
        android.graphics.drawable.Drawable $r2;
        java.lang.String $r3;
        boolean z1, z2;

        r0 := @this: android.view.ViewGroup;

        i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        z1 = 0;

        $i1 = 33554432 & i0;

        if $i1 == 0 goto label2;

        $i2 = i0 & 16777216;

        if $i2 == 0 goto label1;

        z1 = 1;

     label1:
        return z1;

     label2:
        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewOutlineProvider getOutlineProvider()>();

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.graphics.drawable.Drawable getBackground()>();

        if $r2 != null goto label3;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: java.lang.String getTransitionName()>();

        if $r3 != null goto label3;

        z2 = 0;

        if r1 == null goto label4;

        z2 = 0;

        $r4 = <android.view.ViewOutlineProvider: android.view.ViewOutlineProvider BACKGROUND>;

        if r1 == $r4 goto label4;

     label3:
        z2 = 1;

     label4:
        return z2;
    }

    boolean isViewTransitioning(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        java.util.ArrayList r2;
        boolean $z0, z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void jumpDrawablesToCurrentState()
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void jumpDrawablesToCurrentState()>();

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void jumpDrawablesToCurrentState()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public final void layout(int, int, int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3;
        boolean $z0, $z1;
        android.animation.LayoutTransition r1, r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $z0 = r0.<android.view.ViewGroup: boolean mSuppressLayout>;

        if $z0 != 0 goto label3;

        r1 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<android.animation.LayoutTransition: boolean isChangingLayout()>();

        if $z1 != 0 goto label3;

     label1:
        r2 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.animation.LayoutTransition: void layoutChange(android.view.ViewGroup)>(r0);

     label2:
        specialinvoke r0.<android.view.View: void layout(int,int,int,int)>(i0, i1, i2, i3);

        goto label4;

     label3:
        r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed> = 1;

     label4:
        return;
    }

    public void makeFrameworkOptionalFitsSystemWindows()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void makeFrameworkOptionalFitsSystemWindows()>();

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void makeFrameworkOptionalFitsSystemWindows()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void makeOptionalFitsSystemWindows()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View[] r1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void makeOptionalFitsSystemWindows()>();

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void makeOptionalFitsSystemWindows()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void measureChild(android.view.View, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.view.ViewGroup$LayoutParams r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $i3 = r0.<android.view.ViewGroup: int mPaddingLeft>;

        $i2 = r0.<android.view.ViewGroup: int mPaddingRight>;

        $i5 = $i3 + $i2;

        $i4 = r2.<android.view.ViewGroup$LayoutParams: int width>;

        $i6 = staticinvoke <android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>(i0, $i5, $i4);

        $i8 = r0.<android.view.ViewGroup: int mPaddingTop>;

        $i7 = r0.<android.view.ViewGroup: int mPaddingBottom>;

        $i10 = $i8 + $i7;

        $i9 = r2.<android.view.ViewGroup$LayoutParams: int height>;

        $i11 = staticinvoke <android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>(i1, $i10, $i9);

        virtualinvoke r1.<android.view.View: void measure(int,int)>($i6, $i11);

        return;
    }

    protected void measureChildWithMargins(android.view.View, int, int, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23;
        android.view.ViewGroup$MarginLayoutParams r2;
        android.view.ViewGroup$LayoutParams $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r3 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (android.view.ViewGroup$MarginLayoutParams) $r3;

        $i5 = r0.<android.view.ViewGroup: int mPaddingLeft>;

        $i4 = r0.<android.view.ViewGroup: int mPaddingRight>;

        $i7 = $i5 + $i4;

        $i6 = r2.<android.view.ViewGroup$MarginLayoutParams: int leftMargin>;

        $i9 = $i7 + $i6;

        $i8 = r2.<android.view.ViewGroup$MarginLayoutParams: int rightMargin>;

        $i10 = $i9 + $i8;

        $i12 = $i10 + i1;

        $i11 = r2.<android.view.ViewGroup$MarginLayoutParams: int width>;

        $i13 = staticinvoke <android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>(i0, $i12, $i11);

        $i15 = r0.<android.view.ViewGroup: int mPaddingTop>;

        $i14 = r0.<android.view.ViewGroup: int mPaddingBottom>;

        $i17 = $i15 + $i14;

        $i16 = r2.<android.view.ViewGroup$MarginLayoutParams: int topMargin>;

        $i19 = $i17 + $i16;

        $i18 = r2.<android.view.ViewGroup$MarginLayoutParams: int bottomMargin>;

        $i20 = $i19 + $i18;

        $i22 = $i20 + i3;

        $i21 = r2.<android.view.ViewGroup$MarginLayoutParams: int height>;

        $i23 = staticinvoke <android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>(i2, $i22, $i21);

        virtualinvoke r1.<android.view.View: void measure(int,int)>($i13, $i23);

        return;
    }

    protected void measureChildren(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, $i3, $i4, i5;
        android.view.View[] r1;
        android.view.View r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i5 = 0;

     label1:
        if i5 >= i2 goto label3;

        r2 = r1[i5];

        $i3 = r2.<android.view.View: int mViewFlags>;

        $i4 = $i3 & 12;

        if $i4 == 8 goto label2;

        virtualinvoke r0.<android.view.ViewGroup: void measureChild(android.view.View,int,int)>(r2, i0, i1);

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        return;
    }

    boolean notifyChildOfDragStart(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        float f0, f1, $f2, $f3;
        float[] r2;
        boolean z0, $z2;
        android.view.DragEvent $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.HashSet $r11;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r3 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        f0 = $r3.<android.view.DragEvent: float mX>;

        $r4 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        f1 = $r4.<android.view.DragEvent: float mY>;

        r2 = specialinvoke r0.<android.view.ViewGroup: float[] getTempLocationF()>();

        r2[0] = f0;

        r2[1] = f1;

        virtualinvoke r0.<android.view.ViewGroup: void transformPointToViewLocal(float[],android.view.View)>(r2, r1);

        $r5 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        $f2 = r2[0];

        $r5.<android.view.DragEvent: float mX> = $f2;

        $r6 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        $f3 = r2[1];

        $r6.<android.view.DragEvent: float mY> = $f3;

        $r7 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        z0 = virtualinvoke r1.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>($r7);

        $r8 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        $r8.<android.view.DragEvent: float mX> = f0;

        $r9 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        $r9.<android.view.DragEvent: float mY> = f1;

        $r10 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        $r10.<android.view.DragEvent: boolean mEventHandlerWasCalled> = 0;

        if z0 == 0 goto label1;

        $r11 = r0.<android.view.ViewGroup: java.util.HashSet mChildrenInterestedInDrag>;

        virtualinvoke $r11.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        $z2 = virtualinvoke r1.<android.view.View: boolean canAcceptDrag()>();

        if $z2 != 0 goto label1;

        $i0 = r1.<android.view.View: int mPrivateFlags2>;

        $i1 = $i0 | 1;

        r1.<android.view.View: int mPrivateFlags2> = $i1;

        virtualinvoke r1.<android.view.View: void refreshDrawableState()>();

     label1:
        return z0;
    }

    public void notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int)
    {
        android.view.ViewGroup r0;
        int i0, $i1;
        android.view.ViewParent $r1, $r2, $r5;
        java.lang.AbstractMethodError $r3;
        java.lang.StringBuilder $r4;
        java.lang.Class $r6;
        java.lang.String $r7, $r10;
        android.view.View r11, r12;

        r0 := @this: android.view.ViewGroup;

        r11 := @parameter0: android.view.View;

        r12 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getAccessibilityLiveRegion()>();

        if $i1 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void notifyViewAccessibilityStateChangedIfNeeded(int)>(1);

        goto label5;

     label1:
        $r1 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r1 == null goto label5;

     label2:
        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void notifySubtreeAccessibilityStateChanged(android.view.View,android.view.View,int)>(r0, r12, i0);

     label3:
        goto label5;

     label4:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not fully implement ViewParent");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("View", $r10, $r3);

     label5:
        return;

        catch java.lang.AbstractMethodError from label2 to label3 with label4;
    }

    public void notifySubtreeAccessibilityStateChangedIfNeeded()
    {
        android.view.ViewGroup r0;
        android.view.ViewParent r1;
        android.content.Context $r2;
        android.view.accessibility.AccessibilityManager $r3;
        boolean $z0, $z1, $z2;
        android.view.View$AttachInfo $r4;
        int $i0, $i1;
        android.view.View $r5;

        r0 := @this: android.view.ViewGroup;

        $r2 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r2);

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label3;

        $r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r4 != null goto label1;

        goto label3;

     label1:
        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getImportantForAccessibility()>();

        if $i0 == 4 goto label2;

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isImportantForAccessibility()>();

        if $z1 != 0 goto label2;

        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if $i1 <= 0 goto label2;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewParent getParentForAccessibility()>();

        $z2 = r1 instanceof android.view.View;

        if $z2 == 0 goto label2;

        $r5 = (android.view.View) r1;

        virtualinvoke $r5.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        return;

     label2:
        specialinvoke r0.<android.view.View: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        return;

     label3:
        return;
    }

    public void offsetChildrenTopAndBottom(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, $i2, $i3, $i4, $i5, i6;
        android.view.View[] r1;
        android.view.View r2;
        android.graphics.RenderNode $r3, $r4;
        boolean z1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        z1 = 0;

        i6 = 0;

     label1:
        if i6 >= i1 goto label3;

        r2 = r1[i6];

        $i2 = r2.<android.view.View: int mTop>;

        $i3 = $i2 + i0;

        r2.<android.view.View: int mTop> = $i3;

        $i4 = r2.<android.view.View: int mBottom>;

        $i5 = $i4 + i0;

        r2.<android.view.View: int mBottom> = $i5;

        $r3 = r2.<android.view.View: android.graphics.RenderNode mRenderNode>;

        if $r3 == null goto label2;

        z1 = 1;

        $r4 = r2.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r4.<android.graphics.RenderNode: boolean offsetTopAndBottom(int)>(i0);

     label2:
        i6 = i6 + 1;

        goto label1;

     label3:
        if z1 == 0 goto label4;

        virtualinvoke r0.<android.view.ViewGroup: void invalidateViewProperty(boolean,boolean)>(0, 0);

     label4:
        virtualinvoke r0.<android.view.ViewGroup: void notifySubtreeAccessibilityStateChangedIfNeeded()>();

        return;
    }

    public final void offsetDescendantRectToMyCoords(android.view.View, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.graphics.Rect r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.view.ViewGroup: void offsetRectBetweenParentAndChild(android.view.View,android.graphics.Rect,boolean,boolean)>(r1, r2, 1, 0);

        return;
    }

    void offsetRectBetweenParentAndChild(android.view.View, android.graphics.Rect, boolean, boolean)
    {
        android.view.ViewGroup r0;
        android.graphics.Rect r1;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        android.view.View r3, r5, r7, r8;
        android.view.ViewParent r4, r6;

        r0 := @this: android.view.ViewGroup;

        r3 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        if r3 != r0 goto label01;

        return;

     label01:
        r4 = r3.<android.view.View: android.view.ViewParent mParent>;

        r5 = r3;

        r6 = r4;

     label02:
        if r6 == null goto label07;

        $z2 = r6 instanceof android.view.View;

        if $z2 == 0 goto label07;

        if r6 == r0 goto label07;

        if z0 == 0 goto label04;

        $i19 = r5.<android.view.View: int mLeft>;

        $i18 = r5.<android.view.View: int mScrollX>;

        $i23 = $i19 - $i18;

        $i21 = r5.<android.view.View: int mTop>;

        $i20 = r5.<android.view.View: int mScrollY>;

        $i22 = $i21 - $i20;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i23, $i22);

        if z1 == 0 goto label06;

        r7 = (android.view.View) r6;

        $i25 = r7.<android.view.View: int mRight>;

        $i24 = r7.<android.view.View: int mLeft>;

        $i29 = $i25 - $i24;

        $i27 = r7.<android.view.View: int mBottom>;

        $i26 = r7.<android.view.View: int mTop>;

        $i28 = $i27 - $i26;

        $z4 = virtualinvoke r1.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i29, $i28);

        if $z4 != 0 goto label03;

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

     label03:
        goto label06;

     label04:
        if z1 == 0 goto label05;

        r8 = (android.view.View) r6;

        $i13 = r8.<android.view.View: int mRight>;

        $i12 = r8.<android.view.View: int mLeft>;

        $i17 = $i13 - $i12;

        $i15 = r8.<android.view.View: int mBottom>;

        $i14 = r8.<android.view.View: int mTop>;

        $i16 = $i15 - $i14;

        $z3 = virtualinvoke r1.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i17, $i16);

        if $z3 != 0 goto label05;

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

     label05:
        $i30 = r5.<android.view.View: int mScrollX>;

        $i31 = r5.<android.view.View: int mLeft>;

        $i32 = $i30 - $i31;

        $i33 = r5.<android.view.View: int mScrollY>;

        $i34 = r5.<android.view.View: int mTop>;

        $i35 = $i33 - $i34;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i32, $i35);

     label06:
        r5 = (android.view.View) r6;

        r6 = r5.<android.view.View: android.view.ViewParent mParent>;

        goto label02;

     label07:
        if r6 != r0 goto label10;

        if z0 == 0 goto label08;

        $i7 = r5.<android.view.View: int mLeft>;

        $i6 = r5.<android.view.View: int mScrollX>;

        $i11 = $i7 - $i6;

        $i9 = r5.<android.view.View: int mTop>;

        $i8 = r5.<android.view.View: int mScrollY>;

        $i10 = $i9 - $i8;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i11, $i10);

        goto label09;

     label08:
        $i1 = r5.<android.view.View: int mScrollX>;

        $i0 = r5.<android.view.View: int mLeft>;

        $i5 = $i1 - $i0;

        $i3 = r5.<android.view.View: int mScrollY>;

        $i2 = r5.<android.view.View: int mTop>;

        $i4 = $i3 - $i2;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i5, $i4);

     label09:
        return;

     label10:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("parameter must be a descendant of this view");

        throw $r2;
    }

    public final void offsetRectIntoDescendantCoords(android.view.View, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.graphics.Rect r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.view.ViewGroup: void offsetRectBetweenParentAndChild(android.view.View,android.graphics.Rect,boolean,boolean)>(r1, r2, 0, 0);

        return;
    }

    protected void onAttachedToWindow()
    {
        android.view.ViewGroup r0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void onAttachedToWindow()>();

        specialinvoke r0.<android.view.ViewGroup: void clearCachedLayoutMode()>();

        return;
    }

    protected void onChildVisibilityChanged(android.view.View, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1;
        android.view.DragEvent $r2;
        java.util.HashSet $r3;
        boolean $z0, $z2;
        java.util.ArrayList $r4, $r5, $r6, r8;
        android.animation.LayoutTransition r7;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r7 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if r7 == null goto label3;

        if i1 != 0 goto label1;

        virtualinvoke r7.<android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View,int)>(r0, r1, i0);

        goto label3;

     label1:
        virtualinvoke r7.<android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View,int)>(r0, r1, i1);

        r8 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if r8 == null goto label3;

        $z2 = virtualinvoke r8.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        $r4 = r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren>;

        if $r4 != null goto label2;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren> = $r6;

     label2:
        $r5 = r0.<android.view.ViewGroup: java.util.ArrayList mVisibilityChangingChildren>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        specialinvoke r0.<android.view.ViewGroup: void addDisappearingView(android.view.View)>(r1);

     label3:
        if i1 != 0 goto label4;

        $r2 = r0.<android.view.ViewGroup: android.view.DragEvent mCurrentDragStartEvent>;

        if $r2 == null goto label4;

        $r3 = r0.<android.view.ViewGroup: java.util.HashSet mChildrenInterestedInDrag>;

        $z0 = virtualinvoke $r3.<java.util.HashSet: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label4;

        virtualinvoke r0.<android.view.ViewGroup: boolean notifyChildOfDragStart(android.view.View)>(r1);

     label4:
        return;
    }

    protected int[] onCreateDrawableState(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6, i7, i8, i9;
        int[] r1, $r4, r5, r6, r7;
        android.view.View $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        i5 := @parameter0: int;

        $i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i2 = $i1 & 8192;

        if $i2 != 0 goto label1;

        $r4 = specialinvoke r0.<android.view.View: int[] onCreateDrawableState(int)>(i5);

        return $r4;

     label1:
        i6 = 0;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i7 = 0;

     label2:
        if i7 >= i0 goto label4;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i7);

        r5 = virtualinvoke $r3.<android.view.View: int[] getDrawableState()>();

        i8 = i6;

        if r5 == null goto label3;

        $i4 = lengthof r5;

        i8 = i6 + $i4;

     label3:
        i7 = i7 + 1;

        i6 = i8;

        goto label2;

     label4:
        $i3 = i5 + i6;

        r6 = specialinvoke r0.<android.view.View: int[] onCreateDrawableState(int)>($i3);

        i9 = 0;

     label5:
        if i9 >= i0 goto label7;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i9);

        r1 = virtualinvoke $r2.<android.view.View: int[] getDrawableState()>();

        r7 = r6;

        if r1 == null goto label6;

        r7 = staticinvoke <android.view.ViewGroup: int[] mergeDrawableStates(int[],int[])>(r6, r1);

     label6:
        i9 = i9 + 1;

        r6 = r7;

        goto label5;

     label7:
        return r6;
    }

    protected void onDebugDraw(android.graphics.Canvas)
    {
        android.view.ViewGroup r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2;
        android.graphics.Insets r3;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, i23, i24, i25, i26, i27;
        android.graphics.Paint$Style $r4, $r5, $r6;
        android.view.View r7, r8;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = staticinvoke <android.view.ViewGroup: android.graphics.Paint getDebugPaint()>();

        virtualinvoke r2.<android.graphics.Paint: void setColor(int)>(-65536);

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        i22 = 0;

     label1:
        $i1 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i22 >= $i1 goto label3;

        r7 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i22);

        $i10 = virtualinvoke r7.<android.view.View: int getVisibility()>();

        if $i10 == 8 goto label2;

        r3 = virtualinvoke r7.<android.view.View: android.graphics.Insets getOpticalInsets()>();

        i23 = virtualinvoke r7.<android.view.View: int getLeft()>();

        i0 = r3.<android.graphics.Insets: int left>;

        i24 = virtualinvoke r7.<android.view.View: int getTop()>();

        $i12 = i0 + i23;

        $i11 = r3.<android.graphics.Insets: int top>;

        $i13 = $i11 + i24;

        $i14 = virtualinvoke r7.<android.view.View: int getRight()>();

        $i15 = r3.<android.graphics.Insets: int right>;

        $i16 = $i14 - $i15;

        $i17 = $i16 - 1;

        $i18 = virtualinvoke r7.<android.view.View: int getBottom()>();

        $i19 = r3.<android.graphics.Insets: int bottom>;

        $i20 = $i18 - $i19;

        $i21 = $i20 - 1;

        staticinvoke <android.view.ViewGroup: void drawRect(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r1, r2, $i12, $i13, $i17, $i21);

     label2:
        i22 = i22 + 1;

        goto label1;

     label3:
        $i2 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(63, 255, 0, 255);

        virtualinvoke r2.<android.graphics.Paint: void setColor(int)>($i2);

        $r5 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r5);

        virtualinvoke r0.<android.view.ViewGroup: void onDebugDrawMargins(android.graphics.Canvas,android.graphics.Paint)>(r1, r2);

        $i3 = <android.view.ViewGroup: int DEBUG_CORNERS_COLOR>;

        virtualinvoke r2.<android.graphics.Paint: void setColor(int)>($i3);

        $r6 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL>;

        virtualinvoke r2.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r6);

        i25 = virtualinvoke r0.<android.view.ViewGroup: int dipsToPixels(int)>(8);

        i26 = virtualinvoke r0.<android.view.ViewGroup: int dipsToPixels(int)>(1);

        i27 = 0;

     label4:
        $i4 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i27 >= $i4 goto label6;

        r8 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i27);

        $i5 = virtualinvoke r8.<android.view.View: int getVisibility()>();

        if $i5 == 8 goto label5;

        $i6 = virtualinvoke r8.<android.view.View: int getLeft()>();

        $i7 = virtualinvoke r8.<android.view.View: int getTop()>();

        $i8 = virtualinvoke r8.<android.view.View: int getRight()>();

        $i9 = virtualinvoke r8.<android.view.View: int getBottom()>();

        staticinvoke <android.view.ViewGroup: void drawRectCorners(android.graphics.Canvas,int,int,int,int,android.graphics.Paint,int,int)>(r1, $i6, $i7, $i8, $i9, r2, i25, i26);

     label5:
        i27 = i27 + 1;

        goto label4;

     label6:
        return;
    }

    protected void onDebugDrawMargins(android.graphics.Canvas, android.graphics.Paint)
    {
        android.view.ViewGroup r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2;
        android.view.View r3;
        int $i0, i1;
        android.view.ViewGroup$LayoutParams $r4;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Paint;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        if i1 >= $i0 goto label2;

        r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $r4 = virtualinvoke r3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        virtualinvoke $r4.<android.view.ViewGroup$LayoutParams: void onDebugDraw(android.view.View,android.graphics.Canvas,android.graphics.Paint)>(r3, r1, r2);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void onDescendantInvalidated(android.view.View, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r4, r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        r4 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        $i2 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 64;

        $i3 = $i2 | $i1;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i3;

        $i4 = r1.<android.view.View: int mPrivateFlags>;

        $i5 = $i4 & -2097153;

        if $i5 == 0 goto label1;

        $i9 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i10 = $i9 & -2097153;

        $i11 = $i10 | 2097152;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i11;

        $i12 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i13 = $i12 & -32769;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i13;

     label1:
        r5 = r1;

        $i6 = r0.<android.view.ViewGroup: int mLayerType>;

        if $i6 != 1 goto label2;

        $i7 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i8 = $i7 | -2145386496;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i8;

        r5 = r0;

     label2:
        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label3;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void onDescendantInvalidated(android.view.View,android.view.View)>(r0, r5);

     label3:
        return;
    }

    public final void onDescendantUnbufferedRequested()
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r5;
        android.view.ViewParent $r2, $r3;
        android.view.View[] $r4;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, $i7;

        r0 := @this: android.view.ViewGroup;

        i5 = 0;

        r1 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r1 == null goto label1;

        $i4 = r1.<android.view.View: int mUnbufferedInputSource>;

        i5 = $i4 & -3;

     label1:
        r0.<android.view.ViewGroup: int mUnbufferedInputSource> = i5;

        i6 = 0;

     label2:
        $i7 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i6 >= $i7 goto label4;

        $r4 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        $r5 = $r4[i6];

        $i0 = $r5.<android.view.View: int mUnbufferedInputSource>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label3;

        $i2 = r0.<android.view.ViewGroup: int mUnbufferedInputSource>;

        $i3 = $i2 | 2;

        r0.<android.view.ViewGroup: int mUnbufferedInputSource> = $i3;

        goto label4;

     label3:
        i6 = i6 + 1;

        goto label2;

     label4:
        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label5;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void onDescendantUnbufferedRequested()>();

     label5:
        return;
    }

    protected void onDetachedFromWindow()
    {
        android.view.ViewGroup r0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void onDetachedFromWindow()>();

        specialinvoke r0.<android.view.ViewGroup: void clearCachedLayoutMode()>();

        return;
    }

    public void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.ViewGroup r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        java.util.ArrayList r2;
        int i0, i1;
        android.view.accessibility.AccessibilityNodeProvider $r3;
        android.view.View$AttachInfo $r4, $r6;
        java.util.List $r5;
        java.lang.Object $r7;
        android.view.View $r8;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.view.View: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $r3 == null goto label1;

        return;

     label1:
        $r4 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r4 == null goto label4;

        $r6 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r6.<android.view.View$AttachInfo: java.util.ArrayList mTempArrayList>;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

        virtualinvoke r0.<android.view.ViewGroup: void addChildrenForAccessibility(java.util.ArrayList)>(r2);

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r7 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r8 = (android.view.View) $r7;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addChildUnchecked(android.view.View)>($r8);

        i1 = i1 + 1;

        goto label2;

     label3:
        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label4:
        $r5 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>("android.view.accessibility.extra.DATA_RENDERING_INFO_KEY");

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setAvailableExtraData(java.util.List)>($r5);

        return;
    }

    public boolean onInterceptHoverEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        int i0;
        float f0, f1;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isFromSource(int)>(8194);

        if $z0 == 0 goto label2;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        if i0 == 7 goto label1;

        if i0 != 9 goto label2;

     label1:
        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isOnScrollbar(float,float)>(f0, f1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        boolean $z0, $z1, $z2;
        int $i0;
        float $f0, $f1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r1.<android.view.MotionEvent: boolean isFromSource(int)>(8194);

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if $i0 != 0 goto label1;

        $z1 = virtualinvoke r1.<android.view.MotionEvent: boolean isButtonPressed(int)>(1);

        if $z1 == 0 goto label1;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isOnScrollbarThumb(float,float)>($f0, $f1);

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    protected abstract void onLayout(boolean, int, int, int, int);

    public boolean onNestedFling(android.view.View, float, float, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        float f0, f1;
        boolean z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean dispatchNestedFling(float,float,boolean)>(f0, f1, z0);

        return $z1;
    }

    public boolean onNestedPreFling(android.view.View, float, float)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        float f0, f1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean dispatchNestedPreFling(float,float)>(f0, f1);

        return $z0;
    }

    public boolean onNestedPrePerformAccessibilityAction(android.view.View, int, android.os.Bundle)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0;
        android.os.Bundle r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Bundle;

        return 0;
    }

    public void onNestedPreScroll(android.view.View, int, int, int[])
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1;
        int[] r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: int[];

        virtualinvoke r0.<android.view.ViewGroup: boolean dispatchNestedPreScroll(int,int,int[],int[])>(i0, i1, r2, null);

        return;
    }

    public void onNestedScroll(android.view.View, int, int, int, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int i0, i1, i2, i3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        virtualinvoke r0.<android.view.ViewGroup: boolean dispatchNestedScroll(int,int,int,int,int[])>(i0, i1, i2, i3, null);

        return;
    }

    public void onNestedScrollAccepted(android.view.View, android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        r0.<android.view.ViewGroup: int mNestedScrollAxes> = i0;

        return;
    }

    protected boolean onRequestFocusInDescendants(int, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, $i3, i4, i5;
        android.graphics.Rect r1;
        android.view.View[] r2;
        android.view.View r3;
        boolean $z0;
        byte b6;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Rect;

        i4 = r0.<android.view.ViewGroup: int mChildrenCount>;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        i5 = 0;

        b6 = 1;

        goto label2;

     label1:
        i5 = i4 - 1;

        b6 = -1;

        i4 = -1;

     label2:
        r2 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

     label3:
        if i5 == i4 goto label5;

        r3 = r2[i5];

        $i2 = r3.<android.view.View: int mViewFlags>;

        $i3 = $i2 & 12;

        if $i3 != 0 goto label4;

        $z0 = virtualinvoke r3.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, r1);

        if $z0 == 0 goto label4;

        return 1;

     label4:
        i5 = i5 + b6;

        goto label3;

     label5:
        return 0;
    }

    public boolean onRequestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.accessibility.AccessibilityEvent r2;
        android.view.View$AccessibilityDelegate $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        $r3 = r0.<android.view.ViewGroup: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewGroup: android.view.View$AccessibilityDelegate mAccessibilityDelegate>;

        $z1 = virtualinvoke $r4.<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r1, r2);

        return $z1;

     label1:
        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean onRequestSendAccessibilityEventInternal(android.view.View,android.view.accessibility.AccessibilityEvent)>(r1, r2);

        return $z0;
    }

    public boolean onRequestSendAccessibilityEventInternal(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.accessibility.AccessibilityEvent r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        return 1;
    }

    public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent, int)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        int i0, i1, $i2, i3, i4;
        float f0, f1;
        java.util.ArrayList r2;
        android.view.View[] r3;
        android.view.View r4, r7;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        android.content.Context $r5;
        android.view.PointerIcon $r6, r8, $r9;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        i0 := @parameter1: int;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(i0);

        f1 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(i0);

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isOnScrollbarThumb(float,float)>(f0, f1);

        if $z0 != 0 goto label15;

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isDraggingScrollBar()>();

        if $z1 == 0 goto label01;

        goto label15;

     label01:
        i1 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i1 == 0 goto label14;

        r2 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildOrderedChildList()>();

        if r2 != null goto label02;

        $z5 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z5 == 0 goto label02;

        z6 = 1;

        goto label03;

     label02:
        z6 = 0;

     label03:
        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i3 = i1 - 1;

     label04:
        if i3 < 0 goto label13;

        $i2 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i1, i3, z6);

        r4 = staticinvoke <android.view.ViewGroup: android.view.View getAndVerifyPreorderedView(java.util.ArrayList,android.view.View[],int)>(r2, r3, $i2);

        $z2 = virtualinvoke r1.<android.view.MotionEvent: boolean isTargetAccessibilityFocus()>();

        if $z2 == 0 goto label05;

        r7 = specialinvoke r0.<android.view.ViewGroup: android.view.View findChildWithAccessibilityFocus()>();

        goto label06;

     label05:
        r7 = null;

     label06:
        $z3 = virtualinvoke r4.<android.view.View: boolean canReceivePointerEvents()>();

        if $z3 == 0 goto label09;

        $z4 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>(f0, f1, r4, null);

        if $z4 != 0 goto label07;

        goto label09;

     label07:
        r8 = specialinvoke r0.<android.view.ViewGroup: android.view.PointerIcon dispatchResolvePointerIcon(android.view.MotionEvent,int,android.view.View)>(r1, i0, r4);

        if r8 == null goto label12;

        if r2 == null goto label08;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label08:
        return r8;

     label09:
        i4 = i3;

        if r7 == null goto label11;

        if r7 == r4 goto label10;

        goto label12;

     label10:
        i4 = i1 - 1;

     label11:
        virtualinvoke r1.<android.view.MotionEvent: void setTargetAccessibilityFocus(boolean)>(0);

        i3 = i4;

     label12:
        i3 = i3 + -1;

        goto label04;

     label13:
        if r2 == null goto label14;

        virtualinvoke r2.<java.util.ArrayList: void clear()>();

     label14:
        $r9 = specialinvoke r0.<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>(r1, i0);

        return $r9;

     label15:
        $r5 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        $r6 = staticinvoke <android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>($r5, 1000);

        return $r6;
    }

    protected void onSetLayoutParams(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        return;
    }

    public boolean onStartNestedScroll(android.view.View, android.view.View, int)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        return 0;
    }

    public void onStopNestedScroll(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewGroup: void stopNestedScroll()>();

        r0.<android.view.ViewGroup: int mNestedScrollAxes> = 0;

        return;
    }

    public void onViewAdded(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        return;
    }

    public void onViewRemoved(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        return;
    }

    protected boolean pointInHoveredChild(android.view.MotionEvent)
    {
        android.view.ViewGroup r0;
        android.view.MotionEvent r1;
        android.view.ViewGroup$HoverTarget $r2, $r3;
        float $f0, $f1;
        android.view.View $r4;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget>;

        if $r2 == null goto label1;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $r3 = r0.<android.view.ViewGroup: android.view.ViewGroup$HoverTarget mFirstHoverTarget>;

        $r4 = $r3.<android.view.ViewGroup$HoverTarget: android.view.View child>;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>($f0, $f1, $r4, null);

        return $z0;

     label1:
        return 0;
    }

    public void recomputeViewAttributes(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View$AttachInfo $r1, $r2;
        boolean $z0;
        android.view.View r3;
        android.view.ViewParent r4;

        r0 := @this: android.view.ViewGroup;

        r3 := @parameter0: android.view.View;

        $r1 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r1 == null goto label1;

        $r2 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r2.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z0 != 0 goto label1;

        r4 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if r4 == null goto label1;

        interfaceinvoke r4.<android.view.ViewParent: void recomputeViewAttributes(android.view.View)>(r0);

     label1:
        return;
    }

    public void removeAllViews()
    {
        android.view.ViewGroup r0;

        r0 := @this: android.view.ViewGroup;

        virtualinvoke r0.<android.view.ViewGroup: void removeAllViewsInLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;
    }

    public void removeAllViewsInLayout()
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        android.view.View r2, r5, r8, r9;
        android.view.View$AttachInfo $r3;
        boolean $z0, $z1, z2, z3, $z4;
        android.view.animation.Animation $r4;
        int i0, i1;
        android.animation.LayoutTransition r6;
        java.util.ArrayList r7;

        r0 := @this: android.view.ViewGroup;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i0 > 0 goto label01;

        return;

     label01:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r0.<android.view.ViewGroup: int mChildrenCount> = 0;

        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        $r3 = r0.<android.view.ViewGroup: android.view.View$AttachInfo mAttachInfo>;

        if $r3 == null goto label02;

        z2 = 1;

        goto label03;

     label02:
        z2 = 0;

     label03:
        z3 = 0;

        virtualinvoke r0.<android.view.ViewGroup: void needGlobalAttributesUpdate(boolean)>(0);

        i1 = i0 + -1;

     label04:
        if i1 < 0 goto label11;

        r5 = r1[i1];

        r6 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if r6 == null goto label05;

        virtualinvoke r6.<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>(r0, r5);

     label05:
        if r5 != r2 goto label06;

        virtualinvoke r5.<android.view.View: void unFocus(android.view.View)>(null);

        z3 = 1;

     label06:
        virtualinvoke r5.<android.view.View: void clearAccessibilityFocus()>();

        specialinvoke r0.<android.view.ViewGroup: void cancelTouchTarget(android.view.View)>(r5);

        specialinvoke r0.<android.view.ViewGroup: void cancelHoverTarget(android.view.View)>(r5);

        $r4 = virtualinvoke r5.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r4 != null goto label08;

        r7 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if r7 == null goto label07;

        $z1 = virtualinvoke r7.<java.util.ArrayList: boolean contains(java.lang.Object)>(r5);

        if $z1 == 0 goto label07;

        goto label08;

     label07:
        if z2 == 0 goto label09;

        virtualinvoke r5.<android.view.View: void dispatchDetachedFromWindow()>();

        goto label09;

     label08:
        specialinvoke r0.<android.view.ViewGroup: void addDisappearingView(android.view.View)>(r5);

     label09:
        $z4 = virtualinvoke r5.<android.view.View: boolean hasTransientState()>();

        if $z4 == 0 goto label10;

        virtualinvoke r0.<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>(r5, 0);

     label10:
        virtualinvoke r0.<android.view.ViewGroup: void dispatchViewRemoved(android.view.View)>(r5);

        r5.<android.view.View: android.view.ViewParent mParent> = null;

        r1[i1] = null;

        i1 = i1 + -1;

        goto label04;

     label11:
        r8 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        if r8 == null goto label12;

        virtualinvoke r0.<android.view.ViewGroup: void clearDefaultFocus(android.view.View)>(r8);

     label12:
        r9 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        if r9 == null goto label13;

        virtualinvoke r0.<android.view.ViewGroup: void clearFocusedInCluster(android.view.View)>(r9);

     label13:
        if z3 == 0 goto label14;

        virtualinvoke r0.<android.view.ViewGroup: void clearChildFocus(android.view.View)>(r2);

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean rootViewRequestFocus()>();

        if $z0 != 0 goto label14;

        virtualinvoke r0.<android.view.ViewGroup: void notifyGlobalFocusCleared(android.view.View)>(r2);

     label14:
        return;
    }

    protected void removeDetachedView(android.view.View, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1, $r2, $r3, $r4;
        boolean z0, $z1, $z2;
        android.view.View$AttachInfo $r5;
        android.view.animation.Animation $r6;
        android.animation.LayoutTransition r7;
        java.util.ArrayList r8;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        r7 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if r7 == null goto label1;

        virtualinvoke r7.<android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)>(r0, r1);

     label1:
        $r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r1 != $r2 goto label2;

        virtualinvoke r1.<android.view.View: void clearFocus()>();

     label2:
        $r3 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        if r1 != $r3 goto label3;

        virtualinvoke r0.<android.view.ViewGroup: void clearDefaultFocus(android.view.View)>(r1);

     label3:
        $r4 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        if r1 != $r4 goto label4;

        virtualinvoke r0.<android.view.ViewGroup: void clearFocusedInCluster(android.view.View)>(r1);

     label4:
        virtualinvoke r1.<android.view.View: void clearAccessibilityFocus()>();

        specialinvoke r0.<android.view.ViewGroup: void cancelTouchTarget(android.view.View)>(r1);

        specialinvoke r0.<android.view.ViewGroup: void cancelHoverTarget(android.view.View)>(r1);

        if z0 == 0 goto label5;

        $r6 = virtualinvoke r1.<android.view.View: android.view.animation.Animation getAnimation()>();

        if $r6 != null goto label6;

     label5:
        r8 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if r8 == null goto label7;

        $z1 = virtualinvoke r8.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 == 0 goto label7;

     label6:
        specialinvoke r0.<android.view.ViewGroup: void addDisappearingView(android.view.View)>(r1);

        goto label8;

     label7:
        $r5 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r5 == null goto label8;

        virtualinvoke r1.<android.view.View: void dispatchDetachedFromWindow()>();

     label8:
        $z2 = virtualinvoke r1.<android.view.View: boolean hasTransientState()>();

        if $z2 == 0 goto label9;

        virtualinvoke r0.<android.view.ViewGroup: void childHasTransientStateChanged(android.view.View,boolean)>(r1, 0);

     label9:
        virtualinvoke r0.<android.view.ViewGroup: void dispatchViewRemoved(android.view.View)>(r1);

        return;
    }

    public void removeTransientView(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        java.util.List r2, $r3, $r5, $r7;
        int i0, i1;
        java.lang.Object $r4;
        android.view.View$AttachInfo $r9;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        if r2 != null goto label1;

        return;

     label1:
        i0 = interfaceinvoke r2.<java.util.List: int size()>();

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        $r3 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        if r1 != $r4 goto label4;

        $r5 = r0.<android.view.ViewGroup: java.util.List mTransientViews>;

        interfaceinvoke $r5.<java.util.List: java.lang.Object remove(int)>(i1);

        $r7 = r0.<android.view.ViewGroup: java.util.List mTransientIndices>;

        interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(i1);

        r1.<android.view.View: android.view.ViewParent mParent> = null;

        $r9 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r9 == null goto label3;

        virtualinvoke r1.<android.view.View: void dispatchDetachedFromWindow()>();

     label3:
        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        return;
    }

    public void removeView(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean removeViewInternal(android.view.View)>(r1);

        if $z0 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

     label1:
        return;
    }

    public void removeViewAt(int)
    {
        android.view.ViewGroup r0;
        int i0;
        android.view.View $r1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i0);

        specialinvoke r0.<android.view.ViewGroup: void removeViewInternal(int,android.view.View)>(i0, $r1);

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;
    }

    public void removeViewInLayout(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: boolean removeViewInternal(android.view.View)>(r1);

        return;
    }

    public void removeViews(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.ViewGroup: void removeViewsInternal(int,int)>(i0, i1);

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

        return;
    }

    public void removeViewsInLayout(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.view.ViewGroup: void removeViewsInternal(int,int)>(i0, i1);

        return;
    }

    public void requestChildFocus(android.view.View, android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2, r3;
        int $i0;
        android.view.ViewParent $r4, $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 != 393216 goto label1;

        return;

     label1:
        specialinvoke r0.<android.view.View: void unFocus(android.view.View)>(r2);

        r3 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r3 == r1 goto label3;

        if r3 == null goto label2;

        virtualinvoke r3.<android.view.View: void unFocus(android.view.View)>(r2);

     label2:
        r0.<android.view.ViewGroup: android.view.View mFocused> = r1;

     label3:
        $r5 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r5 == null goto label4;

        $r4 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r4.<android.view.ViewParent: void requestChildFocus(android.view.View,android.view.View)>(r0, r2);

     label4:
        return;
    }

    public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.graphics.Rect r2;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        return 0;
    }

    public void requestDisallowInterceptTouchEvent(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 524288;

        if $i1 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        if z0 != z1 goto label3;

        return;

     label3:
        if z0 == 0 goto label4;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = $i4 | 524288;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

        goto label5;

     label4:
        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 & -524289;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

     label5:
        $r1 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r1 == null goto label6;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>(z0);

     label6:
        return;
    }

    public boolean requestFocus(int, android.graphics.Rect)
    {
        android.view.ViewGroup r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean $z0, z1;
        java.lang.StringBuilder $r1;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5;
        android.graphics.Rect r6;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        r6 := @parameter1: android.graphics.Rect;

        i1 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if i1 == 131072 goto label5;

        if i1 == 262144 goto label2;

        if i1 != 393216 goto label1;

        z1 = specialinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, r6);

        goto label7;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("descendant focusability must be one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS but is ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        z1 = virtualinvoke r0.<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>(i0, r6);

        if z1 == 0 goto label3;

        goto label4;

     label3:
        z1 = specialinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, r6);

     label4:
        goto label7;

     label5:
        z1 = specialinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(i0, r6);

        if z1 == 0 goto label6;

        goto label7;

     label6:
        z1 = virtualinvoke r0.<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>(i0, r6);

     label7:
        if z1 == 0 goto label8;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isLayoutValid()>();

        if $z0 != 0 goto label8;

        $i2 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i3 = $i2 & 1;

        if $i3 != 0 goto label8;

        $i4 = r0.<android.view.ViewGroup: int mPrivateFlags>;

        $i5 = $i4 | 1;

        r0.<android.view.ViewGroup: int mPrivateFlags> = $i5;

     label8:
        return z1;
    }

    public boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.accessibility.AccessibilityEvent r2;
        android.view.ViewParent r3;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityEvent;

        r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if r3 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r1, r2);

        if $z0 != 0 goto label2;

        return 0;

     label2:
        $z1 = interfaceinvoke r3.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r0, r2);

        return $z1;
    }

    public void requestTransitionStart(android.animation.LayoutTransition)
    {
        android.view.ViewGroup r0;
        android.animation.LayoutTransition r1;
        android.view.ViewRootImpl r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.animation.LayoutTransition;

        r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewRootImpl getViewRootImpl()>();

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.ViewRootImpl: void requestTransitionStart(android.animation.LayoutTransition)>(r1);

     label1:
        return;
    }

    public void requestTransparentRegion(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        int $i0, $i1;
        android.view.ViewParent $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        if r1 == null goto label1;

        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 | 512;

        r1.<android.view.View: int mPrivateFlags> = $i1;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        interfaceinvoke $r3.<android.view.ViewParent: void requestTransparentRegion(android.view.View)>(r0);

     label1:
        return;
    }

    protected void resetResolvedDrawables()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetResolvedDrawables()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resetResolvedDrawables()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void resetResolvedLayoutDirection()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetResolvedLayoutDirection()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resetResolvedLayoutDirection()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void resetResolvedPadding()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetResolvedPadding()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resetResolvedPadding()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void resetResolvedTextAlignment()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetResolvedTextAlignment()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isTextAlignmentInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resetResolvedTextAlignment()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public void resetResolvedTextDirection()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetResolvedTextDirection()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isTextDirectionInherited()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<android.view.View: void resetResolvedTextDirection()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    void resetSubtreeAccessibilityStateChanged()
    {
        android.view.ViewGroup r0;
        android.view.View[] r1;
        int i0, i1;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resetSubtreeAccessibilityStateChanged()>();

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r2 = r1[i1];

        virtualinvoke $r2.<android.view.View: void resetSubtreeAccessibilityStateChanged()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    protected void resolveDrawables()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resolveDrawables()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<android.view.View: boolean areDrawablesResolved()>();

        if $z1 != 0 goto label2;

        virtualinvoke r1.<android.view.View: void resolveDrawables()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public boolean resolveLayoutDirection()
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;
        int i0, i1;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        z0 = specialinvoke r0.<android.view.View: boolean resolveLayoutDirection()>();

        if z0 == 0 goto label3;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.view.View: boolean resolveLayoutDirection()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z0;
    }

    public void resolveLayoutParams()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View $r1;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resolveLayoutParams()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        virtualinvoke $r1.<android.view.View: void resolveLayoutParams()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void resolvePadding()
    {
        android.view.ViewGroup r0;
        int i0, i1;
        android.view.View r1;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        specialinvoke r0.<android.view.View: void resolvePadding()>();

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r1.<android.view.View: boolean isPaddingResolved()>();

        if $z1 != 0 goto label2;

        virtualinvoke r1.<android.view.View: void resolvePadding()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return;
    }

    public boolean resolveRtlPropertiesIfNeeded()
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;
        int i0, i1;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        z0 = specialinvoke r0.<android.view.View: boolean resolveRtlPropertiesIfNeeded()>();

        if z0 == 0 goto label3;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = virtualinvoke r1.<android.view.View: boolean isLayoutDirectionInherited()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.view.View: boolean resolveRtlPropertiesIfNeeded()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z0;
    }

    public boolean resolveTextAlignment()
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;
        int i0, i1;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        z0 = specialinvoke r0.<android.view.View: boolean resolveTextAlignment()>();

        if z0 == 0 goto label3;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = virtualinvoke r1.<android.view.View: boolean isTextAlignmentInherited()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.view.View: boolean resolveTextAlignment()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z0;
    }

    public boolean resolveTextDirection()
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;
        int i0, i1;
        android.view.View r1;

        r0 := @this: android.view.ViewGroup;

        z0 = specialinvoke r0.<android.view.View: boolean resolveTextDirection()>();

        if z0 == 0 goto label3;

        i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z1 = virtualinvoke r1.<android.view.View: boolean isTextDirectionInherited()>();

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.view.View: boolean resolveTextDirection()>();

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return z0;
    }

    public boolean restoreDefaultFocus()
    {
        android.view.ViewGroup r0;
        android.view.View $r1, $r2, $r3;
        int $i0, $i1, $i2;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        if $r1 == null goto label1;

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 == 393216 goto label1;

        $r2 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        $i1 = $r2.<android.view.View: int mViewFlags>;

        $i2 = $i1 & 12;

        if $i2 != 0 goto label1;

        $r3 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        $z0 = virtualinvoke $r3.<android.view.View: boolean restoreDefaultFocus()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<android.view.View: boolean restoreDefaultFocus()>();

        return $z1;
    }

    public boolean restoreFocusInCluster(int)
    {
        android.view.ViewGroup r0;
        int i0;
        boolean z0, z1, $z2, $z3;
        java.lang.Throwable $r2;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isKeyboardNavigationCluster()>();

        if $z2 == 0 goto label4;

        z0 = virtualinvoke r0.<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>();

     label1:
        specialinvoke r0.<android.view.ViewGroup: void setTouchscreenBlocksFocusNoRefocus(boolean)>(0);

        z1 = specialinvoke r0.<android.view.ViewGroup: boolean restoreFocusInClusterInternal(int)>(i0);

     label2:
        specialinvoke r0.<android.view.ViewGroup: void setTouchscreenBlocksFocusNoRefocus(boolean)>(z0);

        return z1;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<android.view.ViewGroup: void setTouchscreenBlocksFocusNoRefocus(boolean)>(z0);

        throw $r2;

     label4:
        $z3 = specialinvoke r0.<android.view.ViewGroup: boolean restoreFocusInClusterInternal(int)>(i0);

        return $z3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean restoreFocusNotInCluster()
    {
        android.view.ViewGroup r0;
        int i0, $i1, $i2, i3, $i4;
        android.view.View r1, $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        android.view.View[] $r3;

        r0 := @this: android.view.ViewGroup;

        $r2 = r0.<android.view.ViewGroup: android.view.View mFocusedInCluster>;

        if $r2 == null goto label1;

        $z7 = virtualinvoke r0.<android.view.ViewGroup: boolean restoreFocusInCluster(int)>(130);

        return $z7;

     label1:
        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean isKeyboardNavigationCluster()>();

        if $z0 != 0 goto label9;

        $i1 = r0.<android.view.ViewGroup: int mViewFlags>;

        $i2 = $i1 & 12;

        if $i2 == 0 goto label2;

        goto label9;

     label2:
        i0 = virtualinvoke r0.<android.view.ViewGroup: int getDescendantFocusability()>();

        if i0 != 393216 goto label3;

        $z6 = specialinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(130, null);

        return $z6;

     label3:
        if i0 != 131072 goto label4;

        $z5 = specialinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(130, null);

        if $z5 == 0 goto label4;

        return 1;

     label4:
        i3 = 0;

     label5:
        $i4 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i3 >= $i4 goto label7;

        $r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        r1 = $r3[i3];

        $z3 = virtualinvoke r1.<android.view.View: boolean isKeyboardNavigationCluster()>();

        if $z3 != 0 goto label6;

        $z4 = virtualinvoke r1.<android.view.View: boolean restoreFocusNotInCluster()>();

        if $z4 == 0 goto label6;

        return 1;

     label6:
        i3 = i3 + 1;

        goto label5;

     label7:
        if i0 != 262144 goto label8;

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean hasFocusableChild(boolean)>(0);

        if $z1 != 0 goto label8;

        $z2 = specialinvoke r0.<android.view.View: boolean requestFocus(int,android.graphics.Rect)>(130, null);

        return $z2;

     label8:
        return 0;

     label9:
        return 0;
    }

    public void scheduleLayoutAnimation()
    {
        android.view.ViewGroup r0;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 | 8;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        return;
    }

    public void setAddStatesFromChildren(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 | 8192;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & -8193;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

     label2:
        virtualinvoke r0.<android.view.ViewGroup: void refreshDrawableState()>();

        return;
    }

    public void setAlwaysDrawnWithCacheEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(16384, z0);

        return;
    }

    public void setAnimationCacheEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(64, z0);

        return;
    }

    protected void setChildrenDrawingCacheEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        android.view.View[] r1;
        int i0, $i1, $i2, i3;
        android.view.View $r2;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $i1 = r0.<android.view.ViewGroup: int mPersistentDrawingCache>;

        $i2 = $i1 & 3;

        if $i2 == 3 goto label3;

     label1:
        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        i3 = 0;

     label2:
        if i3 >= i0 goto label3;

        $r2 = r1[i3];

        virtualinvoke $r2.<android.view.View: void setDrawingCacheEnabled(boolean)>(z0);

        i3 = i3 + 1;

        goto label2;

     label3:
        return;
    }

    protected void setChildrenDrawingOrderEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(1024, z0);

        return;
    }

    protected void setChildrenDrawnWithCacheEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(32768, z0);

        return;
    }

    public void setClipChildren(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, z2;
        android.view.View r1;
        int $i0, $i1, $i2, i3;
        android.graphics.RenderNode $r2, $r3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & 1;

        if $i1 != 1 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z0 == z2 goto label6;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(1, z0);

        i3 = 0;

     label3:
        $i2 = r0.<android.view.ViewGroup: int mChildrenCount>;

        if i3 >= $i2 goto label5;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i3);

        $r2 = r1.<android.view.View: android.graphics.RenderNode mRenderNode>;

        if $r2 == null goto label4;

        $r3 = r1.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r3.<android.graphics.RenderNode: boolean setClipToBounds(boolean)>(z0);

     label4:
        i3 = i3 + 1;

        goto label3;

     label5:
        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

     label6:
        return;
    }

    public void setClipToPadding(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        $z1 = specialinvoke r0.<android.view.ViewGroup: boolean hasBooleanFlag(int)>(2);

        if $z1 == z0 goto label1;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(2, z0);

        virtualinvoke r0.<android.view.ViewGroup: void invalidate(boolean)>(1);

     label1:
        return;
    }

    void setDefaultFocus(android.view.View)
    {
        android.view.ViewGroup r0, $r5;
        android.view.View r1, r2;
        android.view.ViewParent $r3, $r4;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 = r0.<android.view.ViewGroup: android.view.View mDefaultFocus>;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<android.view.View: boolean isFocusedByDefault()>();

        if $z1 == 0 goto label1;

        return;

     label1:
        r0.<android.view.ViewGroup: android.view.View mDefaultFocus> = r1;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z0 = $r3 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        $r4 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r5 = (android.view.ViewGroup) $r4;

        virtualinvoke $r5.<android.view.ViewGroup: void setDefaultFocus(android.view.View)>(r0);

     label2:
        return;
    }

    public void setDescendantFocusability(int)
    {
        android.view.ViewGroup r0;
        int i0, i1, $i2, $i3, $i4;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        if i0 == 131072 goto label2;

        if i0 == 262144 goto label2;

        if i0 != 393216 goto label1;

        goto label2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("must be one of FOCUS_BEFORE_DESCENDANTS, FOCUS_AFTER_DESCENDANTS, FOCUS_BLOCK_DESCENDANTS");

        throw $r1;

     label2:
        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        i1 = $i2 & -393217;

        r0.<android.view.ViewGroup: int mGroupFlags> = i1;

        $i3 = 393216 & i0;

        $i4 = i1 | $i3;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i4;

        return;
    }

    public void setLayoutAnimation(android.view.animation.LayoutAnimationController)
    {
        android.view.ViewGroup r0;
        android.view.animation.LayoutAnimationController r1;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.animation.LayoutAnimationController;

        r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController> = r1;

        if r1 == null goto label1;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 | 8;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

     label1:
        return;
    }

    public void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)
    {
        android.view.ViewGroup r0;
        android.view.animation.Animation$AnimationListener r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.animation.Animation$AnimationListener;

        r0.<android.view.ViewGroup: android.view.animation.Animation$AnimationListener mAnimationListener> = r1;

        return;
    }

    public void setLayoutMode(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i1 = r0.<android.view.ViewGroup: int mLayoutMode>;

        if $i1 == i0 goto label3;

        virtualinvoke r0.<android.view.ViewGroup: void invalidateInheritedLayoutMode(int)>(i0);

        if i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        specialinvoke r0.<android.view.ViewGroup: void setLayoutMode(int,boolean)>(i0, z0);

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

     label3:
        return;
    }

    public void setLayoutTransition(android.animation.LayoutTransition)
    {
        android.view.ViewGroup r0;
        android.animation.LayoutTransition r1, r2, $r3;
        android.animation.LayoutTransition$TransitionListener $r4, $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.animation.LayoutTransition;

        $r3 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        if $r3 == null goto label1;

        r2 = r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition>;

        virtualinvoke r2.<android.animation.LayoutTransition: void cancel()>();

        $r5 = r0.<android.view.ViewGroup: android.animation.LayoutTransition$TransitionListener mLayoutTransitionListener>;

        virtualinvoke r2.<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>($r5);

     label1:
        r0.<android.view.ViewGroup: android.animation.LayoutTransition mTransition> = r1;

        if r1 == null goto label2;

        $r4 = r0.<android.view.ViewGroup: android.animation.LayoutTransition$TransitionListener mLayoutTransitionListener>;

        virtualinvoke r1.<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>($r4);

     label2:
        return;
    }

    public void setMotionEventSplittingEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 | 2097152;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        goto label2;

     label1:
        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & -2097153;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

     label2:
        return;
    }

    public void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$OnHierarchyChangeListener r1;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.ViewGroup$OnHierarchyChangeListener;

        r0.<android.view.ViewGroup: android.view.ViewGroup$OnHierarchyChangeListener mOnHierarchyChangeListener> = r1;

        return;
    }

    public void setPersistentDrawingCache(int)
    {
        android.view.ViewGroup r0;
        int i0, $i1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        $i1 = i0 & 3;

        r0.<android.view.ViewGroup: int mPersistentDrawingCache> = $i1;

        return;
    }

    protected void setStaticTransformationsEnabled(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.view.ViewGroup: void setBooleanFlag(int,boolean)>(2048, z0);

        return;
    }

    public void setTouchscreenBlocksFocus(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, $z1, $z2, $z3;
        android.view.View r1, $r2;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label2;

        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = $i2 | 67108864;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean hasFocus()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isKeyboardNavigationCluster()>();

        if $z2 != 0 goto label3;

        $r2 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getDeepestFocusedChild()>();

        $z3 = virtualinvoke $r2.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z3 != 0 goto label1;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View focusSearch(int)>(2);

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.View: boolean requestFocus()>();

     label1:
        goto label3;

     label2:
        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 & -67108865;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

     label3:
        return;
    }

    public void setTransitionGroup(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0;
        int i0, $i1, $i2, $i3;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        $i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        i0 = $i1 | 33554432;

        r0.<android.view.ViewGroup: int mGroupFlags> = i0;

        if z0 == 0 goto label1;

        $i3 = i0 | 16777216;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        goto label2;

     label1:
        $i2 = i0 & -16777217;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i2;

     label2:
        return;
    }

    public void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)
    {
        android.view.ViewGroup r0;
        android.view.WindowInsetsAnimation$Callback r1;
        int i0;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.WindowInsetsAnimation$Callback;

        specialinvoke r0.<android.view.View: void setWindowInsetsAnimationCallback(android.view.WindowInsetsAnimation$Callback)>(r1);

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<android.view.WindowInsetsAnimation$Callback: int getDispatchMode()>();

        goto label2;

     label1:
        i0 = 1;

     label2:
        r0.<android.view.ViewGroup: int mInsetsAnimationDispatchMode> = i0;

        return;
    }

    boolean shouldBlockFocusForTouchscreen()
    {
        android.view.ViewGroup r0;
        boolean $z0, $z1, $z2, $z3, z4;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        android.view.View $r3;

        r0 := @this: android.view.ViewGroup;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean getTouchscreenBlocksFocus()>();

        if $z0 == 0 goto label2;

        $r1 = r0.<android.view.ViewGroup: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.touchscreen");

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isKeyboardNavigationCluster()>();

        if $z2 == 0 goto label1;

        $z3 = virtualinvoke r0.<android.view.ViewGroup: boolean hasFocus()>();

        if $z3 != 0 goto label2;

        $r3 = virtualinvoke r0.<android.view.ViewGroup: android.view.View findKeyboardNavigationCluster()>();

        if $r3 != r0 goto label2;

     label1:
        z4 = 1;

        goto label3;

     label2:
        z4 = 0;

     label3:
        return z4;
    }

    public boolean shouldDelayChildPressedState()
    {
        android.view.ViewGroup r0;

        r0 := @this: android.view.ViewGroup;

        return 1;
    }

    public boolean showContextMenuForChild(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewParent $r2, $r3;
        boolean $z1, z2, z3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        z2 = virtualinvoke r0.<android.view.ViewGroup: boolean isShowingContextMenuWithCoords()>();

        if z2 == 0 goto label1;

        return 0;

     label1:
        z3 = 0;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r2 == null goto label2;

        z3 = 0;

        $r3 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z1 = interfaceinvoke $r3.<android.view.ViewParent: boolean showContextMenuForChild(android.view.View)>(r1);

        if $z1 == 0 goto label2;

        z3 = 1;

     label2:
        return z3;
    }

    public boolean showContextMenuForChild(android.view.View, float, float)
    {
        android.view.ViewGroup r0;
        float f0, f1;
        boolean z0, $z1, z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.ViewParent $r1, $r2;
        java.lang.Throwable $r3;
        android.view.View r4;

        r0 := @this: android.view.ViewGroup;

        r4 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

     label1:
        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 | 536870912;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        z0 = virtualinvoke r0.<android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)>(r4);

     label2:
        z2 = 1;

        if z0 == 0 goto label3;

        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = -536870913 & $i4;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

        return 1;

     label3:
        $i2 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i3 = -536870913 & $i2;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        $r1 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r1 == null goto label4;

        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $z1 = interfaceinvoke $r2.<android.view.ViewParent: boolean showContextMenuForChild(android.view.View,float,float)>(r4, f0, f1);

        if $z1 == 0 goto label4;

        goto label5;

     label4:
        z2 = 0;

     label5:
        return z2;

     label6:
        $r3 := @caughtexception;

        $i6 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i7 = -536870913 & $i6;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i7;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
    }

    public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback)
    {
        android.view.ViewGroup r0;
        android.view.ActionMode$Callback r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.ActionMode $r2, r5;
        java.lang.Throwable $r3;
        android.view.View r4;

        r0 := @this: android.view.ViewGroup;

        r4 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ActionMode$Callback;

        i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = 134217728 & i0;

        if $i1 != 0 goto label4;

     label1:
        $i2 = i0 | 268435456;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i2;

        r5 = virtualinvoke r0.<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>(r4, r1, 0);

     label2:
        $i3 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i4 = -268435457 & $i3;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i4;

        return r5;

     label3:
        $r3 := @caughtexception;

        $i5 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i6 = -268435457 & $i5;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i6;

        throw $r3;

     label4:
        $r2 = <android.view.ViewGroup: android.view.ActionMode SENTINEL_ACTION_MODE>;

        return $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback, int)
    {
        android.view.ViewGroup r0;
        android.view.ActionMode$Callback r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.ViewParent $r2, $r5, $r11;
        android.view.ActionMode $r3, $r6, r9, r12;
        java.lang.AbstractMethodError $r4;
        java.lang.Throwable $r7;
        android.view.View r8;

        r0 := @this: android.view.ViewGroup;

        r8 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ActionMode$Callback;

        i0 := @parameter2: int;

        i1 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i2 = 268435456 & i1;

        if $i2 != 0 goto label4;

        if i0 != 0 goto label4;

     label1:
        $i3 = i1 | 134217728;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i3;

        r9 = virtualinvoke r0.<android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>(r8, r1);

     label2:
        $i4 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i5 = -134217729 & $i4;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i5;

        $r3 = <android.view.ViewGroup: android.view.ActionMode SENTINEL_ACTION_MODE>;

        if r9 == $r3 goto label4;

        return r9;

     label3:
        $r7 := @caughtexception;

        $i6 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i7 = -134217729 & $i6;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i7;

        throw $r7;

     label4:
        $r11 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        if $r11 == null goto label8;

     label5:
        $r2 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        r12 = interfaceinvoke $r2.<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>(r8, r1, i0);

     label6:
        return r12;

     label7:
        $r4 := @caughtexception;

        $r5 = r0.<android.view.ViewGroup: android.view.ViewParent mParent>;

        $r6 = interfaceinvoke $r5.<android.view.ViewParent: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>(r8, r1);

        return $r6;

     label8:
        return null;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.AbstractMethodError from label5 to label6 with label7;
    }

    public void startLayoutAnimation()
    {
        android.view.ViewGroup r0;
        android.view.animation.LayoutAnimationController $r1;
        int $i0, $i1;

        r0 := @this: android.view.ViewGroup;

        $r1 = r0.<android.view.ViewGroup: android.view.animation.LayoutAnimationController mLayoutAnimationController>;

        if $r1 == null goto label1;

        $i0 = r0.<android.view.ViewGroup: int mGroupFlags>;

        $i1 = $i0 | 8;

        r0.<android.view.ViewGroup: int mGroupFlags> = $i1;

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

     label1:
        return;
    }

    public void startViewTransition(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1;
        android.view.ViewParent $r2;
        java.util.ArrayList $r3, $r4, $r5;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        $r2 = r1.<android.view.View: android.view.ViewParent mParent>;

        if $r2 != r0 goto label2;

        $r3 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        if $r3 != null goto label1;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews> = $r5;

     label1:
        $r4 = r0.<android.view.ViewGroup: java.util.ArrayList mTransitioningViews>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label2:
        return;
    }

    public void subtractObscuredTouchableRegion(android.graphics.Region, android.view.View)
    {
        android.view.ViewGroup r0;
        android.graphics.Region r1;
        int i0, $i1, i2;
        java.util.ArrayList r2;
        android.view.View[] r3;
        android.view.View r4, r7;
        android.graphics.Region$Op $r5, $r6;
        boolean $z0, $z1, z2;
        android.view.ViewParent r8;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.graphics.Region;

        r7 := @parameter1: android.view.View;

        i0 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r2 = virtualinvoke r0.<android.view.ViewGroup: java.util.ArrayList buildTouchDispatchChildList()>();

        if r2 != null goto label1;

        $z1 = virtualinvoke r0.<android.view.ViewGroup: boolean isChildrenDrawingOrderEnabled()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        r3 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i2 = i0 - 1;

     label3:
        if i2 < 0 goto label7;

        $i1 = specialinvoke r0.<android.view.ViewGroup: int getAndVerifyPreorderedIndex(int,int,boolean)>(i0, i2, z2);

        r4 = staticinvoke <android.view.ViewGroup: android.view.View getAndVerifyPreorderedView(java.util.ArrayList,android.view.View[],int)>(r2, r3, $i1);

        if r4 != r7 goto label4;

        goto label7;

     label4:
        $z0 = virtualinvoke r4.<android.view.View: boolean canReceivePointerEvents()>();

        if $z0 != 0 goto label5;

        goto label6;

     label5:
        $r6 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        staticinvoke <android.view.ViewGroup: void applyOpToRegionByBounds(android.graphics.Region,android.view.View,android.graphics.Region$Op)>(r1, r4, $r6);

     label6:
        i2 = i2 + -1;

        goto label3;

     label7:
        $r5 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        staticinvoke <android.view.ViewGroup: void applyOpToRegionByBounds(android.graphics.Region,android.view.View,android.graphics.Region$Op)>(r1, r0, $r5);

        r8 = virtualinvoke r0.<android.view.ViewGroup: android.view.ViewParent getParent()>();

        if r8 == null goto label8;

        interfaceinvoke r8.<android.view.ViewParent: void subtractObscuredTouchableRegion(android.graphics.Region,android.view.View)>(r1, r0);

     label8:
        return;
    }

    public void suppressLayout(boolean)
    {
        android.view.ViewGroup r0;
        boolean z0, $z1;

        r0 := @this: android.view.ViewGroup;

        z0 := @parameter0: boolean;

        r0.<android.view.ViewGroup: boolean mSuppressLayout> = z0;

        if z0 != 0 goto label1;

        $z1 = r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed>;

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        r0.<android.view.ViewGroup: boolean mLayoutCalledWhileSuppressed> = 0;

     label1:
        return;
    }

    public void transformPointToViewLocal(float[], android.view.View)
    {
        android.view.ViewGroup r0;
        float[] r1;
        android.view.View r2;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        boolean $z0;
        android.graphics.Matrix $r3;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: float[];

        r2 := @parameter1: android.view.View;

        $f1 = r1[0];

        $i1 = r0.<android.view.ViewGroup: int mScrollX>;

        $i0 = r2.<android.view.View: int mLeft>;

        $i2 = $i1 - $i0;

        $f0 = (float) $i2;

        $f2 = $f1 + $f0;

        r1[0] = $f2;

        $f4 = r1[1];

        $i4 = r0.<android.view.ViewGroup: int mScrollY>;

        $i3 = r2.<android.view.View: int mTop>;

        $i5 = $i4 - $i3;

        $f3 = (float) $i5;

        $f5 = $f4 + $f3;

        r1[1] = $f5;

        $z0 = virtualinvoke r2.<android.view.View: boolean hasIdentityMatrix()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r2.<android.view.View: android.graphics.Matrix getInverseMatrix()>();

        virtualinvoke $r3.<android.graphics.Matrix: void mapPoints(float[])>(r1);

     label1:
        return;
    }

    void unFocus(android.view.View)
    {
        android.view.ViewGroup r0;
        android.view.View r1, r2;

        r0 := @this: android.view.ViewGroup;

        r1 := @parameter0: android.view.View;

        r2 = r0.<android.view.ViewGroup: android.view.View mFocused>;

        if r2 != null goto label1;

        specialinvoke r0.<android.view.View: void unFocus(android.view.View)>(r1);

        goto label2;

     label1:
        virtualinvoke r2.<android.view.View: void unFocus(android.view.View)>(r1);

        r0.<android.view.ViewGroup: android.view.View mFocused> = null;

     label2:
        return;
    }

    boolean updateLocalSystemUiVisibility(int, int)
    {
        android.view.ViewGroup r0;
        int i0, i1, i2, i3;
        android.view.View[] r1;
        android.view.View $r2;
        boolean $z0, z1;

        r0 := @this: android.view.ViewGroup;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z1 = specialinvoke r0.<android.view.View: boolean updateLocalSystemUiVisibility(int,int)>(i0, i1);

        i2 = r0.<android.view.ViewGroup: int mChildrenCount>;

        r1 = r0.<android.view.ViewGroup: android.view.View[] mChildren>;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        $r2 = r1[i3];

        $z0 = virtualinvoke $r2.<android.view.View: boolean updateLocalSystemUiVisibility(int,int)>(i0, i1);

        z1 = z1 | $z0;

        i3 = i3 + 1;

        goto label1;

     label2:
        return z1;
    }

    public void updateViewLayout(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.view.ViewGroup r0;
        android.view.ViewGroup$LayoutParams r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r8;
        java.lang.IllegalArgumentException $r5, $r11;
        java.lang.String $r6, $r12;
        android.view.ViewParent $r7;
        android.view.View r13;

        r0 := @this: android.view.ViewGroup;

        r13 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ViewGroup$LayoutParams;

        $z0 = virtualinvoke r0.<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>(r1);

        if $z0 == 0 goto label2;

        $r7 = r13.<android.view.View: android.view.ViewParent mParent>;

        if $r7 != r0 goto label1;

        virtualinvoke r13.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r1);

        return;

     label1:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Given view not a child of ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12);

        throw $r11;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid LayoutParams supplied to ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }
}
