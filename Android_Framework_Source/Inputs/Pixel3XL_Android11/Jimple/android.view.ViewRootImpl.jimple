public final class android.view.ViewRootImpl extends java.lang.Object implements android.view.ViewParent, android.view.View$AttachInfo$Callbacks, android.view.ThreadedRenderer$DrawCallbacks
{
    private static final int CONTENT_CAPTURE_ENABLED_FALSE;
    private static final int CONTENT_CAPTURE_ENABLED_NOT_CHECKED;
    private static final int CONTENT_CAPTURE_ENABLED_TRUE;
    private static final boolean DBG;
    private static final boolean DEBUG_CONFIGURATION;
    private static final boolean DEBUG_CONTENT_CAPTURE;
    private static final boolean DEBUG_DIALOG;
    private static final boolean DEBUG_DRAW;
    private static final boolean DEBUG_FPS;
    private static final boolean DEBUG_IMF;
    private static final boolean DEBUG_INPUT_RESIZE;
    private static final boolean DEBUG_INPUT_STAGES;
    private static final boolean DEBUG_KEEP_SCREEN_ON;
    private static final boolean DEBUG_LAYOUT;
    private static final boolean DEBUG_ORIENTATION;
    private static final boolean DEBUG_SCROLL_CAPTURE;
    private static final boolean DEBUG_TRACKBALL;
    private static final boolean LOCAL_LOGV;
    private static final int MAX_QUEUED_INPUT_EVENT_POOL_SIZE;
    static final int MAX_TRACKBALL_DELAY;
    private static final int MSG_CHECK_FOCUS;
    private static final int MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST;
    private static final int MSG_CLOSE_SYSTEM_DIALOGS;
    private static final int MSG_DIE;
    private static final int MSG_DISPATCH_APP_VISIBILITY;
    private static final int MSG_DISPATCH_DRAG_EVENT;
    private static final int MSG_DISPATCH_DRAG_LOCATION_EVENT;
    private static final int MSG_DISPATCH_GET_NEW_SURFACE;
    private static final int MSG_DISPATCH_INPUT_EVENT;
    private static final int MSG_DISPATCH_KEY_FROM_AUTOFILL;
    private static final int MSG_DISPATCH_KEY_FROM_IME;
    private static final int MSG_DISPATCH_SYSTEM_UI_VISIBILITY;
    private static final int MSG_DISPATCH_WINDOW_SHOWN;
    private static final int MSG_DRAW_FINISHED;
    private static final int MSG_HIDE_INSETS;
    private static final int MSG_INSETS_CHANGED;
    private static final int MSG_INSETS_CONTROL_CHANGED;
    private static final int MSG_INVALIDATE;
    private static final int MSG_INVALIDATE_RECT;
    private static final int MSG_INVALIDATE_WORLD;
    private static final int MSG_LOCATION_IN_PARENT_DISPLAY_CHANGED;
    private static final int MSG_POINTER_CAPTURE_CHANGED;
    private static final int MSG_PROCESS_INPUT_EVENTS;
    private static final int MSG_REQUEST_KEYBOARD_SHORTCUTS;
    private static final int MSG_REQUEST_SCROLL_CAPTURE;
    private static final int MSG_RESIZED;
    private static final int MSG_RESIZED_REPORT;
    private static final int MSG_SHOW_INSETS;
    private static final int MSG_SYNTHESIZE_INPUT_EVENT;
    private static final int MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED;
    private static final int MSG_UPDATE_CONFIGURATION;
    private static final int MSG_UPDATE_POINTER_ICON;
    private static final int MSG_WINDOW_FOCUS_CHANGED;
    private static final int MSG_WINDOW_MOVED;
    private static final boolean MT_RENDERER_AVAILABLE;
    public static final int NEW_INSETS_MODE_FULL;
    public static final int NEW_INSETS_MODE_IME;
    public static final int NEW_INSETS_MODE_NONE;
    private static final java.lang.String PROPERTY_PROFILE_RENDERING;
    private static final java.lang.String TAG;
    private static final java.lang.String USE_NEW_INSETS_PROPERTY;
    static final android.view.animation.Interpolator mResizeInterpolator;
    private static boolean sAlwaysAssignFocus;
    private static boolean sCompatibilityDone;
    private static final java.util.ArrayList sConfigCallbacks;
    static boolean sFirstDrawComplete;
    static final java.util.ArrayList sFirstDrawHandlers;
    public static int sNewInsetsMode;
    static final java.lang.ThreadLocal sRunQueues;
    private android.view.accessibility.IAccessibilityEmbeddedConnection mAccessibilityEmbeddedConnection;
    android.view.View mAccessibilityFocusedHost;
    android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView;
    final android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager;
    android.view.AccessibilityInteractionController mAccessibilityInteractionController;
    final android.view.accessibility.AccessibilityManager mAccessibilityManager;
    private android.view.ViewRootImpl$ActivityConfigCallback mActivityConfigCallback;
    private boolean mActivityRelaunched;
    boolean mAdded;
    boolean mAddedTouchMode;
    private boolean mAppVisibilityChanged;
    boolean mAppVisible;
    boolean mApplyInsetsRequested;
    final android.view.View$AttachInfo mAttachInfo;
    android.media.AudioManager mAudioManager;
    final java.lang.String mBasePackageName;
    private android.graphics.BLASTBufferQueue mBlastBufferQueue;
    private android.view.SurfaceControl mBlastSurfaceControl;
    private android.view.SurfaceControl mBoundsLayer;
    private int mCanvasOffsetX;
    private int mCanvasOffsetY;
    final android.view.Choreographer mChoreographer;
    int mClientWindowLayoutFlags;
    final android.view.ViewRootImpl$SystemUiVisibilityInfo mCompatibleVisibilityInfo;
    final android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable mConsumeBatchedInputImmediatelyRunnable;
    boolean mConsumeBatchedInputImmediatelyScheduled;
    boolean mConsumeBatchedInputScheduled;
    final android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable;
    int mContentCaptureEnabled;
    public final android.content.Context mContext;
    int mCurScrollY;
    android.view.View mCurrentDragView;
    private android.view.PointerIcon mCustomPointerIcon;
    private final int mDensity;
    android.graphics.Rect mDirty;
    int mDispatchedSystemUiVisibility;
    android.view.Display mDisplay;
    private final android.hardware.display.DisplayManager$DisplayListener mDisplayListener;
    final android.hardware.display.DisplayManager mDisplayManager;
    android.content.ClipDescription mDragDescription;
    final android.graphics.PointF mDragPoint;
    private boolean mDragResizing;
    boolean mDrawingAllowed;
    int mDrawsNeededToReport;
    private boolean mEnableTripleBuffering;
    android.view.FallbackEventHandler mFallbackEventHandler;
    boolean mFirst;
    android.view.ViewRootImpl$InputStage mFirstInputStage;
    android.view.ViewRootImpl$InputStage mFirstPostImeInputStage;
    private boolean mForceDecorViewVisibility;
    private boolean mForceDisableBLAST;
    private boolean mForceNextConfigUpdate;
    boolean mForceNextWindowRelayout;
    private int mFpsNumFrames;
    private long mFpsPrevTime;
    private long mFpsStartTime;
    boolean mFullRedrawNeeded;
    private final android.view.GestureExclusionTracker mGestureExclusionTracker;
    boolean mHadWindowFocus;
    final android.view.ViewRootImpl$ViewRootHandler mHandler;
    boolean mHandlingLayoutInLayoutRequest;
    int mHardwareXOffset;
    int mHardwareYOffset;
    int mHeight;
    final android.view.ViewRootImpl$HighContrastTextManager mHighContrastTextManager;
    private final android.view.ImeFocusController mImeFocusController;
    private boolean mInLayout;
    private final android.view.InputEventCompatProcessor mInputCompatProcessor;
    protected final android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier;
    android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver;
    android.view.InputQueue mInputQueue;
    android.view.InputQueue$Callback mInputQueueCallback;
    private final android.view.InsetsController mInsetsController;
    final android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable;
    private boolean mInvalidateRootRequested;
    boolean mIsAmbientMode;
    public boolean mIsAnimating;
    boolean mIsCreating;
    boolean mIsDrawing;
    boolean mIsInTraversal;
    private final android.content.res.Configuration mLastConfigurationFromResources;
    final android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets;
    boolean mLastInCompatMode;
    private final android.util.MergedConfiguration mLastReportedMergedConfiguration;
    java.lang.ref.WeakReference mLastScrolledFocus;
    int mLastSystemUiVisibility;
    final android.graphics.PointF mLastTouchPoint;
    int mLastTouchSource;
    private android.view.WindowInsets mLastWindowInsets;
    boolean mLayoutRequested;
    java.util.ArrayList mLayoutRequesters;
    final android.os.IBinder mLeashToken;
    volatile java.lang.Object mLocalDragState;
    final android.view.WindowLeaked mLocation;
    boolean mLostWindowFocus;
    private boolean mNeedsRendererSetup;
    boolean mNewSurfaceNeeded;
    private boolean mNextDrawUseBLASTSyncTransaction;
    private boolean mNextReportConsumeBLAST;
    private final int mNoncompatDensity;
    int mOrigWindowType;
    boolean mPausedForTransition;
    boolean mPendingAlwaysConsumeSystemBars;
    final android.graphics.Rect mPendingBackDropFrame;
    final android.view.DisplayCutout$ParcelableWrapper mPendingDisplayCutout;
    int mPendingInputEventCount;
    android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead;
    java.lang.String mPendingInputEventQueueLengthCounterName;
    android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail;
    private final android.util.MergedConfiguration mPendingMergedConfiguration;
    private java.util.ArrayList mPendingTransitions;
    boolean mPerformContentCapture;
    boolean mPointerCapture;
    private int mPointerIconType;
    final android.graphics.Region mPreviousTransparentRegion;
    boolean mProcessInputEventsScheduled;
    private boolean mProfile;
    private boolean mProfileRendering;
    private android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool;
    private int mQueuedInputEventPoolSize;
    private boolean mRemoved;
    private android.view.Choreographer$FrameCallback mRenderProfiler;
    private boolean mRenderProfilingEnabled;
    boolean mReportNextDraw;
    private int mResizeMode;
    private java.util.HashSet mRootScrollCaptureCallbacks;
    private android.view.SurfaceControl$Transaction mRtBLASTSyncTransaction;
    private android.view.ScrollCaptureClient mScrollCaptureClient;
    boolean mScrollMayChange;
    int mScrollY;
    android.widget.Scroller mScroller;
    private boolean mSendNextFrameToWm;
    android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent;
    int mSeq;
    int mSoftInputMode;
    boolean mStopped;
    public final android.view.Surface mSurface;
    private final java.util.ArrayList mSurfaceChangedCallbacks;
    private final android.view.SurfaceControl$Transaction mSurfaceChangedTransaction;
    private final android.view.SurfaceControl mSurfaceControl;
    com.android.internal.view.BaseSurfaceHolder mSurfaceHolder;
    android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback;
    private final android.view.SurfaceSession mSurfaceSession;
    private final android.graphics.Point mSurfaceSize;
    android.view.ViewRootImpl$InputStage mSyntheticInputStage;
    private java.lang.String mTag;
    final int mTargetSdkVersion;
    private final android.graphics.Rect mTempBoundsRect;
    private final android.view.InsetsSourceControl[] mTempControls;
    java.util.HashSet mTempHashSet;
    private final android.view.InsetsState mTempInsets;
    final android.graphics.Rect mTempRect;
    final java.lang.Thread mThread;
    final android.graphics.Rect mTmpFrame;
    final int[] mTmpLocation;
    final android.graphics.Rect mTmpRect;
    final android.util.TypedValue mTmpValue;
    private final android.view.SurfaceControl$Transaction mTransaction;
    android.content.res.CompatibilityInfo$Translator mTranslator;
    final android.graphics.Region mTransparentRegion;
    int mTraversalBarrier;
    final android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable;
    public boolean mTraversalScheduled;
    private int mTypesHiddenByFlags;
    boolean mUnbufferedInputDispatch;
    int mUnbufferedInputSource;
    private final android.view.ViewRootImpl$UnhandledKeyManager mUnhandledKeyManager;
    boolean mUpcomingInTouchMode;
    boolean mUpcomingWindowFocus;
    private boolean mUseBLASTAdapter;
    private boolean mUseMTRenderer;
    android.view.View mView;
    final android.view.ViewConfiguration mViewConfiguration;
    private int mViewLayoutDirectionInitial;
    int mViewVisibility;
    final android.graphics.Rect mVisRect;
    int mWidth;
    boolean mWillDrawSoon;
    final android.graphics.Rect mWinFrame;
    final android.view.ViewRootImpl$W mWindow;
    public final android.view.WindowManager$LayoutParams mWindowAttributes;
    boolean mWindowAttributesChanged;
    final java.util.ArrayList mWindowCallbacks;
    java.util.concurrent.CountDownLatch mWindowDrawCountDown;
    boolean mWindowFocusChanged;
    final android.view.IWindowSession mWindowSession;

    static void <clinit>()
    {
        int $i0;
        java.lang.ThreadLocal $r0;
        java.util.ArrayList $r1, $r2;
        android.view.animation.AccelerateDecelerateInterpolator $r3;

        <android.view.ViewRootImpl: java.lang.String USE_NEW_INSETS_PROPERTY> = "persist.debug.new_insets";

        <android.view.ViewRootImpl: java.lang.String TAG> = "ViewRootImpl";

        <android.view.ViewRootImpl: java.lang.String PROPERTY_PROFILE_RENDERING> = "viewroot.profile_rendering";

        <android.view.ViewRootImpl: int NEW_INSETS_MODE_NONE> = 0;

        <android.view.ViewRootImpl: int NEW_INSETS_MODE_IME> = 1;

        <android.view.ViewRootImpl: int NEW_INSETS_MODE_FULL> = 2;

        <android.view.ViewRootImpl: boolean MT_RENDERER_AVAILABLE> = 1;

        <android.view.ViewRootImpl: int MSG_WINDOW_MOVED> = 23;

        <android.view.ViewRootImpl: int MSG_WINDOW_FOCUS_CHANGED> = 6;

        <android.view.ViewRootImpl: int MSG_UPDATE_POINTER_ICON> = 27;

        <android.view.ViewRootImpl: int MSG_UPDATE_CONFIGURATION> = 18;

        <android.view.ViewRootImpl: int MSG_SYSTEM_GESTURE_EXCLUSION_CHANGED> = 32;

        <android.view.ViewRootImpl: int MSG_SYNTHESIZE_INPUT_EVENT> = 24;

        <android.view.ViewRootImpl: int MSG_SHOW_INSETS> = 34;

        <android.view.ViewRootImpl: int MSG_RESIZED_REPORT> = 5;

        <android.view.ViewRootImpl: int MSG_RESIZED> = 4;

        <android.view.ViewRootImpl: int MSG_REQUEST_SCROLL_CAPTURE> = 36;

        <android.view.ViewRootImpl: int MSG_REQUEST_KEYBOARD_SHORTCUTS> = 26;

        <android.view.ViewRootImpl: int MSG_PROCESS_INPUT_EVENTS> = 19;

        <android.view.ViewRootImpl: int MSG_POINTER_CAPTURE_CHANGED> = 28;

        <android.view.ViewRootImpl: int MSG_LOCATION_IN_PARENT_DISPLAY_CHANGED> = 33;

        <android.view.ViewRootImpl: int MSG_INVALIDATE_WORLD> = 22;

        <android.view.ViewRootImpl: int MSG_INVALIDATE_RECT> = 2;

        <android.view.ViewRootImpl: int MSG_INVALIDATE> = 1;

        <android.view.ViewRootImpl: int MSG_INSETS_CONTROL_CHANGED> = 31;

        <android.view.ViewRootImpl: int MSG_INSETS_CHANGED> = 30;

        <android.view.ViewRootImpl: int MSG_HIDE_INSETS> = 35;

        <android.view.ViewRootImpl: int MSG_DRAW_FINISHED> = 29;

        <android.view.ViewRootImpl: int MSG_DISPATCH_WINDOW_SHOWN> = 25;

        <android.view.ViewRootImpl: int MSG_DISPATCH_SYSTEM_UI_VISIBILITY> = 17;

        <android.view.ViewRootImpl: int MSG_DISPATCH_KEY_FROM_IME> = 11;

        <android.view.ViewRootImpl: int MSG_DISPATCH_KEY_FROM_AUTOFILL> = 12;

        <android.view.ViewRootImpl: int MSG_DISPATCH_INPUT_EVENT> = 7;

        <android.view.ViewRootImpl: int MSG_DISPATCH_GET_NEW_SURFACE> = 9;

        <android.view.ViewRootImpl: int MSG_DISPATCH_DRAG_LOCATION_EVENT> = 16;

        <android.view.ViewRootImpl: int MSG_DISPATCH_DRAG_EVENT> = 15;

        <android.view.ViewRootImpl: int MSG_DISPATCH_APP_VISIBILITY> = 8;

        <android.view.ViewRootImpl: int MSG_DIE> = 3;

        <android.view.ViewRootImpl: int MSG_CLOSE_SYSTEM_DIALOGS> = 14;

        <android.view.ViewRootImpl: int MSG_CLEAR_ACCESSIBILITY_FOCUS_HOST> = 21;

        <android.view.ViewRootImpl: int MSG_CHECK_FOCUS> = 13;

        <android.view.ViewRootImpl: int MAX_TRACKBALL_DELAY> = 250;

        <android.view.ViewRootImpl: int MAX_QUEUED_INPUT_EVENT_POOL_SIZE> = 10;

        <android.view.ViewRootImpl: boolean LOCAL_LOGV> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_TRACKBALL> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_SCROLL_CAPTURE> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_ORIENTATION> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_LAYOUT> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_KEEP_SCREEN_ON> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_INPUT_STAGES> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_INPUT_RESIZE> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_IMF> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_FPS> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_DRAW> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_DIALOG> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_CONTENT_CAPTURE> = 0;

        <android.view.ViewRootImpl: boolean DEBUG_CONFIGURATION> = 0;

        <android.view.ViewRootImpl: boolean DBG> = 0;

        <android.view.ViewRootImpl: int CONTENT_CAPTURE_ENABLED_TRUE> = 1;

        <android.view.ViewRootImpl: int CONTENT_CAPTURE_ENABLED_NOT_CHECKED> = 0;

        <android.view.ViewRootImpl: int CONTENT_CAPTURE_ENABLED_FALSE> = 2;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.debug.new_insets", 2);

        <android.view.ViewRootImpl: int sNewInsetsMode> = $i0;

        $r0 = new java.lang.ThreadLocal;

        specialinvoke $r0.<java.lang.ThreadLocal: void <init>()>();

        <android.view.ViewRootImpl: java.lang.ThreadLocal sRunQueues> = $r0;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers> = $r1;

        <android.view.ViewRootImpl: boolean sFirstDrawComplete> = 0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks> = $r2;

        <android.view.ViewRootImpl: boolean sCompatibilityDone> = 0;

        $r3 = new android.view.animation.AccelerateDecelerateInterpolator;

        specialinvoke $r3.<android.view.animation.AccelerateDecelerateInterpolator: void <init>()>();

        <android.view.ViewRootImpl: android.view.animation.Interpolator mResizeInterpolator> = $r3;

        return;
    }

    public void <init>(android.content.Context, android.view.Display)
    {
        android.view.ViewRootImpl r0;
        android.content.Context r1;
        android.view.Display r2;
        android.view.IWindowSession $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.Display;

        $r3 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        specialinvoke r0.<android.view.ViewRootImpl: void <init>(android.content.Context,android.view.Display,android.view.IWindowSession,boolean)>(r1, r2, $r3, 0);

        return;
    }

    public void <init>(android.content.Context, android.view.Display, android.view.IWindowSession)
    {
        android.view.ViewRootImpl r0;
        android.content.Context r1;
        android.view.Display r2;
        android.view.IWindowSession r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.Display;

        r3 := @parameter2: android.view.IWindowSession;

        specialinvoke r0.<android.view.ViewRootImpl: void <init>(android.content.Context,android.view.Display,android.view.IWindowSession,boolean)>(r1, r2, r3, 0);

        return;
    }

    public void <init>(android.content.Context, android.view.Display, android.view.IWindowSession, boolean)
    {
        android.view.ViewRootImpl r0;
        java.util.ArrayList $r1, $r28, $r32;
        int[] $r2;
        android.util.TypedValue $r3;
        android.view.WindowManager$LayoutParams $r4;
        int $i0, $i1, $i2, $i3, $i4;
        android.graphics.Point $r5;
        android.graphics.Rect $r6, $r14, $r15, $r16, $r42, $r43, $r44, $r45;
        android.view.ViewRootImpl$UnhandledKeyManager $r7;
        android.view.Surface $r8;
        android.view.SurfaceControl $r9, $r10;
        android.view.SurfaceControl$Transaction $r11, $r13, $r30;
        android.view.SurfaceSession $r12;
        android.view.DisplayCutout$ParcelableWrapper $r17;
        android.view.DisplayCutout $r18;
        android.view.InsetsState $r19;
        android.view.InsetsSourceControl[] $r20;
        android.view.ViewTreeObserver$InternalInsetsInfo $r21;
        android.content.res.Configuration $r22;
        android.util.MergedConfiguration $r23, $r24;
        android.graphics.PointF $r25, $r26;
        android.view.ViewRootImpl$AccessibilityInteractionConnectionManager $r27, $r57;
        boolean $z1, $z2, z3, $z4, z5;
        android.view.GestureExclusionTracker $r29;
        android.view.ViewRootImpl$1 $r31;
        android.view.ViewRootImpl$ViewRootHandler $r33, $r52, $r56, $r59;
        android.view.ViewRootImpl$TraversalRunnable $r34;
        android.view.ViewRootImpl$ConsumeBatchedInputRunnable $r35;
        android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable $r36;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r37;
        java.lang.String $r38, r89;
        java.lang.Thread $r39;
        android.view.WindowLeaked $r40;
        android.view.ViewRootImpl$W $r46, $r53;
        android.os.Binder $r47;
        android.content.pm.ApplicationInfo $r48;
        android.graphics.Region $r49, $r50;
        android.view.View$AttachInfo $r51;
        android.view.IWindowSession $r54, r83;
        android.view.ViewRootImpl$SystemUiVisibilityInfo $r55;
        android.view.ViewRootImpl$HighContrastTextManager $r58;
        android.view.accessibility.AccessibilityManager $r60, r86;
        android.view.ViewConfiguration $r61;
        android.content.res.Resources $r62, $r64, $r71;
        android.util.DisplayMetrics $r63, $r65;
        com.android.internal.policy.PhoneFallbackEventHandler $r66;
        java.lang.Object $r67, $r76;
        android.hardware.display.DisplayManager $r68;
        android.view.InsetsController $r69;
        android.view.ViewRootInsetsControllerHost $r70;
        java.lang.Class $r72;
        java.lang.Class[] $r73;
        java.lang.reflect.Constructor $r74;
        java.lang.Object[] $r75;
        android.view.InputEventCompatProcessor $r77, r90;
        android.view.InputEventConsistencyVerifier $r78, r84;
        java.lang.Exception $r79;
        java.lang.Throwable $r80;
        android.content.Context r81;
        android.view.Display r82;
        byte b6;
        android.view.Choreographer r88;
        android.view.ImeFocusController $r93;

        r0 := @this: android.view.ViewRootImpl;

        r81 := @parameter0: android.content.Context;

        r82 := @parameter1: android.view.Display;

        r83 := @parameter2: android.view.IWindowSession;

        z3 := @parameter3: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks> = $r1;

        $r2 = newarray (int)[2];

        r0.<android.view.ViewRootImpl: int[] mTmpLocation> = $r2;

        $r3 = new android.util.TypedValue;

        specialinvoke $r3.<android.util.TypedValue: void <init>()>();

        r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue> = $r3;

        $r4 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r4.<android.view.WindowManager$LayoutParams: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes> = $r4;

        r0.<android.view.ViewRootImpl: boolean mAppVisible> = 1;

        r0.<android.view.ViewRootImpl: boolean mForceDecorViewVisibility> = 0;

        r0.<android.view.ViewRootImpl: int mOrigWindowType> = -1;

        r0.<android.view.ViewRootImpl: boolean mStopped> = 0;

        r0.<android.view.ViewRootImpl: boolean mIsAmbientMode> = 0;

        r0.<android.view.ViewRootImpl: boolean mPausedForTransition> = 0;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 0;

        $i0 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if $i0 != 2 goto label01;

        b6 = 0;

        goto label02;

     label01:
        b6 = -1;

     label02:
        r0.<android.view.ViewRootImpl: int mDispatchedSystemUiVisibility> = b6;

        $r5 = new android.graphics.Point;

        specialinvoke $r5.<android.graphics.Point: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Point mSurfaceSize> = $r5;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mTempBoundsRect> = $r6;

        r0.<android.view.ViewRootImpl: int mContentCaptureEnabled> = 0;

        r0.<android.view.ViewRootImpl: int mUnbufferedInputSource> = 0;

        r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName> = "pq";

        $r7 = new android.view.ViewRootImpl$UnhandledKeyManager;

        specialinvoke $r7.<android.view.ViewRootImpl$UnhandledKeyManager: void <init>(android.view.ViewRootImpl$1)>(null);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$UnhandledKeyManager mUnhandledKeyManager> = $r7;

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 0;

        $r8 = new android.view.Surface;

        specialinvoke $r8.<android.view.Surface: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.Surface mSurface> = $r8;

        $r9 = new android.view.SurfaceControl;

        specialinvoke $r9.<android.view.SurfaceControl: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceControl mSurfaceControl> = $r9;

        $r10 = new android.view.SurfaceControl;

        specialinvoke $r10.<android.view.SurfaceControl: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBlastSurfaceControl> = $r10;

        $r11 = new android.view.SurfaceControl$Transaction;

        specialinvoke $r11.<android.view.SurfaceControl$Transaction: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mSurfaceChangedTransaction> = $r11;

        $r12 = new android.view.SurfaceSession;

        specialinvoke $r12.<android.view.SurfaceSession: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceSession mSurfaceSession> = $r12;

        $r13 = new android.view.SurfaceControl$Transaction;

        specialinvoke $r13.<android.view.SurfaceControl$Transaction: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mTransaction> = $r13;

        $r14 = new android.graphics.Rect;

        specialinvoke $r14.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mTmpFrame> = $r14;

        $r15 = new android.graphics.Rect;

        specialinvoke $r15.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mTmpRect> = $r15;

        $r16 = new android.graphics.Rect;

        specialinvoke $r16.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingBackDropFrame> = $r16;

        $r17 = new android.view.DisplayCutout$ParcelableWrapper;

        $r18 = <android.view.DisplayCutout: android.view.DisplayCutout NO_CUTOUT>;

        specialinvoke $r17.<android.view.DisplayCutout$ParcelableWrapper: void <init>(android.view.DisplayCutout)>($r18);

        r0.<android.view.ViewRootImpl: android.view.DisplayCutout$ParcelableWrapper mPendingDisplayCutout> = $r17;

        $r19 = new android.view.InsetsState;

        specialinvoke $r19.<android.view.InsetsState: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.InsetsState mTempInsets> = $r19;

        $r20 = newarray (android.view.InsetsSourceControl)[16];

        r0.<android.view.ViewRootImpl: android.view.InsetsSourceControl[] mTempControls> = $r20;

        $r21 = new android.view.ViewTreeObserver$InternalInsetsInfo;

        specialinvoke $r21.<android.view.ViewTreeObserver$InternalInsetsInfo: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets> = $r21;

        r0.<android.view.ViewRootImpl: int mTypesHiddenByFlags> = 0;

        $r22 = new android.content.res.Configuration;

        specialinvoke $r22.<android.content.res.Configuration: void <init>()>();

        r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfigurationFromResources> = $r22;

        $r23 = new android.util.MergedConfiguration;

        specialinvoke $r23.<android.util.MergedConfiguration: void <init>()>();

        r0.<android.view.ViewRootImpl: android.util.MergedConfiguration mLastReportedMergedConfiguration> = $r23;

        $r24 = new android.util.MergedConfiguration;

        specialinvoke $r24.<android.util.MergedConfiguration: void <init>()>();

        r0.<android.view.ViewRootImpl: android.util.MergedConfiguration mPendingMergedConfiguration> = $r24;

        $r25 = new android.graphics.PointF;

        specialinvoke $r25.<android.graphics.PointF: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint> = $r25;

        $r26 = new android.graphics.PointF;

        specialinvoke $r26.<android.graphics.PointF: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.PointF mLastTouchPoint> = $r26;

        r0.<android.view.ViewRootImpl: long mFpsStartTime> = -1L;

        r0.<android.view.ViewRootImpl: long mFpsPrevTime> = -1L;

        r0.<android.view.ViewRootImpl: int mPointerIconType> = 1;

        r0.<android.view.ViewRootImpl: android.view.PointerIcon mCustomPointerIcon> = null;

        $r27 = new android.view.ViewRootImpl$AccessibilityInteractionConnectionManager;

        specialinvoke $r27.<android.view.ViewRootImpl$AccessibilityInteractionConnectionManager: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager> = $r27;

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 0;

        $r28 = new java.util.ArrayList;

        specialinvoke $r28.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters> = $r28;

        r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest> = 0;

        $z1 = staticinvoke <android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()>();

        if $z1 == 0 goto label03;

        $r78 = new android.view.InputEventConsistencyVerifier;

        specialinvoke $r78.<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int)>(r0, 0);

        r84 = $r78;

        goto label04;

     label03:
        r84 = null;

     label04:
        r0.<android.view.ViewRootImpl: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier> = r84;

        $r29 = new android.view.GestureExclusionTracker;

        specialinvoke $r29.<android.view.GestureExclusionTracker: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.GestureExclusionTracker mGestureExclusionTracker> = $r29;

        $r30 = new android.view.SurfaceControl$Transaction;

        specialinvoke $r30.<android.view.SurfaceControl$Transaction: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mRtBLASTSyncTransaction> = $r30;

        r0.<android.view.ViewRootImpl: boolean mSendNextFrameToWm> = 0;

        r0.<android.view.ViewRootImpl: java.lang.String mTag> = "ViewRootImpl";

        r0.<android.view.ViewRootImpl: boolean mProfile> = 0;

        $r31 = new android.view.ViewRootImpl$1;

        specialinvoke $r31.<android.view.ViewRootImpl$1: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager$DisplayListener mDisplayListener> = $r31;

        $r32 = new java.util.ArrayList;

        specialinvoke $r32.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.ArrayList mSurfaceChangedCallbacks> = $r32;

        r0.<android.view.ViewRootImpl: int mDrawsNeededToReport> = 0;

        $r33 = new android.view.ViewRootImpl$ViewRootHandler;

        specialinvoke $r33.<android.view.ViewRootImpl$ViewRootHandler: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler> = $r33;

        $r34 = new android.view.ViewRootImpl$TraversalRunnable;

        specialinvoke $r34.<android.view.ViewRootImpl$TraversalRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable> = $r34;

        $r35 = new android.view.ViewRootImpl$ConsumeBatchedInputRunnable;

        specialinvoke $r35.<android.view.ViewRootImpl$ConsumeBatchedInputRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable> = $r35;

        $r36 = new android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable;

        specialinvoke $r36.<android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable mConsumeBatchedInputImmediatelyRunnable> = $r36;

        $r37 = new android.view.ViewRootImpl$InvalidateOnAnimationRunnable;

        specialinvoke $r37.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable> = $r37;

        r0.<android.view.ViewRootImpl: android.content.Context mContext> = r81;

        r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession> = r83;

        r0.<android.view.ViewRootImpl: android.view.Display mDisplay> = r82;

        $r38 = virtualinvoke r81.<android.content.Context: java.lang.String getBasePackageName()>();

        r0.<android.view.ViewRootImpl: java.lang.String mBasePackageName> = $r38;

        $r39 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        r0.<android.view.ViewRootImpl: java.lang.Thread mThread> = $r39;

        $r40 = new android.view.WindowLeaked;

        specialinvoke $r40.<android.view.WindowLeaked: void <init>(java.lang.String)>(null);

        r0.<android.view.ViewRootImpl: android.view.WindowLeaked mLocation> = $r40;

        virtualinvoke $r40.<android.view.WindowLeaked: java.lang.Throwable fillInStackTrace()>();

        r0.<android.view.ViewRootImpl: int mWidth> = -1;

        r0.<android.view.ViewRootImpl: int mHeight> = -1;

        $r42 = new android.graphics.Rect;

        specialinvoke $r42.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty> = $r42;

        $r43 = new android.graphics.Rect;

        specialinvoke $r43.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect> = $r43;

        $r44 = new android.graphics.Rect;

        specialinvoke $r44.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mVisRect> = $r44;

        $r45 = new android.graphics.Rect;

        specialinvoke $r45.<android.graphics.Rect: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame> = $r45;

        $r46 = new android.view.ViewRootImpl$W;

        specialinvoke $r46.<android.view.ViewRootImpl$W: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow> = $r46;

        $r47 = new android.os.Binder;

        specialinvoke $r47.<android.os.Binder: void <init>()>();

        r0.<android.view.ViewRootImpl: android.os.IBinder mLeashToken> = $r47;

        $r48 = virtualinvoke r81.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r48.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        r0.<android.view.ViewRootImpl: int mTargetSdkVersion> = $i1;

        r0.<android.view.ViewRootImpl: int mViewVisibility> = 8;

        $r49 = new android.graphics.Region;

        specialinvoke $r49.<android.graphics.Region: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion> = $r49;

        $r50 = new android.graphics.Region;

        specialinvoke $r50.<android.graphics.Region: void <init>()>();

        r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion> = $r50;

        r0.<android.view.ViewRootImpl: boolean mFirst> = 1;

        r0.<android.view.ViewRootImpl: boolean mPerformContentCapture> = 1;

        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        $r51 = new android.view.View$AttachInfo;

        $r54 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r53 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r52 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        specialinvoke $r51.<android.view.View$AttachInfo: void <init>(android.view.IWindowSession,android.view.IWindow,android.view.Display,android.view.ViewRootImpl,android.os.Handler,android.view.View$AttachInfo$Callbacks,android.content.Context)>($r54, $r53, r82, r0, $r52, r0, r81);

        r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo> = $r51;

        $r55 = new android.view.ViewRootImpl$SystemUiVisibilityInfo;

        specialinvoke $r55.<android.view.ViewRootImpl$SystemUiVisibilityInfo: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SystemUiVisibilityInfo mCompatibleVisibilityInfo> = $r55;

        r86 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>(r81);

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager> = r86;

        $r57 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        $r56 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke r86.<android.view.accessibility.AccessibilityManager: void addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener,android.os.Handler)>($r57, $r56);

        $r58 = new android.view.ViewRootImpl$HighContrastTextManager;

        specialinvoke $r58.<android.view.ViewRootImpl$HighContrastTextManager: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$HighContrastTextManager mHighContrastTextManager> = $r58;

        $r60 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $r59 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r60.<android.view.accessibility.AccessibilityManager: void addHighTextContrastStateChangeListener(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener,android.os.Handler)>($r58, $r59);

        $r61 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r81);

        r0.<android.view.ViewRootImpl: android.view.ViewConfiguration mViewConfiguration> = $r61;

        $r62 = virtualinvoke r81.<android.content.Context: android.content.res.Resources getResources()>();

        $r63 = virtualinvoke $r62.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i2 = $r63.<android.util.DisplayMetrics: int densityDpi>;

        r0.<android.view.ViewRootImpl: int mDensity> = $i2;

        $r64 = virtualinvoke r81.<android.content.Context: android.content.res.Resources getResources()>();

        $r65 = virtualinvoke $r64.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $i3 = $r65.<android.util.DisplayMetrics: int noncompatDensityDpi>;

        r0.<android.view.ViewRootImpl: int mNoncompatDensity> = $i3;

        $r66 = new com.android.internal.policy.PhoneFallbackEventHandler;

        specialinvoke $r66.<com.android.internal.policy.PhoneFallbackEventHandler: void <init>(android.content.Context)>(r81);

        r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler> = $r66;

        if z3 == 0 goto label05;

        r88 = staticinvoke <android.view.Choreographer: android.view.Choreographer getSfInstance()>();

        goto label06;

     label05:
        r88 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>();

     label06:
        r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer> = r88;

        $r67 = virtualinvoke r81.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("display");

        $r68 = (android.hardware.display.DisplayManager) $r67;

        r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager mDisplayManager> = $r68;

        $r69 = new android.view.InsetsController;

        $r70 = new android.view.ViewRootInsetsControllerHost;

        specialinvoke $r70.<android.view.ViewRootInsetsControllerHost: void <init>(android.view.ViewRootImpl)>(r0);

        specialinvoke $r69.<android.view.InsetsController: void <init>(android.view.InsetsController$Host)>($r70);

        r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController> = $r69;

        $r71 = virtualinvoke r81.<android.content.Context: android.content.res.Resources getResources()>();

        r89 = virtualinvoke $r71.<android.content.res.Resources: java.lang.String getString(int)>(17039907);

        $z2 = virtualinvoke r89.<java.lang.String: boolean isEmpty()>();

        if $z2 == 0 goto label07;

        $r77 = new android.view.InputEventCompatProcessor;

        specialinvoke $r77.<android.view.InputEventCompatProcessor: void <init>(android.content.Context)>(r81);

        r0.<android.view.ViewRootImpl: android.view.InputEventCompatProcessor mInputCompatProcessor> = $r77;

        goto label13;

     label07:
        $r72 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r89);

        $r73 = newarray (java.lang.Class)[1];

        $r73[0] = class "Landroid/content/Context;";

        $r74 = virtualinvoke $r72.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r73);

        $r75 = newarray (java.lang.Object)[1];

        $r75[0] = r81;

        $r76 = virtualinvoke $r74.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r75);

        r90 = (android.view.InputEventCompatProcessor) $r76;

     label08:
        r0.<android.view.ViewRootImpl: android.view.InputEventCompatProcessor mInputCompatProcessor> = r90;

        goto label13;

     label09:
        $r80 := @caughtexception;

        goto label16;

     label10:
        $r79 := @caughtexception;

     label11:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "Unable to create the InputEventCompatProcessor. ", $r79);

     label12:
        r0.<android.view.ViewRootImpl: android.view.InputEventCompatProcessor mInputCompatProcessor> = null;

     label13:
        $z4 = <android.view.ViewRootImpl: boolean sCompatibilityDone>;

        if $z4 != 0 goto label15;

        z5 = 0;

        $i4 = r0.<android.view.ViewRootImpl: int mTargetSdkVersion>;

        if $i4 >= 28 goto label14;

        z5 = 1;

     label14:
        <android.view.ViewRootImpl: boolean sAlwaysAssignFocus> = z5;

        <android.view.ViewRootImpl: boolean sCompatibilityDone> = 1;

     label15:
        virtualinvoke r0.<android.view.ViewRootImpl: void loadSystemProperties()>();

        $r93 = new android.view.ImeFocusController;

        specialinvoke $r93.<android.view.ImeFocusController: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ImeFocusController mImeFocusController> = $r93;

        return;

     label16:
        r0.<android.view.ViewRootImpl: android.view.InputEventCompatProcessor mInputCompatProcessor> = null;

        throw $r80;

        catch java.lang.Exception from label07 to label08 with label10;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
    }

    static boolean access$100(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mRenderProfilingEnabled>;

        return $z0;
    }

    static void access$1000(android.view.ViewRootImpl, android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.graphics.Rect;

        specialinvoke r0.<android.view.ViewRootImpl: void maybeHandleWindowMove(android.graphics.Rect)>(r1);

        return;
    }

    static void access$1100(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;

        r0 := @parameter0: android.view.ViewRootImpl;

        specialinvoke r0.<android.view.ViewRootImpl: void handleWindowFocusChanged()>();

        return;
    }

    static void access$1200(android.view.ViewRootImpl, android.view.DragEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.DragEvent r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.DragEvent;

        specialinvoke r0.<android.view.ViewRootImpl: void handleDragEvent(android.view.DragEvent)>(r1);

        return;
    }

    static void access$1300(android.view.ViewRootImpl, android.view.ViewRootImpl$SystemUiVisibilityInfo)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$SystemUiVisibilityInfo r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.ViewRootImpl$SystemUiVisibilityInfo;

        specialinvoke r0.<android.view.ViewRootImpl: void handleDispatchSystemUiVisibilityChanged(android.view.ViewRootImpl$SystemUiVisibilityInfo)>(r1);

        return;
    }

    static android.util.MergedConfiguration access$1400(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.util.MergedConfiguration $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.util.MergedConfiguration mPendingMergedConfiguration>;

        return $r1;
    }

    static void access$1500(android.view.ViewRootImpl, android.view.MotionEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.MotionEvent r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.MotionEvent;

        specialinvoke r0.<android.view.ViewRootImpl: void resetPointerIcon(android.view.MotionEvent)>(r1);

        return;
    }

    static void access$1600(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.view.ViewRootImpl: void handlePointerCaptureChanged(boolean)>(z0);

        return;
    }

    static void access$1700(android.view.ViewRootImpl, android.view.IScrollCaptureController)
    {
        android.view.ViewRootImpl r0;
        android.view.IScrollCaptureController r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.IScrollCaptureController;

        specialinvoke r0.<android.view.ViewRootImpl: void handleScrollCaptureRequest(android.view.IScrollCaptureController)>(r1);

        return;
    }

    static void access$1800(android.view.ViewRootImpl, android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.ViewRootImpl$QueuedInputEvent;

        specialinvoke r0.<android.view.ViewRootImpl: void finishInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

        return;
    }

    static java.lang.String access$1900(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        java.lang.String $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        return $r1;
    }

    static android.view.Choreographer$FrameCallback access$200(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.Choreographer$FrameCallback $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        return $r1;
    }

    static boolean access$2000(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        $z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean isAutofillUiShowing()>();

        return $z0;
    }

    static android.view.ImeFocusController access$2100(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.ImeFocusController $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ImeFocusController mImeFocusController>;

        return $r1;
    }

    static boolean access$2200(android.view.ViewRootImpl, android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.KeyEvent r1;
        boolean $z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.KeyEvent;

        $z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean checkForLeavingTouchModeAndConsume(android.view.KeyEvent)>(r1);

        return $z0;
    }

    static android.view.autofill.AutofillManager access$2300(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.autofill.AutofillManager $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = specialinvoke r0.<android.view.ViewRootImpl: android.view.autofill.AutofillManager getAutofillManager()>();

        return $r1;
    }

    static android.view.ViewRootImpl$UnhandledKeyManager access$2400(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$UnhandledKeyManager $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$UnhandledKeyManager mUnhandledKeyManager>;

        return $r1;
    }

    static void access$2500(android.view.ViewRootImpl, android.view.MotionEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.MotionEvent r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.MotionEvent;

        specialinvoke r0.<android.view.ViewRootImpl: void maybeUpdateTooltip(android.view.MotionEvent)>(r1);

        return;
    }

    static int access$2602(android.view.ViewRootImpl, int)
    {
        android.view.ViewRootImpl r0;
        int i0;

        r0 := @parameter0: android.view.ViewRootImpl;

        i0 := @parameter1: int;

        r0.<android.view.ViewRootImpl: int mPointerIconType> = i0;

        return i0;
    }

    static boolean access$2700(android.view.ViewRootImpl, android.view.MotionEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.MotionEvent r1;
        boolean $z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.MotionEvent;

        $z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean updatePointerIcon(android.view.MotionEvent)>(r1);

        return $z0;
    }

    static android.util.MergedConfiguration access$300(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.util.MergedConfiguration $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.util.MergedConfiguration mLastReportedMergedConfiguration>;

        return $r1;
    }

    static boolean access$3702(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        r0.<android.view.ViewRootImpl: boolean mProfileRendering> = z0;

        return z0;
    }

    static void access$3800(android.view.ViewRootImpl, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        z0 := @parameter1: boolean;

        specialinvoke r0.<android.view.ViewRootImpl: void profileRendering(boolean)>(z0);

        return;
    }

    static void access$400(android.view.ViewRootImpl, android.util.MergedConfiguration, boolean, int)
    {
        android.view.ViewRootImpl r0;
        android.util.MergedConfiguration r1;
        boolean z0;
        int i0;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.util.MergedConfiguration;

        z0 := @parameter2: boolean;

        i0 := @parameter3: int;

        specialinvoke r0.<android.view.ViewRootImpl: void performConfigurationChange(android.util.MergedConfiguration,boolean,int)>(r1, z0, i0);

        return;
    }

    static android.view.InputEventCompatProcessor access$4000(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEventCompatProcessor $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.InputEventCompatProcessor mInputCompatProcessor>;

        return $r1;
    }

    static void access$4200(android.view.ViewRootImpl, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, boolean, android.util.MergedConfiguration, android.graphics.Rect, boolean, boolean, int, android.view.DisplayCutout$ParcelableWrapper)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1, r2, r3, r4, r6;
        boolean z0, z1, z2;
        android.util.MergedConfiguration r5;
        int i0;
        android.view.DisplayCutout$ParcelableWrapper r7;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.graphics.Rect;

        r2 := @parameter2: android.graphics.Rect;

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.graphics.Rect;

        z0 := @parameter5: boolean;

        r5 := @parameter6: android.util.MergedConfiguration;

        r6 := @parameter7: android.graphics.Rect;

        z1 := @parameter8: boolean;

        z2 := @parameter9: boolean;

        i0 := @parameter10: int;

        r7 := @parameter11: android.view.DisplayCutout$ParcelableWrapper;

        specialinvoke r0.<android.view.ViewRootImpl: void dispatchResized(android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,boolean,android.util.MergedConfiguration,android.graphics.Rect,boolean,boolean,int,android.view.DisplayCutout$ParcelableWrapper)>(r1, r2, r3, r4, z0, r5, r6, z1, z2, i0, r7);

        return;
    }

    static void access$4300(android.view.ViewRootImpl, android.view.InsetsState)
    {
        android.view.ViewRootImpl r0;
        android.view.InsetsState r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.InsetsState;

        specialinvoke r0.<android.view.ViewRootImpl: void dispatchInsetsChanged(android.view.InsetsState)>(r1);

        return;
    }

    static void access$4400(android.view.ViewRootImpl, android.view.InsetsState, android.view.InsetsSourceControl[])
    {
        android.view.ViewRootImpl r0;
        android.view.InsetsState r1;
        android.view.InsetsSourceControl[] r2;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.InsetsState;

        r2 := @parameter2: android.view.InsetsSourceControl[];

        specialinvoke r0.<android.view.ViewRootImpl: void dispatchInsetsControlChanged(android.view.InsetsState,android.view.InsetsSourceControl[])>(r1, r2);

        return;
    }

    static void access$4500(android.view.ViewRootImpl, int, boolean)
    {
        android.view.ViewRootImpl r0;
        int i0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.view.ViewRootImpl: void showInsets(int,boolean)>(i0, z0);

        return;
    }

    static void access$4600(android.view.ViewRootImpl, int, boolean)
    {
        android.view.ViewRootImpl r0;
        int i0;
        boolean z0;

        r0 := @parameter0: android.view.ViewRootImpl;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<android.view.ViewRootImpl: void hideInsets(int,boolean)>(i0, z0);

        return;
    }

    static android.view.View access$4700(android.view.ViewRootImpl, android.view.View, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, $r3;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.view.View;

        r2 := @parameter2: android.view.View;

        $r3 = specialinvoke r0.<android.view.ViewRootImpl: android.view.View getCommonPredecessor(android.view.View,android.view.View)>(r1, r2);

        return $r3;
    }

    static android.content.res.Configuration access$500(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.content.res.Configuration $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfigurationFromResources>;

        return $r1;
    }

    static void access$600(android.view.ViewRootImpl, android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        r1 := @parameter1: android.graphics.Rect;

        specialinvoke r0.<android.view.ViewRootImpl: void setFrame(android.graphics.Rect)>(r1);

        return;
    }

    static void access$700(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;

        r0 := @parameter0: android.view.ViewRootImpl;

        specialinvoke r0.<android.view.ViewRootImpl: void reportNextDraw()>();

        return;
    }

    static void access$800(android.view.View)
    {
        android.view.View r0;

        r0 := @parameter0: android.view.View;

        staticinvoke <android.view.ViewRootImpl: void forceLayout(android.view.View)>(r0);

        return;
    }

    static android.view.InsetsController access$900(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;
        android.view.InsetsController $r1;

        r0 := @parameter0: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        return $r1;
    }

    public static void addConfigCallback(android.view.ViewRootImpl$ConfigChangedCallback)
    {
        java.util.ArrayList r0, $r1;
        java.lang.Throwable $r2;
        android.view.ViewRootImpl$ConfigChangedCallback r3;

        r3 := @parameter0: android.view.ViewRootImpl$ConfigChangedCallback;

        r0 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        entermonitor r0;

     label1:
        $r1 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void addFirstDrawHandler(java.lang.Runnable)
    {
        java.util.ArrayList r0, $r1;
        boolean $z0;
        java.lang.Throwable $r2;
        java.lang.Runnable r3;

        r3 := @parameter0: java.lang.Runnable;

        r0 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        entermonitor r0;

     label1:
        $z0 = <android.view.ViewRootImpl: boolean sFirstDrawComplete>;

        if $z0 != 0 goto label2;

        $r1 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public static void adjustLayoutParamsForCompatibility(android.view.WindowManager$LayoutParams)
    {
        android.view.WindowManager$LayoutParams r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, i34, i35, $i36, $i37, i38, i39, $i40, $i41;
        boolean z0, z1;
        android.view.InsetsFlags $r1, $r2, $r3, $r4, r5, r6, r7;

        r0 := @parameter0: android.view.WindowManager$LayoutParams;

        $i4 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if $i4 == 2 goto label01;

        return;

     label01:
        $i6 = r0.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        $i5 = r0.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        i0 = $i6 | $i5;

        i1 = r0.<android.view.WindowManager$LayoutParams: int flags>;

        i2 = r0.<android.view.WindowManager$LayoutParams: int type>;

        $i7 = r0.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i8 = $i7 & 67108864;

        if $i8 != 0 goto label04;

        $r4 = r0.<android.view.WindowManager$LayoutParams: android.view.InsetsFlags insetsFlags>;

        $r4.<android.view.InsetsFlags: int appearance> = 0;

        $i21 = i0 & 1;

        if $i21 == 0 goto label02;

        r5 = r0.<android.view.WindowManager$LayoutParams: android.view.InsetsFlags insetsFlags>;

        $i28 = r5.<android.view.InsetsFlags: int appearance>;

        $i29 = $i28 | 4;

        r5.<android.view.InsetsFlags: int appearance> = $i29;

     label02:
        $i22 = i0 & 8192;

        if $i22 == 0 goto label03;

        r6 = r0.<android.view.WindowManager$LayoutParams: android.view.InsetsFlags insetsFlags>;

        $i26 = r6.<android.view.InsetsFlags: int appearance>;

        $i27 = $i26 | 8;

        r6.<android.view.InsetsFlags: int appearance> = $i27;

     label03:
        $i23 = i0 & 16;

        if $i23 == 0 goto label04;

        r7 = r0.<android.view.WindowManager$LayoutParams: android.view.InsetsFlags insetsFlags>;

        $i24 = r7.<android.view.InsetsFlags: int appearance>;

        $i25 = $i24 | 16;

        r7.<android.view.InsetsFlags: int appearance> = $i25;

     label04:
        $i30 = r0.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i31 = $i30 & 134217728;

        if $i31 != 0 goto label08;

        $i18 = i0 & 4096;

        if $i18 != 0 goto label07;

        $i19 = i1 & 1024;

        if $i19 == 0 goto label05;

        goto label07;

     label05:
        $i20 = i0 & 2048;

        if $i20 == 0 goto label06;

        $r3 = r0.<android.view.WindowManager$LayoutParams: android.view.InsetsFlags insetsFlags>;

        $r3.<android.view.InsetsFlags: int behavior> = 1;

        goto label08;

     label06:
        $r2 = r0.<android.view.WindowManager$LayoutParams: android.view.InsetsFlags insetsFlags>;

        $r2.<android.view.InsetsFlags: int behavior> = 0;

        goto label08;

     label07:
        $r1 = r0.<android.view.WindowManager$LayoutParams: android.view.InsetsFlags insetsFlags>;

        $r1.<android.view.InsetsFlags: int behavior> = 2;

     label08:
        $i32 = r0.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i33 = $i32 & 268435456;

        if $i33 == 0 goto label09;

        return;

     label09:
        i34 = virtualinvoke r0.<android.view.WindowManager$LayoutParams: int getFitInsetsTypes()>();

        i3 = virtualinvoke r0.<android.view.WindowManager$LayoutParams: int getFitInsetsSides()>();

        z0 = virtualinvoke r0.<android.view.WindowManager$LayoutParams: boolean isFitInsetsIgnoringVisibility()>();

        $i9 = i0 & 1024;

        if $i9 != 0 goto label10;

        $i16 = i1 & 256;

        if $i16 != 0 goto label10;

        i35 = i34;

        $i17 = 67108864 & i1;

        if $i17 == 0 goto label11;

     label10:
        $i36 = staticinvoke <android.view.WindowInsets$Type: int statusBars()>();

        i35 = i34 & $i36;

     label11:
        $i37 = i0 & 512;

        if $i37 != 0 goto label12;

        i38 = i35;

        $i15 = i1 & 134217728;

        if $i15 == 0 goto label13;

     label12:
        $i10 = staticinvoke <android.view.WindowInsets$Type: int systemBars()>();

        i38 = i35 & $i10;

     label13:
        if i2 == 2005 goto label15;

        if i2 != 2003 goto label14;

        goto label15;

     label14:
        i39 = i38;

        z1 = z0;

        $i11 = staticinvoke <android.view.WindowInsets$Type: int systemBars()>();

        $i12 = $i11 & i38;

        $i13 = staticinvoke <android.view.WindowInsets$Type: int systemBars()>();

        if $i12 != $i13 goto label16;

        $i14 = staticinvoke <android.view.WindowInsets$Type: int ime()>();

        i39 = i38 | $i14;

        z1 = z0;

        goto label16;

     label15:
        z1 = 1;

        i39 = i38;

     label16:
        virtualinvoke r0.<android.view.WindowManager$LayoutParams: void setFitInsetsTypes(int)>(i39);

        virtualinvoke r0.<android.view.WindowManager$LayoutParams: void setFitInsetsSides(int)>(i3);

        virtualinvoke r0.<android.view.WindowManager$LayoutParams: void setFitInsetsIgnoringVisibility(boolean)>(z1);

        $i40 = r0.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i41 = $i40 & -268435457;

        r0.<android.view.WindowManager$LayoutParams: int privateFlags> = $i41;

        return;
    }

    private static void appendGfxInfo(android.view.View, android.view.ViewRootImpl$GfxInfo)
    {
        android.view.ViewRootImpl$GfxInfo r0;
        int i0, $i1, $i2, i3;
        android.graphics.RenderNode $r1, $r2;
        boolean $z0;
        android.view.View $r3, r4;
        android.view.ViewGroup r5;

        r4 := @parameter0: android.view.View;

        r0 := @parameter1: android.view.ViewRootImpl$GfxInfo;

        $i1 = r0.<android.view.ViewRootImpl$GfxInfo: int viewCount>;

        $i2 = $i1 + 1;

        r0.<android.view.ViewRootImpl$GfxInfo: int viewCount> = $i2;

        $r1 = r4.<android.view.View: android.graphics.RenderNode mRenderNode>;

        staticinvoke <android.view.ViewRootImpl: void computeRenderNodeUsage(android.graphics.RenderNode,android.view.ViewRootImpl$GfxInfo)>($r1, r0);

        $r2 = r4.<android.view.View: android.graphics.RenderNode mBackgroundRenderNode>;

        staticinvoke <android.view.ViewRootImpl: void computeRenderNodeUsage(android.graphics.RenderNode,android.view.ViewRootImpl$GfxInfo)>($r2, r0);

        $z0 = r4 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r5 = (android.view.ViewGroup) r4;

        i0 = virtualinvoke r5.<android.view.ViewGroup: int getChildCount()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label2;

        $r3 = virtualinvoke r5.<android.view.ViewGroup: android.view.View getChildAt(int)>(i3);

        staticinvoke <android.view.ViewRootImpl: void appendGfxInfo(android.view.View,android.view.ViewRootImpl$GfxInfo)>($r3, r0);

        i3 = i3 + 1;

        goto label1;

     label2:
        return;
    }

    private void applyKeepScreenOnFlag(android.view.WindowManager$LayoutParams)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        android.view.View$AttachInfo $r2;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r2.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z0 == 0 goto label1;

        $i5 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i6 = $i5 | 128;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i6;

        goto label2;

     label1:
        $i0 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = $i0 & -129;

        $i1 = r0.<android.view.ViewRootImpl: int mClientWindowLayoutFlags>;

        $i2 = $i1 & 128;

        $i4 = $i3 | $i2;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i4;

     label2:
        return;
    }

    private boolean checkForLeavingTouchModeAndConsume(android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.KeyEvent r1;
        int i0, $i1, $i2;
        android.view.View$AttachInfo $r2;
        boolean $z0, $z1, $z2, $z4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r2.<android.view.View$AttachInfo: boolean mInTouchMode>;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        i0 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if i0 == 0 goto label2;

        if i0 == 2 goto label2;

        return 0;

     label2:
        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getFlags()>();

        $i2 = $i1 & 4;

        if $i2 == 0 goto label3;

        return 0;

     label3:
        $z1 = staticinvoke <android.view.ViewRootImpl: boolean isNavigationKey(android.view.KeyEvent)>(r1);

        if $z1 == 0 goto label4;

        $z4 = virtualinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchMode(boolean)>(0);

        return $z4;

     label4:
        $z2 = staticinvoke <android.view.ViewRootImpl: boolean isTypingKey(android.view.KeyEvent)>(r1);

        if $z2 == 0 goto label5;

        virtualinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchMode(boolean)>(0);

        return 0;

     label5:
        return 0;
    }

    private void collectRootScrollCaptureTargets(java.util.Queue)
    {
        android.view.ViewRootImpl r0;
        java.util.Queue r1;
        java.util.Iterator r2;
        android.view.ScrollCaptureCallback r3;
        java.util.HashSet $r6;
        boolean $z0;
        java.lang.Object $r7;
        android.graphics.Point $r8;
        android.view.View $r9, $r10, $r12, $r13, $r15;
        int $i0, $i1, $i2, $i3;
        android.graphics.Rect $r11;
        android.view.ScrollCaptureTarget $r14;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.util.Queue;

        $r6 = r0.<android.view.ViewRootImpl: java.util.HashSet mRootScrollCaptureCallbacks>;

        r2 = virtualinvoke $r6.<java.util.HashSet: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.view.ScrollCaptureCallback) $r7;

        $r8 = new android.graphics.Point;

        $r9 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i0 = virtualinvoke $r9.<android.view.View: int getLeft()>();

        $r10 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i1 = virtualinvoke $r10.<android.view.View: int getTop()>();

        specialinvoke $r8.<android.graphics.Point: void <init>(int,int)>($i0, $i1);

        $r11 = new android.graphics.Rect;

        $r12 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i2 = virtualinvoke $r12.<android.view.View: int getWidth()>();

        $r13 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i3 = virtualinvoke $r13.<android.view.View: int getHeight()>();

        specialinvoke $r11.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i2, $i3);

        $r14 = new android.view.ScrollCaptureTarget;

        $r15 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        specialinvoke $r14.<android.view.ScrollCaptureTarget: void <init>(android.view.View,android.graphics.Rect,android.graphics.Point,android.view.ScrollCaptureCallback)>($r15, $r11, $r8, r3);

        interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>($r14);

        goto label1;

     label2:
        return;
    }

    private boolean collectViewAttributes()
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2, $z3, $z4, $z6;
        android.view.View$AttachInfo $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r9, $r10, $r12, $r13, $r14, r18, r20, $r23, $r24, $r26;
        android.view.View $r8, $r25;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        android.view.ViewRootImpl$SystemUiVisibilityInfo $r11, $r16, r21;
        android.view.ViewRootImpl$ViewRootHandler $r15, r22;
        android.os.Message $r17;
        android.view.WindowManager$LayoutParams r19;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r1.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z1 == 0 goto label3;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        z0 = $r3.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4.<android.view.View$AttachInfo: boolean mKeepScreenOn> = 0;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5.<android.view.View$AttachInfo: int mSystemUiVisibility> = 0;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6.<android.view.View$AttachInfo: boolean mHasSystemUiListeners> = 0;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        virtualinvoke $r8.<android.view.View: void dispatchCollectViewAttributes(android.view.View$AttachInfo,int)>($r7, 0);

        r18 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i1 = r18.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r9.<android.view.View$AttachInfo: int mDisabledSystemUiVisibility>;

        $i2 = $i1 & $i0;

        r18.<android.view.View$AttachInfo: int mSystemUiVisibility> = $i2;

        r19 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        r20 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i3 = r20.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i4 = specialinvoke r0.<android.view.ViewRootImpl: int getImpliedSystemUiVisibility(android.view.WindowManager$LayoutParams)>(r19);

        $i5 = $i3 | $i4;

        r20.<android.view.View$AttachInfo: int mSystemUiVisibility> = $i5;

        r21 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SystemUiVisibilityInfo mCompatibleVisibilityInfo>;

        $i6 = r21.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility>;

        $i9 = $i6 & -2;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i7 = $r10.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i8 = $i7 & 1;

        $i10 = $i9 | $i8;

        r21.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility> = $i10;

        $i12 = r0.<android.view.ViewRootImpl: int mDispatchedSystemUiVisibility>;

        $r11 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SystemUiVisibilityInfo mCompatibleVisibilityInfo>;

        $i11 = $r11.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility>;

        if $i12 == $i11 goto label1;

        $r15 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r15.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(17);

        r22 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r16 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SystemUiVisibilityInfo mCompatibleVisibilityInfo>;

        $r17 = virtualinvoke r22.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(17, $r16);

        virtualinvoke r22.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>($r17);

     label1:
        $r12 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z2 = $r12.<android.view.View$AttachInfo: boolean mKeepScreenOn>;

        if $z2 != z0 goto label2;

        $r13 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i14 = $r13.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        $i13 = r19.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        if $i14 != $i13 goto label2;

        $r14 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z4 = $r14.<android.view.View$AttachInfo: boolean mHasSystemUiListeners>;

        $z3 = r19.<android.view.WindowManager$LayoutParams: boolean hasSystemUiListeners>;

        if $z4 == $z3 goto label3;

     label2:
        specialinvoke r0.<android.view.ViewRootImpl: void applyKeepScreenOnFlag(android.view.WindowManager$LayoutParams)>(r19);

        $r23 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i15 = $r23.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        r19.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility> = $i15;

        $r24 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z6 = $r24.<android.view.View$AttachInfo: boolean mHasSystemUiListeners>;

        r19.<android.view.WindowManager$LayoutParams: boolean hasSystemUiListeners> = $z6;

        $r25 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r26 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i16 = $r26.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        virtualinvoke $r25.<android.view.View: void dispatchWindowSystemUiVisiblityChanged(int)>($i16);

        return 1;

     label3:
        return 0;
    }

    private static void computeRenderNodeUsage(android.graphics.RenderNode, android.view.ViewRootImpl$GfxInfo)
    {
        android.graphics.RenderNode r0;
        android.view.ViewRootImpl$GfxInfo r1;
        long $l0, $l1, $l2, $l3, $l4, $l5;

        r0 := @parameter0: android.graphics.RenderNode;

        r1 := @parameter1: android.view.ViewRootImpl$GfxInfo;

        if r0 != null goto label1;

        return;

     label1:
        $l0 = r1.<android.view.ViewRootImpl$GfxInfo: long renderNodeMemoryUsage>;

        $l1 = virtualinvoke r0.<android.graphics.RenderNode: long computeApproximateMemoryUsage()>();

        $l2 = $l0 + $l1;

        r1.<android.view.ViewRootImpl$GfxInfo: long renderNodeMemoryUsage> = $l2;

        $l3 = r1.<android.view.ViewRootImpl$GfxInfo: long renderNodeMemoryAllocated>;

        $l4 = virtualinvoke r0.<android.graphics.RenderNode: long computeApproximateMemoryAllocated()>();

        $l5 = $l3 + $l4;

        r1.<android.view.ViewRootImpl$GfxInfo: long renderNodeMemoryAllocated> = $l5;

        return;
    }

    private void controlInsetsForCompatibility(android.view.WindowManager$LayoutParams)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i26, i27, i28, i29, i30;
        android.view.InsetsController $r2, $r3;
        boolean z0, z1, z2, z3, z4, z5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $i1 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if $i1 == 2 goto label01;

        return;

     label01:
        $i3 = r1.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        $i2 = r1.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        i15 = $i3 | $i2;

        i16 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        i17 = r1.<android.view.WindowManager$LayoutParams: int width>;

        z0 = 0;

        if i17 != -1 goto label02;

        $i14 = r1.<android.view.WindowManager$LayoutParams: int height>;

        if $i14 != -1 goto label02;

        z1 = 1;

        goto label03;

     label02:
        z1 = 0;

     label03:
        $i18 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i18 < 1 goto label04;

        $i13 = r1.<android.view.WindowManager$LayoutParams: int type>;

        if $i13 > 99 goto label04;

        z2 = 1;

        goto label05;

     label04:
        z2 = 0;

     label05:
        $i19 = r0.<android.view.ViewRootImpl: int mTypesHiddenByFlags>;

        $i20 = staticinvoke <android.view.WindowInsets$Type: int statusBars()>();

        $i21 = $i19 & $i20;

        if $i21 == 0 goto label06;

        z3 = 1;

        goto label07;

     label06:
        z3 = 0;

     label07:
        $i4 = i15 & 4;

        if $i4 != 0 goto label09;

        $i12 = i16 & 1024;

        if $i12 == 0 goto label08;

        if z1 == 0 goto label08;

        if z2 == 0 goto label08;

        goto label09;

     label08:
        z4 = 0;

        goto label10;

     label09:
        z4 = 1;

     label10:
        $i22 = r0.<android.view.ViewRootImpl: int mTypesHiddenByFlags>;

        $i23 = staticinvoke <android.view.WindowInsets$Type: int navigationBars()>();

        $i24 = $i22 & $i23;

        if $i24 == 0 goto label11;

        z5 = 1;

        goto label12;

     label11:
        z5 = 0;

     label12:
        $i5 = i15 & 2;

        if $i5 == 0 goto label13;

        z0 = 1;

     label13:
        if z4 == 0 goto label14;

        if z3 != 0 goto label14;

        $i11 = staticinvoke <android.view.WindowInsets$Type: int statusBars()>();

        i26 = 0 | $i11;

        i27 = 0;

        goto label15;

     label14:
        i26 = 0;

        i27 = 0;

        if z4 != 0 goto label15;

        i26 = 0;

        i27 = 0;

        if z3 == 0 goto label15;

        $i10 = staticinvoke <android.view.WindowInsets$Type: int statusBars()>();

        i27 = 0 | $i10;

        i26 = 0;

     label15:
        if z0 == 0 goto label16;

        if z5 != 0 goto label16;

        $i9 = staticinvoke <android.view.WindowInsets$Type: int navigationBars()>();

        i28 = i26 | $i9;

        i29 = i27;

        goto label17;

     label16:
        i28 = i26;

        i29 = i27;

        if z0 != 0 goto label17;

        i28 = i26;

        i29 = i27;

        if z5 == 0 goto label17;

        $i8 = staticinvoke <android.view.WindowInsets$Type: int navigationBars()>();

        i29 = i27 | $i8;

        i28 = i26;

     label17:
        if i28 == 0 goto label18;

        $r3 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.InsetsController getInsetsController()>();

        virtualinvoke $r3.<android.view.InsetsController: void hide(int)>(i28);

     label18:
        if i29 == 0 goto label19;

        $r2 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.InsetsController getInsetsController()>();

        virtualinvoke $r2.<android.view.InsetsController: void show(int)>(i29);

     label19:
        $i6 = r0.<android.view.ViewRootImpl: int mTypesHiddenByFlags>;

        i30 = $i6 | i28;

        r0.<android.view.ViewRootImpl: int mTypesHiddenByFlags> = i30;

        $i7 = i30 & i29;

        r0.<android.view.ViewRootImpl: int mTypesHiddenByFlags> = $i7;

        return;
    }

    private void deliverInputEvent(android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent $r1, $r3, $r6, $r10, $r14, $r17, $r28;
        int $i0, $i1, $i3;
        boolean $z0, $z1, $z2, $z3;
        android.view.InputEventConsistencyVerifier $r2, $r7;
        android.view.KeyEvent $r4;
        android.view.ViewRootImpl$UnhandledKeyManager $r5;
        java.lang.StringBuilder $r8;
        java.lang.String $r11, $r18, $r20;
        long $l2;
        java.lang.Throwable $r21, $r22, $r23;
        android.view.ViewRootImpl$QueuedInputEvent r24;
        android.view.ViewRootImpl$InputStage r27;

        r0 := @this: android.view.ViewRootImpl;

        r24 := @parameter0: android.view.ViewRootImpl$QueuedInputEvent;

        $r1 = r24.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        $i0 = virtualinvoke $r1.<android.view.InputEvent: int getId()>();

        staticinvoke <android.os.Trace: void asyncTraceBegin(long,java.lang.String,int)>(8L, "deliverInputEvent", $i0);

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(8L);

        if $z0 == 0 goto label01;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deliverInputEvent src=0x");

        $r10 = r24.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        $i1 = virtualinvoke $r10.<android.view.InputEvent: int getSource()>();

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" eventTimeNano=");

        $r14 = r24.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        $l2 = virtualinvoke $r14.<android.view.InputEvent: long getEventTimeNano()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id=0x");

        $r17 = r24.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        $i3 = virtualinvoke $r17.<android.view.InputEvent: int getId()>();

        $r18 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i3);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, $r20);

     label01:
        $r2 = r0.<android.view.ViewRootImpl: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        if $r2 == null goto label08;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "verifyEventConsistency");

     label02:
        $r7 = r0.<android.view.ViewRootImpl: android.view.InputEventConsistencyVerifier mInputEventConsistencyVerifier>;

        $r6 = r24.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        virtualinvoke $r7.<android.view.InputEventConsistencyVerifier: void onInputEvent(android.view.InputEvent,int)>($r6, 0);

     label03:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

     label04:
        goto label08;

     label05:
        $r23 := @caughtexception;

     label06:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

     label07:
        throw $r23;

     label08:
        $z1 = virtualinvoke r24.<android.view.ViewRootImpl$QueuedInputEvent: boolean shouldSendToSynthesizer()>();

        if $z1 == 0 goto label10;

        r27 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mSyntheticInputStage>;

     label09:
        goto label13;

     label10:
        $z2 = virtualinvoke r24.<android.view.ViewRootImpl$QueuedInputEvent: boolean shouldSkipIme()>();

        if $z2 == 0 goto label12;

        r27 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstPostImeInputStage>;

     label11:
        goto label13;

     label12:
        r27 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage>;

     label13:
        $r28 = r24.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        $z3 = $r28 instanceof android.view.KeyEvent;

        if $z3 == 0 goto label20;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "preDispatchToUnhandledKeyManager");

     label14:
        $r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$UnhandledKeyManager mUnhandledKeyManager>;

        $r3 = r24.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        $r4 = (android.view.KeyEvent) $r3;

        virtualinvoke $r5.<android.view.ViewRootImpl$UnhandledKeyManager: void preDispatch(android.view.KeyEvent)>($r4);

     label15:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

     label16:
        goto label20;

     label17:
        $r22 := @caughtexception;

     label18:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

     label19:
        throw $r22;

     label20:
        if r27 == null goto label23;

     label21:
        specialinvoke r0.<android.view.ViewRootImpl: void handleWindowFocusChanged()>();

        virtualinvoke r27.<android.view.ViewRootImpl$InputStage: void deliver(android.view.ViewRootImpl$QueuedInputEvent)>(r24);

     label22:
        goto label24;

     label23:
        specialinvoke r0.<android.view.ViewRootImpl: void finishInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r24);

     label24:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label25:
        $r21 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw $r21;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label06 to label07 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label08 to label09 with label25;
        catch java.lang.Throwable from label10 to label11 with label25;
        catch java.lang.Throwable from label12 to label13 with label25;
        catch java.lang.Throwable from label13 to label14 with label25;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label25;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch java.lang.Throwable from label19 to label20 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
    }

    private void destroyHardwareRenderer()
    {
        android.view.ViewRootImpl r0;
        android.view.ThreadedRenderer r1;
        android.view.View r2;
        android.view.View$AttachInfo $r3, $r4, $r5;

        r0 := @this: android.view.ViewRootImpl;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r1 = $r3.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if r1 == null goto label2;

        r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r2 == null goto label1;

        virtualinvoke r1.<android.view.ThreadedRenderer: void destroyHardwareResources(android.view.View)>(r2);

     label1:
        virtualinvoke r1.<android.view.ThreadedRenderer: void destroy()>();

        virtualinvoke r1.<android.view.ThreadedRenderer: void setRequested(boolean)>(0);

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer> = null;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5.<android.view.View$AttachInfo: boolean mHardwareAccelerated> = 0;

     label2:
        return;
    }

    private void destroySurface()
    {
        android.view.ViewRootImpl r0;
        android.view.SurfaceControl r1, $r3, $r4;
        android.view.Surface $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBoundsLayer>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.SurfaceControl: void release()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBoundsLayer> = null;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r2.<android.view.Surface: void release()>();

        $r3 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r3.<android.view.SurfaceControl: void release()>();

        $r4 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBlastSurfaceControl>;

        virtualinvoke $r4.<android.view.SurfaceControl: void release()>();

        r0.<android.view.ViewRootImpl: android.graphics.BLASTBufferQueue mBlastBufferQueue> = null;

        return;
    }

    private void dispatchInsetsChanged(android.view.InsetsState)
    {
        android.view.ViewRootImpl r0;
        android.view.InsetsState r1, $r4, r5;
        int $i0, $i1;
        android.view.ViewRootImpl$ViewRootHandler $r2;
        android.os.Message $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InsetsState;

        r5 = r1;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if $i0 != $i1 goto label1;

        $r4 = new android.view.InsetsState;

        specialinvoke $r4.<android.view.InsetsState: void <init>(android.view.InsetsState,boolean)>(r1, 1);

        r5 = $r4;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r3 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(30, r5);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void dispatchInsetsControlChanged(android.view.InsetsState, android.view.InsetsSourceControl[])
    {
        android.view.ViewRootImpl r0;
        android.view.InsetsSourceControl[] r1;
        int $i0, $i1, $i2, i3;
        android.view.InsetsState $r2, r5, r6;
        android.view.InsetsSourceControl $r3, $r4;
        com.android.internal.os.SomeArgs r8;
        android.view.ViewRootImpl$ViewRootHandler $r9;
        android.os.Message $r10;

        r0 := @this: android.view.ViewRootImpl;

        r5 := @parameter0: android.view.InsetsState;

        r1 := @parameter1: android.view.InsetsSourceControl[];

        r6 = r5;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Process: int myPid()>();

        if $i0 != $i1 goto label2;

        $r2 = new android.view.InsetsState;

        specialinvoke $r2.<android.view.InsetsState: void <init>(android.view.InsetsState,boolean)>(r5, 1);

        r6 = $r2;

        if r1 == null goto label2;

        $i2 = lengthof r1;

        i3 = $i2 - 1;

     label1:
        r6 = $r2;

        if i3 < 0 goto label2;

        $r3 = new android.view.InsetsSourceControl;

        $r4 = r1[i3];

        specialinvoke $r3.<android.view.InsetsSourceControl: void <init>(android.view.InsetsSourceControl)>($r4);

        r1[i3] = $r3;

        i3 = i3 + -1;

        goto label1;

     label2:
        r8 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r6;

        r8.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r1;

        $r9 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r10 = virtualinvoke $r9.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(31, r8);

        virtualinvoke $r10.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void dispatchResized(android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, boolean, android.util.MergedConfiguration, android.graphics.Rect, boolean, boolean, int, android.view.DisplayCutout$ParcelableWrapper)
    {
        android.view.ViewRootImpl r0;
        boolean z0, z1, z2, $z5, z6, z7, z8;
        android.util.MergedConfiguration r1, $r8, r29;
        android.graphics.Rect r2, $r6, $r7, $r9, $r10, $r11, r19, r20, r21, r22, r30;
        int i0, $i1, $i2, $i3, i4, i5, i6, i7;
        android.view.DisplayCutout$ParcelableWrapper r3;
        android.view.DisplayCutout $r4;
        android.view.ViewRootImpl$ViewRootHandler $r5, r25;
        android.content.res.CompatibilityInfo$Translator $r12, $r13, r27;
        java.util.ArrayList $r14, $r15, r23;
        java.lang.Object $r16;
        android.view.WindowCallbacks $r17;
        java.lang.Throwable $r18;
        android.os.Message r26;
        com.android.internal.os.SomeArgs r28;

        r0 := @this: android.view.ViewRootImpl;

        r19 := @parameter0: android.graphics.Rect;

        r20 := @parameter1: android.graphics.Rect;

        r21 := @parameter2: android.graphics.Rect;

        r22 := @parameter3: android.graphics.Rect;

        z0 := @parameter4: boolean;

        r1 := @parameter5: android.util.MergedConfiguration;

        r2 := @parameter6: android.graphics.Rect;

        z1 := @parameter7: boolean;

        z2 := @parameter8: boolean;

        i0 := @parameter9: int;

        r3 := @parameter10: android.view.DisplayCutout$ParcelableWrapper;

        z6 = r0.<android.view.ViewRootImpl: boolean mDragResizing>;

        if z6 == 0 goto label10;

        $z5 = r0.<android.view.ViewRootImpl: boolean mUseMTRenderer>;

        if $z5 == 0 goto label10;

        z7 = virtualinvoke r19.<android.graphics.Rect: boolean equals(java.lang.Object)>(r2);

        r23 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        entermonitor r23;

     label01:
        $r14 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $i3 = virtualinvoke $r14.<java.util.ArrayList: int size()>();

        i4 = $i3 - 1;

     label02:
        if i4 < 0 goto label05;

     label03:
        $r15 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $r16 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        $r17 = (android.view.WindowCallbacks) $r16;

        interfaceinvoke $r17.<android.view.WindowCallbacks: void onWindowSizeIsChanging(android.graphics.Rect,boolean,android.graphics.Rect,android.graphics.Rect)>(r2, z7, r21, r22);

     label04:
        i4 = i4 + -1;

        goto label02;

     label05:
        exitmonitor r23;

     label06:
        goto label10;

     label07:
        $r18 := @caughtexception;

     label08:
        exitmonitor r23;

     label09:
        throw $r18;

     label10:
        r25 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        if z0 == 0 goto label11;

        i5 = 5;

        goto label12;

     label11:
        i5 = 4;

     label12:
        r26 = virtualinvoke r25.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(i5);

        r27 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if r27 == null goto label13;

        virtualinvoke r27.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r19);

        $r12 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r12.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r20);

        $r13 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r13.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>(r21);

     label13:
        r28 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Process: int myPid()>();

        if $i1 != $i2 goto label14;

        z8 = 1;

        goto label15;

     label14:
        z8 = 0;

     label15:
        if z8 == 0 goto label16;

        $r11 = new android.graphics.Rect;

        specialinvoke $r11.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r19);

        r19 = $r11;

        goto label16;

     label16:
        r28.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r19;

        if z8 == 0 goto label17;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r20);

        r20 = $r10;

        goto label17;

     label17:
        r28.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r20;

        if z8 == 0 goto label18;

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r21);

        r21 = $r9;

        goto label18;

     label18:
        r28.<com.android.internal.os.SomeArgs: java.lang.Object arg3> = r21;

        if z8 == 0 goto label19;

        if r1 == null goto label19;

        $r8 = new android.util.MergedConfiguration;

        specialinvoke $r8.<android.util.MergedConfiguration: void <init>(android.util.MergedConfiguration)>(r1);

        r29 = $r8;

        goto label20;

     label19:
        r29 = r1;

     label20:
        r28.<com.android.internal.os.SomeArgs: java.lang.Object arg4> = r29;

        if z8 == 0 goto label21;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r22);

        r22 = $r7;

        goto label21;

     label21:
        r28.<com.android.internal.os.SomeArgs: java.lang.Object arg6> = r22;

        if z8 == 0 goto label22;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>(android.graphics.Rect)>(r2);

        r30 = $r6;

        goto label23;

     label22:
        r30 = r2;

     label23:
        r28.<com.android.internal.os.SomeArgs: java.lang.Object arg8> = r30;

        $r4 = virtualinvoke r3.<android.view.DisplayCutout$ParcelableWrapper: android.view.DisplayCutout get()>();

        r28.<com.android.internal.os.SomeArgs: java.lang.Object arg9> = $r4;

        i6 = (int) z1;

        r28.<com.android.internal.os.SomeArgs: int argi1> = i6;

        i7 = (int) z2;

        r28.<com.android.internal.os.SomeArgs: int argi2> = i7;

        r28.<com.android.internal.os.SomeArgs: int argi3> = i0;

        r26.<android.os.Message: java.lang.Object obj> = r28;

        $r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r5.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r26);

        return;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    private void dispatchScrollCaptureSearchResult(android.view.IScrollCaptureController, android.view.ScrollCaptureTarget)
    {
        android.view.ViewRootImpl r0;
        android.view.ScrollCaptureTarget r1;
        android.view.ScrollCaptureClient $r3, $r8;
        android.graphics.Rect $r4;
        android.graphics.Point $r5;
        android.os.RemoteException $r6, $r7;
        android.view.IScrollCaptureController r9;

        r0 := @this: android.view.ViewRootImpl;

        r9 := @parameter0: android.view.IScrollCaptureController;

        r1 := @parameter1: android.view.ScrollCaptureTarget;

        if r1 != null goto label5;

     label1:
        interfaceinvoke r9.<android.view.IScrollCaptureController: void onClientUnavailable()>();

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

     label5:
        $r3 = new android.view.ScrollCaptureClient;

        specialinvoke $r3.<android.view.ScrollCaptureClient: void <init>(android.view.ScrollCaptureTarget,android.view.IScrollCaptureController)>(r1, r9);

        r0.<android.view.ViewRootImpl: android.view.ScrollCaptureClient mScrollCaptureClient> = $r3;

     label6:
        $r4 = virtualinvoke r1.<android.view.ScrollCaptureTarget: android.graphics.Rect getScrollBounds()>();

        $r5 = virtualinvoke r1.<android.view.ScrollCaptureTarget: android.graphics.Point getPositionInWindow()>();

        interfaceinvoke r9.<android.view.IScrollCaptureController: void onClientConnected(android.view.IScrollCaptureClient,android.graphics.Rect,android.graphics.Point)>($r3, $r4, $r5);

     label7:
        goto label9;

     label8:
        $r7 := @caughtexception;

        $r8 = r0.<android.view.ViewRootImpl: android.view.ScrollCaptureClient mScrollCaptureClient>;

        virtualinvoke $r8.<android.view.ScrollCaptureClient: void disconnect()>();

        r0.<android.view.ViewRootImpl: android.view.ScrollCaptureClient mScrollCaptureClient> = null;

     label9:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.RemoteException from label6 to label7 with label8;
    }

    private boolean draw(boolean)
    {
        android.view.ViewRootImpl r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        boolean z0, $z1, $z2, $z4, $z5, $z6, $z7, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, z18, z19, z20, z21, $z22, z23, z24, $z25;
        android.graphics.drawable.Drawable r1;
        android.view.View$AttachInfo $r2, $r3, $r4, $r6, $r8, $r9, $r11, $r13, $r16, $r18, $r20, $r21, $r24, $r26, $r28, $r32, $r33, $r53, $r55, r58, $r60;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15, i16, i17, $i20, i21, i22;
        com.android.internal.view.BaseSurfaceHolder $r5;
        android.view.ViewTreeObserver $r7, $r34;
        android.view.ThreadedRenderer $r10, $r12, $r14, $r19, $r23, $r25, $r27, $r56, r57;
        android.view.Surface $r15, $r17, r43;
        android.view.View $r22, r48;
        android.graphics.Rect $r29, r46, r49, r52;
        com.android.internal.view.RootViewSurfaceTaker $r30;
        android.widget.Scroller $r31, r47, r50;
        java.util.ArrayList $r35, $r36, r44;
        android.view.ViewRootImpl$ViewRootHandler $r37;
        java.lang.Object $r38;
        java.lang.Runnable $r39;
        android.view.Surface$OutOfResourcesException $r40, $r41, r59;
        java.lang.Throwable $r42;
        android.view.WindowManager$LayoutParams r51;
        android.view.Choreographer $r54;
        long $l18, $l19;

        r0 := @this: android.view.ViewRootImpl;

        z18 := @parameter0: boolean;

        r43 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z1 = virtualinvoke r43.<android.view.Surface: boolean isValid()>();

        if $z1 != 0 goto label01;

        return 0;

     label01:
        $z2 = <android.view.ViewRootImpl: boolean sFirstDrawComplete>;

        if $z2 != 0 goto label12;

        r44 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        entermonitor r44;

     label02:
        <android.view.ViewRootImpl: boolean sFirstDrawComplete> = 1;

        $r35 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        i12 = virtualinvoke $r35.<java.util.ArrayList: int size()>();

     label03:
        i13 = 0;

     label04:
        if i13 >= i12 goto label07;

     label05:
        $r37 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r36 = <android.view.ViewRootImpl: java.util.ArrayList sFirstDrawHandlers>;

        $r38 = virtualinvoke $r36.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r39 = (java.lang.Runnable) $r38;

        virtualinvoke $r37.<android.view.ViewRootImpl$ViewRootHandler: boolean post(java.lang.Runnable)>($r39);

     label06:
        i13 = i13 + 1;

        goto label04;

     label07:
        exitmonitor r44;

     label08:
        goto label12;

     label09:
        $r42 := @caughtexception;

     label10:
        exitmonitor r44;

     label11:
        throw $r42;

     label12:
        r46 = null;

        virtualinvoke r0.<android.view.ViewRootImpl: boolean scrollToRectOrFocus(android.graphics.Rect,boolean)>(null, 0);

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z4 = $r2.<android.view.View$AttachInfo: boolean mViewScrollChanged>;

        if $z4 == 0 goto label13;

        $r32 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r32.<android.view.View$AttachInfo: boolean mViewScrollChanged> = 0;

        $r33 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r34 = $r33.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r34.<android.view.ViewTreeObserver: void dispatchOnScrollChanged()>();

     label13:
        r47 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if r47 == null goto label14;

        $z16 = virtualinvoke r47.<android.widget.Scroller: boolean computeScrollOffset()>();

        if $z16 == 0 goto label14;

        z19 = 1;

        goto label15;

     label14:
        z19 = 0;

     label15:
        if z19 == 0 goto label16;

        $r31 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        i14 = virtualinvoke $r31.<android.widget.Scroller: int getCurrY()>();

        goto label17;

     label16:
        i14 = r0.<android.view.ViewRootImpl: int mScrollY>;

     label17:
        $i0 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i0 == i14 goto label19;

        r0.<android.view.ViewRootImpl: int mCurScrollY> = i14;

        r48 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z15 = r48 instanceof com.android.internal.view.RootViewSurfaceTaker;

        if $z15 == 0 goto label18;

        $r30 = (com.android.internal.view.RootViewSurfaceTaker) r48;

        interfaceinvoke $r30.<com.android.internal.view.RootViewSurfaceTaker: void onRootViewScrollYChanged(int)>(i14);

     label18:
        z18 = 1;

        goto label19;

     label19:
        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        f0 = $r3.<android.view.View$AttachInfo: float mApplicationScale>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        z0 = $r4.<android.view.View$AttachInfo: boolean mScalingRequired>;

        r49 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $r5 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r5 == null goto label21;

        virtualinvoke r49.<android.graphics.Rect: void setEmpty()>();

        if z19 == 0 goto label20;

        r50 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if r50 == null goto label20;

        virtualinvoke r50.<android.widget.Scroller: void abortAnimation()>();

     label20:
        return 0;

     label21:
        if z18 == 0 goto label22;

        $i8 = r0.<android.view.ViewRootImpl: int mWidth>;

        $f1 = (float) $i8;

        $f2 = $f1 * f0;

        $f3 = $f2 + 0.5F;

        $i11 = (int) $f3;

        $i9 = r0.<android.view.ViewRootImpl: int mHeight>;

        $f4 = (float) $i9;

        $f5 = $f4 * f0;

        $f6 = $f5 + 0.5F;

        $i10 = (int) $f6;

        virtualinvoke r49.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i11, $i10);

     label22:
        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r7.<android.view.ViewTreeObserver: void dispatchOnDraw()>();

        $i1 = r0.<android.view.ViewRootImpl: int mCanvasOffsetX>;

        i15 = neg $i1;

        $i2 = r0.<android.view.ViewRootImpl: int mCanvasOffsetY>;

        $i3 = neg $i2;

        i16 = $i3 + i14;

        r51 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        if r51 == null goto label23;

        r46 = r51.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

     label23:
        if r46 == null goto label24;

        i17 = r46.<android.graphics.Rect: int left>;

        $i5 = r46.<android.graphics.Rect: int top>;

        i16 = i16 - $i5;

        $i7 = r46.<android.graphics.Rect: int left>;

        $i6 = r46.<android.graphics.Rect: int right>;

        virtualinvoke r49.<android.graphics.Rect: void offset(int,int)>($i7, $i6);

        i15 = i15 - i17;

        goto label24;

     label24:
        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r1 = $r8.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable>;

        if r1 == null goto label26;

        $r28 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r52 = $r28.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        $z13 = specialinvoke r0.<android.view.ViewRootImpl: boolean getAccessibilityFocusedRect(android.graphics.Rect)>(r52);

        if $z13 != 0 goto label25;

        virtualinvoke r52.<android.graphics.Rect: void setEmpty()>();

     label25:
        $r29 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        $z14 = virtualinvoke r52.<android.graphics.Rect: boolean equals(java.lang.Object)>($r29);

        if $z14 != 0 goto label26;

        z20 = 1;

        goto label27;

     label26:
        z20 = 0;

     label27:
        $r53 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r54 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $l18 = virtualinvoke $r54.<android.view.Choreographer: long getFrameTimeNanos()>();

        $l19 = $l18 / 1000000L;

        $r53.<android.view.View$AttachInfo: long mDrawingTime> = $l19;

        z21 = 0;

        $z22 = virtualinvoke r49.<android.graphics.Rect: boolean isEmpty()>();

        if $z22 == 0 goto label29;

        $z12 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z12 != 0 goto label29;

        if z20 == 0 goto label28;

        goto label29;

     label28:
        goto label49;

     label29:
        $r55 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r56 = $r55.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r56 == null goto label38;

        $r18 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r19 = $r18.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $z9 = virtualinvoke $r19.<android.view.ThreadedRenderer: boolean isEnabled()>();

        if $z9 == 0 goto label38;

        if z20 != 0 goto label31;

        $z11 = r0.<android.view.ViewRootImpl: boolean mInvalidateRootRequested>;

        if $z11 == 0 goto label30;

        goto label31;

     label30:
        z23 = 0;

        goto label32;

     label31:
        z23 = 1;

     label32:
        r0.<android.view.ViewRootImpl: boolean mInvalidateRootRequested> = 0;

        r0.<android.view.ViewRootImpl: boolean mIsAnimating> = 0;

        $i20 = r0.<android.view.ViewRootImpl: int mHardwareYOffset>;

        if $i20 != i16 goto label33;

        $i4 = r0.<android.view.ViewRootImpl: int mHardwareXOffset>;

        if $i4 == i15 goto label34;

     label33:
        r0.<android.view.ViewRootImpl: int mHardwareYOffset> = i16;

        r0.<android.view.ViewRootImpl: int mHardwareXOffset> = i15;

        z23 = 1;

     label34:
        if z23 == 0 goto label35;

        $r26 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r27 = $r26.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r27.<android.view.ThreadedRenderer: void invalidateRoot()>();

     label35:
        virtualinvoke r49.<android.graphics.Rect: void setEmpty()>();

        z24 = specialinvoke r0.<android.view.ViewRootImpl: boolean updateContentDrawBounds()>();

        $z10 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z10 == 0 goto label36;

        $r24 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r25 = $r24.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r25.<android.view.ThreadedRenderer: void setStopped(boolean)>(0);

        goto label36;

     label36:
        if z24 == 0 goto label37;

        specialinvoke r0.<android.view.ViewRootImpl: void requestDrawWindow()>();

     label37:
        z21 = 1;

        $r20 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r23 = $r20.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $r22 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r21 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        virtualinvoke $r23.<android.view.ThreadedRenderer: void draw(android.view.View,android.view.View$AttachInfo,android.view.ThreadedRenderer$DrawCallbacks)>($r22, $r21, r0);

        goto label49;

     label38:
        $r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r10 = $r9.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r10 == null goto label48;

        $r11 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r12 = $r11.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $z5 = virtualinvoke $r12.<android.view.ThreadedRenderer: boolean isEnabled()>();

        if $z5 != 0 goto label47;

        $r13 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r14 = $r13.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $z6 = virtualinvoke $r14.<android.view.ThreadedRenderer: boolean isRequested()>();

        if $z6 == 0 goto label46;

        $r15 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z7 = virtualinvoke $r15.<android.view.Surface: boolean isValid()>();

        if $z7 == 0 goto label45;

     label39:
        $r16 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r57 = $r16.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        i21 = r0.<android.view.ViewRootImpl: int mWidth>;

        i22 = r0.<android.view.ViewRootImpl: int mHeight>;

        r58 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

     label40:
        $r17 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke r57.<android.view.ThreadedRenderer: boolean initializeIfNeeded(int,int,android.view.View$AttachInfo,android.view.Surface,android.graphics.Rect)>(i21, i22, r58, $r17, r46);

     label41:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return 0;

     label42:
        $r40 := @caughtexception;

        r59 = $r40;

        goto label44;

     label43:
        $r41 := @caughtexception;

        r59 = $r41;

     label44:
        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>(r59);

        return 0;

     label45:
        goto label48;

     label46:
        goto label48;

     label47:
        goto label48;

     label48:
        $r60 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z25 = specialinvoke r0.<android.view.ViewRootImpl: boolean drawSoftware(android.view.Surface,android.view.View$AttachInfo,int,int,boolean,android.graphics.Rect,android.graphics.Rect)>(r43, $r60, i15, i16, z0, r49, r46);

        if $z25 != 0 goto label49;

        return 0;

     label49:
        if z19 == 0 goto label50;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label50:
        return z21;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch android.view.Surface$OutOfResourcesException from label39 to label40 with label43;
        catch android.view.Surface$OutOfResourcesException from label40 to label41 with label42;
    }

    private void drawAccessibilityFocusedDrawableIfNeeded(android.graphics.Canvas)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Canvas r1;
        android.graphics.Rect r2;
        android.graphics.drawable.Drawable r3, $r6, $r8;
        android.view.View$AttachInfo $r4, $r5, $r7;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Canvas;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r2 = $r4.<android.view.View$AttachInfo: android.graphics.Rect mTmpInvalRect>;

        $z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean getAccessibilityFocusedRect(android.graphics.Rect)>(r2);

        if $z0 == 0 goto label1;

        r3 = specialinvoke r0.<android.view.ViewRootImpl: android.graphics.drawable.Drawable getAccessibilityFocusedDrawable()>();

        if r3 == null goto label2;

        virtualinvoke r3.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r2);

        virtualinvoke r3.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        goto label2;

     label1:
        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable>;

        if $r6 == null goto label2;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8 = $r7.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable>;

        virtualinvoke $r8.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, 0, 0);

        goto label2;

     label2:
        return;
    }

    private boolean drawSoftware(android.view.Surface, android.view.View$AttachInfo, int, int, boolean, android.graphics.Rect, android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        int i0, i1, $i2, $i3, i7, i8, i9, i10, i11, i12, i13, i14, i15, $i16, $i17, $i18, $i19, i20;
        boolean z0, $z1;
        android.graphics.Rect r1, r16;
        android.view.Surface $r2, r14;
        android.view.View $r3, r19;
        android.content.res.CompatibilityInfo$Translator $r4, $r20;
        java.lang.Throwable $r5, $r7, $r9, $r10, $r13;
        java.lang.String $r6, $r8, $r11;
        android.view.Surface$OutOfResourcesException $r12;
        android.view.View$AttachInfo r15;
        android.graphics.Canvas r17;
        android.graphics.PorterDuff$Mode $r18;
        float $f0, $f1;

        r0 := @this: android.view.ViewRootImpl;

        r14 := @parameter0: android.view.Surface;

        r15 := @parameter1: android.view.View$AttachInfo;

        i7 := @parameter2: int;

        i0 := @parameter3: int;

        z0 := @parameter4: boolean;

        r16 := @parameter5: android.graphics.Rect;

        r1 := @parameter6: android.graphics.Rect;

        if r1 == null goto label01;

        i8 = r1.<android.graphics.Rect: int left>;

        $i3 = r1.<android.graphics.Rect: int top>;

        i9 = i0 + $i3;

        i10 = i7 + i8;

        goto label02;

     label01:
        i9 = i0;

        i10 = i7;

     label02:
        i11 = neg i10;

        i1 = neg i9;

     label03:
        virtualinvoke r16.<android.graphics.Rect: void offset(int,int)>(i11, i1);

        i12 = r16.<android.graphics.Rect: int left>;

        i13 = r16.<android.graphics.Rect: int top>;

        i14 = r16.<android.graphics.Rect: int right>;

        i15 = r16.<android.graphics.Rect: int bottom>;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        r17 = virtualinvoke $r2.<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>(r16);

        $i2 = r0.<android.view.ViewRootImpl: int mDensity>;

        virtualinvoke r17.<android.graphics.Canvas: void setDensity(int)>($i2);

     label04:
        virtualinvoke r16.<android.graphics.Rect: void offset(int,int)>(i10, i9);

     label05:
        $z1 = virtualinvoke r17.<android.graphics.Canvas: boolean isOpaque()>();

        if $z1 == 0 goto label07;

     label06:
        if i0 != 0 goto label07;

        if i7 == 0 goto label08;

     label07:
        $r18 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode CLEAR>;

        virtualinvoke r17.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r18);

     label08:
        virtualinvoke r16.<android.graphics.Rect: void setEmpty()>();

        r0.<android.view.ViewRootImpl: boolean mIsAnimating> = 0;

        r19 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i16 = r19.<android.view.View: int mPrivateFlags>;

        $i17 = $i16 | 32;

        r19.<android.view.View: int mPrivateFlags> = $i17;

        $i18 = neg i7;

        $f0 = (float) $i18;

        $i19 = neg i0;

        $f1 = (float) $i19;

        virtualinvoke r17.<android.graphics.Canvas: void translate(float,float)>($f0, $f1);

        $r20 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r20 == null goto label09;

        $r4 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r4.<android.content.res.CompatibilityInfo$Translator: void translateCanvas(android.graphics.Canvas)>(r17);

     label09:
        if z0 == 0 goto label12;

     label10:
        i20 = r0.<android.view.ViewRootImpl: int mNoncompatDensity>;

     label11:
        goto label13;

     label12:
        i20 = 0;

     label13:
        virtualinvoke r17.<android.graphics.Canvas: void setScreenDensity(int)>(i20);

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r3.<android.view.View: void draw(android.graphics.Canvas)>(r17);

        specialinvoke r0.<android.view.ViewRootImpl: void drawAccessibilityFocusedDrawableIfNeeded(android.graphics.Canvas)>(r17);

     label14:
        virtualinvoke r14.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r17);

     label15:
        return 1;

     label16:
        $r7 := @caughtexception;

        $r8 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, "Could not unlock surface", $r7);

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

     label17:
        return 0;

     label18:
        $r13 := @caughtexception;

     label19:
        virtualinvoke r14.<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>(r17);

     label20:
        throw $r13;

     label21:
        $r10 := @caughtexception;

        $r11 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r11, "Could not unlock surface", $r10);

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        goto label17;

     label22:
        $r9 := @caughtexception;

        goto label29;

     label23:
        $r5 := @caughtexception;

     label24:
        $r6 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, "Could not lock surface", $r5);

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

     label25:
        virtualinvoke r16.<android.graphics.Rect: void offset(int,int)>(i10, i9);

        return 0;

     label26:
        $r12 := @caughtexception;

     label27:
        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>($r12);

     label28:
        virtualinvoke r16.<android.graphics.Rect: void offset(int,int)>(i10, i9);

        return 0;

     label29:
        virtualinvoke r16.<android.graphics.Rect: void offset(int,int)>(i10, i9);

        throw $r9;

        catch android.view.Surface$OutOfResourcesException from label03 to label04 with label26;
        catch java.lang.IllegalArgumentException from label03 to label04 with label23;
        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.IllegalArgumentException from label14 to label15 with label16;
        catch java.lang.IllegalArgumentException from label19 to label20 with label21;
        catch java.lang.Throwable from label24 to label25 with label22;
        catch java.lang.Throwable from label27 to label28 with label22;
    }

    private void dumpViewHierarchy(java.lang.String, java.io.PrintWriter, android.view.View)
    {
        android.view.ViewRootImpl r0;
        java.io.PrintWriter r1;
        int i0, i1;
        java.lang.String $r3, r8, r11;
        boolean $z0;
        java.lang.StringBuilder $r4;
        android.view.View $r7, r9;
        android.view.ViewGroup r10;

        r0 := @this: android.view.ViewRootImpl;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.PrintWriter;

        r9 := @parameter2: android.view.View;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r8);

        if r9 != null goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("null");

        return;

     label1:
        $r3 = virtualinvoke r9.<android.view.View: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r3);

        $z0 = r9 instanceof android.view.ViewGroup;

        if $z0 != 0 goto label2;

        return;

     label2:
        r10 = (android.view.ViewGroup) r9;

        i0 = virtualinvoke r10.<android.view.ViewGroup: int getChildCount()>();

        if i0 > 0 goto label3;

        return;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = 0;

     label4:
        if i1 >= i0 goto label5;

        $r7 = virtualinvoke r10.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        specialinvoke r0.<android.view.ViewRootImpl: void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View)>(r11, r1, $r7);

        i1 = i1 + 1;

        goto label4;

     label5:
        return;
    }

    private void enableHardwareAcceleration(android.view.WindowManager$LayoutParams)
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r1, $r3, $r5, $r7, r9, $r14, $r19, $r21, r23;
        android.content.res.CompatibilityInfo$Translator $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        boolean $z0, $z1, $z2, z3, z4, z5, z6, z7, z8, $z9;
        android.view.ThreadedRenderer $r4, $r6, $r18, $r20, $r22;
        android.view.WindowManager$LayoutParams r8;
        android.graphics.Rect r10;
        android.content.Context $r11, $r15;
        android.content.res.Resources $r12;
        android.content.res.Configuration $r13;
        java.lang.CharSequence $r16;
        java.lang.String $r17;

        r0 := @this: android.view.ViewRootImpl;

        r8 := @parameter0: android.view.WindowManager$LayoutParams;

        r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        z3 = 0;

        r9.<android.view.View$AttachInfo: boolean mHardwareAccelerated> = 0;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r1.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested> = 0;

        $r2 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r2 == null goto label01;

        return;

     label01:
        $i0 = r8.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 16777216;

        if $i1 == 0 goto label02;

        z4 = 1;

        goto label03;

     label02:
        z4 = 0;

     label03:
        if z4 == 0 goto label19;

        $z0 = staticinvoke <android.view.ThreadedRenderer: boolean isAvailable()>();

        if $z0 != 0 goto label04;

        return;

     label04:
        $i2 = r8.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i3 = $i2 & 1;

        if $i3 == 0 goto label05;

        z5 = 1;

        goto label06;

     label05:
        z5 = 0;

     label06:
        $i4 = r8.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i5 = $i4 & 2;

        if $i5 == 0 goto label07;

        z6 = 1;

        goto label08;

     label07:
        z6 = 0;

     label08:
        if z5 == 0 goto label09;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested> = 1;

        goto label19;

     label09:
        $z1 = <android.view.ThreadedRenderer: boolean sRendererDisabled>;

        if $z1 == 0 goto label10;

        $z2 = <android.view.ThreadedRenderer: boolean sSystemRendererDisabled>;

        if $z2 == 0 goto label19;

        if z6 == 0 goto label19;

     label10:
        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r4 == null goto label11;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r6.<android.view.ThreadedRenderer: void destroy()>();

     label11:
        r10 = r8.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i6 = r10.<android.graphics.Rect: int left>;

        if $i6 != 0 goto label13;

        $i8 = r10.<android.graphics.Rect: int right>;

        if $i8 != 0 goto label13;

        $i9 = r10.<android.graphics.Rect: int top>;

        if $i9 != 0 goto label13;

        $i10 = r10.<android.graphics.Rect: int bottom>;

        if $i10 == 0 goto label12;

        goto label13;

     label12:
        z7 = 0;

        goto label14;

     label13:
        z7 = 1;

     label14:
        $i11 = r8.<android.view.WindowManager$LayoutParams: int format>;

        if $i11 != -1 goto label16;

        if z7 == 0 goto label15;

        goto label16;

     label15:
        z8 = 0;

        goto label17;

     label16:
        z8 = 1;

     label17:
        $r11 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: android.content.res.Resources getResources()>();

        $r13 = virtualinvoke $r12.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $z9 = virtualinvoke $r13.<android.content.res.Configuration: boolean isScreenWideColorGamut()>();

        if $z9 == 0 goto label18;

        $i7 = virtualinvoke r8.<android.view.WindowManager$LayoutParams: int getColorMode()>();

        if $i7 != 1 goto label18;

        z3 = 1;

        goto label18;

     label18:
        $r14 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r15 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r16 = virtualinvoke r8.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r17 = interfaceinvoke $r16.<java.lang.CharSequence: java.lang.String toString()>();

        $r18 = staticinvoke <android.view.ThreadedRenderer: android.view.ThreadedRenderer create(android.content.Context,boolean,java.lang.String)>($r15, z8, $r17);

        $r14.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer> = $r18;

        $r19 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r20 = $r19.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r20.<android.view.ThreadedRenderer: void setWideGamut(boolean)>(z3);

        specialinvoke r0.<android.view.ViewRootImpl: void updateForceDarkMode()>();

        $r21 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r22 = $r21.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r22 == null goto label19;

        r23 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r23.<android.view.View$AttachInfo: boolean mHardwareAccelerationRequested> = 1;

        r23.<android.view.View$AttachInfo: boolean mHardwareAccelerated> = 1;

     label19:
        return;
    }

    private void endDragResizing()
    {
        android.view.ViewRootImpl r0;
        boolean $z0, $z1;
        java.util.ArrayList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        android.view.WindowCallbacks $r4;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mDragResizing>;

        if $z0 == 0 goto label3;

        r0.<android.view.ViewRootImpl: boolean mDragResizing> = 0;

        $z1 = r0.<android.view.ViewRootImpl: boolean mUseMTRenderer>;

        if $z1 == 0 goto label2;

        $r1 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r4 = (android.view.WindowCallbacks) $r3;

        interfaceinvoke $r4.<android.view.WindowCallbacks: void onWindowDragResizeEnd()>();

        i1 = i1 + -1;

        goto label1;

     label2:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label3:
        return;
    }

    private boolean ensureTouchModeLocally(boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r1, $r2, $r3;
        boolean $z0, z1, z2;
        android.view.ViewTreeObserver $r4;

        r0 := @this: android.view.ViewRootImpl;

        z1 := @parameter0: boolean;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r1.<android.view.View$AttachInfo: boolean mInTouchMode>;

        if $z0 != z1 goto label1;

        return 0;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2.<android.view.View$AttachInfo: boolean mInTouchMode> = z1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r4.<android.view.ViewTreeObserver: void dispatchOnTouchModeChanged(boolean)>(z1);

        if z1 == 0 goto label2;

        z2 = specialinvoke r0.<android.view.ViewRootImpl: boolean enterTouchMode()>();

        goto label3;

     label2:
        z2 = specialinvoke r0.<android.view.ViewRootImpl: boolean leaveTouchMode()>();

     label3:
        return z2;
    }

    private boolean enterTouchMode()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2, r3;
        boolean $z0, $z1, $z2;
        android.view.ViewGroup r4;

        r0 := @this: android.view.ViewRootImpl;

        r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r3 == null goto label2;

        $z0 = virtualinvoke r3.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r1 = virtualinvoke $r2.<android.view.View: android.view.View findFocus()>();

        if r1 == null goto label2;

        $z1 = virtualinvoke r1.<android.view.View: boolean isFocusableInTouchMode()>();

        if $z1 != 0 goto label2;

        r4 = staticinvoke <android.view.ViewRootImpl: android.view.ViewGroup findAncestorToTakeFocusInTouchMode(android.view.View)>(r1);

        if r4 == null goto label1;

        $z2 = virtualinvoke r4.<android.view.ViewGroup: boolean requestFocus()>();

        return $z2;

     label1:
        virtualinvoke r1.<android.view.View: void clearFocusInternal(android.view.View,boolean,boolean)>(null, 1, 0);

        return 1;

     label2:
        return 0;
    }

    private static android.view.ViewGroup findAncestorToTakeFocusInTouchMode(android.view.View)
    {
        boolean $z0, $z1, $z2;
        int $i0;
        android.view.View r0;
        android.view.ViewParent r1;
        android.view.ViewGroup r2;

        r0 := @parameter0: android.view.View;

        r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>();

     label1:
        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label4;

        r2 = (android.view.ViewGroup) r1;

        $i0 = virtualinvoke r2.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 != 262144 goto label2;

        $z2 = virtualinvoke r2.<android.view.ViewGroup: boolean isFocusableInTouchMode()>();

        if $z2 == 0 goto label2;

        return r2;

     label2:
        $z1 = virtualinvoke r2.<android.view.ViewGroup: boolean isRootNamespace()>();

        if $z1 == 0 goto label3;

        return null;

     label3:
        r1 = virtualinvoke r2.<android.view.ViewGroup: android.view.ViewParent getParent()>();

        goto label1;

     label4:
        return null;
    }

    private android.view.accessibility.AccessibilityNodeInfo findFocusedVirtualNode(android.view.accessibility.AccessibilityNodeProvider)
    {
        android.view.ViewRootImpl r0;
        android.view.accessibility.AccessibilityNodeProvider r1;
        android.util.LongArray r2;
        int i0, $i1, $i3, i4;
        android.view.accessibility.AccessibilityNodeInfo r3, r7, r8, r10;
        android.content.Context $r4;
        boolean $z0, $z1, $z3, $z5;
        java.util.LinkedList $r5;
        java.lang.Object $r6;
        long $l2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeProvider;

        r7 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo findFocus(int)>(1);

        if r7 == null goto label01;

        return r7;

     label01:
        $r4 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $z0 = virtualinvoke $r4.<android.content.Context: boolean isAutofillCompatibilityEnabled()>();

        if $z0 != 0 goto label02;

        return null;

     label02:
        r8 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>(-1);

        $z1 = virtualinvoke r8.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>();

        if $z1 == 0 goto label03;

        return r8;

     label03:
        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        interfaceinvoke $r5.<java.util.Queue: boolean offer(java.lang.Object)>(r8);

     label04:
        $z5 = interfaceinvoke $r5.<java.util.Queue: boolean isEmpty()>();

        if $z5 != 0 goto label10;

        $r6 = interfaceinvoke $r5.<java.util.Queue: java.lang.Object poll()>();

        r10 = (android.view.accessibility.AccessibilityNodeInfo) $r6;

        r2 = virtualinvoke r10.<android.view.accessibility.AccessibilityNodeInfo: android.util.LongArray getChildNodeIds()>();

        if r2 == null goto label04;

        $i1 = virtualinvoke r2.<android.util.LongArray: int size()>();

        if $i1 > 0 goto label05;

        goto label04;

     label05:
        i0 = virtualinvoke r2.<android.util.LongArray: int size()>();

        i4 = 0;

     label06:
        if i4 >= i0 goto label09;

        $l2 = virtualinvoke r2.<android.util.LongArray: long get(int)>(i4);

        $i3 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l2);

        r3 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>($i3);

        if r3 == null goto label08;

        $z3 = virtualinvoke r3.<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>();

        if $z3 == 0 goto label07;

        return r3;

     label07:
        interfaceinvoke $r5.<java.util.Queue: boolean offer(java.lang.Object)>(r3);

     label08:
        i4 = i4 + 1;

        goto label06;

     label09:
        virtualinvoke r10.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

        goto label04;

     label10:
        return null;
    }

    private void finishBLASTSync(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;
        android.view.SurfaceControl$Transaction $r1, $r2, $r4;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        r0.<android.view.ViewRootImpl: boolean mSendNextFrameToWm> = 0;

        $z1 = r0.<android.view.ViewRootImpl: boolean mNextReportConsumeBLAST>;

        if $z1 == 0 goto label2;

        r0.<android.view.ViewRootImpl: boolean mNextReportConsumeBLAST> = 0;

        if z0 == 0 goto label1;

        $r4 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mRtBLASTSyncTransaction>;

        virtualinvoke $r4.<android.view.SurfaceControl$Transaction: void apply()>();

        goto label2;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mSurfaceChangedTransaction>;

        $r1 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mRtBLASTSyncTransaction>;

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction merge(android.view.SurfaceControl$Transaction)>($r1);

     label2:
        return;
    }

    private void finishInputEvent(android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        int i0, $i1, $i2, $i3, $i4;
        android.view.InputEvent r1, $r2, $r4, $r5, $r7;
        android.view.InputEventReceiver $r3, $r6, $r9;
        android.view.InputEventCompatProcessor $r8;
        java.lang.Throwable $r10;
        android.view.ViewRootImpl$QueuedInputEvent r11;
        boolean z0, z1;

        r0 := @this: android.view.ViewRootImpl;

        r11 := @parameter0: android.view.ViewRootImpl$QueuedInputEvent;

        $r2 = r11.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        $i1 = virtualinvoke $r2.<android.view.InputEvent: int getId()>();

        staticinvoke <android.os.Trace: void asyncTraceEnd(long,java.lang.String,int)>(8L, "deliverInputEvent", $i1);

        $r3 = r11.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver>;

        if $r3 == null goto label11;

        i0 = r11.<android.view.ViewRootImpl$QueuedInputEvent: int mFlags>;

        z0 = 1;

        $i2 = i0 & 8;

        if $i2 == 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        $i3 = r11.<android.view.ViewRootImpl$QueuedInputEvent: int mFlags>;

        $i4 = $i3 & 64;

        if $i4 == 0 goto label03;

        goto label04;

     label03:
        z0 = 0;

     label04:
        if z0 == 0 goto label09;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "processInputEventBeforeFinish");

     label05:
        $r8 = r0.<android.view.ViewRootImpl: android.view.InputEventCompatProcessor mInputCompatProcessor>;

        $r7 = r11.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        r1 = virtualinvoke $r8.<android.view.InputEventCompatProcessor: android.view.InputEvent processInputEventBeforeFinish(android.view.InputEvent)>($r7);

     label06:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        if r1 == null goto label07;

        $r9 = r11.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver>;

        virtualinvoke $r9.<android.view.InputEventReceiver: void finishInputEvent(android.view.InputEvent,boolean)>(r1, z1);

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw $r10;

     label09:
        $r6 = r11.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver>;

        $r5 = r11.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        virtualinvoke $r6.<android.view.InputEventReceiver: void finishInputEvent(android.view.InputEvent,boolean)>($r5, z1);

     label10:
        goto label12;

     label11:
        $r4 = r11.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        virtualinvoke $r4.<android.view.InputEvent: void recycleIfNeededAfterDispatch()>();

     label12:
        specialinvoke r0.<android.view.ViewRootImpl: void recycleQueuedInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r11);

        return;

        catch java.lang.Throwable from label05 to label06 with label08;
    }

    private void fireAccessibilityFocusEventIfHasFocusedNode()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r5;
        android.view.accessibility.AccessibilityNodeInfo r2;
        int i0;
        android.content.Context $r3;
        android.view.accessibility.AccessibilityManager $r4;
        boolean $z0, $z1, $z2, $z4;
        long $l1;
        java.lang.CharSequence $r6, $r7, $r9;
        java.util.List $r8;
        android.view.ViewParent $r10;
        android.view.accessibility.AccessibilityNodeProvider r11;
        android.view.accessibility.AccessibilityEvent r12;

        r0 := @this: android.view.ViewRootImpl;

        $r3 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r4 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r3);

        $z0 = virtualinvoke $r4.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r1 = virtualinvoke $r5.<android.view.View: android.view.View findFocus()>();

        if r1 != null goto label2;

        return;

     label2:
        r11 = virtualinvoke r1.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r11 != null goto label3;

        virtualinvoke r1.<android.view.View: void sendAccessibilityEvent(int)>(8);

        goto label4;

     label3:
        r2 = specialinvoke r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo findFocusedVirtualNode(android.view.accessibility.AccessibilityNodeProvider)>(r11);

        if r2 == null goto label4;

        $l1 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        i0 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l1);

        r12 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(8);

        virtualinvoke r12.<android.view.accessibility.AccessibilityEvent: void setSource(android.view.View,int)>(r1, i0);

        $r6 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>();

        virtualinvoke r12.<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>($r6);

        $z1 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>();

        virtualinvoke r12.<android.view.accessibility.AccessibilityEvent: void setChecked(boolean)>($z1);

        $r7 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        virtualinvoke r12.<android.view.accessibility.AccessibilityEvent: void setContentDescription(java.lang.CharSequence)>($r7);

        $z2 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>();

        virtualinvoke r12.<android.view.accessibility.AccessibilityEvent: void setPassword(boolean)>($z2);

        $r8 = virtualinvoke r12.<android.view.accessibility.AccessibilityEvent: java.util.List getText()>();

        $r9 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>($r9);

        $z4 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>();

        virtualinvoke r12.<android.view.accessibility.AccessibilityEvent: void setEnabled(boolean)>($z4);

        $r10 = virtualinvoke r1.<android.view.View: android.view.ViewParent getParent()>();

        interfaceinvoke $r10.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r1, r12);

        virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

     label4:
        return;
    }

    private static void forceLayout(android.view.View)
    {
        int i0, i1;
        boolean $z0;
        android.view.View $r0, r1;
        android.view.ViewGroup r2;

        r1 := @parameter0: android.view.View;

        virtualinvoke r1.<android.view.View: void forceLayout()>();

        $z0 = r1 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r2 = (android.view.ViewGroup) r1;

        i0 = virtualinvoke r2.<android.view.ViewGroup: int getChildCount()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r0 = virtualinvoke r2.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        staticinvoke <android.view.ViewRootImpl: void forceLayout(android.view.View)>($r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private android.graphics.drawable.Drawable getAccessibilityFocusedDrawable()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r2, $r10, $r12;
        android.graphics.drawable.Drawable $r3, $r11, $r13;
        android.util.TypedValue $r4;
        android.view.View $r5, $r8;
        android.content.Context $r6, $r9;
        android.content.res.Resources$Theme $r7;
        boolean $z0;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable>;

        if $r3 != null goto label1;

        $r4 = new android.util.TypedValue;

        specialinvoke $r4.<android.util.TypedValue: void <init>()>();

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r6 = $r5.<android.view.View: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        $z0 = virtualinvoke $r7.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(17956871, $r4, 1);

        if $z0 == 0 goto label1;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r9 = $r8.<android.view.View: android.content.Context mContext>;

        $i0 = $r4.<android.util.TypedValue: int resourceId>;

        $r11 = virtualinvoke $r9.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>($i0);

        $r10.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable> = $r11;

     label1:
        $r12 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r13 = $r12.<android.view.View$AttachInfo: android.graphics.drawable.Drawable mAccessibilityFocusDrawable>;

        return $r13;
    }

    private boolean getAccessibilityFocusedRect(android.graphics.Rect)
    {
        android.view.ViewRootImpl r0, $r6, $r7, $r8;
        android.graphics.Rect r1;
        android.view.View $r2, r10;
        android.content.Context $r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.view.View$AttachInfo $r4, r12;
        android.view.accessibility.AccessibilityNodeProvider $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        android.view.accessibility.AccessibilityManager r9;
        android.view.accessibility.AccessibilityNodeInfo r11;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r3 = $r2.<android.view.View: android.content.Context mContext>;

        r9 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r3);

        $z0 = virtualinvoke r9.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label8;

        $z1 = virtualinvoke r9.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z1 != 0 goto label1;

        goto label8;

     label1:
        r10 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        if r10 == null goto label7;

        $r4 = r10.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r4 != null goto label2;

        goto label7;

     label2:
        $r5 = virtualinvoke r10.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $r5 != null goto label3;

        virtualinvoke r10.<android.view.View: void getBoundsOnScreen(android.graphics.Rect,boolean)>(r1, 1);

        goto label4;

     label3:
        r11 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        if r11 == null goto label6;

        virtualinvoke r11.<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>(r1);

     label4:
        r12 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = r12.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $i0 = $r6.<android.view.ViewRootImpl: int mScrollY>;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>(0, $i0);

        $i1 = r12.<android.view.View$AttachInfo: int mWindowLeft>;

        $i4 = neg $i1;

        $i2 = r12.<android.view.View$AttachInfo: int mWindowTop>;

        $i3 = neg $i2;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i4, $i3);

        $r7 = r12.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $i6 = $r7.<android.view.ViewRootImpl: int mWidth>;

        $r8 = r12.<android.view.View$AttachInfo: android.view.ViewRootImpl mViewRootImpl>;

        $i5 = $r8.<android.view.ViewRootImpl: int mHeight>;

        $z2 = virtualinvoke r1.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i6, $i5);

        if $z2 != 0 goto label5;

        virtualinvoke r1.<android.graphics.Rect: void setEmpty()>();

     label5:
        $z3 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        $z4 = $z3 ^ 1;

        return $z4;

     label6:
        return 0;

     label7:
        return 0;

     label8:
        return 0;
    }

    private android.media.AudioManager getAudioManager()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        java.lang.IllegalStateException $r2;
        android.media.AudioManager $r3, $r4, $r7;
        android.content.Context $r5;
        java.lang.Object $r6;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 == null goto label2;

        $r3 = r0.<android.view.ViewRootImpl: android.media.AudioManager mAudioManager>;

        if $r3 != null goto label1;

        $r5 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r7 = (android.media.AudioManager) $r6;

        r0.<android.view.ViewRootImpl: android.media.AudioManager mAudioManager> = $r7;

     label1:
        $r4 = r0.<android.view.ViewRootImpl: android.media.AudioManager mAudioManager>;

        return $r4;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getAudioManager called when there is no mView");

        throw $r2;
    }

    private android.view.autofill.AutofillManager getAutofillManager()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        int $i0;
        android.view.View $r1, r5;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.view.autofill.AutofillManager $r4;
        android.view.ViewGroup r6;

        r0 := @this: android.view.ViewRootImpl;

        r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = r5 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label1;

        r6 = (android.view.ViewGroup) r5;

        $i0 = virtualinvoke r6.<android.view.ViewGroup: int getChildCount()>();

        if $i0 <= 0 goto label1;

        $r1 = virtualinvoke r6.<android.view.ViewGroup: android.view.View getChildAt(int)>(0);

        $r2 = virtualinvoke $r1.<android.view.View: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/view/autofill/AutofillManager;");

        $r4 = (android.view.autofill.AutofillManager) $r3;

        return $r4;

     label1:
        return null;
    }

    private android.view.View getCommonPredecessor(android.view.View, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r5, r7;
        java.util.HashSet r2, $r3, $r4;
        boolean $z0, $z1, $z3;
        android.view.ViewParent r6, r8;

        r0 := @this: android.view.ViewRootImpl;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.View;

        $r3 = r0.<android.view.ViewRootImpl: java.util.HashSet mTempHashSet>;

        if $r3 != null goto label01;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.HashSet mTempHashSet> = $r4;

     label01:
        r2 = r0.<android.view.ViewRootImpl: java.util.HashSet mTempHashSet>;

        virtualinvoke r2.<java.util.HashSet: void clear()>();

     label02:
        if r5 == null goto label05;

        virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r5);

        r6 = r5.<android.view.View: android.view.ViewParent mParent>;

        $z3 = r6 instanceof android.view.View;

        if $z3 == 0 goto label03;

        r5 = (android.view.View) r6;

        goto label04;

     label03:
        r5 = null;

     label04:
        goto label02;

     label05:
        r7 = r1;

     label06:
        if r7 == null goto label10;

        $z0 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r7);

        if $z0 == 0 goto label07;

        virtualinvoke r2.<java.util.HashSet: void clear()>();

        return r7;

     label07:
        r8 = r7.<android.view.View: android.view.ViewParent mParent>;

        $z1 = r8 instanceof android.view.View;

        if $z1 == 0 goto label08;

        r7 = (android.view.View) r8;

        goto label09;

     label08:
        r7 = null;

     label09:
        goto label06;

     label10:
        virtualinvoke r2.<java.util.HashSet: void clear()>();

        return null;
    }

    private int getImpliedSystemUiVisibility(android.view.WindowManager$LayoutParams)
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams r1;
        int $i0, $i1, $i2, $i3;
        short s4, s5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        s4 = 0;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 67108864;

        if $i1 == 0 goto label1;

        s4 = 0 | 1280;

     label1:
        s5 = s4;

        $i2 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i3 = $i2 & 134217728;

        if $i3 == 0 goto label2;

        s5 = s4 | 768;

     label2:
        return s5;
    }

    private int getNightMode()
    {
        android.view.ViewRootImpl r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        android.content.res.Configuration $r3;
        int $i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i0 = $r3.<android.content.res.Configuration: int uiMode>;

        $i1 = $i0 & 48;

        return $i1;
    }

    private static int getRootMeasureSpec(int, int)
    {
        int i0, i1, i2;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        if i0 == -2 goto label2;

        if i0 == -1 goto label1;

        i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i0, 1073741824);

        goto label3;

     label1:
        i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i1, 1073741824);

        goto label3;

     label2:
        i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i1, -2147483648);

     label3:
        return i2;
    }

    static android.view.HandlerActionQueue getRunQueue()
    {
        java.lang.ThreadLocal $r0, $r3;
        java.lang.Object $r1;
        android.view.HandlerActionQueue $r2, r4;

        $r0 = <android.view.ViewRootImpl: java.lang.ThreadLocal sRunQueues>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r4 = (android.view.HandlerActionQueue) $r1;

        if r4 == null goto label1;

        return r4;

     label1:
        $r2 = new android.view.HandlerActionQueue;

        specialinvoke $r2.<android.view.HandlerActionQueue: void <init>()>();

        $r3 = <android.view.ViewRootImpl: java.lang.ThreadLocal sRunQueues>;

        virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>($r2);

        return $r2;
    }

    private android.view.View getSourceForAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.accessibility.AccessibilityEvent r1;
        int i0;
        long $l1;
        android.view.accessibility.AccessibilityNodeIdManager $r2;
        android.view.View $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $l1 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        i0 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getAccessibilityViewId(long)>($l1);

        $r2 = staticinvoke <android.view.accessibility.AccessibilityNodeIdManager: android.view.accessibility.AccessibilityNodeIdManager getInstance()>();

        $r3 = virtualinvoke $r2.<android.view.accessibility.AccessibilityNodeIdManager: android.view.View findView(int)>(i0);

        return $r3;
    }

    private java.util.ArrayList getValidLayoutRequesters(java.util.ArrayList, boolean)
    {
        android.view.ViewRootImpl r0;
        java.util.ArrayList r1, $r9, r12, r13;
        boolean z0, $z2, $z4, z5;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9, i10;
        android.view.View r2, r14, r15;
        java.lang.Object $r3, $r6;
        android.view.ViewParent $r4, $r5, $r8, $r10, $r11;
        android.view.View$AttachInfo $r7;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.util.ArrayList;

        z0 := @parameter1: boolean;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        r12 = null;

        i9 = 0;

     label01:
        if i9 >= i0 goto label09;

        $r6 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        r2 = (android.view.View) $r6;

        r13 = r12;

        if r2 == null goto label08;

        r13 = r12;

        $r7 = r2.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r7 == null goto label08;

        r13 = r12;

        $r8 = r2.<android.view.View: android.view.ViewParent mParent>;

        if $r8 == null goto label08;

        if z0 != 0 goto label02;

        r13 = r12;

        $i7 = r2.<android.view.View: int mPrivateFlags>;

        $i8 = $i7 & 4096;

        if $i8 != 4096 goto label08;

     label02:
        r14 = r2;

     label03:
        z5 = 0;

        if r14 == null goto label06;

        $i5 = r14.<android.view.View: int mViewFlags>;

        $i6 = $i5 & 12;

        if $i6 != 8 goto label04;

        z5 = 1;

        goto label06;

     label04:
        $r10 = r14.<android.view.View: android.view.ViewParent mParent>;

        $z4 = $r10 instanceof android.view.View;

        if $z4 == 0 goto label05;

        $r11 = r14.<android.view.View: android.view.ViewParent mParent>;

        r14 = (android.view.View) $r11;

        goto label03;

     label05:
        r14 = null;

        goto label03;

     label06:
        r13 = r12;

        if z5 != 0 goto label08;

        r13 = r12;

        if r12 != null goto label07;

        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r13 = $r9;

     label07:
        virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label08:
        i9 = i9 + 1;

        r12 = r13;

        goto label01;

     label09:
        if z0 != 0 goto label14;

        i10 = 0;

     label10:
        if i10 >= i0 goto label14;

        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        r15 = (android.view.View) $r3;

     label11:
        if r15 == null goto label13;

        $i1 = r15.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 4096;

        if $i2 == 0 goto label13;

        $i3 = r15.<android.view.View: int mPrivateFlags>;

        $i4 = $i3 & -4097;

        r15.<android.view.View: int mPrivateFlags> = $i4;

        $r4 = r15.<android.view.View: android.view.ViewParent mParent>;

        $z2 = $r4 instanceof android.view.View;

        if $z2 == 0 goto label12;

        $r5 = r15.<android.view.View: android.view.ViewParent mParent>;

        r15 = (android.view.View) $r5;

        goto label11;

     label12:
        r15 = null;

        goto label11;

     label13:
        i10 = i10 + 1;

        goto label10;

     label14:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        return r12;
    }

    private void handleContentCaptureFlush()
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;
        android.view.View$AttachInfo $r1;
        java.lang.StringBuilder $r2;
        java.lang.Class $r4;
        java.lang.String $r5, $r7;
        java.lang.Throwable $r8;
        android.view.contentcapture.ContentCaptureManager r10;

        r0 := @this: android.view.ViewRootImpl;

        $z1 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(8L);

        if $z1 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("flushContentCapture for ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, $r7);

     label1:
        z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean isContentCaptureEnabled()>();

     label2:
        if z0 != 0 goto label3;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label3:
        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r10 = $r1.<android.view.View$AttachInfo: android.view.contentcapture.ContentCaptureManager mContentCaptureManager>;

     label4:
        if r10 != null goto label7;

     label5:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ViewRootImpl", "No ContentCapture on AttachInfo");

     label6:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label7:
        virtualinvoke r10.<android.view.contentcapture.ContentCaptureManager: void flush(int)>(2);

     label8:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label9:
        $r8 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label3 to label4 with label9;
        catch java.lang.Throwable from label5 to label6 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    private void handleDispatchSystemUiVisibilityChanged(android.view.ViewRootImpl$SystemUiVisibilityInfo)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$SystemUiVisibilityInfo r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.View $r2, $r3, $r5;
        android.view.View$AttachInfo $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$SystemUiVisibilityInfo;

        $i2 = r0.<android.view.ViewRootImpl: int mSeq>;

        $i1 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int seq>;

        if $i2 == $i1 goto label1;

        $i8 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if $i8 == 2 goto label1;

        $i9 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int seq>;

        r0.<android.view.ViewRootImpl: int mSeq> = $i9;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4.<android.view.View$AttachInfo: boolean mForceReportNewAttributes> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r5 != null goto label2;

        return;

     label2:
        $i3 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges>;

        if $i3 == 0 goto label3;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i7 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localValue>;

        $i6 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges>;

        virtualinvoke $r3.<android.view.View: boolean updateLocalSystemUiVisibility(int,int)>($i7, $i6);

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges> = 0;

     label3:
        $i4 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility>;

        i0 = $i4 & 7;

        $i5 = r0.<android.view.ViewRootImpl: int mDispatchedSystemUiVisibility>;

        if $i5 == i0 goto label4;

        r0.<android.view.ViewRootImpl: int mDispatchedSystemUiVisibility> = i0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r2.<android.view.View: void dispatchSystemUiVisibilityChanged(int)>(i0);

     label4:
        return;
    }

    private void handleDragEvent(android.view.DragEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.DragEvent r1;
        int i0, i1;
        boolean z0, $z1, $z2, $z3;
        java.lang.StringBuilder r2;
        android.view.View $r3, $r19, $r28, r35, $r36, $r37;
        android.content.ClipDescription $r4, $r29;
        float $f0, $f1, $f2, $f3, $f4;
        android.graphics.PointF $r5, $r6, $r7, $r26, $r27;
        android.view.View$AttachInfo $r8, $r9, $r11, $r13;
        android.view.Surface $r10, $r12;
        java.lang.String $r16, $r31, $r33, r39;
        android.view.ViewRootImpl$W $r17, $r20, $r22;
        android.view.IWindowSession $r18, $r21, $r23;
        android.content.ClipData $r24, $r25;
        android.os.RemoteException $r30, $r32;
        android.content.res.CompatibilityInfo$Translator r34;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.DragEvent;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r3 == null goto label21;

        $z1 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z1 == 0 goto label21;

        i0 = r1.<android.view.DragEvent: int mAction>;

        if i0 != 1 goto label01;

        r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView> = null;

        $r29 = r1.<android.view.DragEvent: android.content.ClipDescription mClipDescription>;

        r0.<android.view.ViewRootImpl: android.content.ClipDescription mDragDescription> = $r29;

        goto label03;

     label01:
        if i0 != 4 goto label02;

        r0.<android.view.ViewRootImpl: android.content.ClipDescription mDragDescription> = null;

     label02:
        $r4 = r0.<android.view.ViewRootImpl: android.content.ClipDescription mDragDescription>;

        r1.<android.view.DragEvent: android.content.ClipDescription mClipDescription> = $r4;

     label03:
        if i0 != 6 goto label05;

        $z3 = <android.view.View: boolean sCascadedDragDrop>;

        if $z3 == 0 goto label04;

        $r28 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r28.<android.view.View: boolean dispatchDragEnterExitInPreN(android.view.DragEvent)>(r1);

     label04:
        virtualinvoke r0.<android.view.ViewRootImpl: void setDragFocus(android.view.View,android.view.DragEvent)>(null, r1);

        goto label21;

     label05:
        if i0 == 2 goto label06;

        if i0 != 3 goto label09;

     label06:
        $r5 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $f1 = r1.<android.view.DragEvent: float mX>;

        $f0 = r1.<android.view.DragEvent: float mY>;

        virtualinvoke $r5.<android.graphics.PointF: void set(float,float)>($f1, $f0);

        r34 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if r34 == null goto label07;

        $r27 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        virtualinvoke r34.<android.content.res.CompatibilityInfo$Translator: void translatePointInScreenToAppWindow(android.graphics.PointF)>($r27);

     label07:
        i1 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if i1 == 0 goto label08;

        $r26 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $f4 = (float) i1;

        virtualinvoke $r26.<android.graphics.PointF: void offset(float,float)>(0.0F, $f4);

     label08:
        $r6 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $f2 = $r6.<android.graphics.PointF: float x>;

        r1.<android.view.DragEvent: float mX> = $f2;

        $r7 = r0.<android.view.ViewRootImpl: android.graphics.PointF mDragPoint>;

        $f3 = $r7.<android.graphics.PointF: float y>;

        r1.<android.view.DragEvent: float mY> = $f3;

     label09:
        r35 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if i0 != 3 goto label10;

        $r24 = r1.<android.view.DragEvent: android.content.ClipData mClipData>;

        if $r24 == null goto label10;

        $r25 = r1.<android.view.DragEvent: android.content.ClipData mClipData>;

        virtualinvoke $r25.<android.content.ClipData: void prepareToEnterProcess()>();

     label10:
        $r36 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        z0 = virtualinvoke $r36.<android.view.View: boolean dispatchDragEvent(android.view.DragEvent)>(r1);

        if i0 != 2 goto label11;

        $z2 = r1.<android.view.DragEvent: boolean mEventHandlerWasCalled>;

        if $z2 != 0 goto label11;

        virtualinvoke r0.<android.view.ViewRootImpl: void setDragFocus(android.view.View,android.view.DragEvent)>(null, r1);

     label11:
        $r37 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if r35 == $r37 goto label16;

        if r35 == null goto label13;

     label12:
        $r23 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r22 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r23.<android.view.IWindowSession: void dragRecipientExited(android.view.IWindow)>($r22);

     label13:
        $r19 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if $r19 == null goto label14;

        $r21 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r20 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r21.<android.view.IWindowSession: void dragRecipientEntered(android.view.IWindow)>($r20);

     label14:
        goto label16;

     label15:
        $r32 := @caughtexception;

        $r33 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r33, "Unable to note drag target change");

     label16:
        if i0 != 3 goto label20;

     label17:
        r39 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reporting drop result: ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r16 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>(r39, $r16);

        $r18 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r17 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r18.<android.view.IWindowSession: void reportDropResult(android.view.IWindow,boolean)>($r17, z0);

     label18:
        goto label20;

     label19:
        $r30 := @caughtexception;

        $r31 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r31, "Unable to report drop result");

     label20:
        if i0 != 4 goto label21;

        r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView> = null;

        virtualinvoke r0.<android.view.ViewRootImpl: void setLocalDragState(java.lang.Object)>(null);

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8.<android.view.View$AttachInfo: android.os.IBinder mDragToken> = null;

        $r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r10 = $r9.<android.view.View$AttachInfo: android.view.Surface mDragSurface>;

        if $r10 == null goto label21;

        $r11 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r12 = $r11.<android.view.View$AttachInfo: android.view.Surface mDragSurface>;

        virtualinvoke $r12.<android.view.Surface: void release()>();

        $r13 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r13.<android.view.View$AttachInfo: android.view.Surface mDragSurface> = null;

     label21:
        virtualinvoke r1.<android.view.DragEvent: void recycle()>();

        return;

        catch android.os.RemoteException from label12 to label13 with label15;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch android.os.RemoteException from label17 to label18 with label19;
    }

    private void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)
    {
        android.view.ViewRootImpl r0;
        java.lang.String $r1, $r4;
        android.view.ViewRootImpl$W $r2;
        android.view.IWindowSession $r3;
        boolean $z0;
        int $i1, $i3;
        android.os.RemoteException $r5;
        android.view.Surface$OutOfResourcesException r6;

        r0 := @this: android.view.ViewRootImpl;

        r6 := @parameter0: android.view.Surface$OutOfResourcesException;

        $r1 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r1, "OutOfResourcesException initializing HW surface", r6);

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $z0 = interfaceinvoke $r3.<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>($r2);

        if $z0 != 0 goto label2;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i1 == 1000 goto label2;

        $r4 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r4, "No processes killed for memory; killing self");

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void handlePointerCaptureChanged(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.ViewRootImpl: boolean mPointerCapture>;

        if $z1 != z0 goto label1;

        return;

     label1:
        r0.<android.view.ViewRootImpl: boolean mPointerCapture> = z0;

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 == null goto label2;

        virtualinvoke r1.<android.view.View: void dispatchPointerCaptureChanged(boolean)>(z0);

     label2:
        return;
    }

    private void handleScrollCaptureRequest(android.view.IScrollCaptureController)
    {
        android.view.ViewRootImpl r0;
        android.view.IScrollCaptureController r1;
        android.view.View r3;
        java.util.LinkedList $r6;
        android.graphics.Point $r7;
        android.graphics.Rect $r8;
        int $i0, $i1;
        boolean $z1;
        android.view.ScrollCaptureTargetResolver $r9;
        android.view._$$Lambda$ViewRootImpl$q8OEhO4Gpuq2GiPXjd5gNL6TlLg $r10;
        android.view.ViewRootImpl$ViewRootHandler $r11;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.IScrollCaptureController;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        specialinvoke r0.<android.view.ViewRootImpl: void collectRootScrollCaptureTargets(java.util.Queue)>($r6);

        r3 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.View getView()>();

        $r7 = new android.graphics.Point;

        specialinvoke $r7.<android.graphics.Point: void <init>()>();

        $r8 = new android.graphics.Rect;

        $i0 = virtualinvoke r3.<android.view.View: int getWidth()>();

        $i1 = virtualinvoke r3.<android.view.View: int getHeight()>();

        specialinvoke $r8.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i0, $i1);

        virtualinvoke r0.<android.view.ViewRootImpl: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>(r3, $r8, $r7);

        virtualinvoke r3.<android.view.View: void dispatchScrollCaptureSearch(android.graphics.Rect,android.graphics.Point,java.util.Queue)>($r8, $r7, $r6);

        $z1 = virtualinvoke $r6.<java.util.LinkedList: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<android.view.ViewRootImpl: void dispatchScrollCaptureSearchResult(android.view.IScrollCaptureController,android.view.ScrollCaptureTarget)>(r1, null);

        return;

     label1:
        $r9 = new android.view.ScrollCaptureTargetResolver;

        specialinvoke $r9.<android.view.ScrollCaptureTargetResolver: void <init>(java.util.Queue)>($r6);

        $r11 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r10 = new android.view._$$Lambda$ViewRootImpl$q8OEhO4Gpuq2GiPXjd5gNL6TlLg;

        specialinvoke $r10.<android.view._$$Lambda$ViewRootImpl$q8OEhO4Gpuq2GiPXjd5gNL6TlLg: void <init>(android.view.ViewRootImpl,android.view.IScrollCaptureController)>(r0, r1);

        virtualinvoke $r9.<android.view.ScrollCaptureTargetResolver: void start(android.os.Handler,long,java.util.function.Consumer)>($r11, 1000L, $r10);

        return;
    }

    private void handleWindowContentChangedEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r9;
        int i0, $i1, $i4, $i5, i6, i7;
        android.view.accessibility.AccessibilityNodeInfo r2, $r3, $r4, $r5;
        long $l2, $l3;
        boolean $z0, $z2, z3;
        android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction $r6;
        android.view.accessibility.AccessibilityEvent r7;
        android.view.accessibility.AccessibilityNodeProvider r8;
        android.view.ViewParent r10;
        android.graphics.Rect r11, r12;

        r0 := @this: android.view.ViewRootImpl;

        r7 := @parameter0: android.view.accessibility.AccessibilityEvent;

        r1 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        if r1 == null goto label12;

        $r3 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        if $r3 != null goto label01;

        goto label12;

     label01:
        r8 = virtualinvoke r1.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r8 != null goto label02;

        r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost> = null;

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView> = null;

        virtualinvoke r1.<android.view.View: void clearAccessibilityFocusNoCallbacks(int)>(0);

        return;

     label02:
        i6 = virtualinvoke r7.<android.view.accessibility.AccessibilityEvent: int getContentChangeTypes()>();

        $i1 = i6 & 1;

        if $i1 != 0 goto label03;

        if i6 == 0 goto label03;

        return;

     label03:
        $l2 = virtualinvoke r7.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        i0 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getAccessibilityViewId(long)>($l2);

        z3 = 0;

        r9 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

     label04:
        if r9 == null goto label08;

        if z3 != 0 goto label08;

        $i5 = virtualinvoke r9.<android.view.View: int getAccessibilityViewId()>();

        if i0 != $i5 goto label05;

        z3 = 1;

        goto label04;

     label05:
        r10 = virtualinvoke r9.<android.view.View: android.view.ViewParent getParent()>();

        $z2 = r10 instanceof android.view.View;

        if $z2 == 0 goto label06;

        r9 = (android.view.View) r10;

        goto label07;

     label06:
        r9 = null;

     label07:
        goto label04;

     label08:
        if z3 != 0 goto label09;

        return;

     label09:
        $r4 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        $l3 = virtualinvoke $r4.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        i7 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l3);

        r11 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $r5 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        virtualinvoke $r5.<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>(r11);

        r2 = virtualinvoke r8.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>(i7);

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView> = r2;

        if r2 != null goto label10;

        r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost> = null;

        virtualinvoke r1.<android.view.View: void clearAccessibilityFocusNoCallbacks(int)>(0);

        $r6 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLEAR_ACCESSIBILITY_FOCUS>;

        $i4 = virtualinvoke $r6.<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int getId()>();

        virtualinvoke r8.<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>(i7, $i4, null);

        specialinvoke r0.<android.view.ViewRootImpl: void invalidateRectOnScreen(android.graphics.Rect)>(r11);

        goto label11;

     label10:
        r12 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: android.graphics.Rect getBoundsInScreen()>();

        $z0 = virtualinvoke r11.<android.graphics.Rect: boolean equals(java.lang.Object)>(r12);

        if $z0 != 0 goto label11;

        virtualinvoke r11.<android.graphics.Rect: void union(android.graphics.Rect)>(r12);

        specialinvoke r0.<android.view.ViewRootImpl: void invalidateRectOnScreen(android.graphics.Rect)>(r11);

     label11:
        return;

     label12:
        return;
    }

    private void handleWindowFocusChanged()
    {
        android.view.ViewRootImpl r0;
        boolean z0, z1, $z2, $z4, $z6, $z9, $z10;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i9;
        android.view.View $r1, $r5, $r9, $r11, $r39, $r41, $r42;
        android.view.ViewGroup$LayoutParams $r2;
        android.view.View$AttachInfo $r3, $r6, $r8, $r10, $r12, $r15, $r17, $r34;
        android.view.KeyEvent$DispatcherState $r4;
        android.view.ViewTreeObserver $r7;
        android.view.ThreadedRenderer $r13, $r18;
        android.view.Surface $r14, $r16;
        android.view.InsetsController $r19, $r20;
        android.os.RemoteException $r21;
        android.os.Message $r22;
        android.view.Surface$OutOfResourcesException $r23;
        java.lang.String $r24, $r27;
        android.view.ViewRootImpl$W $r25;
        android.view.IWindowSession $r26;
        java.lang.Throwable $r28;
        android.view.WindowManager$LayoutParams r29, $r36, $r38, $r43, r44, r45;
        android.graphics.Rect r30;
        android.view.ViewRootImpl$ViewRootHandler r33;
        android.view.ImeFocusController $r35, $r37, $r40;
        android.view.ViewRootImpl$InputStage $r46;

        r0 := @this: android.view.ViewRootImpl;

        entermonitor r0;

     label01:
        $z2 = r0.<android.view.ViewRootImpl: boolean mWindowFocusChanged>;

        if $z2 != 0 goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        r0.<android.view.ViewRootImpl: boolean mWindowFocusChanged> = 0;

        z0 = r0.<android.view.ViewRootImpl: boolean mUpcomingWindowFocus>;

        z1 = r0.<android.view.ViewRootImpl: boolean mUpcomingInTouchMode>;

        exitmonitor r0;

     label04:
        $i0 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if $i0 == 0 goto label06;

        if z0 == 0 goto label05;

        $r20 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        virtualinvoke $r20.<android.view.InsetsController: void onWindowFocusGained()>();

        goto label06;

     label05:
        $r19 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        virtualinvoke $r19.<android.view.InsetsController: void onWindowFocusLost()>();

     label06:
        $z10 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z10 == 0 goto label22;

        specialinvoke r0.<android.view.ViewRootImpl: void profileRendering(boolean)>(z0);

        if z0 == 0 goto label19;

        specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>(z1);

        $r12 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r13 = $r12.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r13 == null goto label19;

        $r14 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z6 = virtualinvoke $r14.<android.view.Surface: boolean isValid()>();

        if $z6 == 0 goto label19;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label07:
        r29 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

     label08:
        if r29 == null goto label11;

     label09:
        r30 = r29.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

     label10:
        goto label12;

     label11:
        r30 = null;

     label12:
        $r15 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r18 = $r15.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $i6 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i5 = r0.<android.view.ViewRootImpl: int mHeight>;

        $r17 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r16 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r18.<android.view.ThreadedRenderer: boolean initializeIfNeeded(int,int,android.view.View$AttachInfo,android.view.Surface,android.graphics.Rect)>($i6, $i5, $r17, $r16, r30);

     label13:
        goto label19;

     label14:
        $r23 := @caughtexception;

        $r24 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r24, "OutOfResourcesException locking surface", $r23);

     label15:
        $r26 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r25 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $z9 = interfaceinvoke $r26.<android.view.IWindowSession: boolean outOfMemory(android.view.IWindow)>($r25);

        if $z9 != 0 goto label16;

        $r27 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r27, "No processes killed for memory; killing self");

        $i9 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i9);

     label16:
        goto label18;

     label17:
        $r21 := @caughtexception;

     label18:
        r33 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r22 = virtualinvoke r33.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(6);

        virtualinvoke r33.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessageDelayed(android.os.Message,long)>($r22, 500L);

        return;

     label19:
        $r34 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r34.<android.view.View$AttachInfo: boolean mHasWindowFocus> = z0;

        $r35 = r0.<android.view.ViewRootImpl: android.view.ImeFocusController mImeFocusController>;

        $r36 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        virtualinvoke $r35.<android.view.ImeFocusController: boolean updateImeFocusable(android.view.WindowManager$LayoutParams,boolean)>($r36, 1);

        $r37 = r0.<android.view.ViewRootImpl: android.view.ImeFocusController mImeFocusController>;

        $r38 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        virtualinvoke $r37.<android.view.ImeFocusController: void onPreWindowFocus(boolean,android.view.WindowManager$LayoutParams)>(z0, $r38);

        $r39 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r39 == null goto label20;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.KeyEvent$DispatcherState mKeyDispatchState>;

        virtualinvoke $r4.<android.view.KeyEvent$DispatcherState: void reset()>();

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r5.<android.view.View: void dispatchWindowFocusChanged(boolean)>(z0);

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r7.<android.view.ViewTreeObserver: void dispatchOnWindowFocusChange(boolean)>(z0);

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r8.<android.view.View$AttachInfo: android.view.View mTooltipHost>;

        if $r9 == null goto label20;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r11 = $r10.<android.view.View$AttachInfo: android.view.View mTooltipHost>;

        virtualinvoke $r11.<android.view.View: void hideTooltip()>();

     label20:
        $r40 = r0.<android.view.ViewRootImpl: android.view.ImeFocusController mImeFocusController>;

        $r41 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r42 = virtualinvoke $r41.<android.view.View: android.view.View findFocus()>();

        $r43 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        virtualinvoke $r40.<android.view.ImeFocusController: void onPostWindowFocus(android.view.View,boolean,android.view.WindowManager$LayoutParams)>($r42, z0, $r43);

        if z0 == 0 goto label21;

        r44 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i1 = r44.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i2 = $i1 & -257;

        r44.<android.view.WindowManager$LayoutParams: int softInputMode> = $i2;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r2 = virtualinvoke $r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r45 = (android.view.WindowManager$LayoutParams) $r2;

        $i3 = r45.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i4 = $i3 & -257;

        r45.<android.view.WindowManager$LayoutParams: int softInputMode> = $i4;

        specialinvoke r0.<android.view.ViewRootImpl: void fireAccessibilityFocusEventIfHasFocusedNode()>();

        goto label22;

     label21:
        $z4 = r0.<android.view.ViewRootImpl: boolean mPointerCapture>;

        if $z4 == 0 goto label22;

        specialinvoke r0.<android.view.ViewRootImpl: void handlePointerCaptureChanged(boolean)>(0);

     label22:
        $r46 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage>;

        virtualinvoke $r46.<android.view.ViewRootImpl$InputStage: void onWindowFocusChanged(boolean)>(z0);

        if z0 == 0 goto label23;

        specialinvoke r0.<android.view.ViewRootImpl: void handleContentCaptureFlush()>();

     label23:
        return;

     label24:
        $r28 := @caughtexception;

     label25:
        exitmonitor r0;

     label26:
        throw $r28;

        catch java.lang.Throwable from label01 to label02 with label24;
        catch java.lang.Throwable from label03 to label04 with label24;
        catch android.view.Surface$OutOfResourcesException from label07 to label08 with label14;
        catch android.view.Surface$OutOfResourcesException from label09 to label10 with label14;
        catch android.view.Surface$OutOfResourcesException from label12 to label13 with label14;
        catch android.os.RemoteException from label15 to label16 with label17;
        catch java.lang.Throwable from label25 to label26 with label24;
    }

    private boolean hasColorModeChanged(int)
    {
        android.view.ViewRootImpl r0;
        int i0;
        android.view.View$AttachInfo $r1, $r3;
        android.view.ThreadedRenderer $r2, $r4;
        boolean $z0, $z1, z2;
        android.content.Context $r5;
        android.content.res.Resources $r6;
        android.content.res.Configuration $r7;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r2 != null goto label1;

        return 0;

     label1:
        if i0 != 1 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $z0 = virtualinvoke $r4.<android.view.ThreadedRenderer: boolean isWideGamut()>();

        if $z0 != z2 goto label4;

        return 0;

     label4:
        if z2 == 0 goto label5;

        $r5 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r7 = virtualinvoke $r6.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $z1 = virtualinvoke $r7.<android.content.res.Configuration: boolean isScreenWideColorGamut()>();

        if $z1 != 0 goto label5;

        return 0;

     label5:
        return 1;
    }

    private void hideInsets(int, boolean)
    {
        android.view.ViewRootImpl r0;
        int i0, i1;
        boolean z0;
        android.view.ViewRootImpl$ViewRootHandler $r1;
        android.os.Message $r2;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        i1 = (int) z0;

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,int,int)>(35, i0, i1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void invalidateRectOnScreen(android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1, r2;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        boolean z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.view.View$AttachInfo $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Rect;

        r2 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $i3 = r1.<android.graphics.Rect: int left>;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        virtualinvoke r2.<android.graphics.Rect: void union(int,int,int,int)>($i3, $i2, $i1, $i0);

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        f0 = $r3.<android.view.View$AttachInfo: float mApplicationScale>;

        $i4 = r0.<android.view.ViewRootImpl: int mWidth>;

        $f1 = (float) $i4;

        $f2 = $f1 * f0;

        $f3 = $f2 + 0.5F;

        $i7 = (int) $f3;

        $i5 = r0.<android.view.ViewRootImpl: int mHeight>;

        $f4 = (float) $i5;

        $f5 = $f4 * f0;

        $f6 = $f5 + 0.5F;

        $i6 = (int) $f6;

        z0 = virtualinvoke r2.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i7, $i6);

        if z0 != 0 goto label1;

        virtualinvoke r2.<android.graphics.Rect: void setEmpty()>();

     label1:
        $z1 = r0.<android.view.ViewRootImpl: boolean mWillDrawSoon>;

        if $z1 != 0 goto label3;

        if z0 != 0 goto label2;

        $z2 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z2 == 0 goto label3;

     label2:
        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label3:
        return;
    }

    public static void invokeFunctor(long, boolean)
    {
        long l0;
        boolean z0;

        l0 := @parameter0: long;

        z0 := @parameter1: boolean;

        staticinvoke <android.view.ThreadedRenderer: void invokeFunctor(long,boolean)>(l0, z0);

        return;
    }

    private boolean isAutofillUiShowing()
    {
        android.view.ViewRootImpl r0;
        android.view.autofill.AutofillManager r1;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 = specialinvoke r0.<android.view.ViewRootImpl: android.view.autofill.AutofillManager getAutofillManager()>();

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<android.view.autofill.AutofillManager: boolean isAutofillUiShowing()>();

        return $z0;
    }

    private boolean isContentCaptureEnabled()
    {
        android.view.ViewRootImpl r0;
        int i0, $i1;
        boolean z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        byte b3;

        r0 := @this: android.view.ViewRootImpl;

        i0 = r0.<android.view.ViewRootImpl: int mContentCaptureEnabled>;

        b3 = 2;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isContentCaptureEnabled(): invalid state ");

        $i1 = r0.<android.view.ViewRootImpl: int mContentCaptureEnabled>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("ViewRootImpl", $r5);

        return 0;

     label1:
        return 0;

     label2:
        return 1;

     label3:
        z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean isContentCaptureReallyEnabled()>();

        if z0 == 0 goto label4;

        b3 = 1;

        goto label4;

     label4:
        r0.<android.view.ViewRootImpl: int mContentCaptureEnabled> = b3;

        return z0;
    }

    private boolean isContentCaptureReallyEnabled()
    {
        android.view.ViewRootImpl r0;
        android.view.contentcapture.ContentCaptureManager r1;
        android.content.Context $r2, $r4;
        android.content.ContentCaptureOptions $r3;
        android.view.View$AttachInfo $r5;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentCaptureOptions getContentCaptureOptions()>();

        if $r3 != null goto label1;

        return 0;

     label1:
        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        r1 = virtualinvoke $r5.<android.view.View$AttachInfo: android.view.contentcapture.ContentCaptureManager getContentCaptureManager(android.content.Context)>($r4);

        if r1 == null goto label3;

        $z0 = virtualinvoke r1.<android.view.contentcapture.ContentCaptureManager: boolean isContentCaptureEnabled()>();

        if $z0 != 0 goto label2;

        goto label3;

     label2:
        return 1;

     label3:
        return 0;
    }

    static boolean isInTouchMode()
    {
        boolean z0;
        android.os.RemoteException $r0;
        android.view.IWindowSession r1;

        r1 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession peekWindowSession()>();

        if r1 == null goto label4;

     label1:
        z0 = interfaceinvoke r1.<android.view.IWindowSession: boolean getInTouchMode()>();

     label2:
        return z0;

     label3:
        $r0 := @caughtexception;

     label4:
        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static boolean isNavigationKey(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;
        int i0;

        r0 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r0.<android.view.KeyEvent: int getKeyCode()>();

        if i0 == 61 goto label2;

        if i0 == 62 goto label2;

        if i0 == 66 goto label2;

        if i0 == 92 goto label2;

        if i0 == 93 goto label2;

        if i0 == 122 goto label2;

        if i0 == 123 goto label2;

        tableswitch(i0)
        {
            case 19: goto label2;
            case 20: goto label2;
            case 21: goto label2;
            case 22: goto label2;
            case 23: goto label2;
            default: goto label1;
        };

     label1:
        return 0;

     label2:
        return 1;
    }

    static boolean isTerminalInputEvent(android.view.InputEvent)
    {
        android.view.InputEvent r0;
        boolean z0, z2, z3;
        int i0, $i1;
        android.view.MotionEvent $r1;
        android.view.KeyEvent $r2;

        r0 := @parameter0: android.view.InputEvent;

        z0 = r0 instanceof android.view.KeyEvent;

        z2 = 0;

        if z0 == 0 goto label2;

        $r2 = (android.view.KeyEvent) r0;

        $i1 = virtualinvoke $r2.<android.view.KeyEvent: int getAction()>();

        if $i1 != 1 goto label1;

        z2 = 1;

     label1:
        return z2;

     label2:
        $r1 = (android.view.MotionEvent) r0;

        i0 = virtualinvoke $r1.<android.view.MotionEvent: int getAction()>();

        if i0 == 1 goto label3;

        if i0 == 3 goto label3;

        z3 = 0;

        if i0 != 10 goto label4;

     label3:
        z3 = 1;

     label4:
        return z3;
    }

    private static boolean isTypingKey(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: android.view.KeyEvent;

        $i0 = virtualinvoke r0.<android.view.KeyEvent: int getUnicodeChar()>();

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isViewDescendantOf(android.view.View, android.view.View)
    {
        android.view.View r0, $r1, r2;
        boolean $z0, $z1, z2;
        android.view.ViewParent r3;

        r2 := @parameter0: android.view.View;

        r0 := @parameter1: android.view.View;

        z2 = 1;

        if r2 != r0 goto label1;

        return 1;

     label1:
        r3 = virtualinvoke r2.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = r3 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        $r1 = (android.view.View) r3;

        $z1 = staticinvoke <android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>($r1, r0);

        if $z1 == 0 goto label2;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    public static void lambda$dznxCZGM2R1fsBljsJKomLjBRoM(android.view.ViewRootImpl)
    {
        android.view.ViewRootImpl r0;

        r0 := @parameter0: android.view.ViewRootImpl;

        specialinvoke r0.<android.view.ViewRootImpl: void postDrawFinished()>();

        return;
    }

    static void lambda$registerRtFrameCallback$0(android.graphics.HardwareRenderer$FrameDrawingCallback, long)
    {
        long l0;
        java.lang.Exception $r0;
        android.graphics.HardwareRenderer$FrameDrawingCallback r1;

        r1 := @parameter0: android.graphics.HardwareRenderer$FrameDrawingCallback;

        l0 := @parameter1: long;

     label1:
        interfaceinvoke r1.<android.graphics.HardwareRenderer$FrameDrawingCallback: void onFrameDraw(long)>(l0);

     label2:
        goto label4;

     label3:
        $r0 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("ViewRootImpl", "Exception while executing onFrameDraw", $r0);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private boolean leaveTouchMode()
    {
        android.view.ViewRootImpl r0;
        boolean $z0, $z1, $z2;
        android.view.View $r1, $r2, r4, r5;
        android.view.ViewGroup $r3;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r4 == null goto label3;

        $z0 = virtualinvoke r4.<android.view.View: boolean hasFocus()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r5 = virtualinvoke $r2.<android.view.View: android.view.View findFocus()>();

        $z2 = r5 instanceof android.view.ViewGroup;

        if $z2 != 0 goto label1;

        return 0;

     label1:
        $r3 = (android.view.ViewGroup) r5;

        $i0 = virtualinvoke $r3.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 == 262144 goto label2;

        return 0;

     label2:
        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z1 = virtualinvoke $r1.<android.view.View: boolean restoreDefaultFocus()>();

        return $z1;

     label3:
        return 0;
    }

    private void maybeHandleWindowMove(android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1;
        android.content.res.CompatibilityInfo$Translator r2;
        android.view.View$AttachInfo $r3, $r4, $r6, $r7, $r8, $r10, $r11, $r12, $r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.ThreadedRenderer $r5, $r9;
        boolean $z0, z1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Rect;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i1 = $r3.<android.view.View$AttachInfo: int mWindowLeft>;

        $i0 = r1.<android.graphics.Rect: int left>;

        if $i1 != $i0 goto label2;

        $r13 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i5 = $r13.<android.view.View$AttachInfo: int mWindowTop>;

        $i4 = r1.<android.graphics.Rect: int top>;

        if $i5 == $i4 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        if z1 == 0 goto label5;

        r2 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if r2 == null goto label4;

        virtualinvoke r2.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWinFrame(android.graphics.Rect)>(r1);

     label4:
        $r11 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i2 = r1.<android.graphics.Rect: int left>;

        $r11.<android.view.View$AttachInfo: int mWindowLeft> = $i2;

        $r12 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i3 = r1.<android.graphics.Rect: int top>;

        $r12.<android.view.View$AttachInfo: int mWindowTop> = $i3;

     label5:
        if z1 != 0 goto label6;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z0 = $r10.<android.view.View$AttachInfo: boolean mNeedsUpdateLightCenter>;

        if $z0 == 0 goto label8;

     label6:
        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r5 == null goto label7;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r7.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        virtualinvoke $r9.<android.view.ThreadedRenderer: void setLightCenter(android.view.View$AttachInfo)>($r8);

     label7:
        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6.<android.view.View$AttachInfo: boolean mNeedsUpdateLightCenter> = 0;

     label8:
        return;
    }

    private void maybeUpdateTooltip(android.view.MotionEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.MotionEvent r1;
        int i0, $i1;
        java.lang.String $r2;
        boolean $z1, $z2;
        android.content.Context $r3;
        android.view.accessibility.AccessibilityManager r4;
        android.view.View r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.MotionEvent;

        $i1 = virtualinvoke r1.<android.view.MotionEvent: int getPointerCount()>();

        if $i1 == 1 goto label1;

        return;

     label1:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i0 == 9 goto label2;

        if i0 == 7 goto label2;

        if i0 == 10 goto label2;

        return;

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        r4 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r3);

        $z2 = virtualinvoke r4.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z2 == 0 goto label3;

        $z1 = virtualinvoke r4.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z1 == 0 goto label3;

        return;

     label3:
        r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r5 != null goto label4;

        $r2 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r2, "maybeUpdateTooltip called after view was removed");

        return;

     label4:
        virtualinvoke r5.<android.view.View: boolean dispatchTooltipHoverEvent(android.view.MotionEvent)>(r1);

        return;
    }

    private boolean measureHierarchy(android.view.View, android.view.WindowManager$LayoutParams, android.content.res.Resources, int, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.WindowManager$LayoutParams r2;
        android.content.res.Resources r3;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i23, i24;
        android.util.DisplayMetrics r4;
        android.util.TypedValue $r5, $r6, $r7;
        float $f0;
        boolean z2, z3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        r3 := @parameter2: android.content.res.Resources;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        z2 = 0;

        $i3 = r2.<android.view.WindowManager$LayoutParams: int width>;

        if $i3 != -2 goto label3;

        r4 = virtualinvoke r3.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $r5 = r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue>;

        virtualinvoke r3.<android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)>(17105073, $r5, 1);

        i23 = 0;

        $r6 = r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue>;

        $i12 = $r6.<android.util.TypedValue: int type>;

        if $i12 != 5 goto label1;

        $r7 = r0.<android.view.ViewRootImpl: android.util.TypedValue mTmpValue>;

        $f0 = virtualinvoke $r7.<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>(r4);

        i23 = (int) $f0;

     label1:
        z2 = 0;

        if i23 == 0 goto label3;

        z2 = 0;

        if i0 <= i23 goto label3;

        $i13 = r2.<android.view.WindowManager$LayoutParams: int width>;

        i24 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i23, $i13);

        $i14 = r2.<android.view.WindowManager$LayoutParams: int height>;

        i2 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i1, $i14);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i24, i2);

        $i15 = virtualinvoke r1.<android.view.View: int getMeasuredWidthAndState()>();

        $i16 = $i15 & 16777216;

        if $i16 != 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        $i17 = i23 + i0;

        $i19 = $i17 / 2;

        $i18 = r2.<android.view.WindowManager$LayoutParams: int width>;

        $i20 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>($i19, $i18);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>($i20, i2);

        z2 = 0;

        $i21 = virtualinvoke r1.<android.view.View: int getMeasuredWidthAndState()>();

        $i22 = $i21 & 16777216;

        if $i22 != 0 goto label3;

        z2 = 1;

     label3:
        z3 = 0;

        if z2 != 0 goto label5;

        $i4 = r2.<android.view.WindowManager$LayoutParams: int width>;

        $i5 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i0, $i4);

        $i6 = r2.<android.view.WindowManager$LayoutParams: int height>;

        $i7 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>(i1, $i6);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>($i5, $i7);

        $i8 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i9 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        if $i8 != $i9 goto label4;

        z3 = 0;

        $i10 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i11 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        if $i10 == $i11 goto label5;

     label4:
        z3 = 1;

     label5:
        return z3;
    }

    private void notifyContentCatpureEvents()
    {
        android.view.ViewRootImpl r0;
        int i0, i1, $i2, $i3, i7, i8;
        java.util.ArrayList r1;
        android.view.View$AttachInfo $r2, $r4, $r6, $r7, $r9;
        android.view.contentcapture.ContentCaptureManager $r3;
        android.util.SparseArray $r5, $r8, $r10;
        java.lang.Object $r11, r30;
        boolean $z0, $z1, $z2;
        java.lang.String $r14, $r23, $r26, r33, r35, r38;
        android.graphics.Insets $r15;
        android.view.autofill.AutofillId $r27;
        java.lang.Throwable $r28;
        android.view.contentcapture.MainContentCaptureSession r29;
        android.view.View r31;
        android.view.contentcapture.ContentCaptureSession r32;
        java.lang.StringBuilder r34, r36, r39;
        android.view.ViewStructure r37;

        r0 := @this: android.view.ViewRootImpl;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "notifyContentCaptureEvents");

     label01:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.contentcapture.ContentCaptureManager mContentCaptureManager>;

        r29 = virtualinvoke $r3.<android.view.contentcapture.ContentCaptureManager: android.view.contentcapture.MainContentCaptureSession getMainContentCaptureSession()>();

     label02:
        i7 = 0;

     label03:
        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.util.SparseArray mContentCaptureEvents>;

        $i2 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if i7 >= $i2 goto label23;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8 = $r7.<android.view.View$AttachInfo: android.util.SparseArray mContentCaptureEvents>;

        i0 = virtualinvoke $r8.<android.util.SparseArray: int keyAt(int)>(i7);

        virtualinvoke r29.<android.view.contentcapture.MainContentCaptureSession: void notifyViewTreeEvent(int,boolean)>(i0, 1);

        $r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r10 = $r9.<android.view.View$AttachInfo: android.util.SparseArray mContentCaptureEvents>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object valueAt(int)>(i7);

        r1 = (java.util.ArrayList) $r11;

     label04:
        i8 = 0;

     label05:
        $i3 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i8 >= $i3 goto label21;

        r30 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        $z0 = r30 instanceof android.view.autofill.AutofillId;

        if $z0 == 0 goto label07;

        $r27 = (android.view.autofill.AutofillId) r30;

        virtualinvoke r29.<android.view.contentcapture.MainContentCaptureSession: void notifyViewDisappeared(int,android.view.autofill.AutofillId)>(i0, $r27);

     label06:
        goto label20;

     label07:
        $z1 = r30 instanceof android.view.View;

        if $z1 == 0 goto label17;

        r31 = (android.view.View) r30;

        r32 = virtualinvoke r31.<android.view.View: android.view.contentcapture.ContentCaptureSession getContentCaptureSession()>();

     label08:
        if r32 != null goto label11;

     label09:
        r33 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no content capture session on view: ");

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r26 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r33, $r26);

     label10:
        goto label20;

     label11:
        i1 = virtualinvoke r32.<android.view.contentcapture.ContentCaptureSession: int getId()>();

     label12:
        if i1 == i0 goto label15;

     label13:
        r35 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        r36 = new java.lang.StringBuilder;

        specialinvoke r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("content capture session mismatch for view (");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): was ");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" before, it\'s ");

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" now");

        $r23 = virtualinvoke r36.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r35, $r23);

     label14:
        goto label20;

     label15:
        r37 = virtualinvoke r32.<android.view.contentcapture.ContentCaptureSession: android.view.ViewStructure newViewStructure(android.view.View)>(r31);

        virtualinvoke r31.<android.view.View: void onProvideContentCaptureStructure(android.view.ViewStructure,int)>(r37, 0);

        virtualinvoke r32.<android.view.contentcapture.ContentCaptureSession: void notifyViewAppeared(android.view.ViewStructure)>(r37);

     label16:
        goto label20;

     label17:
        $z2 = r30 instanceof android.graphics.Insets;

        if $z2 == 0 goto label19;

        $r15 = (android.graphics.Insets) r30;

        virtualinvoke r29.<android.view.contentcapture.MainContentCaptureSession: void notifyViewInsetsChanged(int,android.graphics.Insets)>(i0, $r15);

     label18:
        goto label20;

     label19:
        r38 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid content capture event: ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r30);

        $r14 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r38, $r14);

     label20:
        i8 = i8 + 1;

        goto label05;

     label21:
        virtualinvoke r29.<android.view.contentcapture.MainContentCaptureSession: void notifyViewTreeEvent(int,boolean)>(i0, 0);

     label22:
        i7 = i7 + 1;

        goto label03;

     label23:
        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6.<android.view.View$AttachInfo: android.util.SparseArray mContentCaptureEvents> = null;

     label24:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label25:
        $r28 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw $r28;

        catch java.lang.Throwable from label01 to label02 with label25;
        catch java.lang.Throwable from label03 to label04 with label25;
        catch java.lang.Throwable from label05 to label06 with label25;
        catch java.lang.Throwable from label07 to label08 with label25;
        catch java.lang.Throwable from label09 to label10 with label25;
        catch java.lang.Throwable from label11 to label12 with label25;
        catch java.lang.Throwable from label13 to label14 with label25;
        catch java.lang.Throwable from label15 to label16 with label25;
        catch java.lang.Throwable from label17 to label18 with label25;
        catch java.lang.Throwable from label19 to label20 with label25;
        catch java.lang.Throwable from label21 to label22 with label25;
        catch java.lang.Throwable from label23 to label24 with label25;
    }

    private void notifyHolderSurfaceDestroyed()
    {
        android.view.ViewRootImpl r0;
        android.view.SurfaceHolder$Callback[] r1;
        int i0, i1;
        com.android.internal.view.BaseSurfaceHolder $r2, $r3, $r4;
        android.view.SurfaceHolder$Callback $r5;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r2.<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>();

        $r3 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r1 = virtualinvoke $r3.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r1 == null goto label2;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = r1[i1];

        $r4 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r5.<android.view.SurfaceHolder$Callback: void surfaceDestroyed(android.view.SurfaceHolder)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void notifySurfaceCreated()
    {
        android.view.ViewRootImpl r0;
        java.util.ArrayList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        android.view.SurfaceControl$Transaction $r4;
        android.view.ViewRootImpl$SurfaceChangedCallback $r5;

        r0 := @this: android.view.ViewRootImpl;

        i1 = 0;

     label1:
        $r1 = r0.<android.view.ViewRootImpl: java.util.ArrayList mSurfaceChangedCallbacks>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mSurfaceChangedCallbacks>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.view.ViewRootImpl$SurfaceChangedCallback) $r3;

        $r4 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mSurfaceChangedTransaction>;

        interfaceinvoke $r5.<android.view.ViewRootImpl$SurfaceChangedCallback: void surfaceCreated(android.view.SurfaceControl$Transaction)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void notifySurfaceDestroyed()
    {
        android.view.ViewRootImpl r0;
        java.util.ArrayList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        android.view.ViewRootImpl$SurfaceChangedCallback $r4;

        r0 := @this: android.view.ViewRootImpl;

        i1 = 0;

     label1:
        $r1 = r0.<android.view.ViewRootImpl: java.util.ArrayList mSurfaceChangedCallbacks>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mSurfaceChangedCallbacks>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r4 = (android.view.ViewRootImpl$SurfaceChangedCallback) $r3;

        interfaceinvoke $r4.<android.view.ViewRootImpl$SurfaceChangedCallback: void surfaceDestroyed()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void notifySurfaceReplaced()
    {
        android.view.ViewRootImpl r0;
        java.util.ArrayList $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        android.view.SurfaceControl$Transaction $r4;
        android.view.ViewRootImpl$SurfaceChangedCallback $r5;

        r0 := @this: android.view.ViewRootImpl;

        i1 = 0;

     label1:
        $r1 = r0.<android.view.ViewRootImpl: java.util.ArrayList mSurfaceChangedCallbacks>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label2;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mSurfaceChangedCallbacks>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.view.ViewRootImpl$SurfaceChangedCallback) $r3;

        $r4 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mSurfaceChangedTransaction>;

        interfaceinvoke $r5.<android.view.ViewRootImpl$SurfaceChangedCallback: void surfaceReplaced(android.view.SurfaceControl$Transaction)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private android.view.ViewRootImpl$QueuedInputEvent obtainQueuedInputEvent(android.view.InputEvent, android.view.InputEventReceiver, int)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;
        android.view.InputEventReceiver r2;
        int i0, $i1, $i2;
        android.view.ViewRootImpl$QueuedInputEvent $r3, $r4, r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        r2 := @parameter1: android.view.InputEventReceiver;

        i0 := @parameter2: int;

        r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool>;

        if r5 == null goto label1;

        $i1 = r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize>;

        $i2 = $i1 - 1;

        r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize> = $i2;

        $r4 = r5.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext>;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool> = $r4;

        r5.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = null;

        goto label2;

     label1:
        $r3 = new android.view.ViewRootImpl$QueuedInputEvent;

        specialinvoke $r3.<android.view.ViewRootImpl$QueuedInputEvent: void <init>(android.view.ViewRootImpl$1)>(null);

        r5 = $r3;

     label2:
        r5.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent> = r1;

        r5.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver> = r2;

        r5.<android.view.ViewRootImpl$QueuedInputEvent: int mFlags> = i0;

        return r5;
    }

    private void performConfigurationChange(android.util.MergedConfiguration, boolean, int)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;
        int i0, $i1, $i2, i3;
        android.content.res.Configuration r1, $r12, r15, r16;
        android.content.res.CompatibilityInfo r2, $r6;
        java.lang.IllegalArgumentException $r3;
        android.view.Display $r4;
        android.view.DisplayAdjustments $r5;
        java.util.ArrayList $r7, $r9, r17;
        android.util.MergedConfiguration $r8, r14;
        java.lang.Object $r10;
        android.view.ViewRootImpl$ConfigChangedCallback $r11;
        java.lang.Throwable $r13;
        android.view.ViewRootImpl$ActivityConfigCallback r18;

        r0 := @this: android.view.ViewRootImpl;

        r14 := @parameter0: android.util.MergedConfiguration;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        if r14 == null goto label13;

        r15 = virtualinvoke r14.<android.util.MergedConfiguration: android.content.res.Configuration getGlobalConfiguration()>();

        r1 = virtualinvoke r14.<android.util.MergedConfiguration: android.content.res.Configuration getOverrideConfiguration()>();

        $r4 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $r5 = virtualinvoke $r4.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        r2 = virtualinvoke $r5.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        r16 = r15;

        $r6 = <android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo DEFAULT_COMPATIBILITY_INFO>;

        $z1 = virtualinvoke r2.<android.content.res.CompatibilityInfo: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label01;

        $r12 = new android.content.res.Configuration;

        specialinvoke $r12.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>(r15);

        r16 = $r12;

        $i2 = r0.<android.view.ViewRootImpl: int mNoncompatDensity>;

        virtualinvoke r2.<android.content.res.CompatibilityInfo: void applyToConfiguration(int,android.content.res.Configuration)>($i2, $r12);

     label01:
        r17 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        entermonitor r17;

     label02:
        $r7 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        $i1 = virtualinvoke $r7.<java.util.ArrayList: int size()>();

        i3 = $i1 - 1;

     label03:
        if i3 < 0 goto label06;

     label04:
        $r9 = <android.view.ViewRootImpl: java.util.ArrayList sConfigCallbacks>;

        $r10 = virtualinvoke $r9.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r11 = (android.view.ViewRootImpl$ConfigChangedCallback) $r10;

        interfaceinvoke $r11.<android.view.ViewRootImpl$ConfigChangedCallback: void onConfigurationChanged(android.content.res.Configuration)>(r16);

     label05:
        i3 = i3 + -1;

        goto label03;

     label06:
        exitmonitor r17;

     label07:
        $r8 = r0.<android.view.ViewRootImpl: android.util.MergedConfiguration mLastReportedMergedConfiguration>;

        virtualinvoke $r8.<android.util.MergedConfiguration: void setConfiguration(android.content.res.Configuration,android.content.res.Configuration)>(r16, r1);

        r0.<android.view.ViewRootImpl: boolean mForceNextConfigUpdate> = z0;

        r18 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ActivityConfigCallback mActivityConfigCallback>;

        if r18 == null goto label08;

        interfaceinvoke r18.<android.view.ViewRootImpl$ActivityConfigCallback: void onConfigurationChanged(android.content.res.Configuration,int)>(r1, i0);

        goto label09;

     label08:
        virtualinvoke r0.<android.view.ViewRootImpl: void updateConfiguration(int)>(i0);

     label09:
        r0.<android.view.ViewRootImpl: boolean mForceNextConfigUpdate> = 0;

        return;

     label10:
        $r13 := @caughtexception;

     label11:
        exitmonitor r17;

     label12:
        throw $r13;

     label13:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("No merged config provided.");

        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private void performContentCaptureInitialReport()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        boolean z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.Class $r4;
        java.lang.String $r5, $r7;
        java.lang.Throwable $r8;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mPerformContentCapture> = 0;

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z1 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(8L);

        if $z1 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dispatchContentCapture() for ");

        $r4 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, $r7);

     label1:
        z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean isContentCaptureEnabled()>();

     label2:
        if z0 != 0 goto label3;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label3:
        virtualinvoke r1.<android.view.View: void dispatchInitialProvideContentCaptureStructure()>();

     label4:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label5:
        $r8 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void performDraw()
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9, $z10, z11, z13, z14, z15, $z16, z17, z18, $z19;
        int i0, $i1, $i2, i4;
        android.view.View$AttachInfo $r1, $r4, $r6, $r13, $r15, $r17, $r19, $r23, $r25, $r30, $r32, $r34, $r36, $r37, $r43, $r47, $r51;
        android.view.View $r2;
        com.android.internal.view.BaseSurfaceHolder $r3, $r11, $r12;
        android.view.ThreadedRenderer $r5, $r7, $r14, $r24, $r26, $r31, $r33, $r39, $r44, $r52;
        android.view.Surface $r8;
        com.android.internal.view.SurfaceCallbackHelper $r9;
        android.view._$$Lambda$ViewRootImpl$dznxCZGM2R1fsBljsJKomLjBRoM $r10;
        java.util.List $r16, $r18, $r20, $r48;
        java.lang.Object $r21;
        android.graphics.RenderNode $r22;
        android.graphics.BLASTBufferQueue $r27, $r29;
        android.view.SurfaceControl$Transaction $r28;
        android.view.ViewTreeObserver $r35;
        android.view._$$Lambda$ViewRootImpl$vBfxngTfPtkwcFoa96FB0CWn5ZI $r38;
        java.lang.Throwable $r40, $r42;
        java.lang.String $r41;
        java.util.ArrayList r45;
        android.os.Handler r46;
        java.util.concurrent.CountDownLatch r49;
        android.view.SurfaceHolder$Callback[] r54;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i1 = $r1.<android.view.View$AttachInfo: int mDisplayState>;

        if $i1 != 1 goto label01;

        $z10 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z10 != 0 goto label01;

        return;

     label01:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 != null goto label02;

        return;

     label02:
        $z1 = r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded>;

        if $z1 != 0 goto label04;

        $z9 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z9 == 0 goto label03;

        goto label04;

     label03:
        z11 = 0;

        goto label05;

     label04:
        z11 = 1;

     label05:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 0;

        r0.<android.view.ViewRootImpl: boolean mIsDrawing> = 1;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "draw");

        z0 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        z13 = 0;

        $r43 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r44 = $r43.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r44 == null goto label11;

        z13 = 0;

        $r32 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r33 = $r32.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $z6 = virtualinvoke $r33.<android.view.ThreadedRenderer: boolean isEnabled()>();

        if $z6 == 0 goto label11;

        $r34 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r35 = $r34.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        r45 = virtualinvoke $r35.<android.view.ViewTreeObserver: java.util.ArrayList captureFrameCommitCallbacks()>();

        $z7 = r0.<android.view.ViewRootImpl: boolean mNextDrawUseBLASTSyncTransaction>;

        if $z7 != 0 goto label09;

        if r45 == null goto label06;

        $i2 = virtualinvoke r45.<java.util.ArrayList: int size()>();

        if $i2 > 0 goto label07;

     label06:
        $z8 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z8 == 0 goto label08;

     label07:
        goto label09;

     label08:
        z14 = 0;

        goto label10;

     label09:
        z14 = 1;

     label10:
        z15 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        z13 = z15;

        if z14 == 0 goto label11;

        $r36 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r46 = $r36.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r37 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r39 = $r37.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $r38 = new android.view._$$Lambda$ViewRootImpl$vBfxngTfPtkwcFoa96FB0CWn5ZI;

        specialinvoke $r38.<android.view._$$Lambda$ViewRootImpl$vBfxngTfPtkwcFoa96FB0CWn5ZI: void <init>(android.view.ViewRootImpl,android.os.Handler,boolean,java.util.ArrayList)>(r0, r46, z0, r45);

        virtualinvoke $r39.<android.view.ThreadedRenderer: void setFrameCompleteCallback(android.graphics.HardwareRenderer$FrameCompleteCallback)>($r38);

        z13 = z15;

     label11:
        $z16 = r0.<android.view.ViewRootImpl: boolean mNextDrawUseBLASTSyncTransaction>;

        if $z16 == 0 goto label13;

        $r25 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r26 = $r25.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r26 == null goto label12;

        $r30 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r31 = $r30.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r31.<android.view.ThreadedRenderer: boolean pause()>();

     label12:
        r0.<android.view.ViewRootImpl: boolean mNextReportConsumeBLAST> = 1;

        r0.<android.view.ViewRootImpl: boolean mNextDrawUseBLASTSyncTransaction> = 0;

        $r27 = r0.<android.view.ViewRootImpl: android.graphics.BLASTBufferQueue mBlastBufferQueue>;

        if $r27 == null goto label13;

        $r29 = r0.<android.view.ViewRootImpl: android.graphics.BLASTBufferQueue mBlastBufferQueue>;

        $r28 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mRtBLASTSyncTransaction>;

        virtualinvoke $r29.<android.graphics.BLASTBufferQueue: void setNextTransaction(android.view.SurfaceControl$Transaction)>($r28);

     label13:
        z17 = specialinvoke r0.<android.view.ViewRootImpl: boolean draw(boolean)>(z11);

     label14:
        z18 = z13;

        if z13 == 0 goto label18;

        z18 = z13;

        if z17 != 0 goto label18;

     label15:
        $r23 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r24 = $r23.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r24.<android.view.ThreadedRenderer: void setFrameCompleteCallback(android.graphics.HardwareRenderer$FrameCompleteCallback)>(null);

     label16:
        z18 = 0;

     label17:
        specialinvoke r0.<android.view.ViewRootImpl: void finishBLASTSync(boolean)>(1);

     label18:
        r0.<android.view.ViewRootImpl: boolean mIsDrawing> = 0;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        $r47 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r48 = $r47.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        if $r48 == null goto label21;

        $r15 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r16 = $r15.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        i0 = interfaceinvoke $r16.<java.util.List: int size()>();

        i4 = 0;

     label19:
        if i4 >= i0 goto label20;

        $r19 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r20 = $r19.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        $r21 = interfaceinvoke $r20.<java.util.List: java.lang.Object get(int)>(i4);

        $r22 = (android.graphics.RenderNode) $r21;

        virtualinvoke $r22.<android.graphics.RenderNode: void endAllAnimators()>();

        i4 = i4 + 1;

        goto label19;

     label20:
        $r17 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r18 = $r17.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        interfaceinvoke $r18.<java.util.List: void clear()>();

     label21:
        $z2 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z2 == 0 goto label30;

        r0.<android.view.ViewRootImpl: boolean mReportNextDraw> = 0;

        r49 = r0.<android.view.ViewRootImpl: java.util.concurrent.CountDownLatch mWindowDrawCountDown>;

        if r49 == null goto label26;

     label22:
        virtualinvoke r49.<java.util.concurrent.CountDownLatch: void await()>();

     label23:
        goto label25;

     label24:
        $r40 := @caughtexception;

        $r41 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r41, "Window redraw count down interrupted!");

     label25:
        r0.<android.view.ViewRootImpl: java.util.concurrent.CountDownLatch mWindowDrawCountDown> = null;

     label26:
        $r51 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r52 = $r51.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r52 == null goto label27;

        $r13 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r14 = $r13.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $z4 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        virtualinvoke $r14.<android.view.ThreadedRenderer: void setStopped(boolean)>($z4);

     label27:
        $r3 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r3 == null goto label28;

        $r8 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z3 = virtualinvoke $r8.<android.view.Surface: boolean isValid()>();

        if $z3 == 0 goto label28;

        $r9 = new com.android.internal.view.SurfaceCallbackHelper;

        $r10 = new android.view._$$Lambda$ViewRootImpl$dznxCZGM2R1fsBljsJKomLjBRoM;

        specialinvoke $r10.<android.view._$$Lambda$ViewRootImpl$dznxCZGM2R1fsBljsJKomLjBRoM: void <init>(android.view.ViewRootImpl)>(r0);

        specialinvoke $r9.<com.android.internal.view.SurfaceCallbackHelper: void <init>(java.lang.Runnable)>($r10);

        $r11 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r54 = virtualinvoke $r11.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        $r12 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r9.<com.android.internal.view.SurfaceCallbackHelper: void dispatchSurfaceRedrawNeededAsync(android.view.SurfaceHolder,android.view.SurfaceHolder$Callback[])>($r12, r54);

        goto label30;

     label28:
        if z18 != 0 goto label30;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r5 == null goto label29;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r7.<android.view.ThreadedRenderer: void fence()>();

     label29:
        virtualinvoke r0.<android.view.ViewRootImpl: void pendingDrawFinished()>();

     label30:
        $z19 = r0.<android.view.ViewRootImpl: boolean mPerformContentCapture>;

        if $z19 == 0 goto label31;

        specialinvoke r0.<android.view.ViewRootImpl: void performContentCaptureInitialReport()>();

     label31:
        return;

     label32:
        $r42 := @caughtexception;

        r0.<android.view.ViewRootImpl: boolean mIsDrawing> = 0;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw $r42;

        catch java.lang.Throwable from label11 to label12 with label32;
        catch java.lang.Throwable from label12 to label13 with label32;
        catch java.lang.Throwable from label13 to label14 with label32;
        catch java.lang.Throwable from label15 to label16 with label32;
        catch java.lang.Throwable from label17 to label18 with label32;
        catch java.lang.InterruptedException from label22 to label23 with label24;
    }

    private void performLayout(android.view.WindowManager$LayoutParams, int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, i9;
        android.view.View r1, $r5, r17;
        java.lang.StringBuilder r2;
        java.util.ArrayList $r3, $r4, $r8, r16, r18;
        android.content.Context $r6;
        android.content.res.Resources $r7;
        java.lang.Object $r9;
        java.lang.String $r13;
        java.lang.Throwable $r14;
        android.view.WindowManager$LayoutParams r15;
        android.view.HandlerActionQueue r19;
        android.view.ViewRootImpl$2 r20;

        r0 := @this: android.view.ViewRootImpl;

        r15 := @parameter0: android.view.WindowManager$LayoutParams;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r0.<android.view.ViewRootImpl: boolean mScrollMayChange> = 1;

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 1;

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 != null goto label01;

        return;

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "layout");

     label02:
        $i3 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i4 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke r1.<android.view.View: void layout(int,int,int,int)>(0, 0, $i3, $i4);

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 0;

        $r3 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        $i5 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i5 <= 0 goto label12;

        $r4 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        r16 = specialinvoke r0.<android.view.ViewRootImpl: java.util.ArrayList getValidLayoutRequesters(java.util.ArrayList,boolean)>($r4, 0);

     label03:
        if r16 == null goto label12;

     label04:
        r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest> = 1;

        i2 = virtualinvoke r16.<java.util.ArrayList: int size()>();

     label05:
        i9 = 0;

     label06:
        if i9 >= i2 goto label09;

     label07:
        $r9 = virtualinvoke r16.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        r17 = (android.view.View) $r9;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestLayout() improperly called by ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" during layout: running second layout pass");

        $r13 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("View", $r13);

        virtualinvoke r17.<android.view.View: void requestLayout()>();

     label08:
        i9 = i9 + 1;

        goto label06;

     label09:
        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r6 = virtualinvoke $r5.<android.view.View: android.content.Context getContext()>();

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        specialinvoke r0.<android.view.ViewRootImpl: boolean measureHierarchy(android.view.View,android.view.WindowManager$LayoutParams,android.content.res.Resources,int,int)>(r1, r15, $r7, i0, i1);

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 1;

        $i6 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i7 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        virtualinvoke r1.<android.view.View: void layout(int,int,int,int)>(0, 0, $i6, $i7);

        r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest> = 0;

        $r8 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        r18 = specialinvoke r0.<android.view.ViewRootImpl: java.util.ArrayList getValidLayoutRequesters(java.util.ArrayList,boolean)>($r8, 1);

     label10:
        if r18 == null goto label12;

     label11:
        r19 = staticinvoke <android.view.ViewRootImpl: android.view.HandlerActionQueue getRunQueue()>();

        r20 = new android.view.ViewRootImpl$2;

        specialinvoke r20.<android.view.ViewRootImpl$2: void <init>(android.view.ViewRootImpl,java.util.ArrayList)>(r0, r18);

        virtualinvoke r19.<android.view.HandlerActionQueue: void post(java.lang.Runnable)>(r20);

     label12:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        r0.<android.view.ViewRootImpl: boolean mInLayout> = 0;

        return;

     label13:
        $r14 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw $r14;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
    }

    private void performMeasure(int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1;
        android.view.View $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 != null goto label1;

        return;

     label1:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "measure");

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r3.<android.view.View: void measure(int,int)>(i0, i1);

     label3:
        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;

     label4:
        $r4 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void performTraversals()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r28, $r29, $r91, $r100, $r126, $r134, $r137, r257, r258;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $i100, i101, i102, $i103, $i104, i105, i106, $i107, i108, i109, i110, i112, i113, i114, i115, i116, i117, $i118, i119, i120, i121, i122, i123, $i124, $i125, i126, i127, i128, i129, i130, i131, $i132, $i133, $i134, $i135, i136, i137, i138, i139, $i140, $i141, $i142, $i143, i144, $i145, $i146, i147, i148, i149, $i151, i152, i153;
        boolean z0, z4, z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z29, $z30, $z32, $z33, $z34, $z37, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, $z56, $z57, $z58, $z59, $z60, $z61, $z62, $z63, $z64, $z65, $z66, $z67, $z68, $z70, $z71, $z72, $z74, $z75, $z76, z77, z78, $z79, z80, z81, z82, z83, z84, z85, z86, z87, z89, $z91, z92, $z93, z94, z95, $z96, z97, z98, $z99, z100, z102, z105, z112, z113, z114, z115, z116, z118, z119, z120, z121, z122, z123, z125, z126, z135, z136, z137, z139, z140, z141, z142, z143, z144, z145, z146, z147, z148, z149, z150, z151, z153, z154, $z155, z156, z157, z158, z159, z160, z161, z163, z164, z165, $z166, z167, z168, $z170, $z176, z177, $z178, z179, z180, z181, z182, $z183, z184, $z185, z186, z187, z188, z190;
        android.view.IWindowSession r2, $r54;
        android.view.HandlerActionQueue $r3;
        android.view.View$AttachInfo $r4, $r6, $r7, $r9, $r12, $r15, $r16, $r31, $r32, $r34, $r42, $r43, $r56, $r84, $r87, $r93, $r95, $r97, $r104, $r105, $r108, $r110, $r112, $r113, $r114, $r115, $r121, $r125, $r129, $r131, $r135, $r136, $r139, $r144, $r145, $r148, $r149, $r186, $r187, $r188, $r190, $r191, $r197, $r215, $r231, $r232, $r240, $r242, $r259, $r265;
        android.os.Handler $r5;
        android.view.Surface $r8, $r57, $r72, $r86, $r88, $r106, $r118, $r119, $r120, $r199, $r214, $r235, r238;
        android.util.MergedConfiguration $r10, $r11, r211;
        android.view.DisplayCutout$ParcelableWrapper $r13, $r14, $r116, $r117, $r140, $r141;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte $b10, $b150;
        android.view.ViewTreeObserver $r17, $r33, $r44, $r150, $r198;
        java.util.ArrayList $r18, $r19, $r20, $r23, $r24, $r25, $r130, $r132, r263, r264;
        java.lang.Object $r21, $r26, $r133;
        android.animation.LayoutTransition $r22, $r27;
        android.view.ViewGroup $r30;
        android.view.ViewTreeObserver$InternalInsetsInfo $r35, $r41, r249;
        android.graphics.Rect $r36, $r37, $r74, $r75, $r76, $r77, $r82, $r83, r183, r202, r222, r223, r224, $r244, r251, r252;
        android.content.res.CompatibilityInfo$Translator $r38, $r40, r247, r250;
        android.graphics.Region $r39, $r47, $r48, $r49, $r50, $r51, $r52, $r55, $r103, r245, r253;
        int[] $r45, $r46, r246;
        android.view.ViewRootImpl$W $r53, r254;
        com.android.internal.view.BaseSurfaceHolder $r58, $r59, $r61, $r63, $r65, $r66, $r68, $r69, $r70, $r73, $r155, r200, r220, $r233, r237;
        java.util.concurrent.locks.ReentrantLock $r60, $r62, $r64, $r124, $r156;
        android.view.SurfaceHolder$Callback $r67, $r71;
        android.view.WindowInsets $r78, $r80;
        android.graphics.Insets $r79, $r81;
        android.view.ThreadedRenderer $r85, $r89, $r94, $r96, $r98, $r107, $r109, $r111, $r122, r201, r216, r217, r241;
        java.lang.ref.WeakReference $r90, $r102;
        android.widget.Scroller $r92, $r99;
        com.android.internal.view.RootViewSurfaceTaker $r101;
        android.view.Choreographer $r123;
        android.content.Context $r127, $r138, $r146;
        android.content.res.Resources $r128, $r147, r192;
        android.graphics.Point $r142, $r151;
        android.view.Display $r143, $r152, $r179;
        android.os.RemoteException $r153, $r158, $r159, $r161, $r162, $r163, $r165, $r166, $r167, $r168, $r169, $r170, $r171, $r172, $r173, $r174, $r175, $r176, $r177;
        java.lang.Throwable $r154;
        android.view.Surface$OutOfResourcesException $r157, $r160, $r164, r218;
        android.view.WindowManager$LayoutParams r178, r182, r195, r196, $r243, r260, $r262;
        android.view.DisplayAdjustments $r180;
        android.content.res.CompatibilityInfo $r181;
        android.content.res.Configuration r184, $r189, r194;
        android.graphics.FrameInfo r207;
        android.view.SurfaceHolder$Callback[] r234, r236;
        android.view.ImeFocusController $r261;
        android.util.SparseArray $r266;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 == null goto label353;

        $z11 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z11 != 0 goto label001;

        goto label353;

     label001:
        r0.<android.view.ViewRootImpl: boolean mIsInTraversal> = 1;

        r0.<android.view.ViewRootImpl: boolean mWillDrawSoon> = 1;

        z77 = 0;

        r178 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i0 = virtualinvoke r0.<android.view.ViewRootImpl: int getHostVisibility()>();

        $z12 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z12 != 0 goto label003;

        $i100 = r0.<android.view.ViewRootImpl: int mViewVisibility>;

        if $i100 != i0 goto label002;

        $z75 = r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded>;

        if $z75 != 0 goto label002;

        $z76 = r0.<android.view.ViewRootImpl: boolean mAppVisibilityChanged>;

        if $z76 == 0 goto label003;

     label002:
        z78 = 1;

        goto label004;

     label003:
        z78 = 0;

     label004:
        r0.<android.view.ViewRootImpl: boolean mAppVisibilityChanged> = 0;

        $z79 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z79 != 0 goto label009;

        $i99 = r0.<android.view.ViewRootImpl: int mViewVisibility>;

        if $i99 != 0 goto label005;

        z80 = 1;

        goto label006;

     label005:
        z80 = 0;

     label006:
        if i0 != 0 goto label007;

        z81 = 1;

        goto label008;

     label007:
        z81 = 0;

     label008:
        if z80 == z81 goto label009;

        z82 = 1;

        goto label010;

     label009:
        z82 = 0;

     label010:
        $r179 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $r180 = virtualinvoke $r179.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        $r181 = virtualinvoke $r180.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        z83 = virtualinvoke $r181.<android.content.res.CompatibilityInfo: boolean supportsScreen()>();

        z84 = r0.<android.view.ViewRootImpl: boolean mLastInCompatMode>;

        if z83 != z84 goto label013;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        if z84 == 0 goto label011;

        $i97 = r178.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i98 = $i97 & -129;

        r178.<android.view.WindowManager$LayoutParams: int privateFlags> = $i98;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 0;

        goto label012;

     label011:
        $i95 = r178.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i96 = $i95 | 128;

        r178.<android.view.WindowManager$LayoutParams: int privateFlags> = $i96;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 1;

     label012:
        r182 = r178;

        goto label014;

     label013:
        r182 = null;

     label014:
        r183 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $z13 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z13 == 0 goto label020;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        $r146 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r147 = virtualinvoke $r146.<android.content.Context: android.content.res.Resources getResources()>();

        r184 = virtualinvoke $r147.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $z74 = staticinvoke <android.view.ViewRootImpl: boolean shouldUseDisplaySize(android.view.WindowManager$LayoutParams)>(r178);

        if $z74 == 0 goto label015;

        $r151 = new android.graphics.Point;

        specialinvoke $r151.<android.graphics.Point: void <init>()>();

        $r152 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        virtualinvoke $r152.<android.view.Display: void getRealSize(android.graphics.Point)>($r151);

        i101 = $r151.<android.graphics.Point: int x>;

        i102 = $r151.<android.graphics.Point: int y>;

        goto label018;

     label015:
        $i90 = r178.<android.view.WindowManager$LayoutParams: int width>;

        if $i90 == -2 goto label017;

        $i94 = r178.<android.view.WindowManager$LayoutParams: int height>;

        if $i94 != -2 goto label016;

        goto label017;

     label016:
        i101 = virtualinvoke r183.<android.graphics.Rect: int width()>();

        i102 = virtualinvoke r183.<android.graphics.Rect: int height()>();

        goto label018;

     label017:
        $i91 = r184.<android.content.res.Configuration: int screenWidthDp>;

        i101 = virtualinvoke r0.<android.view.ViewRootImpl: int dipToPx(int)>($i91);

        $i92 = r184.<android.content.res.Configuration: int screenHeightDp>;

        i102 = virtualinvoke r0.<android.view.ViewRootImpl: int dipToPx(int)>($i92);

     label018:
        $r186 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r186.<android.view.View$AttachInfo: boolean mUse32BitDrawingCache> = 1;

        $r187 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r187.<android.view.View$AttachInfo: int mWindowVisibility> = i0;

        $r188 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r188.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 0;

        $r189 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfigurationFromResources>;

        virtualinvoke $r189.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>(r184);

        $r190 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i103 = $r190.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        r0.<android.view.ViewRootImpl: int mLastSystemUiVisibility> = $i103;

        $i104 = r0.<android.view.ViewRootImpl: int mViewLayoutDirectionInitial>;

        if $i104 != 2 goto label019;

        $i93 = virtualinvoke r184.<android.content.res.Configuration: int getLayoutDirection()>();

        virtualinvoke r1.<android.view.View: void setLayoutDirection(int)>($i93);

     label019:
        $r148 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        virtualinvoke r1.<android.view.View: void dispatchAttachedToWindow(android.view.View$AttachInfo,int)>($r148, 0);

        $r149 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r150 = $r149.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r150.<android.view.ViewTreeObserver: void dispatchOnWindowAttachedChange(boolean)>(1);

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchApplyInsets(android.view.View)>(r1);

        goto label022;

     label020:
        i105 = virtualinvoke r183.<android.graphics.Rect: int width()>();

        i106 = virtualinvoke r183.<android.graphics.Rect: int height()>();

        $i2 = r0.<android.view.ViewRootImpl: int mWidth>;

        if i105 != $i2 goto label021;

        i102 = i106;

        i101 = i105;

        $i89 = r0.<android.view.ViewRootImpl: int mHeight>;

        if i106 == $i89 goto label022;

     label021:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        z77 = 1;

        i101 = i105;

        i102 = i106;

     label022:
        if z78 == 0 goto label027;

        $r145 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r145.<android.view.View$AttachInfo: int mWindowVisibility> = i0;

        virtualinvoke r1.<android.view.View: void dispatchWindowVisibilityChanged(int)>(i0);

        if z82 == 0 goto label025;

        if i0 != 0 goto label023;

        z85 = 1;

        goto label024;

     label023:
        z85 = 0;

     label024:
        virtualinvoke r1.<android.view.View: boolean dispatchVisibilityAggregated(boolean)>(z85);

     label025:
        if i0 != 0 goto label026;

        $z72 = r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded>;

        if $z72 == 0 goto label027;

     label026:
        specialinvoke r0.<android.view.ViewRootImpl: void endDragResizing()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void destroyHardwareResources()>();

     label027:
        $r191 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i107 = $r191.<android.view.View$AttachInfo: int mWindowVisibility>;

        if $i107 == 0 goto label028;

        virtualinvoke r1.<android.view.View: void clearAccessibilityFocus()>();

     label028:
        $r3 = staticinvoke <android.view.ViewRootImpl: android.view.HandlerActionQueue getRunQueue()>();

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        virtualinvoke $r3.<android.view.HandlerActionQueue: void executeActions(android.os.Handler)>($r5);

        z86 = 0;

        $z14 = r0.<android.view.ViewRootImpl: boolean mLayoutRequested>;

        if $z14 == 0 goto label030;

        $z70 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z70 == 0 goto label029;

        $z71 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z71 == 0 goto label030;

     label029:
        z87 = 1;

        goto label031;

     label030:
        z87 = 0;

     label031:
        if z87 == 0 goto label038;

        $r137 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r138 = virtualinvoke $r137.<android.view.View: android.content.Context getContext()>();

        r192 = virtualinvoke $r138.<android.content.Context: android.content.res.Resources getResources()>();

        $z63 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z63 == 0 goto label032;

        $r144 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z66 = r0.<android.view.ViewRootImpl: boolean mAddedTouchMode>;

        $z67 = $z66 ^ 1;

        $r144.<android.view.View$AttachInfo: boolean mInTouchMode> = $z67;

        $z68 = r0.<android.view.ViewRootImpl: boolean mAddedTouchMode>;

        specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>($z68);

        i108 = i101;

        z89 = 0;

        goto label037;

     label032:
        $r141 = r0.<android.view.ViewRootImpl: android.view.DisplayCutout$ParcelableWrapper mPendingDisplayCutout>;

        $r139 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r140 = $r139.<android.view.View$AttachInfo: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

        $z64 = virtualinvoke $r141.<android.view.DisplayCutout$ParcelableWrapper: boolean equals(java.lang.Object)>($r140);

        if $z64 != 0 goto label033;

        z86 = 1;

     label033:
        $i85 = r178.<android.view.WindowManager$LayoutParams: int width>;

        if $i85 == -2 goto label035;

        $i88 = r178.<android.view.WindowManager$LayoutParams: int height>;

        if $i88 != -2 goto label034;

        goto label035;

     label034:
        i108 = i101;

        z89 = z86;

        goto label037;

     label035:
        z77 = 1;

        $z65 = staticinvoke <android.view.ViewRootImpl: boolean shouldUseDisplaySize(android.view.WindowManager$LayoutParams)>(r178);

        if $z65 == 0 goto label036;

        $r142 = new android.graphics.Point;

        specialinvoke $r142.<android.graphics.Point: void <init>()>();

        $r143 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        virtualinvoke $r143.<android.view.Display: void getRealSize(android.graphics.Point)>($r142);

        i109 = $r142.<android.graphics.Point: int x>;

        i102 = $r142.<android.graphics.Point: int y>;

        z89 = z86;

        i108 = i109;

        goto label037;

     label036:
        r194 = virtualinvoke r192.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i86 = r194.<android.content.res.Configuration: int screenWidthDp>;

        i110 = virtualinvoke r0.<android.view.ViewRootImpl: int dipToPx(int)>($i86);

        $i87 = r194.<android.content.res.Configuration: int screenHeightDp>;

        i102 = virtualinvoke r0.<android.view.ViewRootImpl: int dipToPx(int)>($i87);

        z89 = z86;

        i108 = i110;

     label037:
        $z91 = specialinvoke r0.<android.view.ViewRootImpl: boolean measureHierarchy(android.view.View,android.view.WindowManager$LayoutParams,android.content.res.Resources,int,int)>(r1, r178, r192, i108, i102);

        z77 = z77 | $z91;

        i112 = i108;

        i113 = i102;

        z92 = z89;

        goto label039;

     label038:
        z92 = 0;

        i113 = i102;

        i112 = i101;

     label039:
        $z15 = specialinvoke r0.<android.view.ViewRootImpl: boolean collectViewAttributes()>();

        if $z15 == 0 goto label040;

        r182 = r178;

     label040:
        r195 = r182;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z16 = $r6.<android.view.View$AttachInfo: boolean mForceReportNewAttributes>;

        if $z16 == 0 goto label041;

        $r136 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r136.<android.view.View$AttachInfo: boolean mForceReportNewAttributes> = 0;

        r195 = r178;

     label041:
        $z17 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z17 != 0 goto label042;

        r196 = r195;

        $r135 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z62 = $r135.<android.view.View$AttachInfo: boolean mViewVisibilityChanged>;

        if $z62 == 0 goto label047;

     label042:
        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7.<android.view.View$AttachInfo: boolean mViewVisibilityChanged> = 0;

        $i3 = r0.<android.view.ViewRootImpl: int mSoftInputMode>;

        i114 = $i3 & 240;

        r196 = r195;

        if i114 != 0 goto label047;

        $r129 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r130 = $r129.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        i115 = virtualinvoke $r130.<java.util.ArrayList: int size()>();

        i116 = 0;

     label043:
        if i116 >= i115 goto label045;

        $r131 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r132 = $r131.<android.view.View$AttachInfo: java.util.ArrayList mScrollContainers>;

        $r133 = virtualinvoke $r132.<java.util.ArrayList: java.lang.Object get(int)>(i116);

        $r134 = (android.view.View) $r133;

        $z61 = virtualinvoke $r134.<android.view.View: boolean isShown()>();

        if $z61 == 0 goto label044;

        i114 = 16;

     label044:
        i116 = i116 + 1;

        goto label043;

     label045:
        i117 = i114;

        if i114 != 0 goto label046;

        i117 = 32;

     label046:
        r196 = r195;

        $i80 = r178.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i81 = $i80 & 240;

        if $i81 == i117 goto label047;

        $i82 = r178.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i83 = $i82 & -241;

        $i84 = $i83 | i117;

        r178.<android.view.WindowManager$LayoutParams: int softInputMode> = $i84;

        r196 = r178;

     label047:
        $z93 = r0.<android.view.ViewRootImpl: boolean mApplyInsetsRequested>;

        if $z93 == 0 goto label049;

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchApplyInsets(android.view.View)>(r1);

        $z59 = r0.<android.view.ViewRootImpl: boolean mLayoutRequested>;

        if $z59 == 0 goto label048;

        $r126 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r127 = virtualinvoke $r126.<android.view.View: android.content.Context getContext()>();

        $r128 = virtualinvoke $r127.<android.content.Context: android.content.res.Resources getResources()>();

        $z60 = specialinvoke r0.<android.view.ViewRootImpl: boolean measureHierarchy(android.view.View,android.view.WindowManager$LayoutParams,android.content.res.Resources,int,int)>(r1, r178, $r128, i112, i113);

        z94 = z77 | $z60;

        goto label050;

     label048:
        goto label049;

     label049:
        z94 = z77;

     label050:
        if z87 == 0 goto label051;

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 0;

     label051:
        if z87 == 0 goto label056;

        if z94 == 0 goto label056;

        $i69 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i70 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        if $i69 != $i70 goto label055;

        $i71 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i72 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        if $i71 != $i72 goto label055;

        $i73 = r178.<android.view.WindowManager$LayoutParams: int width>;

        if $i73 != -2 goto label053;

        $i77 = virtualinvoke r183.<android.graphics.Rect: int width()>();

        if $i77 >= i112 goto label053;

        $i78 = virtualinvoke r183.<android.graphics.Rect: int width()>();

        $i79 = r0.<android.view.ViewRootImpl: int mWidth>;

        if $i78 != $i79 goto label052;

        goto label053;

     label052:
        goto label055;

     label053:
        $i118 = r178.<android.view.WindowManager$LayoutParams: int height>;

        if $i118 != -2 goto label054;

        $i74 = virtualinvoke r183.<android.graphics.Rect: int height()>();

        if $i74 >= i113 goto label056;

        $i75 = virtualinvoke r183.<android.graphics.Rect: int height()>();

        $i76 = r0.<android.view.ViewRootImpl: int mHeight>;

        if $i75 == $i76 goto label056;

        goto label055;

     label054:
        goto label056;

     label055:
        z95 = 1;

        goto label057;

     label056:
        z95 = 0;

     label057:
        $z96 = r0.<android.view.ViewRootImpl: boolean mDragResizing>;

        if $z96 == 0 goto label058;

        $i68 = r0.<android.view.ViewRootImpl: int mResizeMode>;

        if $i68 != 0 goto label058;

        z97 = 1;

        goto label059;

     label058:
        z97 = 0;

     label059:
        z98 = r0.<android.view.ViewRootImpl: boolean mActivityRelaunched>;

        $r197 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r198 = $r197.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        $z99 = virtualinvoke $r198.<android.view.ViewTreeObserver: boolean hasComputeInternalInsetsListeners()>();

        if $z99 != 0 goto label061;

        $r125 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z58 = $r125.<android.view.View$AttachInfo: boolean mHasNonEmptyGivenInternalInsets>;

        if $z58 == 0 goto label060;

        goto label061;

     label060:
        z100 = 0;

        goto label062;

     label061:
        z100 = 1;

     label062:
        $r199 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        i1 = virtualinvoke $r199.<android.view.Surface: int getGenerationId()>();

        if i0 != 0 goto label063;

        z102 = 1;

        goto label064;

     label063:
        z102 = 0;

     label064:
        z0 = r0.<android.view.ViewRootImpl: boolean mForceNextWindowRelayout>;

        z105 = 0;

        z4 = r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged>;

        if z4 == 0 goto label065;

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 0;

        r196 = r178;

        goto label065;

     label065:
        if r196 == null goto label067;

        $i65 = r1.<android.view.View: int mPrivateFlags>;

        $i66 = $i65 & 512;

        if $i66 == 0 goto label066;

        $i67 = r196.<android.view.WindowManager$LayoutParams: int format>;

        $z57 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i67);

        if $z57 != 0 goto label066;

        r196.<android.view.WindowManager$LayoutParams: int format> = -3;

     label066:
        staticinvoke <android.view.ViewRootImpl: void adjustLayoutParamsForCompatibility(android.view.WindowManager$LayoutParams)>(r196);

        specialinvoke r0.<android.view.ViewRootImpl: void controlInsetsForCompatibility(android.view.WindowManager$LayoutParams)>(r196);

        goto label067;

     label067:
        z112 = 0;

        $z18 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z18 != 0 goto label069;

        $z54 = z95 | z97;

        $z55 = $z54 | z98;

        if $z55 != 0 goto label069;

        if z78 != 0 goto label069;

        if z92 != 0 goto label069;

        if r196 != null goto label069;

        $z56 = r0.<android.view.ViewRootImpl: boolean mForceNextWindowRelayout>;

        if $z56 == 0 goto label068;

        goto label069;

     label068:
        specialinvoke r0.<android.view.ViewRootImpl: void maybeHandleWindowMove(android.graphics.Rect)>(r183);

        z113 = 0;

        i119 = 0;

        z114 = 0;

        z115 = 0;

        goto label297;

     label069:
        z116 = 0;

        r0.<android.view.ViewRootImpl: boolean mForceNextWindowRelayout> = 0;

        if z102 == 0 goto label073;

        if z100 == 0 goto label071;

        $z53 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z53 != 0 goto label070;

        if z78 == 0 goto label071;

     label070:
        z118 = 1;

        goto label072;

     label071:
        z118 = 0;

     label072:
        z119 = z118;

        goto label074;

     label073:
        z119 = 0;

     label074:
        r200 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if r200 == null goto label075;

        $r124 = r200.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r124.<java.util.concurrent.locks.ReentrantLock: void lock()>();

        r0.<android.view.ViewRootImpl: boolean mDrawingAllowed> = 1;

        goto label075;

     label075:
        z120 = 0;

        $r8 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        z121 = virtualinvoke $r8.<android.view.Surface: boolean isValid()>();

     label076:
        $r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r201 = $r9.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

     label077:
        if r201 == null goto label097;

     label078:
        $r121 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r122 = $r121.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        z122 = virtualinvoke $r122.<android.view.ThreadedRenderer: boolean pause()>();

     label079:
        if z122 == 0 goto label090;

     label080:
        r202 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

     label081:
        z123 = 0;

     label082:
        i120 = r0.<android.view.ViewRootImpl: int mWidth>;

     label083:
        i121 = r0.<android.view.ViewRootImpl: int mHeight>;

     label084:
        virtualinvoke r202.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, i120, i121);

     label085:
        goto label090;

     label086:
        $r167 := @caughtexception;

        i119 = 0;

        z125 = 0;

        z126 = 0;

        z105 = 0;

        z115 = 0;

        z113 = 0;

        goto label269;

     label087:
        $r168 := @caughtexception;

        i119 = 0;

        z125 = 0;

        z126 = 0;

        z105 = 0;

        z115 = 0;

        z113 = 0;

        goto label269;

     label088:
        $r161 := @caughtexception;

        i119 = 0;

        z125 = 0;

        z126 = 0;

        z105 = 0;

        z115 = 0;

        z113 = 0;

        goto label269;

     label089:
        $r174 := @caughtexception;

        z123 = 0;

        i119 = 0;

        z125 = 0;

        z126 = 0;

        z105 = 0;

        z115 = 0;

        z113 = 0;

        goto label269;

     label090:
        z123 = 0;

     label091:
        $r123 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        r207 = $r123.<android.view.Choreographer: android.graphics.FrameInfo mFrameInfo>;

     label092:
        virtualinvoke r207.<android.graphics.FrameInfo: void addFlags(long)>(1L);

     label093:
        goto label097;

     label094:
        $r159 := @caughtexception;

        i119 = 0;

        z125 = 0;

        z126 = 0;

        z105 = 0;

        z115 = 0;

        z113 = 0;

        goto label269;

     label095:
        $r175 := @caughtexception;

        i119 = 0;

        z125 = 0;

        z126 = 0;

        z105 = 0;

        z115 = 0;

        z113 = 0;

        goto label269;

     label096:
        $r153 := @caughtexception;

        z123 = 0;

        i119 = 0;

        z125 = 0;

        z126 = 0;

        z105 = 0;

        z115 = 0;

        z113 = 0;

        goto label269;

     label097:
        i122 = specialinvoke r0.<android.view.ViewRootImpl: int relayoutWindow(android.view.WindowManager$LayoutParams,int,boolean)>(r196, i0, z119);

     label098:
        $r11 = r0.<android.view.ViewRootImpl: android.util.MergedConfiguration mPendingMergedConfiguration>;

        $r10 = r0.<android.view.ViewRootImpl: android.util.MergedConfiguration mLastReportedMergedConfiguration>;

        z135 = virtualinvoke $r11.<android.util.MergedConfiguration: boolean equals(java.lang.Object)>($r10);

     label099:
        z136 = 0;

        if z135 != 0 goto label106;

     label100:
        r211 = r0.<android.view.ViewRootImpl: android.util.MergedConfiguration mPendingMergedConfiguration>;

        $z52 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z52 != 0 goto label102;

     label101:
        z137 = 1;

        goto label103;

     label102:
        z137 = 0;

     label103:
        specialinvoke r0.<android.view.ViewRootImpl: void performConfigurationChange(android.util.MergedConfiguration,boolean,int)>(r211, z137, -1);

     label104:
        z136 = 1;

        goto label106;

     label105:
        $r166 := @caughtexception;

        i119 = i122;

        z125 = 0;

        z126 = 0;

        z105 = 0;

        z115 = 0;

        z113 = 0;

        z123 = 0;

        goto label269;

     label106:
        z116 = z136;

     label107:
        $r14 = r0.<android.view.ViewRootImpl: android.view.DisplayCutout$ParcelableWrapper mPendingDisplayCutout>;

        $r12 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r13 = $r12.<android.view.View$AttachInfo: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

        z139 = virtualinvoke $r14.<android.view.DisplayCutout$ParcelableWrapper: boolean equals(java.lang.Object)>($r13);

     label108:
        $i4 = i122 & 32;

        if $i4 == 0 goto label109;

        z126 = 1;

        goto label110;

     label109:
        z126 = 0;

     label110:
        z140 = 0;

        z141 = 0;

        z142 = 0;

        z143 = 0;

        z144 = 0;

     label111:
        $z20 = r0.<android.view.ViewRootImpl: boolean mPendingAlwaysConsumeSystemBars>;

        $r15 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z19 = $r15.<android.view.View$AttachInfo: boolean mAlwaysConsumeSystemBars>;

        if $z20 == $z19 goto label113;

     label112:
        z145 = 1;

        goto label114;

     label113:
        z145 = 0;

     label114:
        z140 = 0;

        z141 = 0;

        z142 = 0;

        z143 = 0;

        z144 = 0;

     label115:
        $i5 = virtualinvoke r178.<android.view.WindowManager$LayoutParams: int getColorMode()>();

        z10 = specialinvoke r0.<android.view.ViewRootImpl: boolean hasColorModeChanged(int)>($i5);

     label116:
        if z121 != 0 goto label120;

        z146 = 0;

        z147 = 0;

        z148 = 0;

        z149 = 0;

        z150 = 0;

     label117:
        $r120 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z51 = virtualinvoke $r120.<android.view.Surface: boolean isValid()>();

        if $z51 == 0 goto label120;

     label118:
        z151 = 1;

        goto label121;

     label119:
        $r169 := @caughtexception;

        i119 = i122;

        z125 = z136;

        z105 = z146;

        z115 = z147;

        z113 = z148;

        z120 = z149;

        z123 = z150;

        goto label269;

     label120:
        z151 = 0;

     label121:
        if z121 == 0 goto label124;

        z146 = z151;

        z147 = 0;

        z148 = 0;

        z149 = 0;

        z150 = 0;

     label122:
        $r119 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        z153 = virtualinvoke $r119.<android.view.Surface: boolean isValid()>();

     label123:
        if z153 != 0 goto label124;

        z154 = 1;

        goto label125;

     label124:
        z154 = 0;

     label125:
        z140 = z151;

        z141 = z154;

        z142 = 0;

        z143 = 0;

        z144 = 0;

     label126:
        $r214 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        i123 = virtualinvoke $r214.<android.view.Surface: int getGenerationId()>();

     label127:
        if i1 == i123 goto label130;

        z146 = z151;

        z147 = z154;

        z148 = 0;

        z149 = 0;

        z150 = 0;

     label128:
        $r118 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z50 = virtualinvoke $r118.<android.view.Surface: boolean isValid()>();

        if $z50 == 0 goto label130;

     label129:
        z113 = 1;

        goto label131;

     label130:
        z113 = 0;

     label131:
        z149 = 0;

        $z155 = z139 ^ 1;

        if $z155 == 0 goto label134;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = 0;

        z150 = 0;

     label132:
        $r115 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r117 = $r115.<android.view.View$AttachInfo: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

        $r116 = r0.<android.view.ViewRootImpl: android.view.DisplayCutout$ParcelableWrapper mPendingDisplayCutout>;

        virtualinvoke $r117.<android.view.DisplayCutout$ParcelableWrapper: void set(android.view.DisplayCutout$ParcelableWrapper)>($r116);

     label133:
        z149 = 1;

     label134:
        z156 = z149;

        if z145 == 0 goto label137;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z150 = 0;

     label135:
        $r114 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z49 = r0.<android.view.ViewRootImpl: boolean mPendingAlwaysConsumeSystemBars>;

        $r114.<android.view.View$AttachInfo: boolean mAlwaysConsumeSystemBars> = $z49;

     label136:
        z156 = 1;

     label137:
        z140 = z151;

        z141 = z154;

        z142 = z113;

        z143 = z156;

        z144 = 0;

     label138:
        z157 = specialinvoke r0.<android.view.ViewRootImpl: boolean updateCaptionInsets()>();

     label139:
        if z157 == 0 goto label140;

        z156 = 1;

     label140:
        if z156 != 0 goto label145;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z156;

        z150 = 0;

     label141:
        $i64 = r0.<android.view.ViewRootImpl: int mLastSystemUiVisibility>;

        $r113 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i63 = $r113.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        if $i64 != $i63 goto label145;

     label142:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z156;

        z150 = 0;

     label143:
        z158 = r0.<android.view.ViewRootImpl: boolean mApplyInsetsRequested>;

     label144:
        z120 = z156;

        if z158 == 0 goto label150;

     label145:
        z140 = z151;

        z141 = z154;

        z142 = z113;

        z143 = z156;

        z144 = 0;

     label146:
        $r215 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i124 = $r215.<android.view.View$AttachInfo: int mSystemUiVisibility>;

        r0.<android.view.ViewRootImpl: int mLastSystemUiVisibility> = $i124;

     label147:
        z140 = z151;

        z141 = z154;

        z142 = z113;

        z143 = z156;

        z144 = 0;

     label148:
        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchApplyInsets(android.view.View)>(r1);

     label149:
        z120 = 1;

     label150:
        if z10 == 0 goto label160;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label151:
        $r110 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r111 = $r110.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r111 == null goto label160;

     label152:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label153:
        $r112 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r216 = $r112.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

     label154:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label155:
        $i62 = virtualinvoke r178.<android.view.WindowManager$LayoutParams: int getColorMode()>();

        if $i62 != 1 goto label157;

     label156:
        z159 = 1;

        goto label158;

     label157:
        z159 = 0;

     label158:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label159:
        virtualinvoke r216.<android.view.ThreadedRenderer: void setWideGamut(boolean)>(z159);

     label160:
        if z151 == 0 goto label183;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label161:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label162:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label163:
        $r103 = r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion>;

        virtualinvoke $r103.<android.graphics.Region: void setEmpty()>();

     label164:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label165:
        $r104 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r217 = $r104.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

     label166:
        if r217 == null goto label178;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label167:
        $r105 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r107 = $r105.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $r106 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        z160 = virtualinvoke $r107.<android.view.ThreadedRenderer: boolean initialize(android.view.Surface)>($r106);

     label168:
        z161 = z160;

        if z160 == 0 goto label174;

        z123 = z160;

     label169:
        $i60 = r1.<android.view.View: int mPrivateFlags>;

        $i61 = $i60 & 512;

        if $i61 != 0 goto label174;

     label170:
        z123 = z160;

     label171:
        $r108 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r109 = $r108.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r109.<android.view.ThreadedRenderer: void allocateBuffers()>();

     label172:
        goto label174;

     label173:
        $r164 := @caughtexception;

        r218 = $r164;

        z123 = z160;

        goto label176;

     label174:
        goto label179;

     label175:
        $r160 := @caughtexception;

        r218 = $r160;

        z123 = 0;

     label176:
        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>(r218);

     label177:
        return;

     label178:
        z161 = 0;

     label179:
        z123 = z161;

     label180:
        specialinvoke r0.<android.view.ViewRootImpl: void notifySurfaceCreated()>();

     label181:
        z123 = z161;

        goto label221;

     label182:
        $r171 := @caughtexception;

        i119 = i122;

        z125 = z136;

        z105 = z151;

        z115 = z154;

        goto label269;

     label183:
        if z154 == 0 goto label206;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label184:
        $r90 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        if $r90 == null goto label187;

     label185:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label186:
        $r102 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        virtualinvoke $r102.<java.lang.ref.WeakReference: void clear()>();

     label187:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label188:
        r0.<android.view.ViewRootImpl: int mCurScrollY> = 0;

     label189:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label190:
        r0.<android.view.ViewRootImpl: int mScrollY> = 0;

     label191:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label192:
        $r91 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z47 = $r91 instanceof com.android.internal.view.RootViewSurfaceTaker;

        if $z47 == 0 goto label195;

     label193:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label194:
        $r100 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r101 = (com.android.internal.view.RootViewSurfaceTaker) $r100;

        interfaceinvoke $r101.<com.android.internal.view.RootViewSurfaceTaker: void onRootViewScrollYChanged(int)>(0);

     label195:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label196:
        $r92 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r92 == null goto label199;

     label197:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label198:
        $r99 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        virtualinvoke $r99.<android.widget.Scroller: void abortAnimation()>();

     label199:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

        z123 = 0;

     label200:
        $r93 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r94 = $r93.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r94 == null goto label221;

     label201:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

        z123 = 0;

     label202:
        $r95 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r96 = $r95.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $z48 = virtualinvoke $r96.<android.view.ThreadedRenderer: boolean isEnabled()>();

        if $z48 == 0 goto label221;

     label203:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label204:
        $r97 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r98 = $r97.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r98.<android.view.ThreadedRenderer: void destroy()>();

     label205:
        z123 = 0;

        goto label221;

     label206:
        if z113 != 0 goto label207;

        if z126 != 0 goto label207;

        if z0 != 0 goto label207;

        z123 = 0;

        if z10 == 0 goto label221;

     label207:
        z140 = z151;

        z141 = z154;

        z142 = z113;

        z143 = z120;

        z144 = 0;

     label208:
        r220 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

     label209:
        z123 = 0;

        if r220 != null goto label221;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

        z123 = 0;

     label210:
        $r84 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r85 = $r84.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r85 == null goto label221;

     label211:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

        z123 = 0;

     label212:
        $r86 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z46 = virtualinvoke $r86.<android.view.Surface: boolean isValid()>();

        if $z46 == 0 goto label221;

     label213:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label214:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label215:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label216:
        $r87 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r89 = $r87.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $r88 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r89.<android.view.ThreadedRenderer: void updateSurface(android.view.Surface)>($r88);

     label217:
        z123 = 0;

        goto label221;

     label218:
        $r157 := @caughtexception;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = 0;

     label219:
        specialinvoke r0.<android.view.ViewRootImpl: void handleOutOfResourcesException(android.view.Surface$OutOfResourcesException)>($r157);

     label220:
        return;

     label221:
        if z151 != 0 goto label223;

        if z113 == 0 goto label223;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = z123;

     label222:
        specialinvoke r0.<android.view.ViewRootImpl: void notifySurfaceReplaced()>();

     label223:
        $i125 = i122 & 16;

        if $i125 == 0 goto label224;

        z163 = 1;

        goto label225;

     label224:
        z163 = 0;

     label225:
        $i6 = i122 & 8;

        if $i6 == 0 goto label226;

        z164 = 1;

        goto label227;

     label226:
        z164 = 0;

     label227:
        if z163 != 0 goto label229;

        if z164 == 0 goto label228;

        goto label229;

     label228:
        z165 = 0;

        goto label230;

     label229:
        z165 = 1;

     label230:
        z140 = z151;

        z141 = z154;

        z142 = z113;

        z143 = z120;

        z144 = z123;

     label231:
        $z166 = r0.<android.view.ViewRootImpl: boolean mDragResizing>;

        if $z166 == z165 goto label258;

     label232:
        if z165 == 0 goto label256;

        if z163 == 0 goto label233;

        i126 = 0;

        goto label234;

     label233:
        i126 = 1;

     label234:
        z140 = z151;

        z141 = z154;

        z142 = z113;

        z143 = z120;

        z144 = z123;

     label235:
        r0.<android.view.ViewRootImpl: int mResizeMode> = i126;

     label236:
        z140 = z151;

        z141 = z154;

        z142 = z113;

        z143 = z120;

        z144 = z123;

     label237:
        $r76 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        i127 = virtualinvoke $r76.<android.graphics.Rect: int width()>();

     label238:
        z140 = z151;

        z141 = z154;

        z142 = z113;

        z143 = z120;

        z144 = z123;

     label239:
        $r77 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingBackDropFrame>;

        i128 = virtualinvoke $r77.<android.graphics.Rect: int width()>();

     label240:
        if i127 != i128 goto label245;

        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = z123;

     label241:
        $r82 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        i129 = virtualinvoke $r82.<android.graphics.Rect: int height()>();

     label242:
        z146 = z151;

        z147 = z154;

        z148 = z113;

        z149 = z120;

        z150 = z123;

     label243:
        $r83 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingBackDropFrame>;

        i130 = virtualinvoke $r83.<android.graphics.Rect: int height()>();

     label244:
        if i129 != i130 goto label245;

        z167 = 1;

        goto label246;

     label245:
        z167 = 0;

     label246:
        z140 = z151;

        z141 = z154;

        z142 = z113;

        z143 = z120;

        z144 = z123;

     label247:
        r222 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingBackDropFrame>;

     label248:
        if z167 != 0 goto label249;

        z168 = 1;

        goto label250;

     label249:
        z168 = 0;

     label250:
        z140 = z151;

        z141 = z154;

        z142 = z113;

        z143 = z120;

        z144 = z123;

     label251:
        $r78 = r0.<android.view.ViewRootImpl: android.view.WindowInsets mLastWindowInsets>;

        $r79 = virtualinvoke $r78.<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>();

        r223 = virtualinvoke $r79.<android.graphics.Insets: android.graphics.Rect toRect()>();

     label252:
        $r80 = r0.<android.view.ViewRootImpl: android.view.WindowInsets mLastWindowInsets>;

        $r81 = virtualinvoke $r80.<android.view.WindowInsets: android.graphics.Insets getStableInsets()>();

        r224 = virtualinvoke $r81.<android.graphics.Insets: android.graphics.Rect toRect()>();

        i131 = r0.<android.view.ViewRootImpl: int mResizeMode>;

     label253:
        specialinvoke r0.<android.view.ViewRootImpl: void startDragResizing(android.graphics.Rect,boolean,android.graphics.Rect,android.graphics.Rect,int)>(r222, z168, r223, r224, i131);

     label254:
        goto label258;

     label255:
        $r173 := @caughtexception;

        i119 = i122;

        z125 = z136;

        z105 = z151;

        z115 = z154;

        goto label269;

     label256:
        specialinvoke r0.<android.view.ViewRootImpl: void endDragResizing()>();

     label257:
        goto label258;

     label258:
        $z170 = r0.<android.view.ViewRootImpl: boolean mUseMTRenderer>;

        if $z170 != 0 goto label263;

     label259:
        if z165 == 0 goto label262;

     label260:
        $r74 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $i58 = $r74.<android.graphics.Rect: int left>;

        r0.<android.view.ViewRootImpl: int mCanvasOffsetX> = $i58;

        $r75 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $i59 = $r75.<android.graphics.Rect: int top>;

        r0.<android.view.ViewRootImpl: int mCanvasOffsetY> = $i59;

     label261:
        goto label263;

     label262:
        r0.<android.view.ViewRootImpl: int mCanvasOffsetY> = 0;

        r0.<android.view.ViewRootImpl: int mCanvasOffsetX> = 0;

     label263:
        i119 = i122;

        z125 = z136;

        z105 = z151;

        z115 = z154;

        goto label269;

     label264:
        $r172 := @caughtexception;

        i119 = i122;

        z125 = z136;

        z105 = z151;

        z115 = z154;

        goto label269;

     label265:
        $r177 := @caughtexception;

        i119 = i122;

        z125 = z136;

        z105 = z140;

        z115 = z141;

        z113 = z142;

        z120 = z143;

        z123 = z144;

        goto label269;

     label266:
        $r163 := @caughtexception;

        i119 = i122;

        z126 = 0;

        z125 = z116;

        z105 = 0;

        z115 = 0;

        z113 = 0;

        z123 = 0;

        goto label269;

     label267:
        $r162 := @caughtexception;

        i119 = 0;

        z125 = 0;

        z126 = 0;

        z105 = 0;

        z115 = 0;

        z113 = 0;

        z123 = 0;

        goto label269;

     label268:
        $r165 := @caughtexception;

        z123 = 0;

        z125 = 0;

        i119 = 0;

        z113 = 0;

        z115 = 0;

        z105 = 0;

        z126 = 0;

     label269:
        $r231 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i132 = r183.<android.graphics.Rect: int left>;

        $r231.<android.view.View$AttachInfo: int mWindowLeft> = $i132;

        $r232 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i133 = r183.<android.graphics.Rect: int top>;

        $r232.<android.view.View$AttachInfo: int mWindowTop> = $i133;

        $i134 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i135 = virtualinvoke r183.<android.graphics.Rect: int width()>();

        if $i134 != $i135 goto label270;

        $i56 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i57 = virtualinvoke r183.<android.graphics.Rect: int height()>();

        if $i56 == $i57 goto label271;

     label270:
        $i7 = virtualinvoke r183.<android.graphics.Rect: int width()>();

        r0.<android.view.ViewRootImpl: int mWidth> = $i7;

        $i8 = virtualinvoke r183.<android.graphics.Rect: int height()>();

        r0.<android.view.ViewRootImpl: int mHeight> = $i8;

     label271:
        $r233 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r233 == null goto label284;

        $r57 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z45 = virtualinvoke $r57.<android.view.Surface: boolean isValid()>();

        if $z45 == 0 goto label272;

        $r73 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r72 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $r73.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface> = $r72;

     label272:
        $r58 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i52 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i51 = r0.<android.view.ViewRootImpl: int mHeight>;

        virtualinvoke $r58.<com.android.internal.view.BaseSurfaceHolder: void setSurfaceFrameSize(int,int)>($i52, $i51);

        $r59 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r60 = $r59.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r60.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        if z105 == 0 goto label274;

        $r68 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r68.<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>();

        r0.<android.view.ViewRootImpl: boolean mIsCreating> = 1;

        $r69 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r234 = virtualinvoke $r69.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r234 == null goto label274;

        i136 = lengthof r234;

        i137 = 0;

     label273:
        if i137 >= i136 goto label274;

        $r71 = r234[i137];

        $r70 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        interfaceinvoke $r71.<android.view.SurfaceHolder$Callback: void surfaceCreated(android.view.SurfaceHolder)>($r70);

        i137 = i137 + 1;

        goto label273;

     label274:
        if z105 != 0 goto label276;

        if z113 != 0 goto label276;

        if z126 != 0 goto label276;

        if z4 == 0 goto label275;

        goto label276;

     label275:
        goto label280;

     label276:
        $r235 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z176 = virtualinvoke $r235.<android.view.Surface: boolean isValid()>();

        if $z176 == 0 goto label280;

        $r65 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r236 = virtualinvoke $r65.<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>();

        if r236 == null goto label279;

        i138 = lengthof r236;

        i139 = 0;

     label277:
        if i139 >= i138 goto label278;

        $r67 = r236[i139];

        $r66 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $i55 = r178.<android.view.WindowManager$LayoutParams: int format>;

        $i54 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i53 = r0.<android.view.ViewRootImpl: int mHeight>;

        interfaceinvoke $r67.<android.view.SurfaceHolder$Callback: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>($r66, $i55, $i54, $i53);

        i139 = i139 + 1;

        goto label277;

     label278:
        goto label279;

     label279:
        r0.<android.view.ViewRootImpl: boolean mIsCreating> = 0;

        goto label280;

     label280:
        z177 = z126;

        if z115 == 0 goto label285;

        specialinvoke r0.<android.view.ViewRootImpl: void notifyHolderSurfaceDestroyed()>();

        $r61 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r62 = $r61.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r62.<java.util.concurrent.locks.ReentrantLock: void lock()>();

     label281:
        r237 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        r238 = new android.view.Surface;

        specialinvoke r238.<android.view.Surface: void <init>()>();

        r237.<com.android.internal.view.BaseSurfaceHolder: android.view.Surface mSurface> = r238;

     label282:
        $r63 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r64 = $r63.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r64.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        z177 = z126;

        goto label285;

     label283:
        $r154 := @caughtexception;

        $r155 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r156 = $r155.<com.android.internal.view.BaseSurfaceHolder: java.util.concurrent.locks.ReentrantLock mSurfaceLock>;

        virtualinvoke $r156.<java.util.concurrent.locks.ReentrantLock: void unlock()>();

        throw $r154;

     label284:
        z177 = z126;

     label285:
        $r240 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r241 = $r240.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if r241 == null goto label287;

        $z43 = virtualinvoke r241.<android.view.ThreadedRenderer: boolean isEnabled()>();

        if $z43 == 0 goto label287;

        if z123 != 0 goto label286;

        $i47 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i48 = virtualinvoke r241.<android.view.ThreadedRenderer: int getWidth()>();

        if $i47 != $i48 goto label286;

        $i49 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i50 = virtualinvoke r241.<android.view.ThreadedRenderer: int getHeight()>();

        if $i49 != $i50 goto label286;

        $z44 = r0.<android.view.ViewRootImpl: boolean mNeedsRendererSetup>;

        if $z44 == 0 goto label287;

     label286:
        $i140 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i141 = r0.<android.view.ViewRootImpl: int mHeight>;

        $r242 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r243 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r244 = $r243.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        virtualinvoke r241.<android.view.ThreadedRenderer: void setup(int,int,android.view.View$AttachInfo,android.graphics.Rect)>($i140, $i141, $r242, $r244);

        r0.<android.view.ViewRootImpl: boolean mNeedsRendererSetup> = 0;

     label287:
        $z178 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z178 == 0 goto label288;

        $z42 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z42 == 0 goto label291;

     label288:
        $i9 = i119 & 1;

        if $i9 == 0 goto label289;

        z179 = 1;

        goto label290;

     label289:
        z179 = 0;

     label290:
        $z21 = specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>(z179);

        if $z21 != 0 goto label292;

        $i43 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i44 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        if $i43 != $i44 goto label292;

        $i45 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i46 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        if $i45 != $i46 goto label292;

        if z120 != 0 goto label292;

        if z125 == 0 goto label291;

        goto label292;

     label291:
        goto label296;

     label292:
        $i142 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i143 = r178.<android.view.WindowManager$LayoutParams: int width>;

        i144 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>($i142, $i143);

        $i145 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i146 = r178.<android.view.WindowManager$LayoutParams: int height>;

        i147 = staticinvoke <android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>($i145, $i146);

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i144, i147);

        i148 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        i149 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        z180 = 0;

        $f7 = r178.<android.view.WindowManager$LayoutParams: float horizontalWeight>;

        $b150 = $f7 cmpl 0.0F;

        if $b150 <= 0 goto label293;

        $i39 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i40 = $i39 - i148;

        $f5 = (float) $i40;

        $f4 = r178.<android.view.WindowManager$LayoutParams: float horizontalWeight>;

        $f6 = $f5 * $f4;

        $i41 = (int) $f6;

        $i42 = i148 + $i41;

        i144 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i42, 1073741824);

        z180 = 1;

     label293:
        $f0 = r178.<android.view.WindowManager$LayoutParams: float verticalWeight>;

        $b10 = $f0 cmpl 0.0F;

        if $b10 <= 0 goto label294;

        $i35 = r0.<android.view.ViewRootImpl: int mHeight>;

        $i36 = $i35 - i149;

        $f2 = (float) $i36;

        $f1 = r178.<android.view.WindowManager$LayoutParams: float verticalWeight>;

        $f3 = $f2 * $f1;

        $i37 = (int) $f3;

        $i38 = i149 + $i37;

        i147 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i38, 1073741824);

        z180 = 1;

     label294:
        if z180 == 0 goto label295;

        specialinvoke r0.<android.view.ViewRootImpl: void performMeasure(int,int)>(i144, i147);

     label295:
        z87 = 1;

     label296:
        z114 = z177;

        z112 = z119;

     label297:
        if z114 != 0 goto label298;

        if z113 != 0 goto label298;

        if z105 != 0 goto label298;

        if z4 == 0 goto label299;

     label298:
        specialinvoke r0.<android.view.ViewRootImpl: void updateBoundsLayer(boolean)>(z113);

     label299:
        if z87 == 0 goto label301;

        $z40 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z40 == 0 goto label300;

        $z41 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z41 == 0 goto label301;

     label300:
        z181 = 1;

        goto label302;

     label301:
        z181 = 0;

     label302:
        if z181 != 0 goto label304;

        $r56 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z39 = $r56.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes>;

        if $z39 == 0 goto label303;

        goto label304;

     label303:
        z182 = 0;

        goto label305;

     label304:
        z182 = 1;

     label305:
        if z181 == 0 goto label311;

        $i20 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i19 = r0.<android.view.ViewRootImpl: int mHeight>;

        specialinvoke r0.<android.view.ViewRootImpl: void performLayout(android.view.WindowManager$LayoutParams,int,int)>(r178, $i20, $i19);

        $i21 = r1.<android.view.View: int mPrivateFlags>;

        $i22 = $i21 & 512;

        if $i22 == 0 goto label310;

        $r45 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        virtualinvoke r1.<android.view.View: void getLocationInWindow(int[])>($r45);

        r245 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        r246 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        $i34 = r246[0];

        $i33 = r246[1];

        $i24 = r246[0];

        $i23 = r1.<android.view.View: int mRight>;

        $i26 = $i24 + $i23;

        $i25 = r1.<android.view.View: int mLeft>;

        $i32 = $i26 - $i25;

        $r46 = r0.<android.view.ViewRootImpl: int[] mTmpLocation>;

        $i28 = $r46[1];

        $i27 = r1.<android.view.View: int mBottom>;

        $i30 = $i28 + $i27;

        $i29 = r1.<android.view.View: int mTop>;

        $i31 = $i30 - $i29;

        virtualinvoke r245.<android.graphics.Region: boolean set(int,int,int,int)>($i34, $i33, $i32, $i31);

        $r47 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        virtualinvoke r1.<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>($r47);

        r247 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if r247 == null goto label306;

        $r55 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        virtualinvoke r247.<android.content.res.CompatibilityInfo$Translator: void translateRegionInWindowToScreen(android.graphics.Region)>($r55);

     label306:
        $r49 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        $r48 = r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion>;

        $z37 = virtualinvoke $r49.<android.graphics.Region: boolean equals(java.lang.Object)>($r48);

        if $z37 != 0 goto label311;

        $r51 = r0.<android.view.ViewRootImpl: android.graphics.Region mPreviousTransparentRegion>;

        $r50 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        virtualinvoke $r51.<android.graphics.Region: boolean set(android.graphics.Region)>($r50);

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label307:
        $r54 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r53 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r52 = r0.<android.view.ViewRootImpl: android.graphics.Region mTransparentRegion>;

        interfaceinvoke $r54.<android.view.IWindowSession: void setTransparentRegion(android.view.IWindow,android.graphics.Region)>($r53, $r52);

     label308:
        goto label311;

     label309:
        $r170 := @caughtexception;

        goto label311;

     label310:
        goto label311;

     label311:
        if z115 == 0 goto label312;

        specialinvoke r0.<android.view.ViewRootImpl: void notifySurfaceDestroyed()>();

     label312:
        if z182 == 0 goto label313;

        $r42 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r42.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 0;

        $r43 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r44 = $r43.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r44.<android.view.ViewTreeObserver: void dispatchOnGlobalLayout()>();

     label313:
        if z100 == 0 goto label322;

        $r31 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r249 = $r31.<android.view.View$AttachInfo: android.view.ViewTreeObserver$InternalInsetsInfo mGivenInternalInsets>;

        virtualinvoke r249.<android.view.ViewTreeObserver$InternalInsetsInfo: void reset()>();

        $r32 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r33 = $r32.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r33.<android.view.ViewTreeObserver: void dispatchOnComputeInternalInsets(android.view.ViewTreeObserver$InternalInsetsInfo)>(r249);

        $r34 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z32 = virtualinvoke r249.<android.view.ViewTreeObserver$InternalInsetsInfo: boolean isEmpty()>();

        $z33 = $z32 ^ 1;

        $r34.<android.view.View$AttachInfo: boolean mHasNonEmptyGivenInternalInsets> = $z33;

        if z112 != 0 goto label315;

        $r41 = r0.<android.view.ViewRootImpl: android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets>;

        $z34 = virtualinvoke $r41.<android.view.ViewTreeObserver$InternalInsetsInfo: boolean equals(java.lang.Object)>(r249);

        if $z34 != 0 goto label314;

        goto label315;

     label314:
        goto label322;

     label315:
        $r35 = r0.<android.view.ViewRootImpl: android.view.ViewTreeObserver$InternalInsetsInfo mLastGivenInsets>;

        virtualinvoke $r35.<android.view.ViewTreeObserver$InternalInsetsInfo: void set(android.view.ViewTreeObserver$InternalInsetsInfo)>(r249);

        r250 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if r250 == null goto label316;

        $r36 = r249.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect contentInsets>;

        r251 = virtualinvoke r250.<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedContentInsets(android.graphics.Rect)>($r36);

        $r38 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r37 = r249.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect visibleInsets>;

        r252 = virtualinvoke $r38.<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedVisibleInsets(android.graphics.Rect)>($r37);

        $r40 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r39 = r249.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Region touchableRegion>;

        r253 = virtualinvoke $r40.<android.content.res.CompatibilityInfo$Translator: android.graphics.Region getTranslatedTouchableArea(android.graphics.Region)>($r39);

        goto label317;

     label316:
        r251 = r249.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect contentInsets>;

        r252 = r249.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Rect visibleInsets>;

        r253 = r249.<android.view.ViewTreeObserver$InternalInsetsInfo: android.graphics.Region touchableRegion>;

     label317:
        r2 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        r254 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

     label318:
        $i18 = r249.<android.view.ViewTreeObserver$InternalInsetsInfo: int mTouchableInsets>;

        interfaceinvoke r2.<android.view.IWindowSession: void setInsets(android.view.IWindow,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Region)>(r254, $i18, r251, r252, r253);

     label319:
        goto label322;

     label320:
        $r176 := @caughtexception;

        goto label322;

     label321:
        $r158 := @caughtexception;

        goto label322;

     label322:
        $z183 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z183 == 0 goto label325;

        $z26 = <android.view.ViewRootImpl: boolean sAlwaysAssignFocus>;

        if $z26 != 0 goto label324;

        $z29 = staticinvoke <android.view.ViewRootImpl: boolean isInTouchMode()>();

        if $z29 != 0 goto label323;

        goto label324;

     label323:
        $r29 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r257 = virtualinvoke $r29.<android.view.View: android.view.View findFocus()>();

        $z30 = r257 instanceof android.view.ViewGroup;

        if $z30 == 0 goto label325;

        $r30 = (android.view.ViewGroup) r257;

        $i17 = virtualinvoke $r30.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i17 != 262144 goto label325;

        virtualinvoke r257.<android.view.View: boolean restoreDefaultFocus()>();

        goto label325;

     label324:
        r258 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r258 == null goto label325;

        $z27 = virtualinvoke r258.<android.view.View: boolean hasFocus()>();

        if $z27 != 0 goto label325;

        $r28 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r28.<android.view.View: boolean restoreDefaultFocus()>();

     label325:
        if z78 != 0 goto label326;

        $z25 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z25 == 0 goto label327;

     label326:
        if z102 == 0 goto label327;

        z184 = 1;

        goto label328;

     label327:
        z184 = 0;

     label328:
        $r259 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z185 = $r259.<android.view.View$AttachInfo: boolean mHasWindowFocus>;

        if $z185 == 0 goto label329;

        if z102 == 0 goto label329;

        z186 = 1;

        goto label330;

     label329:
        z186 = 0;

     label330:
        if z186 == 0 goto label331;

        $z24 = r0.<android.view.ViewRootImpl: boolean mLostWindowFocus>;

        if $z24 == 0 goto label331;

        z187 = 1;

        goto label332;

     label331:
        z187 = 0;

     label332:
        if z187 == 0 goto label333;

        r0.<android.view.ViewRootImpl: boolean mLostWindowFocus> = 0;

        goto label334;

     label333:
        if z186 != 0 goto label334;

        $z23 = r0.<android.view.ViewRootImpl: boolean mHadWindowFocus>;

        if $z23 == 0 goto label334;

        r0.<android.view.ViewRootImpl: boolean mLostWindowFocus> = 1;

     label334:
        if z184 != 0 goto label335;

        if z187 == 0 goto label339;

     label335:
        r260 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        if r260 != null goto label336;

        z188 = 0;

        goto label338;

     label336:
        $i11 = r260.<android.view.WindowManager$LayoutParams: int type>;

        if $i11 != 2005 goto label337;

        z188 = 1;

        goto label338;

     label337:
        z188 = 0;

     label338:
        if z188 != 0 goto label339;

        virtualinvoke r1.<android.view.View: void sendAccessibilityEvent(int)>(32);

     label339:
        r0.<android.view.ViewRootImpl: boolean mFirst> = 0;

        r0.<android.view.ViewRootImpl: boolean mWillDrawSoon> = 0;

        r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded> = 0;

        r0.<android.view.ViewRootImpl: boolean mActivityRelaunched> = 0;

        r0.<android.view.ViewRootImpl: int mViewVisibility> = i0;

        r0.<android.view.ViewRootImpl: boolean mHadWindowFocus> = z186;

        $r261 = r0.<android.view.ViewRootImpl: android.view.ImeFocusController mImeFocusController>;

        $r262 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        virtualinvoke $r261.<android.view.ImeFocusController: void onTraversal(boolean,android.view.WindowManager$LayoutParams)>(z186, $r262);

        $i151 = i119 & 2;

        if $i151 == 0 goto label340;

        specialinvoke r0.<android.view.ViewRootImpl: void reportNextDraw()>();

     label340:
        $i12 = i119 & 128;

        if $i12 == 0 goto label341;

        specialinvoke r0.<android.view.ViewRootImpl: void reportNextDraw()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setUseBLASTSyncTransaction()>();

        r0.<android.view.ViewRootImpl: boolean mSendNextFrameToWm> = 1;

        goto label341;

     label341:
        z190 = 1;

        $r16 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r17 = $r16.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        $z22 = virtualinvoke $r17.<android.view.ViewTreeObserver: boolean dispatchOnPreDraw()>();

        if $z22 != 0 goto label343;

        if z102 != 0 goto label342;

        z190 = 1;

        goto label343;

     label342:
        z190 = 0;

     label343:
        if z190 != 0 goto label347;

        r263 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if r263 == null goto label346;

        $i15 = virtualinvoke r263.<java.util.ArrayList: int size()>();

        if $i15 <= 0 goto label346;

        i152 = 0;

     label344:
        $r23 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $i16 = virtualinvoke $r23.<java.util.ArrayList: int size()>();

        if i152 >= $i16 goto label345;

        $r25 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $r26 = virtualinvoke $r25.<java.util.ArrayList: java.lang.Object get(int)>(i152);

        $r27 = (android.animation.LayoutTransition) $r26;

        virtualinvoke $r27.<android.animation.LayoutTransition: void startChangingAnimations()>();

        i152 = i152 + 1;

        goto label344;

     label345:
        $r24 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        virtualinvoke $r24.<java.util.ArrayList: void clear()>();

     label346:
        specialinvoke r0.<android.view.ViewRootImpl: void performDraw()>();

        goto label351;

     label347:
        if z102 == 0 goto label348;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        goto label351;

     label348:
        r264 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if r264 == null goto label351;

        $i13 = virtualinvoke r264.<java.util.ArrayList: int size()>();

        if $i13 <= 0 goto label351;

        i153 = 0;

     label349:
        $r18 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $i14 = virtualinvoke $r18.<java.util.ArrayList: int size()>();

        if i153 >= $i14 goto label350;

        $r20 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        $r21 = virtualinvoke $r20.<java.util.ArrayList: java.lang.Object get(int)>(i153);

        $r22 = (android.animation.LayoutTransition) $r21;

        virtualinvoke $r22.<android.animation.LayoutTransition: void endChangingAnimations()>();

        i153 = i153 + 1;

        goto label349;

     label350:
        $r19 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        virtualinvoke $r19.<java.util.ArrayList: void clear()>();

     label351:
        $r265 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r266 = $r265.<android.view.View$AttachInfo: android.util.SparseArray mContentCaptureEvents>;

        if $r266 == null goto label352;

        specialinvoke r0.<android.view.ViewRootImpl: void notifyContentCatpureEvents()>();

     label352:
        r0.<android.view.ViewRootImpl: boolean mIsInTraversal> = 0;

        return;

     label353:
        return;

        catch android.os.RemoteException from label076 to label077 with label268;
        catch android.os.RemoteException from label078 to label079 with label096;
        catch android.os.RemoteException from label080 to label081 with label089;
        catch android.os.RemoteException from label082 to label083 with label088;
        catch android.os.RemoteException from label083 to label084 with label087;
        catch android.os.RemoteException from label084 to label085 with label086;
        catch android.os.RemoteException from label091 to label092 with label095;
        catch android.os.RemoteException from label092 to label093 with label094;
        catch android.os.RemoteException from label097 to label098 with label267;
        catch android.os.RemoteException from label098 to label099 with label266;
        catch android.os.RemoteException from label100 to label101 with label105;
        catch android.os.RemoteException from label103 to label104 with label105;
        catch android.os.RemoteException from label107 to label108 with label266;
        catch android.os.RemoteException from label111 to label112 with label265;
        catch android.os.RemoteException from label115 to label116 with label265;
        catch android.os.RemoteException from label117 to label118 with label119;
        catch android.os.RemoteException from label122 to label123 with label119;
        catch android.os.RemoteException from label126 to label127 with label265;
        catch android.os.RemoteException from label128 to label129 with label119;
        catch android.os.RemoteException from label132 to label133 with label119;
        catch android.os.RemoteException from label135 to label136 with label119;
        catch android.os.RemoteException from label138 to label139 with label265;
        catch android.os.RemoteException from label141 to label142 with label119;
        catch android.os.RemoteException from label143 to label144 with label119;
        catch android.os.RemoteException from label146 to label147 with label265;
        catch android.os.RemoteException from label148 to label149 with label265;
        catch android.os.RemoteException from label151 to label152 with label119;
        catch android.os.RemoteException from label153 to label154 with label119;
        catch android.os.RemoteException from label155 to label156 with label119;
        catch android.os.RemoteException from label159 to label160 with label119;
        catch android.os.RemoteException from label161 to label162 with label119;
        catch android.os.RemoteException from label163 to label164 with label119;
        catch android.os.RemoteException from label165 to label166 with label119;
        catch android.view.Surface$OutOfResourcesException from label167 to label168 with label175;
        catch android.os.RemoteException from label167 to label168 with label119;
        catch android.view.Surface$OutOfResourcesException from label169 to label170 with label173;
        catch android.os.RemoteException from label169 to label170 with label182;
        catch android.view.Surface$OutOfResourcesException from label171 to label172 with label173;
        catch android.os.RemoteException from label171 to label172 with label182;
        catch android.os.RemoteException from label176 to label177 with label182;
        catch android.os.RemoteException from label180 to label181 with label182;
        catch android.os.RemoteException from label184 to label185 with label119;
        catch android.os.RemoteException from label186 to label187 with label119;
        catch android.os.RemoteException from label188 to label189 with label119;
        catch android.os.RemoteException from label190 to label191 with label119;
        catch android.os.RemoteException from label192 to label193 with label119;
        catch android.os.RemoteException from label194 to label195 with label119;
        catch android.os.RemoteException from label196 to label197 with label119;
        catch android.os.RemoteException from label198 to label199 with label119;
        catch android.os.RemoteException from label200 to label201 with label119;
        catch android.os.RemoteException from label202 to label203 with label119;
        catch android.os.RemoteException from label204 to label205 with label119;
        catch android.os.RemoteException from label208 to label209 with label265;
        catch android.os.RemoteException from label210 to label211 with label119;
        catch android.os.RemoteException from label212 to label213 with label119;
        catch android.os.RemoteException from label214 to label215 with label119;
        catch android.view.Surface$OutOfResourcesException from label216 to label217 with label218;
        catch android.os.RemoteException from label216 to label217 with label119;
        catch android.os.RemoteException from label219 to label220 with label119;
        catch android.os.RemoteException from label222 to label223 with label119;
        catch android.os.RemoteException from label231 to label232 with label265;
        catch android.os.RemoteException from label235 to label236 with label265;
        catch android.os.RemoteException from label237 to label238 with label265;
        catch android.os.RemoteException from label239 to label240 with label265;
        catch android.os.RemoteException from label241 to label242 with label119;
        catch android.os.RemoteException from label243 to label244 with label119;
        catch android.os.RemoteException from label247 to label248 with label265;
        catch android.os.RemoteException from label251 to label252 with label265;
        catch android.os.RemoteException from label252 to label253 with label255;
        catch android.os.RemoteException from label253 to label254 with label264;
        catch android.os.RemoteException from label256 to label257 with label264;
        catch android.os.RemoteException from label258 to label259 with label264;
        catch android.os.RemoteException from label260 to label261 with label264;
        catch android.os.RemoteException from label262 to label263 with label264;
        catch java.lang.Throwable from label281 to label282 with label283;
        catch android.os.RemoteException from label307 to label308 with label309;
        catch android.os.RemoteException from label317 to label318 with label321;
        catch android.os.RemoteException from label318 to label319 with label320;
    }

    private void postDrawFinished()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(29);

        return;
    }

    private void postSendWindowContentChangedCallback(android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        int i0;
        android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent $r2, $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        if $r2 != null goto label1;

        $r4 = new android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent;

        specialinvoke $r4.<android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$1)>(r0, null);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent> = $r4;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        virtualinvoke $r3.<android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent: void runOrPost(android.view.View,int)>(r1, i0);

        return;
    }

    private void profileRendering(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2;
        android.view.Choreographer$FrameCallback r1, $r2, $r3;
        android.view.Choreographer $r4, $r6;
        android.view.ViewRootImpl$3 $r5;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.ViewRootImpl: boolean mProfileRendering>;

        if $z1 == 0 goto label4;

        r0.<android.view.ViewRootImpl: boolean mRenderProfilingEnabled> = z0;

        r1 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        if r1 == null goto label1;

        $r6 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r6.<android.view.Choreographer: void removeFrameCallback(android.view.Choreographer$FrameCallback)>(r1);

     label1:
        $z2 = r0.<android.view.ViewRootImpl: boolean mRenderProfilingEnabled>;

        if $z2 == 0 goto label3;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        if $r2 != null goto label2;

        $r5 = new android.view.ViewRootImpl$3;

        specialinvoke $r5.<android.view.ViewRootImpl$3: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler> = $r5;

     label2:
        $r4 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler>;

        virtualinvoke $r4.<android.view.Choreographer: void postFrameCallback(android.view.Choreographer$FrameCallback)>($r3);

        goto label4;

     label3:
        r0.<android.view.ViewRootImpl: android.view.Choreographer$FrameCallback mRenderProfiler> = null;

     label4:
        return;
    }

    private void recycleQueuedInputEvent(android.view.ViewRootImpl$QueuedInputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1, $r2;
        int i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$QueuedInputEvent;

        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent> = null;

        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEventReceiver mReceiver> = null;

        i0 = r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize>;

        if i0 >= 10 goto label1;

        $i1 = i0 + 1;

        r0.<android.view.ViewRootImpl: int mQueuedInputEventPoolSize> = $i1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool>;

        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = $r2;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mQueuedInputEventPool> = r1;

     label1:
        return;
    }

    private int relayoutWindow(android.view.WindowManager$LayoutParams, int, boolean) throws android.os.RemoteException
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z3, z4, $z5, z6;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        android.view.ViewRootImpl$W r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, i12, i14, $i15, i16;
        android.graphics.Rect r2, $r13, $r15, $r20, r39;
        android.view.View$AttachInfo $r3;
        android.view.View $r4, $r5, $r29;
        android.view.SurfaceControl $r6, $r10, $r14, $r24;
        android.graphics.Point $r7, $r21, $r22;
        android.view.InsetsSourceControl[] $r8, $r18;
        android.view.InsetsState $r9, $r16;
        android.util.MergedConfiguration $r11;
        android.view.DisplayCutout$ParcelableWrapper $r12;
        android.view.InsetsController $r17, $r19;
        android.view.Surface $r23, $r25, $r26, $r37, r40;
        java.lang.StringBuilder $r27;
        java.lang.String $r31, r35;
        android.content.res.CompatibilityInfo$Translator $r32, $r33, r41;
        android.view.WindowManager$LayoutParams r34;
        long l13;
        android.view.IWindowSession r38;

        r0 := @this: android.view.ViewRootImpl;

        r34 := @parameter0: android.view.WindowManager$LayoutParams;

        i12 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        f0 = $r3.<android.view.View$AttachInfo: float mApplicationScale>;

        if r34 == null goto label01;

        $r32 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r32 == null goto label01;

        virtualinvoke r34.<android.view.WindowManager$LayoutParams: void backup()>();

        $r33 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r33.<android.content.res.CompatibilityInfo$Translator: void translateWindowLayout(android.view.WindowManager$LayoutParams)>(r34);

        z4 = 1;

        goto label02;

     label01:
        z4 = 0;

     label02:
        if r34 == null goto label03;

        $i8 = r0.<android.view.ViewRootImpl: int mOrigWindowType>;

        $i7 = r34.<android.view.WindowManager$LayoutParams: int type>;

        if $i8 == $i7 goto label03;

        $i9 = r0.<android.view.ViewRootImpl: int mTargetSdkVersion>;

        if $i9 >= 14 goto label03;

        r35 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Window type can not be changed after the window is added; ignoring change of ");

        $r29 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r35, $r31);

        $i11 = r0.<android.view.ViewRootImpl: int mOrigWindowType>;

        r34.<android.view.WindowManager$LayoutParams: int type> = $i11;

     label03:
        $r37 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z5 = virtualinvoke $r37.<android.view.Surface: boolean isValid()>();

        if $z5 == 0 goto label04;

        $r26 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        l13 = virtualinvoke $r26.<android.view.Surface: long getNextFrameNumber()>();

        goto label05;

     label04:
        l13 = -1L;

     label05:
        r38 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        i0 = r0.<android.view.ViewRootImpl: int mSeq>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i3 = virtualinvoke $r4.<android.view.View: int getMeasuredWidth()>();

        $f1 = (float) $i3;

        $f2 = $f1 * f0;

        $f3 = $f2 + 0.5F;

        i1 = (int) $f3;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i4 = virtualinvoke $r5.<android.view.View: int getMeasuredHeight()>();

        $f4 = (float) $i4;

        $f5 = $f4 * f0;

        $f6 = $f5 + 0.5F;

        i2 = (int) $f6;

        r39 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTmpFrame>;

        r2 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTmpRect>;

        $r13 = r0.<android.view.ViewRootImpl: android.graphics.Rect mPendingBackDropFrame>;

        $r12 = r0.<android.view.ViewRootImpl: android.view.DisplayCutout$ParcelableWrapper mPendingDisplayCutout>;

        $r11 = r0.<android.view.ViewRootImpl: android.util.MergedConfiguration mPendingMergedConfiguration>;

        $r10 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mSurfaceControl>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.InsetsState mTempInsets>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.InsetsSourceControl[] mTempControls>;

        $r7 = r0.<android.view.ViewRootImpl: android.graphics.Point mSurfaceSize>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBlastSurfaceControl>;

        i16 = (int) z0;

        i14 = interfaceinvoke r38.<android.view.IWindowSession: int relayout(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,int,long,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.util.MergedConfiguration,android.view.SurfaceControl,android.view.InsetsState,android.view.InsetsSourceControl[],android.graphics.Point,android.view.SurfaceControl)>(r1, i0, r34, i1, i2, i12, i16, l13, r39, r2, r2, r2, $r13, $r12, $r11, $r10, $r9, $r8, $r7, $r6);

        $r14 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mSurfaceControl>;

        $z1 = virtualinvoke $r14.<android.view.SurfaceControl: boolean isValid()>();

        if $z1 == 0 goto label08;

        $z3 = virtualinvoke r0.<android.view.ViewRootImpl: boolean useBLAST()>();

        if $z3 != 0 goto label06;

        $r25 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $r24 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mSurfaceControl>;

        virtualinvoke $r25.<android.view.Surface: void copyFrom(android.view.SurfaceControl)>($r24);

        goto label09;

     label06:
        $r21 = r0.<android.view.ViewRootImpl: android.graphics.Point mSurfaceSize>;

        $i6 = $r21.<android.graphics.Point: int x>;

        $r22 = r0.<android.view.ViewRootImpl: android.graphics.Point mSurfaceSize>;

        $i5 = $r22.<android.graphics.Point: int y>;

        r40 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.Surface getOrCreateBLASTSurface(int,int)>($i6, $i5);

        if r40 == null goto label07;

        $r23 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        virtualinvoke $r23.<android.view.Surface: void transferFrom(android.view.Surface)>(r40);

     label07:
        goto label09;

     label08:
        specialinvoke r0.<android.view.ViewRootImpl: void destroySurface()>();

     label09:
        $i15 = i14 & 64;

        if $i15 == 0 goto label10;

        z6 = 1;

        goto label11;

     label10:
        z6 = 0;

     label11:
        r0.<android.view.ViewRootImpl: boolean mPendingAlwaysConsumeSystemBars> = z6;

        if z4 == 0 goto label12;

        virtualinvoke r34.<android.view.WindowManager$LayoutParams: void restore()>();

     label12:
        r41 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if r41 == null goto label13;

        $r20 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTmpFrame>;

        virtualinvoke r41.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWinFrame(android.graphics.Rect)>($r20);

     label13:
        $r15 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTmpFrame>;

        specialinvoke r0.<android.view.ViewRootImpl: void setFrame(android.graphics.Rect)>($r15);

        $r17 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        $r16 = r0.<android.view.ViewRootImpl: android.view.InsetsState mTempInsets>;

        virtualinvoke $r17.<android.view.InsetsController: boolean onStateChanged(android.view.InsetsState)>($r16);

        $r19 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        $r18 = r0.<android.view.ViewRootImpl: android.view.InsetsSourceControl[] mTempControls>;

        virtualinvoke $r19.<android.view.InsetsController: void onControlsChanged(android.view.InsetsSourceControl[])>($r18);

        return i14;
    }

    private void removeSendWindowContentChangedCallback()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent r1;
        android.view.ViewRootImpl$ViewRootHandler $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        if r1 == null goto label1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: void removeCallbacks(java.lang.Runnable)>(r1);

     label1:
        return;
    }

    private void reportDrawFinished()
    {
        android.view.ViewRootImpl r0;
        android.view.SurfaceControl$Transaction $r2;
        android.view.ViewRootImpl$W $r3;
        android.view.IWindowSession $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.view.ViewRootImpl;

     label1:
        r0.<android.view.ViewRootImpl: int mDrawsNeededToReport> = 0;

        $r4 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r2 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mSurfaceChangedTransaction>;

        interfaceinvoke $r4.<android.view.IWindowSession: void finishDrawing(android.view.IWindow,android.view.SurfaceControl$Transaction)>($r3, $r2);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void reportNextDraw()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void drawPending()>();

     label1:
        r0.<android.view.ViewRootImpl: boolean mReportNextDraw> = 1;

        return;
    }

    private void requestDrawWindow()
    {
        android.view.ViewRootImpl r0;
        boolean $z0, $z1;
        java.util.concurrent.CountDownLatch $r1;
        java.util.ArrayList $r2, $r3, $r4;
        int $i0, $i1, i2;
        java.lang.Object $r5;
        android.view.WindowCallbacks $r6;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mUseMTRenderer>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.util.concurrent.CountDownLatch;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        specialinvoke $r1.<java.util.concurrent.CountDownLatch: void <init>(int)>($i0);

        r0.<android.view.ViewRootImpl: java.util.concurrent.CountDownLatch mWindowDrawCountDown> = $r1;

        $r3 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $i1 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        i2 = $i1 - 1;

     label2:
        if i2 < 0 goto label3;

        $r4 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r6 = (android.view.WindowCallbacks) $r5;

        $z1 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        interfaceinvoke $r6.<android.view.WindowCallbacks: void onRequestDraw(boolean)>($z1);

        i2 = i2 + -1;

        goto label2;

     label3:
        return;
    }

    private void resetPointerIcon(android.view.MotionEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.MotionEvent r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.MotionEvent;

        r0.<android.view.ViewRootImpl: int mPointerIconType> = 1;

        specialinvoke r0.<android.view.ViewRootImpl: boolean updatePointerIcon(android.view.MotionEvent)>(r1);

        return;
    }

    private void scheduleProcessInputEvents()
    {
        android.view.ViewRootImpl r0;
        android.os.Message r1;
        boolean $z0;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled>;

        if $z0 != 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled> = 1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(19);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

     label1:
        return;
    }

    private void setBoundsLayerCrop()
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect $r1, $r2, $r4, $r6, $r7, $r8;
        android.view.WindowManager$LayoutParams $r3, $r5;
        int $i0, $i1;
        android.view.SurfaceControl $r9;
        android.view.SurfaceControl$Transaction $r10;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempBoundsRect>;

        $r1 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        virtualinvoke $r2.<android.graphics.Rect: void set(android.graphics.Rect)>($r1);

        $r7 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempBoundsRect>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r4 = $r3.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i1 = $r4.<android.graphics.Rect: int left>;

        $r5 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r6 = $r5.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i0 = $r6.<android.graphics.Rect: int top>;

        virtualinvoke $r7.<android.graphics.Rect: void offsetTo(int,int)>($i1, $i0);

        $r10 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mTransaction>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBoundsLayer>;

        $r8 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempBoundsRect>;

        virtualinvoke $r10.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setWindowCrop(android.view.SurfaceControl,android.graphics.Rect)>($r9, $r8);

        return;
    }

    private void setFrame(android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1, $r2;
        android.view.InsetsController $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        virtualinvoke $r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        $r3 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        virtualinvoke $r3.<android.view.InsetsController: void onFrameChanged(android.graphics.Rect)>(r1);

        return;
    }

    private void setTag()
    {
        android.view.ViewRootImpl r0;
        java.lang.String[] r1;
        android.view.WindowManager$LayoutParams $r3;
        java.lang.CharSequence $r4;
        java.lang.String $r5, $r8, $r11;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r6;

        r0 := @this: android.view.ViewRootImpl;

        $r3 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r4 = virtualinvoke $r3.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r5 = interfaceinvoke $r4.<java.lang.CharSequence: java.lang.String toString()>();

        r1 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i0 = lengthof r1;

        if $i0 <= 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ViewRootImpl[");

        $i1 = lengthof r1;

        $i2 = $i1 - 1;

        $r8 = r1[$i2];

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<android.view.ViewRootImpl: java.lang.String mTag> = $r11;

     label1:
        return;
    }

    private boolean shouldDispatchCutout()
    {
        android.view.ViewRootImpl r0;
        int i0, $i1;
        android.view.WindowManager$LayoutParams $r1, $r2;
        boolean z1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i0 = $r1.<android.view.WindowManager$LayoutParams: int layoutInDisplayCutoutMode>;

        z1 = 1;

        if i0 == 3 goto label2;

        $r2 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i1 = $r2.<android.view.WindowManager$LayoutParams: int layoutInDisplayCutoutMode>;

        if $i1 != 1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static boolean shouldUseDisplaySize(android.view.WindowManager$LayoutParams)
    {
        android.view.WindowManager$LayoutParams r0;
        int $i0, $i1, $i2;
        boolean z0;

        r0 := @parameter0: android.view.WindowManager$LayoutParams;

        $i0 = r0.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 == 2041 goto label2;

        $i1 = r0.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 == 2011 goto label2;

        $i2 = r0.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 2020 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private void showInsets(int, boolean)
    {
        android.view.ViewRootImpl r0;
        int i0, i1;
        boolean z0;
        android.view.ViewRootImpl$ViewRootHandler $r1;
        android.os.Message $r2;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        i1 = (int) z0;

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,int,int)>(34, i0, i1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void startDragResizing(android.graphics.Rect, boolean, android.graphics.Rect, android.graphics.Rect, int)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1, r2, r3;
        boolean z0, $z1, $z2;
        int i0, $i1, i2;
        java.util.ArrayList $r4, $r5;
        java.lang.Object $r6;
        android.view.WindowCallbacks $r7;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.graphics.Rect;

        r3 := @parameter3: android.graphics.Rect;

        i0 := @parameter4: int;

        $z1 = r0.<android.view.ViewRootImpl: boolean mDragResizing>;

        if $z1 != 0 goto label3;

        r0.<android.view.ViewRootImpl: boolean mDragResizing> = 1;

        $z2 = r0.<android.view.ViewRootImpl: boolean mUseMTRenderer>;

        if $z2 == 0 goto label2;

        $r4 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label2;

        $r5 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r7 = (android.view.WindowCallbacks) $r6;

        interfaceinvoke $r7.<android.view.WindowCallbacks: void onWindowDragResizeStart(android.graphics.Rect,boolean,android.graphics.Rect,android.graphics.Rect,int)>(r1, z0, r2, r3, i0);

        i2 = i2 + -1;

        goto label1;

     label2:
        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

     label3:
        return;
    }

    private void trackFPS()
    {
        android.view.ViewRootImpl r0;
        long l0, l1, l2, $l3, $l8, $l9;
        java.lang.String r1, $r7, $r13, r14, r16;
        float f0, $f1, $f2, $f3;
        byte $b4, $b11;
        int $i5, $i6, $i7, $i12;
        java.lang.StringBuilder $r2, $r8;

        r0 := @this: android.view.ViewRootImpl;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $l3 = r0.<android.view.ViewRootImpl: long mFpsStartTime>;

        $b4 = $l3 cmp 0L;

        if $b4 >= 0 goto label1;

        r0.<android.view.ViewRootImpl: long mFpsPrevTime> = l0;

        r0.<android.view.ViewRootImpl: long mFpsStartTime> = l0;

        r0.<android.view.ViewRootImpl: int mFpsNumFrames> = 0;

        goto label2;

     label1:
        $i5 = r0.<android.view.ViewRootImpl: int mFpsNumFrames>;

        $i6 = $i5 + 1;

        r0.<android.view.ViewRootImpl: int mFpsNumFrames> = $i6;

        $i7 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r0);

        r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        l1 = r0.<android.view.ViewRootImpl: long mFpsPrevTime>;

        $l8 = r0.<android.view.ViewRootImpl: long mFpsStartTime>;

        l2 = l0 - $l8;

        r14 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tFrame time:\t");

        $l9 = l0 - l1;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r14, $r7);

        r0.<android.view.ViewRootImpl: long mFpsPrevTime> = l0;

        $b11 = l2 cmp 1000L;

        if $b11 <= 0 goto label2;

        $i12 = r0.<android.view.ViewRootImpl: int mFpsNumFrames>;

        $f1 = (float) $i12;

        $f3 = $f1 * 1000.0F;

        $f2 = (float) l2;

        f0 = $f3 / $f2;

        r16 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tFPS:\t");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(float)>(f0);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>(r16, $r13);

        r0.<android.view.ViewRootImpl: long mFpsStartTime> = l0;

        r0.<android.view.ViewRootImpl: int mFpsNumFrames> = 0;

     label2:
        return;
    }

    private void updateBoundsLayer(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;
        android.view.SurfaceControl $r1, $r3, $r4, $r9, $r10;
        android.view.SurfaceControl$Transaction $r2, $r7, $r8;
        android.view.Surface $r5;
        long $l0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBoundsLayer>;

        if $r1 == null goto label2;

        specialinvoke r0.<android.view.ViewRootImpl: void setBoundsLayerCrop()>();

        $r2 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mTransaction>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBoundsLayer>;

        $r4 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.SurfaceControl getRenderSurfaceControl()>();

        $r5 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $l0 = virtualinvoke $r5.<android.view.Surface: long getNextFrameNumber()>();

        virtualinvoke $r2.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction deferTransactionUntil(android.view.SurfaceControl,android.view.SurfaceControl,long)>($r3, $r4, $l0);

        if z0 == 0 goto label1;

        $r8 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mTransaction>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBoundsLayer>;

        $r10 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.SurfaceControl getRenderSurfaceControl()>();

        virtualinvoke $r8.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction reparent(android.view.SurfaceControl,android.view.SurfaceControl)>($r9, $r10);

     label1:
        $r7 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mTransaction>;

        virtualinvoke $r7.<android.view.SurfaceControl$Transaction: void apply()>();

     label2:
        return;
    }

    private boolean updateCaptionInsets()
    {
        android.view.ViewRootImpl r0;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1;
        com.android.internal.policy.DecorView $r1;
        android.graphics.Rect $r2, $r4, $r6, $r7, $r8, $r9, $r10;
        android.view.View$AttachInfo $r3, $r5;
        android.view.View r11;

        r0 := @this: android.view.ViewRootImpl;

        r11 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = r11 instanceof com.android.internal.policy.DecorView;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = (com.android.internal.policy.DecorView) r11;

        i0 = virtualinvoke $r1.<com.android.internal.policy.DecorView: int getCaptionInsetsHeight()>();

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        if i0 == 0 goto label2;

        $r7 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $i5 = $r7.<android.graphics.Rect: int left>;

        $r8 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $i4 = $r8.<android.graphics.Rect: int top>;

        $r9 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $i3 = $r9.<android.graphics.Rect: int right>;

        $r10 = r0.<android.view.ViewRootImpl: android.graphics.Rect mWinFrame>;

        $i1 = $r10.<android.graphics.Rect: int top>;

        $i2 = $i1 + i0;

        virtualinvoke $r2.<android.graphics.Rect: void set(int,int,int,int)>($i5, $i4, $i3, $i2);

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.graphics.Rect mCaptionInsets>;

        $z1 = virtualinvoke $r4.<android.graphics.Rect: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label3;

        return 0;

     label3:
        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.graphics.Rect mCaptionInsets>;

        virtualinvoke $r6.<android.graphics.Rect: void set(android.graphics.Rect)>($r2);

        return 1;
    }

    private boolean updateContentDrawBounds()
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z2, $z3, $z4, z5, z6, z7, $z8;
        java.util.ArrayList $r1, $r2;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r3;
        android.view.WindowManager$LayoutParams $r4, $r6;
        android.graphics.Rect $r5, $r7;
        android.view.WindowCallbacks $r8;

        r0 := @this: android.view.ViewRootImpl;

        z5 = 0;

        z6 = 0;

        z0 = r0.<android.view.ViewRootImpl: boolean mUseMTRenderer>;

        if z0 == 0 goto label2;

        $r1 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        i5 = $i0 - 1;

     label1:
        z5 = z6;

        if i5 < 0 goto label2;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        $r8 = (android.view.WindowCallbacks) $r3;

        $r4 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r5 = $r4.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i4 = $r5.<android.graphics.Rect: int left>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r7 = $r6.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i3 = $r7.<android.graphics.Rect: int top>;

        $i2 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i1 = r0.<android.view.ViewRootImpl: int mHeight>;

        $z4 = interfaceinvoke $r8.<android.view.WindowCallbacks: boolean onContentDrawn(int,int,int,int)>($i4, $i3, $i2, $i1);

        z6 = z6 | $z4;

        i5 = i5 + -1;

        goto label1;

     label2:
        $z2 = r0.<android.view.ViewRootImpl: boolean mDragResizing>;

        if $z2 == 0 goto label3;

        $z3 = r0.<android.view.ViewRootImpl: boolean mReportNextDraw>;

        if $z3 == 0 goto label3;

        z7 = 1;

        goto label4;

     label3:
        z7 = 0;

     label4:
        $z8 = z5 | z7;

        return $z8;
    }

    private void updateForceDarkMode()
    {
        android.view.ViewRootImpl r0;
        int i0;
        android.content.res.TypedArray r1;
        android.view.View$AttachInfo $r2, $r7;
        android.view.ThreadedRenderer $r3, $r8;
        android.view.View $r4;
        int[] $r5;
        android.content.Context $r6;
        boolean $z1, $z2, z3, z4, z5, z6, $z7;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r3 != null goto label1;

        return;

     label1:
        i0 = specialinvoke r0.<android.view.ViewRootImpl: int getNightMode()>();

        if i0 != 32 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        z4 = z3;

        if z3 == 0 goto label6;

        z5 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("debug.hwui.force_dark", 0);

        $r6 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r5 = <com.android.internal.R$styleable: int[] Theme>;

        r1 = virtualinvoke $r6.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>($r5);

        $z1 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(279, 1);

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r1.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(278, z5);

        if $z2 == 0 goto label4;

        z6 = 1;

        goto label5;

     label4:
        z6 = 0;

     label5:
        virtualinvoke r1.<android.content.res.TypedArray: void recycle()>();

        z4 = z6;

     label6:
        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8 = $r7.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $z7 = virtualinvoke $r8.<android.view.ThreadedRenderer: boolean setForceDark(boolean)>(z4);

        if $z7 == 0 goto label7;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke r0.<android.view.ViewRootImpl: void invalidateWorld(android.view.View)>($r4);

     label7:
        return;
    }

    private void updateInternalDisplay(int, android.content.res.Resources)
    {
        android.view.ViewRootImpl r0;
        int i0, $i1;
        android.content.res.Resources r1;
        android.app.ResourcesManager $r2, $r9;
        android.view.Display $r3, $r10, r11;
        android.content.Context $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.Resources;

        $r2 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        r11 = virtualinvoke $r2.<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.content.res.Resources)>(i0, r1);

        if r11 != null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get desired display with Id: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ViewRootImpl", $r8);

        $r9 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        $r10 = virtualinvoke $r9.<android.app.ResourcesManager: android.view.Display getAdjustedDisplay(int,android.content.res.Resources)>(0, r1);

        r0.<android.view.ViewRootImpl: android.view.Display mDisplay> = $r10;

        goto label2;

     label1:
        r0.<android.view.ViewRootImpl: android.view.Display mDisplay> = r11;

     label2:
        $r4 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $i1 = virtualinvoke $r3.<android.view.Display: int getDisplayId()>();

        virtualinvoke $r4.<android.content.Context: void updateDisplay(int)>($i1);

        return;
    }

    private boolean updatePointerIcon(android.view.MotionEvent)
    {
        android.view.ViewRootImpl r0;
        float f0, f1, $f2, $f3;
        android.view.View r1, $r2, $r3;
        byte $b0, $b3, $b4, $b6;
        int $i2, $i5, $i7, $i8, i10;
        android.view.PointerIcon $r4, $r6, r10;
        boolean $z0;
        android.hardware.input.InputManager $r5, $r7;
        java.lang.String $r8, $r11;
        android.view.MotionEvent r9;

        r0 := @this: android.view.ViewRootImpl;

        r9 := @parameter0: android.view.MotionEvent;

        f0 = virtualinvoke r9.<android.view.MotionEvent: float getX(int)>(0);

        f1 = virtualinvoke r9.<android.view.MotionEvent: float getY(int)>(0);

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 != null goto label1;

        $r8 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r8, "updatePointerIcon called after view was removed");

        return 0;

     label1:
        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label7;

        $i2 = virtualinvoke r1.<android.view.View: int getWidth()>();

        $f2 = (float) $i2;

        $b3 = f0 cmpl $f2;

        if $b3 >= 0 goto label7;

        $b4 = f1 cmpg 0.0F;

        if $b4 < 0 goto label7;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i5 = virtualinvoke $r2.<android.view.View: int getHeight()>();

        $f3 = (float) $i5;

        $b6 = f1 cmpl $f3;

        if $b6 < 0 goto label2;

        goto label7;

     label2:
        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r10 = virtualinvoke $r3.<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>(r9, 0);

        if r10 == null goto label3;

        i10 = virtualinvoke r10.<android.view.PointerIcon: int getType()>();

        goto label4;

     label3:
        i10 = 1000;

     label4:
        $i7 = r0.<android.view.ViewRootImpl: int mPointerIconType>;

        if $i7 == i10 goto label5;

        r0.<android.view.ViewRootImpl: int mPointerIconType> = i10;

        r0.<android.view.ViewRootImpl: android.view.PointerIcon mCustomPointerIcon> = null;

        if i10 == -1 goto label5;

        $r7 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        virtualinvoke $r7.<android.hardware.input.InputManager: void setPointerIconType(int)>(i10);

        return 1;

     label5:
        $i8 = r0.<android.view.ViewRootImpl: int mPointerIconType>;

        if $i8 != -1 goto label6;

        $r4 = r0.<android.view.ViewRootImpl: android.view.PointerIcon mCustomPointerIcon>;

        $z0 = virtualinvoke r10.<android.view.PointerIcon: boolean equals(java.lang.Object)>($r4);

        if $z0 != 0 goto label6;

        r0.<android.view.ViewRootImpl: android.view.PointerIcon mCustomPointerIcon> = r10;

        $r5 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        $r6 = r0.<android.view.ViewRootImpl: android.view.PointerIcon mCustomPointerIcon>;

        virtualinvoke $r5.<android.hardware.input.InputManager: void setCustomPointerIcon(android.view.PointerIcon)>($r6);

     label6:
        return 1;

     label7:
        $r11 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r11, "updatePointerIcon called with position out of bounds");

        return 0;
    }

    public void addScrollCaptureCallback(android.view.ScrollCaptureCallback)
    {
        android.view.ViewRootImpl r0;
        android.view.ScrollCaptureCallback r1;
        java.util.HashSet $r2, $r3, $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ScrollCaptureCallback;

        $r2 = r0.<android.view.ViewRootImpl: java.util.HashSet mRootScrollCaptureCallbacks>;

        if $r2 != null goto label1;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.HashSet mRootScrollCaptureCallbacks> = $r4;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: java.util.HashSet mRootScrollCaptureCallbacks>;

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>(r1);

        return;
    }

    void addSurfaceChangedCallback(android.view.ViewRootImpl$SurfaceChangedCallback)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$SurfaceChangedCallback r1;
        java.util.ArrayList $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$SurfaceChangedCallback;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mSurfaceChangedCallbacks>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addWindowCallbacks(android.view.WindowCallbacks)
    {
        android.view.ViewRootImpl r0;
        java.util.ArrayList r1, $r2;
        java.lang.Throwable $r3;
        android.view.WindowCallbacks r4;

        r0 := @this: android.view.ViewRootImpl;

        r4 := @parameter0: android.view.WindowCallbacks;

        r1 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void bringChildToFront(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return;
    }

    public boolean canResolveLayoutDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean canResolveTextAlignment()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean canResolveTextDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public void cancelInvalidate(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int,java.lang.Object)>(1, r1);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int,java.lang.Object)>(2, r1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable>;

        virtualinvoke $r4.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void removeView(android.view.View)>(r1);

        return;
    }

    void changeCanvasOpacity(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, z2;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r3;
        android.view.View $r7;
        int $i1, $i2;
        android.view.View$AttachInfo $r8, $r10;
        android.view.ThreadedRenderer $r9, $r11;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("changeCanvasOpacity: opaque=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>(r1, $r6);

        $r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i1 = $r7.<android.view.View: int mPrivateFlags>;

        $i2 = $i1 & 512;

        if $i2 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r8.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r9 == null goto label3;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r11 = $r10.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $z1 = z0 & z2;

        virtualinvoke $r11.<android.view.ThreadedRenderer: void setOpaque(boolean)>($z1);

     label3:
        return;
    }

    void checkThread()
    {
        android.view.ViewRootImpl r0;
        java.lang.Thread $r1, $r2;
        android.view.ViewRootImpl$CalledFromWrongThreadException $r3;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: java.lang.Thread mThread>;

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r1 != $r2 goto label1;

        return;

     label1:
        $r3 = new android.view.ViewRootImpl$CalledFromWrongThreadException;

        specialinvoke $r3.<android.view.ViewRootImpl$CalledFromWrongThreadException: void <init>(java.lang.String)>("Only the original thread that created a view hierarchy can touch its views.");

        throw $r3;
    }

    public void childDrawableStateChanged(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return;
    }

    public void childHasTransientStateChanged(android.view.View, boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        return;
    }

    public void clearChildFocus(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public void createContextMenu(android.view.ContextMenu)
    {
        android.view.ViewRootImpl r0;
        android.view.ContextMenu r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ContextMenu;

        return;
    }

    public void debug()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r1.<android.view.View: void debug()>();

        return;
    }

    void destroyHardwareResources()
    {
        android.view.ViewRootImpl r0;
        android.view.ThreadedRenderer r1;
        android.view.View$AttachInfo $r2, $r4, $r8;
        android.os.Looper $r3, $r6;
        android.os.Handler $r5, $r10;
        android.view.View $r7;
        android.view._$$Lambda$dj1hfDQd0iEp_uBDBPEUMMYJJwk $r9;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r1 = $r2.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if r1 == null goto label2;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r6 = virtualinvoke $r5.<android.os.Handler: android.os.Looper getLooper()>();

        if $r3 == $r6 goto label1;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r10 = $r8.<android.view.View$AttachInfo: android.os.Handler mHandler>;

        $r9 = new android.view._$$Lambda$dj1hfDQd0iEp_uBDBPEUMMYJJwk;

        specialinvoke $r9.<android.view._$$Lambda$dj1hfDQd0iEp_uBDBPEUMMYJJwk: void <init>(android.view.ViewRootImpl)>(r0);

        virtualinvoke $r10.<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>($r9);

        return;

     label1:
        $r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke r1.<android.view.ThreadedRenderer: void destroyHardwareResources(android.view.View)>($r7);

        virtualinvoke r1.<android.view.ThreadedRenderer: void destroy()>();

     label2:
        return;
    }

    public void detachFunctor(long)
    {
        android.view.ViewRootImpl r0;
        long l0;
        android.view.View$AttachInfo $r1, $r3;
        android.view.ThreadedRenderer $r2, $r4;

        r0 := @this: android.view.ViewRootImpl;

        l0 := @parameter0: long;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r4.<android.view.ThreadedRenderer: void stopDrawing()>();

     label1:
        return;
    }

    boolean die(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z3;
        java.lang.String r1, $r10;
        java.lang.StringBuilder $r3;
        android.view.WindowManager$LayoutParams $r7;
        java.lang.CharSequence $r8;
        android.view.ViewRootImpl$ViewRootHandler $r11;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z3 = r0.<android.view.ViewRootImpl: boolean mIsInTraversal>;

        if $z3 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void doDie()>();

        return 0;

     label1:
        $z1 = r0.<android.view.ViewRootImpl: boolean mIsDrawing>;

        if $z1 != 0 goto label2;

        specialinvoke r0.<android.view.ViewRootImpl: void destroyHardwareRenderer()>();

        goto label3;

     label2:
        r1 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempting to destroy the window while drawing!\n  window=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", title=");

        $r7 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r8 = virtualinvoke $r7.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r1, $r10);

     label3:
        $r11 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r11.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(3);

        return 1;
    }

    int dipToPx(int)
    {
        android.view.ViewRootImpl r0;
        int i0, $i1;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        android.util.DisplayMetrics $r3;
        float $f0, $f1, $f2, $f3;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f1 = $r3.<android.util.DisplayMetrics: float density>;

        $f0 = (float) i0;

        $f2 = $f1 * $f0;

        $f3 = $f2 + 0.5F;

        $i1 = (int) $f3;

        return $i1;
    }

    public void dispatchAppVisibility(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;
        android.os.Message r1;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;
        int i0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(8);

        i0 = (int) z0;

        r1.<android.os.Message: int arg1> = i0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void dispatchApplyInsets(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.WindowInsets r2, r6;
        boolean $z0;
        android.view.View$AttachInfo $r4;
        int $i0;
        android.graphics.Insets $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(8L, "dispatchApplyInsets");

        r0.<android.view.ViewRootImpl: boolean mApplyInsetsRequested> = 0;

        r2 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.WindowInsets getWindowInsets(boolean)>(1);

        r6 = r2;

        $z0 = specialinvoke r0.<android.view.ViewRootImpl: boolean shouldDispatchCutout()>();

        if $z0 != 0 goto label1;

        r6 = virtualinvoke r2.<android.view.WindowInsets: android.view.WindowInsets consumeDisplayCutout()>();

     label1:
        virtualinvoke r1.<android.view.View: android.view.WindowInsets dispatchApplyWindowInsets(android.view.WindowInsets)>(r6);

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i0 = staticinvoke <android.view.WindowInsets$Type: int all()>();

        $r5 = virtualinvoke r6.<android.view.WindowInsets: android.graphics.Insets getInsets(int)>($i0);

        virtualinvoke $r4.<android.view.View$AttachInfo: void delayNotifyContentCaptureInsetsEvent(android.graphics.Insets)>($r5);

        staticinvoke <android.os.Trace: void traceEnd(long)>(8L);

        return;
    }

    public void dispatchCheckFocus()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $z0 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: boolean hasMessages(int)>(13);

        if $z0 != 0 goto label1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(13);

     label1:
        return;
    }

    public void dispatchCloseSystemDialogs(java.lang.String)
    {
        android.view.ViewRootImpl r0;
        java.lang.String r1;
        android.os.Message r2;
        android.view.ViewRootImpl$ViewRootHandler $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.String;

        r2 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r2.<android.os.Message: int what> = 14;

        r2.<android.os.Message: java.lang.Object obj> = r1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r2);

        return;
    }

    void dispatchDetachedFromWindow()
    {
        android.view.ViewRootImpl r0;
        android.view.InputQueue r1, $r6;
        android.view.InsetsController $r2, $r18;
        android.view.ViewRootImpl$InputStage $r3;
        android.hardware.display.DisplayManager$DisplayListener $r4;
        android.hardware.display.DisplayManager $r5;
        android.view.View$AttachInfo $r7, $r8, $r20;
        android.view.ViewTreeObserver $r9;
        android.view.View $r10, r12, $r19;
        android.os.RemoteException $r11;
        android.view.ViewRootImpl$AccessibilityInteractionConnectionManager $r13, $r15;
        android.view.accessibility.AccessibilityManager $r14, $r16;
        android.view.ViewRootImpl$HighContrastTextManager $r17;
        android.view.InputQueue$Callback r21;
        android.view.IWindowSession $r22;
        android.view.ViewRootImpl$W $r23;
        android.view.ViewRootImpl$WindowInputEventReceiver r25;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        virtualinvoke $r2.<android.view.InsetsController: void onWindowFocusLost()>();

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage>;

        virtualinvoke $r3.<android.view.ViewRootImpl$InputStage: void onDetachedFromWindow()>();

        r12 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r12 == null goto label1;

        $r7 = r12.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r7 == null goto label1;

        $r8 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r9 = $r8.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r9.<android.view.ViewTreeObserver: void dispatchOnWindowAttachedChange(boolean)>(0);

        $r10 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r10.<android.view.View: void dispatchDetachedFromWindow()>();

     label1:
        $r13 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r13.<android.view.ViewRootImpl$AccessibilityInteractionConnectionManager: void ensureNoConnection()>();

        $r14 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $r15 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r14.<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>($r15);

        $r16 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $r17 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$HighContrastTextManager mHighContrastTextManager>;

        virtualinvoke $r16.<android.view.accessibility.AccessibilityManager: void removeHighTextContrastStateChangeListener(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener)>($r17);

        specialinvoke r0.<android.view.ViewRootImpl: void removeSendWindowContentChangedCallback()>();

        specialinvoke r0.<android.view.ViewRootImpl: void destroyHardwareRenderer()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        $r18 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        virtualinvoke $r18.<android.view.InsetsController: void cancelExistingAnimations()>();

        $r19 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r19.<android.view.View: void assignParent(android.view.ViewParent)>(null);

        r0.<android.view.ViewRootImpl: android.view.View mView> = null;

        $r20 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r20.<android.view.View$AttachInfo: android.view.View mRootView> = null;

        specialinvoke r0.<android.view.ViewRootImpl: void destroySurface()>();

        r21 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        if r21 == null goto label2;

        r1 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        if r1 == null goto label2;

        interfaceinvoke r21.<android.view.InputQueue$Callback: void onInputQueueDestroyed(android.view.InputQueue)>(r1);

        $r6 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        virtualinvoke $r6.<android.view.InputQueue: void dispose()>();

        r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback> = null;

        r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue> = null;

     label2:
        $r22 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r23 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r22.<android.view.IWindowSession: void remove(android.view.IWindow)>($r23);

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

     label5:
        r25 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        if r25 == null goto label6;

        virtualinvoke r25.<android.view.ViewRootImpl$WindowInputEventReceiver: void dispose()>();

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver> = null;

     label6:
        $r5 = r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager mDisplayManager>;

        $r4 = r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager$DisplayListener mDisplayListener>;

        virtualinvoke $r5.<android.hardware.display.DisplayManager: void unregisterDisplayListener(android.hardware.display.DisplayManager$DisplayListener)>($r4);

        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleTraversals()>();

        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void dispatchDragEvent(android.view.DragEvent)
    {
        android.view.ViewRootImpl r0;
        int $i0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2, $r3;
        android.view.DragEvent r4;
        byte b1;
        android.os.Message r5;

        r0 := @this: android.view.ViewRootImpl;

        r4 := @parameter0: android.view.DragEvent;

        $i0 = virtualinvoke r4.<android.view.DragEvent: int getAction()>();

        if $i0 != 2 goto label1;

        b1 = 16;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(16);

        goto label2;

     label1:
        b1 = 15;

     label2:
        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r5 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(b1, r4);

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r5);

        return;
    }

    public void dispatchGetNewSurface()
    {
        android.view.ViewRootImpl r0;
        android.os.Message r1;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(9);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void dispatchInputEvent(android.view.InputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchInputEvent(android.view.InputEvent,android.view.InputEventReceiver)>(r1, null);

        return;
    }

    public void dispatchInputEvent(android.view.InputEvent, android.view.InputEventReceiver)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEventReceiver r1;
        com.android.internal.os.SomeArgs r2;
        android.view.ViewRootImpl$ViewRootHandler $r3, $r4;
        android.view.InputEvent r5;
        android.os.Message r6;

        r0 := @this: android.view.ViewRootImpl;

        r5 := @parameter0: android.view.InputEvent;

        r1 := @parameter1: android.view.InputEventReceiver;

        r2 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        r2.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r5;

        r2.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r6 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(7, r2);

        virtualinvoke r6.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r6);

        return;
    }

    public void dispatchInvalidateDelayed(android.view.View, long)
    {
        android.view.ViewRootImpl r0;
        long l0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2;
        android.view.View r3;
        android.os.Message r4;

        r0 := @this: android.view.ViewRootImpl;

        r3 := @parameter0: android.view.View;

        l0 := @parameter1: long;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r4 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r3);

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessageDelayed(android.os.Message,long)>(r4, l0);

        return;
    }

    public void dispatchInvalidateOnAnimation(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable>;

        virtualinvoke $r2.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void addView(android.view.View)>(r1);

        return;
    }

    public void dispatchInvalidateRectDelayed(android.view.View$AttachInfo$InvalidateInfo, long)
    {
        android.view.ViewRootImpl r0;
        long l0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2;
        android.view.View$AttachInfo$InvalidateInfo r3;
        android.os.Message r4;

        r0 := @this: android.view.ViewRootImpl;

        r3 := @parameter0: android.view.View$AttachInfo$InvalidateInfo;

        l0 := @parameter1: long;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r4 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r3);

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessageDelayed(android.os.Message,long)>(r4, l0);

        return;
    }

    public void dispatchInvalidateRectOnAnimation(android.view.View$AttachInfo$InvalidateInfo)
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo$InvalidateInfo r1;
        android.view.ViewRootImpl$InvalidateOnAnimationRunnable $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View$AttachInfo$InvalidateInfo;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InvalidateOnAnimationRunnable mInvalidateOnAnimationRunnable>;

        virtualinvoke $r2.<android.view.ViewRootImpl$InvalidateOnAnimationRunnable: void addViewRect(android.view.View$AttachInfo$InvalidateInfo)>(r1);

        return;
    }

    public void dispatchKeyFromAutofill(android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2;
        android.view.KeyEvent r3;
        android.os.Message r4;

        r0 := @this: android.view.ViewRootImpl;

        r3 := @parameter0: android.view.KeyEvent;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r4 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(12, r3);

        virtualinvoke r4.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r4);

        return;
    }

    public void dispatchKeyFromIme(android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2;
        android.view.KeyEvent r3;
        android.os.Message r4;

        r0 := @this: android.view.ViewRootImpl;

        r3 := @parameter0: android.view.KeyEvent;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r4 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(11, r3);

        virtualinvoke r4.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r4);

        return;
    }

    public void dispatchLocationInParentDisplayChanged(android.graphics.Point)
    {
        android.view.ViewRootImpl r0;
        int $i0, $i1;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2;
        android.graphics.Point r3;
        android.os.Message r4;

        r0 := @this: android.view.ViewRootImpl;

        r3 := @parameter0: android.graphics.Point;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $i1 = r3.<android.graphics.Point: int x>;

        $i0 = r3.<android.graphics.Point: int y>;

        r4 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,int,int)>(33, $i1, $i0);

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r4);

        return;
    }

    public void dispatchMoved(int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1, i2, i3;
        android.content.res.CompatibilityInfo$Translator $r1, $r5;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3;
        android.graphics.PointF $r4;
        float $f0, $f1, $f2, $f3;
        double $d0, $d1, $d2, $d3;
        android.os.Message r7;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0;

        i3 = i1;

        $r1 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r1 == null goto label1;

        $r4 = new android.graphics.PointF;

        $f1 = (float) i0;

        $f0 = (float) i1;

        specialinvoke $r4.<android.graphics.PointF: void <init>(float,float)>($f1, $f0);

        $r5 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r5.<android.content.res.CompatibilityInfo$Translator: void translatePointInScreenToAppWindow(android.graphics.PointF)>($r4);

        $f2 = $r4.<android.graphics.PointF: float x>;

        $d0 = (double) $f2;

        $d1 = $d0 + 0.5;

        i2 = (int) $d1;

        $f3 = $r4.<android.graphics.PointF: float y>;

        $d2 = (double) $f3;

        $d3 = $d2 + 0.5;

        i3 = (int) $d3;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r7 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,int,int)>(23, i2, i3);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r7);

        return;
    }

    public void dispatchPointerCaptureChanged(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;
        android.os.Message r1;
        android.view.ViewRootImpl$ViewRootHandler $r2, $r3, $r4;
        int i0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(28);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r1 = virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int)>(28);

        i0 = (int) z0;

        r1.<android.os.Message: int arg1> = i0;

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r4.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r1);

        return;
    }

    public void dispatchRequestKeyboardShortcuts(com.android.internal.os.IResultReceiver, int)
    {
        android.view.ViewRootImpl r0;
        com.android.internal.os.IResultReceiver r1;
        int i0;
        android.view.ViewRootImpl$ViewRootHandler $r2;
        android.os.Message $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: com.android.internal.os.IResultReceiver;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r3 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(26, i0, 0, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void dispatchScrollCaptureRequest(android.view.IScrollCaptureController)
    {
        android.view.ViewRootImpl r0;
        android.view.IScrollCaptureController r1;
        android.view.ViewRootImpl$ViewRootHandler $r2;
        android.os.Message $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.IScrollCaptureController;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r3 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(36, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void dispatchSystemUiVisibilityChanged(int, int, int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1, i2, i3;
        android.view.ViewRootImpl$ViewRootHandler r2;
        android.view.ViewRootImpl$SystemUiVisibilityInfo $r3;
        android.os.Message $r4;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $r3 = new android.view.ViewRootImpl$SystemUiVisibilityInfo;

        specialinvoke $r3.<android.view.ViewRootImpl$SystemUiVisibilityInfo: void <init>()>();

        $r3.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int seq> = i0;

        $r3.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility> = i1;

        $r3.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localValue> = i2;

        $r3.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges> = i3;

        r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r4 = virtualinvoke r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(17, $r3);

        virtualinvoke r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>($r4);

        return;
    }

    public void dispatchUnhandledInputEvent(android.view.InputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1, r3;
        boolean $z0;
        android.view.MotionEvent $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        r3 = r1;

        $z0 = r1 instanceof android.view.MotionEvent;

        if $z0 == 0 goto label1;

        $r2 = (android.view.MotionEvent) r1;

        r3 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>($r2);

     label1:
        virtualinvoke r0.<android.view.ViewRootImpl: void synthesizeInputEvent(android.view.InputEvent)>(r3);

        return;
    }

    public boolean dispatchUnhandledKeyEvent(android.view.KeyEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.KeyEvent r1;
        android.view.View $r2;
        android.view.ViewRootImpl$UnhandledKeyManager $r3;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.KeyEvent;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$UnhandledKeyManager mUnhandledKeyManager>;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = virtualinvoke $r3.<android.view.ViewRootImpl$UnhandledKeyManager: boolean dispatch(android.view.View,android.view.KeyEvent)>($r2, r1);

        return $z0;
    }

    public void dispatchWindowShown()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(25);

        return;
    }

    boolean doConsumeBatchedInput(long)
    {
        android.view.ViewRootImpl r0;
        long l0;
        android.view.ViewRootImpl$WindowInputEventReceiver r1;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        l0 := @parameter0: long;

        r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        if r1 == null goto label1;

        z0 = virtualinvoke r1.<android.view.ViewRootImpl$WindowInputEventReceiver: boolean consumeBatchedInputEvents(long)>(l0);

        goto label2;

     label1:
        z0 = 0;

     label2:
        virtualinvoke r0.<android.view.ViewRootImpl: void doProcessInputEvents()>();

        return z0;
    }

    void doDie()
    {
        android.view.ViewRootImpl r0;
        int i0, $i1, $i2, $i3;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        android.view.View $r1, $r2;
        android.view.WindowManager$LayoutParams $r3;
        android.view.ViewRootImpl$W $r4;
        android.view.IWindowSession $r5;
        java.lang.Throwable $r6;
        android.os.RemoteException $r7;
        android.view.WindowManagerGlobal $r9;

        r0 := @this: android.view.ViewRootImpl;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        entermonitor r0;

     label01:
        $z1 = r0.<android.view.ViewRootImpl: boolean mRemoved>;

        if $z1 == 0 goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        z5 = 1;

     label04:
        r0.<android.view.ViewRootImpl: boolean mRemoved> = 1;

        $z2 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z2 == 0 goto label05;

        virtualinvoke r0.<android.view.ViewRootImpl: void dispatchDetachedFromWindow()>();

     label05:
        $z3 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z3 == 0 goto label14;

        $z4 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z4 != 0 goto label14;

        specialinvoke r0.<android.view.ViewRootImpl: void destroyHardwareRenderer()>();

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r1 == null goto label14;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        i0 = virtualinvoke $r2.<android.view.View: int getVisibility()>();

        $i1 = r0.<android.view.ViewRootImpl: int mViewVisibility>;

        if $i1 == i0 goto label07;

     label06:
        goto label08;

     label07:
        z5 = 0;

     label08:
        z0 = r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged>;

     label09:
        if z0 != 0 goto label10;

        if z5 == 0 goto label13;

     label10:
        $r3 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i2 = specialinvoke r0.<android.view.ViewRootImpl: int relayoutWindow(android.view.WindowManager$LayoutParams,int,boolean)>($r3, i0, 0);

        $i3 = $i2 & 2;

        if $i3 == 0 goto label11;

        $r5 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r5.<android.view.IWindowSession: void finishDrawing(android.view.IWindow,android.view.SurfaceControl$Transaction)>($r4, null);

     label11:
        goto label13;

     label12:
        $r7 := @caughtexception;

     label13:
        specialinvoke r0.<android.view.ViewRootImpl: void destroySurface()>();

     label14:
        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        exitmonitor r0;

     label15:
        $r9 = staticinvoke <android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()>();

        virtualinvoke $r9.<android.view.WindowManagerGlobal: void doRemoveView(android.view.ViewRootImpl)>(r0);

        return;

     label16:
        $r6 := @caughtexception;

     label17:
        exitmonitor r0;

     label18:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label04 to label05 with label16;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch android.os.RemoteException from label10 to label11 with label12;
        catch java.lang.Throwable from label10 to label11 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    void doProcessInputEvents()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$QueuedInputEvent r1, $r2, r8;
        int i0, $i3, $i4;
        long l1, l5;
        boolean $z0, $z1;
        android.view.ViewRootImpl$ViewRootHandler $r3;
        java.lang.String $r4;
        android.view.InputEvent $r5, $r6, $r7;
        android.view.MotionEvent r9;
        android.view.Choreographer $r10;
        android.graphics.FrameInfo $r11;

        r0 := @this: android.view.ViewRootImpl;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead>;

        if $r2 == null goto label4;

        r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead>;

        r8 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext>;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead> = r8;

        if r8 != null goto label2;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail> = null;

     label2:
        r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = null;

        $i3 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        i0 = $i3 - 1;

        r0.<android.view.ViewRootImpl: int mPendingInputEventCount> = i0;

        $r4 = r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName>;

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(4L, $r4, i0);

        $r5 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        l1 = virtualinvoke $r5.<android.view.InputEvent: long getEventTimeNano()>();

        l5 = l1;

        $r6 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        $z1 = $r6 instanceof android.view.MotionEvent;

        if $z1 == 0 goto label3;

        $r7 = r1.<android.view.ViewRootImpl$QueuedInputEvent: android.view.InputEvent mEvent>;

        r9 = (android.view.MotionEvent) $r7;

        l5 = l1;

        $i4 = virtualinvoke r9.<android.view.MotionEvent: int getHistorySize()>();

        if $i4 <= 0 goto label3;

        l5 = virtualinvoke r9.<android.view.MotionEvent: long getHistoricalEventTimeNano(int)>(0);

     label3:
        $r10 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r11 = $r10.<android.view.Choreographer: android.graphics.FrameInfo mFrameInfo>;

        virtualinvoke $r11.<android.graphics.FrameInfo: void updateInputEventTime(long,long)>(l1, l5);

        specialinvoke r0.<android.view.ViewRootImpl: void deliverInputEvent(android.view.ViewRootImpl$QueuedInputEvent)>(r1);

        goto label1;

     label4:
        $z0 = r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled>;

        if $z0 == 0 goto label5;

        r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled> = 0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(19);

     label5:
        return;
    }

    void doTraversal()
    {
        android.view.ViewRootImpl r0;
        boolean $z0, $z1, $z2;
        android.view.ViewRootImpl$ViewRootHandler $r1;
        android.os.Looper $r2;
        android.os.MessageQueue $r3;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z0 == 0 goto label2;

        r0.<android.view.ViewRootImpl: boolean mTraversalScheduled> = 0;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Looper getLooper()>();

        $r3 = virtualinvoke $r2.<android.os.Looper: android.os.MessageQueue getQueue()>();

        $i0 = r0.<android.view.ViewRootImpl: int mTraversalBarrier>;

        virtualinvoke $r3.<android.os.MessageQueue: void removeSyncBarrier(int)>($i0);

        $z1 = r0.<android.view.ViewRootImpl: boolean mProfile>;

        if $z1 == 0 goto label1;

        staticinvoke <android.os.Debug: void startMethodTracing(java.lang.String)>("ViewAncestor");

     label1:
        specialinvoke r0.<android.view.ViewRootImpl: void performTraversals()>();

        $z2 = r0.<android.view.ViewRootImpl: boolean mProfile>;

        if $z2 == 0 goto label2;

        staticinvoke <android.os.Debug: void stopMethodTracing()>();

        r0.<android.view.ViewRootImpl: boolean mProfile> = 0;

     label2:
        return;
    }

    void drawPending()
    {
        android.view.ViewRootImpl r0;
        int $i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        $i0 = r0.<android.view.ViewRootImpl: int mDrawsNeededToReport>;

        $i1 = $i0 + 1;

        r0.<android.view.ViewRootImpl: int mDrawsNeededToReport> = $i1;

        return;
    }

    public void dump(java.lang.String, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.view.ViewRootImpl r0;
        java.lang.String r1, $r7, r14;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.StringBuilder $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0, $i1, $i2;
        android.view.ViewRootImpl$InputStage $r8;
        android.view.Choreographer $r9;
        android.view.InsetsController $r10;
        android.view.View $r11;
        java.io.FileDescriptor r12;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.String;

        r12 := @parameter1: java.io.FileDescriptor;

        r2 := @parameter2: java.io.PrintWriter;

        r3 := @parameter3: java.lang.String[];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ");

        r14 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("ViewRoot:");

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mAdded=");

        $z0 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" mRemoved=");

        $z1 = r0.<android.view.ViewRootImpl: boolean mRemoved>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mConsumeBatchedInputScheduled=");

        $z2 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z2);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mConsumeBatchedInputImmediatelyScheduled=");

        $z3 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputImmediatelyScheduled>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z3);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mPendingInputEventCount=");

        $i0 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        virtualinvoke r2.<java.io.PrintWriter: void println(int)>($i0);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mProcessInputEventsScheduled=");

        $z4 = r0.<android.view.ViewRootImpl: boolean mProcessInputEventsScheduled>;

        virtualinvoke r2.<java.io.PrintWriter: void println(boolean)>($z4);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mTraversalScheduled=");

        $z5 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z5);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mIsAmbientMode=");

        $z6 = r0.<android.view.ViewRootImpl: boolean mIsAmbientMode>;

        virtualinvoke r2.<java.io.PrintWriter: void print(boolean)>($z6);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r14);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>("mUnbufferedInputSource=");

        $i1 = r0.<android.view.ViewRootImpl: int mUnbufferedInputSource>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i1);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>($r7);

        $z7 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z7 == 0 goto label1;

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(" (barrier=");

        $i2 = r0.<android.view.ViewRootImpl: int mTraversalBarrier>;

        virtualinvoke r2.<java.io.PrintWriter: void print(int)>($i2);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>(")");

        goto label2;

     label1:
        virtualinvoke r2.<java.io.PrintWriter: void println()>();

     label2:
        $r8 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage>;

        virtualinvoke $r8.<android.view.ViewRootImpl$InputStage: void dump(java.lang.String,java.io.PrintWriter)>(r14, r2);

        $r9 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        virtualinvoke $r9.<android.view.Choreographer: void dump(java.lang.String,java.io.PrintWriter)>(r1, r2);

        $r10 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        virtualinvoke $r10.<android.view.InsetsController: void dump(java.lang.String,java.io.PrintWriter)>(r1, r2);

        virtualinvoke r2.<java.io.PrintWriter: void print(java.lang.String)>(r1);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("View Hierarchy:");

        $r11 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        specialinvoke r0.<android.view.ViewRootImpl: void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View)>(r14, r2, $r11);

        return;
    }

    void enqueueInputEvent(android.view.InputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.InputEvent r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.InputEvent;

        virtualinvoke r0.<android.view.ViewRootImpl: void enqueueInputEvent(android.view.InputEvent,android.view.InputEventReceiver,int,boolean)>(r1, null, 0, 0);

        return;
    }

    void enqueueInputEvent(android.view.InputEvent, android.view.InputEventReceiver, int, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;
        int $i0, i1, i2;
        java.lang.String $r1;
        android.view.InputEvent r2;
        android.view.InputEventReceiver r3;
        android.view.ViewRootImpl$QueuedInputEvent r4, r5;

        r0 := @this: android.view.ViewRootImpl;

        r2 := @parameter0: android.view.InputEvent;

        r3 := @parameter1: android.view.InputEventReceiver;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        r4 = specialinvoke r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent obtainQueuedInputEvent(android.view.InputEvent,android.view.InputEventReceiver,int)>(r2, r3, i1);

        r5 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail>;

        if r5 != null goto label1;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventHead> = r4;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail> = r4;

        goto label2;

     label1:
        r5.<android.view.ViewRootImpl$QueuedInputEvent: android.view.ViewRootImpl$QueuedInputEvent mNext> = r4;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$QueuedInputEvent mPendingInputEventTail> = r4;

     label2:
        $i0 = r0.<android.view.ViewRootImpl: int mPendingInputEventCount>;

        i2 = $i0 + 1;

        r0.<android.view.ViewRootImpl: int mPendingInputEventCount> = i2;

        $r1 = r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName>;

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(4L, $r1, i2);

        if z0 == 0 goto label3;

        virtualinvoke r0.<android.view.ViewRootImpl: void doProcessInputEvents()>();

        goto label4;

     label3:
        specialinvoke r0.<android.view.ViewRootImpl: void scheduleProcessInputEvents()>();

     label4:
        return;
    }

    boolean ensureTouchMode(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2;
        android.view.View$AttachInfo $r2;
        android.view.IWindowSession $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r2.<android.view.View$AttachInfo: boolean mInTouchMode>;

        if $z1 != z0 goto label1;

        return 0;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        interfaceinvoke $r3.<android.view.IWindowSession: void setInTouchMode(boolean)>(z0);

     label2:
        $z2 = specialinvoke r0.<android.view.ViewRootImpl: boolean ensureTouchModeLocally(boolean)>(z0);

        return $z2;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.View focusSearch(android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2, $r4, $r6;
        int i0;
        boolean $z0;
        android.view.FocusFinder $r3;
        android.view.ViewGroup $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = $r2 instanceof android.view.ViewGroup;

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <android.view.FocusFinder: android.view.FocusFinder getInstance()>();

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r5 = (android.view.ViewGroup) $r4;

        $r6 = virtualinvoke $r3.<android.view.FocusFinder: android.view.View findNextFocus(android.view.ViewGroup,android.view.View,int)>($r5, r1, i0);

        return $r6;
    }

    public void focusableViewAvailable(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2, r5, r6;
        boolean $z0, $z1, $z2, $z4, $z6;
        android.view.ViewGroup $r3;
        int $i0;
        android.view.View$AttachInfo $r4;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r5 == null goto label3;

        $z0 = virtualinvoke r5.<android.view.View: boolean hasFocus()>();

        if $z0 != 0 goto label2;

        $z4 = <android.view.ViewRootImpl: boolean sAlwaysAssignFocus>;

        if $z4 != 0 goto label1;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z6 = $r4.<android.view.View$AttachInfo: boolean mInTouchMode>;

        if $z6 != 0 goto label3;

     label1:
        virtualinvoke r1.<android.view.View: boolean requestFocus()>();

        goto label3;

     label2:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r6 = virtualinvoke $r2.<android.view.View: android.view.View findFocus()>();

        $z1 = r6 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        $r3 = (android.view.ViewGroup) r6;

        $i0 = virtualinvoke $r3.<android.view.ViewGroup: int getDescendantFocusability()>();

        if $i0 != 262144 goto label3;

        $z2 = staticinvoke <android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>(r1, r6);

        if $z2 == 0 goto label3;

        virtualinvoke r1.<android.view.View: boolean requestFocus()>();

     label3:
        return;
    }

    void forceDisableBLAST()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mForceDisableBLAST> = 1;

        return;
    }

    public android.view.accessibility.IAccessibilityEmbeddedConnection getAccessibilityEmbeddedConnection()
    {
        android.view.ViewRootImpl r0;
        android.view.accessibility.IAccessibilityEmbeddedConnection $r1, $r2;
        android.view.AccessibilityEmbeddedConnection $r3;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.accessibility.IAccessibilityEmbeddedConnection mAccessibilityEmbeddedConnection>;

        if $r1 != null goto label1;

        $r3 = new android.view.AccessibilityEmbeddedConnection;

        specialinvoke $r3.<android.view.AccessibilityEmbeddedConnection: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.accessibility.IAccessibilityEmbeddedConnection mAccessibilityEmbeddedConnection> = $r3;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.accessibility.IAccessibilityEmbeddedConnection mAccessibilityEmbeddedConnection>;

        return $r2;
    }

    public android.view.View getAccessibilityFocusedHost()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        return $r1;
    }

    public android.view.accessibility.AccessibilityNodeInfo getAccessibilityFocusedVirtualView()
    {
        android.view.ViewRootImpl r0;
        android.view.accessibility.AccessibilityNodeInfo $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        return $r1;
    }

    public android.view.AccessibilityInteractionController getAccessibilityInteractionController()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;
        java.lang.IllegalStateException $r2;
        android.view.AccessibilityInteractionController $r3, $r4, $r5;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r1 == null goto label2;

        $r3 = r0.<android.view.ViewRootImpl: android.view.AccessibilityInteractionController mAccessibilityInteractionController>;

        if $r3 != null goto label1;

        $r5 = new android.view.AccessibilityInteractionController;

        specialinvoke $r5.<android.view.AccessibilityInteractionController: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.AccessibilityInteractionController mAccessibilityInteractionController> = $r5;

     label1:
        $r4 = r0.<android.view.ViewRootImpl: android.view.AccessibilityInteractionController mAccessibilityInteractionController>;

        return $r4;

     label2:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("getAccessibilityInteractionController called when there is no mView");

        throw $r2;
    }

    android.view.SurfaceControl$Transaction getBLASTSyncTransaction()
    {
        android.view.ViewRootImpl r0;
        android.view.SurfaceControl$Transaction $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mRtBLASTSyncTransaction>;

        return $r1;
    }

    public android.view.SurfaceControl getBoundsLayer()
    {
        android.view.ViewRootImpl r0;
        android.view.SurfaceControl$Builder r1, $r5, $r13, $r15, $r16;
        android.view.SurfaceControl $r3, $r4, $r14, $r17, $r18;
        android.view.SurfaceSession $r6;
        java.lang.StringBuilder $r7;
        java.lang.CharSequence $r9;
        java.lang.String $r10, $r12;
        android.view.SurfaceControl$Transaction $r19, $r20;

        r0 := @this: android.view.ViewRootImpl;

        $r3 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBoundsLayer>;

        if $r3 != null goto label1;

        $r5 = new android.view.SurfaceControl$Builder;

        $r6 = r0.<android.view.ViewRootImpl: android.view.SurfaceSession mSurfaceSession>;

        specialinvoke $r5.<android.view.SurfaceControl$Builder: void <init>(android.view.SurfaceSession)>($r6);

        r1 = virtualinvoke $r5.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setContainerLayer()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bounds for - ");

        $r9 = virtualinvoke r0.<android.view.ViewRootImpl: java.lang.CharSequence getTitle()>();

        $r10 = interfaceinvoke $r9.<java.lang.CharSequence: java.lang.String toString()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13 = virtualinvoke r1.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>($r12);

        $r14 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.SurfaceControl getRenderSurfaceControl()>();

        $r15 = virtualinvoke $r13.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>($r14);

        $r16 = virtualinvoke $r15.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setCallsite(java.lang.String)>("ViewRootImpl.getBoundsLayer");

        $r17 = virtualinvoke $r16.<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBoundsLayer> = $r17;

        specialinvoke r0.<android.view.ViewRootImpl: void setBoundsLayerCrop()>();

        $r19 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl$Transaction mTransaction>;

        $r18 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBoundsLayer>;

        $r20 = virtualinvoke $r19.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction show(android.view.SurfaceControl)>($r18);

        virtualinvoke $r20.<android.view.SurfaceControl$Transaction: void apply()>();

     label1:
        $r4 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBoundsLayer>;

        return $r4;
    }

    public boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r4;
        android.graphics.Rect r2;
        android.graphics.Point r3;
        java.lang.RuntimeException $r5;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        r3 := @parameter2: android.graphics.Point;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 != $r4 goto label1;

        $i1 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i0 = r0.<android.view.ViewRootImpl: int mHeight>;

        $z0 = virtualinvoke r2.<android.graphics.Rect: boolean intersect(int,int,int,int)>(0, 0, $i1, $i0);

        return $z0;

     label1:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("child is not mine, honest!");

        throw $r5;
    }

    public int getDisplayId()
    {
        android.view.ViewRootImpl r0;
        android.view.Display $r1;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $i0 = virtualinvoke $r1.<android.view.Display: int getDisplayId()>();

        return $i0;
    }

    android.view.ViewRootImpl$GfxInfo getGfxInfo()
    {
        android.view.ViewRootImpl r0;
        android.view.View r2;
        android.view.ViewRootImpl$GfxInfo $r3;

        r0 := @this: android.view.ViewRootImpl;

        $r3 = new android.view.ViewRootImpl$GfxInfo;

        specialinvoke $r3.<android.view.ViewRootImpl$GfxInfo: void <init>()>();

        r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r2 == null goto label1;

        staticinvoke <android.view.ViewRootImpl: void appendGfxInfo(android.view.View,android.view.ViewRootImpl$GfxInfo)>(r2, $r3);

     label1:
        return $r3;
    }

    public int getHeight()
    {
        android.view.ViewRootImpl r0;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $i0 = r0.<android.view.ViewRootImpl: int mHeight>;

        return $i0;
    }

    int getHostVisibility()
    {
        android.view.ViewRootImpl r0;
        boolean $z0, $z1;
        android.view.View $r1;
        int i0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mAppVisible>;

        if $z0 != 0 goto label2;

        $z1 = r0.<android.view.ViewRootImpl: boolean mForceDecorViewVisibility>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        i0 = 8;

        goto label3;

     label2:
        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        i0 = virtualinvoke $r1.<android.view.View: int getVisibility()>();

     label3:
        return i0;
    }

    public android.view.ImeFocusController getImeFocusController()
    {
        android.view.ViewRootImpl r0;
        android.view.ImeFocusController $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ImeFocusController mImeFocusController>;

        return $r1;
    }

    public android.os.IBinder getInputToken()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$WindowInputEventReceiver r1;
        android.os.IBinder $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver>;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<android.view.ViewRootImpl$WindowInputEventReceiver: android.os.IBinder getToken()>();

        return $r2;
    }

    public android.view.InsetsController getInsetsController()
    {
        android.view.ViewRootImpl r0;
        android.view.InsetsController $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        return $r1;
    }

    public void getLastTouchPoint(android.graphics.Point)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Point r1;
        android.graphics.PointF $r2, $r3;
        float $f0, $f1;
        int $i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Point;

        $r2 = r0.<android.view.ViewRootImpl: android.graphics.PointF mLastTouchPoint>;

        $f0 = $r2.<android.graphics.PointF: float x>;

        $i0 = (int) $f0;

        r1.<android.graphics.Point: int x> = $i0;

        $r3 = r0.<android.view.ViewRootImpl: android.graphics.PointF mLastTouchPoint>;

        $f1 = $r3.<android.graphics.PointF: float y>;

        $i1 = (int) $f1;

        r1.<android.graphics.Point: int y> = $i1;

        return;
    }

    public int getLastTouchSource()
    {
        android.view.ViewRootImpl r0;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $i0 = r0.<android.view.ViewRootImpl: int mLastTouchSource>;

        return $i0;
    }

    public int getLayoutDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 0;
    }

    final android.view.WindowLeaked getLocation()
    {
        android.view.ViewRootImpl r0;
        android.view.WindowLeaked $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.WindowLeaked mLocation>;

        return $r1;
    }

    android.view.Surface getOrCreateBLASTSurface(int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1;
        android.graphics.BLASTBufferQueue r1, $r3;
        boolean $z0, $z1, $z2;
        android.view.SurfaceControl $r2, $r4, r5, r6;
        android.view.Surface r7;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mSurfaceControl>;

        if r5 == null goto label4;

        $z0 = virtualinvoke r5.<android.view.SurfaceControl: boolean isValid()>();

        if $z0 == 0 goto label4;

        r6 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBlastSurfaceControl>;

        if r6 == null goto label4;

        $z1 = virtualinvoke r6.<android.view.SurfaceControl: boolean isValid()>();

        if $z1 != 0 goto label1;

        goto label4;

     label1:
        r7 = null;

        r1 = r0.<android.view.ViewRootImpl: android.graphics.BLASTBufferQueue mBlastBufferQueue>;

        if r1 != null goto label2;

        $r3 = new android.graphics.BLASTBufferQueue;

        $r4 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBlastSurfaceControl>;

        $z2 = r0.<android.view.ViewRootImpl: boolean mEnableTripleBuffering>;

        specialinvoke $r3.<android.graphics.BLASTBufferQueue: void <init>(android.view.SurfaceControl,int,int,boolean)>($r4, i0, i1, $z2);

        r0.<android.view.ViewRootImpl: android.graphics.BLASTBufferQueue mBlastBufferQueue> = $r3;

        r7 = virtualinvoke $r3.<android.graphics.BLASTBufferQueue: android.view.Surface getSurface()>();

        goto label3;

     label2:
        $r2 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBlastSurfaceControl>;

        virtualinvoke r1.<android.graphics.BLASTBufferQueue: void update(android.view.SurfaceControl,int,int)>($r2, i0, i1);

     label3:
        return r7;

     label4:
        return null;
    }

    public android.view.ViewParent getParent()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return null;
    }

    public android.view.ViewParent getParentForAccessibility()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return null;
    }

    public android.view.SurfaceControl getRenderSurfaceControl()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.SurfaceControl $r1, $r2;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = virtualinvoke r0.<android.view.ViewRootImpl: boolean useBLAST()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mBlastSurfaceControl>;

        return $r2;

     label1:
        $r1 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mSurfaceControl>;

        return $r1;
    }

    public java.util.List getRootSystemGestureExclusionRects()
    {
        android.view.ViewRootImpl r0;
        android.view.GestureExclusionTracker $r1;
        java.util.List $r2;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.GestureExclusionTracker mGestureExclusionTracker>;

        $r2 = virtualinvoke $r1.<android.view.GestureExclusionTracker: java.util.List getRootSystemGestureExclusionRects()>();

        return $r2;
    }

    public android.view.ScrollCaptureClient getScrollCaptureClient()
    {
        android.view.ViewRootImpl r0;
        android.view.ScrollCaptureClient $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ScrollCaptureClient mScrollCaptureClient>;

        return $r1;
    }

    public android.view.SurfaceControl getSurfaceControl()
    {
        android.view.ViewRootImpl r0;
        android.view.SurfaceControl $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.SurfaceControl mSurfaceControl>;

        return $r1;
    }

    public int getTextAlignment()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public int getTextDirection()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public java.lang.CharSequence getTitle()
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams $r1;
        java.lang.CharSequence $r2;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r2 = virtualinvoke $r1.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        return $r2;
    }

    public android.view.View getView()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        return $r1;
    }

    public int getWidth()
    {
        android.view.ViewRootImpl r0;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $i0 = r0.<android.view.ViewRootImpl: int mWidth>;

        return $i0;
    }

    public int getWindowFlags()
    {
        android.view.ViewRootImpl r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        return $i0;
    }

    android.view.WindowInsets getWindowInsets(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, z1, z2;
        android.view.DisplayCutout r1;
        int i0, i1, i2, $i3, $i4, $i5;
        android.view.WindowInsets $r2, $r12, $r18, $r23, $r29;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        android.content.res.Configuration $r5;
        android.view.View$AttachInfo $r6, $r15, $r17, $r22;
        android.view.DisplayCutout$ParcelableWrapper $r7;
        android.view.WindowManager$LayoutParams $r8, $r9, $r10, $r11, $r13;
        android.view.InsetsController $r14, r27;
        android.graphics.Rect $r16, $r19, $r21, $r24, $r26, r28;
        android.graphics.Insets $r20, $r25;

        r0 := @this: android.view.ViewRootImpl;

        z1 := @parameter0: boolean;

        $r2 = r0.<android.view.ViewRootImpl: android.view.WindowInsets mLastWindowInsets>;

        if $r2 == null goto label1;

        if z1 == 0 goto label2;

     label1:
        r27 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        $r3 = r0.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        z2 = virtualinvoke $r5.<android.content.res.Configuration: boolean isScreenRound()>();

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        z0 = $r6.<android.view.View$AttachInfo: boolean mAlwaysConsumeSystemBars>;

        $r7 = r0.<android.view.ViewRootImpl: android.view.DisplayCutout$ParcelableWrapper mPendingDisplayCutout>;

        r1 = virtualinvoke $r7.<android.view.DisplayCutout$ParcelableWrapper: android.view.DisplayCutout get()>();

        $r8 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i0 = $r8.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i1 = $r9.<android.view.WindowManager$LayoutParams: int flags>;

        $r10 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i2 = $r10.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        $r11 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i3 = $r11.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        $i4 = $i3 | i2;

        $r12 = virtualinvoke r27.<android.view.InsetsController: android.view.WindowInsets calculateInsets(boolean,boolean,android.view.DisplayCutout,int,int,int)>(z2, z0, r1, i0, i1, $i4);

        r0.<android.view.ViewRootImpl: android.view.WindowInsets mLastWindowInsets> = $r12;

        $r14 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        $r13 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i5 = $r13.<android.view.WindowManager$LayoutParams: int softInputMode>;

        r28 = virtualinvoke $r14.<android.view.InsetsController: android.graphics.Rect calculateVisibleInsets(int)>($i5);

        $r15 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r16 = $r15.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        virtualinvoke $r16.<android.graphics.Rect: void set(android.graphics.Rect)>(r28);

        $r17 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r19 = $r17.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $r18 = r0.<android.view.ViewRootImpl: android.view.WindowInsets mLastWindowInsets>;

        $r20 = virtualinvoke $r18.<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>();

        $r21 = virtualinvoke $r20.<android.graphics.Insets: android.graphics.Rect toRect()>();

        virtualinvoke $r19.<android.graphics.Rect: void set(android.graphics.Rect)>($r21);

        $r22 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r24 = $r22.<android.view.View$AttachInfo: android.graphics.Rect mStableInsets>;

        $r23 = r0.<android.view.ViewRootImpl: android.view.WindowInsets mLastWindowInsets>;

        $r25 = virtualinvoke $r23.<android.view.WindowInsets: android.graphics.Insets getStableInsets()>();

        $r26 = virtualinvoke $r25.<android.graphics.Insets: android.graphics.Rect toRect()>();

        virtualinvoke $r24.<android.graphics.Rect: void set(android.graphics.Rect)>($r26);

     label2:
        $r29 = r0.<android.view.ViewRootImpl: android.view.WindowInsets mLastWindowInsets>;

        return $r29;
    }

    public android.os.IBinder getWindowToken()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r1;
        android.os.IBinder $r2;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.os.IBinder mWindowToken>;

        return $r2;
    }

    void handleAppVisibility(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.ViewRootImpl: boolean mAppVisible>;

        if $z1 == z0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mAppVisible> = z0;

        r0.<android.view.ViewRootImpl: boolean mAppVisibilityChanged> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        $z2 = r0.<android.view.ViewRootImpl: boolean mAppVisible>;

        if $z2 != 0 goto label1;

        staticinvoke <android.view.WindowManagerGlobal: void trimForeground()>();

     label1:
        return;
    }

    public void handleDispatchWindowShown()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r1;
        android.view.ViewTreeObserver $r2;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r2.<android.view.ViewTreeObserver: void dispatchOnWindowShown()>();

        return;
    }

    void handleGetNewSurface()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded> = 1;

        r0.<android.view.ViewRootImpl: boolean mFullRedrawNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public void handleRequestKeyboardShortcuts(com.android.internal.os.IResultReceiver, int)
    {
        android.view.ViewRootImpl r0;
        int i0;
        android.view.View r3;
        android.os.Bundle $r4;
        java.util.ArrayList $r5;
        android.os.RemoteException $r6;
        com.android.internal.os.IResultReceiver r7;

        r0 := @this: android.view.ViewRootImpl;

        r7 := @parameter0: com.android.internal.os.IResultReceiver;

        i0 := @parameter1: int;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r3 == null goto label1;

        virtualinvoke r3.<android.view.View: void requestKeyboardShortcuts(java.util.List,int)>($r5, i0);

     label1:
        virtualinvoke $r4.<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>("shortcuts_array", $r5);

     label2:
        interfaceinvoke r7.<com.android.internal.os.IResultReceiver: void send(int,android.os.Bundle)>(0, $r4);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    boolean hasPointerCapture()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mPointerCapture>;

        return $z0;
    }

    void invalidate()
    {
        android.view.ViewRootImpl r0;
        int $i0, $i1;
        android.graphics.Rect $r1;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.graphics.Rect mDirty>;

        $i1 = r0.<android.view.ViewRootImpl: int mWidth>;

        $i0 = r0.<android.view.ViewRootImpl: int mHeight>;

        virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i1, $i0);

        $z0 = r0.<android.view.ViewRootImpl: boolean mWillDrawSoon>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    public void invalidateChild(android.view.View, android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.graphics.Rect r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.view.ViewRootImpl: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>(null, r2);

        return;
    }

    public android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect)
    {
        android.view.ViewRootImpl r0;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2;
        android.graphics.Rect $r1, r5, r6, r7;
        android.view.View$AttachInfo $r2;
        android.content.res.CompatibilityInfo$Translator $r3, r8;
        int[] r4;

        r0 := @this: android.view.ViewRootImpl;

        r4 := @parameter0: int[];

        r5 := @parameter1: android.graphics.Rect;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        if r5 != null goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void invalidate()>();

        return null;

     label1:
        $z0 = virtualinvoke r5.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $z2 = r0.<android.view.ViewRootImpl: boolean mIsAnimating>;

        if $z2 != 0 goto label2;

        return null;

     label2:
        $i1 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i1 != 0 goto label3;

        r6 = r5;

        $r3 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r3 == null goto label6;

     label3:
        $r1 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r1.<android.graphics.Rect: void set(android.graphics.Rect)>(r5);

        r7 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        i0 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if i0 == 0 goto label4;

        $i2 = neg i0;

        virtualinvoke r7.<android.graphics.Rect: void offset(int,int)>(0, $i2);

     label4:
        r8 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if r8 == null goto label5;

        virtualinvoke r8.<android.content.res.CompatibilityInfo$Translator: void translateRectInAppWindowToScreen(android.graphics.Rect)>(r7);

     label5:
        r6 = r7;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z1 = $r2.<android.view.View$AttachInfo: boolean mScalingRequired>;

        if $z1 == 0 goto label6;

        virtualinvoke r7.<android.graphics.Rect: void inset(int,int)>(-1, -1);

        r6 = r7;

     label6:
        specialinvoke r0.<android.view.ViewRootImpl: void invalidateRectOnScreen(android.graphics.Rect)>(r6);

        return null;
    }

    void invalidateWorld(android.view.View)
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        int $i0, i1;
        android.view.View $r1, r2;
        android.view.ViewGroup r3;

        r0 := @this: android.view.ViewRootImpl;

        r2 := @parameter0: android.view.View;

        virtualinvoke r2.<android.view.View: void invalidate()>();

        $z0 = r2 instanceof android.view.ViewGroup;

        if $z0 == 0 goto label2;

        r3 = (android.view.ViewGroup) r2;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r3.<android.view.ViewGroup: int getChildCount()>();

        if i1 >= $i0 goto label2;

        $r1 = virtualinvoke r3.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        virtualinvoke r0.<android.view.ViewRootImpl: void invalidateWorld(android.view.View)>($r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    boolean isDrawingToBLASTTransaction()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mNextReportConsumeBLAST>;

        return $z0;
    }

    boolean isInLayout()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mInLayout>;

        return $z0;
    }

    public boolean isLayoutDirectionResolved()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean isLayoutRequested()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mLayoutRequested>;

        return $z0;
    }

    public boolean isTextAlignmentResolved()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public boolean isTextDirectionResolved()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        return 1;
    }

    public android.view.View keyboardNavigationClusterSearch(android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r3, $r4;
        int i0;
        android.view.FocusFinder $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r2 = staticinvoke <android.view.FocusFinder: android.view.FocusFinder getInstance()>();

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r4 = virtualinvoke $r2.<android.view.FocusFinder: android.view.View findNextKeyboardNavigationCluster(android.view.View,android.view.View,int)>($r3, r1, i0);

        return $r4;
    }

    public void lambda$handleScrollCaptureRequest$3$ViewRootImpl(android.view.IScrollCaptureController, android.view.ScrollCaptureTarget)
    {
        android.view.ViewRootImpl r0;
        android.view.IScrollCaptureController r1;
        android.view.ScrollCaptureTarget r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.IScrollCaptureController;

        r2 := @parameter1: android.view.ScrollCaptureTarget;

        specialinvoke r0.<android.view.ViewRootImpl: void dispatchScrollCaptureSearchResult(android.view.IScrollCaptureController,android.view.ScrollCaptureTarget)>(r1, r2);

        return;
    }

    public void lambda$performDraw$1$ViewRootImpl(boolean, java.util.ArrayList)
    {
        android.view.ViewRootImpl r0;
        boolean z0;
        java.util.ArrayList r1;
        int $i0, i1;
        java.lang.Object $r2;
        java.lang.Runnable $r3;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.util.ArrayList;

        if z0 == 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void pendingDrawFinished()>();

     label1:
        if r1 == null goto label3;

        i1 = 0;

     label2:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label3;

        $r2 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r3 = (java.lang.Runnable) $r2;

        interfaceinvoke $r3.<java.lang.Runnable: void run()>();

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public void lambda$performDraw$2$ViewRootImpl(android.os.Handler, boolean, java.util.ArrayList, long)
    {
        android.view.ViewRootImpl r0;
        android.os.Handler r1;
        boolean z0, $z1, $z2;
        java.util.ArrayList r2;
        long l0;
        android.view._$$Lambda$ViewRootImpl$DJd0VUYJgsebcnSohO6h8zc_ONI $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.os.Handler;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.util.ArrayList;

        l0 := @parameter3: long;

        $z1 = r0.<android.view.ViewRootImpl: boolean mSendNextFrameToWm>;

        $z2 = $z1 ^ 1;

        specialinvoke r0.<android.view.ViewRootImpl: void finishBLASTSync(boolean)>($z2);

        $r3 = new android.view._$$Lambda$ViewRootImpl$DJd0VUYJgsebcnSohO6h8zc_ONI;

        specialinvoke $r3.<android.view._$$Lambda$ViewRootImpl$DJd0VUYJgsebcnSohO6h8zc_ONI: void <init>(android.view.ViewRootImpl,boolean,java.util.ArrayList)>(r0, z0, r2);

        virtualinvoke r1.<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>($r3);

        return;
    }

    public void loadSystemProperties()
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$4 $r1;
        android.view.ViewRootImpl$ViewRootHandler $r2;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r1 = new android.view.ViewRootImpl$4;

        specialinvoke $r1.<android.view.ViewRootImpl$4: void <init>(android.view.ViewRootImpl)>(r0);

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean post(java.lang.Runnable)>($r1);

        return;
    }

    public void notifyChildRebuilt()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1, $r2, $r4;
        boolean $z0;
        com.android.internal.view.RootViewSurfaceTaker $r3, $r5;
        android.view.InputQueue $r6;
        android.view.ViewRootImpl$TakenSurfaceHolder $r7;
        android.view.SurfaceHolder$Callback2 $r8, r11, r12;
        com.android.internal.view.BaseSurfaceHolder $r9, $r10;
        android.view.InputQueue$Callback r14;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z0 = $r1 instanceof com.android.internal.view.RootViewSurfaceTaker;

        if $z0 == 0 goto label4;

        r11 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        if r11 == null goto label1;

        $r10 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        virtualinvoke $r10.<com.android.internal.view.BaseSurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)>(r11);

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r3 = (com.android.internal.view.RootViewSurfaceTaker) $r2;

        r12 = interfaceinvoke $r3.<com.android.internal.view.RootViewSurfaceTaker: android.view.SurfaceHolder$Callback2 willYouTakeTheSurface()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback> = r12;

        if r12 == null goto label2;

        $r7 = new android.view.ViewRootImpl$TakenSurfaceHolder;

        specialinvoke $r7.<android.view.ViewRootImpl$TakenSurfaceHolder: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder> = $r7;

        virtualinvoke $r7.<com.android.internal.view.BaseSurfaceHolder: void setFormat(int)>(0);

        $r9 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        virtualinvoke $r9.<com.android.internal.view.BaseSurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>($r8);

        goto label3;

     label2:
        r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder> = null;

     label3:
        $r4 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r5 = (com.android.internal.view.RootViewSurfaceTaker) $r4;

        r14 = interfaceinvoke $r5.<com.android.internal.view.RootViewSurfaceTaker: android.view.InputQueue$Callback willYouTakeTheInputQueue()>();

        r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback> = r14;

        if r14 == null goto label4;

        $r6 = r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue>;

        interfaceinvoke r14.<android.view.InputQueue$Callback: void onInputQueueCreated(android.view.InputQueue)>($r6);

     label4:
        return;
    }

    void notifyInsetsChanged()
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        int $i0;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewRootImpl;

        $i0 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if $i0 != 0 goto label1;

        return;

     label1:
        r0.<android.view.ViewRootImpl: boolean mApplyInsetsRequested> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

        $z0 = <android.view.View: boolean sForceLayoutWhenInsetsChanged>;

        if $z0 == 0 goto label2;

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 == null goto label2;

        staticinvoke <android.view.ViewRootImpl: void forceLayout(android.view.View)>(r1);

     label2:
        $z1 = r0.<android.view.ViewRootImpl: boolean mIsInTraversal>;

        if $z1 != 0 goto label3;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label3:
        return;
    }

    void notifyRendererOfFramePending()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r1, $r3;
        android.view.ThreadedRenderer $r2, $r4;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2 = $r1.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r2 == null goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r4.<android.view.ThreadedRenderer: void notifyFramePending()>();

     label1:
        return;
    }

    public void notifySubtreeAccessibilityStateChanged(android.view.View, android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, $r4;
        int i0;
        java.lang.Object $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r2);

        $r4 = (android.view.View) $r3;

        specialinvoke r0.<android.view.ViewRootImpl: void postSendWindowContentChangedCallback(android.view.View,int)>($r4, i0);

        return;
    }

    public void onDescendantInvalidated(android.view.View, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2;
        int $i0, $i1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        $i0 = r2.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 64;

        if $i1 == 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mIsAnimating> = 1;

     label1:
        virtualinvoke r0.<android.view.ViewRootImpl: void invalidate()>();

        return;
    }

    public void onDescendantUnbufferedRequested()
    {
        android.view.ViewRootImpl r0;
        android.view.View $r1;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i0 = $r1.<android.view.View: int mUnbufferedInputSource>;

        r0.<android.view.ViewRootImpl: int mUnbufferedInputSource> = $i0;

        return;
    }

    public void onMovedToDisplay(int, android.content.res.Configuration)
    {
        android.view.ViewRootImpl r0;
        int i0, $i1, $i2;
        android.content.res.Configuration r1;
        android.view.Display $r2, $r6, $r8;
        android.view.View $r3, $r9;
        android.content.res.Resources $r4;
        android.view.ImeFocusController $r5;
        android.view.View$AttachInfo $r7;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.Configuration;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $i1 = virtualinvoke $r2.<android.view.Display: int getDisplayId()>();

        if $i1 != i0 goto label1;

        return;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r4 = virtualinvoke $r3.<android.view.View: android.content.res.Resources getResources()>();

        specialinvoke r0.<android.view.ViewRootImpl: void updateInternalDisplay(int,android.content.res.Resources)>(i0, $r4);

        $r5 = r0.<android.view.ViewRootImpl: android.view.ImeFocusController mImeFocusController>;

        virtualinvoke $r5.<android.view.ImeFocusController: void onMovedToDisplay()>();

        $r7 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $i2 = virtualinvoke $r6.<android.view.Display: int getState()>();

        $r7.<android.view.View$AttachInfo: int mDisplayState> = $i2;

        $r9 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        virtualinvoke $r9.<android.view.View: void dispatchMovedToDisplay(android.view.Display,android.content.res.Configuration)>($r8, r1);

        return;
    }

    public boolean onNestedFling(android.view.View, float, float, boolean)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        float f0, f1;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        return 0;
    }

    public boolean onNestedPreFling(android.view.View, float, float)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        float f0, f1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        return 0;
    }

    public boolean onNestedPrePerformAccessibilityAction(android.view.View, int, android.os.Bundle)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        int i0;
        android.os.Bundle r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Bundle;

        return 0;
    }

    public void onNestedPreScroll(android.view.View, int, int, int[])
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        int i0, i1;
        int[] r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: int[];

        return;
    }

    public void onNestedScroll(android.view.View, int, int, int, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        int i0, i1, i2, i3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        return;
    }

    public void onNestedScrollAccepted(android.view.View, android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        return;
    }

    public void onPostDraw(android.graphics.RecordingCanvas)
    {
        android.view.ViewRootImpl r0;
        android.graphics.RecordingCanvas r1;
        boolean $z0;
        java.util.ArrayList $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        android.view.WindowCallbacks $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.RecordingCanvas;

        specialinvoke r0.<android.view.ViewRootImpl: void drawAccessibilityFocusedDrawableIfNeeded(android.graphics.Canvas)>(r1);

        $z0 = r0.<android.view.ViewRootImpl: boolean mUseMTRenderer>;

        if $z0 == 0 goto label2;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label2;

        $r3 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.view.WindowCallbacks) $r4;

        interfaceinvoke $r5.<android.view.WindowCallbacks: void onPostDraw(android.graphics.RecordingCanvas)>(r1);

        i1 = i1 + -1;

        goto label1;

     label2:
        return;
    }

    public void onPreDraw(android.graphics.RecordingCanvas)
    {
        android.view.ViewRootImpl r0;
        android.graphics.RecordingCanvas r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.view.View$AttachInfo $r2;
        android.view.ThreadedRenderer $r3;
        boolean $z0;
        float $f0, $f1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.RecordingCanvas;

        $i0 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        if $i0 == 0 goto label1;

        $i1 = r0.<android.view.ViewRootImpl: int mHardwareYOffset>;

        if $i1 == 0 goto label1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $z0 = virtualinvoke $r3.<android.view.ThreadedRenderer: boolean isOpaque()>();

        if $z0 == 0 goto label1;

        virtualinvoke r1.<android.graphics.RecordingCanvas: void drawColor(int)>(-16777216);

     label1:
        $i2 = r0.<android.view.ViewRootImpl: int mHardwareXOffset>;

        $i3 = neg $i2;

        $f0 = (float) $i3;

        $i4 = r0.<android.view.ViewRootImpl: int mHardwareYOffset>;

        $i5 = neg $i4;

        $f1 = (float) $i5;

        virtualinvoke r1.<android.graphics.RecordingCanvas: void translate(float,float)>($f0, $f1);

        return;
    }

    public boolean onStartNestedScroll(android.view.View, android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        return 0;
    }

    public void onStopNestedScroll(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return;
    }

    public void onWindowTitleChanged()
    {
        android.view.ViewRootImpl r0;
        android.view.View$AttachInfo $r1;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r1.<android.view.View$AttachInfo: boolean mForceReportNewAttributes> = 1;

        return;
    }

    void outputDisplayList(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.graphics.RenderNode $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r1.<android.view.View: android.graphics.RenderNode mRenderNode>;

        virtualinvoke $r2.<android.graphics.RenderNode: void output()>();

        return;
    }

    void pendingDrawFinished()
    {
        android.view.ViewRootImpl r0;
        java.lang.RuntimeException $r1;
        int i0, i1;

        r0 := @this: android.view.ViewRootImpl;

        i0 = r0.<android.view.ViewRootImpl: int mDrawsNeededToReport>;

        if i0 == 0 goto label2;

        i1 = i0 + -1;

        r0.<android.view.ViewRootImpl: int mDrawsNeededToReport> = i1;

        if i1 != 0 goto label1;

        specialinvoke r0.<android.view.ViewRootImpl: void reportDrawFinished()>();

     label1:
        return;

     label2:
        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unbalanced drawPending/pendingDrawFinished calls");

        throw $r1;
    }

    public boolean performHapticFeedback(int, boolean)
    {
        android.view.ViewRootImpl r0;
        int i0;
        android.view.IWindowSession $r2;
        android.os.RemoteException $r3;
        boolean z0, z1;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        z1 = interfaceinvoke $r2.<android.view.IWindowSession: boolean performHapticFeedback(int,boolean)>(i0, z0);

     label2:
        return z1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void playSoundEffect(int)
    {
        android.view.ViewRootImpl r0;
        int i0;
        java.lang.String r1, $r6, $r8, $r13;
        java.lang.Class $r5;
        java.lang.Throwable $r9;
        android.media.AudioManager r14;
        java.lang.StringBuilder r19, r21;
        java.lang.IllegalArgumentException r20;
        java.lang.IllegalStateException r22;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

     label01:
        r14 = specialinvoke r0.<android.view.ViewRootImpl: android.media.AudioManager getAudioManager()>();

     label02:
        if i0 == 0 goto label12;

        if i0 == 1 goto label10;

        if i0 == 2 goto label08;

        if i0 == 3 goto label06;

        if i0 != 4 goto label05;

     label03:
        virtualinvoke r14.<android.media.AudioManager: void playSoundEffect(int)>(2);

     label04:
        return;

     label05:
        r20 = new java.lang.IllegalArgumentException;

        r19 = new java.lang.StringBuilder;

        specialinvoke r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown effect id ");

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not defined in ");

        $r5 = class "Landroid/view/SoundEffectConstants;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getCanonicalName()>();

        virtualinvoke r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke r19.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw r20;

     label06:
        virtualinvoke r14.<android.media.AudioManager: void playSoundEffect(int)>(4);

     label07:
        return;

     label08:
        virtualinvoke r14.<android.media.AudioManager: void playSoundEffect(int)>(1);

     label09:
        return;

     label10:
        virtualinvoke r14.<android.media.AudioManager: void playSoundEffect(int)>(3);

     label11:
        return;

     label12:
        virtualinvoke r14.<android.media.AudioManager: void playSoundEffect(int)>(0);

     label13:
        return;

     label14:
        $r9 := @caughtexception;

        r1 = r0.<android.view.ViewRootImpl: java.lang.String mTag>;

        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FATAL EXCEPTION when attempting to play sound effect: ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r13 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>(r1, $r13);

        r22 = (java.lang.IllegalStateException) $r9;

        virtualinvoke r22.<java.lang.IllegalStateException: void printStackTrace()>();

        return;

        catch java.lang.IllegalStateException from label01 to label02 with label14;
        catch java.lang.IllegalStateException from label03 to label04 with label14;
        catch java.lang.IllegalStateException from label05 to label06 with label14;
        catch java.lang.IllegalStateException from label06 to label07 with label14;
        catch java.lang.IllegalStateException from label08 to label09 with label14;
        catch java.lang.IllegalStateException from label10 to label11 with label14;
        catch java.lang.IllegalStateException from label12 to label13 with label14;
    }

    void pokeDrawLockIfNeeded()
    {
        android.view.ViewRootImpl r0;
        int i0;
        android.view.View$AttachInfo $r2;
        android.view.View $r3;
        boolean $z0, $z1;
        android.view.ViewRootImpl$W $r4;
        android.view.IWindowSession $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.view.ViewRootImpl;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        i0 = $r2.<android.view.View$AttachInfo: int mDisplayState>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r3 == null goto label4;

        $z0 = r0.<android.view.ViewRootImpl: boolean mAdded>;

        if $z0 == 0 goto label4;

        $z1 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z1 == 0 goto label4;

        if i0 == 3 goto label1;

        if i0 != 4 goto label4;

     label1:
        $r5 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r5.<android.view.IWindowSession: void pokeDrawLock(android.os.IBinder)>($r4);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void profile()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mProfile> = 1;

        return;
    }

    public void recomputeViewAttributes(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r2;
        android.view.View$AttachInfo $r3;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 != r1 goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

        $z0 = r0.<android.view.ViewRootImpl: boolean mWillDrawSoon>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    public void registerAnimatingRenderNode(android.graphics.RenderNode)
    {
        android.view.ViewRootImpl r0;
        android.graphics.RenderNode r1;
        android.view.View$AttachInfo $r2, $r4, $r6, $r9, $r10;
        android.view.ThreadedRenderer $r3, $r11;
        java.util.List $r5, $r7;
        java.util.ArrayList $r8;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.RenderNode;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r3 == null goto label1;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r11 = $r10.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r11.<android.view.ThreadedRenderer: void registerAnimatingRenderNode(android.graphics.RenderNode)>(r1);

        goto label3;

     label1:
        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        if $r5 != null goto label2;

        $r9 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        $r9.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes> = $r8;

     label2:
        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: java.util.List mPendingAnimatingRenderNodes>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r1);

     label3:
        return;
    }

    public void registerRtFrameCallback(android.graphics.HardwareRenderer$FrameDrawingCallback)
    {
        android.view.ViewRootImpl r0;
        android.graphics.HardwareRenderer$FrameDrawingCallback r1;
        android.view.View$AttachInfo $r2, $r4;
        android.view.ThreadedRenderer $r3, $r6;
        android.view._$$Lambda$ViewRootImpl$IReiNMSbDakZSGbIZuL_ifaFWn8 $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.HardwareRenderer$FrameDrawingCallback;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r4.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        $r5 = new android.view._$$Lambda$ViewRootImpl$IReiNMSbDakZSGbIZuL_ifaFWn8;

        specialinvoke $r5.<android.view._$$Lambda$ViewRootImpl$IReiNMSbDakZSGbIZuL_ifaFWn8: void <init>(android.graphics.HardwareRenderer$FrameDrawingCallback)>(r1);

        virtualinvoke $r6.<android.view.ThreadedRenderer: void registerRtFrameCallback(android.graphics.HardwareRenderer$FrameDrawingCallback)>($r5);

     label1:
        return;
    }

    public void registerVectorDrawableAnimator(android.view.NativeVectorDrawableAnimator)
    {
        android.view.ViewRootImpl r0;
        android.view.NativeVectorDrawableAnimator r1;
        android.view.View$AttachInfo $r2, $r4;
        android.view.ThreadedRenderer $r3, $r5;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.NativeVectorDrawableAnimator;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r3 == null goto label1;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r5 = $r4.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r5.<android.view.ThreadedRenderer: void registerVectorDrawableAnimator(android.view.NativeVectorDrawableAnimator)>(r1);

     label1:
        return;
    }

    public void removeScrollCaptureCallback(android.view.ScrollCaptureCallback)
    {
        android.view.ViewRootImpl r0;
        android.view.ScrollCaptureCallback r1;
        java.util.HashSet r2, $r3;
        boolean $z1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ScrollCaptureCallback;

        r2 = r0.<android.view.ViewRootImpl: java.util.HashSet mRootScrollCaptureCallbacks>;

        if r2 == null goto label1;

        virtualinvoke r2.<java.util.HashSet: boolean remove(java.lang.Object)>(r1);

        $r3 = r0.<android.view.ViewRootImpl: java.util.HashSet mRootScrollCaptureCallbacks>;

        $z1 = virtualinvoke $r3.<java.util.HashSet: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        r0.<android.view.ViewRootImpl: java.util.HashSet mRootScrollCaptureCallbacks> = null;

     label1:
        return;
    }

    void removeSurfaceChangedCallback(android.view.ViewRootImpl$SurfaceChangedCallback)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$SurfaceChangedCallback r1;
        java.util.ArrayList $r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$SurfaceChangedCallback;

        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mSurfaceChangedCallbacks>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void removeWindowCallbacks(android.view.WindowCallbacks)
    {
        android.view.ViewRootImpl r0;
        java.util.ArrayList r1, $r2;
        java.lang.Throwable $r3;
        android.view.WindowCallbacks r4;

        r0 := @this: android.view.ViewRootImpl;

        r4 := @parameter0: android.view.WindowCallbacks;

        r1 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mWindowCallbacks>;

        virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void reportActivityRelaunched()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mActivityRelaunched> = 1;

        return;
    }

    public void reportDrawFinish()
    {
        android.view.ViewRootImpl r0;
        java.util.concurrent.CountDownLatch r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 = r0.<android.view.ViewRootImpl: java.util.concurrent.CountDownLatch mWindowDrawCountDown>;

        if r1 == null goto label1;

        virtualinvoke r1.<java.util.concurrent.CountDownLatch: void countDown()>();

     label1:
        return;
    }

    public void requestChildFocus(android.view.View, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public boolean requestChildRectangleOnScreen(android.view.View, android.graphics.Rect, boolean)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Rect r1, $r2, $r3, $r6, $r7;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.view.View$AttachInfo $r4, $r5;
        android.view.ViewRootImpl$W $r8;
        android.view.IWindowSession $r9;
        boolean $z0, z1, z2;
        android.os.RemoteException $r10;
        android.view.View r11;

        r0 := @this: android.view.ViewRootImpl;

        r11 := @parameter0: android.view.View;

        r1 := @parameter1: android.graphics.Rect;

        z1 := @parameter2: boolean;

        if r1 != null goto label1;

        $z0 = virtualinvoke r0.<android.view.ViewRootImpl: boolean scrollToRectOrFocus(android.graphics.Rect,boolean)>(null, z1);

        return $z0;

     label1:
        $i0 = virtualinvoke r11.<android.view.View: int getLeft()>();

        $i1 = virtualinvoke r11.<android.view.View: int getScrollX()>();

        $i2 = $i0 - $i1;

        $i3 = virtualinvoke r11.<android.view.View: int getTop()>();

        $i4 = virtualinvoke r11.<android.view.View: int getScrollY()>();

        $i5 = $i3 - $i4;

        virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i2, $i5);

        z2 = virtualinvoke r0.<android.view.ViewRootImpl: boolean scrollToRectOrFocus(android.graphics.Rect,boolean)>(r1, z1);

        $r2 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        $r3 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i6 = r0.<android.view.ViewRootImpl: int mCurScrollY>;

        $i7 = neg $i6;

        virtualinvoke $r3.<android.graphics.Rect: void offset(int,int)>(0, $i7);

        $r6 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i9 = $r4.<android.view.View$AttachInfo: int mWindowLeft>;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i8 = $r5.<android.view.View$AttachInfo: int mWindowTop>;

        virtualinvoke $r6.<android.graphics.Rect: void offset(int,int)>($i9, $i8);

     label2:
        $r9 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r8 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r7 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        interfaceinvoke $r9.<android.view.IWindowSession: void onRectangleOnScreenRequested(android.os.IBinder,android.graphics.Rect)>($r8, $r7);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

     label5:
        return z2;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void requestDisallowInterceptTouchEvent(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        return;
    }

    public void requestFitSystemWindows()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        r0.<android.view.ViewRootImpl: boolean mApplyInsetsRequested> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        return;
    }

    public void requestInvalidateRootRenderNode()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mInvalidateRootRequested> = 1;

        return;
    }

    public void requestLayout()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        r0.<android.view.ViewRootImpl: boolean mLayoutRequested> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

     label1:
        return;
    }

    boolean requestLayoutDuringLayout(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ViewParent $r2;
        android.view.View$AttachInfo $r3;
        java.util.ArrayList $r4, $r5;
        boolean $z0, $z1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r1.<android.view.View: android.view.ViewParent mParent>;

        if $r2 == null goto label4;

        $r3 = r1.<android.view.View: android.view.View$AttachInfo mAttachInfo>;

        if $r3 != null goto label1;

        goto label4;

     label1:
        $r4 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

        $r5 = r0.<android.view.ViewRootImpl: java.util.ArrayList mLayoutRequesters>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label2:
        $z1 = r0.<android.view.ViewRootImpl: boolean mHandlingLayoutInLayoutRequest>;

        if $z1 != 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        return 1;
    }

    void requestPointerCapture(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1;
        android.hardware.input.InputManager $r1;
        android.view.View$AttachInfo $r2;
        android.os.IBinder $r3;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.view.ViewRootImpl: boolean mPointerCapture>;

        if $z1 != z0 goto label1;

        return;

     label1:
        $r1 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r3 = $r2.<android.view.View$AttachInfo: android.os.IBinder mWindowToken>;

        virtualinvoke $r1.<android.hardware.input.InputManager: void requestPointerCapture(android.os.IBinder,boolean)>($r3, z0);

        return;
    }

    public boolean requestSendAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.accessibility.AccessibilityEvent r1;
        int i0, $i1, $i3;
        android.view.accessibility.AccessibilityNodeProvider r2, $r5;
        android.view.View $r3, $r6, r8, r10;
        boolean $z0, $z1;
        long $l2;
        android.view.accessibility.AccessibilityNodeInfo $r4;
        android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent $r7, r9;
        android.view.accessibility.AccessibilityManager $r11;

        r0 := @this: android.view.ViewRootImpl;

        r8 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.accessibility.AccessibilityEvent;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r3 == null goto label8;

        $z0 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z0 != 0 goto label8;

        $z1 = r0.<android.view.ViewRootImpl: boolean mPausedForTransition>;

        if $z1 == 0 goto label1;

        goto label8;

     label1:
        $i1 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if $i1 == 2048 goto label2;

        r9 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        if r9 == null goto label2;

        $r6 = r9.<android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent: android.view.View mSource>;

        if $r6 == null goto label2;

        $r7 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent mSendWindowContentChangedAccessibilityEvent>;

        virtualinvoke $r7.<android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent: void removeCallbacksAndRun()>();

     label2:
        i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        r10 = specialinvoke r0.<android.view.ViewRootImpl: android.view.View getSourceForAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        if i0 == 2048 goto label6;

        if i0 == 32768 goto label4;

        if i0 == 65536 goto label3;

        goto label7;

     label3:
        if r10 == null goto label7;

        $r5 = virtualinvoke r10.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if $r5 == null goto label7;

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        goto label7;

     label4:
        if r10 == null goto label7;

        r2 = virtualinvoke r10.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r2 == null goto label5;

        $l2 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: long getSourceNodeId()>();

        $i3 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l2);

        $r4 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeProvider: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)>($i3);

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(r10, $r4);

     label5:
        goto label7;

     label6:
        specialinvoke r0.<android.view.ViewRootImpl: void handleWindowContentChangedEvent(android.view.accessibility.AccessibilityEvent)>(r1);

     label7:
        $r11 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        virtualinvoke $r11.<android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        return 1;

     label8:
        return 0;
    }

    public void requestTransitionStart(android.animation.LayoutTransition)
    {
        android.view.ViewRootImpl r0;
        android.animation.LayoutTransition r1;
        java.util.ArrayList r2, $r3, $r4, $r5;
        boolean $z1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.animation.LayoutTransition;

        r2 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label3;

     label1:
        $r3 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        if $r3 != null goto label2;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions> = $r5;

     label2:
        $r4 = r0.<android.view.ViewRootImpl: java.util.ArrayList mPendingTransitions>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label3:
        return;
    }

    public void requestTransparentRegion(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r2, r3;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.ViewRootImpl;

        r2 := @parameter0: android.view.View;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        r1 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r1 == r2 goto label1;

        return;

     label1:
        $i0 = r1.<android.view.View: int mPrivateFlags>;

        $i1 = $i0 & 512;

        if $i1 != 0 goto label2;

        r3 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i2 = r3.<android.view.View: int mPrivateFlags>;

        $i3 = $i2 | 512;

        r3.<android.view.View: int mPrivateFlags> = $i3;

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 1;

     label2:
        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

        return;
    }

    public void requestUpdateConfiguration(android.content.res.Configuration)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2;
        android.content.res.Configuration r3;
        android.os.Message r4;

        r0 := @this: android.view.ViewRootImpl;

        r3 := @parameter0: android.content.res.Configuration;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r4 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(18, r3);

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r4);

        return;
    }

    void scheduleConsumeBatchedInput()
    {
        android.view.ViewRootImpl r0;
        boolean $z0, $z1;
        android.view.ViewRootImpl$ConsumeBatchedInputRunnable $r1;
        android.view.Choreographer $r2;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        if $z0 != 0 goto label1;

        $z1 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputImmediatelyScheduled>;

        if $z1 != 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled> = 1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable>;

        virtualinvoke $r2.<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>(0, $r1, null);

     label1:
        return;
    }

    void scheduleConsumeBatchedInputImmediately()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable $r1;
        android.view.ViewRootImpl$ViewRootHandler $r2;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputImmediatelyScheduled>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleConsumeBatchedInput()>();

        r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputImmediatelyScheduled> = 1;

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputImmediatelyRunnable mConsumeBatchedInputImmediatelyRunnable>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean post(java.lang.Runnable)>($r1);

     label1:
        return;
    }

    void scheduleTraversals()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ViewRootHandler $r1;
        android.os.Looper $r2;
        android.os.MessageQueue $r3;
        int $i0;
        android.view.ViewRootImpl$TraversalRunnable $r4;
        android.view.Choreographer $r5;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z0 != 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mTraversalScheduled> = 1;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Looper getLooper()>();

        $r3 = virtualinvoke $r2.<android.os.Looper: android.os.MessageQueue getQueue()>();

        $i0 = virtualinvoke $r3.<android.os.MessageQueue: int postSyncBarrier()>();

        r0.<android.view.ViewRootImpl: int mTraversalBarrier> = $i0;

        $r5 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable>;

        virtualinvoke $r5.<android.view.Choreographer: void postCallback(int,java.lang.Runnable,java.lang.Object)>(3, $r4, null);

        virtualinvoke r0.<android.view.ViewRootImpl: void notifyRendererOfFramePending()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void pokeDrawLockIfNeeded()>();

     label1:
        return;
    }

    boolean scrollToRectOrFocus(android.graphics.Rect, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z2, $z3, z4, $z5, $z6;
        android.graphics.Rect r1, $r9, $r10, $r12, $r13, $r15, $r17, $r18, $r19, r22, r23, $r28, $r30, $r31;
        android.view.View r2, $r7, $r11, $r14, $r16, $r24, r26, r29;
        android.view.WindowInsets $r3;
        android.view.View$AttachInfo $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, $i29, i30;
        android.widget.Scroller $r5, $r6, r32, r33;
        android.content.Context $r8;
        android.view.ViewGroup $r20;
        java.lang.Object $r21;
        java.lang.ref.WeakReference r25, $r27;

        r0 := @this: android.view.ViewRootImpl;

        r22 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        $r3 = virtualinvoke r0.<android.view.ViewRootImpl: android.view.WindowInsets getWindowInsets(boolean)>(0);

        r23 = virtualinvoke $r3.<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsetsAsRect()>();

        $r4 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r1 = $r4.<android.view.View$AttachInfo: android.graphics.Rect mVisibleInsets>;

        i27 = 0;

        $i1 = r1.<android.graphics.Rect: int left>;

        $i0 = r23.<android.graphics.Rect: int left>;

        if $i1 > $i0 goto label01;

        $i22 = r1.<android.graphics.Rect: int top>;

        $i21 = r23.<android.graphics.Rect: int top>;

        if $i22 > $i21 goto label01;

        $i24 = r1.<android.graphics.Rect: int right>;

        $i23 = r23.<android.graphics.Rect: int right>;

        if $i24 > $i23 goto label01;

        z4 = 0;

        $i26 = r1.<android.graphics.Rect: int bottom>;

        $i25 = r23.<android.graphics.Rect: int bottom>;

        if $i26 <= $i25 goto label13;

     label01:
        i28 = r0.<android.view.ViewRootImpl: int mScrollY>;

        $r24 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        r2 = virtualinvoke $r24.<android.view.View: android.view.View findFocus()>();

        if r2 != null goto label02;

        return 0;

     label02:
        r25 = r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus>;

        if r25 == null goto label03;

        $r21 = virtualinvoke r25.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r26 = (android.view.View) $r21;

        goto label04;

     label03:
        r26 = null;

     label04:
        if r2 == r26 goto label05;

        r22 = null;

     label05:
        if r2 != r26 goto label06;

        $z3 = r0.<android.view.ViewRootImpl: boolean mScrollMayChange>;

        if $z3 != 0 goto label06;

        if r22 != null goto label06;

        i27 = i28;

        z4 = 0;

        goto label13;

     label06:
        $r27 = new java.lang.ref.WeakReference;

        specialinvoke $r27.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2);

        r0.<android.view.ViewRootImpl: java.lang.ref.WeakReference mLastScrolledFocus> = $r27;

        r0.<android.view.ViewRootImpl: boolean mScrollMayChange> = 0;

        i27 = i28;

        z4 = 0;

        $r28 = r0.<android.view.ViewRootImpl: android.graphics.Rect mVisRect>;

        $z5 = virtualinvoke r2.<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>($r28, null);

        if $z5 == 0 goto label13;

        if r22 != null goto label07;

        $r18 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke r2.<android.view.View: void getFocusedRect(android.graphics.Rect)>($r18);

        r29 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z2 = r29 instanceof android.view.ViewGroup;

        if $z2 == 0 goto label08;

        $r20 = (android.view.ViewGroup) r29;

        $r19 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r20.<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>(r2, $r19);

        goto label08;

     label07:
        $r9 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke $r9.<android.graphics.Rect: void set(android.graphics.Rect)>(r22);

     label08:
        i27 = i28;

        z4 = 0;

        $r30 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $r31 = r0.<android.view.ViewRootImpl: android.graphics.Rect mVisRect>;

        $z6 = virtualinvoke $r30.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>($r31);

        if $z6 == 0 goto label13;

        $r10 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i3 = virtualinvoke $r10.<android.graphics.Rect: int height()>();

        $r11 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i4 = virtualinvoke $r11.<android.view.View: int getHeight()>();

        $i5 = r1.<android.graphics.Rect: int top>;

        $i7 = $i4 - $i5;

        $i6 = r1.<android.graphics.Rect: int bottom>;

        $i8 = $i7 - $i6;

        if $i3 <= $i8 goto label09;

        i27 = i28;

        goto label12;

     label09:
        $r12 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i10 = $r12.<android.graphics.Rect: int top>;

        $i9 = r1.<android.graphics.Rect: int top>;

        if $i10 >= $i9 goto label10;

        $r17 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i20 = $r17.<android.graphics.Rect: int top>;

        $i19 = r1.<android.graphics.Rect: int top>;

        i27 = $i20 - $i19;

        goto label12;

     label10:
        $r13 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i11 = $r13.<android.graphics.Rect: int bottom>;

        $r14 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i12 = virtualinvoke $r14.<android.view.View: int getHeight()>();

        $i13 = r1.<android.graphics.Rect: int bottom>;

        $i14 = $i12 - $i13;

        if $i11 <= $i14 goto label11;

        $r15 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        $i15 = $r15.<android.graphics.Rect: int bottom>;

        $r16 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i16 = virtualinvoke $r16.<android.view.View: int getHeight()>();

        $i17 = r1.<android.graphics.Rect: int bottom>;

        $i18 = $i16 - $i17;

        i27 = $i15 - $i18;

        goto label12;

     label11:
        i27 = 0;

     label12:
        z4 = 1;

     label13:
        $i29 = r0.<android.view.ViewRootImpl: int mScrollY>;

        if i27 == $i29 goto label17;

        if z0 != 0 goto label15;

        $r5 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if $r5 != null goto label14;

        $r6 = new android.widget.Scroller;

        $r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r8 = virtualinvoke $r7.<android.view.View: android.content.Context getContext()>();

        specialinvoke $r6.<android.widget.Scroller: void <init>(android.content.Context)>($r8);

        r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller> = $r6;

     label14:
        r32 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        i30 = r0.<android.view.ViewRootImpl: int mScrollY>;

        $i2 = i27 - i30;

        virtualinvoke r32.<android.widget.Scroller: void startScroll(int,int,int,int)>(0, i30, 0, $i2);

        goto label16;

     label15:
        r33 = r0.<android.view.ViewRootImpl: android.widget.Scroller mScroller>;

        if r33 == null goto label16;

        virtualinvoke r33.<android.widget.Scroller: void abortAnimation()>();

     label16:
        r0.<android.view.ViewRootImpl: int mScrollY> = i27;

     label17:
        return z4;
    }

    void setAccessibilityFocus(android.view.View, android.view.accessibility.AccessibilityNodeInfo)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r3, r11;
        android.view.accessibility.AccessibilityNodeInfo r2, $r5, r10;
        android.view.accessibility.AccessibilityNodeProvider r4;
        android.view.View$AttachInfo $r6, $r12;
        android.view.ThreadedRenderer $r7, $r13;
        android.graphics.Rect $r8, $r9;
        long $l0;
        int $i1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.accessibility.AccessibilityNodeInfo;

        $r5 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        if $r5 == null goto label2;

        r10 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView>;

        r3 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost> = null;

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView> = null;

        virtualinvoke r3.<android.view.View: void clearAccessibilityFocusNoCallbacks(int)>(64);

        r4 = virtualinvoke r3.<android.view.View: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()>();

        if r4 == null goto label1;

        $r8 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke r10.<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>($r8);

        $r9 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTempRect>;

        virtualinvoke r3.<android.view.View: void invalidate(android.graphics.Rect)>($r9);

        $l0 = virtualinvoke r10.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        $i1 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: int getVirtualDescendantId(long)>($l0);

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeProvider: boolean performAction(int,int,android.os.Bundle)>($i1, 128, null);

     label1:
        virtualinvoke r10.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

     label2:
        r11 = r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost>;

        if r11 == null goto label3;

        if r11 == r1 goto label3;

        virtualinvoke r11.<android.view.View: void clearAccessibilityFocusNoCallbacks(int)>(64);

     label3:
        r0.<android.view.ViewRootImpl: android.view.View mAccessibilityFocusedHost> = r1;

        r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityNodeInfo mAccessibilityFocusedVirtualView> = r2;

        $r12 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r13 = $r12.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r13 == null goto label4;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r7 = $r6.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        virtualinvoke $r7.<android.view.ThreadedRenderer: void invalidateRoot()>();

     label4:
        return;
    }

    public void setActivityConfigCallback(android.view.ViewRootImpl$ActivityConfigCallback)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ActivityConfigCallback r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.ViewRootImpl$ActivityConfigCallback;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ActivityConfigCallback mActivityConfigCallback> = r1;

        return;
    }

    public void setDragFocus(android.view.View, android.view.DragEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, $r4, $r5, $r6;
        android.view.DragEvent r2;
        float f0, f1;
        int i0;
        android.content.ClipData r3;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.DragEvent;

        $r4 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if $r4 == r1 goto label3;

        $z0 = <android.view.View: boolean sCascadedDragDrop>;

        if $z0 != 0 goto label3;

        f0 = r2.<android.view.DragEvent: float mX>;

        f1 = r2.<android.view.DragEvent: float mY>;

        i0 = r2.<android.view.DragEvent: int mAction>;

        r3 = r2.<android.view.DragEvent: android.content.ClipData mClipData>;

        r2.<android.view.DragEvent: float mX> = 0.0F;

        r2.<android.view.DragEvent: float mY> = 0.0F;

        r2.<android.view.DragEvent: android.content.ClipData mClipData> = null;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        if $r5 == null goto label1;

        r2.<android.view.DragEvent: int mAction> = 6;

        $r6 = r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView>;

        virtualinvoke $r6.<android.view.View: boolean callDragEventHandler(android.view.DragEvent)>(r2);

     label1:
        if r1 == null goto label2;

        r2.<android.view.DragEvent: int mAction> = 5;

        virtualinvoke r1.<android.view.View: boolean callDragEventHandler(android.view.DragEvent)>(r2);

     label2:
        r2.<android.view.DragEvent: int mAction> = i0;

        r2.<android.view.DragEvent: float mX> = f0;

        r2.<android.view.DragEvent: float mY> = f1;

        r2.<android.view.DragEvent: android.content.ClipData mClipData> = r3;

     label3:
        r0.<android.view.ViewRootImpl: android.view.View mCurrentDragView> = r1;

        return;
    }

    public void setIsAmbientMode(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        r0.<android.view.ViewRootImpl: boolean mIsAmbientMode> = z0;

        return;
    }

    void setLayoutParams(android.view.WindowManager$LayoutParams, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, z1, $z2;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28;
        android.view.WindowManager$LayoutParams $r1, $r3, $r5, $r7, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r17, $r18, $r20, $r21, $r22, $r24, $r26, $r28, $r30, $r32, r36, r37, r38, $r39;
        android.graphics.Rect $r2, $r4, $r6, $r8, $r19, $r23, $r25, $r27, $r29;
        java.lang.String $r16, $r31;
        android.view.View$AttachInfo $r33, $r34;
        java.lang.Throwable $r35;

        r0 := @this: android.view.ViewRootImpl;

        r36 := @parameter0: android.view.WindowManager$LayoutParams;

        z0 := @parameter1: boolean;

        entermonitor r0;

     label01:
        $r1 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r2 = $r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        i0 = $r2.<android.graphics.Rect: int left>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r4 = $r3.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        i1 = $r4.<android.graphics.Rect: int top>;

        $r5 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r6 = $r5.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        i2 = $r6.<android.graphics.Rect: int right>;

        $r7 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r8 = $r7.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        i3 = $r8.<android.graphics.Rect: int bottom>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i4 = $r9.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $r10 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        z1 = $r10.<android.view.WindowManager$LayoutParams: boolean hasManualSurfaceInsets>;

        $i7 = r36.<android.view.WindowManager$LayoutParams: int flags>;

        r0.<android.view.ViewRootImpl: int mClientWindowLayoutFlags> = $i7;

        $r11 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i5 = $r11.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $r12 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i8 = $r12.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        r36.<android.view.WindowManager$LayoutParams: int systemUiVisibility> = $i8;

        $r13 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i9 = $r13.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility>;

        r36.<android.view.WindowManager$LayoutParams: int subtreeSystemUiVisibility> = $i9;

        $r14 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i6 = virtualinvoke $r14.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r36);

     label02:
        $i10 = 524288 & i6;

        if $i10 == 0 goto label04;

     label03:
        $r34 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r34.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

     label04:
        $i11 = i6 & 1;

        if $i11 == 0 goto label06;

     label05:
        $r33 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r33.<android.view.View$AttachInfo: boolean mNeedsUpdateLightCenter> = 1;

     label06:
        $r15 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r16 = $r15.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        if $r16 != null goto label07;

        $r32 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r31 = r0.<android.view.ViewRootImpl: java.lang.String mBasePackageName>;

        $r32.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = $r31;

     label07:
        r37 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i13 = r37.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i12 = i5 & 128;

        $i14 = $i13 | $i12;

        r37.<android.view.WindowManager$LayoutParams: int privateFlags> = $i14;

        r38 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i15 = r38.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i16 = $i15 | 33554432;

        r38.<android.view.WindowManager$LayoutParams: int privateFlags> = $i16;

        $r17 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $z2 = $r17.<android.view.WindowManager$LayoutParams: boolean preservePreviousSurfaceInsets>;

        if $z2 == 0 goto label09;

        $r28 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r29 = $r28.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        virtualinvoke $r29.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

        $r30 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r30.<android.view.WindowManager$LayoutParams: boolean hasManualSurfaceInsets> = z1;

     label08:
        goto label11;

     label09:
        $r18 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r19 = $r18.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i17 = $r19.<android.graphics.Rect: int left>;

        if $i17 != i0 goto label10;

        $r22 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r23 = $r22.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i26 = $r23.<android.graphics.Rect: int top>;

        if $i26 != i1 goto label10;

        $r24 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r25 = $r24.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i27 = $r25.<android.graphics.Rect: int right>;

        if $i27 != i2 goto label10;

        $r26 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r27 = $r26.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i28 = $r27.<android.graphics.Rect: int bottom>;

        if $i28 == i3 goto label11;

     label10:
        r0.<android.view.ViewRootImpl: boolean mNeedsRendererSetup> = 1;

     label11:
        $r39 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        specialinvoke r0.<android.view.ViewRootImpl: void applyKeepScreenOnFlag(android.view.WindowManager$LayoutParams)>($r39);

     label12:
        if z0 == 0 goto label14;

     label13:
        $i25 = r36.<android.view.WindowManager$LayoutParams: int softInputMode>;

        r0.<android.view.ViewRootImpl: int mSoftInputMode> = $i25;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

     label14:
        $i18 = r36.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i19 = $i18 & 240;

        if $i19 != 0 goto label15;

        $r21 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r20 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i21 = $r20.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i23 = $i21 & -241;

        $i22 = i4 & 240;

        $i24 = $i23 | $i22;

        $r21.<android.view.WindowManager$LayoutParams: int softInputMode> = $i24;

     label15:
        $i20 = i6 & 512;

        if $i20 == 0 goto label17;

     label16:
        virtualinvoke r0.<android.view.ViewRootImpl: void requestFitSystemWindows()>();

     label17:
        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        exitmonitor r0;

     label18:
        return;

     label19:
        $r35 := @caughtexception;

     label20:
        exitmonitor r0;

     label21:
        throw $r35;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    void setLocalDragState(java.lang.Object)
    {
        android.view.ViewRootImpl r0;
        java.lang.Object r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.lang.Object;

        r0.<android.view.ViewRootImpl: java.lang.Object mLocalDragState> = r1;

        return;
    }

    public void setOnContentApplyWindowInsetsListener(android.view.Window$OnContentApplyWindowInsetsListener)
    {
        android.view.ViewRootImpl r0;
        android.view.Window$OnContentApplyWindowInsetsListener r1;
        android.view.View$AttachInfo $r2;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.Window$OnContentApplyWindowInsetsListener;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r2.<android.view.View$AttachInfo: android.view.Window$OnContentApplyWindowInsetsListener mContentOnApplyWindowInsetsListener> = r1;

        $z0 = r0.<android.view.ViewRootImpl: boolean mFirst>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestFitSystemWindows()>();

     label1:
        return;
    }

    public void setPausedForTransition(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        r0.<android.view.ViewRootImpl: boolean mPausedForTransition> = z0;

        return;
    }

    public void setReportNextDraw()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        specialinvoke r0.<android.view.ViewRootImpl: void reportNextDraw()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void invalidate()>();

        return;
    }

    public void setRootSystemGestureExclusionRects(java.util.List)
    {
        android.view.ViewRootImpl r0;
        java.util.List r1;
        android.view.GestureExclusionTracker $r2;
        android.view.ViewRootImpl$ViewRootHandler $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: java.util.List;

        $r2 = r0.<android.view.ViewRootImpl: android.view.GestureExclusionTracker mGestureExclusionTracker>;

        virtualinvoke $r2.<android.view.GestureExclusionTracker: void setRootSystemGestureExclusionRects(java.util.List)>(r1);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(32);

        return;
    }

    void setUseBLASTSyncTransaction()
    {
        android.view.ViewRootImpl r0;

        r0 := @this: android.view.ViewRootImpl;

        r0.<android.view.ViewRootImpl: boolean mNextDrawUseBLASTSyncTransaction> = 1;

        return;
    }

    public void setView(android.view.View, android.view.WindowManager$LayoutParams, android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1, r3;
        android.view.WindowManager$LayoutParams r2;
        int $i0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.WindowManager$LayoutParams;

        r3 := @parameter2: android.view.View;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setView(android.view.View,android.view.WindowManager$LayoutParams,android.view.View,int)>(r1, r2, r3, $i0);

        return;
    }

    public void setView(android.view.View, android.view.WindowManager$LayoutParams, android.view.View, int)
    {
        android.view.ViewRootImpl r0;
        android.view.IWindowSession r1;
        android.view.ViewRootImpl$W r2, $r86, $r91, $r99, $r106, $r111, $r119;
        int i0, i1, i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, i25, i26, $i27;
        android.view.WindowManager$LayoutParams r3, $r16, $r26, $r27, $r28, $r30, $r94, $r102, $r114, $r140, r156, r158, r159, r160;
        android.graphics.Rect r4, r5, $r35, $r127, r168;
        android.view.DisplayCutout$ParcelableWrapper r6, $r38, $r39;
        android.view.InsetsState r7, $r41;
        android.view.View $r8, $r14, $r58, $r59, r155, r157;
        android.view.Display $r9, $r18, $r31;
        android.view.View$AttachInfo $r10, $r22, $r29, $r32, $r33, $r34, $r37, $r40, $r68, $r126, $r129, $r134, r165, r166, r170, $r209;
        android.view.ViewRootImpl$ViewRootHandler $r11;
        android.hardware.display.DisplayManager$DisplayListener $r12;
        android.hardware.display.DisplayManager $r13;
        android.view.FallbackEventHandler $r15, $r69, $r210;
        java.lang.String $r17, $r48, $r51, $r54, $r57, $r74, $r79, $r84, $r89, $r97, $r104, $r109, $r117, $r122, $r125, $r139;
        boolean $z0, $z1, $z3, $z5, $z6, $z7, $z8, $z9, z10, z11, z12, z13, z14, z15, z16;
        android.view.DisplayAdjustments $r19;
        android.content.res.CompatibilityInfo$Translator $r20, $r23, $r24, $r25, $r36, $r128, $r131, $r133, $r164;
        com.android.internal.view.BaseSurfaceHolder $r21, $r138;
        android.view.InsetsController $r42, $r44, $r61;
        android.view.InsetsSourceControl[] $r43, r169;
        android.view.accessibility.AccessibilityManager $r45;
        com.android.internal.view.RootViewSurfaceTaker $r60, $r66, $r136;
        android.view.ViewRootImpl$AccessibilityInteractionConnectionManager $r62;
        android.view.InputQueue$Callback $r63, $r65, $r67;
        android.os.Looper $r64;
        android.os.IBinder $r71, $r76, $r81, $r130;
        android.view.Surface $r132;
        android.view.ThreadedRenderer $r135;
        android.view.SurfaceHolder$Callback2 $r137, r161;
        java.lang.Throwable $r141, $r143, $r144, $r145, $r146, $r147, $r148, $r149, $r150, $r154, r206, r207;
        android.os.RemoteException $r142, $r151, $r152, $r153, r208;
        android.view.ViewRootImpl$TakenSurfaceHolder r162;
        android.content.res.CompatibilityInfo r163;
        float f0;
        android.view.InputChannel r167;
        java.lang.RuntimeException r171, r211;
        android.view.WindowManager$BadTokenException r172, r174, r176, r178, r180, r182, r188;
        java.lang.StringBuilder r173, r175, r177, r179, r181, r183, r185, r187, r189, r190, r197, r200, r203, r204;
        android.view.WindowManager$InvalidDisplayException r184, r186;
        android.view.InputQueue r191;
        android.view.ViewRootImpl$WindowInputEventReceiver r192;
        java.lang.CharSequence r193;
        android.view.ViewRootImpl$SyntheticInputStage r194;
        android.view.ViewRootImpl$ViewPostImeInputStage r195;
        android.view.ViewRootImpl$NativePostImeInputStage r196;
        android.view.ViewRootImpl$EarlyPostImeInputStage r198;
        android.view.ViewRootImpl$ImeInputStage r199;
        android.view.ViewRootImpl$ViewPreImeInputStage r201;
        android.view.ViewRootImpl$NativePreImeInputStage r202;
        android.view.PendingInsetsController r205;

        r0 := @this: android.view.ViewRootImpl;

        r155 := @parameter0: android.view.View;

        r156 := @parameter1: android.view.WindowManager$LayoutParams;

        r157 := @parameter2: android.view.View;

        i25 := @parameter3: int;

        entermonitor r0;

     label001:
        $r8 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r8 != null goto label099;

        r0.<android.view.ViewRootImpl: android.view.View mView> = r155;

        $r10 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r9 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $i3 = virtualinvoke $r9.<android.view.Display: int getState()>();

        $r10.<android.view.View$AttachInfo: int mDisplayState> = $i3;

        $r13 = r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager mDisplayManager>;

        $r12 = r0.<android.view.ViewRootImpl: android.hardware.display.DisplayManager$DisplayListener mDisplayListener>;

        $r11 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r13.<android.hardware.display.DisplayManager: void registerDisplayListener(android.hardware.display.DisplayManager$DisplayListener,android.os.Handler)>($r12, $r11);

        $r14 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $i4 = virtualinvoke $r14.<android.view.View: int getRawLayoutDirection()>();

        r0.<android.view.ViewRootImpl: int mViewLayoutDirectionInitial> = $i4;

        $r15 = r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler>;

        interfaceinvoke $r15.<android.view.FallbackEventHandler: void setView(android.view.View)>(r155);

        r158 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

     label002:
        virtualinvoke r158.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r156);

        $r16 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r17 = $r16.<android.view.WindowManager$LayoutParams: java.lang.String packageName>;

        if $r17 != null goto label003;

        $r140 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $r139 = r0.<android.view.ViewRootImpl: java.lang.String mBasePackageName>;

        $r140.<android.view.WindowManager$LayoutParams: java.lang.String packageName> = $r139;

     label003:
        r159 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i6 = r159.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i7 = $i6 | 33554432;

        r159.<android.view.WindowManager$LayoutParams: int privateFlags> = $i7;

        r160 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

     label004:
        specialinvoke r0.<android.view.ViewRootImpl: void setTag()>();

        $i8 = r160.<android.view.WindowManager$LayoutParams: int flags>;

        r0.<android.view.ViewRootImpl: int mClientWindowLayoutFlags> = $i8;

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        $z0 = r155 instanceof com.android.internal.view.RootViewSurfaceTaker;

        if $z0 == 0 goto label007;

        $r136 = (com.android.internal.view.RootViewSurfaceTaker) r155;

        r161 = interfaceinvoke $r136.<com.android.internal.view.RootViewSurfaceTaker: android.view.SurfaceHolder$Callback2 willYouTakeTheSurface()>();

        r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback> = r161;

     label005:
        if r161 == null goto label007;

     label006:
        r162 = new android.view.ViewRootImpl$TakenSurfaceHolder;

        specialinvoke r162.<android.view.ViewRootImpl$TakenSurfaceHolder: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder> = r162;

        virtualinvoke r162.<com.android.internal.view.BaseSurfaceHolder: void setFormat(int)>(0);

        $r138 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        $r137 = r0.<android.view.ViewRootImpl: android.view.SurfaceHolder$Callback2 mSurfaceHolderCallback>;

        virtualinvoke $r138.<com.android.internal.view.BaseSurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>($r137);

     label007:
        $z9 = r160.<android.view.WindowManager$LayoutParams: boolean hasManualSurfaceInsets>;

        if $z9 != 0 goto label008;

        virtualinvoke r160.<android.view.WindowManager$LayoutParams: void setSurfaceInsets(android.view.View,boolean,boolean)>(r155, 0, 1);

     label008:
        $r18 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $r19 = virtualinvoke $r18.<android.view.Display: android.view.DisplayAdjustments getDisplayAdjustments()>();

        r163 = virtualinvoke $r19.<android.view.DisplayAdjustments: android.content.res.CompatibilityInfo getCompatibilityInfo()>();

        $r20 = virtualinvoke r163.<android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo$Translator getTranslator()>();

        r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator> = $r20;

        $r21 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r21 != null goto label012;

        specialinvoke r0.<android.view.ViewRootImpl: void enableHardwareAcceleration(android.view.WindowManager$LayoutParams)>(r160);

        $r134 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r135 = $r134.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if $r135 == null goto label010;

     label009:
        z10 = 1;

        goto label011;

     label010:
        z10 = 0;

     label011:
        $z8 = r0.<android.view.ViewRootImpl: boolean mUseMTRenderer>;

        if $z8 == z10 goto label012;

        specialinvoke r0.<android.view.ViewRootImpl: void endDragResizing()>();

        r0.<android.view.ViewRootImpl: boolean mUseMTRenderer> = z10;

     label012:
        $r164 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r164 == null goto label014;

        $r132 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $r131 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r132.<android.view.Surface: void setCompatibilityTranslator(android.content.res.CompatibilityInfo$Translator)>($r131);

        virtualinvoke r160.<android.view.WindowManager$LayoutParams: void backup()>();

        $r133 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        virtualinvoke $r133.<android.content.res.CompatibilityInfo$Translator: void translateWindowLayout(android.view.WindowManager$LayoutParams)>(r160);

     label013:
        z11 = 1;

        goto label015;

     label014:
        z11 = 0;

     label015:
        $z1 = virtualinvoke r163.<android.content.res.CompatibilityInfo: boolean supportsScreen()>();

        if $z1 != 0 goto label016;

        $i23 = r160.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i24 = $i23 | 128;

        r160.<android.view.WindowManager$LayoutParams: int privateFlags> = $i24;

        r0.<android.view.ViewRootImpl: boolean mLastInCompatMode> = 1;

     label016:
        $i9 = r160.<android.view.WindowManager$LayoutParams: int softInputMode>;

        r0.<android.view.ViewRootImpl: int mSoftInputMode> = $i9;

        r0.<android.view.ViewRootImpl: boolean mWindowAttributesChanged> = 1;

        $r22 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r22.<android.view.View$AttachInfo: android.view.View mRootView> = r155;

        r165 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r23 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r23 == null goto label018;

     label017:
        z12 = 1;

        goto label019;

     label018:
        z12 = 0;

     label019:
        r165.<android.view.View$AttachInfo: boolean mScalingRequired> = z12;

        r166 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r24 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r24 != null goto label021;

     label020:
        f0 = 1.0F;

        goto label022;

     label021:
        $r25 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        f0 = $r25.<android.content.res.CompatibilityInfo$Translator: float applicationScale>;

     label022:
        r166.<android.view.View$AttachInfo: float mApplicationScale> = f0;

     label023:
        if r157 == null goto label025;

     label024:
        $r129 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r130 = virtualinvoke r157.<android.view.View: android.os.IBinder getApplicationWindowToken()>();

        $r129.<android.view.View$AttachInfo: android.os.IBinder mPanelParentWindowToken> = $r130;

     label025:
        r0.<android.view.ViewRootImpl: boolean mAdded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

        $r26 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i10 = $r26.<android.view.WindowManager$LayoutParams: int inputFeatures>;

        $i11 = $i10 & 2;

        if $i11 != 0 goto label027;

        r167 = new android.view.InputChannel;

        specialinvoke r167.<android.view.InputChannel: void <init>()>();

     label026:
        goto label028;

     label027:
        r167 = null;

     label028:
        $r27 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i12 = $r27.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i13 = $i12 & 16384;

        if $i13 == 0 goto label030;

     label029:
        z13 = 1;

        goto label031;

     label030:
        z13 = 0;

     label031:
        r0.<android.view.ViewRootImpl: boolean mForceDecorViewVisibility> = z13;

     label032:
        $r28 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i14 = $r28.<android.view.WindowManager$LayoutParams: int type>;

        r0.<android.view.ViewRootImpl: int mOrigWindowType> = $i14;

        $r29 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r29.<android.view.View$AttachInfo: boolean mRecomputeGlobalAttributes> = 1;

        specialinvoke r0.<android.view.ViewRootImpl: boolean collectViewAttributes()>();

        $r30 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        staticinvoke <android.view.ViewRootImpl: void adjustLayoutParamsForCompatibility(android.view.WindowManager$LayoutParams)>($r30);

        r1 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        i0 = r0.<android.view.ViewRootImpl: int mSeq>;

        r3 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i1 = virtualinvoke r0.<android.view.ViewRootImpl: int getHostVisibility()>();

        $r31 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        i2 = virtualinvoke $r31.<android.view.Display: int getDisplayId()>();

        r4 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTmpFrame>;

        $r32 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r168 = $r32.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        $r33 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r5 = $r33.<android.view.View$AttachInfo: android.graphics.Rect mStableInsets>;

        $r34 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r6 = $r34.<android.view.View$AttachInfo: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

     label033:
        r7 = r0.<android.view.ViewRootImpl: android.view.InsetsState mTempInsets>;

     label034:
        r169 = r0.<android.view.ViewRootImpl: android.view.InsetsSourceControl[] mTempControls>;

     label035:
        i26 = interfaceinvoke r1.<android.view.IWindowSession: int addToDisplayAsUser(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])>(r2, i0, r3, i1, i2, i25, r4, r168, r5, r6, r167, r7, r169);

        $r35 = r0.<android.view.ViewRootImpl: android.graphics.Rect mTmpFrame>;

        specialinvoke r0.<android.view.ViewRootImpl: void setFrame(android.graphics.Rect)>($r35);

     label036:
        if z11 == 0 goto label038;

     label037:
        virtualinvoke r160.<android.view.WindowManager$LayoutParams: void restore()>();

     label038:
        $r36 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        if $r36 == null goto label039;

        $r128 = r0.<android.view.ViewRootImpl: android.content.res.CompatibilityInfo$Translator mTranslator>;

        $r126 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r127 = $r126.<android.view.View$AttachInfo: android.graphics.Rect mContentInsets>;

        virtualinvoke $r128.<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>($r127);

     label039:
        $r39 = r0.<android.view.ViewRootImpl: android.view.DisplayCutout$ParcelableWrapper mPendingDisplayCutout>;

        $r37 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r38 = $r37.<android.view.View$AttachInfo: android.view.DisplayCutout$ParcelableWrapper mDisplayCutout>;

        virtualinvoke $r39.<android.view.DisplayCutout$ParcelableWrapper: void set(android.view.DisplayCutout$ParcelableWrapper)>($r38);

        r170 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

     label040:
        $i15 = i26 & 4;

        if $i15 == 0 goto label041;

        z14 = 1;

        goto label042;

     label041:
        z14 = 0;

     label042:
        r170.<android.view.View$AttachInfo: boolean mAlwaysConsumeSystemBars> = z14;

        $r40 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $z3 = $r40.<android.view.View$AttachInfo: boolean mAlwaysConsumeSystemBars>;

        r0.<android.view.ViewRootImpl: boolean mPendingAlwaysConsumeSystemBars> = $z3;

        $r42 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        $r41 = r0.<android.view.ViewRootImpl: android.view.InsetsState mTempInsets>;

        virtualinvoke $r42.<android.view.InsetsController: boolean onStateChanged(android.view.InsetsState)>($r41);

        $r44 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        $r43 = r0.<android.view.ViewRootImpl: android.view.InsetsSourceControl[] mTempControls>;

        virtualinvoke $r44.<android.view.InsetsController: void onControlsChanged(android.view.InsetsSourceControl[])>($r43);

     label043:
        if i26 >= 0 goto label060;

     label044:
        $r68 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r68.<android.view.View$AttachInfo: android.view.View mRootView> = null;

        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        $r69 = r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler>;

        interfaceinvoke $r69.<android.view.FallbackEventHandler: void setView(android.view.View)>(null);

        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleTraversals()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

     label045:
        tableswitch(i26)
        {
            case -11: goto label058;
            case -10: goto label057;
            case -9: goto label056;
            case -8: goto label055;
            case -7: goto label054;
            case -6: goto label052;
            case -5: goto label051;
            case -4: goto label050;
            case -3: goto label049;
            case -2: goto label048;
            case -1: goto label048;
            default: goto label046;
        };

     label046:
        r171 = new java.lang.RuntimeException;

     label047:
        goto label059;

     label048:
        r172 = new android.view.WindowManager$BadTokenException;

        r173 = new java.lang.StringBuilder;

        specialinvoke r173.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- token ");

        $r71 = r160.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        virtualinvoke r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r71);

        virtualinvoke r173.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid; is your activity running?");

        $r74 = virtualinvoke r173.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r172.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r74);

        throw r172;

     label049:
        r174 = new android.view.WindowManager$BadTokenException;

        r175 = new java.lang.StringBuilder;

        specialinvoke r175.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- token ");

        $r76 = r160.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        virtualinvoke r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r76);

        virtualinvoke r175.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not for an application");

        $r79 = virtualinvoke r175.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r174.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r79);

        throw r174;

     label050:
        r176 = new android.view.WindowManager$BadTokenException;

        r177 = new java.lang.StringBuilder;

        specialinvoke r177.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r177.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- app for token ");

        $r81 = r160.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        virtualinvoke r177.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r81);

        virtualinvoke r177.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is exiting");

        $r84 = virtualinvoke r177.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r176.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r84);

        throw r176;

     label051:
        r178 = new android.view.WindowManager$BadTokenException;

        r179 = new java.lang.StringBuilder;

        specialinvoke r179.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- window ");

        $r86 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        virtualinvoke r179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r86);

        virtualinvoke r179.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has already been added");

        $r89 = virtualinvoke r179.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r178.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r89);

        throw r178;

     label052:
        exitmonitor r0;

     label053:
        return;

     label054:
        r180 = new android.view.WindowManager$BadTokenException;

        r181 = new java.lang.StringBuilder;

        specialinvoke r181.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window ");

        $r91 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        virtualinvoke r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r91);

        virtualinvoke r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- another window of type ");

        $r94 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i20 = $r94.<android.view.WindowManager$LayoutParams: int type>;

        virtualinvoke r181.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i20);

        virtualinvoke r181.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already exists");

        $r97 = virtualinvoke r181.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r180.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r97);

        throw r180;

     label055:
        r182 = new android.view.WindowManager$BadTokenException;

        r183 = new java.lang.StringBuilder;

        specialinvoke r183.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r183.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window ");

        $r99 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        virtualinvoke r183.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r99);

        virtualinvoke r183.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- permission denied for window type ");

        $r102 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i21 = $r102.<android.view.WindowManager$LayoutParams: int type>;

        virtualinvoke r183.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i21);

        $r104 = virtualinvoke r183.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r182.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r104);

        throw r182;

     label056:
        r184 = new android.view.WindowManager$InvalidDisplayException;

        r185 = new java.lang.StringBuilder;

        specialinvoke r185.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window ");

        $r106 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        virtualinvoke r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r106);

        virtualinvoke r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- the specified display can not be found");

        $r109 = virtualinvoke r185.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r184.<android.view.WindowManager$InvalidDisplayException: void <init>(java.lang.String)>($r109);

        throw r184;

     label057:
        r186 = new android.view.WindowManager$InvalidDisplayException;

        r187 = new java.lang.StringBuilder;

        specialinvoke r187.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window ");

        $r111 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        virtualinvoke r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r111);

        virtualinvoke r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- the specified window type ");

        $r114 = r0.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        $i22 = $r114.<android.view.WindowManager$LayoutParams: int type>;

        virtualinvoke r187.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i22);

        virtualinvoke r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid");

        $r117 = virtualinvoke r187.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r186.<android.view.WindowManager$InvalidDisplayException: void <init>(java.lang.String)>($r117);

        throw r186;

     label058:
        r188 = new android.view.WindowManager$BadTokenException;

        r189 = new java.lang.StringBuilder;

        specialinvoke r189.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r189.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add Window ");

        $r119 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        virtualinvoke r189.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r119);

        virtualinvoke r189.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- requested userId is not valid");

        $r122 = virtualinvoke r189.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r188.<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>($r122);

        throw r188;

     label059:
        r190 = new java.lang.StringBuilder;

        specialinvoke r190.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r190.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to add window -- unknown error code ");

        virtualinvoke r190.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i26);

        $r125 = virtualinvoke r190.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r171.<java.lang.RuntimeException: void <init>(java.lang.String)>($r125);

        throw r171;

     label060:
        $i16 = i26 & 8;

        if $i16 == 0 goto label062;

     label061:
        r0.<android.view.ViewRootImpl: boolean mUseBLASTAdapter> = 1;

     label062:
        $i17 = i26 & 4;

        if $i17 == 0 goto label064;

     label063:
        r0.<android.view.ViewRootImpl: boolean mEnableTripleBuffering> = 1;

     label064:
        $z5 = r155 instanceof com.android.internal.view.RootViewSurfaceTaker;

        if $z5 == 0 goto label065;

        $r66 = (com.android.internal.view.RootViewSurfaceTaker) r155;

        $r67 = interfaceinvoke $r66.<com.android.internal.view.RootViewSurfaceTaker: android.view.InputQueue$Callback willYouTakeTheInputQueue()>();

        r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback> = $r67;

     label065:
        if r167 == null goto label068;

     label066:
        $r63 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        if $r63 == null goto label067;

        r191 = new android.view.InputQueue;

        specialinvoke r191.<android.view.InputQueue: void <init>()>();

        r0.<android.view.ViewRootImpl: android.view.InputQueue mInputQueue> = r191;

        $r65 = r0.<android.view.ViewRootImpl: android.view.InputQueue$Callback mInputQueueCallback>;

        interfaceinvoke $r65.<android.view.InputQueue$Callback: void onInputQueueCreated(android.view.InputQueue)>(r191);

     label067:
        r192 = new android.view.ViewRootImpl$WindowInputEventReceiver;

        $r64 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        specialinvoke r192.<android.view.ViewRootImpl$WindowInputEventReceiver: void <init>(android.view.ViewRootImpl,android.view.InputChannel,android.os.Looper)>(r0, r167, $r64);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$WindowInputEventReceiver mInputEventReceiver> = r192;

     label068:
        virtualinvoke r155.<android.view.View: void assignParent(android.view.ViewParent)>(r0);

     label069:
        $i27 = i26 & 1;

        if $i27 == 0 goto label070;

        z15 = 1;

        goto label071;

     label070:
        z15 = 0;

     label071:
        r0.<android.view.ViewRootImpl: boolean mAddedTouchMode> = z15;

     label072:
        $i18 = i26 & 2;

        if $i18 == 0 goto label073;

        z16 = 1;

        goto label074;

     label073:
        z16 = 0;

     label074:
        r0.<android.view.ViewRootImpl: boolean mAppVisible> = z16;

        $r45 = r0.<android.view.ViewRootImpl: android.view.accessibility.AccessibilityManager mAccessibilityManager>;

        $z6 = virtualinvoke $r45.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z6 == 0 goto label075;

        $r62 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionConnectionManager mAccessibilityInteractionConnectionManager>;

        virtualinvoke $r62.<android.view.ViewRootImpl$AccessibilityInteractionConnectionManager: void ensureConnection()>();

     label075:
        $i19 = virtualinvoke r155.<android.view.View: int getImportantForAccessibility()>();

        if $i19 != 0 goto label076;

        virtualinvoke r155.<android.view.View: void setImportantForAccessibility(int)>(1);

     label076:
        r193 = virtualinvoke r160.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        r194 = new android.view.ViewRootImpl$SyntheticInputStage;

        specialinvoke r194.<android.view.ViewRootImpl$SyntheticInputStage: void <init>(android.view.ViewRootImpl)>(r0);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mSyntheticInputStage> = r194;

        r195 = new android.view.ViewRootImpl$ViewPostImeInputStage;

        specialinvoke r195.<android.view.ViewRootImpl$ViewPostImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage)>(r0, r194);

        r196 = new android.view.ViewRootImpl$NativePostImeInputStage;

        r197 = new java.lang.StringBuilder;

        specialinvoke r197.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:native-post-ime:");

        virtualinvoke r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r193);

        $r48 = virtualinvoke r197.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r196.<android.view.ViewRootImpl$NativePostImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage,java.lang.String)>(r0, r195, $r48);

        r198 = new android.view.ViewRootImpl$EarlyPostImeInputStage;

        specialinvoke r198.<android.view.ViewRootImpl$EarlyPostImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage)>(r0, r196);

        r199 = new android.view.ViewRootImpl$ImeInputStage;

        r200 = new java.lang.StringBuilder;

        specialinvoke r200.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r200.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:ime:");

        virtualinvoke r200.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r193);

        $r51 = virtualinvoke r200.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r199.<android.view.ViewRootImpl$ImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage,java.lang.String)>(r0, r198, $r51);

        r201 = new android.view.ViewRootImpl$ViewPreImeInputStage;

        specialinvoke r201.<android.view.ViewRootImpl$ViewPreImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage)>(r0, r199);

        r202 = new android.view.ViewRootImpl$NativePreImeInputStage;

        r203 = new java.lang.StringBuilder;

        specialinvoke r203.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:native-pre-ime:");

        virtualinvoke r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r193);

        $r54 = virtualinvoke r203.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r202.<android.view.ViewRootImpl$NativePreImeInputStage: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$InputStage,java.lang.String)>(r0, r201, $r54);

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstInputStage> = r202;

        r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$InputStage mFirstPostImeInputStage> = r198;

        r204 = new java.lang.StringBuilder;

        specialinvoke r204.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("aq:pending:");

        virtualinvoke r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r193);

        $r57 = virtualinvoke r204.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<android.view.ViewRootImpl: java.lang.String mPendingInputEventQueueLengthCounterName> = $r57;

        $r58 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $z7 = $r58 instanceof com.android.internal.view.RootViewSurfaceTaker;

        if $z7 == 0 goto label099;

        $r59 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        $r60 = (com.android.internal.view.RootViewSurfaceTaker) $r59;

        r205 = interfaceinvoke $r60.<com.android.internal.view.RootViewSurfaceTaker: android.view.PendingInsetsController providePendingInsetsController()>();

     label077:
        if r205 == null goto label099;

     label078:
        $r61 = r0.<android.view.ViewRootImpl: android.view.InsetsController mInsetsController>;

        virtualinvoke r205.<android.view.PendingInsetsController: void replayAndAttach(android.view.InsetsController)>($r61);

     label079:
        goto label099;

     label080:
        $r147 := @caughtexception;

        r206 = $r147;

        goto label102;

     label081:
        $r143 := @caughtexception;

        r207 = $r143;

        goto label095;

     label082:
        $r152 := @caughtexception;

        r208 = $r152;

        goto label091;

     label083:
        $r149 := @caughtexception;

        r207 = $r149;

        goto label086;

     label084:
        $r142 := @caughtexception;

        r208 = $r142;

        goto label088;

     label085:
        $r141 := @caughtexception;

        r207 = $r141;

     label086:
        goto label095;

     label087:
        $r151 := @caughtexception;

        r208 = $r151;

     label088:
        goto label091;

     label089:
        $r150 := @caughtexception;

        r207 = $r150;

        goto label095;

     label090:
        $r153 := @caughtexception;

        r208 = $r153;

     label091:
        r0.<android.view.ViewRootImpl: boolean mAdded> = 0;

        r0.<android.view.ViewRootImpl: android.view.View mView> = null;

        $r209 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r209.<android.view.View$AttachInfo: android.view.View mRootView> = null;

     label092:
        $r210 = r0.<android.view.ViewRootImpl: android.view.FallbackEventHandler mFallbackEventHandler>;

        interfaceinvoke $r210.<android.view.FallbackEventHandler: void setView(android.view.View)>(null);

        virtualinvoke r0.<android.view.ViewRootImpl: void unscheduleTraversals()>();

        virtualinvoke r0.<android.view.ViewRootImpl: void setAccessibilityFocus(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>(null, null);

        r211 = new java.lang.RuntimeException;

        specialinvoke r211.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Adding window failed", r208);

        throw r211;

     label093:
        $r146 := @caughtexception;

        r207 = $r146;

        goto label095;

     label094:
        $r154 := @caughtexception;

        r207 = $r154;

     label095:
        if z11 == 0 goto label097;

     label096:
        virtualinvoke r160.<android.view.WindowManager$LayoutParams: void restore()>();

     label097:
        throw r207;

     label098:
        $r145 := @caughtexception;

        r206 = $r145;

        goto label102;

     label099:
        exitmonitor r0;

     label100:
        return;

     label101:
        $r144 := @caughtexception;

        r206 = $r144;

     label102:
        exitmonitor r0;

     label103:
        throw r206;

     label104:
        $r148 := @caughtexception;

        r206 = $r148;

        goto label102;

        catch java.lang.Throwable from label001 to label002 with label101;
        catch java.lang.Throwable from label002 to label003 with label098;
        catch java.lang.Throwable from label003 to label004 with label098;
        catch java.lang.Throwable from label004 to label005 with label104;
        catch java.lang.Throwable from label006 to label007 with label104;
        catch java.lang.Throwable from label007 to label008 with label104;
        catch java.lang.Throwable from label008 to label009 with label104;
        catch java.lang.Throwable from label011 to label012 with label104;
        catch java.lang.Throwable from label012 to label013 with label104;
        catch java.lang.Throwable from label015 to label016 with label104;
        catch java.lang.Throwable from label016 to label017 with label104;
        catch java.lang.Throwable from label019 to label020 with label104;
        catch java.lang.Throwable from label021 to label022 with label104;
        catch java.lang.Throwable from label022 to label023 with label104;
        catch java.lang.Throwable from label024 to label025 with label104;
        catch java.lang.Throwable from label025 to label026 with label104;
        catch java.lang.Throwable from label028 to label029 with label104;
        catch java.lang.Throwable from label031 to label032 with label104;
        catch android.os.RemoteException from label032 to label033 with label090;
        catch java.lang.Throwable from label032 to label033 with label089;
        catch android.os.RemoteException from label033 to label034 with label087;
        catch java.lang.Throwable from label033 to label034 with label085;
        catch android.os.RemoteException from label034 to label035 with label084;
        catch java.lang.Throwable from label034 to label035 with label083;
        catch android.os.RemoteException from label035 to label036 with label082;
        catch java.lang.Throwable from label035 to label036 with label081;
        catch java.lang.Throwable from label037 to label038 with label080;
        catch java.lang.Throwable from label038 to label039 with label080;
        catch java.lang.Throwable from label039 to label040 with label080;
        catch java.lang.Throwable from label042 to label043 with label080;
        catch java.lang.Throwable from label044 to label045 with label080;
        catch java.lang.Throwable from label046 to label047 with label080;
        catch java.lang.Throwable from label048 to label049 with label080;
        catch java.lang.Throwable from label049 to label050 with label080;
        catch java.lang.Throwable from label050 to label051 with label080;
        catch java.lang.Throwable from label051 to label052 with label080;
        catch java.lang.Throwable from label052 to label053 with label080;
        catch java.lang.Throwable from label054 to label055 with label080;
        catch java.lang.Throwable from label055 to label056 with label080;
        catch java.lang.Throwable from label056 to label057 with label080;
        catch java.lang.Throwable from label057 to label058 with label080;
        catch java.lang.Throwable from label058 to label059 with label080;
        catch java.lang.Throwable from label059 to label060 with label080;
        catch java.lang.Throwable from label061 to label062 with label080;
        catch java.lang.Throwable from label063 to label064 with label080;
        catch java.lang.Throwable from label064 to label065 with label104;
        catch java.lang.Throwable from label066 to label067 with label104;
        catch java.lang.Throwable from label067 to label068 with label104;
        catch java.lang.Throwable from label068 to label069 with label104;
        catch java.lang.Throwable from label071 to label072 with label104;
        catch java.lang.Throwable from label074 to label075 with label104;
        catch java.lang.Throwable from label075 to label076 with label104;
        catch java.lang.Throwable from label076 to label077 with label104;
        catch java.lang.Throwable from label078 to label079 with label104;
        catch java.lang.Throwable from label091 to label092 with label094;
        catch java.lang.Throwable from label092 to label093 with label093;
        catch java.lang.Throwable from label096 to label097 with label104;
        catch java.lang.Throwable from label097 to label098 with label104;
        catch java.lang.Throwable from label099 to label100 with label104;
        catch java.lang.Throwable from label102 to label103 with label104;
    }

    void setWindowStopped(boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, $z1, $z2, $z3, $z4;
        android.view.ThreadedRenderer r1;
        android.view.View$AttachInfo $r2;
        android.view.Surface $r3;
        com.android.internal.view.BaseSurfaceHolder $r4;
        android.view.View $r5;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<android.view.ViewRootImpl: void checkThread()>();

        $z1 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z1 == z0 goto label6;

        r0.<android.view.ViewRootImpl: boolean mStopped> = z0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        r1 = $r2.<android.view.View$AttachInfo: android.view.ThreadedRenderer mThreadedRenderer>;

        if r1 == null goto label1;

        $z4 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        virtualinvoke r1.<android.view.ThreadedRenderer: void setStopped(boolean)>($z4);

     label1:
        $z2 = r0.<android.view.ViewRootImpl: boolean mStopped>;

        if $z2 != 0 goto label2;

        r0.<android.view.ViewRootImpl: boolean mNewSurfaceNeeded> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleTraversals()>();

        goto label6;

     label2:
        if r1 == null goto label3;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke r1.<android.view.ThreadedRenderer: void destroyHardwareResources(android.view.View)>($r5);

     label3:
        $r3 = r0.<android.view.ViewRootImpl: android.view.Surface mSurface>;

        $z3 = virtualinvoke $r3.<android.view.Surface: boolean isValid()>();

        if $z3 == 0 goto label5;

        $r4 = r0.<android.view.ViewRootImpl: com.android.internal.view.BaseSurfaceHolder mSurfaceHolder>;

        if $r4 == null goto label4;

        specialinvoke r0.<android.view.ViewRootImpl: void notifyHolderSurfaceDestroyed()>();

     label4:
        specialinvoke r0.<android.view.ViewRootImpl: void notifySurfaceDestroyed()>();

     label5:
        specialinvoke r0.<android.view.ViewRootImpl: void destroySurface()>();

     label6:
        virtualinvoke r0.<android.view.ViewRootImpl: void scheduleConsumeBatchedInputImmediately()>();

        return;
    }

    public boolean showContextMenuForChild(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        return 0;
    }

    public boolean showContextMenuForChild(android.view.View, float, float)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        float f0, f1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        return 0;
    }

    public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ActionMode$Callback r2;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ActionMode$Callback;

        return null;
    }

    public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback, int)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.ActionMode$Callback r2;
        int i0;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ActionMode$Callback;

        i0 := @parameter2: int;

        return null;
    }

    public void synthesizeInputEvent(android.view.InputEvent)
    {
        android.view.ViewRootImpl r0;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2;
        android.view.InputEvent r3;
        android.os.Message r4;

        r0 := @this: android.view.ViewRootImpl;

        r3 := @parameter0: android.view.InputEvent;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r4 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(24, r3);

        virtualinvoke r4.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r4);

        return;
    }

    void systemGestureExclusionChanged()
    {
        android.view.ViewRootImpl r0;
        android.view.GestureExclusionTracker $r1;
        android.view.View $r2;
        android.view.ViewRootImpl$W $r3;
        android.view.IWindowSession $r4;
        android.view.View$AttachInfo $r5;
        android.view.ViewTreeObserver $r6;
        android.os.RemoteException $r7;
        java.lang.RuntimeException $r8;
        java.util.List r9;

        r0 := @this: android.view.ViewRootImpl;

        $r1 = r0.<android.view.ViewRootImpl: android.view.GestureExclusionTracker mGestureExclusionTracker>;

        r9 = virtualinvoke $r1.<android.view.GestureExclusionTracker: java.util.List computeChangedRects()>();

        if r9 == null goto label4;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if $r2 == null goto label4;

     label1:
        $r4 = r0.<android.view.ViewRootImpl: android.view.IWindowSession mWindowSession>;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        interfaceinvoke $r4.<android.view.IWindowSession: void reportSystemGestureExclusionChanged(android.view.IWindow,java.util.List)>($r3, r9);

     label2:
        $r5 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r6 = $r5.<android.view.View$AttachInfo: android.view.ViewTreeObserver mTreeObserver>;

        virtualinvoke $r6.<android.view.ViewTreeObserver: void dispatchOnSystemGestureExclusionRectsChanged(java.util.List)>(r9);

        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = virtualinvoke $r7.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r8;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    void transformMatrixToGlobal(android.graphics.Matrix)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Matrix r1;
        android.view.View$AttachInfo $r2, $r3;
        int $i0, $i1;
        float $f0, $f1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Matrix;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r2.<android.view.View$AttachInfo: int mWindowLeft>;

        $f1 = (float) $i0;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i1 = $r3.<android.view.View$AttachInfo: int mWindowTop>;

        $f0 = (float) $i1;

        virtualinvoke r1.<android.graphics.Matrix: boolean preTranslate(float,float)>($f1, $f0);

        return;
    }

    void transformMatrixToLocal(android.graphics.Matrix)
    {
        android.view.ViewRootImpl r0;
        android.graphics.Matrix r1;
        android.view.View$AttachInfo $r2, $r3;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.graphics.Matrix;

        $r2 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i0 = $r2.<android.view.View$AttachInfo: int mWindowLeft>;

        $i1 = neg $i0;

        $f1 = (float) $i1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $i2 = $r3.<android.view.View$AttachInfo: int mWindowTop>;

        $i3 = neg $i2;

        $f0 = (float) $i3;

        virtualinvoke r1.<android.graphics.Matrix: boolean postTranslate(float,float)>($f1, $f0);

        return;
    }

    void unscheduleConsumeBatchedInput()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ConsumeBatchedInputRunnable $r1;
        android.view.Choreographer $r2;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled>;

        if $z0 == 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mConsumeBatchedInputScheduled> = 0;

        $r2 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ConsumeBatchedInputRunnable mConsumedBatchedInputRunnable>;

        virtualinvoke $r2.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(0, $r1, null);

     label1:
        return;
    }

    void unscheduleTraversals()
    {
        android.view.ViewRootImpl r0;
        boolean $z0;
        android.view.ViewRootImpl$ViewRootHandler $r1;
        android.os.Looper $r2;
        android.os.MessageQueue $r3;
        int $i0;
        android.view.ViewRootImpl$TraversalRunnable $r4;
        android.view.Choreographer $r5;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mTraversalScheduled>;

        if $z0 == 0 goto label1;

        r0.<android.view.ViewRootImpl: boolean mTraversalScheduled> = 0;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: android.os.Looper getLooper()>();

        $r3 = virtualinvoke $r2.<android.os.Looper: android.os.MessageQueue getQueue()>();

        $i0 = r0.<android.view.ViewRootImpl: int mTraversalBarrier>;

        virtualinvoke $r3.<android.os.MessageQueue: void removeSyncBarrier(int)>($i0);

        $r5 = r0.<android.view.ViewRootImpl: android.view.Choreographer mChoreographer>;

        $r4 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$TraversalRunnable mTraversalRunnable>;

        virtualinvoke $r5.<android.view.Choreographer: void removeCallbacks(int,java.lang.Runnable,java.lang.Object)>(3, $r4, null);

     label1:
        return;
    }

    void updateCompatSysUiVisibility(int, boolean, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, z1, z3;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i14, $i15;
        android.view.ViewRootImpl$SystemUiVisibilityInfo r1;
        android.view.ViewRootImpl$ViewRootHandler r2, $r3;
        android.os.Message $r4;
        byte b13;

        r0 := @this: android.view.ViewRootImpl;

        i12 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z3 = 1;

        if i12 == 0 goto label01;

        if i12 != 1 goto label02;

     label01:
        i0 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if i0 == 2 goto label03;

     label02:
        return;

     label03:
        r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$SystemUiVisibilityInfo mCompatibleVisibilityInfo>;

        if i12 != 0 goto label04;

        b13 = 4;

        goto label05;

     label04:
        b13 = 2;

     label05:
        $i2 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility>;

        $i3 = $i2 & b13;

        if $i3 != 0 goto label06;

        goto label07;

     label06:
        z3 = 0;

     label07:
        if z0 == 0 goto label08;

        $i8 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility>;

        $i9 = $i8 & b13;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility> = $i9;

        if z3 != 0 goto label09;

        if z1 == 0 goto label09;

        $i10 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges>;

        $i11 = $i10 | b13;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges> = $i11;

        goto label09;

     label08:
        $i4 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility>;

        $i5 = $i4 | b13;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility> = $i5;

        $i6 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges>;

        $i7 = $i6 & b13;

        r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int localChanges> = $i7;

     label09:
        $i14 = r0.<android.view.ViewRootImpl: int mDispatchedSystemUiVisibility>;

        $i15 = r1.<android.view.ViewRootImpl$SystemUiVisibilityInfo: int globalVisibility>;

        if $i14 == $i15 goto label10;

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(17);

        r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        $r4 = virtualinvoke r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(17, r1);

        virtualinvoke r2.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>($r4);

     label10:
        return;
    }

    public void updateConfiguration(int)
    {
        android.view.ViewRootImpl r0;
        android.content.res.Resources r1;
        int i0, $i1, $i2, $i3, i4, i5;
        boolean $z0;
        android.view.Display $r2;
        android.content.res.Configuration $r3, $r4, $r6, r8;
        android.view.View $r5, r7, $r9;

        r0 := @this: android.view.ViewRootImpl;

        i4 := @parameter0: int;

        r7 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        if r7 != null goto label1;

        return;

     label1:
        r1 = virtualinvoke r7.<android.view.View: android.content.res.Resources getResources()>();

        r8 = virtualinvoke r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        if i4 == -1 goto label2;

        virtualinvoke r0.<android.view.ViewRootImpl: void onMovedToDisplay(int,android.content.res.Configuration)>(i4, r8);

     label2:
        $z0 = r0.<android.view.ViewRootImpl: boolean mForceNextConfigUpdate>;

        if $z0 != 0 goto label3;

        $r6 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfigurationFromResources>;

        $i3 = virtualinvoke $r6.<android.content.res.Configuration: int diff(android.content.res.Configuration)>(r8);

        if $i3 == 0 goto label5;

     label3:
        $r2 = r0.<android.view.ViewRootImpl: android.view.Display mDisplay>;

        $i1 = virtualinvoke $r2.<android.view.Display: int getDisplayId()>();

        specialinvoke r0.<android.view.ViewRootImpl: void updateInternalDisplay(int,android.content.res.Resources)>($i1, r1);

        $r3 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfigurationFromResources>;

        i0 = virtualinvoke $r3.<android.content.res.Configuration: int getLayoutDirection()>();

        i5 = virtualinvoke r8.<android.content.res.Configuration: int getLayoutDirection()>();

        $r4 = r0.<android.view.ViewRootImpl: android.content.res.Configuration mLastConfigurationFromResources>;

        virtualinvoke $r4.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>(r8);

        if i0 == i5 goto label4;

        $i2 = r0.<android.view.ViewRootImpl: int mViewLayoutDirectionInitial>;

        if $i2 != 2 goto label4;

        $r5 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r5.<android.view.View: void setLayoutDirection(int)>(i5);

     label4:
        $r9 = r0.<android.view.ViewRootImpl: android.view.View mView>;

        virtualinvoke $r9.<android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)>(r8);

        r0.<android.view.ViewRootImpl: boolean mForceNextWindowRelayout> = 1;

        virtualinvoke r0.<android.view.ViewRootImpl: void requestLayout()>();

     label5:
        specialinvoke r0.<android.view.ViewRootImpl: void updateForceDarkMode()>();

        return;
    }

    void updateLocationInParentDisplay(int, int)
    {
        android.view.ViewRootImpl r0;
        int i0, i1;
        android.view.View$AttachInfo r1, $r3;
        android.graphics.Point $r2, $r4;
        boolean $z0;

        r0 := @this: android.view.ViewRootImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        if r1 == null goto label1;

        $r2 = r1.<android.view.View$AttachInfo: android.graphics.Point mLocationInParentDisplay>;

        $z0 = virtualinvoke $r2.<android.graphics.Point: boolean equals(int,int)>(i0, i1);

        if $z0 != 0 goto label1;

        $r3 = r0.<android.view.ViewRootImpl: android.view.View$AttachInfo mAttachInfo>;

        $r4 = $r3.<android.view.View$AttachInfo: android.graphics.Point mLocationInParentDisplay>;

        virtualinvoke $r4.<android.graphics.Point: void set(int,int)>(i0, i1);

     label1:
        return;
    }

    public void updatePointerIcon(float, float)
    {
        android.view.ViewRootImpl r0;
        float f0, f1;
        android.view.ViewRootImpl$ViewRootHandler $r1, $r2, $r3;
        long $l0;
        android.view.MotionEvent r4;
        android.os.Message r5;

        r0 := @this: android.view.ViewRootImpl;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: void removeMessages(int)>(27);

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r4 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>(0L, $l0, 7, f0, f1, 0);

        $r2 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        r5 = virtualinvoke $r2.<android.view.ViewRootImpl$ViewRootHandler: android.os.Message obtainMessage(int,java.lang.Object)>(27, r4);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r5);

        return;
    }

    void updateSystemGestureExclusionRectsForView(android.view.View)
    {
        android.view.ViewRootImpl r0;
        android.view.View r1;
        android.view.GestureExclusionTracker $r2;
        android.view.ViewRootImpl$ViewRootHandler $r3;

        r0 := @this: android.view.ViewRootImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.ViewRootImpl: android.view.GestureExclusionTracker mGestureExclusionTracker>;

        virtualinvoke $r2.<android.view.GestureExclusionTracker: void updateRectsForView(android.view.View)>(r1);

        $r3 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r3.<android.view.ViewRootImpl$ViewRootHandler: boolean sendEmptyMessage(int)>(32);

        return;
    }

    boolean useBLAST()
    {
        android.view.ViewRootImpl r0;
        boolean $z0, $z1, z2;

        r0 := @this: android.view.ViewRootImpl;

        $z0 = r0.<android.view.ViewRootImpl: boolean mUseBLASTAdapter>;

        if $z0 == 0 goto label1;

        $z1 = r0.<android.view.ViewRootImpl: boolean mForceDisableBLAST>;

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public void windowFocusChanged(boolean, boolean)
    {
        android.view.ViewRootImpl r0;
        boolean z0, z1;
        android.view.ViewRootImpl$ViewRootHandler $r1;
        java.lang.Throwable $r2;
        android.os.Message r3;

        r0 := @this: android.view.ViewRootImpl;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        entermonitor r0;

     label1:
        r0.<android.view.ViewRootImpl: boolean mWindowFocusChanged> = 1;

        r0.<android.view.ViewRootImpl: boolean mUpcomingWindowFocus> = z0;

        r0.<android.view.ViewRootImpl: boolean mUpcomingInTouchMode> = z1;

        exitmonitor r0;

     label2:
        r3 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        r3.<android.os.Message: int what> = 6;

        $r1 = r0.<android.view.ViewRootImpl: android.view.ViewRootImpl$ViewRootHandler mHandler>;

        virtualinvoke $r1.<android.view.ViewRootImpl$ViewRootHandler: boolean sendMessage(android.os.Message)>(r3);

        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
