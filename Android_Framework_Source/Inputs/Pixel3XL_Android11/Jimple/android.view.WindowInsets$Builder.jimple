public final class android.view.WindowInsets$Builder extends java.lang.Object
{
    private boolean mAlwaysConsumeSystemBars;
    private android.view.DisplayCutout mDisplayCutout;
    private boolean mIsRound;
    private boolean mStableInsetsConsumed;
    private boolean mSystemInsetsConsumed;
    private final android.graphics.Insets[] mTypeInsetsMap;
    private final android.graphics.Insets[] mTypeMaxInsetsMap;
    private final boolean[] mTypeVisibilityMap;

    public void <init>()
    {
        android.view.WindowInsets$Builder r0;
        android.graphics.Insets[] $r1, $r2;
        boolean[] $r3;

        r0 := @this: android.view.WindowInsets$Builder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.WindowInsets$Builder: boolean mSystemInsetsConsumed> = 1;

        r0.<android.view.WindowInsets$Builder: boolean mStableInsetsConsumed> = 1;

        $r1 = newarray (android.graphics.Insets)[9];

        r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeInsetsMap> = $r1;

        $r2 = newarray (android.graphics.Insets)[9];

        r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeMaxInsetsMap> = $r2;

        $r3 = newarray (boolean)[9];

        r0.<android.view.WindowInsets$Builder: boolean[] mTypeVisibilityMap> = $r3;

        return;
    }

    public void <init>(android.view.WindowInsets)
    {
        android.view.WindowInsets$Builder r0;
        android.view.WindowInsets r1;
        android.graphics.Insets[] $r2, $r4, $r5, $r7;
        java.lang.Object $r3, $r6, $r9;
        boolean[] $r8, $r10;
        boolean $z0, $z1, $z2, $z3;
        android.view.DisplayCutout $r11;

        r0 := @this: android.view.WindowInsets$Builder;

        r1 := @parameter0: android.view.WindowInsets;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.WindowInsets$Builder: boolean mSystemInsetsConsumed> = 1;

        r0.<android.view.WindowInsets$Builder: boolean mStableInsetsConsumed> = 1;

        $r2 = staticinvoke <android.view.WindowInsets: android.graphics.Insets[] access$000(android.view.WindowInsets)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Object clone()>();

        $r4 = (android.graphics.Insets[]) $r3;

        r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeInsetsMap> = $r4;

        $r5 = staticinvoke <android.view.WindowInsets: android.graphics.Insets[] access$100(android.view.WindowInsets)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Object clone()>();

        $r7 = (android.graphics.Insets[]) $r6;

        r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeMaxInsetsMap> = $r7;

        $r8 = staticinvoke <android.view.WindowInsets: boolean[] access$200(android.view.WindowInsets)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Object clone()>();

        $r10 = (boolean[]) $r9;

        r0.<android.view.WindowInsets$Builder: boolean[] mTypeVisibilityMap> = $r10;

        $z0 = staticinvoke <android.view.WindowInsets: boolean access$300(android.view.WindowInsets)>(r1);

        r0.<android.view.WindowInsets$Builder: boolean mSystemInsetsConsumed> = $z0;

        $z1 = staticinvoke <android.view.WindowInsets: boolean access$400(android.view.WindowInsets)>(r1);

        r0.<android.view.WindowInsets$Builder: boolean mStableInsetsConsumed> = $z1;

        $r11 = staticinvoke <android.view.WindowInsets: android.view.DisplayCutout access$500(android.view.WindowInsets)>(r1);

        r0.<android.view.WindowInsets$Builder: android.view.DisplayCutout mDisplayCutout> = $r11;

        $z2 = staticinvoke <android.view.WindowInsets: boolean access$600(android.view.WindowInsets)>(r1);

        r0.<android.view.WindowInsets$Builder: boolean mIsRound> = $z2;

        $z3 = staticinvoke <android.view.WindowInsets: boolean access$700(android.view.WindowInsets)>(r1);

        r0.<android.view.WindowInsets$Builder: boolean mAlwaysConsumeSystemBars> = $z3;

        return;
    }

    public android.view.WindowInsets build()
    {
        android.view.WindowInsets$Builder r0;
        boolean $z0, $z1, $z2, $z3;
        android.view.WindowInsets $r1;
        boolean[] $r2;
        android.view.DisplayCutout $r3;
        int $i0;
        android.graphics.Insets[] r4, r5;

        r0 := @this: android.view.WindowInsets$Builder;

        $z0 = r0.<android.view.WindowInsets$Builder: boolean mSystemInsetsConsumed>;

        if $z0 == 0 goto label1;

        r4 = null;

        goto label2;

     label1:
        r4 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeInsetsMap>;

     label2:
        $z1 = r0.<android.view.WindowInsets$Builder: boolean mStableInsetsConsumed>;

        if $z1 == 0 goto label3;

        r5 = null;

        goto label4;

     label3:
        r5 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeMaxInsetsMap>;

     label4:
        $r1 = new android.view.WindowInsets;

        $r2 = r0.<android.view.WindowInsets$Builder: boolean[] mTypeVisibilityMap>;

        $z2 = r0.<android.view.WindowInsets$Builder: boolean mIsRound>;

        $z3 = r0.<android.view.WindowInsets$Builder: boolean mAlwaysConsumeSystemBars>;

        $r3 = r0.<android.view.WindowInsets$Builder: android.view.DisplayCutout mDisplayCutout>;

        $i0 = staticinvoke <android.view.WindowInsets$Type: int systemBars()>();

        specialinvoke $r1.<android.view.WindowInsets: void <init>(android.graphics.Insets[],android.graphics.Insets[],boolean[],boolean,boolean,android.view.DisplayCutout,int,boolean)>(r4, r5, $r2, $z2, $z3, $r3, $i0, 0);

        return $r1;
    }

    public android.view.WindowInsets$Builder setAlwaysConsumeSystemBars(boolean)
    {
        android.view.WindowInsets$Builder r0;
        boolean z0;

        r0 := @this: android.view.WindowInsets$Builder;

        z0 := @parameter0: boolean;

        r0.<android.view.WindowInsets$Builder: boolean mAlwaysConsumeSystemBars> = z0;

        return r0;
    }

    public android.view.WindowInsets$Builder setDisplayCutout(android.view.DisplayCutout)
    {
        android.view.WindowInsets$Builder r0;
        int i0;
        boolean $z0;
        android.view.DisplayCutout $r1, r6;
        android.graphics.Rect $r2;
        android.graphics.Insets[] $r3, $r4;
        boolean[] $r5;
        android.graphics.Insets r7;

        r0 := @this: android.view.WindowInsets$Builder;

        r6 := @parameter0: android.view.DisplayCutout;

        if r6 == null goto label1;

        goto label2;

     label1:
        r6 = <android.view.DisplayCutout: android.view.DisplayCutout NO_CUTOUT>;

     label2:
        r0.<android.view.WindowInsets$Builder: android.view.DisplayCutout mDisplayCutout> = r6;

        $z0 = virtualinvoke r6.<android.view.DisplayCutout: boolean isEmpty()>();

        if $z0 != 0 goto label3;

        $r1 = r0.<android.view.WindowInsets$Builder: android.view.DisplayCutout mDisplayCutout>;

        $r2 = virtualinvoke $r1.<android.view.DisplayCutout: android.graphics.Rect getSafeInsets()>();

        r7 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(android.graphics.Rect)>($r2);

        i0 = staticinvoke <android.view.WindowInsets$Type: int indexOf(int)>(128);

        $r3 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeInsetsMap>;

        $r3[i0] = r7;

        $r4 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeMaxInsetsMap>;

        $r4[i0] = r7;

        $r5 = r0.<android.view.WindowInsets$Builder: boolean[] mTypeVisibilityMap>;

        $r5[i0] = 1;

     label3:
        return r0;
    }

    public android.view.WindowInsets$Builder setInsets(int, android.graphics.Insets)
    {
        android.view.WindowInsets$Builder r0;
        int i0;
        android.graphics.Insets r1;
        android.graphics.Insets[] $r3;

        r0 := @this: android.view.WindowInsets$Builder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Insets;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeInsetsMap>;

        staticinvoke <android.view.WindowInsets: void access$800(android.graphics.Insets[],int,android.graphics.Insets)>($r3, i0, r1);

        r0.<android.view.WindowInsets$Builder: boolean mSystemInsetsConsumed> = 0;

        return r0;
    }

    public android.view.WindowInsets$Builder setInsetsIgnoringVisibility(int, android.graphics.Insets) throws java.lang.IllegalArgumentException
    {
        android.view.WindowInsets$Builder r0;
        int i0;
        android.graphics.Insets r1;
        java.lang.IllegalArgumentException $r2;
        android.graphics.Insets[] $r4;

        r0 := @this: android.view.WindowInsets$Builder;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.Insets;

        if i0 == 8 goto label1;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeMaxInsetsMap>;

        staticinvoke <android.view.WindowInsets: void access$800(android.graphics.Insets[],int,android.graphics.Insets)>($r4, i0, r1);

        r0.<android.view.WindowInsets$Builder: boolean mStableInsetsConsumed> = 0;

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Maximum inset not available for IME");

        throw $r2;
    }

    public android.view.WindowInsets$Builder setMandatorySystemGestureInsets(android.graphics.Insets)
    {
        android.view.WindowInsets$Builder r0;
        android.graphics.Insets r1;
        android.graphics.Insets[] $r2;

        r0 := @this: android.view.WindowInsets$Builder;

        r1 := @parameter0: android.graphics.Insets;

        $r2 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeInsetsMap>;

        staticinvoke <android.view.WindowInsets: void access$800(android.graphics.Insets[],int,android.graphics.Insets)>($r2, 32, r1);

        return r0;
    }

    public android.view.WindowInsets$Builder setRound(boolean)
    {
        android.view.WindowInsets$Builder r0;
        boolean z0;

        r0 := @this: android.view.WindowInsets$Builder;

        z0 := @parameter0: boolean;

        r0.<android.view.WindowInsets$Builder: boolean mIsRound> = z0;

        return r0;
    }

    public android.view.WindowInsets$Builder setStableInsets(android.graphics.Insets)
    {
        android.view.WindowInsets$Builder r0;
        android.graphics.Insets r1;
        android.graphics.Insets[] $r3;
        android.graphics.Rect $r4;

        r0 := @this: android.view.WindowInsets$Builder;

        r1 := @parameter0: android.graphics.Insets;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeMaxInsetsMap>;

        $r4 = virtualinvoke r1.<android.graphics.Insets: android.graphics.Rect toRect()>();

        staticinvoke <android.view.WindowInsets: void assignCompatInsets(android.graphics.Insets[],android.graphics.Rect)>($r3, $r4);

        r0.<android.view.WindowInsets$Builder: boolean mStableInsetsConsumed> = 0;

        return r0;
    }

    public android.view.WindowInsets$Builder setSystemGestureInsets(android.graphics.Insets)
    {
        android.view.WindowInsets$Builder r0;
        android.graphics.Insets r1;
        android.graphics.Insets[] $r2;

        r0 := @this: android.view.WindowInsets$Builder;

        r1 := @parameter0: android.graphics.Insets;

        $r2 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeInsetsMap>;

        staticinvoke <android.view.WindowInsets: void access$800(android.graphics.Insets[],int,android.graphics.Insets)>($r2, 16, r1);

        return r0;
    }

    public android.view.WindowInsets$Builder setSystemWindowInsets(android.graphics.Insets)
    {
        android.view.WindowInsets$Builder r0;
        android.graphics.Insets r1;
        android.graphics.Insets[] $r3;
        android.graphics.Rect $r4;

        r0 := @this: android.view.WindowInsets$Builder;

        r1 := @parameter0: android.graphics.Insets;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeInsetsMap>;

        $r4 = virtualinvoke r1.<android.graphics.Insets: android.graphics.Rect toRect()>();

        staticinvoke <android.view.WindowInsets: void assignCompatInsets(android.graphics.Insets[],android.graphics.Rect)>($r3, $r4);

        r0.<android.view.WindowInsets$Builder: boolean mSystemInsetsConsumed> = 0;

        return r0;
    }

    public android.view.WindowInsets$Builder setTappableElementInsets(android.graphics.Insets)
    {
        android.view.WindowInsets$Builder r0;
        android.graphics.Insets r1;
        android.graphics.Insets[] $r2;

        r0 := @this: android.view.WindowInsets$Builder;

        r1 := @parameter0: android.graphics.Insets;

        $r2 = r0.<android.view.WindowInsets$Builder: android.graphics.Insets[] mTypeInsetsMap>;

        staticinvoke <android.view.WindowInsets: void access$800(android.graphics.Insets[],int,android.graphics.Insets)>($r2, 64, r1);

        return r0;
    }

    public android.view.WindowInsets$Builder setVisible(int, boolean)
    {
        android.view.WindowInsets$Builder r0;
        int i0, $i1, $i2, i3;
        boolean z0;
        boolean[] $r1;

        r0 := @this: android.view.WindowInsets$Builder;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i3 = 1;

     label1:
        if i3 > 256 goto label4;

        $i1 = i0 & i3;

        if $i1 != 0 goto label2;

        goto label3;

     label2:
        $r1 = r0.<android.view.WindowInsets$Builder: boolean[] mTypeVisibilityMap>;

        $i2 = staticinvoke <android.view.WindowInsets$Type: int indexOf(int)>(i3);

        $r1[$i2] = z0;

     label3:
        i3 = i3 << 1;

        goto label1;

     label4:
        return r0;
    }
}
