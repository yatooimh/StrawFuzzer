public final class android.view.WindowInsets extends java.lang.Object
{
    public static final android.view.WindowInsets CONSUMED;
    private final boolean mAlwaysConsumeSystemBars;
    private final boolean mCompatIgnoreVisibility;
    private final int mCompatInsetsTypes;
    private final android.view.DisplayCutout mDisplayCutout;
    private final boolean mDisplayCutoutConsumed;
    private final boolean mIsRound;
    private final boolean mStableInsetsConsumed;
    private final boolean mSystemWindowInsetsConsumed;
    private android.graphics.Rect mTempRect;
    private final android.graphics.Insets[] mTypeInsetsMap;
    private final android.graphics.Insets[] mTypeMaxInsetsMap;
    private final boolean[] mTypeVisibilityMap;

    static void <clinit>()
    {
        android.view.WindowInsets $r0;
        android.graphics.Rect $r1;

        $r0 = new android.view.WindowInsets;

        $r1 = (android.graphics.Rect) null;

        specialinvoke $r0.<android.view.WindowInsets: void <init>(android.graphics.Rect,android.graphics.Rect,boolean,boolean,android.view.DisplayCutout)>($r1, null, 0, 0, null);

        <android.view.WindowInsets: android.view.WindowInsets CONSUMED> = $r0;

        return;
    }

    public void <init>(android.graphics.Rect)
    {
        android.view.WindowInsets r0;
        android.graphics.Rect r1;
        android.graphics.Insets[] $r2;
        boolean[] $r3;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        r1 := @parameter0: android.graphics.Rect;

        $r2 = staticinvoke <android.view.WindowInsets: android.graphics.Insets[] createCompatTypeMap(android.graphics.Rect)>(r1);

        $r3 = newarray (boolean)[9];

        $i0 = staticinvoke <android.view.WindowInsets$Type: int systemBars()>();

        specialinvoke r0.<android.view.WindowInsets: void <init>(android.graphics.Insets[],android.graphics.Insets[],boolean[],boolean,boolean,android.view.DisplayCutout,int,boolean)>($r2, null, $r3, 0, 0, null, $i0, 0);

        return;
    }

    public void <init>(android.graphics.Rect, android.graphics.Rect, boolean, boolean, android.view.DisplayCutout)
    {
        android.view.WindowInsets r0;
        android.graphics.Rect r1, r2;
        boolean z0, z1;
        android.view.DisplayCutout r3;
        android.graphics.Insets[] $r4, $r5, $r6;
        boolean[] $r7;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        r1 := @parameter0: android.graphics.Rect;

        r2 := @parameter1: android.graphics.Rect;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r3 := @parameter4: android.view.DisplayCutout;

        $r4 = staticinvoke <android.view.WindowInsets: android.graphics.Insets[] createCompatTypeMap(android.graphics.Rect)>(r1);

        $r5 = staticinvoke <android.view.WindowInsets: android.graphics.Insets[] createCompatTypeMap(android.graphics.Rect)>(r2);

        $r6 = staticinvoke <android.view.WindowInsets: android.graphics.Insets[] createCompatTypeMap(android.graphics.Rect)>(r1);

        $r7 = staticinvoke <android.view.WindowInsets: boolean[] createCompatVisibilityMap(android.graphics.Insets[])>($r6);

        $i0 = staticinvoke <android.view.WindowInsets$Type: int systemBars()>();

        specialinvoke r0.<android.view.WindowInsets: void <init>(android.graphics.Insets[],android.graphics.Insets[],boolean[],boolean,boolean,android.view.DisplayCutout,int,boolean)>($r4, $r5, $r7, z0, z1, r3, $i0, 0);

        return;
    }

    public void <init>(android.view.WindowInsets)
    {
        android.view.WindowInsets r0, r1;
        boolean z0, $z1, $z2, $z3, $z4;
        boolean[] $r2;
        android.view.DisplayCutout $r3;
        int $i0;
        android.graphics.Insets[] r4, r5;

        r0 := @this: android.view.WindowInsets;

        r1 := @parameter0: android.view.WindowInsets;

        z0 = r1.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed>;

        r4 = null;

        if z0 == 0 goto label1;

        r5 = null;

        goto label2;

     label1:
        r5 = r1.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

     label2:
        $z1 = r1.<android.view.WindowInsets: boolean mStableInsetsConsumed>;

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        r4 = r1.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

     label4:
        $r2 = r1.<android.view.WindowInsets: boolean[] mTypeVisibilityMap>;

        $z2 = r1.<android.view.WindowInsets: boolean mIsRound>;

        $z3 = r1.<android.view.WindowInsets: boolean mAlwaysConsumeSystemBars>;

        $r3 = staticinvoke <android.view.WindowInsets: android.view.DisplayCutout displayCutoutCopyConstructorArgument(android.view.WindowInsets)>(r1);

        $i0 = r1.<android.view.WindowInsets: int mCompatInsetsTypes>;

        $z4 = r1.<android.view.WindowInsets: boolean mCompatIgnoreVisibility>;

        specialinvoke r0.<android.view.WindowInsets: void <init>(android.graphics.Insets[],android.graphics.Insets[],boolean[],boolean,boolean,android.view.DisplayCutout,int,boolean)>(r5, r4, $r2, $z2, $z3, $r3, $i0, $z4);

        return;
    }

    public void <init>(android.graphics.Insets[], android.graphics.Insets[], boolean[], boolean, boolean, android.view.DisplayCutout, int, boolean)
    {
        android.view.WindowInsets r0;
        android.graphics.Insets[] r1, r5, r7, r8;
        boolean[] r2;
        boolean z0, z1, $z3, z4, z5, z6, z7;
        int i0;
        java.lang.Object $r3, $r4;
        android.view.DisplayCutout r6;

        r0 := @this: android.view.WindowInsets;

        r5 := @parameter0: android.graphics.Insets[];

        r1 := @parameter1: android.graphics.Insets[];

        r2 := @parameter2: boolean[];

        z4 := @parameter3: boolean;

        z0 := @parameter4: boolean;

        r6 := @parameter5: android.view.DisplayCutout;

        i0 := @parameter6: int;

        z1 := @parameter7: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r5 != null goto label01;

        z5 = 1;

        goto label02;

     label01:
        z5 = 0;

     label02:
        r0.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed> = z5;

        if z5 == 0 goto label03;

        r7 = newarray (android.graphics.Insets)[9];

        goto label04;

     label03:
        $r3 = virtualinvoke r5.<java.lang.Object: java.lang.Object clone()>();

        r7 = (android.graphics.Insets[]) $r3;

     label04:
        r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap> = r7;

        if r1 != null goto label05;

        z6 = 1;

        goto label06;

     label05:
        z6 = 0;

     label06:
        r0.<android.view.WindowInsets: boolean mStableInsetsConsumed> = z6;

        if z6 == 0 goto label07;

        r8 = newarray (android.graphics.Insets)[9];

        goto label08;

     label07:
        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>();

        r8 = (android.graphics.Insets[]) $r4;

     label08:
        r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap> = r8;

        r0.<android.view.WindowInsets: boolean[] mTypeVisibilityMap> = r2;

        r0.<android.view.WindowInsets: boolean mIsRound> = z4;

        r0.<android.view.WindowInsets: boolean mAlwaysConsumeSystemBars> = z0;

        r0.<android.view.WindowInsets: int mCompatInsetsTypes> = i0;

        r0.<android.view.WindowInsets: boolean mCompatIgnoreVisibility> = z1;

        if r6 != null goto label09;

        z7 = 1;

        goto label10;

     label09:
        z7 = 0;

     label10:
        r0.<android.view.WindowInsets: boolean mDisplayCutoutConsumed> = z7;

        if z7 != 0 goto label12;

        $z3 = virtualinvoke r6.<android.view.DisplayCutout: boolean isEmpty()>();

        if $z3 == 0 goto label11;

        goto label12;

     label11:
        goto label13;

     label12:
        r6 = null;

     label13:
        r0.<android.view.WindowInsets: android.view.DisplayCutout mDisplayCutout> = r6;

        return;
    }

    static android.graphics.Insets[] access$000(android.view.WindowInsets)
    {
        android.view.WindowInsets r0;
        android.graphics.Insets[] $r1;

        r0 := @parameter0: android.view.WindowInsets;

        $r1 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        return $r1;
    }

    static android.graphics.Insets[] access$100(android.view.WindowInsets)
    {
        android.view.WindowInsets r0;
        android.graphics.Insets[] $r1;

        r0 := @parameter0: android.view.WindowInsets;

        $r1 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

        return $r1;
    }

    static boolean[] access$200(android.view.WindowInsets)
    {
        android.view.WindowInsets r0;
        boolean[] $r1;

        r0 := @parameter0: android.view.WindowInsets;

        $r1 = r0.<android.view.WindowInsets: boolean[] mTypeVisibilityMap>;

        return $r1;
    }

    static boolean access$300(android.view.WindowInsets)
    {
        android.view.WindowInsets r0;
        boolean $z0;

        r0 := @parameter0: android.view.WindowInsets;

        $z0 = r0.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed>;

        return $z0;
    }

    static boolean access$400(android.view.WindowInsets)
    {
        android.view.WindowInsets r0;
        boolean $z0;

        r0 := @parameter0: android.view.WindowInsets;

        $z0 = r0.<android.view.WindowInsets: boolean mStableInsetsConsumed>;

        return $z0;
    }

    static android.view.DisplayCutout access$500(android.view.WindowInsets)
    {
        android.view.WindowInsets r0;
        android.view.DisplayCutout $r1;

        r0 := @parameter0: android.view.WindowInsets;

        $r1 = staticinvoke <android.view.WindowInsets: android.view.DisplayCutout displayCutoutCopyConstructorArgument(android.view.WindowInsets)>(r0);

        return $r1;
    }

    static boolean access$600(android.view.WindowInsets)
    {
        android.view.WindowInsets r0;
        boolean $z0;

        r0 := @parameter0: android.view.WindowInsets;

        $z0 = r0.<android.view.WindowInsets: boolean mIsRound>;

        return $z0;
    }

    static boolean access$700(android.view.WindowInsets)
    {
        android.view.WindowInsets r0;
        boolean $z0;

        r0 := @parameter0: android.view.WindowInsets;

        $z0 = r0.<android.view.WindowInsets: boolean mAlwaysConsumeSystemBars>;

        return $z0;
    }

    static void access$800(android.graphics.Insets[], int, android.graphics.Insets)
    {
        android.graphics.Insets[] r0;
        int i0;
        android.graphics.Insets r1;

        r0 := @parameter0: android.graphics.Insets[];

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Insets;

        staticinvoke <android.view.WindowInsets: void setInsets(android.graphics.Insets[],int,android.graphics.Insets)>(r0, i0, r1);

        return;
    }

    public static void assignCompatInsets(android.graphics.Insets[], android.graphics.Rect)
    {
        android.graphics.Insets[] r0;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Insets $r2, $r3;

        r0 := @parameter0: android.graphics.Insets[];

        r1 := @parameter1: android.graphics.Rect;

        $i0 = staticinvoke <android.view.WindowInsets$Type: int indexOf(int)>(1);

        $i1 = r1.<android.graphics.Rect: int top>;

        $r2 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>(0, $i1, 0, 0);

        r0[$i0] = $r2;

        $i2 = staticinvoke <android.view.WindowInsets$Type: int indexOf(int)>(2);

        $i5 = r1.<android.graphics.Rect: int left>;

        $i4 = r1.<android.graphics.Rect: int right>;

        $i3 = r1.<android.graphics.Rect: int bottom>;

        $r3 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>($i5, 0, $i4, $i3);

        r0[$i2] = $r3;

        return;
    }

    private static android.graphics.Insets[] createCompatTypeMap(android.graphics.Rect)
    {
        android.graphics.Rect r0;
        android.graphics.Insets[] r1;

        r0 := @parameter0: android.graphics.Rect;

        if r0 != null goto label1;

        return null;

     label1:
        r1 = newarray (android.graphics.Insets)[9];

        staticinvoke <android.view.WindowInsets: void assignCompatInsets(android.graphics.Insets[],android.graphics.Rect)>(r1, r0);

        return r1;
    }

    private static boolean[] createCompatVisibilityMap(android.graphics.Insets[])
    {
        android.graphics.Insets[] r0;
        boolean[] r1;
        int i0, i1;
        android.graphics.Insets $r2, $r3;
        boolean $z0;

        r0 := @parameter0: android.graphics.Insets[];

        r1 = newarray (boolean)[9];

        if r0 != null goto label1;

        return r1;

     label1:
        i1 = 1;

     label2:
        if i1 > 256 goto label4;

        i0 = staticinvoke <android.view.WindowInsets$Type: int indexOf(int)>(i1);

        $r3 = <android.graphics.Insets: android.graphics.Insets NONE>;

        $r2 = r0[i0];

        $z0 = virtualinvoke $r3.<android.graphics.Insets: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label3;

        r1[i0] = 1;

     label3:
        i1 = i1 << 1;

        goto label2;

     label4:
        return r1;
    }

    private static android.view.DisplayCutout displayCutoutCopyConstructorArgument(android.view.WindowInsets)
    {
        boolean $z0;
        android.view.DisplayCutout $r0, r2;
        android.view.WindowInsets r1;

        r1 := @parameter0: android.view.WindowInsets;

        $z0 = r1.<android.view.WindowInsets: boolean mDisplayCutoutConsumed>;

        if $z0 == 0 goto label1;

        return null;

     label1:
        r2 = r1.<android.view.WindowInsets: android.view.DisplayCutout mDisplayCutout>;

        if r2 != null goto label2;

        $r0 = <android.view.DisplayCutout: android.view.DisplayCutout NO_CUTOUT>;

        return $r0;

     label2:
        return r2;
    }

    static android.graphics.Insets getInsets(android.graphics.Insets[], int)
    {
        android.graphics.Insets[] r0;
        int i0, $i1, $i2, i3;
        android.graphics.Insets r1, r2;

        r0 := @parameter0: android.graphics.Insets[];

        i0 := @parameter1: int;

        r2 = null;

        i3 = 1;

     label1:
        if i3 > 256 goto label6;

        $i1 = i0 & i3;

        if $i1 != 0 goto label2;

        goto label5;

     label2:
        $i2 = staticinvoke <android.view.WindowInsets$Type: int indexOf(int)>(i3);

        r1 = r0[$i2];

        if r1 != null goto label3;

        goto label5;

     label3:
        if r2 != null goto label4;

        r2 = r1;

        goto label5;

     label4:
        r2 = staticinvoke <android.graphics.Insets: android.graphics.Insets max(android.graphics.Insets,android.graphics.Insets)>(r2, r1);

     label5:
        i3 = i3 << 1;

        goto label1;

     label6:
        if r2 != null goto label7;

        r2 = <android.graphics.Insets: android.graphics.Insets NONE>;

        goto label7;

     label7:
        return r2;
    }

    static android.graphics.Insets insetInsets(android.graphics.Insets, int, int, int, int)
    {
        android.graphics.Insets r0, $r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15;

        r0 := @parameter0: android.graphics.Insets;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $i8 = r0.<android.graphics.Insets: int left>;

        $i9 = $i8 - i0;

        i4 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i9);

        $i10 = r0.<android.graphics.Insets: int top>;

        $i11 = $i10 - i1;

        i5 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i11);

        $i12 = r0.<android.graphics.Insets: int right>;

        $i13 = $i12 - i2;

        i6 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i13);

        $i14 = r0.<android.graphics.Insets: int bottom>;

        $i15 = $i14 - i3;

        i7 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i15);

        if i4 != i0 goto label1;

        if i5 != i1 goto label1;

        if i6 != i2 goto label1;

        if i7 != i3 goto label1;

        return r0;

     label1:
        $r1 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>(i4, i5, i6, i7);

        return $r1;
    }

    private static android.graphics.Insets[] insetInsets(android.graphics.Insets[], int, int, int, int)
    {
        int i0, i1, i2, i3, i4;
        android.graphics.Insets r0, r1;
        java.lang.Object $r2;
        android.graphics.Insets[] r3, r4;
        boolean z0, z1;

        r3 := @parameter0: android.graphics.Insets[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        z0 = 0;

        i4 = 0;

     label1:
        if i4 >= 9 goto label5;

        r0 = r3[i4];

        if r0 != null goto label2;

        z1 = z0;

        r4 = r3;

        goto label4;

     label2:
        r1 = staticinvoke <android.view.WindowInsets: android.graphics.Insets insetInsets(android.graphics.Insets,int,int,int,int)>(r0, i0, i1, i2, i3);

        z1 = z0;

        r4 = r3;

        if r1 == r0 goto label4;

        z1 = z0;

        r4 = r3;

        if z0 != 0 goto label3;

        $r2 = virtualinvoke r3.<java.lang.Object: java.lang.Object clone()>();

        r4 = (android.graphics.Insets[]) $r2;

        z1 = 1;

     label3:
        r4[i4] = r1;

     label4:
        i4 = i4 + 1;

        z0 = z1;

        r3 = r4;

        goto label1;

     label5:
        return r3;
    }

    private static void setInsets(android.graphics.Insets[], int, android.graphics.Insets)
    {
        android.graphics.Insets[] r0;
        int i0, $i1, $i2, i3;
        android.graphics.Insets r1;

        r0 := @parameter0: android.graphics.Insets[];

        i0 := @parameter1: int;

        r1 := @parameter2: android.graphics.Insets;

        i3 = 1;

     label1:
        if i3 > 256 goto label4;

        $i1 = i0 & i3;

        if $i1 != 0 goto label2;

        goto label3;

     label2:
        $i2 = staticinvoke <android.view.WindowInsets$Type: int indexOf(int)>(i3);

        r0[$i2] = r1;

     label3:
        i3 = i3 << 1;

        goto label1;

     label4:
        return;
    }

    public android.view.WindowInsets consumeDisplayCutout()
    {
        android.view.WindowInsets r0, $r1;
        boolean $z0, $z1, $z2, $z3, $z4;
        int $i0;
        boolean[] $r2;
        android.graphics.Insets[] r3, r4;

        r0 := @this: android.view.WindowInsets;

        $z0 = r0.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed>;

        if $z0 == 0 goto label1;

        r3 = null;

        goto label2;

     label1:
        r3 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

     label2:
        $z1 = r0.<android.view.WindowInsets: boolean mStableInsetsConsumed>;

        if $z1 == 0 goto label3;

        r4 = null;

        goto label4;

     label3:
        r4 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

     label4:
        $r1 = new android.view.WindowInsets;

        $r2 = r0.<android.view.WindowInsets: boolean[] mTypeVisibilityMap>;

        $z4 = r0.<android.view.WindowInsets: boolean mIsRound>;

        $z3 = r0.<android.view.WindowInsets: boolean mAlwaysConsumeSystemBars>;

        $i0 = r0.<android.view.WindowInsets: int mCompatInsetsTypes>;

        $z2 = r0.<android.view.WindowInsets: boolean mCompatIgnoreVisibility>;

        specialinvoke $r1.<android.view.WindowInsets: void <init>(android.graphics.Insets[],android.graphics.Insets[],boolean[],boolean,boolean,android.view.DisplayCutout,int,boolean)>(r3, r4, $r2, $z4, $z3, null, $i0, $z2);

        return $r1;
    }

    public android.view.WindowInsets consumeStableInsets()
    {
        android.view.WindowInsets r0;

        r0 := @this: android.view.WindowInsets;

        return r0;
    }

    public android.view.WindowInsets consumeSystemWindowInsets()
    {
        android.view.WindowInsets r0, $r1;
        boolean[] $r2;
        boolean $z0, $z1, $z2;
        android.view.DisplayCutout $r3;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        $r1 = new android.view.WindowInsets;

        $r2 = r0.<android.view.WindowInsets: boolean[] mTypeVisibilityMap>;

        $z0 = r0.<android.view.WindowInsets: boolean mIsRound>;

        $z1 = r0.<android.view.WindowInsets: boolean mAlwaysConsumeSystemBars>;

        $r3 = staticinvoke <android.view.WindowInsets: android.view.DisplayCutout displayCutoutCopyConstructorArgument(android.view.WindowInsets)>(r0);

        $i0 = r0.<android.view.WindowInsets: int mCompatInsetsTypes>;

        $z2 = r0.<android.view.WindowInsets: boolean mCompatIgnoreVisibility>;

        specialinvoke $r1.<android.view.WindowInsets: void <init>(android.graphics.Insets[],android.graphics.Insets[],boolean[],boolean,boolean,android.view.DisplayCutout,int,boolean)>(null, null, $r2, $z0, $z1, $r3, $i0, $z2);

        return $r1;
    }

    public boolean equals(java.lang.Object)
    {
        android.view.WindowInsets r0, r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, z15;
        android.graphics.Insets[] $r1, $r2, $r3, $r4;
        boolean[] $r5, $r6;
        android.view.DisplayCutout $r7, $r8;
        java.lang.Object r9;

        r0 := @this: android.view.WindowInsets;

        r9 := @parameter0: java.lang.Object;

        z15 = 1;

        if r0 != r9 goto label1;

        return 1;

     label1:
        if r9 == null goto label5;

        $z0 = r9 instanceof android.view.WindowInsets;

        if $z0 != 0 goto label2;

        goto label5;

     label2:
        r10 = (android.view.WindowInsets) r9;

        $z2 = r0.<android.view.WindowInsets: boolean mIsRound>;

        $z1 = r10.<android.view.WindowInsets: boolean mIsRound>;

        if $z2 != $z1 goto label3;

        $z4 = r0.<android.view.WindowInsets: boolean mAlwaysConsumeSystemBars>;

        $z3 = r10.<android.view.WindowInsets: boolean mAlwaysConsumeSystemBars>;

        if $z4 != $z3 goto label3;

        $z6 = r0.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed>;

        $z5 = r10.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed>;

        if $z6 != $z5 goto label3;

        $z8 = r0.<android.view.WindowInsets: boolean mStableInsetsConsumed>;

        $z7 = r10.<android.view.WindowInsets: boolean mStableInsetsConsumed>;

        if $z8 != $z7 goto label3;

        $z10 = r0.<android.view.WindowInsets: boolean mDisplayCutoutConsumed>;

        $z9 = r10.<android.view.WindowInsets: boolean mDisplayCutoutConsumed>;

        if $z10 != $z9 goto label3;

        $r2 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        $r1 = r10.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        $z11 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r2, $r1);

        if $z11 == 0 goto label3;

        $r4 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

        $r3 = r10.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

        $z12 = staticinvoke <java.util.Arrays: boolean equals(java.lang.Object[],java.lang.Object[])>($r4, $r3);

        if $z12 == 0 goto label3;

        $r6 = r0.<android.view.WindowInsets: boolean[] mTypeVisibilityMap>;

        $r5 = r10.<android.view.WindowInsets: boolean[] mTypeVisibilityMap>;

        $z13 = staticinvoke <java.util.Arrays: boolean equals(boolean[],boolean[])>($r6, $r5);

        if $z13 == 0 goto label3;

        $r8 = r0.<android.view.WindowInsets: android.view.DisplayCutout mDisplayCutout>;

        $r7 = r10.<android.view.WindowInsets: android.view.DisplayCutout mDisplayCutout>;

        $z14 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, $r7);

        if $z14 == 0 goto label3;

        goto label4;

     label3:
        z15 = 0;

     label4:
        return z15;

     label5:
        return 0;
    }

    public android.view.DisplayCutout getDisplayCutout()
    {
        android.view.WindowInsets r0;
        android.view.DisplayCutout $r1;

        r0 := @this: android.view.WindowInsets;

        $r1 = r0.<android.view.WindowInsets: android.view.DisplayCutout mDisplayCutout>;

        return $r1;
    }

    public android.graphics.Insets getInsets(int)
    {
        android.view.WindowInsets r0;
        int i0;
        android.graphics.Insets[] $r1;
        android.graphics.Insets $r2;

        r0 := @this: android.view.WindowInsets;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        $r2 = staticinvoke <android.view.WindowInsets: android.graphics.Insets getInsets(android.graphics.Insets[],int)>($r1, i0);

        return $r2;
    }

    public android.graphics.Insets getInsetsIgnoringVisibility(int)
    {
        android.view.WindowInsets r0;
        int i0, $i1;
        java.lang.IllegalArgumentException $r1;
        android.graphics.Insets[] $r2;
        android.graphics.Insets $r3;

        r0 := @this: android.view.WindowInsets;

        i0 := @parameter0: int;

        $i1 = i0 & 8;

        if $i1 != 0 goto label1;

        $r2 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

        $r3 = staticinvoke <android.view.WindowInsets: android.graphics.Insets getInsets(android.graphics.Insets[],int)>($r2, i0);

        return $r3;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unable to query the maximum insets for IME");

        throw $r1;
    }

    public android.graphics.Insets getMandatorySystemGestureInsets()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets[] $r1;
        android.graphics.Insets $r2;

        r0 := @this: android.view.WindowInsets;

        $r1 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        $r2 = staticinvoke <android.view.WindowInsets: android.graphics.Insets getInsets(android.graphics.Insets[],int)>($r1, 32);

        return $r2;
    }

    public int getStableInsetBottom()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets $r1;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getStableInsets()>();

        $i0 = $r1.<android.graphics.Insets: int bottom>;

        return $i0;
    }

    public int getStableInsetLeft()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets $r1;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getStableInsets()>();

        $i0 = $r1.<android.graphics.Insets: int left>;

        return $i0;
    }

    public int getStableInsetRight()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets $r1;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getStableInsets()>();

        $i0 = $r1.<android.graphics.Insets: int right>;

        return $i0;
    }

    public int getStableInsetTop()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets $r1;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getStableInsets()>();

        $i0 = $r1.<android.graphics.Insets: int top>;

        return $i0;
    }

    public android.graphics.Insets getStableInsets()
    {
        android.view.WindowInsets r0;
        int $i0;
        android.graphics.Insets[] $r1;
        android.graphics.Insets $r2;

        r0 := @this: android.view.WindowInsets;

        $r1 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

        $i0 = r0.<android.view.WindowInsets: int mCompatInsetsTypes>;

        $r2 = staticinvoke <android.view.WindowInsets: android.graphics.Insets getInsets(android.graphics.Insets[],int)>($r1, $i0);

        return $r2;
    }

    public android.graphics.Insets getSystemGestureInsets()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets[] $r1;
        android.graphics.Insets $r2;

        r0 := @this: android.view.WindowInsets;

        $r1 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        $r2 = staticinvoke <android.view.WindowInsets: android.graphics.Insets getInsets(android.graphics.Insets[],int)>($r1, 16);

        return $r2;
    }

    public int getSystemWindowInsetBottom()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets $r1;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>();

        $i0 = $r1.<android.graphics.Insets: int bottom>;

        return $i0;
    }

    public int getSystemWindowInsetLeft()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets $r1;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>();

        $i0 = $r1.<android.graphics.Insets: int left>;

        return $i0;
    }

    public int getSystemWindowInsetRight()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets $r1;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>();

        $i0 = $r1.<android.graphics.Insets: int right>;

        return $i0;
    }

    public int getSystemWindowInsetTop()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets $r1;
        int $i0;

        r0 := @this: android.view.WindowInsets;

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>();

        $i0 = $r1.<android.graphics.Insets: int top>;

        return $i0;
    }

    public android.graphics.Insets getSystemWindowInsets()
    {
        android.view.WindowInsets r0;
        boolean $z0, $z1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.graphics.Insets $r1, r2, r3;

        r0 := @this: android.view.WindowInsets;

        $z0 = r0.<android.view.WindowInsets: boolean mCompatIgnoreVisibility>;

        if $z0 == 0 goto label1;

        $i5 = r0.<android.view.WindowInsets: int mCompatInsetsTypes>;

        $i6 = staticinvoke <android.view.WindowInsets$Type: int ime()>();

        $i7 = $i5 & $i6;

        r2 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>($i7);

        goto label2;

     label1:
        $i0 = r0.<android.view.WindowInsets: int mCompatInsetsTypes>;

        r2 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getInsets(int)>($i0);

     label2:
        r3 = r2;

        $i1 = r0.<android.view.WindowInsets: int mCompatInsetsTypes>;

        $i2 = staticinvoke <android.view.WindowInsets$Type: int ime()>();

        $i3 = $i1 & $i2;

        if $i3 == 0 goto label3;

        r3 = r2;

        $z1 = r0.<android.view.WindowInsets: boolean mCompatIgnoreVisibility>;

        if $z1 == 0 goto label3;

        $i4 = staticinvoke <android.view.WindowInsets$Type: int ime()>();

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getInsets(int)>($i4);

        r3 = staticinvoke <android.graphics.Insets: android.graphics.Insets max(android.graphics.Insets,android.graphics.Insets)>(r2, $r1);

     label3:
        return r3;
    }

    public android.graphics.Rect getSystemWindowInsetsAsRect()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets r1;
        android.graphics.Rect $r2, $r3, $r4, $r5;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.WindowInsets;

        $r2 = r0.<android.view.WindowInsets: android.graphics.Rect mTempRect>;

        if $r2 != null goto label1;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<android.view.WindowInsets: android.graphics.Rect mTempRect> = $r5;

     label1:
        r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>();

        $r3 = r0.<android.view.WindowInsets: android.graphics.Rect mTempRect>;

        $i3 = r1.<android.graphics.Insets: int left>;

        $i2 = r1.<android.graphics.Insets: int top>;

        $i1 = r1.<android.graphics.Insets: int right>;

        $i0 = r1.<android.graphics.Insets: int bottom>;

        virtualinvoke $r3.<android.graphics.Rect: void set(int,int,int,int)>($i3, $i2, $i1, $i0);

        $r4 = r0.<android.view.WindowInsets: android.graphics.Rect mTempRect>;

        return $r4;
    }

    public android.graphics.Insets getTappableElementInsets()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets[] $r1;
        android.graphics.Insets $r2;

        r0 := @this: android.view.WindowInsets;

        $r1 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        $r2 = staticinvoke <android.view.WindowInsets: android.graphics.Insets getInsets(android.graphics.Insets[],int)>($r1, 64);

        return $r2;
    }

    public boolean hasInsets()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets[] $r1, $r4;
        int $i0, $i1;
        android.graphics.Insets $r2, $r3, $r5, $r6;
        boolean $z0, $z1, z2;
        android.view.DisplayCutout $r7;

        r0 := @this: android.view.WindowInsets;

        $r1 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        $i0 = staticinvoke <android.view.WindowInsets$Type: int all()>();

        $r2 = staticinvoke <android.view.WindowInsets: android.graphics.Insets getInsets(android.graphics.Insets[],int)>($r1, $i0);

        $r3 = <android.graphics.Insets: android.graphics.Insets NONE>;

        $z0 = virtualinvoke $r2.<android.graphics.Insets: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label2;

        $r4 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

        $i1 = staticinvoke <android.view.WindowInsets$Type: int all()>();

        $r5 = staticinvoke <android.view.WindowInsets: android.graphics.Insets getInsets(android.graphics.Insets[],int)>($r4, $i1);

        $r6 = <android.graphics.Insets: android.graphics.Insets NONE>;

        $z1 = virtualinvoke $r5.<android.graphics.Insets: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label2;

        $r7 = r0.<android.view.WindowInsets: android.view.DisplayCutout mDisplayCutout>;

        if $r7 == null goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean hasStableInsets()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.view.WindowInsets;

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getStableInsets()>();

        $r2 = <android.graphics.Insets: android.graphics.Insets NONE>;

        $z0 = virtualinvoke $r1.<android.graphics.Insets: boolean equals(java.lang.Object)>($r2);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public boolean hasSystemWindowInsets()
    {
        android.view.WindowInsets r0;
        android.graphics.Insets $r1, $r2;
        boolean $z0, $z1;

        r0 := @this: android.view.WindowInsets;

        $r1 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>();

        $r2 = <android.graphics.Insets: android.graphics.Insets NONE>;

        $z0 = virtualinvoke $r1.<android.graphics.Insets: boolean equals(java.lang.Object)>($r2);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public int hashCode()
    {
        android.view.WindowInsets r0;
        java.lang.Object[] $r1;
        android.graphics.Insets[] $r2, $r4;
        int $i0, $i1, $i2, $i3;
        java.lang.Integer $r3, $r5, $r7;
        boolean[] $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Boolean $r8, $r10, $r11, $r12, $r13;
        android.view.DisplayCutout $r9;

        r0 := @this: android.view.WindowInsets;

        $r1 = newarray (java.lang.Object)[9];

        $r2 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        $i0 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r2);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r3;

        $r4 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

        $i1 = staticinvoke <java.util.Arrays: int hashCode(java.lang.Object[])>($r4);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r1[1] = $r5;

        $r6 = r0.<android.view.WindowInsets: boolean[] mTypeVisibilityMap>;

        $i2 = staticinvoke <java.util.Arrays: int hashCode(boolean[])>($r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r1[2] = $r7;

        $z0 = r0.<android.view.WindowInsets: boolean mIsRound>;

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        $r1[3] = $r8;

        $r9 = r0.<android.view.WindowInsets: android.view.DisplayCutout mDisplayCutout>;

        $r1[4] = $r9;

        $z1 = r0.<android.view.WindowInsets: boolean mAlwaysConsumeSystemBars>;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        $r1[5] = $r10;

        $z2 = r0.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed>;

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        $r1[6] = $r11;

        $z3 = r0.<android.view.WindowInsets: boolean mStableInsetsConsumed>;

        $r12 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        $r1[7] = $r12;

        $z4 = r0.<android.view.WindowInsets: boolean mDisplayCutoutConsumed>;

        $r13 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        $r1[8] = $r13;

        $i3 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r1);

        return $i3;
    }

    public android.view.WindowInsets inset(int, int, int, int)
    {
        android.view.WindowInsets r0, $r8;
        int i0, i1, i2, i3, $i8;
        boolean[] r1;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        android.graphics.Insets[] $r2, $r3, r4, r5;
        android.view.DisplayCutout r6, r7;

        r0 := @this: android.view.WindowInsets;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int)>(i0);

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int)>(i1);

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int)>(i2);

        staticinvoke <com.android.internal.util.Preconditions: int checkArgumentNonnegative(int)>(i3);

        $z2 = r0.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed>;

        if $z2 == 0 goto label1;

        r4 = null;

        goto label2;

     label1:
        $r2 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        r4 = staticinvoke <android.view.WindowInsets: android.graphics.Insets[] insetInsets(android.graphics.Insets[],int,int,int,int)>($r2, i0, i1, i2, i3);

     label2:
        $z3 = r0.<android.view.WindowInsets: boolean mStableInsetsConsumed>;

        if $z3 == 0 goto label3;

        r5 = null;

        goto label4;

     label3:
        $r3 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

        r5 = staticinvoke <android.view.WindowInsets: android.graphics.Insets[] insetInsets(android.graphics.Insets[],int,int,int,int)>($r3, i0, i1, i2, i3);

     label4:
        r1 = r0.<android.view.WindowInsets: boolean[] mTypeVisibilityMap>;

        z0 = r0.<android.view.WindowInsets: boolean mIsRound>;

        z1 = r0.<android.view.WindowInsets: boolean mAlwaysConsumeSystemBars>;

        $z4 = r0.<android.view.WindowInsets: boolean mDisplayCutoutConsumed>;

        if $z4 == 0 goto label5;

        r6 = null;

        goto label7;

     label5:
        r7 = r0.<android.view.WindowInsets: android.view.DisplayCutout mDisplayCutout>;

        if r7 != null goto label6;

        r6 = <android.view.DisplayCutout: android.view.DisplayCutout NO_CUTOUT>;

        goto label7;

     label6:
        r6 = virtualinvoke r7.<android.view.DisplayCutout: android.view.DisplayCutout inset(int,int,int,int)>(i0, i1, i2, i3);

     label7:
        $r8 = new android.view.WindowInsets;

        $i8 = r0.<android.view.WindowInsets: int mCompatInsetsTypes>;

        $z5 = r0.<android.view.WindowInsets: boolean mCompatIgnoreVisibility>;

        specialinvoke $r8.<android.view.WindowInsets: void <init>(android.graphics.Insets[],android.graphics.Insets[],boolean[],boolean,boolean,android.view.DisplayCutout,int,boolean)>(r4, r5, r1, z0, z1, r6, $i8, $z5);

        return $r8;
    }

    public android.view.WindowInsets inset(android.graphics.Insets)
    {
        android.view.WindowInsets r0, $r3;
        android.graphics.Insets r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.WindowInsets;

        r1 := @parameter0: android.graphics.Insets;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $i3 = r1.<android.graphics.Insets: int left>;

        $i2 = r1.<android.graphics.Insets: int top>;

        $i1 = r1.<android.graphics.Insets: int right>;

        $i0 = r1.<android.graphics.Insets: int bottom>;

        $r3 = virtualinvoke r0.<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>($i3, $i2, $i1, $i0);

        return $r3;
    }

    public android.view.WindowInsets inset(android.graphics.Rect)
    {
        android.view.WindowInsets r0, $r2;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.WindowInsets;

        r1 := @parameter0: android.graphics.Rect;

        $i3 = r1.<android.graphics.Rect: int left>;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        $r2 = virtualinvoke r0.<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>($i3, $i2, $i1, $i0);

        return $r2;
    }

    public boolean isConsumed()
    {
        android.view.WindowInsets r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: android.view.WindowInsets;

        $z0 = r0.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed>;

        if $z0 == 0 goto label1;

        $z1 = r0.<android.view.WindowInsets: boolean mStableInsetsConsumed>;

        if $z1 == 0 goto label1;

        $z2 = r0.<android.view.WindowInsets: boolean mDisplayCutoutConsumed>;

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    public boolean isRound()
    {
        android.view.WindowInsets r0;
        boolean $z0;

        r0 := @this: android.view.WindowInsets;

        $z0 = r0.<android.view.WindowInsets: boolean mIsRound>;

        return $z0;
    }

    boolean isSystemWindowInsetsConsumed()
    {
        android.view.WindowInsets r0;
        boolean $z0;

        r0 := @this: android.view.WindowInsets;

        $z0 = r0.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed>;

        return $z0;
    }

    public boolean isVisible(int)
    {
        android.view.WindowInsets r0;
        int i0, $i1, $i2, i3;
        boolean[] $r1;
        boolean $z0;

        r0 := @this: android.view.WindowInsets;

        i0 := @parameter0: int;

        i3 = 1;

     label1:
        if i3 > 256 goto label4;

        $i1 = i0 & i3;

        if $i1 != 0 goto label2;

        goto label3;

     label2:
        $r1 = r0.<android.view.WindowInsets: boolean[] mTypeVisibilityMap>;

        $i2 = staticinvoke <android.view.WindowInsets$Type: int indexOf(int)>(i3);

        $z0 = $r1[$i2];

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 << 1;

        goto label1;

     label4:
        return 1;
    }

    public android.view.WindowInsets replaceSystemWindowInsets(int, int, int, int)
    {
        android.view.WindowInsets r0, $r4;
        int i0, i1, i2, i3;
        boolean $z0;
        android.view.WindowInsets$Builder $r1, $r3;
        android.graphics.Insets $r2;

        r0 := @this: android.view.WindowInsets;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        $z0 = r0.<android.view.WindowInsets: boolean mSystemWindowInsetsConsumed>;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $r1 = new android.view.WindowInsets$Builder;

        specialinvoke $r1.<android.view.WindowInsets$Builder: void <init>(android.view.WindowInsets)>(r0);

        $r2 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>(i0, i1, i2, i3);

        $r3 = virtualinvoke $r1.<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemWindowInsets(android.graphics.Insets)>($r2);

        $r4 = virtualinvoke $r3.<android.view.WindowInsets$Builder: android.view.WindowInsets build()>();

        return $r4;
    }

    public android.view.WindowInsets replaceSystemWindowInsets(android.graphics.Rect)
    {
        android.view.WindowInsets r0, $r2;
        android.graphics.Rect r1;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.view.WindowInsets;

        r1 := @parameter0: android.graphics.Rect;

        $i3 = r1.<android.graphics.Rect: int left>;

        $i2 = r1.<android.graphics.Rect: int top>;

        $i1 = r1.<android.graphics.Rect: int right>;

        $i0 = r1.<android.graphics.Rect: int bottom>;

        $r2 = virtualinvoke r0.<android.view.WindowInsets: android.view.WindowInsets replaceSystemWindowInsets(int,int,int,int)>($i3, $i2, $i1, $i0);

        return $r2;
    }

    public boolean shouldAlwaysConsumeSystemBars()
    {
        android.view.WindowInsets r0;
        boolean $z0;

        r0 := @this: android.view.WindowInsets;

        $z0 = r0.<android.view.WindowInsets: boolean mAlwaysConsumeSystemBars>;

        return $z0;
    }

    public java.lang.String toString()
    {
        android.view.WindowInsets r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2, $r8;
        java.lang.String $r7, $r27, r31, r32;
        android.view.DisplayCutout $r10, r28;
        android.graphics.Insets[] $r12, $r13;
        boolean[] $r14;
        android.graphics.Insets $r15, $r24, r25, r26;
        int i0, $i1;

        r0 := @this: android.view.WindowInsets;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("WindowInsets{\n    ");

        i0 = 0;

     label1:
        if i0 >= 9 goto label4;

        $r12 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeInsetsMap>;

        r25 = $r12[i0];

        $r13 = r0.<android.view.WindowInsets: android.graphics.Insets[] mTypeMaxInsetsMap>;

        r26 = $r13[i0];

        $r14 = r0.<android.view.WindowInsets: boolean[] mTypeVisibilityMap>;

        z0 = $r14[i0];

        $r15 = <android.graphics.Insets: android.graphics.Insets NONE>;

        $z2 = virtualinvoke $r15.<android.graphics.Insets: boolean equals(java.lang.Object)>(r25);

        if $z2 == 0 goto label2;

        $r24 = <android.graphics.Insets: android.graphics.Insets NONE>;

        $z3 = virtualinvoke $r24.<android.graphics.Insets: boolean equals(java.lang.Object)>(r26);

        if $z3 == 0 goto label2;

        if z0 == 0 goto label3;

     label2:
        $i1 = 1 << i0;

        $r27 = staticinvoke <android.view.WindowInsets$Type: java.lang.String toString(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r25);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" max=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r26);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" vis=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    ");

     label3:
        i0 = i0 + 1;

        goto label1;

     label4:
        r28 = r0.<android.view.WindowInsets: android.view.DisplayCutout mDisplayCutout>;

        if r28 == null goto label5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cutout=");

        $r10 = r0.<android.view.WindowInsets: android.view.DisplayCutout mDisplayCutout>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        r31 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label6;

     label5:
        r31 = "";

     label6:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r31);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n    ");

        r32 = "";

        $z1 = virtualinvoke r0.<android.view.WindowInsets: boolean isRound()>();

        if $z1 == 0 goto label7;

        r32 = "round";

     label7:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }
}
