public final class android.view.WindowManagerImpl extends java.lang.Object implements android.view.WindowManager
{
    public final android.content.Context mContext;
    private android.os.IBinder mDefaultToken;
    private final android.view.WindowManagerGlobal mGlobal;
    private final android.view.Window mParentWindow;

    public void <init>(android.content.Context)
    {
        android.view.WindowManagerImpl r0;
        android.content.Context r1;

        r0 := @this: android.view.WindowManagerImpl;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.WindowManagerImpl: void <init>(android.content.Context,android.view.Window)>(r1, null);

        return;
    }

    private void <init>(android.content.Context, android.view.Window)
    {
        android.view.WindowManagerImpl r0;
        android.content.Context r1;
        android.view.Window r2;
        android.view.WindowManagerGlobal $r3;

        r0 := @this: android.view.WindowManagerImpl;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.Window;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = staticinvoke <android.view.WindowManagerGlobal: android.view.WindowManagerGlobal getInstance()>();

        r0.<android.view.WindowManagerImpl: android.view.WindowManagerGlobal mGlobal> = $r3;

        r0.<android.view.WindowManagerImpl: android.content.Context mContext> = r1;

        r0.<android.view.WindowManagerImpl: android.view.Window mParentWindow> = r2;

        return;
    }

    private void applyDefaultToken(android.view.ViewGroup$LayoutParams)
    {
        android.view.WindowManagerImpl r0;
        android.os.IBinder $r1, $r4, $r5;
        android.view.Window $r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;
        android.view.ViewGroup$LayoutParams r6;
        android.view.WindowManager$LayoutParams r7;

        r0 := @this: android.view.WindowManagerImpl;

        r6 := @parameter0: android.view.ViewGroup$LayoutParams;

        $r1 = r0.<android.view.WindowManagerImpl: android.os.IBinder mDefaultToken>;

        if $r1 == null goto label2;

        $r2 = r0.<android.view.WindowManagerImpl: android.view.Window mParentWindow>;

        if $r2 != null goto label2;

        $z0 = r6 instanceof android.view.WindowManager$LayoutParams;

        if $z0 == 0 goto label1;

        r7 = (android.view.WindowManager$LayoutParams) r6;

        $r4 = r7.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        if $r4 != null goto label2;

        $r5 = r0.<android.view.WindowManagerImpl: android.os.IBinder mDefaultToken>;

        r7.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = $r5;

        goto label2;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Params must be WindowManager.LayoutParams");

        throw $r3;

     label2:
        return;
    }

    private android.view.WindowInsets computeWindowInsets(android.graphics.Rect)
    {
        android.view.WindowManagerImpl r0;
        android.graphics.Rect r1;
        android.view.WindowManager$LayoutParams $r3;
        android.content.Context $r4, $r6;
        android.view.WindowInsets $r5;
        android.view.Window r7;
        android.os.IBinder r8;

        r0 := @this: android.view.WindowManagerImpl;

        r1 := @parameter0: android.graphics.Rect;

        $r3 = new android.view.WindowManager$LayoutParams;

        specialinvoke $r3.<android.view.WindowManager$LayoutParams: void <init>()>();

        $r3.<android.view.WindowManager$LayoutParams: int flags> = 65792;

        r7 = r0.<android.view.WindowManagerImpl: android.view.Window mParentWindow>;

        if r7 == null goto label1;

        $r6 = virtualinvoke r7.<android.view.Window: android.content.Context getContext()>();

        r8 = virtualinvoke $r6.<android.content.Context: android.os.IBinder getActivityToken()>();

        goto label2;

     label1:
        $r4 = r0.<android.view.WindowManagerImpl: android.content.Context mContext>;

        r8 = virtualinvoke $r4.<android.content.Context: android.os.IBinder getActivityToken()>();

     label2:
        $r3.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = r8;

        $r3.<android.view.WindowManager$LayoutParams: int systemUiVisibility> = 1536;

        virtualinvoke $r3.<android.view.WindowManager$LayoutParams: void setFitInsetsTypes(int)>(0);

        virtualinvoke $r3.<android.view.WindowManager$LayoutParams: void setFitInsetsSides(int)>(0);

        $r5 = specialinvoke r0.<android.view.WindowManagerImpl: android.view.WindowInsets getWindowInsetsFromServer(android.view.WindowManager$LayoutParams,android.graphics.Rect)>($r3, r1);

        return $r5;
    }

    private static android.graphics.Rect getCurrentBounds(android.content.Context)
    {
        android.app.ResourcesManager r0;
        android.content.res.Resources $r1;
        android.content.res.Configuration $r2;
        android.app.WindowConfiguration $r3;
        java.lang.Throwable $r4;
        android.content.Context r5;
        android.graphics.Rect r6;

        r5 := @parameter0: android.content.Context;

        r0 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        entermonitor r0;

     label1:
        $r1 = virtualinvoke r5.<android.content.Context: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $r3 = $r2.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        r6 = virtualinvoke $r3.<android.app.WindowConfiguration: android.graphics.Rect getBounds()>();

        exitmonitor r0;

     label2:
        return r6;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private android.graphics.Rect getMaximumBounds()
    {
        android.view.WindowManagerImpl r0;
        android.view.Display r1;
        android.content.Context $r3;
        android.graphics.Point $r4;
        android.graphics.Rect $r5;
        int $i0, $i1;

        r0 := @this: android.view.WindowManagerImpl;

        $r3 = r0.<android.view.WindowManagerImpl: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: android.view.Display getDisplayNoVerify()>();

        $r4 = new android.graphics.Point;

        specialinvoke $r4.<android.graphics.Point: void <init>()>();

        virtualinvoke r1.<android.view.Display: void getRealSize(android.graphics.Point)>($r4);

        $r5 = new android.graphics.Rect;

        $i1 = $r4.<android.graphics.Point: int x>;

        $i0 = $r4.<android.graphics.Point: int y>;

        specialinvoke $r5.<android.graphics.Rect: void <init>(int,int,int,int)>(0, 0, $i1, $i0);

        return $r5;
    }

    private android.view.WindowInsets getWindowInsetsFromServer(android.view.WindowManager$LayoutParams, android.graphics.Rect)
    {
        android.view.WindowManagerImpl r0;
        android.graphics.Rect r1, r2, r3;
        android.view.InsetsState r4;
        boolean z0, z1;
        android.view.IWindowManager $r5;
        android.content.Context $r6, $r7;
        int $i0, $i1, $i2;
        android.content.res.Resources $r8;
        android.content.res.Configuration $r9;
        android.view.WindowInsets$Builder $r10, $r11, $r13, $r15, $r17, r25;
        android.graphics.Insets $r12, $r14;
        android.view.DisplayCutout $r16, r24;
        android.view.WindowInsets $r18, r26;
        android.os.RemoteException $r19, $r21, r27;
        java.lang.RuntimeException $r20;
        android.view.WindowManager$LayoutParams r22;
        android.view.DisplayCutout$ParcelableWrapper r23;

        r0 := @this: android.view.WindowManagerImpl;

        r22 := @parameter0: android.view.WindowManager$LayoutParams;

        r1 := @parameter1: android.graphics.Rect;

     label1:
        r2 = new android.graphics.Rect;

        specialinvoke r2.<android.graphics.Rect: void <init>()>();

        r3 = new android.graphics.Rect;

        specialinvoke r3.<android.graphics.Rect: void <init>()>();

        r23 = new android.view.DisplayCutout$ParcelableWrapper;

        specialinvoke r23.<android.view.DisplayCutout$ParcelableWrapper: void <init>()>();

        r4 = new android.view.InsetsState;

        specialinvoke r4.<android.view.InsetsState: void <init>()>();

        $r5 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

        $r6 = r0.<android.view.WindowManagerImpl: android.content.Context mContext>;

        $i0 = virtualinvoke $r6.<android.content.Context: int getDisplayId()>();

        z0 = interfaceinvoke $r5.<android.view.IWindowManager: boolean getWindowInsets(android.view.WindowManager$LayoutParams,int,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InsetsState)>(r22, $i0, r2, r3, r23, r4);

        $r7 = r0.<android.view.WindowManagerImpl: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $r9 = virtualinvoke $r8.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        z1 = virtualinvoke $r9.<android.content.res.Configuration: boolean isScreenRound()>();

        $i1 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if $i1 != 2 goto label3;

        r24 = virtualinvoke r23.<android.view.DisplayCutout$ParcelableWrapper: android.view.DisplayCutout get()>();

     label2:
        $i2 = r22.<android.view.WindowManager$LayoutParams: int flags>;

        $r18 = virtualinvoke r4.<android.view.InsetsState: android.view.WindowInsets calculateInsets(android.graphics.Rect,android.view.InsetsState,boolean,boolean,android.view.DisplayCutout,int,int,int,android.util.SparseIntArray)>(r1, null, z1, z0, r24, 48, $i2, 0, null);

        return $r18;

     label3:
        r25 = new android.view.WindowInsets$Builder;

        specialinvoke r25.<android.view.WindowInsets$Builder: void <init>()>();

        $r10 = virtualinvoke r25.<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setAlwaysConsumeSystemBars(boolean)>(z0);

        $r11 = virtualinvoke $r10.<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setRound(boolean)>(z1);

        $r12 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(android.graphics.Rect)>(r2);

        $r13 = virtualinvoke $r11.<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setSystemWindowInsets(android.graphics.Insets)>($r12);

        $r14 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(android.graphics.Rect)>(r3);

        $r15 = virtualinvoke $r13.<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setStableInsets(android.graphics.Insets)>($r14);

        $r16 = virtualinvoke r23.<android.view.DisplayCutout$ParcelableWrapper: android.view.DisplayCutout get()>();

        $r17 = virtualinvoke $r15.<android.view.WindowInsets$Builder: android.view.WindowInsets$Builder setDisplayCutout(android.view.DisplayCutout)>($r16);

        r26 = virtualinvoke $r17.<android.view.WindowInsets$Builder: android.view.WindowInsets build()>();

     label4:
        return r26;

     label5:
        $r19 := @caughtexception;

        r27 = $r19;

        goto label7;

     label6:
        $r21 := @caughtexception;

        r27 = $r21;

     label7:
        $r20 = virtualinvoke r27.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r20;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label2 to label3 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void addView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.view.WindowManagerImpl r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;
        android.content.Context $r3, $r6;
        android.view.WindowManagerGlobal $r4;
        android.view.Display $r5;
        android.view.Window $r7;
        int $i0;

        r0 := @this: android.view.WindowManagerImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        specialinvoke r0.<android.view.WindowManagerImpl: void applyDefaultToken(android.view.ViewGroup$LayoutParams)>(r2);

        $r4 = r0.<android.view.WindowManagerImpl: android.view.WindowManagerGlobal mGlobal>;

        $r3 = r0.<android.view.WindowManagerImpl: android.content.Context mContext>;

        $r5 = virtualinvoke $r3.<android.content.Context: android.view.Display getDisplayNoVerify()>();

        $r7 = r0.<android.view.WindowManagerImpl: android.view.Window mParentWindow>;

        $r6 = r0.<android.view.WindowManagerImpl: android.content.Context mContext>;

        $i0 = virtualinvoke $r6.<android.content.Context: int getUserId()>();

        virtualinvoke $r4.<android.view.WindowManagerGlobal: void addView(android.view.View,android.view.ViewGroup$LayoutParams,android.view.Display,android.view.Window,int)>(r1, r2, $r5, $r7, $i0);

        return;
    }

    public android.view.WindowManagerImpl createLocalWindowManager(android.view.Window)
    {
        android.view.WindowManagerImpl r0, $r2;
        android.view.Window r1;
        android.content.Context $r3;

        r0 := @this: android.view.WindowManagerImpl;

        r1 := @parameter0: android.view.Window;

        $r2 = new android.view.WindowManagerImpl;

        $r3 = r0.<android.view.WindowManagerImpl: android.content.Context mContext>;

        specialinvoke $r2.<android.view.WindowManagerImpl: void <init>(android.content.Context,android.view.Window)>($r3, r1);

        return $r2;
    }

    public android.view.WindowManagerImpl createPresentationWindowManager(android.content.Context)
    {
        android.view.WindowManagerImpl r0, $r2;
        android.content.Context r1;
        android.view.Window $r3;

        r0 := @this: android.view.WindowManagerImpl;

        r1 := @parameter0: android.content.Context;

        $r2 = new android.view.WindowManagerImpl;

        $r3 = r0.<android.view.WindowManagerImpl: android.view.Window mParentWindow>;

        specialinvoke $r2.<android.view.WindowManagerImpl: void <init>(android.content.Context,android.view.Window)>(r1, $r3);

        return $r2;
    }

    public android.graphics.Region getCurrentImeTouchRegion()
    {
        android.view.WindowManagerImpl r0;
        android.view.IWindowManager $r1;
        android.os.RemoteException $r2;
        android.graphics.Region r3;

        r0 := @this: android.view.WindowManagerImpl;

     label1:
        $r1 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

        r3 = interfaceinvoke $r1.<android.view.IWindowManager: android.graphics.Region getCurrentImeTouchRegion()>();

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.WindowMetrics getCurrentWindowMetrics()
    {
        android.view.WindowManagerImpl r0;
        android.view.WindowMetrics $r1;
        android.view.WindowInsets $r2;
        android.view.Window r3;
        android.content.Context r4;
        android.graphics.Rect r5;

        r0 := @this: android.view.WindowManagerImpl;

        r3 = r0.<android.view.WindowManagerImpl: android.view.Window mParentWindow>;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<android.view.Window: android.content.Context getContext()>();

        goto label2;

     label1:
        r4 = r0.<android.view.WindowManagerImpl: android.content.Context mContext>;

     label2:
        r5 = staticinvoke <android.view.WindowManagerImpl: android.graphics.Rect getCurrentBounds(android.content.Context)>(r4);

        $r1 = new android.view.WindowMetrics;

        $r2 = specialinvoke r0.<android.view.WindowManagerImpl: android.view.WindowInsets computeWindowInsets(android.graphics.Rect)>(r5);

        specialinvoke $r1.<android.view.WindowMetrics: void <init>(android.graphics.Rect,android.view.WindowInsets)>(r5, $r2);

        return $r1;
    }

    public android.view.Display getDefaultDisplay()
    {
        android.view.WindowManagerImpl r0;
        android.content.Context $r1;
        android.view.Display $r2;

        r0 := @this: android.view.WindowManagerImpl;

        $r1 = r0.<android.view.WindowManagerImpl: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.view.Display getDisplayNoVerify()>();

        return $r2;
    }

    public android.view.WindowMetrics getMaximumWindowMetrics()
    {
        android.view.WindowManagerImpl r0;
        android.graphics.Rect r1;
        android.view.WindowMetrics $r2;
        android.view.WindowInsets $r3;

        r0 := @this: android.view.WindowManagerImpl;

        r1 = specialinvoke r0.<android.view.WindowManagerImpl: android.graphics.Rect getMaximumBounds()>();

        $r2 = new android.view.WindowMetrics;

        $r3 = specialinvoke r0.<android.view.WindowManagerImpl: android.view.WindowInsets computeWindowInsets(android.graphics.Rect)>(r1);

        specialinvoke $r2.<android.view.WindowMetrics: void <init>(android.graphics.Rect,android.view.WindowInsets)>(r1, $r3);

        return $r2;
    }

    public void removeView(android.view.View)
    {
        android.view.WindowManagerImpl r0;
        android.view.View r1;
        android.view.WindowManagerGlobal $r2;

        r0 := @this: android.view.WindowManagerImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.WindowManagerImpl: android.view.WindowManagerGlobal mGlobal>;

        virtualinvoke $r2.<android.view.WindowManagerGlobal: void removeView(android.view.View,boolean)>(r1, 0);

        return;
    }

    public void removeViewImmediate(android.view.View)
    {
        android.view.WindowManagerImpl r0;
        android.view.View r1;
        android.view.WindowManagerGlobal $r2;

        r0 := @this: android.view.WindowManagerImpl;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<android.view.WindowManagerImpl: android.view.WindowManagerGlobal mGlobal>;

        virtualinvoke $r2.<android.view.WindowManagerGlobal: void removeView(android.view.View,boolean)>(r1, 1);

        return;
    }

    public void requestAppKeyboardShortcuts(android.view.WindowManager$KeyboardShortcutsReceiver, int)
    {
        android.view.WindowManagerImpl r0;
        int i0;
        android.view.WindowManagerImpl$1 $r1;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;
        android.view.WindowManager$KeyboardShortcutsReceiver r4;

        r0 := @this: android.view.WindowManagerImpl;

        r4 := @parameter0: android.view.WindowManager$KeyboardShortcutsReceiver;

        i0 := @parameter1: int;

        $r1 = new android.view.WindowManagerImpl$1;

        specialinvoke $r1.<android.view.WindowManagerImpl$1: void <init>(android.view.WindowManagerImpl,android.view.WindowManager$KeyboardShortcutsReceiver)>(r0, r4);

     label1:
        $r2 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

        interfaceinvoke $r2.<android.view.IWindowManager: void requestAppKeyboardShortcuts(com.android.internal.os.IResultReceiver,int)>($r1, i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setDefaultToken(android.os.IBinder)
    {
        android.view.WindowManagerImpl r0;
        android.os.IBinder r1;

        r0 := @this: android.view.WindowManagerImpl;

        r1 := @parameter0: android.os.IBinder;

        r0.<android.view.WindowManagerImpl: android.os.IBinder mDefaultToken> = r1;

        return;
    }

    public void setShouldShowIme(int, boolean)
    {
        android.view.WindowManagerImpl r0;
        int i0;
        boolean z0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.view.WindowManagerImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

        interfaceinvoke $r2.<android.view.IWindowManager: void setShouldShowIme(int,boolean)>(i0, z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setShouldShowSystemDecors(int, boolean)
    {
        android.view.WindowManagerImpl r0;
        int i0;
        boolean z0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.view.WindowManagerImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

        interfaceinvoke $r2.<android.view.IWindowManager: void setShouldShowSystemDecors(int,boolean)>(i0, z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setShouldShowWithInsecureKeyguard(int, boolean)
    {
        android.view.WindowManagerImpl r0;
        int i0;
        boolean z0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.view.WindowManagerImpl;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

     label1:
        $r2 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

        interfaceinvoke $r2.<android.view.IWindowManager: void setShouldShowWithInsecureKeyguard(int,boolean)>(i0, z0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean shouldShowIme(int)
    {
        android.view.WindowManagerImpl r0;
        int i0;
        boolean z0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.view.WindowManagerImpl;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

        z0 = interfaceinvoke $r2.<android.view.IWindowManager: boolean shouldShowIme(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean shouldShowSystemDecors(int)
    {
        android.view.WindowManagerImpl r0;
        int i0;
        boolean z0;
        android.view.IWindowManager $r2;
        android.os.RemoteException $r3;

        r0 := @this: android.view.WindowManagerImpl;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowManager getWindowManagerService()>();

        z0 = interfaceinvoke $r2.<android.view.IWindowManager: boolean shouldShowSystemDecors(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void updateViewLayout(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.view.WindowManagerImpl r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;
        android.view.WindowManagerGlobal $r3;

        r0 := @this: android.view.WindowManagerImpl;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        specialinvoke r0.<android.view.WindowManagerImpl: void applyDefaultToken(android.view.ViewGroup$LayoutParams)>(r2);

        $r3 = r0.<android.view.WindowManagerImpl: android.view.WindowManagerGlobal mGlobal>;

        virtualinvoke $r3.<android.view.WindowManagerGlobal: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, r2);

        return;
    }
}
