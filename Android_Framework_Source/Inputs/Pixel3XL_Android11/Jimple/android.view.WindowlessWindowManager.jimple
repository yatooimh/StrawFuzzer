public class android.view.WindowlessWindowManager extends java.lang.Object implements android.view.IWindowSession
{
    private static final java.lang.String TAG;
    private final android.content.res.Configuration mConfiguration;
    private int mForceHeight;
    private int mForceWidth;
    private final android.os.IBinder mHostInputToken;
    private final android.view.IWindowSession mRealWm;
    final java.util.HashMap mResizeCompletionForWindow;
    private final android.view.SurfaceControl mRootSurface;
    final java.util.HashMap mStateForWindow;
    private final android.view.SurfaceSession mSurfaceSession;

    public void <init>(android.content.res.Configuration, android.view.SurfaceControl, android.os.IBinder)
    {
        android.view.WindowlessWindowManager r0;
        android.content.res.Configuration r1, $r7;
        android.view.SurfaceControl r2;
        android.os.IBinder r3;
        java.util.HashMap $r4, $r5;
        android.view.SurfaceSession $r6;
        android.view.IWindowSession $r8;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.content.res.Configuration;

        r2 := @parameter1: android.view.SurfaceControl;

        r3 := @parameter2: android.os.IBinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<android.view.WindowlessWindowManager: java.util.HashMap mStateForWindow> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<android.view.WindowlessWindowManager: java.util.HashMap mResizeCompletionForWindow> = $r5;

        $r6 = new android.view.SurfaceSession;

        specialinvoke $r6.<android.view.SurfaceSession: void <init>()>();

        r0.<android.view.WindowlessWindowManager: android.view.SurfaceSession mSurfaceSession> = $r6;

        r0.<android.view.WindowlessWindowManager: int mForceHeight> = -1;

        r0.<android.view.WindowlessWindowManager: int mForceWidth> = -1;

        r0.<android.view.WindowlessWindowManager: android.view.SurfaceControl mRootSurface> = r2;

        $r7 = new android.content.res.Configuration;

        specialinvoke $r7.<android.content.res.Configuration: void <init>(android.content.res.Configuration)>(r1);

        r0.<android.view.WindowlessWindowManager: android.content.res.Configuration mConfiguration> = $r7;

        $r8 = staticinvoke <android.view.WindowManagerGlobal: android.view.IWindowSession getWindowSession()>();

        r0.<android.view.WindowlessWindowManager: android.view.IWindowSession mRealWm> = $r8;

        r0.<android.view.WindowlessWindowManager: android.os.IBinder mHostInputToken> = r3;

        return;
    }

    private int getSurfaceHeight(android.view.WindowManager$LayoutParams)
    {
        android.view.WindowlessWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        android.graphics.Rect r2;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        r2 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        if r2 == null goto label1;

        $i1 = r1.<android.view.WindowManager$LayoutParams: int height>;

        $i0 = r2.<android.graphics.Rect: int top>;

        $i3 = $i1 + $i0;

        $i2 = r2.<android.graphics.Rect: int bottom>;

        i4 = $i3 + $i2;

        goto label2;

     label1:
        i4 = r1.<android.view.WindowManager$LayoutParams: int height>;

     label2:
        return i4;
    }

    private int getSurfaceWidth(android.view.WindowManager$LayoutParams)
    {
        android.view.WindowlessWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        android.graphics.Rect r2;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        r2 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        if r2 == null goto label1;

        $i1 = r1.<android.view.WindowManager$LayoutParams: int width>;

        $i0 = r2.<android.graphics.Rect: int left>;

        $i3 = $i1 + $i0;

        $i2 = r2.<android.graphics.Rect: int right>;

        i4 = $i3 + $i2;

        goto label2;

     label1:
        i4 = r1.<android.view.WindowManager$LayoutParams: int width>;

     label2:
        return i4;
    }

    private boolean isOpaque(android.view.WindowManager$LayoutParams)
    {
        android.view.WindowlessWindowManager r0;
        android.view.WindowManager$LayoutParams r1;
        android.graphics.Rect $r2, $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r2 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        if $r2 == null goto label1;

        $r6 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i4 = $r6.<android.graphics.Rect: int left>;

        if $i4 != 0 goto label3;

     label1:
        $r3 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i0 = $r3.<android.graphics.Rect: int top>;

        if $i0 != 0 goto label3;

        $r4 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i1 = $r4.<android.graphics.Rect: int right>;

        if $i1 != 0 goto label3;

        $r5 = r1.<android.view.WindowManager$LayoutParams: android.graphics.Rect surfaceInsets>;

        $i2 = $r5.<android.graphics.Rect: int bottom>;

        if $i2 == 0 goto label2;

        goto label3;

     label2:
        $i3 = r1.<android.view.WindowManager$LayoutParams: int format>;

        $z0 = staticinvoke <android.graphics.PixelFormat: boolean formatHasAlpha(int)>($i3);

        $z1 = $z0 ^ 1;

        return $z1;

     label3:
        return 0;
    }

    public int addToDisplay(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.view.DisplayCutout$ParcelableWrapper, android.view.InputChannel, android.view.InsetsState, android.view.InsetsSourceControl[])
    {
        android.view.WindowlessWindowManager r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.graphics.Rect r1, r26, r27;
        android.view.DisplayCutout$ParcelableWrapper r2;
        android.view.InputChannel r3;
        android.view.InsetsState r4;
        android.view.InsetsSourceControl[] r5;
        android.view.SurfaceControl$Builder $r6, $r9, $r10, $r11, $r14, $r15;
        android.view.SurfaceSession $r7;
        android.view.SurfaceControl $r8, r28;
        java.lang.CharSequence $r12;
        java.lang.String $r13;
        android.view.WindowlessWindowManager$State $r16;
        java.util.HashMap $r17;
        android.os.IBinder $r18, $r20, r30;
        android.view.IWindowSession $r21;
        android.os.RemoteException $r22;
        java.lang.Throwable $r23;
        android.view.IWindow r24;
        android.view.WindowManager$LayoutParams r25;

        r0 := @this: android.view.WindowlessWindowManager;

        r24 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r25 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r26 := @parameter5: android.graphics.Rect;

        r27 := @parameter6: android.graphics.Rect;

        r1 := @parameter7: android.graphics.Rect;

        r2 := @parameter8: android.view.DisplayCutout$ParcelableWrapper;

        r3 := @parameter9: android.view.InputChannel;

        r4 := @parameter10: android.view.InsetsState;

        r5 := @parameter11: android.view.InsetsSourceControl[];

        $r6 = new android.view.SurfaceControl$Builder;

        $r7 = r0.<android.view.WindowlessWindowManager: android.view.SurfaceSession mSurfaceSession>;

        specialinvoke $r6.<android.view.SurfaceControl$Builder: void <init>(android.view.SurfaceSession)>($r7);

        $r8 = r0.<android.view.WindowlessWindowManager: android.view.SurfaceControl mRootSurface>;

        $r9 = virtualinvoke $r6.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setParent(android.view.SurfaceControl)>($r8);

        $i3 = r25.<android.view.WindowManager$LayoutParams: int format>;

        $r10 = virtualinvoke $r9.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setFormat(int)>($i3);

        $i4 = specialinvoke r0.<android.view.WindowlessWindowManager: int getSurfaceWidth(android.view.WindowManager$LayoutParams)>(r25);

        $i5 = specialinvoke r0.<android.view.WindowlessWindowManager: int getSurfaceHeight(android.view.WindowManager$LayoutParams)>(r25);

        $r11 = virtualinvoke $r10.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setBufferSize(int,int)>($i4, $i5);

        $r12 = virtualinvoke r25.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r13 = interfaceinvoke $r12.<java.lang.CharSequence: java.lang.String toString()>();

        $r14 = virtualinvoke $r11.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setName(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<android.view.SurfaceControl$Builder: android.view.SurfaceControl$Builder setCallsite(java.lang.String)>("WindowlessWindowManager.addToDisplay");

        r28 = virtualinvoke $r15.<android.view.SurfaceControl$Builder: android.view.SurfaceControl build()>();

        $i6 = r25.<android.view.WindowManager$LayoutParams: int inputFeatures>;

        $i7 = $i6 & 2;

        if $i7 != 0 goto label04;

     label01:
        $r21 = r0.<android.view.WindowlessWindowManager: android.view.IWindowSession mRealWm>;

        $r20 = r0.<android.view.WindowlessWindowManager: android.os.IBinder mHostInputToken>;

        $i9 = r25.<android.view.WindowManager$LayoutParams: int flags>;

        $i8 = r25.<android.view.WindowManager$LayoutParams: int type>;

        interfaceinvoke $r21.<android.view.IWindowSession: void grantInputChannel(int,android.view.SurfaceControl,android.view.IWindow,android.os.IBinder,int,int,android.view.InputChannel)>(i2, r28, r24, $r20, $i9, $i8, r3);

     label02:
        goto label04;

     label03:
        $r22 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowlessWindowManager", "Failed to grant input to surface: ", $r22);

     label04:
        if r3 == null goto label05;

        r30 = virtualinvoke r3.<android.view.InputChannel: android.os.IBinder getToken()>();

        goto label06;

     label05:
        r30 = null;

     label06:
        $r16 = new android.view.WindowlessWindowManager$State;

        specialinvoke $r16.<android.view.WindowlessWindowManager$State: void <init>(android.view.WindowlessWindowManager,android.view.SurfaceControl,android.view.WindowManager$LayoutParams,int,android.os.IBinder)>(r0, r28, r25, i2, r30);

        entermonitor r0;

     label07:
        $r17 = r0.<android.view.WindowlessWindowManager: java.util.HashMap mStateForWindow>;

        $r18 = interfaceinvoke r24.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r16);

        exitmonitor r0;

     label08:
        return 2;

     label09:
        $r23 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r23;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public int addToDisplayAsUser(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.view.DisplayCutout$ParcelableWrapper, android.view.InputChannel, android.view.InsetsState, android.view.InsetsSourceControl[])
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        int i0, i1, i2, i3, $i4;
        android.view.WindowManager$LayoutParams r2;
        android.graphics.Rect r3, r4, r5;
        android.view.DisplayCutout$ParcelableWrapper r6;
        android.view.InputChannel r7;
        android.view.InsetsState r8;
        android.view.InsetsSourceControl[] r9;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        i3 := @parameter5: int;

        r3 := @parameter6: android.graphics.Rect;

        r4 := @parameter7: android.graphics.Rect;

        r5 := @parameter8: android.graphics.Rect;

        r6 := @parameter9: android.view.DisplayCutout$ParcelableWrapper;

        r7 := @parameter10: android.view.InputChannel;

        r8 := @parameter11: android.view.InsetsState;

        r9 := @parameter12: android.view.InsetsSourceControl[];

        $i4 = virtualinvoke r0.<android.view.WindowlessWindowManager: int addToDisplay(android.view.IWindow,int,android.view.WindowManager$LayoutParams,int,int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect,android.view.DisplayCutout$ParcelableWrapper,android.view.InputChannel,android.view.InsetsState,android.view.InsetsSourceControl[])>(r1, i0, r2, i1, i2, r3, r4, r5, r6, r7, r8, r9);

        return $i4;
    }

    public int addToDisplayWithoutInputChannel(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, android.graphics.Rect, android.graphics.Rect, android.view.InsetsState)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        int i0, i1, i2;
        android.view.WindowManager$LayoutParams r2;
        android.graphics.Rect r3, r4;
        android.view.InsetsState r5;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.WindowManager$LayoutParams;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.graphics.Rect;

        r4 := @parameter6: android.graphics.Rect;

        r5 := @parameter7: android.view.InsetsState;

        return 0;
    }

    public android.os.IBinder asBinder()
    {
        android.view.WindowlessWindowManager r0;

        r0 := @this: android.view.WindowlessWindowManager;

        return null;
    }

    public void cancelDragAndDrop(android.os.IBinder, boolean)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        boolean z0;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        return;
    }

    public void dragRecipientEntered(android.view.IWindow)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        return;
    }

    public void dragRecipientExited(android.view.IWindow)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        return;
    }

    public void finishDrawing(android.view.IWindow, android.view.SurfaceControl$Transaction)
    {
        android.view.WindowlessWindowManager r0;
        android.view.SurfaceControl$Transaction r1;
        android.view.WindowlessWindowManager$ResizeCompleteCallback r2;
        java.util.HashMap $r3, $r6;
        android.os.IBinder $r4, $r7;
        java.lang.Object $r5;
        java.lang.Throwable $r9;
        android.view.IWindow r10;

        r0 := @this: android.view.WindowlessWindowManager;

        r10 := @parameter0: android.view.IWindow;

        r1 := @parameter1: android.view.SurfaceControl$Transaction;

        entermonitor r0;

     label01:
        $r3 = r0.<android.view.WindowlessWindowManager: java.util.HashMap mResizeCompletionForWindow>;

        $r4 = interfaceinvoke r10.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r5 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r4);

        r2 = (android.view.WindowlessWindowManager$ResizeCompleteCallback) $r5;

     label02:
        if r2 != null goto label05;

     label03:
        virtualinvoke r1.<android.view.SurfaceControl$Transaction: void apply()>();

        exitmonitor r0;

     label04:
        return;

     label05:
        interfaceinvoke r2.<android.view.WindowlessWindowManager$ResizeCompleteCallback: void finished(android.view.SurfaceControl$Transaction)>(r1);

        $r6 = r0.<android.view.WindowlessWindowManager: java.util.HashMap mResizeCompletionForWindow>;

        $r7 = interfaceinvoke r10.<android.view.IWindow: android.os.IBinder asBinder()>();

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r7);

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public void finishMovingTask(android.view.IWindow)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        return;
    }

    public void getDisplayFrame(android.view.IWindow, android.graphics.Rect)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        android.graphics.Rect r2;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.graphics.Rect;

        return;
    }

    public boolean getInTouchMode()
    {
        android.view.WindowlessWindowManager r0;

        r0 := @this: android.view.WindowlessWindowManager;

        return 0;
    }

    protected android.view.SurfaceControl getSurfaceControl(android.view.View)
    {
        android.view.WindowlessWindowManager r0;
        android.view.ViewRootImpl$W $r1;
        java.util.HashMap $r2;
        android.os.IBinder $r3;
        java.lang.Object $r4;
        android.view.SurfaceControl $r5;
        android.view.View r6;
        android.view.ViewRootImpl r7;
        android.view.WindowlessWindowManager$State r8;

        r0 := @this: android.view.WindowlessWindowManager;

        r6 := @parameter0: android.view.View;

        r7 = virtualinvoke r6.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r7 != null goto label1;

        return null;

     label1:
        $r2 = r0.<android.view.WindowlessWindowManager: java.util.HashMap mStateForWindow>;

        $r1 = r7.<android.view.ViewRootImpl: android.view.ViewRootImpl$W mWindow>;

        $r3 = virtualinvoke $r1.<android.view.ViewRootImpl$W: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        r8 = (android.view.WindowlessWindowManager$State) $r4;

        if r8 != null goto label2;

        return null;

     label2:
        $r5 = r8.<android.view.WindowlessWindowManager$State: android.view.SurfaceControl mSurfaceControl>;

        return $r5;
    }

    public android.view.IWindowId getWindowId(android.os.IBinder)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        return null;
    }

    public void grantInputChannel(int, android.view.SurfaceControl, android.view.IWindow, android.os.IBinder, int, int, android.view.InputChannel)
    {
        android.view.WindowlessWindowManager r0;
        int i0, i1, i2;
        android.view.SurfaceControl r1;
        android.view.IWindow r2;
        android.os.IBinder r3;
        android.view.InputChannel r4;

        r0 := @this: android.view.WindowlessWindowManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.SurfaceControl;

        r2 := @parameter2: android.view.IWindow;

        r3 := @parameter3: android.os.IBinder;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        r4 := @parameter6: android.view.InputChannel;

        return;
    }

    public void insetsModified(android.view.IWindow, android.view.InsetsState)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        android.view.InsetsState r2;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.view.InsetsState;

        return;
    }

    public void onRectangleOnScreenRequested(android.os.IBinder, android.graphics.Rect)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        android.graphics.Rect r2;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.graphics.Rect;

        return;
    }

    public boolean outOfMemory(android.view.IWindow)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        return 0;
    }

    public android.os.IBinder performDrag(android.view.IWindow, int, android.view.SurfaceControl, int, float, float, float, float, android.content.ClipData)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        int i0, i1;
        android.view.SurfaceControl r2;
        float f0, f1, f2, f3;
        android.content.ClipData r3;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.SurfaceControl;

        i1 := @parameter3: int;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        f3 := @parameter7: float;

        r3 := @parameter8: android.content.ClipData;

        return null;
    }

    public boolean performHapticFeedback(int, boolean)
    {
        android.view.WindowlessWindowManager r0;
        int i0;
        boolean z0;

        r0 := @this: android.view.WindowlessWindowManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return 0;
    }

    public void pokeDrawLock(android.os.IBinder)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        return;
    }

    public void prepareToReplaceWindows(android.os.IBinder, boolean)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        boolean z0;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        return;
    }

    public int relayout(android.view.IWindow, int, android.view.WindowManager$LayoutParams, int, int, int, int, long, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.graphics.Rect, android.view.DisplayCutout$ParcelableWrapper, android.util.MergedConfiguration, android.view.SurfaceControl, android.view.InsetsState, android.view.InsetsSourceControl[], android.graphics.Point, android.view.SurfaceControl)
    {
        android.view.WindowlessWindowManager r0;
        int i0, i1, i2, i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i13, i14;
        long l4;
        android.graphics.Rect r1, r2, r29, r30, r31;
        android.view.DisplayCutout$ParcelableWrapper r3;
        android.util.MergedConfiguration r4;
        android.view.SurfaceControl r5, r9, r33;
        android.view.InsetsState r6;
        android.view.InsetsSourceControl[] r7;
        android.graphics.Point r8;
        java.util.HashMap $r10;
        android.os.IBinder $r11, $r16, $r18;
        java.lang.Object $r12;
        java.lang.IllegalArgumentException $r13;
        android.view.SurfaceControl$Transaction $r14, $r15, $r20, $r21, $r22;
        android.graphics.Region $r17;
        android.view.IWindowSession $r19;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r23, r28, r35;
        java.lang.Throwable $r24, $r25, r38;
        android.os.RemoteException $r26;
        android.view.IWindow r27;
        android.view.WindowlessWindowManager$State r32;
        android.content.res.Configuration r36;

        r0 := @this: android.view.WindowlessWindowManager;

        r27 := @parameter0: android.view.IWindow;

        i13 := @parameter1: int;

        r28 := @parameter2: android.view.WindowManager$LayoutParams;

        i0 := @parameter3: int;

        i1 := @parameter4: int;

        i2 := @parameter5: int;

        i3 := @parameter6: int;

        l4 := @parameter7: long;

        r29 := @parameter8: android.graphics.Rect;

        r30 := @parameter9: android.graphics.Rect;

        r31 := @parameter10: android.graphics.Rect;

        r1 := @parameter11: android.graphics.Rect;

        r2 := @parameter12: android.graphics.Rect;

        r3 := @parameter13: android.view.DisplayCutout$ParcelableWrapper;

        r4 := @parameter14: android.util.MergedConfiguration;

        r5 := @parameter15: android.view.SurfaceControl;

        r6 := @parameter16: android.view.InsetsState;

        r7 := @parameter17: android.view.InsetsSourceControl[];

        r8 := @parameter18: android.graphics.Point;

        r9 := @parameter19: android.view.SurfaceControl;

        entermonitor r0;

     label01:
        $r10 = r0.<android.view.WindowlessWindowManager: java.util.HashMap mStateForWindow>;

        $r11 = interfaceinvoke r27.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r12 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r11);

        r32 = (android.view.WindowlessWindowManager$State) $r12;

        exitmonitor r0;

     label02:
        if r32 == null goto label11;

        r33 = r32.<android.view.WindowlessWindowManager$State: android.view.SurfaceControl mSurfaceControl>;

        $r14 = new android.view.SurfaceControl$Transaction;

        specialinvoke $r14.<android.view.SurfaceControl$Transaction: void <init>()>();

        if r28 == null goto label03;

        $r23 = r32.<android.view.WindowlessWindowManager$State: android.view.WindowManager$LayoutParams mParams>;

        i14 = virtualinvoke $r23.<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>(r28);

        goto label04;

     label03:
        i14 = 0;

     label04:
        r35 = r32.<android.view.WindowlessWindowManager$State: android.view.WindowManager$LayoutParams mParams>;

        if i2 != 0 goto label05;

        $i10 = specialinvoke r0.<android.view.WindowlessWindowManager: int getSurfaceWidth(android.view.WindowManager$LayoutParams)>(r35);

        $i11 = specialinvoke r0.<android.view.WindowlessWindowManager: int getSurfaceHeight(android.view.WindowManager$LayoutParams)>(r35);

        $r20 = virtualinvoke $r14.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setBufferSize(android.view.SurfaceControl,int,int)>(r33, $i10, $i11);

        $z0 = specialinvoke r0.<android.view.WindowlessWindowManager: boolean isOpaque(android.view.WindowManager$LayoutParams)>(r35);

        $r21 = virtualinvoke $r20.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction setOpaque(android.view.SurfaceControl,boolean)>(r33, $z0);

        $r22 = virtualinvoke $r21.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction show(android.view.SurfaceControl)>(r33);

        virtualinvoke $r22.<android.view.SurfaceControl$Transaction: void apply()>();

        virtualinvoke r5.<android.view.SurfaceControl: void copyFrom(android.view.SurfaceControl,java.lang.String)>(r33, "WindowlessWindowManager.relayout");

        goto label06;

     label05:
        $r15 = virtualinvoke $r14.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction hide(android.view.SurfaceControl)>(r33);

        virtualinvoke $r15.<android.view.SurfaceControl$Transaction: void apply()>();

        virtualinvoke r5.<android.view.SurfaceControl: void release()>();

     label06:
        $i6 = r35.<android.view.WindowManager$LayoutParams: int width>;

        $i5 = r35.<android.view.WindowManager$LayoutParams: int height>;

        virtualinvoke r29.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, $i6, $i5);

        r36 = r0.<android.view.WindowlessWindowManager: android.content.res.Configuration mConfiguration>;

        virtualinvoke r4.<android.util.MergedConfiguration: void setConfiguration(android.content.res.Configuration,android.content.res.Configuration)>(r36, r36);

        $i7 = i14 & 4;

        if $i7 == 0 goto label10;

        $r16 = r32.<android.view.WindowlessWindowManager$State: android.os.IBinder mInputChannelToken>;

        if $r16 == null goto label10;

     label07:
        $r19 = r0.<android.view.WindowlessWindowManager: android.view.IWindowSession mRealWm>;

        $r18 = r32.<android.view.WindowlessWindowManager$State: android.os.IBinder mInputChannelToken>;

        $i9 = r32.<android.view.WindowlessWindowManager$State: int mDisplayId>;

        $i8 = r35.<android.view.WindowManager$LayoutParams: int flags>;

        $r17 = r32.<android.view.WindowlessWindowManager$State: android.graphics.Region mInputRegion>;

        interfaceinvoke $r19.<android.view.IWindowSession: void updateInputChannel(android.os.IBinder,int,android.view.SurfaceControl,int,android.graphics.Region)>($r18, $i9, r33, $i8, $r17);

     label08:
        goto label10;

     label09:
        $r26 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowlessWindowManager", "Failed to update surface input channel: ", $r26);

     label10:
        return 0;

     label11:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid window token (never added or removed already)");

        throw $r13;

     label12:
        $r25 := @caughtexception;

        r38 = $r25;

     label13:
        exitmonitor r0;

     label14:
        throw r38;

     label15:
        $r24 := @caughtexception;

        r38 = $r24;

        goto label13;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    public void remove(android.view.IWindow) throws android.os.RemoteException
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindowSession $r1;
        java.util.HashMap $r2;
        android.os.IBinder $r3;
        java.lang.Object $r4;
        java.lang.IllegalArgumentException $r5;
        android.view.SurfaceControl$Transaction $r6, $r8;
        android.view.SurfaceControl $r7;
        java.lang.Throwable $r9, $r10, $r11;
        android.view.IWindow r12;
        android.view.WindowlessWindowManager$State r13;

        r0 := @this: android.view.WindowlessWindowManager;

        r12 := @parameter0: android.view.IWindow;

        $r1 = r0.<android.view.WindowlessWindowManager: android.view.IWindowSession mRealWm>;

        interfaceinvoke $r1.<android.view.IWindowSession: void remove(android.view.IWindow)>(r12);

        entermonitor r0;

     label01:
        $r2 = r0.<android.view.WindowlessWindowManager: java.util.HashMap mStateForWindow>;

        $r3 = interfaceinvoke r12.<android.view.IWindow: android.os.IBinder asBinder()>();

        $r4 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r3);

        r13 = (android.view.WindowlessWindowManager$State) $r4;

        exitmonitor r0;

     label02:
        if r13 == null goto label10;

        $r6 = new android.view.SurfaceControl$Transaction;

        specialinvoke $r6.<android.view.SurfaceControl$Transaction: void <init>()>();

     label03:
        $r7 = r13.<android.view.WindowlessWindowManager$State: android.view.SurfaceControl mSurfaceControl>;

        $r8 = virtualinvoke $r6.<android.view.SurfaceControl$Transaction: android.view.SurfaceControl$Transaction remove(android.view.SurfaceControl)>($r7);

        virtualinvoke $r8.<android.view.SurfaceControl$Transaction: void apply()>();

     label04:
        virtualinvoke $r6.<android.view.SurfaceControl$Transaction: void close()>();

        return;

     label05:
        $r9 := @caughtexception;

     label06:
        virtualinvoke $r6.<android.view.SurfaceControl$Transaction: void close()>();

     label07:
        goto label09;

     label08:
        $r11 := @caughtexception;

        virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r11);

     label09:
        throw $r9;

     label10:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid window token (never added or removed already)");

        throw $r5;

     label11:
        $r10 := @caughtexception;

     label12:
        exitmonitor r0;

     label13:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void reparentDisplayContent(android.view.IWindow, android.view.SurfaceControl, int)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        android.view.SurfaceControl r2;
        int i0;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.view.SurfaceControl;

        i0 := @parameter2: int;

        return;
    }

    public void reportDropResult(android.view.IWindow, boolean)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        boolean z0;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        z0 := @parameter1: boolean;

        return;
    }

    public void reportSystemGestureExclusionChanged(android.view.IWindow, java.util.List)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        java.util.List r2;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: java.util.List;

        return;
    }

    public android.os.Bundle sendWallpaperCommand(android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle, boolean)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        java.lang.String r2;
        int i0, i1, i2;
        android.os.Bundle r3;
        boolean z0;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        r3 := @parameter5: android.os.Bundle;

        z0 := @parameter6: boolean;

        return null;
    }

    void setCompletionCallback(android.os.IBinder, android.view.WindowlessWindowManager$ResizeCompleteCallback)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        android.view.WindowlessWindowManager$ResizeCompleteCallback r2;
        java.util.HashMap $r3, $r5;
        java.lang.Object $r4;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.view.WindowlessWindowManager$ResizeCompleteCallback;

        $r3 = r0.<android.view.WindowlessWindowManager: java.util.HashMap mResizeCompletionForWindow>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r4 == null goto label1;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("WindowlessWindowManager", "Unsupported overlapping resizes");

     label1:
        $r5 = r0.<android.view.WindowlessWindowManager: java.util.HashMap mResizeCompletionForWindow>;

        virtualinvoke $r5.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        return;
    }

    protected void setConfiguration(android.content.res.Configuration)
    {
        android.view.WindowlessWindowManager r0;
        android.content.res.Configuration r1, $r2;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.content.res.Configuration;

        $r2 = r0.<android.view.WindowlessWindowManager: android.content.res.Configuration mConfiguration>;

        virtualinvoke $r2.<android.content.res.Configuration: void setTo(android.content.res.Configuration)>(r1);

        return;
    }

    public void setInTouchMode(boolean)
    {
        android.view.WindowlessWindowManager r0;
        boolean z0;

        r0 := @this: android.view.WindowlessWindowManager;

        z0 := @parameter0: boolean;

        return;
    }

    public void setInsets(android.view.IWindow, int, android.graphics.Rect, android.graphics.Rect, android.graphics.Region)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        int i0;
        android.graphics.Rect r2, r3;
        android.graphics.Region r4;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        r2 := @parameter2: android.graphics.Rect;

        r3 := @parameter3: android.graphics.Rect;

        r4 := @parameter4: android.graphics.Region;

        return;
    }

    public void setShouldZoomOutWallpaper(android.os.IBinder, boolean)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        boolean z0;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        return;
    }

    protected void setTouchRegion(android.os.IBinder, android.graphics.Region)
    {
        android.view.WindowlessWindowManager r0;
        android.graphics.Region r1, $r5, $r7, r14;
        android.view.WindowlessWindowManager$State r2;
        java.util.HashMap $r3;
        java.lang.Object $r4;
        boolean $z0;
        android.view.WindowManager$LayoutParams $r6;
        int $i0, $i1;
        android.view.SurfaceControl $r8;
        android.os.IBinder $r9, r13, r15;
        android.view.IWindowSession $r10;
        android.os.RemoteException $r11;
        java.lang.Throwable $r12;

        r0 := @this: android.view.WindowlessWindowManager;

        r13 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.graphics.Region;

        entermonitor r0;

     label01:
        $r3 = r0.<android.view.WindowlessWindowManager: java.util.HashMap mStateForWindow>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r13);

        r2 = (android.view.WindowlessWindowManager$State) $r4;

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r0;

     label04:
        return;

     label05:
        $r5 = r2.<android.view.WindowlessWindowManager$State: android.graphics.Region mInputRegion>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r1, $r5);

        if $z0 == 0 goto label07;

        exitmonitor r0;

     label06:
        return;

     label07:
        if r1 == null goto label10;

     label08:
        r14 = new android.graphics.Region;

        specialinvoke r14.<android.graphics.Region: void <init>(android.graphics.Region)>(r1);

     label09:
        goto label11;

     label10:
        r14 = null;

     label11:
        r2.<android.view.WindowlessWindowManager$State: android.graphics.Region mInputRegion> = r14;

        r15 = r2.<android.view.WindowlessWindowManager$State: android.os.IBinder mInputChannelToken>;

     label12:
        if r15 == null goto label17;

     label13:
        $r10 = r0.<android.view.WindowlessWindowManager: android.view.IWindowSession mRealWm>;

        $r9 = r2.<android.view.WindowlessWindowManager$State: android.os.IBinder mInputChannelToken>;

        $i1 = r2.<android.view.WindowlessWindowManager$State: int mDisplayId>;

        $r8 = r2.<android.view.WindowlessWindowManager$State: android.view.SurfaceControl mSurfaceControl>;

        $r6 = r2.<android.view.WindowlessWindowManager$State: android.view.WindowManager$LayoutParams mParams>;

        $i0 = $r6.<android.view.WindowManager$LayoutParams: int flags>;

        $r7 = r2.<android.view.WindowlessWindowManager$State: android.graphics.Region mInputRegion>;

        interfaceinvoke $r10.<android.view.IWindowSession: void updateInputChannel(android.os.IBinder,int,android.view.SurfaceControl,int,android.graphics.Region)>($r9, $i1, $r8, $i0, $r7);

     label14:
        goto label17;

     label15:
        $r11 := @caughtexception;

     label16:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WindowlessWindowManager", "Failed to update surface input channel: ", $r11);

     label17:
        exitmonitor r0;

     label18:
        return;

     label19:
        $r12 := @caughtexception;

     label20:
        exitmonitor r0;

     label21:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch android.os.RemoteException from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public void setTransparentRegion(android.view.IWindow, android.graphics.Region)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        android.graphics.Region r2;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.graphics.Region;

        return;
    }

    public void setWallpaperDisplayOffset(android.os.IBinder, int, int)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        int i0, i1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        return;
    }

    public void setWallpaperPosition(android.os.IBinder, float, float, float, float)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        float f0, f1, f2, f3;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        return;
    }

    public void setWallpaperZoomOut(android.os.IBinder, float)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        float f0;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        f0 := @parameter1: float;

        return;
    }

    public boolean startMovingTask(android.view.IWindow, float, float)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        float f0, f1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        return 0;
    }

    public void updateDisplayContentLocation(android.view.IWindow, int, int, int)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        int i0, i1, i2;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        return;
    }

    public void updateInputChannel(android.os.IBinder, int, android.view.SurfaceControl, int, android.graphics.Region)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        int i0, i1;
        android.view.SurfaceControl r2;
        android.graphics.Region r3;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.SurfaceControl;

        i1 := @parameter3: int;

        r3 := @parameter4: android.graphics.Region;

        return;
    }

    public void updatePointerIcon(android.view.IWindow)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        return;
    }

    public void updateTapExcludeRegion(android.view.IWindow, android.graphics.Region)
    {
        android.view.WindowlessWindowManager r0;
        android.view.IWindow r1;
        android.graphics.Region r2;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.view.IWindow;

        r2 := @parameter1: android.graphics.Region;

        return;
    }

    public void wallpaperCommandComplete(android.os.IBinder, android.os.Bundle)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;
        android.os.Bundle r2;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: android.os.Bundle;

        return;
    }

    public void wallpaperOffsetsComplete(android.os.IBinder)
    {
        android.view.WindowlessWindowManager r0;
        android.os.IBinder r1;

        r0 := @this: android.view.WindowlessWindowManager;

        r1 := @parameter0: android.os.IBinder;

        return;
    }

    public static void <clinit>()
    {
        <android.view.WindowlessWindowManager: java.lang.String TAG> = "WindowlessWindowManager";

        return;
    }
}
