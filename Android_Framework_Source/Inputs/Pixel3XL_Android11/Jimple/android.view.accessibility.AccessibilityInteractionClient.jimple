public final class android.view.accessibility.AccessibilityInteractionClient extends android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub
{
    private static final boolean CHECK_INTEGRITY;
    private static final boolean DEBUG;
    private static final long DISABLE_PREFETCHING_FOR_SCROLLING_MILLIS;
    private static final java.lang.String LOG_TAG;
    public static final int NO_ID;
    private static final long TIMEOUT_INTERACTION_MILLIS;
    private static android.view.accessibility.AccessibilityCache sAccessibilityCache;
    private static final android.util.LongSparseArray sClients;
    private static final android.util.SparseArray sConnectionCache;
    private static final android.util.SparseLongArray sScrollingWindows;
    private static final java.lang.Object sStaticLock;
    private android.view.accessibility.AccessibilityNodeInfo mFindAccessibilityNodeInfoResult;
    private java.util.List mFindAccessibilityNodeInfosResult;
    private final java.lang.Object mInstanceLock;
    private volatile int mInteractionId;
    private final java.util.concurrent.atomic.AtomicInteger mInteractionIdCounter;
    private boolean mPerformAccessibilityActionResult;
    private android.os.Message mSameThreadMessage;

    static void <clinit>()
    {
        long $l0, $l1;
        double $d0, $d1;
        java.lang.Object $r0;
        android.util.LongSparseArray $r1;
        android.util.SparseArray $r2;
        android.util.SparseLongArray $r3;
        android.view.accessibility.AccessibilityCache $r4;
        android.view.accessibility.AccessibilityCache$AccessibilityNodeRefresher $r5;

        <android.view.accessibility.AccessibilityInteractionClient: long TIMEOUT_INTERACTION_MILLIS> = 5000L;

        <android.view.accessibility.AccessibilityInteractionClient: int NO_ID> = -1;

        <android.view.accessibility.AccessibilityInteractionClient: java.lang.String LOG_TAG> = "AccessibilityInteractionClient";

        <android.view.accessibility.AccessibilityInteractionClient: boolean DEBUG> = 0;

        <android.view.accessibility.AccessibilityInteractionClient: boolean CHECK_INTEGRITY> = 1;

        $l0 = staticinvoke <android.view.ViewConfiguration: long getSendRecurringAccessibilityEventsInterval()>();

        $d0 = (double) $l0;

        $d1 = $d0 * 1.5;

        $l1 = (long) $d1;

        <android.view.accessibility.AccessibilityInteractionClient: long DISABLE_PREFETCHING_FOR_SCROLLING_MILLIS> = $l1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.view.accessibility.AccessibilityInteractionClient: java.lang.Object sStaticLock> = $r0;

        $r1 = new android.util.LongSparseArray;

        specialinvoke $r1.<android.util.LongSparseArray: void <init>()>();

        <android.view.accessibility.AccessibilityInteractionClient: android.util.LongSparseArray sClients> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray sConnectionCache> = $r2;

        $r3 = new android.util.SparseLongArray;

        specialinvoke $r3.<android.util.SparseLongArray: void <init>()>();

        <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseLongArray sScrollingWindows> = $r3;

        $r4 = new android.view.accessibility.AccessibilityCache;

        $r5 = new android.view.accessibility.AccessibilityCache$AccessibilityNodeRefresher;

        specialinvoke $r5.<android.view.accessibility.AccessibilityCache$AccessibilityNodeRefresher: void <init>()>();

        specialinvoke $r4.<android.view.accessibility.AccessibilityCache: void <init>(android.view.accessibility.AccessibilityCache$AccessibilityNodeRefresher)>($r5);

        <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityCache sAccessibilityCache> = $r4;

        return;
    }

    private void <init>()
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.Object $r2;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        specialinvoke r0.<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: void <init>()>();

        $r1 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.concurrent.atomic.AtomicInteger mInteractionIdCounter> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock> = $r2;

        r0.<android.view.accessibility.AccessibilityInteractionClient: int mInteractionId> = -1;

        return;
    }

    public static void addConnection(int, android.accessibilityservice.IAccessibilityServiceConnection)
    {
        int i0;
        android.util.SparseArray r0, $r1;
        java.lang.Throwable $r2;
        android.accessibilityservice.IAccessibilityServiceConnection r3;

        i0 := @parameter0: int;

        r3 := @parameter1: android.accessibilityservice.IAccessibilityServiceConnection;

        r0 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray sConnectionCache>;

        entermonitor r0;

     label1:
        $r1 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray sConnectionCache>;

        virtualinvoke $r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r3);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void checkFindAccessibilityNodeInfoResultIntegrity(java.util.List)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, i1, $i3, $i4, $i5, i14, i15, i16, i17, i18;
        long l2, $l7, $l11, $l12;
        android.view.accessibility.AccessibilityNodeInfo r2, r14, r15, r17;
        java.lang.Object $r3, $r10, $r11, $r12;
        java.util.HashSet $r4;
        java.util.LinkedList $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        boolean $z1, $z3;
        byte $b8, $b13;
        java.util.List r13;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        r13 := @parameter0: java.util.List;

        $i3 = interfaceinvoke r13.<java.util.List: int size()>();

        if $i3 != 0 goto label01;

        return;

     label01:
        $r3 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(0);

        r14 = (android.view.accessibility.AccessibilityNodeInfo) $r3;

        i0 = interfaceinvoke r13.<java.util.List: int size()>();

        i14 = 1;

     label02:
        if i14 >= i0 goto label06;

        i15 = i14;

     label03:
        r15 = r14;

        if i15 >= i0 goto label05;

        $r12 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(i15);

        r15 = (android.view.accessibility.AccessibilityNodeInfo) $r12;

        $l11 = virtualinvoke r14.<android.view.accessibility.AccessibilityNodeInfo: long getParentNodeId()>();

        $l12 = virtualinvoke r15.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        $b13 = $l11 cmp $l12;

        if $b13 != 0 goto label04;

        goto label05;

     label04:
        i15 = i15 + 1;

        goto label03;

     label05:
        i14 = i14 + 1;

        r14 = r15;

        goto label02;

     label06:
        if r14 != null goto label07;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccessibilityInteractionClient", "No root.");

     label07:
        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        interfaceinvoke $r5.<java.util.Queue: boolean add(java.lang.Object)>(r14);

     label08:
        $z3 = interfaceinvoke $r5.<java.util.Queue: boolean isEmpty()>();

        if $z3 != 0 goto label15;

        $r10 = interfaceinvoke $r5.<java.util.Queue: java.lang.Object poll()>();

        r17 = (android.view.accessibility.AccessibilityNodeInfo) $r10;

        $z1 = virtualinvoke $r4.<java.util.HashSet: boolean add(java.lang.Object)>(r17);

        if $z1 != 0 goto label09;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccessibilityInteractionClient", "Duplicate node.");

        return;

     label09:
        i1 = virtualinvoke r17.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        i16 = 0;

     label10:
        if i16 >= i1 goto label14;

        l2 = virtualinvoke r17.<android.view.accessibility.AccessibilityNodeInfo: long getChildId(int)>(i16);

        i17 = 0;

     label11:
        if i17 >= i0 goto label13;

        $r11 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(i17);

        r2 = (android.view.accessibility.AccessibilityNodeInfo) $r11;

        $l7 = virtualinvoke r2.<android.view.accessibility.AccessibilityNodeInfo: long getSourceNodeId()>();

        $b8 = $l7 cmp l2;

        if $b8 != 0 goto label12;

        interfaceinvoke $r5.<java.util.Queue: boolean add(java.lang.Object)>(r2);

     label12:
        i17 = i17 + 1;

        goto label11;

     label13:
        i16 = i16 + 1;

        goto label10;

     label14:
        goto label08;

     label15:
        $i4 = interfaceinvoke r13.<java.util.List: int size()>();

        $i5 = virtualinvoke $r4.<java.util.HashSet: int size()>();

        i18 = $i4 - $i5;

        if i18 <= 0 goto label16;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i18);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Disconnected nodes.");

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccessibilityInteractionClient", $r9);

     label16:
        return;
    }

    private void clearResultLocked()
    {
        android.view.accessibility.AccessibilityInteractionClient r0;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        r0.<android.view.accessibility.AccessibilityInteractionClient: int mInteractionId> = -1;

        r0.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo mFindAccessibilityNodeInfoResult> = null;

        r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.List mFindAccessibilityNodeInfosResult> = null;

        r0.<android.view.accessibility.AccessibilityInteractionClient: boolean mPerformAccessibilityActionResult> = 0;

        return;
    }

    private void deleteScrollingWindow(int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0;
        android.util.SparseLongArray r1, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        r1 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseLongArray sScrollingWindows>;

        entermonitor r1;

     label1:
        $r3 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseLongArray sScrollingWindows>;

        virtualinvoke $r3.<android.util.SparseLongArray: void delete(int)>(i0);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void finalizeAndCacheAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo, int, boolean, java.lang.String[])
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        int i0;
        boolean z0, $z1, $z2;
        java.lang.String[] r2;
        java.lang.CharSequence r3;
        android.view.accessibility.AccessibilityCache $r4;
        java.lang.String $r5, $r6;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.String[];

        if r1 == null goto label3;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setConnectionId(int)>(i0);

        $z1 = staticinvoke <com.android.internal.util.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r2);

        if $z1 != 0 goto label2;

        r3 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>();

        if r3 == null goto label1;

        $r6 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.String toString()>();

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r2, $r6);

        if $z2 != 0 goto label2;

     label1:
        $r5 = r2[0];

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>($r5);

     label2:
        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setSealed(boolean)>(1);

        if z0 != 0 goto label3;

        $r4 = <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityCache sAccessibilityCache>;

        virtualinvoke $r4.<android.view.accessibility.AccessibilityCache: void add(android.view.accessibility.AccessibilityNodeInfo)>(r1);

     label3:
        return;
    }

    private void finalizeAndCacheAccessibilityNodeInfos(java.util.List, int, boolean, java.lang.String[])
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        java.util.List r1;
        int i0, i1, i2;
        boolean z0;
        java.lang.String[] r2;
        java.lang.Object $r3;
        android.view.accessibility.AccessibilityNodeInfo $r4;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.String[];

        if r1 == null goto label2;

        i1 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= i1 goto label2;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        $r4 = (android.view.accessibility.AccessibilityNodeInfo) $r3;

        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void finalizeAndCacheAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,int,boolean,java.lang.String[])>($r4, i0, z0, r2);

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)
    {
        int i0;
        android.util.SparseArray r0, $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        android.accessibilityservice.IAccessibilityServiceConnection r4;

        i0 := @parameter0: int;

        r0 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray sConnectionCache>;

        entermonitor r0;

     label1:
        $r1 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray sConnectionCache>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r4 = (android.accessibilityservice.IAccessibilityServiceConnection) $r2;

        exitmonitor r0;

     label2:
        return r4;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private android.view.accessibility.AccessibilityNodeInfo getFindAccessibilityNodeInfoResultAndClear(int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.Throwable $r2;
        android.view.accessibility.AccessibilityNodeInfo r3;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: boolean waitForResultTimedLocked(int)>(i0);

        if $z0 == 0 goto label3;

        r3 = r0.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo mFindAccessibilityNodeInfoResult>;

     label2:
        goto label4;

     label3:
        r3 = null;

     label4:
        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void clearResultLocked()>();

        exitmonitor r1;

     label5:
        return r3;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private java.util.List getFindAccessibilityNodeInfosResultAndClear(int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.Throwable $r2;
        java.util.List r3;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: boolean waitForResultTimedLocked(int)>(i0);

        if $z0 == 0 goto label3;

        r3 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.List mFindAccessibilityNodeInfosResult>;

     label2:
        goto label4;

     label3:
        r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

     label4:
        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void clearResultLocked()>();

        $z1 = <android.os.Build: boolean IS_DEBUGGABLE>;

        if $z1 == 0 goto label5;

        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void checkFindAccessibilityNodeInfoResultIntegrity(java.util.List)>(r3);

     label5:
        exitmonitor r1;

     label6:
        return r3;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public static android.view.accessibility.AccessibilityInteractionClient getInstance()
    {
        java.lang.Thread $r0;
        long $l0;
        android.view.accessibility.AccessibilityInteractionClient $r1;

        $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l0 = virtualinvoke $r0.<java.lang.Thread: long getId()>();

        $r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstanceForThread(long)>($l0);

        return $r1;
    }

    public static android.view.accessibility.AccessibilityInteractionClient getInstanceForThread(long)
    {
        long l0;
        java.lang.Object r0, $r3;
        android.view.accessibility.AccessibilityInteractionClient r1, r6;
        android.util.LongSparseArray $r2, $r4;
        java.lang.Throwable $r5;

        l0 := @parameter0: long;

        r0 = <android.view.accessibility.AccessibilityInteractionClient: java.lang.Object sStaticLock>;

        entermonitor r0;

     label1:
        $r2 = <android.view.accessibility.AccessibilityInteractionClient: android.util.LongSparseArray sClients>;

        $r3 = virtualinvoke $r2.<android.util.LongSparseArray: java.lang.Object get(long)>(l0);

        r1 = (android.view.accessibility.AccessibilityInteractionClient) $r3;

     label2:
        r6 = r1;

        if r1 != null goto label5;

     label3:
        r6 = new android.view.accessibility.AccessibilityInteractionClient;

        specialinvoke r6.<android.view.accessibility.AccessibilityInteractionClient: void <init>()>();

     label4:
        $r4 = <android.view.accessibility.AccessibilityInteractionClient: android.util.LongSparseArray sClients>;

        virtualinvoke $r4.<android.util.LongSparseArray: void put(long,java.lang.Object)>(l0, r6);

     label5:
        exitmonitor r0;

     label6:
        return r6;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private boolean getPerformAccessibilityActionResultAndClear(int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0;
        java.lang.Object r1;
        boolean $z0, z1;
        java.lang.Throwable $r3;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        entermonitor r1;

     label1:
        $z0 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: boolean waitForResultTimedLocked(int)>(i0);

        if $z0 == 0 goto label3;

        z1 = r0.<android.view.accessibility.AccessibilityInteractionClient: boolean mPerformAccessibilityActionResult>;

     label2:
        goto label4;

     label3:
        z1 = 0;

     label4:
        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void clearResultLocked()>();

        exitmonitor r1;

     label5:
        return z1;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private android.os.Message getSameProcessMessageAndClear()
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.os.Message r3;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        entermonitor r1;

     label1:
        r3 = r0.<android.view.accessibility.AccessibilityInteractionClient: android.os.Message mSameThreadMessage>;

        r0.<android.view.accessibility.AccessibilityInteractionClient: android.os.Message mSameThreadMessage> = null;

        exitmonitor r1;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private static java.lang.String idToString(int, long)
    {
        int i0;
        long l1;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, $r6;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r4 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: java.lang.String idToString(long)>(l1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private boolean isWindowScrolling(int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0;
        android.util.SparseLongArray r1, $r3, $r4;
        long l1, $l3, $l4, $l5;
        byte $b2, $b6;
        java.lang.Throwable $r5;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        r1 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseLongArray sScrollingWindows>;

        entermonitor r1;

     label01:
        $r3 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseLongArray sScrollingWindows>;

        l1 = virtualinvoke $r3.<android.util.SparseLongArray: long get(int)>(i0);

     label02:
        $b2 = l1 cmp 0L;

        if $b2 != 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return 0;

     label05:
        $l3 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l4 = <android.view.accessibility.AccessibilityInteractionClient: long DISABLE_PREFETCHING_FOR_SCROLLING_MILLIS>;

        $l5 = $l4 + l1;

        $b6 = $l3 cmp $l5;

        if $b6 <= 0 goto label07;

        $r4 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseLongArray sScrollingWindows>;

        virtualinvoke $r4.<android.util.SparseLongArray: void delete(int)>(i0);

        exitmonitor r1;

     label06:
        return 0;

     label07:
        exitmonitor r1;

     label08:
        return 1;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static void removeConnection(int)
    {
        int i0;
        android.util.SparseArray r0, $r2;
        java.lang.Throwable $r3;

        i0 := @parameter0: int;

        r0 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray sConnectionCache>;

        entermonitor r0;

     label1:
        $r2 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray sConnectionCache>;

        virtualinvoke $r2.<android.util.SparseArray: void remove(int)>(i0);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void setCache(android.view.accessibility.AccessibilityCache)
    {
        android.view.accessibility.AccessibilityCache r0;

        r0 := @parameter0: android.view.accessibility.AccessibilityCache;

        <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityCache sAccessibilityCache> = r0;

        return;
    }

    private void updateScrollingWindow(int, long)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0;
        long l1;
        android.util.SparseLongArray r1, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseLongArray sScrollingWindows>;

        entermonitor r1;

     label1:
        $r3 = <android.view.accessibility.AccessibilityInteractionClient: android.util.SparseLongArray sScrollingWindows>;

        virtualinvoke $r3.<android.util.SparseLongArray: void put(int,long)>(i0, l1);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private boolean waitForResultTimedLocked(int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, $i3, $i4;
        long l1, l2, $l5, $l6;
        byte $b7;
        java.lang.Object $r1;
        android.os.Handler $r2;
        java.lang.Throwable $r3;
        android.os.Message r4;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

     label01:
        r4 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: android.os.Message getSameProcessMessageAndClear()>();

     label02:
        if r4 == null goto label04;

     label03:
        $r2 = virtualinvoke r4.<android.os.Message: android.os.Handler getTarget()>();

        virtualinvoke $r2.<android.os.Handler: void handleMessage(android.os.Message)>(r4);

     label04:
        $i3 = r0.<android.view.accessibility.AccessibilityInteractionClient: int mInteractionId>;

        if $i3 != i0 goto label06;

     label05:
        return 1;

     label06:
        $i4 = r0.<android.view.accessibility.AccessibilityInteractionClient: int mInteractionId>;

        if $i4 <= i0 goto label08;

     label07:
        return 0;

     label08:
        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l6 = $l5 - l1;

        l2 = 5000L - $l6;

     label09:
        $b7 = l2 cmp 0L;

        if $b7 > 0 goto label10;

        return 0;

     label10:
        $r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        virtualinvoke $r1.<java.lang.Object: void wait(long)>(l2);

     label11:
        goto label13;

     label12:
        $r3 := @caughtexception;

     label13:
        goto label01;

        catch java.lang.InterruptedException from label01 to label02 with label12;
        catch java.lang.InterruptedException from label03 to label04 with label12;
        catch java.lang.InterruptedException from label04 to label05 with label12;
        catch java.lang.InterruptedException from label06 to label07 with label12;
        catch java.lang.InterruptedException from label08 to label09 with label12;
        catch java.lang.InterruptedException from label10 to label11 with label12;
    }

    public void clearCache()
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        android.view.accessibility.AccessibilityCache $r1;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        $r1 = <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityCache sAccessibilityCache>;

        virtualinvoke $r1.<android.view.accessibility.AccessibilityCache: void clear()>();

        return;
    }

    public android.view.accessibility.AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int, int, long, boolean, int, android.os.Bundle)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, i2, $i5, $i6, $i7, $i8, i10, i11, i12;
        long l1, l3, l4;
        boolean z0, z1, $z2;
        java.lang.Object $r1, $r3;
        android.view.accessibility.AccessibilityNodeInfo $r2, $r4, r16;
        java.lang.IllegalArgumentException $r5;
        android.os.RemoteException $r6, $r7, $r10, $r11, $r12, r17;
        java.lang.Throwable $r8, $r9, r22;
        android.os.Bundle r13;
        android.accessibilityservice.IAccessibilityServiceConnection r14;
        android.view.accessibility.AccessibilityCache r15;
        java.util.concurrent.atomic.AtomicInteger $r18;
        java.lang.Thread $r19;
        java.lang.String[] r20;
        java.util.List r21;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i10 := @parameter0: int;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        i11 := @parameter4: int;

        r13 := @parameter5: android.os.Bundle;

        $i5 = i11 & 2;

        if $i5 == 0 goto label02;

        $i8 = i11 & 1;

        if $i8 == 0 goto label01;

        goto label02;

     label01:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("FLAG_PREFETCH_SIBLINGS requires FLAG_PREFETCH_PREDECESSORS");

        throw $r5;

     label02:
        r14 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>(i10);

     label03:
        if r14 == null goto label34;

        if z0 != 0 goto label09;

     label04:
        r15 = <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityCache sAccessibilityCache>;

     label05:
        r16 = virtualinvoke r15.<android.view.accessibility.AccessibilityCache: android.view.accessibility.AccessibilityNodeInfo getNode(int,long)>(i0, l1);

     label06:
        if r16 == null goto label07;

        return r16;

     label07:
        goto label10;

     label08:
        $r10 := @caughtexception;

        r17 = $r10;

        goto label36;

     label09:
        i11 = i11 & -8;

     label10:
        $i6 = i11 & 7;

        if $i6 == 0 goto label14;

     label11:
        z1 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: boolean isWindowScrolling(int)>(i0);

     label12:
        if z1 == 0 goto label14;

        i11 = i11 & -8;

        goto label14;

     label13:
        $r12 := @caughtexception;

        r17 = $r12;

        goto label36;

     label14:
        $r18 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.concurrent.atomic.AtomicInteger mInteractionIdCounter>;

        i2 = virtualinvoke $r18.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label15:
        $r19 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        l4 = virtualinvoke $r19.<java.lang.Thread: long getId()>();

     label16:
        r20 = interfaceinvoke r14.<android.accessibilityservice.IAccessibilityServiceConnection: java.lang.String[] findAccessibilityNodeInfoByAccessibilityId(int,long,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long,android.os.Bundle)>(i0, l1, i2, r0, i11, l4, r13);

     label17:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label18:
        if r20 == null goto label27;

     label19:
        r21 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.List getFindAccessibilityNodeInfosResultAndClear(int)>(i2);

     label20:
        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void finalizeAndCacheAccessibilityNodeInfos(java.util.List,int,boolean,java.lang.String[])>(r21, i10, z0, r20);

     label21:
        if r21 == null goto label34;

     label22:
        $z2 = interfaceinvoke r21.<java.util.List: boolean isEmpty()>();

        if $z2 != 0 goto label34;

     label23:
        i12 = 1;

     label24:
        $i7 = interfaceinvoke r21.<java.util.List: int size()>();

        if i12 >= $i7 goto label26;

        $r3 = interfaceinvoke r21.<java.util.List: java.lang.Object get(int)>(i12);

        $r4 = (android.view.accessibility.AccessibilityNodeInfo) $r3;

        virtualinvoke $r4.<android.view.accessibility.AccessibilityNodeInfo: void recycle()>();

     label25:
        i12 = i12 + 1;

        goto label24;

     label26:
        $r1 = interfaceinvoke r21.<java.util.List: java.lang.Object get(int)>(0);

        $r2 = (android.view.accessibility.AccessibilityNodeInfo) $r1;

        return $r2;

     label27:
        goto label34;

     label28:
        $r8 := @caughtexception;

        r22 = $r8;

        goto label30;

     label29:
        $r9 := @caughtexception;

        r22 = $r9;

     label30:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label31:
        throw r22;

     label32:
        $r7 := @caughtexception;

        r17 = $r7;

        goto label36;

     label33:
        $r6 := @caughtexception;

        r17 = $r6;

        goto label36;

     label34:
        goto label37;

     label35:
        $r11 := @caughtexception;

        r17 = $r11;

     label36:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityInteractionClient", "Error while calling remote findAccessibilityNodeInfoByAccessibilityId", r17);

     label37:
        return null;

        catch android.os.RemoteException from label02 to label03 with label35;
        catch android.os.RemoteException from label04 to label05 with label08;
        catch android.os.RemoteException from label05 to label06 with label35;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch android.os.RemoteException from label14 to label15 with label33;
        catch java.lang.Throwable from label15 to label16 with label29;
        catch java.lang.Throwable from label16 to label17 with label28;
        catch android.os.RemoteException from label17 to label18 with label33;
        catch android.os.RemoteException from label19 to label20 with label33;
        catch android.os.RemoteException from label20 to label21 with label32;
        catch android.os.RemoteException from label22 to label23 with label32;
        catch android.os.RemoteException from label24 to label25 with label32;
        catch android.os.RemoteException from label26 to label27 with label32;
        catch android.os.RemoteException from label30 to label31 with label32;
        catch android.os.RemoteException from label31 to label32 with label32;
    }

    public android.view.accessibility.AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int, android.os.IBinder, long, boolean, int, android.os.Bundle)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, i2, i5;
        long l1;
        boolean z0;
        android.os.Bundle r1;
        android.accessibilityservice.IAccessibilityServiceConnection r2;
        android.view.accessibility.AccessibilityNodeInfo $r3;
        android.os.RemoteException $r4;
        android.os.IBinder r5;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        r5 := @parameter1: android.os.IBinder;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        i2 := @parameter4: int;

        r1 := @parameter5: android.os.Bundle;

        if r5 != null goto label1;

        return null;

     label1:
        r2 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>(i0);

     label2:
        i5 = -1;

        if r2 == null goto label4;

     label3:
        i5 = interfaceinvoke r2.<android.accessibilityservice.IAccessibilityServiceConnection: int getWindowIdForLeashToken(android.os.IBinder)>(r5);

     label4:
        goto label6;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityInteractionClient", "Error while calling remote getWindowIdForLeashToken", $r4);

        i5 = -1;

     label6:
        if i5 != -1 goto label7;

        return null;

     label7:
        $r3 = virtualinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int,int,long,boolean,int,android.os.Bundle)>(i0, i5, l1, z0, i2, r1);

        return $r3;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public java.util.List findAccessibilityNodeInfosByText(int, int, long, java.lang.String)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, i1, i3;
        long l2, l4, $l5;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.Thread $r2;
        android.os.RemoteException $r3, $r5, r11;
        java.lang.Throwable $r4;
        java.lang.String r6;
        android.accessibilityservice.IAccessibilityServiceConnection r7;
        java.lang.String[] r8;
        java.util.List r9, $r12;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r6 := @parameter3: java.lang.String;

     label01:
        r7 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>(i0);

     label02:
        if r7 == null goto label17;

     label03:
        $r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.concurrent.atomic.AtomicInteger mInteractionIdCounter>;

        i3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l5 = virtualinvoke $r2.<java.lang.Thread: long getId()>();

        r8 = interfaceinvoke r7.<android.accessibilityservice.IAccessibilityServiceConnection: java.lang.String[] findAccessibilityNodeInfosByText(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>(i1, l2, r6, i3, r0, $l5);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

     label06:
        if r8 == null goto label12;

     label07:
        r9 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.List getFindAccessibilityNodeInfosResultAndClear(int)>(i3);

     label08:
        if r9 == null goto label11;

     label09:
        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void finalizeAndCacheAccessibilityNodeInfos(java.util.List,int,boolean,java.lang.String[])>(r9, i0, 0, r8);

     label10:
        return r9;

     label11:
        goto label17;

     label12:
        goto label17;

     label13:
        $r4 := @caughtexception;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

     label15:
        throw $r4;

     label16:
        $r3 := @caughtexception;

        r11 = $r3;

        goto label19;

     label17:
        goto label20;

     label18:
        $r5 := @caughtexception;

        r11 = $r5;

     label19:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityInteractionClient", "Error while calling remote findAccessibilityNodeInfosByViewText", r11);

     label20:
        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r12;

        catch android.os.RemoteException from label01 to label02 with label18;
        catch android.os.RemoteException from label03 to label04 with label18;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch android.os.RemoteException from label05 to label06 with label18;
        catch android.os.RemoteException from label07 to label08 with label18;
        catch android.os.RemoteException from label09 to label10 with label16;
        catch android.os.RemoteException from label14 to label15 with label16;
        catch android.os.RemoteException from label15 to label16 with label16;
    }

    public java.util.List findAccessibilityNodeInfosByViewId(int, int, long, java.lang.String)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, i1, i3;
        long l2, l4, $l5;
        java.util.concurrent.atomic.AtomicInteger $r1;
        java.lang.Thread $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4, $r5, r11;
        java.lang.String r6;
        android.accessibilityservice.IAccessibilityServiceConnection r7;
        java.lang.String[] r8;
        java.util.List r9, $r12;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        r6 := @parameter3: java.lang.String;

     label01:
        r7 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>(i0);

     label02:
        if r7 == null goto label17;

     label03:
        $r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.concurrent.atomic.AtomicInteger mInteractionIdCounter>;

        i3 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        l4 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l5 = virtualinvoke $r2.<java.lang.Thread: long getId()>();

        r8 = interfaceinvoke r7.<android.accessibilityservice.IAccessibilityServiceConnection: java.lang.String[] findAccessibilityNodeInfosByViewId(int,long,java.lang.String,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>(i1, l2, r6, i3, r0, $l5);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

     label06:
        if r8 == null goto label12;

     label07:
        r9 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.List getFindAccessibilityNodeInfosResultAndClear(int)>(i3);

     label08:
        if r9 == null goto label11;

     label09:
        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void finalizeAndCacheAccessibilityNodeInfos(java.util.List,int,boolean,java.lang.String[])>(r9, i0, 0, r8);

     label10:
        return r9;

     label11:
        goto label17;

     label12:
        goto label17;

     label13:
        $r3 := @caughtexception;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l4);

     label15:
        throw $r3;

     label16:
        $r4 := @caughtexception;

        r11 = $r4;

        goto label19;

     label17:
        goto label20;

     label18:
        $r5 := @caughtexception;

        r11 = $r5;

     label19:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityInteractionClient", "Error while calling remote findAccessibilityNodeInfoByViewIdInActiveWindow", r11);

     label20:
        $r12 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r12;

        catch android.os.RemoteException from label01 to label02 with label18;
        catch android.os.RemoteException from label03 to label04 with label18;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch android.os.RemoteException from label05 to label06 with label18;
        catch android.os.RemoteException from label07 to label08 with label18;
        catch android.os.RemoteException from label09 to label10 with label16;
        catch android.os.RemoteException from label14 to label15 with label16;
        catch android.os.RemoteException from label15 to label16 with label16;
    }

    public android.view.accessibility.AccessibilityNodeInfo findFocus(int, int, long, int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, i1, i3, i4;
        long l2, l5, $l6;
        android.view.accessibility.AccessibilityNodeInfo r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.lang.Thread $r3;
        android.os.RemoteException $r4, $r5, r10;
        java.lang.Throwable $r6;
        android.accessibilityservice.IAccessibilityServiceConnection r7;
        java.lang.String[] r8;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

     label01:
        r7 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>(i0);

     label02:
        if r7 == null goto label15;

     label03:
        $r2 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.concurrent.atomic.AtomicInteger mInteractionIdCounter>;

        i4 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l6 = virtualinvoke $r3.<java.lang.Thread: long getId()>();

        r8 = interfaceinvoke r7.<android.accessibilityservice.IAccessibilityServiceConnection: java.lang.String[] findFocus(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>(i1, l2, i3, i4, r0, $l6);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

     label06:
        if r8 == null goto label10;

     label07:
        r1 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo getFindAccessibilityNodeInfoResultAndClear(int)>(i4);

     label08:
        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void finalizeAndCacheAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,int,boolean,java.lang.String[])>(r1, i0, 0, r8);

     label09:
        return r1;

     label10:
        goto label15;

     label11:
        $r6 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

     label13:
        throw $r6;

     label14:
        $r5 := @caughtexception;

        r10 = $r5;

        goto label17;

     label15:
        goto label18;

     label16:
        $r4 := @caughtexception;

        r10 = $r4;

     label17:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityInteractionClient", "Error while calling remote findFocus", r10);

     label18:
        return null;

        catch android.os.RemoteException from label01 to label02 with label16;
        catch android.os.RemoteException from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch android.os.RemoteException from label05 to label06 with label16;
        catch android.os.RemoteException from label07 to label08 with label16;
        catch android.os.RemoteException from label08 to label09 with label14;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch android.os.RemoteException from label13 to label14 with label14;
    }

    public android.view.accessibility.AccessibilityNodeInfo focusSearch(int, int, long, int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, i1, i3, i4;
        long l2, l5, $l6;
        android.view.accessibility.AccessibilityNodeInfo r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.lang.Thread $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5, $r6, r10;
        android.accessibilityservice.IAccessibilityServiceConnection r7;
        java.lang.String[] r8;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        i3 := @parameter3: int;

     label01:
        r7 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>(i0);

     label02:
        if r7 == null goto label15;

     label03:
        $r2 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.concurrent.atomic.AtomicInteger mInteractionIdCounter>;

        i4 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        l5 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l6 = virtualinvoke $r3.<java.lang.Thread: long getId()>();

        r8 = interfaceinvoke r7.<android.accessibilityservice.IAccessibilityServiceConnection: java.lang.String[] focusSearch(int,long,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>(i1, l2, i3, i4, r0, $l6);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

     label06:
        if r8 == null goto label10;

     label07:
        r1 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo getFindAccessibilityNodeInfoResultAndClear(int)>(i4);

     label08:
        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void finalizeAndCacheAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,int,boolean,java.lang.String[])>(r1, i0, 0, r8);

     label09:
        return r1;

     label10:
        goto label15;

     label11:
        $r4 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l5);

     label13:
        throw $r4;

     label14:
        $r5 := @caughtexception;

        r10 = $r5;

        goto label17;

     label15:
        goto label18;

     label16:
        $r6 := @caughtexception;

        r10 = $r6;

     label17:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityInteractionClient", "Error while calling remote accessibilityFocusSearch", r10);

     label18:
        return null;

        catch android.os.RemoteException from label01 to label02 with label16;
        catch android.os.RemoteException from label03 to label04 with label16;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch android.os.RemoteException from label05 to label06 with label16;
        catch android.os.RemoteException from label07 to label08 with label16;
        catch android.os.RemoteException from label08 to label09 with label14;
        catch android.os.RemoteException from label12 to label13 with label14;
        catch android.os.RemoteException from label13 to label14 with label14;
    }

    public android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow(int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0;
        long $l1;
        android.view.accessibility.AccessibilityNodeInfo $r1;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        $l1 = <android.view.accessibility.AccessibilityNodeInfo: long ROOT_NODE_ID>;

        $r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo findAccessibilityNodeInfoByAccessibilityId(int,int,long,boolean,int,android.os.Bundle)>(i0, 2147483647, $l1, 0, 4, null);

        return $r1;
    }

    public android.view.accessibility.AccessibilityWindowInfo getWindow(int, int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, i1;
        android.view.accessibility.AccessibilityWindowInfo $r1;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityWindowInfo getWindow(int,int,boolean)>(i0, i1, 0);

        return $r1;
    }

    public android.view.accessibility.AccessibilityWindowInfo getWindow(int, int, boolean)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, i1;
        boolean z0;
        android.accessibilityservice.IAccessibilityServiceConnection r1;
        long l2;
        android.view.accessibility.AccessibilityCache $r2, $r3;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;
        android.view.accessibility.AccessibilityWindowInfo r6, r7;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

     label01:
        r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>(i0);

     label02:
        if r1 == null goto label14;

        if z0 != 0 goto label05;

     label03:
        $r3 = <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityCache sAccessibilityCache>;

        r6 = virtualinvoke $r3.<android.view.accessibility.AccessibilityCache: android.view.accessibility.AccessibilityWindowInfo getWindow(int)>(i1);

     label04:
        if r6 == null goto label05;

        return r6;

     label05:
        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        r7 = interfaceinvoke r1.<android.accessibilityservice.IAccessibilityServiceConnection: android.view.accessibility.AccessibilityWindowInfo getWindow(int)>(i1);

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label08:
        if r7 == null goto label14;

        if z0 != 0 goto label10;

     label09:
        $r2 = <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityCache sAccessibilityCache>;

        virtualinvoke $r2.<android.view.accessibility.AccessibilityCache: void addWindow(android.view.accessibility.AccessibilityWindowInfo)>(r7);

     label10:
        return r7;

     label11:
        $r5 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

     label13:
        throw $r5;

     label14:
        goto label16;

     label15:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityInteractionClient", "Error while calling remote getWindow", $r4);

     label16:
        return null;

        catch android.os.RemoteException from label01 to label02 with label15;
        catch android.os.RemoteException from label03 to label04 with label15;
        catch android.os.RemoteException from label05 to label06 with label15;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch android.os.RemoteException from label07 to label08 with label15;
        catch android.os.RemoteException from label09 to label10 with label15;
        catch android.os.RemoteException from label12 to label13 with label15;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    public java.util.List getWindows(int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, $i1;
        android.util.SparseArray r1;
        java.util.List $r2, $r4;
        java.lang.Object $r3;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

        r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: android.util.SparseArray getWindowsOnAllDisplays(int)>(i0);

        $i1 = virtualinvoke r1.<android.util.SparseArray: int size()>();

        if $i1 <= 0 goto label1;

        $r3 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object valueAt(int)>(0);

        $r4 = (java.util.List) $r3;

        return $r4;

     label1:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;
    }

    public android.util.SparseArray getWindowsOnAllDisplays(int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0;
        android.accessibilityservice.IAccessibilityServiceConnection r1;
        long l1;
        android.util.SparseArray $r2, r7;
        android.view.accessibility.AccessibilityCache $r3, $r4;
        android.os.RemoteException $r5;
        java.lang.Throwable $r6;
        android.view.accessibility.AccessibilityWindowInfo$WindowListSparseArray r8;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i0 := @parameter0: int;

     label01:
        r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>(i0);

     label02:
        if r1 == null goto label14;

     label03:
        $r3 = <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityCache sAccessibilityCache>;

        r7 = virtualinvoke $r3.<android.view.accessibility.AccessibilityCache: android.util.SparseArray getWindowsOnAllDisplays()>();

     label04:
        if r7 == null goto label05;

        return r7;

     label05:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label06:
        r8 = interfaceinvoke r1.<android.accessibilityservice.IAccessibilityServiceConnection: android.view.accessibility.AccessibilityWindowInfo$WindowListSparseArray getWindows()>();

     label07:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label08:
        if r8 == null goto label14;

     label09:
        $r4 = <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityCache sAccessibilityCache>;

        virtualinvoke $r4.<android.view.accessibility.AccessibilityCache: void setWindowsOnAllDisplays(android.util.SparseArray)>(r8);

     label10:
        return r8;

     label11:
        $r6 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label13:
        throw $r6;

     label14:
        goto label16;

     label15:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityInteractionClient", "Error while calling remote getWindowsOnAllDisplays", $r5);

     label16:
        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        return $r2;

        catch android.os.RemoteException from label01 to label02 with label15;
        catch android.os.RemoteException from label03 to label04 with label15;
        catch android.os.RemoteException from label05 to label06 with label15;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch android.os.RemoteException from label07 to label08 with label15;
        catch android.os.RemoteException from label09 to label10 with label15;
        catch android.os.RemoteException from label12 to label13 with label15;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    public void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        android.view.accessibility.AccessibilityEvent r1;
        int i0, $i1, $i3, $i4;
        long $l2;
        android.view.accessibility.AccessibilityCache $r2;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        if i0 == 4096 goto label2;

        if i0 == 4194304 goto label1;

        goto label3;

     label1:
        $i3 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getWindowChanges()>();

        if $i3 != 2 goto label3;

        $i4 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void deleteScrollingWindow(int)>($i4);

        goto label3;

     label2:
        $i1 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: int getWindowId()>();

        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: void updateScrollingWindow(int,long)>($i1, $l2);

     label3:
        $r2 = <android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityCache sAccessibilityCache>;

        virtualinvoke $r2.<android.view.accessibility.AccessibilityCache: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        return;
    }

    public boolean performAccessibilityAction(int, int, long, int, android.os.Bundle)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, i2, i6, i7;
        long l1, l3, $l4;
        android.accessibilityservice.IAccessibilityServiceConnection r1;
        boolean z0, $z1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        java.lang.Thread $r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        android.os.Bundle r6;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        r6 := @parameter4: android.os.Bundle;

     label01:
        r1 = staticinvoke <android.view.accessibility.AccessibilityInteractionClient: android.accessibilityservice.IAccessibilityServiceConnection getConnection(int)>(i6);

     label02:
        if r1 == null goto label11;

     label03:
        $r2 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.concurrent.atomic.AtomicInteger mInteractionIdCounter>;

        i7 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        l3 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label04:
        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $l4 = virtualinvoke $r3.<java.lang.Thread: long getId()>();

        z0 = interfaceinvoke r1.<android.accessibilityservice.IAccessibilityServiceConnection: boolean performAccessibilityAction(int,long,int,android.os.Bundle,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,long)>(i0, l1, i2, r6, i7, r0, $l4);

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label06:
        if z0 == 0 goto label11;

     label07:
        $z1 = specialinvoke r0.<android.view.accessibility.AccessibilityInteractionClient: boolean getPerformAccessibilityActionResultAndClear(int)>(i7);

        return $z1;

     label08:
        $r4 := @caughtexception;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l3);

     label10:
        throw $r4;

     label11:
        goto label13;

     label12:
        $r5 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityInteractionClient", "Error while calling remote performAccessibilityAction", $r5);

     label13:
        return 0;

        catch android.os.RemoteException from label01 to label02 with label12;
        catch android.os.RemoteException from label03 to label04 with label12;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch android.os.RemoteException from label05 to label06 with label12;
        catch android.os.RemoteException from label07 to label08 with label12;
        catch android.os.RemoteException from label09 to label10 with label12;
        catch android.os.RemoteException from label10 to label11 with label12;
    }

    public void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo, int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, $i1;
        java.lang.Object r1, $r2;
        java.lang.Throwable $r3;
        android.view.accessibility.AccessibilityNodeInfo r4;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        r4 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        i0 := @parameter1: int;

        r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<android.view.accessibility.AccessibilityInteractionClient: int mInteractionId>;

        if i0 <= $i1 goto label2;

        r0.<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityNodeInfo mFindAccessibilityNodeInfoResult> = r4;

        r0.<android.view.accessibility.AccessibilityInteractionClient: int mInteractionId> = i0;

     label2:
        $r2 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        virtualinvoke $r2.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setFindAccessibilityNodeInfosResult(java.util.List, int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        int i0, $i1, $i2, $i3;
        java.lang.Object r1, $r6;
        java.util.ArrayList r2;
        java.util.List $r3, r5;
        java.lang.Throwable $r4;
        boolean z0;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        r5 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        entermonitor r1;

     label01:
        $i1 = r0.<android.view.accessibility.AccessibilityInteractionClient: int mInteractionId>;

        if i0 <= $i1 goto label13;

     label02:
        if r5 == null goto label11;

     label03:
        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        if $i2 == $i3 goto label05;

     label04:
        z0 = 1;

        goto label06;

     label05:
        z0 = 0;

     label06:
        if z0 != 0 goto label09;

     label07:
        r2 = new java.util.ArrayList;

        specialinvoke r2.<java.util.ArrayList: void <init>(java.util.Collection)>(r5);

        r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.List mFindAccessibilityNodeInfosResult> = r2;

     label08:
        goto label10;

     label09:
        r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.List mFindAccessibilityNodeInfosResult> = r5;

     label10:
        goto label12;

     label11:
        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<android.view.accessibility.AccessibilityInteractionClient: java.util.List mFindAccessibilityNodeInfosResult> = $r3;

     label12:
        r0.<android.view.accessibility.AccessibilityInteractionClient: int mInteractionId> = i0;

     label13:
        $r6 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        virtualinvoke $r6.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label14:
        return;

     label15:
        $r4 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void setPerformAccessibilityActionResult(boolean, int)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        boolean z0;
        int i0, $i1;
        java.lang.Object r1, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        entermonitor r1;

     label1:
        $i1 = r0.<android.view.accessibility.AccessibilityInteractionClient: int mInteractionId>;

        if i0 <= $i1 goto label2;

        r0.<android.view.accessibility.AccessibilityInteractionClient: boolean mPerformAccessibilityActionResult> = z0;

        r0.<android.view.accessibility.AccessibilityInteractionClient: int mInteractionId> = i0;

     label2:
        $r3 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        virtualinvoke $r3.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setSameThreadMessage(android.os.Message)
    {
        android.view.accessibility.AccessibilityInteractionClient r0;
        java.lang.Object r1, $r2;
        java.lang.Throwable $r3;
        android.os.Message r4;

        r0 := @this: android.view.accessibility.AccessibilityInteractionClient;

        r4 := @parameter0: android.os.Message;

        r1 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        entermonitor r1;

     label1:
        r0.<android.view.accessibility.AccessibilityInteractionClient: android.os.Message mSameThreadMessage> = r4;

        $r2 = r0.<android.view.accessibility.AccessibilityInteractionClient: java.lang.Object mInstanceLock>;

        virtualinvoke $r2.<java.lang.Object: void notifyAll()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
