public final class android.view.accessibility.AccessibilityManager extends java.lang.Object
{
    public static final int ACCESSIBILITY_BUTTON;
    public static final int ACCESSIBILITY_SHORTCUT_KEY;
    public static final java.lang.String ACTION_CHOOSE_ACCESSIBILITY_BUTTON;
    public static final int AUTOCLICK_DELAY_DEFAULT;
    public static final int DALTONIZER_CORRECT_DEUTERANOMALY;
    public static final int DALTONIZER_DISABLED;
    public static final int DALTONIZER_SIMULATE_MONOCHROMACY;
    private static final boolean DEBUG;
    public static final int FLAG_CONTENT_CONTROLS;
    public static final int FLAG_CONTENT_ICONS;
    public static final int FLAG_CONTENT_TEXT;
    private static final java.lang.String LOG_TAG;
    public static final int STATE_FLAG_ACCESSIBILITY_ENABLED;
    public static final int STATE_FLAG_DISPATCH_DOUBLE_TAP;
    public static final int STATE_FLAG_HIGH_TEXT_CONTRAST_ENABLED;
    public static final int STATE_FLAG_REQUEST_MULTI_FINGER_GESTURES;
    public static final int STATE_FLAG_TOUCH_EXPLORATION_ENABLED;
    private static android.view.accessibility.AccessibilityManager sInstance;
    static final java.lang.Object sInstanceSync;
    android.view.accessibility.AccessibilityManager$AccessibilityPolicy mAccessibilityPolicy;
    private final android.util.ArrayMap mAccessibilityStateChangeListeners;
    final android.os.Handler$Callback mCallback;
    private final android.view.accessibility.IAccessibilityManagerClient$Stub mClient;
    final android.os.Handler mHandler;
    private final android.util.ArrayMap mHighTextContrastStateChangeListeners;
    int mInteractiveUiTimeout;
    boolean mIsEnabled;
    boolean mIsHighTextContrastEnabled;
    boolean mIsTouchExplorationEnabled;
    private final java.lang.Object mLock;
    int mNonInteractiveUiTimeout;
    int mRelevantEventTypes;
    private android.util.SparseArray mRequestPreparerLists;
    private android.view.accessibility.IAccessibilityManager mService;
    private final android.util.ArrayMap mServicesStateChangeListeners;
    private final android.util.ArrayMap mTouchExplorationStateChangeListeners;
    final int mUserId;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.view.accessibility.AccessibilityManager: int STATE_FLAG_TOUCH_EXPLORATION_ENABLED> = 2;

        <android.view.accessibility.AccessibilityManager: int STATE_FLAG_REQUEST_MULTI_FINGER_GESTURES> = 16;

        <android.view.accessibility.AccessibilityManager: int STATE_FLAG_HIGH_TEXT_CONTRAST_ENABLED> = 4;

        <android.view.accessibility.AccessibilityManager: int STATE_FLAG_DISPATCH_DOUBLE_TAP> = 8;

        <android.view.accessibility.AccessibilityManager: int STATE_FLAG_ACCESSIBILITY_ENABLED> = 1;

        <android.view.accessibility.AccessibilityManager: java.lang.String LOG_TAG> = "AccessibilityManager";

        <android.view.accessibility.AccessibilityManager: int FLAG_CONTENT_TEXT> = 2;

        <android.view.accessibility.AccessibilityManager: int FLAG_CONTENT_ICONS> = 1;

        <android.view.accessibility.AccessibilityManager: int FLAG_CONTENT_CONTROLS> = 4;

        <android.view.accessibility.AccessibilityManager: boolean DEBUG> = 0;

        <android.view.accessibility.AccessibilityManager: int DALTONIZER_SIMULATE_MONOCHROMACY> = 0;

        <android.view.accessibility.AccessibilityManager: int DALTONIZER_DISABLED> = -1;

        <android.view.accessibility.AccessibilityManager: int DALTONIZER_CORRECT_DEUTERANOMALY> = 12;

        <android.view.accessibility.AccessibilityManager: int AUTOCLICK_DELAY_DEFAULT> = 600;

        <android.view.accessibility.AccessibilityManager: java.lang.String ACTION_CHOOSE_ACCESSIBILITY_BUTTON> = "com.android.internal.intent.action.CHOOSE_ACCESSIBILITY_BUTTON";

        <android.view.accessibility.AccessibilityManager: int ACCESSIBILITY_SHORTCUT_KEY> = 1;

        <android.view.accessibility.AccessibilityManager: int ACCESSIBILITY_BUTTON> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.view.accessibility.AccessibilityManager: java.lang.Object sInstanceSync> = $r0;

        return;
    }

    public void <init>(android.content.Context, android.view.accessibility.IAccessibilityManager, int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;
        java.lang.Object $r1, r14;
        android.util.ArrayMap $r2, $r3, $r4, $r5;
        android.view.accessibility.AccessibilityManager$1 $r6;
        android.view.accessibility.AccessibilityManager$MyCallback $r7;
        android.os.Handler $r8;
        android.os.Looper $r9;
        android.os.Handler$Callback $r10;
        java.lang.Throwable $r11;
        android.content.Context r12;
        android.view.accessibility.IAccessibilityManager r13;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r12 := @parameter0: android.content.Context;

        r13 := @parameter1: android.view.accessibility.IAccessibilityManager;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock> = $r1;

        r0.<android.view.accessibility.AccessibilityManager: int mRelevantEventTypes> = -1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mAccessibilityStateChangeListeners> = $r2;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mTouchExplorationStateChangeListeners> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mHighTextContrastStateChangeListeners> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mServicesStateChangeListeners> = $r5;

        $r6 = new android.view.accessibility.AccessibilityManager$1;

        specialinvoke $r6.<android.view.accessibility.AccessibilityManager$1: void <init>(android.view.accessibility.AccessibilityManager)>(r0);

        r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient$Stub mClient> = $r6;

        $r7 = new android.view.accessibility.AccessibilityManager$MyCallback;

        specialinvoke $r7.<android.view.accessibility.AccessibilityManager$MyCallback: void <init>(android.view.accessibility.AccessibilityManager,android.view.accessibility.AccessibilityManager$1)>(r0, null);

        r0.<android.view.accessibility.AccessibilityManager: android.os.Handler$Callback mCallback> = $r7;

        $r8 = new android.os.Handler;

        $r9 = virtualinvoke r12.<android.content.Context: android.os.Looper getMainLooper()>();

        $r10 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler$Callback mCallback>;

        specialinvoke $r8.<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>($r9, $r10);

        r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler> = $r8;

        r0.<android.view.accessibility.AccessibilityManager: int mUserId> = i0;

        r14 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r14;

     label1:
        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void tryConnectToServiceLocked(android.view.accessibility.IAccessibilityManager)>(r13);

        exitmonitor r14;

     label2:
        return;

     label3:
        $r11 := @caughtexception;

     label4:
        exitmonitor r14;

     label5:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void <init>(android.os.Handler, android.view.accessibility.IAccessibilityManager, int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;
        java.lang.Object $r1, r11;
        android.util.ArrayMap $r2, $r3, $r4, $r5;
        android.view.accessibility.AccessibilityManager$1 $r6;
        android.view.accessibility.AccessibilityManager$MyCallback $r7;
        java.lang.Throwable $r8;
        android.os.Handler r9;
        android.view.accessibility.IAccessibilityManager r10;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r9 := @parameter0: android.os.Handler;

        r10 := @parameter1: android.view.accessibility.IAccessibilityManager;

        i0 := @parameter2: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock> = $r1;

        r0.<android.view.accessibility.AccessibilityManager: int mRelevantEventTypes> = -1;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mAccessibilityStateChangeListeners> = $r2;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mTouchExplorationStateChangeListeners> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mHighTextContrastStateChangeListeners> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mServicesStateChangeListeners> = $r5;

        $r6 = new android.view.accessibility.AccessibilityManager$1;

        specialinvoke $r6.<android.view.accessibility.AccessibilityManager$1: void <init>(android.view.accessibility.AccessibilityManager)>(r0);

        r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient$Stub mClient> = $r6;

        $r7 = new android.view.accessibility.AccessibilityManager$MyCallback;

        specialinvoke $r7.<android.view.accessibility.AccessibilityManager$MyCallback: void <init>(android.view.accessibility.AccessibilityManager,android.view.accessibility.AccessibilityManager$1)>(r0, null);

        r0.<android.view.accessibility.AccessibilityManager: android.os.Handler$Callback mCallback> = $r7;

        r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler> = r9;

        r0.<android.view.accessibility.AccessibilityManager: int mUserId> = i0;

        r11 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r11;

     label1:
        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void tryConnectToServiceLocked(android.view.accessibility.IAccessibilityManager)>(r10);

        exitmonitor r11;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r11;

     label5:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static void access$000(android.view.accessibility.AccessibilityManager, long)
    {
        android.view.accessibility.AccessibilityManager r0;
        long l0;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager;

        l0 := @parameter1: long;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void updateUiTimeout(long)>(l0);

        return;
    }

    static java.lang.Object access$100(android.view.accessibility.AccessibilityManager)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object $r1;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        return $r1;
    }

    static android.util.ArrayMap access$200(android.view.accessibility.AccessibilityManager)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mServicesStateChangeListeners>;

        return $r1;
    }

    static void access$400(android.view.accessibility.AccessibilityManager, int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void setStateLocked(int)>(i0);

        return;
    }

    public static android.view.accessibility.AccessibilityManager getInstance(android.content.Context)
    {
        java.lang.Object r0;
        android.view.accessibility.AccessibilityManager r1, $r2, $r5;
        int $i0, $i1, $i2, i3;
        java.lang.Throwable $r3;
        android.content.Context r4;

        r4 := @parameter0: android.content.Context;

        r0 = <android.view.accessibility.AccessibilityManager: java.lang.Object sInstanceSync>;

        entermonitor r0;

     label01:
        $r2 = <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager sInstance>;

        if $r2 != null goto label07;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i0 == 1000 goto label05;

        $i1 = virtualinvoke r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS");

        if $i1 == 0 goto label05;

        $i2 = virtualinvoke r4.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL");

        if $i2 != 0 goto label03;

     label02:
        goto label05;

     label03:
        i3 = virtualinvoke r4.<android.content.Context: int getUserId()>();

     label04:
        goto label06;

     label05:
        i3 = -2;

     label06:
        r1 = new android.view.accessibility.AccessibilityManager;

        specialinvoke r1.<android.view.accessibility.AccessibilityManager: void <init>(android.content.Context,android.view.accessibility.IAccessibilityManager,int)>(r4, null, i3);

        <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager sInstance> = r1;

     label07:
        exitmonitor r0;

     label08:
        $r5 = <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager sInstance>;

        return $r5;

     label09:
        $r3 := @caughtexception;

     label10:
        exitmonitor r0;

     label11:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private android.view.accessibility.IAccessibilityManager getServiceLocked()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.IAccessibilityManager $r1, $r2;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        if $r1 != null goto label1;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void tryConnectToServiceLocked(android.view.accessibility.IAccessibilityManager)>(null);

     label1:
        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService>;

        return $r2;
    }

    private android.accessibilityservice.AccessibilityShortcutInfo getShortcutInfo(android.content.Context, android.content.pm.ResolveInfo)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.os.Bundle $r1, $r2;
        int $i0;
        android.accessibilityservice.AccessibilityShortcutInfo $r3;
        java.lang.Throwable $r4;
        android.content.Context r5;
        android.content.pm.ResolveInfo r6;
        android.content.pm.ActivityInfo r7;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.content.Context;

        r6 := @parameter1: android.content.pm.ResolveInfo;

        r7 = r6.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if r7 == null goto label4;

        $r1 = r7.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        if $r1 == null goto label4;

        $r2 = r7.<android.content.pm.ActivityInfo: android.os.Bundle metaData>;

        $i0 = virtualinvoke $r2.<android.os.Bundle: int getInt(java.lang.String)>("android.accessibilityshortcut.target");

        if $i0 != 0 goto label1;

        goto label4;

     label1:
        $r3 = new android.accessibilityservice.AccessibilityShortcutInfo;

        specialinvoke $r3.<android.accessibilityservice.AccessibilityShortcutInfo: void <init>(android.content.Context,android.content.pm.ActivityInfo)>(r5, r7);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while initializing AccessibilityShortcutInfo", $r4);

        return null;

     label4:
        return null;

        catch org.xmlpull.v1.XmlPullParserException from label1 to label2 with label3;
        catch java.io.IOException from label1 to label2 with label3;
    }

    public static boolean isAccessibilityButtonSupported()
    {
        android.content.res.Resources $r0;
        boolean $z0;

        $r0 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $z0 = virtualinvoke $r0.<android.content.res.Resources: boolean getBoolean(int)>(17891524);

        return $z0;
    }

    static void lambda$notifyAccessibilityStateChanged$0(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener, boolean)
    {
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener r0;
        boolean z0;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener;

        z0 := @parameter1: boolean;

        interfaceinvoke r0.<android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)>(z0);

        return;
    }

    static void lambda$notifyHighTextContrastStateChanged$2(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener, boolean)
    {
        android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener r0;
        boolean z0;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener;

        z0 := @parameter1: boolean;

        interfaceinvoke r0.<android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener: void onHighTextContrastStateChanged(boolean)>(z0);

        return;
    }

    static void lambda$notifyTouchExplorationStateChanged$1(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener, boolean)
    {
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener r0;
        boolean z0;

        r0 := @parameter0: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener;

        z0 := @parameter1: boolean;

        interfaceinvoke r0.<android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener: void onTouchExplorationStateChanged(boolean)>(z0);

        return;
    }

    private void notifyAccessibilityStateChanged()
    {
        android.view.accessibility.AccessibilityManager r0;
        boolean z0, $z1;
        int i0, i1;
        android.util.ArrayMap $r1, $r2, r9;
        java.lang.Object $r3, $r4, r8;
        android.view.accessibility._$$Lambda$AccessibilityManager$yzw5NYY7_MfAQ9gLy3mVllchaXo $r5;
        android.os.Handler $r6;
        java.lang.Throwable $r7;
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener r10;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r8 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r8;

     label1:
        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mAccessibilityStateChangeListeners>;

        $z1 = virtualinvoke $r1.<android.util.ArrayMap: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        exitmonitor r8;

     label2:
        return;

     label3:
        z0 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        r9 = new android.util.ArrayMap;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mAccessibilityStateChangeListeners>;

        specialinvoke r9.<android.util.ArrayMap: void <init>(android.util.ArrayMap)>($r2);

        exitmonitor r8;

     label4:
        i0 = virtualinvoke r9.<android.util.ArrayMap: int size()>();

        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        $r3 = virtualinvoke r9.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        r10 = (android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener) $r3;

        $r4 = virtualinvoke r9.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r6 = (android.os.Handler) $r4;

        $r5 = new android.view.accessibility._$$Lambda$AccessibilityManager$yzw5NYY7_MfAQ9gLy3mVllchaXo;

        specialinvoke $r5.<android.view.accessibility._$$Lambda$AccessibilityManager$yzw5NYY7_MfAQ9gLy3mVllchaXo: void <init>(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener,boolean)>(r10, z0);

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        i1 = i1 + 1;

        goto label5;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r8;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void notifyHighTextContrastStateChanged()
    {
        android.view.accessibility.AccessibilityManager r0;
        boolean z0, $z1;
        int i0, i1;
        android.util.ArrayMap $r1, $r2, r9;
        java.lang.Object $r3, $r4, r8;
        android.view.accessibility._$$Lambda$AccessibilityManager$4M6GrmFiqsRwVzn352N10DcU6RM $r5;
        android.os.Handler $r6;
        java.lang.Throwable $r7;
        android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener r10;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r8 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r8;

     label1:
        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mHighTextContrastStateChangeListeners>;

        $z1 = virtualinvoke $r1.<android.util.ArrayMap: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        exitmonitor r8;

     label2:
        return;

     label3:
        z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsHighTextContrastEnabled>;

        r9 = new android.util.ArrayMap;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mHighTextContrastStateChangeListeners>;

        specialinvoke r9.<android.util.ArrayMap: void <init>(android.util.ArrayMap)>($r2);

        exitmonitor r8;

     label4:
        i0 = virtualinvoke r9.<android.util.ArrayMap: int size()>();

        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        $r3 = virtualinvoke r9.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        r10 = (android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener) $r3;

        $r4 = virtualinvoke r9.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r6 = (android.os.Handler) $r4;

        $r5 = new android.view.accessibility._$$Lambda$AccessibilityManager$4M6GrmFiqsRwVzn352N10DcU6RM;

        specialinvoke $r5.<android.view.accessibility._$$Lambda$AccessibilityManager$4M6GrmFiqsRwVzn352N10DcU6RM: void <init>(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener,boolean)>(r10, z0);

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        i1 = i1 + 1;

        goto label5;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r8;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void notifyTouchExplorationStateChanged()
    {
        android.view.accessibility.AccessibilityManager r0;
        boolean z0, $z1;
        int i0, i1;
        android.util.ArrayMap $r1, $r2, r9;
        java.lang.Object $r3, $r4, r8;
        android.view.accessibility._$$Lambda$AccessibilityManager$a0OtrjOl35tiW2vwyvAmY6_LiLI $r5;
        android.os.Handler $r6;
        java.lang.Throwable $r7;
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener r10;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r8 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r8;

     label1:
        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mTouchExplorationStateChangeListeners>;

        $z1 = virtualinvoke $r1.<android.util.ArrayMap: boolean isEmpty()>();

        if $z1 == 0 goto label3;

        exitmonitor r8;

     label2:
        return;

     label3:
        z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled>;

        r9 = new android.util.ArrayMap;

        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mTouchExplorationStateChangeListeners>;

        specialinvoke r9.<android.util.ArrayMap: void <init>(android.util.ArrayMap)>($r2);

        exitmonitor r8;

     label4:
        i0 = virtualinvoke r9.<android.util.ArrayMap: int size()>();

        i1 = 0;

     label5:
        if i1 >= i0 goto label6;

        $r3 = virtualinvoke r9.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        r10 = (android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener) $r3;

        $r4 = virtualinvoke r9.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i1);

        $r6 = (android.os.Handler) $r4;

        $r5 = new android.view.accessibility._$$Lambda$AccessibilityManager$a0OtrjOl35tiW2vwyvAmY6_LiLI;

        specialinvoke $r5.<android.view.accessibility._$$Lambda$AccessibilityManager$a0OtrjOl35tiW2vwyvAmY6_LiLI: void <init>(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener,boolean)>(r10, z0);

        virtualinvoke $r6.<android.os.Handler: boolean post(java.lang.Runnable)>($r5);

        i1 = i1 + 1;

        goto label5;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r8;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void setStateLocked(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0, $i1, $i2, $i3;
        boolean z0, z1, z2, $z3, z4, z5, z6;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        z4 = 0;

        $i1 = i0 & 1;

        if $i1 == 0 goto label1;

        z5 = 1;

        goto label2;

     label1:
        z5 = 0;

     label2:
        $i2 = i0 & 2;

        if $i2 == 0 goto label3;

        z6 = 1;

        goto label4;

     label3:
        z6 = 0;

     label4:
        $i3 = i0 & 4;

        if $i3 == 0 goto label5;

        z4 = 1;

     label5:
        z0 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        z1 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled>;

        z2 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsHighTextContrastEnabled>;

        r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled> = z5;

        r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled> = z6;

        r0.<android.view.accessibility.AccessibilityManager: boolean mIsHighTextContrastEnabled> = z4;

        $z3 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if z0 == $z3 goto label6;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void notifyAccessibilityStateChanged()>();

     label6:
        if z1 == z6 goto label7;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void notifyTouchExplorationStateChanged()>();

     label7:
        if z2 == z4 goto label8;

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void notifyHighTextContrastStateChanged()>();

     label8:
        return;
    }

    private void tryConnectToServiceLocked(android.view.accessibility.IAccessibilityManager)
    {
        android.view.accessibility.AccessibilityManager r0;
        long l0, $l4;
        int $i1, $i2, $i3;
        android.view.accessibility.IAccessibilityManagerClient$Stub $r1;
        android.os.RemoteException $r2;
        android.view.accessibility.IAccessibilityManager r3, r4;
        android.os.IBinder r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r3 := @parameter0: android.view.accessibility.IAccessibilityManager;

        r4 = r3;

        if r3 != null goto label2;

        r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("accessibility");

        if r5 != null goto label1;

        return;

     label1:
        r4 = staticinvoke <android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>(r5);

     label2:
        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient$Stub mClient>;

        $i1 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        l0 = interfaceinvoke r4.<android.view.accessibility.IAccessibilityManager: long addClient(android.view.accessibility.IAccessibilityManagerClient,int)>($r1, $i1);

        $i2 = staticinvoke <com.android.internal.util.IntPair: int first(long)>(l0);

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void setStateLocked(int)>($i2);

        $i3 = staticinvoke <com.android.internal.util.IntPair: int second(long)>(l0);

        r0.<android.view.accessibility.AccessibilityManager: int mRelevantEventTypes> = $i3;

        $l4 = interfaceinvoke r4.<android.view.accessibility.IAccessibilityManager: long getRecommendedTimeoutMillis()>();

        specialinvoke r0.<android.view.accessibility.AccessibilityManager: void updateUiTimeout(long)>($l4);

        r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager mService> = r4;

     label3:
        goto label5;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "AccessibilityManagerService is dead", $r2);

     label5:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void updateUiTimeout(long)
    {
        android.view.accessibility.AccessibilityManager r0;
        long l0;
        int $i1, $i2;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        l0 := @parameter0: long;

        $i1 = staticinvoke <com.android.internal.util.IntPair: int first(long)>(l0);

        r0.<android.view.accessibility.AccessibilityManager: int mInteractiveUiTimeout> = $i1;

        $i2 = staticinvoke <com.android.internal.util.IntPair: int second(long)>(l0);

        r0.<android.view.accessibility.AccessibilityManager: int mNonInteractiveUiTimeout> = $i2;

        return;
    }

    public int addAccessibilityInteractionConnection(android.view.IWindow, android.os.IBinder, java.lang.String, android.view.accessibility.IAccessibilityInteractionConnection)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.os.IBinder r1;
        java.lang.String r2;
        android.view.accessibility.IAccessibilityInteractionConnection r3;
        java.lang.Object r4;
        android.view.accessibility.IAccessibilityManager r5;
        android.os.RemoteException $r6;
        java.lang.Throwable $r7;
        android.view.IWindow r8;
        int i1, i2;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r8 := @parameter0: android.view.IWindow;

        r1 := @parameter1: android.os.IBinder;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.view.accessibility.IAccessibilityInteractionConnection;

        r4 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r4;

     label01:
        r5 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r5 != null goto label05;

     label03:
        exitmonitor r4;

     label04:
        return -1;

     label05:
        i1 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        exitmonitor r4;

     label06:
        i2 = interfaceinvoke r5.<android.view.accessibility.IAccessibilityManager: int addAccessibilityInteractionConnection(android.view.IWindow,android.os.IBinder,android.view.accessibility.IAccessibilityInteractionConnection,java.lang.String,int)>(r8, r1, r3, r2, i1);

     label07:
        return i2;

     label08:
        $r6 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while adding an accessibility interaction connection. ", $r6);

        return -1;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r4;

     label11:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void addAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityRequestPreparer r1;
        int i0;
        java.util.List r2, r12;
        android.util.SparseArray $r3, $r4, $r7, r10;
        java.lang.Object $r5, r9;
        java.util.ArrayList r11;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityRequestPreparer;

        $r3 = r0.<android.view.accessibility.AccessibilityManager: android.util.SparseArray mRequestPreparerLists>;

        if $r3 != null goto label1;

        r10 = new android.util.SparseArray;

        specialinvoke r10.<android.util.SparseArray: void <init>(int)>(1);

        r0.<android.view.accessibility.AccessibilityManager: android.util.SparseArray mRequestPreparerLists> = r10;

     label1:
        i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityRequestPreparer: int getAccessibilityViewId()>();

        $r4 = r0.<android.view.accessibility.AccessibilityManager: android.util.SparseArray mRequestPreparerLists>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (java.util.List) $r5;

        r9 = r2;

        if r2 != null goto label2;

        r11 = new java.util.ArrayList;

        specialinvoke r11.<java.util.ArrayList: void <init>(int)>(1);

        r9 = r11;

        $r7 = r0.<android.view.accessibility.AccessibilityManager: android.util.SparseArray mRequestPreparerLists>;

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r11);

     label2:
        r12 = (java.util.List) r9;

        interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener, android.os.Handler)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.util.ArrayMap r2;
        java.lang.Throwable $r4;
        android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener r5;
        android.os.Handler r6;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener;

        r6 := @parameter1: android.os.Handler;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mServicesStateChangeListeners>;

     label2:
        if r6 != null goto label5;

     label3:
        r6 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler>;

     label4:
        goto label5;

     label5:
        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        exitmonitor r1;

     label6:
        return;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener, android.os.Handler)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.util.ArrayMap r2;
        java.lang.Throwable $r4;
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener r5;
        android.os.Handler r6;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener;

        r6 := @parameter1: android.os.Handler;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mAccessibilityStateChangeListeners>;

     label2:
        if r6 != null goto label5;

     label3:
        r6 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler>;

     label4:
        goto label5;

     label5:
        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        exitmonitor r1;

     label6:
        return;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener r1;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener;

        virtualinvoke r0.<android.view.accessibility.AccessibilityManager: void addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener,android.os.Handler)>(r1, null);

        return 1;
    }

    public void addHighTextContrastStateChangeListener(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener, android.os.Handler)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.util.ArrayMap r2;
        java.lang.Throwable $r4;
        android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener r5;
        android.os.Handler r6;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener;

        r6 := @parameter1: android.os.Handler;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mHighTextContrastStateChangeListeners>;

     label2:
        if r6 != null goto label5;

     label3:
        r6 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler>;

     label4:
        goto label5;

     label5:
        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        exitmonitor r1;

     label6:
        return;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener, android.os.Handler)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.util.ArrayMap r2;
        java.lang.Throwable $r4;
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener r5;
        android.os.Handler r6;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener;

        r6 := @parameter1: android.os.Handler;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mTouchExplorationStateChangeListeners>;

     label2:
        if r6 != null goto label5;

     label3:
        r6 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler mHandler>;

     label4:
        goto label5;

     label5:
        virtualinvoke r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6);

        exitmonitor r1;

     label6:
        return;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener r1;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener;

        virtualinvoke r0.<android.view.accessibility.AccessibilityManager: void addTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener,android.os.Handler)>(r1, null);

        return 1;
    }

    public void associateEmbeddedHierarchy(android.os.IBinder, android.os.IBinder)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.os.IBinder r1, r6;
        java.lang.Object r2;
        android.view.accessibility.IAccessibilityManager r3;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r6 := @parameter0: android.os.IBinder;

        r1 := @parameter1: android.os.IBinder;

        r2 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r2;

     label01:
        r3 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r3 != null goto label05;

     label03:
        exitmonitor r2;

     label04:
        return;

     label05:
        exitmonitor r2;

     label06:
        interfaceinvoke r3.<android.view.accessibility.IAccessibilityManager: void associateEmbeddedHierarchy(android.os.IBinder,android.os.IBinder)>(r6, r1);

     label07:
        return;

     label08:
        $r5 := @caughtexception;

        return;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r2;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void disassociateEmbeddedHierarchy(android.os.IBinder)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.view.accessibility.IAccessibilityManager r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.os.IBinder;

        if r5 != null goto label01;

        return;

     label01:
        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label03:
        if r2 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        exitmonitor r1;

     label07:
        interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: void disassociateEmbeddedHierarchy(android.os.IBinder)>(r5);

     label08:
        return;

     label09:
        $r3 := @caughtexception;

        return;

     label10:
        $r4 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public java.util.List getAccessibilityServiceList()
    {
        android.view.accessibility.AccessibilityManager r0;
        java.util.List r1, $r4;
        int i0, i1;
        java.util.ArrayList $r3;
        java.lang.Object $r5;
        android.accessibilityservice.AccessibilityServiceInfo $r6;
        android.content.pm.ResolveInfo $r7;
        android.content.pm.ServiceInfo $r8;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1);

        $r6 = (android.accessibilityservice.AccessibilityServiceInfo) $r5;

        $r7 = virtualinvoke $r6.<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>();

        $r8 = $r7.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r3);

        return $r4;
    }

    public java.util.List getAccessibilityShortcutTargets(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;
        java.util.List $r1, r7;
        android.os.RemoteException $r2;
        java.lang.Throwable $r4;
        java.lang.Object r5;
        android.view.accessibility.IAccessibilityManager r6;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        r5 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r5;

     label1:
        r6 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        exitmonitor r5;

     label2:
        if r6 == null goto label6;

     label3:
        r7 = interfaceinvoke r6.<android.view.accessibility.IAccessibilityManager: java.util.List getAccessibilityShortcutTargets(int)>(i0);

     label4:
        return r7;

     label5:
        $r2 := @caughtexception;

        virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label6:
        $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r1;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r5;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public int getAccessibilityWindowId(android.os.IBinder)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.view.accessibility.IAccessibilityManager r2;
        int i0;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        android.os.IBinder r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.os.IBinder;

        if r5 != null goto label01;

        return -1;

     label01:
        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label02:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label03:
        if r2 != null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return -1;

     label06:
        exitmonitor r1;

     label07:
        i0 = interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: int getAccessibilityWindowId(android.os.IBinder)>(r5);

     label08:
        return i0;

     label09:
        $r3 := @caughtexception;

        return -1;

     label10:
        $r4 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public android.os.Handler$Callback getCallback()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.os.Handler$Callback $r1;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.os.Handler$Callback mCallback>;

        return $r1;
    }

    public android.view.accessibility.IAccessibilityManagerClient getClient()
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.IAccessibilityManagerClient$Stub $r1;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        $r1 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManagerClient$Stub mClient>;

        return $r1;
    }

    public java.util.List getEnabledAccessibilityServiceList(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0, i1;
        android.view.accessibility.AccessibilityManager$AccessibilityPolicy r1;
        java.util.List $r2, $r3, r8, r9, r10, r12;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;
        java.lang.Object r6;
        android.view.accessibility.IAccessibilityManager r7;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        r6 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r6;

     label01:
        r7 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r7 != null goto label05;

     label03:
        r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r6;

     label04:
        return r8;

     label05:
        i1 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        exitmonitor r6;

     label06:
        r9 = null;

     label07:
        r10 = interfaceinvoke r7.<android.view.accessibility.IAccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int,int)>(i0, i1);

     label08:
        r9 = r10;

        goto label10;

     label09:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while obtaining the enabled AccessibilityServices. ", $r4);

     label10:
        r1 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager$AccessibilityPolicy mAccessibilityPolicy>;

        r12 = r9;

        if r1 == null goto label11;

        r12 = interfaceinvoke r1.<android.view.accessibility.AccessibilityManager$AccessibilityPolicy: java.util.List getEnabledAccessibilityServiceList(int,java.util.List)>(i0, r9);

     label11:
        if r12 == null goto label12;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r12);

        return $r3;

     label12:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label13:
        $r5 := @caughtexception;

     label14:
        exitmonitor r6;

     label15:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public java.util.List getInstalledAccessibilityServiceList()
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;
        android.view.accessibility.AccessibilityManager$AccessibilityPolicy r1;
        java.util.List $r2, $r3, r8, r9, r10, r12;
        android.os.RemoteException $r4;
        java.lang.Throwable $r5;
        java.lang.Object r6;
        android.view.accessibility.IAccessibilityManager r7;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r6 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r6;

     label01:
        r7 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r7 != null goto label05;

     label03:
        r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        exitmonitor r6;

     label04:
        return r8;

     label05:
        i0 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        exitmonitor r6;

     label06:
        r9 = null;

     label07:
        r10 = interfaceinvoke r7.<android.view.accessibility.IAccessibilityManager: java.util.List getInstalledAccessibilityServiceList(int)>(i0);

     label08:
        r9 = r10;

        goto label10;

     label09:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while obtaining the installed AccessibilityServices. ", $r4);

     label10:
        r1 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager$AccessibilityPolicy mAccessibilityPolicy>;

        r12 = r9;

        if r1 == null goto label11;

        r12 = interfaceinvoke r1.<android.view.accessibility.AccessibilityManager$AccessibilityPolicy: java.util.List getInstalledAccessibilityServiceList(java.util.List)>(r9);

     label11:
        if r12 == null goto label12;

        $r3 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r12);

        return $r3;

     label12:
        $r2 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r2;

     label13:
        $r5 := @caughtexception;

     label14:
        exitmonitor r6;

     label15:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public java.util.List getInstalledAccessibilityShortcutListAsUser(android.content.Context, int)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.content.Context r1;
        java.util.ArrayList $r3;
        android.content.Intent $r4;
        int $i0, i1, i2;
        java.lang.Object $r6;
        android.content.pm.ResolveInfo $r7;
        android.content.pm.PackageManager r9;
        java.util.List r10;
        android.accessibilityservice.AccessibilityShortcutInfo r11;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.content.Context;

        i1 := @parameter1: int;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MAIN");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent addCategory(java.lang.String)>("android.intent.category.ACCESSIBILITY_SHORTCUT_TARGET");

        r9 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r10 = virtualinvoke r9.<android.content.pm.PackageManager: java.util.List queryIntentActivitiesAsUser(android.content.Intent,int,int)>($r4, 819329, i1);

        i2 = 0;

     label1:
        $i0 = interfaceinvoke r10.<java.util.List: int size()>();

        if i2 >= $i0 goto label3;

        $r6 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i2);

        $r7 = (android.content.pm.ResolveInfo) $r6;

        r11 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.accessibilityservice.AccessibilityShortcutInfo getShortcutInfo(android.content.Context,android.content.pm.ResolveInfo)>(r1, $r7);

        if r11 == null goto label2;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r11);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r3;
    }

    public android.accessibilityservice.AccessibilityServiceInfo getInstalledServiceInfoWithComponentName(android.content.ComponentName)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.content.ComponentName r1, $r5;
        java.util.List r2;
        int $i0, i1;
        java.lang.Object $r3, $r6;
        android.accessibilityservice.AccessibilityServiceInfo $r4, $r7;
        boolean $z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.content.ComponentName;

        r2 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()>();

        if r2 == null goto label5;

        if r1 != null goto label1;

        goto label5;

     label1:
        i1 = 0;

     label2:
        $i0 = interfaceinvoke r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r4 = (android.accessibilityservice.AccessibilityServiceInfo) $r3;

        $r5 = virtualinvoke $r4.<android.accessibilityservice.AccessibilityServiceInfo: android.content.ComponentName getComponentName()>();

        $z0 = virtualinvoke r1.<android.content.ComponentName: boolean equals(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(i1);

        $r7 = (android.accessibilityservice.AccessibilityServiceInfo) $r6;

        return $r7;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return null;

     label5:
        return null;
    }

    public int getRecommendedTimeoutMillis(int, int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i8, i9;
        boolean z0, z1;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i5 := @parameter0: int;

        i6 := @parameter1: int;

        z0 = 0;

        $i0 = i6 & 4;

        if $i0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        $i1 = i6 & 1;

        if $i1 != 0 goto label3;

        $i4 = i6 & 2;

        if $i4 == 0 goto label4;

     label3:
        z0 = 1;

     label4:
        i8 = i5;

        if z1 == 0 goto label5;

        $i3 = r0.<android.view.accessibility.AccessibilityManager: int mInteractiveUiTimeout>;

        i8 = staticinvoke <java.lang.Math: int max(int,int)>(i5, $i3);

     label5:
        i9 = i8;

        if z0 == 0 goto label6;

        $i2 = r0.<android.view.accessibility.AccessibilityManager: int mNonInteractiveUiTimeout>;

        i9 = staticinvoke <java.lang.Math: int max(int,int)>(i8, $i2);

     label6:
        return i9;
    }

    public java.util.List getRequestPreparersForAccessibilityId(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;
        android.util.SparseArray r1;
        java.lang.Object $r2;
        java.util.List $r3;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        r1 = r0.<android.view.accessibility.AccessibilityManager: android.util.SparseArray mRequestPreparerLists>;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r3 = (java.util.List) $r2;

        return $r3;
    }

    public void interrupt()
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;
        boolean $z0;
        android.os.Looper $r1, $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        java.lang.Object r5;
        android.view.accessibility.IAccessibilityManager r6;
        java.lang.IllegalStateException r7;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r5;

     label01:
        r6 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r6 != null goto label05;

     label03:
        exitmonitor r5;

     label04:
        return;

     label05:
        $z0 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 != 0 goto label08;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r1 == $r2 goto label07;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccessibilityManager", "Interrupt called with accessibility disabled");

        exitmonitor r5;

     label06:
        return;

     label07:
        r7 = new java.lang.IllegalStateException;

        specialinvoke r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Accessibility off. Did you forget to check that?");

        throw r7;

     label08:
        i0 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        exitmonitor r5;

     label09:
        interfaceinvoke r6.<android.view.accessibility.IAccessibilityManager: void interrupt(int)>(i0);

     label10:
        goto label12;

     label11:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while requesting interrupt from all services. ", $r4);

     label12:
        return;

     label13:
        $r3 := @caughtexception;

     label14:
        exitmonitor r5;

     label15:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label08 to label09 with label13;
        catch android.os.RemoteException from label09 to label10 with label11;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public boolean isAccessibilityVolumeStreamActive()
    {
        android.view.accessibility.AccessibilityManager r0;
        java.util.List r1;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r2;
        android.accessibilityservice.AccessibilityServiceInfo $r3;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)>(-1);

        i3 = 0;

     label1:
        $i0 = interfaceinvoke r1.<java.util.List: int size()>();

        if i3 >= $i0 goto label3;

        $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i3);

        $r3 = (android.accessibilityservice.AccessibilityServiceInfo) $r2;

        $i1 = $r3.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i2 = $i1 & 128;

        if $i2 == 0 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isEnabled()
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, z3;
        android.view.accessibility.AccessibilityManager$AccessibilityPolicy $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        if $z0 != 0 goto label4;

        $r3 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager$AccessibilityPolicy mAccessibilityPolicy>;

        if $r3 == null goto label3;

        $r4 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager$AccessibilityPolicy mAccessibilityPolicy>;

        $z1 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        $z2 = interfaceinvoke $r4.<android.view.accessibility.AccessibilityManager$AccessibilityPolicy: boolean isEnabled(boolean)>($z1);

        if $z2 == 0 goto label3;

     label2:
        goto label4;

     label3:
        z3 = 0;

        goto label5;

     label4:
        z3 = 1;

     label5:
        exitmonitor r1;

     label6:
        return z3;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isHighTextContrastEnabled()
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        boolean z0;
        android.view.accessibility.IAccessibilityManager $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if $r3 != null goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsHighTextContrastEnabled>;

        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean isTouchExplorationEnabled()
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        boolean z0;
        android.view.accessibility.IAccessibilityManager $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r3 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

        if $r3 != null goto label3;

        exitmonitor r1;

     label2:
        return 0;

     label3:
        z0 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsTouchExplorationEnabled>;

        exitmonitor r1;

     label4:
        return z0;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void notifyAccessibilityButtonClicked(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        virtualinvoke r0.<android.view.accessibility.AccessibilityManager: void notifyAccessibilityButtonClicked(int,java.lang.String)>(i0, null);

        return;
    }

    public void notifyAccessibilityButtonClicked(int, java.lang.String)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;
        java.lang.Object r1;
        android.view.accessibility.IAccessibilityManager r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        exitmonitor r1;

     label06:
        interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: void notifyAccessibilityButtonClicked(int,java.lang.String)>(i0, r5);

     label07:
        goto label09;

     label08:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while dispatching accessibility button click", $r3);

     label09:
        return;

     label10:
        $r4 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void notifyAccessibilityButtonVisibilityChanged(boolean)
    {
        android.view.accessibility.AccessibilityManager r0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.Throwable $r2;
        java.lang.Object r3;
        android.view.accessibility.IAccessibilityManager r4;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        z0 := @parameter0: boolean;

        r3 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        r4 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r4 != null goto label05;

     label03:
        exitmonitor r3;

     label04:
        return;

     label05:
        exitmonitor r3;

     label06:
        interfaceinvoke r4.<android.view.accessibility.IAccessibilityManager: void notifyAccessibilityButtonVisibilityChanged(boolean)>(z0);

     label07:
        goto label09;

     label08:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while dispatching accessibility button visibility change", $r1);

     label09:
        return;

     label10:
        $r2 := @caughtexception;

     label11:
        exitmonitor r3;

     label12:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void performAccessibilityShortcut()
    {
        android.view.accessibility.AccessibilityManager r0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        virtualinvoke r0.<android.view.accessibility.AccessibilityManager: void performAccessibilityShortcut(java.lang.String)>(null);

        return;
    }

    public void performAccessibilityShortcut(java.lang.String)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.view.accessibility.IAccessibilityManager r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        java.lang.String r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: java.lang.String;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        exitmonitor r1;

     label06:
        interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: void performAccessibilityShortcut(java.lang.String)>(r5);

     label07:
        goto label09;

     label08:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error performing accessibility shortcut. ", $r4);

     label09:
        return;

     label10:
        $r3 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void registerSystemAction(android.app.RemoteAction, int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;
        android.os.RemoteException $r1;
        java.lang.StringBuilder $r2;
        java.lang.CharSequence $r4;
        java.lang.String $r7;
        java.lang.Throwable $r8;
        android.app.RemoteAction r9;
        java.lang.Object r10;
        android.view.accessibility.IAccessibilityManager r11;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r9 := @parameter0: android.app.RemoteAction;

        i0 := @parameter1: int;

        r10 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r10;

     label01:
        r11 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r11 != null goto label05;

     label03:
        exitmonitor r10;

     label04:
        return;

     label05:
        exitmonitor r10;

     label06:
        interfaceinvoke r11.<android.view.accessibility.IAccessibilityManager: void registerSystemAction(android.app.RemoteAction,int)>(r9, i0);

     label07:
        goto label09;

     label08:
        $r1 := @caughtexception;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error registering system action ");

        $r4 = virtualinvoke r9.<android.app.RemoteAction: java.lang.CharSequence getTitle()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", $r7, $r1);

     label09:
        return;

     label10:
        $r8 := @caughtexception;

     label11:
        exitmonitor r10;

     label12:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void removeAccessibilityInteractionConnection(android.view.IWindow)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.view.accessibility.IAccessibilityManager r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        android.view.IWindow r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.view.IWindow;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        exitmonitor r1;

     label06:
        interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: void removeAccessibilityInteractionConnection(android.view.IWindow)>(r5);

     label07:
        goto label09;

     label08:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error while removing an accessibility interaction connection. ", $r4);

     label09:
        return;

     label10:
        $r3 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void removeAccessibilityRequestPreparer(android.view.accessibility.AccessibilityRequestPreparer)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.AccessibilityRequestPreparer r1;
        int i0;
        java.util.List r2;
        android.util.SparseArray $r3, $r4, $r6;
        java.lang.Object $r5;
        boolean $z1;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r1 := @parameter0: android.view.accessibility.AccessibilityRequestPreparer;

        $r3 = r0.<android.view.accessibility.AccessibilityManager: android.util.SparseArray mRequestPreparerLists>;

        if $r3 != null goto label1;

        return;

     label1:
        i0 = virtualinvoke r1.<android.view.accessibility.AccessibilityRequestPreparer: int getAccessibilityViewId()>();

        $r4 = r0.<android.view.accessibility.AccessibilityManager: android.util.SparseArray mRequestPreparerLists>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (java.util.List) $r5;

        if r2 == null goto label2;

        interfaceinvoke r2.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $z1 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<android.view.accessibility.AccessibilityManager: android.util.SparseArray mRequestPreparerLists>;

        virtualinvoke $r6.<android.util.SparseArray: void remove(int)>(i0);

     label2:
        return;
    }

    public void removeAccessibilityServicesStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r4;
        android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityServicesStateChangeListener;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mServicesStateChangeListeners>;

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        int i0;
        android.util.ArrayMap $r2, $r3;
        java.lang.Throwable $r5;
        android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener r6;
        boolean z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r6 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mAccessibilityStateChangeListeners>;

        i0 = virtualinvoke $r2.<android.util.ArrayMap: int indexOfKey(java.lang.Object)>(r6);

        $r3 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mAccessibilityStateChangeListeners>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r6);

     label2:
        if i0 < 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void removeHighTextContrastStateChangeListener(android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.util.ArrayMap $r2;
        java.lang.Throwable $r4;
        android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.view.accessibility.AccessibilityManager$HighTextContrastChangeListener;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mHighTextContrastStateChangeListeners>;

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r5);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean removeTouchExplorationStateChangeListener(android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        int i0;
        android.util.ArrayMap $r2, $r3;
        java.lang.Throwable $r5;
        android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener r6;
        boolean z0;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r6 := @parameter0: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mTouchExplorationStateChangeListeners>;

        i0 = virtualinvoke $r2.<android.util.ArrayMap: int indexOfKey(java.lang.Object)>(r6);

        $r3 = r0.<android.view.accessibility.AccessibilityManager: android.util.ArrayMap mTouchExplorationStateChangeListeners>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r6);

     label2:
        if i0 < 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.view.accessibility.AccessibilityManager r0;
        android.view.accessibility.IAccessibilityManager r1;
        int i0, $i3, $i4, $i5, $i7;
        long l1, $l2;
        android.view.accessibility.AccessibilityManager$AccessibilityPolicy $r2, $r5;
        boolean $z0, $z1;
        android.os.Looper $r3, $r4;
        java.lang.Throwable $r6, $r7, $r13;
        android.os.RemoteException $r8;
        java.lang.String $r12;
        android.view.accessibility.AccessibilityEvent r14, r16, r17;
        java.lang.Object r15;
        java.lang.IllegalStateException r18;
        java.lang.StringBuilder r22;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r14 := @parameter0: android.view.accessibility.AccessibilityEvent;

        r15 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r15;

     label01:
        r1 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r1 != null goto label05;

     label03:
        exitmonitor r15;

     label04:
        return;

     label05:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        virtualinvoke r14.<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>($l2);

        $r2 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager$AccessibilityPolicy mAccessibilityPolicy>;

        if $r2 == null goto label09;

        $r5 = r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager$AccessibilityPolicy mAccessibilityPolicy>;

        $z1 = r0.<android.view.accessibility.AccessibilityManager: boolean mIsEnabled>;

        $i7 = r0.<android.view.accessibility.AccessibilityManager: int mRelevantEventTypes>;

        r16 = interfaceinvoke $r5.<android.view.accessibility.AccessibilityManager$AccessibilityPolicy: android.view.accessibility.AccessibilityEvent onAccessibilityEvent(android.view.accessibility.AccessibilityEvent,boolean,int)>(r14, $z1, $i7);

     label06:
        r17 = r16;

        if r16 != null goto label10;

     label07:
        exitmonitor r15;

     label08:
        return;

     label09:
        r17 = r14;

     label10:
        $z0 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 != 0 goto label13;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        if $r3 == $r4 goto label12;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("AccessibilityManager", "AccessibilityEvent sent with accessibility disabled");

        exitmonitor r15;

     label11:
        return;

     label12:
        r18 = new java.lang.IllegalStateException;

        specialinvoke r18.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Accessibility off. Did you forget to check that?");

        throw r18;

     label13:
        $i3 = virtualinvoke r17.<android.view.accessibility.AccessibilityEvent: int getEventType()>();

        $i4 = r0.<android.view.accessibility.AccessibilityManager: int mRelevantEventTypes>;

        $i5 = $i3 & $i4;

        if $i5 != 0 goto label15;

        exitmonitor r15;

     label14:
        return;

     label15:
        i0 = r0.<android.view.accessibility.AccessibilityManager: int mUserId>;

        exitmonitor r15;

     label16:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label17:
        interfaceinvoke r1.<android.view.accessibility.IAccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent,int)>(r17, i0);

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label19:
        if r14 == r17 goto label21;

     label20:
        virtualinvoke r14.<android.view.accessibility.AccessibilityEvent: void recycle()>();

     label21:
        virtualinvoke r17.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        goto label29;

     label22:
        $r7 := @caughtexception;

     label23:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label24:
        throw $r7;

     label25:
        $r13 := @caughtexception;

        goto label30;

     label26:
        $r8 := @caughtexception;

     label27:
        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error during sending ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r12 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", $r12, $r8);

     label28:
        if r14 == r17 goto label21;

        goto label20;

     label29:
        return;

     label30:
        if r14 == r17 goto label31;

        virtualinvoke r14.<android.view.accessibility.AccessibilityEvent: void recycle()>();

     label31:
        virtualinvoke r17.<android.view.accessibility.AccessibilityEvent: void recycle()>();

        throw $r13;

     label32:
        $r6 := @caughtexception;

     label33:
        exitmonitor r15;

     label34:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label32;
        catch java.lang.Throwable from label03 to label04 with label32;
        catch java.lang.Throwable from label05 to label06 with label32;
        catch java.lang.Throwable from label07 to label08 with label32;
        catch java.lang.Throwable from label10 to label11 with label32;
        catch java.lang.Throwable from label12 to label13 with label32;
        catch java.lang.Throwable from label13 to label14 with label32;
        catch java.lang.Throwable from label15 to label16 with label32;
        catch android.os.RemoteException from label16 to label17 with label26;
        catch java.lang.Throwable from label16 to label17 with label25;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch android.os.RemoteException from label18 to label19 with label26;
        catch java.lang.Throwable from label18 to label19 with label25;
        catch android.os.RemoteException from label23 to label24 with label26;
        catch java.lang.Throwable from label23 to label24 with label25;
        catch android.os.RemoteException from label24 to label25 with label26;
        catch java.lang.Throwable from label24 to label25 with label25;
        catch java.lang.Throwable from label27 to label28 with label25;
        catch java.lang.Throwable from label33 to label34 with label32;
    }

    public boolean sendFingerprintGesture(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;
        boolean z0;
        android.os.RemoteException $r1;
        java.lang.Throwable $r2;
        java.lang.Object r3;
        android.view.accessibility.IAccessibilityManager r4;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        r3 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r3;

     label01:
        r4 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r4 != null goto label05;

     label03:
        exitmonitor r3;

     label04:
        return 0;

     label05:
        exitmonitor r3;

     label06:
        z0 = interfaceinvoke r4.<android.view.accessibility.IAccessibilityManager: boolean sendFingerprintGesture(int)>(i0);

     label07:
        return z0;

     label08:
        $r1 := @caughtexception;

        return 0;

     label09:
        $r2 := @caughtexception;

     label10:
        exitmonitor r3;

     label11:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void setAccessibilityPolicy(android.view.accessibility.AccessibilityManager$AccessibilityPolicy)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        java.lang.Throwable $r2;
        android.view.accessibility.AccessibilityManager$AccessibilityPolicy r3;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r3 := @parameter0: android.view.accessibility.AccessibilityManager$AccessibilityPolicy;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager$AccessibilityPolicy mAccessibilityPolicy> = r3;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.view.accessibility.IAccessibilityManager r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        android.view.accessibility.IAccessibilityInteractionConnection r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.view.accessibility.IAccessibilityInteractionConnection;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        exitmonitor r1;

     label06:
        interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)>(r5);

     label07:
        goto label09;

     label08:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error setting picture in picture action replacement", $r4);

     label09:
        return;

     label10:
        $r3 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)
    {
        android.view.accessibility.AccessibilityManager r0;
        java.lang.Object r1;
        android.view.accessibility.IAccessibilityManager r2;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        android.view.accessibility.IWindowMagnificationConnection r5;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        r5 := @parameter0: android.view.accessibility.IWindowMagnificationConnection;

        r1 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r2 != null goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        exitmonitor r1;

     label06:
        interfaceinvoke r2.<android.view.accessibility.IAccessibilityManager: void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)>(r5);

     label07:
        goto label09;

     label08:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", "Error setting window magnfication connection", $r3);

     label09:
        return;

     label10:
        $r4 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public void unregisterSystemAction(int)
    {
        android.view.accessibility.AccessibilityManager r0;
        int i0;
        java.lang.Throwable $r1;
        android.os.RemoteException $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;
        java.lang.Object r8;
        android.view.accessibility.IAccessibilityManager r9;

        r0 := @this: android.view.accessibility.AccessibilityManager;

        i0 := @parameter0: int;

        r8 = r0.<android.view.accessibility.AccessibilityManager: java.lang.Object mLock>;

        entermonitor r8;

     label01:
        r9 = specialinvoke r0.<android.view.accessibility.AccessibilityManager: android.view.accessibility.IAccessibilityManager getServiceLocked()>();

     label02:
        if r9 != null goto label05;

     label03:
        exitmonitor r8;

     label04:
        return;

     label05:
        exitmonitor r8;

     label06:
        interfaceinvoke r9.<android.view.accessibility.IAccessibilityManager: void unregisterSystemAction(int)>(i0);

     label07:
        goto label09;

     label08:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error unregistering system action with actionId ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AccessibilityManager", $r7, $r2);

     label09:
        return;

     label10:
        $r1 := @caughtexception;

     label11:
        exitmonitor r8;

     label12:
        throw $r1;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label11 to label12 with label10;
    }
}
