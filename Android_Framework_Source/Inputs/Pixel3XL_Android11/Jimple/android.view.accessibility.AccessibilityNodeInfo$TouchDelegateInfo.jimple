public final class android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    private int mConnectionId;
    private android.util.ArrayMap mTargetMap;
    private int mWindowId;

    static void <clinit>()
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo$1 $r0;

        $r0 = new android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo$1;

        specialinvoke $r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo$1: void <init>()>();

        <android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    void <init>(android.util.ArrayMap, boolean)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        android.util.ArrayMap r1, $r3;
        boolean z0, $z1, $z2, $z3, z4;
        int $i0;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        r1 := @parameter0: android.util.ArrayMap;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z1 = virtualinvoke r1.<android.util.ArrayMap: boolean isEmpty()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(null);

        if $z2 != 0 goto label1;

        $z3 = virtualinvoke r1.<android.util.ArrayMap: boolean containsValue(java.lang.Object)>(null);

        if $z3 != 0 goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z4);

        if z0 == 0 goto label3;

        $r3 = new android.util.ArrayMap;

        $i0 = virtualinvoke r1.<android.util.ArrayMap: int size()>();

        specialinvoke $r3.<android.util.ArrayMap: void <init>(int)>($i0);

        r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap> = $r3;

        virtualinvoke $r3.<android.util.ArrayMap: void putAll(android.util.ArrayMap)>(r1);

        goto label4;

     label3:
        r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap> = r1;

     label4:
        return;
    }

    public void <init>(java.util.Map)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        java.util.Map r1;
        java.util.Iterator r2;
        android.graphics.Region r3;
        android.view.View r4;
        boolean $z0, $z1, $z2, z3, $z4;
        java.lang.Object $r5, $r6;
        android.util.ArrayMap $r7, $r10;
        int $i0, $i2;
        long $l1;
        java.lang.Long $r8;
        java.util.Set $r11;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(null);

        if $z1 != 0 goto label1;

        $z2 = interfaceinvoke r1.<java.util.Map: boolean containsValue(java.lang.Object)>(null);

        if $z2 != 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z3);

        $r10 = new android.util.ArrayMap;

        $i2 = interfaceinvoke r1.<java.util.Map: int size()>();

        specialinvoke $r10.<android.util.ArrayMap: void <init>(int)>($i2);

        r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap> = $r10;

        $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>();

        r2 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (android.graphics.Region) $r5;

        $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        r4 = (android.view.View) $r6;

        $r7 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap>;

        $i0 = virtualinvoke r4.<android.view.View: int getAccessibilityViewId()>();

        $l1 = (long) $i0;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r8);

        goto label3;

     label4:
        return;
    }

    static void access$100(android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo, int)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        int i0;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void setConnectionId(int)>(i0);

        return;
    }

    static void access$200(android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo, int)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        int i0;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        i0 := @parameter1: int;

        specialinvoke r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: void setWindowId(int)>(i0);

        return;
    }

    static android.util.ArrayMap access$300(android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        android.util.ArrayMap $r1;

        r0 := @parameter0: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        $r1 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap>;

        return $r1;
    }

    private void setConnectionId(int)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        int i0;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        i0 := @parameter0: int;

        r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int mConnectionId> = i0;

        return;
    }

    private void setWindowId(int)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        int i0;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        i0 := @parameter0: int;

        r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int mWindowId> = i0;

        return;
    }

    public int describeContents()
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        return 0;
    }

    public long getAccessibilityIdForRegion(android.graphics.Region)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        android.graphics.Region r1;
        android.util.ArrayMap $r2;
        java.lang.Object $r3;
        java.lang.Long $r4;
        long $l0;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        r1 := @parameter0: android.graphics.Region;

        $r2 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Long) $r3;

        $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        return $l0;
    }

    public android.graphics.Region getRegionAt(int)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        int i0;
        android.util.ArrayMap $r1;
        java.lang.Object $r2;
        android.graphics.Region $r3;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i0);

        $r3 = (android.graphics.Region) $r2;

        return $r3;
    }

    public int getRegionCount()
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        android.util.ArrayMap $r1;
        int $i0;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        $r1 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        return $i0;
    }

    public android.view.accessibility.AccessibilityNodeInfo getTargetForRegion(android.graphics.Region)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        android.graphics.Region r1;
        android.util.ArrayMap $r2;
        int $i0, $i1;
        java.lang.Object $r3;
        java.lang.Long $r4;
        long $l2;
        android.view.accessibility.AccessibilityNodeInfo $r5;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        r1 := @parameter0: android.graphics.Region;

        $i0 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int mConnectionId>;

        $i1 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: int mWindowId>;

        $r2 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.lang.Long) $r3;

        $l2 = virtualinvoke $r4.<java.lang.Long: long longValue()>();

        $r5 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo access$2400(int,int,long)>($i0, $i1, $l2);

        return $r5;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, i4;
        android.graphics.Region r2;
        java.lang.Long r3;
        android.util.ArrayMap $r4, $r5, $r6, $r8;
        java.lang.Object $r7, $r9;
        long $l3;

        r0 := @this: android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r4 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap>;

        $i1 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        i4 = 0;

     label1:
        $r5 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap>;

        $i2 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        if i4 >= $i2 goto label2;

        $r6 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i4);

        r2 = (android.graphics.Region) $r7;

        $r8 = r0.<android.view.accessibility.AccessibilityNodeInfo$TouchDelegateInfo: android.util.ArrayMap mTargetMap>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i4);

        r3 = (java.lang.Long) $r9;

        virtualinvoke r2.<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>(r1, i0);

        $l3 = virtualinvoke r3.<java.lang.Long: long longValue()>();

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l3);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }
}
