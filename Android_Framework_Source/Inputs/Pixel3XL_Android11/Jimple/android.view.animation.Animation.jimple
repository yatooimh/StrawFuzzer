public abstract class android.view.animation.Animation extends java.lang.Object implements java.lang.Cloneable
{
    public static final int ABSOLUTE;
    public static final int INFINITE;
    public static final int RELATIVE_TO_PARENT;
    public static final int RELATIVE_TO_SELF;
    public static final int RESTART;
    public static final int REVERSE;
    public static final int START_ON_FIRST_FRAME;
    public static final int ZORDER_BOTTOM;
    public static final int ZORDER_NORMAL;
    public static final int ZORDER_TOP;
    private final dalvik.system.CloseGuard guard;
    private int mBackgroundColor;
    boolean mCycleFlip;
    long mDuration;
    boolean mEnded;
    boolean mFillAfter;
    boolean mFillBefore;
    boolean mFillEnabled;
    private boolean mHasRoundedCorners;
    boolean mInitialized;
    android.view.animation.Interpolator mInterpolator;
    private android.view.animation.Animation$AnimationListener mListener;
    private android.os.Handler mListenerHandler;
    private boolean mMore;
    private java.lang.Runnable mOnEnd;
    private java.lang.Runnable mOnRepeat;
    private java.lang.Runnable mOnStart;
    private boolean mOneMoreTime;
    android.graphics.RectF mPreviousRegion;
    android.view.animation.Transformation mPreviousTransformation;
    android.graphics.RectF mRegion;
    int mRepeatCount;
    int mRepeatMode;
    int mRepeated;
    private float mScaleFactor;
    private boolean mShowWallpaper;
    long mStartOffset;
    long mStartTime;
    boolean mStarted;
    android.view.animation.Transformation mTransformation;
    private int mZAdjustment;

    public void <init>()
    {
        android.view.animation.Animation r0;
        android.graphics.RectF $r1, $r2;
        android.view.animation.Transformation $r3, $r4;
        dalvik.system.CloseGuard $r5;

        r0 := @this: android.view.animation.Animation;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.animation.Animation: boolean mEnded> = 0;

        r0.<android.view.animation.Animation: boolean mStarted> = 0;

        r0.<android.view.animation.Animation: boolean mCycleFlip> = 0;

        r0.<android.view.animation.Animation: boolean mInitialized> = 0;

        r0.<android.view.animation.Animation: boolean mFillBefore> = 1;

        r0.<android.view.animation.Animation: boolean mFillAfter> = 0;

        r0.<android.view.animation.Animation: boolean mFillEnabled> = 0;

        r0.<android.view.animation.Animation: long mStartTime> = -1L;

        r0.<android.view.animation.Animation: int mRepeatCount> = 0;

        r0.<android.view.animation.Animation: int mRepeated> = 0;

        r0.<android.view.animation.Animation: int mRepeatMode> = 1;

        r0.<android.view.animation.Animation: float mScaleFactor> = 1.0F;

        r0.<android.view.animation.Animation: boolean mMore> = 1;

        r0.<android.view.animation.Animation: boolean mOneMoreTime> = 1;

        $r1 = new android.graphics.RectF;

        specialinvoke $r1.<android.graphics.RectF: void <init>()>();

        r0.<android.view.animation.Animation: android.graphics.RectF mPreviousRegion> = $r1;

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>()>();

        r0.<android.view.animation.Animation: android.graphics.RectF mRegion> = $r2;

        $r3 = new android.view.animation.Transformation;

        specialinvoke $r3.<android.view.animation.Transformation: void <init>()>();

        r0.<android.view.animation.Animation: android.view.animation.Transformation mTransformation> = $r3;

        $r4 = new android.view.animation.Transformation;

        specialinvoke $r4.<android.view.animation.Transformation: void <init>()>();

        r0.<android.view.animation.Animation: android.view.animation.Transformation mPreviousTransformation> = $r4;

        $r5 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.animation.Animation: dalvik.system.CloseGuard guard> = $r5;

        virtualinvoke r0.<android.view.animation.Animation: void ensureInterpolator()>();

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.view.animation.Animation r0;
        android.content.Context r1;
        int i0, $i1, $i3, $i5, $i6, $i7, $i8, $i9;
        android.graphics.RectF $r2, $r3;
        android.view.animation.Transformation $r4, $r5;
        dalvik.system.CloseGuard $r6;
        int[] $r7;
        long $l2, $l4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.util.AttributeSet r8;
        android.content.res.TypedArray r9;

        r0 := @this: android.view.animation.Animation;

        r1 := @parameter0: android.content.Context;

        r8 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.animation.Animation: boolean mEnded> = 0;

        r0.<android.view.animation.Animation: boolean mStarted> = 0;

        r0.<android.view.animation.Animation: boolean mCycleFlip> = 0;

        r0.<android.view.animation.Animation: boolean mInitialized> = 0;

        r0.<android.view.animation.Animation: boolean mFillBefore> = 1;

        r0.<android.view.animation.Animation: boolean mFillAfter> = 0;

        r0.<android.view.animation.Animation: boolean mFillEnabled> = 0;

        r0.<android.view.animation.Animation: long mStartTime> = -1L;

        r0.<android.view.animation.Animation: int mRepeatCount> = 0;

        r0.<android.view.animation.Animation: int mRepeated> = 0;

        r0.<android.view.animation.Animation: int mRepeatMode> = 1;

        r0.<android.view.animation.Animation: float mScaleFactor> = 1.0F;

        r0.<android.view.animation.Animation: boolean mMore> = 1;

        r0.<android.view.animation.Animation: boolean mOneMoreTime> = 1;

        $r2 = new android.graphics.RectF;

        specialinvoke $r2.<android.graphics.RectF: void <init>()>();

        r0.<android.view.animation.Animation: android.graphics.RectF mPreviousRegion> = $r2;

        $r3 = new android.graphics.RectF;

        specialinvoke $r3.<android.graphics.RectF: void <init>()>();

        r0.<android.view.animation.Animation: android.graphics.RectF mRegion> = $r3;

        $r4 = new android.view.animation.Transformation;

        specialinvoke $r4.<android.view.animation.Transformation: void <init>()>();

        r0.<android.view.animation.Animation: android.view.animation.Transformation mTransformation> = $r4;

        $r5 = new android.view.animation.Transformation;

        specialinvoke $r5.<android.view.animation.Transformation: void <init>()>();

        r0.<android.view.animation.Animation: android.view.animation.Transformation mPreviousTransformation> = $r5;

        $r6 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<android.view.animation.Animation: dalvik.system.CloseGuard guard> = $r6;

        $r7 = <com.android.internal.R$styleable: int[] Animation>;

        r9 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>(r8, $r7);

        $i1 = virtualinvoke r9.<android.content.res.TypedArray: int getInt(int,int)>(2, 0);

        $l2 = (long) $i1;

        virtualinvoke r0.<android.view.animation.Animation: void setDuration(long)>($l2);

        $i3 = virtualinvoke r9.<android.content.res.TypedArray: int getInt(int,int)>(5, 0);

        $l4 = (long) $i3;

        virtualinvoke r0.<android.view.animation.Animation: void setStartOffset(long)>($l4);

        $z0 = r0.<android.view.animation.Animation: boolean mFillEnabled>;

        $z1 = virtualinvoke r9.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(9, $z0);

        virtualinvoke r0.<android.view.animation.Animation: void setFillEnabled(boolean)>($z1);

        $z2 = r0.<android.view.animation.Animation: boolean mFillBefore>;

        $z3 = virtualinvoke r9.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, $z2);

        virtualinvoke r0.<android.view.animation.Animation: void setFillBefore(boolean)>($z3);

        $z4 = r0.<android.view.animation.Animation: boolean mFillAfter>;

        $z5 = virtualinvoke r9.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, $z4);

        virtualinvoke r0.<android.view.animation.Animation: void setFillAfter(boolean)>($z5);

        $i5 = r0.<android.view.animation.Animation: int mRepeatCount>;

        $i6 = virtualinvoke r9.<android.content.res.TypedArray: int getInt(int,int)>(6, $i5);

        virtualinvoke r0.<android.view.animation.Animation: void setRepeatCount(int)>($i6);

        $i7 = virtualinvoke r9.<android.content.res.TypedArray: int getInt(int,int)>(7, 1);

        virtualinvoke r0.<android.view.animation.Animation: void setRepeatMode(int)>($i7);

        $i8 = virtualinvoke r9.<android.content.res.TypedArray: int getInt(int,int)>(8, 0);

        virtualinvoke r0.<android.view.animation.Animation: void setZAdjustment(int)>($i8);

        $i9 = virtualinvoke r9.<android.content.res.TypedArray: int getInt(int,int)>(0, 0);

        virtualinvoke r0.<android.view.animation.Animation: void setBackgroundColor(int)>($i9);

        $z6 = virtualinvoke r9.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(10, 0);

        virtualinvoke r0.<android.view.animation.Animation: void setDetachWallpaper(boolean)>($z6);

        $z7 = virtualinvoke r9.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(12, 0);

        virtualinvoke r0.<android.view.animation.Animation: void setShowWallpaper(boolean)>($z7);

        $z8 = virtualinvoke r9.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(11, 0);

        virtualinvoke r0.<android.view.animation.Animation: void setHasRoundedCorners(boolean)>($z8);

        i0 = virtualinvoke r9.<android.content.res.TypedArray: int getResourceId(int,int)>(1, 0);

        virtualinvoke r9.<android.content.res.TypedArray: void recycle()>();

        if i0 <= 0 goto label1;

        virtualinvoke r0.<android.view.animation.Animation: void setInterpolator(android.content.Context,int)>(r1, i0);

     label1:
        virtualinvoke r0.<android.view.animation.Animation: void ensureInterpolator()>();

        return;
    }

    private void fireAnimationEnd()
    {
        android.view.animation.Animation r0;
        android.os.Handler r1;
        boolean $z0;
        java.lang.Runnable $r2;

        r0 := @this: android.view.animation.Animation;

        $z0 = specialinvoke r0.<android.view.animation.Animation: boolean hasAnimationListener()>();

        if $z0 == 0 goto label2;

        r1 = r0.<android.view.animation.Animation: android.os.Handler mListenerHandler>;

        if r1 != null goto label1;

        virtualinvoke r0.<android.view.animation.Animation: void dispatchAnimationEnd()>();

        goto label2;

     label1:
        $r2 = r0.<android.view.animation.Animation: java.lang.Runnable mOnEnd>;

        virtualinvoke r1.<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>($r2);

     label2:
        return;
    }

    private void fireAnimationRepeat()
    {
        android.view.animation.Animation r0;
        android.os.Handler r1;
        boolean $z0;
        java.lang.Runnable $r2;

        r0 := @this: android.view.animation.Animation;

        $z0 = specialinvoke r0.<android.view.animation.Animation: boolean hasAnimationListener()>();

        if $z0 == 0 goto label2;

        r1 = r0.<android.view.animation.Animation: android.os.Handler mListenerHandler>;

        if r1 != null goto label1;

        virtualinvoke r0.<android.view.animation.Animation: void dispatchAnimationRepeat()>();

        goto label2;

     label1:
        $r2 = r0.<android.view.animation.Animation: java.lang.Runnable mOnRepeat>;

        virtualinvoke r1.<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>($r2);

     label2:
        return;
    }

    private void fireAnimationStart()
    {
        android.view.animation.Animation r0;
        android.os.Handler r1;
        boolean $z0;
        java.lang.Runnable $r2;

        r0 := @this: android.view.animation.Animation;

        $z0 = specialinvoke r0.<android.view.animation.Animation: boolean hasAnimationListener()>();

        if $z0 == 0 goto label2;

        r1 = r0.<android.view.animation.Animation: android.os.Handler mListenerHandler>;

        if r1 != null goto label1;

        virtualinvoke r0.<android.view.animation.Animation: void dispatchAnimationStart()>();

        goto label2;

     label1:
        $r2 = r0.<android.view.animation.Animation: java.lang.Runnable mOnStart>;

        virtualinvoke r1.<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>($r2);

     label2:
        return;
    }

    private boolean hasAnimationListener()
    {
        android.view.animation.Animation r0;
        android.view.animation.Animation$AnimationListener $r1;
        boolean z0;

        r0 := @this: android.view.animation.Animation;

        $r1 = r0.<android.view.animation.Animation: android.view.animation.Animation$AnimationListener mListener>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isCanceled()
    {
        android.view.animation.Animation r0;
        long $l0;
        byte $b1;
        boolean z0;

        r0 := @this: android.view.animation.Animation;

        $l0 = r0.<android.view.animation.Animation: long mStartTime>;

        $b1 = $l0 cmp -9223372036854775808L;

        if $b1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    protected void applyTransformation(float, android.view.animation.Transformation)
    {
        android.view.animation.Animation r0;
        float f0;
        android.view.animation.Transformation r1;

        r0 := @this: android.view.animation.Animation;

        f0 := @parameter0: float;

        r1 := @parameter1: android.view.animation.Transformation;

        return;
    }

    public void cancel()
    {
        android.view.animation.Animation r0;
        boolean $z0, $z1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: android.view.animation.Animation;

        $z0 = r0.<android.view.animation.Animation: boolean mStarted>;

        if $z0 == 0 goto label1;

        $z1 = r0.<android.view.animation.Animation: boolean mEnded>;

        if $z1 != 0 goto label1;

        specialinvoke r0.<android.view.animation.Animation: void fireAnimationEnd()>();

        r0.<android.view.animation.Animation: boolean mEnded> = 1;

        $r1 = r0.<android.view.animation.Animation: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

     label1:
        r0.<android.view.animation.Animation: long mStartTime> = -9223372036854775808L;

        r0.<android.view.animation.Animation: boolean mOneMoreTime> = 0;

        r0.<android.view.animation.Animation: boolean mMore> = 0;

        return;
    }

    protected android.view.animation.Animation clone() throws java.lang.CloneNotSupportedException
    {
        android.view.animation.Animation r0, r1;
        java.lang.Object $r2;
        android.graphics.RectF $r3, $r4;
        android.view.animation.Transformation $r5, $r6;

        r0 := @this: android.view.animation.Animation;

        $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>();

        r1 = (android.view.animation.Animation) $r2;

        $r3 = new android.graphics.RectF;

        specialinvoke $r3.<android.graphics.RectF: void <init>()>();

        r1.<android.view.animation.Animation: android.graphics.RectF mPreviousRegion> = $r3;

        $r4 = new android.graphics.RectF;

        specialinvoke $r4.<android.graphics.RectF: void <init>()>();

        r1.<android.view.animation.Animation: android.graphics.RectF mRegion> = $r4;

        $r5 = new android.view.animation.Transformation;

        specialinvoke $r5.<android.view.animation.Transformation: void <init>()>();

        r1.<android.view.animation.Animation: android.view.animation.Transformation mTransformation> = $r5;

        $r6 = new android.view.animation.Transformation;

        specialinvoke $r6.<android.view.animation.Transformation: void <init>()>();

        r1.<android.view.animation.Animation: android.view.animation.Transformation mPreviousTransformation> = $r6;

        return r1;
    }

    protected volatile java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        android.view.animation.Animation r0, $r1;

        r0 := @this: android.view.animation.Animation;

        $r1 = virtualinvoke r0.<android.view.animation.Animation: android.view.animation.Animation clone()>();

        return $r1;
    }

    public long computeDurationHint()
    {
        android.view.animation.Animation r0;
        long $l0, $l1, $l2, $l5, $l6;
        int $i3, $i4;

        r0 := @this: android.view.animation.Animation;

        $l0 = virtualinvoke r0.<android.view.animation.Animation: long getStartOffset()>();

        $l1 = virtualinvoke r0.<android.view.animation.Animation: long getDuration()>();

        $l2 = $l0 + $l1;

        $i3 = virtualinvoke r0.<android.view.animation.Animation: int getRepeatCount()>();

        $i4 = $i3 + 1;

        $l5 = (long) $i4;

        $l6 = $l2 * $l5;

        return $l6;
    }

    public void detach()
    {
        android.view.animation.Animation r0;
        boolean $z0, $z1;
        dalvik.system.CloseGuard $r1;

        r0 := @this: android.view.animation.Animation;

        $z0 = r0.<android.view.animation.Animation: boolean mStarted>;

        if $z0 == 0 goto label1;

        $z1 = r0.<android.view.animation.Animation: boolean mEnded>;

        if $z1 != 0 goto label1;

        r0.<android.view.animation.Animation: boolean mEnded> = 1;

        $r1 = r0.<android.view.animation.Animation: dalvik.system.CloseGuard guard>;

        virtualinvoke $r1.<dalvik.system.CloseGuard: void close()>();

        specialinvoke r0.<android.view.animation.Animation: void fireAnimationEnd()>();

     label1:
        return;
    }

    void dispatchAnimationEnd()
    {
        android.view.animation.Animation r0;
        android.view.animation.Animation$AnimationListener r1;

        r0 := @this: android.view.animation.Animation;

        r1 = r0.<android.view.animation.Animation: android.view.animation.Animation$AnimationListener mListener>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.view.animation.Animation$AnimationListener: void onAnimationEnd(android.view.animation.Animation)>(r0);

     label1:
        return;
    }

    void dispatchAnimationRepeat()
    {
        android.view.animation.Animation r0;
        android.view.animation.Animation$AnimationListener r1;

        r0 := @this: android.view.animation.Animation;

        r1 = r0.<android.view.animation.Animation: android.view.animation.Animation$AnimationListener mListener>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.view.animation.Animation$AnimationListener: void onAnimationRepeat(android.view.animation.Animation)>(r0);

     label1:
        return;
    }

    void dispatchAnimationStart()
    {
        android.view.animation.Animation r0;
        android.view.animation.Animation$AnimationListener r1;

        r0 := @this: android.view.animation.Animation;

        r1 = r0.<android.view.animation.Animation: android.view.animation.Animation$AnimationListener mListener>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.view.animation.Animation$AnimationListener: void onAnimationStart(android.view.animation.Animation)>(r0);

     label1:
        return;
    }

    protected void ensureInterpolator()
    {
        android.view.animation.Animation r0;
        android.view.animation.Interpolator $r1;
        android.view.animation.AccelerateDecelerateInterpolator $r2;

        r0 := @this: android.view.animation.Animation;

        $r1 = r0.<android.view.animation.Animation: android.view.animation.Interpolator mInterpolator>;

        if $r1 != null goto label1;

        $r2 = new android.view.animation.AccelerateDecelerateInterpolator;

        specialinvoke $r2.<android.view.animation.AccelerateDecelerateInterpolator: void <init>()>();

        r0.<android.view.animation.Animation: android.view.animation.Interpolator mInterpolator> = $r2;

     label1:
        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        android.view.animation.Animation r0;
        dalvik.system.CloseGuard $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: android.view.animation.Animation;

     label1:
        $r2 = r0.<android.view.animation.Animation: dalvik.system.CloseGuard guard>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.animation.Animation: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r4 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getBackgroundColor()
    {
        android.view.animation.Animation r0;

        r0 := @this: android.view.animation.Animation;

        return 0;
    }

    public boolean getDetachWallpaper()
    {
        android.view.animation.Animation r0;

        r0 := @this: android.view.animation.Animation;

        return 1;
    }

    public long getDuration()
    {
        android.view.animation.Animation r0;
        long $l0;

        r0 := @this: android.view.animation.Animation;

        $l0 = r0.<android.view.animation.Animation: long mDuration>;

        return $l0;
    }

    public boolean getFillAfter()
    {
        android.view.animation.Animation r0;
        boolean $z0;

        r0 := @this: android.view.animation.Animation;

        $z0 = r0.<android.view.animation.Animation: boolean mFillAfter>;

        return $z0;
    }

    public boolean getFillBefore()
    {
        android.view.animation.Animation r0;
        boolean $z0;

        r0 := @this: android.view.animation.Animation;

        $z0 = r0.<android.view.animation.Animation: boolean mFillBefore>;

        return $z0;
    }

    public android.view.animation.Interpolator getInterpolator()
    {
        android.view.animation.Animation r0;
        android.view.animation.Interpolator $r1;

        r0 := @this: android.view.animation.Animation;

        $r1 = r0.<android.view.animation.Animation: android.view.animation.Interpolator mInterpolator>;

        return $r1;
    }

    public void getInvalidateRegion(int, int, int, int, android.graphics.RectF, android.view.animation.Transformation)
    {
        android.view.animation.Animation r0;
        int i0, i1, i2, i3;
        android.view.animation.Transformation r1, r6, r7;
        android.graphics.RectF r2, r4, r5;
        float $f0, $f1, $f2, $f3;
        android.graphics.Matrix $r3;

        r0 := @this: android.view.animation.Animation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r4 := @parameter4: android.graphics.RectF;

        r1 := @parameter5: android.view.animation.Transformation;

        r2 = r0.<android.view.animation.Animation: android.graphics.RectF mRegion>;

        r5 = r0.<android.view.animation.Animation: android.graphics.RectF mPreviousRegion>;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        virtualinvoke r4.<android.graphics.RectF: void set(float,float,float,float)>($f3, $f2, $f1, $f0);

        $r3 = virtualinvoke r1.<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>();

        virtualinvoke $r3.<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>(r4);

        virtualinvoke r4.<android.graphics.RectF: void inset(float,float)>(-1.0F, -1.0F);

        virtualinvoke r2.<android.graphics.RectF: void set(android.graphics.RectF)>(r4);

        virtualinvoke r4.<android.graphics.RectF: void union(android.graphics.RectF)>(r5);

        virtualinvoke r5.<android.graphics.RectF: void set(android.graphics.RectF)>(r2);

        r6 = r0.<android.view.animation.Animation: android.view.animation.Transformation mTransformation>;

        r7 = r0.<android.view.animation.Animation: android.view.animation.Transformation mPreviousTransformation>;

        virtualinvoke r6.<android.view.animation.Transformation: void set(android.view.animation.Transformation)>(r1);

        virtualinvoke r1.<android.view.animation.Transformation: void set(android.view.animation.Transformation)>(r7);

        virtualinvoke r7.<android.view.animation.Transformation: void set(android.view.animation.Transformation)>(r6);

        return;
    }

    public int getRepeatCount()
    {
        android.view.animation.Animation r0;
        int $i0;

        r0 := @this: android.view.animation.Animation;

        $i0 = r0.<android.view.animation.Animation: int mRepeatCount>;

        return $i0;
    }

    public int getRepeatMode()
    {
        android.view.animation.Animation r0;
        int $i0;

        r0 := @this: android.view.animation.Animation;

        $i0 = r0.<android.view.animation.Animation: int mRepeatMode>;

        return $i0;
    }

    protected float getScaleFactor()
    {
        android.view.animation.Animation r0;
        float $f0;

        r0 := @this: android.view.animation.Animation;

        $f0 = r0.<android.view.animation.Animation: float mScaleFactor>;

        return $f0;
    }

    public boolean getShowWallpaper()
    {
        android.view.animation.Animation r0;
        boolean $z0;

        r0 := @this: android.view.animation.Animation;

        $z0 = r0.<android.view.animation.Animation: boolean mShowWallpaper>;

        return $z0;
    }

    public long getStartOffset()
    {
        android.view.animation.Animation r0;
        long $l0;

        r0 := @this: android.view.animation.Animation;

        $l0 = r0.<android.view.animation.Animation: long mStartOffset>;

        return $l0;
    }

    public long getStartTime()
    {
        android.view.animation.Animation r0;
        long $l0;

        r0 := @this: android.view.animation.Animation;

        $l0 = r0.<android.view.animation.Animation: long mStartTime>;

        return $l0;
    }

    public boolean getTransformation(long, android.view.animation.Transformation)
    {
        android.view.animation.Animation r0;
        long l0, l1, l2, $l3, $l6, $l16, $l17, $l18;
        android.view.animation.Transformation r1;
        byte $b4, $b5, $b7, $b8, $b9, $b19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, $z15, $z16;
        android.view.animation.Interpolator $r2;
        float $f0, $f1, $f2, $f3, $f4, f5, f6, f7, f8;
        int $i10, $i11, $i12, $i13, $i14, $i15;
        dalvik.system.CloseGuard $r3, $r4;

        r0 := @this: android.view.animation.Animation;

        l0 := @parameter0: long;

        r1 := @parameter1: android.view.animation.Transformation;

        $l3 = r0.<android.view.animation.Animation: long mStartTime>;

        $b4 = $l3 cmp -1L;

        if $b4 != 0 goto label01;

        r0.<android.view.animation.Animation: long mStartTime> = l0;

     label01:
        l1 = virtualinvoke r0.<android.view.animation.Animation: long getStartOffset()>();

        l2 = r0.<android.view.animation.Animation: long mDuration>;

        $b5 = l2 cmp 0L;

        if $b5 == 0 goto label02;

        $l16 = r0.<android.view.animation.Animation: long mStartTime>;

        $l17 = $l16 + l1;

        $l18 = l0 - $l17;

        $f4 = (float) $l18;

        $f3 = (float) l2;

        f5 = $f4 / $f3;

        goto label04;

     label02:
        $l6 = r0.<android.view.animation.Animation: long mStartTime>;

        $b7 = l0 cmp $l6;

        if $b7 >= 0 goto label03;

        f5 = 0.0F;

        goto label04;

     label03:
        f5 = 1.0F;

     label04:
        $b19 = f5 cmpl 1.0F;

        if $b19 >= 0 goto label06;

        $z12 = specialinvoke r0.<android.view.animation.Animation: boolean isCanceled()>();

        if $z12 == 0 goto label05;

        goto label06;

     label05:
        z13 = 0;

        goto label07;

     label06:
        z13 = 1;

     label07:
        if z13 != 0 goto label08;

        z14 = 1;

        goto label09;

     label08:
        z14 = 0;

     label09:
        r0.<android.view.animation.Animation: boolean mMore> = z14;

        f6 = f5;

        $z0 = r0.<android.view.animation.Animation: boolean mFillEnabled>;

        if $z0 != 0 goto label10;

        $f2 = staticinvoke <java.lang.Math: float min(float,float)>(f5, 1.0F);

        f6 = staticinvoke <java.lang.Math: float max(float,float)>($f2, 0.0F);

     label10:
        $b8 = f6 cmpl 0.0F;

        if $b8 >= 0 goto label11;

        $z11 = r0.<android.view.animation.Animation: boolean mFillBefore>;

        if $z11 == 0 goto label12;

     label11:
        $b9 = f6 cmpg 1.0F;

        if $b9 <= 0 goto label13;

        $z10 = r0.<android.view.animation.Animation: boolean mFillAfter>;

        if $z10 == 0 goto label12;

        goto label13;

     label12:
        goto label17;

     label13:
        $z1 = r0.<android.view.animation.Animation: boolean mStarted>;

        if $z1 != 0 goto label14;

        specialinvoke r0.<android.view.animation.Animation: void fireAnimationStart()>();

        r0.<android.view.animation.Animation: boolean mStarted> = 1;

        $z9 = <android.view.animation.Animation$NoImagePreloadHolder: boolean USE_CLOSEGUARD>;

        if $z9 == 0 goto label14;

        $r4 = r0.<android.view.animation.Animation: dalvik.system.CloseGuard guard>;

        virtualinvoke $r4.<dalvik.system.CloseGuard: void open(java.lang.String)>("cancel or detach or getTransformation");

     label14:
        f7 = f6;

        $z15 = r0.<android.view.animation.Animation: boolean mFillEnabled>;

        if $z15 == 0 goto label15;

        $f1 = staticinvoke <java.lang.Math: float min(float,float)>(f6, 1.0F);

        f7 = staticinvoke <java.lang.Math: float max(float,float)>($f1, 0.0F);

     label15:
        f8 = f7;

        $z2 = r0.<android.view.animation.Animation: boolean mCycleFlip>;

        if $z2 == 0 goto label16;

        f8 = 1.0F - f7;

     label16:
        $r2 = r0.<android.view.animation.Animation: android.view.animation.Interpolator mInterpolator>;

        $f0 = interfaceinvoke $r2.<android.view.animation.Interpolator: float getInterpolation(float)>(f8);

        virtualinvoke r0.<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>($f0, r1);

     label17:
        if z13 == 0 goto label22;

        $i11 = r0.<android.view.animation.Animation: int mRepeatCount>;

        $i10 = r0.<android.view.animation.Animation: int mRepeated>;

        if $i11 == $i10 goto label21;

        $z6 = specialinvoke r0.<android.view.animation.Animation: boolean isCanceled()>();

        if $z6 == 0 goto label18;

        goto label21;

     label18:
        $i12 = r0.<android.view.animation.Animation: int mRepeatCount>;

        if $i12 <= 0 goto label19;

        $i14 = r0.<android.view.animation.Animation: int mRepeated>;

        $i15 = $i14 + 1;

        r0.<android.view.animation.Animation: int mRepeated> = $i15;

     label19:
        $i13 = r0.<android.view.animation.Animation: int mRepeatMode>;

        if $i13 != 2 goto label20;

        $z7 = r0.<android.view.animation.Animation: boolean mCycleFlip>;

        $z8 = $z7 ^ 1;

        r0.<android.view.animation.Animation: boolean mCycleFlip> = $z8;

     label20:
        r0.<android.view.animation.Animation: long mStartTime> = -1L;

        r0.<android.view.animation.Animation: boolean mMore> = 1;

        specialinvoke r0.<android.view.animation.Animation: void fireAnimationRepeat()>();

        goto label22;

     label21:
        $z5 = r0.<android.view.animation.Animation: boolean mEnded>;

        if $z5 != 0 goto label22;

        r0.<android.view.animation.Animation: boolean mEnded> = 1;

        $r3 = r0.<android.view.animation.Animation: dalvik.system.CloseGuard guard>;

        virtualinvoke $r3.<dalvik.system.CloseGuard: void close()>();

        specialinvoke r0.<android.view.animation.Animation: void fireAnimationEnd()>();

     label22:
        $z16 = r0.<android.view.animation.Animation: boolean mMore>;

        if $z16 != 0 goto label23;

        $z4 = r0.<android.view.animation.Animation: boolean mOneMoreTime>;

        if $z4 == 0 goto label23;

        r0.<android.view.animation.Animation: boolean mOneMoreTime> = 0;

        return 1;

     label23:
        $z3 = r0.<android.view.animation.Animation: boolean mMore>;

        return $z3;
    }

    public boolean getTransformation(long, android.view.animation.Transformation, float)
    {
        android.view.animation.Animation r0;
        long l0;
        android.view.animation.Transformation r1;
        float f0;
        boolean $z0;

        r0 := @this: android.view.animation.Animation;

        l0 := @parameter0: long;

        r1 := @parameter1: android.view.animation.Transformation;

        f0 := @parameter2: float;

        r0.<android.view.animation.Animation: float mScaleFactor> = f0;

        $z0 = virtualinvoke r0.<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>(l0, r1);

        return $z0;
    }

    public int getZAdjustment()
    {
        android.view.animation.Animation r0;
        int $i0;

        r0 := @this: android.view.animation.Animation;

        $i0 = r0.<android.view.animation.Animation: int mZAdjustment>;

        return $i0;
    }

    public boolean hasAlpha()
    {
        android.view.animation.Animation r0;

        r0 := @this: android.view.animation.Animation;

        return 0;
    }

    public boolean hasEnded()
    {
        android.view.animation.Animation r0;
        boolean $z0;

        r0 := @this: android.view.animation.Animation;

        $z0 = r0.<android.view.animation.Animation: boolean mEnded>;

        return $z0;
    }

    public boolean hasRoundedCorners()
    {
        android.view.animation.Animation r0;
        boolean $z0;

        r0 := @this: android.view.animation.Animation;

        $z0 = r0.<android.view.animation.Animation: boolean mHasRoundedCorners>;

        return $z0;
    }

    public boolean hasStarted()
    {
        android.view.animation.Animation r0;
        boolean $z0;

        r0 := @this: android.view.animation.Animation;

        $z0 = r0.<android.view.animation.Animation: boolean mStarted>;

        return $z0;
    }

    public void initialize(int, int, int, int)
    {
        android.view.animation.Animation r0;
        int i0, i1, i2, i3;

        r0 := @this: android.view.animation.Animation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        virtualinvoke r0.<android.view.animation.Animation: void reset()>();

        r0.<android.view.animation.Animation: boolean mInitialized> = 1;

        return;
    }

    public void initializeInvalidateRegion(int, int, int, int)
    {
        android.view.animation.Animation r0;
        int i0, i1, i2, i3;
        float $f0, $f1, $f2, $f3, $f4;
        boolean $z0;
        android.view.animation.Interpolator $r1;
        android.graphics.RectF r2;
        android.view.animation.Transformation r3;

        r0 := @this: android.view.animation.Animation;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r2 = r0.<android.view.animation.Animation: android.graphics.RectF mPreviousRegion>;

        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        virtualinvoke r2.<android.graphics.RectF: void set(float,float,float,float)>($f3, $f2, $f1, $f0);

        virtualinvoke r2.<android.graphics.RectF: void inset(float,float)>(-1.0F, -1.0F);

        $z0 = r0.<android.view.animation.Animation: boolean mFillBefore>;

        if $z0 == 0 goto label1;

        r3 = r0.<android.view.animation.Animation: android.view.animation.Transformation mPreviousTransformation>;

        $r1 = r0.<android.view.animation.Animation: android.view.animation.Interpolator mInterpolator>;

        $f4 = interfaceinvoke $r1.<android.view.animation.Interpolator: float getInterpolation(float)>(0.0F);

        virtualinvoke r0.<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>($f4, r3);

     label1:
        return;
    }

    public boolean isFillEnabled()
    {
        android.view.animation.Animation r0;
        boolean $z0;

        r0 := @this: android.view.animation.Animation;

        $z0 = r0.<android.view.animation.Animation: boolean mFillEnabled>;

        return $z0;
    }

    public boolean isInitialized()
    {
        android.view.animation.Animation r0;
        boolean $z0;

        r0 := @this: android.view.animation.Animation;

        $z0 = r0.<android.view.animation.Animation: boolean mInitialized>;

        return $z0;
    }

    public void reset()
    {
        android.view.animation.Animation r0;
        android.graphics.RectF $r1;
        android.view.animation.Transformation $r2;

        r0 := @this: android.view.animation.Animation;

        $r1 = r0.<android.view.animation.Animation: android.graphics.RectF mPreviousRegion>;

        virtualinvoke $r1.<android.graphics.RectF: void setEmpty()>();

        $r2 = r0.<android.view.animation.Animation: android.view.animation.Transformation mPreviousTransformation>;

        virtualinvoke $r2.<android.view.animation.Transformation: void clear()>();

        r0.<android.view.animation.Animation: boolean mInitialized> = 0;

        r0.<android.view.animation.Animation: boolean mCycleFlip> = 0;

        r0.<android.view.animation.Animation: int mRepeated> = 0;

        r0.<android.view.animation.Animation: boolean mMore> = 1;

        r0.<android.view.animation.Animation: boolean mOneMoreTime> = 1;

        r0.<android.view.animation.Animation: android.os.Handler mListenerHandler> = null;

        return;
    }

    protected float resolveSize(int, float, int, int)
    {
        android.view.animation.Animation r0;
        int i0, i1, i2;
        float f0, $f1, $f2, $f3, $f4;

        r0 := @this: android.view.animation.Animation;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        return f0;

     label1:
        $f3 = (float) i2;

        $f4 = $f3 * f0;

        return $f4;

     label2:
        $f1 = (float) i1;

        $f2 = $f1 * f0;

        return $f2;
    }

    public void restrictDuration(long)
    {
        android.view.animation.Animation r0;
        long l0, l1, l2, $l4, $l6, $l8, $l10, $l11, $l13, l14, $l16;
        byte $b3, $b5, $b7, $b9, $b12;
        int i15, $i17, i18;

        r0 := @this: android.view.animation.Animation;

        l0 := @parameter0: long;

        l1 = r0.<android.view.animation.Animation: long mStartOffset>;

        $b3 = l1 cmp l0;

        if $b3 <= 0 goto label1;

        r0.<android.view.animation.Animation: long mStartOffset> = l0;

        r0.<android.view.animation.Animation: long mDuration> = 0L;

        r0.<android.view.animation.Animation: int mRepeatCount> = 0;

        return;

     label1:
        $l4 = r0.<android.view.animation.Animation: long mDuration>;

        l2 = $l4 + l1;

        l14 = l2;

        $b5 = l2 cmp l0;

        if $b5 <= 0 goto label2;

        $l13 = l0 - l1;

        r0.<android.view.animation.Animation: long mDuration> = $l13;

        l14 = l0;

     label2:
        $l6 = r0.<android.view.animation.Animation: long mDuration>;

        $b7 = $l6 cmp 0L;

        if $b7 > 0 goto label3;

        r0.<android.view.animation.Animation: long mDuration> = 0L;

        r0.<android.view.animation.Animation: int mRepeatCount> = 0;

        return;

     label3:
        i15 = r0.<android.view.animation.Animation: int mRepeatCount>;

        if i15 < 0 goto label4;

        $l8 = (long) i15;

        $b9 = $l8 cmp l0;

        if $b9 > 0 goto label4;

        $l10 = (long) i15;

        $l11 = $l10 * l14;

        $b12 = $l11 cmp l0;

        if $b12 <= 0 goto label5;

     label4:
        $l16 = l0 / l14;

        $i17 = (int) $l16;

        i18 = $i17 - 1;

        r0.<android.view.animation.Animation: int mRepeatCount> = i18;

        if i18 >= 0 goto label5;

        r0.<android.view.animation.Animation: int mRepeatCount> = 0;

     label5:
        return;
    }

    public void scaleCurrentDuration(float)
    {
        android.view.animation.Animation r0;
        float f0, $f1, $f2, $f3, $f4;
        long $l0, $l1, $l2, $l3;

        r0 := @this: android.view.animation.Animation;

        f0 := @parameter0: float;

        $l0 = r0.<android.view.animation.Animation: long mDuration>;

        $f1 = (float) $l0;

        $f2 = $f1 * f0;

        $l1 = (long) $f2;

        r0.<android.view.animation.Animation: long mDuration> = $l1;

        $l2 = r0.<android.view.animation.Animation: long mStartOffset>;

        $f3 = (float) $l2;

        $f4 = $f3 * f0;

        $l3 = (long) $f4;

        r0.<android.view.animation.Animation: long mStartOffset> = $l3;

        return;
    }

    public void setAnimationListener(android.view.animation.Animation$AnimationListener)
    {
        android.view.animation.Animation r0;
        android.view.animation.Animation$AnimationListener r1;

        r0 := @this: android.view.animation.Animation;

        r1 := @parameter0: android.view.animation.Animation$AnimationListener;

        r0.<android.view.animation.Animation: android.view.animation.Animation$AnimationListener mListener> = r1;

        return;
    }

    public void setBackgroundColor(int)
    {
        android.view.animation.Animation r0;
        int i0;

        r0 := @this: android.view.animation.Animation;

        i0 := @parameter0: int;

        return;
    }

    public void setDetachWallpaper(boolean)
    {
        android.view.animation.Animation r0;
        boolean z0;

        r0 := @this: android.view.animation.Animation;

        z0 := @parameter0: boolean;

        return;
    }

    public void setDuration(long)
    {
        android.view.animation.Animation r0;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: android.view.animation.Animation;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        r0.<android.view.animation.Animation: long mDuration> = l0;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Animation duration cannot be negative");

        throw $r1;
    }

    public void setFillAfter(boolean)
    {
        android.view.animation.Animation r0;
        boolean z0;

        r0 := @this: android.view.animation.Animation;

        z0 := @parameter0: boolean;

        r0.<android.view.animation.Animation: boolean mFillAfter> = z0;

        return;
    }

    public void setFillBefore(boolean)
    {
        android.view.animation.Animation r0;
        boolean z0;

        r0 := @this: android.view.animation.Animation;

        z0 := @parameter0: boolean;

        r0.<android.view.animation.Animation: boolean mFillBefore> = z0;

        return;
    }

    public void setFillEnabled(boolean)
    {
        android.view.animation.Animation r0;
        boolean z0;

        r0 := @this: android.view.animation.Animation;

        z0 := @parameter0: boolean;

        r0.<android.view.animation.Animation: boolean mFillEnabled> = z0;

        return;
    }

    public void setHasRoundedCorners(boolean)
    {
        android.view.animation.Animation r0;
        boolean z0;

        r0 := @this: android.view.animation.Animation;

        z0 := @parameter0: boolean;

        r0.<android.view.animation.Animation: boolean mHasRoundedCorners> = z0;

        return;
    }

    public void setInterpolator(android.content.Context, int)
    {
        android.view.animation.Animation r0;
        android.content.Context r1;
        int i0;
        android.view.animation.Interpolator $r2;

        r0 := @this: android.view.animation.Animation;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r2 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r1, i0);

        virtualinvoke r0.<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>($r2);

        return;
    }

    public void setInterpolator(android.view.animation.Interpolator)
    {
        android.view.animation.Animation r0;
        android.view.animation.Interpolator r1;

        r0 := @this: android.view.animation.Animation;

        r1 := @parameter0: android.view.animation.Interpolator;

        r0.<android.view.animation.Animation: android.view.animation.Interpolator mInterpolator> = r1;

        return;
    }

    public void setListenerHandler(android.os.Handler)
    {
        android.view.animation.Animation r0;
        android.os.Handler r1, $r2;
        android.view.animation.Animation$1 $r3;
        android.view.animation.Animation$2 $r4;
        android.view.animation.Animation$3 $r5;

        r0 := @this: android.view.animation.Animation;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<android.view.animation.Animation: android.os.Handler mListenerHandler>;

        if $r2 != null goto label1;

        $r3 = new android.view.animation.Animation$1;

        specialinvoke $r3.<android.view.animation.Animation$1: void <init>(android.view.animation.Animation)>(r0);

        r0.<android.view.animation.Animation: java.lang.Runnable mOnStart> = $r3;

        $r4 = new android.view.animation.Animation$2;

        specialinvoke $r4.<android.view.animation.Animation$2: void <init>(android.view.animation.Animation)>(r0);

        r0.<android.view.animation.Animation: java.lang.Runnable mOnRepeat> = $r4;

        $r5 = new android.view.animation.Animation$3;

        specialinvoke $r5.<android.view.animation.Animation$3: void <init>(android.view.animation.Animation)>(r0);

        r0.<android.view.animation.Animation: java.lang.Runnable mOnEnd> = $r5;

     label1:
        r0.<android.view.animation.Animation: android.os.Handler mListenerHandler> = r1;

        return;
    }

    public void setRepeatCount(int)
    {
        android.view.animation.Animation r0;
        int i0, i1;

        r0 := @this: android.view.animation.Animation;

        i0 := @parameter0: int;

        i1 = i0;

        if i0 >= 0 goto label1;

        i1 = -1;

     label1:
        r0.<android.view.animation.Animation: int mRepeatCount> = i1;

        return;
    }

    public void setRepeatMode(int)
    {
        android.view.animation.Animation r0;
        int i0;

        r0 := @this: android.view.animation.Animation;

        i0 := @parameter0: int;

        r0.<android.view.animation.Animation: int mRepeatMode> = i0;

        return;
    }

    public void setShowWallpaper(boolean)
    {
        android.view.animation.Animation r0;
        boolean z0;

        r0 := @this: android.view.animation.Animation;

        z0 := @parameter0: boolean;

        r0.<android.view.animation.Animation: boolean mShowWallpaper> = z0;

        return;
    }

    public void setStartOffset(long)
    {
        android.view.animation.Animation r0;
        long l0;

        r0 := @this: android.view.animation.Animation;

        l0 := @parameter0: long;

        r0.<android.view.animation.Animation: long mStartOffset> = l0;

        return;
    }

    public void setStartTime(long)
    {
        android.view.animation.Animation r0;
        long l0;

        r0 := @this: android.view.animation.Animation;

        l0 := @parameter0: long;

        r0.<android.view.animation.Animation: long mStartTime> = l0;

        r0.<android.view.animation.Animation: boolean mEnded> = 0;

        r0.<android.view.animation.Animation: boolean mStarted> = 0;

        r0.<android.view.animation.Animation: boolean mCycleFlip> = 0;

        r0.<android.view.animation.Animation: int mRepeated> = 0;

        r0.<android.view.animation.Animation: boolean mMore> = 1;

        return;
    }

    public void setZAdjustment(int)
    {
        android.view.animation.Animation r0;
        int i0;

        r0 := @this: android.view.animation.Animation;

        i0 := @parameter0: int;

        r0.<android.view.animation.Animation: int mZAdjustment> = i0;

        return;
    }

    public void start()
    {
        android.view.animation.Animation r0;

        r0 := @this: android.view.animation.Animation;

        virtualinvoke r0.<android.view.animation.Animation: void setStartTime(long)>(-1L);

        return;
    }

    public void startNow()
    {
        android.view.animation.Animation r0;
        long $l0;

        r0 := @this: android.view.animation.Animation;

        $l0 = staticinvoke <android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>();

        virtualinvoke r0.<android.view.animation.Animation: void setStartTime(long)>($l0);

        return;
    }

    public boolean willChangeBounds()
    {
        android.view.animation.Animation r0;

        r0 := @this: android.view.animation.Animation;

        return 1;
    }

    public boolean willChangeTransformationMatrix()
    {
        android.view.animation.Animation r0;

        r0 := @this: android.view.animation.Animation;

        return 1;
    }

    public static void <clinit>()
    {
        <android.view.animation.Animation: int ZORDER_TOP> = 1;

        <android.view.animation.Animation: int ZORDER_NORMAL> = 0;

        <android.view.animation.Animation: int ZORDER_BOTTOM> = -1;

        <android.view.animation.Animation: int START_ON_FIRST_FRAME> = -1;

        <android.view.animation.Animation: int REVERSE> = 2;

        <android.view.animation.Animation: int RESTART> = 1;

        <android.view.animation.Animation: int RELATIVE_TO_SELF> = 1;

        <android.view.animation.Animation: int RELATIVE_TO_PARENT> = 2;

        <android.view.animation.Animation: int INFINITE> = -1;

        <android.view.animation.Animation: int ABSOLUTE> = 0;

        return;
    }
}
