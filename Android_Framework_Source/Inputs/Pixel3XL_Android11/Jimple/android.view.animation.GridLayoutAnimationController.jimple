public class android.view.animation.GridLayoutAnimationController extends android.view.animation.LayoutAnimationController
{
    public static final int DIRECTION_BOTTOM_TO_TOP;
    public static final int DIRECTION_HORIZONTAL_MASK;
    public static final int DIRECTION_LEFT_TO_RIGHT;
    public static final int DIRECTION_RIGHT_TO_LEFT;
    public static final int DIRECTION_TOP_TO_BOTTOM;
    public static final int DIRECTION_VERTICAL_MASK;
    public static final int PRIORITY_COLUMN;
    public static final int PRIORITY_NONE;
    public static final int PRIORITY_ROW;
    private float mColumnDelay;
    private int mDirection;
    private int mDirectionPriority;
    private float mRowDelay;

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.view.animation.GridLayoutAnimationController r0;
        android.util.AttributeSet r1;
        int[] $r2;
        android.util.TypedValue $r3, $r5;
        android.view.animation.Animation$Description $r4, $r6;
        float $f0, $f1;
        int $i0, $i1;
        android.content.Context r7;
        android.content.res.TypedArray r8;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        r7 := @parameter0: android.content.Context;

        r1 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)>(r7, r1);

        $r2 = <com.android.internal.R$styleable: int[] GridLayoutAnimation>;

        r8 = virtualinvoke r7.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>(r1, $r2);

        $r3 = virtualinvoke r8.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(0);

        $r4 = staticinvoke <android.view.animation.Animation$Description: android.view.animation.Animation$Description parseValue(android.util.TypedValue)>($r3);

        $f0 = $r4.<android.view.animation.Animation$Description: float value>;

        r0.<android.view.animation.GridLayoutAnimationController: float mColumnDelay> = $f0;

        $r5 = virtualinvoke r8.<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>(1);

        $r6 = staticinvoke <android.view.animation.Animation$Description: android.view.animation.Animation$Description parseValue(android.util.TypedValue)>($r5);

        $f1 = $r6.<android.view.animation.Animation$Description: float value>;

        r0.<android.view.animation.GridLayoutAnimationController: float mRowDelay> = $f1;

        $i0 = virtualinvoke r8.<android.content.res.TypedArray: int getInt(int,int)>(2, 0);

        r0.<android.view.animation.GridLayoutAnimationController: int mDirection> = $i0;

        $i1 = virtualinvoke r8.<android.content.res.TypedArray: int getInt(int,int)>(3, 0);

        r0.<android.view.animation.GridLayoutAnimationController: int mDirectionPriority> = $i1;

        virtualinvoke r8.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    public void <init>(android.view.animation.Animation)
    {
        android.view.animation.GridLayoutAnimationController r0;
        android.view.animation.Animation r1;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        r1 := @parameter0: android.view.animation.Animation;

        specialinvoke r0.<android.view.animation.GridLayoutAnimationController: void <init>(android.view.animation.Animation,float,float)>(r1, 0.5F, 0.5F);

        return;
    }

    public void <init>(android.view.animation.Animation, float, float)
    {
        android.view.animation.GridLayoutAnimationController r0;
        android.view.animation.Animation r1;
        float f0, f1;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        r1 := @parameter0: android.view.animation.Animation;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        specialinvoke r0.<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)>(r1);

        r0.<android.view.animation.GridLayoutAnimationController: float mColumnDelay> = f0;

        r0.<android.view.animation.GridLayoutAnimationController: float mRowDelay> = f1;

        return;
    }

    private int getTransformedColumnIndex(android.view.animation.GridLayoutAnimationController$AnimationParameters)
    {
        android.view.animation.GridLayoutAnimationController r0;
        android.view.animation.GridLayoutAnimationController$AnimationParameters r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i9, $i10;
        java.util.Random $r2, $r3, $r4;
        float $f0, $f1, $f2;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        r1 := @parameter0: android.view.animation.GridLayoutAnimationController$AnimationParameters;

        i6 = virtualinvoke r0.<android.view.animation.GridLayoutAnimationController: int getOrder()>();

        if i6 == 1 goto label3;

        if i6 == 2 goto label1;

        i7 = r1.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int column>;

        goto label4;

     label1:
        $r2 = r0.<android.view.animation.GridLayoutAnimationController: java.util.Random mRandomizer>;

        if $r2 != null goto label2;

        $r4 = new java.util.Random;

        specialinvoke $r4.<java.util.Random: void <init>()>();

        r0.<android.view.animation.GridLayoutAnimationController: java.util.Random mRandomizer> = $r4;

     label2:
        $i5 = r1.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int columnsCount>;

        $f0 = (float) $i5;

        $r3 = r0.<android.view.animation.GridLayoutAnimationController: java.util.Random mRandomizer>;

        $f1 = virtualinvoke $r3.<java.util.Random: float nextFloat()>();

        $f2 = $f0 * $f1;

        i7 = (int) $f2;

        goto label4;

     label3:
        $i0 = r1.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int columnsCount>;

        $i2 = $i0 - 1;

        $i1 = r1.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int column>;

        i7 = $i2 - $i1;

     label4:
        i8 = i7;

        $i9 = r0.<android.view.animation.GridLayoutAnimationController: int mDirection>;

        $i10 = $i9 & 1;

        if $i10 != 1 goto label5;

        $i3 = r1.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int columnsCount>;

        $i4 = $i3 - 1;

        i8 = $i4 - i7;

     label5:
        return i8;
    }

    private int getTransformedRowIndex(android.view.animation.GridLayoutAnimationController$AnimationParameters)
    {
        android.view.animation.GridLayoutAnimationController r0;
        android.view.animation.GridLayoutAnimationController$AnimationParameters r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, $i9, $i10;
        java.util.Random $r2, $r3, $r4;
        float $f0, $f1, $f2;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        r1 := @parameter0: android.view.animation.GridLayoutAnimationController$AnimationParameters;

        i6 = virtualinvoke r0.<android.view.animation.GridLayoutAnimationController: int getOrder()>();

        if i6 == 1 goto label3;

        if i6 == 2 goto label1;

        i7 = r1.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int row>;

        goto label4;

     label1:
        $r2 = r0.<android.view.animation.GridLayoutAnimationController: java.util.Random mRandomizer>;

        if $r2 != null goto label2;

        $r4 = new java.util.Random;

        specialinvoke $r4.<java.util.Random: void <init>()>();

        r0.<android.view.animation.GridLayoutAnimationController: java.util.Random mRandomizer> = $r4;

     label2:
        $i5 = r1.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int rowsCount>;

        $f0 = (float) $i5;

        $r3 = r0.<android.view.animation.GridLayoutAnimationController: java.util.Random mRandomizer>;

        $f1 = virtualinvoke $r3.<java.util.Random: float nextFloat()>();

        $f2 = $f0 * $f1;

        i7 = (int) $f2;

        goto label4;

     label3:
        $i0 = r1.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int rowsCount>;

        $i2 = $i0 - 1;

        $i1 = r1.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int row>;

        i7 = $i2 - $i1;

     label4:
        i8 = i7;

        $i9 = r0.<android.view.animation.GridLayoutAnimationController: int mDirection>;

        $i10 = $i9 & 2;

        if $i10 != 2 goto label5;

        $i3 = r1.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int rowsCount>;

        $i4 = $i3 - 1;

        i8 = $i4 - i7;

     label5:
        return i8;
    }

    public float getColumnDelay()
    {
        android.view.animation.GridLayoutAnimationController r0;
        float $f0;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        $f0 = r0.<android.view.animation.GridLayoutAnimationController: float mColumnDelay>;

        return $f0;
    }

    protected long getDelayForView(android.view.View)
    {
        android.view.animation.GridLayoutAnimationController r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8;
        android.view.ViewGroup$LayoutParams $r1;
        android.view.animation.LayoutAnimationController$AnimationParameters $r2;
        android.view.animation.Animation $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, f31, f32, f33, $f34, f35, $f36, $f37;
        android.view.animation.Interpolator $r4, $r8;
        android.view.animation.LinearInterpolator $r5;
        android.view.View r6;
        android.view.animation.GridLayoutAnimationController$AnimationParameters r7;
        long l9, l10, $l11;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        r6 := @parameter0: android.view.View;

        $r1 = virtualinvoke r6.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r2 = $r1.<android.view.ViewGroup$LayoutParams: android.view.animation.LayoutAnimationController$AnimationParameters layoutAnimationParameters>;

        r7 = (android.view.animation.GridLayoutAnimationController$AnimationParameters) $r2;

        if r7 != null goto label1;

        return 0L;

     label1:
        i0 = specialinvoke r0.<android.view.animation.GridLayoutAnimationController: int getTransformedColumnIndex(android.view.animation.GridLayoutAnimationController$AnimationParameters)>(r7);

        i1 = specialinvoke r0.<android.view.animation.GridLayoutAnimationController: int getTransformedRowIndex(android.view.animation.GridLayoutAnimationController$AnimationParameters)>(r7);

        i2 = r7.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int rowsCount>;

        i3 = r7.<android.view.animation.GridLayoutAnimationController$AnimationParameters: int columnsCount>;

        $r3 = r0.<android.view.animation.GridLayoutAnimationController: android.view.animation.Animation mAnimation>;

        l9 = virtualinvoke $r3.<android.view.animation.Animation: long getDuration()>();

        $f1 = r0.<android.view.animation.GridLayoutAnimationController: float mColumnDelay>;

        $f0 = (float) l9;

        f31 = $f1 * $f0;

        $f3 = r0.<android.view.animation.GridLayoutAnimationController: float mRowDelay>;

        $f2 = (float) l9;

        f32 = $f3 * $f2;

        $r4 = r0.<android.view.animation.GridLayoutAnimationController: android.view.animation.Interpolator mInterpolator>;

        if $r4 != null goto label2;

        $r5 = new android.view.animation.LinearInterpolator;

        specialinvoke $r5.<android.view.animation.LinearInterpolator: void <init>()>();

        r0.<android.view.animation.GridLayoutAnimationController: android.view.animation.Interpolator mInterpolator> = $r5;

     label2:
        i4 = r0.<android.view.animation.GridLayoutAnimationController: int mDirectionPriority>;

        if i4 == 1 goto label4;

        if i4 == 2 goto label3;

        $f22 = (float) i0;

        $f25 = $f22 * f31;

        $f23 = (float) i1;

        $f24 = $f23 * f32;

        $f26 = $f25 + $f24;

        l10 = (long) $f26;

        $f27 = (float) i3;

        $f30 = $f27 * f31;

        $f28 = (float) i2;

        $f29 = $f28 * f32;

        f33 = $f30 + $f29;

        goto label5;

     label3:
        $f13 = (float) i0;

        $f16 = $f13 * f31;

        $i7 = i1 * i3;

        $f14 = (float) $i7;

        $f15 = $f14 * f31;

        $f17 = $f16 + $f15;

        l10 = (long) $f17;

        $f18 = (float) i3;

        $f21 = $f18 * f31;

        $i8 = i2 * i3;

        $f19 = (float) $i8;

        $f20 = $f19 * f31;

        f33 = $f21 + $f20;

        goto label5;

     label4:
        $f4 = (float) i1;

        $f7 = $f4 * f32;

        $i5 = i0 * i2;

        $f5 = (float) $i5;

        $f6 = $f5 * f32;

        $f8 = $f7 + $f6;

        l10 = (long) $f8;

        $f9 = (float) i2;

        $f12 = $f9 * f32;

        $i6 = i3 * i2;

        $f10 = (float) $i6;

        $f11 = $f10 * f32;

        f33 = $f12 + $f11;

     label5:
        $f34 = (float) l10;

        f35 = $f34 / f33;

        $r8 = r0.<android.view.animation.GridLayoutAnimationController: android.view.animation.Interpolator mInterpolator>;

        $f36 = interfaceinvoke $r8.<android.view.animation.Interpolator: float getInterpolation(float)>(f35);

        $f37 = $f36 * f33;

        $l11 = (long) $f37;

        return $l11;
    }

    public int getDirection()
    {
        android.view.animation.GridLayoutAnimationController r0;
        int $i0;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        $i0 = r0.<android.view.animation.GridLayoutAnimationController: int mDirection>;

        return $i0;
    }

    public int getDirectionPriority()
    {
        android.view.animation.GridLayoutAnimationController r0;
        int $i0;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        $i0 = r0.<android.view.animation.GridLayoutAnimationController: int mDirectionPriority>;

        return $i0;
    }

    public float getRowDelay()
    {
        android.view.animation.GridLayoutAnimationController r0;
        float $f0;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        $f0 = r0.<android.view.animation.GridLayoutAnimationController: float mRowDelay>;

        return $f0;
    }

    public void setColumnDelay(float)
    {
        android.view.animation.GridLayoutAnimationController r0;
        float f0;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        f0 := @parameter0: float;

        r0.<android.view.animation.GridLayoutAnimationController: float mColumnDelay> = f0;

        return;
    }

    public void setDirection(int)
    {
        android.view.animation.GridLayoutAnimationController r0;
        int i0;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        i0 := @parameter0: int;

        r0.<android.view.animation.GridLayoutAnimationController: int mDirection> = i0;

        return;
    }

    public void setDirectionPriority(int)
    {
        android.view.animation.GridLayoutAnimationController r0;
        int i0;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        i0 := @parameter0: int;

        r0.<android.view.animation.GridLayoutAnimationController: int mDirectionPriority> = i0;

        return;
    }

    public void setRowDelay(float)
    {
        android.view.animation.GridLayoutAnimationController r0;
        float f0;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        f0 := @parameter0: float;

        r0.<android.view.animation.GridLayoutAnimationController: float mRowDelay> = f0;

        return;
    }

    public boolean willOverlap()
    {
        android.view.animation.GridLayoutAnimationController r0;
        float $f0, $f1;
        byte $b0, $b1;
        boolean z0;

        r0 := @this: android.view.animation.GridLayoutAnimationController;

        $f0 = r0.<android.view.animation.GridLayoutAnimationController: float mColumnDelay>;

        $b0 = $f0 cmpg 1.0F;

        if $b0 < 0 goto label2;

        $f1 = r0.<android.view.animation.GridLayoutAnimationController: float mRowDelay>;

        $b1 = $f1 cmpg 1.0F;

        if $b1 >= 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public static void <clinit>()
    {
        <android.view.animation.GridLayoutAnimationController: int PRIORITY_ROW> = 2;

        <android.view.animation.GridLayoutAnimationController: int PRIORITY_NONE> = 0;

        <android.view.animation.GridLayoutAnimationController: int PRIORITY_COLUMN> = 1;

        <android.view.animation.GridLayoutAnimationController: int DIRECTION_VERTICAL_MASK> = 2;

        <android.view.animation.GridLayoutAnimationController: int DIRECTION_TOP_TO_BOTTOM> = 0;

        <android.view.animation.GridLayoutAnimationController: int DIRECTION_RIGHT_TO_LEFT> = 1;

        <android.view.animation.GridLayoutAnimationController: int DIRECTION_LEFT_TO_RIGHT> = 0;

        <android.view.animation.GridLayoutAnimationController: int DIRECTION_HORIZONTAL_MASK> = 1;

        <android.view.animation.GridLayoutAnimationController: int DIRECTION_BOTTOM_TO_TOP> = 2;

        return;
    }
}
