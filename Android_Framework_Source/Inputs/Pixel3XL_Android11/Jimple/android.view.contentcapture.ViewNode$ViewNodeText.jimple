final class android.view.contentcapture.ViewNode$ViewNodeText extends java.lang.Object
{
    java.lang.String mHint;
    int[] mLineBaselines;
    int[] mLineCharOffsets;
    java.lang.CharSequence mText;
    int mTextBackgroundColor;
    int mTextColor;
    int mTextSelectionEnd;
    int mTextSelectionStart;
    float mTextSize;
    int mTextStyle;

    void <init>()
    {
        android.view.contentcapture.ViewNode$ViewNodeText r0;

        r0 := @this: android.view.contentcapture.ViewNode$ViewNodeText;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextColor> = 1;

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextBackgroundColor> = 1;

        return;
    }

    void <init>(android.os.Parcel, boolean)
    {
        android.view.contentcapture.ViewNode$ViewNodeText r0;
        android.os.Parcel r1;
        boolean z0;
        android.os.Parcelable$Creator $r2;
        java.lang.Object $r3;
        java.lang.CharSequence $r4;
        float $f0;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r5, $r6;
        java.lang.String $r7;

        r0 := @this: android.view.contentcapture.ViewNode$ViewNodeText;

        r1 := @parameter0: android.os.Parcel;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextColor> = 1;

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextBackgroundColor> = 1;

        $r2 = <android.text.TextUtils: android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR>;

        $r3 = interfaceinvoke $r2.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r1);

        $r4 = (java.lang.CharSequence) $r3;

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: java.lang.CharSequence mText> = $r4;

        $f0 = virtualinvoke r1.<android.os.Parcel: float readFloat()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: float mTextSize> = $f0;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextStyle> = $i0;

        $i1 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextColor> = $i1;

        if z0 != 0 goto label1;

        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextBackgroundColor> = $i2;

        $i3 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextSelectionStart> = $i3;

        $i4 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextSelectionEnd> = $i4;

        $r5 = virtualinvoke r1.<android.os.Parcel: int[] createIntArray()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int[] mLineCharOffsets> = $r5;

        $r6 = virtualinvoke r1.<android.os.Parcel: int[] createIntArray()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: int[] mLineBaselines> = $r6;

        $r7 = virtualinvoke r1.<android.os.Parcel: java.lang.String readString()>();

        r0.<android.view.contentcapture.ViewNode$ViewNodeText: java.lang.String mHint> = $r7;

     label1:
        return;
    }

    boolean isSimple()
    {
        android.view.contentcapture.ViewNode$ViewNodeText r0;
        int i0, $i1, $i2;
        int[] $r1, $r2;
        java.lang.String $r3;
        boolean z0;

        r0 := @this: android.view.contentcapture.ViewNode$ViewNodeText;

        i0 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextBackgroundColor>;

        z0 = 1;

        if i0 != 1 goto label1;

        $i1 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextSelectionStart>;

        if $i1 != 0 goto label1;

        $i2 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextSelectionEnd>;

        if $i2 != 0 goto label1;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int[] mLineCharOffsets>;

        if $r1 != null goto label1;

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int[] mLineBaselines>;

        if $r2 != null goto label1;

        $r3 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: java.lang.String mHint>;

        if $r3 != null goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void writeToParcel(android.os.Parcel, boolean)
    {
        android.view.contentcapture.ViewNode$ViewNodeText r0;
        android.os.Parcel r1;
        boolean z0;
        java.lang.CharSequence $r2;
        float $f0;
        int $i0, $i1, $i2, $i3, $i4;
        int[] $r3, $r4;
        java.lang.String $r5;

        r0 := @this: android.view.contentcapture.ViewNode$ViewNodeText;

        r1 := @parameter0: android.os.Parcel;

        z0 := @parameter1: boolean;

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: java.lang.CharSequence mText>;

        staticinvoke <android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)>($r2, r1, 0);

        $f0 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: float mTextSize>;

        virtualinvoke r1.<android.os.Parcel: void writeFloat(float)>($f0);

        $i0 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextStyle>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i0);

        $i1 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextColor>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        if z0 != 0 goto label1;

        $i2 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextBackgroundColor>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $i3 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextSelectionStart>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        $i4 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextSelectionEnd>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i4);

        $r3 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int[] mLineCharOffsets>;

        virtualinvoke r1.<android.os.Parcel: void writeIntArray(int[])>($r3);

        $r4 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: int[] mLineBaselines>;

        virtualinvoke r1.<android.os.Parcel: void writeIntArray(int[])>($r4);

        $r5 = r0.<android.view.contentcapture.ViewNode$ViewNodeText: java.lang.String mHint>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r5);

     label1:
        return;
    }
}
