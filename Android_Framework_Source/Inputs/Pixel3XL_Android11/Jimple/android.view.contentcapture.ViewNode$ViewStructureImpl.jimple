public final class android.view.contentcapture.ViewNode$ViewStructureImpl extends android.view.ViewStructure
{
    final android.view.contentcapture.ViewNode mNode;

    public void <init>(android.view.View)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode $r2, $r8;
        java.lang.Object $r3;
        android.view.View $r4, $r7, r11;
        android.view.autofill.AutofillId $r5, $r9;
        boolean $z0;
        android.view.ViewParent r12;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r11 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.ViewStructure: void <init>()>();

        $r2 = new android.view.contentcapture.ViewNode;

        specialinvoke $r2.<android.view.contentcapture.ViewNode: void <init>()>();

        r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode> = $r2;

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r11);

        $r4 = (android.view.View) $r3;

        $r5 = virtualinvoke $r4.<android.view.View: android.view.autofill.AutofillId getAutofillId()>();

        staticinvoke <android.view.contentcapture.ViewNode: android.view.autofill.AutofillId access$002(android.view.contentcapture.ViewNode,android.view.autofill.AutofillId)>($r2, $r5);

        r12 = virtualinvoke r11.<android.view.View: android.view.ViewParent getParent()>();

        $z0 = r12 instanceof android.view.View;

        if $z0 == 0 goto label1;

        $r8 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r7 = (android.view.View) r12;

        $r9 = virtualinvoke $r7.<android.view.View: android.view.autofill.AutofillId getAutofillId()>();

        staticinvoke <android.view.contentcapture.ViewNode: android.view.autofill.AutofillId access$102(android.view.contentcapture.ViewNode,android.view.autofill.AutofillId)>($r8, $r9);

     label1:
        return;
    }

    public void <init>(android.view.autofill.AutofillId, long, int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.autofill.AutofillId r1, $r5, $r7;
        long l0;
        int i1;
        android.view.contentcapture.ViewNode $r3, $r8;
        java.lang.Object $r4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: android.view.autofill.AutofillId;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<android.view.ViewStructure: void <init>()>();

        $r3 = new android.view.contentcapture.ViewNode;

        specialinvoke $r3.<android.view.contentcapture.ViewNode: void <init>()>();

        r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode> = $r3;

        $r4 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r5 = (android.view.autofill.AutofillId) $r4;

        staticinvoke <android.view.contentcapture.ViewNode: android.view.autofill.AutofillId access$102(android.view.contentcapture.ViewNode,android.view.autofill.AutofillId)>($r3, $r5);

        $r8 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r7 = new android.view.autofill.AutofillId;

        specialinvoke $r7.<android.view.autofill.AutofillId: void <init>(android.view.autofill.AutofillId,long,int)>(r1, l0, i1);

        staticinvoke <android.view.contentcapture.ViewNode: android.view.autofill.AutofillId access$002(android.view.contentcapture.ViewNode,android.view.autofill.AutofillId)>($r8, $r7);

        return;
    }

    private android.view.contentcapture.ViewNode$ViewNodeText getNodeText()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode $r1, $r4, $r6, $r8;
        android.view.contentcapture.ViewNode$ViewNodeText $r2, $r3, $r7, $r9;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r2 = staticinvoke <android.view.contentcapture.ViewNode: android.view.contentcapture.ViewNode$ViewNodeText access$2800(android.view.contentcapture.ViewNode)>($r1);

        if $r2 == null goto label1;

        $r8 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r9 = staticinvoke <android.view.contentcapture.ViewNode: android.view.contentcapture.ViewNode$ViewNodeText access$2800(android.view.contentcapture.ViewNode)>($r8);

        return $r9;

     label1:
        $r4 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r3 = new android.view.contentcapture.ViewNode$ViewNodeText;

        specialinvoke $r3.<android.view.contentcapture.ViewNode$ViewNodeText: void <init>()>();

        staticinvoke <android.view.contentcapture.ViewNode: android.view.contentcapture.ViewNode$ViewNodeText access$2802(android.view.contentcapture.ViewNode,android.view.contentcapture.ViewNode$ViewNodeText)>($r4, $r3);

        $r6 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r7 = staticinvoke <android.view.contentcapture.ViewNode: android.view.contentcapture.ViewNode$ViewNodeText access$2800(android.view.contentcapture.ViewNode)>($r6);

        return $r7;
    }

    public int addChildCount(int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "addChildCount() is not supported");

        return 0;
    }

    public void asyncCommit()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.String $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "asyncCommit() is not supported");

        return;
    }

    public android.view.ViewStructure asyncNewChild(int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "asyncNewChild() is not supported");

        return null;
    }

    public android.view.autofill.AutofillId getAutofillId()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode $r1;
        android.view.autofill.AutofillId $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r2 = staticinvoke <android.view.contentcapture.ViewNode: android.view.autofill.AutofillId access$000(android.view.contentcapture.ViewNode)>($r1);

        return $r2;
    }

    public int getChildCount()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.String $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "getChildCount() is not supported");

        return 0;
    }

    public android.os.Bundle getExtras()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode $r1, $r4, $r6, $r8;
        android.os.Bundle $r2, $r3, $r7, $r9;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r2 = staticinvoke <android.view.contentcapture.ViewNode: android.os.Bundle access$1800(android.view.contentcapture.ViewNode)>($r1);

        if $r2 == null goto label1;

        $r8 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r9 = staticinvoke <android.view.contentcapture.ViewNode: android.os.Bundle access$1800(android.view.contentcapture.ViewNode)>($r8);

        return $r9;

     label1:
        $r4 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        staticinvoke <android.view.contentcapture.ViewNode: android.os.Bundle access$1802(android.view.contentcapture.ViewNode,android.os.Bundle)>($r4, $r3);

        $r6 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r7 = staticinvoke <android.view.contentcapture.ViewNode: android.os.Bundle access$1800(android.view.contentcapture.ViewNode)>($r6);

        return $r7;
    }

    public java.lang.CharSequence getHint()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode $r1;
        java.lang.String $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r2 = virtualinvoke $r1.<android.view.contentcapture.ViewNode: java.lang.String getHint()>();

        return $r2;
    }

    public android.view.contentcapture.ViewNode getNode()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        return $r1;
    }

    public android.graphics.Rect getTempRect()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.String $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "getTempRect() is not supported");

        return null;
    }

    public java.lang.CharSequence getText()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode $r1;
        java.lang.CharSequence $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r2 = virtualinvoke $r1.<android.view.contentcapture.ViewNode: java.lang.CharSequence getText()>();

        return $r2;
    }

    public int getTextSelectionEnd()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode $r1;
        int $i0;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $i0 = virtualinvoke $r1.<android.view.contentcapture.ViewNode: int getTextSelectionEnd()>();

        return $i0;
    }

    public int getTextSelectionStart()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode $r1;
        int $i0;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $i0 = virtualinvoke $r1.<android.view.contentcapture.ViewNode: int getTextSelectionStart()>();

        return $i0;
    }

    public boolean hasExtras()
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode $r1;
        android.os.Bundle $r2;
        boolean z0;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r2 = staticinvoke <android.view.contentcapture.ViewNode: android.os.Bundle access$1800(android.view.contentcapture.ViewNode)>($r1);

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.view.ViewStructure newChild(int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "newChild() is not supported");

        return null;
    }

    public android.view.ViewStructure$HtmlInfo$Builder newHtmlInfoBuilder(java.lang.String)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.String r1, $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, "newHtmlInfoBuilder() is not supported");

        return null;
    }

    public void setAccessibilityFocused(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 131072L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -131073L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setActivated(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 2097152L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -2097153L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setAlpha(float)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        float f0;
        java.lang.String $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        f0 := @parameter0: float;

        $r1 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "setAlpha() is not supported");

        return;
    }

    public void setAssistBlocked(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 1024L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -1025L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setAutofillHints(java.lang.String[])
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.String[] r1;
        android.view.contentcapture.ViewNode $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: java.lang.String[];

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: java.lang.String[] access$2002(android.view.contentcapture.ViewNode,java.lang.String[])>($r2, r1);

        return;
    }

    public void setAutofillId(android.view.autofill.AutofillId)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.autofill.AutofillId r1, $r4;
        android.view.contentcapture.ViewNode $r2;
        java.lang.Object $r3;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: android.view.autofill.AutofillId;

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (android.view.autofill.AutofillId) $r3;

        staticinvoke <android.view.contentcapture.ViewNode: android.view.autofill.AutofillId access$002(android.view.contentcapture.ViewNode,android.view.autofill.AutofillId)>($r2, $r4);

        return;
    }

    public void setAutofillId(android.view.autofill.AutofillId, int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.autofill.AutofillId r1, $r4, $r6;
        int i0;
        android.view.contentcapture.ViewNode $r2, $r7;
        java.lang.Object $r3;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: android.view.autofill.AutofillId;

        i0 := @parameter1: int;

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (android.view.autofill.AutofillId) $r3;

        staticinvoke <android.view.contentcapture.ViewNode: android.view.autofill.AutofillId access$102(android.view.contentcapture.ViewNode,android.view.autofill.AutofillId)>($r2, $r4);

        $r7 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r6 = new android.view.autofill.AutofillId;

        specialinvoke $r6.<android.view.autofill.AutofillId: void <init>(android.view.autofill.AutofillId,int)>(r1, i0);

        staticinvoke <android.view.contentcapture.ViewNode: android.view.autofill.AutofillId access$002(android.view.contentcapture.ViewNode,android.view.autofill.AutofillId)>($r7, $r6);

        return;
    }

    public void setAutofillOptions(java.lang.CharSequence[])
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.CharSequence[] r1;
        android.view.contentcapture.ViewNode $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: java.lang.CharSequence[];

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: java.lang.CharSequence[] access$2202(android.view.contentcapture.ViewNode,java.lang.CharSequence[])>($r2, r1);

        return;
    }

    public void setAutofillType(int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        android.view.contentcapture.ViewNode $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$1902(android.view.contentcapture.ViewNode,int)>($r1, i0);

        return;
    }

    public void setAutofillValue(android.view.autofill.AutofillValue)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.autofill.AutofillValue r1;
        android.view.contentcapture.ViewNode $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: android.view.autofill.AutofillValue;

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: android.view.autofill.AutofillValue access$2102(android.view.contentcapture.ViewNode,android.view.autofill.AutofillValue)>($r2, r1);

        return;
    }

    public void setCheckable(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 262144L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -262145L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setChecked(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 524288L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -524289L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setChildCount(int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        $r1 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "setChildCount() is not supported");

        return;
    }

    public void setClassName(java.lang.String)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.String r1;
        android.view.contentcapture.ViewNode $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1402(android.view.contentcapture.ViewNode,java.lang.String)>($r2, r1);

        return;
    }

    public void setClickable(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 4096L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -4097L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setContentDescription(java.lang.CharSequence)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.CharSequence r1;
        android.view.contentcapture.ViewNode $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: java.lang.CharSequence;

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: java.lang.CharSequence access$1502(android.view.contentcapture.ViewNode,java.lang.CharSequence)>($r2, r1);

        return;
    }

    public void setContextClickable(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 16384L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -16385L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setDataIsSensitive(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        java.lang.String $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "setDataIsSensitive() is not supported");

        return;
    }

    public void setDimens(int, int, int, int, int, int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0, i1, i2, i3, i4, i5;
        android.view.contentcapture.ViewNode $r1, $r2, $r3, $r4, $r5, $r6;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        i4 := @parameter4: int;

        i5 := @parameter5: int;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$602(android.view.contentcapture.ViewNode,int)>($r1, i0);

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$702(android.view.contentcapture.ViewNode,int)>($r2, i1);

        $r3 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$802(android.view.contentcapture.ViewNode,int)>($r3, i2);

        $r4 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$902(android.view.contentcapture.ViewNode,int)>($r4, i3);

        $r5 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$1002(android.view.contentcapture.ViewNode,int)>($r5, i4);

        $r6 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$1102(android.view.contentcapture.ViewNode,int)>($r6, i5);

        return;
    }

    public void setElevation(float)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        float f0;
        java.lang.String $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        f0 := @parameter0: float;

        $r1 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "setElevation() is not supported");

        return;
    }

    public void setEnabled(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 0L;

        goto label2;

     label1:
        l4 = 2048L;

     label2:
        $l1 = l0 & -2049L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setFocusable(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 32768L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -32769L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setFocused(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 65536L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -65537L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setHint(java.lang.CharSequence)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.contentcapture.ViewNode$ViewNodeText r1;
        java.lang.CharSequence r2;
        java.lang.String r3;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r2 := @parameter0: java.lang.CharSequence;

        r1 = specialinvoke r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode$ViewNodeText getNodeText()>();

        if r2 == null goto label1;

        r3 = interfaceinvoke r2.<java.lang.CharSequence: java.lang.String toString()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        r1.<android.view.contentcapture.ViewNode$ViewNodeText: java.lang.String mHint> = r3;

        return;
    }

    public void setHintIdEntry(java.lang.String)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.String r1, $r4;
        android.view.contentcapture.ViewNode $r2;
        java.lang.Object $r3;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1702(android.view.contentcapture.ViewNode,java.lang.String)>($r2, $r4);

        return;
    }

    public void setHtmlInfo(android.view.ViewStructure$HtmlInfo)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.view.ViewStructure$HtmlInfo r1;
        java.lang.String $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: android.view.ViewStructure$HtmlInfo;

        $r2 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, "setHtmlInfo() is not supported");

        return;
    }

    public void setId(int, java.lang.String, java.lang.String, java.lang.String)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        java.lang.String r1, r2, r3;
        android.view.contentcapture.ViewNode $r4, $r5, $r7, $r9;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        $r4 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$202(android.view.contentcapture.ViewNode,int)>($r4, i0);

        $r5 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$302(android.view.contentcapture.ViewNode,java.lang.String)>($r5, r1);

        $r7 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$402(android.view.contentcapture.ViewNode,java.lang.String)>($r7, r2);

        $r9 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$502(android.view.contentcapture.ViewNode,java.lang.String)>($r9, r3);

        return;
    }

    public void setInputType(int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        android.view.contentcapture.ViewNode $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$2302(android.view.contentcapture.ViewNode,int)>($r1, i0);

        return;
    }

    public void setLocaleList(android.os.LocaleList)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.os.LocaleList r1;
        android.view.contentcapture.ViewNode $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: android.os.LocaleList;

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: android.os.LocaleList access$2702(android.view.contentcapture.ViewNode,android.os.LocaleList)>($r2, r1);

        return;
    }

    public void setLongClickable(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 8192L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -8193L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setMaxTextEms(int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        android.view.contentcapture.ViewNode $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$2502(android.view.contentcapture.ViewNode,int)>($r1, i0);

        return;
    }

    public void setMaxTextLength(int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        android.view.contentcapture.ViewNode $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$2602(android.view.contentcapture.ViewNode,int)>($r1, i0);

        return;
    }

    public void setMinTextEms(int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        android.view.contentcapture.ViewNode $r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        staticinvoke <android.view.contentcapture.ViewNode: int access$2402(android.view.contentcapture.ViewNode,int)>($r1, i0);

        return;
    }

    public void setOpaque(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 4194304L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -4194305L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setSelected(boolean)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        boolean z0;
        android.view.contentcapture.ViewNode r1;
        long l0, $l1, $l2, l4;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        z0 := @parameter0: boolean;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        l0 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        if z0 == 0 goto label1;

        l4 = 1048576L;

        goto label2;

     label1:
        l4 = 0L;

     label2:
        $l1 = l0 & -1048577L;

        $l2 = $l1 | l4;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l2);

        return;
    }

    public void setText(java.lang.CharSequence)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.CharSequence r1, $r3;
        android.view.contentcapture.ViewNode$ViewNodeText r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: java.lang.CharSequence;

        r2 = specialinvoke r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode$ViewNodeText getNodeText()>();

        $r3 = staticinvoke <android.text.TextUtils: java.lang.CharSequence trimNoCopySpans(java.lang.CharSequence)>(r1);

        r2.<android.view.contentcapture.ViewNode$ViewNodeText: java.lang.CharSequence mText> = $r3;

        r2.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextSelectionEnd> = -1;

        r2.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextSelectionStart> = -1;

        return;
    }

    public void setText(java.lang.CharSequence, int, int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.CharSequence r1, $r3;
        int i0, i1;
        android.view.contentcapture.ViewNode$ViewNodeText r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: java.lang.CharSequence;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = specialinvoke r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode$ViewNodeText getNodeText()>();

        $r3 = staticinvoke <android.text.TextUtils: java.lang.CharSequence trimNoCopySpans(java.lang.CharSequence)>(r1);

        r2.<android.view.contentcapture.ViewNode$ViewNodeText: java.lang.CharSequence mText> = $r3;

        r2.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextSelectionStart> = i0;

        r2.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextSelectionEnd> = i1;

        return;
    }

    public void setTextIdEntry(java.lang.String)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.String r1, $r4;
        android.view.contentcapture.ViewNode $r2;
        java.lang.Object $r3;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $r3 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1602(android.view.contentcapture.ViewNode,java.lang.String)>($r2, $r4);

        return;
    }

    public void setTextLines(int[], int[])
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int[] r1, r2;
        android.view.contentcapture.ViewNode$ViewNodeText r3;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        r3 = specialinvoke r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode$ViewNodeText getNodeText()>();

        r3.<android.view.contentcapture.ViewNode$ViewNodeText: int[] mLineCharOffsets> = r1;

        r3.<android.view.contentcapture.ViewNode$ViewNodeText: int[] mLineBaselines> = r2;

        return;
    }

    public void setTextStyle(float, int, int, int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        float f0;
        int i0, i1, i2;
        android.view.contentcapture.ViewNode$ViewNodeText r1;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        r1 = specialinvoke r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode$ViewNodeText getNodeText()>();

        r1.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextColor> = i0;

        r1.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextBackgroundColor> = i1;

        r1.<android.view.contentcapture.ViewNode$ViewNodeText: float mTextSize> = f0;

        r1.<android.view.contentcapture.ViewNode$ViewNodeText: int mTextStyle> = i2;

        return;
    }

    public void setTransformation(android.graphics.Matrix)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        android.graphics.Matrix r1;
        java.lang.String $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: android.graphics.Matrix;

        $r2 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, "setTransformation() is not supported");

        return;
    }

    public void setVisibility(int)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        int i0;
        android.view.contentcapture.ViewNode r1;
        long $l1, $l2, $l3, $l4, $l5;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        i0 := @parameter0: int;

        r1 = r0.<android.view.contentcapture.ViewNode$ViewStructureImpl: android.view.contentcapture.ViewNode mNode>;

        $l1 = staticinvoke <android.view.contentcapture.ViewNode: long access$1300(android.view.contentcapture.ViewNode)>(r1);

        $l4 = $l1 & -13L;

        $l2 = (long) i0;

        $l3 = $l2 & 12L;

        $l5 = $l4 | $l3;

        staticinvoke <android.view.contentcapture.ViewNode: long access$1302(android.view.contentcapture.ViewNode,long)>(r1, $l5);

        return;
    }

    public void setWebDomain(java.lang.String)
    {
        android.view.contentcapture.ViewNode$ViewStructureImpl r0;
        java.lang.String r1, $r2;

        r0 := @this: android.view.contentcapture.ViewNode$ViewStructureImpl;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.view.contentcapture.ViewNode: java.lang.String access$1200()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r2, "setWebDomain() is not supported");

        return;
    }
}
