public final class android.view.inputmethod.InputConnectionInspector extends java.lang.Object
{
    private static final java.util.Map sMissingMethodsMap;

    static void <clinit>()
    {
        java.util.WeakHashMap $r0;
        java.util.Map $r1;

        $r0 = new java.util.WeakHashMap;

        specialinvoke $r0.<java.util.WeakHashMap: void <init>()>();

        $r1 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r0);

        <android.view.inputmethod.InputConnectionInspector: java.util.Map sMissingMethodsMap> = $r1;

        return;
    }

    public void <init>()
    {
        android.view.inputmethod.InputConnectionInspector r0;

        r0 := @this: android.view.inputmethod.InputConnectionInspector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int getMissingMethodFlags(android.view.inputmethod.InputConnection)
    {
        android.view.inputmethod.InputConnection r0;
        boolean $z0, $z1;
        java.lang.Class $r1;
        int $i0, $i1;
        android.view.inputmethod.InputConnectionWrapper $r2;

        r0 := @parameter0: android.view.inputmethod.InputConnection;

        if r0 != null goto label1;

        return 0;

     label1:
        $z0 = r0 instanceof android.view.inputmethod.BaseInputConnection;

        if $z0 == 0 goto label2;

        return 0;

     label2:
        $z1 = r0 instanceof android.view.inputmethod.InputConnectionWrapper;

        if $z1 == 0 goto label3;

        $r2 = (android.view.inputmethod.InputConnectionWrapper) r0;

        $i1 = virtualinvoke $r2.<android.view.inputmethod.InputConnectionWrapper: int getMissingMethodFlags()>();

        return $i1;

     label3:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $i0 = staticinvoke <android.view.inputmethod.InputConnectionInspector: int getMissingMethodFlagsInternal(java.lang.Class)>($r1);

        return $i0;
    }

    public static java.lang.String getMissingMethodFlagsAsString(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r1;
        boolean z0, z1, z2, z3, z4;
        java.lang.String $r17;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        z0 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label01;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getSelectedText(int)");

        z0 = 0;

     label01:
        z1 = z0;

        $i2 = i0 & 2;

        if $i2 == 0 goto label03;

        if z0 != 0 goto label02;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label02:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setComposingRegion(int, int)");

        z1 = 0;

     label03:
        z2 = z1;

        $i3 = i0 & 4;

        if $i3 == 0 goto label05;

        if z1 != 0 goto label04;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label04:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("commitCorrection(CorrectionInfo)");

        z2 = 0;

     label05:
        z3 = z2;

        $i4 = i0 & 8;

        if $i4 == 0 goto label07;

        if z2 != 0 goto label06;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label06:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestCursorUpdate(int)");

        z3 = 0;

     label07:
        z4 = z3;

        $i5 = i0 & 16;

        if $i5 == 0 goto label09;

        if z3 != 0 goto label08;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label08:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleteSurroundingTextInCodePoints(int, int)");

        z4 = 0;

     label09:
        $i6 = i0 & 32;

        if $i6 == 0 goto label11;

        if z4 != 0 goto label10;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label10:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getHandler()");

     label11:
        $i7 = i0 & 64;

        if $i7 == 0 goto label13;

        if z4 != 0 goto label12;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label12:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("closeConnection()");

     label13:
        $i8 = i0 & 128;

        if $i8 == 0 goto label15;

        if z4 != 0 goto label14;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

     label14:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("commitContent(InputContentInfo, Bundle)");

     label15:
        $r17 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r17;
    }

    public static int getMissingMethodFlagsInternal(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Integer r1, $r5;
        java.util.Map $r2, $r4;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        int $i0;
        short s1, s2, s3, s4, s5, s6, s7, s8;

        r0 := @parameter0: java.lang.Class;

        $r2 = <android.view.inputmethod.InputConnectionInspector: java.util.Map sMissingMethodsMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        r1 = (java.lang.Integer) $r3;

        if r1 == null goto label1;

        $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>();

        return $i0;

     label1:
        s1 = 0;

        $z0 = staticinvoke <android.view.inputmethod.InputConnectionInspector: boolean hasGetSelectedText(java.lang.Class)>(r0);

        if $z0 != 0 goto label2;

        s1 = 0 | 1;

     label2:
        s2 = s1;

        $z1 = staticinvoke <android.view.inputmethod.InputConnectionInspector: boolean hasSetComposingRegion(java.lang.Class)>(r0);

        if $z1 != 0 goto label3;

        s2 = s1 | 2;

     label3:
        s3 = s2;

        $z2 = staticinvoke <android.view.inputmethod.InputConnectionInspector: boolean hasCommitCorrection(java.lang.Class)>(r0);

        if $z2 != 0 goto label4;

        s3 = s2 | 4;

     label4:
        s4 = s3;

        $z3 = staticinvoke <android.view.inputmethod.InputConnectionInspector: boolean hasRequestCursorUpdate(java.lang.Class)>(r0);

        if $z3 != 0 goto label5;

        s4 = s3 | 8;

     label5:
        s5 = s4;

        $z4 = staticinvoke <android.view.inputmethod.InputConnectionInspector: boolean hasDeleteSurroundingTextInCodePoints(java.lang.Class)>(r0);

        if $z4 != 0 goto label6;

        s5 = s4 | 16;

     label6:
        s6 = s5;

        $z5 = staticinvoke <android.view.inputmethod.InputConnectionInspector: boolean hasGetHandler(java.lang.Class)>(r0);

        if $z5 != 0 goto label7;

        s6 = s5 | 32;

     label7:
        s7 = s6;

        $z6 = staticinvoke <android.view.inputmethod.InputConnectionInspector: boolean hasCloseConnection(java.lang.Class)>(r0);

        if $z6 != 0 goto label8;

        s7 = s6 | 64;

     label8:
        s8 = s7;

        $z7 = staticinvoke <android.view.inputmethod.InputConnectionInspector: boolean hasCommitContent(java.lang.Class)>(r0);

        if $z7 != 0 goto label9;

        s8 = s7 | 128;

     label9:
        $r4 = <android.view.inputmethod.InputConnectionInspector: java.util.Map sMissingMethodsMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(s8);

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r5);

        return s8;
    }

    private static boolean hasCloseConnection(java.lang.Class)
    {
        boolean z0, $z1;
        java.lang.Class[] $r0;
        java.lang.reflect.Method $r1;
        int $i0;
        java.lang.Throwable $r2;
        java.lang.Class r3;

        r3 := @parameter0: java.lang.Class;

     label1:
        $r0 = newarray (java.lang.Class)[0];

        $r1 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("closeConnection", $r0);

        $i0 = virtualinvoke $r1.<java.lang.reflect.Method: int getModifiers()>();

        z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

     label2:
        $z1 = z0 ^ 1;

        return $z1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static boolean hasCommitContent(java.lang.Class)
    {
        boolean z0, $z1;
        java.lang.Class[] $r0;
        java.lang.Class $r1, r4;
        java.lang.reflect.Method $r2;
        int $i0;
        java.lang.Throwable $r3;

        r4 := @parameter0: java.lang.Class;

     label1:
        $r0 = newarray (java.lang.Class)[3];

        $r0[0] = class "Landroid/view/inputmethod/InputContentInfo;";

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[1] = $r1;

        $r0[2] = class "Landroid/os/Bundle;";

        $r2 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("commitContent", $r0);

        $i0 = virtualinvoke $r2.<java.lang.reflect.Method: int getModifiers()>();

        z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

     label2:
        $z1 = z0 ^ 1;

        return $z1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static boolean hasCommitCorrection(java.lang.Class)
    {
        boolean z0, $z1;
        java.lang.Class[] $r0;
        java.lang.reflect.Method $r1;
        int $i0;
        java.lang.Throwable $r2;
        java.lang.Class r3;

        r3 := @parameter0: java.lang.Class;

     label1:
        $r0 = newarray (java.lang.Class)[1];

        $r0[0] = class "Landroid/view/inputmethod/CorrectionInfo;";

        $r1 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("commitCorrection", $r0);

        $i0 = virtualinvoke $r1.<java.lang.reflect.Method: int getModifiers()>();

        z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

     label2:
        $z1 = z0 ^ 1;

        return $z1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static boolean hasDeleteSurroundingTextInCodePoints(java.lang.Class)
    {
        boolean z0, $z1;
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r2, r5;
        java.lang.reflect.Method $r3;
        int $i0;
        java.lang.Throwable $r4;

        r5 := @parameter0: java.lang.Class;

     label1:
        $r0 = newarray (java.lang.Class)[2];

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[0] = $r1;

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[1] = $r2;

        $r3 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("deleteSurroundingTextInCodePoints", $r0);

        $i0 = virtualinvoke $r3.<java.lang.reflect.Method: int getModifiers()>();

        z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

     label2:
        $z1 = z0 ^ 1;

        return $z1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static boolean hasGetHandler(java.lang.Class)
    {
        boolean z0, $z1;
        java.lang.Class[] $r0;
        java.lang.reflect.Method $r1;
        int $i0;
        java.lang.Throwable $r2;
        java.lang.Class r3;

        r3 := @parameter0: java.lang.Class;

     label1:
        $r0 = newarray (java.lang.Class)[0];

        $r1 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getHandler", $r0);

        $i0 = virtualinvoke $r1.<java.lang.reflect.Method: int getModifiers()>();

        z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

     label2:
        $z1 = z0 ^ 1;

        return $z1;

     label3:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static boolean hasGetSelectedText(java.lang.Class)
    {
        boolean z0, $z1;
        java.lang.Class[] $r0;
        java.lang.Class $r1, r4;
        java.lang.reflect.Method $r2;
        int $i0;
        java.lang.Throwable $r3;

        r4 := @parameter0: java.lang.Class;

     label1:
        $r0 = newarray (java.lang.Class)[1];

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[0] = $r1;

        $r2 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getSelectedText", $r0);

        $i0 = virtualinvoke $r2.<java.lang.reflect.Method: int getModifiers()>();

        z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

     label2:
        $z1 = z0 ^ 1;

        return $z1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static boolean hasRequestCursorUpdate(java.lang.Class)
    {
        boolean z0, $z1;
        java.lang.Class[] $r0;
        java.lang.Class $r1, r4;
        java.lang.reflect.Method $r2;
        int $i0;
        java.lang.Throwable $r3;

        r4 := @parameter0: java.lang.Class;

     label1:
        $r0 = newarray (java.lang.Class)[1];

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[0] = $r1;

        $r2 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("requestCursorUpdates", $r0);

        $i0 = virtualinvoke $r2.<java.lang.reflect.Method: int getModifiers()>();

        z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

     label2:
        $z1 = z0 ^ 1;

        return $z1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }

    private static boolean hasSetComposingRegion(java.lang.Class)
    {
        boolean z0, $z1;
        java.lang.Class[] $r0;
        java.lang.Class $r1, $r2, r5;
        java.lang.reflect.Method $r3;
        int $i0;
        java.lang.Throwable $r4;

        r5 := @parameter0: java.lang.Class;

     label1:
        $r0 = newarray (java.lang.Class)[2];

        $r1 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[0] = $r1;

        $r2 = <java.lang.Integer: java.lang.Class TYPE>;

        $r0[1] = $r2;

        $r3 = virtualinvoke r5.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("setComposingRegion", $r0);

        $i0 = virtualinvoke $r3.<java.lang.reflect.Method: int getModifiers()>();

        z0 = staticinvoke <java.lang.reflect.Modifier: boolean isAbstract(int)>($i0);

     label2:
        $z1 = z0 ^ 1;

        return $z1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.NoSuchMethodException from label1 to label2 with label3;
    }
}
