public interface  android.view.inputmethod.InputMethod extends java.lang.Object
{
    public static final java.lang.String SERVICE_INTERFACE;
    public static final java.lang.String SERVICE_META_DATA;
    public static final int SHOW_EXPLICIT;
    public static final int SHOW_FORCED;
    public static final java.lang.String TAG;

    public abstract void attachToken(android.os.IBinder);

    public abstract void bindInput(android.view.inputmethod.InputBinding);

    public abstract void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype);

    public abstract void createSession(android.view.inputmethod.InputMethod$SessionCallback);

    public void dispatchStartInputWithToken(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo, boolean, android.os.IBinder, boolean)
    {
        android.view.inputmethod.InputMethod r0;
        android.view.inputmethod.InputConnection r1;
        android.view.inputmethod.EditorInfo r2;
        boolean z0, z1;
        android.os.IBinder r3;

        r0 := @this: android.view.inputmethod.InputMethod;

        r1 := @parameter0: android.view.inputmethod.InputConnection;

        r2 := @parameter1: android.view.inputmethod.EditorInfo;

        z0 := @parameter2: boolean;

        r3 := @parameter3: android.os.IBinder;

        z1 := @parameter4: boolean;

        if z0 == 0 goto label1;

        interfaceinvoke r0.<android.view.inputmethod.InputMethod: void restartInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)>(r1, r2);

        goto label2;

     label1:
        interfaceinvoke r0.<android.view.inputmethod.InputMethod: void startInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)>(r1, r2);

     label2:
        return;
    }

    public abstract void hideSoftInput(int, android.os.ResultReceiver);

    public abstract void hideSoftInputWithToken(int, android.os.ResultReceiver, android.os.IBinder);

    public void initializeInternal(android.os.IBinder, int, com.android.internal.inputmethod.IInputMethodPrivilegedOperations)
    {
        android.view.inputmethod.InputMethod r0;
        android.os.IBinder r1;
        int i0;
        com.android.internal.inputmethod.IInputMethodPrivilegedOperations r2;

        r0 := @this: android.view.inputmethod.InputMethod;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.internal.inputmethod.IInputMethodPrivilegedOperations;

        interfaceinvoke r0.<android.view.inputmethod.InputMethod: void updateInputMethodDisplay(int)>(i0);

        interfaceinvoke r0.<android.view.inputmethod.InputMethod: void attachToken(android.os.IBinder)>(r1);

        return;
    }

    public void onCreateInlineSuggestionsRequest(com.android.internal.view.InlineSuggestionsRequestInfo, com.android.internal.view.IInlineSuggestionsRequestCallback)
    {
        android.view.inputmethod.InputMethod r0;
        com.android.internal.view.IInlineSuggestionsRequestCallback r1;
        android.os.RemoteException $r2;
        com.android.internal.view.InlineSuggestionsRequestInfo r3;

        r0 := @this: android.view.inputmethod.InputMethod;

        r3 := @parameter0: com.android.internal.view.InlineSuggestionsRequestInfo;

        r1 := @parameter1: com.android.internal.view.IInlineSuggestionsRequestCallback;

     label1:
        interfaceinvoke r1.<com.android.internal.view.IInlineSuggestionsRequestCallback: void onInlineSuggestionsUnsupported()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputMethod", "Failed to call onInlineSuggestionsUnsupported.", $r2);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public abstract void restartInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo);

    public abstract void revokeSession(android.view.inputmethod.InputMethodSession);

    public abstract void setCurrentHideInputToken(android.os.IBinder);

    public abstract void setCurrentShowInputToken(android.os.IBinder);

    public abstract void setSessionEnabled(android.view.inputmethod.InputMethodSession, boolean);

    public abstract void showSoftInput(int, android.os.ResultReceiver);

    public void showSoftInputWithToken(int, android.os.ResultReceiver, android.os.IBinder)
    {
        android.view.inputmethod.InputMethod r0;
        int i0;
        android.os.ResultReceiver r1;
        android.os.IBinder r2;

        r0 := @this: android.view.inputmethod.InputMethod;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.ResultReceiver;

        r2 := @parameter2: android.os.IBinder;

        interfaceinvoke r0.<android.view.inputmethod.InputMethod: void showSoftInput(int,android.os.ResultReceiver)>(i0, r1);

        return;
    }

    public abstract void startInput(android.view.inputmethod.InputConnection, android.view.inputmethod.EditorInfo);

    public abstract void unbindInput();

    public void updateInputMethodDisplay(int)
    {
        android.view.inputmethod.InputMethod r0;
        int i0;

        r0 := @this: android.view.inputmethod.InputMethod;

        i0 := @parameter0: int;

        return;
    }

    public static void <clinit>()
    {
        <android.view.inputmethod.InputMethod: java.lang.String TAG> = "InputMethod";

        <android.view.inputmethod.InputMethod: int SHOW_FORCED> = 2;

        <android.view.inputmethod.InputMethod: int SHOW_EXPLICIT> = 1;

        <android.view.inputmethod.InputMethod: java.lang.String SERVICE_META_DATA> = "android.view.im";

        <android.view.inputmethod.InputMethod: java.lang.String SERVICE_INTERFACE> = "android.view.InputMethod";

        return;
    }
}
