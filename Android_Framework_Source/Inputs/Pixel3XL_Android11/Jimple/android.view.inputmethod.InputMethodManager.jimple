public final class android.view.inputmethod.InputMethodManager extends java.lang.Object
{
    static final boolean DEBUG;
    public static final int DISPATCH_HANDLED;
    public static final int DISPATCH_IN_PROGRESS;
    public static final int DISPATCH_NOT_HANDLED;
    public static final int HIDE_IMPLICIT_ONLY;
    public static final int HIDE_NOT_ALWAYS;
    static final long INPUT_METHOD_NOT_RESPONDING_TIMEOUT;
    static final int MSG_APPLY_IME_VISIBILITY;
    static final int MSG_BIND;
    static final int MSG_DUMP;
    static final int MSG_FLUSH_INPUT_EVENT;
    static final int MSG_REPORT_FULLSCREEN_MODE;
    static final int MSG_REPORT_PRE_RENDERED;
    static final int MSG_SEND_INPUT_EVENT;
    static final int MSG_SET_ACTIVE;
    static final int MSG_TIMEOUT_INPUT_EVENT;
    static final int MSG_UNBIND;
    static final int MSG_UPDATE_ACTIVITY_VIEW_TO_SCREEN_MATRIX;
    private static final int NOT_A_SUBTYPE_ID;
    static final java.lang.String PENDING_EVENT_COUNTER;
    private static final int REQUEST_UPDATE_CURSOR_ANCHOR_INFO_NONE;
    public static final int RESULT_HIDDEN;
    public static final int RESULT_SHOWN;
    public static final int RESULT_UNCHANGED_HIDDEN;
    public static final int RESULT_UNCHANGED_SHOWN;
    public static final int SHOW_FORCED;
    public static final int SHOW_IMPLICIT;
    public static final int SHOW_IM_PICKER_MODE_AUTO;
    public static final int SHOW_IM_PICKER_MODE_EXCLUDE_AUXILIARY_SUBTYPES;
    public static final int SHOW_IM_PICKER_MODE_INCLUDE_AUXILIARY_SUBTYPES;
    private static final java.lang.String SUBTYPE_MODE_VOICE;
    static final java.lang.String TAG;
    static android.view.inputmethod.InputMethodManager sInstance;
    private static final android.util.SparseArray sInstanceMap;
    private static final java.lang.Object sLock;
    boolean mActive;
    private android.graphics.Matrix mActivityViewToScreenMatrix;
    int mBindSequence;
    final com.android.internal.view.IInputMethodClient$Stub mClient;
    android.view.inputmethod.CompletionInfo[] mCompletions;
    android.view.InputChannel mCurChannel;
    java.lang.String mCurId;
    com.android.internal.view.IInputMethodSession mCurMethod;
    android.view.ViewRootImpl mCurRootView;
    android.view.inputmethod.InputMethodManager$ImeInputEventSender mCurSender;
    android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute;
    private android.view.inputmethod.CursorAnchorInfo mCursorAnchorInfo;
    int mCursorCandEnd;
    int mCursorCandStart;
    android.graphics.Rect mCursorRect;
    int mCursorSelEnd;
    int mCursorSelStart;
    final android.view.inputmethod.InputMethodManager$DelegateImpl mDelegate;
    private final int mDisplayId;
    final android.view.inputmethod.InputConnection mDummyInputConnection;
    boolean mFullscreenMode;
    final android.view.inputmethod.InputMethodManager$H mH;
    final com.android.internal.view.IInputContext mIInputContext;
    private android.view.ImeInsetsSourceConsumer mImeInsetsConsumer;
    final android.os.Looper mMainLooper;
    final android.util.Pools$Pool mPendingEventPool;
    final android.util.SparseArray mPendingEvents;
    private int mRequestUpdateCursorAnchorInfoMonitorMode;
    private boolean mRestartOnNextWindowFocus;
    boolean mServedConnecting;
    android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper mServedInputConnectionWrapper;
    final com.android.internal.view.IInputMethodManager mService;
    android.graphics.Rect mTmpCursorRect;

    static void <clinit>()
    {
        java.lang.Object $r0;
        android.util.SparseArray $r1;

        <android.view.inputmethod.InputMethodManager: java.lang.String TAG> = "InputMethodManager";

        <android.view.inputmethod.InputMethodManager: java.lang.String SUBTYPE_MODE_VOICE> = "voice";

        <android.view.inputmethod.InputMethodManager: int SHOW_IM_PICKER_MODE_INCLUDE_AUXILIARY_SUBTYPES> = 1;

        <android.view.inputmethod.InputMethodManager: int SHOW_IM_PICKER_MODE_EXCLUDE_AUXILIARY_SUBTYPES> = 2;

        <android.view.inputmethod.InputMethodManager: int SHOW_IM_PICKER_MODE_AUTO> = 0;

        <android.view.inputmethod.InputMethodManager: int SHOW_IMPLICIT> = 1;

        <android.view.inputmethod.InputMethodManager: int SHOW_FORCED> = 2;

        <android.view.inputmethod.InputMethodManager: int RESULT_UNCHANGED_SHOWN> = 0;

        <android.view.inputmethod.InputMethodManager: int RESULT_UNCHANGED_HIDDEN> = 1;

        <android.view.inputmethod.InputMethodManager: int RESULT_SHOWN> = 2;

        <android.view.inputmethod.InputMethodManager: int RESULT_HIDDEN> = 3;

        <android.view.inputmethod.InputMethodManager: int REQUEST_UPDATE_CURSOR_ANCHOR_INFO_NONE> = 0;

        <android.view.inputmethod.InputMethodManager: java.lang.String PENDING_EVENT_COUNTER> = "aq:imm";

        <android.view.inputmethod.InputMethodManager: int NOT_A_SUBTYPE_ID> = -1;

        <android.view.inputmethod.InputMethodManager: int MSG_UPDATE_ACTIVITY_VIEW_TO_SCREEN_MATRIX> = 30;

        <android.view.inputmethod.InputMethodManager: int MSG_UNBIND> = 3;

        <android.view.inputmethod.InputMethodManager: int MSG_TIMEOUT_INPUT_EVENT> = 6;

        <android.view.inputmethod.InputMethodManager: int MSG_SET_ACTIVE> = 4;

        <android.view.inputmethod.InputMethodManager: int MSG_SEND_INPUT_EVENT> = 5;

        <android.view.inputmethod.InputMethodManager: int MSG_REPORT_PRE_RENDERED> = 15;

        <android.view.inputmethod.InputMethodManager: int MSG_REPORT_FULLSCREEN_MODE> = 10;

        <android.view.inputmethod.InputMethodManager: int MSG_FLUSH_INPUT_EVENT> = 7;

        <android.view.inputmethod.InputMethodManager: int MSG_DUMP> = 1;

        <android.view.inputmethod.InputMethodManager: int MSG_BIND> = 2;

        <android.view.inputmethod.InputMethodManager: int MSG_APPLY_IME_VISIBILITY> = 20;

        <android.view.inputmethod.InputMethodManager: long INPUT_METHOD_NOT_RESPONDING_TIMEOUT> = 2500L;

        <android.view.inputmethod.InputMethodManager: int HIDE_NOT_ALWAYS> = 2;

        <android.view.inputmethod.InputMethodManager: int HIDE_IMPLICIT_ONLY> = 1;

        <android.view.inputmethod.InputMethodManager: int DISPATCH_NOT_HANDLED> = 0;

        <android.view.inputmethod.InputMethodManager: int DISPATCH_IN_PROGRESS> = -1;

        <android.view.inputmethod.InputMethodManager: int DISPATCH_HANDLED> = 1;

        <android.view.inputmethod.InputMethodManager: boolean DEBUG> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.view.inputmethod.InputMethodManager: java.lang.Object sLock> = $r0;

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>()>();

        <android.view.inputmethod.InputMethodManager: android.util.SparseArray sInstanceMap> = $r1;

        return;
    }

    private void <init>(com.android.internal.view.IInputMethodManager, int, android.os.Looper)
    {
        android.view.inputmethod.InputMethodManager r0;
        com.android.internal.view.IInputMethodManager r1;
        int i0;
        android.os.Looper r2;
        android.graphics.Rect $r3, $r4;
        android.util.Pools$SimplePool $r5;
        android.util.SparseArray $r6;
        android.view.inputmethod.InputMethodManager$DelegateImpl $r7;
        android.view.inputmethod.InputMethodManager$1 $r8;
        android.view.inputmethod.BaseInputConnection $r9;
        android.view.inputmethod.InputMethodManager$H $r10;
        android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper $r11;
        android.view.inputmethod.InputConnection $r12;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: com.android.internal.view.IInputMethodManager;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.view.inputmethod.InputMethodManager: boolean mActive> = 0;

        r0.<android.view.inputmethod.InputMethodManager: boolean mRestartOnNextWindowFocus> = 1;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.view.inputmethod.InputMethodManager: android.graphics.Rect mTmpCursorRect> = $r3;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<android.view.inputmethod.InputMethodManager: android.graphics.Rect mCursorRect> = $r4;

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.CursorAnchorInfo mCursorAnchorInfo> = null;

        r0.<android.view.inputmethod.InputMethodManager: android.graphics.Matrix mActivityViewToScreenMatrix> = null;

        r0.<android.view.inputmethod.InputMethodManager: int mBindSequence> = -1;

        r0.<android.view.inputmethod.InputMethodManager: int mRequestUpdateCursorAnchorInfoMonitorMode> = 0;

        $r5 = new android.util.Pools$SimplePool;

        specialinvoke $r5.<android.util.Pools$SimplePool: void <init>(int)>(20);

        r0.<android.view.inputmethod.InputMethodManager: android.util.Pools$Pool mPendingEventPool> = $r5;

        $r6 = new android.util.SparseArray;

        specialinvoke $r6.<android.util.SparseArray: void <init>(int)>(20);

        r0.<android.view.inputmethod.InputMethodManager: android.util.SparseArray mPendingEvents> = $r6;

        $r7 = new android.view.inputmethod.InputMethodManager$DelegateImpl;

        specialinvoke $r7.<android.view.inputmethod.InputMethodManager$DelegateImpl: void <init>(android.view.inputmethod.InputMethodManager,android.view.inputmethod.InputMethodManager$1)>(r0, null);

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$DelegateImpl mDelegate> = $r7;

        $r8 = new android.view.inputmethod.InputMethodManager$1;

        specialinvoke $r8.<android.view.inputmethod.InputMethodManager$1: void <init>(android.view.inputmethod.InputMethodManager)>(r0);

        r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient> = $r8;

        $r9 = new android.view.inputmethod.BaseInputConnection;

        specialinvoke $r9.<android.view.inputmethod.BaseInputConnection: void <init>(android.view.inputmethod.InputMethodManager,boolean)>(r0, 0);

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputConnection mDummyInputConnection> = $r9;

        r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService> = r1;

        r0.<android.view.inputmethod.InputMethodManager: android.os.Looper mMainLooper> = r2;

        $r10 = new android.view.inputmethod.InputMethodManager$H;

        specialinvoke $r10.<android.view.inputmethod.InputMethodManager$H: void <init>(android.view.inputmethod.InputMethodManager,android.os.Looper)>(r0, r2);

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH> = $r10;

        r0.<android.view.inputmethod.InputMethodManager: int mDisplayId> = i0;

        $r11 = new android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper;

        $r12 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputConnection mDummyInputConnection>;

        specialinvoke $r11.<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: void <init>(android.os.Looper,android.view.inputmethod.InputConnection,android.view.inputmethod.InputMethodManager,android.view.View)>(r2, $r12, r0, null);

        r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputContext mIInputContext> = $r11;

        return;
    }

    static android.view.View access$100(android.view.inputmethod.InputMethodManager)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.View $r1;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        $r1 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

        return $r1;
    }

    static boolean access$1000(android.view.View)
    {
        android.view.View r0;
        boolean $z0;

        r0 := @parameter0: android.view.View;

        $z0 = staticinvoke <android.view.inputmethod.InputMethodManager: boolean canStartInput(android.view.View)>(r0);

        return $z0;
    }

    static android.view.ImeInsetsSourceConsumer access$1100(android.view.inputmethod.InputMethodManager)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.ImeInsetsSourceConsumer $r1;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.ImeInsetsSourceConsumer mImeInsetsConsumer>;

        return $r1;
    }

    static android.view.inputmethod.CursorAnchorInfo access$1200(android.view.inputmethod.InputMethodManager)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.CursorAnchorInfo $r1;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.CursorAnchorInfo mCursorAnchorInfo>;

        return $r1;
    }

    static void access$1400(android.view.inputmethod.InputMethodManager, android.view.inputmethod.InputMethodManager$PendingEvent)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$PendingEvent r1;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        r1 := @parameter1: android.view.inputmethod.InputMethodManager$PendingEvent;

        specialinvoke r0.<android.view.inputmethod.InputMethodManager: void recyclePendingEventLocked(android.view.inputmethod.InputMethodManager$PendingEvent)>(r1);

        return;
    }

    static int access$200(android.view.inputmethod.InputMethodManager, android.view.View, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.View r1;
        int i0, $i1;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        r1 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        $i1 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: int getStartInputFlags(android.view.View,int)>(r1, i0);

        return $i1;
    }

    static android.view.ImeFocusController access$300(android.view.inputmethod.InputMethodManager)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.ImeFocusController $r1;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        $r1 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.ImeFocusController getFocusController()>();

        return $r1;
    }

    static boolean access$400(android.view.inputmethod.InputMethodManager)
    {
        android.view.inputmethod.InputMethodManager r0;
        boolean $z0;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        $z0 = r0.<android.view.inputmethod.InputMethodManager: boolean mRestartOnNextWindowFocus>;

        return $z0;
    }

    static boolean access$402(android.view.inputmethod.InputMethodManager, boolean)
    {
        android.view.inputmethod.InputMethodManager r0;
        boolean z0;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        z0 := @parameter1: boolean;

        r0.<android.view.inputmethod.InputMethodManager: boolean mRestartOnNextWindowFocus> = z0;

        return z0;
    }

    static boolean access$500(android.view.inputmethod.InputMethodManager, android.view.View)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.View r1;
        boolean $z0;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        r1 := @parameter1: android.view.View;

        $z0 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r1);

        return $z0;
    }

    static void access$700(android.view.inputmethod.InputMethodManager, android.view.inputmethod.EditorInfo)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.EditorInfo r1;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        r1 := @parameter1: android.view.inputmethod.EditorInfo;

        specialinvoke r0.<android.view.inputmethod.InputMethodManager: void maybeCallServedViewChangedLocked(android.view.inputmethod.EditorInfo)>(r1);

        return;
    }

    static int access$800(android.view.inputmethod.InputMethodManager)
    {
        android.view.inputmethod.InputMethodManager r0;
        int $i0;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        $i0 = r0.<android.view.inputmethod.InputMethodManager: int mRequestUpdateCursorAnchorInfoMonitorMode>;

        return $i0;
    }

    static int access$802(android.view.inputmethod.InputMethodManager, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        i0 := @parameter1: int;

        r0.<android.view.inputmethod.InputMethodManager: int mRequestUpdateCursorAnchorInfoMonitorMode> = i0;

        return i0;
    }

    static android.graphics.Matrix access$900(android.view.inputmethod.InputMethodManager)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.graphics.Matrix $r1;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Matrix mActivityViewToScreenMatrix>;

        return $r1;
    }

    static android.graphics.Matrix access$902(android.view.inputmethod.InputMethodManager, android.graphics.Matrix)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.graphics.Matrix r1;

        r0 := @parameter0: android.view.inputmethod.InputMethodManager;

        r1 := @parameter1: android.graphics.Matrix;

        r0.<android.view.inputmethod.InputMethodManager: android.graphics.Matrix mActivityViewToScreenMatrix> = r1;

        return r1;
    }

    private static boolean canStartInput(android.view.View)
    {
        android.view.View r0;
        boolean $z0, $z1, z2;

        r0 := @parameter0: android.view.View;

        $z0 = virtualinvoke r0.<android.view.View: boolean hasWindowFocus()>();

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <android.view.inputmethod.InputMethodManager: boolean isAutofillUIShowing(android.view.View)>(r0);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private static android.view.inputmethod.InputMethodManager createInstance(int, android.os.Looper)
    {
        int i0;
        boolean $z0;
        android.os.Looper r0;
        android.view.inputmethod.InputMethodManager r1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.os.Looper;

        $z0 = staticinvoke <android.view.inputmethod.InputMethodManager: boolean isInEditMode()>();

        if $z0 == 0 goto label1;

        r1 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager createStubInstance(int,android.os.Looper)>(i0, r0);

        goto label2;

     label1:
        r1 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager createRealInstance(int,android.os.Looper)>(i0, r0);

     label2:
        return r1;
    }

    private static android.view.inputmethod.InputMethodManager createRealInstance(int, android.os.Looper)
    {
        int i0;
        long l1;
        android.os.IBinder $r0;
        android.view.inputmethod.InputMethodManager $r1;
        com.android.internal.view.IInputContext $r2;
        com.android.internal.view.IInputMethodClient$Stub $r3;
        android.os.ServiceManager$ServiceNotFoundException $r4;
        java.lang.IllegalStateException $r5;
        android.os.RemoteException $r6;
        java.lang.Throwable $r8;
        android.os.Looper r9;
        com.android.internal.view.IInputMethodManager r10;

        i0 := @parameter0: int;

        r9 := @parameter1: android.os.Looper;

     label01:
        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getServiceOrThrow(java.lang.String)>("input_method");

        r10 = staticinvoke <com.android.internal.view.IInputMethodManager$Stub: com.android.internal.view.IInputMethodManager asInterface(android.os.IBinder)>($r0);

     label02:
        $r1 = new android.view.inputmethod.InputMethodManager;

        specialinvoke $r1.<android.view.inputmethod.InputMethodManager: void <init>(com.android.internal.view.IInputMethodManager,int,android.os.Looper)>(r10, i0, r9);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label03:
        $r3 = $r1.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        $r2 = $r1.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputContext mIInputContext>;

        interfaceinvoke r10.<com.android.internal.view.IInputMethodManager: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int)>($r3, $r2, i0);

     label04:
        goto label08;

     label05:
        $r8 := @caughtexception;

        goto label09;

     label06:
        $r6 := @caughtexception;

     label07:
        virtualinvoke $r6.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label08:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return $r1;

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r8;

     label10:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch android.os.ServiceManager$ServiceNotFoundException from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label07 to label08 with label05;
    }

    private static android.view.inputmethod.InputMethodManager createStubInstance(int, android.os.Looper)
    {
        int i0;
        android.os.Looper r0;
        java.lang.ClassLoader r1;
        android.view.inputmethod.'-$$Lambda$InputMethodManager$iDWn3IGSUFqIcs8Py42UhfrshxI' r2;
        java.lang.Class $r3;
        java.lang.Class[] $r5;
        java.lang.Object $r6;
        com.android.internal.view.IInputMethodManager $r7;
        android.view.inputmethod.InputMethodManager r8;
        java.lang.reflect.InvocationHandler r9;

        i0 := @parameter0: int;

        r0 := @parameter1: android.os.Looper;

        $r3 = class "Lcom/android/internal/view/IInputMethodManager;";

        r1 = virtualinvoke $r3.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r2 = <android.view.inputmethod._$$Lambda$InputMethodManager$iDWn3IGSUFqIcs8Py42UhfrshxI: android.view.inputmethod.'-$$Lambda$InputMethodManager$iDWn3IGSUFqIcs8Py42UhfrshxI' INSTANCE>;

        r8 = new android.view.inputmethod.InputMethodManager;

        $r5 = newarray (java.lang.Class)[1];

        $r5[0] = class "Lcom/android/internal/view/IInputMethodManager;";

        r9 = (java.lang.reflect.InvocationHandler) r2;

        $r6 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>(r1, $r5, r9);

        $r7 = (com.android.internal.view.IInputMethodManager) $r6;

        specialinvoke r8.<android.view.inputmethod.InputMethodManager: void <init>(com.android.internal.view.IInputMethodManager,int,android.os.Looper)>($r7, i0, r0);

        return r8;
    }

    private static java.lang.String dumpViewInfo(android.view.View)
    {
        android.view.View r0;
        java.lang.StringBuilder $r2, $r4, $r9, $r14, $r19, $r25, $r31, $r36;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.String $r7, $r12, $r17, $r23, $r29, $r34, $r39, $r41;
        android.os.IBinder $r21;
        android.content.Context $r27;
        int $i0;

        r0 := @parameter0: android.view.View;

        if r0 != null goto label1;

        return "null";

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",focus=");

        $z0 = virtualinvoke r0.<android.view.View: boolean hasFocus()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",windowFocus=");

        $z1 = virtualinvoke r0.<android.view.View: boolean hasWindowFocus()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",autofillUiShowing=");

        $z2 = staticinvoke <android.view.inputmethod.InputMethodManager: boolean isAutofillUIShowing(android.view.View)>(r0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",window=");

        $r21 = virtualinvoke r0.<android.view.View: android.os.IBinder getWindowToken()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",displayId=");

        $r27 = virtualinvoke r0.<android.view.View: android.content.Context getContext()>();

        $i0 = virtualinvoke $r27.<android.content.Context: int getDisplayId()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",temporaryDetach=");

        $z3 = virtualinvoke r0.<android.view.View: boolean isTemporarilyDetached()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",hasImeFocus=");

        $z4 = virtualinvoke r0.<android.view.View: boolean hasImeFocus()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r41;
    }

    public static void ensureDefaultInstanceForDefaultDisplayIfNecessary()
    {
        android.os.Looper $r0;

        $r0 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager forContextInternal(int,android.os.Looper)>(0, $r0);

        return;
    }

    private void flushPendingEventsLocked()
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0, i1, i2;
        android.os.Message r1;
        android.view.inputmethod.InputMethodManager$H $r2, $r5;
        android.util.SparseArray $r3, $r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        $r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        virtualinvoke $r2.<android.view.inputmethod.InputMethodManager$H: void removeMessages(int)>(7);

        $r3 = r0.<android.view.inputmethod.InputMethodManager: android.util.SparseArray mPendingEvents>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $r4 = r0.<android.view.inputmethod.InputMethodManager: android.util.SparseArray mPendingEvents>;

        i1 = virtualinvoke $r4.<android.util.SparseArray: int keyAt(int)>(i2);

        $r5 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        r1 = virtualinvoke $r5.<android.view.inputmethod.InputMethodManager$H: android.os.Message obtainMessage(int,int,int)>(7, i1, 0);

        virtualinvoke r1.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        i2 = i2 + 1;

        goto label1;

     label2:
        return;
    }

    public static android.view.inputmethod.InputMethodManager forContext(android.content.Context)
    {
        int i0;
        android.view.inputmethod.InputMethodManager $r0;
        android.content.Context r1;
        android.os.Looper r2;

        r1 := @parameter0: android.content.Context;

        i0 = virtualinvoke r1.<android.content.Context: int getDisplayId()>();

        if i0 != 0 goto label1;

        r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        goto label2;

     label1:
        r2 = virtualinvoke r1.<android.content.Context: android.os.Looper getMainLooper()>();

     label2:
        $r0 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager forContextInternal(int,android.os.Looper)>(i0, r2);

        return $r0;
    }

    private static android.view.inputmethod.InputMethodManager forContextInternal(int, android.os.Looper)
    {
        int i0;
        java.lang.Object r0, $r3;
        android.view.inputmethod.InputMethodManager r1, $r4, r7;
        android.util.SparseArray $r2, $r8;
        java.lang.Throwable $r5;
        android.os.Looper r6;
        boolean z0;

        i0 := @parameter0: int;

        r6 := @parameter1: android.os.Looper;

        if i0 != 0 goto label01;

        z0 = 1;

        goto label02;

     label01:
        z0 = 0;

     label02:
        r0 = <android.view.inputmethod.InputMethodManager: java.lang.Object sLock>;

        entermonitor r0;

     label03:
        $r2 = <android.view.inputmethod.InputMethodManager: android.util.SparseArray sInstanceMap>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r1 = (android.view.inputmethod.InputMethodManager) $r3;

     label04:
        if r1 == null goto label07;

     label05:
        exitmonitor r0;

     label06:
        return r1;

     label07:
        r7 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager createInstance(int,android.os.Looper)>(i0, r6);

        $r4 = <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager sInstance>;

        if $r4 != null goto label10;

     label08:
        if z0 == 0 goto label10;

     label09:
        <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager sInstance> = r7;

     label10:
        $r8 = <android.view.inputmethod.InputMethodManager: android.util.SparseArray sInstanceMap>;

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r7);

        exitmonitor r0;

     label11:
        return r7;

     label12:
        $r5 := @caughtexception;

     label13:
        exitmonitor r0;

     label14:
        throw $r5;

        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    private android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)
    {
        android.view.inputmethod.InputMethodManager r0, r26;
        int i0, $i1, $i2, $i3, $i5;
        android.content.Context $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4, $r12, $r20;
        java.lang.String $r10, $r19, $r23;
        java.lang.Throwable $r11;
        android.view.View r24;
        android.view.ViewRootImpl r25;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r24 := @parameter0: android.view.View;

        if r24 != null goto label1;

        return null;

     label1:
        r25 = virtualinvoke r24.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        if r25 != null goto label2;

        return null;

     label2:
        i0 = virtualinvoke r25.<android.view.ViewRootImpl: int getDisplayId()>();

        $i1 = r0.<android.view.inputmethod.InputMethodManager: int mDisplayId>;

        if i0 != $i1 goto label3;

        return null;

     label3:
        $r2 = r25.<android.view.ViewRootImpl: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/view/inputmethod/InputMethodManager;");

        r26 = (android.view.inputmethod.InputMethodManager) $r3;

        if r26 != null goto label4;

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b/117267690: Failed to get non-null fallback IMM. view=");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("InputMethodManager", $r23);

        return null;

     label4:
        $i2 = r26.<android.view.inputmethod.InputMethodManager: int mDisplayId>;

        if $i2 == i0 goto label5;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b/117267690: Failed to get fallback IMM with expected displayId=");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" actual IMM#displayId=");

        $i5 = r26.<android.view.inputmethod.InputMethodManager: int mDisplayId>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" view=");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24);

        $r19 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("InputMethodManager", $r19);

        return null;

     label5:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("b/117267690: Display ID mismatch found. ViewRootImpl displayId=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" InputMethodManager displayId=");

        $i3 = r0.<android.view.inputmethod.InputMethodManager: int mDisplayId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Use the right InputMethodManager instance to avoid performance overhead.");

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = new java.lang.Throwable;

        specialinvoke $r11.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>("InputMethodManager", $r10, $r11);

        return r26;
    }

    private android.view.ImeFocusController getFocusController()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        android.view.ViewRootImpl $r2, $r3;
        java.lang.Throwable $r4;
        android.view.ImeFocusController r5;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        if $r2 == null goto label3;

        $r3 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        r5 = virtualinvoke $r3.<android.view.ViewRootImpl: android.view.ImeFocusController getImeFocusController()>();

        exitmonitor r1;

     label2:
        return r5;

     label3:
        exitmonitor r1;

     label4:
        return null;

     label5:
        $r4 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public static android.view.inputmethod.InputMethodManager getInstance()
    {
        java.lang.Throwable $r0;
        android.view.inputmethod.InputMethodManager $r1;

        $r0 = new java.lang.Throwable;

        specialinvoke $r0.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputMethodManager", "InputMethodManager.getInstance() is deprecated because it cannot be compatible with multi-display. Use context.getSystemService(InputMethodManager.class) instead.", $r0);

        staticinvoke <android.view.inputmethod.InputMethodManager: void ensureDefaultInstanceForDefaultDisplayIfNecessary()>();

        $r1 = staticinvoke <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager peekInstance()>();

        return $r1;
    }

    private android.view.View getNextServedViewLocked()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.ImeFocusController $r1;
        android.view.ViewRootImpl r2;
        android.view.View r3;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        if r2 == null goto label1;

        $r1 = virtualinvoke r2.<android.view.ViewRootImpl: android.view.ImeFocusController getImeFocusController()>();

        r3 = virtualinvoke $r1.<android.view.ImeFocusController: android.view.View getNextServedView()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    private android.view.View getServedViewLocked()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.ImeFocusController $r1;
        android.view.ViewRootImpl r2;
        android.view.View r3;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        if r2 == null goto label1;

        $r1 = virtualinvoke r2.<android.view.ViewRootImpl: android.view.ImeFocusController getImeFocusController()>();

        r3 = virtualinvoke $r1.<android.view.ImeFocusController: android.view.View getServedView()>();

        goto label2;

     label1:
        r3 = null;

     label2:
        return r3;
    }

    private int getStartInputFlags(android.view.View, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.View r1;
        int i0, i1, i2;
        boolean $z0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.view.View;

        i1 := @parameter1: int;

        i0 = i1 | 1;

        i2 = i0;

        $z0 = virtualinvoke r1.<android.view.View: boolean onCheckIsTextEditor()>();

        if $z0 == 0 goto label1;

        i2 = i0 | 2;

     label1:
        return i2;
    }

    private boolean hasServedByInputMethodLocked(android.view.View)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.View r1, r2;
        boolean $z0, z1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.view.View;

        r2 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

        if r2 == r1 goto label2;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<android.view.View: boolean checkInputConnectionProxy(android.view.View)>(r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    private static boolean isAutofillUIShowing(android.view.View)
    {
        android.content.Context $r0;
        java.lang.Object $r1;
        boolean $z0, z1;
        android.view.View r2;
        android.view.autofill.AutofillManager r3;

        r2 := @parameter0: android.view.View;

        $r0 = virtualinvoke r2.<android.view.View: android.content.Context getContext()>();

        $r1 = virtualinvoke $r0.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/view/autofill/AutofillManager;");

        r3 = (android.view.autofill.AutofillManager) $r1;

        if r3 == null goto label1;

        $z0 = virtualinvoke r3.<android.view.autofill.AutofillManager: boolean isAutofillUiShowing()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private static boolean isInEditMode()
    {
        return 0;
    }

    static java.lang.Object lambda$createStubInstance$0(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        java.lang.Class $r0, $r1, $r2, $r3, $r4, $r5, $r6, r14, r15;
        java.lang.Double $r7;
        java.lang.Float $r8;
        java.lang.Long $r9;
        java.lang.Boolean $r10;
        java.lang.Object r11;
        java.lang.reflect.Method r12;
        java.lang.Object[] r13;
        java.lang.Integer r16;

        r11 := @parameter0: java.lang.Object;

        r12 := @parameter1: java.lang.reflect.Method;

        r13 := @parameter2: java.lang.Object[];

        r14 = virtualinvoke r12.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        r15 = <java.lang.Boolean: java.lang.Class TYPE>;

        r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        if r14 != r15 goto label1;

        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        return $r10;

     label1:
        $r0 = <java.lang.Integer: java.lang.Class TYPE>;

        if r14 != $r0 goto label2;

        return r16;

     label2:
        $r1 = <java.lang.Long: java.lang.Class TYPE>;

        if r14 != $r1 goto label3;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(0L);

        return $r9;

     label3:
        $r2 = <java.lang.Short: java.lang.Class TYPE>;

        if r14 != $r2 goto label4;

        return r16;

     label4:
        $r3 = <java.lang.Character: java.lang.Class TYPE>;

        if r14 != $r3 goto label5;

        return r16;

     label5:
        $r4 = <java.lang.Byte: java.lang.Class TYPE>;

        if r14 != $r4 goto label6;

        return r16;

     label6:
        $r5 = <java.lang.Float: java.lang.Class TYPE>;

        if r14 != $r5 goto label7;

        $r8 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.0F);

        return $r8;

     label7:
        $r6 = <java.lang.Double: java.lang.Class TYPE>;

        if r14 != $r6 goto label8;

        $r7 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>(0.0);

        return $r7;

     label8:
        return null;
    }

    static int lambda$getShortcutInputMethodsAndSubtypes$2(android.view.inputmethod.InputMethodInfo)
    {
        android.view.inputmethod.InputMethodInfo r0;
        boolean $z0, $z1;
        int i0;

        r0 := @parameter0: android.view.inputmethod.InputMethodInfo;

        $z0 = virtualinvoke r0.<android.view.inputmethod.InputMethodInfo: boolean isSystem()>();

        $z1 = $z0 ^ 1;

        i0 = (int) $z1;

        return i0;
    }

    private void maybeCallServedViewChangedLocked(android.view.inputmethod.EditorInfo)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.EditorInfo r1;
        android.view.ImeInsetsSourceConsumer r2;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.view.inputmethod.EditorInfo;

        r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.ImeInsetsSourceConsumer mImeInsetsConsumer>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.ImeInsetsSourceConsumer: void onServedEditorChanged(android.view.inputmethod.EditorInfo)>(r1);

     label1:
        return;
    }

    private android.view.inputmethod.InputMethodManager$PendingEvent obtainPendingEventLocked(android.view.InputEvent, java.lang.Object, java.lang.String, android.view.inputmethod.InputMethodManager$FinishedInputEventCallback, android.os.Handler)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.InputEvent r1;
        java.lang.Object r2, $r8;
        java.lang.String r3;
        android.view.inputmethod.InputMethodManager$FinishedInputEventCallback r4;
        android.os.Handler r5;
        android.view.inputmethod.InputMethodManager$PendingEvent r6, $r9, r10;
        android.util.Pools$Pool $r7;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.view.InputEvent;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.view.inputmethod.InputMethodManager$FinishedInputEventCallback;

        r5 := @parameter4: android.os.Handler;

        $r7 = r0.<android.view.inputmethod.InputMethodManager: android.util.Pools$Pool mPendingEventPool>;

        $r8 = interfaceinvoke $r7.<android.util.Pools$Pool: java.lang.Object acquire()>();

        r6 = (android.view.inputmethod.InputMethodManager$PendingEvent) $r8;

        r10 = r6;

        if r6 != null goto label1;

        $r9 = new android.view.inputmethod.InputMethodManager$PendingEvent;

        specialinvoke $r9.<android.view.inputmethod.InputMethodManager$PendingEvent: void <init>(android.view.inputmethod.InputMethodManager,android.view.inputmethod.InputMethodManager$1)>(r0, null);

        r10 = $r9;

     label1:
        r10.<android.view.inputmethod.InputMethodManager$PendingEvent: android.view.InputEvent mEvent> = r1;

        r10.<android.view.inputmethod.InputMethodManager$PendingEvent: java.lang.Object mToken> = r2;

        r10.<android.view.inputmethod.InputMethodManager$PendingEvent: java.lang.String mInputMethodId> = r3;

        r10.<android.view.inputmethod.InputMethodManager$PendingEvent: android.view.inputmethod.InputMethodManager$FinishedInputEventCallback mCallback> = r4;

        r10.<android.view.inputmethod.InputMethodManager$PendingEvent: android.os.Handler mHandler> = r5;

        return r10;
    }

    public static android.view.inputmethod.InputMethodManager peekInstance()
    {
        java.lang.Object r0;
        java.lang.Throwable $r1, $r2;
        android.view.inputmethod.InputMethodManager r3;

        $r1 = new java.lang.Throwable;

        specialinvoke $r1.<java.lang.Throwable: void <init>()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputMethodManager", "InputMethodManager.peekInstance() is deprecated because it cannot be compatible with multi-display. Use context.getSystemService(InputMethodManager.class) instead.", $r1);

        r0 = <android.view.inputmethod.InputMethodManager: java.lang.Object sLock>;

        entermonitor r0;

     label1:
        r3 = <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager sInstance>;

        exitmonitor r0;

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void recyclePendingEventLocked(android.view.inputmethod.InputMethodManager$PendingEvent)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$PendingEvent r1;
        android.util.Pools$Pool $r2;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.view.inputmethod.InputMethodManager$PendingEvent;

        virtualinvoke r1.<android.view.inputmethod.InputMethodManager$PendingEvent: void recycle()>();

        $r2 = r0.<android.view.inputmethod.InputMethodManager: android.util.Pools$Pool mPendingEventPool>;

        interfaceinvoke $r2.<android.util.Pools$Pool: boolean release(java.lang.Object)>(r1);

        return;
    }

    private void setNextServedViewLocked(android.view.View)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.View r1;
        android.view.ViewRootImpl r2;
        android.view.ImeFocusController $r3;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.view.View;

        r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<android.view.ViewRootImpl: android.view.ImeFocusController getImeFocusController()>();

        virtualinvoke $r3.<android.view.ImeFocusController: void setNextServedView(android.view.View)>(r1);

     label1:
        return;
    }

    private void setServedViewLocked(android.view.View)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.View r1;
        android.view.ViewRootImpl r2;
        android.view.ImeFocusController $r3;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.view.View;

        r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<android.view.ViewRootImpl: android.view.ImeFocusController getImeFocusController()>();

        virtualinvoke $r3.<android.view.ImeFocusController: void setServedView(android.view.View)>(r1);

     label1:
        return;
    }

    private void showInputMethodPickerLocked()
    {
        android.view.inputmethod.InputMethodManager r0;
        com.android.internal.view.IInputMethodClient$Stub $r2;
        com.android.internal.view.IInputMethodManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.view.inputmethod.InputMethodManager;

     label1:
        $r3 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        interfaceinvoke $r3.<com.android.internal.view.IInputMethodManager: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient,int)>($r2, 0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    static void tearDownEditMode()
    {
        java.lang.Object r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r2;
        java.lang.Throwable $r3;

        $z0 = staticinvoke <android.view.inputmethod.InputMethodManager: boolean isInEditMode()>();

        if $z0 == 0 goto label6;

        r0 = <android.view.inputmethod.InputMethodManager: java.lang.Object sLock>;

        entermonitor r0;

     label1:
        <android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager sInstance> = null;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

     label6:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This method must be called only from layoutlib");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void checkFocus()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.ImeFocusController r1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.ImeFocusController getFocusController()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.ImeFocusController: boolean checkFocus(boolean,boolean)>(0, 1);

     label1:
        return;
    }

    void clearBindingLocked()
    {
        android.view.inputmethod.InputMethodManager r0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void clearConnectionLocked()>();

        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void setInputChannelLocked(android.view.InputChannel)>(null);

        r0.<android.view.inputmethod.InputMethodManager: int mBindSequence> = -1;

        r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId> = null;

        r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod> = null;

        return;
    }

    void clearConnectionLocked()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper r1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute> = null;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper mServedInputConnectionWrapper>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: void deactivate()>();

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper mServedInputConnectionWrapper> = null;

     label1:
        return;
    }

    void closeCurrentInput()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        android.view.ViewRootImpl $r2, $r3, $r4;
        com.android.internal.view.IInputMethodManager $r5;
        com.android.internal.view.IInputMethodClient$Stub $r6;
        android.view.View $r7, r12;
        android.os.IBinder $r8;
        android.os.RemoteException $r9;
        java.lang.RuntimeException $r10;
        java.lang.Throwable $r11;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label01:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        if $r2 == null goto label08;

        $r3 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        r12 = virtualinvoke $r3.<android.view.ViewRootImpl: android.view.View getView()>();

     label02:
        if r12 != null goto label03;

        goto label08;

     label03:
        $r5 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        $r6 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        $r4 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        $r7 = virtualinvoke $r4.<android.view.ViewRootImpl: android.view.View getView()>();

        $r8 = virtualinvoke $r7.<android.view.View: android.os.IBinder getWindowToken()>();

        interfaceinvoke $r5.<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>($r6, $r8, 2, null);

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        $r9 := @caughtexception;

     label07:
        $r10 = virtualinvoke $r9.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r10;

     label08:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", "No current root view, ignoring closeCurrentInput()");

        exitmonitor r1;

     label09:
        return;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label04 with label06;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public int dispatchInputEvent(android.view.InputEvent, java.lang.Object, android.view.inputmethod.InputMethodManager$FinishedInputEventCallback, android.os.Handler)
    {
        android.view.inputmethod.InputMethodManager r0;
        java.lang.Object r1;
        android.view.inputmethod.InputMethodManager$FinishedInputEventCallback r2;
        android.os.Handler r3;
        android.view.inputmethod.InputMethodManager$H r4, $r7, $r8;
        android.view.KeyEvent r5;
        int i0, $i1, $i2, $i3;
        com.android.internal.view.IInputMethodSession $r6;
        boolean $z0, $z2;
        java.lang.Throwable $r9;
        android.view.InputEvent r10;
        java.lang.String $r11;
        android.view.inputmethod.InputMethodManager$PendingEvent r12;
        android.os.Looper $r13;
        android.os.Message r14;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r10 := @parameter0: android.view.InputEvent;

        r1 := @parameter1: java.lang.Object;

        r2 := @parameter2: android.view.inputmethod.InputMethodManager$FinishedInputEventCallback;

        r3 := @parameter3: android.os.Handler;

        r4 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r4;

     label01:
        $r6 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        if $r6 == null goto label07;

        $z0 = r10 instanceof android.view.KeyEvent;

        if $z0 == 0 goto label03;

        r5 = (android.view.KeyEvent) r10;

        $i1 = virtualinvoke r5.<android.view.KeyEvent: int getAction()>();

        if $i1 != 0 goto label03;

        $i2 = virtualinvoke r5.<android.view.KeyEvent: int getKeyCode()>();

        if $i2 != 63 goto label03;

        $i3 = virtualinvoke r5.<android.view.KeyEvent: int getRepeatCount()>();

        if $i3 != 0 goto label03;

        specialinvoke r0.<android.view.inputmethod.InputMethodManager: void showInputMethodPickerLocked()>();

        exitmonitor r4;

     label02:
        return 1;

     label03:
        $r11 = r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId>;

        r12 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$PendingEvent obtainPendingEventLocked(android.view.InputEvent,java.lang.Object,java.lang.String,android.view.inputmethod.InputMethodManager$FinishedInputEventCallback,android.os.Handler)>(r10, r1, $r11, r2, r3);

        $r13 = r0.<android.view.inputmethod.InputMethodManager: android.os.Looper mMainLooper>;

        $z2 = virtualinvoke $r13.<android.os.Looper: boolean isCurrentThread()>();

        if $z2 == 0 goto label05;

        i0 = virtualinvoke r0.<android.view.inputmethod.InputMethodManager: int sendInputEventOnMainLooperLocked(android.view.inputmethod.InputMethodManager$PendingEvent)>(r12);

        exitmonitor r4;

     label04:
        return i0;

     label05:
        $r7 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        r14 = virtualinvoke $r7.<android.view.inputmethod.InputMethodManager$H: android.os.Message obtainMessage(int,java.lang.Object)>(5, r12);

        virtualinvoke r14.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r8 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        virtualinvoke $r8.<android.view.inputmethod.InputMethodManager$H: boolean sendMessage(android.os.Message)>(r14);

        exitmonitor r4;

     label06:
        return -1;

     label07:
        exitmonitor r4;

     label08:
        return 0;

     label09:
        $r9 := @caughtexception;

     label10:
        exitmonitor r4;

     label11:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void dispatchKeyEventFromInputMethod(android.view.View, android.view.KeyEvent)
    {
        android.view.inputmethod.InputMethodManager r0, r6;
        android.view.KeyEvent r1;
        android.view.inputmethod.InputMethodManager$H r2;
        android.view.View r3, r5;
        java.lang.Throwable $r4;
        android.view.ViewRootImpl r7, r9;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.KeyEvent;

        r6 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r5);

        if r6 == null goto label01;

        virtualinvoke r6.<android.view.inputmethod.InputMethodManager: void dispatchKeyEventFromInputMethod(android.view.View,android.view.KeyEvent)>(r5, r1);

        return;

     label01:
        r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r2;

        if r5 == null goto label05;

     label02:
        r7 = virtualinvoke r5.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

     label03:
        goto label06;

     label04:
        $r4 := @caughtexception;

        goto label14;

     label05:
        r7 = null;

     label06:
        r9 = r7;

        if r7 != null goto label10;

     label07:
        r3 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

     label08:
        r9 = r7;

        if r3 == null goto label10;

     label09:
        r9 = virtualinvoke r3.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

     label10:
        if r9 == null goto label12;

     label11:
        virtualinvoke r9.<android.view.ViewRootImpl: void dispatchKeyFromIme(android.view.KeyEvent)>(r1);

     label12:
        exitmonitor r2;

     label13:
        return;

     label14:
        exitmonitor r2;

     label15:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label07 to label08 with label04;
        catch java.lang.Throwable from label09 to label10 with label04;
        catch java.lang.Throwable from label11 to label12 with label04;
        catch java.lang.Throwable from label12 to label13 with label04;
        catch java.lang.Throwable from label14 to label15 with label04;
    }

    public void displayCompletions(android.view.View, android.view.inputmethod.CompletionInfo[])
    {
        android.view.inputmethod.InputMethodManager r0, r6;
        android.view.inputmethod.CompletionInfo[] r1;
        boolean $z0;
        com.android.internal.view.IInputMethodSession $r2, r8;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        android.view.View r5;
        android.view.inputmethod.InputMethodManager$H r7;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.inputmethod.CompletionInfo[];

        r6 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r5);

        if r6 == null goto label01;

        virtualinvoke r6.<android.view.inputmethod.InputMethodManager: void displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])>(r5, r1);

        return;

     label01:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r7 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r7;

     label02:
        $z0 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r5);

        if $z0 != 0 goto label04;

        exitmonitor r7;

     label03:
        return;

     label04:
        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.CompletionInfo[] mCompletions> = r1;

        r8 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

     label05:
        if r8 == null goto label09;

     label06:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        interfaceinvoke $r2.<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>(r1);

     label07:
        goto label09;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r7;

     label10:
        return;

     label11:
        $r3 := @caughtexception;

     label12:
        exitmonitor r7;

     label13:
        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    void doDump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        android.view.inputmethod.InputMethodManager r0;
        java.lang.String[] r1;
        android.util.PrintWriterPrinter $r2;
        java.lang.StringBuilder $r3, $r8, $r13, $r18, $r23, $r34, $r38, $r43, $r48, $r53, $r58, $r63, $r68, $r74, $r79;
        java.lang.String $r7, $r12, $r17, $r22, $r31, $r33, $r37, $r42, $r47, $r52, $r57, $r61, $r67, $r71, $r73, $r78, $r88;
        com.android.internal.view.IInputMethodManager $r10;
        android.os.Looper $r15;
        com.android.internal.view.IInputContext $r20;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.internal.view.IInputMethodSession $r40;
        android.view.ViewRootImpl $r45;
        android.view.View $r50, $r55;
        android.view.inputmethod.EditorInfo $r62, $r89;
        android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper $r65;
        android.view.inputmethod.CompletionInfo[] $r70;
        android.graphics.Rect $r76;
        java.io.FileDescriptor r90;
        java.io.PrintWriter r91;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r90 := @parameter0: java.io.FileDescriptor;

        r91 := @parameter1: java.io.PrintWriter;

        r1 := @parameter2: java.lang.String[];

        $r2 = new android.util.PrintWriterPrinter;

        specialinvoke $r2.<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>(r91);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Input method client state for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mService=");

        $r10 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mMainLooper=");

        $r15 = r0.<android.view.inputmethod.InputMethodManager: android.os.Looper mMainLooper>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r17);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mIInputContext=");

        $r20 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputContext mIInputContext>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r22);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mActive=");

        $z0 = r0.<android.view.inputmethod.InputMethodManager: boolean mActive>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mRestartOnNextWindowFocus=");

        $z1 = r0.<android.view.inputmethod.InputMethodManager: boolean mRestartOnNextWindowFocus>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mBindSequence=");

        $i0 = r0.<android.view.inputmethod.InputMethodManager: int mBindSequence>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCurId=");

        $r31 = r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r31);

        $r33 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r33);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mFullscreenMode=");

        $z2 = r0.<android.view.inputmethod.InputMethodManager: boolean mFullscreenMode>;

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r37);

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCurMethod=");

        $r40 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        $r42 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r42);

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCurRootView=");

        $r45 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        $r47 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r47);

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mServedView=");

        $r50 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r50);

        $r52 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r52);

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mNextServedView=");

        $r55 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getNextServedViewLocked()>();

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r55);

        $r57 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r57);

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mServedConnecting=");

        $z3 = r0.<android.view.inputmethod.InputMethodManager: boolean mServedConnecting>;

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r61 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r61);

        $r62 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>;

        if $r62 == null goto label1;

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>("  mCurrentTextBoxAttribute:");

        $r89 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>;

        virtualinvoke $r89.<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>($r2, "    ");

        goto label2;

     label1:
        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>("  mCurrentTextBoxAttribute: null");

     label2:
        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mServedInputConnectionWrapper=");

        $r65 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper mServedInputConnectionWrapper>;

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r65);

        $r67 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r67);

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCompletions=");

        $r70 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.CompletionInfo[] mCompletions>;

        $r71 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r70);

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r71);

        $r73 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r73);

        $r74 = new java.lang.StringBuilder;

        specialinvoke $r74.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCursorRect=");

        $r76 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Rect mCursorRect>;

        virtualinvoke $r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r76);

        $r78 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r78);

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mCursorSelStart=");

        $i1 = r0.<android.view.inputmethod.InputMethodManager: int mCursorSelStart>;

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCursorSelEnd=");

        $i2 = r0.<android.view.inputmethod.InputMethodManager: int mCursorSelEnd>;

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCursorCandStart=");

        $i3 = r0.<android.view.inputmethod.InputMethodManager: int mCursorCandStart>;

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCursorCandEnd=");

        $i4 = r0.<android.view.inputmethod.InputMethodManager: int mCursorCandEnd>;

        virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r88 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke $r2.<android.util.Printer: void println(java.lang.String)>($r88);

        return;
    }

    void finishInputLocked()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.View $r1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r0.<android.view.inputmethod.InputMethodManager: android.graphics.Matrix mActivityViewToScreenMatrix> = null;

        specialinvoke r0.<android.view.inputmethod.InputMethodManager: void setNextServedViewLocked(android.view.View)>(null);

        $r1 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

        if $r1 == null goto label1;

        specialinvoke r0.<android.view.inputmethod.InputMethodManager: void setServedViewLocked(android.view.View)>(null);

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.CompletionInfo[] mCompletions> = null;

        r0.<android.view.inputmethod.InputMethodManager: boolean mServedConnecting> = 0;

        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void clearConnectionLocked()>();

     label1:
        return;
    }

    void finishedInputEvent(int, boolean, boolean)
    {
        android.view.inputmethod.InputMethodManager r0;
        boolean z0, z1;
        android.view.inputmethod.InputMethodManager$H r1, $r8;
        java.lang.StringBuilder r2;
        android.util.SparseArray $r3, $r4, $r6, $r7;
        java.lang.Object $r5;
        int $i0, i2, i3;
        java.lang.String $r10, $r12;
        java.lang.Throwable $r13;
        android.view.inputmethod.InputMethodManager$PendingEvent r14;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        i2 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label01:
        $r3 = r0.<android.view.inputmethod.InputMethodManager: android.util.SparseArray mPendingEvents>;

        i3 = virtualinvoke $r3.<android.util.SparseArray: int indexOfKey(int)>(i2);

     label02:
        if i3 >= 0 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        $r4 = r0.<android.view.inputmethod.InputMethodManager: android.util.SparseArray mPendingEvents>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r14 = (android.view.inputmethod.InputMethodManager$PendingEvent) $r5;

        $r6 = r0.<android.view.inputmethod.InputMethodManager: android.util.SparseArray mPendingEvents>;

        virtualinvoke $r6.<android.util.SparseArray: void removeAt(int)>(i3);

        $r7 = r0.<android.view.inputmethod.InputMethodManager: android.util.SparseArray mPendingEvents>;

        $i0 = virtualinvoke $r7.<android.util.SparseArray: int size()>();

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(4L, "aq:imm", $i0);

     label06:
        if z1 == 0 goto label09;

     label07:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Timeout waiting for IME to handle input event after 2500 ms: ");

        $r10 = r14.<android.view.inputmethod.InputMethodManager$PendingEvent: java.lang.String mInputMethodId>;

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", $r12);

     label08:
        goto label10;

     label09:
        $r8 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        virtualinvoke $r8.<android.view.inputmethod.InputMethodManager$H: void removeMessages(int,java.lang.Object)>(6, r14);

     label10:
        exitmonitor r1;

     label11:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void invokeFinishedInputEventCallback(android.view.inputmethod.InputMethodManager$PendingEvent,boolean)>(r14, z0);

        return;

     label12:
        $r13 := @caughtexception;

     label13:
        exitmonitor r1;

     label14:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public com.android.internal.view.IInputMethodClient getClient()
    {
        android.view.inputmethod.InputMethodManager r0;
        com.android.internal.view.IInputMethodClient$Stub $r1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        return $r1;
    }

    public android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()
    {
        android.view.inputmethod.InputMethodManager r0;
        com.android.internal.view.IInputMethodManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.view.inputmethod.InputMethodSubtype r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

     label1:
        $r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        r4 = interfaceinvoke $r1.<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.inputmethod.InputMethodManager$DelegateImpl getDelegate()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$DelegateImpl $r1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$DelegateImpl mDelegate>;

        return $r1;
    }

    public int getDisplayId()
    {
        android.view.inputmethod.InputMethodManager r0;
        int $i0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        $i0 = r0.<android.view.inputmethod.InputMethodManager: int mDisplayId>;

        return $i0;
    }

    public java.util.List getEnabledInputMethodList()
    {
        android.view.inputmethod.InputMethodManager r0;
        com.android.internal.view.IInputMethodManager $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

     label1:
        $r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r4 = interfaceinvoke $r1.<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodList(int)>($i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getEnabledInputMethodListAsUser(int)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0;
        com.android.internal.view.IInputMethodManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        r4 = interfaceinvoke $r1.<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodList(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo, boolean)
    {
        android.view.inputmethod.InputMethodManager r0;
        boolean z0;
        com.android.internal.view.IInputMethodManager r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.view.inputmethod.InputMethodInfo r4;
        java.lang.String r5;
        java.util.List r6;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r4 := @parameter0: android.view.inputmethod.InputMethodInfo;

        z0 := @parameter1: boolean;

     label1:
        r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

     label2:
        if r4 != null goto label3;

        r5 = null;

        goto label4;

     label3:
        r5 = virtualinvoke r4.<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>();

     label4:
        r6 = interfaceinvoke r1.<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)>(r5, z0);

     label5:
        return r6;

     label6:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public com.android.internal.view.IInputContext getInputContext()
    {
        android.view.inputmethod.InputMethodManager r0;
        com.android.internal.view.IInputContext $r1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputContext mIInputContext>;

        return $r1;
    }

    public java.util.List getInputMethodList()
    {
        android.view.inputmethod.InputMethodManager r0;
        com.android.internal.view.IInputMethodManager $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

     label1:
        $r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        $i0 = staticinvoke <android.os.UserHandle: int myUserId()>();

        r4 = interfaceinvoke $r1.<com.android.internal.view.IInputMethodManager: java.util.List getInputMethodList(int)>($i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.List getInputMethodListAsUser(int)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0;
        com.android.internal.view.IInputMethodManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        java.util.List r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        r4 = interfaceinvoke $r1.<com.android.internal.view.IInputMethodManager: java.util.List getInputMethodList(int)>(i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getInputMethodWindowVisibleHeight()
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0;
        com.android.internal.view.IInputMethodManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

     label1:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        i0 = interfaceinvoke $r2.<com.android.internal.view.IInputMethodManager: int getInputMethodWindowVisibleHeight()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()
    {
        android.view.inputmethod.InputMethodManager r0;
        com.android.internal.view.IInputMethodManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.view.inputmethod.InputMethodSubtype r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

     label1:
        $r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        r4 = interfaceinvoke $r1.<com.android.internal.view.IInputMethodManager: android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public java.util.Map getShortcutInputMethodsAndSubtypes()
    {
        android.view.inputmethod.InputMethodManager r0;
        java.util.List r1, $r8, $r11;
        int i0, i1, i2, i3;
        android.view.inputmethod.InputMethodInfo r2;
        android.view.inputmethod.InputMethodSubtype r3;
        android.view.inputmethod.'-$$Lambda$InputMethodManager$pvWYFFVbHzZCDCCTiZVM09Xls4w' $r4;
        java.util.Comparator $r5;
        java.util.Map $r6, $r12;
        java.lang.Object $r7;
        java.lang.String $r9, $r10;
        boolean $z0;
        java.util.function.ToIntFunction r13;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 = virtualinvoke r0.<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>();

        $r4 = <android.view.inputmethod._$$Lambda$InputMethodManager$pvWYFFVbHzZCDCCTiZVM09Xls4w: android.view.inputmethod.'-$$Lambda$InputMethodManager$pvWYFFVbHzZCDCCTiZVM09Xls4w' INSTANCE>;

        r13 = (java.util.function.ToIntFunction) $r4;

        $r5 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>(r13);

        interfaceinvoke r1.<java.util.List: void sort(java.util.Comparator)>($r5);

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label5;

        $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (android.view.inputmethod.InputMethodInfo) $r7;

        $r8 = virtualinvoke r0.<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)>(r2, 1);

        i1 = interfaceinvoke $r8.<java.util.List: int size()>();

        i3 = 0;

     label2:
        if i3 >= i1 goto label4;

        r3 = virtualinvoke r2.<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>(i3);

        $r9 = "voice";

        $r10 = virtualinvoke r3.<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>();

        $z0 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z0 == 0 goto label3;

        $r11 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r3);

        $r12 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r2, $r11);

        return $r12;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        i2 = i2 + 1;

        goto label1;

     label5:
        $r6 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>();

        return $r6;
    }

    public void hideSoftInputFromInputMethod(android.os.IBinder, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.os.IBinder r1;
        int i0;
        com.android.internal.inputmethod.InputMethodPrivilegedOperations $r2;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $r2 = staticinvoke <com.android.internal.inputmethod.InputMethodPrivilegedOperationsRegistry: com.android.internal.inputmethod.InputMethodPrivilegedOperations get(android.os.IBinder)>(r1);

        virtualinvoke $r2.<com.android.internal.inputmethod.InputMethodPrivilegedOperations: void hideMySoftInput(int)>(i0);

        return;
    }

    public boolean hideSoftInputFromWindow(android.os.IBinder, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.os.IBinder r1;
        int i0;
        boolean $z0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)>(r1, i0, null);

        return $z0;
    }

    public boolean hideSoftInputFromWindow(android.os.IBinder, int, android.os.ResultReceiver)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0;
        android.os.ResultReceiver r1;
        android.view.inputmethod.InputMethodManager$H r2;
        boolean z0;
        com.android.internal.view.IInputMethodClient$Stub $r3;
        com.android.internal.view.IInputMethodManager $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.Throwable $r7;
        android.os.IBinder r8, r10;
        android.view.View r9;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r8 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.ResultReceiver;

        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r2;

     label01:
        r9 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

     label02:
        if r9 == null goto label10;

     label03:
        r10 = virtualinvoke r9.<android.view.View: android.os.IBinder getWindowToken()>();

     label04:
        if r10 == r8 goto label05;

        goto label10;

     label05:
        $r4 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        $r3 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        z0 = interfaceinvoke $r4.<com.android.internal.view.IInputMethodManager: boolean hideSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>($r3, r8, i0, r1);

     label06:
        exitmonitor r2;

     label07:
        return z0;

     label08:
        $r5 := @caughtexception;

     label09:
        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label10:
        exitmonitor r2;

     label11:
        return 0;

     label12:
        $r7 := @caughtexception;

     label13:
        exitmonitor r2;

     label14:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label03 to label04 with label12;
        catch android.os.RemoteException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.lang.Throwable from label06 to label07 with label12;
        catch java.lang.Throwable from label09 to label10 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    public void hideStatusIcon(android.os.IBinder)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.os.IBinder r1;
        com.android.internal.inputmethod.InputMethodPrivilegedOperations $r2;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        $r2 = staticinvoke <com.android.internal.inputmethod.InputMethodPrivilegedOperationsRegistry: com.android.internal.inputmethod.InputMethodPrivilegedOperations get(android.os.IBinder)>(r1);

        virtualinvoke $r2.<com.android.internal.inputmethod.InputMethodPrivilegedOperations: void updateStatusIcon(java.lang.String,int)>(null, 0);

        return;
    }

    void invokeFinishedInputEventCallback(android.view.inputmethod.InputMethodManager$PendingEvent, boolean)
    {
        android.view.inputmethod.InputMethodManager r0;
        boolean z0, $z1;
        android.os.Handler $r1, $r3;
        android.os.Looper $r2;
        android.view.inputmethod.InputMethodManager$PendingEvent r4;
        android.os.Message r5;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r4 := @parameter0: android.view.inputmethod.InputMethodManager$PendingEvent;

        z0 := @parameter1: boolean;

        r4.<android.view.inputmethod.InputMethodManager$PendingEvent: boolean mHandled> = z0;

        $r1 = r4.<android.view.inputmethod.InputMethodManager$PendingEvent: android.os.Handler mHandler>;

        $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Looper getLooper()>();

        $z1 = virtualinvoke $r2.<android.os.Looper: boolean isCurrentThread()>();

        if $z1 == 0 goto label1;

        virtualinvoke r4.<android.view.inputmethod.InputMethodManager$PendingEvent: void run()>();

        goto label2;

     label1:
        $r3 = r4.<android.view.inputmethod.InputMethodManager$PendingEvent: android.os.Handler mHandler>;

        r5 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($r3, r4);

        virtualinvoke r5.<android.os.Message: void setAsynchronous(boolean)>(1);

        virtualinvoke r5.<android.os.Message: void sendToTarget()>();

     label2:
        return;
    }

    public boolean isAcceptingText()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper r1;
        android.view.inputmethod.InputConnection $r2;
        boolean z0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper mServedInputConnectionWrapper>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: android.view.inputmethod.InputConnection getInputConnection()>();

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isActive()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        android.view.View $r3;
        android.view.inputmethod.EditorInfo $r4;
        java.lang.Throwable $r5;
        boolean z0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label1:
        $r3 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

        if $r3 == null goto label3;

        $r4 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>;

        if $r4 == null goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z0;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean isActive(android.view.View)
    {
        android.view.inputmethod.InputMethodManager r0, r4;
        boolean $z0, $z1, z2;
        android.view.inputmethod.EditorInfo $r1;
        java.lang.Throwable $r2;
        android.view.View r3;
        android.view.inputmethod.InputMethodManager$H r5;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r3 := @parameter0: android.view.View;

        r4 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r3);

        if r4 == null goto label1;

        $z1 = virtualinvoke r4.<android.view.inputmethod.InputMethodManager: boolean isActive(android.view.View)>(r3);

        return $z1;

     label1:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r5 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r5;

     label2:
        $z0 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r3);

        if $z0 == 0 goto label4;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>;

        if $r1 == null goto label4;

     label3:
        z2 = 1;

        goto label5;

     label4:
        z2 = 0;

     label5:
        exitmonitor r5;

     label6:
        return z2;

     label7:
        $r2 := @caughtexception;

     label8:
        exitmonitor r5;

     label9:
        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isCursorAnchorInfoEnabled()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        int $i0, $i1, $i2, i3;
        java.lang.Throwable $r3;
        boolean z1, z2, z3;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label01:
        i3 = r0.<android.view.inputmethod.InputMethodManager: int mRequestUpdateCursorAnchorInfoMonitorMode>;

     label02:
        $i0 = i3 & 1;

        if $i0 == 0 goto label03;

        z1 = 1;

        goto label04;

     label03:
        z1 = 0;

     label04:
        $i1 = r0.<android.view.inputmethod.InputMethodManager: int mRequestUpdateCursorAnchorInfoMonitorMode>;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label06;

     label05:
        z2 = 1;

        goto label07;

     label06:
        z2 = 0;

     label07:
        z3 = 1;

        if z1 != 0 goto label09;

        if z2 == 0 goto label08;

        z3 = 1;

        goto label09;

     label08:
        z3 = 0;

     label09:
        exitmonitor r1;

     label10:
        return z3;

     label11:
        $r3 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean isFullscreenMode()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        boolean z0;
        java.lang.Throwable $r3;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label1:
        z0 = r0.<android.view.inputmethod.InputMethodManager: boolean mFullscreenMode>;

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean isInputMethodPickerShown()
    {
        android.view.inputmethod.InputMethodManager r0;
        boolean z0;
        com.android.internal.view.IInputMethodManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

     label1:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        z0 = interfaceinvoke $r2.<com.android.internal.view.IInputMethodManager: boolean isInputMethodPickerShownForTest()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isWatchingCursor(android.view.View)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.View r1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.view.View;

        return 0;
    }

    public void lambda$startInputInner$1$InputMethodManager(int)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0;
        android.view.inputmethod.InputMethodManager$DelegateImpl $r1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        i0 := @parameter0: int;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$DelegateImpl mDelegate>;

        virtualinvoke $r1.<android.view.inputmethod.InputMethodManager$DelegateImpl: boolean startInput(int,android.view.View,int,int,int)>(i0, null, 0, 0, 0);

        return;
    }

    public void notifyImeHidden(android.os.IBinder)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        com.android.internal.view.IInputMethodSession $r2, $r6;
        android.view.ViewRootImpl $r3, $r4;
        android.os.IBinder $r5, r9;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r9 := @parameter0: android.os.IBinder;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        if $r2 == null goto label2;

        $r3 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        if $r3 == null goto label2;

        $r4 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        $r5 = virtualinvoke $r4.<android.view.ViewRootImpl: android.os.IBinder getWindowToken()>();

        if $r5 != r9 goto label2;

        $r6 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        interfaceinvoke $r6.<com.android.internal.view.IInputMethodSession: void notifyImeHidden()>();

     label2:
        goto label5;

     label3:
        $r7 := @caughtexception;

        goto label7;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        exitmonitor r1;

     label8:
        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
        catch java.lang.Throwable from label7 to label8 with label3;
    }

    public void notifySuggestionPicked(android.text.style.SuggestionSpan, java.lang.String, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.text.style.SuggestionSpan r1;
        java.lang.String r2;
        int i0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.text.style.SuggestionSpan;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", "notifySuggestionPicked() is deprecated.  Does nothing.");

        return;
    }

    public void notifyUserAction()
    {
        android.view.inputmethod.InputMethodManager r0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", "notifyUserAction() is a hidden method, which is now just a stub method that does nothing.  Leave comments in b.android.com/114740982 if your  application still depends on the previous behavior of this method.");

        return;
    }

    public void registerImeConsumer(android.view.ImeInsetsSourceConsumer)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        java.lang.IllegalStateException $r2;
        java.lang.Throwable $r3;
        android.view.ImeInsetsSourceConsumer r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r4 := @parameter0: android.view.ImeInsetsSourceConsumer;

        if r4 == null goto label6;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label1:
        r0.<android.view.inputmethod.InputMethodManager: android.view.ImeInsetsSourceConsumer mImeInsetsConsumer> = r4;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

     label6:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ImeInsetsSourceConsumer cannot be null.");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void registerSuggestionSpansForNotification(android.text.style.SuggestionSpan[])
    {
        android.view.inputmethod.InputMethodManager r0;
        android.text.style.SuggestionSpan[] r1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.text.style.SuggestionSpan[];

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", "registerSuggestionSpansForNotification() is deprecated.  Does nothing.");

        return;
    }

    public void removeImeSurface(android.os.IBinder)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        com.android.internal.view.IInputMethodManager $r2;
        java.lang.Throwable $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.os.IBinder r6;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r6 := @parameter0: android.os.IBinder;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label1:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        interfaceinvoke $r2.<com.android.internal.view.IInputMethodManager: void removeImeSurfaceFromWindow(android.os.IBinder)>(r6);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

        goto label7;

     label5:
        $r4 := @caughtexception;

     label6:
        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

     label7:
        exitmonitor r1;

     label8:
        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
        catch java.lang.Throwable from label7 to label8 with label4;
    }

    public void reportActivityView(int, android.graphics.Matrix)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0;
        float[] r1, r7;
        com.android.internal.view.IInputMethodClient$Stub $r2;
        com.android.internal.view.IInputMethodManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        android.graphics.Matrix r6;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        i0 := @parameter0: int;

        r6 := @parameter1: android.graphics.Matrix;

        if r6 != null goto label1;

        r7 = null;

        goto label3;

     label1:
        r1 = newarray (float)[9];

        virtualinvoke r6.<android.graphics.Matrix: void getValues(float[])>(r1);

     label2:
        r7 = r1;

     label3:
        $r3 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        interfaceinvoke $r3.<com.android.internal.view.IInputMethodManager: void reportActivityView(com.android.internal.view.IInputMethodClient,int,float[])>($r2, i0, r7);

     label4:
        return;

     label5:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void reportPerceptible(android.os.IBinder, boolean)
    {
        android.view.inputmethod.InputMethodManager r0;
        boolean z0;
        com.android.internal.view.IInputMethodManager $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.os.IBinder r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r4 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

     label1:
        $r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        interfaceinvoke $r1.<com.android.internal.view.IInputMethodManager: void reportPerceptible(android.os.IBinder,boolean)>(r4, z0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean requestImeShow(android.os.IBinder)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        android.view.View r2;
        android.os.IBinder $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r5 := @parameter0: android.os.IBinder;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

     label02:
        if r2 == null goto label07;

     label03:
        $r3 = virtualinvoke r2.<android.view.View: android.os.IBinder getWindowToken()>();

        if $r3 == r5 goto label05;

     label04:
        goto label07;

     label05:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>(r2, 0, null);

        exitmonitor r1;

     label06:
        return 1;

     label07:
        exitmonitor r1;

     label08:
        return 0;

     label09:
        $r4 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void restartInput(android.view.View)
    {
        android.view.inputmethod.InputMethodManager r0, r3;
        boolean $z0;
        java.lang.Throwable $r1;
        android.view.View r2;
        android.view.inputmethod.InputMethodManager$H r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r2 := @parameter0: android.view.View;

        r3 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r2);

        if r3 == null goto label1;

        virtualinvoke r3.<android.view.inputmethod.InputMethodManager: void restartInput(android.view.View)>(r2);

        return;

     label1:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r4 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r4;

     label2:
        $z0 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r2);

        if $z0 != 0 goto label4;

        exitmonitor r4;

     label3:
        return;

     label4:
        r0.<android.view.inputmethod.InputMethodManager: boolean mServedConnecting> = 1;

        exitmonitor r4;

     label5:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: boolean startInputInner(int,android.os.IBinder,int,int,int)>(4, null, 0, 0, 0);

        return;

     label6:
        $r1 := @caughtexception;

     label7:
        exitmonitor r4;

     label8:
        throw $r1;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void sendAppPrivateCommand(android.view.View, java.lang.String, android.os.Bundle)
    {
        android.view.inputmethod.InputMethodManager r0, r12;
        android.os.Bundle r1;
        boolean $z0;
        android.view.inputmethod.EditorInfo $r2;
        com.android.internal.view.IInputMethodSession $r3, r14;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        java.lang.String $r7, $r9, r11;
        android.view.View r10;
        android.view.inputmethod.InputMethodManager$H r13;
        java.lang.StringBuilder r16;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r10 := @parameter0: android.view.View;

        r11 := @parameter1: java.lang.String;

        r1 := @parameter2: android.os.Bundle;

        r12 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r10);

        if r12 == null goto label01;

        virtualinvoke r12.<android.view.inputmethod.InputMethodManager: void sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)>(r10, r11, r1);

        return;

     label01:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r13 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r13;

     label02:
        $z0 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r10);

        if $z0 == 0 goto label10;

        $r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>;

        if $r2 == null goto label10;

        r14 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

     label03:
        if r14 != null goto label04;

        goto label10;

     label04:
        $r3 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        interfaceinvoke $r3.<com.android.internal.view.IInputMethodSession: void appPrivateCommand(java.lang.String,android.os.Bundle)>(r11, r1);

     label05:
        goto label08;

     label06:
        $r5 := @caughtexception;

     label07:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IME died: ");

        $r7 = r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId>;

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputMethodManager", $r9, $r5);

     label08:
        exitmonitor r13;

     label09:
        return;

     label10:
        exitmonitor r13;

     label11:
        return;

     label12:
        $r4 := @caughtexception;

     label13:
        exitmonitor r13;

     label14:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label12;
        catch android.os.RemoteException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label12;
        catch java.lang.Throwable from label08 to label09 with label12;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label13 to label14 with label12;
    }

    void sendInputEventAndReportResultOnMainLooper(android.view.inputmethod.InputMethodManager$PendingEvent)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        int i0;
        java.lang.Throwable $r2;
        android.view.inputmethod.InputMethodManager$PendingEvent r3;
        boolean z0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r3 := @parameter0: android.view.inputmethod.InputMethodManager$PendingEvent;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label01:
        i0 = virtualinvoke r0.<android.view.inputmethod.InputMethodManager: int sendInputEventOnMainLooperLocked(android.view.inputmethod.InputMethodManager$PendingEvent)>(r3);

     label02:
        if i0 != -1 goto label05;

     label03:
        exitmonitor r1;

     label04:
        return;

     label05:
        z0 = 1;

        if i0 != 1 goto label06;

        goto label07;

     label06:
        z0 = 0;

     label07:
        exitmonitor r1;

     label08:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void invokeFinishedInputEventCallback(android.view.inputmethod.InputMethodManager$PendingEvent,boolean)>(r3, z0);

        return;

     label09:
        $r2 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label09;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    int sendInputEventOnMainLooperLocked(android.view.inputmethod.InputMethodManager$PendingEvent)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0, $i2;
        android.view.inputmethod.InputMethodManager$ImeInputEventSender $r1, $r2, $r14;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r9;
        android.util.SparseArray $r10, $r11;
        android.view.inputmethod.InputMethodManager$H $r12, $r13, $r15;
        android.os.Looper $r16;
        android.view.inputmethod.InputMethodManager$PendingEvent r17;
        android.view.InputChannel r18;
        android.view.InputEvent r19;
        android.os.Message r20;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r17 := @parameter0: android.view.inputmethod.InputMethodManager$PendingEvent;

        r18 = r0.<android.view.inputmethod.InputMethodManager: android.view.InputChannel mCurChannel>;

        if r18 == null goto label3;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ImeInputEventSender mCurSender>;

        if $r1 != null goto label1;

        $r14 = new android.view.inputmethod.InputMethodManager$ImeInputEventSender;

        $r15 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        $r16 = virtualinvoke $r15.<android.view.inputmethod.InputMethodManager$H: android.os.Looper getLooper()>();

        specialinvoke $r14.<android.view.inputmethod.InputMethodManager$ImeInputEventSender: void <init>(android.view.inputmethod.InputMethodManager,android.view.InputChannel,android.os.Looper)>(r0, r18, $r16);

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ImeInputEventSender mCurSender> = $r14;

     label1:
        r19 = r17.<android.view.inputmethod.InputMethodManager$PendingEvent: android.view.InputEvent mEvent>;

        i0 = virtualinvoke r19.<android.view.InputEvent: int getSequenceNumber()>();

        $r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ImeInputEventSender mCurSender>;

        $z0 = virtualinvoke $r2.<android.view.inputmethod.InputMethodManager$ImeInputEventSender: boolean sendInputEvent(int,android.view.InputEvent)>(i0, r19);

        if $z0 == 0 goto label2;

        $r10 = r0.<android.view.inputmethod.InputMethodManager: android.util.SparseArray mPendingEvents>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r17);

        $r11 = r0.<android.view.inputmethod.InputMethodManager: android.util.SparseArray mPendingEvents>;

        $i2 = virtualinvoke $r11.<android.util.SparseArray: int size()>();

        staticinvoke <android.os.Trace: void traceCounter(long,java.lang.String,int)>(4L, "aq:imm", $i2);

        $r12 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        r20 = virtualinvoke $r12.<android.view.inputmethod.InputMethodManager$H: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(6, i0, 0, r17);

        virtualinvoke r20.<android.os.Message: void setAsynchronous(boolean)>(1);

        $r13 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        virtualinvoke $r13.<android.view.inputmethod.InputMethodManager$H: boolean sendMessageDelayed(android.os.Message,long)>(r20, 2500L);

        return -1;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to send input event to IME: ");

        $r5 = r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" dropping: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", $r9);

     label3:
        return 0;
    }

    public void setAdditionalInputMethodSubtypes(java.lang.String, android.view.inputmethod.InputMethodSubtype[])
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodSubtype[] r1;
        com.android.internal.view.IInputMethodManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r5 := @parameter0: java.lang.String;

        r1 := @parameter1: android.view.inputmethod.InputMethodSubtype[];

     label1:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        interfaceinvoke $r2.<com.android.internal.view.IInputMethodManager: void setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])>(r5, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)
    {
        android.view.inputmethod.InputMethodManager r0;
        java.util.List r1;
        int i0, $i1, $i2, $i3, i5;
        android.content.ComponentName $r2;
        com.android.internal.view.IInputMethodManager $r3;
        java.lang.Object $r4;
        boolean $z0;
        android.os.RemoteException $r5;
        android.view.inputmethod.InputMethodSubtype r6, r10;
        android.app.Application r7;
        android.content.ContentResolver r8;
        java.lang.String r9;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r6 := @parameter0: android.view.inputmethod.InputMethodSubtype;

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i1 != 1000 goto label01;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", "System process should not call setCurrentInputMethodSubtype() because almost always it is a bug under multi-user / multi-profile environment. Consider directly interacting with InputMethodManagerService via LocalServices.");

        return 0;

     label01:
        if r6 != null goto label02;

        return 0;

     label02:
        r7 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        if r7 != null goto label03;

        return 0;

     label03:
        $i2 = virtualinvoke r7.<android.content.Context: int checkSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i2 == 0 goto label04;

        return 0;

     label04:
        r8 = virtualinvoke r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r9 = staticinvoke <android.provider.Settings$Secure: java.lang.String getString(android.content.ContentResolver,java.lang.String)>(r8, "default_input_method");

        $r2 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r9);

        if $r2 != null goto label05;

        return 0;

     label05:
        $r3 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        r1 = interfaceinvoke $r3.<com.android.internal.view.IInputMethodManager: java.util.List getEnabledInputMethodSubtypeList(java.lang.String,boolean)>(r9, 1);

     label06:
        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i5 = 0;

     label07:
        if i5 >= i0 goto label09;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i5);

        r10 = (android.view.inputmethod.InputMethodSubtype) $r4;

        $z0 = virtualinvoke r10.<android.view.inputmethod.InputMethodSubtype: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label08;

        $i3 = virtualinvoke r10.<android.view.inputmethod.InputMethodSubtype: int hashCode()>();

        staticinvoke <android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r8, "selected_input_method_subtype", $i3);

        return 1;

     label08:
        i5 = i5 + 1;

        goto label07;

     label09:
        return 0;

     label10:
        $r5 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label05 to label06 with label10;
    }

    void setInputChannelLocked(android.view.InputChannel)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.InputChannel r1, r2, $r3;
        android.view.inputmethod.InputMethodManager$ImeInputEventSender $r4, $r5;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.view.InputChannel;

        $r3 = r0.<android.view.inputmethod.InputMethodManager: android.view.InputChannel mCurChannel>;

        if $r3 == r1 goto label3;

        $r4 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ImeInputEventSender mCurSender>;

        if $r4 == null goto label1;

        specialinvoke r0.<android.view.inputmethod.InputMethodManager: void flushPendingEventsLocked()>();

        $r5 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ImeInputEventSender mCurSender>;

        virtualinvoke $r5.<android.view.inputmethod.InputMethodManager$ImeInputEventSender: void dispose()>();

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ImeInputEventSender mCurSender> = null;

     label1:
        r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.InputChannel mCurChannel>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.view.InputChannel: void dispose()>();

     label2:
        r0.<android.view.inputmethod.InputMethodManager: android.view.InputChannel mCurChannel> = r1;

     label3:
        return;
    }

    public void setInputMethod(android.os.IBinder, java.lang.String)
    {
        android.view.inputmethod.InputMethodManager r0;
        java.lang.String r1, $r8, $r11;
        android.app.Application r2;
        int i0, $i1, $i2, i6;
        com.android.internal.inputmethod.InputMethodPrivilegedOperations $r3;
        java.lang.StringBuilder $r4;
        java.lang.Object $r9;
        android.view.inputmethod.InputMethodInfo $r10;
        boolean $z3, z4;
        android.os.IBinder r12;
        java.util.List r13;
        android.content.ContentResolver r15;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r12 := @parameter0: android.os.IBinder;

        r1 := @parameter1: java.lang.String;

        if r12 != null goto label9;

        if r1 != null goto label1;

        return;

     label1:
        $i1 = staticinvoke <android.os.Process: int myUid()>();

        if $i1 != 1000 goto label2;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", "System process should not be calling setInputMethod() because almost always it is a bug under multi-user / multi-profile environment. Consider interacting with InputMethodManagerService directly via LocalServices.");

        return;

     label2:
        r2 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        if r2 != null goto label3;

        return;

     label3:
        $i2 = virtualinvoke r2.<android.content.Context: int checkSelfPermission(java.lang.String)>("android.permission.WRITE_SECURE_SETTINGS");

        if $i2 == 0 goto label4;

        return;

     label4:
        r13 = virtualinvoke r0.<android.view.inputmethod.InputMethodManager: java.util.List getEnabledInputMethodList()>();

        i0 = interfaceinvoke r13.<java.util.List: int size()>();

        i6 = 0;

     label5:
        z4 = 0;

        if i6 >= i0 goto label7;

        $r9 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>(i6);

        $r10 = (android.view.inputmethod.InputMethodInfo) $r9;

        $r11 = virtualinvoke $r10.<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>();

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r11);

        if $z3 == 0 goto label6;

        z4 = 1;

        goto label7;

     label6:
        i6 = i6 + 1;

        goto label5;

     label7:
        if z4 != 0 goto label8;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring setInputMethod(null, ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") because the specified id not found in enabled IMEs.");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("InputMethodManager", $r8);

        return;

     label8:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", "The undocumented behavior that setInputMethod() accepts null token when the caller has WRITE_SECURE_SETTINGS is deprecated. This behavior may be completely removed in a future version.  Update secure settings directly instead.");

        r15 = virtualinvoke r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Secure: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r15, "selected_input_method_subtype", -1);

        staticinvoke <android.provider.Settings$Secure: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>(r15, "default_input_method", r1);

        return;

     label9:
        $r3 = staticinvoke <com.android.internal.inputmethod.InputMethodPrivilegedOperationsRegistry: com.android.internal.inputmethod.InputMethodPrivilegedOperations get(android.os.IBinder)>(r12);

        virtualinvoke $r3.<com.android.internal.inputmethod.InputMethodPrivilegedOperations: void setInputMethod(java.lang.String)>(r1);

        return;
    }

    public void setInputMethodAndSubtype(android.os.IBinder, java.lang.String, android.view.inputmethod.InputMethodSubtype)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.os.IBinder r1;
        java.lang.String r2;
        android.view.inputmethod.InputMethodSubtype r3;
        com.android.internal.inputmethod.InputMethodPrivilegedOperations $r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.view.inputmethod.InputMethodSubtype;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("InputMethodManager", "setInputMethodAndSubtype() does not accept null token on Android Q and later.");

        return;

     label1:
        $r4 = staticinvoke <com.android.internal.inputmethod.InputMethodPrivilegedOperationsRegistry: com.android.internal.inputmethod.InputMethodPrivilegedOperations get(android.os.IBinder)>(r1);

        virtualinvoke $r4.<com.android.internal.inputmethod.InputMethodPrivilegedOperations: void setInputMethodAndSubtype(java.lang.String,android.view.inputmethod.InputMethodSubtype)>(r2, r3);

        return;
    }

    public void setUpdateCursorAnchorInfoMode(int)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0;
        android.view.inputmethod.InputMethodManager$H r1;
        java.lang.Throwable $r3;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        i0 := @parameter0: int;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label1:
        r0.<android.view.inputmethod.InputMethodManager: int mRequestUpdateCursorAnchorInfoMonitorMode> = i0;

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean shouldOfferSwitchingToNextInputMethod(android.os.IBinder)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.os.IBinder r1;
        com.android.internal.inputmethod.InputMethodPrivilegedOperations $r2;
        boolean $z0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        $r2 = staticinvoke <com.android.internal.inputmethod.InputMethodPrivilegedOperationsRegistry: com.android.internal.inputmethod.InputMethodPrivilegedOperations get(android.os.IBinder)>(r1);

        $z0 = virtualinvoke $r2.<com.android.internal.inputmethod.InputMethodPrivilegedOperations: boolean shouldOfferSwitchingToNextInputMethod()>();

        return $z0;
    }

    public void showInputMethodAndSubtypeEnabler(java.lang.String)
    {
        android.view.inputmethod.InputMethodManager r0;
        com.android.internal.view.IInputMethodClient$Stub $r1;
        com.android.internal.view.IInputMethodManager $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        java.lang.String r5;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r5 := @parameter0: java.lang.String;

     label1:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        interfaceinvoke $r2.<com.android.internal.view.IInputMethodManager: void showInputMethodAndSubtypeEnablerFromClient(com.android.internal.view.IInputMethodClient,java.lang.String)>($r1, r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void showInputMethodPicker()
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        java.lang.Throwable $r3;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label1:
        specialinvoke r0.<android.view.inputmethod.InputMethodManager: void showInputMethodPickerLocked()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void showInputMethodPickerFromSystem(boolean, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        boolean z0;
        int i0;
        com.android.internal.view.IInputMethodClient$Stub $r2;
        com.android.internal.view.IInputMethodManager $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;
        byte b1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        if z0 == 0 goto label1;

        b1 = 1;

        goto label2;

     label1:
        b1 = 2;

     label2:
        $r3 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        interfaceinvoke $r3.<com.android.internal.view.IInputMethodManager: void showInputMethodPickerFromSystem(com.android.internal.view.IInputMethodClient,int,int)>($r2, b1, i0);

     label3:
        return;

     label4:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public boolean showSoftInput(android.view.View, int)
    {
        android.view.inputmethod.InputMethodManager r0, r2;
        android.view.View r1;
        int i0;
        boolean $z0, $z1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r1);

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int)>(r1, i0);

        return $z1;

     label1:
        $z0 = virtualinvoke r0.<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>(r1, i0, null);

        return $z0;
    }

    public boolean showSoftInput(android.view.View, int, android.os.ResultReceiver)
    {
        android.view.inputmethod.InputMethodManager r0, r9;
        int i0;
        android.os.ResultReceiver r1;
        boolean z0, $z1, $z2;
        com.android.internal.view.IInputMethodManager $r2;
        com.android.internal.view.IInputMethodClient$Stub $r3;
        android.os.IBinder $r4;
        android.os.RemoteException $r5;
        java.lang.RuntimeException $r6;
        java.lang.Throwable $r7;
        android.view.View r8;
        android.view.inputmethod.InputMethodManager$H r10;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r8 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.ResultReceiver;

        r9 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r8);

        if r9 == null goto label01;

        $z2 = virtualinvoke r9.<android.view.inputmethod.InputMethodManager: boolean showSoftInput(android.view.View,int,android.os.ResultReceiver)>(r8, i0, r1);

        return $z2;

     label01:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r10 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r10;

     label02:
        $z1 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r8);

        if $z1 != 0 goto label04;

        exitmonitor r10;

     label03:
        return 0;

     label04:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        $r3 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        $r4 = virtualinvoke r8.<android.view.View: android.os.IBinder getWindowToken()>();

        z0 = interfaceinvoke $r2.<com.android.internal.view.IInputMethodManager: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>($r3, $r4, i0, r1);

     label05:
        exitmonitor r10;

     label06:
        return z0;

     label07:
        $r5 := @caughtexception;

     label08:
        $r6 = virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r6;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r10;

     label11:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch android.os.RemoteException from label04 to label05 with label07;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label08 to label09 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void showSoftInputFromInputMethod(android.os.IBinder, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.os.IBinder r1;
        int i0;
        com.android.internal.inputmethod.InputMethodPrivilegedOperations $r2;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        $r2 = staticinvoke <com.android.internal.inputmethod.InputMethodPrivilegedOperationsRegistry: com.android.internal.inputmethod.InputMethodPrivilegedOperations get(android.os.IBinder)>(r1);

        virtualinvoke $r2.<com.android.internal.inputmethod.InputMethodPrivilegedOperations: void showMySoftInput(int)>(i0);

        return;
    }

    public void showSoftInputUnchecked(int, android.os.ResultReceiver)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0;
        android.view.inputmethod.InputMethodManager$H r1;
        android.view.ViewRootImpl $r2, $r3, $r5;
        android.view.View $r4, $r8;
        com.android.internal.view.IInputMethodManager $r6;
        com.android.internal.view.IInputMethodClient$Stub $r7;
        android.os.IBinder $r9;
        android.os.RemoteException $r10;
        java.lang.RuntimeException $r11;
        java.lang.Throwable $r12;
        android.os.ResultReceiver r13;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        i0 := @parameter0: int;

        r13 := @parameter1: android.os.ResultReceiver;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label01:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", "showSoftInputUnchecked() is a hidden method, which will be removed soon. If you are using android.support.v7.widget.SearchView, please update to version 26.0 or newer version.");

        $r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        if $r2 == null goto label06;

        $r3 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        $r4 = virtualinvoke $r3.<android.view.ViewRootImpl: android.view.View getView()>();

        if $r4 != null goto label03;

     label02:
        goto label06;

     label03:
        $r6 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        $r7 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        $r5 = r0.<android.view.inputmethod.InputMethodManager: android.view.ViewRootImpl mCurRootView>;

        $r8 = virtualinvoke $r5.<android.view.ViewRootImpl: android.view.View getView()>();

        $r9 = virtualinvoke $r8.<android.view.View: android.os.IBinder getWindowToken()>();

        interfaceinvoke $r6.<com.android.internal.view.IInputMethodManager: boolean showSoftInput(com.android.internal.view.IInputMethodClient,android.os.IBinder,int,android.os.ResultReceiver)>($r7, $r9, i0, r13);

     label04:
        exitmonitor r1;

     label05:
        return;

     label06:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("InputMethodManager", "No current root view, ignoring showSoftInputUnchecked()");

     label07:
        exitmonitor r1;

     label08:
        return;

     label09:
        $r12 := @caughtexception;

        goto label12;

     label10:
        $r10 := @caughtexception;

     label11:
        $r11 = virtualinvoke $r10.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r11;

     label12:
        exitmonitor r1;

     label13:
        throw $r12;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch java.lang.Throwable from label01 to label02 with label09;
        catch android.os.RemoteException from label03 to label04 with label10;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch android.os.RemoteException from label06 to label07 with label10;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label11 to label12 with label09;
        catch java.lang.Throwable from label12 to label13 with label09;
    }

    public void showStatusIcon(android.os.IBinder, java.lang.String, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.os.IBinder r1;
        java.lang.String r2;
        int i0;
        com.android.internal.inputmethod.InputMethodPrivilegedOperations $r3;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = staticinvoke <com.android.internal.inputmethod.InputMethodPrivilegedOperationsRegistry: com.android.internal.inputmethod.InputMethodPrivilegedOperations get(android.os.IBinder)>(r1);

        virtualinvoke $r3.<com.android.internal.inputmethod.InputMethodPrivilegedOperations: void updateStatusIcon(java.lang.String,int)>(r2, i0);

        return;
    }

    boolean startInputInner(int, android.os.IBinder, int, int, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0, i1, $i2, $i3, $i5, $i6, $i7, i10, i11, i12, i13, i14, i16, i17, $i18;
        android.os.Looper $r2, $r3, r63;
        android.view.inputmethod.EditorInfo $r4, $r9;
        android.content.Context $r5, $r10;
        java.lang.String $r6, $r13, $r23, $r25, $r30, $r32, $r46, $r48;
        android.view.autofill.AutofillId $r7;
        android.view.View $r8, r54;
        boolean $z0;
        android.content.pm.ApplicationInfo $r11;
        android.graphics.Matrix $r12;
        android.view.InputChannel $r14, $r18, $r19, $r20, $r21;
        com.android.internal.view.IInputMethodSession $r15, $r17, $r22;
        android.view.inputmethod.CompletionInfo[] $r16, r70;
        android.graphics.Rect $r33;
        android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper $r34, r59, r62;
        android.view.inputmethod._$$Lambda$InputMethodManager$dfnCauFoZCf_HfXs1QavrkwWDf0 $r35;
        android.view.ViewRootImpl $r36, $r38;
        android.view.WindowManager$LayoutParams $r37, $r39;
        android.os.RemoteException $r40, $r44, $r51, r72;
        java.lang.Throwable $r41, $r42, $r43, $r49, $r50, r60, r75;
        android.os.IBinder r52, r55;
        android.view.inputmethod.InputMethodManager$H r53, r58, r66, r67;
        android.os.Handler r56, r61;
        android.view.inputmethod.InputConnection r57;
        com.android.internal.view.IInputMethodManager r64;
        com.android.internal.view.IInputMethodClient$Stub r65;
        com.android.internal.view.InputBindResult r68;
        java.lang.StringBuilder r69, r74;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        i0 := @parameter0: int;

        r52 := @parameter1: android.os.IBinder;

        i10 := @parameter2: int;

        i11 := @parameter3: int;

        i12 := @parameter4: int;

        r53 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r53;

     label001:
        r54 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

     label002:
        if r54 != null goto label005;

     label003:
        exitmonitor r53;

     label004:
        return 0;

     label005:
        exitmonitor r53;

     label006:
        if r52 != null goto label008;

        r55 = virtualinvoke r54.<android.view.View: android.os.IBinder getWindowToken()>();

        if r55 != null goto label007;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("InputMethodManager", "ABORT input: ServedView must be attached to a Window");

        return 0;

     label007:
        i10 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: int getStartInputFlags(android.view.View,int)>(r54, i10);

        $r36 = virtualinvoke r54.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        $r37 = $r36.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i13 = $r37.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $r38 = virtualinvoke r54.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        $r39 = $r38.<android.view.ViewRootImpl: android.view.WindowManager$LayoutParams mWindowAttributes>;

        i14 = $r39.<android.view.WindowManager$LayoutParams: int flags>;

        goto label009;

     label008:
        i14 = i12;

        i13 = i11;

        r55 = r52;

     label009:
        r56 = virtualinvoke r54.<android.view.View: android.os.Handler getHandler()>();

        if r56 != null goto label010;

        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void closeCurrentInput()>();

        return 0;

     label010:
        $r2 = virtualinvoke r56.<android.os.Handler: android.os.Looper getLooper()>();

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r2 == $r3 goto label011;

        $r35 = new android.view.inputmethod._$$Lambda$InputMethodManager$dfnCauFoZCf_HfXs1QavrkwWDf0;

        specialinvoke $r35.<android.view.inputmethod._$$Lambda$InputMethodManager$dfnCauFoZCf_HfXs1QavrkwWDf0: void <init>(android.view.inputmethod.InputMethodManager,int)>(r0, i0);

        virtualinvoke r56.<android.os.Handler: boolean post(java.lang.Runnable)>($r35);

        return 0;

     label011:
        $r4 = new android.view.inputmethod.EditorInfo;

        specialinvoke $r4.<android.view.inputmethod.EditorInfo: void <init>()>();

        $r5 = virtualinvoke r54.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getOpPackageName()>();

        $r4.<android.view.inputmethod.EditorInfo: java.lang.String packageName> = $r6;

        $r7 = virtualinvoke r54.<android.view.View: android.view.autofill.AutofillId getAutofillId()>();

        $r4.<android.view.inputmethod.EditorInfo: android.view.autofill.AutofillId autofillId> = $r7;

        $i2 = virtualinvoke r54.<android.view.View: int getId()>();

        $r4.<android.view.inputmethod.EditorInfo: int fieldId> = $i2;

        r57 = virtualinvoke r54.<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>($r4);

        r58 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r58;

     label012:
        $r8 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

        if $r8 != r54 goto label107;

        $z0 = r0.<android.view.inputmethod.InputMethodManager: boolean mServedConnecting>;

        if $z0 != 0 goto label014;

     label013:
        goto label107;

     label014:
        i16 = i10;

     label015:
        $r9 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>;

        if $r9 != null goto label017;

     label016:
        i16 = i10 | 4;

     label017:
        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute> = $r4;

        specialinvoke r0.<android.view.inputmethod.InputMethodManager: void maybeCallServedViewChangedLocked(android.view.inputmethod.EditorInfo)>($r4);

        r0.<android.view.inputmethod.InputMethodManager: boolean mServedConnecting> = 0;

        r59 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper mServedInputConnectionWrapper>;

     label018:
        if r59 == null goto label022;

     label019:
        $r34 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper mServedInputConnectionWrapper>;

        virtualinvoke $r34.<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: void deactivate()>();

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper mServedInputConnectionWrapper> = null;

     label020:
        goto label022;

     label021:
        $r50 := @caughtexception;

        r60 = $r50;

        goto label111;

     label022:
        if r57 == null goto label033;

     label023:
        $i5 = $r4.<android.view.inputmethod.EditorInfo: int initialSelStart>;

        r0.<android.view.inputmethod.InputMethodManager: int mCursorSelStart> = $i5;

        $i6 = $r4.<android.view.inputmethod.EditorInfo: int initialSelEnd>;

        r0.<android.view.inputmethod.InputMethodManager: int mCursorSelEnd> = $i6;

        r0.<android.view.inputmethod.InputMethodManager: int mCursorCandStart> = -1;

        r0.<android.view.inputmethod.InputMethodManager: int mCursorCandEnd> = -1;

        $r33 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Rect mCursorRect>;

        virtualinvoke $r33.<android.graphics.Rect: void setEmpty()>();

        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.CursorAnchorInfo mCursorAnchorInfo> = null;

        i17 = staticinvoke <android.view.inputmethod.InputConnectionInspector: int getMissingMethodFlags(android.view.inputmethod.InputConnection)>(r57);

     label024:
        $i7 = i17 & 32;

        if $i7 == 0 goto label025;

        r61 = null;

        goto label026;

     label025:
        r61 = interfaceinvoke r57.<android.view.inputmethod.InputConnection: android.os.Handler getHandler()>();

     label026:
        r62 = new android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper;

     label027:
        if r61 == null goto label030;

     label028:
        r63 = virtualinvoke r61.<android.os.Handler: android.os.Looper getLooper()>();

     label029:
        goto label031;

     label030:
        r63 = virtualinvoke r56.<android.os.Handler: android.os.Looper getLooper()>();

     label031:
        specialinvoke r62.<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: void <init>(android.os.Looper,android.view.inputmethod.InputConnection,android.view.inputmethod.InputMethodManager,android.view.View)>(r63, r57, r0, r54);

     label032:
        goto label034;

     label033:
        i17 = 0;

        r62 = null;

     label034:
        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper mServedInputConnectionWrapper> = r62;

     label035:
        r64 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodManager mService>;

        r65 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient$Stub mClient>;

        $r10 = virtualinvoke r54.<android.view.View: android.content.Context getContext()>();

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i1 = $r11.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label036:
        r66 = r58;

        r67 = r58;

     label037:
        r68 = interfaceinvoke r64.<com.android.internal.view.IInputMethodManager: com.android.internal.view.InputBindResult startInputOrWindowGainedFocus(int,com.android.internal.view.IInputMethodClient,android.os.IBinder,int,int,int,android.view.inputmethod.EditorInfo,com.android.internal.view.IInputContext,int,int)>(i0, r65, r55, i16, i13, i14, $r4, r62, i17, i1);

     label038:
        if r68 != null goto label059;

        r67 = r58;

     label039:
        r69 = new java.lang.StringBuilder;

     label040:
        r67 = r58;

     label041:
        specialinvoke r69.<java.lang.StringBuilder: void <init>()>();

     label042:
        r67 = r58;

     label043:
        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startInputOrWindowGainedFocus must not return null. startInputReason=");

     label044:
        r67 = r58;

     label045:
        $r25 = staticinvoke <com.android.internal.inputmethod.InputMethodDebug: java.lang.String startInputReasonToString(int)>(i0);

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

     label046:
        r67 = r58;

     label047:
        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" editorInfo=");

     label048:
        r67 = r58;

     label049:
        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

     label050:
        r67 = r58;

     label051:
        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" startInputFlags=");

     label052:
        r67 = r58;

     label053:
        $r30 = staticinvoke <com.android.internal.inputmethod.InputMethodDebug: java.lang.String startInputFlagsToString(int)>(i16);

        virtualinvoke r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

     label054:
        r67 = r58;

     label055:
        $r32 = virtualinvoke r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("InputMethodManager", $r32);

     label056:
        r67 = r58;

     label057:
        exitmonitor r58;

     label058:
        return 0;

     label059:
        r67 = r58;

     label060:
        $r12 = virtualinvoke r68.<com.android.internal.view.InputBindResult: android.graphics.Matrix getActivityViewToScreenMatrix()>();

        r0.<android.view.inputmethod.InputMethodManager: android.graphics.Matrix mActivityViewToScreenMatrix> = $r12;

     label061:
        r67 = r58;

     label062:
        $r13 = r68.<com.android.internal.view.InputBindResult: java.lang.String id>;

        if $r13 == null goto label072;

     label063:
        r67 = r58;

     label064:
        $r21 = r68.<com.android.internal.view.InputBindResult: android.view.InputChannel channel>;

        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void setInputChannelLocked(android.view.InputChannel)>($r21);

     label065:
        r67 = r58;

     label066:
        $i3 = r68.<com.android.internal.view.InputBindResult: int sequence>;

        r0.<android.view.inputmethod.InputMethodManager: int mBindSequence> = $i3;

     label067:
        r67 = r58;

     label068:
        $r22 = r68.<com.android.internal.view.InputBindResult: com.android.internal.view.IInputMethodSession method>;

        r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod> = $r22;

     label069:
        r67 = r58;

     label070:
        $r23 = r68.<com.android.internal.view.InputBindResult: java.lang.String id>;

        r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId> = $r23;

     label071:
        goto label078;

     label072:
        r67 = r58;

     label073:
        $r14 = r68.<com.android.internal.view.InputBindResult: android.view.InputChannel channel>;

        if $r14 == null goto label078;

     label074:
        r67 = r58;

     label075:
        $r19 = r68.<com.android.internal.view.InputBindResult: android.view.InputChannel channel>;

        $r18 = r0.<android.view.inputmethod.InputMethodManager: android.view.InputChannel mCurChannel>;

        if $r19 == $r18 goto label078;

     label076:
        r67 = r58;

     label077:
        $r20 = r68.<com.android.internal.view.InputBindResult: android.view.InputChannel channel>;

        virtualinvoke $r20.<android.view.InputChannel: void dispose()>();

     label078:
        r67 = r66;

     label079:
        $i18 = r68.<com.android.internal.view.InputBindResult: int result>;

        if $i18 == 12 goto label081;

     label080:
        goto label083;

     label081:
        r67 = r66;

     label082:
        r0.<android.view.inputmethod.InputMethodManager: boolean mRestartOnNextWindowFocus> = 1;

     label083:
        r67 = r66;

     label084:
        $r15 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        if $r15 == null goto label091;

     label085:
        r67 = r66;

     label086:
        r70 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.CompletionInfo[] mCompletions>;

     label087:
        if r70 == null goto label091;

        r67 = r66;

     label088:
        $r17 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        $r16 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.CompletionInfo[] mCompletions>;

        interfaceinvoke $r17.<com.android.internal.view.IInputMethodSession: void displayCompletions(android.view.inputmethod.CompletionInfo[])>($r16);

     label089:
        goto label091;

     label090:
        $r40 := @caughtexception;

     label091:
        goto label104;

     label092:
        $r51 := @caughtexception;

        r72 = $r51;

        goto label094;

     label093:
        $r44 := @caughtexception;

        r72 = $r44;

     label094:
        r67 = r58;

     label095:
        r74 = new java.lang.StringBuilder;

     label096:
        r67 = r58;

     label097:
        specialinvoke r74.<java.lang.StringBuilder: void <init>()>();

     label098:
        r67 = r58;

     label099:
        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IME died: ");

     label100:
        r67 = r58;

     label101:
        $r46 = r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId>;

        virtualinvoke r74.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46);

     label102:
        r67 = r58;

     label103:
        $r48 = virtualinvoke r74.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputMethodManager", $r48, r72);

     label104:
        r67 = r58;

     label105:
        exitmonitor r58;

     label106:
        return 1;

     label107:
        r67 = r58;

     label108:
        exitmonitor r58;

     label109:
        return 0;

     label110:
        $r49 := @caughtexception;

        r60 = $r49;

     label111:
        r67 = r58;

     label112:
        exitmonitor r58;

     label113:
        throw r60;

     label114:
        $r42 := @caughtexception;

        r60 = $r42;

        r58 = r67;

        goto label111;

     label115:
        $r41 := @caughtexception;

        r75 = $r41;

     label116:
        exitmonitor r53;

     label117:
        throw r75;

     label118:
        $r43 := @caughtexception;

        r75 = $r43;

        goto label116;

        catch java.lang.Throwable from label001 to label002 with label115;
        catch java.lang.Throwable from label003 to label004 with label115;
        catch java.lang.Throwable from label005 to label006 with label115;
        catch java.lang.Throwable from label012 to label013 with label110;
        catch java.lang.Throwable from label015 to label016 with label110;
        catch java.lang.Throwable from label017 to label018 with label110;
        catch java.lang.Throwable from label019 to label020 with label021;
        catch java.lang.Throwable from label023 to label024 with label021;
        catch java.lang.Throwable from label025 to label026 with label021;
        catch java.lang.Throwable from label026 to label027 with label021;
        catch java.lang.Throwable from label028 to label029 with label021;
        catch java.lang.Throwable from label030 to label031 with label021;
        catch java.lang.Throwable from label031 to label032 with label021;
        catch java.lang.Throwable from label034 to label035 with label110;
        catch android.os.RemoteException from label035 to label036 with label093;
        catch java.lang.Throwable from label035 to label036 with label110;
        catch android.os.RemoteException from label037 to label038 with label092;
        catch java.lang.Throwable from label037 to label038 with label114;
        catch android.os.RemoteException from label039 to label040 with label092;
        catch java.lang.Throwable from label039 to label040 with label114;
        catch android.os.RemoteException from label041 to label042 with label092;
        catch java.lang.Throwable from label041 to label042 with label114;
        catch android.os.RemoteException from label043 to label044 with label092;
        catch java.lang.Throwable from label043 to label044 with label114;
        catch android.os.RemoteException from label045 to label046 with label092;
        catch java.lang.Throwable from label045 to label046 with label114;
        catch android.os.RemoteException from label047 to label048 with label092;
        catch java.lang.Throwable from label047 to label048 with label114;
        catch android.os.RemoteException from label049 to label050 with label092;
        catch java.lang.Throwable from label049 to label050 with label114;
        catch android.os.RemoteException from label051 to label052 with label092;
        catch java.lang.Throwable from label051 to label052 with label114;
        catch android.os.RemoteException from label053 to label054 with label092;
        catch java.lang.Throwable from label053 to label054 with label114;
        catch android.os.RemoteException from label055 to label056 with label092;
        catch java.lang.Throwable from label055 to label056 with label114;
        catch java.lang.Throwable from label057 to label058 with label114;
        catch android.os.RemoteException from label060 to label061 with label092;
        catch java.lang.Throwable from label060 to label061 with label114;
        catch android.os.RemoteException from label062 to label063 with label092;
        catch java.lang.Throwable from label062 to label063 with label114;
        catch android.os.RemoteException from label064 to label065 with label092;
        catch java.lang.Throwable from label064 to label065 with label114;
        catch android.os.RemoteException from label066 to label067 with label092;
        catch java.lang.Throwable from label066 to label067 with label114;
        catch android.os.RemoteException from label068 to label069 with label092;
        catch java.lang.Throwable from label068 to label069 with label114;
        catch android.os.RemoteException from label070 to label071 with label092;
        catch java.lang.Throwable from label070 to label071 with label114;
        catch android.os.RemoteException from label073 to label074 with label092;
        catch java.lang.Throwable from label073 to label074 with label114;
        catch android.os.RemoteException from label075 to label076 with label092;
        catch java.lang.Throwable from label075 to label076 with label114;
        catch android.os.RemoteException from label077 to label078 with label092;
        catch java.lang.Throwable from label077 to label078 with label114;
        catch android.os.RemoteException from label079 to label080 with label092;
        catch java.lang.Throwable from label079 to label080 with label114;
        catch android.os.RemoteException from label082 to label083 with label092;
        catch java.lang.Throwable from label082 to label083 with label114;
        catch android.os.RemoteException from label084 to label085 with label092;
        catch java.lang.Throwable from label084 to label085 with label114;
        catch android.os.RemoteException from label086 to label087 with label092;
        catch java.lang.Throwable from label086 to label087 with label114;
        catch android.os.RemoteException from label088 to label089 with label090;
        catch java.lang.Throwable from label088 to label089 with label114;
        catch java.lang.Throwable from label095 to label096 with label114;
        catch java.lang.Throwable from label097 to label098 with label114;
        catch java.lang.Throwable from label099 to label100 with label114;
        catch java.lang.Throwable from label101 to label102 with label114;
        catch java.lang.Throwable from label103 to label104 with label114;
        catch java.lang.Throwable from label105 to label106 with label114;
        catch java.lang.Throwable from label108 to label109 with label114;
        catch java.lang.Throwable from label112 to label113 with label114;
        catch java.lang.Throwable from label116 to label117 with label118;
    }

    public boolean switchToLastInputMethod(android.os.IBinder)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.os.IBinder r1;
        com.android.internal.inputmethod.InputMethodPrivilegedOperations $r2;
        boolean $z0;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        $r2 = staticinvoke <com.android.internal.inputmethod.InputMethodPrivilegedOperationsRegistry: com.android.internal.inputmethod.InputMethodPrivilegedOperations get(android.os.IBinder)>(r1);

        $z0 = virtualinvoke $r2.<com.android.internal.inputmethod.InputMethodPrivilegedOperations: boolean switchToPreviousInputMethod()>();

        return $z0;
    }

    public boolean switchToNextInputMethod(android.os.IBinder, boolean)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.os.IBinder r1;
        boolean z0, $z1;
        com.android.internal.inputmethod.InputMethodPrivilegedOperations $r2;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        z0 := @parameter1: boolean;

        $r2 = staticinvoke <com.android.internal.inputmethod.InputMethodPrivilegedOperationsRegistry: com.android.internal.inputmethod.InputMethodPrivilegedOperations get(android.os.IBinder)>(r1);

        $z1 = virtualinvoke $r2.<com.android.internal.inputmethod.InputMethodPrivilegedOperations: boolean switchToNextInputMethod(boolean)>(z0);

        return $z1;
    }

    public void toggleSoftInput(int, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0, i1;
        android.os.RemoteException $r1;
        com.android.internal.view.IInputMethodSession r2;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        if r2 == null goto label4;

     label1:
        interfaceinvoke r2.<com.android.internal.view.IInputMethodSession: void toggleSoftInput(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void toggleSoftInputFromWindow(android.os.IBinder, int, int)
    {
        android.view.inputmethod.InputMethodManager r0;
        int i0, i1;
        android.view.inputmethod.InputMethodManager$H r1;
        android.view.View r2;
        android.os.IBinder $r3, r7;
        com.android.internal.view.IInputMethodSession $r4, r8;
        java.lang.Throwable $r5;
        android.os.RemoteException $r6;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r7 := @parameter0: android.os.IBinder;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label01:
        r2 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

     label02:
        if r2 == null goto label12;

     label03:
        $r3 = virtualinvoke r2.<android.view.View: android.os.IBinder getWindowToken()>();

        if $r3 == r7 goto label05;

     label04:
        goto label12;

     label05:
        r8 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

     label06:
        if r8 == null goto label10;

     label07:
        $r4 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        interfaceinvoke $r4.<com.android.internal.view.IInputMethodSession: void toggleSoftInput(int,int)>(i0, i1);

     label08:
        goto label10;

     label09:
        $r6 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        return;

     label12:
        exitmonitor r1;

     label13:
        return;

     label14:
        $r5 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch android.os.RemoteException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void unregisterImeConsumer(android.view.ImeInsetsSourceConsumer)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.view.inputmethod.InputMethodManager$H r1;
        java.lang.IllegalStateException $r2;
        android.view.ImeInsetsSourceConsumer $r3, r5;
        java.lang.Throwable $r4;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r5 := @parameter0: android.view.ImeInsetsSourceConsumer;

        if r5 == null goto label7;

        r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r1;

     label1:
        $r3 = r0.<android.view.inputmethod.InputMethodManager: android.view.ImeInsetsSourceConsumer mImeInsetsConsumer>;

        if $r3 != r5 goto label2;

        r0.<android.view.inputmethod.InputMethodManager: android.view.ImeInsetsSourceConsumer mImeInsetsConsumer> = null;

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r4 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r4;

     label7:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ImeInsetsSourceConsumer cannot be null.");

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void updateCursor(android.view.View, int, int, int, int)
    {
        android.view.inputmethod.InputMethodManager r0, r18;
        int i0, i1, i2, i3;
        boolean z0, $z1;
        java.lang.StringBuilder r1;
        android.view.inputmethod.EditorInfo $r2;
        com.android.internal.view.IInputMethodSession $r3, $r8;
        android.graphics.Rect $r4, $r5, $r6, $r7, $r9, $r10;
        android.os.RemoteException $r11;
        java.lang.String $r13, $r15;
        java.lang.Throwable $r16;
        android.view.View r17;
        android.view.inputmethod.InputMethodManager$H r19;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r17 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r18 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r17);

        if r18 == null goto label01;

        virtualinvoke r18.<android.view.inputmethod.InputMethodManager: void updateCursor(android.view.View,int,int,int,int)>(r17, i0, i1, i2, i3);

        return;

     label01:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r19 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r19;

     label02:
        $z1 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r17);

        if $z1 == 0 goto label12;

        $r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>;

        if $r2 == null goto label12;

        $r3 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        if $r3 != null goto label04;

     label03:
        goto label12;

     label04:
        $r4 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Rect mTmpCursorRect>;

        virtualinvoke $r4.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3);

        $r6 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Rect mCursorRect>;

        $r5 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Rect mTmpCursorRect>;

        z0 = virtualinvoke $r6.<android.graphics.Rect: boolean equals(java.lang.Object)>($r5);

     label05:
        if z0 != 0 goto label10;

     label06:
        $r8 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        $r7 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Rect mTmpCursorRect>;

        interfaceinvoke $r8.<com.android.internal.view.IInputMethodSession: void updateCursor(android.graphics.Rect)>($r7);

        $r10 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Rect mCursorRect>;

        $r9 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Rect mTmpCursorRect>;

        virtualinvoke $r10.<android.graphics.Rect: void set(android.graphics.Rect)>($r9);

     label07:
        goto label10;

     label08:
        $r11 := @caughtexception;

     label09:
        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IME died: ");

        $r13 = r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputMethodManager", $r15, $r11);

     label10:
        exitmonitor r19;

     label11:
        return;

     label12:
        exitmonitor r19;

     label13:
        return;

     label14:
        $r16 := @caughtexception;

     label15:
        exitmonitor r19;

     label16:
        throw $r16;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void updateCursorAnchorInfo(android.view.View, android.view.inputmethod.CursorAnchorInfo)
    {
        android.view.inputmethod.InputMethodManager r0, r17;
        int i0, $i1, $i2, $i3;
        boolean $z0, $z1, z2;
        android.view.inputmethod.EditorInfo $r1;
        com.android.internal.view.IInputMethodSession $r2, $r4, $r6;
        android.graphics.Matrix $r3, $r5;
        android.view.inputmethod.CursorAnchorInfo $r7, $r8, r16;
        java.lang.Throwable $r9;
        android.os.RemoteException $r10;
        java.lang.String $r12, $r14;
        android.view.View r15;
        android.view.inputmethod.InputMethodManager$H r18;
        java.lang.StringBuilder r20;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r15 := @parameter0: android.view.View;

        r16 := @parameter1: android.view.inputmethod.CursorAnchorInfo;

        if r15 == null goto label25;

        if r16 != null goto label01;

        goto label25;

     label01:
        r17 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r15);

        if r17 == null goto label02;

        virtualinvoke r17.<android.view.inputmethod.InputMethodManager: void updateCursorAnchorInfo(android.view.View,android.view.inputmethod.CursorAnchorInfo)>(r15, r16);

        return;

     label02:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r18 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r18;

     label03:
        $z0 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r15);

        if $z0 == 0 goto label20;

        $r1 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>;

        if $r1 == null goto label20;

        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        if $r2 != null goto label05;

     label04:
        goto label20;

     label05:
        i0 = r0.<android.view.inputmethod.InputMethodManager: int mRequestUpdateCursorAnchorInfoMonitorMode>;

     label06:
        z2 = 1;

        $i1 = i0 & 1;

        if $i1 == 0 goto label07;

        goto label08;

     label07:
        z2 = 0;

     label08:
        if z2 != 0 goto label11;

     label09:
        $r8 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.CursorAnchorInfo mCursorAnchorInfo>;

        $z1 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r8, r16);

        if $z1 == 0 goto label11;

        exitmonitor r18;

     label10:
        return;

     label11:
        $r3 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Matrix mActivityViewToScreenMatrix>;

        if $r3 == null goto label13;

        $r6 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        $r5 = r0.<android.view.inputmethod.InputMethodManager: android.graphics.Matrix mActivityViewToScreenMatrix>;

        $r7 = staticinvoke <android.view.inputmethod.CursorAnchorInfo: android.view.inputmethod.CursorAnchorInfo createForAdditionalParentMatrix(android.view.inputmethod.CursorAnchorInfo,android.graphics.Matrix)>(r16, $r5);

        interfaceinvoke $r6.<com.android.internal.view.IInputMethodSession: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>($r7);

     label12:
        goto label14;

     label13:
        $r4 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        interfaceinvoke $r4.<com.android.internal.view.IInputMethodSession: void updateCursorAnchorInfo(android.view.inputmethod.CursorAnchorInfo)>(r16);

     label14:
        r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.CursorAnchorInfo mCursorAnchorInfo> = r16;

        $i2 = r0.<android.view.inputmethod.InputMethodManager: int mRequestUpdateCursorAnchorInfoMonitorMode>;

        $i3 = $i2 & -2;

        r0.<android.view.inputmethod.InputMethodManager: int mRequestUpdateCursorAnchorInfoMonitorMode> = $i3;

     label15:
        goto label18;

     label16:
        $r10 := @caughtexception;

     label17:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IME died: ");

        $r12 = r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId>;

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputMethodManager", $r14, $r10);

     label18:
        exitmonitor r18;

     label19:
        return;

     label20:
        exitmonitor r18;

     label21:
        return;

     label22:
        $r9 := @caughtexception;

     label23:
        exitmonitor r18;

     label24:
        throw $r9;

     label25:
        return;

        catch java.lang.Throwable from label03 to label04 with label22;
        catch java.lang.Throwable from label05 to label06 with label22;
        catch java.lang.Throwable from label09 to label10 with label22;
        catch android.os.RemoteException from label11 to label12 with label16;
        catch java.lang.Throwable from label11 to label12 with label22;
        catch android.os.RemoteException from label13 to label14 with label16;
        catch java.lang.Throwable from label13 to label14 with label22;
        catch android.os.RemoteException from label14 to label15 with label16;
        catch java.lang.Throwable from label14 to label15 with label22;
        catch java.lang.Throwable from label17 to label18 with label22;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    public void updateExtractedText(android.view.View, int, android.view.inputmethod.ExtractedText)
    {
        android.view.inputmethod.InputMethodManager r0, r6;
        int i0;
        android.view.inputmethod.ExtractedText r1;
        boolean $z0;
        com.android.internal.view.IInputMethodSession $r2, r8;
        android.os.RemoteException $r3;
        java.lang.Throwable $r4;
        android.view.View r5;
        android.view.inputmethod.InputMethodManager$H r7;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r5 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.inputmethod.ExtractedText;

        r6 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r5);

        if r6 == null goto label01;

        virtualinvoke r6.<android.view.inputmethod.InputMethodManager: void updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)>(r5, i0, r1);

        return;

     label01:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r7 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r7;

     label02:
        $z0 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r5);

        if $z0 != 0 goto label04;

        exitmonitor r7;

     label03:
        return;

     label04:
        r8 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

     label05:
        if r8 == null goto label09;

     label06:
        $r2 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        interfaceinvoke $r2.<com.android.internal.view.IInputMethodSession: void updateExtractedText(int,android.view.inputmethod.ExtractedText)>(i0, r1);

     label07:
        goto label09;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r7;

     label10:
        return;

     label11:
        $r4 := @caughtexception;

     label12:
        exitmonitor r7;

     label13:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void updateSelection(android.view.View, int, int, int, int)
    {
        android.view.inputmethod.InputMethodManager r0, r11;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, i9, i10;
        boolean $z0;
        android.view.inputmethod.EditorInfo $r2;
        com.android.internal.view.IInputMethodSession $r3, $r13;
        java.lang.Throwable $r4;
        android.os.RemoteException $r5;
        java.lang.String $r7, $r9;
        android.view.View r10;
        android.view.inputmethod.InputMethodManager$H r12;
        java.lang.StringBuilder r14;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r10 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r11 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r10);

        if r11 == null goto label01;

        virtualinvoke r11.<android.view.inputmethod.InputMethodManager: void updateSelection(android.view.View,int,int,int,int)>(r10, i0, i1, i2, i3);

        return;

     label01:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r12 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r12;

     label02:
        $z0 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r10);

        if $z0 == 0 goto label12;

        $r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>;

        if $r2 == null goto label12;

        $r3 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        if $r3 != null goto label04;

     label03:
        goto label12;

     label04:
        $i5 = r0.<android.view.inputmethod.InputMethodManager: int mCursorSelStart>;

        if $i5 != i0 goto label06;

        $i6 = r0.<android.view.inputmethod.InputMethodManager: int mCursorSelEnd>;

        if $i6 != i1 goto label06;

        $i7 = r0.<android.view.inputmethod.InputMethodManager: int mCursorCandStart>;

        if $i7 != i2 goto label06;

        i9 = r0.<android.view.inputmethod.InputMethodManager: int mCursorCandEnd>;

     label05:
        if i9 == i3 goto label10;

     label06:
        i10 = r0.<android.view.inputmethod.InputMethodManager: int mCursorSelStart>;

        i4 = r0.<android.view.inputmethod.InputMethodManager: int mCursorSelEnd>;

        r0.<android.view.inputmethod.InputMethodManager: int mCursorSelStart> = i0;

        r0.<android.view.inputmethod.InputMethodManager: int mCursorSelEnd> = i1;

        r0.<android.view.inputmethod.InputMethodManager: int mCursorCandStart> = i2;

        r0.<android.view.inputmethod.InputMethodManager: int mCursorCandEnd> = i3;

        $r13 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        interfaceinvoke $r13.<com.android.internal.view.IInputMethodSession: void updateSelection(int,int,int,int,int,int)>(i10, i4, i0, i1, i2, i3);

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

     label09:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IME died: ");

        $r7 = r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId>;

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputMethodManager", $r9, $r5);

     label10:
        exitmonitor r12;

     label11:
        return;

     label12:
        exitmonitor r12;

     label13:
        return;

     label14:
        $r4 := @caughtexception;

     label15:
        exitmonitor r12;

     label16:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void viewClicked(android.view.View)
    {
        android.view.inputmethod.InputMethodManager r0, r12;
        android.view.View r1, r11, r14;
        boolean $z0, z1;
        android.view.inputmethod.EditorInfo $r2;
        com.android.internal.view.IInputMethodSession $r3, r16;
        java.lang.Throwable $r4, $r5;
        android.os.RemoteException $r6;
        java.lang.String $r8, $r10;
        android.view.inputmethod.InputMethodManager$H r13, r15;
        java.lang.StringBuilder r18;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r11 := @parameter0: android.view.View;

        r12 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getFallbackInputMethodManagerIfNecessary(android.view.View)>(r11);

        if r12 == null goto label01;

        virtualinvoke r12.<android.view.inputmethod.InputMethodManager: void viewClicked(android.view.View)>(r11);

        return;

     label01:
        r13 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r13;

     label02:
        r1 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getServedViewLocked()>();

        r14 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: android.view.View getNextServedViewLocked()>();

        exitmonitor r13;

     label03:
        if r1 == r14 goto label04;

        z1 = 1;

        goto label05;

     label04:
        z1 = 0;

     label05:
        virtualinvoke r0.<android.view.inputmethod.InputMethodManager: void checkFocus()>();

        r15 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager$H mH>;

        entermonitor r15;

     label06:
        $z0 = specialinvoke r0.<android.view.inputmethod.InputMethodManager: boolean hasServedByInputMethodLocked(android.view.View)>(r11);

        if $z0 == 0 goto label14;

        $r2 = r0.<android.view.inputmethod.InputMethodManager: android.view.inputmethod.EditorInfo mCurrentTextBoxAttribute>;

        if $r2 == null goto label14;

        r16 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

     label07:
        if r16 != null goto label08;

        goto label14;

     label08:
        $r3 = r0.<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodSession mCurMethod>;

        interfaceinvoke $r3.<com.android.internal.view.IInputMethodSession: void viewClicked(boolean)>(z1);

     label09:
        goto label12;

     label10:
        $r6 := @caughtexception;

     label11:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IME died: ");

        $r8 = r0.<android.view.inputmethod.InputMethodManager: java.lang.String mCurId>;

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("InputMethodManager", $r10, $r6);

     label12:
        exitmonitor r15;

     label13:
        return;

     label14:
        exitmonitor r15;

     label15:
        return;

     label16:
        $r5 := @caughtexception;

     label17:
        exitmonitor r15;

     label18:
        throw $r5;

     label19:
        $r4 := @caughtexception;

     label20:
        exitmonitor r13;

     label21:
        throw $r4;

        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label06 to label07 with label16;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label16;
        catch java.lang.Throwable from label11 to label12 with label16;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public void windowDismissed(android.os.IBinder)
    {
        android.view.inputmethod.InputMethodManager r0;
        android.os.IBinder r1;

        r0 := @this: android.view.inputmethod.InputMethodManager;

        r1 := @parameter0: android.os.IBinder;

        return;
    }
}
