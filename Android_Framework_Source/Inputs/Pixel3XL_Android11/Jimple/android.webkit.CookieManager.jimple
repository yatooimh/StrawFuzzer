public abstract class android.webkit.CookieManager extends java.lang.Object
{

    public void <init>()
    {
        android.webkit.CookieManager r0;

        r0 := @this: android.webkit.CookieManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean allowFileSchemeCookies()
    {
        android.webkit.CookieManager $r0;
        boolean $z0;

        $r0 = staticinvoke <android.webkit.CookieManager: android.webkit.CookieManager getInstance()>();

        $z0 = virtualinvoke $r0.<android.webkit.CookieManager: boolean allowFileSchemeCookiesImpl()>();

        return $z0;
    }

    public static android.webkit.CookieManager getInstance()
    {
        android.webkit.WebViewFactoryProvider $r0;
        android.webkit.CookieManager $r1;

        $r0 = staticinvoke <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider getProvider()>();

        $r1 = interfaceinvoke $r0.<android.webkit.WebViewFactoryProvider: android.webkit.CookieManager getCookieManager()>();

        return $r1;
    }

    public static void setAcceptFileSchemeCookies(boolean)
    {
        boolean z0;
        android.webkit.CookieManager $r0;

        z0 := @parameter0: boolean;

        $r0 = staticinvoke <android.webkit.CookieManager: android.webkit.CookieManager getInstance()>();

        virtualinvoke $r0.<android.webkit.CookieManager: void setAcceptFileSchemeCookiesImpl(boolean)>(z0);

        return;
    }

    public abstract boolean acceptCookie();

    public abstract boolean acceptThirdPartyCookies(android.webkit.WebView);

    protected abstract boolean allowFileSchemeCookiesImpl();

    protected java.lang.Object clone() throws java.lang.CloneNotSupportedException
    {
        android.webkit.CookieManager r0;
        java.lang.CloneNotSupportedException $r1;

        r0 := @this: android.webkit.CookieManager;

        $r1 = new java.lang.CloneNotSupportedException;

        specialinvoke $r1.<java.lang.CloneNotSupportedException: void <init>(java.lang.String)>("doesn\'t implement Cloneable");

        throw $r1;
    }

    public abstract void flush();

    public java.lang.String getCookie(android.net.WebAddress)
    {
        android.webkit.CookieManager r0;
        java.lang.String $r1, r4;
        java.lang.Throwable $r2;
        android.net.WebAddress r3;

        r0 := @this: android.webkit.CookieManager;

        r3 := @parameter0: android.net.WebAddress;

        entermonitor r0;

     label1:
        $r1 = virtualinvoke r3.<android.net.WebAddress: java.lang.String toString()>();

        r4 = virtualinvoke r0.<android.webkit.CookieManager: java.lang.String getCookie(java.lang.String)>($r1);

     label2:
        exitmonitor r0;

        return r4;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public abstract java.lang.String getCookie(java.lang.String);

    public abstract java.lang.String getCookie(java.lang.String, boolean);

    public abstract boolean hasCookies();

    public abstract boolean hasCookies(boolean);

    public abstract void removeAllCookie();

    public abstract void removeAllCookies(android.webkit.ValueCallback);

    public abstract void removeExpiredCookie();

    public abstract void removeSessionCookie();

    public abstract void removeSessionCookies(android.webkit.ValueCallback);

    public abstract void setAcceptCookie(boolean);

    protected abstract void setAcceptFileSchemeCookiesImpl(boolean);

    public abstract void setAcceptThirdPartyCookies(android.webkit.WebView, boolean);

    public abstract void setCookie(java.lang.String, java.lang.String);

    public abstract void setCookie(java.lang.String, java.lang.String, android.webkit.ValueCallback);
}
