public final class android.webkit.CookieSyncManager extends android.webkit.WebSyncManager
{
    private static boolean sGetInstanceAllowed;
    private static final java.lang.Object sLock;
    private static android.webkit.CookieSyncManager sRef;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.webkit.CookieSyncManager: boolean sGetInstanceAllowed> = 0;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.webkit.CookieSyncManager: java.lang.Object sLock> = $r0;

        return;
    }

    private void <init>()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        specialinvoke r0.<android.webkit.WebSyncManager: void <init>(android.content.Context,java.lang.String)>(null, null);

        return;
    }

    private static void checkInstanceIsAllowed()
    {
        boolean $z0;
        java.lang.IllegalStateException $r0;

        $z0 = <android.webkit.CookieSyncManager: boolean sGetInstanceAllowed>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.IllegalStateException;

        specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("CookieSyncManager::createInstance() needs to be called before CookieSyncManager::getInstance()");

        throw $r0;
    }

    public static android.webkit.CookieSyncManager createInstance(android.content.Context)
    {
        java.lang.Object r0;
        java.lang.Throwable $r1;
        android.content.Context r2;
        android.webkit.CookieSyncManager r3;
        java.lang.IllegalArgumentException r5;

        r2 := @parameter0: android.content.Context;

        r0 = <android.webkit.CookieSyncManager: java.lang.Object sLock>;

        entermonitor r0;

        if r2 == null goto label4;

     label1:
        staticinvoke <android.webkit.CookieSyncManager: void setGetInstanceIsAllowed()>();

        r3 = staticinvoke <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()>();

        exitmonitor r0;

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        goto label5;

     label4:
        r5 = new java.lang.IllegalArgumentException;

        specialinvoke r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid context argument");

        throw r5;

     label5:
        exitmonitor r0;

     label6:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
        catch java.lang.Throwable from label5 to label6 with label3;
    }

    public static android.webkit.CookieSyncManager getInstance()
    {
        java.lang.Object r0;
        android.webkit.CookieSyncManager $r1, r3, r4;
        java.lang.Throwable $r2;

        r0 = <android.webkit.CookieSyncManager: java.lang.Object sLock>;

        entermonitor r0;

     label1:
        staticinvoke <android.webkit.CookieSyncManager: void checkInstanceIsAllowed()>();

        $r1 = <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager sRef>;

        if $r1 != null goto label2;

        r3 = new android.webkit.CookieSyncManager;

        specialinvoke r3.<android.webkit.CookieSyncManager: void <init>()>();

        <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager sRef> = r3;

     label2:
        r4 = <android.webkit.CookieSyncManager: android.webkit.CookieSyncManager sRef>;

        exitmonitor r0;

     label3:
        return r4;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static void setGetInstanceIsAllowed()
    {
        <android.webkit.CookieSyncManager: boolean sGetInstanceAllowed> = 1;

        return;
    }

    public void resetSync()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        return;
    }

    public volatile void run()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        specialinvoke r0.<android.webkit.WebSyncManager: void run()>();

        return;
    }

    public void startSync()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        return;
    }

    public void stopSync()
    {
        android.webkit.CookieSyncManager r0;

        r0 := @this: android.webkit.CookieSyncManager;

        return;
    }

    public void sync()
    {
        android.webkit.CookieSyncManager r0;
        android.webkit.CookieManager $r1;

        r0 := @this: android.webkit.CookieSyncManager;

        $r1 = staticinvoke <android.webkit.CookieManager: android.webkit.CookieManager getInstance()>();

        virtualinvoke $r1.<android.webkit.CookieManager: void flush()>();

        return;
    }

    protected void syncFromRamToFlash()
    {
        android.webkit.CookieSyncManager r0;
        android.webkit.CookieManager $r1;

        r0 := @this: android.webkit.CookieSyncManager;

        $r1 = staticinvoke <android.webkit.CookieManager: android.webkit.CookieManager getInstance()>();

        virtualinvoke $r1.<android.webkit.CookieManager: void flush()>();

        return;
    }
}
