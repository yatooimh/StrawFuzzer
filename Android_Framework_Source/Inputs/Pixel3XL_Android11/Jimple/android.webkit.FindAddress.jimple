class android.webkit.FindAddress extends java.lang.Object
{
    private static final java.lang.String HOUSE_COMPONENT;
    private static final java.lang.String HOUSE_END;
    private static final java.lang.String HOUSE_POST_DELIM;
    private static final java.lang.String HOUSE_PRE_DELIM;
    private static final int MAX_ADDRESS_LINES;
    private static final int MAX_ADDRESS_WORDS;
    private static final int MAX_LOCATION_NAME_DISTANCE;
    private static final int MIN_ADDRESS_WORDS;
    private static final java.lang.String NL;
    private static final java.lang.String SP;
    private static final java.lang.String WORD_DELIM;
    private static final java.lang.String WORD_END;
    private static final java.lang.String WS;
    private static final int kMaxAddressNameWordLength;
    private static final java.util.regex.Pattern sHouseNumberRe;
    private static final java.util.regex.Pattern sLocationNameRe;
    private static final java.util.regex.Pattern sStateRe;
    private static final android.webkit.FindAddress$ZipRange[] sStateZipCodeRanges;
    private static final java.util.regex.Pattern sSuffixedNumberRe;
    private static final java.util.regex.Pattern sWordRe;
    private static final java.util.regex.Pattern sZipCodeRe;

    static void <clinit>()
    {
        android.webkit.FindAddress$ZipRange[] $r0;
        android.webkit.FindAddress$ZipRange $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49, $r50, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r59;
        java.util.regex.Pattern $r60, $r61, $r62, $r63, $r64, $r65;

        <android.webkit.FindAddress: int kMaxAddressNameWordLength> = 25;

        <android.webkit.FindAddress: java.lang.String WS> = "\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029";

        <android.webkit.FindAddress: java.lang.String WORD_END> = "(?=[,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)";

        <android.webkit.FindAddress: java.lang.String WORD_DELIM> = ",*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029";

        <android.webkit.FindAddress: java.lang.String SP> = "\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000";

        <android.webkit.FindAddress: java.lang.String NL> = "\n\u000b\f\r\u0085\u2028\u2029";

        <android.webkit.FindAddress: int MIN_ADDRESS_WORDS> = 4;

        <android.webkit.FindAddress: int MAX_LOCATION_NAME_DISTANCE> = 5;

        <android.webkit.FindAddress: int MAX_ADDRESS_WORDS> = 14;

        <android.webkit.FindAddress: int MAX_ADDRESS_LINES> = 5;

        <android.webkit.FindAddress: java.lang.String HOUSE_PRE_DELIM> = ":,\"\'\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029";

        <android.webkit.FindAddress: java.lang.String HOUSE_POST_DELIM> = ",\"\'\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029";

        <android.webkit.FindAddress: java.lang.String HOUSE_END> = "(?=[,\"\'\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)";

        <android.webkit.FindAddress: java.lang.String HOUSE_COMPONENT> = "(?:one|[0-9]+([a-z](?=[^a-z]|$)|st|nd|rd|th)?)";

        $r0 = newarray (android.webkit.FindAddress$ZipRange)[59];

        $r1 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r1.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(99, 99, -1, -1);

        $r0[0] = $r1;

        $r2 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r2.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(35, 36, -1, -1);

        $r0[1] = $r2;

        $r3 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r3.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(71, 72, -1, -1);

        $r0[2] = $r3;

        $r4 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r4.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(96, 96, -1, -1);

        $r0[3] = $r4;

        $r5 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r5.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(85, 86, -1, -1);

        $r0[4] = $r5;

        $r6 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r6.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(90, 96, -1, -1);

        $r0[5] = $r6;

        $r7 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r7.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(80, 81, -1, -1);

        $r0[6] = $r7;

        $r8 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r8.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(6, 6, -1, -1);

        $r0[7] = $r8;

        $r9 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r9.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(20, 20, -1, -1);

        $r0[8] = $r9;

        $r10 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r10.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(19, 19, -1, -1);

        $r0[9] = $r10;

        $r11 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r11.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(32, 34, -1, -1);

        $r0[10] = $r11;

        $r12 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r12.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(96, 96, -1, -1);

        $r0[11] = $r12;

        $r13 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r13.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(30, 31, -1, -1);

        $r0[12] = $r13;

        $r14 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r14.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(96, 96, -1, -1);

        $r0[13] = $r14;

        $r15 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r15.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(96, 96, -1, -1);

        $r0[14] = $r15;

        $r16 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r16.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(50, 52, -1, -1);

        $r0[15] = $r16;

        $r17 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r17.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(83, 83, -1, -1);

        $r0[16] = $r17;

        $r18 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r18.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(60, 62, -1, -1);

        $r0[17] = $r18;

        $r19 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r19.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(46, 47, -1, -1);

        $r0[18] = $r19;

        $r20 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r20.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(66, 67, 73, -1);

        $r0[19] = $r20;

        $r21 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r21.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(40, 42, -1, -1);

        $r0[20] = $r21;

        $r22 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r22.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(70, 71, -1, -1);

        $r0[21] = $r22;

        $r23 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r23.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(1, 2, -1, -1);

        $r0[22] = $r23;

        $r24 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r24.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(20, 21, -1, -1);

        $r0[23] = $r24;

        $r25 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r25.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(3, 4, -1, -1);

        $r0[24] = $r25;

        $r26 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r26.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(96, 96, -1, -1);

        $r0[25] = $r26;

        $r27 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r27.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(48, 49, -1, -1);

        $r0[26] = $r27;

        $r28 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r28.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(55, 56, -1, -1);

        $r0[27] = $r28;

        $r29 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r29.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(63, 65, -1, -1);

        $r0[28] = $r29;

        $r30 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r30.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(96, 96, -1, -1);

        $r0[29] = $r30;

        $r31 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r31.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(38, 39, -1, -1);

        $r0[30] = $r31;

        $r32 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r32.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(55, 56, -1, -1);

        $r0[31] = $r32;

        $r33 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r33.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(27, 28, -1, -1);

        $r0[32] = $r33;

        $r34 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r34.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(58, 58, -1, -1);

        $r0[33] = $r34;

        $r35 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r35.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(68, 69, -1, -1);

        $r0[34] = $r35;

        $r36 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r36.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(3, 4, -1, -1);

        $r0[35] = $r36;

        $r37 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r37.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(7, 8, -1, -1);

        $r0[36] = $r37;

        $r38 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r38.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(87, 88, 86, -1);

        $r0[37] = $r38;

        $r39 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r39.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(88, 89, 96, -1);

        $r0[38] = $r39;

        $r40 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r40.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(10, 14, 0, 6);

        $r0[39] = $r40;

        $r41 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r41.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(43, 45, -1, -1);

        $r0[40] = $r41;

        $r42 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r42.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(73, 74, -1, -1);

        $r0[41] = $r42;

        $r43 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r43.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(97, 97, -1, -1);

        $r0[42] = $r43;

        $r44 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r44.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(15, 19, -1, -1);

        $r0[43] = $r44;

        $r45 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r45.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(6, 6, 0, 9);

        $r0[44] = $r45;

        $r46 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r46.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(96, 96, -1, -1);

        $r0[45] = $r46;

        $r47 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r47.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(2, 2, -1, -1);

        $r0[46] = $r47;

        $r48 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r48.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(29, 29, -1, -1);

        $r0[47] = $r48;

        $r49 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r49.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(57, 57, -1, -1);

        $r0[48] = $r49;

        $r50 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r50.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(37, 38, -1, -1);

        $r0[49] = $r50;

        $r51 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r51.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(75, 79, 87, 88);

        $r0[50] = $r51;

        $r52 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r52.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(84, 84, -1, -1);

        $r0[51] = $r52;

        $r53 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r53.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(22, 24, 20, -1);

        $r0[52] = $r53;

        $r54 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r54.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(6, 9, -1, -1);

        $r0[53] = $r54;

        $r55 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r55.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(5, 5, -1, -1);

        $r0[54] = $r55;

        $r56 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r56.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(98, 99, -1, -1);

        $r0[55] = $r56;

        $r57 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r57.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(53, 54, -1, -1);

        $r0[56] = $r57;

        $r58 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r58.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(24, 26, -1, -1);

        $r0[57] = $r58;

        $r59 = new android.webkit.FindAddress$ZipRange;

        specialinvoke $r59.<android.webkit.FindAddress$ZipRange: void <init>(int,int,int,int)>(82, 83, -1, -1);

        $r0[58] = $r59;

        <android.webkit.FindAddress: android.webkit.FindAddress$ZipRange[] sStateZipCodeRanges> = $r0;

        $r60 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("[^,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]+(?=[,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)", 2);

        <android.webkit.FindAddress: java.util.regex.Pattern sWordRe> = $r60;

        $r61 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("(?:one|[0-9]+([a-z](?=[^a-z]|$)|st|nd|rd|th)?)(?:-(?:one|[0-9]+([a-z](?=[^a-z]|$)|st|nd|rd|th)?))*(?=[,\"\'\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)", 2);

        <android.webkit.FindAddress: java.util.regex.Pattern sHouseNumberRe> = $r61;

        $r62 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("(?:(ak|alaska)|(al|alabama)|(ar|arkansas)|(as|american[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+samoa)|(az|arizona)|(ca|california)|(co|colorado)|(ct|connecticut)|(dc|district[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+of[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+columbia)|(de|delaware)|(fl|florida)|(fm|federated[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+states[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+of[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+micronesia)|(ga|georgia)|(gu|guam)|(hi|hawaii)|(ia|iowa)|(id|idaho)|(il|illinois)|(in|indiana)|(ks|kansas)|(ky|kentucky)|(la|louisiana)|(ma|massachusetts)|(md|maryland)|(me|maine)|(mh|marshall[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+islands)|(mi|michigan)|(mn|minnesota)|(mo|missouri)|(mp|northern[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+mariana[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+islands)|(ms|mississippi)|(mt|montana)|(nc|north[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+carolina)|(nd|north[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+dakota)|(ne|nebraska)|(nh|new[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+hampshire)|(nj|new[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+jersey)|(nm|new[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+mexico)|(nv|nevada)|(ny|new[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+york)|(oh|ohio)|(ok|oklahoma)|(or|oregon)|(pa|pennsylvania)|(pr|puerto[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+rico)|(pw|palau)|(ri|rhode[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+island)|(sc|south[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+carolina)|(sd|south[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+dakota)|(tn|tennessee)|(tx|texas)|(ut|utah)|(va|virginia)|(vi|virgin[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+islands)|(vt|vermont)|(wa|washington)|(wi|wisconsin)|(wv|west[\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]+virginia)|(wy|wyoming))(?=[,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)", 2);

        <android.webkit.FindAddress: java.util.regex.Pattern sStateRe> = $r62;

        $r63 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("(?:alley|annex|arcade|ave[.]?|avenue|alameda|bayou|beach|bend|bluffs?|bottom|boulevard|branch|bridge|brooks?|burgs?|bypass|broadway|camino|camp|canyon|cape|causeway|centers?|circles?|cliffs?|club|common|corners?|course|courts?|coves?|creek|crescent|crest|crossing|crossroad|curve|circulo|dale|dam|divide|drives?|estates?|expressway|extensions?|falls?|ferry|fields?|flats?|fords?|forest|forges?|forks?|fort|freeway|gardens?|gateway|glens?|greens?|groves?|harbors?|haven|heights|highway|hills?|hollow|inlet|islands?|isle|junctions?|keys?|knolls?|lakes?|land|landing|lane|lights?|loaf|locks?|lodge|loop|mall|manors?|meadows?|mews|mills?|mission|motorway|mount|mountains?|neck|orchard|oval|overpass|parks?|parkways?|pass|passage|path|pike|pines?|plains?|plaza|points?|ports?|prairie|privada|radial|ramp|ranch|rapids?|rd[.]?|rest|ridges?|river|roads?|route|row|rue|run|shoals?|shores?|skyway|springs?|spurs?|squares?|station|stravenue|stream|st[.]?|streets?|summit|speedway|terrace|throughway|trace|track|trafficway|trail|tunnel|turnpike|underpass|unions?|valleys?|viaduct|views?|villages?|ville|vista|walks?|wall|ways?|wells?|xing|xrd)(?=[,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)", 2);

        <android.webkit.FindAddress: java.util.regex.Pattern sLocationNameRe> = $r63;

        $r64 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("([0-9]+)(st|nd|rd|th)", 2);

        <android.webkit.FindAddress: java.util.regex.Pattern sSuffixedNumberRe> = $r64;

        $r65 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>("(?:[0-9]{5}(?:-[0-9]{4})?)(?=[,*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029]|$)", 2);

        <android.webkit.FindAddress: java.util.regex.Pattern sZipCodeRe> = $r65;

        return;
    }

    void <init>()
    {
        android.webkit.FindAddress r0;

        r0 := @this: android.webkit.FindAddress;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int attemptMatch(java.lang.String, java.util.regex.MatchResult)
    {
        java.lang.String r0, $r5, $r7, $r8, $r9, r11;
        java.util.regex.Matcher r1, r12;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21, i22, i23, i24, i25;
        java.util.regex.MatchResult r2, $r4, r10;
        java.util.regex.Pattern $r3, $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8, z9;
        char $c10;

        r0 := @parameter0: java.lang.String;

        r10 := @parameter1: java.util.regex.MatchResult;

        i16 = -1;

        i17 = -1;

        i18 = interfaceinvoke r10.<java.util.regex.MatchResult: int end()>();

        i19 = 1;

        z6 = 1;

        z7 = 0;

        i20 = 1;

        r11 = "";

        $r3 = <android.webkit.FindAddress: java.util.regex.Pattern sWordRe>;

        r1 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

     label01:
        i21 = i18;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i18 >= $i1 goto label15;

        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean find(int)>(i18);

        if $z0 != 0 goto label02;

        $i14 = virtualinvoke r0.<java.lang.String: int length()>();

        $i15 = neg $i14;

        return $i15;

     label02:
        i21 = i18;

        $i3 = virtualinvoke r1.<java.util.regex.Matcher: int end()>();

        $i4 = virtualinvoke r1.<java.util.regex.Matcher: int start()>();

        $i5 = $i3 - $i4;

        if $i5 <= 25 goto label03;

        $i12 = virtualinvoke r1.<java.util.regex.Matcher: int end()>();

        $i13 = neg $i12;

        return $i13;

     label03:
        $i6 = virtualinvoke r1.<java.util.regex.Matcher: int start()>();

        if i21 >= $i6 goto label05;

        i22 = i19;

        $r9 = "\n\u000b\f\r\u0085\u2028\u2029";

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i21);

        $i11 = virtualinvoke $r9.<java.lang.String: int indexOf(int)>($c10);

        if $i11 == -1 goto label04;

        i22 = i19 + 1;

     label04:
        i21 = i21 + 1;

        i19 = i22;

        goto label03;

     label05:
        if i19 <= 5 goto label06;

        goto label15;

     label06:
        i0 = i20 + 1;

        if i0 <= 14 goto label07;

        goto label15;

     label07:
        $r4 = staticinvoke <android.webkit.FindAddress: java.util.regex.MatchResult matchHouseNumber(java.lang.String,int)>(r0, i21);

        if $r4 == null goto label09;

        if z6 == 0 goto label08;

        if i19 <= 1 goto label08;

        $i9 = neg i21;

        return $i9;

     label08:
        i23 = i16;

        i24 = i17;

        z8 = z6;

        z9 = z7;

        if i16 != -1 goto label14;

        i23 = i21;

        i24 = i17;

        z8 = z6;

        z9 = z7;

        goto label14;

     label09:
        $r5 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $z1 = staticinvoke <android.webkit.FindAddress: boolean isValidLocationName(java.lang.String)>($r5);

        if $z1 == 0 goto label10;

        z9 = 1;

        i23 = i16;

        i24 = i17;

        z8 = 0;

        goto label14;

     label10:
        if i0 != 5 goto label11;

        if z7 != 0 goto label11;

        i21 = virtualinvoke r1.<java.util.regex.Matcher: int end()>();

        goto label15;

     label11:
        i23 = i16;

        i24 = i17;

        z8 = 0;

        z9 = z7;

        if z7 == 0 goto label14;

        i23 = i16;

        i24 = i17;

        z8 = 0;

        z9 = z7;

        if i0 <= 4 goto label14;

        r2 = staticinvoke <android.webkit.FindAddress: java.util.regex.MatchResult matchState(java.lang.String,int)>(r0, i21);

        i23 = i16;

        i24 = i17;

        z8 = 0;

        z9 = z7;

        if r2 == null goto label14;

        $z2 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("et");

        if $z2 == 0 goto label12;

        $r8 = interfaceinvoke r2.<java.util.regex.MatchResult: java.lang.String group(int)>(0);

        $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("al");

        if $z5 == 0 goto label12;

        i21 = interfaceinvoke r2.<java.util.regex.MatchResult: int end()>();

        goto label15;

     label12:
        $r6 = <android.webkit.FindAddress: java.util.regex.Pattern sWordRe>;

        r12 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $i7 = interfaceinvoke r2.<java.util.regex.MatchResult: int end()>();

        $z3 = virtualinvoke r12.<java.util.regex.Matcher: boolean find(int)>($i7);

        if $z3 == 0 goto label13;

        i23 = i16;

        i24 = i17;

        z8 = 0;

        z9 = z7;

        $r7 = virtualinvoke r12.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $z4 = staticinvoke <android.webkit.FindAddress: boolean isValidZipCode(java.lang.String,java.util.regex.MatchResult)>($r7, r2);

        if $z4 == 0 goto label14;

        $i8 = virtualinvoke r12.<java.util.regex.Matcher: int end()>();

        return $i8;

     label13:
        i24 = interfaceinvoke r2.<java.util.regex.MatchResult: int end()>();

        z9 = z7;

        z8 = 0;

        i23 = i16;

     label14:
        r11 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        i25 = virtualinvoke r1.<java.util.regex.Matcher: int end()>();

        i16 = i23;

        i17 = i24;

        i18 = i25;

        z6 = z8;

        z7 = z9;

        i20 = i0;

        goto label01;

     label15:
        if i17 <= 0 goto label16;

        return i17;

     label16:
        if i16 <= 0 goto label17;

        i21 = i16;

        goto label17;

     label17:
        $i2 = neg i21;

        return $i2;
    }

    private static boolean checkHouseNumber(java.lang.String)
    {
        java.lang.String r0, $r2, $r3, r5, r7;
        int $i0, $i1, $i2, $i3, i5, i6, i7, i8, i9;
        java.util.regex.Pattern $r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Locale $r4;
        char $c4;
        java.util.regex.Matcher r6;

        r5 := @parameter0: java.lang.String;

        i5 = 0;

        i6 = 0;

     label01:
        $i0 = virtualinvoke r5.<java.lang.String: int length()>();

        if i6 >= $i0 goto label03;

        i7 = i5;

        $c4 = virtualinvoke r5.<java.lang.String: char charAt(int)>(i6);

        $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4);

        if $z5 == 0 goto label02;

        i7 = i5 + 1;

     label02:
        i6 = i6 + 1;

        i5 = i7;

        goto label01;

     label03:
        if i5 <= 5 goto label04;

        return 0;

     label04:
        $r1 = <android.webkit.FindAddress: java.util.regex.Pattern sSuffixedNumberRe>;

        r6 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r5);

        $z0 = virtualinvoke r6.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label15;

        $r2 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2);

        if i8 != 0 goto label05;

        return 0;

     label05:
        $r3 = virtualinvoke r6.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $r4 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r0 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>($r4);

        i9 = i8 % 10;

        r7 = "th";

        if i9 == 1 goto label12;

        if i9 == 2 goto label09;

        if i9 == 3 goto label06;

        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("th");

        return $z4;

     label06:
        $i3 = i8 % 100;

        if $i3 != 13 goto label07;

        goto label08;

     label07:
        r7 = "rd";

     label08:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        return $z3;

     label09:
        $i2 = i8 % 100;

        if $i2 != 12 goto label10;

        goto label11;

     label10:
        r7 = "nd";

     label11:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        return $z2;

     label12:
        $i1 = i8 % 100;

        if $i1 != 11 goto label13;

        goto label14;

     label13:
        r7 = "st";

     label14:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        return $z1;

     label15:
        return 1;
    }

    static java.lang.String findAddress(java.lang.String)
    {
        java.lang.String r0, $r3, $r4;
        java.util.regex.Matcher r1;
        int i0, i1, i2;
        java.util.regex.Pattern $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r2 = <android.webkit.FindAddress: java.util.regex.Pattern sHouseNumberRe>;

        r1 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        i1 = 0;

     label1:
        $z1 = virtualinvoke r1.<java.util.regex.Matcher: boolean find(int)>(i1);

        if $z1 == 0 goto label4;

        $r3 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(0);

        $z0 = staticinvoke <android.webkit.FindAddress: boolean checkHouseNumber(java.lang.String)>($r3);

        if $z0 == 0 goto label3;

        i0 = virtualinvoke r1.<java.util.regex.Matcher: int start()>();

        i2 = staticinvoke <android.webkit.FindAddress: int attemptMatch(java.lang.String,java.util.regex.MatchResult)>(r0, r1);

        if i2 <= 0 goto label2;

        $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, i2);

        return $r4;

     label2:
        i1 = neg i2;

        goto label1;

     label3:
        i1 = virtualinvoke r1.<java.util.regex.Matcher: int end()>();

        goto label1;

     label4:
        return null;
    }

    private static boolean isValidLocationName(java.lang.String)
    {
        java.lang.String r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $r1 = <android.webkit.FindAddress: java.util.regex.Pattern sLocationNameRe>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    private static boolean isValidZipCode(java.lang.String, java.util.regex.MatchResult)
    {
        java.lang.String r0, $r6;
        java.util.regex.MatchResult r1;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        boolean $z0, $z1, z2;
        android.webkit.FindAddress$ZipRange[] $r4;
        android.webkit.FindAddress$ZipRange $r5;
        int i0, i1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.regex.MatchResult;

        z2 = 0;

        if r1 != null goto label1;

        return 0;

     label1:
        i0 = interfaceinvoke r1.<java.util.regex.MatchResult: int groupCount()>();

     label2:
        i1 = i0;

        if i0 <= 0 goto label4;

        i1 = i0 - 1;

        $r6 = interfaceinvoke r1.<java.util.regex.MatchResult: java.lang.String group(int)>(i0);

        if $r6 == null goto label3;

        goto label4;

     label3:
        i0 = i1;

        goto label2;

     label4:
        $r2 = <android.webkit.FindAddress: java.util.regex.Pattern sZipCodeRe>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label5;

        $r4 = <android.webkit.FindAddress: android.webkit.FindAddress$ZipRange[] sStateZipCodeRanges>;

        $r5 = $r4[i1];

        $z1 = virtualinvoke $r5.<android.webkit.FindAddress$ZipRange: boolean matches(java.lang.String)>(r0);

        if $z1 == 0 goto label5;

        z2 = 1;

        goto label5;

     label5:
        return z2;
    }

    private static java.util.regex.MatchResult matchHouseNumber(java.lang.String, int)
    {
        int i0, $i1, $i2, $i4;
        java.util.regex.Pattern $r0;
        java.util.regex.Matcher $r1, r5;
        boolean $z0, $z1;
        java.lang.String $r2, $r3, r4;
        char $c3;
        java.util.regex.MatchResult r6;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        $r3 = ":,\"\'\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029";

        $i2 = i0 - 1;

        $c3 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i2);

        $i4 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>($c3);

        if $i4 != -1 goto label1;

        return null;

     label1:
        $r0 = <android.webkit.FindAddress: java.util.regex.Pattern sHouseNumberRe>;

        $r1 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r4);

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        r5 = virtualinvoke $r1.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>(i0, $i1);

        $z0 = virtualinvoke r5.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label2;

        r6 = virtualinvoke r5.<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>();

        $r2 = interfaceinvoke r6.<java.util.regex.MatchResult: java.lang.String group(int)>(0);

        $z1 = staticinvoke <android.webkit.FindAddress: boolean checkHouseNumber(java.lang.String)>($r2);

        if $z1 == 0 goto label2;

        return r6;

     label2:
        return null;
    }

    private static java.util.regex.MatchResult matchState(java.lang.String, int)
    {
        int i0, $i1, $i2, $i4;
        java.util.regex.Matcher r0, $r2;
        java.util.regex.Pattern $r1;
        boolean $z0;
        java.lang.String $r3, r4;
        char $c3;
        java.util.regex.MatchResult r5;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        if i0 <= 0 goto label1;

        $r3 = ",*\u2022\t \u00a0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\n\u000b\f\r\u0085\u2028\u2029";

        $i2 = i0 - 1;

        $c3 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i2);

        $i4 = virtualinvoke $r3.<java.lang.String: int indexOf(int)>($c3);

        if $i4 != -1 goto label1;

        return null;

     label1:
        $r1 = <android.webkit.FindAddress: java.util.regex.Pattern sStateRe>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r4);

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        r0 = virtualinvoke $r2.<java.util.regex.Matcher: java.util.regex.Matcher region(int,int)>(i0, $i1);

        r5 = null;

        $z0 = virtualinvoke r0.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label2;

        r5 = virtualinvoke r0.<java.util.regex.Matcher: java.util.regex.MatchResult toMatchResult()>();

     label2:
        return r5;
    }
}
