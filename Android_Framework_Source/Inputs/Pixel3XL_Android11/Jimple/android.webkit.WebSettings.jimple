public abstract class android.webkit.WebSettings extends java.lang.Object
{
    public static final int FORCE_DARK_AUTO;
    public static final int FORCE_DARK_OFF;
    public static final int FORCE_DARK_ON;
    public static final int LOAD_CACHE_ELSE_NETWORK;
    public static final int LOAD_CACHE_ONLY;
    public static final int LOAD_DEFAULT;
    public static final int LOAD_NORMAL;
    public static final int LOAD_NO_CACHE;
    public static final int MENU_ITEM_NONE;
    public static final int MENU_ITEM_PROCESS_TEXT;
    public static final int MENU_ITEM_SHARE;
    public static final int MENU_ITEM_WEB_SEARCH;
    public static final int MIXED_CONTENT_ALWAYS_ALLOW;
    public static final int MIXED_CONTENT_COMPATIBILITY_MODE;
    public static final int MIXED_CONTENT_NEVER_ALLOW;

    public void <init>()
    {
        android.webkit.WebSettings r0;

        r0 := @this: android.webkit.WebSettings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getDefaultUserAgent(android.content.Context)
    {
        android.content.Context r0;
        android.webkit.WebViewFactoryProvider $r1;
        android.webkit.WebViewFactoryProvider$Statics $r2;
        java.lang.String $r3;

        r0 := @parameter0: android.content.Context;

        $r1 = staticinvoke <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider getProvider()>();

        $r2 = interfaceinvoke $r1.<android.webkit.WebViewFactoryProvider: android.webkit.WebViewFactoryProvider$Statics getStatics()>();

        $r3 = interfaceinvoke $r2.<android.webkit.WebViewFactoryProvider$Statics: java.lang.String getDefaultUserAgent(android.content.Context)>(r0);

        return $r3;
    }

    public abstract boolean enableSmoothTransition();

    public abstract boolean getAcceptThirdPartyCookies();

    public abstract boolean getAllowContentAccess();

    public abstract boolean getAllowFileAccess();

    public abstract boolean getAllowFileAccessFromFileURLs();

    public abstract boolean getAllowUniversalAccessFromFileURLs();

    public abstract boolean getBlockNetworkImage();

    public abstract boolean getBlockNetworkLoads();

    public abstract boolean getBuiltInZoomControls();

    public abstract int getCacheMode();

    public abstract java.lang.String getCursiveFontFamily();

    public abstract boolean getDatabaseEnabled();

    public abstract java.lang.String getDatabasePath();

    public abstract int getDefaultFixedFontSize();

    public abstract int getDefaultFontSize();

    public abstract java.lang.String getDefaultTextEncodingName();

    public abstract android.webkit.WebSettings$ZoomDensity getDefaultZoom();

    public abstract int getDisabledActionModeMenuItems();

    public abstract boolean getDisplayZoomControls();

    public abstract boolean getDomStorageEnabled();

    public abstract java.lang.String getFantasyFontFamily();

    public abstract java.lang.String getFixedFontFamily();

    public int getForceDark()
    {
        android.webkit.WebSettings r0;

        r0 := @this: android.webkit.WebSettings;

        return 1;
    }

    public abstract boolean getJavaScriptCanOpenWindowsAutomatically();

    public abstract boolean getJavaScriptEnabled();

    public abstract android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm();

    public abstract boolean getLightTouchEnabled();

    public abstract boolean getLoadWithOverviewMode();

    public abstract boolean getLoadsImagesAutomatically();

    public abstract boolean getMediaPlaybackRequiresUserGesture();

    public abstract int getMinimumFontSize();

    public abstract int getMinimumLogicalFontSize();

    public abstract int getMixedContentMode();

    public abstract boolean getNavDump();

    public abstract boolean getOffscreenPreRaster();

    public abstract android.webkit.WebSettings$PluginState getPluginState();

    public abstract boolean getPluginsEnabled();

    public java.lang.String getPluginsPath()
    {
        android.webkit.WebSettings r0;

        r0 := @this: android.webkit.WebSettings;

        return "";
    }

    public abstract boolean getSafeBrowsingEnabled();

    public abstract java.lang.String getSansSerifFontFamily();

    public abstract boolean getSaveFormData();

    public abstract boolean getSavePassword();

    public abstract java.lang.String getSerifFontFamily();

    public abstract java.lang.String getStandardFontFamily();

    public android.webkit.WebSettings$TextSize getTextSize()
    {
        android.webkit.WebSettings r0;
        int i0, i1, i2, $i3, $i4, i5, i6, i7;
        android.webkit.WebSettings$TextSize[] r1;
        android.webkit.WebSettings$TextSize r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: android.webkit.WebSettings;

        entermonitor r0;

        r4 = null;

        i5 = 2147483647;

     label01:
        i0 = virtualinvoke r0.<android.webkit.WebSettings: int getTextZoom()>();

        r1 = staticinvoke <android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize[] values()>();

        i1 = lengthof r1;

     label02:
        i6 = 0;

     label03:
        if i6 >= i1 goto label08;

        r2 = r1[i6];

     label04:
        $i3 = r2.<android.webkit.WebSettings$TextSize: int value>;

        $i4 = i0 - $i3;

        i2 = staticinvoke <java.lang.Math: int abs(int)>($i4);

     label05:
        if i2 != 0 goto label06;

        exitmonitor r0;

        return r2;

     label06:
        i7 = i5;

        if i2 >= i5 goto label07;

        i7 = i2;

        r4 = r2;

     label07:
        i6 = i6 + 1;

        i5 = i7;

        goto label03;

     label08:
        if r4 == null goto label09;

        goto label10;

     label09:
        r4 = <android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize NORMAL>;

     label10:
        exitmonitor r0;

        return r4;

     label11:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
    }

    public abstract int getTextZoom();

    public boolean getUseDoubleTree()
    {
        android.webkit.WebSettings r0;

        r0 := @this: android.webkit.WebSettings;

        return 0;
    }

    public abstract boolean getUseWebViewBackgroundForOverscrollBackground();

    public abstract boolean getUseWideViewPort();

    public abstract int getUserAgent();

    public abstract java.lang.String getUserAgentString();

    public abstract boolean getVideoOverlayForEmbeddedEncryptedVideoEnabled();

    public abstract void setAcceptThirdPartyCookies(boolean);

    public abstract void setAllowContentAccess(boolean);

    public abstract void setAllowFileAccess(boolean);

    public abstract void setAllowFileAccessFromFileURLs(boolean);

    public abstract void setAllowUniversalAccessFromFileURLs(boolean);

    public abstract void setAppCacheEnabled(boolean);

    public abstract void setAppCacheMaxSize(long);

    public abstract void setAppCachePath(java.lang.String);

    public abstract void setBlockNetworkImage(boolean);

    public abstract void setBlockNetworkLoads(boolean);

    public abstract void setBuiltInZoomControls(boolean);

    public abstract void setCacheMode(int);

    public abstract void setCursiveFontFamily(java.lang.String);

    public abstract void setDatabaseEnabled(boolean);

    public abstract void setDatabasePath(java.lang.String);

    public abstract void setDefaultFixedFontSize(int);

    public abstract void setDefaultFontSize(int);

    public abstract void setDefaultTextEncodingName(java.lang.String);

    public abstract void setDefaultZoom(android.webkit.WebSettings$ZoomDensity);

    public abstract void setDisabledActionModeMenuItems(int);

    public abstract void setDisplayZoomControls(boolean);

    public abstract void setDomStorageEnabled(boolean);

    public abstract void setEnableSmoothTransition(boolean);

    public abstract void setFantasyFontFamily(java.lang.String);

    public abstract void setFixedFontFamily(java.lang.String);

    public void setForceDark(int)
    {
        android.webkit.WebSettings r0;
        int i0;

        r0 := @this: android.webkit.WebSettings;

        i0 := @parameter0: int;

        return;
    }

    public abstract void setGeolocationDatabasePath(java.lang.String);

    public abstract void setGeolocationEnabled(boolean);

    public abstract void setJavaScriptCanOpenWindowsAutomatically(boolean);

    public abstract void setJavaScriptEnabled(boolean);

    public abstract void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm);

    public abstract void setLightTouchEnabled(boolean);

    public abstract void setLoadWithOverviewMode(boolean);

    public abstract void setLoadsImagesAutomatically(boolean);

    public abstract void setMediaPlaybackRequiresUserGesture(boolean);

    public abstract void setMinimumFontSize(int);

    public abstract void setMinimumLogicalFontSize(int);

    public abstract void setMixedContentMode(int);

    public abstract void setNavDump(boolean);

    public abstract void setNeedInitialFocus(boolean);

    public abstract void setOffscreenPreRaster(boolean);

    public abstract void setPluginState(android.webkit.WebSettings$PluginState);

    public abstract void setPluginsEnabled(boolean);

    public void setPluginsPath(java.lang.String)
    {
        android.webkit.WebSettings r0;
        java.lang.String r1;

        r0 := @this: android.webkit.WebSettings;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public abstract void setRenderPriority(android.webkit.WebSettings$RenderPriority);

    public abstract void setSafeBrowsingEnabled(boolean);

    public abstract void setSansSerifFontFamily(java.lang.String);

    public abstract void setSaveFormData(boolean);

    public abstract void setSavePassword(boolean);

    public abstract void setSerifFontFamily(java.lang.String);

    public abstract void setStandardFontFamily(java.lang.String);

    public abstract void setSupportMultipleWindows(boolean);

    public abstract void setSupportZoom(boolean);

    public void setTextSize(android.webkit.WebSettings$TextSize)
    {
        android.webkit.WebSettings r0;
        int $i0;
        java.lang.Throwable $r1;
        android.webkit.WebSettings$TextSize r2;

        r0 := @this: android.webkit.WebSettings;

        r2 := @parameter0: android.webkit.WebSettings$TextSize;

        entermonitor r0;

     label1:
        $i0 = r2.<android.webkit.WebSettings$TextSize: int value>;

        virtualinvoke r0.<android.webkit.WebSettings: void setTextZoom(int)>($i0);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public abstract void setTextZoom(int);

    public void setUseDoubleTree(boolean)
    {
        android.webkit.WebSettings r0;
        boolean z0;

        r0 := @this: android.webkit.WebSettings;

        z0 := @parameter0: boolean;

        return;
    }

    public abstract void setUseWebViewBackgroundForOverscrollBackground(boolean);

    public abstract void setUseWideViewPort(boolean);

    public abstract void setUserAgent(int);

    public abstract void setUserAgentString(java.lang.String);

    public abstract void setVideoOverlayForEmbeddedEncryptedVideoEnabled(boolean);

    public abstract boolean supportMultipleWindows();

    public abstract boolean supportZoom();

    public static void <clinit>()
    {
        <android.webkit.WebSettings: int MIXED_CONTENT_NEVER_ALLOW> = 1;

        <android.webkit.WebSettings: int MIXED_CONTENT_COMPATIBILITY_MODE> = 2;

        <android.webkit.WebSettings: int MIXED_CONTENT_ALWAYS_ALLOW> = 0;

        <android.webkit.WebSettings: int MENU_ITEM_WEB_SEARCH> = 2;

        <android.webkit.WebSettings: int MENU_ITEM_SHARE> = 1;

        <android.webkit.WebSettings: int MENU_ITEM_PROCESS_TEXT> = 4;

        <android.webkit.WebSettings: int MENU_ITEM_NONE> = 0;

        <android.webkit.WebSettings: int LOAD_NO_CACHE> = 2;

        <android.webkit.WebSettings: int LOAD_NORMAL> = 0;

        <android.webkit.WebSettings: int LOAD_DEFAULT> = -1;

        <android.webkit.WebSettings: int LOAD_CACHE_ONLY> = 3;

        <android.webkit.WebSettings: int LOAD_CACHE_ELSE_NETWORK> = 1;

        <android.webkit.WebSettings: int FORCE_DARK_ON> = 2;

        <android.webkit.WebSettings: int FORCE_DARK_OFF> = 0;

        <android.webkit.WebSettings: int FORCE_DARK_AUTO> = 1;

        return;
    }
}
