public final class android.webkit.WebViewDelegate extends java.lang.Object
{

    void <init>()
    {
        android.webkit.WebViewDelegate r0;

        r0 := @this: android.webkit.WebViewDelegate;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void addWebViewAssetPath(android.content.Context)
    {
        android.webkit.WebViewDelegate r0;
        java.lang.String[] r1, $r5, r11;
        android.content.pm.ApplicationInfo r2, $r4;
        int i0, i1;
        android.content.pm.PackageInfo $r3;
        android.app.ResourcesManager $r6;
        java.lang.String $r7, $r8;
        java.lang.Object[] $r9;
        android.content.Context r10;

        r0 := @this: android.webkit.WebViewDelegate;

        r10 := @parameter0: android.content.Context;

        $r3 = staticinvoke <android.webkit.WebViewFactory: android.content.pm.PackageInfo getLoadedPackageInfo()>();

        $r4 = $r3.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r1 = virtualinvoke $r4.<android.content.pm.ApplicationInfo: java.lang.String[] getAllApkPaths()>();

        r2 = virtualinvoke r10.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        r11 = r2.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r8 = r1[i1];

        $r9 = staticinvoke <com.android.internal.util.ArrayUtils: java.lang.Object[] appendElement(java.lang.Class,java.lang.Object[],java.lang.Object)>(class "Ljava/lang/String;", r11, $r8);

        r11 = (java.lang.String[]) $r9;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r5 = r2.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles>;

        if r11 == $r5 goto label3;

        r2.<android.content.pm.ApplicationInfo: java.lang.String[] sharedLibraryFiles> = r11;

        $r6 = staticinvoke <android.app.ResourcesManager: android.app.ResourcesManager getInstance()>();

        $r7 = virtualinvoke r2.<android.content.pm.ApplicationInfo: java.lang.String getBaseResourcePath()>();

        virtualinvoke $r6.<android.app.ResourcesManager: void appendLibAssetsForMainAssetPath(java.lang.String,java.lang.String[])>($r7, r1);

     label3:
        return;
    }

    public void callDrawGlFunction(android.graphics.Canvas, long)
    {
        android.webkit.WebViewDelegate r0;
        android.graphics.Canvas r1;
        long l0;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5, $r9;
        java.lang.IllegalArgumentException $r8;
        android.graphics.RecordingCanvas $r10;

        r0 := @this: android.webkit.WebViewDelegate;

        r1 := @parameter0: android.graphics.Canvas;

        l0 := @parameter1: long;

        $z0 = r1 instanceof android.graphics.RecordingCanvas;

        if $z0 == 0 goto label1;

        $r10 = (android.graphics.RecordingCanvas) r1;

        virtualinvoke $r10.<android.graphics.RecordingCanvas: void drawGLFunctor2(long,java.lang.Runnable)>(l0, null);

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a DisplayList canvas");

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public void callDrawGlFunction(android.graphics.Canvas, long, java.lang.Runnable)
    {
        android.webkit.WebViewDelegate r0;
        android.graphics.Canvas r1;
        long l0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.Class $r3;
        java.lang.String $r4, $r8;
        java.lang.IllegalArgumentException $r7;
        android.graphics.RecordingCanvas $r9;
        java.lang.Runnable r10;

        r0 := @this: android.webkit.WebViewDelegate;

        r1 := @parameter0: android.graphics.Canvas;

        l0 := @parameter1: long;

        r10 := @parameter2: java.lang.Runnable;

        $z0 = r1 instanceof android.graphics.RecordingCanvas;

        if $z0 == 0 goto label1;

        $r9 = (android.graphics.RecordingCanvas) r1;

        virtualinvoke $r9.<android.graphics.RecordingCanvas: void drawGLFunctor2(long,java.lang.Runnable)>(l0, r10);

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a DisplayList canvas");

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public boolean canInvokeDrawGlFunctor(android.view.View)
    {
        android.webkit.WebViewDelegate r0;
        android.view.View r1;

        r0 := @this: android.webkit.WebViewDelegate;

        r1 := @parameter0: android.view.View;

        return 1;
    }

    public void detachDrawGlFunctor(android.view.View, long)
    {
        android.webkit.WebViewDelegate r0;
        long l0;
        byte $b1;
        android.view.View r1;
        android.view.ViewRootImpl r2;

        r0 := @this: android.webkit.WebViewDelegate;

        r1 := @parameter0: android.view.View;

        l0 := @parameter1: long;

        r2 = virtualinvoke r1.<android.view.View: android.view.ViewRootImpl getViewRootImpl()>();

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label1;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.ViewRootImpl: void detachFunctor(long)>(l0);

     label1:
        return;
    }

    public void drawWebViewFunctor(android.graphics.Canvas, int)
    {
        android.webkit.WebViewDelegate r0;
        android.graphics.Canvas r1;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.Class $r4;
        java.lang.String $r5, $r9;
        java.lang.IllegalArgumentException $r8;
        android.graphics.RecordingCanvas $r10;

        r0 := @this: android.webkit.WebViewDelegate;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        $z0 = r1 instanceof android.graphics.RecordingCanvas;

        if $z0 == 0 goto label1;

        $r10 = (android.graphics.RecordingCanvas) r1;

        virtualinvoke $r10.<android.graphics.RecordingCanvas: void drawWebViewFunctor(int)>(i0);

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a RecordingCanvas canvas");

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public android.app.Application getApplication()
    {
        android.webkit.WebViewDelegate r0;
        android.app.Application $r1;

        r0 := @this: android.webkit.WebViewDelegate;

        $r1 = staticinvoke <android.app.ActivityThread: android.app.Application currentApplication()>();

        return $r1;
    }

    public java.lang.String getDataDirectorySuffix()
    {
        android.webkit.WebViewDelegate r0;
        java.lang.String $r1;

        r0 := @this: android.webkit.WebViewDelegate;

        $r1 = staticinvoke <android.webkit.WebViewFactory: java.lang.String getDataDirectorySuffix()>();

        return $r1;
    }

    public java.lang.String getErrorString(android.content.Context, int)
    {
        android.webkit.WebViewDelegate r0;
        android.content.Context r1;
        int i0;
        java.lang.String $r2;

        r0 := @this: android.webkit.WebViewDelegate;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r2 = staticinvoke <android.webkit.LegacyErrorStrings: java.lang.String getString(int,android.content.Context)>(i0, r1);

        return $r2;
    }

    public int getPackageId(android.content.res.Resources, java.lang.String)
    {
        android.webkit.WebViewDelegate r0;
        java.lang.String r1, $r7, $r9;
        android.content.res.AssetManager $r2;
        int $i0, $i1, i2;
        java.lang.StringBuilder $r3;
        java.lang.RuntimeException $r6;
        java.lang.Object $r8;
        boolean $z0;
        android.content.res.Resources r10;
        android.util.SparseArray r11;

        r0 := @this: android.webkit.WebViewDelegate;

        r10 := @parameter0: android.content.res.Resources;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r10.<android.content.res.Resources: android.content.res.AssetManager getAssets()>();

        r11 = virtualinvoke $r2.<android.content.res.AssetManager: android.util.SparseArray getAssignedPackageIdentifiers()>();

        i2 = 0;

     label1:
        $i0 = virtualinvoke r11.<android.util.SparseArray: int size()>();

        if i2 >= $i0 goto label3;

        $r8 = virtualinvoke r11.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r9 = (java.lang.String) $r8;

        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r11.<android.util.SparseArray: int keyAt(int)>(i2);

        return $i1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package not found: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    public void invokeDrawGlFunctor(android.view.View, long, boolean)
    {
        android.webkit.WebViewDelegate r0;
        android.view.View r1;
        long l0;
        boolean z0;

        r0 := @this: android.webkit.WebViewDelegate;

        r1 := @parameter0: android.view.View;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        staticinvoke <android.view.ViewRootImpl: void invokeFunctor(long,boolean)>(l0, z0);

        return;
    }

    public boolean isMultiProcessEnabled()
    {
        android.webkit.WebViewDelegate r0;
        boolean z0;
        android.webkit.IWebViewUpdateService $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: android.webkit.WebViewDelegate;

     label1:
        $r2 = staticinvoke <android.webkit.WebViewFactory: android.webkit.IWebViewUpdateService getUpdateService()>();

        z0 = interfaceinvoke $r2.<android.webkit.IWebViewUpdateService: boolean isMultiProcessEnabled()>();

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isTraceTagEnabled()
    {
        android.webkit.WebViewDelegate r0;
        boolean $z0;

        r0 := @this: android.webkit.WebViewDelegate;

        $z0 = staticinvoke <android.os.Trace: boolean isTagEnabled(long)>(16L);

        return $z0;
    }

    public void setOnTraceEnabledChangeListener(android.webkit.WebViewDelegate$OnTraceEnabledChangeListener)
    {
        android.webkit.WebViewDelegate r0;
        android.webkit.WebViewDelegate$OnTraceEnabledChangeListener r1;
        android.webkit.WebViewDelegate$1 $r2;

        r0 := @this: android.webkit.WebViewDelegate;

        r1 := @parameter0: android.webkit.WebViewDelegate$OnTraceEnabledChangeListener;

        $r2 = new android.webkit.WebViewDelegate$1;

        specialinvoke $r2.<android.webkit.WebViewDelegate$1: void <init>(android.webkit.WebViewDelegate,android.webkit.WebViewDelegate$OnTraceEnabledChangeListener)>(r0, r1);

        staticinvoke <android.os.SystemProperties: void addChangeCallback(java.lang.Runnable)>($r2);

        return;
    }
}
