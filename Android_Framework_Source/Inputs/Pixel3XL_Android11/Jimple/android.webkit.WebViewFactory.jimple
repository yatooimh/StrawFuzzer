public final class android.webkit.WebViewFactory extends java.lang.Object
{
    private static final java.lang.String CHROMIUM_WEBVIEW_FACTORY;
    private static final java.lang.String CHROMIUM_WEBVIEW_FACTORY_METHOD;
    private static final boolean DEBUG;
    public static final int LIBLOAD_ADDRESS_SPACE_NOT_RESERVED;
    public static final int LIBLOAD_FAILED_JNI_CALL;
    public static final int LIBLOAD_FAILED_LISTING_WEBVIEW_PACKAGES;
    public static final int LIBLOAD_FAILED_TO_FIND_NAMESPACE;
    public static final int LIBLOAD_FAILED_TO_LOAD_LIBRARY;
    public static final int LIBLOAD_FAILED_TO_OPEN_RELRO_FILE;
    public static final int LIBLOAD_FAILED_WAITING_FOR_RELRO;
    public static final int LIBLOAD_FAILED_WAITING_FOR_WEBVIEW_REASON_UNKNOWN;
    public static final int LIBLOAD_SUCCESS;
    public static final int LIBLOAD_WRONG_PACKAGE_NAME;
    private static final java.lang.String LOGTAG;
    private static java.lang.String WEBVIEW_UPDATE_SERVICE_NAME;
    private static java.lang.String sDataDirectorySuffix;
    private static android.content.pm.PackageInfo sPackageInfo;
    private static android.webkit.WebViewFactoryProvider sProviderInstance;
    private static final java.lang.Object sProviderLock;
    private static boolean sWebViewDisabled;
    private static java.lang.Boolean sWebViewSupported;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <android.webkit.WebViewFactory: java.lang.String LOGTAG> = "WebViewFactory";

        <android.webkit.WebViewFactory: int LIBLOAD_WRONG_PACKAGE_NAME> = 1;

        <android.webkit.WebViewFactory: int LIBLOAD_SUCCESS> = 0;

        <android.webkit.WebViewFactory: int LIBLOAD_FAILED_WAITING_FOR_WEBVIEW_REASON_UNKNOWN> = 8;

        <android.webkit.WebViewFactory: int LIBLOAD_FAILED_WAITING_FOR_RELRO> = 3;

        <android.webkit.WebViewFactory: int LIBLOAD_FAILED_TO_OPEN_RELRO_FILE> = 5;

        <android.webkit.WebViewFactory: int LIBLOAD_FAILED_TO_LOAD_LIBRARY> = 6;

        <android.webkit.WebViewFactory: int LIBLOAD_FAILED_TO_FIND_NAMESPACE> = 10;

        <android.webkit.WebViewFactory: int LIBLOAD_FAILED_LISTING_WEBVIEW_PACKAGES> = 4;

        <android.webkit.WebViewFactory: int LIBLOAD_FAILED_JNI_CALL> = 7;

        <android.webkit.WebViewFactory: int LIBLOAD_ADDRESS_SPACE_NOT_RESERVED> = 2;

        <android.webkit.WebViewFactory: boolean DEBUG> = 0;

        <android.webkit.WebViewFactory: java.lang.String CHROMIUM_WEBVIEW_FACTORY_METHOD> = "create";

        <android.webkit.WebViewFactory: java.lang.String CHROMIUM_WEBVIEW_FACTORY> = "com.android.webview.chromium.WebViewChromiumFactoryProviderForR";

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <android.webkit.WebViewFactory: java.lang.Object sProviderLock> = $r0;

        <android.webkit.WebViewFactory: java.lang.String WEBVIEW_UPDATE_SERVICE_NAME> = "webviewupdate";

        return;
    }

    public void <init>()
    {
        android.webkit.WebViewFactory r0;

        r0 := @this: android.webkit.WebViewFactory;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void disableWebView()
    {
        java.lang.Object r0;
        android.webkit.WebViewFactoryProvider $r1;
        java.lang.Throwable $r2;
        java.lang.IllegalStateException r3;

        r0 = <android.webkit.WebViewFactory: java.lang.Object sProviderLock>;

        entermonitor r0;

     label1:
        $r1 = <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider sProviderInstance>;

        if $r1 != null goto label3;

        <android.webkit.WebViewFactory: boolean sWebViewDisabled> = 1;

        exitmonitor r0;

     label2:
        return;

     label3:
        r3 = new java.lang.IllegalStateException;

        specialinvoke r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t disable WebView: WebView already initialized");

        throw r3;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label4 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    static java.lang.String getDataDirectorySuffix()
    {
        java.lang.Object r0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 = <android.webkit.WebViewFactory: java.lang.Object sProviderLock>;

        entermonitor r0;

     label1:
        r2 = <android.webkit.WebViewFactory: java.lang.String sDataDirectorySuffix>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static android.content.pm.PackageInfo getLoadedPackageInfo()
    {
        java.lang.Object r0;
        java.lang.Throwable $r1;
        android.content.pm.PackageInfo r2;

        r0 = <android.webkit.WebViewFactory: java.lang.Object sProviderLock>;

        entermonitor r0;

     label1:
        r2 = <android.webkit.WebViewFactory: android.content.pm.PackageInfo sPackageInfo>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static android.webkit.WebViewFactoryProvider getProvider()
    {
        java.lang.Object r0, $r4;
        int i0;
        android.webkit.WebViewFactoryProvider $r1, r10, r16;
        boolean $z0, $z1;
        java.lang.Class[] $r2;
        java.lang.Object[] $r3;
        java.lang.Exception $r5, $r7;
        java.lang.Throwable $r6, $r8, $r9;
        java.lang.Class r11;
        java.lang.reflect.Method r12, r13;
        android.webkit.WebViewDelegate r15;
        android.util.AndroidRuntimeException r19;
        java.lang.IllegalStateException r21;
        java.lang.UnsupportedOperationException r22, r23;

        r0 = <android.webkit.WebViewFactory: java.lang.Object sProviderLock>;

        entermonitor r0;

     label01:
        $r1 = <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider sProviderInstance>;

        if $r1 == null goto label03;

        r10 = <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider sProviderInstance>;

        exitmonitor r0;

     label02:
        return r10;

     label03:
        i0 = staticinvoke <android.os.Process: int myUid()>();

     label04:
        if i0 == 0 goto label25;

        if i0 == 1000 goto label25;

        if i0 == 1001 goto label25;

        if i0 == 1027 goto label25;

        if i0 == 1002 goto label25;

     label05:
        $z0 = staticinvoke <android.webkit.WebViewFactory: boolean isWebViewSupported()>();

        if $z0 == 0 goto label24;

        $z1 = <android.webkit.WebViewFactory: boolean sWebViewDisabled>;

        if $z1 != 0 goto label23;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "WebViewFactory.getProvider()");

     label06:
        r11 = staticinvoke <android.webkit.WebViewFactory: java.lang.Class getProviderClass()>();

     label07:
        r12 = null;

     label08:
        $r2 = newarray (java.lang.Class)[1];

        $r2[0] = class "Landroid/webkit/WebViewDelegate;";

        r13 = virtualinvoke r11.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("create", $r2);

     label09:
        r12 = r13;

        goto label11;

     label10:
        $r5 := @caughtexception;

     label11:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "WebViewFactoryProvider invocation");

     label12:
        r15 = new android.webkit.WebViewDelegate;

        specialinvoke r15.<android.webkit.WebViewDelegate: void <init>()>();

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r15;

        $r4 = virtualinvoke r12.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r3);

        r16 = (android.webkit.WebViewFactoryProvider) $r4;

        <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider sProviderInstance> = r16;

     label13:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label14:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        exitmonitor r0;

     label15:
        return r16;

     label16:
        $r6 := @caughtexception;

        goto label19;

     label17:
        $r7 := @caughtexception;

     label18:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error instantiating provider", $r7);

        r19 = new android.util.AndroidRuntimeException;

        specialinvoke r19.<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>($r7);

        throw r19;

     label19:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label20:
        throw $r6;

     label21:
        $r9 := @caughtexception;

     label22:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        throw $r9;

     label23:
        r21 = new java.lang.IllegalStateException;

        specialinvoke r21.<java.lang.IllegalStateException: void <init>(java.lang.String)>("WebView.disableWebView() was called: WebView is disabled");

        throw r21;

     label24:
        r22 = new java.lang.UnsupportedOperationException;

        specialinvoke r22.<java.lang.UnsupportedOperationException: void <init>()>();

        throw r22;

     label25:
        r23 = new java.lang.UnsupportedOperationException;

        specialinvoke r23.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("For security reasons, WebView is not allowed in privileged processes");

        throw r23;

     label26:
        $r8 := @caughtexception;

     label27:
        exitmonitor r0;

     label28:
        throw $r8;

        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label03 to label04 with label26;
        catch java.lang.Throwable from label05 to label06 with label26;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.lang.Exception from label08 to label09 with label10;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.lang.Exception from label12 to label13 with label17;
        catch java.lang.Throwable from label12 to label13 with label16;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label14 to label15 with label26;
        catch java.lang.Throwable from label18 to label19 with label16;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label20 to label21 with label21;
        catch java.lang.Throwable from label22 to label23 with label26;
        catch java.lang.Throwable from label23 to label24 with label26;
        catch java.lang.Throwable from label24 to label25 with label26;
        catch java.lang.Throwable from label25 to label26 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
    }

    private static java.lang.Class getProviderClass()
    {
        java.lang.String[] r0;
        int i0, i7;
        android.content.pm.PackageInfo $r2, $r6, $r10, $r15;
        java.lang.String $r3, $r7, $r13, $r17, r28;
        long $l1;
        android.content.pm.ApplicationInfo $r14, $r16;
        android.content.res.AssetManager $r18;
        java.lang.Throwable $r19, $r22, $r24;
        android.webkit.WebViewFactory$MissingWebViewPackageException $r20;
        android.util.AndroidRuntimeException $r21, r34;
        java.lang.ClassNotFoundException $r23;
        android.app.Application r25;
        android.content.Context r26;
        java.lang.StringBuilder r27;
        java.lang.ClassLoader r29;
        java.lang.Class r30;

        r25 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "WebViewFactory.getWebViewContextAndSetProvider()");

     label02:
        r26 = staticinvoke <android.webkit.WebViewFactory: android.content.Context getWebViewContextAndSetProvider()>();

     label03:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label04:
        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading ");

        $r2 = <android.webkit.WebViewFactory: android.content.pm.PackageInfo sPackageInfo>;

        $r3 = $r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version ");

        $r6 = <android.webkit.WebViewFactory: android.content.pm.PackageInfo sPackageInfo>;

        $r7 = $r6.<android.content.pm.PackageInfo: java.lang.String versionName>;

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (code ");

        $r10 = <android.webkit.WebViewFactory: android.content.pm.PackageInfo sPackageInfo>;

        $l1 = virtualinvoke $r10.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r13 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("WebViewFactory", $r13);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "WebViewFactory.getChromiumProviderClass()");

     label05:
        $r14 = virtualinvoke r26.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        r0 = virtualinvoke $r14.<android.content.pm.ApplicationInfo: java.lang.String[] getAllApkPaths()>();

        i0 = lengthof r0;

     label06:
        i7 = 0;

     label07:
        if i7 >= i0 goto label10;

        r28 = r0[i7];

     label08:
        $r18 = virtualinvoke r25.<android.app.Application: android.content.res.AssetManager getAssets()>();

        virtualinvoke $r18.<android.content.res.AssetManager: int addAssetPathAsSharedLibrary(java.lang.String)>(r28);

     label09:
        i7 = i7 + 1;

        goto label07;

     label10:
        r29 = virtualinvoke r26.<android.content.Context: java.lang.ClassLoader getClassLoader()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "WebViewFactory.loadNativeLibrary()");

        $r15 = <android.webkit.WebViewFactory: android.content.pm.PackageInfo sPackageInfo>;

        $r16 = $r15.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r17 = staticinvoke <android.webkit.WebViewFactory: java.lang.String getWebViewLibrary(android.content.pm.ApplicationInfo)>($r16);

        staticinvoke <android.webkit.WebViewLibraryLoader: int loadNativeLibrary(java.lang.ClassLoader,java.lang.String)>(r29, $r17);

        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "Class.forName()");

     label11:
        r30 = staticinvoke <android.webkit.WebViewFactory: java.lang.Class getWebViewProviderClass(java.lang.ClassLoader)>(r29);

     label12:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label13:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label14:
        return r30;

     label15:
        $r24 := @caughtexception;

     label16:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label17:
        throw $r24;

     label18:
        $r22 := @caughtexception;

        goto label21;

     label19:
        $r23 := @caughtexception;

     label20:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error loading provider", $r23);

        r34 = new android.util.AndroidRuntimeException;

        specialinvoke r34.<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>($r23);

        throw r34;

     label21:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label22:
        throw $r22;

     label23:
        $r19 := @caughtexception;

     label24:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label25:
        throw $r19;

     label26:
        $r20 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "Chromium WebView package does not exist", $r20);

        $r21 = new android.util.AndroidRuntimeException;

        specialinvoke $r21.<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>($r20);

        throw $r21;

        catch android.webkit.WebViewFactory$MissingWebViewPackageException from label01 to label02 with label26;
        catch java.lang.Throwable from label02 to label03 with label23;
        catch android.webkit.WebViewFactory$MissingWebViewPackageException from label03 to label04 with label26;
        catch android.webkit.WebViewFactory$MissingWebViewPackageException from label04 to label05 with label26;
        catch java.lang.ClassNotFoundException from label05 to label06 with label19;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.ClassNotFoundException from label08 to label09 with label19;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.lang.ClassNotFoundException from label10 to label11 with label19;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.ClassNotFoundException from label12 to label13 with label19;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch android.webkit.WebViewFactory$MissingWebViewPackageException from label13 to label14 with label26;
        catch java.lang.ClassNotFoundException from label16 to label17 with label19;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.ClassNotFoundException from label17 to label18 with label19;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label20 to label21 with label18;
        catch android.webkit.WebViewFactory$MissingWebViewPackageException from label21 to label22 with label26;
        catch android.webkit.WebViewFactory$MissingWebViewPackageException from label22 to label23 with label26;
        catch android.webkit.WebViewFactory$MissingWebViewPackageException from label24 to label25 with label26;
        catch android.webkit.WebViewFactory$MissingWebViewPackageException from label25 to label26 with label26;
    }

    public static android.webkit.IWebViewUpdateService getUpdateService()
    {
        boolean $z0;
        android.webkit.IWebViewUpdateService $r0;

        $z0 = staticinvoke <android.webkit.WebViewFactory: boolean isWebViewSupported()>();

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <android.webkit.WebViewFactory: android.webkit.IWebViewUpdateService getUpdateServiceUnchecked()>();

        return $r0;

     label1:
        return null;
    }

    static android.webkit.IWebViewUpdateService getUpdateServiceUnchecked()
    {
        java.lang.String $r0;
        android.os.IBinder $r1;
        android.webkit.IWebViewUpdateService $r2;

        $r0 = <android.webkit.WebViewFactory: java.lang.String WEBVIEW_UPDATE_SERVICE_NAME>;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>($r0);

        $r2 = staticinvoke <android.webkit.IWebViewUpdateService$Stub: android.webkit.IWebViewUpdateService asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    private static android.content.Context getWebViewContextAndSetProvider() throws android.webkit.WebViewFactory$MissingWebViewPackageException
    {
        android.webkit.IWebViewUpdateService $r0;
        int $i0, $i1, $i2;
        android.app.IActivityManager $r1;
        android.content.pm.PackageInfo $r2, $r4, $r6, r26;
        java.lang.String $r3, $r5, $r8, $r10, $r16;
        android.util.AndroidException $r11;
        java.lang.StringBuilder $r12, r24;
        android.webkit.WebViewFactory$MissingWebViewPackageException $r15, r23;
        java.lang.Throwable $r17, $r18, $r19, $r20;
        android.app.Application r21;
        android.webkit.WebViewProviderResponse r22;
        android.content.pm.PackageManager r25;
        android.content.pm.ApplicationInfo r27;
        android.content.Context r28;

        r21 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

     label01:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "WebViewUpdateService.waitForAndGetProvider()");

     label02:
        $r0 = staticinvoke <android.webkit.WebViewFactory: android.webkit.IWebViewUpdateService getUpdateService()>();

        r22 = interfaceinvoke $r0.<android.webkit.IWebViewUpdateService: android.webkit.WebViewProviderResponse waitForAndGetProvider()>();

     label03:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label04:
        $i0 = r22.<android.webkit.WebViewProviderResponse: int status>;

        if $i0 == 0 goto label07;

        $i1 = r22.<android.webkit.WebViewProviderResponse: int status>;

        if $i1 != 3 goto label06;

     label05:
        goto label07;

     label06:
        r23 = new android.webkit.WebViewFactory$MissingWebViewPackageException;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load WebView provider: ");

        $i2 = r22.<android.webkit.WebViewProviderResponse: int status>;

        $r8 = staticinvoke <android.webkit.WebViewFactory: java.lang.String getWebViewPreparationErrorReason(int)>($i2);

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r23.<android.webkit.WebViewFactory$MissingWebViewPackageException: void <init>(java.lang.String)>($r10);

        throw r23;

     label07:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "ActivityManager.addPackageDependency()");

     label08:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $r2 = r22.<android.webkit.WebViewProviderResponse: android.content.pm.PackageInfo packageInfo>;

        $r3 = $r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        interfaceinvoke $r1.<android.app.IActivityManager: void addPackageDependency(java.lang.String)>($r3);

     label09:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label10:
        r25 = virtualinvoke r21.<android.app.Application: android.content.pm.PackageManager getPackageManager()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "PackageManager.getPackageInfo()");

     label11:
        $r4 = r22.<android.webkit.WebViewProviderResponse: android.content.pm.PackageInfo packageInfo>;

        $r5 = $r4.<android.content.pm.PackageInfo: java.lang.String packageName>;

        r26 = virtualinvoke r25.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>($r5, 268444864);

     label12:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label13:
        $r6 = r22.<android.webkit.WebViewProviderResponse: android.content.pm.PackageInfo packageInfo>;

        staticinvoke <android.webkit.WebViewFactory: void verifyPackageInfo(android.content.pm.PackageInfo,android.content.pm.PackageInfo)>($r6, r26);

        r27 = r26.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16L, "initialApplication.createApplicationContext");

     label14:
        r28 = virtualinvoke r21.<android.app.Application: android.content.Context createApplicationContext(android.content.pm.ApplicationInfo,int)>(r27, 3);

        <android.webkit.WebViewFactory: android.content.pm.PackageInfo sPackageInfo> = r26;

     label15:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label16:
        return r28;

     label17:
        $r20 := @caughtexception;

     label18:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label19:
        throw $r20;

     label20:
        $r18 := @caughtexception;

     label21:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label22:
        throw $r18;

     label23:
        $r19 := @caughtexception;

     label24:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label25:
        throw $r19;

     label26:
        $r17 := @caughtexception;

     label27:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16L);

     label28:
        throw $r17;

     label29:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to load WebView provider: ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r15 = new android.webkit.WebViewFactory$MissingWebViewPackageException;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r15.<android.webkit.WebViewFactory$MissingWebViewPackageException: void <init>(java.lang.String)>($r16);

        throw $r15;

        catch android.os.RemoteException from label01 to label02 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label29;
        catch java.lang.Throwable from label02 to label03 with label26;
        catch android.os.RemoteException from label03 to label04 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label03 to label04 with label29;
        catch android.os.RemoteException from label04 to label05 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label29;
        catch android.os.RemoteException from label06 to label07 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label06 to label07 with label29;
        catch android.os.RemoteException from label07 to label08 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label07 to label08 with label29;
        catch java.lang.Throwable from label08 to label09 with label23;
        catch android.os.RemoteException from label09 to label10 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label09 to label10 with label29;
        catch android.os.RemoteException from label10 to label11 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label10 to label11 with label29;
        catch java.lang.Throwable from label11 to label12 with label20;
        catch android.os.RemoteException from label12 to label13 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label12 to label13 with label29;
        catch android.os.RemoteException from label13 to label14 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label13 to label14 with label29;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch android.os.RemoteException from label15 to label16 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label15 to label16 with label29;
        catch android.os.RemoteException from label18 to label19 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label18 to label19 with label29;
        catch android.os.RemoteException from label19 to label20 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label19 to label20 with label29;
        catch android.os.RemoteException from label21 to label22 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label21 to label22 with label29;
        catch android.os.RemoteException from label22 to label23 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label22 to label23 with label29;
        catch android.os.RemoteException from label24 to label25 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label24 to label25 with label29;
        catch android.os.RemoteException from label25 to label26 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label25 to label26 with label29;
        catch android.os.RemoteException from label27 to label28 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label27 to label28 with label29;
        catch android.os.RemoteException from label28 to label29 with label29;
        catch android.content.pm.PackageManager$NameNotFoundException from label28 to label29 with label29;
    }

    public static java.lang.String getWebViewLibrary(android.content.pm.ApplicationInfo)
    {
        android.content.pm.ApplicationInfo r0;
        android.os.Bundle $r1, $r2;
        java.lang.String $r3;

        r0 := @parameter0: android.content.pm.ApplicationInfo;

        $r1 = r0.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        if $r1 == null goto label1;

        $r2 = r0.<android.content.pm.ApplicationInfo: android.os.Bundle metaData>;

        $r3 = virtualinvoke $r2.<android.os.Bundle: java.lang.String getString(java.lang.String)>("com.android.webview.WebViewLibrary");

        return $r3;

     label1:
        return null;
    }

    private static java.lang.String getWebViewPreparationErrorReason(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 3 goto label3;

        if i0 == 4 goto label2;

        if i0 == 8 goto label1;

        return "Unknown";

     label1:
        return "Crashed for unknown reason";

     label2:
        return "No WebView installed";

     label3:
        return "Time out waiting for Relro files being created";
    }

    public static java.lang.Class getWebViewProviderClass(java.lang.ClassLoader) throws java.lang.ClassNotFoundException
    {
        java.lang.ClassLoader r0;
        java.lang.Class $r1;

        r0 := @parameter0: java.lang.ClassLoader;

        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>("com.android.webview.chromium.WebViewChromiumFactoryProviderForR", 1, r0);

        return $r1;
    }

    private static boolean isWebViewSupported()
    {
        java.lang.Boolean $r0, $r1, $r4;
        boolean $z0, $z1;
        android.app.Application $r2;
        android.content.pm.PackageManager $r3;

        $r0 = <android.webkit.WebViewFactory: java.lang.Boolean sWebViewSupported>;

        if $r0 != null goto label1;

        $r2 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        $r3 = virtualinvoke $r2.<android.app.Application: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.webview");

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        <android.webkit.WebViewFactory: java.lang.Boolean sWebViewSupported> = $r4;

     label1:
        $r1 = <android.webkit.WebViewFactory: java.lang.Boolean sWebViewSupported>;

        $z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    public static int loadWebViewNativeLibraryFromPackage(java.lang.String, java.lang.ClassLoader)
    {
        android.webkit.WebViewProviderResponse r0;
        int i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1;
        android.webkit.IWebViewUpdateService $r1;
        android.content.pm.PackageInfo $r2, $r5;
        java.lang.String $r3, $r12, r13, r16;
        android.app.Application $r4;
        android.content.pm.ApplicationInfo $r6;
        android.os.RemoteException $r7;
        android.content.pm.PackageManager$NameNotFoundException $r8;
        java.lang.StringBuilder $r9;
        java.lang.ClassLoader r14;
        android.content.pm.PackageManager r15;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: java.lang.ClassLoader;

        $z0 = staticinvoke <android.webkit.WebViewFactory: boolean isWebViewSupported()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r1 = staticinvoke <android.webkit.WebViewFactory: android.webkit.IWebViewUpdateService getUpdateService()>();

        r0 = interfaceinvoke $r1.<android.webkit.IWebViewUpdateService: android.webkit.WebViewProviderResponse waitForAndGetProvider()>();

     label2:
        $i1 = r0.<android.webkit.WebViewProviderResponse: int status>;

        if $i1 == 0 goto label3;

        $i3 = r0.<android.webkit.WebViewProviderResponse: int status>;

        if $i3 == 3 goto label3;

        $i4 = r0.<android.webkit.WebViewProviderResponse: int status>;

        return $i4;

     label3:
        $r2 = r0.<android.webkit.WebViewProviderResponse: android.content.pm.PackageInfo packageInfo>;

        $r3 = $r2.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r13);

        if $z1 != 0 goto label4;

        return 1;

     label4:
        $r4 = staticinvoke <android.app.AppGlobals: android.app.Application getInitialApplication()>();

        r15 = virtualinvoke $r4.<android.app.Application: android.content.pm.PackageManager getPackageManager()>();

     label5:
        $r5 = virtualinvoke r15.<android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>(r13, 268435584);

        $r6 = $r5.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        r16 = staticinvoke <android.webkit.WebViewFactory: java.lang.String getWebViewLibrary(android.content.pm.ApplicationInfo)>($r6);

     label6:
        i0 = staticinvoke <android.webkit.WebViewLibraryLoader: int loadNativeLibrary(java.lang.ClassLoader,java.lang.String)>(r14, r16);

        if i0 != 0 goto label7;

        $i2 = r0.<android.webkit.WebViewProviderResponse: int status>;

        return $i2;

     label7:
        return i0;

     label8:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find package ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("WebViewFactory", $r12);

        return 1;

     label9:
        $r7 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error waiting for relro creation", $r7);

        return 8;

        catch android.os.RemoteException from label1 to label2 with label9;
        catch android.content.pm.PackageManager$NameNotFoundException from label5 to label6 with label8;
    }

    public static int onWebViewProviderChanged(android.content.pm.PackageInfo)
    {
        android.content.pm.PackageInfo r0;
        java.lang.Throwable $r2;
        int i2;

        r0 := @parameter0: android.content.pm.PackageInfo;

     label1:
        i2 = staticinvoke <android.webkit.WebViewLibraryLoader: int prepareNativeLibraries(android.content.pm.PackageInfo)>(r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error preparing webview native library", $r2);

        i2 = 0;

     label4:
        staticinvoke <android.webkit.WebViewZygote: void onWebViewProviderChanged(android.content.pm.PackageInfo)>(r0);

        return i2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void prepareWebViewInZygote()
    {
        java.lang.Throwable $r1;

     label1:
        staticinvoke <android.webkit.WebViewLibraryLoader: void reserveAddressSpaceInZygote()>();

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("WebViewFactory", "error preparing native loader", $r1);

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void setDataDirectorySuffix(java.lang.String)
    {
        java.lang.Object r0;
        java.lang.IllegalArgumentException r1;
        java.lang.StringBuilder r2;
        android.webkit.WebViewFactoryProvider $r3;
        char $c0;
        int $i1;
        java.lang.String $r7, r9;
        java.lang.Throwable $r8;
        java.lang.IllegalStateException r10;

        r9 := @parameter0: java.lang.String;

        r0 = <android.webkit.WebViewFactory: java.lang.Object sProviderLock>;

        entermonitor r0;

     label1:
        $r3 = <android.webkit.WebViewFactory: android.webkit.WebViewFactoryProvider sProviderInstance>;

        if $r3 != null goto label4;

        $c0 = <java.io.File: char separatorChar>;

        $i1 = virtualinvoke r9.<java.lang.String: int indexOf(int)>($c0);

        if $i1 >= 0 goto label3;

        <android.webkit.WebViewFactory: java.lang.String sDataDirectorySuffix> = r9;

        exitmonitor r0;

     label2:
        return;

     label3:
        r1 = new java.lang.IllegalArgumentException;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Suffix ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" contains a path separator");

        $r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw r1;

     label4:
        r10 = new java.lang.IllegalStateException;

        specialinvoke r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t set data directory suffix: WebView already initialized");

        throw r10;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label4 to label5 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private static boolean signaturesEquals(android.content.pm.Signature[], android.content.pm.Signature[])
    {
        android.content.pm.Signature[] r0, r6;
        android.util.ArraySet $r2, $r3;
        boolean $z0, z3;
        android.content.pm.Signature $r4, $r5;
        int i1, i2, i3, i4;

        r6 := @parameter0: android.content.pm.Signature[];

        r0 := @parameter1: android.content.pm.Signature[];

        z3 = 0;

        if r6 != null goto label2;

        if r0 != null goto label1;

        z3 = 1;

     label1:
        return z3;

     label2:
        if r0 != null goto label3;

        return 0;

     label3:
        $r2 = new android.util.ArraySet;

        specialinvoke $r2.<android.util.ArraySet: void <init>()>();

        i1 = lengthof r6;

        i2 = 0;

     label4:
        if i2 >= i1 goto label5;

        $r5 = r6[i2];

        virtualinvoke $r2.<android.util.ArraySet: boolean add(java.lang.Object)>($r5);

        i2 = i2 + 1;

        goto label4;

     label5:
        $r3 = new android.util.ArraySet;

        specialinvoke $r3.<android.util.ArraySet: void <init>()>();

        i3 = lengthof r0;

        i4 = 0;

     label6:
        if i4 >= i3 goto label7;

        $r4 = r0[i4];

        virtualinvoke $r3.<android.util.ArraySet: boolean add(java.lang.Object)>($r4);

        i4 = i4 + 1;

        goto label6;

     label7:
        $z0 = virtualinvoke $r2.<android.util.ArraySet: boolean equals(java.lang.Object)>($r3);

        return $z0;
    }

    private static void verifyPackageInfo(android.content.pm.PackageInfo, android.content.pm.PackageInfo) throws android.webkit.WebViewFactory$MissingWebViewPackageException
    {
        android.content.pm.PackageInfo r0, r30;
        java.lang.String $r1, $r2, $r5, $r8, $r11, $r18, $r20, $r23, $r26;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r12, $r21;
        android.webkit.WebViewFactory$MissingWebViewPackageException $r10, $r17, $r25, $r29;
        long $l0, $l1, $l3, $l4;
        byte $b2;
        android.content.pm.ApplicationInfo $r19;
        android.content.pm.Signature[] $r27, $r28;

        r30 := @parameter0: android.content.pm.PackageInfo;

        r0 := @parameter1: android.content.pm.PackageInfo;

        $r2 = r30.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $r1 = r0.<android.content.pm.PackageInfo: java.lang.String packageName>;

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        if $z0 == 0 goto label4;

        $l0 = virtualinvoke r30.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        $l1 = virtualinvoke r0.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        $b2 = $l0 cmp $l1;

        if $b2 > 0 goto label3;

        $r19 = r0.<android.content.pm.PackageInfo: android.content.pm.ApplicationInfo applicationInfo>;

        $r20 = staticinvoke <android.webkit.WebViewFactory: java.lang.String getWebViewLibrary(android.content.pm.ApplicationInfo)>($r19);

        if $r20 == null goto label2;

        $r28 = r30.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        $r27 = r0.<android.content.pm.PackageInfo: android.content.pm.Signature[] signatures>;

        $z1 = staticinvoke <android.webkit.WebViewFactory: boolean signaturesEquals(android.content.pm.Signature[],android.content.pm.Signature[])>($r28, $r27);

        if $z1 == 0 goto label1;

        return;

     label1:
        $r29 = new android.webkit.WebViewFactory$MissingWebViewPackageException;

        specialinvoke $r29.<android.webkit.WebViewFactory$MissingWebViewPackageException: void <init>(java.lang.String)>("Failed to verify WebView provider, signature mismatch");

        throw $r29;

     label2:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to load an invalid WebView provider: ");

        $r23 = r0.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = new android.webkit.WebViewFactory$MissingWebViewPackageException;

        $r26 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r25.<android.webkit.WebViewFactory$MissingWebViewPackageException: void <init>(java.lang.String)>($r26);

        throw $r25;

     label3:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to verify WebView provider, version code is lower than expected: ");

        $l3 = virtualinvoke r30.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l3);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" actual: ");

        $l4 = virtualinvoke r0.<android.content.pm.PackageInfo: long getLongVersionCode()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l4);

        $r17 = new android.webkit.WebViewFactory$MissingWebViewPackageException;

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<android.webkit.WebViewFactory$MissingWebViewPackageException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to verify WebView provider, packageName mismatch, expected: ");

        $r5 = r30.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" actual: ");

        $r8 = r0.<android.content.pm.PackageInfo: java.lang.String packageName>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = new android.webkit.WebViewFactory$MissingWebViewPackageException;

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<android.webkit.WebViewFactory$MissingWebViewPackageException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }
}
