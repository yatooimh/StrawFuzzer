public final class android.widget.AbsListView$InspectionCompanion extends java.lang.Object implements android.view.inspector.InspectionCompanion
{
    private int mCacheColorHintId;
    private int mChoiceModeId;
    private int mDrawSelectorOnTopId;
    private int mFastScrollEnabledId;
    private int mListSelectorId;
    private boolean mPropertiesMapped;
    private int mScrollingCacheId;
    private int mSmoothScrollbarId;
    private int mStackFromBottomId;
    private int mTextFilterEnabledId;
    private int mTranscriptModeId;

    public void <init>()
    {
        android.widget.AbsListView$InspectionCompanion r0;

        r0 := @this: android.widget.AbsListView$InspectionCompanion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.widget.AbsListView$InspectionCompanion: boolean mPropertiesMapped> = 0;

        return;
    }

    public void mapProperties(android.view.inspector.PropertyMapper)
    {
        android.widget.AbsListView$InspectionCompanion r0;
        android.view.inspector.PropertyMapper r1;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        android.util.SparseArray $r2, $r5;
        android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI $r4, $r7;

        r0 := @this: android.widget.AbsListView$InspectionCompanion;

        r1 := @parameter0: android.view.inspector.PropertyMapper;

        $i0 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapColor(java.lang.String,int)>("cacheColorHint", 16843009);

        r0.<android.widget.AbsListView$InspectionCompanion: int mCacheColorHintId> = $i0;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "none");

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "singleChoice");

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "multipleChoice");

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(3, "multipleChoiceModal");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = new android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r4.<android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r2);

        $i1 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("choiceMode", 16843051, $r4);

        r0.<android.widget.AbsListView$InspectionCompanion: int mChoiceModeId> = $i1;

        $i2 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("drawSelectorOnTop", 16843004);

        r0.<android.widget.AbsListView$InspectionCompanion: int mDrawSelectorOnTopId> = $i2;

        $i3 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("fastScrollEnabled", 16843302);

        r0.<android.widget.AbsListView$InspectionCompanion: int mFastScrollEnabledId> = $i3;

        $i4 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("listSelector", 16843003);

        r0.<android.widget.AbsListView$InspectionCompanion: int mListSelectorId> = $i4;

        $i5 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("scrollingCache", 16843006);

        r0.<android.widget.AbsListView$InspectionCompanion: int mScrollingCacheId> = $i5;

        $i6 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("smoothScrollbar", 16843313);

        r0.<android.widget.AbsListView$InspectionCompanion: int mSmoothScrollbarId> = $i6;

        $i7 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("stackFromBottom", 16843005);

        r0.<android.widget.AbsListView$InspectionCompanion: int mStackFromBottomId> = $i7;

        $i8 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("textFilterEnabled", 16843007);

        r0.<android.widget.AbsListView$InspectionCompanion: int mTextFilterEnabledId> = $i8;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "disabled");

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "normal");

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "alwaysScroll");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        $r7 = new android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r7.<android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r5);

        $i9 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("transcriptMode", 16843008, $r7);

        r0.<android.widget.AbsListView$InspectionCompanion: int mTranscriptModeId> = $i9;

        r0.<android.widget.AbsListView$InspectionCompanion: boolean mPropertiesMapped> = 1;

        return;
    }

    public void readProperties(android.widget.AbsListView, android.view.inspector.PropertyReader)
    {
        android.widget.AbsListView$InspectionCompanion r0;
        android.widget.AbsListView r1;
        android.view.inspector.PropertyReader r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.view.inspector.InspectionCompanion$UninitializedPropertyMapException $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.graphics.drawable.Drawable $r4;

        r0 := @this: android.widget.AbsListView$InspectionCompanion;

        r1 := @parameter0: android.widget.AbsListView;

        r2 := @parameter1: android.view.inspector.PropertyReader;

        $z0 = r0.<android.widget.AbsListView$InspectionCompanion: boolean mPropertiesMapped>;

        if $z0 == 0 goto label1;

        $i0 = r0.<android.widget.AbsListView$InspectionCompanion: int mCacheColorHintId>;

        $i1 = virtualinvoke r1.<android.widget.AbsListView: int getCacheColorHint()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readColor(int,int)>($i0, $i1);

        $i2 = r0.<android.widget.AbsListView$InspectionCompanion: int mChoiceModeId>;

        $i3 = virtualinvoke r1.<android.widget.AbsListView: int getChoiceMode()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i2, $i3);

        $i4 = r0.<android.widget.AbsListView$InspectionCompanion: int mDrawSelectorOnTopId>;

        $z1 = virtualinvoke r1.<android.widget.AbsListView: boolean isDrawSelectorOnTop()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i4, $z1);

        $i5 = r0.<android.widget.AbsListView$InspectionCompanion: int mFastScrollEnabledId>;

        $z2 = virtualinvoke r1.<android.widget.AbsListView: boolean isFastScrollEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i5, $z2);

        $i6 = r0.<android.widget.AbsListView$InspectionCompanion: int mListSelectorId>;

        $r4 = virtualinvoke r1.<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i6, $r4);

        $i7 = r0.<android.widget.AbsListView$InspectionCompanion: int mScrollingCacheId>;

        $z3 = virtualinvoke r1.<android.widget.AbsListView: boolean isScrollingCacheEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i7, $z3);

        $i8 = r0.<android.widget.AbsListView$InspectionCompanion: int mSmoothScrollbarId>;

        $z4 = virtualinvoke r1.<android.widget.AbsListView: boolean isSmoothScrollbarEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i8, $z4);

        $i9 = r0.<android.widget.AbsListView$InspectionCompanion: int mStackFromBottomId>;

        $z5 = virtualinvoke r1.<android.widget.AbsListView: boolean isStackFromBottom()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i9, $z5);

        $i10 = r0.<android.widget.AbsListView$InspectionCompanion: int mTextFilterEnabledId>;

        $z6 = virtualinvoke r1.<android.widget.AbsListView: boolean isTextFilterEnabled()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i10, $z6);

        $i11 = r0.<android.widget.AbsListView$InspectionCompanion: int mTranscriptModeId>;

        $i12 = virtualinvoke r1.<android.widget.AbsListView: int getTranscriptMode()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i11, $i12);

        return;

     label1:
        $r3 = new android.view.inspector.InspectionCompanion$UninitializedPropertyMapException;

        specialinvoke $r3.<android.view.inspector.InspectionCompanion$UninitializedPropertyMapException: void <init>()>();

        throw $r3;
    }

    public volatile void readProperties(java.lang.Object, android.view.inspector.PropertyReader)
    {
        android.widget.AbsListView$InspectionCompanion r0;
        java.lang.Object r1;
        android.view.inspector.PropertyReader r2;
        android.widget.AbsListView $r3;

        r0 := @this: android.widget.AbsListView$InspectionCompanion;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: android.view.inspector.PropertyReader;

        $r3 = (android.widget.AbsListView) r1;

        virtualinvoke r0.<android.widget.AbsListView$InspectionCompanion: void readProperties(android.widget.AbsListView,android.view.inspector.PropertyReader)>($r3, r2);

        return;
    }
}
