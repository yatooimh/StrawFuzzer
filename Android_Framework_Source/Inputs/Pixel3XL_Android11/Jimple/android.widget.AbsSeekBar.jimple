public abstract class android.widget.AbsSeekBar extends android.widget.ProgressBar
{
    private static final int NO_ALPHA;
    private float mDisabledAlpha;
    private final java.util.List mGestureExclusionRects;
    private boolean mHasThumbBlendMode;
    private boolean mHasThumbTint;
    private boolean mHasTickMarkBlendMode;
    private boolean mHasTickMarkTint;
    private boolean mIsDragging;
    boolean mIsUserSeekable;
    private int mKeyProgressIncrement;
    private int mScaledTouchSlop;
    private boolean mSplitTrack;
    private final android.graphics.Rect mTempRect;
    private android.graphics.drawable.Drawable mThumb;
    private android.graphics.BlendMode mThumbBlendMode;
    private int mThumbExclusionMaxSize;
    private int mThumbOffset;
    private final android.graphics.Rect mThumbRect;
    private android.content.res.ColorStateList mThumbTintList;
    private android.graphics.drawable.Drawable mTickMark;
    private android.graphics.BlendMode mTickMarkBlendMode;
    private android.content.res.ColorStateList mTickMarkTintList;
    private float mTouchDownX;
    float mTouchProgressOffset;
    private float mTouchThumbOffset;
    private java.util.List mUserGestureExclusionRects;

    public void <init>(android.content.Context)
    {
        android.widget.AbsSeekBar r0;
        android.content.Context r1;
        android.graphics.Rect $r2, $r5;
        java.util.List $r3;
        java.util.ArrayList $r4;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.widget.ProgressBar: void <init>(android.content.Context)>(r1);

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.AbsSeekBar: android.graphics.Rect mTempRect> = $r2;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList> = null;

        r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mThumbBlendMode> = null;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTint> = 0;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbBlendMode> = 0;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mTickMarkTintList> = null;

        r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mTickMarkBlendMode> = null;

        r0.<android.widget.AbsSeekBar: boolean mHasTickMarkTint> = 0;

        r0.<android.widget.AbsSeekBar: boolean mHasTickMarkBlendMode> = 0;

        r0.<android.widget.AbsSeekBar: boolean mIsUserSeekable> = 1;

        r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement> = 1;

        r0.<android.widget.AbsSeekBar: float mTouchThumbOffset> = 0.0F;

        $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<android.widget.AbsSeekBar: java.util.List mUserGestureExclusionRects> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r0.<android.widget.AbsSeekBar: java.util.List mGestureExclusionRects> = $r4;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.AbsSeekBar: android.graphics.Rect mThumbRect> = $r5;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.widget.AbsSeekBar r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        android.graphics.Rect $r3, $r6;
        java.util.List $r4;
        java.util.ArrayList $r5;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.AbsSeekBar: android.graphics.Rect mTempRect> = $r3;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList> = null;

        r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mThumbBlendMode> = null;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTint> = 0;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbBlendMode> = 0;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mTickMarkTintList> = null;

        r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mTickMarkBlendMode> = null;

        r0.<android.widget.AbsSeekBar: boolean mHasTickMarkTint> = 0;

        r0.<android.widget.AbsSeekBar: boolean mHasTickMarkBlendMode> = 0;

        r0.<android.widget.AbsSeekBar: boolean mIsUserSeekable> = 1;

        r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement> = 1;

        r0.<android.widget.AbsSeekBar: float mTouchThumbOffset> = 0.0F;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<android.widget.AbsSeekBar: java.util.List mUserGestureExclusionRects> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.widget.AbsSeekBar: java.util.List mGestureExclusionRects> = $r5;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.AbsSeekBar: android.graphics.Rect mThumbRect> = $r6;

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.widget.AbsSeekBar r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.widget.AbsSeekBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.widget.AbsSeekBar r0;
        android.content.Context r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        android.content.res.TypedArray r2, r21;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        android.graphics.Rect $r3, $r6;
        java.util.List $r4;
        java.util.ArrayList $r5;
        int[] $r7, $r8, $r13;
        android.graphics.drawable.Drawable $r9, $r10;
        android.view.ViewConfiguration $r11;
        android.content.res.Resources $r12;
        float $f0;
        android.content.res.ColorStateList $r14, $r17;
        android.graphics.BlendMode $r15, $r16, $r18, $r19;
        android.util.AttributeSet r20;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.Context;

        r20 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.widget.ProgressBar: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r20, i0, i1);

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.AbsSeekBar: android.graphics.Rect mTempRect> = $r3;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList> = null;

        r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mThumbBlendMode> = null;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTint> = 0;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbBlendMode> = 0;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mTickMarkTintList> = null;

        r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mTickMarkBlendMode> = null;

        r0.<android.widget.AbsSeekBar: boolean mHasTickMarkTint> = 0;

        r0.<android.widget.AbsSeekBar: boolean mHasTickMarkBlendMode> = 0;

        r0.<android.widget.AbsSeekBar: boolean mIsUserSeekable> = 1;

        r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement> = 1;

        r0.<android.widget.AbsSeekBar: float mTouchThumbOffset> = 0.0F;

        $r4 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        r0.<android.widget.AbsSeekBar: java.util.List mUserGestureExclusionRects> = $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r0.<android.widget.AbsSeekBar: java.util.List mGestureExclusionRects> = $r5;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r0.<android.widget.AbsSeekBar: android.graphics.Rect mThumbRect> = $r6;

        $r7 = <com.android.internal.R$styleable: int[] SeekBar>;

        r2 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r20, $r7, i0, i1);

        $r8 = <com.android.internal.R$styleable: int[] SeekBar>;

        virtualinvoke r0.<android.widget.AbsSeekBar: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>(r1, $r8, r20, r2, i0, i1);

        $r9 = virtualinvoke r2.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(0);

        virtualinvoke r0.<android.widget.AbsSeekBar: void setThumb(android.graphics.drawable.Drawable)>($r9);

        $z1 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(4);

        if $z1 == 0 goto label1;

        $i7 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(4, -1);

        $r18 = r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mThumbBlendMode>;

        $r19 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.BlendMode parseBlendMode(int,android.graphics.BlendMode)>($i7, $r18);

        r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mThumbBlendMode> = $r19;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbBlendMode> = 1;

     label1:
        $z2 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(3);

        if $z2 == 0 goto label2;

        $r17 = virtualinvoke r2.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(3);

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList> = $r17;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTint> = 1;

     label2:
        $r10 = virtualinvoke r2.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(5);

        virtualinvoke r0.<android.widget.AbsSeekBar: void setTickMark(android.graphics.drawable.Drawable)>($r10);

        $z3 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(7);

        if $z3 == 0 goto label3;

        $i6 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(7, -1);

        $r15 = r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mTickMarkBlendMode>;

        $r16 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.BlendMode parseBlendMode(int,android.graphics.BlendMode)>($i6, $r15);

        r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mTickMarkBlendMode> = $r16;

        r0.<android.widget.AbsSeekBar: boolean mHasTickMarkBlendMode> = 1;

     label3:
        $z4 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(6);

        if $z4 == 0 goto label4;

        $r14 = virtualinvoke r2.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(6);

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mTickMarkTintList> = $r14;

        r0.<android.widget.AbsSeekBar: boolean mHasTickMarkTint> = 1;

     label4:
        $z5 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(2, 0);

        r0.<android.widget.AbsSeekBar: boolean mSplitTrack> = $z5;

        $i2 = virtualinvoke r0.<android.widget.AbsSeekBar: int getThumbOffset()>();

        $i3 = virtualinvoke r2.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(1, $i2);

        virtualinvoke r0.<android.widget.AbsSeekBar: void setThumbOffset(int)>($i3);

        z0 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(8, 1);

        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        if z0 == 0 goto label5;

        $r13 = <com.android.internal.R$styleable: int[] Theme>;

        r21 = virtualinvoke r1.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r20, $r13, 0, 0);

        $f0 = virtualinvoke r21.<android.content.res.TypedArray: float getFloat(int,float)>(3, 0.5F);

        r0.<android.widget.AbsSeekBar: float mDisabledAlpha> = $f0;

        virtualinvoke r21.<android.content.res.TypedArray: void recycle()>();

        goto label6;

     label5:
        r0.<android.widget.AbsSeekBar: float mDisabledAlpha> = 1.0F;

     label6:
        specialinvoke r0.<android.widget.AbsSeekBar: void applyThumbTint()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void applyTickMarkTint()>();

        $r11 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r1);

        $i4 = virtualinvoke $r11.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        r0.<android.widget.AbsSeekBar: int mScaledTouchSlop> = $i4;

        $r12 = virtualinvoke r0.<android.widget.AbsSeekBar: android.content.res.Resources getResources()>();

        $i5 = virtualinvoke $r12.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105468);

        r0.<android.widget.AbsSeekBar: int mThumbExclusionMaxSize> = $i5;

        return;
    }

    private void applyThumbTint()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1, $r2, $r3, $r4, $r5, $r8;
        boolean $z0, $z1, $z2, $z3, $z5;
        int[] $r6;
        android.graphics.BlendMode $r7;
        android.content.res.ColorStateList $r9;

        r0 := @this: android.widget.AbsSeekBar;

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r2 == null goto label4;

        $z0 = r0.<android.widget.AbsSeekBar: boolean mHasThumbTint>;

        if $z0 != 0 goto label1;

        $z5 = r0.<android.widget.AbsSeekBar: boolean mHasThumbBlendMode>;

        if $z5 == 0 goto label4;

     label1:
        $r3 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        r1 = virtualinvoke $r3.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb> = r1;

        $z1 = r0.<android.widget.AbsSeekBar: boolean mHasThumbTint>;

        if $z1 == 0 goto label2;

        $r9 = r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList>;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>($r9);

     label2:
        $z2 = r0.<android.widget.AbsSeekBar: boolean mHasThumbBlendMode>;

        if $z2 == 0 goto label3;

        $r8 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $r7 = r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mThumbBlendMode>;

        virtualinvoke $r8.<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>($r7);

     label3:
        $r4 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $z3 = virtualinvoke $r4.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z3 == 0 goto label4;

        $r5 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $r6 = virtualinvoke r0.<android.widget.AbsSeekBar: int[] getDrawableState()>();

        virtualinvoke $r5.<android.graphics.drawable.Drawable: boolean setState(int[])>($r6);

     label4:
        return;
    }

    private void applyTickMarkTint()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1, $r2, $r3, $r4, $r5, $r8;
        boolean $z0, $z1, $z2, $z3, $z5;
        int[] $r6;
        android.graphics.BlendMode $r7;
        android.content.res.ColorStateList $r9;

        r0 := @this: android.widget.AbsSeekBar;

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        if $r2 == null goto label4;

        $z0 = r0.<android.widget.AbsSeekBar: boolean mHasTickMarkTint>;

        if $z0 != 0 goto label1;

        $z5 = r0.<android.widget.AbsSeekBar: boolean mHasTickMarkBlendMode>;

        if $z5 == 0 goto label4;

     label1:
        $r3 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        r1 = virtualinvoke $r3.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark> = r1;

        $z1 = r0.<android.widget.AbsSeekBar: boolean mHasTickMarkTint>;

        if $z1 == 0 goto label2;

        $r9 = r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mTickMarkTintList>;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>($r9);

     label2:
        $z2 = r0.<android.widget.AbsSeekBar: boolean mHasTickMarkBlendMode>;

        if $z2 == 0 goto label3;

        $r8 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        $r7 = r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mTickMarkBlendMode>;

        virtualinvoke $r8.<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>($r7);

     label3:
        $r4 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        $z3 = virtualinvoke $r4.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z3 == 0 goto label4;

        $r5 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        $r6 = virtualinvoke r0.<android.widget.AbsSeekBar: int[] getDrawableState()>();

        virtualinvoke $r5.<android.graphics.drawable.Drawable: boolean setState(int[])>($r6);

     label4:
        return;
    }

    private void attemptClaimDrag()
    {
        android.widget.AbsSeekBar r0;
        android.view.ViewParent $r1, $r2;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.view.ViewParent mParent>;

        if $r1 == null goto label1;

        $r2 = r0.<android.widget.AbsSeekBar: android.view.ViewParent mParent>;

        interfaceinvoke $r2.<android.view.ViewParent: void requestDisallowInterceptTouchEvent(boolean)>(1);

     label1:
        return;
    }

    private float getScale()
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, $i2, $i3, $i4;
        float $f0, $f1, f2;

        r0 := @this: android.widget.AbsSeekBar;

        i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMin()>();

        $i2 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        i1 = $i2 - i0;

        if i1 <= 0 goto label1;

        $i3 = virtualinvoke r0.<android.widget.AbsSeekBar: int getProgress()>();

        $i4 = $i3 - i0;

        $f1 = (float) $i4;

        $f0 = (float) i1;

        f2 = $f1 / $f0;

        goto label2;

     label1:
        f2 = 0.0F;

     label2:
        return f2;
    }

    private void growRectTo(android.graphics.Rect, int)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.Rect r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.Rect;

        i13 := @parameter1: int;

        $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>();

        $i2 = i13 - $i1;

        i0 = $i2 / 2;

        if i0 <= 0 goto label1;

        $i9 = r1.<android.graphics.Rect: int top>;

        $i10 = $i9 - i0;

        r1.<android.graphics.Rect: int top> = $i10;

        $i11 = r1.<android.graphics.Rect: int bottom>;

        $i12 = $i11 + i0;

        r1.<android.graphics.Rect: int bottom> = $i12;

     label1:
        $i3 = virtualinvoke r1.<android.graphics.Rect: int width()>();

        $i4 = i13 - $i3;

        i14 = $i4 / 2;

        if i14 <= 0 goto label2;

        $i5 = r1.<android.graphics.Rect: int left>;

        $i6 = $i5 - i14;

        r1.<android.graphics.Rect: int left> = $i6;

        $i7 = r1.<android.graphics.Rect: int right>;

        $i8 = $i7 + i14;

        r1.<android.graphics.Rect: int right> = $i8;

     label2:
        return;
    }

    private void setHotspot(float, float)
    {
        android.widget.AbsSeekBar r0;
        float f0, f1;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.widget.AbsSeekBar;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 = virtualinvoke r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getBackground()>();

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label1:
        return;
    }

    private void setThumbPos(int, android.graphics.drawable.Drawable, float, int)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1, r3;
        float f0, $f1, $f2, $f3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14, i15, i16, i17, i18, i19, i20, i21, i22, i23;
        boolean $z0, $z1;
        android.graphics.Rect r2;

        r0 := @this: android.widget.AbsSeekBar;

        i11 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        f0 := @parameter2: float;

        i12 := @parameter3: int;

        i13 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        i14 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        i15 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        i16 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $i0 = i11 - i13;

        $i1 = $i0 - i14;

        $i4 = $i1 - i15;

        $i2 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        $i3 = $i2 * 2;

        i17 = $i4 + $i3;

        $f1 = (float) i17;

        $f2 = $f1 * f0;

        $f3 = $f2 + 0.5F;

        i18 = (int) $f3;

        if i12 != -2147483648 goto label1;

        r2 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        i19 = r2.<android.graphics.Rect: int top>;

        i20 = r2.<android.graphics.Rect: int bottom>;

        goto label2;

     label1:
        i19 = i12;

        i20 = i12 + i16;

     label2:
        $z0 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isLayoutRtl()>();

        if $z0 == 0 goto label3;

        $z1 = r0.<android.widget.AbsSeekBar: boolean mMirrorForRtl>;

        if $z1 == 0 goto label3;

        i18 = i17 - i18;

        goto label3;

     label3:
        i21 = i18 + i15;

        r3 = virtualinvoke r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getBackground()>();

        if r3 == null goto label4;

        $i6 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i5 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        i22 = $i6 - $i5;

        i23 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        $i10 = i18 + i22;

        $i9 = i19 + i23;

        $i8 = i21 + i22;

        $i7 = i20 + i23;

        virtualinvoke r3.<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>($i10, $i9, $i8, $i7);

     label4:
        virtualinvoke r1.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i18, i19, i21, i20);

        specialinvoke r0.<android.widget.AbsSeekBar: void updateGestureExclusionRects()>();

        return;
    }

    private void startDrag(android.view.MotionEvent)
    {
        android.widget.AbsSeekBar r0;
        android.view.MotionEvent r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.Rect $r3;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.view.MotionEvent;

        virtualinvoke r0.<android.widget.AbsSeekBar: void setPressed(boolean)>(1);

        r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>();

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate(android.graphics.Rect)>($r3);

     label1:
        virtualinvoke r0.<android.widget.AbsSeekBar: void onStartTrackingTouch()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void trackTouchEvent(android.view.MotionEvent)>(r1);

        specialinvoke r0.<android.widget.AbsSeekBar: void attemptClaimDrag()>();

        return;
    }

    private void trackTouchEvent(android.view.MotionEvent)
    {
        android.widget.AbsSeekBar r0;
        android.view.MotionEvent r1;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, $f14, $f15, $f16, $f17, $f18;
        boolean $z0, $z2;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.view.MotionEvent;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        i0 = staticinvoke <java.lang.Math: int round(float)>($f2);

        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        i1 = staticinvoke <java.lang.Math: int round(float)>($f3);

        i2 = virtualinvoke r0.<android.widget.AbsSeekBar: int getWidth()>();

        $i4 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i6 = i2 - $i4;

        $i5 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        i3 = $i6 - $i5;

        f12 = 0.0F;

        $z0 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isLayoutRtl()>();

        if $z0 == 0 goto label3;

        $z2 = r0.<android.widget.AbsSeekBar: boolean mMirrorForRtl>;

        if $z2 == 0 goto label3;

        $i12 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        $i13 = i2 - $i12;

        if i0 <= $i13 goto label1;

        f13 = 0.0F;

        goto label6;

     label1:
        $i14 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        if i0 >= $i14 goto label2;

        f13 = 1.0F;

        goto label6;

     label2:
        $i16 = i3 - i0;

        $i15 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i17 = $i16 + $i15;

        $f9 = (float) $i17;

        $f8 = (float) i3;

        $f11 = $f9 / $f8;

        $f10 = r0.<android.widget.AbsSeekBar: float mTouchThumbOffset>;

        f13 = $f11 + $f10;

        f12 = r0.<android.widget.AbsSeekBar: float mTouchProgressOffset>;

        goto label6;

     label3:
        $i7 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        if i0 >= $i7 goto label4;

        f13 = 0.0F;

        goto label6;

     label4:
        $i8 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        $i9 = i2 - $i8;

        if i0 <= $i9 goto label5;

        f13 = 1.0F;

        goto label6;

     label5:
        $i10 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i11 = i0 - $i10;

        $f5 = (float) $i11;

        $f4 = (float) i3;

        $f7 = $f5 / $f4;

        $f6 = r0.<android.widget.AbsSeekBar: float mTouchThumbOffset>;

        f13 = $f7 + $f6;

        f12 = r0.<android.widget.AbsSeekBar: float mTouchProgressOffset>;

     label6:
        $i18 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        $i19 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMin()>();

        $i20 = $i18 - $i19;

        f0 = (float) $i20;

        $i21 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMin()>();

        f1 = (float) $i21;

        $f14 = (float) i0;

        $f15 = (float) i1;

        specialinvoke r0.<android.widget.AbsSeekBar: void setHotspot(float,float)>($f14, $f15);

        $f16 = f0 * f13;

        $f17 = $f16 + f1;

        $f18 = f12 + $f17;

        $i22 = staticinvoke <java.lang.Math: int round(float)>($f18);

        virtualinvoke r0.<android.widget.AbsSeekBar: boolean setProgressInternal(int,boolean,boolean)>($i22, 1, 0);

        return;
    }

    private void updateGestureExclusionRects()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1;
        java.util.List $r2, $r7, $r8, $r9, $r10, $r11;
        android.graphics.Rect $r3, $r4, $r5, $r6;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;

        r0 := @this: android.widget.AbsSeekBar;

        r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 != null goto label1;

        $r11 = r0.<android.widget.AbsSeekBar: java.util.List mUserGestureExclusionRects>;

        specialinvoke r0.<android.widget.ProgressBar: void setSystemGestureExclusionRects(java.util.List)>($r11);

        return;

     label1:
        $r2 = r0.<android.widget.AbsSeekBar: java.util.List mGestureExclusionRects>;

        interfaceinvoke $r2.<java.util.List: void clear()>();

        $r3 = r0.<android.widget.AbsSeekBar: android.graphics.Rect mThumbRect>;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>($r3);

        $r4 = r0.<android.widget.AbsSeekBar: android.graphics.Rect mThumbRect>;

        $i1 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i0 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        $i3 = $i1 - $i0;

        $i2 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        virtualinvoke $r4.<android.graphics.Rect: void offset(int,int)>($i3, $i2);

        $r5 = r0.<android.widget.AbsSeekBar: android.graphics.Rect mThumbRect>;

        $i4 = virtualinvoke r0.<android.widget.AbsSeekBar: int getHeight()>();

        $i5 = r0.<android.widget.AbsSeekBar: int mThumbExclusionMaxSize>;

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        specialinvoke r0.<android.widget.AbsSeekBar: void growRectTo(android.graphics.Rect,int)>($r5, $i6);

        $r7 = r0.<android.widget.AbsSeekBar: java.util.List mGestureExclusionRects>;

        $r6 = r0.<android.widget.AbsSeekBar: android.graphics.Rect mThumbRect>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r6);

        $r9 = r0.<android.widget.AbsSeekBar: java.util.List mGestureExclusionRects>;

        $r8 = r0.<android.widget.AbsSeekBar: java.util.List mUserGestureExclusionRects>;

        interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>($r8);

        $r10 = r0.<android.widget.AbsSeekBar: java.util.List mGestureExclusionRects>;

        specialinvoke r0.<android.widget.ProgressBar: void setSystemGestureExclusionRects(java.util.List)>($r10);

        return;
    }

    private void updateThumbAndTrackPos(int, int)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, i19, i20, i21, i22, i23, i24;
        android.graphics.drawable.Drawable r1, r2;
        float $f0;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        i17 := @parameter1: int;

        $i2 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        $i4 = i17 - $i2;

        $i3 = r0.<android.widget.AbsSeekBar: int mPaddingBottom>;

        i18 = $i4 - $i3;

        r1 = virtualinvoke r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getCurrentDrawable()>();

        r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $i5 = r0.<android.widget.AbsSeekBar: int mMaxHeight>;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i5, i18);

        if r2 != null goto label1;

        i19 = 0;

        goto label2;

     label1:
        i19 = virtualinvoke r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

     label2:
        if i19 <= i1 goto label3;

        $i14 = i18 - i19;

        i20 = $i14 / 2;

        $i15 = i19 - i1;

        $i16 = $i15 / 2;

        i21 = $i16 + i20;

        i22 = i20;

        i23 = i21;

        goto label4;

     label3:
        $i6 = i18 - i1;

        i24 = $i6 / 2;

        i23 = i24;

        $i7 = i1 - i19;

        $i8 = $i7 / 2;

        i22 = $i8 + i24;

     label4:
        if r1 == null goto label5;

        $i9 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        $i11 = i0 - $i9;

        $i10 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i13 = $i11 - $i10;

        $i12 = i23 + i1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, i23, $i13, $i12);

     label5:
        if r2 == null goto label6;

        $f0 = specialinvoke r0.<android.widget.AbsSeekBar: float getScale()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void setThumbPos(int,android.graphics.drawable.Drawable,float,int)>(i0, r2, $f0, i22);

     label6:
        return;
    }

    boolean canUserSetProgress()
    {
        android.widget.AbsSeekBar r0;
        boolean $z0, $z1, z2;

        r0 := @this: android.widget.AbsSeekBar;

        $z0 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isIndeterminate()>();

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    void drawThumb(android.graphics.Canvas)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.Canvas r1;
        int i0, $i1, $i2, $i3, $i4;
        android.graphics.drawable.Drawable $r2, $r3;
        float $f0, $f1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r2 == null goto label1;

        i0 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $i2 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i1 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        $i3 = $i2 - $i1;

        $f1 = (float) $i3;

        $i4 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        $f0 = (float) $i4;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f1, $f0);

        $r3 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i0);

     label1:
        return;
    }

    protected void drawTickMarks(android.graphics.Canvas)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.Canvas r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, i18;
        float f0, $f1, $f2, $f3, $f4;
        android.graphics.drawable.Drawable $r2, $r3, $r4, $r5, $r6;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.Canvas;

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        if $r2 == null goto label6;

        $i2 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        $i3 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMin()>();

        i0 = $i2 - $i3;

        i14 = 1;

        if i0 <= 1 goto label6;

        $r3 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        i15 = virtualinvoke $r3.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $r4 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        i1 = virtualinvoke $r4.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        if i15 < 0 goto label1;

        i16 = i15 / 2;

        goto label2;

     label1:
        i16 = 1;

     label2:
        if i1 < 0 goto label3;

        i14 = i1 / 2;

     label3:
        $r5 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        $i5 = neg i16;

        $i4 = neg i14;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i5, $i4, i16, i14);

        $i6 = virtualinvoke r0.<android.widget.AbsSeekBar: int getWidth()>();

        $i7 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i9 = $i6 - $i7;

        $i8 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        $i10 = $i9 - $i8;

        $f2 = (float) $i10;

        $f1 = (float) i0;

        f0 = $f2 / $f1;

        i17 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $i11 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $f3 = (float) $i11;

        $i12 = virtualinvoke r0.<android.widget.AbsSeekBar: int getHeight()>();

        $i13 = $i12 / 2;

        $f4 = (float) $i13;

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>($f3, $f4);

        i18 = 0;

     label4:
        if i18 > i0 goto label5;

        $r6 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        virtualinvoke $r6.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void translate(float,float)>(f0, 0.0F);

        i18 = i18 + 1;

        goto label4;

     label5:
        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i17);

     label6:
        return;
    }

    void drawTrack(android.graphics.Canvas)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;
        android.graphics.Insets r3;
        android.graphics.Rect r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        boolean $z0;
        android.graphics.Region$Op $r5;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r2 == null goto label1;

        $z0 = r0.<android.widget.AbsSeekBar: boolean mSplitTrack>;

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r2.<android.graphics.drawable.Drawable: android.graphics.Insets getOpticalInsets()>();

        r4 = r0.<android.widget.AbsSeekBar: android.graphics.Rect mTempRect>;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>(r4);

        $i2 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i1 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        $i4 = $i2 - $i1;

        $i3 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        virtualinvoke r4.<android.graphics.Rect: void offset(int,int)>($i4, $i3);

        $i6 = r4.<android.graphics.Rect: int left>;

        $i5 = r3.<android.graphics.Insets: int left>;

        $i7 = $i6 + $i5;

        r4.<android.graphics.Rect: int left> = $i7;

        $i9 = r4.<android.graphics.Rect: int right>;

        $i8 = r3.<android.graphics.Insets: int right>;

        $i10 = $i9 - $i8;

        r4.<android.graphics.Rect: int right> = $i10;

        i0 = virtualinvoke r1.<android.graphics.Canvas: int save()>();

        $r5 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>(r4, $r5);

        specialinvoke r0.<android.widget.ProgressBar: void drawTrack(android.graphics.Canvas)>(r1);

        virtualinvoke r0.<android.widget.AbsSeekBar: void drawTickMarks(android.graphics.Canvas)>(r1);

        virtualinvoke r1.<android.graphics.Canvas: void restoreToCount(int)>(i0);

        goto label2;

     label1:
        specialinvoke r0.<android.widget.ProgressBar: void drawTrack(android.graphics.Canvas)>(r1);

        virtualinvoke r0.<android.widget.AbsSeekBar: void drawTickMarks(android.graphics.Canvas)>(r1);

     label2:
        return;
    }

    public void drawableHotspotChanged(float, float)
    {
        android.widget.AbsSeekBar r0;
        float f0, f1;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.widget.AbsSeekBar;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<android.widget.ProgressBar: void drawableHotspotChanged(float,float)>(f0, f1);

        r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label1:
        return;
    }

    protected void drawableStateChanged()
    {
        android.widget.AbsSeekBar r0;
        boolean $z0, $z1, $z2, $z3, $z4;
        int[] $r1, $r2;
        float $f0, $f1, $f2;
        byte $b0;
        android.graphics.drawable.Drawable r3, r4, r5;
        int i1;

        r0 := @this: android.widget.AbsSeekBar;

        specialinvoke r0.<android.widget.ProgressBar: void drawableStateChanged()>();

        r3 = virtualinvoke r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getProgressDrawable()>();

        if r3 == null goto label3;

        $f0 = r0.<android.widget.AbsSeekBar: float mDisabledAlpha>;

        $b0 = $f0 cmpg 1.0F;

        if $b0 >= 0 goto label3;

        $z4 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z4 == 0 goto label1;

        i1 = 255;

        goto label2;

     label1:
        $f1 = r0.<android.widget.AbsSeekBar: float mDisabledAlpha>;

        $f2 = $f1 * 255.0F;

        i1 = (int) $f2;

     label2:
        virtualinvoke r3.<android.graphics.drawable.Drawable: void setAlpha(int)>(i1);

     label3:
        r4 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r4 == null goto label4;

        $z2 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z2 == 0 goto label4;

        $r2 = virtualinvoke r0.<android.widget.AbsSeekBar: int[] getDrawableState()>();

        $z3 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean setState(int[])>($r2);

        if $z3 == 0 goto label4;

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidateDrawable(android.graphics.drawable.Drawable)>(r4);

     label4:
        r5 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        if r5 == null goto label5;

        $z0 = virtualinvoke r5.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label5;

        $r1 = virtualinvoke r0.<android.widget.AbsSeekBar: int[] getDrawableState()>();

        $z1 = virtualinvoke r5.<android.graphics.drawable.Drawable: boolean setState(int[])>($r1);

        if $z1 == 0 goto label5;

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidateDrawable(android.graphics.drawable.Drawable)>(r5);

     label5:
        return;
    }

    public java.lang.CharSequence getAccessibilityClassName()
    {
        android.widget.AbsSeekBar r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = class "Landroid/widget/AbsSeekBar;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public int getKeyProgressIncrement()
    {
        android.widget.AbsSeekBar r0;
        int $i0;

        r0 := @this: android.widget.AbsSeekBar;

        $i0 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        return $i0;
    }

    public boolean getSplitTrack()
    {
        android.widget.AbsSeekBar r0;
        boolean $z0;

        r0 := @this: android.widget.AbsSeekBar;

        $z0 = r0.<android.widget.AbsSeekBar: boolean mSplitTrack>;

        return $z0;
    }

    public android.graphics.drawable.Drawable getThumb()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        return $r1;
    }

    public int getThumbOffset()
    {
        android.widget.AbsSeekBar r0;
        int $i0;

        r0 := @this: android.widget.AbsSeekBar;

        $i0 = r0.<android.widget.AbsSeekBar: int mThumbOffset>;

        return $i0;
    }

    public android.graphics.BlendMode getThumbTintBlendMode()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.BlendMode $r1;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mThumbBlendMode>;

        return $r1;
    }

    public android.content.res.ColorStateList getThumbTintList()
    {
        android.widget.AbsSeekBar r0;
        android.content.res.ColorStateList $r1;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList>;

        return $r1;
    }

    public android.graphics.PorterDuff$Mode getThumbTintMode()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.BlendMode r1;
        android.graphics.PorterDuff$Mode r2;

        r0 := @this: android.widget.AbsSeekBar;

        r1 = r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mThumbBlendMode>;

        if r1 == null goto label1;

        r2 = staticinvoke <android.graphics.BlendMode: android.graphics.PorterDuff$Mode blendModeToPorterDuffMode(android.graphics.BlendMode)>(r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public android.graphics.drawable.Drawable getTickMark()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        return $r1;
    }

    public android.graphics.BlendMode getTickMarkTintBlendMode()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.BlendMode $r1;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mTickMarkBlendMode>;

        return $r1;
    }

    public android.content.res.ColorStateList getTickMarkTintList()
    {
        android.widget.AbsSeekBar r0;
        android.content.res.ColorStateList $r1;

        r0 := @this: android.widget.AbsSeekBar;

        $r1 = r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mTickMarkTintList>;

        return $r1;
    }

    public android.graphics.PorterDuff$Mode getTickMarkTintMode()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.BlendMode r1;
        android.graphics.PorterDuff$Mode r2;

        r0 := @this: android.widget.AbsSeekBar;

        r1 = r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mTickMarkBlendMode>;

        if r1 == null goto label1;

        r2 = staticinvoke <android.graphics.BlendMode: android.graphics.PorterDuff$Mode blendModeToPorterDuffMode(android.graphics.BlendMode)>(r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public void jumpDrawablesToCurrentState()
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1, r2;

        r0 := @this: android.widget.AbsSeekBar;

        specialinvoke r0.<android.widget.ProgressBar: void jumpDrawablesToCurrentState()>();

        r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

     label1:
        r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        if r2 == null goto label2;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

     label2:
        return;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.widget.AbsSeekBar r0;
        java.lang.Throwable $r1;
        android.graphics.Canvas r2;

        r0 := @this: android.widget.AbsSeekBar;

        r2 := @parameter0: android.graphics.Canvas;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.widget.ProgressBar: void onDraw(android.graphics.Canvas)>(r2);

        virtualinvoke r0.<android.widget.AbsSeekBar: void drawThumb(android.graphics.Canvas)>(r2);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.widget.AbsSeekBar r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        int i0, $i1, $i2;
        boolean $z0;
        android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction $r2, $r3;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.widget.ProgressBar: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        $z0 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z0 == 0 goto label2;

        i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getProgress()>();

        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMin()>();

        if i0 <= $i1 goto label1;

        $r3 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_BACKWARD>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r3);

     label1:
        $i2 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        if i0 >= $i2 goto label2;

        $r2 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_FORWARD>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r2);

     label2:
        return;
    }

    void onKeyChange()
    {
        android.widget.AbsSeekBar r0;

        r0 := @this: android.widget.AbsSeekBar;

        return;
    }

    public boolean onKeyDown(int, android.view.KeyEvent)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, $i2, $i3, i4;
        android.view.KeyEvent r1;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $z0 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z0 == 0 goto label4;

        i1 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        if i0 == 21 goto label1;

        i4 = i1;

        if i0 == 22 goto label2;

        if i0 == 69 goto label1;

        i4 = i1;

        if i0 == 70 goto label2;

        i4 = i1;

        if i0 == 81 goto label2;

        goto label4;

     label1:
        i4 = neg i1;

     label2:
        $z2 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isLayoutRtl()>();

        if $z2 == 0 goto label3;

        i4 = neg i4;

        goto label3;

     label3:
        $i2 = virtualinvoke r0.<android.widget.AbsSeekBar: int getProgress()>();

        $i3 = $i2 + i4;

        $z1 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean setProgressInternal(int,boolean,boolean)>($i3, 1, 1);

        if $z1 == 0 goto label4;

        virtualinvoke r0.<android.widget.AbsSeekBar: void onKeyChange()>();

        return 1;

     label4:
        $z3 = specialinvoke r0.<android.widget.ProgressBar: boolean onKeyDown(int,android.view.KeyEvent)>(i0, r1);

        return $z3;
    }

    protected void onMeasure(int, int)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23;
        android.graphics.drawable.Drawable $r1, $r2, r4;
        java.lang.Throwable $r3;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        entermonitor r0;

     label1:
        r4 = virtualinvoke r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable getCurrentDrawable()>();

        $r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r1 != null goto label3;

     label2:
        i20 = 0;

        goto label4;

     label3:
        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        i20 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

     label4:
        i21 = 0;

        i22 = 0;

        if r4 == null goto label6;

     label5:
        $i11 = r0.<android.widget.AbsSeekBar: int mMinWidth>;

        $i12 = r0.<android.widget.AbsSeekBar: int mMaxWidth>;

        $i13 = virtualinvoke r4.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i14 = staticinvoke <java.lang.Math: int min(int,int)>($i12, $i13);

        i21 = staticinvoke <java.lang.Math: int max(int,int)>($i11, $i14);

        $i15 = r0.<android.widget.AbsSeekBar: int mMinHeight>;

        $i16 = r0.<android.widget.AbsSeekBar: int mMaxHeight>;

        $i17 = virtualinvoke r4.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $i18 = staticinvoke <java.lang.Math: int min(int,int)>($i16, $i17);

        $i19 = staticinvoke <java.lang.Math: int max(int,int)>($i15, $i18);

        i22 = staticinvoke <java.lang.Math: int max(int,int)>(i20, $i19);

     label6:
        i2 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        i3 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        i4 = r0.<android.widget.AbsSeekBar: int mPaddingTop>;

        i23 = r0.<android.widget.AbsSeekBar: int mPaddingBottom>;

        $i5 = i2 + i3;

        $i6 = i21 + $i5;

        $i7 = staticinvoke <android.widget.AbsSeekBar: int resolveSizeAndState(int,int,int)>($i6, i0, 0);

        $i8 = i4 + i23;

        $i9 = i22 + $i8;

        $i10 = staticinvoke <android.widget.AbsSeekBar: int resolveSizeAndState(int,int,int)>($i9, i1, 0);

        virtualinvoke r0.<android.widget.AbsSeekBar: void setMeasuredDimension(int,int)>($i7, $i10);

     label7:
        exitmonitor r0;

        return;

     label8:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    public void onResolveDrawables(int)
    {
        android.widget.AbsSeekBar r0;
        int i0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.ProgressBar: void onResolveDrawables(int)>(i0);

        r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>(i0);

     label1:
        return;
    }

    public void onRtlPropertiesChanged(int)
    {
        android.widget.AbsSeekBar r0;
        int i0, $i1;
        android.graphics.drawable.Drawable r1;
        float $f0;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.ProgressBar: void onRtlPropertiesChanged(int)>(i0);

        r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 == null goto label1;

        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getWidth()>();

        $f0 = specialinvoke r0.<android.widget.AbsSeekBar: float getScale()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void setThumbPos(int,android.graphics.drawable.Drawable,float,int)>($i1, r1, $f0, -2147483648);

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

     label1:
        return;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, i2, i3;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<android.widget.ProgressBar: void onSizeChanged(int,int,int,int)>(i0, i1, i2, i3);

        specialinvoke r0.<android.widget.AbsSeekBar: void updateThumbAndTrackPos(int,int)>(i0, i1);

        return;
    }

    void onStartTrackingTouch()
    {
        android.widget.AbsSeekBar r0;

        r0 := @this: android.widget.AbsSeekBar;

        r0.<android.widget.AbsSeekBar: boolean mIsDragging> = 1;

        return;
    }

    void onStopTrackingTouch()
    {
        android.widget.AbsSeekBar r0;

        r0 := @this: android.widget.AbsSeekBar;

        r0.<android.widget.AbsSeekBar: boolean mIsDragging> = 0;

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.widget.AbsSeekBar r0;
        android.view.MotionEvent r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.graphics.drawable.Drawable $r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i13, i15, i16;
        byte $b12, $b14;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = r0.<android.widget.AbsSeekBar: boolean mIsUserSeekable>;

        if $z0 == 0 goto label14;

        $z1 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z1 != 0 goto label01;

        goto label14;

     label01:
        i15 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if i15 == 0 goto label10;

        if i15 == 1 goto label07;

        if i15 == 2 goto label04;

        if i15 == 3 goto label02;

        goto label13;

     label02:
        $z4 = r0.<android.widget.AbsSeekBar: boolean mIsDragging>;

        if $z4 == 0 goto label03;

        virtualinvoke r0.<android.widget.AbsSeekBar: void onStopTrackingTouch()>();

        virtualinvoke r0.<android.widget.AbsSeekBar: void setPressed(boolean)>(0);

     label03:
        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

        goto label13;

     label04:
        $z3 = r0.<android.widget.AbsSeekBar: boolean mIsDragging>;

        if $z3 == 0 goto label05;

        specialinvoke r0.<android.widget.AbsSeekBar: void trackTouchEvent(android.view.MotionEvent)>(r1);

        goto label13;

     label05:
        $f14 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f15 = r0.<android.widget.AbsSeekBar: float mTouchDownX>;

        $f16 = $f14 - $f15;

        $f17 = staticinvoke <java.lang.Math: float abs(float)>($f16);

        $i13 = r0.<android.widget.AbsSeekBar: int mScaledTouchSlop>;

        $f18 = (float) $i13;

        $b14 = $f17 cmpl $f18;

        if $b14 <= 0 goto label06;

        specialinvoke r0.<android.widget.AbsSeekBar: void startDrag(android.view.MotionEvent)>(r1);

     label06:
        goto label13;

     label07:
        $z2 = r0.<android.widget.AbsSeekBar: boolean mIsDragging>;

        if $z2 == 0 goto label08;

        specialinvoke r0.<android.widget.AbsSeekBar: void trackTouchEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r0.<android.widget.AbsSeekBar: void onStopTrackingTouch()>();

        virtualinvoke r0.<android.widget.AbsSeekBar: void setPressed(boolean)>(0);

        goto label09;

     label08:
        virtualinvoke r0.<android.widget.AbsSeekBar: void onStartTrackingTouch()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void trackTouchEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r0.<android.widget.AbsSeekBar: void onStopTrackingTouch()>();

     label09:
        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

        goto label13;

     label10:
        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if $r2 == null goto label11;

        $i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getWidth()>();

        $i1 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $i3 = $i0 - $i1;

        $i2 = r0.<android.widget.AbsSeekBar: int mPaddingRight>;

        i16 = $i3 - $i2;

        $i4 = virtualinvoke r0.<android.widget.AbsSeekBar: int getProgress()>();

        $i5 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMin()>();

        $i6 = $i4 - $i5;

        $f2 = (float) $i6;

        $i7 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        $i8 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMin()>();

        $i9 = $i7 - $i8;

        $f3 = (float) $i9;

        $f4 = $f2 / $f3;

        $f5 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $i10 = r0.<android.widget.AbsSeekBar: int mPaddingLeft>;

        $f6 = (float) $i10;

        $f8 = $f5 - $f6;

        $f7 = (float) i16;

        $f9 = $f8 / $f7;

        f0 = $f4 - $f9;

        r0.<android.widget.AbsSeekBar: float mTouchThumbOffset> = f0;

        $f10 = (float) i16;

        $f11 = f0 * $f10;

        $f12 = staticinvoke <java.lang.Math: float abs(float)>($f11);

        $i11 = virtualinvoke r0.<android.widget.AbsSeekBar: int getThumbOffset()>();

        $f13 = (float) $i11;

        $b12 = $f12 cmpl $f13;

        if $b12 <= 0 goto label11;

        r0.<android.widget.AbsSeekBar: float mTouchThumbOffset> = 0.0F;

     label11:
        $z5 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isInScrollingContainer()>();

        if $z5 == 0 goto label12;

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        r0.<android.widget.AbsSeekBar: float mTouchDownX> = $f1;

        goto label13;

     label12:
        specialinvoke r0.<android.widget.AbsSeekBar: void startDrag(android.view.MotionEvent)>(r1);

     label13:
        return 1;

     label14:
        return 0;
    }

    void onVisualProgressChanged(int, float)
    {
        android.widget.AbsSeekBar r0;
        int i0, $i1;
        float f0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        specialinvoke r0.<android.widget.ProgressBar: void onVisualProgressChanged(int,float)>(i0, f0);

        if i0 != 16908301 goto label1;

        r1 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 == null goto label1;

        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getWidth()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void setThumbPos(int,android.graphics.drawable.Drawable,float,int)>($i1, r1, f0, -2147483648);

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

     label1:
        return;
    }

    public boolean performAccessibilityActionInternal(int, android.os.Bundle)
    {
        android.widget.AbsSeekBar r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        android.os.Bundle r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        float $f0, $f1, $f2;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $z0 = specialinvoke r0.<android.widget.ProgressBar: boolean performAccessibilityActionInternal(int,android.os.Bundle)>(i0, r1);

        if $z0 == 0 goto label01;

        return 1;

     label01:
        $z1 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean isEnabled()>();

        if $z1 != 0 goto label02;

        return 0;

     label02:
        if i0 == 4096 goto label07;

        if i0 == 8192 goto label07;

        if i0 == 16908349 goto label03;

        return 0;

     label03:
        $z4 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean canUserSetProgress()>();

        if $z4 != 0 goto label04;

        return 0;

     label04:
        if r1 == null goto label06;

        $z5 = virtualinvoke r1.<android.os.Bundle: boolean containsKey(java.lang.String)>("android.view.accessibility.action.ARGUMENT_PROGRESS_VALUE");

        if $z5 != 0 goto label05;

        goto label06;

     label05:
        $f2 = virtualinvoke r1.<android.os.Bundle: float getFloat(java.lang.String)>("android.view.accessibility.action.ARGUMENT_PROGRESS_VALUE");

        $i8 = (int) $f2;

        $z6 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean setProgressInternal(int,boolean,boolean)>($i8, 1, 1);

        return $z6;

     label06:
        return 0;

     label07:
        $z2 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean canUserSetProgress()>();

        if $z2 != 0 goto label08;

        return 0;

     label08:
        $i2 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        $i3 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMin()>();

        $i4 = $i2 - $i3;

        $f0 = (float) $i4;

        $f1 = $f0 / 20.0F;

        $i5 = staticinvoke <java.lang.Math: int round(float)>($f1);

        i1 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i5);

        i9 = i1;

        if i0 != 8192 goto label09;

        i9 = neg i1;

     label09:
        $i6 = virtualinvoke r0.<android.widget.AbsSeekBar: int getProgress()>();

        $i7 = $i6 + i9;

        $z3 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean setProgressInternal(int,boolean,boolean)>($i7, 1, 1);

        if $z3 == 0 goto label10;

        virtualinvoke r0.<android.widget.AbsSeekBar: void onKeyChange()>();

        return 1;

     label10:
        return 0;
    }

    public void setKeyProgressIncrement(int)
    {
        android.widget.AbsSeekBar r0;
        int i0;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        i0 = neg i0;

        goto label1;

     label1:
        r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement> = i0;

        return;
    }

    public void setMax(int)
    {
        android.widget.AbsSeekBar r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        float $f0, $f1;
        java.lang.Throwable $r2;

        r0 := @this: android.widget.AbsSeekBar;

        i7 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.widget.ProgressBar: void setMax(int)>(i7);

        $i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMin()>();

        i8 = $i0 - $i1;

        $i2 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        if $i2 == 0 goto label2;

        $i5 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        $i6 = i8 / $i5;

        if $i6 <= 20 goto label3;

     label2:
        $f0 = (float) i8;

        $f1 = $f0 / 20.0F;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i3);

        virtualinvoke r0.<android.widget.AbsSeekBar: void setKeyProgressIncrement(int)>($i4);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void setMin(int)
    {
        android.widget.AbsSeekBar r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8;
        float $f0, $f1;
        java.lang.Throwable $r2;

        r0 := @this: android.widget.AbsSeekBar;

        i7 := @parameter0: int;

        entermonitor r0;

     label1:
        specialinvoke r0.<android.widget.ProgressBar: void setMin(int)>(i7);

        $i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMax()>();

        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getMin()>();

        i8 = $i0 - $i1;

        $i2 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        if $i2 == 0 goto label2;

        $i5 = r0.<android.widget.AbsSeekBar: int mKeyProgressIncrement>;

        $i6 = i8 / $i5;

        if $i6 <= 20 goto label3;

     label2:
        $f0 = (float) i8;

        $f1 = $f0 / 20.0F;

        $i3 = staticinvoke <java.lang.Math: int round(float)>($f1);

        $i4 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i3);

        virtualinvoke r0.<android.widget.AbsSeekBar: void setKeyProgressIncrement(int)>($i4);

     label3:
        exitmonitor r0;

        return;

     label4:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public void setSplitTrack(boolean)
    {
        android.widget.AbsSeekBar r0;
        boolean z0;

        r0 := @this: android.widget.AbsSeekBar;

        z0 := @parameter0: boolean;

        r0.<android.widget.AbsSeekBar: boolean mSplitTrack> = z0;

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

        return;
    }

    public void setSystemGestureExclusionRects(java.util.List)
    {
        android.widget.AbsSeekBar r0;
        java.util.List r1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: java.util.List;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "rects must not be null");

        r0.<android.widget.AbsSeekBar: java.util.List mUserGestureExclusionRects> = r1;

        specialinvoke r0.<android.widget.AbsSeekBar: void updateGestureExclusionRects()>();

        return;
    }

    public void setThumb(android.graphics.drawable.Drawable)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1, r2, $r4, $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        boolean $z0, $z2, z4;
        int[] $r3;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r2 == null goto label1;

        if r1 == r2 goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        if r1 == null goto label5;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $z2 = virtualinvoke r0.<android.widget.AbsSeekBar: boolean canResolveLayoutDirection()>();

        if $z2 == 0 goto label3;

        $i8 = virtualinvoke r0.<android.widget.AbsSeekBar: int getLayoutDirection()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>($i8);

     label3:
        $i2 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $i3 = $i2 / 2;

        r0.<android.widget.AbsSeekBar: int mThumbOffset> = $i3;

        if z4 == 0 goto label5;

        $i4 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        $r4 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $i5 = virtualinvoke $r4.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        if $i4 != $i5 goto label4;

        $i6 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $r5 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        $i7 = virtualinvoke $r5.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        if $i6 == $i7 goto label5;

     label4:
        virtualinvoke r0.<android.widget.AbsSeekBar: void requestLayout()>();

     label5:
        r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb> = r1;

        specialinvoke r0.<android.widget.AbsSeekBar: void applyThumbTint()>();

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

        if z4 == 0 goto label6;

        $i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getWidth()>();

        $i1 = virtualinvoke r0.<android.widget.AbsSeekBar: int getHeight()>();

        specialinvoke r0.<android.widget.AbsSeekBar: void updateThumbAndTrackPos(int,int)>($i0, $i1);

        if r1 == null goto label6;

        $z0 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label6;

        $r3 = virtualinvoke r0.<android.widget.AbsSeekBar: int[] getDrawableState()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3);

     label6:
        return;
    }

    public void setThumbOffset(int)
    {
        android.widget.AbsSeekBar r0;
        int i0;

        r0 := @this: android.widget.AbsSeekBar;

        i0 := @parameter0: int;

        r0.<android.widget.AbsSeekBar: int mThumbOffset> = i0;

        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

        return;
    }

    public void setThumbTintBlendMode(android.graphics.BlendMode)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.BlendMode r1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.BlendMode;

        r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mThumbBlendMode> = r1;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbBlendMode> = 1;

        specialinvoke r0.<android.widget.AbsSeekBar: void applyThumbTint()>();

        return;
    }

    public void setThumbTintList(android.content.res.ColorStateList)
    {
        android.widget.AbsSeekBar r0;
        android.content.res.ColorStateList r1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.res.ColorStateList;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mThumbTintList> = r1;

        r0.<android.widget.AbsSeekBar: boolean mHasThumbTint> = 1;

        specialinvoke r0.<android.widget.AbsSeekBar: void applyThumbTint()>();

        return;
    }

    public void setThumbTintMode(android.graphics.PorterDuff$Mode)
    {
        android.widget.AbsSeekBar r0;
        int $i0;
        android.graphics.PorterDuff$Mode r1;
        android.graphics.BlendMode r2;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        if r1 == null goto label1;

        $i0 = r1.<android.graphics.PorterDuff$Mode: int nativeInt>;

        r2 = staticinvoke <android.graphics.BlendMode: android.graphics.BlendMode fromValue(int)>($i0);

        goto label2;

     label1:
        r2 = null;

     label2:
        virtualinvoke r0.<android.widget.AbsSeekBar: void setThumbTintBlendMode(android.graphics.BlendMode)>(r2);

        return;
    }

    public void setTickMark(android.graphics.drawable.Drawable)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1, r2;
        int $i0;
        boolean $z1;
        int[] $r3;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

     label1:
        r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark> = r1;

        if r1 == null goto label3;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $i0 = virtualinvoke r0.<android.widget.AbsSeekBar: int getLayoutDirection()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setLayoutDirection(int)>($i0);

        $z1 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z1 == 0 goto label2;

        $r3 = virtualinvoke r0.<android.widget.AbsSeekBar: int[] getDrawableState()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3);

     label2:
        specialinvoke r0.<android.widget.AbsSeekBar: void applyTickMarkTint()>();

     label3:
        virtualinvoke r0.<android.widget.AbsSeekBar: void invalidate()>();

        return;
    }

    public void setTickMarkTintBlendMode(android.graphics.BlendMode)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.BlendMode r1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.BlendMode;

        r0.<android.widget.AbsSeekBar: android.graphics.BlendMode mTickMarkBlendMode> = r1;

        r0.<android.widget.AbsSeekBar: boolean mHasTickMarkBlendMode> = 1;

        specialinvoke r0.<android.widget.AbsSeekBar: void applyTickMarkTint()>();

        return;
    }

    public void setTickMarkTintList(android.content.res.ColorStateList)
    {
        android.widget.AbsSeekBar r0;
        android.content.res.ColorStateList r1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.content.res.ColorStateList;

        r0.<android.widget.AbsSeekBar: android.content.res.ColorStateList mTickMarkTintList> = r1;

        r0.<android.widget.AbsSeekBar: boolean mHasTickMarkTint> = 1;

        specialinvoke r0.<android.widget.AbsSeekBar: void applyTickMarkTint()>();

        return;
    }

    public void setTickMarkTintMode(android.graphics.PorterDuff$Mode)
    {
        android.widget.AbsSeekBar r0;
        int $i0;
        android.graphics.PorterDuff$Mode r1;
        android.graphics.BlendMode r2;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        if r1 == null goto label1;

        $i0 = r1.<android.graphics.PorterDuff$Mode: int nativeInt>;

        r2 = staticinvoke <android.graphics.BlendMode: android.graphics.BlendMode fromValue(int)>($i0);

        goto label2;

     label1:
        r2 = null;

     label2:
        virtualinvoke r0.<android.widget.AbsSeekBar: void setTickMarkTintBlendMode(android.graphics.BlendMode)>(r2);

        return;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable)
    {
        android.widget.AbsSeekBar r0;
        android.graphics.drawable.Drawable r1, $r2, $r3;
        boolean $z0, z1;

        r0 := @this: android.widget.AbsSeekBar;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mThumb>;

        if r1 == $r2 goto label2;

        $r3 = r0.<android.widget.AbsSeekBar: android.graphics.drawable.Drawable mTickMark>;

        if r1 == $r3 goto label2;

        $z0 = specialinvoke r0.<android.widget.ProgressBar: boolean verifyDrawable(android.graphics.drawable.Drawable)>(r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public static void <clinit>()
    {
        <android.widget.AbsSeekBar: int NO_ALPHA> = 255;

        return;
    }
}
