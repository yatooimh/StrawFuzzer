public class android.widget.CheckedTextView extends android.widget.TextView implements android.widget.Checkable
{
    private static final int[] CHECKED_STATE_SET;
    private int mBasePadding;
    private android.graphics.BlendMode mCheckMarkBlendMode;
    private android.graphics.drawable.Drawable mCheckMarkDrawable;
    private int mCheckMarkGravity;
    private int mCheckMarkResource;
    private android.content.res.ColorStateList mCheckMarkTintList;
    private int mCheckMarkWidth;
    private boolean mChecked;
    private boolean mHasCheckMarkTint;
    private boolean mHasCheckMarkTintMode;
    private boolean mNeedRequestlayout;

    static void <clinit>()
    {
        int[] $r0;

        $r0 = newarray (int)[1];

        $r0[0] = 16842912;

        <android.widget.CheckedTextView: int[] CHECKED_STATE_SET> = $r0;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.widget.CheckedTextView r0;
        android.content.Context r1;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.widget.CheckedTextView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 16843720);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.widget.CheckedTextView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.widget.CheckedTextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.widget.CheckedTextView r0;
        android.util.AttributeSet r1;
        int i0, i1, $i2, $i3;
        android.content.res.TypedArray r2;
        int[] $r3, $r4;
        boolean $z0, $z1, $z2;
        android.content.res.ColorStateList $r5;
        android.graphics.BlendMode $r6, $r7;
        android.content.Context r8;
        android.graphics.drawable.Drawable r9;

        r0 := @this: android.widget.CheckedTextView;

        r8 := @parameter0: android.content.Context;

        r1 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.widget.TextView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r8, r1, i0, i1);

        r0.<android.widget.CheckedTextView: android.content.res.ColorStateList mCheckMarkTintList> = null;

        r0.<android.widget.CheckedTextView: android.graphics.BlendMode mCheckMarkBlendMode> = null;

        r0.<android.widget.CheckedTextView: boolean mHasCheckMarkTint> = 0;

        r0.<android.widget.CheckedTextView: boolean mHasCheckMarkTintMode> = 0;

        r0.<android.widget.CheckedTextView: int mCheckMarkGravity> = 8388613;

        $r3 = <com.android.internal.R$styleable: int[] CheckedTextView>;

        r2 = virtualinvoke r8.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r1, $r3, i0, i1);

        $r4 = <com.android.internal.R$styleable: int[] CheckedTextView>;

        virtualinvoke r0.<android.widget.CheckedTextView: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>(r8, $r4, r1, r2, i0, i1);

        r9 = virtualinvoke r2.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(1);

        if r9 == null goto label1;

        virtualinvoke r0.<android.widget.CheckedTextView: void setCheckMarkDrawable(android.graphics.drawable.Drawable)>(r9);

     label1:
        $z0 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(3);

        if $z0 == 0 goto label2;

        $i3 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(3, -1);

        $r6 = r0.<android.widget.CheckedTextView: android.graphics.BlendMode mCheckMarkBlendMode>;

        $r7 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.BlendMode parseBlendMode(int,android.graphics.BlendMode)>($i3, $r6);

        r0.<android.widget.CheckedTextView: android.graphics.BlendMode mCheckMarkBlendMode> = $r7;

        r0.<android.widget.CheckedTextView: boolean mHasCheckMarkTintMode> = 1;

     label2:
        $z1 = virtualinvoke r2.<android.content.res.TypedArray: boolean hasValue(int)>(2);

        if $z1 == 0 goto label3;

        $r5 = virtualinvoke r2.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(2);

        r0.<android.widget.CheckedTextView: android.content.res.ColorStateList mCheckMarkTintList> = $r5;

        r0.<android.widget.CheckedTextView: boolean mHasCheckMarkTint> = 1;

     label3:
        $i2 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(4, 8388613);

        r0.<android.widget.CheckedTextView: int mCheckMarkGravity> = $i2;

        $z2 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(0, 0);

        virtualinvoke r0.<android.widget.CheckedTextView: void setChecked(boolean)>($z2);

        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        specialinvoke r0.<android.widget.CheckedTextView: void applyCheckMarkTint()>();

        return;
    }

    private void applyCheckMarkTint()
    {
        android.widget.CheckedTextView r0;
        android.graphics.drawable.Drawable r1, $r2, $r3, $r4, $r5, $r8;
        boolean $z0, $z1, $z2, $z3, $z5;
        int[] $r6;
        android.graphics.BlendMode $r7;
        android.content.res.ColorStateList $r9;

        r0 := @this: android.widget.CheckedTextView;

        $r2 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        if $r2 == null goto label4;

        $z0 = r0.<android.widget.CheckedTextView: boolean mHasCheckMarkTint>;

        if $z0 != 0 goto label1;

        $z5 = r0.<android.widget.CheckedTextView: boolean mHasCheckMarkTintMode>;

        if $z5 == 0 goto label4;

     label1:
        $r3 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        r1 = virtualinvoke $r3.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable> = r1;

        $z1 = r0.<android.widget.CheckedTextView: boolean mHasCheckMarkTint>;

        if $z1 == 0 goto label2;

        $r9 = r0.<android.widget.CheckedTextView: android.content.res.ColorStateList mCheckMarkTintList>;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>($r9);

     label2:
        $z2 = r0.<android.widget.CheckedTextView: boolean mHasCheckMarkTintMode>;

        if $z2 == 0 goto label3;

        $r8 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        $r7 = r0.<android.widget.CheckedTextView: android.graphics.BlendMode mCheckMarkBlendMode>;

        virtualinvoke $r8.<android.graphics.drawable.Drawable: void setTintBlendMode(android.graphics.BlendMode)>($r7);

     label3:
        $r4 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        $z3 = virtualinvoke $r4.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z3 == 0 goto label4;

        $r5 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        $r6 = virtualinvoke r0.<android.widget.CheckedTextView: int[] getDrawableState()>();

        virtualinvoke $r5.<android.graphics.drawable.Drawable: boolean setState(int[])>($r6);

     label4:
        return;
    }

    private boolean isCheckMarkAtStart()
    {
        android.widget.CheckedTextView r0;
        int $i0, $i1, $i2, $i3;
        boolean z0;

        r0 := @this: android.widget.CheckedTextView;

        $i0 = r0.<android.widget.CheckedTextView: int mCheckMarkGravity>;

        $i1 = virtualinvoke r0.<android.widget.CheckedTextView: int getLayoutDirection()>();

        $i2 = staticinvoke <android.view.Gravity: int getAbsoluteGravity(int,int)>($i0, $i1);

        $i3 = $i2 & 7;

        if $i3 != 3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void setBasePadding(boolean)
    {
        android.widget.CheckedTextView r0;
        boolean z0;
        int $i0, $i1;

        r0 := @this: android.widget.CheckedTextView;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $i1 = r0.<android.widget.CheckedTextView: int mPaddingLeft>;

        r0.<android.widget.CheckedTextView: int mBasePadding> = $i1;

        goto label2;

     label1:
        $i0 = r0.<android.widget.CheckedTextView: int mPaddingRight>;

        r0.<android.widget.CheckedTextView: int mBasePadding> = $i0;

     label2:
        return;
    }

    private void setCheckMarkDrawableInternal(android.graphics.drawable.Drawable, int)
    {
        android.widget.CheckedTextView r0;
        android.graphics.drawable.Drawable r1, $r4, r5, r6;
        int i0, $i1, $i2, $i3;
        int[] $r2, $r3;
        boolean z4, z5;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        i0 := @parameter1: int;

        r5 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        if r5 == null goto label1;

        virtualinvoke r5.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

        $r4 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        virtualinvoke r0.<android.widget.CheckedTextView: void unscheduleDrawable(android.graphics.drawable.Drawable)>($r4);

     label1:
        r6 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        if r1 == r6 goto label2;

        z4 = 1;

        goto label3;

     label2:
        z4 = 0;

     label3:
        r0.<android.widget.CheckedTextView: boolean mNeedRequestlayout> = z4;

        if r1 == null goto label6;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0);

        $i1 = virtualinvoke r0.<android.widget.CheckedTextView: int getVisibility()>();

        if $i1 != 0 goto label4;

        z5 = 1;

        goto label5;

     label4:
        z5 = 0;

     label5:
        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z5, 0);

        $r2 = <android.widget.CheckedTextView: int[] CHECKED_STATE_SET>;

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r2);

        $i2 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        virtualinvoke r0.<android.widget.CheckedTextView: void setMinHeight(int)>($i2);

        $i3 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        r0.<android.widget.CheckedTextView: int mCheckMarkWidth> = $i3;

        $r3 = virtualinvoke r0.<android.widget.CheckedTextView: int[] getDrawableState()>();

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3);

        goto label7;

     label6:
        r0.<android.widget.CheckedTextView: int mCheckMarkWidth> = 0;

     label7:
        r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable> = r1;

        r0.<android.widget.CheckedTextView: int mCheckMarkResource> = i0;

        specialinvoke r0.<android.widget.CheckedTextView: void applyCheckMarkTint()>();

        virtualinvoke r0.<android.widget.CheckedTextView: void resolvePadding()>();

        return;
    }

    private void updatePadding()
    {
        android.widget.CheckedTextView r0;
        android.graphics.drawable.Drawable $r1;
        int $i0, $i1, $i2, $i3, i4;
        boolean $z1, $z2, z3, z4, z5, z6, z7, $z8;

        r0 := @this: android.widget.CheckedTextView;

        virtualinvoke r0.<android.widget.CheckedTextView: void resetPaddingToInitialValues()>();

        $r1 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        if $r1 == null goto label1;

        $i3 = r0.<android.widget.CheckedTextView: int mCheckMarkWidth>;

        $i2 = r0.<android.widget.CheckedTextView: int mBasePadding>;

        i4 = $i3 + $i2;

        goto label2;

     label1:
        i4 = r0.<android.widget.CheckedTextView: int mBasePadding>;

     label2:
        z3 = specialinvoke r0.<android.widget.CheckedTextView: boolean isCheckMarkAtStart()>();

        z4 = 1;

        if z3 == 0 goto label5;

        z5 = r0.<android.widget.CheckedTextView: boolean mNeedRequestlayout>;

        $i1 = r0.<android.widget.CheckedTextView: int mPaddingLeft>;

        if $i1 == i4 goto label3;

        goto label4;

     label3:
        z4 = 0;

     label4:
        $z2 = z5 | z4;

        r0.<android.widget.CheckedTextView: boolean mNeedRequestlayout> = $z2;

        r0.<android.widget.CheckedTextView: int mPaddingLeft> = i4;

        goto label8;

     label5:
        z6 = r0.<android.widget.CheckedTextView: boolean mNeedRequestlayout>;

        $i0 = r0.<android.widget.CheckedTextView: int mPaddingRight>;

        if $i0 == i4 goto label6;

        z7 = 1;

        goto label7;

     label6:
        z7 = 0;

     label7:
        $z1 = z6 | z7;

        r0.<android.widget.CheckedTextView: boolean mNeedRequestlayout> = $z1;

        r0.<android.widget.CheckedTextView: int mPaddingRight> = i4;

     label8:
        $z8 = r0.<android.widget.CheckedTextView: boolean mNeedRequestlayout>;

        if $z8 == 0 goto label9;

        virtualinvoke r0.<android.widget.CheckedTextView: void requestLayout()>();

        r0.<android.widget.CheckedTextView: boolean mNeedRequestlayout> = 0;

     label9:
        return;
    }

    public void drawableHotspotChanged(float, float)
    {
        android.widget.CheckedTextView r0;
        float f0, f1;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.widget.CheckedTextView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        specialinvoke r0.<android.widget.TextView: void drawableHotspotChanged(float,float)>(f0, f1);

        r1 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setHotspot(float,float)>(f0, f1);

     label1:
        return;
    }

    protected void drawableStateChanged()
    {
        android.widget.CheckedTextView r0;
        android.graphics.drawable.Drawable r1;
        boolean $z0, $z1;
        int[] $r2;

        r0 := @this: android.widget.CheckedTextView;

        specialinvoke r0.<android.widget.TextView: void drawableStateChanged()>();

        r1 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>();

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<android.widget.CheckedTextView: int[] getDrawableState()>();

        $z1 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r2);

        if $z1 == 0 goto label1;

        virtualinvoke r0.<android.widget.CheckedTextView: void invalidateDrawable(android.graphics.drawable.Drawable)>(r1);

     label1:
        return;
    }

    protected void encodeProperties(android.view.ViewHierarchyEncoder)
    {
        android.widget.CheckedTextView r0;
        android.view.ViewHierarchyEncoder r1;
        boolean $z0;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.view.ViewHierarchyEncoder;

        specialinvoke r0.<android.widget.TextView: void encodeProperties(android.view.ViewHierarchyEncoder)>(r1);

        $z0 = virtualinvoke r0.<android.widget.CheckedTextView: boolean isChecked()>();

        virtualinvoke r1.<android.view.ViewHierarchyEncoder: void addProperty(java.lang.String,boolean)>("text:checked", $z0);

        return;
    }

    public java.lang.CharSequence getAccessibilityClassName()
    {
        android.widget.CheckedTextView r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: android.widget.CheckedTextView;

        $r1 = class "Landroid/widget/CheckedTextView;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public android.graphics.drawable.Drawable getCheckMarkDrawable()
    {
        android.widget.CheckedTextView r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: android.widget.CheckedTextView;

        $r1 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        return $r1;
    }

    public android.graphics.BlendMode getCheckMarkTintBlendMode()
    {
        android.widget.CheckedTextView r0;
        android.graphics.BlendMode $r1;

        r0 := @this: android.widget.CheckedTextView;

        $r1 = r0.<android.widget.CheckedTextView: android.graphics.BlendMode mCheckMarkBlendMode>;

        return $r1;
    }

    public android.content.res.ColorStateList getCheckMarkTintList()
    {
        android.widget.CheckedTextView r0;
        android.content.res.ColorStateList $r1;

        r0 := @this: android.widget.CheckedTextView;

        $r1 = r0.<android.widget.CheckedTextView: android.content.res.ColorStateList mCheckMarkTintList>;

        return $r1;
    }

    public android.graphics.PorterDuff$Mode getCheckMarkTintMode()
    {
        android.widget.CheckedTextView r0;
        android.graphics.BlendMode r1;
        android.graphics.PorterDuff$Mode r2;

        r0 := @this: android.widget.CheckedTextView;

        r1 = r0.<android.widget.CheckedTextView: android.graphics.BlendMode mCheckMarkBlendMode>;

        if r1 == null goto label1;

        r2 = staticinvoke <android.graphics.BlendMode: android.graphics.PorterDuff$Mode blendModeToPorterDuffMode(android.graphics.BlendMode)>(r1);

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    protected void internalSetPadding(int, int, int, int)
    {
        android.widget.CheckedTextView r0;
        int i0, i1, i2, i3;
        boolean $z0;

        r0 := @this: android.widget.CheckedTextView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        specialinvoke r0.<android.widget.TextView: void internalSetPadding(int,int,int,int)>(i0, i1, i2, i3);

        $z0 = specialinvoke r0.<android.widget.CheckedTextView: boolean isCheckMarkAtStart()>();

        specialinvoke r0.<android.widget.CheckedTextView: void setBasePadding(boolean)>($z0);

        return;
    }

    public boolean isChecked()
    {
        android.widget.CheckedTextView r0;
        boolean $z0;

        r0 := @this: android.widget.CheckedTextView;

        $z0 = r0.<android.widget.CheckedTextView: boolean mChecked>;

        return $z0;
    }

    public void jumpDrawablesToCurrentState()
    {
        android.widget.CheckedTextView r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.widget.CheckedTextView;

        specialinvoke r0.<android.widget.TextView: void jumpDrawablesToCurrentState()>();

        r1 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void jumpToCurrentState()>();

     label1:
        return;
    }

    protected int[] onCreateDrawableState(int)
    {
        android.widget.CheckedTextView r0;
        int i0, $i1;
        int[] r1, $r2;
        boolean $z0;

        r0 := @this: android.widget.CheckedTextView;

        i0 := @parameter0: int;

        $i1 = i0 + 1;

        r1 = specialinvoke r0.<android.widget.TextView: int[] onCreateDrawableState(int)>($i1);

        $z0 = virtualinvoke r0.<android.widget.CheckedTextView: boolean isChecked()>();

        if $z0 == 0 goto label1;

        $r2 = <android.widget.CheckedTextView: int[] CHECKED_STATE_SET>;

        staticinvoke <android.widget.CheckedTextView: int[] mergeDrawableStates(int[],int[])>(r1, $r2);

     label1:
        return r1;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        android.widget.CheckedTextView r0;
        android.graphics.drawable.Drawable r1, r3;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16, i17, i18, i19, i20, i21;
        android.graphics.Canvas r2;

        r0 := @this: android.widget.CheckedTextView;

        r2 := @parameter0: android.graphics.Canvas;

        specialinvoke r0.<android.widget.TextView: void onDraw(android.graphics.Canvas)>(r2);

        r1 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        if r1 == null goto label6;

        $i1 = virtualinvoke r0.<android.widget.CheckedTextView: int getGravity()>();

        i16 = $i1 & 112;

        i17 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        i18 = 0;

        if i16 == 16 goto label2;

        if i16 == 80 goto label1;

        goto label3;

     label1:
        $i15 = virtualinvoke r0.<android.widget.CheckedTextView: int getHeight()>();

        i18 = $i15 - i17;

        goto label3;

     label2:
        $i2 = virtualinvoke r0.<android.widget.CheckedTextView: int getHeight()>();

        $i3 = $i2 - i17;

        i18 = $i3 / 2;

     label3:
        z0 = specialinvoke r0.<android.widget.CheckedTextView: boolean isCheckMarkAtStart()>();

        i19 = virtualinvoke r0.<android.widget.CheckedTextView: int getWidth()>();

        i0 = i18 + i17;

        if z0 == 0 goto label4;

        i20 = r0.<android.widget.CheckedTextView: int mBasePadding>;

        $i14 = r0.<android.widget.CheckedTextView: int mCheckMarkWidth>;

        i21 = $i14 + i20;

        goto label5;

     label4:
        $i4 = r0.<android.widget.CheckedTextView: int mBasePadding>;

        i21 = i19 - $i4;

        $i5 = r0.<android.widget.CheckedTextView: int mCheckMarkWidth>;

        i20 = i21 - $i5;

     label5:
        $i6 = r0.<android.widget.CheckedTextView: int mScrollX>;

        $i9 = $i6 + i20;

        $i7 = r0.<android.widget.CheckedTextView: int mScrollX>;

        $i8 = $i7 + i21;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i9, i18, $i8, i0);

        virtualinvoke r1.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r2);

        r3 = virtualinvoke r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable getBackground()>();

        if r3 == null goto label6;

        $i10 = r0.<android.widget.CheckedTextView: int mScrollX>;

        $i13 = $i10 + i20;

        $i11 = r0.<android.widget.CheckedTextView: int mScrollX>;

        $i12 = $i11 + i21;

        virtualinvoke r3.<android.graphics.drawable.Drawable: void setHotspotBounds(int,int,int,int)>($i13, i18, $i12, i0);

     label6:
        return;
    }

    public void onInitializeAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        android.widget.CheckedTextView r0;
        android.view.accessibility.AccessibilityEvent r1;
        boolean $z0;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        specialinvoke r0.<android.widget.TextView: void onInitializeAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r1);

        $z0 = r0.<android.widget.CheckedTextView: boolean mChecked>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setChecked(boolean)>($z0);

        return;
    }

    public void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)
    {
        android.widget.CheckedTextView r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        boolean $z0;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.widget.TextView: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>(1);

        $z0 = r0.<android.widget.CheckedTextView: boolean mChecked>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>($z0);

        return;
    }

    public void onRestoreInstanceState(android.os.Parcelable)
    {
        android.widget.CheckedTextView r0;
        android.os.Parcelable $r1, r2;
        boolean $z0;
        android.widget.CheckedTextView$SavedState r3;

        r0 := @this: android.widget.CheckedTextView;

        r2 := @parameter0: android.os.Parcelable;

        r3 = (android.widget.CheckedTextView$SavedState) r2;

        $r1 = virtualinvoke r3.<android.widget.CheckedTextView$SavedState: android.os.Parcelable getSuperState()>();

        specialinvoke r0.<android.widget.TextView: void onRestoreInstanceState(android.os.Parcelable)>($r1);

        $z0 = r3.<android.widget.CheckedTextView$SavedState: boolean checked>;

        virtualinvoke r0.<android.widget.CheckedTextView: void setChecked(boolean)>($z0);

        virtualinvoke r0.<android.widget.CheckedTextView: void requestLayout()>();

        return;
    }

    public void onRtlPropertiesChanged(int)
    {
        android.widget.CheckedTextView r0;
        int i0;

        r0 := @this: android.widget.CheckedTextView;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.TextView: void onRtlPropertiesChanged(int)>(i0);

        specialinvoke r0.<android.widget.CheckedTextView: void updatePadding()>();

        return;
    }

    public android.os.Parcelable onSaveInstanceState()
    {
        android.widget.CheckedTextView r0;
        android.widget.CheckedTextView$SavedState $r2;
        android.os.Parcelable $r3;
        boolean $z0;

        r0 := @this: android.widget.CheckedTextView;

        $r2 = new android.widget.CheckedTextView$SavedState;

        $r3 = specialinvoke r0.<android.widget.TextView: android.os.Parcelable onSaveInstanceState()>();

        specialinvoke $r2.<android.widget.CheckedTextView$SavedState: void <init>(android.os.Parcelable)>($r3);

        $z0 = virtualinvoke r0.<android.widget.CheckedTextView: boolean isChecked()>();

        $r2.<android.widget.CheckedTextView$SavedState: boolean checked> = $z0;

        return $r2;
    }

    public void setCheckMarkDrawable(int)
    {
        android.widget.CheckedTextView r0;
        int i0, $i1;
        android.content.Context $r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: android.widget.CheckedTextView;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $i1 = r0.<android.widget.CheckedTextView: int mCheckMarkResource>;

        if i0 != $i1 goto label1;

        return;

     label1:
        if i0 == 0 goto label2;

        $r1 = virtualinvoke r0.<android.widget.CheckedTextView: android.content.Context getContext()>();

        r2 = virtualinvoke $r1.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i0);

        goto label3;

     label2:
        r2 = null;

     label3:
        specialinvoke r0.<android.widget.CheckedTextView: void setCheckMarkDrawableInternal(android.graphics.drawable.Drawable,int)>(r2, i0);

        return;
    }

    public void setCheckMarkDrawable(android.graphics.drawable.Drawable)
    {
        android.widget.CheckedTextView r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        specialinvoke r0.<android.widget.CheckedTextView: void setCheckMarkDrawableInternal(android.graphics.drawable.Drawable,int)>(r1, 0);

        return;
    }

    public void setCheckMarkTintBlendMode(android.graphics.BlendMode)
    {
        android.widget.CheckedTextView r0;
        android.graphics.BlendMode r1;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.graphics.BlendMode;

        r0.<android.widget.CheckedTextView: android.graphics.BlendMode mCheckMarkBlendMode> = r1;

        r0.<android.widget.CheckedTextView: boolean mHasCheckMarkTintMode> = 1;

        specialinvoke r0.<android.widget.CheckedTextView: void applyCheckMarkTint()>();

        return;
    }

    public void setCheckMarkTintList(android.content.res.ColorStateList)
    {
        android.widget.CheckedTextView r0;
        android.content.res.ColorStateList r1;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.content.res.ColorStateList;

        r0.<android.widget.CheckedTextView: android.content.res.ColorStateList mCheckMarkTintList> = r1;

        r0.<android.widget.CheckedTextView: boolean mHasCheckMarkTint> = 1;

        specialinvoke r0.<android.widget.CheckedTextView: void applyCheckMarkTint()>();

        return;
    }

    public void setCheckMarkTintMode(android.graphics.PorterDuff$Mode)
    {
        android.widget.CheckedTextView r0;
        int $i0;
        android.graphics.PorterDuff$Mode r1;
        android.graphics.BlendMode r2;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.graphics.PorterDuff$Mode;

        if r1 == null goto label1;

        $i0 = r1.<android.graphics.PorterDuff$Mode: int nativeInt>;

        r2 = staticinvoke <android.graphics.BlendMode: android.graphics.BlendMode fromValue(int)>($i0);

        goto label2;

     label1:
        r2 = null;

     label2:
        virtualinvoke r0.<android.widget.CheckedTextView: void setCheckMarkTintBlendMode(android.graphics.BlendMode)>(r2);

        return;
    }

    public void setChecked(boolean)
    {
        android.widget.CheckedTextView r0;
        boolean z0, $z1;

        r0 := @this: android.widget.CheckedTextView;

        z0 := @parameter0: boolean;

        $z1 = r0.<android.widget.CheckedTextView: boolean mChecked>;

        if $z1 == z0 goto label1;

        r0.<android.widget.CheckedTextView: boolean mChecked> = z0;

        virtualinvoke r0.<android.widget.CheckedTextView: void refreshDrawableState()>();

        virtualinvoke r0.<android.widget.CheckedTextView: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

     label1:
        return;
    }

    public void setVisibility(int)
    {
        android.widget.CheckedTextView r0;
        int i0;
        android.graphics.drawable.Drawable r1;
        boolean z1;

        r0 := @this: android.widget.CheckedTextView;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.TextView: void setVisibility(int)>(i0);

        r1 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        if r1 == null goto label3;

        if i0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z1, 0);

     label3:
        return;
    }

    public void toggle()
    {
        android.widget.CheckedTextView r0;
        boolean $z0, $z1;

        r0 := @this: android.widget.CheckedTextView;

        $z0 = r0.<android.widget.CheckedTextView: boolean mChecked>;

        $z1 = $z0 ^ 1;

        virtualinvoke r0.<android.widget.CheckedTextView: void setChecked(boolean)>($z1);

        return;
    }

    protected boolean verifyDrawable(android.graphics.drawable.Drawable)
    {
        android.widget.CheckedTextView r0;
        android.graphics.drawable.Drawable r1, $r2;
        boolean $z0, z1;

        r0 := @this: android.widget.CheckedTextView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<android.widget.CheckedTextView: android.graphics.drawable.Drawable mCheckMarkDrawable>;

        if r1 == $r2 goto label2;

        $z0 = specialinvoke r0.<android.widget.TextView: boolean verifyDrawable(android.graphics.drawable.Drawable)>(r1);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }
}
