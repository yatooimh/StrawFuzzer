abstract class android.widget.DatePicker$AbstractDatePickerDelegate extends java.lang.Object implements android.widget.DatePicker$DatePickerDelegate
{
    protected android.widget.DatePicker$OnDateChangedListener mAutoFillChangeListener;
    private long mAutofilledValue;
    protected android.content.Context mContext;
    protected android.icu.util.Calendar mCurrentDate;
    protected java.util.Locale mCurrentLocale;
    protected android.widget.DatePicker mDelegator;
    protected android.widget.DatePicker$OnDateChangedListener mOnDateChangedListener;
    protected android.widget.DatePicker$ValidationCallback mValidationCallback;

    public void <init>(android.widget.DatePicker, android.content.Context)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        android.widget.DatePicker r1;
        android.content.Context r2;
        java.util.Locale $r3;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r1 := @parameter0: android.widget.DatePicker;

        r2 := @parameter1: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.widget.DatePicker mDelegator> = r1;

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.content.Context mContext> = r2;

        $r3 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        virtualinvoke r0.<android.widget.DatePicker$AbstractDatePickerDelegate: void setCurrentLocale(java.util.Locale)>($r3);

        return;
    }

    public final void autofill(android.view.autofill.AutofillValue)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        long l0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r3;
        boolean $z0;
        java.util.Locale $r8;
        int $i2, $i3, $i4;
        android.view.autofill.AutofillValue r9;
        android.icu.util.Calendar r10;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r9 := @parameter0: android.view.autofill.AutofillValue;

        if r9 == null goto label2;

        $z0 = virtualinvoke r9.<android.view.autofill.AutofillValue: boolean isDate()>();

        if $z0 != 0 goto label1;

        goto label2;

     label1:
        l0 = virtualinvoke r9.<android.view.autofill.AutofillValue: long getDateValue()>();

        $r8 = r0.<android.widget.DatePicker$AbstractDatePickerDelegate: java.util.Locale mCurrentLocale>;

        r10 = staticinvoke <android.icu.util.Calendar: android.icu.util.Calendar getInstance(java.util.Locale)>($r8);

        virtualinvoke r10.<android.icu.util.Calendar: void setTimeInMillis(long)>(l0);

        $i2 = virtualinvoke r10.<android.icu.util.Calendar: int get(int)>(1);

        $i3 = virtualinvoke r10.<android.icu.util.Calendar: int get(int)>(2);

        $i4 = virtualinvoke r10.<android.icu.util.Calendar: int get(int)>(5);

        virtualinvoke r0.<android.widget.DatePicker$AbstractDatePickerDelegate: void updateDate(int,int,int)>($i2, $i3, $i4);

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: long mAutofilledValue> = l0;

        return;

     label2:
        r1 = staticinvoke <android.widget.DatePicker: java.lang.String access$000()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" could not be autofilled into ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r1, $r7);

        return;
    }

    public final android.view.autofill.AutofillValue getAutofillValue()
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        byte $b0;
        android.icu.util.Calendar $r1;
        android.view.autofill.AutofillValue $r2;
        long l1;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        l1 = r0.<android.widget.DatePicker$AbstractDatePickerDelegate: long mAutofilledValue>;

        $b0 = l1 cmp 0L;

        if $b0 == 0 goto label1;

        goto label2;

     label1:
        $r1 = r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.icu.util.Calendar mCurrentDate>;

        l1 = virtualinvoke $r1.<android.icu.util.Calendar: long getTimeInMillis()>();

     label2:
        $r2 = staticinvoke <android.view.autofill.AutofillValue: android.view.autofill.AutofillValue forDate(long)>(l1);

        return $r2;
    }

    protected java.lang.String getFormattedCurrentDate()
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        android.icu.util.Calendar $r1;
        android.content.Context $r2;
        long $l0;
        java.lang.String $r3;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        $r2 = r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.content.Context mContext>;

        $r1 = r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.icu.util.Calendar mCurrentDate>;

        $l0 = virtualinvoke $r1.<android.icu.util.Calendar: long getTimeInMillis()>();

        $r3 = staticinvoke <android.text.format.DateUtils: java.lang.String formatDateTime(android.content.Context,long,int)>($r2, $l0, 22);

        return $r3;
    }

    protected void onLocaleChanged(java.util.Locale)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        java.util.Locale r1;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r1 := @parameter0: java.util.Locale;

        return;
    }

    public void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        android.view.accessibility.AccessibilityEvent r1;
        java.util.List $r2;
        java.lang.String $r3;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $r2 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: java.util.List getText()>();

        $r3 = virtualinvoke r0.<android.widget.DatePicker$AbstractDatePickerDelegate: java.lang.String getFormattedCurrentDate()>();

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3);

        return;
    }

    protected void onValidationChanged(boolean)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        boolean z0;
        android.widget.DatePicker$ValidationCallback r1;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        z0 := @parameter0: boolean;

        r1 = r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.widget.DatePicker$ValidationCallback mValidationCallback>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.widget.DatePicker$ValidationCallback: void onValidationChanged(boolean)>(z0);

     label1:
        return;
    }

    protected void resetAutofilledValue()
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: long mAutofilledValue> = 0L;

        return;
    }

    public void setAutoFillChangeListener(android.widget.DatePicker$OnDateChangedListener)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        android.widget.DatePicker$OnDateChangedListener r1;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r1 := @parameter0: android.widget.DatePicker$OnDateChangedListener;

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.widget.DatePicker$OnDateChangedListener mAutoFillChangeListener> = r1;

        return;
    }

    protected void setCurrentLocale(java.util.Locale)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        java.util.Locale r1, $r2;
        boolean $z0;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r1 := @parameter0: java.util.Locale;

        $r2 = r0.<android.widget.DatePicker$AbstractDatePickerDelegate: java.util.Locale mCurrentLocale>;

        $z0 = virtualinvoke r1.<java.util.Locale: boolean equals(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: java.util.Locale mCurrentLocale> = r1;

        virtualinvoke r0.<android.widget.DatePicker$AbstractDatePickerDelegate: void onLocaleChanged(java.util.Locale)>(r1);

     label1:
        return;
    }

    public void setOnDateChangedListener(android.widget.DatePicker$OnDateChangedListener)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        android.widget.DatePicker$OnDateChangedListener r1;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r1 := @parameter0: android.widget.DatePicker$OnDateChangedListener;

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.widget.DatePicker$OnDateChangedListener mOnDateChangedListener> = r1;

        return;
    }

    public void setValidationCallback(android.widget.DatePicker$ValidationCallback)
    {
        android.widget.DatePicker$AbstractDatePickerDelegate r0;
        android.widget.DatePicker$ValidationCallback r1;

        r0 := @this: android.widget.DatePicker$AbstractDatePickerDelegate;

        r1 := @parameter0: android.widget.DatePicker$ValidationCallback;

        r0.<android.widget.DatePicker$AbstractDatePickerDelegate: android.widget.DatePicker$ValidationCallback mValidationCallback> = r1;

        return;
    }
}
