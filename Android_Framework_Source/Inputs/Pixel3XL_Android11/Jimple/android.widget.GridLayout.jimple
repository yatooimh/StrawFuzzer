public class android.widget.GridLayout extends android.view.ViewGroup
{
    private static final int ALIGNMENT_MODE;
    public static final int ALIGN_BOUNDS;
    public static final int ALIGN_MARGINS;
    public static final android.widget.GridLayout$Alignment BASELINE;
    public static final android.widget.GridLayout$Alignment BOTTOM;
    private static final int CAN_STRETCH;
    public static final android.widget.GridLayout$Alignment CENTER;
    private static final int COLUMN_COUNT;
    private static final int COLUMN_ORDER_PRESERVED;
    private static final int DEFAULT_ALIGNMENT_MODE;
    static final int DEFAULT_CONTAINER_MARGIN;
    private static final int DEFAULT_COUNT;
    private static final boolean DEFAULT_ORDER_PRESERVED;
    private static final int DEFAULT_ORIENTATION;
    private static final boolean DEFAULT_USE_DEFAULT_MARGINS;
    public static final android.widget.GridLayout$Alignment END;
    public static final android.widget.GridLayout$Alignment FILL;
    public static final int HORIZONTAL;
    private static final int INFLEXIBLE;
    private static final android.widget.GridLayout$Alignment LEADING;
    public static final android.widget.GridLayout$Alignment LEFT;
    static final android.util.Printer LOG_PRINTER;
    static final int MAX_SIZE;
    static final android.util.Printer NO_PRINTER;
    private static final int ORIENTATION;
    public static final android.widget.GridLayout$Alignment RIGHT;
    private static final int ROW_COUNT;
    private static final int ROW_ORDER_PRESERVED;
    public static final android.widget.GridLayout$Alignment START;
    public static final android.widget.GridLayout$Alignment TOP;
    private static final android.widget.GridLayout$Alignment TRAILING;
    public static final int UNDEFINED;
    static final android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT;
    static final int UNINITIALIZED_HASH;
    private static final int USE_DEFAULT_MARGINS;
    public static final int VERTICAL;
    int mAlignmentMode;
    int mDefaultGap;
    final android.widget.GridLayout$Axis mHorizontalAxis;
    int mLastLayoutParamsHashCode;
    int mOrientation;
    android.util.Printer mPrinter;
    boolean mUseDefaultMargins;
    final android.widget.GridLayout$Axis mVerticalAxis;

    static void <clinit>()
    {
        android.widget.GridLayout$Alignment r1, $r9, $r10, $r11, $r12;
        android.util.LogPrinter $r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        android.widget.GridLayout$1 $r5;
        android.widget.GridLayout$2 $r6;
        android.widget.GridLayout$3 $r7;
        android.widget.GridLayout$4 $r8;
        android.widget.GridLayout$6 $r13;
        android.widget.GridLayout$7 $r14;
        android.widget.GridLayout$8 $r15;

        <android.widget.GridLayout: int VERTICAL> = 1;

        <android.widget.GridLayout: int USE_DEFAULT_MARGINS> = 5;

        <android.widget.GridLayout: int UNINITIALIZED_HASH> = 0;

        <android.widget.GridLayout: int UNDEFINED> = -2147483648;

        <android.widget.GridLayout: int ROW_ORDER_PRESERVED> = 2;

        <android.widget.GridLayout: int ROW_COUNT> = 1;

        <android.widget.GridLayout: int ORIENTATION> = 0;

        <android.widget.GridLayout: int MAX_SIZE> = 100000;

        <android.widget.GridLayout: int INFLEXIBLE> = 0;

        <android.widget.GridLayout: int HORIZONTAL> = 0;

        <android.widget.GridLayout: boolean DEFAULT_USE_DEFAULT_MARGINS> = 0;

        <android.widget.GridLayout: int DEFAULT_ORIENTATION> = 0;

        <android.widget.GridLayout: boolean DEFAULT_ORDER_PRESERVED> = 1;

        <android.widget.GridLayout: int DEFAULT_COUNT> = -2147483648;

        <android.widget.GridLayout: int DEFAULT_CONTAINER_MARGIN> = 0;

        <android.widget.GridLayout: int DEFAULT_ALIGNMENT_MODE> = 1;

        <android.widget.GridLayout: int COLUMN_ORDER_PRESERVED> = 4;

        <android.widget.GridLayout: int COLUMN_COUNT> = 3;

        <android.widget.GridLayout: int CAN_STRETCH> = 2;

        <android.widget.GridLayout: int ALIGN_MARGINS> = 1;

        <android.widget.GridLayout: int ALIGN_BOUNDS> = 0;

        <android.widget.GridLayout: int ALIGNMENT_MODE> = 6;

        $r2 = new android.util.LogPrinter;

        $r3 = class "Landroid/widget/GridLayout;";

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        specialinvoke $r2.<android.util.LogPrinter: void <init>(int,java.lang.String)>(3, $r4);

        <android.widget.GridLayout: android.util.Printer LOG_PRINTER> = $r2;

        $r5 = new android.widget.GridLayout$1;

        specialinvoke $r5.<android.widget.GridLayout$1: void <init>()>();

        <android.widget.GridLayout: android.util.Printer NO_PRINTER> = $r5;

        $r6 = new android.widget.GridLayout$2;

        specialinvoke $r6.<android.widget.GridLayout$2: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT> = $r6;

        $r7 = new android.widget.GridLayout$3;

        specialinvoke $r7.<android.widget.GridLayout$3: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment LEADING> = $r7;

        $r8 = new android.widget.GridLayout$4;

        specialinvoke $r8.<android.widget.GridLayout$4: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment TRAILING> = $r8;

        r1 = <android.widget.GridLayout: android.widget.GridLayout$Alignment LEADING>;

        <android.widget.GridLayout: android.widget.GridLayout$Alignment TOP> = r1;

        <android.widget.GridLayout: android.widget.GridLayout$Alignment BOTTOM> = $r8;

        <android.widget.GridLayout: android.widget.GridLayout$Alignment START> = r1;

        <android.widget.GridLayout: android.widget.GridLayout$Alignment END> = $r8;

        $r9 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Alignment createSwitchingAlignment(android.widget.GridLayout$Alignment,android.widget.GridLayout$Alignment)>(r1, $r8);

        <android.widget.GridLayout: android.widget.GridLayout$Alignment LEFT> = $r9;

        $r11 = <android.widget.GridLayout: android.widget.GridLayout$Alignment END>;

        $r10 = <android.widget.GridLayout: android.widget.GridLayout$Alignment START>;

        $r12 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Alignment createSwitchingAlignment(android.widget.GridLayout$Alignment,android.widget.GridLayout$Alignment)>($r11, $r10);

        <android.widget.GridLayout: android.widget.GridLayout$Alignment RIGHT> = $r12;

        $r13 = new android.widget.GridLayout$6;

        specialinvoke $r13.<android.widget.GridLayout$6: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment CENTER> = $r13;

        $r14 = new android.widget.GridLayout$7;

        specialinvoke $r14.<android.widget.GridLayout$7: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment BASELINE> = $r14;

        $r15 = new android.widget.GridLayout$8;

        specialinvoke $r15.<android.widget.GridLayout$8: void <init>()>();

        <android.widget.GridLayout: android.widget.GridLayout$Alignment FILL> = $r15;

        return;
    }

    public void <init>(android.content.Context)
    {
        android.widget.GridLayout r0;
        android.content.Context r1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.widget.GridLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.widget.GridLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.widget.GridLayout: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.widget.GridLayout r0;
        android.util.AttributeSet r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        android.content.res.TypedArray r2;
        android.widget.GridLayout$Axis $r3, $r4;
        android.util.Printer $r5;
        android.content.res.Resources $r6;
        int[] $r7, $r8;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r9;
        android.content.Context r10;

        r0 := @this: android.widget.GridLayout;

        r10 := @parameter0: android.content.Context;

        r1 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r10, r1, i0, i1);

        $r3 = new android.widget.GridLayout$Axis;

        specialinvoke $r3.<android.widget.GridLayout$Axis: void <init>(android.widget.GridLayout,boolean,android.widget.GridLayout$1)>(r0, 1, null);

        r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis> = $r3;

        $r4 = new android.widget.GridLayout$Axis;

        specialinvoke $r4.<android.widget.GridLayout$Axis: void <init>(android.widget.GridLayout,boolean,android.widget.GridLayout$1)>(r0, 0, null);

        r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis> = $r4;

        r0.<android.widget.GridLayout: int mOrientation> = 0;

        r0.<android.widget.GridLayout: boolean mUseDefaultMargins> = 0;

        r0.<android.widget.GridLayout: int mAlignmentMode> = 1;

        r0.<android.widget.GridLayout: int mLastLayoutParamsHashCode> = 0;

        $r5 = <android.widget.GridLayout: android.util.Printer LOG_PRINTER>;

        r0.<android.widget.GridLayout: android.util.Printer mPrinter> = $r5;

        $r6 = virtualinvoke r10.<android.content.Context: android.content.res.Resources getResources()>();

        $i2 = virtualinvoke $r6.<android.content.res.Resources: int getDimensionPixelOffset(int)>(17105146);

        r0.<android.widget.GridLayout: int mDefaultGap> = $i2;

        $r7 = <com.android.internal.R$styleable: int[] GridLayout>;

        r2 = virtualinvoke r10.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r1, $r7, i0, i1);

        $r8 = <com.android.internal.R$styleable: int[] GridLayout>;

        virtualinvoke r0.<android.widget.GridLayout: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>(r10, $r8, r1, r2, i0, i1);

     label1:
        $i3 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(1, -2147483648);

        virtualinvoke r0.<android.widget.GridLayout: void setRowCount(int)>($i3);

        $i4 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(3, -2147483648);

        virtualinvoke r0.<android.widget.GridLayout: void setColumnCount(int)>($i4);

        $i5 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(0, 0);

        virtualinvoke r0.<android.widget.GridLayout: void setOrientation(int)>($i5);

        $z0 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(5, 0);

        virtualinvoke r0.<android.widget.GridLayout: void setUseDefaultMargins(boolean)>($z0);

        $i6 = virtualinvoke r2.<android.content.res.TypedArray: int getInt(int,int)>(6, 1);

        virtualinvoke r0.<android.widget.GridLayout: void setAlignmentMode(int)>($i6);

        $z1 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(2, 1);

        virtualinvoke r0.<android.widget.GridLayout: void setRowOrderPreserved(boolean)>($z1);

        $z2 = virtualinvoke r2.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, 1);

        virtualinvoke r0.<android.widget.GridLayout: void setColumnOrderPreserved(boolean)>($z2);

     label2:
        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        return;

     label3:
        $r9 := @caughtexception;

        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void access$200(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <android.widget.GridLayout: void handleInvalidParams(java.lang.String)>(r0);

        return;
    }

    static int adjust(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 + i1;

        $i3 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>($i2);

        $i4 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0);

        $i5 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i3, $i4);

        return $i5;
    }

    static java.lang.Object[] append(java.lang.Object[], java.lang.Object[])
    {
        java.lang.Object[] r0, r1, r2;
        java.lang.Class $r3, $r4;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.Object $r5;

        r0 := @parameter0: java.lang.Object[];

        r1 := @parameter1: java.lang.Object[];

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Class getComponentType()>();

        $i1 = lengthof r0;

        $i0 = lengthof r1;

        $i2 = $i1 + $i0;

        $r5 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r4, $i2);

        r2 = (java.lang.Object[]) $r5;

        $i3 = lengthof r0;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, $i3);

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, $i5, $i4);

        return r2;
    }

    static boolean canStretch(int)
    {
        int i0, $i1;
        boolean z0;

        i0 := @parameter0: int;

        $i1 = i0 & 2;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void checkLayoutParams(android.widget.GridLayout$LayoutParams, boolean)
    {
        android.widget.GridLayout r0;
        boolean z0;
        android.widget.GridLayout$Interval r1;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.StringBuilder $r2, $r8, $r14;
        java.lang.String $r7, $r13, $r17, r19;
        android.widget.GridLayout$LayoutParams r18;
        android.widget.GridLayout$Spec r20;
        android.widget.GridLayout$Axis r22;

        r0 := @this: android.widget.GridLayout;

        r18 := @parameter0: android.widget.GridLayout$LayoutParams;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        r19 = "column";

        goto label2;

     label1:
        r19 = "row";

     label2:
        if z0 == 0 goto label3;

        r20 = r18.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        goto label4;

     label3:
        r20 = r18.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

     label4:
        r1 = r20.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        $i1 = r1.<android.widget.GridLayout$Interval: int min>;

        if $i1 == -2147483648 goto label5;

        $i4 = r1.<android.widget.GridLayout$Interval: int min>;

        if $i4 >= 0 goto label5;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" indices must be positive");

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.widget.GridLayout: void handleInvalidParams(java.lang.String)>($r17);

     label5:
        if z0 == 0 goto label6;

        r22 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        goto label7;

     label6:
        r22 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

     label7:
        i0 = r22.<android.widget.GridLayout$Axis: int definedCount>;

        if i0 == -2147483648 goto label9;

        $i2 = r1.<android.widget.GridLayout$Interval: int max>;

        if $i2 <= i0 goto label8;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" indices (start + span) mustn\'t exceed the ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count");

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.widget.GridLayout: void handleInvalidParams(java.lang.String)>($r13);

     label8:
        $i3 = virtualinvoke r1.<android.widget.GridLayout$Interval: int size()>();

        if $i3 <= i0 goto label9;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" span mustn\'t exceed the ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" count");

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.widget.GridLayout: void handleInvalidParams(java.lang.String)>($r7);

     label9:
        return;
    }

    private static int clip(android.widget.GridLayout$Interval, boolean, int)
    {
        android.widget.GridLayout$Interval r0;
        boolean z0;
        int i0, i1, $i2, $i3, $i4, i5;

        r0 := @parameter0: android.widget.GridLayout$Interval;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        i1 = virtualinvoke r0.<android.widget.GridLayout$Interval: int size()>();

        if i0 != 0 goto label1;

        return i1;

     label1:
        if z0 == 0 goto label2;

        $i4 = r0.<android.widget.GridLayout$Interval: int min>;

        i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i0);

        goto label3;

     label2:
        i5 = 0;

     label3:
        $i2 = i0 - i5;

        $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i2);

        return $i3;
    }

    private int computeLayoutParamsHashCode()
    {
        android.widget.GridLayout r0;
        int i0, $i1, $i2, $i3, i4, i5;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.widget.GridLayout$LayoutParams $r3;

        r0 := @this: android.widget.GridLayout;

        i4 = 1;

        i5 = 0;

        i0 = virtualinvoke r0.<android.widget.GridLayout: int getChildCount()>();

     label1:
        if i5 >= i0 goto label4;

        r1 = virtualinvoke r0.<android.widget.GridLayout: android.view.View getChildAt(int)>(i5);

        $i1 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i1 != 8 goto label2;

        goto label3;

     label2:
        $i2 = i4 * 31;

        $r2 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.widget.GridLayout$LayoutParams) $r2;

        $i3 = virtualinvoke $r3.<android.widget.GridLayout$LayoutParams: int hashCode()>();

        i4 = $i2 + $i3;

     label3:
        i5 = i5 + 1;

        goto label1;

     label4:
        return i4;
    }

    private void consistencyCheck()
    {
        android.widget.GridLayout r0;
        int i0, $i1, $i2;
        android.util.Printer $r1;

        r0 := @this: android.widget.GridLayout;

        i0 = r0.<android.widget.GridLayout: int mLastLayoutParamsHashCode>;

        if i0 != 0 goto label1;

        specialinvoke r0.<android.widget.GridLayout: void validateLayoutParams()>();

        $i2 = specialinvoke r0.<android.widget.GridLayout: int computeLayoutParamsHashCode()>();

        r0.<android.widget.GridLayout: int mLastLayoutParamsHashCode> = $i2;

        goto label2;

     label1:
        $i1 = specialinvoke r0.<android.widget.GridLayout: int computeLayoutParamsHashCode()>();

        if i0 == $i1 goto label2;

        $r1 = r0.<android.widget.GridLayout: android.util.Printer mPrinter>;

        interfaceinvoke $r1.<android.util.Printer: void println(java.lang.String)>("The fields of some layout parameters were modified in between layout operations. Check the javadoc for GridLayout.LayoutParams#rowSpec.");

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        specialinvoke r0.<android.widget.GridLayout: void consistencyCheck()>();

     label2:
        return;
    }

    private static android.widget.GridLayout$Alignment createSwitchingAlignment(android.widget.GridLayout$Alignment, android.widget.GridLayout$Alignment)
    {
        android.widget.GridLayout$Alignment r0, r1;
        android.widget.GridLayout$5 $r2;

        r0 := @parameter0: android.widget.GridLayout$Alignment;

        r1 := @parameter1: android.widget.GridLayout$Alignment;

        $r2 = new android.widget.GridLayout$5;

        specialinvoke $r2.<android.widget.GridLayout$5: void <init>(android.widget.GridLayout$Alignment,android.widget.GridLayout$Alignment)>(r0, r1);

        return $r2;
    }

    private void drawLine(android.graphics.Canvas, int, int, int, int, android.graphics.Paint)
    {
        android.widget.GridLayout r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, i3, i4, $i5, $i6;
        android.graphics.Paint r2;
        boolean $z0;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r2 := @parameter5: android.graphics.Paint;

        $z0 = virtualinvoke r0.<android.widget.GridLayout: boolean isLayoutRtl()>();

        if $z0 == 0 goto label1;

        i4 = virtualinvoke r0.<android.widget.GridLayout: int getWidth()>();

        $i5 = i4 - i0;

        $f7 = (float) $i5;

        $f6 = (float) i1;

        $i6 = i4 - i2;

        $f5 = (float) $i6;

        $f4 = (float) i3;

        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f7, $f6, $f5, $f4, r2);

        goto label2;

     label1:
        $f3 = (float) i0;

        $f2 = (float) i1;

        $f1 = (float) i2;

        $f0 = (float) i3;

        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r2);

     label2:
        return;
    }

    private static boolean fits(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, $i2, $i3, i4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i4 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = lengthof r0;

        if i1 <= $i2 goto label1;

        return 0;

     label1:
        if i4 >= i1 goto label3;

        $i3 = r0[i4];

        if $i3 <= i0 goto label2;

        return 0;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 1;
    }

    static android.widget.GridLayout$Alignment getAlignment(int, boolean)
    {
        boolean z0;
        int $i0, i1, i4;
        android.widget.GridLayout$Alignment $r0, $r1, $r2, $r3, $r4, r5, r6;
        byte b2, b3;

        i1 := @parameter0: int;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label01;

        b2 = 7;

        goto label02;

     label01:
        b2 = 112;

     label02:
        if z0 == 0 goto label03;

        b3 = 0;

        goto label04;

     label03:
        b3 = 4;

     label04:
        $i0 = i1 & b2;

        i4 = $i0 >> b3;

        if i4 == 1 goto label14;

        if i4 == 3 goto label11;

        if i4 == 5 goto label08;

        if i4 == 7 goto label07;

        if i4 == 8388611 goto label06;

        if i4 == 8388613 goto label05;

        $r4 = <android.widget.GridLayout: android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT>;

        return $r4;

     label05:
        $r3 = <android.widget.GridLayout: android.widget.GridLayout$Alignment END>;

        return $r3;

     label06:
        $r2 = <android.widget.GridLayout: android.widget.GridLayout$Alignment START>;

        return $r2;

     label07:
        $r1 = <android.widget.GridLayout: android.widget.GridLayout$Alignment FILL>;

        return $r1;

     label08:
        if z0 == 0 goto label09;

        r5 = <android.widget.GridLayout: android.widget.GridLayout$Alignment RIGHT>;

        goto label10;

     label09:
        r5 = <android.widget.GridLayout: android.widget.GridLayout$Alignment BOTTOM>;

     label10:
        return r5;

     label11:
        if z0 == 0 goto label12;

        r6 = <android.widget.GridLayout: android.widget.GridLayout$Alignment LEFT>;

        goto label13;

     label12:
        r6 = <android.widget.GridLayout: android.widget.GridLayout$Alignment TOP>;

     label13:
        return r6;

     label14:
        $r0 = <android.widget.GridLayout: android.widget.GridLayout$Alignment CENTER>;

        return $r0;
    }

    private int getDefaultMargin(android.view.View, android.widget.GridLayout$LayoutParams, boolean, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0, z1, $z3, z4, z5, z6;
        int $i0, $i1, $i2, $i3;
        android.widget.GridLayout$LayoutParams r2;
        android.widget.GridLayout$Spec r3;
        android.widget.GridLayout$Axis r4;
        android.widget.GridLayout$Interval r5;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.widget.GridLayout$LayoutParams;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z4 = r0.<android.widget.GridLayout: boolean mUseDefaultMargins>;

        if z4 != 0 goto label01;

        return 0;

     label01:
        if z0 == 0 goto label02;

        r3 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        goto label03;

     label02:
        r3 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

     label03:
        if z0 == 0 goto label04;

        r4 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        goto label05;

     label04:
        r4 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

     label05:
        r5 = r3.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        if z0 == 0 goto label07;

        $z3 = virtualinvoke r0.<android.widget.GridLayout: boolean isLayoutRtl()>();

        if $z3 == 0 goto label07;

        if z1 != 0 goto label06;

        z5 = 1;

        goto label08;

     label06:
        z5 = 0;

        goto label08;

     label07:
        z5 = z1;

     label08:
        if z5 == 0 goto label09;

        z6 = 0;

        $i2 = r5.<android.widget.GridLayout$Interval: int min>;

        if $i2 != 0 goto label11;

        goto label10;

     label09:
        z6 = 0;

        $i0 = r5.<android.widget.GridLayout$Interval: int max>;

        $i1 = virtualinvoke r4.<android.widget.GridLayout$Axis: int getCount()>();

        if $i0 != $i1 goto label11;

     label10:
        z6 = 1;

     label11:
        $i3 = specialinvoke r0.<android.widget.GridLayout: int getDefaultMargin(android.view.View,boolean,boolean,boolean)>(r1, z6, z0, z1);

        return $i3;
    }

    private int getDefaultMargin(android.view.View, boolean, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0, z1;
        java.lang.Class $r2;
        int $i0, $i1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        if $r2 != class "Landroid/widget/Space;" goto label1;

        return 0;

     label1:
        $i0 = r0.<android.widget.GridLayout: int mDefaultGap>;

        $i1 = $i0 / 2;

        return $i1;
    }

    private int getDefaultMargin(android.view.View, boolean, boolean, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0, z1, z2;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        $i0 = specialinvoke r0.<android.widget.GridLayout: int getDefaultMargin(android.view.View,boolean,boolean)>(r1, z1, z2);

        return $i0;
    }

    private int getMargin(android.view.View, boolean, boolean)
    {
        android.widget.GridLayout r0;
        boolean z0, z1;
        int $i0, $i1, $i2, i3;
        android.view.View r1;
        android.widget.GridLayout$Axis r2;
        int[] r3;
        android.widget.GridLayout$LayoutParams r4;
        android.widget.GridLayout$Spec r5;
        android.widget.GridLayout$Interval r6;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $i0 = r0.<android.widget.GridLayout: int mAlignmentMode>;

        if $i0 != 1 goto label1;

        $i2 = virtualinvoke r0.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r1, z0, z1);

        return $i2;

     label1:
        if z0 == 0 goto label2;

        r2 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        goto label3;

     label2:
        r2 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

     label3:
        if z1 == 0 goto label4;

        r3 = virtualinvoke r2.<android.widget.GridLayout$Axis: int[] getLeadingMargins()>();

        goto label5;

     label4:
        r3 = virtualinvoke r2.<android.widget.GridLayout$Axis: int[] getTrailingMargins()>();

     label5:
        r4 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r1);

        if z0 == 0 goto label6;

        r5 = r4.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        goto label7;

     label6:
        r5 = r4.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

     label7:
        r6 = r5.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        if z1 == 0 goto label8;

        i3 = r6.<android.widget.GridLayout$Interval: int min>;

        goto label9;

     label8:
        i3 = r6.<android.widget.GridLayout$Interval: int max>;

     label9:
        $i1 = r3[i3];

        return $i1;
    }

    private int getMeasurement(android.view.View, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0;
        int i0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        i0 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        goto label2;

     label1:
        i0 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

     label2:
        return i0;
    }

    private int getTotalMargin(android.view.View, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0;
        int $i0, $i1, $i2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        $i0 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r1, z0, 1);

        $i1 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r1, z0, 0);

        $i2 = $i0 + $i1;

        return $i2;
    }

    private static void handleInvalidParams(java.lang.String)
    {
        java.lang.String r0, $r6;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". ");

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void invalidateStructure()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1, $r2;

        r0 := @this: android.widget.GridLayout;

        r0.<android.widget.GridLayout: int mLastLayoutParamsHashCode> = 0;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        virtualinvoke $r1.<android.widget.GridLayout$Axis: void invalidateStructure()>();

        $r2 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        virtualinvoke $r2.<android.widget.GridLayout$Axis: void invalidateStructure()>();

        specialinvoke r0.<android.widget.GridLayout: void invalidateValues()>();

        return;
    }

    private void invalidateValues()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis r1, $r2, $r3;

        r0 := @this: android.widget.GridLayout;

        r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        if r1 == null goto label1;

        $r2 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        if $r2 == null goto label1;

        virtualinvoke r1.<android.widget.GridLayout$Axis: void invalidateValues()>();

        $r3 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        virtualinvoke $r3.<android.widget.GridLayout$Axis: void invalidateValues()>();

     label1:
        return;
    }

    static int max2(int[], int)
    {
        int[] r0;
        int i0, $i1, i2, i3, i4;

        r0 := @parameter0: int[];

        i2 := @parameter1: int;

        i3 = i2;

        i4 = 0;

        i0 = lengthof r0;

     label1:
        if i4 >= i0 goto label2;

        $i1 = r0[i4];

        i3 = staticinvoke <java.lang.Math: int max(int,int)>(i3, $i1);

        i4 = i4 + 1;

        goto label1;

     label2:
        return i3;
    }

    private void measureChildWithMargins2(android.view.View, int, int, int, int)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        int i0, i1, i2, $i3, $i4, $i5, i6, i7;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        i6 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i2 := @parameter4: int;

        $i3 = specialinvoke r0.<android.widget.GridLayout: int getTotalMargin(android.view.View,boolean)>(r1, 1);

        i7 = staticinvoke <android.widget.GridLayout: int getChildMeasureSpec(int,int,int)>(i6, $i3, i1);

        $i4 = specialinvoke r0.<android.widget.GridLayout: int getTotalMargin(android.view.View,boolean)>(r1, 0);

        $i5 = staticinvoke <android.widget.GridLayout: int getChildMeasureSpec(int,int,int)>(i0, $i4, i2);

        virtualinvoke r1.<android.view.View: void measure(int,int)>(i7, $i5);

        return;
    }

    private void measureChildrenWithMargins(int, int, boolean)
    {
        android.widget.GridLayout r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, i16;
        boolean z0, z1;
        android.view.View r1;
        android.widget.GridLayout$LayoutParams r2;
        android.widget.GridLayout$Interval r3;
        android.widget.GridLayout$Alignment $r4, $r5;
        android.widget.GridLayout$Spec r6;
        android.widget.GridLayout$Axis r7;
        int[] r8;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        i2 = virtualinvoke r0.<android.widget.GridLayout: int getChildCount()>();

        i16 = 0;

     label01:
        if i16 >= i2 goto label12;

        r1 = virtualinvoke r0.<android.widget.GridLayout: android.view.View getChildAt(int)>(i16);

        $i4 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i4 != 8 goto label02;

        goto label11;

     label02:
        r2 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r1);

        if z0 == 0 goto label03;

        $i15 = r2.<android.widget.GridLayout$LayoutParams: int width>;

        $i14 = r2.<android.widget.GridLayout$LayoutParams: int height>;

        specialinvoke r0.<android.widget.GridLayout: void measureChildWithMargins2(android.view.View,int,int,int,int)>(r1, i0, i1, $i15, $i14);

        goto label11;

     label03:
        $i5 = r0.<android.widget.GridLayout: int mOrientation>;

        if $i5 != 0 goto label04;

        z1 = 1;

        goto label05;

     label04:
        z1 = 0;

     label05:
        if z1 == 0 goto label06;

        r6 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        goto label07;

     label06:
        r6 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

     label07:
        $r4 = staticinvoke <android.widget.GridLayout$Spec: android.widget.GridLayout$Alignment access$100(android.widget.GridLayout$Spec,boolean)>(r6, z1);

        $r5 = <android.widget.GridLayout: android.widget.GridLayout$Alignment FILL>;

        if $r4 != $r5 goto label11;

        r3 = r6.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        if z1 == 0 goto label08;

        r7 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        goto label09;

     label08:
        r7 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

     label09:
        r8 = virtualinvoke r7.<android.widget.GridLayout$Axis: int[] getLocations()>();

        $i6 = r3.<android.widget.GridLayout$Interval: int max>;

        $i9 = r8[$i6];

        $i7 = r3.<android.widget.GridLayout$Interval: int min>;

        $i8 = r8[$i7];

        $i10 = $i9 - $i8;

        $i11 = specialinvoke r0.<android.widget.GridLayout: int getTotalMargin(android.view.View,boolean)>(r1, z1);

        i3 = $i10 - $i11;

        if z1 == 0 goto label10;

        $i13 = r2.<android.widget.GridLayout$LayoutParams: int height>;

        specialinvoke r0.<android.widget.GridLayout: void measureChildWithMargins2(android.view.View,int,int,int,int)>(r1, i0, i1, i3, $i13);

        goto label11;

     label10:
        $i12 = r2.<android.widget.GridLayout$LayoutParams: int width>;

        specialinvoke r0.<android.widget.GridLayout: void measureChildWithMargins2(android.view.View,int,int,int,int)>(r1, i0, i1, $i12, i3);

     label11:
        i16 = i16 + 1;

        goto label01;

     label12:
        return;
    }

    private static void procrusteanFill(int[], int, int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, $i4, $i5;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 = lengthof r0;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i3);

        $i5 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i3);

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r0, $i4, $i5, i2);

        return;
    }

    private static void setCellGroup(android.widget.GridLayout$LayoutParams, int, int, int, int)
    {
        android.widget.GridLayout$LayoutParams r0;
        int i0, i1, i2, i3, $i4, $i5;
        android.widget.GridLayout$Interval $r1, $r2;

        r0 := @parameter0: android.widget.GridLayout$LayoutParams;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        $r1 = new android.widget.GridLayout$Interval;

        $i4 = i0 + i1;

        specialinvoke $r1.<android.widget.GridLayout$Interval: void <init>(int,int)>(i0, $i4);

        virtualinvoke r0.<android.widget.GridLayout$LayoutParams: void setRowSpecSpan(android.widget.GridLayout$Interval)>($r1);

        $r2 = new android.widget.GridLayout$Interval;

        $i5 = i2 + i3;

        specialinvoke $r2.<android.widget.GridLayout$Interval: void <init>(int,int)>(i2, $i5);

        virtualinvoke r0.<android.widget.GridLayout$LayoutParams: void setColumnSpecSpan(android.widget.GridLayout$Interval)>($r2);

        return;
    }

    public static android.widget.GridLayout$Spec spec(int)
    {
        int i0;
        android.widget.GridLayout$Spec $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int)>(i0, 1);

        return $r0;
    }

    public static android.widget.GridLayout$Spec spec(int, float)
    {
        int i0;
        float f0;
        android.widget.GridLayout$Spec $r0;

        i0 := @parameter0: int;

        f0 := @parameter1: float;

        $r0 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,float)>(i0, 1, f0);

        return $r0;
    }

    public static android.widget.GridLayout$Spec spec(int, int)
    {
        int i0, i1;
        android.widget.GridLayout$Alignment $r0;
        android.widget.GridLayout$Spec $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r0 = <android.widget.GridLayout: android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT>;

        $r1 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment)>(i0, i1, $r0);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int, int, float)
    {
        int i0, i1;
        float f0;
        android.widget.GridLayout$Alignment $r0;
        android.widget.GridLayout$Spec $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        f0 := @parameter2: float;

        $r0 = <android.widget.GridLayout: android.widget.GridLayout$Alignment UNDEFINED_ALIGNMENT>;

        $r1 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment,float)>(i0, i1, $r0, f0);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int, int, android.widget.GridLayout$Alignment)
    {
        int i0, i1;
        android.widget.GridLayout$Alignment r0;
        android.widget.GridLayout$Spec $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.widget.GridLayout$Alignment;

        $r1 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment,float)>(i0, i1, r0, 0.0F);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int, int, android.widget.GridLayout$Alignment, float)
    {
        int i0, i1;
        android.widget.GridLayout$Alignment r0;
        float f0;
        android.widget.GridLayout$Spec $r1;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.widget.GridLayout$Alignment;

        f0 := @parameter3: float;

        if i0 == -2147483648 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r1 = new android.widget.GridLayout$Spec;

        specialinvoke $r1.<android.widget.GridLayout$Spec: void <init>(boolean,int,int,android.widget.GridLayout$Alignment,float,android.widget.GridLayout$1)>(z0, i0, i1, r0, f0, null);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int, android.widget.GridLayout$Alignment)
    {
        int i0;
        android.widget.GridLayout$Alignment r0;
        android.widget.GridLayout$Spec $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.widget.GridLayout$Alignment;

        $r1 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment)>(i0, 1, r0);

        return $r1;
    }

    public static android.widget.GridLayout$Spec spec(int, android.widget.GridLayout$Alignment, float)
    {
        int i0;
        android.widget.GridLayout$Alignment r0;
        float f0;
        android.widget.GridLayout$Spec $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: android.widget.GridLayout$Alignment;

        f0 := @parameter2: float;

        $r1 = staticinvoke <android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment,float)>(i0, 1, r0, f0);

        return $r1;
    }

    private void validateLayoutParams()
    {
        android.widget.GridLayout r0;
        int[] r1;
        android.widget.GridLayout$LayoutParams r2;
        boolean z0, z1, z2, $z3;
        int i0, i1, $i2, $i3, $i4, $i5, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, $i18;
        android.view.View $r3;
        android.view.ViewGroup$LayoutParams $r4;
        android.widget.GridLayout$Axis r6;
        android.widget.GridLayout$Spec r7, r9;
        android.widget.GridLayout$Interval r8, r10;

        r0 := @this: android.widget.GridLayout;

        i6 = r0.<android.widget.GridLayout: int mOrientation>;

        i7 = 0;

        if i6 != 0 goto label01;

        z2 = 1;

        goto label02;

     label01:
        z2 = 0;

     label02:
        if z2 == 0 goto label03;

        r6 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        goto label04;

     label03:
        r6 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

     label04:
        $i2 = r6.<android.widget.GridLayout$Axis: int definedCount>;

        if $i2 == -2147483648 goto label05;

        i7 = r6.<android.widget.GridLayout$Axis: int definedCount>;

     label05:
        i8 = 0;

        i9 = 0;

        r1 = newarray (int)[i7];

        i10 = 0;

        i11 = virtualinvoke r0.<android.widget.GridLayout: int getChildCount()>();

     label06:
        if i10 >= i11 goto label22;

        $r3 = virtualinvoke r0.<android.widget.GridLayout: android.view.View getChildAt(int)>(i10);

        $r4 = virtualinvoke $r3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (android.widget.GridLayout$LayoutParams) $r4;

        if z2 == 0 goto label07;

        r7 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

        goto label08;

     label07:
        r7 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

     label08:
        r8 = r7.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        z0 = r7.<android.widget.GridLayout$Spec: boolean startDefined>;

        i0 = virtualinvoke r8.<android.widget.GridLayout$Interval: int size()>();

        if z0 == 0 goto label09;

        i8 = r8.<android.widget.GridLayout$Interval: int min>;

     label09:
        if z2 == 0 goto label10;

        r9 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        goto label11;

     label10:
        r9 = r2.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

     label11:
        r10 = r9.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        z1 = r9.<android.widget.GridLayout$Spec: boolean startDefined>;

        i1 = staticinvoke <android.widget.GridLayout: int clip(android.widget.GridLayout$Interval,boolean,int)>(r10, z1, i7);

        if z1 == 0 goto label12;

        i9 = r10.<android.widget.GridLayout$Interval: int min>;

     label12:
        if i7 == 0 goto label18;

        i12 = i8;

        i13 = i9;

        i14 = i11;

        if z0 == 0 goto label14;

        if z1 != 0 goto label13;

        i12 = i8;

        i13 = i9;

        i14 = i11;

        goto label14;

     label13:
        i15 = i9;

        i16 = i11;

        goto label17;

     label14:
        i8 = i12;

        i15 = i13;

        i16 = i14;

        $i18 = i13 + i1;

        $z3 = staticinvoke <android.widget.GridLayout: boolean fits(int[],int,int,int)>(r1, i12, i13, $i18);

        if $z3 != 0 goto label17;

        if z1 == 0 goto label15;

        i12 = i12 + 1;

        goto label14;

     label15:
        $i5 = i13 + i1;

        if $i5 > i7 goto label16;

        i13 = i13 + 1;

        goto label14;

     label16:
        i13 = 0;

        i12 = i12 + 1;

        goto label14;

     label17:
        $i4 = i15 + i1;

        $i3 = i8 + i0;

        staticinvoke <android.widget.GridLayout: void procrusteanFill(int[],int,int,int)>(r1, i15, $i4, $i3);

        i11 = i16;

        goto label19;

     label18:
        i15 = i9;

     label19:
        if z2 == 0 goto label20;

        staticinvoke <android.widget.GridLayout: void setCellGroup(android.widget.GridLayout$LayoutParams,int,int,int,int)>(r2, i8, i0, i15, i1);

        goto label21;

     label20:
        staticinvoke <android.widget.GridLayout: void setCellGroup(android.widget.GridLayout$LayoutParams,int,int,int,int)>(r2, i15, i1, i8, i0);

     label21:
        i9 = i15 + i1;

        i10 = i10 + 1;

        goto label06;

     label22:
        return;
    }

    protected boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.widget.GridLayout r0;
        boolean $z0;
        android.view.ViewGroup$LayoutParams r1;
        android.widget.GridLayout$LayoutParams r2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $z0 = r1 instanceof android.widget.GridLayout$LayoutParams;

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = (android.widget.GridLayout$LayoutParams) r1;

        specialinvoke r0.<android.widget.GridLayout: void checkLayoutParams(android.widget.GridLayout$LayoutParams,boolean)>(r2, 1);

        specialinvoke r0.<android.widget.GridLayout: void checkLayoutParams(android.widget.GridLayout$LayoutParams,boolean)>(r2, 0);

        return 1;
    }

    protected volatile android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$LayoutParams $r1;

        r0 := @this: android.widget.GridLayout;

        $r1 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateDefaultLayoutParams()>();

        return $r1;
    }

    protected android.widget.GridLayout$LayoutParams generateDefaultLayoutParams()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$LayoutParams $r1;

        r0 := @this: android.widget.GridLayout;

        $r1 = new android.widget.GridLayout$LayoutParams;

        specialinvoke $r1.<android.widget.GridLayout$LayoutParams: void <init>()>();

        return $r1;
    }

    public volatile android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.widget.GridLayout r0;
        android.util.AttributeSet r1;
        android.widget.GridLayout$LayoutParams $r2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)>(r1);

        return $r2;
    }

    protected volatile android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.widget.GridLayout r0;
        android.view.ViewGroup$LayoutParams r1;
        android.widget.GridLayout$LayoutParams $r2;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $r2 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>(r1);

        return $r2;
    }

    public android.widget.GridLayout$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        android.widget.GridLayout r0;
        android.util.AttributeSet r1;
        android.widget.GridLayout$LayoutParams $r2;
        android.content.Context $r3;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = new android.widget.GridLayout$LayoutParams;

        $r3 = virtualinvoke r0.<android.widget.GridLayout: android.content.Context getContext()>();

        specialinvoke $r2.<android.widget.GridLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($r3, r1);

        return $r2;
    }

    protected android.widget.GridLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        android.widget.GridLayout r0;
        android.view.ViewGroup$LayoutParams r1;
        boolean $z0, $z1, $z2;
        android.widget.GridLayout$LayoutParams $r2, $r3, $r5, $r6;
        android.view.ViewGroup$MarginLayoutParams $r4;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $z0 = <android.widget.GridLayout: boolean sPreserveMarginParamsInLayoutParamConversion>;

        if $z0 == 0 goto label2;

        $z1 = r1 instanceof android.widget.GridLayout$LayoutParams;

        if $z1 == 0 goto label1;

        $r5 = new android.widget.GridLayout$LayoutParams;

        $r6 = (android.widget.GridLayout$LayoutParams) r1;

        specialinvoke $r5.<android.widget.GridLayout$LayoutParams: void <init>(android.widget.GridLayout$LayoutParams)>($r6);

        return $r5;

     label1:
        $z2 = r1 instanceof android.view.ViewGroup$MarginLayoutParams;

        if $z2 == 0 goto label2;

        $r3 = new android.widget.GridLayout$LayoutParams;

        $r4 = (android.view.ViewGroup$MarginLayoutParams) r1;

        specialinvoke $r3.<android.widget.GridLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>($r4);

        return $r3;

     label2:
        $r2 = new android.widget.GridLayout$LayoutParams;

        specialinvoke $r2.<android.widget.GridLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>(r1);

        return $r2;
    }

    public java.lang.CharSequence getAccessibilityClassName()
    {
        android.widget.GridLayout r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: android.widget.GridLayout;

        $r1 = class "Landroid/widget/GridLayout;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public int getAlignmentMode()
    {
        android.widget.GridLayout r0;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        $i0 = r0.<android.widget.GridLayout: int mAlignmentMode>;

        return $i0;
    }

    public int getColumnCount()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        $i0 = virtualinvoke $r1.<android.widget.GridLayout$Axis: int getCount()>();

        return $i0;
    }

    final android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams $r2;
        android.widget.GridLayout$LayoutParams $r3;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        $r2 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r3 = (android.widget.GridLayout$LayoutParams) $r2;

        return $r3;
    }

    int getMargin1(android.view.View, boolean, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0, z1;
        android.widget.GridLayout$LayoutParams r2;
        int i0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r2 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r1);

        if z0 == 0 goto label2;

        if z1 == 0 goto label1;

        i0 = r2.<android.widget.GridLayout$LayoutParams: int leftMargin>;

        goto label4;

     label1:
        i0 = r2.<android.widget.GridLayout$LayoutParams: int rightMargin>;

        goto label4;

     label2:
        if z1 == 0 goto label3;

        i0 = r2.<android.widget.GridLayout$LayoutParams: int topMargin>;

        goto label4;

     label3:
        i0 = r2.<android.widget.GridLayout$LayoutParams: int bottomMargin>;

     label4:
        if i0 != -2147483648 goto label5;

        i0 = specialinvoke r0.<android.widget.GridLayout: int getDefaultMargin(android.view.View,android.widget.GridLayout$LayoutParams,boolean,boolean)>(r1, r2, z0, z1);

        goto label5;

     label5:
        return i0;
    }

    final int getMeasurementIncludingMargin(android.view.View, boolean)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        boolean z0;
        int $i0, $i1, $i2, $i3;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        z0 := @parameter1: boolean;

        $i0 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i0 != 8 goto label1;

        return 0;

     label1:
        $i1 = specialinvoke r0.<android.widget.GridLayout: int getMeasurement(android.view.View,boolean)>(r1, z0);

        $i2 = specialinvoke r0.<android.widget.GridLayout: int getTotalMargin(android.view.View,boolean)>(r1, z0);

        $i3 = $i1 + $i2;

        return $i3;
    }

    public int getOrientation()
    {
        android.widget.GridLayout r0;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        $i0 = r0.<android.widget.GridLayout: int mOrientation>;

        return $i0;
    }

    public android.util.Printer getPrinter()
    {
        android.widget.GridLayout r0;
        android.util.Printer $r1;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.util.Printer mPrinter>;

        return $r1;
    }

    public int getRowCount()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1;
        int $i0;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        $i0 = virtualinvoke $r1.<android.widget.GridLayout$Axis: int getCount()>();

        return $i0;
    }

    public boolean getUseDefaultMargins()
    {
        android.widget.GridLayout r0;
        boolean $z0;

        r0 := @this: android.widget.GridLayout;

        $z0 = r0.<android.widget.GridLayout: boolean mUseDefaultMargins>;

        return $z0;
    }

    public boolean isColumnOrderPreserved()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1;
        boolean $z0;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        $z0 = virtualinvoke $r1.<android.widget.GridLayout$Axis: boolean isOrderPreserved()>();

        return $z0;
    }

    public boolean isRowOrderPreserved()
    {
        android.widget.GridLayout r0;
        android.widget.GridLayout$Axis $r1;
        boolean $z0;

        r0 := @this: android.widget.GridLayout;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        $z0 = virtualinvoke $r1.<android.widget.GridLayout$Axis: boolean isOrderPreserved()>();

        return $z0;
    }

    protected void onChildVisibilityChanged(android.view.View, int, int)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        int i0, i1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<android.view.ViewGroup: void onChildVisibilityChanged(android.view.View,int,int)>(r1, i0, i1);

        if i0 == 8 goto label1;

        if i1 != 8 goto label2;

     label1:
        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

     label2:
        return;
    }

    protected void onDebugDraw(android.graphics.Canvas)
    {
        android.widget.GridLayout r0;
        android.graphics.Canvas r1;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22, i23, i24;
        android.graphics.Paint $r3;
        android.graphics.Paint$Style $r4;
        android.widget.GridLayout$Axis $r5, $r6;
        android.graphics.Insets r7;
        int[] r8, r9;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.graphics.Canvas;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        $r4 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r3.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r4);

        $i8 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(50, 255, 255, 255);

        virtualinvoke $r3.<android.graphics.Paint: void setColor(int)>($i8);

        r7 = virtualinvoke r0.<android.widget.GridLayout: android.graphics.Insets getOpticalInsets()>();

        $i9 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingTop()>();

        $i10 = r7.<android.graphics.Insets: int top>;

        i0 = $i9 + $i10;

        $i11 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingLeft()>();

        $i12 = r7.<android.graphics.Insets: int left>;

        i1 = $i11 + $i12;

        i2 = virtualinvoke r0.<android.widget.GridLayout: int getWidth()>();

        i3 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingRight()>();

        i4 = r7.<android.graphics.Insets: int right>;

        i5 = virtualinvoke r0.<android.widget.GridLayout: int getHeight()>();

        i19 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingBottom()>();

        i6 = r7.<android.graphics.Insets: int bottom>;

        $r5 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        r8 = $r5.<android.widget.GridLayout$Axis: int[] locations>;

        if r8 == null goto label2;

        i20 = lengthof r8;

        i21 = 0;

     label1:
        if i21 >= i20 goto label2;

        $i16 = r8[i21];

        i7 = i1 + $i16;

        $i17 = i5 - i19;

        $i18 = $i17 - i6;

        specialinvoke r0.<android.widget.GridLayout: void drawLine(android.graphics.Canvas,int,int,int,int,android.graphics.Paint)>(r1, i7, i0, i7, $i18, $r3);

        i21 = i21 + 1;

        goto label1;

     label2:
        $r6 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        r9 = $r6.<android.widget.GridLayout$Axis: int[] locations>;

        if r9 == null goto label4;

        i22 = lengthof r9;

        i23 = 0;

     label3:
        if i23 >= i22 goto label4;

        $i13 = r9[i23];

        i24 = i0 + $i13;

        $i14 = i2 - i3;

        $i15 = $i14 - i4;

        specialinvoke r0.<android.widget.GridLayout: void drawLine(android.graphics.Canvas,int,int,int,int,android.graphics.Paint)>(r1, i1, i24, $i15, i24, $r3);

        i23 = i23 + 1;

        goto label3;

     label4:
        specialinvoke r0.<android.view.ViewGroup: void onDebugDraw(android.graphics.Canvas)>(r1);

        return;
    }

    protected void onDebugDrawMargins(android.graphics.Canvas, android.graphics.Paint)
    {
        android.widget.GridLayout r0;
        android.graphics.Canvas r1;
        android.graphics.Paint r2;
        android.view.View r4;
        android.widget.GridLayout$LayoutParams $r5;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Paint;

        $r5 = new android.widget.GridLayout$LayoutParams;

        specialinvoke $r5.<android.widget.GridLayout$LayoutParams: void <init>()>();

        i5 = 0;

     label1:
        $i0 = virtualinvoke r0.<android.widget.GridLayout: int getChildCount()>();

        if i5 >= $i0 goto label2;

        r4 = virtualinvoke r0.<android.widget.GridLayout: android.view.View getChildAt(int)>(i5);

        $i1 = virtualinvoke r0.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r4, 1, 1);

        $i2 = virtualinvoke r0.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r4, 0, 1);

        $i3 = virtualinvoke r0.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r4, 1, 0);

        $i4 = virtualinvoke r0.<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>(r4, 0, 0);

        virtualinvoke $r5.<android.widget.GridLayout$LayoutParams: void setMargins(int,int,int,int)>($i1, $i2, $i3, $i4);

        virtualinvoke $r5.<android.widget.GridLayout$LayoutParams: void onDebugDraw(android.view.View,android.graphics.Canvas,android.graphics.Paint)>(r4, r1, r2);

        i5 = i5 + 1;

        goto label1;

     label2:
        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.widget.GridLayout r0;
        boolean z0, $z1;
        int i0, i1, i2, i3, i4, i5, i6, i7, i8, i9, i10, i11, i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i42, i43, i44, i45, i46, i47, i48, i49, i50, i51, i52, i53, i54, i55, i56, i57, i58, i59, i60, i61, i62, i63, $i64, $i65;
        int[] r1, r15;
        android.view.View r3;
        android.widget.GridLayout$Axis $r4, $r5, $r6, $r7, $r8, $r11;
        android.widget.GridLayout$PackedMap $r9, $r12;
        java.lang.Object $r10, $r13;
        android.widget.GridLayout$LayoutParams r16;
        android.widget.GridLayout$Spec r17, r18;
        android.widget.GridLayout$Interval r19, r20;
        android.widget.GridLayout$Alignment r21, r22;
        android.widget.GridLayout$Bounds r23, r24;

        r0 := @this: android.widget.GridLayout;

        z0 := @parameter0: boolean;

        i42 := @parameter1: int;

        i43 := @parameter2: int;

        i44 := @parameter3: int;

        i45 := @parameter4: int;

        specialinvoke r0.<android.widget.GridLayout: void consistencyCheck()>();

        i0 = i44 - i42;

        i46 = i45 - i43;

        i1 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingLeft()>();

        i2 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingTop()>();

        i3 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingRight()>();

        i47 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingBottom()>();

        $r4 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        $i13 = i0 - i1;

        $i14 = $i13 - i3;

        virtualinvoke $r4.<android.widget.GridLayout$Axis: void layout(int)>($i14);

        $r5 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        $i15 = i46 - i2;

        $i16 = $i15 - i47;

        virtualinvoke $r5.<android.widget.GridLayout$Axis: void layout(int)>($i16);

        $r6 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        r1 = virtualinvoke $r6.<android.widget.GridLayout$Axis: int[] getLocations()>();

        $r7 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        r15 = virtualinvoke $r7.<android.widget.GridLayout$Axis: int[] getLocations()>();

        i4 = virtualinvoke r0.<android.widget.GridLayout: int getChildCount()>();

        i48 = 0;

     label1:
        if i48 >= i4 goto label8;

        r3 = virtualinvoke r0.<android.widget.GridLayout: android.view.View getChildAt(int)>(i48);

        $i17 = virtualinvoke r3.<android.view.View: int getVisibility()>();

        if $i17 != 8 goto label2;

        goto label7;

     label2:
        r16 = virtualinvoke r0.<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>(r3);

        r17 = r16.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec columnSpec>;

        r18 = r16.<android.widget.GridLayout$LayoutParams: android.widget.GridLayout$Spec rowSpec>;

        r19 = r17.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        r20 = r18.<android.widget.GridLayout$Spec: android.widget.GridLayout$Interval span>;

        $i18 = r19.<android.widget.GridLayout$Interval: int min>;

        i49 = r1[$i18];

        $i19 = r20.<android.widget.GridLayout$Interval: int min>;

        i50 = r15[$i19];

        $i20 = r19.<android.widget.GridLayout$Interval: int max>;

        i51 = r1[$i20];

        $i21 = r20.<android.widget.GridLayout$Interval: int max>;

        i52 = r15[$i21];

        i53 = i51 - i49;

        i54 = i52 - i50;

        i5 = specialinvoke r0.<android.widget.GridLayout: int getMeasurement(android.view.View,boolean)>(r3, 1);

        i6 = specialinvoke r0.<android.widget.GridLayout: int getMeasurement(android.view.View,boolean)>(r3, 0);

        r21 = staticinvoke <android.widget.GridLayout$Spec: android.widget.GridLayout$Alignment access$100(android.widget.GridLayout$Spec,boolean)>(r17, 1);

        r22 = staticinvoke <android.widget.GridLayout$Spec: android.widget.GridLayout$Alignment access$100(android.widget.GridLayout$Spec,boolean)>(r18, 0);

        $r8 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        $r9 = virtualinvoke $r8.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getGroupBounds()>();

        $r10 = virtualinvoke $r9.<android.widget.GridLayout$PackedMap: java.lang.Object getValue(int)>(i48);

        r23 = (android.widget.GridLayout$Bounds) $r10;

        $r11 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        $r12 = virtualinvoke $r11.<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap getGroupBounds()>();

        $r13 = virtualinvoke $r12.<android.widget.GridLayout$PackedMap: java.lang.Object getValue(int)>(i48);

        r24 = (android.widget.GridLayout$Bounds) $r13;

        $i22 = virtualinvoke r23.<android.widget.GridLayout$Bounds: int size(boolean)>(1);

        $i23 = i53 - $i22;

        i7 = virtualinvoke r21.<android.widget.GridLayout$Alignment: int getGravityOffset(android.view.View,int)>(r3, $i23);

        $i24 = virtualinvoke r24.<android.widget.GridLayout$Bounds: int size(boolean)>(1);

        $i25 = i54 - $i24;

        i55 = virtualinvoke r22.<android.widget.GridLayout$Alignment: int getGravityOffset(android.view.View,int)>(r3, $i25);

        i8 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r3, 1, 1);

        i56 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r3, 0, 1);

        i9 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r3, 1, 0);

        i57 = specialinvoke r0.<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>(r3, 0, 0);

        i10 = i8 + i9;

        i11 = i56 + i57;

        $i26 = i5 + i10;

        i12 = virtualinvoke r23.<android.widget.GridLayout$Bounds: int getOffset(android.widget.GridLayout,android.view.View,android.widget.GridLayout$Alignment,int,boolean)>(r0, r3, r21, $i26, 1);

        $i27 = i6 + i11;

        i58 = virtualinvoke r24.<android.widget.GridLayout$Bounds: int getOffset(android.widget.GridLayout,android.view.View,android.widget.GridLayout$Alignment,int,boolean)>(r0, r3, r22, $i27, 0);

        $i28 = i53 - i10;

        i59 = virtualinvoke r21.<android.widget.GridLayout$Alignment: int getSizeInCell(android.view.View,int,int)>(r3, i5, $i28);

        $i29 = i54 - i11;

        i60 = virtualinvoke r22.<android.widget.GridLayout$Alignment: int getSizeInCell(android.view.View,int,int)>(r3, i6, $i29);

        $i30 = i49 + i7;

        i61 = $i30 + i12;

        $z1 = virtualinvoke r0.<android.widget.GridLayout: boolean isLayoutRtl()>();

        if $z1 != 0 goto label3;

        $i41 = i1 + i8;

        i62 = $i41 + i61;

        goto label4;

     label3:
        $i31 = i0 - i59;

        $i32 = $i31 - i3;

        $i33 = $i32 - i9;

        i62 = $i33 - i61;

     label4:
        $i34 = i2 + i50;

        $i35 = $i34 + i55;

        $i36 = $i35 + i58;

        i63 = $i36 + i56;

        $i37 = virtualinvoke r3.<android.view.View: int getMeasuredWidth()>();

        if i59 != $i37 goto label5;

        $i40 = virtualinvoke r3.<android.view.View: int getMeasuredHeight()>();

        if i60 == $i40 goto label6;

     label5:
        $i38 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i59, 1073741824);

        $i39 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i60, 1073741824);

        virtualinvoke r3.<android.view.View: void measure(int,int)>($i38, $i39);

     label6:
        $i64 = i62 + i59;

        $i65 = i63 + i60;

        virtualinvoke r3.<android.view.View: void layout(int,int,int,int)>(i62, i63, $i64, $i65);

     label7:
        i48 = i48 + 1;

        goto label1;

     label8:
        return;
    }

    protected void onMeasure(int, int)
    {
        android.widget.GridLayout r0;
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, i19, i20, i21, i22;
        android.widget.GridLayout$Axis $r1, $r2, $r3, $r4;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<android.widget.GridLayout: void consistencyCheck()>();

        specialinvoke r0.<android.widget.GridLayout: void invalidateValues()>();

        $i6 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingLeft()>();

        $i7 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingRight()>();

        i2 = $i6 + $i7;

        $i8 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingTop()>();

        $i9 = virtualinvoke r0.<android.widget.GridLayout: int getPaddingBottom()>();

        i3 = $i8 + $i9;

        $i10 = neg i2;

        i4 = staticinvoke <android.widget.GridLayout: int adjust(int,int)>(i0, $i10);

        $i11 = neg i3;

        i5 = staticinvoke <android.widget.GridLayout: int adjust(int,int)>(i1, $i11);

        specialinvoke r0.<android.widget.GridLayout: void measureChildrenWithMargins(int,int,boolean)>(i4, i5, 1);

        $i12 = r0.<android.widget.GridLayout: int mOrientation>;

        if $i12 != 0 goto label1;

        $r3 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        i19 = virtualinvoke $r3.<android.widget.GridLayout$Axis: int getMeasure(int)>(i4);

        specialinvoke r0.<android.widget.GridLayout: void measureChildrenWithMargins(int,int,boolean)>(i4, i5, 0);

        $r4 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        i20 = virtualinvoke $r4.<android.widget.GridLayout$Axis: int getMeasure(int)>(i5);

        goto label2;

     label1:
        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        i20 = virtualinvoke $r1.<android.widget.GridLayout$Axis: int getMeasure(int)>(i5);

        specialinvoke r0.<android.widget.GridLayout: void measureChildrenWithMargins(int,int,boolean)>(i4, i5, 0);

        $r2 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        i19 = virtualinvoke $r2.<android.widget.GridLayout$Axis: int getMeasure(int)>(i4);

     label2:
        $i13 = i19 + i2;

        $i14 = virtualinvoke r0.<android.widget.GridLayout: int getSuggestedMinimumWidth()>();

        i21 = staticinvoke <java.lang.Math: int max(int,int)>($i13, $i14);

        $i15 = i20 + i3;

        $i16 = virtualinvoke r0.<android.widget.GridLayout: int getSuggestedMinimumHeight()>();

        i22 = staticinvoke <java.lang.Math: int max(int,int)>($i15, $i16);

        $i17 = staticinvoke <android.widget.GridLayout: int resolveSizeAndState(int,int,int)>(i21, i0, 0);

        $i18 = staticinvoke <android.widget.GridLayout: int resolveSizeAndState(int,int,int)>(i22, i1, 0);

        virtualinvoke r0.<android.widget.GridLayout: void setMeasuredDimension(int,int)>($i17, $i18);

        return;
    }

    protected void onSetLayoutParams(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        android.widget.GridLayout r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams r2;
        boolean $z0;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ViewGroup$LayoutParams;

        specialinvoke r0.<android.view.ViewGroup: void onSetLayoutParams(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, r2);

        $z0 = virtualinvoke r0.<android.widget.GridLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>(r2);

        if $z0 != 0 goto label1;

        staticinvoke <android.widget.GridLayout: void handleInvalidParams(java.lang.String)>("supplied LayoutParams are of the wrong type");

     label1:
        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        return;
    }

    public void onViewAdded(android.view.View)
    {
        android.widget.GridLayout r0;
        android.view.View r1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: void onViewAdded(android.view.View)>(r1);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        return;
    }

    public void onViewRemoved(android.view.View)
    {
        android.widget.GridLayout r0;
        android.view.View r1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: void onViewRemoved(android.view.View)>(r1);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        return;
    }

    public void requestLayout()
    {
        android.widget.GridLayout r0;

        r0 := @this: android.widget.GridLayout;

        specialinvoke r0.<android.view.ViewGroup: void requestLayout()>();

        specialinvoke r0.<android.widget.GridLayout: void invalidateValues()>();

        return;
    }

    public void setAlignmentMode(int)
    {
        android.widget.GridLayout r0;
        int i0;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        r0.<android.widget.GridLayout: int mAlignmentMode> = i0;

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public void setColumnCount(int)
    {
        android.widget.GridLayout r0;
        int i0;
        android.widget.GridLayout$Axis $r1;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        virtualinvoke $r1.<android.widget.GridLayout$Axis: void setCount(int)>(i0);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public void setColumnOrderPreserved(boolean)
    {
        android.widget.GridLayout r0;
        boolean z0;
        android.widget.GridLayout$Axis $r1;

        r0 := @this: android.widget.GridLayout;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mHorizontalAxis>;

        virtualinvoke $r1.<android.widget.GridLayout$Axis: void setOrderPreserved(boolean)>(z0);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public void setOrientation(int)
    {
        android.widget.GridLayout r0;
        int i0, $i1;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        $i1 = r0.<android.widget.GridLayout: int mOrientation>;

        if $i1 == i0 goto label1;

        r0.<android.widget.GridLayout: int mOrientation> = i0;

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

     label1:
        return;
    }

    public void setPrinter(android.util.Printer)
    {
        android.widget.GridLayout r0;
        android.util.Printer r1;

        r0 := @this: android.widget.GridLayout;

        r1 := @parameter0: android.util.Printer;

        if r1 != null goto label1;

        r1 = <android.widget.GridLayout: android.util.Printer NO_PRINTER>;

        goto label1;

     label1:
        r0.<android.widget.GridLayout: android.util.Printer mPrinter> = r1;

        return;
    }

    public void setRowCount(int)
    {
        android.widget.GridLayout r0;
        int i0;
        android.widget.GridLayout$Axis $r1;

        r0 := @this: android.widget.GridLayout;

        i0 := @parameter0: int;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        virtualinvoke $r1.<android.widget.GridLayout$Axis: void setCount(int)>(i0);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public void setRowOrderPreserved(boolean)
    {
        android.widget.GridLayout r0;
        boolean z0;
        android.widget.GridLayout$Axis $r1;

        r0 := @this: android.widget.GridLayout;

        z0 := @parameter0: boolean;

        $r1 = r0.<android.widget.GridLayout: android.widget.GridLayout$Axis mVerticalAxis>;

        virtualinvoke $r1.<android.widget.GridLayout$Axis: void setOrderPreserved(boolean)>(z0);

        specialinvoke r0.<android.widget.GridLayout: void invalidateStructure()>();

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }

    public void setUseDefaultMargins(boolean)
    {
        android.widget.GridLayout r0;
        boolean z0;

        r0 := @this: android.widget.GridLayout;

        z0 := @parameter0: boolean;

        r0.<android.widget.GridLayout: boolean mUseDefaultMargins> = z0;

        virtualinvoke r0.<android.widget.GridLayout: void requestLayout()>();

        return;
    }
}
