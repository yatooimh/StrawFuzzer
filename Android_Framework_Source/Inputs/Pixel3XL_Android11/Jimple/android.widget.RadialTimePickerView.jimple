public class android.widget.RadialTimePickerView extends android.view.View
{
    private static final int AM;
    private static final int ANIM_DURATION_NORMAL;
    private static final int ANIM_DURATION_TOUCH;
    private static final float[] COS_30;
    private static final int DEGREES_FOR_ONE_HOUR;
    private static final int DEGREES_FOR_ONE_MINUTE;
    public static final int HOURS;
    private static final int HOURS_INNER;
    private static final int HOURS_IN_CIRCLE;
    private static final int[] HOURS_NUMBERS;
    private static final int[] HOURS_NUMBERS_24;
    public static final int MINUTES;
    private static final int MINUTES_IN_CIRCLE;
    private static final int[] MINUTES_NUMBERS;
    private static final int MISSING_COLOR;
    private static final int NUM_POSITIONS;
    private static final int PM;
    private static final int SELECTOR_CIRCLE;
    private static final int SELECTOR_DOT;
    private static final int SELECTOR_LINE;
    private static final float[] SIN_30;
    private static final int[] SNAP_PREFER_30S_MAP;
    private static final java.lang.String TAG;
    private final android.util.FloatProperty HOURS_TO_MINUTES;
    private int mAmOrPm;
    private int mCenterDotRadius;
    boolean mChangedDuringTouch;
    private int mCircleRadius;
    private float mDisabledAlpha;
    private int mHalfwayDist;
    private final java.lang.String[] mHours12Texts;
    private float mHoursToMinutes;
    private android.animation.ObjectAnimator mHoursToMinutesAnimator;
    private final java.lang.String[] mInnerHours24Texts;
    private java.lang.String[] mInnerTextHours;
    private final float[] mInnerTextX;
    private final float[] mInnerTextY;
    private boolean mInputEnabled;
    private boolean mIs24HourMode;
    private boolean mIsOnInnerCircle;
    private android.widget.RadialTimePickerView$OnValueSelectedListener mListener;
    private int mMaxDistForOuterNumber;
    private int mMinDistForInnerNumber;
    private java.lang.String[] mMinutesText;
    private final java.lang.String[] mMinutesTexts;
    private final java.lang.String[] mOuterHours24Texts;
    private java.lang.String[] mOuterTextHours;
    private final float[][] mOuterTextX;
    private final float[][] mOuterTextY;
    private final android.graphics.Paint[] mPaint;
    private final android.graphics.Paint mPaintBackground;
    private final android.graphics.Paint mPaintCenter;
    private final android.graphics.Paint[] mPaintSelector;
    private final int[] mSelectionDegrees;
    private int mSelectorColor;
    private int mSelectorDotColor;
    private int mSelectorDotRadius;
    private final android.graphics.Path mSelectorPath;
    private int mSelectorRadius;
    private int mSelectorStroke;
    private boolean mShowHours;
    private final android.content.res.ColorStateList[] mTextColor;
    private final int[] mTextInset;
    private final int[] mTextSize;
    private final android.widget.RadialTimePickerView$RadialPickerTouchHelper mTouchHelper;
    private final android.graphics.Typeface mTypeface;
    private int mXCenter;
    private int mYCenter;

    static void <clinit>()
    {
        int[] $r0, $r1, $r2, $r3;
        float[] $r4, $r5, $r6, $r7;
        double $d0, $d1, d2;
        float $f0, $f1;
        int i0;

        <android.widget.RadialTimePickerView: java.lang.String TAG> = "RadialTimePickerView";

        <android.widget.RadialTimePickerView: int SELECTOR_LINE> = 2;

        <android.widget.RadialTimePickerView: int SELECTOR_DOT> = 1;

        <android.widget.RadialTimePickerView: int SELECTOR_CIRCLE> = 0;

        <android.widget.RadialTimePickerView: int PM> = 1;

        <android.widget.RadialTimePickerView: int NUM_POSITIONS> = 12;

        <android.widget.RadialTimePickerView: int MISSING_COLOR> = -65281;

        <android.widget.RadialTimePickerView: int MINUTES_IN_CIRCLE> = 60;

        <android.widget.RadialTimePickerView: int MINUTES> = 1;

        <android.widget.RadialTimePickerView: int HOURS_IN_CIRCLE> = 12;

        <android.widget.RadialTimePickerView: int HOURS_INNER> = 2;

        <android.widget.RadialTimePickerView: int HOURS> = 0;

        <android.widget.RadialTimePickerView: int DEGREES_FOR_ONE_MINUTE> = 6;

        <android.widget.RadialTimePickerView: int DEGREES_FOR_ONE_HOUR> = 30;

        <android.widget.RadialTimePickerView: int ANIM_DURATION_TOUCH> = 60;

        <android.widget.RadialTimePickerView: int ANIM_DURATION_NORMAL> = 500;

        <android.widget.RadialTimePickerView: int AM> = 0;

        $r0 = newarray (int)[12];

        $r0[0] = 12;

        $r0[1] = 1;

        $r0[2] = 2;

        $r0[3] = 3;

        $r0[4] = 4;

        $r0[5] = 5;

        $r0[6] = 6;

        $r0[7] = 7;

        $r0[8] = 8;

        $r0[9] = 9;

        $r0[10] = 10;

        $r0[11] = 11;

        <android.widget.RadialTimePickerView: int[] HOURS_NUMBERS> = $r0;

        $r1 = newarray (int)[12];

        $r1[0] = 0;

        $r1[1] = 13;

        $r1[2] = 14;

        $r1[3] = 15;

        $r1[4] = 16;

        $r1[5] = 17;

        $r1[6] = 18;

        $r1[7] = 19;

        $r1[8] = 20;

        $r1[9] = 21;

        $r1[10] = 22;

        $r1[11] = 23;

        <android.widget.RadialTimePickerView: int[] HOURS_NUMBERS_24> = $r1;

        $r2 = newarray (int)[12];

        $r2[0] = 0;

        $r2[1] = 5;

        $r2[2] = 10;

        $r2[3] = 15;

        $r2[4] = 20;

        $r2[5] = 25;

        $r2[6] = 30;

        $r2[7] = 35;

        $r2[8] = 40;

        $r2[9] = 45;

        $r2[10] = 50;

        $r2[11] = 55;

        <android.widget.RadialTimePickerView: int[] MINUTES_NUMBERS> = $r2;

        $r3 = newarray (int)[361];

        <android.widget.RadialTimePickerView: int[] SNAP_PREFER_30S_MAP> = $r3;

        $r4 = newarray (float)[12];

        <android.widget.RadialTimePickerView: float[] COS_30> = $r4;

        $r5 = newarray (float)[12];

        <android.widget.RadialTimePickerView: float[] SIN_30> = $r5;

        staticinvoke <android.widget.RadialTimePickerView: void preparePrefer30sMap()>();

        d2 = 1.5707963267948966;

        i0 = 0;

     label1:
        if i0 >= 12 goto label2;

        $r6 = <android.widget.RadialTimePickerView: float[] COS_30>;

        $d0 = staticinvoke <java.lang.Math: double cos(double)>(d2);

        $f0 = (float) $d0;

        $r6[i0] = $f0;

        $r7 = <android.widget.RadialTimePickerView: float[] SIN_30>;

        $d1 = staticinvoke <java.lang.Math: double sin(double)>(d2);

        $f1 = (float) $d1;

        $r7[i0] = $f1;

        d2 = d2 + 0.5235987755982988;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    public void <init>(android.content.Context)
    {
        android.widget.RadialTimePickerView r0;
        android.content.Context r1;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.widget.RadialTimePickerView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        android.widget.RadialTimePickerView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.RadialTimePickerView: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 16843933);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        android.widget.RadialTimePickerView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;
        int i0;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        i0 := @parameter2: int;

        specialinvoke r0.<android.widget.RadialTimePickerView: void <init>(android.content.Context,android.util.AttributeSet,int,int)>(r1, r2, i0, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int, int)
    {
        android.widget.RadialTimePickerView r0;
        android.widget.RadialTimePickerView$1 $r1;
        java.lang.String[] $r2, $r3, $r4, $r5;
        android.graphics.Paint[] $r6, $r8, $r23, $r24, $r26, $r30, $r31, $r33, $r38, $r39, $r42, $r43, $r46, $r47, $r49;
        android.graphics.Paint $r7, $r9, $r22, $r25, $r28, $r29, $r32, $r35, $r36, $r37, $r40, $r41, $r44, $r45, $r48, $r50, $r51;
        android.content.res.ColorStateList[] $r10;
        int[] $r11, $r12, $r17, $r52, $r53, $r54, $r55, $r56, $r57;
        float[][] $r13, $r14;
        float[] $r15, $r16;
        android.graphics.Path $r18;
        android.util.TypedValue $r19;
        android.content.res.Resources$Theme $r20;
        float $f0;
        android.graphics.Typeface $r21;
        android.graphics.Paint$Align $r27, $r34;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i11, i12, i13, i14;
        android.widget.RadialTimePickerView$RadialPickerTouchHelper $r58;
        java.util.Locale $r59;
        android.content.Context r60;
        android.util.AttributeSet r61;
        android.content.res.Resources r63;
        java.util.Calendar r65;

        r0 := @this: android.widget.RadialTimePickerView;

        r60 := @parameter0: android.content.Context;

        r61 := @parameter1: android.util.AttributeSet;

        i11 := @parameter2: int;

        i12 := @parameter3: int;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>(r60, r61);

        $r1 = new android.widget.RadialTimePickerView$1;

        specialinvoke $r1.<android.widget.RadialTimePickerView$1: void <init>(android.widget.RadialTimePickerView,java.lang.String)>(r0, "hoursToMinutes");

        r0.<android.widget.RadialTimePickerView: android.util.FloatProperty HOURS_TO_MINUTES> = $r1;

        $r2 = newarray (java.lang.String)[12];

        r0.<android.widget.RadialTimePickerView: java.lang.String[] mHours12Texts> = $r2;

        $r3 = newarray (java.lang.String)[12];

        r0.<android.widget.RadialTimePickerView: java.lang.String[] mOuterHours24Texts> = $r3;

        $r4 = newarray (java.lang.String)[12];

        r0.<android.widget.RadialTimePickerView: java.lang.String[] mInnerHours24Texts> = $r4;

        $r5 = newarray (java.lang.String)[12];

        r0.<android.widget.RadialTimePickerView: java.lang.String[] mMinutesTexts> = $r5;

        $r6 = newarray (android.graphics.Paint)[2];

        r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint> = $r6;

        $r7 = new android.graphics.Paint;

        specialinvoke $r7.<android.graphics.Paint: void <init>()>();

        r0.<android.widget.RadialTimePickerView: android.graphics.Paint mPaintCenter> = $r7;

        $r8 = newarray (android.graphics.Paint)[3];

        r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector> = $r8;

        $r9 = new android.graphics.Paint;

        specialinvoke $r9.<android.graphics.Paint: void <init>()>();

        r0.<android.widget.RadialTimePickerView: android.graphics.Paint mPaintBackground> = $r9;

        $r10 = newarray (android.content.res.ColorStateList)[3];

        r0.<android.widget.RadialTimePickerView: android.content.res.ColorStateList[] mTextColor> = $r10;

        $r11 = newarray (int)[3];

        r0.<android.widget.RadialTimePickerView: int[] mTextSize> = $r11;

        $r12 = newarray (int)[3];

        r0.<android.widget.RadialTimePickerView: int[] mTextInset> = $r12;

        $r13 = newmultiarray (float)[2][12];

        r0.<android.widget.RadialTimePickerView: float[][] mOuterTextX> = $r13;

        $r14 = newmultiarray (float)[2][12];

        r0.<android.widget.RadialTimePickerView: float[][] mOuterTextY> = $r14;

        $r15 = newarray (float)[12];

        r0.<android.widget.RadialTimePickerView: float[] mInnerTextX> = $r15;

        $r16 = newarray (float)[12];

        r0.<android.widget.RadialTimePickerView: float[] mInnerTextY> = $r16;

        $r17 = newarray (int)[2];

        r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees> = $r17;

        $r18 = new android.graphics.Path;

        specialinvoke $r18.<android.graphics.Path: void <init>()>();

        r0.<android.widget.RadialTimePickerView: android.graphics.Path mSelectorPath> = $r18;

        r0.<android.widget.RadialTimePickerView: boolean mInputEnabled> = 1;

        r0.<android.widget.RadialTimePickerView: boolean mChangedDuringTouch> = 0;

        virtualinvoke r0.<android.widget.RadialTimePickerView: void applyAttributes(android.util.AttributeSet,int,int)>(r61, i11, i12);

        $r19 = new android.util.TypedValue;

        specialinvoke $r19.<android.util.TypedValue: void <init>()>();

        $r20 = virtualinvoke r60.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r20.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16842803, $r19, 1);

        $f0 = virtualinvoke $r19.<android.util.TypedValue: float getFloat()>();

        r0.<android.widget.RadialTimePickerView: float mDisabledAlpha> = $f0;

        $r21 = staticinvoke <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)>("sans-serif", 0);

        r0.<android.widget.RadialTimePickerView: android.graphics.Typeface mTypeface> = $r21;

        $r23 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        $r22 = new android.graphics.Paint;

        specialinvoke $r22.<android.graphics.Paint: void <init>()>();

        $r23[0] = $r22;

        $r24 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        $r25 = $r24[0];

        virtualinvoke $r25.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r26 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        $r28 = $r26[0];

        $r27 = <android.graphics.Paint$Align: android.graphics.Paint$Align CENTER>;

        virtualinvoke $r28.<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>($r27);

        $r30 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        $r29 = new android.graphics.Paint;

        specialinvoke $r29.<android.graphics.Paint: void <init>()>();

        $r30[1] = $r29;

        $r31 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        $r32 = $r31[1];

        virtualinvoke $r32.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r33 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        $r35 = $r33[1];

        $r34 = <android.graphics.Paint$Align: android.graphics.Paint$Align CENTER>;

        virtualinvoke $r35.<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>($r34);

        $r36 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint mPaintCenter>;

        virtualinvoke $r36.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r38 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector>;

        $r37 = new android.graphics.Paint;

        specialinvoke $r37.<android.graphics.Paint: void <init>()>();

        $r38[0] = $r37;

        $r39 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector>;

        $r40 = $r39[0];

        virtualinvoke $r40.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r42 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector>;

        $r41 = new android.graphics.Paint;

        specialinvoke $r41.<android.graphics.Paint: void <init>()>();

        $r42[1] = $r41;

        $r43 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector>;

        $r44 = $r43[1];

        virtualinvoke $r44.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r46 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector>;

        $r45 = new android.graphics.Paint;

        specialinvoke $r45.<android.graphics.Paint: void <init>()>();

        $r46[2] = $r45;

        $r47 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector>;

        $r48 = $r47[2];

        virtualinvoke $r48.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r49 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector>;

        $r50 = $r49[2];

        virtualinvoke $r50.<android.graphics.Paint: void setStrokeWidth(float)>(2.0F);

        $r51 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint mPaintBackground>;

        virtualinvoke $r51.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        r63 = virtualinvoke r0.<android.widget.RadialTimePickerView: android.content.res.Resources getResources()>();

        $i0 = virtualinvoke r63.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105527);

        r0.<android.widget.RadialTimePickerView: int mSelectorRadius> = $i0;

        $i1 = virtualinvoke r63.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105528);

        r0.<android.widget.RadialTimePickerView: int mSelectorStroke> = $i1;

        $i2 = virtualinvoke r63.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105526);

        r0.<android.widget.RadialTimePickerView: int mSelectorDotRadius> = $i2;

        $i3 = virtualinvoke r63.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105518);

        r0.<android.widget.RadialTimePickerView: int mCenterDotRadius> = $i3;

        $r52 = r0.<android.widget.RadialTimePickerView: int[] mTextSize>;

        $i4 = virtualinvoke r63.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105533);

        $r52[0] = $i4;

        $r53 = r0.<android.widget.RadialTimePickerView: int[] mTextSize>;

        $i5 = virtualinvoke r63.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105533);

        $r53[1] = $i5;

        $r54 = r0.<android.widget.RadialTimePickerView: int[] mTextSize>;

        $i6 = virtualinvoke r63.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105532);

        $r54[2] = $i6;

        $r55 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        $i7 = virtualinvoke r63.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105531);

        $r55[0] = $i7;

        $r56 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        $i8 = virtualinvoke r63.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105531);

        $r56[1] = $i8;

        $r57 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        $i9 = virtualinvoke r63.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105530);

        $r57[2] = $i9;

        r0.<android.widget.RadialTimePickerView: boolean mShowHours> = 1;

        r0.<android.widget.RadialTimePickerView: float mHoursToMinutes> = 0.0F;

        r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode> = 0;

        r0.<android.widget.RadialTimePickerView: int mAmOrPm> = 0;

        $r58 = new android.widget.RadialTimePickerView$RadialPickerTouchHelper;

        specialinvoke $r58.<android.widget.RadialTimePickerView$RadialPickerTouchHelper: void <init>(android.widget.RadialTimePickerView)>(r0);

        r0.<android.widget.RadialTimePickerView: android.widget.RadialTimePickerView$RadialPickerTouchHelper mTouchHelper> = $r58;

        virtualinvoke r0.<android.widget.RadialTimePickerView: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>($r58);

        $i10 = virtualinvoke r0.<android.widget.RadialTimePickerView: int getImportantForAccessibility()>();

        if $i10 != 0 goto label1;

        virtualinvoke r0.<android.widget.RadialTimePickerView: void setImportantForAccessibility(int)>(1);

     label1:
        specialinvoke r0.<android.widget.RadialTimePickerView: void initHoursAndMinutesText()>();

        specialinvoke r0.<android.widget.RadialTimePickerView: void initData()>();

        $r59 = staticinvoke <java.util.Locale: java.util.Locale getDefault()>();

        r65 = staticinvoke <java.util.Calendar: java.util.Calendar getInstance(java.util.Locale)>($r59);

        i13 = virtualinvoke r65.<java.util.Calendar: int get(int)>(11);

        i14 = virtualinvoke r65.<java.util.Calendar: int get(int)>(12);

        specialinvoke r0.<android.widget.RadialTimePickerView: void setCurrentHourInternal(int,boolean,boolean)>(i13, 0, 0);

        specialinvoke r0.<android.widget.RadialTimePickerView: void setCurrentMinuteInternal(int,boolean)>(i14, 0);

        virtualinvoke r0.<android.widget.RadialTimePickerView: void setHapticFeedbackEnabled(boolean)>(1);

        return;
    }

    static float access$000(android.widget.RadialTimePickerView)
    {
        android.widget.RadialTimePickerView r0;
        float $f0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        $f0 = r0.<android.widget.RadialTimePickerView: float mHoursToMinutes>;

        return $f0;
    }

    static float access$002(android.widget.RadialTimePickerView, float)
    {
        android.widget.RadialTimePickerView r0;
        float f0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        f0 := @parameter1: float;

        r0.<android.widget.RadialTimePickerView: float mHoursToMinutes> = f0;

        return f0;
    }

    static boolean access$100(android.widget.RadialTimePickerView)
    {
        android.widget.RadialTimePickerView r0;
        boolean $z0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mShowHours>;

        return $z0;
    }

    static int access$1000(android.widget.RadialTimePickerView)
    {
        android.widget.RadialTimePickerView r0;
        int $i0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        $i0 = r0.<android.widget.RadialTimePickerView: int mCircleRadius>;

        return $i0;
    }

    static int[] access$1100(android.widget.RadialTimePickerView)
    {
        android.widget.RadialTimePickerView r0;
        int[] $r1;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        $r1 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        return $r1;
    }

    static int access$1200(android.widget.RadialTimePickerView)
    {
        android.widget.RadialTimePickerView r0;
        int $i0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        $i0 = r0.<android.widget.RadialTimePickerView: int mSelectorRadius>;

        return $i0;
    }

    static int access$1300(android.widget.RadialTimePickerView, int)
    {
        android.widget.RadialTimePickerView r0;
        int i0, $i1;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<android.widget.RadialTimePickerView: int getDegreesForHour(int)>(i0);

        return $i1;
    }

    static int access$1400(android.widget.RadialTimePickerView, int)
    {
        android.widget.RadialTimePickerView r0;
        int i0, $i1;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<android.widget.RadialTimePickerView: int getDegreesForMinute(int)>(i0);

        return $i1;
    }

    static int access$1500(android.widget.RadialTimePickerView)
    {
        android.widget.RadialTimePickerView r0;
        int $i0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        $i0 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        return $i0;
    }

    static int access$1600(android.widget.RadialTimePickerView)
    {
        android.widget.RadialTimePickerView r0;
        int $i0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        $i0 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        return $i0;
    }

    static boolean access$200(android.widget.RadialTimePickerView)
    {
        android.widget.RadialTimePickerView r0;
        boolean $z0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        return $z0;
    }

    static int access$300(android.widget.RadialTimePickerView, float, float, boolean)
    {
        android.widget.RadialTimePickerView r0;
        float f0, f1;
        boolean z0;
        int $i0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        z0 := @parameter3: boolean;

        $i0 = specialinvoke r0.<android.widget.RadialTimePickerView: int getDegreesFromXY(float,float,boolean)>(f0, f1, z0);

        return $i0;
    }

    static int access$400(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.widget.RadialTimePickerView: int snapOnly30s(int,int)>(i0, i1);

        return $i2;
    }

    static boolean access$500(android.widget.RadialTimePickerView, float, float)
    {
        android.widget.RadialTimePickerView r0;
        float f0, f1;
        boolean $z0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $z0 = specialinvoke r0.<android.widget.RadialTimePickerView: boolean getInnerCircleFromXY(float,float)>(f0, f1);

        return $z0;
    }

    static int access$600(android.widget.RadialTimePickerView, int, boolean)
    {
        android.widget.RadialTimePickerView r0;
        int i0, $i1;
        boolean z0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i1 = specialinvoke r0.<android.widget.RadialTimePickerView: int getHourForDegrees(int,boolean)>(i0, z0);

        return $i1;
    }

    static int access$700(android.widget.RadialTimePickerView, int)
    {
        android.widget.RadialTimePickerView r0;
        int i0, $i1;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        i0 := @parameter1: int;

        $i1 = specialinvoke r0.<android.widget.RadialTimePickerView: int getMinuteForDegrees(int)>(i0);

        return $i1;
    }

    static int access$800(android.widget.RadialTimePickerView)
    {
        android.widget.RadialTimePickerView r0;
        int $i0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        $i0 = r0.<android.widget.RadialTimePickerView: int mAmOrPm>;

        return $i0;
    }

    static boolean access$900(android.widget.RadialTimePickerView, int)
    {
        android.widget.RadialTimePickerView r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: android.widget.RadialTimePickerView;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<android.widget.RadialTimePickerView: boolean getInnerCircleForHour(int)>(i0);

        return $z0;
    }

    private void animatePicker(boolean, long)
    {
        android.widget.RadialTimePickerView r0;
        boolean z0, $z1;
        long l0;
        float $f0, f1;
        byte $b1;
        float[] $r1;
        android.util.FloatProperty $r2;
        android.animation.ObjectAnimator $r3, $r5, $r6, r7, r8;

        r0 := @this: android.widget.RadialTimePickerView;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        if z0 == 0 goto label1;

        f1 = 0.0F;

        goto label2;

     label1:
        f1 = 1.0F;

     label2:
        $f0 = r0.<android.widget.RadialTimePickerView: float mHoursToMinutes>;

        $b1 = $f0 cmpl f1;

        if $b1 != 0 goto label4;

        r7 = r0.<android.widget.RadialTimePickerView: android.animation.ObjectAnimator mHoursToMinutesAnimator>;

        if r7 == null goto label3;

        $z1 = virtualinvoke r7.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z1 == 0 goto label3;

        $r6 = r0.<android.widget.RadialTimePickerView: android.animation.ObjectAnimator mHoursToMinutesAnimator>;

        virtualinvoke $r6.<android.animation.ObjectAnimator: void cancel()>();

        r0.<android.widget.RadialTimePickerView: android.animation.ObjectAnimator mHoursToMinutesAnimator> = null;

     label3:
        return;

     label4:
        $r2 = r0.<android.widget.RadialTimePickerView: android.util.FloatProperty HOURS_TO_MINUTES>;

        $r1 = newarray (float)[1];

        $r1[0] = f1;

        r8 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>(r0, $r2, $r1);

        r0.<android.widget.RadialTimePickerView: android.animation.ObjectAnimator mHoursToMinutesAnimator> = r8;

        virtualinvoke r8.<android.animation.ObjectAnimator: void setAutoCancel(boolean)>(1);

        $r3 = r0.<android.widget.RadialTimePickerView: android.animation.ObjectAnimator mHoursToMinutesAnimator>;

        virtualinvoke $r3.<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>(l0);

        $r5 = r0.<android.widget.RadialTimePickerView: android.animation.ObjectAnimator mHoursToMinutesAnimator>;

        virtualinvoke $r5.<android.animation.ObjectAnimator: void start()>();

        return;
    }

    private static void calculatePositions(android.graphics.Paint, float, float, float, float, float[], float[])
    {
        android.graphics.Paint r0;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, f13, f14;
        float[] r1, r2, $r3, $r4;
        int i0;

        r0 := @parameter0: android.graphics.Paint;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f13 := @parameter4: float;

        r1 := @parameter5: float[];

        r2 := @parameter6: float[];

        virtualinvoke r0.<android.graphics.Paint: void setTextSize(float)>(f13);

        $f3 = virtualinvoke r0.<android.graphics.Paint: float descent()>();

        $f4 = virtualinvoke r0.<android.graphics.Paint: float ascent()>();

        $f5 = $f3 + $f4;

        f14 = $f5 / 2.0F;

        i0 = 0;

     label1:
        if i0 >= 12 goto label2;

        $r3 = <android.widget.RadialTimePickerView: float[] COS_30>;

        $f6 = $r3[i0];

        $f7 = $f6 * f0;

        $f8 = f1 - $f7;

        r1[i0] = $f8;

        $f11 = f2 - f14;

        $r4 = <android.widget.RadialTimePickerView: float[] SIN_30>;

        $f9 = $r4[i0];

        $f10 = $f9 * f0;

        $f12 = $f11 - $f10;

        r2[i0] = $f12;

        i0 = i0 + 1;

        goto label1;

     label2:
        return;
    }

    private void calculatePositionsHours()
    {
        android.widget.RadialTimePickerView r0;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        int[] $r1, $r3, $r9, $r11;
        android.graphics.Paint[] $r2, $r10;
        float[][] $r4, $r5;
        float[] $r6, $r7, $r12, $r13;
        android.graphics.Paint $r8, $r14;
        boolean $z0;

        r0 := @this: android.widget.RadialTimePickerView;

        $i3 = r0.<android.widget.RadialTimePickerView: int mCircleRadius>;

        $r1 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        $i2 = $r1[0];

        $i4 = $i3 - $i2;

        f0 = (float) $i4;

        $r2 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        $r8 = $r2[0];

        $i5 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        $f3 = (float) $i5;

        $i6 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        $f2 = (float) $i6;

        $r3 = r0.<android.widget.RadialTimePickerView: int[] mTextSize>;

        $i7 = $r3[0];

        $f1 = (float) $i7;

        $r4 = r0.<android.widget.RadialTimePickerView: float[][] mOuterTextX>;

        $r7 = $r4[0];

        $r5 = r0.<android.widget.RadialTimePickerView: float[][] mOuterTextY>;

        $r6 = $r5[0];

        staticinvoke <android.widget.RadialTimePickerView: void calculatePositions(android.graphics.Paint,float,float,float,float,float[],float[])>($r8, f0, $f3, $f2, $f1, $r7, $r6);

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        if $z0 == 0 goto label1;

        i0 = r0.<android.widget.RadialTimePickerView: int mCircleRadius>;

        $r9 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        i1 = $r9[2];

        $r10 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        $r14 = $r10[0];

        $i8 = i0 - i1;

        $f7 = (float) $i8;

        $i9 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        $f6 = (float) $i9;

        $i10 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        $f5 = (float) $i10;

        $r11 = r0.<android.widget.RadialTimePickerView: int[] mTextSize>;

        $i11 = $r11[2];

        $f4 = (float) $i11;

        $r13 = r0.<android.widget.RadialTimePickerView: float[] mInnerTextX>;

        $r12 = r0.<android.widget.RadialTimePickerView: float[] mInnerTextY>;

        staticinvoke <android.widget.RadialTimePickerView: void calculatePositions(android.graphics.Paint,float,float,float,float,float[],float[])>($r14, $f7, $f6, $f5, $f4, $r13, $r12);

     label1:
        return;
    }

    private void calculatePositionsMinutes()
    {
        android.widget.RadialTimePickerView r0;
        float f0, $f1, $f2, $f3;
        int[] $r1, $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.Paint[] $r2;
        float[][] $r4, $r5;
        float[] $r6, $r7;
        android.graphics.Paint $r8;

        r0 := @this: android.widget.RadialTimePickerView;

        $i1 = r0.<android.widget.RadialTimePickerView: int mCircleRadius>;

        $r1 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        $i0 = $r1[1];

        $i2 = $i1 - $i0;

        f0 = (float) $i2;

        $r2 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        $r8 = $r2[1];

        $i3 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        $f3 = (float) $i3;

        $i4 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        $f2 = (float) $i4;

        $r3 = r0.<android.widget.RadialTimePickerView: int[] mTextSize>;

        $i5 = $r3[1];

        $f1 = (float) $i5;

        $r4 = r0.<android.widget.RadialTimePickerView: float[][] mOuterTextX>;

        $r7 = $r4[1];

        $r5 = r0.<android.widget.RadialTimePickerView: float[][] mOuterTextY>;

        $r6 = $r5[1];

        staticinvoke <android.widget.RadialTimePickerView: void calculatePositions(android.graphics.Paint,float,float,float,float,float[],float[])>($r8, f0, $f3, $f2, $f1, $r7, $r6);

        return;
    }

    private void drawCenter(android.graphics.Canvas, float)
    {
        android.widget.RadialTimePickerView r0;
        android.graphics.Canvas r1;
        float f0, $f1, $f2, $f3, $f4, $f5;
        int $i0, $i1, $i2, $i3;
        android.graphics.Paint $r2, $r3;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.graphics.Canvas;

        f0 := @parameter1: float;

        $r2 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint mPaintCenter>;

        $f1 = 255.0F * f0;

        $f2 = $f1 + 0.5F;

        $i0 = (int) $f2;

        virtualinvoke $r2.<android.graphics.Paint: void setAlpha(int)>($i0);

        $i1 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        $f5 = (float) $i1;

        $i2 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        $f4 = (float) $i2;

        $i3 = r0.<android.widget.RadialTimePickerView: int mCenterDotRadius>;

        $f3 = (float) $i3;

        $r3 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint mPaintCenter>;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f5, $f4, $f3, $r3);

        return;
    }

    private void drawCircleBackground(android.graphics.Canvas)
    {
        android.widget.RadialTimePickerView r0;
        android.graphics.Canvas r1;
        int $i0, $i1, $i2;
        android.graphics.Paint $r2;
        float $f0, $f1, $f2;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.graphics.Canvas;

        $i0 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        $f2 = (float) $i0;

        $i1 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        $f1 = (float) $i1;

        $i2 = r0.<android.widget.RadialTimePickerView: int mCircleRadius>;

        $f0 = (float) $i2;

        $r2 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint mPaintBackground>;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>($f2, $f1, $f0, $r2);

        return;
    }

    private void drawHours(android.graphics.Canvas, android.graphics.Path, float)
    {
        android.widget.RadialTimePickerView r0;
        android.graphics.Canvas r1;
        android.graphics.Path r2;
        float f0, $f1, $f2, $f3, $f4, $f5;
        int i0;
        android.graphics.Region$Op $r3, $r4;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Path;

        f0 := @parameter2: float;

        $f1 = r0.<android.widget.RadialTimePickerView: float mHoursToMinutes>;

        $f2 = 1.0F - $f1;

        $f3 = $f2 * 255.0F;

        $f4 = $f3 * f0;

        $f5 = $f4 + 0.5F;

        i0 = (int) $f5;

        if i0 <= 0 goto label1;

        virtualinvoke r1.<android.graphics.Canvas: int save(int)>(2);

        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>(r2, $r3);

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawHoursClipped(android.graphics.Canvas,int,boolean)>(r1, i0, 0);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

        virtualinvoke r1.<android.graphics.Canvas: int save(int)>(2);

        $r4 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>(r2, $r4);

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawHoursClipped(android.graphics.Canvas,int,boolean)>(r1, i0, 1);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

     label1:
        return;
    }

    private void drawHoursClipped(android.graphics.Canvas, int, boolean)
    {
        android.widget.RadialTimePickerView r0;
        android.graphics.Canvas r1;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0, $z1, $z2, z3, $z4, z5;
        int[] $r2, $r7, $r16, $r23;
        android.content.res.ColorStateList[] $r3, $r8;
        float[][] $r4, $r5;
        android.graphics.Paint[] $r6, $r9;
        float f0, f1;
        android.graphics.Typeface r10, r18;
        android.content.res.ColorStateList r11, r19;
        java.lang.String[] r12, r17;
        float[] r13, r14, r20, r21;
        android.graphics.Paint r15, r22;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = r0.<android.widget.RadialTimePickerView: int[] mTextSize>;

        $i1 = $r2[0];

        f0 = (float) $i1;

        r10 = r0.<android.widget.RadialTimePickerView: android.graphics.Typeface mTypeface>;

        $r3 = r0.<android.widget.RadialTimePickerView: android.content.res.ColorStateList[] mTextColor>;

        r11 = $r3[0];

        r12 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mOuterTextHours>;

        $r4 = r0.<android.widget.RadialTimePickerView: float[][] mOuterTextX>;

        r13 = $r4[0];

        $r5 = r0.<android.widget.RadialTimePickerView: float[][] mOuterTextY>;

        r14 = $r5[0];

        $r6 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        r15 = $r6[0];

        if z0 == 0 goto label1;

        $z2 = r0.<android.widget.RadialTimePickerView: boolean mIsOnInnerCircle>;

        if $z2 != 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        $r16 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $i3 = $r16[0];

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawTextElements(android.graphics.Canvas,float,android.graphics.Typeface,android.content.res.ColorStateList,java.lang.String[],float[],float[],android.graphics.Paint,int,boolean,int,boolean)>(r1, f0, r10, r11, r12, r13, r14, r15, i0, z3, $i3, z0);

        $z4 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        if $z4 == 0 goto label5;

        r17 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mInnerTextHours>;

        if r17 == null goto label5;

        $r7 = r0.<android.widget.RadialTimePickerView: int[] mTextSize>;

        $i2 = $r7[2];

        f1 = (float) $i2;

        r18 = r0.<android.widget.RadialTimePickerView: android.graphics.Typeface mTypeface>;

        $r8 = r0.<android.widget.RadialTimePickerView: android.content.res.ColorStateList[] mTextColor>;

        r19 = $r8[2];

        r20 = r0.<android.widget.RadialTimePickerView: float[] mInnerTextX>;

        r21 = r0.<android.widget.RadialTimePickerView: float[] mInnerTextY>;

        $r9 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        r22 = $r9[0];

        if z0 == 0 goto label3;

        $z1 = r0.<android.widget.RadialTimePickerView: boolean mIsOnInnerCircle>;

        if $z1 == 0 goto label3;

        z5 = 1;

        goto label4;

     label3:
        z5 = 0;

     label4:
        $r23 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $i4 = $r23[0];

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawTextElements(android.graphics.Canvas,float,android.graphics.Typeface,android.content.res.ColorStateList,java.lang.String[],float[],float[],android.graphics.Paint,int,boolean,int,boolean)>(r1, f1, r18, r19, r17, r20, r21, r22, i0, z5, $i4, z0);

     label5:
        return;
    }

    private void drawMinutes(android.graphics.Canvas, android.graphics.Path, float)
    {
        android.widget.RadialTimePickerView r0;
        android.graphics.Canvas r1;
        android.graphics.Path r2;
        float f0, $f1, $f2, $f3, $f4;
        int i0;
        android.graphics.Region$Op $r3, $r4;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.graphics.Canvas;

        r2 := @parameter1: android.graphics.Path;

        f0 := @parameter2: float;

        $f1 = r0.<android.widget.RadialTimePickerView: float mHoursToMinutes>;

        $f2 = $f1 * 255.0F;

        $f3 = $f2 * f0;

        $f4 = $f3 + 0.5F;

        i0 = (int) $f4;

        if i0 <= 0 goto label1;

        virtualinvoke r1.<android.graphics.Canvas: int save(int)>(2);

        $r3 = <android.graphics.Region$Op: android.graphics.Region$Op DIFFERENCE>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>(r2, $r3);

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawMinutesClipped(android.graphics.Canvas,int,boolean)>(r1, i0, 0);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

        virtualinvoke r1.<android.graphics.Canvas: int save(int)>(2);

        $r4 = <android.graphics.Region$Op: android.graphics.Region$Op INTERSECT>;

        virtualinvoke r1.<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>(r2, $r4);

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawMinutesClipped(android.graphics.Canvas,int,boolean)>(r1, i0, 1);

        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

     label1:
        return;
    }

    private void drawMinutesClipped(android.graphics.Canvas, int, boolean)
    {
        android.widget.RadialTimePickerView r0;
        android.graphics.Canvas r1;
        int i0, $i1, $i2;
        boolean z0;
        int[] $r2, $r7;
        android.content.res.ColorStateList[] $r3;
        float[][] $r4, $r5;
        android.graphics.Paint[] $r6;
        android.graphics.Paint $r8;
        float[] $r9, $r10;
        java.lang.String[] $r11;
        android.content.res.ColorStateList $r12;
        android.graphics.Typeface $r13;
        float $f0;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = r0.<android.widget.RadialTimePickerView: int[] mTextSize>;

        $i1 = $r2[1];

        $f0 = (float) $i1;

        $r13 = r0.<android.widget.RadialTimePickerView: android.graphics.Typeface mTypeface>;

        $r3 = r0.<android.widget.RadialTimePickerView: android.content.res.ColorStateList[] mTextColor>;

        $r12 = $r3[1];

        $r11 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mMinutesText>;

        $r4 = r0.<android.widget.RadialTimePickerView: float[][] mOuterTextX>;

        $r10 = $r4[1];

        $r5 = r0.<android.widget.RadialTimePickerView: float[][] mOuterTextY>;

        $r9 = $r5[1];

        $r6 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaint>;

        $r8 = $r6[1];

        $r7 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $i2 = $r7[1];

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawTextElements(android.graphics.Canvas,float,android.graphics.Typeface,android.content.res.ColorStateList,java.lang.String[],float[],float[],android.graphics.Paint,int,boolean,int,boolean)>(r1, $f0, $r13, $r12, $r11, $r10, $r9, $r8, i0, z0, $i2, z0);

        return;
    }

    private void drawSelector(android.graphics.Canvas, android.graphics.Path)
    {
        android.widget.RadialTimePickerView r0;
        android.graphics.Canvas r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i24, i25, i26, i27, i28, i29, i30, i31, i32, i33;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, f27, f28, f29, f30, f31, f32;
        double d0, $d1, $d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, d12, d13;
        boolean $z0;
        int[] $r2, $r3, r9, r10;
        android.graphics.Paint[] $r4, $r5, $r6;
        byte $b10, b23;
        android.graphics.Path$Direction $r7;
        android.graphics.Path r8;
        android.graphics.Paint r11, r12, r13;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.graphics.Canvas;

        r8 := @parameter1: android.graphics.Path;

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mIsOnInnerCircle>;

        if $z0 == 0 goto label1;

        b23 = 2;

        goto label2;

     label1:
        b23 = 0;

     label2:
        $r2 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        i24 = $r2[b23];

        r9 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $i1 = b23 % 2;

        i25 = r9[$i1];

        $i2 = b23 % 2;

        i26 = r9[$i2];

        f27 = 1.0F;

        $i3 = i26 % 30;

        if $i3 == 0 goto label3;

        f28 = 1.0F;

        goto label4;

     label3:
        f28 = 0.0F;

     label4:
        $r3 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        i0 = $r3[1];

        r10 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        i27 = r10[1];

        $i4 = r10[1];

        $i5 = $i4 % 30;

        if $i5 == 0 goto label5;

        goto label6;

     label5:
        f27 = 0.0F;

     label6:
        i28 = r0.<android.widget.RadialTimePickerView: int mSelectorRadius>;

        $i6 = r0.<android.widget.RadialTimePickerView: int mCircleRadius>;

        $f6 = (float) $i6;

        $f5 = (float) i24;

        $f4 = (float) i0;

        $f3 = r0.<android.widget.RadialTimePickerView: float mHoursToMinutes>;

        $f7 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>($f5, $f4, $f3);

        f0 = $f6 - $f7;

        $f10 = (float) i25;

        $f9 = (float) i27;

        $f8 = r0.<android.widget.RadialTimePickerView: float mHoursToMinutes>;

        $f11 = staticinvoke <android.util.MathUtils: float lerpDeg(float,float,float)>($f10, $f9, $f8);

        $d1 = (double) $f11;

        d12 = staticinvoke <java.lang.Math: double toRadians(double)>($d1);

        $i7 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        $f12 = (float) $i7;

        $d2 = staticinvoke <java.lang.Math: double sin(double)>(d12);

        $f13 = (float) $d2;

        $f14 = $f13 * f0;

        f1 = $f12 + $f14;

        $i8 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        $f15 = (float) $i8;

        $d3 = staticinvoke <java.lang.Math: double cos(double)>(d12);

        $f16 = (float) $d3;

        $f17 = $f16 * f0;

        f2 = $f15 - $f17;

        $r4 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector>;

        r11 = $r4[0];

        $i9 = r0.<android.widget.RadialTimePickerView: int mSelectorColor>;

        virtualinvoke r11.<android.graphics.Paint: void setColor(int)>($i9);

        $f18 = (float) i28;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>(f1, f2, $f18, r11);

        if r8 == null goto label7;

        virtualinvoke r8.<android.graphics.Path: void reset()>();

        $f26 = (float) i28;

        $r7 = <android.graphics.Path$Direction: android.graphics.Path$Direction CCW>;

        virtualinvoke r8.<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>(f1, f2, $f26, $r7);

     label7:
        $f19 = r0.<android.widget.RadialTimePickerView: float mHoursToMinutes>;

        f29 = staticinvoke <android.util.MathUtils: float lerp(float,float,float)>(f28, f27, $f19);

        $b10 = f29 cmpl 0.0F;

        if $b10 <= 0 goto label8;

        $r6 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector>;

        r12 = $r6[1];

        $i21 = r0.<android.widget.RadialTimePickerView: int mSelectorDotColor>;

        virtualinvoke r12.<android.graphics.Paint: void setColor(int)>($i21);

        $i22 = r0.<android.widget.RadialTimePickerView: int mSelectorDotRadius>;

        $f24 = (float) $i22;

        $f25 = $f24 * f29;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>(f1, f2, $f25, r12);

     label8:
        d0 = staticinvoke <java.lang.Math: double sin(double)>(d12);

        d13 = staticinvoke <java.lang.Math: double cos(double)>(d12);

        $f20 = (float) i28;

        f30 = f0 - $f20;

        i29 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        i30 = r0.<android.widget.RadialTimePickerView: int mCenterDotRadius>;

        $d4 = (double) i30;

        $d5 = $d4 * d0;

        i31 = (int) $d5;

        i32 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        $d6 = (double) i30;

        $d7 = $d6 * d13;

        i33 = (int) $d7;

        $d8 = (double) f30;

        $d9 = $d8 * d0;

        $i12 = (int) $d9;

        $i11 = i29 + i31;

        $i13 = $i12 + $i11;

        f31 = (float) $i13;

        $i15 = i32 - i33;

        $d10 = (double) f30;

        $d11 = $d10 * d13;

        $i14 = (int) $d11;

        $i16 = $i15 - $i14;

        f32 = (float) $i16;

        $r5 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint[] mPaintSelector>;

        r13 = $r5[2];

        $i17 = r0.<android.widget.RadialTimePickerView: int mSelectorColor>;

        virtualinvoke r13.<android.graphics.Paint: void setColor(int)>($i17);

        $i18 = r0.<android.widget.RadialTimePickerView: int mSelectorStroke>;

        $f21 = (float) $i18;

        virtualinvoke r13.<android.graphics.Paint: void setStrokeWidth(float)>($f21);

        $i19 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        $f23 = (float) $i19;

        $i20 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        $f22 = (float) $i20;

        virtualinvoke r1.<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>($f23, $f22, f31, f32, r13);

        return;
    }

    private void drawTextElements(android.graphics.Canvas, float, android.graphics.Typeface, android.content.res.ColorStateList, java.lang.String[], float[], float[], android.graphics.Paint, int, boolean, int, boolean)
    {
        android.widget.RadialTimePickerView r0;
        android.graphics.Canvas r1;
        android.graphics.Typeface r2;
        android.content.res.ColorStateList r3;
        java.lang.String[] r4;
        float[] r5, r6;
        android.graphics.Paint r7;
        int i0, i1, i2, $i3, i4, i5, i8, $i9;
        boolean z0, z1, z2;
        float $f0, f1, f2, $f3, $f4;
        double $d0, $d1;
        byte b6, $b7;
        int[] $r9;
        java.lang.String $r10;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.graphics.Canvas;

        f1 := @parameter1: float;

        r2 := @parameter2: android.graphics.Typeface;

        r3 := @parameter3: android.content.res.ColorStateList;

        r4 := @parameter4: java.lang.String[];

        r5 := @parameter5: float[];

        r6 := @parameter6: float[];

        r7 := @parameter7: android.graphics.Paint;

        i0 := @parameter8: int;

        z0 := @parameter9: boolean;

        i4 := @parameter10: int;

        z1 := @parameter11: boolean;

        virtualinvoke r7.<android.graphics.Paint: void setTextSize(float)>(f1);

        virtualinvoke r7.<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>(r2);

        $f0 = (float) i4;

        f2 = $f0 / 30.0F;

        i1 = (int) f2;

        $d0 = (double) f2;

        $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0);

        i2 = (int) $d1;

        i5 = 0;

     label1:
        if i5 >= 12 goto label9;

        if i1 == i5 goto label3;

        $i3 = i2 % 12;

        if $i3 != i5 goto label2;

        goto label3;

     label2:
        z2 = 0;

        goto label4;

     label3:
        z2 = 1;

     label4:
        if z1 == 0 goto label5;

        if z2 != 0 goto label5;

        goto label8;

     label5:
        if z0 == 0 goto label6;

        if z2 == 0 goto label6;

        b6 = 32;

        goto label7;

     label6:
        b6 = 0;

     label7:
        $b7 = 8 | b6;

        $r9 = staticinvoke <android.util.StateSet: int[] get(int)>($b7);

        i8 = virtualinvoke r3.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r9, 0);

        virtualinvoke r7.<android.graphics.Paint: void setColor(int)>(i8);

        $i9 = specialinvoke r0.<android.widget.RadialTimePickerView: int getMultipliedAlpha(int,int)>(i8, i0);

        virtualinvoke r7.<android.graphics.Paint: void setAlpha(int)>($i9);

        $r10 = r4[i5];

        $f3 = r5[i5];

        $f4 = r6[i5];

        virtualinvoke r1.<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>($r10, $f3, $f4, r7);

     label8:
        i5 = i5 + 1;

        goto label1;

     label9:
        return;
    }

    private int getDegreesForHour(int)
    {
        android.widget.RadialTimePickerView r0;
        int i0, i1, $i2;
        boolean $z0;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        if $z0 == 0 goto label1;

        i1 = i0;

        if i0 < 12 goto label2;

        i1 = i0 - 12;

        goto label2;

     label1:
        i1 = i0;

        if i0 != 12 goto label2;

        i1 = 0;

     label2:
        $i2 = i1 * 30;

        return $i2;
    }

    private int getDegreesForMinute(int)
    {
        android.widget.RadialTimePickerView r0;
        int i0, $i1;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        $i1 = i0 * 6;

        return $i1;
    }

    private int getDegreesFromXY(float, float, boolean)
    {
        android.widget.RadialTimePickerView r0;
        float f0, f1, $f2, $f3, $f4, $f5;
        boolean z0, z1, $z2, $z3, $z4;
        int i0, $i1, $i2, $i3, i5, i6, i7, $i8, $i9, i11, i12;
        double d0, d1, d2, $d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11;
        int[] $r1;
        byte $b4, $b10;

        r0 := @this: android.widget.RadialTimePickerView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        z0 := @parameter2: boolean;

        $z2 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        if $z2 == 0 goto label1;

        $z4 = r0.<android.widget.RadialTimePickerView: boolean mShowHours>;

        if $z4 == 0 goto label1;

        i5 = r0.<android.widget.RadialTimePickerView: int mMinDistForInnerNumber>;

        i6 = r0.<android.widget.RadialTimePickerView: int mMaxDistForOuterNumber>;

        goto label2;

     label1:
        z1 = r0.<android.widget.RadialTimePickerView: boolean mShowHours>;

        $i2 = r0.<android.widget.RadialTimePickerView: int mCircleRadius>;

        $r1 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        $z3 = z1 ^ 1;

        i12 = (int) $z3;

        $i1 = $r1[i12];

        i7 = $i2 - $i1;

        i0 = r0.<android.widget.RadialTimePickerView: int mSelectorRadius>;

        i6 = i0 + i7;

        i5 = i7 - i0;

     label2:
        $i8 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        $f2 = (float) $i8;

        $f3 = f0 - $f2;

        d0 = (double) $f3;

        $i9 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        $f4 = (float) $i9;

        $f5 = f1 - $f4;

        d1 = (double) $f5;

        $d8 = d0 * d0;

        $d9 = d1 * d1;

        $d10 = $d8 + $d9;

        d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d10);

        $d11 = (double) i5;

        $b10 = d2 cmpg $d11;

        if $b10 < 0 goto label5;

        if z0 == 0 goto label3;

        $d7 = (double) i6;

        $b4 = d2 cmpl $d7;

        if $b4 <= 0 goto label3;

        goto label5;

     label3:
        $d3 = staticinvoke <java.lang.Math: double atan2(double,double)>(d1, d0);

        $d4 = $d3 + 1.5707963267948966;

        $d5 = staticinvoke <java.lang.Math: double toDegrees(double)>($d4);

        $d6 = $d5 + 0.5;

        i11 = (int) $d6;

        if i11 >= 0 goto label4;

        $i3 = i11 + 360;

        return $i3;

     label4:
        return i11;

     label5:
        return -1;
    }

    private int getHourForDegrees(int, boolean)
    {
        android.widget.RadialTimePickerView r0;
        boolean z0, $z1;
        int i0, $i1, $i2, i3, i4;

        r0 := @this: android.widget.RadialTimePickerView;

        i3 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = i3 / 30;

        i0 = $i1 % 12;

        $z1 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        if $z1 == 0 goto label2;

        if z0 != 0 goto label1;

        if i0 != 0 goto label1;

        i4 = 12;

        goto label3;

     label1:
        i4 = i0;

        if z0 == 0 goto label3;

        i4 = i0;

        if i0 == 0 goto label3;

        i4 = i0 + 12;

        goto label3;

     label2:
        i4 = i0;

        $i2 = r0.<android.widget.RadialTimePickerView: int mAmOrPm>;

        if $i2 != 1 goto label3;

        i4 = i0 + 12;

     label3:
        return i4;
    }

    private boolean getInnerCircleForHour(int)
    {
        android.widget.RadialTimePickerView r0;
        int i0;
        boolean $z0, z1;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        if $z0 == 0 goto label2;

        if i0 == 0 goto label1;

        if i0 <= 12 goto label2;

     label1:
        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    private boolean getInnerCircleFromXY(float, float)
    {
        android.widget.RadialTimePickerView r0;
        float f0, f1, $f2, $f3, $f4, $f5;
        boolean z0, $z1, z2;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        int $i0, $i1, $i2;
        byte $b3;

        r0 := @this: android.widget.RadialTimePickerView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        z0 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        z2 = 0;

        if z0 == 0 goto label2;

        $z1 = r0.<android.widget.RadialTimePickerView: boolean mShowHours>;

        if $z1 == 0 goto label2;

        $i0 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        $f2 = (float) $i0;

        $f3 = f0 - $f2;

        d0 = (double) $f3;

        $i1 = r0.<android.widget.RadialTimePickerView: int mYCenter>;

        $f4 = (float) $i1;

        $f5 = f1 - $f4;

        d1 = (double) $f5;

        $d3 = d0 * d0;

        $d2 = d1 * d1;

        $d4 = $d3 + $d2;

        $d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4);

        $i2 = r0.<android.widget.RadialTimePickerView: int mHalfwayDist>;

        $d6 = (double) $i2;

        $b3 = $d5 cmpg $d6;

        if $b3 > 0 goto label1;

        z2 = 1;

     label1:
        return z2;

     label2:
        return 0;
    }

    private int getMinuteForDegrees(int)
    {
        android.widget.RadialTimePickerView r0;
        int i0, $i1;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        $i1 = i0 / 6;

        return $i1;
    }

    private int getMultipliedAlpha(int, int)
    {
        android.widget.RadialTimePickerView r0;
        int i0, i1, $i2, $i3;
        double $d0, $d1, $d2, $d3, $d4;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <android.graphics.Color: int alpha(int)>(i0);

        $d2 = (double) $i2;

        $d0 = (double) i1;

        $d1 = $d0 / 255.0;

        $d3 = $d2 * $d1;

        $d4 = $d3 + 0.5;

        $i3 = (int) $d4;

        return $i3;
    }

    private boolean handleTouchInput(float, float, boolean, boolean)
    {
        android.widget.RadialTimePickerView r0;
        float f0, f1;
        boolean z0, z1, z2, $z3, $z4, $z6, z7;
        android.widget.RadialTimePickerView$OnValueSelectedListener r1;
        int $i0, $i1, $i2, $i3, i4, i5, i7, i8;
        int[] $r2, $r3, $r4, $r5;
        byte b6;

        r0 := @this: android.widget.RadialTimePickerView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 = specialinvoke r0.<android.widget.RadialTimePickerView: boolean getInnerCircleFromXY(float,float)>(f0, f1);

        i4 = specialinvoke r0.<android.widget.RadialTimePickerView: int getDegreesFromXY(float,float,boolean)>(f0, f1, 0);

        if i4 != -1 goto label01;

        return 0;

     label01:
        $z3 = r0.<android.widget.RadialTimePickerView: boolean mShowHours>;

        specialinvoke r0.<android.widget.RadialTimePickerView: void animatePicker(boolean,long)>($z3, 60L);

        $z4 = r0.<android.widget.RadialTimePickerView: boolean mShowHours>;

        if $z4 == 0 goto label05;

        $i2 = staticinvoke <android.widget.RadialTimePickerView: int snapOnly30s(int,int)>(i4, 0);

        i5 = $i2 % 360;

        $z6 = r0.<android.widget.RadialTimePickerView: boolean mIsOnInnerCircle>;

        if $z6 != z2 goto label03;

        $r4 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $i3 = $r4[0];

        if $i3 == i5 goto label02;

        goto label03;

     label02:
        z7 = 0;

        goto label04;

     label03:
        z7 = 1;

     label04:
        r0.<android.widget.RadialTimePickerView: boolean mIsOnInnerCircle> = z2;

        $r5 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $r5[0] = i5;

        b6 = 0;

        i7 = virtualinvoke r0.<android.widget.RadialTimePickerView: int getCurrentHour()>();

        goto label08;

     label05:
        $i0 = staticinvoke <android.widget.RadialTimePickerView: int snapPrefer30s(int)>(i4);

        i8 = $i0 % 360;

        $r2 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $i1 = $r2[1];

        if $i1 == i8 goto label06;

        z7 = 1;

        goto label07;

     label06:
        z7 = 0;

     label07:
        $r3 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $r3[1] = i8;

        b6 = 1;

        i7 = virtualinvoke r0.<android.widget.RadialTimePickerView: int getCurrentMinute()>();

     label08:
        if z7 != 0 goto label10;

        if z0 != 0 goto label10;

        if z1 == 0 goto label09;

        goto label10;

     label09:
        return 0;

     label10:
        r1 = r0.<android.widget.RadialTimePickerView: android.widget.RadialTimePickerView$OnValueSelectedListener mListener>;

        if r1 == null goto label11;

        interfaceinvoke r1.<android.widget.RadialTimePickerView$OnValueSelectedListener: void onValueSelected(int,int,boolean)>(b6, i7, z1);

     label11:
        if z7 != 0 goto label12;

        if z0 == 0 goto label13;

     label12:
        virtualinvoke r0.<android.widget.RadialTimePickerView: boolean performHapticFeedback(int)>(4);

        virtualinvoke r0.<android.widget.RadialTimePickerView: void invalidate()>();

     label13:
        return 1;
    }

    private void initData()
    {
        android.widget.RadialTimePickerView r0;
        java.lang.String[] r1, $r2, $r3, $r4;
        boolean $z0;

        r0 := @this: android.widget.RadialTimePickerView;

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        if $z0 == 0 goto label1;

        $r3 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mOuterHours24Texts>;

        r0.<android.widget.RadialTimePickerView: java.lang.String[] mOuterTextHours> = $r3;

        $r4 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mInnerHours24Texts>;

        r0.<android.widget.RadialTimePickerView: java.lang.String[] mInnerTextHours> = $r4;

        goto label2;

     label1:
        r1 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mHours12Texts>;

        r0.<android.widget.RadialTimePickerView: java.lang.String[] mOuterTextHours> = r1;

        r0.<android.widget.RadialTimePickerView: java.lang.String[] mInnerTextHours> = r1;

     label2:
        $r2 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mMinutesTexts>;

        r0.<android.widget.RadialTimePickerView: java.lang.String[] mMinutesText> = $r2;

        return;
    }

    private void initHoursAndMinutesText()
    {
        android.widget.RadialTimePickerView r0;
        java.lang.Object[] $r1, $r6, $r11, $r16;
        int[] $r2, $r7, $r12, $r17;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.String[] $r3, $r8, $r13, $r18;
        java.lang.Integer $r4, $r9, $r14, $r19;
        java.lang.String $r5, $r10, $r15, $r20;

        r0 := @this: android.widget.RadialTimePickerView;

        i4 = 0;

     label1:
        if i4 >= 12 goto label2;

        $r3 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mHours12Texts>;

        $r1 = newarray (java.lang.Object)[1];

        $r2 = <android.widget.RadialTimePickerView: int[] HOURS_NUMBERS>;

        $i0 = $r2[i4];

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r1[0] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $r1);

        $r3[i4] = $r5;

        $r8 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mInnerHours24Texts>;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = <android.widget.RadialTimePickerView: int[] HOURS_NUMBERS_24>;

        $i1 = $r7[i4];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6[0] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02d", $r6);

        $r8[i4] = $r10;

        $r13 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mOuterHours24Texts>;

        $r11 = newarray (java.lang.Object)[1];

        $r12 = <android.widget.RadialTimePickerView: int[] HOURS_NUMBERS>;

        $i2 = $r12[i4];

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r11[0] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d", $r11);

        $r13[i4] = $r15;

        $r18 = r0.<android.widget.RadialTimePickerView: java.lang.String[] mMinutesTexts>;

        $r16 = newarray (java.lang.Object)[1];

        $r17 = <android.widget.RadialTimePickerView: int[] MINUTES_NUMBERS>;

        $i3 = $r17[i4];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r16[0] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%02d", $r16);

        $r18[i4] = $r20;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private static void preparePrefer30sMap()
    {
        int[] $r0;
        int $i0, i1, i2, i4, i5;
        byte b3, b6;

        i1 = 0;

        i2 = 1;

        b3 = 8;

        i4 = 0;

     label1:
        if i4 >= 361 goto label7;

        $r0 = <android.widget.RadialTimePickerView: int[] SNAP_PREFER_30S_MAP>;

        $r0[i4] = i1;

        if i2 != b3 goto label5;

        i5 = i1 + 6;

        if i5 != 360 goto label2;

        b6 = 7;

        goto label4;

     label2:
        $i0 = i5 % 30;

        if $i0 != 0 goto label3;

        b6 = 14;

        goto label4;

     label3:
        b6 = 4;

     label4:
        i2 = 1;

        b3 = b6;

        goto label6;

     label5:
        i2 = i2 + 1;

        i5 = i1;

     label6:
        i4 = i4 + 1;

        i1 = i5;

        goto label1;

     label7:
        return;
    }

    private void setCurrentHourInternal(int, boolean, boolean)
    {
        android.widget.RadialTimePickerView r0;
        int i0, $i1, $i2, $i3, $i5;
        boolean z0, z1, z2, $z3;
        android.widget.RadialTimePickerView$OnValueSelectedListener r1;
        int[] $r2;
        android.widget.RadialTimePickerView$RadialPickerTouchHelper $r3;
        byte b4;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $i1 = i0 % 12;

        $i2 = $i1 * 30;

        $r2[0] = $i2;

        if i0 == 0 goto label2;

        $i3 = i0 % 24;

        if $i3 >= 12 goto label1;

        goto label2;

     label1:
        b4 = 1;

        goto label3;

     label2:
        b4 = 0;

     label3:
        z2 = specialinvoke r0.<android.widget.RadialTimePickerView: boolean getInnerCircleForHour(int)>(i0);

        $i5 = r0.<android.widget.RadialTimePickerView: int mAmOrPm>;

        if $i5 != b4 goto label4;

        $z3 = r0.<android.widget.RadialTimePickerView: boolean mIsOnInnerCircle>;

        if $z3 == z2 goto label5;

     label4:
        r0.<android.widget.RadialTimePickerView: int mAmOrPm> = b4;

        r0.<android.widget.RadialTimePickerView: boolean mIsOnInnerCircle> = z2;

        specialinvoke r0.<android.widget.RadialTimePickerView: void initData()>();

        $r3 = r0.<android.widget.RadialTimePickerView: android.widget.RadialTimePickerView$RadialPickerTouchHelper mTouchHelper>;

        virtualinvoke $r3.<android.widget.RadialTimePickerView$RadialPickerTouchHelper: void invalidateRoot()>();

     label5:
        virtualinvoke r0.<android.widget.RadialTimePickerView: void invalidate()>();

        if z0 == 0 goto label6;

        r1 = r0.<android.widget.RadialTimePickerView: android.widget.RadialTimePickerView$OnValueSelectedListener mListener>;

        if r1 == null goto label6;

        interfaceinvoke r1.<android.widget.RadialTimePickerView$OnValueSelectedListener: void onValueSelected(int,int,boolean)>(0, i0, z1);

     label6:
        return;
    }

    private void setCurrentMinuteInternal(int, boolean)
    {
        android.widget.RadialTimePickerView r0;
        int i0, $i1, $i2;
        boolean z0;
        android.widget.RadialTimePickerView$OnValueSelectedListener r1;
        int[] $r2;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $i1 = i0 % 60;

        $i2 = $i1 * 6;

        $r2[1] = $i2;

        virtualinvoke r0.<android.widget.RadialTimePickerView: void invalidate()>();

        if z0 == 0 goto label1;

        r1 = r0.<android.widget.RadialTimePickerView: android.widget.RadialTimePickerView$OnValueSelectedListener mListener>;

        if r1 == null goto label1;

        interfaceinvoke r1.<android.widget.RadialTimePickerView$OnValueSelectedListener: void onValueSelected(int,int,boolean)>(1, i0, 0);

     label1:
        return;
    }

    private void showPicker(boolean, boolean)
    {
        android.widget.RadialTimePickerView r0;
        boolean z0, z1, $z2, $z3;
        android.animation.ObjectAnimator r1, $r2;
        float f0;
        android.widget.RadialTimePickerView$RadialPickerTouchHelper $r3;

        r0 := @this: android.widget.RadialTimePickerView;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $z2 = r0.<android.widget.RadialTimePickerView: boolean mShowHours>;

        if $z2 != z0 goto label1;

        return;

     label1:
        r0.<android.widget.RadialTimePickerView: boolean mShowHours> = z0;

        if z1 == 0 goto label2;

        specialinvoke r0.<android.widget.RadialTimePickerView: void animatePicker(boolean,long)>(z0, 500L);

        goto label6;

     label2:
        r1 = r0.<android.widget.RadialTimePickerView: android.animation.ObjectAnimator mHoursToMinutesAnimator>;

        if r1 == null goto label3;

        $z3 = virtualinvoke r1.<android.animation.ObjectAnimator: boolean isStarted()>();

        if $z3 == 0 goto label3;

        $r2 = r0.<android.widget.RadialTimePickerView: android.animation.ObjectAnimator mHoursToMinutesAnimator>;

        virtualinvoke $r2.<android.animation.ObjectAnimator: void cancel()>();

        r0.<android.widget.RadialTimePickerView: android.animation.ObjectAnimator mHoursToMinutesAnimator> = null;

     label3:
        if z0 == 0 goto label4;

        f0 = 0.0F;

        goto label5;

     label4:
        f0 = 1.0F;

     label5:
        r0.<android.widget.RadialTimePickerView: float mHoursToMinutes> = f0;

     label6:
        specialinvoke r0.<android.widget.RadialTimePickerView: void initData()>();

        virtualinvoke r0.<android.widget.RadialTimePickerView: void invalidate()>();

        $r3 = r0.<android.widget.RadialTimePickerView: android.widget.RadialTimePickerView$RadialPickerTouchHelper mTouchHelper>;

        virtualinvoke $r3.<android.widget.RadialTimePickerView$RadialPickerTouchHelper: void invalidateRoot()>();

        return;
    }

    private static int snapOnly30s(int, int)
    {
        int i0, i1, $i2, $i3, $i4, i5, i6, i7, i8;

        i5 := @parameter0: int;

        i6 := @parameter1: int;

        $i2 = i5 / 30;

        i0 = $i2 * 30;

        i1 = i0 + 30;

        if i6 != 1 goto label1;

        i7 = i1;

        goto label5;

     label1:
        if i6 != -1 goto label3;

        i8 = i0;

        if i5 != i0 goto label2;

        i8 = i0 - 30;

     label2:
        i7 = i8;

        goto label5;

     label3:
        $i4 = i5 - i0;

        $i3 = i1 - i5;

        if $i4 >= $i3 goto label4;

        i7 = i0;

        goto label5;

     label4:
        i7 = i1;

     label5:
        return i7;
    }

    private static int snapPrefer30s(int)
    {
        int i0, $i1;
        int[] r0;

        i0 := @parameter0: int;

        r0 = <android.widget.RadialTimePickerView: int[] SNAP_PREFER_30S_MAP>;

        if r0 != null goto label1;

        return -1;

     label1:
        $i1 = r0[i0];

        return $i1;
    }

    void applyAttributes(android.util.AttributeSet, int, int)
    {
        android.widget.RadialTimePickerView r0;
        int i0, $i1, $i2, $i3, i4, i5;
        android.content.Context r1, $r4;
        android.content.res.TypedArray r2;
        android.content.res.ColorStateList r3, $r7, $r10, r14, r17, r19;
        int[] $r5, $r6, $r12, r20;
        android.graphics.Paint $r8, $r11;
        android.content.res.ColorStateList[] $r9, r15, r16, r18;
        android.util.AttributeSet r13;

        r0 := @this: android.widget.RadialTimePickerView;

        r13 := @parameter0: android.util.AttributeSet;

        i4 := @parameter1: int;

        i0 := @parameter2: int;

        r1 = virtualinvoke r0.<android.widget.RadialTimePickerView: android.content.Context getContext()>();

        $r4 = virtualinvoke r0.<android.widget.RadialTimePickerView: android.content.Context getContext()>();

        $r5 = <com.android.internal.R$styleable: int[] TimePicker>;

        r2 = virtualinvoke $r4.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r13, $r5, i4, i0);

        $r6 = <com.android.internal.R$styleable: int[] TimePicker>;

        virtualinvoke r0.<android.widget.RadialTimePickerView: void saveAttributeDataForStyleable(android.content.Context,int[],android.util.AttributeSet,android.content.res.TypedArray,int,int)>(r1, $r6, r13, r2, i4, i0);

        r14 = virtualinvoke r2.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(3);

        r3 = virtualinvoke r2.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(9);

        r15 = r0.<android.widget.RadialTimePickerView: android.content.res.ColorStateList[] mTextColor>;

        if r14 != null goto label1;

        r14 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>(-65281);

        goto label1;

     label1:
        r15[0] = r14;

        r16 = r0.<android.widget.RadialTimePickerView: android.content.res.ColorStateList[] mTextColor>;

        if r3 != null goto label2;

        r17 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>(-65281);

        goto label3;

     label2:
        r17 = r3;

     label3:
        r16[2] = r17;

        r18 = r0.<android.widget.RadialTimePickerView: android.content.res.ColorStateList[] mTextColor>;

        $r7 = r18[0];

        r18[1] = $r7;

        r19 = virtualinvoke r2.<android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)>(5);

        if r19 == null goto label4;

        $r12 = staticinvoke <android.util.StateSet: int[] get(int)>(40);

        i5 = virtualinvoke r19.<android.content.res.ColorStateList: int getColorForState(int[],int)>($r12, 0);

        goto label5;

     label4:
        i5 = -65281;

     label5:
        $r8 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint mPaintCenter>;

        virtualinvoke $r8.<android.graphics.Paint: void setColor(int)>(i5);

        r20 = staticinvoke <android.util.StateSet: int[] get(int)>(40);

        r0.<android.widget.RadialTimePickerView: int mSelectorColor> = i5;

        $r9 = r0.<android.widget.RadialTimePickerView: android.content.res.ColorStateList[] mTextColor>;

        $r10 = $r9[0];

        $i1 = virtualinvoke $r10.<android.content.res.ColorStateList: int getColorForState(int[],int)>(r20, 0);

        r0.<android.widget.RadialTimePickerView: int mSelectorDotColor> = $i1;

        $r11 = r0.<android.widget.RadialTimePickerView: android.graphics.Paint mPaintBackground>;

        $i2 = virtualinvoke r1.<android.content.Context: int getColor(int)>(17171007);

        $i3 = virtualinvoke r2.<android.content.res.TypedArray: int getColor(int,int)>(4, $i2);

        virtualinvoke $r11.<android.graphics.Paint: void setColor(int)>($i3);

        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    public boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        android.widget.RadialTimePickerView r0;
        android.view.MotionEvent r1;
        android.widget.RadialTimePickerView$RadialPickerTouchHelper $r2;
        boolean $z0, $z1;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<android.widget.RadialTimePickerView: android.widget.RadialTimePickerView$RadialPickerTouchHelper mTouchHelper>;

        $z0 = virtualinvoke $r2.<android.widget.RadialTimePickerView$RadialPickerTouchHelper: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        return $z1;
    }

    public int getAmOrPm()
    {
        android.widget.RadialTimePickerView r0;
        int $i0;

        r0 := @this: android.widget.RadialTimePickerView;

        $i0 = r0.<android.widget.RadialTimePickerView: int mAmOrPm>;

        return $i0;
    }

    public int getCurrentHour()
    {
        android.widget.RadialTimePickerView r0;
        int[] $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: android.widget.RadialTimePickerView;

        $r1 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $i0 = $r1[0];

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mIsOnInnerCircle>;

        $i1 = specialinvoke r0.<android.widget.RadialTimePickerView: int getHourForDegrees(int,boolean)>($i0, $z0);

        return $i1;
    }

    public int getCurrentItemShowing()
    {
        android.widget.RadialTimePickerView r0;
        boolean $z0, $z1;
        int i0;

        r0 := @this: android.widget.RadialTimePickerView;

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mShowHours>;

        $z1 = $z0 ^ 1;

        i0 = (int) $z1;

        return i0;
    }

    public int getCurrentMinute()
    {
        android.widget.RadialTimePickerView r0;
        int[] $r1;
        int $i0, $i1;

        r0 := @this: android.widget.RadialTimePickerView;

        $r1 = r0.<android.widget.RadialTimePickerView: int[] mSelectionDegrees>;

        $i0 = $r1[1];

        $i1 = specialinvoke r0.<android.widget.RadialTimePickerView: int getMinuteForDegrees(int)>($i0);

        return $i1;
    }

    public void initialize(int, int, boolean)
    {
        android.widget.RadialTimePickerView r0;
        int i0, i1;
        boolean z0, $z1;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        if $z1 == z0 goto label1;

        r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode> = z0;

        specialinvoke r0.<android.widget.RadialTimePickerView: void initData()>();

     label1:
        specialinvoke r0.<android.widget.RadialTimePickerView: void setCurrentHourInternal(int,boolean,boolean)>(i0, 0, 0);

        specialinvoke r0.<android.widget.RadialTimePickerView: void setCurrentMinuteInternal(int,boolean)>(i1, 0);

        return;
    }

    public void onDraw(android.graphics.Canvas)
    {
        android.widget.RadialTimePickerView r0;
        android.graphics.Canvas r1;
        android.graphics.Path r2;
        boolean $z0;
        float f0;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.graphics.Canvas;

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mInputEnabled>;

        if $z0 == 0 goto label1;

        f0 = 1.0F;

        goto label2;

     label1:
        f0 = r0.<android.widget.RadialTimePickerView: float mDisabledAlpha>;

     label2:
        specialinvoke r0.<android.widget.RadialTimePickerView: void drawCircleBackground(android.graphics.Canvas)>(r1);

        r2 = r0.<android.widget.RadialTimePickerView: android.graphics.Path mSelectorPath>;

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawSelector(android.graphics.Canvas,android.graphics.Path)>(r1, r2);

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawHours(android.graphics.Canvas,android.graphics.Path,float)>(r1, r2, f0);

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawMinutes(android.graphics.Canvas,android.graphics.Path,float)>(r1, r2, f0);

        specialinvoke r0.<android.widget.RadialTimePickerView: void drawCenter(android.graphics.Canvas,float)>(r1, f0);

        return;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        android.widget.RadialTimePickerView r0;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20, i21;
        int[] r1;
        android.widget.RadialTimePickerView$RadialPickerTouchHelper $r2;

        r0 := @this: android.widget.RadialTimePickerView;

        z0 := @parameter0: boolean;

        i15 := @parameter1: int;

        i16 := @parameter2: int;

        i17 := @parameter3: int;

        i0 := @parameter4: int;

        if z0 != 0 goto label1;

        return;

     label1:
        $i1 = virtualinvoke r0.<android.widget.RadialTimePickerView: int getWidth()>();

        $i2 = $i1 / 2;

        r0.<android.widget.RadialTimePickerView: int mXCenter> = $i2;

        $i3 = virtualinvoke r0.<android.widget.RadialTimePickerView: int getHeight()>();

        i18 = $i3 / 2;

        r0.<android.widget.RadialTimePickerView: int mYCenter> = i18;

        $i4 = r0.<android.widget.RadialTimePickerView: int mXCenter>;

        i19 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i18);

        r0.<android.widget.RadialTimePickerView: int mCircleRadius> = i19;

        r1 = r0.<android.widget.RadialTimePickerView: int[] mTextInset>;

        i20 = r1[2];

        i21 = r0.<android.widget.RadialTimePickerView: int mSelectorRadius>;

        $i5 = i19 - i20;

        $i6 = $i5 - i21;

        r0.<android.widget.RadialTimePickerView: int mMinDistForInnerNumber> = $i6;

        $i7 = r1[0];

        $i8 = i19 - $i7;

        $i9 = $i8 + i21;

        r0.<android.widget.RadialTimePickerView: int mMaxDistForOuterNumber> = $i9;

        $i11 = r1[0];

        $i10 = r1[2];

        $i12 = $i11 + $i10;

        $i13 = $i12 / 2;

        $i14 = i19 - $i13;

        r0.<android.widget.RadialTimePickerView: int mHalfwayDist> = $i14;

        specialinvoke r0.<android.widget.RadialTimePickerView: void calculatePositionsHours()>();

        specialinvoke r0.<android.widget.RadialTimePickerView: void calculatePositionsMinutes()>();

        $r2 = r0.<android.widget.RadialTimePickerView: android.widget.RadialTimePickerView$RadialPickerTouchHelper mTouchHelper>;

        virtualinvoke $r2.<android.widget.RadialTimePickerView$RadialPickerTouchHelper: void invalidateRoot()>();

        return;
    }

    public android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent, int)
    {
        android.widget.RadialTimePickerView r0;
        android.view.MotionEvent r1;
        int i0, $i1;
        boolean $z0;
        float $f0, $f1;
        android.view.PointerIcon $r2, $r4;
        android.content.Context $r3;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.view.MotionEvent;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r0.<android.widget.RadialTimePickerView: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        return null;

     label1:
        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $i1 = specialinvoke r0.<android.widget.RadialTimePickerView: int getDegreesFromXY(float,float,boolean)>($f0, $f1, 0);

        if $i1 == -1 goto label2;

        $r3 = virtualinvoke r0.<android.widget.RadialTimePickerView: android.content.Context getContext()>();

        $r4 = staticinvoke <android.view.PointerIcon: android.view.PointerIcon getSystemIcon(android.content.Context,int)>($r3, 1002);

        return $r4;

     label2:
        $r2 = specialinvoke r0.<android.view.View: android.view.PointerIcon onResolvePointerIcon(android.view.MotionEvent,int)>(r1, i0);

        return $r2;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        android.widget.RadialTimePickerView r0;
        android.view.MotionEvent r1;
        int i0;
        boolean $z2, $z3, z4, z5, $z6, $z7, $z8;
        float $f0, $f1;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.view.MotionEvent;

        $z2 = r0.<android.widget.RadialTimePickerView: boolean mInputEnabled>;

        if $z2 != 0 goto label1;

        return 1;

     label1:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i0 == 2 goto label2;

        if i0 == 1 goto label2;

        if i0 != 0 goto label5;

     label2:
        z4 = 0;

        if i0 != 0 goto label3;

        r0.<android.widget.RadialTimePickerView: boolean mChangedDuringTouch> = 0;

        z5 = 0;

        goto label4;

     label3:
        z5 = 0;

        if i0 != 1 goto label4;

        z5 = 0;

        z4 = 1;

        $z3 = r0.<android.widget.RadialTimePickerView: boolean mChangedDuringTouch>;

        if $z3 != 0 goto label4;

        z5 = 1;

        z4 = 1;

     label4:
        $z6 = r0.<android.widget.RadialTimePickerView: boolean mChangedDuringTouch>;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $z7 = specialinvoke r0.<android.widget.RadialTimePickerView: boolean handleTouchInput(float,float,boolean,boolean)>($f0, $f1, z5, z4);

        $z8 = $z6 | $z7;

        r0.<android.widget.RadialTimePickerView: boolean mChangedDuringTouch> = $z8;

     label5:
        return 1;
    }

    public boolean setAmOrPm(int)
    {
        android.widget.RadialTimePickerView r0;
        int i0, $i1;
        boolean $z0;
        android.widget.RadialTimePickerView$RadialPickerTouchHelper $r1;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        $i1 = r0.<android.widget.RadialTimePickerView: int mAmOrPm>;

        if $i1 == i0 goto label2;

        $z0 = r0.<android.widget.RadialTimePickerView: boolean mIs24HourMode>;

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        r0.<android.widget.RadialTimePickerView: int mAmOrPm> = i0;

        virtualinvoke r0.<android.widget.RadialTimePickerView: void invalidate()>();

        $r1 = r0.<android.widget.RadialTimePickerView: android.widget.RadialTimePickerView$RadialPickerTouchHelper mTouchHelper>;

        virtualinvoke $r1.<android.widget.RadialTimePickerView$RadialPickerTouchHelper: void invalidateRoot()>();

        return 1;

     label2:
        return 0;
    }

    public void setCurrentHour(int)
    {
        android.widget.RadialTimePickerView r0;
        int i0;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.RadialTimePickerView: void setCurrentHourInternal(int,boolean,boolean)>(i0, 1, 0);

        return;
    }

    public void setCurrentItemShowing(int, boolean)
    {
        android.widget.RadialTimePickerView r0;
        int i0;
        boolean z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ClockView does not support showing item ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RadialTimePickerView", $r5);

        goto label3;

     label1:
        virtualinvoke r0.<android.widget.RadialTimePickerView: void showMinutes(boolean)>(z0);

        goto label3;

     label2:
        virtualinvoke r0.<android.widget.RadialTimePickerView: void showHours(boolean)>(z0);

     label3:
        return;
    }

    public void setCurrentMinute(int)
    {
        android.widget.RadialTimePickerView r0;
        int i0;

        r0 := @this: android.widget.RadialTimePickerView;

        i0 := @parameter0: int;

        specialinvoke r0.<android.widget.RadialTimePickerView: void setCurrentMinuteInternal(int,boolean)>(i0, 1);

        return;
    }

    public void setInputEnabled(boolean)
    {
        android.widget.RadialTimePickerView r0;
        boolean z0;

        r0 := @this: android.widget.RadialTimePickerView;

        z0 := @parameter0: boolean;

        r0.<android.widget.RadialTimePickerView: boolean mInputEnabled> = z0;

        virtualinvoke r0.<android.widget.RadialTimePickerView: void invalidate()>();

        return;
    }

    public void setOnValueSelectedListener(android.widget.RadialTimePickerView$OnValueSelectedListener)
    {
        android.widget.RadialTimePickerView r0;
        android.widget.RadialTimePickerView$OnValueSelectedListener r1;

        r0 := @this: android.widget.RadialTimePickerView;

        r1 := @parameter0: android.widget.RadialTimePickerView$OnValueSelectedListener;

        r0.<android.widget.RadialTimePickerView: android.widget.RadialTimePickerView$OnValueSelectedListener mListener> = r1;

        return;
    }

    public void showHours(boolean)
    {
        android.widget.RadialTimePickerView r0;
        boolean z0;

        r0 := @this: android.widget.RadialTimePickerView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.widget.RadialTimePickerView: void showPicker(boolean,boolean)>(1, z0);

        return;
    }

    public void showMinutes(boolean)
    {
        android.widget.RadialTimePickerView r0;
        boolean z0;

        r0 := @this: android.widget.RadialTimePickerView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.widget.RadialTimePickerView: void showPicker(boolean,boolean)>(0, z0);

        return;
    }
}
