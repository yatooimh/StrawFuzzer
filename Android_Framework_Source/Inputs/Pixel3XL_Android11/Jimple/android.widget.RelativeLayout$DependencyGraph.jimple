class android.widget.RelativeLayout$DependencyGraph extends java.lang.Object
{
    private android.util.SparseArray mKeyNodes;
    private java.util.ArrayList mNodes;
    private java.util.ArrayDeque mRoots;

    private void <init>()
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        java.util.ArrayList $r1;
        android.util.SparseArray $r2;
        java.util.ArrayDeque $r3;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayList mNodes> = $r1;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray mKeyNodes> = $r2;

        $r3 = new java.util.ArrayDeque;

        specialinvoke $r3.<java.util.ArrayDeque: void <init>()>();

        r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayDeque mRoots> = $r3;

        return;
    }

    void <init>(android.widget.RelativeLayout$1)
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        android.widget.RelativeLayout$1 r1;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        r1 := @parameter0: android.widget.RelativeLayout$1;

        specialinvoke r0.<android.widget.RelativeLayout$DependencyGraph: void <init>()>();

        return;
    }

    static android.util.SparseArray access$500(android.widget.RelativeLayout$DependencyGraph)
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: android.widget.RelativeLayout$DependencyGraph;

        $r1 = r0.<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray mKeyNodes>;

        return $r1;
    }

    private java.util.ArrayDeque findRoots(int[])
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        java.util.ArrayList r1;
        int i0, i1, i2, $i3, $i4, i5, i6, i7, i8;
        int[] r2, r17;
        android.widget.RelativeLayout$DependencyGraph$Node r3, r19, r20, r22;
        java.lang.Object $r4, $r6, $r10, $r14;
        android.util.SparseArray $r5, $r13, $r16, r18;
        android.view.View $r7;
        android.view.ViewGroup$LayoutParams $r8;
        android.widget.RelativeLayout$LayoutParams $r9;
        android.util.ArrayMap $r11, $r15;
        boolean $z0;
        java.util.ArrayDeque r21;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        r17 := @parameter0: int[];

        r18 = r0.<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray mKeyNodes>;

        r1 = r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayList mNodes>;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i5 = 0;

     label01:
        if i5 >= i0 goto label02;

        $r14 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r19 = (android.widget.RelativeLayout$DependencyGraph$Node) $r14;

        $r15 = r19.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.ArrayMap dependents>;

        virtualinvoke $r15.<android.util.ArrayMap: void clear()>();

        $r16 = r19.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.SparseArray dependencies>;

        virtualinvoke $r16.<android.util.SparseArray: void clear()>();

        i5 = i5 + 1;

        goto label01;

     label02:
        i6 = 0;

     label03:
        if i6 >= i0 goto label09;

        $r6 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i6);

        r20 = (android.widget.RelativeLayout$DependencyGraph$Node) $r6;

        $r7 = r20.<android.widget.RelativeLayout$DependencyGraph$Node: android.view.View view>;

        $r8 = virtualinvoke $r7.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r9 = (android.widget.RelativeLayout$LayoutParams) $r8;

        r2 = staticinvoke <android.widget.RelativeLayout$LayoutParams: int[] access$700(android.widget.RelativeLayout$LayoutParams)>($r9);

        i1 = lengthof r17;

        i7 = 0;

     label04:
        if i7 >= i1 goto label08;

        $i4 = r17[i7];

        i2 = r2[$i4];

        if i2 > 0 goto label05;

        $z0 = staticinvoke <android.content.res.ResourceId: boolean isValid(int)>(i2);

        if $z0 == 0 goto label07;

     label05:
        $r10 = virtualinvoke r18.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r3 = (android.widget.RelativeLayout$DependencyGraph$Node) $r10;

        if r3 == null goto label07;

        if r3 != r20 goto label06;

        goto label07;

     label06:
        $r11 = r3.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.ArrayMap dependents>;

        virtualinvoke $r11.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r20, r0);

        $r13 = r20.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.SparseArray dependencies>;

        virtualinvoke $r13.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r3);

     label07:
        i7 = i7 + 1;

        goto label04;

     label08:
        i6 = i6 + 1;

        goto label03;

     label09:
        r21 = r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayDeque mRoots>;

        virtualinvoke r21.<java.util.ArrayDeque: void clear()>();

        i8 = 0;

     label10:
        if i8 >= i0 goto label12;

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        r22 = (android.widget.RelativeLayout$DependencyGraph$Node) $r4;

        $r5 = r22.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.SparseArray dependencies>;

        $i3 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

        if $i3 != 0 goto label11;

        virtualinvoke r21.<java.util.ArrayDeque: void addLast(java.lang.Object)>(r22);

     label11:
        i8 = i8 + 1;

        goto label10;

     label12:
        return r21;
    }

    void add(android.view.View)
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        int i0;
        java.util.ArrayList $r1;
        android.util.SparseArray $r2;
        android.view.View r3;
        android.widget.RelativeLayout$DependencyGraph$Node r4;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        r3 := @parameter0: android.view.View;

        i0 = virtualinvoke r3.<android.view.View: int getId()>();

        r4 = staticinvoke <android.widget.RelativeLayout$DependencyGraph$Node: android.widget.RelativeLayout$DependencyGraph$Node acquire(android.view.View)>(r3);

        if i0 == -1 goto label1;

        $r2 = r0.<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray mKeyNodes>;

        virtualinvoke $r2.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r4);

     label1:
        $r1 = r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayList mNodes>;

        virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        return;
    }

    void clear()
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        java.util.ArrayList r1;
        int i0, i1;
        android.util.SparseArray $r2;
        java.util.ArrayDeque $r3;
        java.lang.Object $r4;
        android.widget.RelativeLayout$DependencyGraph$Node $r5;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        r1 = r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayList mNodes>;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r5 = (android.widget.RelativeLayout$DependencyGraph$Node) $r4;

        virtualinvoke $r5.<android.widget.RelativeLayout$DependencyGraph$Node: void release()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray mKeyNodes>;

        virtualinvoke $r2.<android.util.SparseArray: void clear()>();

        $r3 = r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayDeque mRoots>;

        virtualinvoke $r3.<java.util.ArrayDeque: void clear()>();

        return;
    }

    transient void getSortedViews(android.view.View[], int[])
    {
        android.widget.RelativeLayout$DependencyGraph r0;
        android.view.View[] r1;
        int i0, i1, $i2, $i3, i4, i5;
        android.util.SparseArray r2;
        java.lang.Object $r3, $r5;
        java.lang.IllegalStateException $r4;
        int[] r6;
        java.util.ArrayDeque r7;
        android.widget.RelativeLayout$DependencyGraph$Node r8, r11;
        android.view.View r9;
        android.util.ArrayMap r10;

        r0 := @this: android.widget.RelativeLayout$DependencyGraph;

        r1 := @parameter0: android.view.View[];

        r6 := @parameter1: int[];

        r7 = specialinvoke r0.<android.widget.RelativeLayout$DependencyGraph: java.util.ArrayDeque findRoots(int[])>(r6);

        i4 = 0;

     label1:
        $r3 = virtualinvoke r7.<java.util.ArrayDeque: java.lang.Object pollLast()>();

        r8 = (android.widget.RelativeLayout$DependencyGraph$Node) $r3;

        if r8 == null goto label5;

        r9 = r8.<android.widget.RelativeLayout$DependencyGraph$Node: android.view.View view>;

        i0 = virtualinvoke r9.<android.view.View: int getId()>();

        r1[i4] = r9;

        r10 = r8.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.ArrayMap dependents>;

        i1 = virtualinvoke r10.<android.util.ArrayMap: int size()>();

        i5 = 0;

     label2:
        if i5 >= i1 goto label4;

        $r5 = virtualinvoke r10.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i5);

        r11 = (android.widget.RelativeLayout$DependencyGraph$Node) $r5;

        r2 = r11.<android.widget.RelativeLayout$DependencyGraph$Node: android.util.SparseArray dependencies>;

        virtualinvoke r2.<android.util.SparseArray: void remove(int)>(i0);

        $i3 = virtualinvoke r2.<android.util.SparseArray: int size()>();

        if $i3 != 0 goto label3;

        virtualinvoke r7.<java.util.ArrayDeque: boolean add(java.lang.Object)>(r11);

     label3:
        i5 = i5 + 1;

        goto label2;

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        $i2 = lengthof r1;

        if i4 < $i2 goto label6;

        return;

     label6:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Circular dependencies cannot exist in RelativeLayout");

        throw $r4;
    }
}
