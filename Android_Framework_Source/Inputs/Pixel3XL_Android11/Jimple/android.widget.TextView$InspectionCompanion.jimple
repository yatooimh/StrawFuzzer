public final class android.widget.TextView$InspectionCompanion extends java.lang.Object implements android.view.inspector.InspectionCompanion
{
    private int mAutoLinkId;
    private int mAutoSizeMaxTextSizeId;
    private int mAutoSizeMinTextSizeId;
    private int mAutoSizeStepGranularityId;
    private int mAutoSizeTextTypeId;
    private int mBreakStrategyId;
    private int mCursorVisibleId;
    private int mDrawableBlendModeId;
    private int mDrawablePaddingId;
    private int mDrawableTintId;
    private int mDrawableTintModeId;
    private int mElegantTextHeightId;
    private int mEllipsizeId;
    private int mFallbackLineSpacingId;
    private int mFirstBaselineToTopHeightId;
    private int mFontFeatureSettingsId;
    private int mFreezesTextId;
    private int mGravityId;
    private int mHintId;
    private int mHyphenationFrequencyId;
    private int mImeActionIdId;
    private int mImeActionLabelId;
    private int mImeOptionsId;
    private int mIncludeFontPaddingId;
    private int mInputTypeId;
    private int mJustificationModeId;
    private int mLastBaselineToBottomHeightId;
    private int mLetterSpacingId;
    private int mLineHeightId;
    private int mLineSpacingExtraId;
    private int mLineSpacingMultiplierId;
    private int mLinksClickableId;
    private int mMarqueeRepeatLimitId;
    private int mMaxEmsId;
    private int mMaxHeightId;
    private int mMaxLinesId;
    private int mMaxWidthId;
    private int mMinEmsId;
    private int mMinLinesId;
    private int mMinWidthId;
    private int mPrivateImeOptionsId;
    private boolean mPropertiesMapped;
    private int mScrollHorizontallyId;
    private int mShadowColorId;
    private int mShadowDxId;
    private int mShadowDyId;
    private int mShadowRadiusId;
    private int mSingleLineId;
    private int mTextAllCapsId;
    private int mTextColorHighlightId;
    private int mTextColorHintId;
    private int mTextColorId;
    private int mTextColorLinkId;
    private int mTextId;
    private int mTextIsSelectableId;
    private int mTextScaleXId;
    private int mTextSizeId;
    private int mTypefaceId;

    public void <init>()
    {
        android.widget.TextView$InspectionCompanion r0;

        r0 := @this: android.widget.TextView$InspectionCompanion;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<android.widget.TextView$InspectionCompanion: boolean mPropertiesMapped> = 0;

        return;
    }

    public void mapProperties(android.view.inspector.PropertyMapper)
    {
        android.widget.TextView$InspectionCompanion r0;
        android.view.inspector.PropertyMapper r1;
        android.view.inspector.IntFlagMapping $r2, $r14, $r17;
        android.widget._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY $r4, $r16, $r19;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56;
        android.util.SparseArray $r5, $r8, $r11, $r20;
        android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI $r7, $r10, $r13, $r22;

        r0 := @this: android.widget.TextView$InspectionCompanion;

        r1 := @parameter0: android.view.inspector.PropertyMapper;

        $r2 = new android.view.inspector.IntFlagMapping;

        specialinvoke $r2.<android.view.inspector.IntFlagMapping: void <init>()>();

        virtualinvoke $r2.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(2, 2, "email");

        virtualinvoke $r2.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(8, 8, "map");

        virtualinvoke $r2.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4, 4, "phone");

        virtualinvoke $r2.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(1, 1, "web");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r2);

        $r4 = new android.widget._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY;

        specialinvoke $r4.<android.widget._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY: void <init>(android.view.inspector.IntFlagMapping)>($r2);

        $i0 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntFlag(java.lang.String,int,java.util.function.IntFunction)>("autoLink", 16842928, $r4);

        r0.<android.widget.TextView$InspectionCompanion: int mAutoLinkId> = $i0;

        $i1 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("autoSizeMaxTextSize", 16844102);

        r0.<android.widget.TextView$InspectionCompanion: int mAutoSizeMaxTextSizeId> = $i1;

        $i2 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("autoSizeMinTextSize", 16844088);

        r0.<android.widget.TextView$InspectionCompanion: int mAutoSizeMinTextSizeId> = $i2;

        $i3 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("autoSizeStepGranularity", 16844086);

        r0.<android.widget.TextView$InspectionCompanion: int mAutoSizeStepGranularityId> = $i3;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "none");

        virtualinvoke $r5.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "uniform");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r5);

        $r7 = new android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r7.<android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r5);

        $i4 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("autoSizeTextType", 16844085, $r7);

        r0.<android.widget.TextView$InspectionCompanion: int mAutoSizeTextTypeId> = $i4;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "simple");

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "high_quality");

        virtualinvoke $r8.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "balanced");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r8);

        $r10 = new android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r10.<android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r8);

        $i5 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("breakStrategy", 16843997, $r10);

        r0.<android.widget.TextView$InspectionCompanion: int mBreakStrategyId> = $i5;

        $i6 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("cursorVisible", 16843090);

        r0.<android.widget.TextView$InspectionCompanion: int mCursorVisibleId> = $i6;

        $i7 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("drawableBlendMode", 80);

        r0.<android.widget.TextView$InspectionCompanion: int mDrawableBlendModeId> = $i7;

        $i8 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("drawablePadding", 16843121);

        r0.<android.widget.TextView$InspectionCompanion: int mDrawablePaddingId> = $i8;

        $i9 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("drawableTint", 16843990);

        r0.<android.widget.TextView$InspectionCompanion: int mDrawableTintId> = $i9;

        $i10 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("drawableTintMode", 16843991);

        r0.<android.widget.TextView$InspectionCompanion: int mDrawableTintModeId> = $i10;

        $i11 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("elegantTextHeight", 16843869);

        r0.<android.widget.TextView$InspectionCompanion: int mElegantTextHeightId> = $i11;

        $i12 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("ellipsize", 16842923);

        r0.<android.widget.TextView$InspectionCompanion: int mEllipsizeId> = $i12;

        $i13 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("fallbackLineSpacing", 16844155);

        r0.<android.widget.TextView$InspectionCompanion: int mFallbackLineSpacingId> = $i13;

        $i14 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("firstBaselineToTopHeight", 16844157);

        r0.<android.widget.TextView$InspectionCompanion: int mFirstBaselineToTopHeightId> = $i14;

        $i15 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("fontFeatureSettings", 16843959);

        r0.<android.widget.TextView$InspectionCompanion: int mFontFeatureSettingsId> = $i15;

        $i16 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("freezesText", 16843116);

        r0.<android.widget.TextView$InspectionCompanion: int mFreezesTextId> = $i16;

        $i17 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapGravity(java.lang.String,int)>("gravity", 16842927);

        r0.<android.widget.TextView$InspectionCompanion: int mGravityId> = $i17;

        $i18 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("hint", 16843088);

        r0.<android.widget.TextView$InspectionCompanion: int mHintId> = $i18;

        $r11 = new android.util.SparseArray;

        specialinvoke $r11.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "none");

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "normal");

        virtualinvoke $r11.<android.util.SparseArray: void put(int,java.lang.Object)>(2, "full");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r11);

        $r13 = new android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r13.<android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r11);

        $i19 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("hyphenationFrequency", 16843998, $r13);

        r0.<android.widget.TextView$InspectionCompanion: int mHyphenationFrequencyId> = $i19;

        $i20 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("imeActionId", 16843366);

        r0.<android.widget.TextView$InspectionCompanion: int mImeActionIdId> = $i20;

        $i21 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("imeActionLabel", 16843365);

        r0.<android.widget.TextView$InspectionCompanion: int mImeActionLabelId> = $i21;

        $r14 = new android.view.inspector.IntFlagMapping;

        specialinvoke $r14.<android.view.inspector.IntFlagMapping: void <init>()>();

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(255, 6, "actionDone");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(255, 2, "actionGo");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(255, 5, "actionNext");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(255, 1, "actionNone");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(255, 7, "actionPrevious");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(255, 3, "actionSearch");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(255, 4, "actionSend");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(255, 0, "actionUnspecified");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(-2147483648, -2147483648, "flagForceAscii");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(134217728, 134217728, "flagNavigateNext");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(67108864, 67108864, "flagNavigatePrevious");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(536870912, 536870912, "flagNoAccessoryAction");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(1073741824, 1073741824, "flagNoEnterAction");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(268435456, 268435456, "flagNoExtractUi");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(33554432, 33554432, "flagNoFullscreen");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16777216, 16777216, "flagNoPersonalizedLearning");

        virtualinvoke $r14.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(-1, 0, "normal");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r14);

        $r16 = new android.widget._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY;

        specialinvoke $r16.<android.widget._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY: void <init>(android.view.inspector.IntFlagMapping)>($r14);

        $i22 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntFlag(java.lang.String,int,java.util.function.IntFunction)>("imeOptions", 16843364, $r16);

        r0.<android.widget.TextView$InspectionCompanion: int mImeOptionsId> = $i22;

        $i23 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("includeFontPadding", 16843103);

        r0.<android.widget.TextView$InspectionCompanion: int mIncludeFontPaddingId> = $i23;

        $r17 = new android.view.inspector.IntFlagMapping;

        specialinvoke $r17.<android.view.inspector.IntFlagMapping: void <init>()>();

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 20, "date");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 4, "datetime");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(-1, 0, "none");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 2, "number");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16773135, 8194, "numberDecimal");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 18, "numberPassword");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16773135, 4098, "numberSigned");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 3, "phone");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 1, "text");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16773135, 65537, "textAutoComplete");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16773135, 32769, "textAutoCorrect");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16773135, 4097, "textCapCharacters");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16773135, 16385, "textCapSentences");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16773135, 8193, "textCapWords");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 33, "textEmailAddress");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 49, "textEmailSubject");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 177, "textFilter");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16773135, 262145, "textImeMultiLine");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 81, "textLongMessage");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16773135, 131073, "textMultiLine");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(16773135, 524289, "textNoSuggestions");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 129, "textPassword");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 97, "textPersonName");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 193, "textPhonetic");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 113, "textPostalAddress");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 65, "textShortMessage");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 17, "textUri");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 145, "textVisiblePassword");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 161, "textWebEditText");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 209, "textWebEmailAddress");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 225, "textWebPassword");

        virtualinvoke $r17.<android.view.inspector.IntFlagMapping: void add(int,int,java.lang.String)>(4095, 36, "time");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r17);

        $r19 = new android.widget._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY;

        specialinvoke $r19.<android.widget._$$Lambda$gFNlJIKfxqleu304aRWP5R5v1yY: void <init>(android.view.inspector.IntFlagMapping)>($r17);

        $i24 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntFlag(java.lang.String,int,java.util.function.IntFunction)>("inputType", 16843296, $r19);

        r0.<android.widget.TextView$InspectionCompanion: int mInputTypeId> = $i24;

        $r20 = new android.util.SparseArray;

        specialinvoke $r20.<android.util.SparseArray: void <init>()>();

        virtualinvoke $r20.<android.util.SparseArray: void put(int,java.lang.Object)>(0, "none");

        virtualinvoke $r20.<android.util.SparseArray: void put(int,java.lang.Object)>(1, "inter_word");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r20);

        $r22 = new android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI;

        specialinvoke $r22.<android.widget._$$Lambda$QY3N4tzLteuFdjRnyJFCbR1ajSI: void <init>(android.util.SparseArray)>($r20);

        $i25 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapIntEnum(java.lang.String,int,java.util.function.IntFunction)>("justificationMode", 16844135, $r22);

        r0.<android.widget.TextView$InspectionCompanion: int mJustificationModeId> = $i25;

        $i26 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("lastBaselineToBottomHeight", 16844158);

        r0.<android.widget.TextView$InspectionCompanion: int mLastBaselineToBottomHeightId> = $i26;

        $i27 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("letterSpacing", 16843958);

        r0.<android.widget.TextView$InspectionCompanion: int mLetterSpacingId> = $i27;

        $i28 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("lineHeight", 16844159);

        r0.<android.widget.TextView$InspectionCompanion: int mLineHeightId> = $i28;

        $i29 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("lineSpacingExtra", 16843287);

        r0.<android.widget.TextView$InspectionCompanion: int mLineSpacingExtraId> = $i29;

        $i30 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("lineSpacingMultiplier", 16843288);

        r0.<android.widget.TextView$InspectionCompanion: int mLineSpacingMultiplierId> = $i30;

        $i31 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("linksClickable", 16842929);

        r0.<android.widget.TextView$InspectionCompanion: int mLinksClickableId> = $i31;

        $i32 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("marqueeRepeatLimit", 16843293);

        r0.<android.widget.TextView$InspectionCompanion: int mMarqueeRepeatLimitId> = $i32;

        $i33 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("maxEms", 16843095);

        r0.<android.widget.TextView$InspectionCompanion: int mMaxEmsId> = $i33;

        $i34 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("maxHeight", 16843040);

        r0.<android.widget.TextView$InspectionCompanion: int mMaxHeightId> = $i34;

        $i35 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("maxLines", 16843091);

        r0.<android.widget.TextView$InspectionCompanion: int mMaxLinesId> = $i35;

        $i36 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("maxWidth", 16843039);

        r0.<android.widget.TextView$InspectionCompanion: int mMaxWidthId> = $i36;

        $i37 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("minEms", 16843098);

        r0.<android.widget.TextView$InspectionCompanion: int mMinEmsId> = $i37;

        $i38 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("minLines", 16843094);

        r0.<android.widget.TextView$InspectionCompanion: int mMinLinesId> = $i38;

        $i39 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapInt(java.lang.String,int)>("minWidth", 16843071);

        r0.<android.widget.TextView$InspectionCompanion: int mMinWidthId> = $i39;

        $i40 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("privateImeOptions", 16843299);

        r0.<android.widget.TextView$InspectionCompanion: int mPrivateImeOptionsId> = $i40;

        $i41 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("scrollHorizontally", 16843099);

        r0.<android.widget.TextView$InspectionCompanion: int mScrollHorizontallyId> = $i41;

        $i42 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapColor(java.lang.String,int)>("shadowColor", 16843105);

        r0.<android.widget.TextView$InspectionCompanion: int mShadowColorId> = $i42;

        $i43 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("shadowDx", 16843106);

        r0.<android.widget.TextView$InspectionCompanion: int mShadowDxId> = $i43;

        $i44 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("shadowDy", 16843107);

        r0.<android.widget.TextView$InspectionCompanion: int mShadowDyId> = $i44;

        $i45 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("shadowRadius", 16843108);

        r0.<android.widget.TextView$InspectionCompanion: int mShadowRadiusId> = $i45;

        $i46 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("singleLine", 16843101);

        r0.<android.widget.TextView$InspectionCompanion: int mSingleLineId> = $i46;

        $i47 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("text", 16843087);

        r0.<android.widget.TextView$InspectionCompanion: int mTextId> = $i47;

        $i48 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("textAllCaps", 16843660);

        r0.<android.widget.TextView$InspectionCompanion: int mTextAllCapsId> = $i48;

        $i49 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("textColor", 16842904);

        r0.<android.widget.TextView$InspectionCompanion: int mTextColorId> = $i49;

        $i50 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapColor(java.lang.String,int)>("textColorHighlight", 16842905);

        r0.<android.widget.TextView$InspectionCompanion: int mTextColorHighlightId> = $i50;

        $i51 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("textColorHint", 16842906);

        r0.<android.widget.TextView$InspectionCompanion: int mTextColorHintId> = $i51;

        $i52 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("textColorLink", 16842907);

        r0.<android.widget.TextView$InspectionCompanion: int mTextColorLinkId> = $i52;

        $i53 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapBoolean(java.lang.String,int)>("textIsSelectable", 16843542);

        r0.<android.widget.TextView$InspectionCompanion: int mTextIsSelectableId> = $i53;

        $i54 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("textScaleX", 16843089);

        r0.<android.widget.TextView$InspectionCompanion: int mTextScaleXId> = $i54;

        $i55 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapFloat(java.lang.String,int)>("textSize", 16842901);

        r0.<android.widget.TextView$InspectionCompanion: int mTextSizeId> = $i55;

        $i56 = interfaceinvoke r1.<android.view.inspector.PropertyMapper: int mapObject(java.lang.String,int)>("typeface", 16842902);

        r0.<android.widget.TextView$InspectionCompanion: int mTypefaceId> = $i56;

        r0.<android.widget.TextView$InspectionCompanion: boolean mPropertiesMapped> = 1;

        return;
    }

    public void readProperties(android.widget.TextView, android.view.inspector.PropertyReader)
    {
        android.widget.TextView$InspectionCompanion r0;
        android.widget.TextView r1;
        android.view.inspector.PropertyReader r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        android.view.inspector.InspectionCompanion$UninitializedPropertyMapException $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $i78, $i79, $i80, $i81, $i82;
        android.graphics.BlendMode $r4;
        android.content.res.ColorStateList $r5, $r13, $r14, $r15;
        android.graphics.PorterDuff$Mode $r6;
        android.text.TextUtils$TruncateAt $r7;
        java.lang.String $r8, $r11;
        java.lang.CharSequence $r9, $r10, $r12;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        android.graphics.Typeface $r16;

        r0 := @this: android.widget.TextView$InspectionCompanion;

        r1 := @parameter0: android.widget.TextView;

        r2 := @parameter1: android.view.inspector.PropertyReader;

        $z0 = r0.<android.widget.TextView$InspectionCompanion: boolean mPropertiesMapped>;

        if $z0 == 0 goto label1;

        $i0 = r0.<android.widget.TextView$InspectionCompanion: int mAutoLinkId>;

        $i1 = virtualinvoke r1.<android.widget.TextView: int getAutoLinkMask()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntFlag(int,int)>($i0, $i1);

        $i2 = r0.<android.widget.TextView$InspectionCompanion: int mAutoSizeMaxTextSizeId>;

        $i3 = virtualinvoke r1.<android.widget.TextView: int getAutoSizeMaxTextSize()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i2, $i3);

        $i4 = r0.<android.widget.TextView$InspectionCompanion: int mAutoSizeMinTextSizeId>;

        $i5 = virtualinvoke r1.<android.widget.TextView: int getAutoSizeMinTextSize()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i4, $i5);

        $i6 = r0.<android.widget.TextView$InspectionCompanion: int mAutoSizeStepGranularityId>;

        $i7 = virtualinvoke r1.<android.widget.TextView: int getAutoSizeStepGranularity()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i6, $i7);

        $i8 = r0.<android.widget.TextView$InspectionCompanion: int mAutoSizeTextTypeId>;

        $i9 = virtualinvoke r1.<android.widget.TextView: int getAutoSizeTextType()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i8, $i9);

        $i10 = r0.<android.widget.TextView$InspectionCompanion: int mBreakStrategyId>;

        $i11 = virtualinvoke r1.<android.widget.TextView: int getBreakStrategy()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i10, $i11);

        $i12 = r0.<android.widget.TextView$InspectionCompanion: int mCursorVisibleId>;

        $z1 = virtualinvoke r1.<android.widget.TextView: boolean isCursorVisible()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i12, $z1);

        $i13 = r0.<android.widget.TextView$InspectionCompanion: int mDrawableBlendModeId>;

        $r4 = virtualinvoke r1.<android.widget.TextView: android.graphics.BlendMode getCompoundDrawableTintBlendMode()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i13, $r4);

        $i14 = r0.<android.widget.TextView$InspectionCompanion: int mDrawablePaddingId>;

        $i15 = virtualinvoke r1.<android.widget.TextView: int getCompoundDrawablePadding()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i14, $i15);

        $i16 = r0.<android.widget.TextView$InspectionCompanion: int mDrawableTintId>;

        $r5 = virtualinvoke r1.<android.widget.TextView: android.content.res.ColorStateList getCompoundDrawableTintList()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i16, $r5);

        $i17 = r0.<android.widget.TextView$InspectionCompanion: int mDrawableTintModeId>;

        $r6 = virtualinvoke r1.<android.widget.TextView: android.graphics.PorterDuff$Mode getCompoundDrawableTintMode()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i17, $r6);

        $i18 = r0.<android.widget.TextView$InspectionCompanion: int mElegantTextHeightId>;

        $z2 = virtualinvoke r1.<android.widget.TextView: boolean isElegantTextHeight()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i18, $z2);

        $i19 = r0.<android.widget.TextView$InspectionCompanion: int mEllipsizeId>;

        $r7 = virtualinvoke r1.<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i19, $r7);

        $i20 = r0.<android.widget.TextView$InspectionCompanion: int mFallbackLineSpacingId>;

        $z3 = virtualinvoke r1.<android.widget.TextView: boolean isFallbackLineSpacing()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i20, $z3);

        $i21 = r0.<android.widget.TextView$InspectionCompanion: int mFirstBaselineToTopHeightId>;

        $i22 = virtualinvoke r1.<android.widget.TextView: int getFirstBaselineToTopHeight()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i21, $i22);

        $i23 = r0.<android.widget.TextView$InspectionCompanion: int mFontFeatureSettingsId>;

        $r8 = virtualinvoke r1.<android.widget.TextView: java.lang.String getFontFeatureSettings()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i23, $r8);

        $i24 = r0.<android.widget.TextView$InspectionCompanion: int mFreezesTextId>;

        $z4 = virtualinvoke r1.<android.widget.TextView: boolean getFreezesText()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i24, $z4);

        $i25 = r0.<android.widget.TextView$InspectionCompanion: int mGravityId>;

        $i26 = virtualinvoke r1.<android.widget.TextView: int getGravity()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readGravity(int,int)>($i25, $i26);

        $i27 = r0.<android.widget.TextView$InspectionCompanion: int mHintId>;

        $r9 = virtualinvoke r1.<android.widget.TextView: java.lang.CharSequence getHint()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i27, $r9);

        $i28 = r0.<android.widget.TextView$InspectionCompanion: int mHyphenationFrequencyId>;

        $i29 = virtualinvoke r1.<android.widget.TextView: int getHyphenationFrequency()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i28, $i29);

        $i30 = r0.<android.widget.TextView$InspectionCompanion: int mImeActionIdId>;

        $i31 = virtualinvoke r1.<android.widget.TextView: int getImeActionId()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i30, $i31);

        $i32 = r0.<android.widget.TextView$InspectionCompanion: int mImeActionLabelId>;

        $r10 = virtualinvoke r1.<android.widget.TextView: java.lang.CharSequence getImeActionLabel()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i32, $r10);

        $i33 = r0.<android.widget.TextView$InspectionCompanion: int mImeOptionsId>;

        $i34 = virtualinvoke r1.<android.widget.TextView: int getImeOptions()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntFlag(int,int)>($i33, $i34);

        $i35 = r0.<android.widget.TextView$InspectionCompanion: int mIncludeFontPaddingId>;

        $z5 = virtualinvoke r1.<android.widget.TextView: boolean getIncludeFontPadding()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i35, $z5);

        $i36 = r0.<android.widget.TextView$InspectionCompanion: int mInputTypeId>;

        $i37 = virtualinvoke r1.<android.widget.TextView: int getInputType()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntFlag(int,int)>($i36, $i37);

        $i38 = r0.<android.widget.TextView$InspectionCompanion: int mJustificationModeId>;

        $i39 = virtualinvoke r1.<android.widget.TextView: int getJustificationMode()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readIntEnum(int,int)>($i38, $i39);

        $i40 = r0.<android.widget.TextView$InspectionCompanion: int mLastBaselineToBottomHeightId>;

        $i41 = virtualinvoke r1.<android.widget.TextView: int getLastBaselineToBottomHeight()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i40, $i41);

        $i42 = r0.<android.widget.TextView$InspectionCompanion: int mLetterSpacingId>;

        $f0 = virtualinvoke r1.<android.widget.TextView: float getLetterSpacing()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i42, $f0);

        $i43 = r0.<android.widget.TextView$InspectionCompanion: int mLineHeightId>;

        $i44 = virtualinvoke r1.<android.widget.TextView: int getLineHeight()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i43, $i44);

        $i45 = r0.<android.widget.TextView$InspectionCompanion: int mLineSpacingExtraId>;

        $f1 = virtualinvoke r1.<android.widget.TextView: float getLineSpacingExtra()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i45, $f1);

        $i46 = r0.<android.widget.TextView$InspectionCompanion: int mLineSpacingMultiplierId>;

        $f2 = virtualinvoke r1.<android.widget.TextView: float getLineSpacingMultiplier()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i46, $f2);

        $i47 = r0.<android.widget.TextView$InspectionCompanion: int mLinksClickableId>;

        $z6 = virtualinvoke r1.<android.widget.TextView: boolean getLinksClickable()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i47, $z6);

        $i48 = r0.<android.widget.TextView$InspectionCompanion: int mMarqueeRepeatLimitId>;

        $i49 = virtualinvoke r1.<android.widget.TextView: int getMarqueeRepeatLimit()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i48, $i49);

        $i50 = r0.<android.widget.TextView$InspectionCompanion: int mMaxEmsId>;

        $i51 = virtualinvoke r1.<android.widget.TextView: int getMaxEms()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i50, $i51);

        $i52 = r0.<android.widget.TextView$InspectionCompanion: int mMaxHeightId>;

        $i53 = virtualinvoke r1.<android.widget.TextView: int getMaxHeight()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i52, $i53);

        $i54 = r0.<android.widget.TextView$InspectionCompanion: int mMaxLinesId>;

        $i55 = virtualinvoke r1.<android.widget.TextView: int getMaxLines()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i54, $i55);

        $i56 = r0.<android.widget.TextView$InspectionCompanion: int mMaxWidthId>;

        $i57 = virtualinvoke r1.<android.widget.TextView: int getMaxWidth()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i56, $i57);

        $i58 = r0.<android.widget.TextView$InspectionCompanion: int mMinEmsId>;

        $i59 = virtualinvoke r1.<android.widget.TextView: int getMinEms()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i58, $i59);

        $i60 = r0.<android.widget.TextView$InspectionCompanion: int mMinLinesId>;

        $i61 = virtualinvoke r1.<android.widget.TextView: int getMinLines()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i60, $i61);

        $i62 = r0.<android.widget.TextView$InspectionCompanion: int mMinWidthId>;

        $i63 = virtualinvoke r1.<android.widget.TextView: int getMinWidth()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readInt(int,int)>($i62, $i63);

        $i64 = r0.<android.widget.TextView$InspectionCompanion: int mPrivateImeOptionsId>;

        $r11 = virtualinvoke r1.<android.widget.TextView: java.lang.String getPrivateImeOptions()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i64, $r11);

        $i65 = r0.<android.widget.TextView$InspectionCompanion: int mScrollHorizontallyId>;

        $z7 = virtualinvoke r1.<android.widget.TextView: boolean isHorizontallyScrollable()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i65, $z7);

        $i66 = r0.<android.widget.TextView$InspectionCompanion: int mShadowColorId>;

        $i67 = virtualinvoke r1.<android.widget.TextView: int getShadowColor()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readColor(int,int)>($i66, $i67);

        $i68 = r0.<android.widget.TextView$InspectionCompanion: int mShadowDxId>;

        $f3 = virtualinvoke r1.<android.widget.TextView: float getShadowDx()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i68, $f3);

        $i69 = r0.<android.widget.TextView$InspectionCompanion: int mShadowDyId>;

        $f4 = virtualinvoke r1.<android.widget.TextView: float getShadowDy()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i69, $f4);

        $i70 = r0.<android.widget.TextView$InspectionCompanion: int mShadowRadiusId>;

        $f5 = virtualinvoke r1.<android.widget.TextView: float getShadowRadius()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i70, $f5);

        $i71 = r0.<android.widget.TextView$InspectionCompanion: int mSingleLineId>;

        $z8 = virtualinvoke r1.<android.widget.TextView: boolean isSingleLine()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i71, $z8);

        $i72 = r0.<android.widget.TextView$InspectionCompanion: int mTextId>;

        $r12 = virtualinvoke r1.<android.widget.TextView: java.lang.CharSequence getText()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i72, $r12);

        $i73 = r0.<android.widget.TextView$InspectionCompanion: int mTextAllCapsId>;

        $z9 = virtualinvoke r1.<android.widget.TextView: boolean isAllCaps()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i73, $z9);

        $i74 = r0.<android.widget.TextView$InspectionCompanion: int mTextColorId>;

        $r13 = virtualinvoke r1.<android.widget.TextView: android.content.res.ColorStateList getTextColors()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i74, $r13);

        $i75 = r0.<android.widget.TextView$InspectionCompanion: int mTextColorHighlightId>;

        $i76 = virtualinvoke r1.<android.widget.TextView: int getHighlightColor()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readColor(int,int)>($i75, $i76);

        $i77 = r0.<android.widget.TextView$InspectionCompanion: int mTextColorHintId>;

        $r14 = virtualinvoke r1.<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i77, $r14);

        $i78 = r0.<android.widget.TextView$InspectionCompanion: int mTextColorLinkId>;

        $r15 = virtualinvoke r1.<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i78, $r15);

        $i79 = r0.<android.widget.TextView$InspectionCompanion: int mTextIsSelectableId>;

        $z10 = virtualinvoke r1.<android.widget.TextView: boolean isTextSelectable()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readBoolean(int,boolean)>($i79, $z10);

        $i80 = r0.<android.widget.TextView$InspectionCompanion: int mTextScaleXId>;

        $f6 = virtualinvoke r1.<android.widget.TextView: float getTextScaleX()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i80, $f6);

        $i81 = r0.<android.widget.TextView$InspectionCompanion: int mTextSizeId>;

        $f7 = virtualinvoke r1.<android.widget.TextView: float getTextSize()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readFloat(int,float)>($i81, $f7);

        $i82 = r0.<android.widget.TextView$InspectionCompanion: int mTypefaceId>;

        $r16 = virtualinvoke r1.<android.widget.TextView: android.graphics.Typeface getTypeface()>();

        interfaceinvoke r2.<android.view.inspector.PropertyReader: void readObject(int,java.lang.Object)>($i82, $r16);

        return;

     label1:
        $r3 = new android.view.inspector.InspectionCompanion$UninitializedPropertyMapException;

        specialinvoke $r3.<android.view.inspector.InspectionCompanion$UninitializedPropertyMapException: void <init>()>();

        throw $r3;
    }

    public volatile void readProperties(java.lang.Object, android.view.inspector.PropertyReader)
    {
        android.widget.TextView$InspectionCompanion r0;
        java.lang.Object r1;
        android.view.inspector.PropertyReader r2;
        android.widget.TextView $r3;

        r0 := @this: android.widget.TextView$InspectionCompanion;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: android.view.inspector.PropertyReader;

        $r3 = (android.widget.TextView) r1;

        virtualinvoke r0.<android.widget.TextView$InspectionCompanion: void readProperties(android.widget.TextView,android.view.inspector.PropertyReader)>($r3, r2);

        return;
    }
}
