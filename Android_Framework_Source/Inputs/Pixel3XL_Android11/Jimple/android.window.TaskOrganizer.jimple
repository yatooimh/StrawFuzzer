public class android.window.TaskOrganizer extends android.window.WindowOrganizer
{
    private static final android.util.Singleton ITaskOrganizerControllerSingleton;
    private final android.window.ITaskOrganizer mInterface;

    static void <clinit>()
    {
        android.window.TaskOrganizer$2 $r0;

        $r0 = new android.window.TaskOrganizer$2;

        specialinvoke $r0.<android.window.TaskOrganizer$2: void <init>()>();

        <android.window.TaskOrganizer: android.util.Singleton ITaskOrganizerControllerSingleton> = $r0;

        return;
    }

    public void <init>()
    {
        android.window.TaskOrganizer r0;
        android.window.TaskOrganizer$1 $r1;

        r0 := @this: android.window.TaskOrganizer;

        specialinvoke r0.<android.window.WindowOrganizer: void <init>()>();

        $r1 = new android.window.TaskOrganizer$1;

        specialinvoke $r1.<android.window.TaskOrganizer$1: void <init>(android.window.TaskOrganizer)>(r0);

        r0.<android.window.TaskOrganizer: android.window.ITaskOrganizer mInterface> = $r1;

        return;
    }

    public static android.app.ActivityManager$RunningTaskInfo createRootTask(int, int)
    {
        int i0, i1;
        android.window.ITaskOrganizerController $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.app.ActivityManager$RunningTaskInfo r3;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r0 = staticinvoke <android.window.TaskOrganizer: android.window.ITaskOrganizerController getController()>();

        r3 = interfaceinvoke $r0.<android.window.ITaskOrganizerController: android.app.ActivityManager$RunningTaskInfo createRootTask(int,int)>(i0, i1);

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean deleteRootTask(android.window.WindowContainerToken)
    {
        boolean z0;
        android.window.ITaskOrganizerController $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.window.WindowContainerToken r3;

        r3 := @parameter0: android.window.WindowContainerToken;

     label1:
        $r0 = staticinvoke <android.window.TaskOrganizer: android.window.ITaskOrganizerController getController()>();

        z0 = interfaceinvoke $r0.<android.window.ITaskOrganizerController: boolean deleteRootTask(android.window.WindowContainerToken)>(r3);

     label2:
        return z0;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static java.util.List getChildTasks(android.window.WindowContainerToken, int[])
    {
        int[] r0;
        android.window.ITaskOrganizerController $r1;
        android.os.RemoteException $r2;
        java.lang.RuntimeException $r3;
        android.window.WindowContainerToken r4;
        java.util.List r5;

        r4 := @parameter0: android.window.WindowContainerToken;

        r0 := @parameter1: int[];

     label1:
        $r1 = staticinvoke <android.window.TaskOrganizer: android.window.ITaskOrganizerController getController()>();

        r5 = interfaceinvoke $r1.<android.window.ITaskOrganizerController: java.util.List getChildTasks(android.window.WindowContainerToken,int[])>(r4, r0);

     label2:
        return r5;

     label3:
        $r2 := @caughtexception;

        $r3 = virtualinvoke $r2.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private static android.window.ITaskOrganizerController getController()
    {
        android.util.Singleton $r0;
        java.lang.Object $r1;
        android.window.ITaskOrganizerController $r2;

        $r0 = <android.window.TaskOrganizer: android.util.Singleton ITaskOrganizerControllerSingleton>;

        $r1 = virtualinvoke $r0.<android.util.Singleton: java.lang.Object get()>();

        $r2 = (android.window.ITaskOrganizerController) $r1;

        return $r2;
    }

    public static android.window.WindowContainerToken getImeTarget(int)
    {
        int i0;
        android.window.ITaskOrganizerController $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.window.WindowContainerToken r3;

        i0 := @parameter0: int;

     label1:
        $r0 = staticinvoke <android.window.TaskOrganizer: android.window.ITaskOrganizerController getController()>();

        r3 = interfaceinvoke $r0.<android.window.ITaskOrganizerController: android.window.WindowContainerToken getImeTarget(int)>(i0);

     label2:
        return r3;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static java.util.List getRootTasks(int, int[])
    {
        int i0;
        android.window.ITaskOrganizerController $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        int[] r3;
        java.util.List r4;

        i0 := @parameter0: int;

        r3 := @parameter1: int[];

     label1:
        $r0 = staticinvoke <android.window.TaskOrganizer: android.window.ITaskOrganizerController getController()>();

        r4 = interfaceinvoke $r0.<android.window.ITaskOrganizerController: java.util.List getRootTasks(int,int[])>(i0, r3);

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void setLaunchRoot(int, android.window.WindowContainerToken)
    {
        int i0;
        android.window.ITaskOrganizerController $r0;
        android.os.RemoteException $r1;
        java.lang.RuntimeException $r2;
        android.window.WindowContainerToken r3;

        i0 := @parameter0: int;

        r3 := @parameter1: android.window.WindowContainerToken;

     label1:
        $r0 = staticinvoke <android.window.TaskOrganizer: android.window.ITaskOrganizerController getController()>();

        interfaceinvoke $r0.<android.window.ITaskOrganizerController: void setLaunchRoot(int,android.window.WindowContainerToken)>(i0, r3);

     label2:
        return;

     label3:
        $r1 := @caughtexception;

        $r2 = virtualinvoke $r1.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onBackPressedOnTaskRoot(android.app.ActivityManager$RunningTaskInfo)
    {
        android.window.TaskOrganizer r0;
        android.app.ActivityManager$RunningTaskInfo r1;

        r0 := @this: android.window.TaskOrganizer;

        r1 := @parameter0: android.app.ActivityManager$RunningTaskInfo;

        return;
    }

    public void onTaskAppeared(android.app.ActivityManager$RunningTaskInfo, android.view.SurfaceControl)
    {
        android.window.TaskOrganizer r0;
        android.app.ActivityManager$RunningTaskInfo r1;
        android.view.SurfaceControl r2;

        r0 := @this: android.window.TaskOrganizer;

        r1 := @parameter0: android.app.ActivityManager$RunningTaskInfo;

        r2 := @parameter1: android.view.SurfaceControl;

        return;
    }

    public void onTaskInfoChanged(android.app.ActivityManager$RunningTaskInfo)
    {
        android.window.TaskOrganizer r0;
        android.app.ActivityManager$RunningTaskInfo r1;

        r0 := @this: android.window.TaskOrganizer;

        r1 := @parameter0: android.app.ActivityManager$RunningTaskInfo;

        return;
    }

    public void onTaskVanished(android.app.ActivityManager$RunningTaskInfo)
    {
        android.window.TaskOrganizer r0;
        android.app.ActivityManager$RunningTaskInfo r1;

        r0 := @this: android.window.TaskOrganizer;

        r1 := @parameter0: android.app.ActivityManager$RunningTaskInfo;

        return;
    }

    public final void registerOrganizer(int)
    {
        android.window.TaskOrganizer r0;
        int i0;
        android.window.ITaskOrganizerController $r2;
        android.window.ITaskOrganizer $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.window.TaskOrganizer;

        i0 := @parameter0: int;

     label1:
        $r2 = staticinvoke <android.window.TaskOrganizer: android.window.ITaskOrganizerController getController()>();

        $r3 = r0.<android.window.TaskOrganizer: android.window.ITaskOrganizer mInterface>;

        interfaceinvoke $r2.<android.window.ITaskOrganizerController: void registerTaskOrganizer(android.window.ITaskOrganizer,int)>($r3, i0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setInterceptBackPressedOnTaskRoot(boolean)
    {
        android.window.TaskOrganizer r0;
        boolean z0;
        android.window.ITaskOrganizerController $r2;
        android.window.ITaskOrganizer $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.window.TaskOrganizer;

        z0 := @parameter0: boolean;

     label1:
        $r2 = staticinvoke <android.window.TaskOrganizer: android.window.ITaskOrganizerController getController()>();

        $r3 = r0.<android.window.TaskOrganizer: android.window.ITaskOrganizer mInterface>;

        interfaceinvoke $r2.<android.window.ITaskOrganizerController: void setInterceptBackPressedOnTaskRoot(android.window.ITaskOrganizer,boolean)>($r3, z0);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public final void unregisterOrganizer()
    {
        android.window.TaskOrganizer r0;
        android.window.ITaskOrganizerController $r2;
        android.window.ITaskOrganizer $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: android.window.TaskOrganizer;

     label1:
        $r2 = staticinvoke <android.window.TaskOrganizer: android.window.ITaskOrganizerController getController()>();

        $r3 = r0.<android.window.TaskOrganizer: android.window.ITaskOrganizer mInterface>;

        interfaceinvoke $r2.<android.window.ITaskOrganizerController: void unregisterTaskOrganizer(android.window.ITaskOrganizer)>($r3);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = virtualinvoke $r4.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }
}
