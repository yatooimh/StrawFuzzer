public final class com.android.commands.dpm.Dpm extends com.android.internal.os.BaseCommand
{
    private static final java.lang.String COMMAND_CLEAR_FREEZE_PERIOD_RECORD;
    private static final java.lang.String COMMAND_FORCE_NETWORK_LOGS;
    private static final java.lang.String COMMAND_FORCE_SECURITY_LOGS;
    private static final java.lang.String COMMAND_MARK_PO_ON_ORG_OWNED_DEVICE;
    private static final java.lang.String COMMAND_REMOVE_ACTIVE_ADMIN;
    private static final java.lang.String COMMAND_SET_ACTIVE_ADMIN;
    private static final java.lang.String COMMAND_SET_DEVICE_OWNER;
    private static final java.lang.String COMMAND_SET_PROFILE_OWNER;
    private android.content.ComponentName mComponent;
    private android.app.admin.IDevicePolicyManager mDevicePolicyManager;
    private java.lang.String mName;
    private int mUserId;

    public void <init>()
    {
        com.android.commands.dpm.Dpm r0;

        r0 := @this: com.android.commands.dpm.Dpm;

        specialinvoke r0.<com.android.internal.os.BaseCommand: void <init>()>();

        r0.<com.android.commands.dpm.Dpm: int mUserId> = 0;

        r0.<com.android.commands.dpm.Dpm: java.lang.String mName> = "";

        r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent> = null;

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        com.android.commands.dpm.Dpm $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new com.android.commands.dpm.Dpm;

        specialinvoke $r1.<com.android.commands.dpm.Dpm: void <init>()>();

        virtualinvoke $r1.<com.android.commands.dpm.Dpm: void run(java.lang.String[])>(r0);

        return;
    }

    private void parseArgs(boolean)
    {
        com.android.commands.dpm.Dpm r0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.String r1, $r2, $r4, $r9, $r10, $r11, $r12, $r14, r17;
        android.content.ComponentName $r3;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r8;
        android.content.pm.UserInfo $r13;
        int $i0, $i1, $i2;
        android.os.RemoteException $r15;
        android.app.IActivityManager r18;

        r0 := @this: com.android.commands.dpm.Dpm;

        z0 := @parameter0: boolean;

     label01:
        r1 = virtualinvoke r0.<com.android.commands.dpm.Dpm: java.lang.String nextOption()>();

        if r1 == null goto label11;

        $r4 = "--user";

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label09;

        r17 = virtualinvoke r0.<com.android.commands.dpm.Dpm: java.lang.String nextArgRequired()>();

        $r12 = "current";

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r17);

        if $z3 != 0 goto label03;

        $r14 = "cur";

        $z4 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r17);

        if $z4 == 0 goto label02;

        goto label03;

     label02:
        $i1 = specialinvoke r0.<com.android.commands.dpm.Dpm: int parseInt(java.lang.String)>(r17);

        r0.<com.android.commands.dpm.Dpm: int mUserId> = $i1;

        goto label04;

     label03:
        r0.<com.android.commands.dpm.Dpm: int mUserId> = -2;

     label04:
        $i2 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        if $i2 != -2 goto label08;

        r18 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label05:
        $r13 = interfaceinvoke r18.<android.app.IActivityManager: android.content.pm.UserInfo getCurrentUser()>();

        $i0 = $r13.<android.content.pm.UserInfo: int id>;

        r0.<com.android.commands.dpm.Dpm: int mUserId> = $i0;

     label06:
        goto label08;

     label07:
        $r15 := @caughtexception;

        virtualinvoke $r15.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label08:
        goto label01;

     label09:
        if z0 == 0 goto label10;

        $r10 = "--name";

        $z2 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label10;

        $r11 = virtualinvoke r0.<com.android.commands.dpm.Dpm: java.lang.String nextArgRequired()>();

        r0.<com.android.commands.dpm.Dpm: java.lang.String mName> = $r11;

        goto label01;

     label10:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown option: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label11:
        $r2 = virtualinvoke r0.<com.android.commands.dpm.Dpm: java.lang.String nextArgRequired()>();

        $r3 = specialinvoke r0.<com.android.commands.dpm.Dpm: android.content.ComponentName parseComponentName(java.lang.String)>($r2);

        r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent> = $r3;

        return;

        catch android.os.RemoteException from label05 to label06 with label07;
    }

    private android.content.ComponentName parseComponentName(java.lang.String)
    {
        com.android.commands.dpm.Dpm r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        android.content.ComponentName r7;

        r0 := @this: com.android.commands.dpm.Dpm;

        r1 := @parameter0: java.lang.String;

        r7 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r1);

        if r7 == null goto label1;

        return r7;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid component ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private int parseInt(java.lang.String)
    {
        com.android.commands.dpm.Dpm r0;
        java.lang.String r1, $r10;
        int i0;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r9;

        r0 := @this: com.android.commands.dpm.Dpm;

        r1 := @parameter0: java.lang.String;

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid integer argument \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4);

        throw $r9;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private void runClearFreezePeriodRecord() throws android.os.RemoteException
    {
        com.android.commands.dpm.Dpm r0;
        android.app.admin.IDevicePolicyManager $r1;
        java.io.PrintStream $r2;

        r0 := @this: com.android.commands.dpm.Dpm;

        $r1 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        interfaceinvoke $r1.<android.app.admin.IDevicePolicyManager: void clearSystemUpdatePolicyFreezePeriodRecord()>();

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Success");

        return;
    }

    private void runForceNetworkLogs() throws android.os.RemoteException, java.lang.InterruptedException
    {
        com.android.commands.dpm.Dpm r0;
        long l0;
        java.io.PrintStream r1, $r9;
        android.app.admin.IDevicePolicyManager $r3;
        byte $b1;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;

        r0 := @this: com.android.commands.dpm.Dpm;

     label1:
        $r3 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        l0 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: long forceNetworkLogs()>();

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label2;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Success");

        return;

     label2:
        r1 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("We have to wait for ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" milliseconds...");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r8);

        staticinvoke <java.lang.Thread: void sleep(long)>(l0);

        goto label1;
    }

    private void runForceSecurityLogs() throws android.os.RemoteException, java.lang.InterruptedException
    {
        com.android.commands.dpm.Dpm r0;
        long l0;
        java.io.PrintStream r1, $r9;
        android.app.admin.IDevicePolicyManager $r3;
        byte $b1;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;

        r0 := @this: com.android.commands.dpm.Dpm;

     label1:
        $r3 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        l0 = interfaceinvoke $r3.<android.app.admin.IDevicePolicyManager: long forceSecurityLogs()>();

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label2;

        $r9 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Success");

        return;

     label2:
        r1 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("We have to wait for ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" milliseconds...");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r8);

        staticinvoke <java.lang.Thread: void sleep(long)>(l0);

        goto label1;
    }

    private void runMarkProfileOwnerOnOrganizationOwnedDevice() throws android.os.RemoteException
    {
        com.android.commands.dpm.Dpm r0;
        int $i0;
        android.content.ComponentName $r1;
        android.app.admin.IDevicePolicyManager $r2;
        java.io.PrintStream $r3;

        r0 := @this: com.android.commands.dpm.Dpm;

        specialinvoke r0.<com.android.commands.dpm.Dpm: void parseArgs(boolean)>(0);

        $r2 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $r1 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $i0 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void markProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName,int)>($r1, $i0);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Success");

        return;
    }

    private void runRemoveActiveAdmin() throws android.os.RemoteException
    {
        com.android.commands.dpm.Dpm r0;
        java.io.PrintStream r1;
        int $i0;
        android.content.ComponentName $r3, $r7;
        android.app.admin.IDevicePolicyManager $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r9;

        r0 := @this: com.android.commands.dpm.Dpm;

        specialinvoke r0.<com.android.commands.dpm.Dpm: void parseArgs(boolean)>(0);

        $r4 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $r3 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $i0 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void forceRemoveActiveAdmin(android.content.ComponentName,int)>($r3, $i0);

        r1 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success: Admin removed ");

        $r7 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r9);

        return;
    }

    private void runSetActiveAdmin() throws android.os.RemoteException
    {
        com.android.commands.dpm.Dpm r0;
        java.io.PrintStream r1;
        int $i0;
        android.content.ComponentName $r3, $r7;
        android.app.admin.IDevicePolicyManager $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, $r10;

        r0 := @this: com.android.commands.dpm.Dpm;

        specialinvoke r0.<com.android.commands.dpm.Dpm: void parseArgs(boolean)>(0);

        $r4 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $r3 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $i0 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        interfaceinvoke $r4.<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>($r3, 1, $i0);

        r1 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success: Active admin set to component ");

        $r7 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $r8 = virtualinvoke $r7.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r10);

        return;
    }

    private void runSetDeviceOwner() throws android.os.RemoteException
    {
        com.android.commands.dpm.Dpm r0;
        boolean z0;
        int $i0, $i1, $i2;
        android.content.ComponentName $r1, $r4, $r7, $r14, $r19, $r24;
        android.app.admin.IDevicePolicyManager $r2, $r5, $r11, $r25;
        java.lang.String $r3, $r10, $r16, $r20, $r22;
        java.lang.StringBuilder $r12, $r17, r31;
        java.lang.Exception $r23;
        java.io.PrintStream r26, r28;
        java.lang.RuntimeException r30;

        r0 := @this: com.android.commands.dpm.Dpm;

        specialinvoke r0.<com.android.commands.dpm.Dpm: void parseArgs(boolean)>(1);

        $r2 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $r1 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $i0 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>($r1, 1, $i0);

     label1:
        $r5 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $r4 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $r3 = r0.<com.android.commands.dpm.Dpm: java.lang.String mName>;

        $i1 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean setDeviceOwner(android.content.ComponentName,java.lang.String,int)>($r4, $r3, $i1);

     label2:
        if z0 == 0 goto label3;

        $r11 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $i2 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        interfaceinvoke $r11.<android.app.admin.IDevicePolicyManager: void setUserProvisioningState(int,int)>(3, $i2);

        r26 = <java.lang.System: java.io.PrintStream out>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success: Device owner set to package ");

        $r14 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r26.<java.io.PrintStream: void println(java.lang.String)>($r16);

        r28 = <java.lang.System: java.io.PrintStream out>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Active admin set to component ");

        $r19 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $r20 = virtualinvoke $r19.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r28.<java.io.PrintStream: void println(java.lang.String)>($r22);

        return;

     label3:
        r30 = new java.lang.RuntimeException;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t set package ");

        $r7 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as device owner.");

        $r10 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r30.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw r30;

     label4:
        $r23 := @caughtexception;

        $r25 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $r24 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        interfaceinvoke $r25.<android.app.admin.IDevicePolicyManager: void removeActiveAdmin(android.content.ComponentName,int)>($r24, 0);

        throw $r23;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label3 to label4 with label4;
    }

    private void runSetProfileOwner() throws android.os.RemoteException
    {
        com.android.commands.dpm.Dpm r0;
        boolean z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.content.ComponentName $r1, $r4, $r7, $r16, $r23;
        android.app.admin.IDevicePolicyManager $r2, $r5, $r13, $r24;
        java.lang.String $r3, $r8, $r12, $r17, $r21;
        java.lang.StringBuilder $r14, r28;
        java.lang.Exception $r22;
        java.io.PrintStream r25;
        java.lang.RuntimeException r27;

        r0 := @this: com.android.commands.dpm.Dpm;

        specialinvoke r0.<com.android.commands.dpm.Dpm: void parseArgs(boolean)>(1);

        $r2 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $r1 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $i0 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        interfaceinvoke $r2.<android.app.admin.IDevicePolicyManager: void setActiveAdmin(android.content.ComponentName,boolean,int)>($r1, 1, $i0);

     label1:
        $r5 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $r4 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $r3 = r0.<com.android.commands.dpm.Dpm: java.lang.String mName>;

        $i1 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        z0 = interfaceinvoke $r5.<android.app.admin.IDevicePolicyManager: boolean setProfileOwner(android.content.ComponentName,java.lang.String,int)>($r4, $r3, $i1);

     label2:
        if z0 == 0 goto label3;

        $r13 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $i3 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        interfaceinvoke $r13.<android.app.admin.IDevicePolicyManager: void setUserProvisioningState(int,int)>(3, $i3);

        r25 = <java.lang.System: java.io.PrintStream out>;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success: Active admin and profile owner set to ");

        $r16 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $r17 = virtualinvoke $r16.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        $i4 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r21 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r25.<java.io.PrintStream: void println(java.lang.String)>($r21);

        return;

     label3:
        r27 = new java.lang.RuntimeException;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t set component ");

        $r7 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $r8 = virtualinvoke $r7.<android.content.ComponentName: java.lang.String toShortString()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as profile owner for user ");

        $i2 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r12 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r27.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12);

        throw r27;

     label4:
        $r22 := @caughtexception;

        $r24 = r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager>;

        $r23 = r0.<com.android.commands.dpm.Dpm: android.content.ComponentName mComponent>;

        $i5 = r0.<com.android.commands.dpm.Dpm: int mUserId>;

        interfaceinvoke $r24.<android.app.admin.IDevicePolicyManager: void removeActiveAdmin(android.content.ComponentName,int)>($r23, $i5);

        throw $r22;

        catch java.lang.Exception from label1 to label2 with label4;
        catch java.lang.Exception from label3 to label4 with label4;
    }

    public void onRun() throws java.lang.Exception
    {
        com.android.commands.dpm.Dpm r0;
        java.lang.String r1, $r8;
        android.os.IBinder $r2;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r7;
        android.app.admin.IDevicePolicyManager r9;
        byte b1;

        r0 := @this: com.android.commands.dpm.Dpm;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("device_policy");

        r9 = staticinvoke <android.app.admin.IDevicePolicyManager$Stub: android.app.admin.IDevicePolicyManager asInterface(android.os.IBinder)>($r2);

        r0.<com.android.commands.dpm.Dpm: android.app.admin.IDevicePolicyManager mDevicePolicyManager> = r9;

        if r9 != null goto label01;

        virtualinvoke r0.<com.android.commands.dpm.Dpm: void showError(java.lang.String)>("Error: Could not access the Device Policy Manager. Is the system running?");

        return;

     label01:
        r1 = virtualinvoke r0.<com.android.commands.dpm.Dpm: java.lang.String nextArgRequired()>();

        b1 = -1;

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -2077120112: goto label10;
            case -1791908857: goto label09;
            case -776610703: goto label08;
            case -536624985: goto label07;
            case 547934547: goto label06;
            case 639813476: goto label05;
            case 1325530298: goto label04;
            case 1509758184: goto label03;
            default: goto label02;
        };

     label02:
        goto label11;

     label03:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("mark-profile-owner-on-organization-owned-device");

        if $z0 == 0 goto label02;

        b1 = 7;

        goto label11;

     label04:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("force-security-logs");

        if $z1 == 0 goto label02;

        b1 = 6;

        goto label11;

     label05:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("set-profile-owner");

        if $z2 == 0 goto label02;

        b1 = 2;

        goto label11;

     label06:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("set-active-admin");

        if $z3 == 0 goto label02;

        b1 = 0;

        goto label11;

     label07:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("clear-freeze-period-record");

        if $z4 == 0 goto label02;

        b1 = 4;

        goto label11;

     label08:
        $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("remove-active-admin");

        if $z5 == 0 goto label02;

        b1 = 3;

        goto label11;

     label09:
        $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("set-device-owner");

        if $z6 == 0 goto label02;

        b1 = 1;

        goto label11;

     label10:
        $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("force-network-logs");

        if $z7 == 0 goto label02;

        b1 = 5;

     label11:
        tableswitch(b1)
        {
            case 0: goto label20;
            case 1: goto label19;
            case 2: goto label18;
            case 3: goto label17;
            case 4: goto label16;
            case 5: goto label15;
            case 6: goto label14;
            case 7: goto label13;
            default: goto label12;
        };

     label12:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown command \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label13:
        specialinvoke r0.<com.android.commands.dpm.Dpm: void runMarkProfileOwnerOnOrganizationOwnedDevice()>();

        goto label21;

     label14:
        specialinvoke r0.<com.android.commands.dpm.Dpm: void runForceSecurityLogs()>();

        goto label21;

     label15:
        specialinvoke r0.<com.android.commands.dpm.Dpm: void runForceNetworkLogs()>();

        goto label21;

     label16:
        specialinvoke r0.<com.android.commands.dpm.Dpm: void runClearFreezePeriodRecord()>();

        goto label21;

     label17:
        specialinvoke r0.<com.android.commands.dpm.Dpm: void runRemoveActiveAdmin()>();

        goto label21;

     label18:
        specialinvoke r0.<com.android.commands.dpm.Dpm: void runSetProfileOwner()>();

        goto label21;

     label19:
        specialinvoke r0.<com.android.commands.dpm.Dpm: void runSetDeviceOwner()>();

        goto label21;

     label20:
        specialinvoke r0.<com.android.commands.dpm.Dpm: void runSetActiveAdmin()>();

     label21:
        return;
    }

    public void onShowUsage(java.io.PrintStream)
    {
        com.android.commands.dpm.Dpm r0;
        java.io.PrintStream r1;

        r0 := @this: com.android.commands.dpm.Dpm;

        r1 := @parameter0: java.io.PrintStream;

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("usage: dpm [subcommand] [options]\nusage: dpm set-active-admin [ --user <USER_ID> | current ] <COMPONENT>\nusage: dpm set-device-owner [ --user <USER_ID> | current *EXPERIMENTAL* ] [ --name <NAME> ] <COMPONENT>\nusage: dpm set-profile-owner [ --user <USER_ID> | current ] [ --name <NAME> ] <COMPONENT>\nusage: dpm remove-active-admin [ --user <USER_ID> | current ] [ --name <NAME> ] <COMPONENT>\n\ndpm set-active-admin: Sets the given component as active admin for an existing user.\n\ndpm set-device-owner: Sets the given component as active admin, and its package as device owner.\n\ndpm set-profile-owner: Sets the given component as active admin and profile owner for an existing user.\n\ndpm remove-active-admin: Disables an active admin, the admin must have declared android:testOnly in the application in its manifest. This will also remove device and profile owners.\n\ndpm clear-freeze-period-record: clears framework-maintained record of past freeze periods that the device went through. For use during feature development to prevent triggering restriction on setting freeze periods.\n\ndpm force-network-logs: makes all network logs available to the DPC and triggers DeviceAdminReceiver.onNetworkLogsAvailable() if needed.\n\ndpm force-security-logs: makes all security logs available to the DPC and triggers DeviceAdminReceiver.onSecurityLogsAvailable() if needed.\nusage: dpm mark-profile-owner-on-organization-owned-device: [ --user <USER_ID> | current ] <COMPONENT>\n");

        return;
    }

    public static void <clinit>()
    {
        <com.android.commands.dpm.Dpm: java.lang.String COMMAND_SET_PROFILE_OWNER> = "set-profile-owner";

        <com.android.commands.dpm.Dpm: java.lang.String COMMAND_SET_DEVICE_OWNER> = "set-device-owner";

        <com.android.commands.dpm.Dpm: java.lang.String COMMAND_SET_ACTIVE_ADMIN> = "set-active-admin";

        <com.android.commands.dpm.Dpm: java.lang.String COMMAND_REMOVE_ACTIVE_ADMIN> = "remove-active-admin";

        <com.android.commands.dpm.Dpm: java.lang.String COMMAND_MARK_PO_ON_ORG_OWNED_DEVICE> = "mark-profile-owner-on-organization-owned-device";

        <com.android.commands.dpm.Dpm: java.lang.String COMMAND_FORCE_SECURITY_LOGS> = "force-security-logs";

        <com.android.commands.dpm.Dpm: java.lang.String COMMAND_FORCE_NETWORK_LOGS> = "force-network-logs";

        <com.android.commands.dpm.Dpm: java.lang.String COMMAND_CLEAR_FREEZE_PERIOD_RECORD> = "clear-freeze-period-record";

        return;
    }
}
