public class com.android.commands.hid.Device extends java.lang.Object
{
    private static final int MSG_CLOSE_DEVICE;
    private static final int MSG_OPEN_DEVICE;
    private static final int MSG_SEND_GET_FEATURE_REPORT_REPLY;
    private static final int MSG_SEND_REPORT;
    private static final java.lang.String TAG;
    private final java.lang.Object mCond;
    private final android.util.SparseArray mFeatureReports;
    private final com.android.commands.hid.Device$DeviceHandler mHandler;
    private final int mId;
    private final java.util.Map mOutputs;
    private final android.os.HandlerThread mThread;
    private long mTimeToSend;

    static void <clinit>()
    {
        <com.android.commands.hid.Device: java.lang.String TAG> = "HidDevice";

        <com.android.commands.hid.Device: int MSG_SEND_REPORT> = 2;

        <com.android.commands.hid.Device: int MSG_SEND_GET_FEATURE_REPORT_REPLY> = 3;

        <com.android.commands.hid.Device: int MSG_OPEN_DEVICE> = 1;

        <com.android.commands.hid.Device: int MSG_CLOSE_DEVICE> = 4;

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("hidcommand_jni");

        return;
    }

    public void <init>(int, java.lang.String, int, int, int, byte[], byte[], android.util.SparseArray, java.util.Map)
    {
        com.android.commands.hid.Device r0;
        int i0, i1, i2, i3;
        byte[] r1, r2;
        java.util.Map r3;
        java.lang.Object $r5;
        android.os.HandlerThread $r6, $r8;
        com.android.commands.hid.Device$DeviceHandler $r7, $r17;
        android.os.Looper $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r16, r19;
        android.os.Message $r18;
        long $l4;
        android.util.SparseArray r20;
        com.android.internal.os.SomeArgs r21;

        r0 := @this: com.android.commands.hid.Device;

        i0 := @parameter0: int;

        r19 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: byte[];

        r2 := @parameter6: byte[];

        r20 := @parameter7: android.util.SparseArray;

        r3 := @parameter8: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.commands.hid.Device: java.lang.Object mCond> = $r5;

        r0.<com.android.commands.hid.Device: int mId> = i0;

        $r6 = new android.os.HandlerThread;

        specialinvoke $r6.<android.os.HandlerThread: void <init>(java.lang.String)>("HidDeviceHandler");

        r0.<com.android.commands.hid.Device: android.os.HandlerThread mThread> = $r6;

        virtualinvoke $r6.<android.os.HandlerThread: void start()>();

        $r7 = new com.android.commands.hid.Device$DeviceHandler;

        $r8 = r0.<com.android.commands.hid.Device: android.os.HandlerThread mThread>;

        $r9 = virtualinvoke $r8.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r7.<com.android.commands.hid.Device$DeviceHandler: void <init>(com.android.commands.hid.Device,android.os.Looper)>(r0, $r9);

        r0.<com.android.commands.hid.Device: com.android.commands.hid.Device$DeviceHandler mHandler> = $r7;

        r0.<com.android.commands.hid.Device: android.util.SparseArray mFeatureReports> = r20;

        r0.<com.android.commands.hid.Device: java.util.Map mOutputs> = r3;

        r21 = staticinvoke <com.android.internal.os.SomeArgs: com.android.internal.os.SomeArgs obtain()>();

        r21.<com.android.internal.os.SomeArgs: int argi1> = i0;

        r21.<com.android.internal.os.SomeArgs: int argi2> = i1;

        r21.<com.android.internal.os.SomeArgs: int argi3> = i2;

        r21.<com.android.internal.os.SomeArgs: int argi4> = i3;

        if r19 == null goto label1;

        r21.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = r19;

        goto label2;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r16 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r21.<com.android.internal.os.SomeArgs: java.lang.Object arg1> = $r16;

     label2:
        r21.<com.android.internal.os.SomeArgs: java.lang.Object arg2> = r1;

        r21.<com.android.internal.os.SomeArgs: java.lang.Object arg3> = r2;

        $r17 = r0.<com.android.commands.hid.Device: com.android.commands.hid.Device$DeviceHandler mHandler>;

        $r18 = virtualinvoke $r17.<com.android.commands.hid.Device$DeviceHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r21);

        virtualinvoke $r18.<android.os.Message: void sendToTarget()>();

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r0.<com.android.commands.hid.Device: long mTimeToSend> = $l4;

        return;
    }

    static long access$100(java.lang.String, int, int, int, int, byte[], com.android.commands.hid.Device$DeviceCallback)
    {
        java.lang.String r0;
        int i0, i1, i2, i3;
        byte[] r1;
        com.android.commands.hid.Device$DeviceCallback r2;
        long $l4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: byte[];

        r2 := @parameter6: com.android.commands.hid.Device$DeviceCallback;

        $l4 = staticinvoke <com.android.commands.hid.Device: long nativeOpenDevice(java.lang.String,int,int,int,int,byte[],com.android.commands.hid.Device$DeviceCallback)>(r0, i0, i1, i2, i3, r1, r2);

        return $l4;
    }

    static void access$200(long, byte[])
    {
        long l0;
        byte[] r0;

        l0 := @parameter0: long;

        r0 := @parameter1: byte[];

        staticinvoke <com.android.commands.hid.Device: void nativeSendReport(long,byte[])>(l0, r0);

        return;
    }

    static void access$300(long, int, byte[])
    {
        long l0;
        int i1;
        byte[] r0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r0 := @parameter2: byte[];

        staticinvoke <com.android.commands.hid.Device: void nativeSendGetFeatureReportReply(long,int,byte[])>(l0, i1, r0);

        return;
    }

    static void access$400(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <com.android.commands.hid.Device: void nativeCloseDevice(long)>(l0);

        return;
    }

    static java.lang.Object access$500(com.android.commands.hid.Device)
    {
        com.android.commands.hid.Device r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.commands.hid.Device;

        $r1 = r0.<com.android.commands.hid.Device: java.lang.Object mCond>;

        return $r1;
    }

    static com.android.commands.hid.Device$DeviceHandler access$600(com.android.commands.hid.Device)
    {
        com.android.commands.hid.Device r0;
        com.android.commands.hid.Device$DeviceHandler $r1;

        r0 := @parameter0: com.android.commands.hid.Device;

        $r1 = r0.<com.android.commands.hid.Device: com.android.commands.hid.Device$DeviceHandler mHandler>;

        return $r1;
    }

    static android.util.SparseArray access$700(com.android.commands.hid.Device)
    {
        com.android.commands.hid.Device r0;
        android.util.SparseArray $r1;

        r0 := @parameter0: com.android.commands.hid.Device;

        $r1 = r0.<com.android.commands.hid.Device: android.util.SparseArray mFeatureReports>;

        return $r1;
    }

    static long access$800(com.android.commands.hid.Device)
    {
        com.android.commands.hid.Device r0;
        long $l0;

        r0 := @parameter0: com.android.commands.hid.Device;

        $l0 = r0.<com.android.commands.hid.Device: long mTimeToSend>;

        return $l0;
    }

    static java.util.Map access$900(com.android.commands.hid.Device)
    {
        com.android.commands.hid.Device r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.commands.hid.Device;

        $r1 = r0.<com.android.commands.hid.Device: java.util.Map mOutputs>;

        return $r1;
    }

    private static native void nativeCloseDevice(long);

    private static native long nativeOpenDevice(java.lang.String, int, int, int, int, byte[], com.android.commands.hid.Device$DeviceCallback);

    private static native void nativeSendGetFeatureReportReply(long, int, byte[]);

    private static native void nativeSendReport(long, byte[]);

    public void addDelay(int)
    {
        com.android.commands.hid.Device r0;
        int i0;
        long $l1, $l2, $l3, $l4, $l5;

        r0 := @this: com.android.commands.hid.Device;

        i0 := @parameter0: int;

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = r0.<com.android.commands.hid.Device: long mTimeToSend>;

        $l3 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l2);

        $l4 = (long) i0;

        $l5 = $l3 + $l4;

        r0.<com.android.commands.hid.Device: long mTimeToSend> = $l5;

        return;
    }

    public void close()
    {
        com.android.commands.hid.Device r0;
        com.android.commands.hid.Device$DeviceHandler $r2, $r3;
        long $l0, $l1, $l2, $l3;
        java.lang.Object $r4, r8;
        java.lang.Throwable $r5, $r6;
        android.os.Message r7;

        r0 := @this: com.android.commands.hid.Device;

        $r2 = r0.<com.android.commands.hid.Device: com.android.commands.hid.Device$DeviceHandler mHandler>;

        r7 = virtualinvoke $r2.<com.android.commands.hid.Device$DeviceHandler: android.os.Message obtainMessage(int)>(4);

        $r3 = r0.<com.android.commands.hid.Device: com.android.commands.hid.Device$DeviceHandler mHandler>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = r0.<com.android.commands.hid.Device: long mTimeToSend>;

        $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l0, $l1);

        $l3 = $l2 + 1L;

        virtualinvoke $r3.<com.android.commands.hid.Device$DeviceHandler: boolean sendMessageAtTime(android.os.Message,long)>(r7, $l3);

     label1:
        r8 = r0.<com.android.commands.hid.Device: java.lang.Object mCond>;

        entermonitor r8;

     label2:
        $r4 = r0.<com.android.commands.hid.Device: java.lang.Object mCond>;

        virtualinvoke $r4.<java.lang.Object: void wait()>();

        exitmonitor r8;

     label3:
        goto label8;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r8;

     label6:
        throw $r5;

     label7:
        $r6 := @caughtexception;

     label8:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label7;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
        catch java.lang.InterruptedException from label6 to label7 with label7;
    }

    public void sendReport(byte[])
    {
        com.android.commands.hid.Device r0;
        com.android.commands.hid.Device$DeviceHandler $r1, $r2;
        long $l0;
        byte[] r3;
        android.os.Message r4;

        r0 := @this: com.android.commands.hid.Device;

        r3 := @parameter0: byte[];

        $r1 = r0.<com.android.commands.hid.Device: com.android.commands.hid.Device$DeviceHandler mHandler>;

        r4 = virtualinvoke $r1.<com.android.commands.hid.Device$DeviceHandler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r3);

        $r2 = r0.<com.android.commands.hid.Device: com.android.commands.hid.Device$DeviceHandler mHandler>;

        $l0 = r0.<com.android.commands.hid.Device: long mTimeToSend>;

        virtualinvoke $r2.<com.android.commands.hid.Device$DeviceHandler: boolean sendMessageAtTime(android.os.Message,long)>(r4, $l0);

        return;
    }
}
