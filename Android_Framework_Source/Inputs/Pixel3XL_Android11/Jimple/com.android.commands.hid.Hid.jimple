public class com.android.commands.hid.Hid extends java.lang.Object
{
    private static final java.lang.String TAG;
    private final android.util.SparseArray mDevices;
    private final com.android.commands.hid.Event$Reader mReader;

    private void <init>(java.io.InputStream)
    {
        com.android.commands.hid.Hid r0;
        com.android.commands.hid.Event$Reader r1;
        java.io.InputStreamReader r2;
        android.util.SparseArray $r3;
        java.lang.Throwable $r4;
        java.lang.RuntimeException $r5;
        java.io.InputStream r6;

        r0 := @this: com.android.commands.hid.Hid;

        r6 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.commands.hid.Hid: android.util.SparseArray mDevices> = $r3;

     label1:
        r1 = new com.android.commands.hid.Event$Reader;

        r2 = new java.io.InputStreamReader;

        specialinvoke r2.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r6, "UTF-8");

        specialinvoke r1.<com.android.commands.hid.Event$Reader: void <init>(java.io.InputStreamReader)>(r2);

        r0.<com.android.commands.hid.Hid: com.android.commands.hid.Event$Reader mReader> = r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4);

        throw $r5;

        catch java.io.UnsupportedEncodingException from label1 to label2 with label3;
    }

    private static void error(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.commands.hid.Hid: void error(java.lang.String,java.lang.Exception)>(r0, null);

        return;
    }

    private static void error(java.lang.String, java.lang.Exception)
    {
        java.lang.String r0, $r2;
        java.lang.Exception r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Exception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HID", r0);

        if r1 == null goto label1;

        $r2 = staticinvoke <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>(r1);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HID", $r2);

     label1:
        return;
    }

    public static void main(java.lang.String[])
    {
        int $i0;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Throwable $r4;
        java.lang.Exception $r5;
        java.lang.String[] r6;
        java.lang.Object r7, r8, r9;
        java.io.File r13;
        java.io.FileInputStream r14;
        com.android.commands.hid.Hid r15;
        java.io.InputStream r16;
        java.lang.AutoCloseable r17, r18;

        r6 := @parameter0: java.lang.String[];

        $i0 = lengthof r6;

        if $i0 == 1 goto label01;

        staticinvoke <com.android.commands.hid.Hid: void usage()>();

        staticinvoke <java.lang.System: void exit(int)>(1);

     label01:
        r7 = null;

        r8 = null;

     label02:
        $r1 = r6[0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z0 == 0 goto label06;

     label03:
        r7 = null;

        r8 = null;

     label04:
        r9 = <java.lang.System: java.io.InputStream in>;

     label05:
        goto label12;

     label06:
        r7 = null;

        r8 = null;

     label07:
        r13 = new java.io.File;

     label08:
        r7 = null;

        r8 = null;

     label09:
        $r2 = r6[0];

        specialinvoke r13.<java.io.File: void <init>(java.lang.String)>($r2);

     label10:
        r7 = null;

        r8 = null;

     label11:
        r14 = new java.io.FileInputStream;

        specialinvoke r14.<java.io.FileInputStream: void <init>(java.io.File)>(r13);

        r9 = r14;

     label12:
        r7 = r9;

        r8 = r9;

     label13:
        r15 = new com.android.commands.hid.Hid;

     label14:
        r7 = r9;

        r8 = r9;

     label15:
        r16 = (java.io.InputStream) r9;

        specialinvoke r15.<com.android.commands.hid.Hid: void <init>(java.io.InputStream)>(r16);

     label16:
        r7 = r9;

        r8 = r9;

     label17:
        specialinvoke r15.<com.android.commands.hid.Hid: void run()>();

     label18:
        goto label25;

     label19:
        $r4 := @caughtexception;

        goto label26;

     label20:
        $r5 := @caughtexception;

        r7 = r8;

     label21:
        staticinvoke <com.android.commands.hid.Hid: void error(java.lang.String,java.lang.Exception)>("HID injection failed.", $r5);

     label22:
        r7 = r8;

     label23:
        staticinvoke <java.lang.System: void exit(int)>(1);

     label24:
        r9 = r8;

     label25:
        r17 = (java.lang.AutoCloseable) r9;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r17);

        return;

     label26:
        r18 = (java.lang.AutoCloseable) r7;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r18);

        throw $r4;

        catch java.lang.Exception from label02 to label03 with label20;
        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Exception from label04 to label05 with label20;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Exception from label07 to label08 with label20;
        catch java.lang.Throwable from label07 to label08 with label19;
        catch java.lang.Exception from label09 to label10 with label20;
        catch java.lang.Throwable from label09 to label10 with label19;
        catch java.lang.Exception from label11 to label12 with label20;
        catch java.lang.Throwable from label11 to label12 with label19;
        catch java.lang.Exception from label13 to label14 with label20;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Exception from label15 to label16 with label20;
        catch java.lang.Throwable from label15 to label16 with label19;
        catch java.lang.Exception from label17 to label18 with label20;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label21 to label22 with label19;
        catch java.lang.Throwable from label23 to label24 with label19;
    }

    private void process(com.android.commands.hid.Event)
    {
        com.android.commands.hid.Hid r0;
        com.android.commands.hid.Event r1;
        int i0, $i1, $i3, $i4;
        android.util.SparseArray $r2, $r5;
        java.lang.String $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r12, $r15, $r18, $r23;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r6;
        java.lang.StringBuilder $r13, $r19;
        byte[] $r24;
        com.android.commands.hid.Device r25;

        r0 := @this: com.android.commands.hid.Hid;

        r1 := @parameter0: com.android.commands.hid.Event;

        $r2 = r0.<com.android.commands.hid.Hid: android.util.SparseArray mDevices>;

        $i1 = virtualinvoke r1.<com.android.commands.hid.Event: int getId()>();

        i0 = virtualinvoke $r2.<android.util.SparseArray: int indexOfKey(int)>($i1);

        if i0 < 0 goto label5;

        $r5 = r0.<com.android.commands.hid.Hid: android.util.SparseArray mDevices>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        r25 = (com.android.commands.hid.Device) $r6;

        $r7 = "delay";

        $r8 = virtualinvoke r1.<com.android.commands.hid.Event: java.lang.String getCommand()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label1;

        $i4 = virtualinvoke r1.<com.android.commands.hid.Event: int getDuration()>();

        virtualinvoke r25.<com.android.commands.hid.Device: void addDelay(int)>($i4);

        goto label4;

     label1:
        $r9 = "report";

        $r10 = virtualinvoke r1.<com.android.commands.hid.Event: java.lang.String getCommand()>();

        $z2 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>($r10);

        if $z2 == 0 goto label2;

        $r24 = virtualinvoke r1.<com.android.commands.hid.Event: byte[] getReport()>();

        virtualinvoke r25.<com.android.commands.hid.Device: void sendReport(byte[])>($r24);

        goto label4;

     label2:
        $r11 = "register";

        $r12 = virtualinvoke r1.<com.android.commands.hid.Event: java.lang.String getCommand()>();

        $z3 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>($r12);

        if $z3 == 0 goto label3;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Device id=");

        $i3 = virtualinvoke r1.<com.android.commands.hid.Event: int getId()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already registered. Ignoring event.");

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.commands.hid.Hid: void error(java.lang.String)>($r23);

        goto label4;

     label3:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown command \"");

        $r15 = virtualinvoke r1.<com.android.commands.hid.Event: java.lang.String getCommand()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\". Ignoring event.");

        $r18 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.commands.hid.Hid: void error(java.lang.String)>($r18);

     label4:
        goto label7;

     label5:
        $r3 = "register";

        $r4 = virtualinvoke r1.<com.android.commands.hid.Event: java.lang.String getCommand()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label6;

        specialinvoke r0.<com.android.commands.hid.Hid: void registerDevice(com.android.commands.hid.Event)>(r1);

        goto label7;

     label6:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("HID", "Unknown device id specified. Ignoring event.");

     label7:
        return;
    }

    private void registerDevice(com.android.commands.hid.Event)
    {
        com.android.commands.hid.Hid r0;
        int i0, $i1, $i2, $i3;
        java.lang.String $r2, $r3, $r6, $r10, $r12;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.IllegalStateException $r9;
        com.android.commands.hid.Device $r11;
        byte[] $r13, $r14;
        android.util.SparseArray $r15, $r17;
        java.util.Map $r16;
        com.android.commands.hid.Event r18;

        r0 := @this: com.android.commands.hid.Hid;

        r18 := @parameter0: com.android.commands.hid.Event;

        $r2 = "register";

        $r3 = virtualinvoke r18.<com.android.commands.hid.Event: java.lang.String getCommand()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        i0 = virtualinvoke r18.<com.android.commands.hid.Event: int getId()>();

        $r11 = new com.android.commands.hid.Device;

        $r12 = virtualinvoke r18.<com.android.commands.hid.Event: java.lang.String getName()>();

        $i1 = virtualinvoke r18.<com.android.commands.hid.Event: int getVendorId()>();

        $i2 = virtualinvoke r18.<com.android.commands.hid.Event: int getProductId()>();

        $i3 = virtualinvoke r18.<com.android.commands.hid.Event: int getBus()>();

        $r13 = virtualinvoke r18.<com.android.commands.hid.Event: byte[] getDescriptor()>();

        $r14 = virtualinvoke r18.<com.android.commands.hid.Event: byte[] getReport()>();

        $r15 = virtualinvoke r18.<com.android.commands.hid.Event: android.util.SparseArray getFeatureReports()>();

        $r16 = virtualinvoke r18.<com.android.commands.hid.Event: java.util.Map getOutputs()>();

        specialinvoke $r11.<com.android.commands.hid.Device: void <init>(int,java.lang.String,int,int,int,byte[],byte[],android.util.SparseArray,java.util.Map)>(i0, $r12, $i1, $i2, $i3, $r13, $r14, $r15, $r16);

        $r17 = r0.<com.android.commands.hid.Hid: android.util.SparseArray mDevices>;

        virtualinvoke $r17.<android.util.SparseArray: void append(int,java.lang.Object)>(i0, $r11);

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to send command \"");

        $r6 = virtualinvoke r18.<com.android.commands.hid.Event: java.lang.String getCommand()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" to an unregistered device!");

        $r9 = new java.lang.IllegalStateException;

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    private void run()
    {
        com.android.commands.hid.Hid r0;
        com.android.commands.hid.Event$Reader $r1;
        android.util.SparseArray $r2, $r8;
        java.lang.Object $r3;
        com.android.commands.hid.Device $r4;
        java.lang.Throwable $r5;
        com.android.commands.hid.Event r6;
        int i0, $i1;
        java.lang.Exception r9;

        r0 := @this: com.android.commands.hid.Hid;

     label1:
        $r1 = r0.<com.android.commands.hid.Hid: com.android.commands.hid.Event$Reader mReader>;

        r6 = virtualinvoke $r1.<com.android.commands.hid.Event$Reader: com.android.commands.hid.Event getNextEvent()>();

     label2:
        if r6 == null goto label5;

     label3:
        specialinvoke r0.<com.android.commands.hid.Hid: void process(com.android.commands.hid.Event)>(r6);

     label4:
        goto label1;

     label5:
        goto label7;

     label6:
        $r5 := @caughtexception;

        r9 = (java.lang.Exception) $r5;

        staticinvoke <com.android.commands.hid.Hid: void error(java.lang.String,java.lang.Exception)>("Error reading in events.", r9);

     label7:
        i0 = 0;

     label8:
        $r8 = r0.<com.android.commands.hid.Hid: android.util.SparseArray mDevices>;

        $i1 = virtualinvoke $r8.<android.util.SparseArray: int size()>();

        if i0 >= $i1 goto label9;

        $r2 = r0.<com.android.commands.hid.Hid: android.util.SparseArray mDevices>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i0);

        $r4 = (com.android.commands.hid.Device) $r3;

        virtualinvoke $r4.<com.android.commands.hid.Device: void close()>();

        i0 = i0 + 1;

        goto label8;

     label9:
        return;

        catch java.io.IOException from label1 to label2 with label6;
        catch java.io.IOException from label3 to label4 with label6;
    }

    private static void usage()
    {
        staticinvoke <com.android.commands.hid.Hid: void error(java.lang.String)>("Usage: hid [FILE]");

        return;
    }

    public static void <clinit>()
    {
        <com.android.commands.hid.Hid: java.lang.String TAG> = "HID";

        return;
    }
}
