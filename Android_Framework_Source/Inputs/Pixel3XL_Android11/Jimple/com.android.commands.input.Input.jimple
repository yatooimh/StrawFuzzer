public class com.android.commands.input.Input extends com.android.internal.os.BaseCommand
{
    private static final java.util.Map COMMANDS;
    private static final float DEFAULT_PRESSURE;
    private static final java.lang.String INVALID_ARGUMENTS;
    private static final java.lang.String INVALID_DISPLAY_ARGUMENTS;
    private static final float NO_PRESSURE;
    private static final java.util.Map SOURCES;
    private static final java.lang.String TAG;

    static void <clinit>()
    {
        com.android.commands.input.Input$1 $r0;
        java.util.HashMap $r1;

        <com.android.commands.input.Input: java.lang.String TAG> = "Input";

        <com.android.commands.input.Input: float NO_PRESSURE> = 0.0F;

        <com.android.commands.input.Input: java.lang.String INVALID_DISPLAY_ARGUMENTS> = "Error: Invalid arguments for display ID.";

        <com.android.commands.input.Input: java.lang.String INVALID_ARGUMENTS> = "Error: Invalid arguments for command: ";

        <com.android.commands.input.Input: float DEFAULT_PRESSURE> = 1.0F;

        $r0 = new com.android.commands.input.Input$1;

        specialinvoke $r0.<com.android.commands.input.Input$1: void <init>()>();

        <com.android.commands.input.Input: java.util.Map SOURCES> = $r0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        <com.android.commands.input.Input: java.util.Map COMMANDS> = $r1;

        return;
    }

    void <init>()
    {
        com.android.commands.input.Input r0;
        com.android.commands.input.Input$InputText $r1;
        java.util.Map $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23;
        com.android.commands.input.Input$InputKeyEvent $r4;
        com.android.commands.input.Input$InputTap $r7;
        com.android.commands.input.Input$InputSwipe $r10;
        com.android.commands.input.Input$InputDragAndDrop $r13;
        com.android.commands.input.Input$InputPress $r16;
        com.android.commands.input.Input$InputRoll $r19;
        com.android.commands.input.Input$InputMotionEvent $r22;

        r0 := @this: com.android.commands.input.Input;

        specialinvoke r0.<com.android.internal.os.BaseCommand: void <init>()>();

        $r2 = <com.android.commands.input.Input: java.util.Map COMMANDS>;

        $r1 = new com.android.commands.input.Input$InputText;

        specialinvoke $r1.<com.android.commands.input.Input$InputText: void <init>(com.android.commands.input.Input)>(r0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("text", $r1);

        $r5 = <com.android.commands.input.Input: java.util.Map COMMANDS>;

        $r4 = new com.android.commands.input.Input$InputKeyEvent;

        specialinvoke $r4.<com.android.commands.input.Input$InputKeyEvent: void <init>(com.android.commands.input.Input)>(r0);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("keyevent", $r4);

        $r8 = <com.android.commands.input.Input: java.util.Map COMMANDS>;

        $r7 = new com.android.commands.input.Input$InputTap;

        specialinvoke $r7.<com.android.commands.input.Input$InputTap: void <init>(com.android.commands.input.Input)>(r0);

        interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("tap", $r7);

        $r11 = <com.android.commands.input.Input: java.util.Map COMMANDS>;

        $r10 = new com.android.commands.input.Input$InputSwipe;

        specialinvoke $r10.<com.android.commands.input.Input$InputSwipe: void <init>(com.android.commands.input.Input)>(r0);

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("swipe", $r10);

        $r14 = <com.android.commands.input.Input: java.util.Map COMMANDS>;

        $r13 = new com.android.commands.input.Input$InputDragAndDrop;

        specialinvoke $r13.<com.android.commands.input.Input$InputDragAndDrop: void <init>(com.android.commands.input.Input)>(r0);

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("draganddrop", $r13);

        $r17 = <com.android.commands.input.Input: java.util.Map COMMANDS>;

        $r16 = new com.android.commands.input.Input$InputPress;

        specialinvoke $r16.<com.android.commands.input.Input$InputPress: void <init>(com.android.commands.input.Input)>(r0);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("press", $r16);

        $r20 = <com.android.commands.input.Input: java.util.Map COMMANDS>;

        $r19 = new com.android.commands.input.Input$InputRoll;

        specialinvoke $r19.<com.android.commands.input.Input$InputRoll: void <init>(com.android.commands.input.Input)>(r0);

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("roll", $r19);

        $r23 = <com.android.commands.input.Input: java.util.Map COMMANDS>;

        $r22 = new com.android.commands.input.Input$InputMotionEvent;

        specialinvoke $r22.<com.android.commands.input.Input$InputMotionEvent: void <init>(com.android.commands.input.Input)>(r0);

        interfaceinvoke $r23.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("motionevent", $r22);

        return;
    }

    static int access$000(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <com.android.commands.input.Input: int getSource(int,int)>(i0, i1);

        return $i2;
    }

    static void access$100(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;

        r0 := @parameter0: android.view.KeyEvent;

        staticinvoke <com.android.commands.input.Input: void injectKeyEvent(android.view.KeyEvent)>(r0);

        return;
    }

    static void access$200(int, int, long, long, float, float, float, int)
    {
        int i0, i1, i4;
        long l2, l3;
        float f0, f1, f2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        i4 := @parameter7: int;

        staticinvoke <com.android.commands.input.Input: void injectMotionEvent(int,int,long,long,float,float,float,int)>(i0, i1, l2, l3, f0, f1, f2, i4);

        return;
    }

    static float access$300(float, float, float)
    {
        float f0, f1, f2, $f3;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = staticinvoke <com.android.commands.input.Input: float lerp(float,float,float)>(f0, f1, f2);

        return $f3;
    }

    private int getDisplayId()
    {
        com.android.commands.input.Input r0;
        java.lang.String $r1, $r2, r5;
        boolean $z0, $z1;
        java.lang.Throwable $r3;
        java.lang.IllegalArgumentException $r4;
        int i0, i1;

        r0 := @this: com.android.commands.input.Input;

        r5 = virtualinvoke r0.<com.android.commands.input.Input: java.lang.String nextArgRequired()>();

        $r1 = "INVALID_DISPLAY";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z0 == 0 goto label1;

        return -1;

     label1:
        $r2 = "DEFAULT_DISPLAY";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5);

        if $z1 == 0 goto label2;

        return 0;

     label2:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r5);

     label3:
        if i0 != -1 goto label4;

        return -1;

     label4:
        i1 = staticinvoke <java.lang.Math: int max(int,int)>(i0, 0);

     label5:
        return i1;

     label6:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Error: Invalid arguments for display ID.");

        throw $r4;

        catch java.lang.NumberFormatException from label2 to label3 with label6;
        catch java.lang.NumberFormatException from label4 to label5 with label6;
    }

    private static int getInputDeviceId(int)
    {
        int i0, i1, i2, i3;
        int[] r0;
        android.view.InputDevice $r1;
        boolean $z0;

        i0 := @parameter0: int;

        r0 = staticinvoke <android.view.InputDevice: int[] getDeviceIds()>();

        i1 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i1 goto label3;

        i2 = r0[i3];

        $r1 = staticinvoke <android.view.InputDevice: android.view.InputDevice getDevice(int)>(i2);

        $z0 = virtualinvoke $r1.<android.view.InputDevice: boolean supportsSource(int)>(i0);

        if $z0 == 0 goto label2;

        return i2;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    private static final int getSource(int, int)
    {
        int i0, i1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label1;

        goto label2;

     label1:
        i1 = i0;

     label2:
        return i1;
    }

    private static void injectKeyEvent(android.view.KeyEvent)
    {
        android.view.KeyEvent r0;
        android.hardware.input.InputManager $r1;

        r0 := @parameter0: android.view.KeyEvent;

        $r1 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        virtualinvoke $r1.<android.hardware.input.InputManager: boolean injectInputEvent(android.view.InputEvent,int)>(r0, 2);

        return;
    }

    private static void injectMotionEvent(int, int, long, long, float, float, float, int)
    {
        int i0, i3, $i4, $i5, i6, i7;
        long l1, l2;
        float f0, f1, f2;
        android.view.MotionEvent r0;
        android.hardware.input.InputManager $r1;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        f0 := @parameter4: float;

        f1 := @parameter5: float;

        f2 := @parameter6: float;

        i3 := @parameter7: int;

        $i4 = staticinvoke <com.android.commands.input.Input: int getInputDeviceId(int)>(i6);

        r0 = staticinvoke <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>(l1, l2, i0, f0, f1, f2, 1.0F, 0, 1.0F, 1.0F, $i4, 0);

        virtualinvoke r0.<android.view.MotionEvent: void setSource(int)>(i6);

        if i3 != -1 goto label1;

        $i5 = i6 & 2;

        if $i5 == 0 goto label1;

        i7 = 0;

        goto label2;

     label1:
        i7 = i3;

     label2:
        virtualinvoke r0.<android.view.MotionEvent: void setDisplayId(int)>(i7);

        $r1 = staticinvoke <android.hardware.input.InputManager: android.hardware.input.InputManager getInstance()>();

        virtualinvoke $r1.<android.hardware.input.InputManager: boolean injectInputEvent(android.view.InputEvent,int)>(r0, 2);

        return;
    }

    private static final float lerp(float, float, float)
    {
        float f0, f1, f2, $f3, $f4, $f5;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        $f3 = f1 - f0;

        $f4 = $f3 * f2;

        $f5 = $f4 + f0;

        return $f5;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        com.android.commands.input.Input $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new com.android.commands.input.Input;

        specialinvoke $r1.<com.android.commands.input.Input: void <init>()>();

        virtualinvoke $r1.<com.android.commands.input.Input: void run(java.lang.String[])>(r0);

        return;
    }

    public void onRun() throws java.lang.Exception
    {
        com.android.commands.input.Input r0;
        java.util.Map $r1, $r3, $r10;
        boolean $z0, $z1;
        java.lang.String $r2, $r9, $r18, r19, r20, r21;
        java.lang.Object $r4, $r11;
        java.lang.StringBuilder $r5, $r14;
        java.lang.IllegalArgumentException $r8, $r17;
        java.lang.Integer $r12;
        java.lang.Throwable $r13;
        int i0, i1;
        com.android.commands.input.Input$InputCmd r22;

        r0 := @this: com.android.commands.input.Input;

        r19 = virtualinvoke r0.<com.android.commands.input.Input: java.lang.String nextArgRequired()>();

        i0 = 0;

        r20 = r19;

        $r1 = <com.android.commands.input.Input: java.util.Map SOURCES>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r19);

        if $z0 == 0 goto label1;

        $r10 = <com.android.commands.input.Input: java.util.Map SOURCES>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19);

        $r12 = (java.lang.Integer) $r11;

        i0 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

        r20 = virtualinvoke r0.<com.android.commands.input.Input: java.lang.String nextArgRequired()>();

     label1:
        i1 = -1;

        r21 = r20;

        $r2 = "-d";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r20);

        if $z1 == 0 goto label2;

        i1 = specialinvoke r0.<com.android.commands.input.Input: int getDisplayId()>();

        r21 = virtualinvoke r0.<com.android.commands.input.Input: java.lang.String nextArgRequired()>();

     label2:
        $r3 = <com.android.commands.input.Input: java.util.Map COMMANDS>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r21);

        r22 = (com.android.commands.input.Input$InputCmd) $r4;

        if r22 == null goto label6;

     label3:
        interfaceinvoke r22.<com.android.commands.input.Input$InputCmd: void run(int,int)>(i0, i1);

     label4:
        return;

     label5:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Invalid arguments for command: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r17;

     label6:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: Unknown command: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public void onShowUsage(java.io.PrintStream)
    {
        com.android.commands.input.Input r0;
        java.io.PrintStream r1;
        java.util.Iterator r2;
        java.lang.String r3, $r15;
        java.util.Map $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object[] $r7;
        java.lang.Integer $r8, $r9;
        java.lang.Object $r11;
        java.lang.StringBuilder $r12;

        r0 := @this: com.android.commands.input.Input;

        r1 := @parameter0: java.io.PrintStream;

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("Usage: input [<source>] [-d DISPLAY_ID] <command> [<arg>...]");

        virtualinvoke r1.<java.io.PrintStream: void println()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("The sources are: ");

        $r5 = <com.android.commands.input.Input: java.util.Map SOURCES>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r15);

        goto label1;

     label2:
        virtualinvoke r1.<java.io.PrintStream: void println()>();

        $r7 = newarray (java.lang.Object)[2];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r7[0] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r7[1] = $r9;

        virtualinvoke r1.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("-d: specify the display ID.\n      (Default: %d for key event, %d for motion event if not specified.)", $r7);

        virtualinvoke r1.<java.io.PrintStream: void println()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("The commands and default sources are:");

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("      text <string> (Default: touchscreen)");

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("      keyevent [--longpress] <key code number or name> ... (Default: keyboard)");

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("      tap <x> <y> (Default: touchscreen)");

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("      swipe <x1> <y1> <x2> <y2> [duration(ms)] (Default: touchscreen)");

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("      draganddrop <x1> <y1> <x2> <y2> [duration(ms)] (Default: touchscreen)");

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("      press (Default: trackball)");

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("      roll <dx> <dy> (Default: trackball)");

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("      motionevent <DOWN|UP|MOVE> <x> <y> (Default: touchscreen)");

        return;
    }
}
