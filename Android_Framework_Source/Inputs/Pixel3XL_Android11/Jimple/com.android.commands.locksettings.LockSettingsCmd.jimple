public final class com.android.commands.locksettings.LockSettingsCmd extends com.android.internal.os.BaseCommand
{
    private static final java.lang.String USAGE;

    public void <init>()
    {
        com.android.commands.locksettings.LockSettingsCmd r0;

        r0 := @this: com.android.commands.locksettings.LockSettingsCmd;

        specialinvoke r0.<com.android.internal.os.BaseCommand: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        com.android.commands.locksettings.LockSettingsCmd $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = new com.android.commands.locksettings.LockSettingsCmd;

        specialinvoke $r1.<com.android.commands.locksettings.LockSettingsCmd: void <init>()>();

        virtualinvoke $r1.<com.android.commands.locksettings.LockSettingsCmd: void run(java.lang.String[])>(r0);

        return;
    }

    public void onRun() throws java.lang.Exception
    {
        com.android.commands.locksettings.LockSettingsCmd r0;
        android.os.IBinder $r1, $r3;
        com.android.internal.widget.ILockSettings $r2;
        java.io.FileDescriptor $r4, $r5, $r6;
        java.lang.String[] $r7;
        android.os.ShellCallback $r8;
        com.android.commands.locksettings.LockSettingsCmd$1 $r9;

        r0 := @this: com.android.commands.locksettings.LockSettingsCmd;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("lock_settings");

        $r2 = staticinvoke <com.android.internal.widget.ILockSettings$Stub: com.android.internal.widget.ILockSettings asInterface(android.os.IBinder)>($r1);

        $r3 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: android.os.IBinder asBinder()>();

        $r4 = <java.io.FileDescriptor: java.io.FileDescriptor in>;

        $r5 = <java.io.FileDescriptor: java.io.FileDescriptor out>;

        $r6 = <java.io.FileDescriptor: java.io.FileDescriptor err>;

        $r7 = virtualinvoke r0.<com.android.commands.locksettings.LockSettingsCmd: java.lang.String[] getRawArgs()>();

        $r8 = new android.os.ShellCallback;

        specialinvoke $r8.<android.os.ShellCallback: void <init>()>();

        $r9 = new com.android.commands.locksettings.LockSettingsCmd$1;

        specialinvoke $r9.<com.android.commands.locksettings.LockSettingsCmd$1: void <init>(com.android.commands.locksettings.LockSettingsCmd,android.os.Handler)>(r0, null);

        interfaceinvoke $r3.<android.os.IBinder: void shellCommand(java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>($r4, $r5, $r6, $r7, $r8, $r9);

        return;
    }

    public void onShowUsage(java.io.PrintStream)
    {
        com.android.commands.locksettings.LockSettingsCmd r0;
        java.io.PrintStream r1;

        r0 := @this: com.android.commands.locksettings.LockSettingsCmd;

        r1 := @parameter0: java.io.PrintStream;

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("usage: locksettings set-pattern [--old OLD_CREDENTIAL] NEW_PATTERN\n       locksettings set-pin [--old OLD_CREDENTIAL] NEW_PIN\n       locksettings set-password [--old OLD_CREDENTIAL] NEW_PASSWORD\n       locksettings clear [--old OLD_CREDENTIAL]\n       locksettings verify [--old OLD_CREDENTIAL]\n       locksettings set-disabled DISABLED\n       locksettings get-disabled\n\nflags: \n       --user USER_ID: specify the user, default value is current user\n\nlocksettings set-pattern: sets a pattern\n    A pattern is specified by a non-separated list of numbers that index the cell\n    on the pattern in a 1-based manner in left to right and top to bottom order,\n    i.e. the top-left cell is indexed with 1, whereas the bottom-right cell\n    is indexed with 9. Example: 1234\n\nlocksettings set-pin: sets a PIN\n\nlocksettings set-password: sets a password\n\nlocksettings clear: clears the unlock credential\n\nlocksettings verify: verifies the credential and unlocks the user\n\nlocksettings set-disabled: sets whether the lock screen should be disabled\n\nlocksettings get-disabled: retrieves whether the lock screen is disabled\n");

        return;
    }

    public static void <clinit>()
    {
        <com.android.commands.locksettings.LockSettingsCmd: java.lang.String USAGE> = "usage: locksettings set-pattern [--old OLD_CREDENTIAL] NEW_PATTERN\n       locksettings set-pin [--old OLD_CREDENTIAL] NEW_PIN\n       locksettings set-password [--old OLD_CREDENTIAL] NEW_PASSWORD\n       locksettings clear [--old OLD_CREDENTIAL]\n       locksettings verify [--old OLD_CREDENTIAL]\n       locksettings set-disabled DISABLED\n       locksettings get-disabled\n\nflags: \n       --user USER_ID: specify the user, default value is current user\n\nlocksettings set-pattern: sets a pattern\n    A pattern is specified by a non-separated list of numbers that index the cell\n    on the pattern in a 1-based manner in left to right and top to bottom order,\n    i.e. the top-left cell is indexed with 1, whereas the bottom-right cell\n    is indexed with 9. Example: 1234\n\nlocksettings set-pin: sets a PIN\n\nlocksettings set-password: sets a password\n\nlocksettings clear: clears the unlock credential\n\nlocksettings verify: verifies the credential and unlocks the user\n\nlocksettings set-disabled: sets whether the lock screen should be disabled\n\nlocksettings get-disabled: retrieves whether the lock screen is disabled\n";

        return;
    }
}
