public final class com.android.commands.sm.Sm extends java.lang.Object
{
    private static final java.lang.String TAG;
    private java.lang.String[] mArgs;
    private java.lang.String mCurArgData;
    private int mNextArg;
    android.os.storage.IStorageManager mSm;

    public void <init>()
    {
        com.android.commands.sm.Sm r0;

        r0 := @this: com.android.commands.sm.Sm;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.Exception $r1;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        java.lang.String[] r6;
        byte b2, $b3;
        com.android.commands.sm.Sm r7;
        java.io.PrintStream r8;

        r6 := @parameter0: java.lang.String[];

        b2 = 0;

     label1:
        r7 = new com.android.commands.sm.Sm;

        specialinvoke r7.<com.android.commands.sm.Sm: void <init>()>();

        virtualinvoke r7.<com.android.commands.sm.Sm: void run(java.lang.String[])>(r6);

     label2:
        b2 = 1;

        goto label5;

     label3:
        $r1 := @caughtexception;

        $z0 = $r1 instanceof java.lang.IllegalArgumentException;

        if $z0 == 0 goto label4;

        staticinvoke <com.android.commands.sm.Sm: int showUsage()>();

        staticinvoke <java.lang.System: void exit(int)>(1);

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Sm", "Error", $r1);

        r8 = <java.lang.System: java.io.PrintStream err>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r8.<java.io.PrintStream: void println(java.lang.String)>($r5);

     label5:
        $b3 = b2 ^ 1;

        staticinvoke <java.lang.System: void exit(int)>($b3);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private java.lang.String nextArg()
    {
        com.android.commands.sm.Sm r0;
        int i0, $i1, $i2;
        java.lang.String[] r1;
        java.lang.String r2;

        r0 := @this: com.android.commands.sm.Sm;

        i0 = r0.<com.android.commands.sm.Sm: int mNextArg>;

        r1 = r0.<com.android.commands.sm.Sm: java.lang.String[] mArgs>;

        $i1 = lengthof r1;

        if i0 < $i1 goto label1;

        return null;

     label1:
        r2 = r1[i0];

        $i2 = i0 + 1;

        r0.<com.android.commands.sm.Sm: int mNextArg> = $i2;

        return r2;
    }

    private void runStartCheckpoint() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        int i0;
        java.lang.IllegalArgumentException $r1, $r2, $r5;
        android.os.storage.IStorageManager $r3;
        java.lang.Throwable $r4;
        java.lang.String r6;

        r0 := @this: com.android.commands.sm.Sm;

        r6 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        if r6 == null goto label5;

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r6);

     label2:
        if i0 <= 0 goto label3;

        $r3 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r3.<android.os.storage.IStorageManager: void startCheckpoint(int)>(i0);

        return;

     label3:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("<num-retries> must be a positive integer");

        throw $r2;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("<num-retries> must be a positive integer");

        throw $r5;

     label5:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Expected <num-retries>");

        throw $r1;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    private void runSupportsCheckpoint() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        android.os.storage.IStorageManager $r1;
        java.io.PrintStream $r2;
        boolean $z0;

        r0 := @this: com.android.commands.sm.Sm;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        $z0 = interfaceinvoke $r1.<android.os.storage.IStorageManager: boolean supportsCheckpoint()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(boolean)>($z0);

        return;
    }

    private static int showUsage()
    {
        java.io.PrintStream $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("usage: sm list-disks [adoptable]");

        $r1 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("       sm list-volumes [public|private|emulated|stub|all]");

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("       sm has-adoptable");

        $r3 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("       sm get-primary-storage-uuid");

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("       sm set-force-adoptable [on|off|default]");

        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("       sm set-virtual-disk [true|false]");

        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("");

        $r7 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("       sm partition DISK [public|private|mixed] [ratio]");

        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("       sm mount VOLUME");

        $r9 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("       sm unmount VOLUME");

        $r10 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("       sm format VOLUME");

        $r11 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("       sm benchmark VOLUME");

        $r12 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("       sm idle-maint [run|abort]");

        $r13 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("       sm fstrim");

        $r14 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("");

        $r15 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("       sm forget [UUID|all]");

        $r16 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>("");

        $r17 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>("       sm set-emulate-fbe [true|false]");

        $r18 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("");

        $r19 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>("       sm set-isolated-storage [on|off|default]");

        $r20 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("");

        $r21 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>("       sm start-checkpoint <num-retries>");

        $r22 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>("");

        $r23 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>("       sm supports-checkpoint");

        $r24 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r24.<java.io.PrintStream: void println(java.lang.String)>("");

        return 1;
    }

    public void run(java.lang.String[]) throws java.lang.Exception
    {
        com.android.commands.sm.Sm r0;
        android.os.storage.IStorageManager r1;
        int $i0;
        java.lang.IllegalArgumentException $r2, $r25;
        android.os.IBinder $r3;
        android.os.RemoteException $r4;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.lang.String[] r26;

        r0 := @this: com.android.commands.sm.Sm;

        r26 := @parameter0: java.lang.String[];

        $i0 = lengthof r26;

        if $i0 < 1 goto label23;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        r1 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>($r3);

        r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm> = r1;

        if r1 == null goto label22;

        r0.<com.android.commands.sm.Sm: java.lang.String[] mArgs> = r26;

        r27 = r26[0];

        r0.<com.android.commands.sm.Sm: int mNextArg> = 1;

        $r5 = "list-disks";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z0 == 0 goto label01;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runListDisks()>();

        goto label20;

     label01:
        $r6 = "list-volumes";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z1 == 0 goto label02;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runListVolumes()>();

        goto label20;

     label02:
        $r7 = "has-adoptable";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z2 == 0 goto label03;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runHasAdoptable()>();

        goto label20;

     label03:
        $r8 = "get-primary-storage-uuid";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z3 == 0 goto label04;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runGetPrimaryStorageUuid()>();

        goto label20;

     label04:
        $r9 = "set-force-adoptable";

        $z4 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z4 == 0 goto label05;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runSetForceAdoptable()>();

        goto label20;

     label05:
        $r10 = "set-sdcardfs";

        $z5 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z5 == 0 goto label06;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runSetSdcardfs()>();

        goto label20;

     label06:
        $r11 = "partition";

        $z6 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z6 == 0 goto label07;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runPartition()>();

        goto label20;

     label07:
        $r12 = "mount";

        $z7 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z7 == 0 goto label08;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runMount()>();

        goto label20;

     label08:
        $r13 = "unmount";

        $z8 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z8 == 0 goto label09;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runUnmount()>();

        goto label20;

     label09:
        $r14 = "format";

        $z9 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z9 == 0 goto label10;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runFormat()>();

        goto label20;

     label10:
        $r15 = "benchmark";

        $z10 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z10 == 0 goto label11;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runBenchmark()>();

        goto label20;

     label11:
        $r16 = "forget";

        $z11 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z11 == 0 goto label12;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runForget()>();

        goto label20;

     label12:
        $r17 = "set-emulate-fbe";

        $z12 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z12 == 0 goto label13;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runSetEmulateFbe()>();

        goto label20;

     label13:
        $r18 = "get-fbe-mode";

        $z13 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z13 == 0 goto label14;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runGetFbeMode()>();

        goto label20;

     label14:
        $r19 = "idle-maint";

        $z14 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z14 == 0 goto label15;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runIdleMaint()>();

        goto label20;

     label15:
        $r20 = "fstrim";

        $z15 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z15 == 0 goto label16;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runFstrim()>();

        goto label20;

     label16:
        $r21 = "set-virtual-disk";

        $z16 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z16 == 0 goto label17;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runSetVirtualDisk()>();

        goto label20;

     label17:
        $r22 = "set-isolated-storage";

        $z17 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z17 == 0 goto label18;

        virtualinvoke r0.<com.android.commands.sm.Sm: void runIsolatedStorage()>();

        goto label20;

     label18:
        $r23 = "start-checkpoint";

        $z18 = virtualinvoke $r23.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z18 == 0 goto label19;

        specialinvoke r0.<com.android.commands.sm.Sm: void runStartCheckpoint()>();

        goto label20;

     label19:
        $r24 = "supports-checkpoint";

        $z19 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r27);

        if $z19 == 0 goto label21;

        specialinvoke r0.<com.android.commands.sm.Sm: void runSupportsCheckpoint()>();

     label20:
        return;

     label21:
        $r25 = new java.lang.IllegalArgumentException;

        specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r25;

     label22:
        $r4 = new android.os.RemoteException;

        specialinvoke $r4.<android.os.RemoteException: void <init>(java.lang.String)>("Failed to find running mount service");

        throw $r4;

     label23:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r2;
    }

    public void runBenchmark() throws java.lang.Exception
    {
        com.android.commands.sm.Sm r0;
        java.lang.String r1;
        java.util.concurrent.CompletableFuture $r3;
        com.android.commands.sm.Sm$1 $r4;
        android.os.storage.IStorageManager $r5;
        java.io.PrintStream $r6;
        java.lang.Object $r7;

        r0 := @this: com.android.commands.sm.Sm;

        r1 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        $r3 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r3.<java.util.concurrent.CompletableFuture: void <init>()>();

        $r5 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        $r4 = new com.android.commands.sm.Sm$1;

        specialinvoke $r4.<com.android.commands.sm.Sm$1: void <init>(com.android.commands.sm.Sm,java.util.concurrent.CompletableFuture)>(r0, $r3);

        interfaceinvoke $r5.<android.os.storage.IStorageManager: void benchmark(java.lang.String,android.os.IVoldTaskListener)>(r1, $r4);

        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = virtualinvoke $r3.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.Object)>($r7);

        return;
    }

    public void runForget() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        java.lang.String r1, $r2;
        boolean $z0;
        android.os.storage.IStorageManager $r3, $r4;

        r0 := @this: com.android.commands.sm.Sm;

        r1 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        $r2 = "all";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r4.<android.os.storage.IStorageManager: void forgetAllVolumes()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r3.<android.os.storage.IStorageManager: void forgetVolume(java.lang.String)>(r1);

     label2:
        return;
    }

    public void runFormat() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        java.lang.String r1;
        android.os.storage.IStorageManager $r2;

        r0 := @this: com.android.commands.sm.Sm;

        r1 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        $r2 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void format(java.lang.String)>(r1);

        return;
    }

    public void runFstrim() throws java.lang.Exception
    {
        com.android.commands.sm.Sm r0;
        java.util.concurrent.CompletableFuture $r2;
        com.android.commands.sm.Sm$2 $r3;
        android.os.storage.IStorageManager $r4;
        java.io.PrintStream $r5;
        java.lang.Object $r6;

        r0 := @this: com.android.commands.sm.Sm;

        $r2 = new java.util.concurrent.CompletableFuture;

        specialinvoke $r2.<java.util.concurrent.CompletableFuture: void <init>()>();

        $r4 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        $r3 = new com.android.commands.sm.Sm$2;

        specialinvoke $r3.<com.android.commands.sm.Sm$2: void <init>(com.android.commands.sm.Sm,java.util.concurrent.CompletableFuture)>(r0, $r2);

        interfaceinvoke $r4.<android.os.storage.IStorageManager: void fstrim(int,android.os.IVoldTaskListener)>(0, $r3);

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r6 = virtualinvoke $r2.<java.util.concurrent.CompletableFuture: java.lang.Object get()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.Object)>($r6);

        return;
    }

    public void runGetFbeMode()
    {
        com.android.commands.sm.Sm r0;
        boolean $z0, $z1;
        java.io.PrintStream $r1, $r2, $r3;

        r0 := @this: com.android.commands.sm.Sm;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOnly()>();

        if $z0 == 0 goto label1;

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("native");

        goto label3;

     label1:
        $z1 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedEmulatedOnly()>();

        if $z1 == 0 goto label2;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("emulated");

        goto label3;

     label2:
        $r1 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("none");

     label3:
        return;
    }

    public void runGetPrimaryStorageUuid() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        android.os.storage.IStorageManager $r1;
        java.io.PrintStream $r2;
        java.lang.String $r3;

        r0 := @this: com.android.commands.sm.Sm;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        $r3 = interfaceinvoke $r1.<android.os.storage.IStorageManager: java.lang.String getPrimaryStorageUuid()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return;
    }

    public void runHasAdoptable()
    {
        com.android.commands.sm.Sm r0;
        java.io.PrintStream $r1;
        boolean $z0;

        r0 := @this: com.android.commands.sm.Sm;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean hasAdoptable()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(boolean)>($z0);

        return;
    }

    public void runIdleMaint() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        android.os.storage.IStorageManager $r3, $r4;

        r0 := @this: com.android.commands.sm.Sm;

        $r1 = "run";

        $r2 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r4.<android.os.storage.IStorageManager: void runIdleMaintenance()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r3.<android.os.storage.IStorageManager: void abortIdleMaintenance()>();

     label2:
        return;
    }

    public void runIsolatedStorage() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        java.lang.String r1;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        byte b1;
        short s2;
        android.os.storage.IStorageManager $r2;

        r0 := @this: com.android.commands.sm.Sm;

        r1 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 3551: goto label06;
            case 109935: goto label05;
            case 3569038: goto label04;
            case 97196323: goto label03;
            case 1544803905: goto label02;
            default: goto label01;
        };

     label01:
        goto label07;

     label02:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("default");

        if $z0 == 0 goto label01;

        b1 = 3;

        goto label08;

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z1 == 0 goto label01;

        b1 = 4;

        goto label08;

     label04:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z2 == 0 goto label01;

        b1 = 1;

        goto label08;

     label05:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z3 == 0 goto label01;

        b1 = 2;

        goto label08;

     label06:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("on");

        if $z4 == 0 goto label01;

        b1 = 0;

        goto label08;

     label07:
        b1 = -1;

     label08:
        if b1 == 0 goto label11;

        if b1 == 1 goto label11;

        if b1 == 2 goto label10;

        if b1 == 3 goto label09;

        if b1 == 4 goto label09;

        return;

     label09:
        s2 = 0;

        goto label12;

     label10:
        s2 = 128;

        goto label12;

     label11:
        s2 = 64;

     label12:
        $r2 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void setDebugFlags(int,int)>(s2, 192);

        return;
    }

    public void runListDisks() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        boolean z0, $z1;
        android.os.storage.DiskInfo[] r1;
        int i0, i1;
        android.os.storage.DiskInfo r2;
        java.lang.String $r3, $r4, $r7;
        android.os.storage.IStorageManager $r5;
        java.io.PrintStream $r6;

        r0 := @this: com.android.commands.sm.Sm;

        $r3 = "adoptable";

        $r4 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        $r5 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        r1 = interfaceinvoke $r5.<android.os.storage.IStorageManager: android.os.storage.DiskInfo[] getDisks()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r2 = r1[i1];

        if z0 == 0 goto label2;

        $z1 = virtualinvoke r2.<android.os.storage.DiskInfo: boolean isAdoptable()>();

        if $z1 == 0 goto label3;

     label2:
        $r6 = <java.lang.System: java.io.PrintStream out>;

        $r7 = virtualinvoke r2.<android.os.storage.DiskInfo: java.lang.String getId()>();

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r7);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    public void runListVolumes() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        android.os.storage.VolumeInfo[] r1;
        int i0, $i1, $i2, i4;
        android.os.storage.VolumeInfo r2;
        java.lang.String r3, $r5, $r6, $r7, $r8, $r10, $r15, $r17, r18;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r9;
        byte b3;
        android.os.storage.IStorageManager r19;
        java.io.PrintStream r20;

        r0 := @this: com.android.commands.sm.Sm;

        r18 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        $r5 = "public";

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z0 == 0 goto label1;

        b3 = 0;

        goto label5;

     label1:
        $r6 = "private";

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z1 == 0 goto label2;

        b3 = 1;

        goto label5;

     label2:
        $r7 = "emulated";

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z2 == 0 goto label3;

        b3 = 2;

        goto label5;

     label3:
        $r8 = "stub";

        $z3 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z3 == 0 goto label4;

        b3 = 5;

        goto label5;

     label4:
        b3 = -1;

     label5:
        r19 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        i4 = 0;

        r1 = interfaceinvoke r19.<android.os.storage.IStorageManager: android.os.storage.VolumeInfo[] getVolumes(int)>(0);

        i0 = lengthof r1;

     label6:
        if i4 >= i0 goto label9;

        r2 = r1[i4];

        if b3 == -1 goto label7;

        $i2 = virtualinvoke r2.<android.os.storage.VolumeInfo: int getType()>();

        if b3 != $i2 goto label8;

     label7:
        $i1 = virtualinvoke r2.<android.os.storage.VolumeInfo: int getState()>();

        r3 = staticinvoke <android.os.storage.VolumeInfo: java.lang.String getEnvironmentForState(int)>($i1);

        r20 = <java.lang.System: java.io.PrintStream out>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r2.<android.os.storage.VolumeInfo: java.lang.String getId()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = virtualinvoke r2.<android.os.storage.VolumeInfo: java.lang.String getFsUuid()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r20.<java.io.PrintStream: void println(java.lang.String)>($r17);

     label8:
        i4 = i4 + 1;

        goto label6;

     label9:
        return;
    }

    public void runMount() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        java.lang.String r1;
        android.os.storage.IStorageManager $r2;

        r0 := @this: com.android.commands.sm.Sm;

        r1 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        $r2 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void mount(java.lang.String)>(r1);

        return;
    }

    public void runPartition() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        java.lang.String r1, $r2, $r3, $r4, $r9, $r10, r14;
        int i0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r8;
        android.os.storage.IStorageManager $r11, $r12, $r13;

        r0 := @this: com.android.commands.sm.Sm;

        r14 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        r1 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        $r2 = "public";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r13 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r13.<android.os.storage.IStorageManager: void partitionPublic(java.lang.String)>(r14);

        goto label3;

     label1:
        $r3 = "private";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        $r12 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r12.<android.os.storage.IStorageManager: void partitionPrivate(java.lang.String)>(r14);

        goto label3;

     label2:
        $r4 = "mixed";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label4;

        $r10 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        $r11 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r11.<android.os.storage.IStorageManager: void partitionMixed(java.lang.String,int)>(r14, i0);

     label3:
        return;

     label4:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported partition type ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public void runSetEmulateFbe() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        boolean z0;
        android.os.storage.IStorageManager r1;
        java.lang.String $r2;
        byte b0;

        r0 := @this: com.android.commands.sm.Sm;

        $r2 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2);

        r1 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        if z0 == 0 goto label1;

        b0 = 4;

        goto label2;

     label1:
        b0 = 0;

     label2:
        interfaceinvoke r1.<android.os.storage.IStorageManager: void setDebugFlags(int,int)>(b0, 4);

        return;
    }

    public void runSetForceAdoptable() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        java.lang.String r1;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.os.storage.IStorageManager $r2, $r3, $r4;
        byte b1;

        r0 := @this: com.android.commands.sm.Sm;

        r1 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        $i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case 3551: goto label06;
            case 109935: goto label05;
            case 3569038: goto label04;
            case 97196323: goto label03;
            case 1544803905: goto label02;
            default: goto label01;
        };

     label01:
        goto label07;

     label02:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("default");

        if $z0 == 0 goto label01;

        b1 = 3;

        goto label08;

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z1 == 0 goto label01;

        b1 = 4;

        goto label08;

     label04:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z2 == 0 goto label01;

        b1 = 1;

        goto label08;

     label05:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z3 == 0 goto label01;

        b1 = 2;

        goto label08;

     label06:
        $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("on");

        if $z4 == 0 goto label01;

        b1 = 0;

        goto label08;

     label07:
        b1 = -1;

     label08:
        if b1 == 0 goto label11;

        if b1 == 1 goto label11;

        if b1 == 2 goto label10;

        if b1 == 3 goto label09;

        if b1 == 4 goto label09;

        goto label12;

     label09:
        $r4 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r4.<android.os.storage.IStorageManager: void setDebugFlags(int,int)>(0, 3);

        goto label12;

     label10:
        $r3 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r3.<android.os.storage.IStorageManager: void setDebugFlags(int,int)>(2, 3);

        goto label12;

     label11:
        $r2 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void setDebugFlags(int,int)>(1, 3);

     label12:
        return;
    }

    public void runSetSdcardfs() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;
        android.os.storage.IStorageManager $r2, $r3, $r4;
        int i0;
        byte b1;

        r0 := @this: com.android.commands.sm.Sm;

        r1 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        i0 = virtualinvoke r1.<java.lang.String: int hashCode()>();

        if i0 == 3551 goto label04;

        if i0 == 109935 goto label03;

        if i0 == 1544803905 goto label02;

     label01:
        goto label05;

     label02:
        $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("default");

        if $z2 == 0 goto label01;

        b1 = 2;

        goto label06;

     label03:
        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("off");

        if $z1 == 0 goto label01;

        b1 = 1;

        goto label06;

     label04:
        $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("on");

        if $z0 == 0 goto label01;

        b1 = 0;

        goto label06;

     label05:
        b1 = -1;

     label06:
        if b1 == 0 goto label09;

        if b1 == 1 goto label08;

        if b1 == 2 goto label07;

        goto label10;

     label07:
        $r4 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r4.<android.os.storage.IStorageManager: void setDebugFlags(int,int)>(0, 24);

        goto label10;

     label08:
        $r3 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r3.<android.os.storage.IStorageManager: void setDebugFlags(int,int)>(16, 24);

        goto label10;

     label09:
        $r2 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void setDebugFlags(int,int)>(8, 24);

     label10:
        return;
    }

    public void runSetVirtualDisk() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        boolean z0;
        android.os.storage.IStorageManager r1;
        java.lang.String $r2;
        byte b0;

        r0 := @this: com.android.commands.sm.Sm;

        $r2 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2);

        r1 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        if z0 == 0 goto label1;

        b0 = 32;

        goto label2;

     label1:
        b0 = 0;

     label2:
        interfaceinvoke r1.<android.os.storage.IStorageManager: void setDebugFlags(int,int)>(b0, 32);

        return;
    }

    public void runUnmount() throws android.os.RemoteException
    {
        com.android.commands.sm.Sm r0;
        java.lang.String r1;
        android.os.storage.IStorageManager $r2;

        r0 := @this: com.android.commands.sm.Sm;

        r1 = specialinvoke r0.<com.android.commands.sm.Sm: java.lang.String nextArg()>();

        $r2 = r0.<com.android.commands.sm.Sm: android.os.storage.IStorageManager mSm>;

        interfaceinvoke $r2.<android.os.storage.IStorageManager: void unmount(java.lang.String)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.commands.sm.Sm: java.lang.String TAG> = "Sm";

        return;
    }
}
