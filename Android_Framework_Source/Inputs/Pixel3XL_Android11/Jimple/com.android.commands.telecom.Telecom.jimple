public final class com.android.commands.telecom.Telecom extends com.android.internal.os.BaseCommand
{
    private static final java.lang.String COMMAND_ADD_OR_REMOVE_CALL_COMPANION_APP;
    private static final java.lang.String COMMAND_GET_DEFAULT_DIALER;
    private static final java.lang.String COMMAND_GET_MAX_PHONES;
    private static final java.lang.String COMMAND_GET_SIM_CONFIG;
    private static final java.lang.String COMMAND_GET_SYSTEM_DIALER;
    private static final java.lang.String COMMAND_REGISTER_PHONE_ACCOUNT;
    private static final java.lang.String COMMAND_REGISTER_SIM_PHONE_ACCOUNT;
    private static final java.lang.String COMMAND_SET_DEFAULT_DIALER;
    private static final java.lang.String COMMAND_SET_PHONE_ACCOUNT_DISABLED;
    private static final java.lang.String COMMAND_SET_PHONE_ACCOUNT_ENABLED;
    private static final java.lang.String COMMAND_SET_PHONE_ACCOUNT_SUGGESTION_COMPONENT;
    private static final java.lang.String COMMAND_SET_SIM_COUNT;
    private static final java.lang.String COMMAND_SET_SYSTEM_DIALER;
    private static final java.lang.String COMMAND_SET_TEST_CALL_REDIRECTION_APP;
    private static final java.lang.String COMMAND_SET_TEST_CALL_SCREENING_APP;
    private static final java.lang.String COMMAND_SET_TEST_EMERGENCY_PHONE_ACCOUNT_PACKAGE_FILTER;
    private static final java.lang.String COMMAND_SET_USER_SELECTED_OUTGOING_PHONE_ACCOUNT;
    private static final java.lang.String COMMAND_STOP_BLOCK_SUPPRESSION;
    private static final java.lang.String COMMAND_UNREGISTER_PHONE_ACCOUNT;
    private static final java.lang.String COMMAND_WAIT_ON_HANDLERS;
    private java.lang.String mAccountId;
    private android.content.ComponentName mComponent;
    private com.android.internal.telecom.ITelecomService mTelecomService;
    private android.telephony.TelephonyManager mTelephonyManager;
    private android.os.IUserManager mUserManager;

    public void <init>()
    {
        com.android.commands.telecom.Telecom r0;

        r0 := @this: com.android.commands.telecom.Telecom;

        specialinvoke r0.<com.android.internal.os.BaseCommand: void <init>()>();

        return;
    }

    private boolean callerIsRoot()
    {
        com.android.commands.telecom.Telecom r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.commands.telecom.Telecom;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        if $i0 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private android.telecom.PhoneAccountHandle getPhoneAccountHandleFromArgs() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        android.content.ComponentName r1;
        java.lang.String r2, $r5, $r6, $r15, r16;
        int i0, $i1;
        android.os.UserHandle r3;
        android.os.BasicShellCommandHandler $r4;
        boolean $z0;
        android.os.IUserManager $r7;
        android.telecom.PhoneAccountHandle $r8;
        java.lang.Throwable $r9;
        java.lang.Object[] $r10;
        java.lang.StringBuilder $r11;
        java.lang.IllegalArgumentException $r14;

        r0 := @this: com.android.commands.telecom.Telecom;

        $r4 = r0.<com.android.commands.telecom.Telecom: android.os.BasicShellCommandHandler mArgs>;

        $r5 = virtualinvoke $r4.<android.os.BasicShellCommandHandler: java.lang.String peekNextArg()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5);

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r6 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArgRequired()>();

        r1 = specialinvoke r0.<com.android.commands.telecom.Telecom: android.content.ComponentName parseComponentName(java.lang.String)>($r6);

        r16 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArgRequired()>();

        r2 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArgRequired()>();

     label2:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2);

        $r7 = r0.<com.android.commands.telecom.Telecom: android.os.IUserManager mUserManager>;

        $i1 = interfaceinvoke $r7.<android.os.IUserManager: int getUserHandle(int)>(i0);

        r3 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i1);

     label3:
        $r8 = new android.telecom.PhoneAccountHandle;

        specialinvoke $r8.<android.telecom.PhoneAccountHandle: void <init>(android.content.ComponentName,java.lang.String,android.os.UserHandle)>(r1, r16, r3);

        return $r8;

     label4:
        $r9 := @caughtexception;

        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = r2;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "getPhoneAccountHandleFromArgs - invalid user %s", $r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid user serial number ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r14;

        catch java.lang.NumberFormatException from label2 to label3 with label4;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        com.android.commands.telecom.Telecom $r1;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <android.app.ActivityThread: void initializeMainlineModules()>();

        $r1 = new com.android.commands.telecom.Telecom;

        specialinvoke $r1.<com.android.commands.telecom.Telecom: void <init>()>();

        virtualinvoke $r1.<com.android.commands.telecom.Telecom: void run(java.lang.String[])>(r0);

        return;
    }

    private android.content.ComponentName parseComponentName(java.lang.String)
    {
        com.android.commands.telecom.Telecom r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        android.content.ComponentName r7;

        r0 := @this: com.android.commands.telecom.Telecom;

        r1 := @parameter0: java.lang.String;

        r7 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r1);

        if r7 == null goto label1;

        return r7;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid component ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void runAddOrRemoveCallCompanionApp() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        java.lang.String r1, $r2, $r3;
        boolean z0;
        com.android.internal.telecom.ITelecomService $r4;

        r0 := @this: com.android.commands.telecom.Telecom;

        r1 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArgRequired()>();

        $r2 = "1";

        $r3 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArgRequired()>();

        z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        $r4 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r4.<com.android.internal.telecom.ITelecomService: void addOrRemoveTestCallCompanionApp(java.lang.String,boolean)>(r1, z0);

        return;
    }

    private void runGetDefaultDialer() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        com.android.internal.telecom.ITelecomService $r1;
        java.io.PrintStream $r2;
        java.lang.String $r3;

        r0 := @this: com.android.commands.telecom.Telecom;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        $r3 = interfaceinvoke $r1.<com.android.internal.telecom.ITelecomService: java.lang.String getDefaultDialerPackage()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return;
    }

    private void runGetMaxPhones() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        android.telephony.TelephonyManager $r1;
        java.io.PrintStream $r2;
        int $i0;

        r0 := @this: com.android.commands.telecom.Telecom;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = r0.<com.android.commands.telecom.Telecom: android.telephony.TelephonyManager mTelephonyManager>;

        $i0 = virtualinvoke $r1.<android.telephony.TelephonyManager: int getSupportedModemCount()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(int)>($i0);

        return;
    }

    private void runGetSimConfig() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        java.io.PrintStream $r1;
        java.util.Optional $r2;
        java.lang.Object $r3;
        java.lang.String $r4;

        r0 := @this: com.android.commands.telecom.Telecom;

        $r1 = <java.lang.System: java.io.PrintStream out>;

        $r2 = staticinvoke <android.sysprop.TelephonyProperties: java.util.Optional multi_sim_config()>();

        $r3 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>("");

        $r4 = (java.lang.String) $r3;

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r4);

        return;
    }

    private void runGetSystemDialer() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        com.android.internal.telecom.ITelecomService $r1;
        java.io.PrintStream $r2;
        java.lang.String $r3;

        r0 := @this: com.android.commands.telecom.Telecom;

        $r2 = <java.lang.System: java.io.PrintStream out>;

        $r1 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        $r3 = interfaceinvoke $r1.<com.android.internal.telecom.ITelecomService: java.lang.String getSystemDialerPackage()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r3);

        return;
    }

    private void runRegisterPhoneAccount() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        android.telecom.PhoneAccountHandle r1;
        java.io.PrintStream r2;
        java.lang.String $r3, $r11;
        android.telecom.PhoneAccount$Builder $r4, $r5;
        com.android.internal.telecom.ITelecomService $r6;
        java.lang.StringBuilder $r7;
        android.telecom.PhoneAccount r12;

        r0 := @this: com.android.commands.telecom.Telecom;

        r1 = specialinvoke r0.<com.android.commands.telecom.Telecom: android.telecom.PhoneAccountHandle getPhoneAccountHandleFromArgs()>();

        $r3 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArgRequired()>();

        $r4 = staticinvoke <android.telecom.PhoneAccount: android.telecom.PhoneAccount$Builder builder(android.telecom.PhoneAccountHandle,java.lang.CharSequence)>(r1, $r3);

        $r5 = virtualinvoke $r4.<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setCapabilities(int)>(2);

        r12 = virtualinvoke $r5.<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount build()>();

        $r6 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r6.<com.android.internal.telecom.ITelecomService: void registerPhoneAccount(android.telecom.PhoneAccount)>(r12);

        r2 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success - ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" registered.");

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r11);

        return;
    }

    private void runRegisterSimPhoneAccount() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        android.telecom.PhoneAccount$Builder $r1, $r3, $r5, $r6, $r7, $r8, $r9;
        android.net.Uri $r2, $r4;
        byte $b1, b3, b4;
        com.android.internal.telecom.ITelecomService $r10;
        java.lang.StringBuilder $r11;
        java.lang.String $r15, r16, r18, r19;
        int $i2;
        boolean $z0, z1;
        android.telecom.PhoneAccountHandle r17;
        android.telecom.PhoneAccount r20;
        java.io.PrintStream r21;

        r0 := @this: com.android.commands.telecom.Telecom;

        z1 = 0;

     label1:
        r16 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextOption()>();

        b3 = 0;

        if r16 == null goto label8;

        $i2 = virtualinvoke r16.<java.lang.String: int hashCode()>();

        if $i2 == 1496 goto label3;

     label2:
        goto label4;

     label3:
        $z0 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>("-e");

        if $z0 == 0 goto label2;

        goto label5;

     label4:
        b3 = -1;

     label5:
        if b3 == 0 goto label6;

        goto label7;

     label6:
        z1 = 1;

     label7:
        goto label1;

     label8:
        r17 = specialinvoke r0.<com.android.commands.telecom.Telecom: android.telecom.PhoneAccountHandle getPhoneAccountHandleFromArgs()>();

        r18 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArgRequired()>();

        r19 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArgRequired()>();

        b4 = 0;

        if z1 == 0 goto label9;

        b4 = 16;

     label9:
        $r1 = staticinvoke <android.telecom.PhoneAccount: android.telecom.PhoneAccount$Builder builder(android.telecom.PhoneAccountHandle,java.lang.CharSequence)>(r17, r18);

        $r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r19);

        $r3 = virtualinvoke $r1.<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setAddress(android.net.Uri)>($r2);

        $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r19);

        $r5 = virtualinvoke $r3.<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setSubscriptionAddress(android.net.Uri)>($r4);

        $b1 = b4 | 6;

        $r6 = virtualinvoke $r5.<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setCapabilities(int)>($b1);

        $r7 = virtualinvoke $r6.<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder setShortDescription(java.lang.CharSequence)>(r18);

        $r8 = virtualinvoke $r7.<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder addSupportedUriScheme(java.lang.String)>("tel");

        $r9 = virtualinvoke $r8.<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount$Builder addSupportedUriScheme(java.lang.String)>("voicemail");

        r20 = virtualinvoke $r9.<android.telecom.PhoneAccount$Builder: android.telecom.PhoneAccount build()>();

        $r10 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r10.<com.android.internal.telecom.ITelecomService: void registerPhoneAccount(android.telecom.PhoneAccount)>(r20);

        r21 = <java.lang.System: java.io.PrintStream out>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success - ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" registered.");

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r21.<java.io.PrintStream: void println(java.lang.String)>($r15);

        return;
    }

    private void runSetDefaultDialer() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        java.io.PrintStream r1;
        java.lang.String $r2, $r8, r9, r10;
        boolean $z0;
        com.android.internal.telecom.ITelecomService $r3;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.commands.telecom.Telecom;

        r9 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArg()>();

        r10 = r9;

        $r2 = "default";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r9);

        if $z0 == 0 goto label1;

        r10 = null;

     label1:
        $r3 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r3.<com.android.internal.telecom.ITelecomService: void setTestDefaultDialer(java.lang.String)>(r10);

        r1 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success - ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" set as override default dialer.");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r8);

        return;
    }

    private void runSetEmergencyPhoneAccountPackageFilter() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        java.lang.String r1, $r9;
        java.io.PrintStream r2, $r11;
        android.os.BasicShellCommandHandler $r4;
        boolean $z0;
        com.android.internal.telecom.ITelecomService $r5, $r10;
        java.lang.StringBuilder $r6;

        r0 := @this: com.android.commands.telecom.Telecom;

        $r4 = r0.<com.android.commands.telecom.Telecom: android.os.BasicShellCommandHandler mArgs>;

        r1 = virtualinvoke $r4.<android.os.BasicShellCommandHandler: java.lang.String getNextArg()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label1;

        $r10 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r10.<com.android.internal.telecom.ITelecomService: void setTestEmergencyPhoneAccountPackageNameFilter(java.lang.String)>(null);

        $r11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Success - filter cleared");

        goto label2;

     label1:
        $r5 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r5.<com.android.internal.telecom.ITelecomService: void setTestEmergencyPhoneAccountPackageNameFilter(java.lang.String)>(r1);

        r2 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success = filter set to ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label2:
        return;
    }

    private void runSetPhoneAccountEnabled(boolean) throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        boolean z0, $z1;
        com.android.internal.telecom.ITelecomService $r1;
        java.lang.StringBuilder $r2, $r7;
        java.lang.String $r6, $r11, r15;
        android.telecom.PhoneAccountHandle r12;
        java.io.PrintStream r13, r16;

        r0 := @this: com.android.commands.telecom.Telecom;

        z0 := @parameter0: boolean;

        r12 = specialinvoke r0.<com.android.commands.telecom.Telecom: android.telecom.PhoneAccountHandle getPhoneAccountHandleFromArgs()>();

        $r1 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        $z1 = interfaceinvoke $r1.<com.android.internal.telecom.ITelecomService: boolean enablePhoneAccount(android.telecom.PhoneAccountHandle,boolean)>(r12, z0);

        if $z1 == 0 goto label3;

        r13 = <java.lang.System: java.io.PrintStream out>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success - ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        if z0 == 0 goto label1;

        r15 = " enabled.";

        goto label2;

     label1:
        r15 = " disabled.";

     label2:
        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r13.<java.io.PrintStream: void println(java.lang.String)>($r11);

        goto label4;

     label3:
        r16 = <java.lang.System: java.io.PrintStream out>;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error - is ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" a valid PhoneAccount?");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r16.<java.io.PrintStream: void println(java.lang.String)>($r6);

     label4:
        return;
    }

    private void runSetSimCount() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        int i0;
        java.io.PrintStream r1, $r10;
        boolean $z0;
        java.lang.String $r3, $r8;
        java.lang.StringBuilder $r4;
        android.telephony.TelephonyManager $r9;

        r0 := @this: com.android.commands.telecom.Telecom;

        $z0 = specialinvoke r0.<com.android.commands.telecom.Telecom: boolean callerIsRoot()>();

        if $z0 != 0 goto label1;

        $r10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>("set-sim-count requires adb root");

        return;

     label1:
        $r3 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArgRequired()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        r1 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting sim count to ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Device may reboot");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r8);

        $r9 = r0.<com.android.commands.telecom.Telecom: android.telephony.TelephonyManager mTelephonyManager>;

        virtualinvoke $r9.<android.telephony.TelephonyManager: void switchMultiSimConfig(int)>(i0);

        return;
    }

    private void runSetSystemDialer() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        java.io.PrintStream r1;
        boolean $z0;
        com.android.internal.telecom.ITelecomService $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r8, r9;
        android.content.ComponentName r10;

        r0 := @this: com.android.commands.telecom.Telecom;

        r9 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArg()>();

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("default");

        if $z0 == 0 goto label1;

        r10 = null;

        goto label2;

     label1:
        r10 = specialinvoke r0.<com.android.commands.telecom.Telecom: android.content.ComponentName parseComponentName(java.lang.String)>(r9);

     label2:
        $r3 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r3.<com.android.internal.telecom.ITelecomService: void setSystemDialer(android.content.ComponentName)>(r10);

        r1 = <java.lang.System: java.io.PrintStream out>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success - ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" set as override system dialer.");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>($r8);

        return;
    }

    private void runSetTestCallRedirectionApp() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        java.lang.String r1;
        com.android.internal.telecom.ITelecomService $r2;

        r0 := @this: com.android.commands.telecom.Telecom;

        r1 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArg()>();

        $r2 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r2.<com.android.internal.telecom.ITelecomService: void setTestDefaultCallRedirectionApp(java.lang.String)>(r1);

        return;
    }

    private void runSetTestCallScreeningApp() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        java.lang.String r1;
        com.android.internal.telecom.ITelecomService $r2;

        r0 := @this: com.android.commands.telecom.Telecom;

        r1 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArg()>();

        $r2 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r2.<com.android.internal.telecom.ITelecomService: void setTestDefaultCallScreeningApp(java.lang.String)>(r1);

        return;
    }

    private void runSetTestPhoneAcctSuggestionComponent() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        java.lang.String r1;
        com.android.internal.telecom.ITelecomService $r2;

        r0 := @this: com.android.commands.telecom.Telecom;

        r1 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArg()>();

        $r2 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r2.<com.android.internal.telecom.ITelecomService: void setTestPhoneAcctSuggestionComponent(java.lang.String)>(r1);

        return;
    }

    private void runSetUserSelectedOutgoingPhoneAccount() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        android.telecom.PhoneAccountHandle r1;
        java.io.PrintStream r2;
        java.lang.Object[] $r4;
        com.android.internal.telecom.ITelecomService $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r10;

        r0 := @this: com.android.commands.telecom.Telecom;

        $r4 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "runSetUserSelectedOutgoingPhoneAccount", $r4);

        r1 = specialinvoke r0.<com.android.commands.telecom.Telecom: android.telecom.PhoneAccountHandle getPhoneAccountHandleFromArgs()>();

        $r5 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r5.<com.android.internal.telecom.ITelecomService: void setUserSelectedOutgoingPhoneAccount(android.telecom.PhoneAccountHandle)>(r1);

        r2 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success - ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" set as default outgoing account.");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r10);

        return;
    }

    private void runStopBlockSuppression() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        com.android.internal.telecom.ITelecomService $r1;

        r0 := @this: com.android.commands.telecom.Telecom;

        $r1 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r1.<com.android.internal.telecom.ITelecomService: void stopBlockSuppression()>();

        return;
    }

    private void runUnregisterPhoneAccount() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;
        android.telecom.PhoneAccountHandle r1;
        java.io.PrintStream r2;
        com.android.internal.telecom.ITelecomService $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r9;

        r0 := @this: com.android.commands.telecom.Telecom;

        r1 = specialinvoke r0.<com.android.commands.telecom.Telecom: android.telecom.PhoneAccountHandle getPhoneAccountHandleFromArgs()>();

        $r4 = r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService>;

        interfaceinvoke $r4.<com.android.internal.telecom.ITelecomService: void unregisterPhoneAccount(android.telecom.PhoneAccountHandle)>(r1);

        r2 = <java.lang.System: java.io.PrintStream out>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Success - ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" unregistered.");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintStream: void println(java.lang.String)>($r9);

        return;
    }

    private void runWaitOnHandler() throws android.os.RemoteException
    {
        com.android.commands.telecom.Telecom r0;

        r0 := @this: com.android.commands.telecom.Telecom;

        return;
    }

    public void onRun() throws java.lang.Exception
    {
        com.android.commands.telecom.Telecom r0;
        android.os.IBinder $r2, $r6;
        android.app.ActivityThread $r3;
        android.app.ContextImpl $r4;
        java.lang.Object $r5;
        java.lang.Object[] $r7, $r8, $r15, $r16, $r17;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        java.lang.StringBuilder $r9;
        java.lang.IllegalArgumentException $r13;
        java.lang.String $r14, r21;
        com.android.internal.telecom.ITelecomService r18;
        android.telephony.TelephonyManager r19;
        android.os.IUserManager r20;
        byte b1;

        r0 := @this: com.android.commands.telecom.Telecom;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("telecom");

        r18 = staticinvoke <com.android.internal.telecom.ITelecomService$Stub: com.android.internal.telecom.ITelecomService asInterface(android.os.IBinder)>($r2);

        r0.<com.android.commands.telecom.Telecom: com.android.internal.telecom.ITelecomService mTelecomService> = r18;

        if r18 != null goto label01;

        $r17 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "onRun: Can\'t access telecom manager.", $r17);

        virtualinvoke r0.<com.android.commands.telecom.Telecom: void showError(java.lang.String)>("Error: Could not access the Telecom Manager. Is the system running?");

        return;

     label01:
        staticinvoke <android.os.Looper: void prepareMainLooper()>();

        $r3 = staticinvoke <android.app.ActivityThread: android.app.ActivityThread systemMain()>();

        $r4 = virtualinvoke $r3.<android.app.ActivityThread: android.app.ContextImpl getSystemContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/telephony/TelephonyManager;");

        r19 = (android.telephony.TelephonyManager) $r5;

        r0.<com.android.commands.telecom.Telecom: android.telephony.TelephonyManager mTelephonyManager> = r19;

        if r19 != null goto label02;

        $r16 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "onRun: Can\'t access telephony service.", $r16);

        virtualinvoke r0.<com.android.commands.telecom.Telecom: void showError(java.lang.String)>("Error: Could not access the Telephony Service. Is the system running?");

        return;

     label02:
        $r6 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("user");

        r20 = staticinvoke <android.os.IUserManager$Stub: android.os.IUserManager asInterface(android.os.IBinder)>($r6);

        r0.<com.android.commands.telecom.Telecom: android.os.IUserManager mUserManager> = r20;

        if r20 != null goto label03;

        $r15 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "onRun: Can\'t access user manager.", $r15);

        virtualinvoke r0.<com.android.commands.telecom.Telecom: void showError(java.lang.String)>("Error: Could not access the User Manager. Is the system running?");

        return;

     label03:
        $r7 = newarray (java.lang.Object)[0];

        staticinvoke <android.telecom.Log: void i(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "onRun: parsing command.", $r7);

        r21 = virtualinvoke r0.<com.android.commands.telecom.Telecom: java.lang.String nextArgRequired()>();

        b1 = -1;

        $i0 = virtualinvoke r21.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -2056063960: goto label24;
            case -2025240323: goto label23;
            case -1889448385: goto label22;
            case -1763366875: goto label21;
            case -1763082020: goto label20;
            case -1721798936: goto label19;
            case -1525813010: goto label18;
            case -1447595602: goto label17;
            case -1190343856: goto label16;
            case -853897535: goto label15;
            case -645705193: goto label14;
            case -529505461: goto label13;
            case -250191036: goto label12;
            case -55640960: goto label11;
            case 86724198: goto label10;
            case 864392692: goto label09;
            case 1367516458: goto label08;
            case 1715956687: goto label07;
            case 2034443044: goto label06;
            case 2081437924: goto label05;
            default: goto label04;
        };

     label04:
        goto label25;

     label05:
        $z0 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("set-phone-acct-suggestion-component");

        if $z0 == 0 goto label04;

        b1 = 6;

        goto label25;

     label06:
        $z1 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("register-phone-account");

        if $z1 == 0 goto label04;

        b1 = 2;

        goto label25;

     label07:
        $z2 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("get-sim-config");

        if $z2 == 0 goto label04;

        b1 = 17;

        goto label25;

     label08:
        $z3 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("set-test-emergency-phone-account-package-filter");

        if $z3 == 0 goto label04;

        b1 = 19;

        goto label25;

     label09:
        $z4 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("set-default-dialer");

        if $z4 == 0 goto label04;

        b1 = 11;

        goto label25;

     label10:
        $z5 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("set-phone-account-disabled");

        if $z5 == 0 goto label04;

        b1 = 1;

        goto label25;

     label11:
        $z6 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("get-default-dialer");

        if $z6 == 0 goto label04;

        b1 = 12;

        goto label25;

     label12:
        $z7 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("get-system-dialer");

        if $z7 == 0 goto label04;

        b1 = 14;

        goto label25;

     label13:
        $z8 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("set-test-call-screening-app");

        if $z8 == 0 goto label04;

        b1 = 4;

        goto label25;

     label14:
        $z9 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("set-phone-account-enabled");

        if $z9 == 0 goto label04;

        b1 = 0;

        goto label25;

     label15:
        $z10 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("set-test-call-redirection-app");

        if $z10 == 0 goto label04;

        b1 = 3;

        goto label25;

     label16:
        $z11 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("set-system-dialer");

        if $z11 == 0 goto label04;

        b1 = 13;

        goto label25;

     label17:
        $z12 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("register-sim-phone-account");

        if $z12 == 0 goto label04;

        b1 = 7;

        goto label25;

     label18:
        $z13 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("set-sim-count");

        if $z13 == 0 goto label04;

        b1 = 16;

        goto label25;

     label19:
        $z14 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("stop-block-suppression");

        if $z14 == 0 goto label04;

        b1 = 10;

        goto label25;

     label20:
        $z15 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("add-or-remove-call-companion-app");

        if $z15 == 0 goto label04;

        b1 = 5;

        goto label25;

     label21:
        $z16 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("get-max-phones");

        if $z16 == 0 goto label04;

        b1 = 18;

        goto label25;

     label22:
        $z17 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("wait-on-handlers");

        if $z17 == 0 goto label04;

        b1 = 15;

        goto label25;

     label23:
        $z18 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("unregister-phone-account");

        if $z18 == 0 goto label04;

        b1 = 9;

        goto label25;

     label24:
        $z19 = virtualinvoke r21.<java.lang.String: boolean equals(java.lang.Object)>("set-user-selected-outgoing-phone-account");

        if $z19 == 0 goto label04;

        b1 = 8;

     label25:
        tableswitch(b1)
        {
            case 0: goto label46;
            case 1: goto label45;
            case 2: goto label44;
            case 3: goto label43;
            case 4: goto label42;
            case 5: goto label41;
            case 6: goto label40;
            case 7: goto label39;
            case 8: goto label38;
            case 9: goto label37;
            case 10: goto label36;
            case 11: goto label35;
            case 12: goto label34;
            case 13: goto label33;
            case 14: goto label32;
            case 15: goto label31;
            case 16: goto label30;
            case 17: goto label29;
            case 18: goto label28;
            case 19: goto label27;
            default: goto label26;
        };

     label26:
        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r21;

        staticinvoke <android.telecom.Log: void w(java.lang.Object,java.lang.String,java.lang.Object[])>(r0, "onRun: unknown command: %s", $r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown command \'");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r13 = new java.lang.IllegalArgumentException;

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label27:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runSetEmergencyPhoneAccountPackageFilter()>();

        goto label47;

     label28:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runGetMaxPhones()>();

        goto label47;

     label29:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runGetSimConfig()>();

        goto label47;

     label30:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runSetSimCount()>();

        goto label47;

     label31:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runWaitOnHandler()>();

        goto label47;

     label32:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runGetSystemDialer()>();

        goto label47;

     label33:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runSetSystemDialer()>();

        goto label47;

     label34:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runGetDefaultDialer()>();

        goto label47;

     label35:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runSetDefaultDialer()>();

        goto label47;

     label36:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runStopBlockSuppression()>();

        goto label47;

     label37:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runUnregisterPhoneAccount()>();

        goto label47;

     label38:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runSetUserSelectedOutgoingPhoneAccount()>();

        goto label47;

     label39:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runRegisterSimPhoneAccount()>();

        goto label47;

     label40:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runSetTestPhoneAcctSuggestionComponent()>();

        goto label47;

     label41:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runAddOrRemoveCallCompanionApp()>();

        goto label47;

     label42:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runSetTestCallScreeningApp()>();

        goto label47;

     label43:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runSetTestCallRedirectionApp()>();

        goto label47;

     label44:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runRegisterPhoneAccount()>();

        goto label47;

     label45:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runSetPhoneAccountEnabled(boolean)>(0);

        goto label47;

     label46:
        specialinvoke r0.<com.android.commands.telecom.Telecom: void runSetPhoneAccountEnabled(boolean)>(1);

     label47:
        return;
    }

    public void onShowUsage(java.io.PrintStream)
    {
        com.android.commands.telecom.Telecom r0;
        java.io.PrintStream r1;

        r0 := @this: com.android.commands.telecom.Telecom;

        r1 := @parameter0: java.io.PrintStream;

        virtualinvoke r1.<java.io.PrintStream: void println(java.lang.String)>("usage: telecom [subcommand] [options]\nusage: telecom set-phone-account-enabled <COMPONENT> <ID> <USER_SN>\nusage: telecom set-phone-account-disabled <COMPONENT> <ID> <USER_SN>\nusage: telecom register-phone-account <COMPONENT> <ID> <USER_SN> <LABEL>\nusage: telecom register-sim-phone-account [-e] <COMPONENT> <ID> <USER_SN> <LABEL>: registers a PhoneAccount with CAPABILITY_SIM_SUBSCRIPTION and optionally CAPABILITY_PLACE_EMERGENCY_CALLS if \"-e\" is provided\nusage: telecom set-user-selected-outgoing-phone-account [-e] <COMPONENT> <ID> <USER_SN>\nusage: telecom set-test-call-redirection-app <PACKAGE>\nusage: telecom set-test-call-screening-app <PACKAGE>\nusage: telecom set-phone-acct-suggestion-component <COMPONENT>\nusage: telecom add-or-remove-call-companion-app <PACKAGE> <1/0>\nusage: telecom register-sim-phone-account <COMPONENT> <ID> <USER_SN> <LABEL> <ADDRESS>\nusage: telecom unregister-phone-account <COMPONENT> <ID> <USER_SN>\nusage: telecom set-default-dialer <PACKAGE>\nusage: telecom get-default-dialer\nusage: telecom get-system-dialer\nusage: telecom wait-on-handlers\nusage: telecom set-sim-count <COUNT>\nusage: telecom get-sim-config\nusage: telecom get-max-phones\nusage: telecom stop-block-suppression: Stop suppressing the blocked number provider after a call to emergency services.\nusage: telecom set-emer-phone-account-filter <PACKAGE>\n\ntelecom set-phone-account-enabled: Enables the given phone account, if it has already been registered with Telecom.\n\ntelecom set-phone-account-disabled: Disables the given phone account, if it has already been registered with telecom.\n\ntelecom set-default-dialer: Sets the override default dialer to the given component; this will override whatever the dialer role is set to.\n\ntelecom get-default-dialer: Displays the current default dialer.\n\ntelecom get-system-dialer: Displays the current system dialer.\ntelecom set-system-dialer: Set the override system dialer to the given component. To remove the override, send \"default\"\n\ntelecom wait-on-handlers: Wait until all handlers finish their work.\n\ntelecom set-sim-count: Set num SIMs (2 for DSDS, 1 for single SIM. This may restart the device.\n\ntelecom get-sim-config: Get the mSIM config string. \"DSDS\" for DSDS mode, or \"\" for single SIM\n\ntelecom get-max-phones: Get the max supported phones from the modem.\ntelecom set-test-emergency-phone-account-package-filter <PACKAGE>: sets a package name that will be used for test emergency calls. To clear, send an empty package name. Real emergency calls will still be placed over Telephony.\n");

        return;
    }

    public static void <clinit>()
    {
        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_WAIT_ON_HANDLERS> = "wait-on-handlers";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_UNREGISTER_PHONE_ACCOUNT> = "unregister-phone-account";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_STOP_BLOCK_SUPPRESSION> = "stop-block-suppression";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_SET_USER_SELECTED_OUTGOING_PHONE_ACCOUNT> = "set-user-selected-outgoing-phone-account";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_SET_TEST_EMERGENCY_PHONE_ACCOUNT_PACKAGE_FILTER> = "set-test-emergency-phone-account-package-filter";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_SET_TEST_CALL_SCREENING_APP> = "set-test-call-screening-app";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_SET_TEST_CALL_REDIRECTION_APP> = "set-test-call-redirection-app";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_SET_SYSTEM_DIALER> = "set-system-dialer";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_SET_SIM_COUNT> = "set-sim-count";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_SET_PHONE_ACCOUNT_SUGGESTION_COMPONENT> = "set-phone-acct-suggestion-component";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_SET_PHONE_ACCOUNT_ENABLED> = "set-phone-account-enabled";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_SET_PHONE_ACCOUNT_DISABLED> = "set-phone-account-disabled";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_SET_DEFAULT_DIALER> = "set-default-dialer";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_REGISTER_SIM_PHONE_ACCOUNT> = "register-sim-phone-account";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_REGISTER_PHONE_ACCOUNT> = "register-phone-account";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_GET_SYSTEM_DIALER> = "get-system-dialer";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_GET_SIM_CONFIG> = "get-sim-config";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_GET_MAX_PHONES> = "get-max-phones";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_GET_DEFAULT_DIALER> = "get-default-dialer";

        <com.android.commands.telecom.Telecom: java.lang.String COMMAND_ADD_OR_REMOVE_CALL_COMPANION_APP> = "add-or-remove-call-companion-app";

        return;
    }
}
