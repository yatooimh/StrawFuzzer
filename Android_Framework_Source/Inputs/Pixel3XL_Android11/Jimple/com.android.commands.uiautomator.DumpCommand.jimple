public class com.android.commands.uiautomator.DumpCommand extends com.android.commands.uiautomator.Launcher$Command
{
    private static final java.io.File DEFAULT_DUMP_FILE;

    static void <clinit>()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getLegacyExternalStorageDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "window_dump.xml");

        <com.android.commands.uiautomator.DumpCommand: java.io.File DEFAULT_DUMP_FILE> = $r0;

        return;
    }

    public void <init>()
    {
        com.android.commands.uiautomator.DumpCommand r0;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        specialinvoke r0.<com.android.commands.uiautomator.Launcher$Command: void <init>(java.lang.String)>("dump");

        return;
    }

    public java.lang.String detailedOptions()
    {
        com.android.commands.uiautomator.DumpCommand r0;
        java.lang.StringBuilder $r2;
        java.io.File $r4;
        java.lang.String $r5, $r8;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    dump [--verbose][file]\n      [--compressed]: dumps compressed layout information.\n      [file]: the location where the dumped XML should be stored, default is\n      ");

        $r4 = <com.android.commands.uiautomator.DumpCommand: java.io.File DEFAULT_DUMP_FILE>;

        $r5 = virtualinvoke $r4.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public void run(java.lang.String[])
    {
        com.android.commands.uiautomator.DumpCommand r0;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        android.view.accessibility.AccessibilityNodeInfo r1;
        com.android.uiautomator.core.UiAutomationShellWrapper $r2;
        android.hardware.display.DisplayManagerGlobal $r3, $r10;
        java.lang.Object[] $r4;
        java.io.PrintStream $r5, $r8, $r14;
        java.lang.String $r6, $r7, r17;
        android.util.SparseArray $r9;
        boolean $z0, $z1, $z2, z3, z4, z5, z6;
        java.io.File $r11, r16;
        java.lang.Throwable $r12, $r13;
        java.lang.String[] r15;
        android.app.UiAutomation r19;
        android.accessibilityservice.AccessibilityServiceInfo r20;
        android.view.Display r21;
        android.graphics.Point r22;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        r15 := @parameter0: java.lang.String[];

        r16 = <com.android.commands.uiautomator.DumpCommand: java.io.File DEFAULT_DUMP_FILE>;

        z3 = 1;

        z4 = 0;

        i0 = lengthof r15;

        i5 = 0;

     label01:
        if i5 >= i0 goto label05;

        r17 = r15[i5];

        $z0 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("--compressed");

        if $z0 == 0 goto label02;

        z5 = 0;

        z6 = z4;

        goto label04;

     label02:
        $z1 = virtualinvoke r17.<java.lang.String: boolean equals(java.lang.Object)>("--windows");

        if $z1 == 0 goto label03;

        z6 = 1;

        z5 = z3;

        goto label04;

     label03:
        z5 = z3;

        z6 = z4;

        $z2 = virtualinvoke r17.<java.lang.String: boolean startsWith(java.lang.String)>("-");

        if $z2 != 0 goto label04;

        $r11 = new java.io.File;

        specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>(r17);

        r16 = $r11;

        z6 = z4;

        z5 = z3;

     label04:
        i5 = i5 + 1;

        z3 = z5;

        z4 = z6;

        goto label01;

     label05:
        $r2 = new com.android.uiautomator.core.UiAutomationShellWrapper;

        specialinvoke $r2.<com.android.uiautomator.core.UiAutomationShellWrapper: void <init>()>();

        virtualinvoke $r2.<com.android.uiautomator.core.UiAutomationShellWrapper: void connect()>();

        if z3 == 0 goto label06;

        virtualinvoke $r2.<com.android.uiautomator.core.UiAutomationShellWrapper: void setCompressedLayoutHierarchy(boolean)>(0);

        goto label07;

     label06:
        virtualinvoke $r2.<com.android.uiautomator.core.UiAutomationShellWrapper: void setCompressedLayoutHierarchy(boolean)>(1);

     label07:
        r19 = virtualinvoke $r2.<com.android.uiautomator.core.UiAutomationShellWrapper: android.app.UiAutomation getUiAutomation()>();

        virtualinvoke r19.<android.app.UiAutomation: void waitForIdle(long,long)>(1000L, 10000L);

     label08:
        if z4 == 0 goto label12;

     label09:
        r20 = virtualinvoke r19.<android.app.UiAutomation: android.accessibilityservice.AccessibilityServiceInfo getServiceInfo()>();

        $i3 = r20.<android.accessibilityservice.AccessibilityServiceInfo: int flags>;

        $i4 = $i3 | 64;

        r20.<android.accessibilityservice.AccessibilityServiceInfo: int flags> = $i4;

        virtualinvoke r19.<android.app.UiAutomation: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>(r20);

     label10:
        $r9 = virtualinvoke r19.<android.app.UiAutomation: android.util.SparseArray getWindowsOnAllDisplays()>();

        $r10 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowsToFile(android.util.SparseArray,java.io.File,android.hardware.display.DisplayManagerGlobal)>($r9, r16, $r10);

     label11:
        goto label17;

     label12:
        r1 = virtualinvoke r19.<android.app.UiAutomation: android.view.accessibility.AccessibilityNodeInfo getRootInActiveWindow()>();

     label13:
        if r1 != null goto label16;

     label14:
        $r8 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("ERROR: null root node returned by UiTestAutomationBridge.");

     label15:
        virtualinvoke $r2.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        return;

     label16:
        $r3 = staticinvoke <android.hardware.display.DisplayManagerGlobal: android.hardware.display.DisplayManagerGlobal getInstance()>();

        r21 = virtualinvoke $r3.<android.hardware.display.DisplayManagerGlobal: android.view.Display getRealDisplay(int)>(0);

        i6 = virtualinvoke r21.<android.view.Display: int getRotation()>();

        r22 = new android.graphics.Point;

        specialinvoke r22.<android.graphics.Point: void <init>()>();

        virtualinvoke r21.<android.view.Display: void getSize(android.graphics.Point)>(r22);

        $i2 = r22.<android.graphics.Point: int x>;

        $i1 = r22.<android.graphics.Point: int y>;

        staticinvoke <com.android.uiautomator.core.AccessibilityNodeInfoDumper: void dumpWindowToFile(android.view.accessibility.AccessibilityNodeInfo,java.io.File,int,int,int)>(r1, r16, i6, $i2, $i1);

     label17:
        virtualinvoke $r2.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        $r5 = <java.lang.System: java.io.PrintStream out>;

        $r4 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r16.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4[0] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("UI hierchary dumped to: %s", $r4);

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r7);

        return;

     label18:
        $r12 := @caughtexception;

        goto label22;

     label19:
        $r13 := @caughtexception;

     label20:
        $r14 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>("ERROR: could not get idle state.");

     label21:
        virtualinvoke $r2.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        return;

     label22:
        virtualinvoke $r2.<com.android.uiautomator.core.UiAutomationShellWrapper: void disconnect()>();

        throw $r12;

        catch java.util.concurrent.TimeoutException from label07 to label08 with label19;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.util.concurrent.TimeoutException from label09 to label10 with label19;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.util.concurrent.TimeoutException from label10 to label11 with label19;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.util.concurrent.TimeoutException from label12 to label13 with label19;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.util.concurrent.TimeoutException from label14 to label15 with label19;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.util.concurrent.TimeoutException from label16 to label17 with label19;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label20 to label21 with label18;
    }

    public java.lang.String shortHelp()
    {
        com.android.commands.uiautomator.DumpCommand r0;

        r0 := @this: com.android.commands.uiautomator.DumpCommand;

        return "creates an XML dump of current UI hierarchy";
    }
}
