public class com.android.commands.uiautomator.RunTestCommand extends com.android.commands.uiautomator.Launcher$Command
{
    private static final int ARG_FAIL_INCOMPLETE_C;
    private static final int ARG_FAIL_INCOMPLETE_E;
    private static final int ARG_FAIL_NO_CLASS;
    private static final int ARG_FAIL_RUNNER;
    private static final int ARG_FAIL_UNSUPPORTED;
    private static final int ARG_OK;
    private static final java.lang.String CLASS_PARAM;
    private static final java.lang.String CLASS_SEPARATOR;
    private static final java.lang.String DEBUG_PARAM;
    private static final java.lang.String JARS_PARAM;
    private static final java.lang.String JARS_SEPARATOR;
    private static final java.lang.String LOGTAG;
    private static final java.lang.String OUTPUT_FORMAT_KEY;
    private static final java.lang.String OUTPUT_SIMPLE;
    private static final java.lang.String RUNNER_PARAM;
    private boolean mDebug;
    private boolean mMonkey;
    private final android.os.Bundle mParams;
    private com.android.uiautomator.testrunner.UiAutomatorTestRunner mRunner;
    private java.lang.String mRunnerClassName;
    private final java.util.List mTestClasses;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String RUNNER_PARAM> = "runner";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String OUTPUT_SIMPLE> = "simple";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String OUTPUT_FORMAT_KEY> = "outputFormat";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String JARS_SEPARATOR> = ":";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String JARS_PARAM> = "jars";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String DEBUG_PARAM> = "debug";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String CLASS_SEPARATOR> = ",";

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String CLASS_PARAM> = "class";

        <com.android.commands.uiautomator.RunTestCommand: int ARG_OK> = 0;

        <com.android.commands.uiautomator.RunTestCommand: int ARG_FAIL_UNSUPPORTED> = -99;

        <com.android.commands.uiautomator.RunTestCommand: int ARG_FAIL_RUNNER> = -4;

        <com.android.commands.uiautomator.RunTestCommand: int ARG_FAIL_NO_CLASS> = -3;

        <com.android.commands.uiautomator.RunTestCommand: int ARG_FAIL_INCOMPLETE_E> = -1;

        <com.android.commands.uiautomator.RunTestCommand: int ARG_FAIL_INCOMPLETE_C> = -2;

        $r0 = class "Lcom/android/commands/uiautomator/RunTestCommand;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.commands.uiautomator.RunTestCommand: java.lang.String LOGTAG> = $r1;

        return;
    }

    public void <init>()
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        android.os.Bundle $r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        specialinvoke r0.<com.android.commands.uiautomator.Launcher$Command: void <init>(java.lang.String)>("runtest");

        $r1 = new android.os.Bundle;

        specialinvoke $r1.<android.os.Bundle: void <init>()>();

        r0.<com.android.commands.uiautomator.RunTestCommand: android.os.Bundle mParams> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses> = $r2;

        r0.<com.android.commands.uiautomator.RunTestCommand: boolean mMonkey> = 0;

        return;
    }

    private void addTestClasses(java.lang.String)
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        int i0, i1;
        java.lang.String r1, r3;
        java.util.List $r2;
        java.lang.String[] r4;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        r3 := @parameter0: java.lang.String;

        r4 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r1 = r4[i1];

        $r2 = r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void addTestClassesFromJars()
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        int i0, i2;
        java.lang.String r1, $r5, $r10, $r11, $r12, r13, r15;
        java.util.Enumeration r3;
        android.os.Bundle $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6;
        java.util.List $r7;
        java.lang.Throwable $r8;
        java.lang.Object[] $r9;
        java.lang.String[] r14;
        dalvik.system.DexFile r17;
        java.io.IOException r18;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        $r4 = r0.<com.android.commands.uiautomator.RunTestCommand: android.os.Bundle mParams>;

        r13 = virtualinvoke $r4.<android.os.Bundle: java.lang.String getString(java.lang.String)>("jars");

        if r13 != null goto label01;

        return;

     label01:
        r14 = virtualinvoke r13.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        i0 = lengthof r14;

        i2 = 0;

     label02:
        if i2 >= i0 goto label10;

        $r5 = r14[i2];

        r1 = virtualinvoke $r5.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label03;

        goto label09;

     label03:
        r17 = new dalvik.system.DexFile;

        specialinvoke r17.<dalvik.system.DexFile: void <init>(java.lang.String)>(r1);

        r3 = virtualinvoke r17.<dalvik.system.DexFile: java.util.Enumeration entries()>();

     label04:
        $z1 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label06;

        $r6 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r15 = (java.lang.String) $r6;

        $z2 = specialinvoke r0.<com.android.commands.uiautomator.RunTestCommand: boolean isTestClass(java.lang.String)>(r15);

        if $z2 == 0 goto label05;

        $r7 = r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r15);

     label05:
        goto label04;

     label06:
        virtualinvoke r17.<dalvik.system.DexFile: void close()>();

     label07:
        goto label09;

     label08:
        $r8 := @caughtexception;

        $r10 = <com.android.commands.uiautomator.RunTestCommand: java.lang.String LOGTAG>;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r1;

        r18 = (java.io.IOException) $r8;

        $r11 = virtualinvoke r18.<java.io.IOException: java.lang.String getMessage()>();

        $r9[1] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not read %s: %s", $r9);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r10, $r12);

     label09:
        i2 = i2 + 1;

        goto label02;

     label10:
        return;

        catch java.io.IOException from label03 to label04 with label08;
        catch java.io.IOException from label04 to label05 with label08;
        catch java.io.IOException from label06 to label07 with label08;
    }

    private boolean isTestClass(java.lang.String)
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        boolean z0;
        java.lang.Class $r1, $r3, r8;
        java.lang.ClassLoader $r2;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner $r4;
        com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter $r5;
        java.lang.ClassNotFoundException $r6;
        java.lang.String r7;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        r7 := @parameter0: java.lang.String;

     label1:
        $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        r8 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r7);

        $r3 = virtualinvoke r8.<java.lang.Class: java.lang.Class getEnclosingClass()>();

        if $r3 == null goto label3;

     label2:
        return 0;

     label3:
        $r4 = virtualinvoke r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner()>();

        $r5 = virtualinvoke $r4.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter getTestCaseFilter()>();

        z0 = virtualinvoke $r5.<com.android.uiautomator.testrunner.UiAutomatorTestCaseFilter: boolean accept(java.lang.Class)>(r8);

     label4:
        return z0;

     label5:
        $r6 := @caughtexception;

        return 0;

        catch java.lang.ClassNotFoundException from label1 to label2 with label5;
        catch java.lang.ClassNotFoundException from label3 to label4 with label5;
    }

    private int parseArgs(java.lang.String[])
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        java.lang.String[] r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String r2, r3, $r4, $r5, $r6, $r7, $r9, $r10, $r11, $r12, $r14, $r15;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9;
        android.os.Bundle $r8, $r13;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        r1 := @parameter0: java.lang.String[];

        i5 = 0;

     label01:
        i0 = lengthof r1;

        z9 = 0;

        if i5 >= i0 goto label15;

        $r4 = r1[i5];

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("-e");

        if $z0 == 0 goto label09;

        $i4 = i5 + 2;

        $i3 = lengthof r1;

        if $i4 >= $i3 goto label08;

        i6 = i5 + 1;

        r2 = r1[i6];

        i5 = i6 + 1;

        r3 = r1[i5];

        $r10 = "class";

        $z4 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z4 == 0 goto label02;

        specialinvoke r0.<com.android.commands.uiautomator.RunTestCommand: void addTestClasses(java.lang.String)>(r3);

        goto label07;

     label02:
        $r11 = "debug";

        $z5 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z5 == 0 goto label05;

        $r14 = "true";

        $z7 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z7 != 0 goto label03;

        $r15 = "1";

        $z8 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r3);

        if $z8 == 0 goto label04;

     label03:
        z9 = 1;

     label04:
        r0.<com.android.commands.uiautomator.RunTestCommand: boolean mDebug> = z9;

        goto label07;

     label05:
        $r12 = "runner";

        $z6 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z6 == 0 goto label06;

        r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName> = r3;

        goto label07;

     label06:
        $r13 = r0.<com.android.commands.uiautomator.RunTestCommand: android.os.Bundle mParams>;

        virtualinvoke $r13.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>(r2, r3);

     label07:
        goto label13;

     label08:
        return -1;

     label09:
        $r5 = r1[i5];

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("-c");

        if $z1 == 0 goto label11;

        $i2 = i5 + 1;

        $i1 = lengthof r1;

        if $i2 >= $i1 goto label10;

        i5 = i5 + 1;

        $r9 = r1[i5];

        specialinvoke r0.<com.android.commands.uiautomator.RunTestCommand: void addTestClasses(java.lang.String)>($r9);

        goto label13;

     label10:
        return -2;

     label11:
        $r6 = r1[i5];

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("--monkey");

        if $z2 == 0 goto label12;

        r0.<com.android.commands.uiautomator.RunTestCommand: boolean mMonkey> = 1;

        goto label13;

     label12:
        $r7 = r1[i5];

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("-s");

        if $z3 == 0 goto label14;

        $r8 = r0.<com.android.commands.uiautomator.RunTestCommand: android.os.Bundle mParams>;

        virtualinvoke $r8.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("outputFormat", "simple");

     label13:
        i5 = i5 + 1;

        goto label01;

     label14:
        return -99;

     label15:
        return 0;
    }

    public java.lang.String detailedOptions()
    {
        com.android.commands.uiautomator.RunTestCommand r0;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        return "    runtest <class spec> [options]\n    <class spec>: <JARS> < -c <CLASSES> | -e class <CLASSES> >\n      <JARS>: a list of jar files containing test classes and dependencies. If\n        the path is relative, it\'s assumed to be under /data/local/tmp. Use\n        absolute path if the file is elsewhere. Multiple files can be\n        specified, separated by space.\n      <CLASSES>: a list of test class names to run, separated by comma. To\n        a single method, use TestClass#testMethod format. The -e or -c option\n        may be repeated. This option is not required and if not provided then\n        all the tests in provided jars will be run automatically.\n    options:\n      --nohup: trap SIG_HUP, so test won\'t terminate even if parent process\n               is terminated, e.g. USB is disconnected.\n      -e debug [true|false]: wait for debugger to connect before starting.\n      -e runner [CLASS]: use specified test runner class instead. If\n        unspecified, framework default runner will be used.\n      -e <NAME> <VALUE>: other name-value pairs to be passed to test classes.\n        May be repeated.\n      -e outputFormat simple | -s: enabled less verbose JUnit style output.\n";
    }

    protected com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner()
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        java.lang.Class $r1, $r5;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner $r2, r20, r31;
        java.lang.ClassCastException $r3;
        java.lang.StringBuilder $r4, $r9, $r13, $r17;
        java.lang.String $r6, $r7, $r10, $r11, $r14, $r15, $r18, $r19, r21;
        java.lang.Throwable $r8, $r16;
        java.lang.ClassNotFoundException $r12;
        java.lang.Object r23, r24;
        java.io.PrintStream r25, r27, r29, r32;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        r20 = r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner mRunner>;

        if r20 == null goto label01;

        return r20;

     label01:
        r21 = r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName>;

        if r21 != null goto label02;

        $r2 = new com.android.uiautomator.testrunner.UiAutomatorTestRunner;

        specialinvoke $r2.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void <init>()>();

        r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner mRunner> = $r2;

        return $r2;

     label02:
        r23 = null;

     label03:
        $r1 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r21);

        r24 = virtualinvoke $r1.<java.lang.Class: java.lang.Object newInstance()>();

     label04:
        r23 = r24;

     label05:
        goto label09;

     label06:
        $r16 := @caughtexception;

        r25 = <java.lang.System: java.io.PrintStream err>;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Constructor of runner ");

        $r18 = r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName>;

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not accessibile");

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r25.<java.io.PrintStream: void println(java.lang.String)>($r19);

        staticinvoke <java.lang.System: void exit(int)>(-4);

        r23 = null;

        goto label09;

     label07:
        $r8 := @caughtexception;

        r27 = <java.lang.System: java.io.PrintStream err>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot instantiate runner: ");

        $r10 = r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r27.<java.io.PrintStream: void println(java.lang.String)>($r11);

        staticinvoke <java.lang.System: void exit(int)>(-4);

        goto label05;

     label08:
        $r12 := @caughtexception;

        r29 = <java.lang.System: java.io.PrintStream err>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot find runner: ");

        $r14 = r0.<com.android.commands.uiautomator.RunTestCommand: java.lang.String mRunnerClassName>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r29.<java.io.PrintStream: void println(java.lang.String)>($r15);

        staticinvoke <java.lang.System: void exit(int)>(-4);

        goto label05;

     label09:
        r31 = (com.android.uiautomator.testrunner.UiAutomatorTestRunner) r23;

        r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner mRunner> = r31;

     label10:
        return r31;

     label11:
        $r3 := @caughtexception;

        r32 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Specified runner is not subclass of ");

        $r5 = class "Lcom/android/uiautomator/testrunner/UiAutomatorTestRunner;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r32.<java.io.PrintStream: void println(java.lang.String)>($r7);

        staticinvoke <java.lang.System: void exit(int)>(-4);

        return null;

        catch java.lang.ClassNotFoundException from label03 to label04 with label08;
        catch java.lang.InstantiationException from label03 to label04 with label07;
        catch java.lang.IllegalAccessException from label03 to label04 with label06;
        catch java.lang.ClassCastException from label09 to label10 with label11;
    }

    public void run(java.lang.String[])
    {
        com.android.commands.uiautomator.RunTestCommand r0;
        java.lang.String[] r1;
        int i0;
        java.io.PrintStream $r2, $r4, $r5, $r6;
        java.util.List $r3, $r7, $r9;
        boolean $z0, $z1, $z2, $z3;
        com.android.uiautomator.testrunner.UiAutomatorTestRunner $r8;
        android.os.Bundle $r10;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        r1 := @parameter0: java.lang.String[];

        i0 = specialinvoke r0.<com.android.commands.uiautomator.RunTestCommand: int parseArgs(java.lang.String[])>(r1);

        if i0 == -99 goto label3;

        if i0 == -2 goto label2;

        if i0 == -1 goto label1;

        goto label4;

     label1:
        $r6 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Incomplete \'-e\' parameter.");

        staticinvoke <java.lang.System: void exit(int)>(-1);

        goto label4;

     label2:
        $r5 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Incomplete \'-c\' parameter.");

        staticinvoke <java.lang.System: void exit(int)>(-2);

        goto label4;

     label3:
        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Unsupported standalone parameter.");

        staticinvoke <java.lang.System: void exit(int)>(-99);

     label4:
        $r7 = r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses>;

        $z1 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label5;

        specialinvoke r0.<com.android.commands.uiautomator.RunTestCommand: void addTestClassesFromJars()>();

        $r3 = r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label5;

        $r4 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("No test classes found.");

        staticinvoke <java.lang.System: void exit(int)>(-3);

     label5:
        $r8 = virtualinvoke r0.<com.android.commands.uiautomator.RunTestCommand: com.android.uiautomator.testrunner.UiAutomatorTestRunner getRunner()>();

        $r9 = r0.<com.android.commands.uiautomator.RunTestCommand: java.util.List mTestClasses>;

        $r10 = r0.<com.android.commands.uiautomator.RunTestCommand: android.os.Bundle mParams>;

        $z2 = r0.<com.android.commands.uiautomator.RunTestCommand: boolean mDebug>;

        $z3 = r0.<com.android.commands.uiautomator.RunTestCommand: boolean mMonkey>;

        virtualinvoke $r8.<com.android.uiautomator.testrunner.UiAutomatorTestRunner: void run(java.util.List,android.os.Bundle,boolean,boolean)>($r9, $r10, $z2, $z3);

        return;
    }

    public java.lang.String shortHelp()
    {
        com.android.commands.uiautomator.RunTestCommand r0;

        r0 := @this: com.android.commands.uiautomator.RunTestCommand;

        return "executes UI automation tests";
    }
}
