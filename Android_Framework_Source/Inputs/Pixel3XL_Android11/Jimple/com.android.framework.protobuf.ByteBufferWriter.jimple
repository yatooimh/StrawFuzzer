final class com.android.framework.protobuf.ByteBufferWriter extends java.lang.Object
{
    private static final java.lang.ThreadLocal BUFFER;
    private static final float BUFFER_REALLOCATION_THRESHOLD;
    private static final long CHANNEL_FIELD_OFFSET;
    private static final java.lang.Class FILE_OUTPUT_STREAM_CLASS;
    private static final int MAX_CACHED_BUFFER_SIZE;
    private static final int MIN_CACHED_BUFFER_SIZE;

    static void <clinit>()
    {
        java.lang.Class r0;
        java.lang.ThreadLocal $r1;
        long $l0;

        <com.android.framework.protobuf.ByteBufferWriter: int MIN_CACHED_BUFFER_SIZE> = 1024;

        <com.android.framework.protobuf.ByteBufferWriter: int MAX_CACHED_BUFFER_SIZE> = 16384;

        <com.android.framework.protobuf.ByteBufferWriter: float BUFFER_REALLOCATION_THRESHOLD> = 0.5F;

        $r1 = new java.lang.ThreadLocal;

        specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>();

        <com.android.framework.protobuf.ByteBufferWriter: java.lang.ThreadLocal BUFFER> = $r1;

        r0 = staticinvoke <com.android.framework.protobuf.ByteBufferWriter: java.lang.Class safeGetClass(java.lang.String)>("java.io.FileOutputStream");

        <com.android.framework.protobuf.ByteBufferWriter: java.lang.Class FILE_OUTPUT_STREAM_CLASS> = r0;

        $l0 = staticinvoke <com.android.framework.protobuf.ByteBufferWriter: long getChannelFieldOffset(java.lang.Class)>(r0);

        <com.android.framework.protobuf.ByteBufferWriter: long CHANNEL_FIELD_OFFSET> = $l0;

        return;
    }

    private void <init>()
    {
        com.android.framework.protobuf.ByteBufferWriter r0;

        r0 := @this: com.android.framework.protobuf.ByteBufferWriter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void clearCachedBuffer()
    {
        java.lang.ThreadLocal $r0;

        $r0 = <com.android.framework.protobuf.ByteBufferWriter: java.lang.ThreadLocal BUFFER>;

        virtualinvoke $r0.<java.lang.ThreadLocal: void set(java.lang.Object)>(null);

        return;
    }

    private static byte[] getBuffer()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1, $r2;
        java.lang.ref.SoftReference r3;
        byte[] r4;

        $r0 = <com.android.framework.protobuf.ByteBufferWriter: java.lang.ThreadLocal BUFFER>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        r3 = (java.lang.ref.SoftReference) $r1;

        if r3 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        $r2 = virtualinvoke r3.<java.lang.ref.SoftReference: java.lang.Object get()>();

        r4 = (byte[]) $r2;

     label2:
        return r4;
    }

    private static long getChannelFieldOffset(java.lang.Class)
    {
        long l0;
        boolean $z0;
        java.lang.reflect.Field $r0;
        java.lang.Throwable $r1;
        java.lang.Class r2;

        r2 := @parameter0: java.lang.Class;

        if r2 == null goto label4;

     label1:
        $z0 = staticinvoke <com.android.framework.protobuf.UnsafeUtil: boolean hasUnsafeArrayOperations()>();

        if $z0 == 0 goto label4;

        $r0 = virtualinvoke r2.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("channel");

        l0 = staticinvoke <com.android.framework.protobuf.UnsafeUtil: long objectFieldOffset(java.lang.reflect.Field)>($r0);

     label2:
        return l0;

     label3:
        $r1 := @caughtexception;

        goto label4;

     label4:
        return -1L;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private static byte[] getOrCreateBuffer(int)
    {
        int $i0, i1, i2;
        boolean $z0;
        byte[] r0, r1, r2;

        i1 := @parameter0: int;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>(i1, 1024);

        r0 = staticinvoke <com.android.framework.protobuf.ByteBufferWriter: byte[] getBuffer()>();

        if r0 == null goto label1;

        r1 = r0;

        $i0 = lengthof r0;

        $z0 = staticinvoke <com.android.framework.protobuf.ByteBufferWriter: boolean needToReallocate(int,int)>(i2, $i0);

        if $z0 == 0 goto label2;

     label1:
        r2 = newarray (byte)[i2];

        r1 = r2;

        if i2 > 16384 goto label2;

        staticinvoke <com.android.framework.protobuf.ByteBufferWriter: void setBuffer(byte[])>(r2);

        r1 = r2;

     label2:
        return r1;
    }

    private static boolean needToReallocate(int, int)
    {
        int i0, i1;
        float $f0, $f1, $f2;
        byte $b2;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 >= i0 goto label1;

        $f2 = (float) i1;

        $f0 = (float) i0;

        $f1 = $f0 * 0.5F;

        $b2 = $f2 cmpg $f1;

        if $b2 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static java.lang.Class safeGetClass(java.lang.String)
    {
        java.lang.ClassNotFoundException $r0;
        java.lang.String r1;
        java.lang.Class r2;

        r1 := @parameter0: java.lang.String;

     label1:
        r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1);

     label2:
        return r2;

     label3:
        $r0 := @caughtexception;

        return null;

        catch java.lang.ClassNotFoundException from label1 to label2 with label3;
    }

    private static void setBuffer(byte[])
    {
        byte[] r0;
        java.lang.ref.SoftReference $r1;
        java.lang.ThreadLocal $r2;

        r0 := @parameter0: byte[];

        $r2 = <com.android.framework.protobuf.ByteBufferWriter: java.lang.ThreadLocal BUFFER>;

        $r1 = new java.lang.ref.SoftReference;

        specialinvoke $r1.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r0);

        virtualinvoke $r2.<java.lang.ThreadLocal: void set(java.lang.Object)>($r1);

        return;
    }

    static void write(java.nio.ByteBuffer, java.io.OutputStream) throws java.io.IOException
    {
        java.nio.ByteBuffer r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        byte[] r1, $r4;
        boolean $z0, $z1, $z2;
        java.lang.Throwable $r5;
        java.io.OutputStream r7;

        r0 := @parameter0: java.nio.ByteBuffer;

        r7 := @parameter1: java.io.OutputStream;

        i0 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

     label1:
        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasArray()>();

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r0.<java.nio.ByteBuffer: byte[] array()>();

        $i5 = virtualinvoke r0.<java.nio.ByteBuffer: int arrayOffset()>();

        $i6 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        $i7 = $i5 + $i6;

        $i8 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        virtualinvoke r7.<java.io.OutputStream: void write(byte[],int,int)>($r4, $i7, $i8);

     label2:
        goto label6;

     label3:
        $z1 = staticinvoke <com.android.framework.protobuf.ByteBufferWriter: boolean writeToChannel(java.nio.ByteBuffer,java.io.OutputStream)>(r0, r7);

        if $z1 != 0 goto label6;

        $i2 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        r1 = staticinvoke <com.android.framework.protobuf.ByteBufferWriter: byte[] getOrCreateBuffer(int)>($i2);

     label4:
        $z2 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z2 == 0 goto label6;

        $i3 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        $i4 = lengthof r1;

        i1 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i4);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, 0, i1);

        virtualinvoke r7.<java.io.OutputStream: void write(byte[],int,int)>(r1, 0, i1);

     label5:
        goto label4;

     label6:
        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

        return;

     label7:
        $r5 := @caughtexception;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
    }

    private static boolean writeToChannel(java.nio.ByteBuffer, java.io.OutputStream) throws java.io.IOException
    {
        java.nio.ByteBuffer r0;
        long $l0, $l2;
        byte $b1;
        java.lang.Class $r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.ClassCastException $r3;
        java.io.OutputStream r4;
        java.nio.channels.WritableByteChannel r5;

        r0 := @parameter0: java.nio.ByteBuffer;

        r4 := @parameter1: java.io.OutputStream;

        $l0 = <com.android.framework.protobuf.ByteBufferWriter: long CHANNEL_FIELD_OFFSET>;

        $b1 = $l0 cmp 0L;

        if $b1 < 0 goto label5;

        $r1 = <com.android.framework.protobuf.ByteBufferWriter: java.lang.Class FILE_OUTPUT_STREAM_CLASS>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInstance(java.lang.Object)>(r4);

        if $z0 == 0 goto label5;

     label1:
        $l2 = <com.android.framework.protobuf.ByteBufferWriter: long CHANNEL_FIELD_OFFSET>;

        $r2 = staticinvoke <com.android.framework.protobuf.UnsafeUtil: java.lang.Object getObject(java.lang.Object,long)>(r4, $l2);

        r5 = (java.nio.channels.WritableByteChannel) $r2;

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r5 = null;

     label4:
        if r5 == null goto label5;

        interfaceinvoke r5.<java.nio.channels.WritableByteChannel: int write(java.nio.ByteBuffer)>(r0);

        return 1;

     label5:
        return 0;

        catch java.lang.ClassCastException from label1 to label2 with label3;
    }
}
