public class com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder extends java.lang.Object
{
    private static final java.lang.String MAPPING_DATA_DIRECTORY;
    private static com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance;
    private final com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil;
    private com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader prefixFileReader;

    static void <clinit>()
    {
        <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String MAPPING_DATA_DIRECTORY> = "/com/android/i18n/phonenumbers/geocoding/data/";

        <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance> = null;

        return;
    }

    void <init>(java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        java.lang.String r1;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r2;
        com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader $r3;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader prefixFileReader> = null;

        $r2 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance()>();

        r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil> = $r2;

        $r3 = new com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader;

        specialinvoke $r3.<com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader: void <init>(java.lang.String)>(r1);

        r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader prefixFileReader> = $r3;

        return;
    }

    private java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        java.util.Iterator r3;
        java.lang.String r4, $r6, $r10, $r11, r13, r14;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r5, $r8;
        int $i0, $i1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r7, $r9;
        java.util.List r12;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        $r5 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        $i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r12 = virtualinvoke $r5.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.util.List getRegionCodesForCountryCode(int)>($i0);

        $i1 = interfaceinvoke r12.<java.util.List: int size()>();

        if $i1 != 1 goto label1;

        $r9 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (java.lang.String) $r9;

        $r11 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getRegionDisplayName(java.lang.String,java.util.Locale)>($r10, r2);

        return $r11;

     label1:
        r13 = "ZZ";

        r3 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.String) $r7;

        r14 = r13;

        $r8 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        $z1 = virtualinvoke $r8.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidNumberForRegion(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r1, r4);

        if $z1 == 0 goto label4;

        $z2 = virtualinvoke r13.<java.lang.String: boolean equals(java.lang.Object)>("ZZ");

        if $z2 != 0 goto label3;

        return "";

     label3:
        r14 = r4;

     label4:
        r13 = r14;

        goto label2;

     label5:
        $r6 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getRegionDisplayName(java.lang.String,java.util.Locale)>(r13, r2);

        return $r6;
    }

    public static com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder getInstance()
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder $r0, r2, r3;
        java.lang.Throwable $r1;

        entermonitor class "Lcom/android/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder;";

     label1:
        $r0 = <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance>;

        if $r0 != null goto label2;

        r2 = new com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        specialinvoke r2.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: void <init>(java.lang.String)>("/com/android/i18n/phonenumbers/geocoding/data/");

        <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance> = r2;

     label2:
        r3 = <com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder instance>;

     label3:
        exitmonitor class "Lcom/android/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder;";

        return r3;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "Lcom/android/i18n/phonenumbers/geocoding/PhoneNumberOfflineGeocoder;";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private java.lang.String getRegionDisplayName(java.lang.String, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        java.util.Locale r1, $r3;
        boolean $z0, $z1;
        java.lang.String r4, r5;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.Locale;

        if r4 == null goto label2;

        $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("ZZ");

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("001");

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new java.util.Locale;

        specialinvoke $r3.<java.util.Locale: void <init>(java.lang.String,java.lang.String)>("", r4);

        r5 = virtualinvoke $r3.<java.util.Locale: java.lang.String getDisplayCountry(java.util.Locale)>(r1);

        goto label3;

     label2:
        r5 = "";

     label3:
        return r5;
    }

    public java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r3, $r5;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r4, $r6;
        int $i0;
        boolean $z0;
        java.lang.String $r7, $r8;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        $r4 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r3 = virtualinvoke $r4.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if r3 != $r5 goto label1;

        return "";

     label1:
        $r6 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        $i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $z0 = virtualinvoke $r6.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberGeographical(com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType,int)>(r3, $i0);

        if $z0 != 0 goto label2;

        $r8 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r8;

     label2:
        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r7;
    }

    public java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale, java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        java.lang.String r3, $r8, $r9;
        com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType r4, $r6;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r5, $r7;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r4 = virtualinvoke $r5.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r6 = <com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if r4 != $r6 goto label1;

        return "";

     label1:
        $r7 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        $i0 = virtualinvoke r1.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $z0 = virtualinvoke $r7.<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isNumberGeographical(com.android.i18n.phonenumbers.PhoneNumberUtil$PhoneNumberType,int)>(r4, $i0);

        if $z0 != 0 goto label2;

        $r9 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r9;

     label2:
        $r8 = virtualinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale,java.lang.String)>(r1, r2, r3);

        return $r8;
    }

    public java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        java.util.Locale r1;
        java.lang.String r2, r3, r11, r12, r13, r14, r17, r18;
        int $i0, $i1, $i2, $i3;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r4, $r6, $r7;
        boolean $z0, $z1;
        com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader $r5, $r8;
        com.android.i18n.phonenumbers.NumberParseException $r9;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r10, r15;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r10 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r1 := @parameter1: java.util.Locale;

        r2 = virtualinvoke r1.<java.util.Locale: java.lang.String getLanguage()>();

        r3 = virtualinvoke r1.<java.util.Locale: java.lang.String getCountry()>();

        $i0 = virtualinvoke r10.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r11 = staticinvoke <com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getCountryMobileToken(int)>($i0);

        $r4 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r12 = virtualinvoke $r4.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r10);

        $z0 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 != 0 goto label5;

        $z1 = virtualinvoke r12.<java.lang.String: boolean startsWith(java.lang.String)>(r11);

        if $z1 == 0 goto label5;

        $i1 = virtualinvoke r11.<java.lang.String: int length()>();

        r13 = virtualinvoke r12.<java.lang.String: java.lang.String substring(int)>($i1);

        $r6 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        $i2 = virtualinvoke r10.<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r14 = virtualinvoke $r6.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>($i2);

     label1:
        $r7 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r15 = virtualinvoke $r7.<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>(r13, r14);

     label2:
        goto label4;

     label3:
        $r9 := @caughtexception;

        r15 = r10;

     label4:
        $r8 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader prefixFileReader>;

        r17 = virtualinvoke $r8.<com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader: java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String,java.lang.String,java.lang.String)>(r15, r2, "", r3);

        goto label6;

     label5:
        $r5 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader prefixFileReader>;

        r17 = virtualinvoke $r5.<com.android.i18n.phonenumbers.prefixmapper.PrefixFileReader: java.lang.String getDescriptionForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.lang.String,java.lang.String,java.lang.String)>(r10, r2, "", r3);

     label6:
        $i3 = virtualinvoke r17.<java.lang.String: int length()>();

        if $i3 <= 0 goto label7;

        r18 = r17;

        goto label8;

     label7:
        r18 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getCountryNameForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r10, r1);

     label8:
        return r18;

        catch com.android.i18n.phonenumbers.NumberParseException from label1 to label2 with label3;
    }

    public java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber, java.util.Locale, java.lang.String)
    {
        com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder r0;
        com.android.i18n.phonenumbers.Phonenumber$PhoneNumber r1;
        java.util.Locale r2;
        java.lang.String r3, r4, $r6, $r7;
        com.android.i18n.phonenumbers.PhoneNumberUtil $r5;
        boolean $z0;

        r0 := @this: com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder;

        r1 := @parameter0: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.util.Locale;

        r3 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: com.android.i18n.phonenumbers.PhoneNumberUtil phoneUtil>;

        r4 = virtualinvoke $r5.<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getDescriptionForValidNumber(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber,java.util.Locale)>(r1, r2);

        return $r7;

     label1:
        $r6 = specialinvoke r0.<com.android.i18n.phonenumbers.geocoding.PhoneNumberOfflineGeocoder: java.lang.String getRegionDisplayName(java.lang.String,java.util.Locale)>(r4, r2);

        return $r6;
    }
}
