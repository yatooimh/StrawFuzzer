public class com.android.ims.ImsManager extends java.lang.Object implements com.android.ims.IFeatureConnector
{
    public static final java.lang.String ACTION_IMS_INCOMING_CALL;
    public static final java.lang.String ACTION_IMS_REGISTRATION_ERROR;
    public static final java.lang.String ACTION_IMS_SERVICE_DOWN;
    public static final java.lang.String ACTION_IMS_SERVICE_UP;
    private static final boolean DBG;
    public static final java.lang.String EXTRA_CALL_ID;
    public static final java.lang.String EXTRA_IS_UNKNOWN_CALL;
    public static final java.lang.String EXTRA_PHONE_ID;
    public static final java.lang.String EXTRA_SERVICE_ID;
    public static final java.lang.String EXTRA_USSD;
    public static final java.lang.String FALSE;
    public static final int INCOMING_CALL_RESULT_CODE;
    private static final int MAX_RECENT_DISCONNECT_REASONS;
    public static final java.lang.String PROPERTY_DBG_ALLOW_IMS_OFF_OVERRIDE;
    public static final int PROPERTY_DBG_ALLOW_IMS_OFF_OVERRIDE_DEFAULT;
    public static final java.lang.String PROPERTY_DBG_VOLTE_AVAIL_OVERRIDE;
    public static final int PROPERTY_DBG_VOLTE_AVAIL_OVERRIDE_DEFAULT;
    public static final java.lang.String PROPERTY_DBG_VT_AVAIL_OVERRIDE;
    public static final int PROPERTY_DBG_VT_AVAIL_OVERRIDE_DEFAULT;
    public static final java.lang.String PROPERTY_DBG_WFC_AVAIL_OVERRIDE;
    public static final int PROPERTY_DBG_WFC_AVAIL_OVERRIDE_DEFAULT;
    private static final int RESPONSE_WAIT_TIME_MS;
    private static final int SUBINFO_PROPERTY_FALSE;
    private static final int SUB_PROPERTY_NOT_INITIALIZED;
    private static final int SYSTEM_PROPERTY_NOT_SET;
    private static final java.lang.String TAG;
    public static final java.lang.String TRUE;
    private static java.util.HashMap sImsManagerInstances;
    private android.telephony.CarrierConfigManager mConfigManager;
    private boolean mConfigUpdated;
    private android.content.Context mContext;
    private com.android.ims.ImsEcbm mEcbm;
    public com.android.ims.ImsManager$ExecutorFactory mExecutorFactory;
    private com.android.ims.ImsConfigListener mImsConfigListener;
    private com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection;
    private com.android.ims.ImsMultiEndpoint mMultiEndpoint;
    private int mPhoneId;
    private java.util.concurrent.ConcurrentLinkedDeque mRecentDisconnectReasons;
    private java.util.Set mStatusCallbacks;
    private com.android.ims.ImsUt mUt;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        <com.android.ims.ImsManager: java.lang.String TRUE> = "true";

        <com.android.ims.ImsManager: java.lang.String TAG> = "ImsManager";

        <com.android.ims.ImsManager: int SYSTEM_PROPERTY_NOT_SET> = -1;

        <com.android.ims.ImsManager: int SUB_PROPERTY_NOT_INITIALIZED> = -1;

        <com.android.ims.ImsManager: int SUBINFO_PROPERTY_FALSE> = 0;

        <com.android.ims.ImsManager: int RESPONSE_WAIT_TIME_MS> = 3000;

        <com.android.ims.ImsManager: int PROPERTY_DBG_WFC_AVAIL_OVERRIDE_DEFAULT> = 0;

        <com.android.ims.ImsManager: java.lang.String PROPERTY_DBG_WFC_AVAIL_OVERRIDE> = "persist.dbg.wfc_avail_ovr";

        <com.android.ims.ImsManager: int PROPERTY_DBG_VT_AVAIL_OVERRIDE_DEFAULT> = 0;

        <com.android.ims.ImsManager: java.lang.String PROPERTY_DBG_VT_AVAIL_OVERRIDE> = "persist.dbg.vt_avail_ovr";

        <com.android.ims.ImsManager: int PROPERTY_DBG_VOLTE_AVAIL_OVERRIDE_DEFAULT> = 0;

        <com.android.ims.ImsManager: java.lang.String PROPERTY_DBG_VOLTE_AVAIL_OVERRIDE> = "persist.dbg.volte_avail_ovr";

        <com.android.ims.ImsManager: int PROPERTY_DBG_ALLOW_IMS_OFF_OVERRIDE_DEFAULT> = 0;

        <com.android.ims.ImsManager: java.lang.String PROPERTY_DBG_ALLOW_IMS_OFF_OVERRIDE> = "persist.dbg.allow_ims_off";

        <com.android.ims.ImsManager: int MAX_RECENT_DISCONNECT_REASONS> = 16;

        <com.android.ims.ImsManager: int INCOMING_CALL_RESULT_CODE> = 101;

        <com.android.ims.ImsManager: java.lang.String FALSE> = "false";

        <com.android.ims.ImsManager: java.lang.String EXTRA_USSD> = "android:ussd";

        <com.android.ims.ImsManager: java.lang.String EXTRA_SERVICE_ID> = "android:imsServiceId";

        <com.android.ims.ImsManager: java.lang.String EXTRA_PHONE_ID> = "android:phone_id";

        <com.android.ims.ImsManager: java.lang.String EXTRA_IS_UNKNOWN_CALL> = "android:isUnknown";

        <com.android.ims.ImsManager: java.lang.String EXTRA_CALL_ID> = "android:imsCallID";

        <com.android.ims.ImsManager: boolean DBG> = 1;

        <com.android.ims.ImsManager: java.lang.String ACTION_IMS_SERVICE_UP> = "com.android.ims.IMS_SERVICE_UP";

        <com.android.ims.ImsManager: java.lang.String ACTION_IMS_SERVICE_DOWN> = "com.android.ims.IMS_SERVICE_DOWN";

        <com.android.ims.ImsManager: java.lang.String ACTION_IMS_REGISTRATION_ERROR> = "android.telephony.ims.action.WFC_IMS_REGISTRATION_ERROR";

        <com.android.ims.ImsManager: java.lang.String ACTION_IMS_INCOMING_CALL> = "com.android.ims.IMS_INCOMING_CALL";

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <com.android.ims.ImsManager: java.util.HashMap sImsManagerInstances> = $r0;

        return;
    }

    public void <init>(android.content.Context, int)
    {
        com.android.ims.ImsManager r0;
        android.content.Context r1;
        int i0;
        com.android.ims.ImsManager$ImsExecutorFactory $r2;
        java.util.concurrent.CopyOnWriteArraySet $r3;
        java.util.concurrent.ConcurrentLinkedDeque $r4;
        java.lang.Object $r5;
        android.telephony.CarrierConfigManager $r6;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.android.ims.ImsManager$ImsExecutorFactory;

        specialinvoke $r2.<com.android.ims.ImsManager$ImsExecutorFactory: void <init>()>();

        r0.<com.android.ims.ImsManager: com.android.ims.ImsManager$ExecutorFactory mExecutorFactory> = $r2;

        r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection> = null;

        r0.<com.android.ims.ImsManager: boolean mConfigUpdated> = 0;

        r0.<com.android.ims.ImsManager: com.android.ims.ImsUt mUt> = null;

        r0.<com.android.ims.ImsManager: com.android.ims.ImsEcbm mEcbm> = null;

        r0.<com.android.ims.ImsManager: com.android.ims.ImsMultiEndpoint mMultiEndpoint> = null;

        $r3 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r3.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        r0.<com.android.ims.ImsManager: java.util.Set mStatusCallbacks> = $r3;

        $r4 = new java.util.concurrent.ConcurrentLinkedDeque;

        specialinvoke $r4.<java.util.concurrent.ConcurrentLinkedDeque: void <init>()>();

        r0.<com.android.ims.ImsManager: java.util.concurrent.ConcurrentLinkedDeque mRecentDisconnectReasons> = $r4;

        r0.<com.android.ims.ImsManager: android.content.Context mContext> = r1;

        r0.<com.android.ims.ImsManager: int mPhoneId> = i0;

        $r5 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        $r6 = (android.telephony.CarrierConfigManager) $r5;

        r0.<com.android.ims.ImsManager: android.telephony.CarrierConfigManager mConfigManager> = $r6;

        specialinvoke r0.<com.android.ims.ImsManager: void createImsService()>();

        return;
    }

    static java.util.Set access$000(com.android.ims.ImsManager)
    {
        com.android.ims.ImsManager r0;
        java.util.Set $r1;

        r0 := @parameter0: com.android.ims.ImsManager;

        $r1 = r0.<com.android.ims.ImsManager: java.util.Set mStatusCallbacks>;

        return $r1;
    }

    private void addToRecentDisconnectReasons(android.telephony.ims.ImsReasonInfo)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.ImsReasonInfo r1;
        java.util.concurrent.ConcurrentLinkedDeque $r2, $r3, $r4;
        int $i0;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.ImsReasonInfo;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = r0.<com.android.ims.ImsManager: java.util.concurrent.ConcurrentLinkedDeque mRecentDisconnectReasons>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.ConcurrentLinkedDeque: int size()>();

        if $i0 < 16 goto label2;

        $r4 = r0.<com.android.ims.ImsManager: java.util.concurrent.ConcurrentLinkedDeque mRecentDisconnectReasons>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentLinkedDeque: java.lang.Object removeFirst()>();

        goto label1;

     label2:
        $r3 = r0.<com.android.ims.ImsManager: java.util.concurrent.ConcurrentLinkedDeque mRecentDisconnectReasons>;

        virtualinvoke $r3.<java.util.concurrent.ConcurrentLinkedDeque: void addLast(java.lang.Object)>(r1);

        return;
    }

    private static java.lang.String booleanToPropertyString(boolean)
    {
        boolean z0;
        java.lang.String r0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        r0 = "1";

        goto label2;

     label1:
        r0 = "0";

     label2:
        return r0;
    }

    private void checkAndThrowExceptionIfServiceUnavailable() throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.MmTelFeatureConnection r1, $r4;
        android.content.Context $r2;
        boolean $z0, $z1;
        com.android.ims.ImsException $r3, $r5;

        r0 := @this: com.android.ims.ImsManager;

        $r2 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.ims.ImsManager: boolean isImsSupportedOnDevice(android.content.Context)>($r2);

        if $z0 == 0 goto label4;

        r1 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        if r1 == null goto label1;

        $z1 = virtualinvoke r1.<com.android.ims.MmTelFeatureConnection: boolean isBinderAlive()>();

        if $z1 != 0 goto label2;

     label1:
        specialinvoke r0.<com.android.ims.ImsManager: void createImsService()>();

        $r4 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        if $r4 == null goto label3;

     label2:
        return;

     label3:
        $r5 = new com.android.ims.ImsException;

        specialinvoke $r5.<com.android.ims.ImsException: void <init>(java.lang.String,int)>("Service is unavailable", 106);

        throw $r5;

     label4:
        $r3 = new com.android.ims.ImsException;

        specialinvoke $r3.<com.android.ims.ImsException: void <init>(java.lang.String,int)>("IMS not supported on device.", 150);

        throw $r3;
    }

    private android.telephony.ims.ImsCallSession createCallSession(android.telephony.ims.ImsCallProfile) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.ImsCallSession $r2;
        com.android.ims.MmTelFeatureConnection $r3;
        com.android.ims.internal.IImsCallSession $r4;
        android.os.RemoteException $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r8, $r10;
        com.android.ims.ImsException $r11;
        android.telephony.ims.ImsCallProfile r12;

        r0 := @this: com.android.ims.ImsManager;

        r12 := @parameter0: android.telephony.ims.ImsCallProfile;

     label1:
        $r2 = new android.telephony.ims.ImsCallSession;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $r4 = virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: com.android.ims.internal.IImsCallSession createCallSession(android.telephony.ims.ImsCallProfile)>(r12);

        specialinvoke $r2.<android.telephony.ims.ImsCallSession: void <init>(com.android.ims.internal.IImsCallSession)>($r4);

     label2:
        return $r2;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CreateCallSession: Error, remote exception: ");

        $r8 = virtualinvoke $r5.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void logw(java.lang.String)>($r10);

        $r11 = new com.android.ims.ImsException;

        specialinvoke $r11.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("createCallSession()", $r5, 106);

        throw $r11;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void createImsService()
    {
        com.android.ims.ImsManager r0;
        com.android.ims.MmTelFeatureConnection r1;
        int $i0;
        android.content.Context $r2;
        com.android.ims.ImsManager$3 $r3;

        r0 := @this: com.android.ims.ImsManager;

        $r2 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $i0 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        r1 = staticinvoke <com.android.ims.MmTelFeatureConnection: com.android.ims.MmTelFeatureConnection create(android.content.Context,int)>($r2, $i0);

        r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection> = r1;

        $r3 = new com.android.ims.ImsManager$3;

        specialinvoke $r3.<com.android.ims.ImsManager$3: void <init>(com.android.ims.ImsManager)>(r0);

        virtualinvoke r1.<com.android.ims.MmTelFeatureConnection: void setStatusCallback(com.android.ims.FeatureConnection$IFeatureUpdate)>($r3);

        return;
    }

    public static void factoryReset(android.content.Context)
    {
        int $i0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.ims.ImsManager: void factoryReset()>();

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "factoryReset: ImsManager null.");

        return;
    }

    private boolean getBooleanCarrierConfig(java.lang.String)
    {
        com.android.ims.ImsManager r0;
        java.lang.String r1;
        android.telephony.CarrierConfigManager r2;
        android.os.PersistableBundle $r3, r4;
        boolean $z0, $z1;
        int $i0;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.lang.String;

        r4 = null;

        r2 = r0.<com.android.ims.ImsManager: android.telephony.CarrierConfigManager mConfigManager>;

        if r2 == null goto label1;

        $i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        r4 = virtualinvoke r2.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i0);

     label1:
        if r4 == null goto label2;

        $z1 = virtualinvoke r4.<android.os.PersistableBundle: boolean getBoolean(java.lang.String)>(r1);

        return $z1;

     label2:
        $r3 = staticinvoke <android.telephony.CarrierConfigManager: android.os.PersistableBundle getDefaultConfig()>();

        $z0 = virtualinvoke $r3.<android.os.PersistableBundle: boolean getBoolean(java.lang.String)>(r1);

        return $z0;
    }

    public static com.android.ims.ImsManager getInstance(android.content.Context, int)
    {
        int i0;
        java.util.HashMap r0, $r2, $r4, $r7;
        com.android.ims.ImsManager r1, r12;
        java.lang.Integer $r3, $r5, $r8;
        boolean $z0;
        java.lang.Object $r9;
        java.lang.Throwable $r10;
        android.content.Context r11;

        r11 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r0 = <com.android.ims.ImsManager: java.util.HashMap sImsManagerInstances>;

        entermonitor r0;

     label01:
        $r2 = <com.android.ims.ImsManager: java.util.HashMap sImsManagerInstances>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = virtualinvoke $r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label06;

        $r7 = <com.android.ims.ImsManager: java.util.HashMap sImsManagerInstances>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r8);

        r12 = (com.android.ims.ImsManager) $r9;

     label02:
        if r12 == null goto label04;

     label03:
        virtualinvoke r12.<com.android.ims.ImsManager: void connectIfServiceIsAvailable()>();

     label04:
        exitmonitor r0;

     label05:
        return r12;

     label06:
        r1 = new com.android.ims.ImsManager;

        specialinvoke r1.<com.android.ims.ImsManager: void <init>(android.content.Context,int)>(r11, i0);

        $r4 = <com.android.ims.ImsManager: java.util.HashMap sImsManagerInstances>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

        exitmonitor r0;

     label07:
        return r1;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private int getIntCarrierConfig(java.lang.String)
    {
        com.android.ims.ImsManager r0;
        java.lang.String r1;
        android.telephony.CarrierConfigManager r2;
        android.os.PersistableBundle $r3, r4;
        int $i0, $i1, $i2;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.lang.String;

        r4 = null;

        r2 = r0.<com.android.ims.ImsManager: android.telephony.CarrierConfigManager mConfigManager>;

        if r2 == null goto label1;

        $i2 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        r4 = virtualinvoke r2.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i2);

     label1:
        if r4 == null goto label2;

        $i1 = virtualinvoke r4.<android.os.PersistableBundle: int getInt(java.lang.String)>(r1);

        return $i1;

     label2:
        $r3 = staticinvoke <android.telephony.CarrierConfigManager: android.os.PersistableBundle getDefaultConfig()>();

        $i0 = virtualinvoke $r3.<android.os.PersistableBundle: int getInt(java.lang.String)>(r1);

        return $i0;
    }

    private boolean getProvisionedBool(com.android.ims.ImsConfig, int) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0, i1;
        java.lang.StringBuilder $r1;
        com.android.ims.ImsException $r4;
        java.lang.String $r5;
        com.android.ims.ImsConfig r6;
        boolean z0;

        r0 := @this: com.android.ims.ImsManager;

        r6 := @parameter0: com.android.ims.ImsConfig;

        i0 := @parameter1: int;

        i1 = virtualinvoke r6.<com.android.ims.ImsConfig: int getProvisionedValue(int)>(i0);

        if i1 == -1 goto label3;

        z0 = 1;

        if i1 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;

     label3:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProvisionedBool failed with error for item: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new com.android.ims.ImsException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.android.ims.ImsException: void <init>(java.lang.String,int)>($r5, 103);

        throw $r4;
    }

    private boolean getProvisionedBoolNoException(int)
    {
        com.android.ims.ImsManager r0;
        int i0;
        boolean z0;
        com.android.ims.ImsConfig $r3;
        com.android.ims.ImsException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r9, $r12;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

     label1:
        $r3 = virtualinvoke r0.<com.android.ims.ImsManager: com.android.ims.ImsConfig getConfigInterface()>();

        z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getProvisionedBool(com.android.ims.ImsConfig,int)>($r3, i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getProvisionedBoolNoException: operation failed for item=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Exception:");

        $r9 = virtualinvoke $r4.<com.android.ims.ImsException: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Returning false.");

        $r12 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void logw(java.lang.String)>($r12);

        return 0;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    private int getSettingFromSubscriptionManager(java.lang.String, java.lang.String)
    {
        com.android.ims.ImsManager r0;
        java.lang.String r1, r2;
        int i0, $i1, i2;
        android.content.Context $r3;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i1 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $r3 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        i0 = staticinvoke <android.telephony.SubscriptionManager: int getIntegerSubscriptionProperty(int,java.lang.String,int,android.content.Context)>($i1, r1, -1, $r3);

        i2 = i0;

        if i0 != -1 goto label1;

        i2 = specialinvoke r0.<com.android.ims.ImsManager: int getIntCarrierConfig(java.lang.String)>(r2);

     label1:
        return i2;
    }

    private int getSubId()
    {
        com.android.ims.ImsManager r0;
        int[] r1;
        int $i1, $i2, i3;

        r0 := @this: com.android.ims.ImsManager;

        $i1 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        r1 = staticinvoke <android.telephony.SubscriptionManager: int[] getSubId(int)>($i1);

        i3 = -1;

        if r1 == null goto label1;

        i3 = -1;

        $i2 = lengthof r1;

        if $i2 < 1 goto label1;

        i3 = r1[0];

     label1:
        return i3;
    }

    private java.util.concurrent.Executor getThreadExecutor()
    {
        com.android.ims.ImsManager r0;
        android.os.Looper $r1, $r4;
        com.android.internal.telephony.util.HandlerExecutor $r2;
        android.os.Handler $r3;

        r0 := @this: com.android.ims.ImsManager;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if $r1 != null goto label1;

        staticinvoke <android.os.Looper: void prepare()>();

     label1:
        $r2 = new com.android.internal.telephony.util.HandlerExecutor;

        $r3 = new android.os.Handler;

        $r4 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>($r4);

        specialinvoke $r2.<com.android.internal.telephony.util.HandlerExecutor: void <init>(android.os.Handler)>($r3);

        return $r2;
    }

    public static int getWfcMode(android.content.Context)
    {
        int $i0, $i2;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $i2 = virtualinvoke r1.<com.android.ims.ImsManager: int getWfcMode()>();

        return $i2;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "getWfcMode: ImsManager null, returning default value.");

        return 0;
    }

    public static int getWfcMode(android.content.Context, boolean)
    {
        boolean z0;
        int $i0, $i2;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $i2 = virtualinvoke r1.<com.android.ims.ImsManager: int getWfcMode(boolean)>(z0);

        return $i2;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "getWfcMode: ImsManager null, returning default value.");

        return 0;
    }

    private boolean isActiveSubscriptionPresent()
    {
        com.android.ims.ImsManager r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telephony.SubscriptionManager $r3;
        int[] $r4;
        int $i0;
        boolean z0;

        r0 := @this: com.android.ims.ImsManager;

        $r1 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telephony_subscription_service");

        $r3 = (android.telephony.SubscriptionManager) $r2;

        $r4 = virtualinvoke $r3.<android.telephony.SubscriptionManager: int[] getActiveSubscriptionIdList()>();

        $i0 = lengthof $r4;

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isDataEnabled()
    {
        com.android.ims.ImsManager r0;
        android.telephony.TelephonyManager $r1;
        android.content.Context $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.ims.ImsManager;

        $r1 = new android.telephony.TelephonyManager;

        $r2 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        specialinvoke $r1.<android.telephony.TelephonyManager: void <init>(android.content.Context,int)>($r2, $i0);

        $z0 = virtualinvoke $r1.<android.telephony.TelephonyManager: boolean isDataConnectionAllowed()>();

        return $z0;
    }

    private boolean isEabProvisioned()
    {
        com.android.ims.ImsManager r0;
        boolean $z0;

        r0 := @this: com.android.ims.ImsManager;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getProvisionedBoolNoException(int)>(25);

        return $z0;
    }

    public static boolean isEnhanced4gLteModeSettingEnabledByUser(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isEnhanced4gLteModeSettingEnabledByUser: ImsManager null, returning default value.");

        return 0;
    }

    private boolean isGbaValid()
    {
        com.android.ims.ImsManager r0;
        boolean z0, z1;
        java.lang.String r1, $r10;
        android.telephony.TelephonyManager $r3;
        android.content.Context $r4;
        int $i0, $i1;
        char $c2;
        byte $b3, $b4;
        java.lang.StringBuilder $r9;

        r0 := @this: com.android.ims.ImsManager;

        z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_ims_gba_required_bool");

        z1 = 1;

        if z0 == 0 goto label4;

        $r3 = new android.telephony.TelephonyManager;

        $r4 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        specialinvoke $r3.<android.telephony.TelephonyManager: void <init>(android.content.Context,int)>($r4, $i0);

        r1 = virtualinvoke $r3.<android.telephony.TelephonyManager: java.lang.String getIsimIst()>();

        if r1 != null goto label1;

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String)>("isGbaValid - ISF is NULL");

        return 1;

     label1:
        if r1 == null goto label2;

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i1 <= 1 goto label2;

        $c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $b3 = (byte) $c2;

        $b4 = $b3 & 2;

        if $b4 == 0 goto label2;

        goto label3;

     label2:
        z1 = 0;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isGbaValid - GBA capable=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ISF=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r10);

        return z1;

     label4:
        return 1;
    }

    private boolean isImsNeeded(android.telephony.ims.feature.CapabilityChangeRequest)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.feature.CapabilityChangeRequest r1;
        java.util.List $r2;
        java.util.stream.Stream $r3;
        com.android.ims.'-$$Lambda$ImsManager$YhRaDrc3t9_7beNiU5gQcqZilOw' $r4;
        boolean $z0;
        java.util.function.Predicate r5;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.feature.CapabilityChangeRequest;

        $r2 = virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: java.util.List getCapabilitiesToEnable()>();

        $r3 = interfaceinvoke $r2.<java.util.List: java.util.stream.Stream stream()>();

        $r4 = <com.android.ims._$$Lambda$ImsManager$YhRaDrc3t9_7beNiU5gQcqZilOw: com.android.ims.'-$$Lambda$ImsManager$YhRaDrc3t9_7beNiU5gQcqZilOw' INSTANCE>;

        r5 = (java.util.function.Predicate) $r4;

        $z0 = interfaceinvoke $r3.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>(r5);

        return $z0;
    }

    public static boolean isImsSupportedOnDevice(android.content.Context)
    {
        android.content.Context r0;
        android.content.pm.PackageManager $r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r1.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.telephony.ims");

        return $z0;
    }

    private boolean isImsTurnOffAllowed()
    {
        com.android.ims.ImsManager r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.ims.ImsManager;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean isTurnOffImsAllowedByPlatform()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcEnabledByPlatform()>();

        if $z1 == 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcEnabledByUser()>();

        if $z2 != 0 goto label2;

     label1:
        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    public static boolean isNonTtyOrTtyOnVolteEnabled(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isNonTtyOrTtyOnVolteEnabled()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isNonTtyOrTtyOnVolteEnabled: ImsManager null, returning default value.");

        return 0;
    }

    private boolean isSubIdValid(int)
    {
        com.android.ims.ImsManager r0;
        int i0;
        boolean $z0, z1;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>(i0);

        if $z0 == 0 goto label1;

        if i0 == 2147483647 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isTurnOffImsAllowedByPlatform()
    {
        com.android.ims.ImsManager r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1, $i2;
        java.lang.String $r4, $r6;
        boolean $z0;

        r0 := @this: com.android.ims.ImsManager;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("persist.dbg.allow_ims_off");

        $i0 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>($r6, -1);

        if $i1 == 1 goto label2;

        $i2 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.dbg.allow_ims_off", -1);

        if $i2 != 1 goto label1;

        goto label2;

     label1:
        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_allow_turnoff_ims_bool");

        return $z0;

     label2:
        return 1;
    }

    private static boolean isTurnOffImsAllowedByPlatform(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = specialinvoke r1.<com.android.ims.ImsManager: boolean isTurnOffImsAllowedByPlatform()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isTurnOffImsAllowedByPlatform: ImsManager null, returning default value.");

        return 1;
    }

    public static boolean isVolteEnabledByPlatform(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isVolteEnabledByPlatform()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isVolteEnabledByPlatform: ImsManager null, returning default value.");

        return 0;
    }

    private boolean isVolteProvisioned()
    {
        com.android.ims.ImsManager r0;
        boolean $z0;

        r0 := @this: com.android.ims.ImsManager;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getProvisionedBoolNoException(int)>(10);

        return $z0;
    }

    public static boolean isVolteProvisionedOnDevice(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isVolteProvisionedOnDevice()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isVolteProvisionedOnDevice: ImsManager null, returning default value.");

        return 1;
    }

    public static boolean isVtEnabledByPlatform(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isVtEnabledByPlatform()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isVtEnabledByPlatform: ImsManager null, returning default value.");

        return 0;
    }

    public static boolean isVtEnabledByUser(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isVtEnabledByUser()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isVtEnabledByUser: ImsManager null, returning default value.");

        return 0;
    }

    private boolean isVtProvisioned()
    {
        com.android.ims.ImsManager r0;
        boolean $z0;

        r0 := @this: com.android.ims.ImsManager;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getProvisionedBoolNoException(int)>(11);

        return $z0;
    }

    public static boolean isVtProvisionedOnDevice(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isVtProvisionedOnDevice()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isVtProvisionedOnDevice: ImsManager null, returning default value.");

        return 1;
    }

    public static boolean isWfcEnabledByPlatform(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isWfcEnabledByPlatform()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isWfcEnabledByPlatform: ImsManager null, returning default value.");

        return 0;
    }

    public static boolean isWfcEnabledByUser(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isWfcEnabledByUser()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isWfcEnabledByUser: ImsManager null, returning default value.");

        return 1;
    }

    private boolean isWfcProvisioned()
    {
        com.android.ims.ImsManager r0;
        boolean $z0;

        r0 := @this: com.android.ims.ImsManager;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getProvisionedBoolNoException(int)>(28);

        return $z0;
    }

    public static boolean isWfcProvisionedOnDevice(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isWfcProvisionedOnDevice()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isWfcProvisionedOnDevice: ImsManager null, returning default value.");

        return 1;
    }

    public static boolean isWfcRoamingEnabledByUser(android.content.Context)
    {
        int $i0;
        boolean $z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isWfcRoamingEnabledByUser()>();

        return $z0;

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "isWfcRoamingEnabledByUser: ImsManager null, returning default value.");

        return 0;
    }

    static boolean lambda$isImsNeeded$3(android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair)
    {
        android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair;

        $i0 = virtualinvoke r0.<android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair: int getCapability()>();

        if $i0 == 4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void log(java.lang.String)
    {
        com.android.ims.ImsManager r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImsManager [");

        $i0 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r7, r1);

        return;
    }

    private void loge(java.lang.String)
    {
        com.android.ims.ImsManager r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImsManager [");

        $i0 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r7, r1);

        return;
    }

    private void loge(java.lang.String, java.lang.Throwable)
    {
        com.android.ims.ImsManager r0;
        java.lang.String r1, $r8;
        java.lang.Throwable r2;
        java.lang.StringBuilder $r4;
        int $i0;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImsManager [");

        $i0 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, r1, r2);

        return;
    }

    private void logi(java.lang.String)
    {
        com.android.ims.ImsManager r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImsManager [");

        $i0 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int i(java.lang.String,java.lang.String)>($r7, r1);

        return;
    }

    private void logw(java.lang.String)
    {
        com.android.ims.ImsManager r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImsManager [");

        $i0 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int w(java.lang.String,java.lang.String)>($r7, r1);

        return;
    }

    private android.telephony.ims.ImsReasonInfo makeACopy(android.telephony.ims.ImsReasonInfo)
    {
        com.android.ims.ImsManager r0;
        android.os.Parcel r1;
        android.os.Parcelable$Creator $r2;
        java.lang.Object $r3;
        android.telephony.ims.ImsReasonInfo r4, r5;

        r0 := @this: com.android.ims.ImsManager;

        r4 := @parameter0: android.telephony.ims.ImsReasonInfo;

        r1 = staticinvoke <android.os.Parcel: android.os.Parcel obtain()>();

        virtualinvoke r4.<android.telephony.ims.ImsReasonInfo: void writeToParcel(android.os.Parcel,int)>(r1, 0);

        virtualinvoke r1.<android.os.Parcel: void setDataPosition(int)>(0);

        $r2 = <android.telephony.ims.ImsReasonInfo: android.os.Parcelable$Creator CREATOR>;

        $r3 = interfaceinvoke $r2.<android.os.Parcelable$Creator: java.lang.Object createFromParcel(android.os.Parcel)>(r1);

        r5 = (android.telephony.ims.ImsReasonInfo) $r3;

        virtualinvoke r1.<android.os.Parcel: void recycle()>();

        return r5;
    }

    private void setAdvanced4GMode(boolean) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        boolean z0, $z1;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.ims.ImsManager: void setLteFeatureValues(boolean)>(z0);

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("setAdvanced4GMode: turnOnIms");

        specialinvoke r0.<com.android.ims.ImsManager: void turnOnIms()>();

        goto label3;

     label1:
        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean isImsTurnOffAllowed()>();

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("setAdvanced4GMode: turnOffIms");

        specialinvoke r0.<com.android.ims.ImsManager: void turnOffIms()>();

     label2:
        specialinvoke r0.<com.android.ims.ImsManager: void setLteFeatureValues(boolean)>(z0);

     label3:
        return;
    }

    public static void setEnhanced4gLteModeSetting(android.content.Context, boolean)
    {
        boolean z0;
        int $i0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.ims.ImsManager: void setEnhanced4gLteModeSetting(boolean)>(z0);

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "setEnhanced4gLteModeSetting: ImsManager null, value not set.");

        return;
    }

    private void setLteFeatureValues(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0, z1, $z2, $z3, $z4, z5;
        java.lang.StringBuilder $r2, $r8;
        java.lang.String $r5, $r10, $r12;
        android.telephony.ims.feature.CapabilityChangeRequest $r6;
        android.os.RemoteException $r7;
        com.android.ims.MmTelFeatureConnection $r15;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setLteFeatureValues: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r5);

        $r6 = new android.telephony.ims.feature.CapabilityChangeRequest;

        specialinvoke $r6.<android.telephony.ims.feature.CapabilityChangeRequest: void <init>()>();

        z5 = 1;

        if z0 == 0 goto label01;

        virtualinvoke $r6.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToEnableForTech(int,int)>(1, 0);

        goto label02;

     label01:
        virtualinvoke $r6.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(1, 0);

     label02:
        $z2 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtEnabledByPlatform()>();

        if $z2 == 0 goto label07;

        z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("ignore_data_enabled_changed_for_video_calls");

        if z0 == 0 goto label04;

        $z3 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtEnabledByUser()>();

        if $z3 == 0 goto label04;

        if z1 != 0 goto label03;

        $z4 = specialinvoke r0.<com.android.ims.ImsManager: boolean isDataEnabled()>();

        if $z4 == 0 goto label04;

     label03:
        goto label05;

     label04:
        z5 = 0;

     label05:
        if z5 == 0 goto label06;

        virtualinvoke $r6.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToEnableForTech(int,int)>(2, 0);

        goto label07;

     label06:
        virtualinvoke $r6.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(2, 0);

     label07:
        $r15 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r15.<com.android.ims.MmTelFeatureConnection: void changeEnabledCapabilities(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>($r6, null);

     label08:
        goto label10;

     label09:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setLteFeatureValues: Exception: ");

        $r10 = virtualinvoke $r7.<android.os.RemoteException: java.lang.String getMessage()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String)>($r12);

     label10:
        return;

        catch android.os.RemoteException from label07 to label08 with label09;
    }

    private void setProvisionedBool(com.android.ims.ImsConfig, int, int) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0, i1, $i2;
        java.lang.StringBuilder $r1;
        com.android.ims.ImsException $r4;
        java.lang.String $r5;
        com.android.ims.ImsConfig r6;

        r0 := @this: com.android.ims.ImsManager;

        r6 := @parameter0: com.android.ims.ImsConfig;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = virtualinvoke r6.<com.android.ims.ImsConfig: int setConfig(int,int)>(i0, i1);

        if $i2 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setProvisionedBool failed with error for item: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new com.android.ims.ImsException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<com.android.ims.ImsException: void <init>(java.lang.String,int)>($r5, 103);

        throw $r4;
    }

    private boolean setProvisionedBoolNoException(int, int)
    {
        com.android.ims.ImsManager r0;
        int i0, i1;
        com.android.ims.ImsConfig $r3;
        com.android.ims.ImsException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r11, $r13;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r3 = virtualinvoke r0.<com.android.ims.ImsManager: com.android.ims.ImsConfig getConfigInterface()>();

        specialinvoke r0.<com.android.ims.ImsManager: void setProvisionedBool(com.android.ims.ImsConfig,int,int)>($r3, i0, i1);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setProvisionedBoolNoException: operation failed for item=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", value=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Exception:");

        $r11 = virtualinvoke $r4.<com.android.ims.ImsException: java.lang.String getMessage()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void logw(java.lang.String)>($r13);

        return 0;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    private void setRttConfig(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0;
        com.android.ims._$$Lambda$ImsManager$CwzXIbVJZNvgdV2t7LH2gUKL7AA $r1;
        com.android.ims.ImsManager$ExecutorFactory $r2;
        byte b0;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        b0 = 1;

        goto label2;

     label1:
        b0 = 0;

     label2:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.ImsManager$ExecutorFactory mExecutorFactory>;

        $r1 = new com.android.ims._$$Lambda$ImsManager$CwzXIbVJZNvgdV2t7LH2gUKL7AA;

        specialinvoke $r1.<com.android.ims._$$Lambda$ImsManager$CwzXIbVJZNvgdV2t7LH2gUKL7AA: void <init>(com.android.ims.ImsManager,boolean,int)>(r0, z0, b0);

        interfaceinvoke $r2.<com.android.ims.ImsManager$ExecutorFactory: void executeRunnable(java.lang.Runnable)>($r1);

        return;
    }

    public static void setVtSetting(android.content.Context, boolean)
    {
        boolean z0;
        int $i0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.ims.ImsManager: void setVtSetting(boolean)>(z0);

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "setVtSetting: ImsManager null, can not set value.");

        return;
    }

    public static void setWfcMode(android.content.Context, int)
    {
        int i0, $i1;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i1);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.ims.ImsManager: void setWfcMode(int)>(i0);

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "setWfcMode: ImsManager null, can not set value.");

        return;
    }

    public static void setWfcMode(android.content.Context, int, boolean)
    {
        int i0, $i1;
        boolean z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        $i1 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i1);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.ims.ImsManager: void setWfcMode(int,boolean)>(i0, z0);

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "setWfcMode: ImsManager null, can not set value.");

        return;
    }

    private void setWfcModeInternal(int)
    {
        com.android.ims.ImsManager r0;
        int i0;
        com.android.ims._$$Lambda$ImsManager$LiW49wt0wLMYHjgtAwL8NLIATfs $r1;
        com.android.ims.ImsManager$ExecutorFactory $r2;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.ImsManager$ExecutorFactory mExecutorFactory>;

        $r1 = new com.android.ims._$$Lambda$ImsManager$LiW49wt0wLMYHjgtAwL8NLIATfs;

        specialinvoke $r1.<com.android.ims._$$Lambda$ImsManager$LiW49wt0wLMYHjgtAwL8NLIATfs: void <init>(com.android.ims.ImsManager,int)>(r0, i0);

        interfaceinvoke $r2.<com.android.ims.ImsManager$ExecutorFactory: void executeRunnable(java.lang.Runnable)>($r1);

        return;
    }

    public static void setWfcRoamingSetting(android.content.Context, boolean)
    {
        boolean z0;
        int $i0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.ims.ImsManager: void setWfcRoamingSetting(boolean)>(z0);

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "setWfcRoamingSetting: ImsManager null, value not set.");

        return;
    }

    private void setWfcRoamingSettingInternal(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0;
        com.android.ims._$$Lambda$ImsManager$D1JuJ3ba2jMHWDKlSpm03meBR1c $r1;
        com.android.ims.ImsManager$ExecutorFactory $r2;
        byte b0;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        b0 = 1;

        goto label2;

     label1:
        b0 = 0;

     label2:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.ImsManager$ExecutorFactory mExecutorFactory>;

        $r1 = new com.android.ims._$$Lambda$ImsManager$D1JuJ3ba2jMHWDKlSpm03meBR1c;

        specialinvoke $r1.<com.android.ims._$$Lambda$ImsManager$D1JuJ3ba2jMHWDKlSpm03meBR1c: void <init>(com.android.ims.ImsManager,int)>(r0, b0);

        interfaceinvoke $r2.<com.android.ims.ImsManager$ExecutorFactory: void executeRunnable(java.lang.Runnable)>($r1);

        return;
    }

    public static void setWfcSetting(android.content.Context, boolean)
    {
        boolean z0;
        int $i0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        z0 := @parameter1: boolean;

        $i0 = staticinvoke <android.telephony.SubscriptionManager: int getDefaultVoicePhoneId()>();

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, $i0);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.ims.ImsManager: void setWfcSetting(boolean)>(z0);

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "setWfcSetting: ImsManager null, can not set value.");

        return;
    }

    private void turnOffIms() throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        int $i0;
        android.telephony.TelephonyManager $r3;

        r0 := @this: com.android.ims.ImsManager;

        $r1 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r3 = (android.telephony.TelephonyManager) $r2;

        $i0 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        virtualinvoke $r3.<android.telephony.TelephonyManager: void disableIms(int)>($i0);

        return;
    }

    private void turnOnIms() throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        int $i0;
        android.telephony.TelephonyManager $r3;

        r0 := @this: com.android.ims.ImsManager;

        $r1 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r3 = (android.telephony.TelephonyManager) $r2;

        $i0 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        virtualinvoke $r3.<android.telephony.TelephonyManager: void enableIms(int)>($i0);

        return;
    }

    private void updateImsCarrierConfigs(android.os.PersistableBundle) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.aidl.IImsConfig r1;
        com.android.ims.MmTelFeatureConnection $r2;
        com.android.ims.ImsException $r3, $r5;
        android.os.RemoteException $r4;
        android.os.PersistableBundle r6;

        r0 := @this: com.android.ims.ImsManager;

        r6 := @parameter0: android.os.PersistableBundle;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        r1 = virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: android.telephony.ims.aidl.IImsConfig getConfigInterface()>();

        if r1 == null goto label4;

     label1:
        interfaceinvoke r1.<android.telephony.ims.aidl.IImsConfig: void updateImsCarrierConfigs(android.os.PersistableBundle)>(r6);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.android.ims.ImsException;

        specialinvoke $r5.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("updateImsCarrierConfigs()", $r4, 106);

        throw $r5;

     label4:
        $r3 = new com.android.ims.ImsException;

        specialinvoke $r3.<com.android.ims.ImsException: void <init>(java.lang.String,int)>("getConfigInterface()", 131);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static void updateImsServiceConfig(android.content.Context, int, boolean)
    {
        int i0;
        boolean z0;
        android.content.Context r0;
        com.android.ims.ImsManager r1;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, i0);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.ims.ImsManager: void updateImsServiceConfig(boolean)>(z0);

     label1:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsManager", "updateImsServiceConfig: ImsManager null, returning without update.");

        return;
    }

    private void updateUtFeatureValue(android.telephony.ims.feature.CapabilityChangeRequest)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.feature.CapabilityChangeRequest r1;
        boolean z0, z1, z3, z4;
        android.os.TelephonyServiceManager $r8;
        android.os.TelephonyServiceManager$ServiceRegisterer $r9;
        android.os.IBinder $r10;
        int $i0;
        android.os.RemoteException $r11;
        com.android.internal.telephony.ITelephony r12;
        java.lang.StringBuilder $r14;
        java.lang.String $r16;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.feature.CapabilityChangeRequest;

        z0 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isSuppServicesOverUtEnabledByPlatform()>();

        z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_ut_provisioning_required_bool");

        z3 = 1;

        if z1 == 0 goto label4;

        $r8 = staticinvoke <android.telephony.TelephonyFrameworkInitializer: android.os.TelephonyServiceManager getTelephonyServiceManager()>();

        $r9 = virtualinvoke $r8.<android.os.TelephonyServiceManager: android.os.TelephonyServiceManager$ServiceRegisterer getTelephonyServiceRegisterer()>();

        $r10 = virtualinvoke $r9.<android.os.TelephonyServiceManager$ServiceRegisterer: android.os.IBinder get()>();

        r12 = staticinvoke <com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>($r10);

        z3 = 1;

        if r12 == null goto label4;

     label1:
        $i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        z3 = interfaceinvoke r12.<com.android.internal.telephony.ITelephony: boolean isMmTelCapabilityProvisionedInCache(int,int,int)>($i0, 4, 0);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String)>("updateUtFeatureValue: couldn\'t reach telephony! returning provisioned");

        z3 = 1;

     label4:
        if z0 == 0 goto label5;

        if z3 == 0 goto label5;

        z4 = 1;

        goto label6;

     label5:
        z4 = 0;

     label6:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateUtFeatureValue: available = ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isProvisioned = ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", enabled = ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r16);

        if z4 == 0 goto label7;

        virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToEnableForTech(int,int)>(4, 0);

        goto label8;

     label7:
        virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(4, 0);

     label8:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void updateVideoCallFeatureValue(android.telephony.ims.feature.CapabilityChangeRequest)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.feature.CapabilityChangeRequest r1;
        boolean z0, z1, z2, z3, z4, z5, z6;
        java.lang.StringBuilder $r15;
        java.lang.String $r16;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.feature.CapabilityChangeRequest;

        z0 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtEnabledByPlatform()>();

        z1 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtEnabledByUser()>();

        z2 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isNonTtyOrTtyOnVolteEnabled()>();

        z3 = specialinvoke r0.<com.android.ims.ImsManager: boolean isDataEnabled()>();

        z5 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("ignore_data_enabled_changed_for_video_calls");

        z4 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtProvisionedOnDevice()>();

        if z0 == 0 goto label2;

        if z1 == 0 goto label2;

        if z2 == 0 goto label2;

        if z4 == 0 goto label2;

        if z5 != 0 goto label1;

        if z3 == 0 goto label2;

     label1:
        z6 = 1;

        goto label3;

     label2:
        z6 = 0;

     label3:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateVideoCallFeatureValue: available = ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", enabled = ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", nonTTY = ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", data enabled = ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", provisioned = ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isFeatureOn = ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r16);

        if z6 == 0 goto label4;

        virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToEnableForTech(int,int)>(2, 0);

        goto label5;

     label4:
        virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(2, 0);

     label5:
        return;
    }

    private void updateVolteFeatureValue(android.telephony.ims.feature.CapabilityChangeRequest)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.feature.CapabilityChangeRequest r1;
        boolean z0, z1, z2, z3, z4;
        java.lang.StringBuilder $r13;
        java.lang.String $r14;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.feature.CapabilityChangeRequest;

        z0 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVolteEnabledByPlatform()>();

        z1 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser()>();

        z2 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isNonTtyOrTtyOnVolteEnabled()>();

        z3 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVolteProvisionedOnDevice()>();

        if z0 == 0 goto label1;

        if z1 == 0 goto label1;

        if z2 == 0 goto label1;

        if z3 == 0 goto label1;

        z4 = 1;

        goto label2;

     label1:
        z4 = 0;

     label2:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateVolteFeatureValue: available = ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", enabled = ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", nonTTY = ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", provisioned = ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isFeatureOn = ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r14);

        if z4 == 0 goto label3;

        virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToEnableForTech(int,int)>(1, 0);

        goto label4;

     label3:
        virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(1, 0);

     label4:
        return;
    }

    private void updateWfcFeatureAndProvisionedValues(android.telephony.ims.feature.CapabilityChangeRequest)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.feature.CapabilityChangeRequest r1;
        boolean z0, z1, z2, z3, z4, z5;
        android.telephony.TelephonyManager $r3;
        android.content.Context $r4;
        int $i0, i1;
        java.lang.StringBuilder $r17;
        java.lang.String $r18;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.feature.CapabilityChangeRequest;

        $r3 = new android.telephony.TelephonyManager;

        $r4 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        specialinvoke $r3.<android.telephony.TelephonyManager: void <init>(android.content.Context,int)>($r4, $i0);

        z3 = virtualinvoke $r3.<android.telephony.TelephonyManager: boolean isNetworkRoaming()>();

        z0 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcEnabledByPlatform()>();

        z1 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcEnabledByUser()>();

        z2 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcProvisionedOnDevice()>();

        i1 = virtualinvoke r0.<com.android.ims.ImsManager: int getWfcMode(boolean)>(z3);

        z4 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcRoamingEnabledByUser()>();

        if z0 == 0 goto label1;

        if z1 == 0 goto label1;

        if z2 == 0 goto label1;

        z5 = 1;

        goto label2;

     label1:
        z5 = 0;

     label2:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateWfcFeatureAndProvisionedValues: available = ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", enabled = ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mode = ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", provisioned = ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", roaming = ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isFeatureOn = ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z5);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r18);

        if z5 == 0 goto label3;

        virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToEnableForTech(int,int)>(1, 1);

        goto label4;

     label3:
        virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(1, 1);

     label4:
        if z5 != 0 goto label5;

        i1 = 1;

        z4 = 0;

     label5:
        specialinvoke r0.<com.android.ims.ImsManager: void setWfcModeInternal(int)>(i1);

        specialinvoke r0.<com.android.ims.ImsManager: void setWfcRoamingSettingInternal(boolean)>(z4);

        return;
    }

    public void acknowledgeSms(int, int, int) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0, i1, i2;
        com.android.ims.MmTelFeatureConnection $r2;
        android.os.RemoteException $r3;
        com.android.ims.ImsException $r4;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: void acknowledgeSms(int,int,int)>(i0, i1, i2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.android.ims.ImsException;

        specialinvoke $r4.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("acknowledgeSms()", $r3, 106);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void acknowledgeSmsReport(int, int, int) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0, i1, i2;
        com.android.ims.MmTelFeatureConnection $r2;
        android.os.RemoteException $r3;
        com.android.ims.ImsException $r4;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

     label1:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: void acknowledgeSmsReport(int,int,int)>(i0, i1, i2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.android.ims.ImsException;

        specialinvoke $r4.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("acknowledgeSmsReport()", $r3, 106);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void addCapabilitiesCallback(android.telephony.ims.ImsMmTelManager$CapabilityCallback) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        java.lang.NullPointerException $r1;
        java.util.concurrent.Executor $r2;
        com.android.ims.MmTelFeatureConnection $r3;
        android.telephony.ims.aidl.IImsCapabilityCallback $r4;
        java.lang.Throwable $r5;
        com.android.ims.ImsException $r6;
        android.telephony.ims.ImsMmTelManager$CapabilityCallback r7;

        r0 := @this: com.android.ims.ImsManager;

        r7 := @parameter0: android.telephony.ims.ImsMmTelManager$CapabilityCallback;

        if r7 == null goto label4;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

     label1:
        $r2 = specialinvoke r0.<com.android.ims.ImsManager: java.util.concurrent.Executor getThreadExecutor()>();

        virtualinvoke r7.<android.telephony.ims.ImsMmTelManager$CapabilityCallback: void setExecutor(java.util.concurrent.Executor)>($r2);

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $r4 = virtualinvoke r7.<android.telephony.ims.ImsMmTelManager$CapabilityCallback: android.telephony.ims.aidl.IImsCapabilityCallback getBinder()>();

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void addCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>($r4);

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("Capability Callback registered.");

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = new com.android.ims.ImsException;

        specialinvoke $r6.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("addCapabilitiesCallback(IF)", $r5, 106);

        throw $r6;

     label4:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("capabilities callback can\'t be null");

        throw $r1;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void addCapabilitiesCallbackForSubscription(android.telephony.ims.aidl.IImsCapabilityCallback, int) throws android.os.RemoteException
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.aidl.IImsCapabilityCallback r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        com.android.ims.MmTelFeatureConnection $r3;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.aidl.IImsCapabilityCallback;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void addCapabilityCallbackForSubscription(android.telephony.ims.aidl.IImsCapabilityCallback,int)>(r1, i0);

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("Capability Callback registered for subscription.");

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("registration callback can\'t be null");

        throw $r2;
    }

    public void addNotifyStatusChangedCallbackIfAvailable(com.android.ims.FeatureConnection$IFeatureUpdate) throws android.telephony.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.FeatureConnection$IFeatureUpdate r1;
        com.android.ims.MmTelFeatureConnection $r2;
        boolean $z0;
        android.telephony.ims.ImsException $r3;
        java.util.Set $r4;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: com.android.ims.FeatureConnection$IFeatureUpdate;

        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $z0 = virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: boolean isBinderAlive()>();

        if $z0 == 0 goto label2;

        if r1 == null goto label1;

        $r4 = r0.<com.android.ims.ImsManager: java.util.Set mStatusCallbacks>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label1:
        return;

     label2:
        $r3 = new android.telephony.ims.ImsException;

        specialinvoke $r3.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Can not connect to ImsService", 1);

        throw $r3;
    }

    public void addProvisioningCallbackForSubscription(android.telephony.ims.aidl.IImsConfigCallback, int)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.aidl.IImsConfigCallback r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        com.android.ims.MmTelFeatureConnection $r3;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.aidl.IImsConfigCallback;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void addProvisioningCallbackForSubscription(android.telephony.ims.aidl.IImsConfigCallback,int)>(r1, i0);

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("Capability Callback registered for subscription.");

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provisioning callback can\'t be null");

        throw $r2;
    }

    public void addRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        java.lang.NullPointerException $r1;
        java.util.concurrent.Executor $r2;
        com.android.ims.MmTelFeatureConnection $r3;
        android.telephony.ims.aidl.IImsRegistrationCallback $r4;
        java.lang.Throwable $r5;
        com.android.ims.ImsException $r6;
        android.telephony.ims.RegistrationManager$RegistrationCallback r7;

        r0 := @this: com.android.ims.ImsManager;

        r7 := @parameter0: android.telephony.ims.RegistrationManager$RegistrationCallback;

        if r7 == null goto label4;

     label1:
        $r2 = specialinvoke r0.<com.android.ims.ImsManager: java.util.concurrent.Executor getThreadExecutor()>();

        virtualinvoke r7.<android.telephony.ims.RegistrationManager$RegistrationCallback: void setExecutor(java.util.concurrent.Executor)>($r2);

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $r4 = virtualinvoke r7.<android.telephony.ims.RegistrationManager$RegistrationCallback: android.telephony.ims.aidl.IImsRegistrationCallback getBinder()>();

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void addRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>($r4);

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("Registration Callback registered.");

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = new com.android.ims.ImsException;

        specialinvoke $r6.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("addRegistrationCallback(IRIB)", $r5, 106);

        throw $r6;

     label4:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("registration callback can\'t be null");

        throw $r1;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void addRegistrationCallbackForSubscription(android.telephony.ims.aidl.IImsRegistrationCallback, int) throws android.os.RemoteException
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.aidl.IImsRegistrationCallback r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        com.android.ims.MmTelFeatureConnection $r3;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.aidl.IImsRegistrationCallback;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void addRegistrationCallbackForSubscription(android.telephony.ims.aidl.IImsRegistrationCallback,int)>(r1, i0);

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("Registration Callback registered.");

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("registration callback can\'t be null");

        throw $r2;
    }

    public void addRegistrationListener(int, com.android.ims.ImsConnectionStateListener) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0;
        com.android.ims.ImsConnectionStateListener r1;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.ims.ImsConnectionStateListener;

        virtualinvoke r0.<com.android.ims.ImsManager: void addRegistrationListener(com.android.ims.ImsConnectionStateListener)>(r1);

        return;
    }

    public void addRegistrationListener(com.android.ims.ImsConnectionStateListener) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.ImsConnectionStateListener r1;
        java.lang.NullPointerException $r2;
        com.android.ims.ImsManager$1 $r3;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: com.android.ims.ImsConnectionStateListener;

        if r1 == null goto label1;

        virtualinvoke r0.<com.android.ims.ImsManager: void addRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)>(r1);

        $r3 = new com.android.ims.ImsManager$1;

        specialinvoke $r3.<com.android.ims.ImsManager$1: void <init>(com.android.ims.ImsManager,com.android.ims.ImsConnectionStateListener)>(r0, r1);

        virtualinvoke r0.<com.android.ims.ImsManager: void addCapabilitiesCallback(android.telephony.ims.ImsMmTelManager$CapabilityCallback)>($r3);

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("Registration Callback registered.");

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("listener can\'t be null");

        throw $r2;
    }

    public void changeMmTelCapability(int, int, boolean) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0, i1;
        boolean z0;
        android.telephony.ims.feature.CapabilityChangeRequest $r2;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r2 = new android.telephony.ims.feature.CapabilityChangeRequest;

        specialinvoke $r2.<android.telephony.ims.feature.CapabilityChangeRequest: void <init>()>();

        if z0 == 0 goto label1;

        virtualinvoke $r2.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToEnableForTech(int,int)>(i0, i1);

        goto label2;

     label1:
        virtualinvoke $r2.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(i0, i1);

     label2:
        virtualinvoke r0.<com.android.ims.ImsManager: void changeMmTelCapability(android.telephony.ims.feature.CapabilityChangeRequest)>($r2);

        return;
    }

    public void changeMmTelCapability(android.telephony.ims.feature.CapabilityChangeRequest) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair r1, r21;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r6;
        com.android.ims.MmTelFeatureConnection $r7;
        com.android.ims.ImsConfigListener $r8, $r12, $r14;
        java.util.List $r9, $r10;
        boolean $z0, $z1;
        java.lang.Object $r11, $r13;
        android.os.RemoteException $r15;
        com.android.ims.ImsException $r16;
        android.telephony.ims.feature.CapabilityChangeRequest r17;
        java.lang.StringBuilder r18;
        java.util.Iterator r19, r20;

        r0 := @this: com.android.ims.ImsManager;

        r17 := @parameter0: android.telephony.ims.feature.CapabilityChangeRequest;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

     label01:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("changeMmTelCapability: changing capabilities for sub: ");

        $i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", request: ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        $r6 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void logi(java.lang.String)>($r6);

        $r7 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r7.<com.android.ims.MmTelFeatureConnection: void changeEnabledCapabilities(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>(r17, null);

        $r8 = r0.<com.android.ims.ImsManager: com.android.ims.ImsConfigListener mImsConfigListener>;

        if $r8 != null goto label03;

     label02:
        return;

     label03:
        $r9 = virtualinvoke r17.<android.telephony.ims.feature.CapabilityChangeRequest: java.util.List getCapabilitiesToEnable()>();

        r19 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label06;

        $r13 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r1 = (android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair) $r13;

        $r14 = r0.<com.android.ims.ImsManager: com.android.ims.ImsConfigListener mImsConfigListener>;

        $i3 = virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair: int getCapability()>();

        $i4 = virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair: int getRadioTech()>();

        interfaceinvoke $r14.<com.android.ims.ImsConfigListener: void onSetFeatureResponse(int,int,int,int)>($i3, $i4, 1, -1);

     label05:
        goto label04;

     label06:
        $r10 = virtualinvoke r17.<android.telephony.ims.feature.CapabilityChangeRequest: java.util.List getCapabilitiesToDisable()>();

        r20 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>();

     label07:
        $z1 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r11 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair) $r11;

        $r12 = r0.<com.android.ims.ImsManager: com.android.ims.ImsConfigListener mImsConfigListener>;

        $i1 = virtualinvoke r21.<android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair: int getCapability()>();

        $i2 = virtualinvoke r21.<android.telephony.ims.feature.CapabilityChangeRequest$CapabilityPair: int getRadioTech()>();

        interfaceinvoke $r12.<com.android.ims.ImsConfigListener: void onSetFeatureResponse(int,int,int,int)>($i1, $i2, 0, -1);

     label08:
        goto label07;

     label09:
        return;

     label10:
        $r15 := @caughtexception;

        $r16 = new com.android.ims.ImsException;

        specialinvoke $r16.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("changeMmTelCapability(CCR)", $r15, 106);

        throw $r16;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.RemoteException from label03 to label04 with label10;
        catch android.os.RemoteException from label04 to label05 with label10;
        catch android.os.RemoteException from label06 to label07 with label10;
        catch android.os.RemoteException from label07 to label08 with label10;
    }

    public void close()
    {
        com.android.ims.ImsManager r0;
        com.android.ims.MmTelFeatureConnection r1;

        r0 := @this: com.android.ims.ImsManager;

        r1 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.ims.MmTelFeatureConnection: void closeConnection()>();

     label1:
        r0.<com.android.ims.ImsManager: com.android.ims.ImsUt mUt> = null;

        r0.<com.android.ims.ImsManager: com.android.ims.ImsEcbm mEcbm> = null;

        r0.<com.android.ims.ImsManager: com.android.ims.ImsMultiEndpoint mMultiEndpoint> = null;

        return;
    }

    public void connectIfServiceIsAvailable()
    {
        com.android.ims.ImsManager r0;
        com.android.ims.MmTelFeatureConnection r1;
        boolean $z0;

        r0 := @this: com.android.ims.ImsManager;

        r1 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.ims.MmTelFeatureConnection: boolean isBinderAlive()>();

        if $z0 != 0 goto label2;

     label1:
        specialinvoke r0.<com.android.ims.ImsManager: void createImsService()>();

     label2:
        return;
    }

    public android.telephony.ims.ImsCallProfile createCallProfile(int, int) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0, i1;
        com.android.ims.MmTelFeatureConnection $r1;
        android.os.RemoteException $r2;
        com.android.ims.ImsException $r3;
        android.telephony.ims.ImsCallProfile r4;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

     label1:
        $r1 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        r4 = virtualinvoke $r1.<com.android.ims.MmTelFeatureConnection: android.telephony.ims.ImsCallProfile createCallProfile(int,int)>(i0, i1);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = new com.android.ims.ImsException;

        specialinvoke $r3.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("createCallProfile()", $r2, 106);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.ims.ImsManager r0;
        java.io.PrintWriter r1;
        java.lang.String[] r2;
        java.lang.StringBuilder $r3, $r8, $r12, $r16, $r21, $r25, $r29, $r33, $r37, $r41, $r45, $r49, $r53, $r57, $r61, $r65, $r69, $r73, $r77, $r81, $r85;
        android.content.Context $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.String $r7, $r11, $r15, $r20, $r24, $r28, $r32, $r36, $r40, $r44, $r48, $r52, $r56, $r60, $r64, $r68, $r72, $r76, $r80, $r84, $r88;
        int $i0, $i1, $i2;
        com.android.ims.MmTelFeatureConnection $r18;
        java.io.FileDescriptor r89;

        r0 := @this: com.android.ims.ImsManager;

        r89 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("ImsManager:");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  device supports IMS = ");

        $r5 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.ims.ImsManager: boolean isImsSupportedOnDevice(android.content.Context)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPhoneId = ");

        $i0 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r11);

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mConfigUpdated = ");

        $z1 = r0.<com.android.ims.ImsManager: boolean mConfigUpdated>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mImsServiceProxy = ");

        $r18 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r20);

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDataEnabled = ");

        $z2 = specialinvoke r0.<com.android.ims.ImsManager: boolean isDataEnabled()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r24);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ignoreDataEnabledChanged = ");

        $z3 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("ignore_data_enabled_changed_for_video_calls");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r28);

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isGbaValid = ");

        $z4 = specialinvoke r0.<com.android.ims.ImsManager: boolean isGbaValid()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r32);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isImsTurnOffAllowed = ");

        $z5 = specialinvoke r0.<com.android.ims.ImsManager: boolean isImsTurnOffAllowed()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r36);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isNonTtyOrTtyOnVolteEnabled = ");

        $z6 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isNonTtyOrTtyOnVolteEnabled()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r40);

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isVolteEnabledByPlatform = ");

        $z7 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVolteEnabledByPlatform()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r44);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isVolteProvisionedOnDevice = ");

        $z8 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVolteProvisionedOnDevice()>();

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r48 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r48);

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isEnhanced4gLteModeSettingEnabledByUser = ");

        $z9 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r52);

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isVtEnabledByPlatform = ");

        $z10 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtEnabledByPlatform()>();

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r56);

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isVtEnabledByUser = ");

        $z11 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtEnabledByUser()>();

        virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r60 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r60);

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isWfcEnabledByPlatform = ");

        $z12 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcEnabledByPlatform()>();

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z12);

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r64);

        $r65 = new java.lang.StringBuilder;

        specialinvoke $r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isWfcEnabledByUser = ");

        $z13 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcEnabledByUser()>();

        virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        $r68 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r68);

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  getWfcMode(non-roaming) = ");

        $i1 = virtualinvoke r0.<com.android.ims.ImsManager: int getWfcMode(boolean)>(0);

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r72 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r72);

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  getWfcMode(roaming) = ");

        $i2 = virtualinvoke r0.<com.android.ims.ImsManager: int getWfcMode(boolean)>(1);

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r76 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r76);

        $r77 = new java.lang.StringBuilder;

        specialinvoke $r77.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isWfcRoamingEnabledByUser = ");

        $z14 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcRoamingEnabledByUser()>();

        virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z14);

        $r80 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r80);

        $r81 = new java.lang.StringBuilder;

        specialinvoke $r81.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isVtProvisionedOnDevice = ");

        $z15 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtProvisionedOnDevice()>();

        virtualinvoke $r81.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z15);

        $r84 = virtualinvoke $r81.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r84);

        $r85 = new java.lang.StringBuilder;

        specialinvoke $r85.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  isWfcProvisionedOnDevice = ");

        $z16 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcProvisionedOnDevice()>();

        virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z16);

        $r88 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r88);

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        return;
    }

    public void factoryReset()
    {
        com.android.ims.ImsManager r0;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;

        r0 := @this: com.android.ims.ImsManager;

        i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean isSubIdValid(int)>(i0);

        if $z0 == 0 goto label1;

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(-1);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i0, "volte_vt_enabled", $r6);

        $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(-1);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i0, "wfc_ims_enabled", $r7);

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(-1);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i0, "wfc_ims_mode", $r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(-1);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i0, "wfc_ims_roaming_enabled", $r9);

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(-1);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i0, "wfc_ims_roaming_mode", $r10);

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(-1);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i0, "vt_ims_enabled", $r11);

        $r12 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(0);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i0, "ims_rcs_uce_enabled", $r12);

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("factoryReset: invalid sub id, can not reset siminfo db settings; subId=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String)>($r5);

     label2:
        virtualinvoke r0.<com.android.ims.ImsManager: void updateImsServiceConfig(boolean)>(1);

        return;
    }

    public com.android.ims.ImsConfig getConfigInterface() throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.aidl.IImsConfig r1;
        com.android.ims.MmTelFeatureConnection $r2;
        com.android.ims.ImsException $r3;
        com.android.ims.ImsConfig $r4;

        r0 := @this: com.android.ims.ImsManager;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        r1 = virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: android.telephony.ims.aidl.IImsConfig getConfigInterface()>();

        if r1 == null goto label1;

        $r4 = new com.android.ims.ImsConfig;

        specialinvoke $r4.<com.android.ims.ImsConfig: void <init>(android.telephony.ims.aidl.IImsConfig)>(r1);

        return $r4;

     label1:
        $r3 = new com.android.ims.ImsException;

        specialinvoke $r3.<com.android.ims.ImsException: void <init>(java.lang.String,int)>("getConfigInterface()", 131);

        throw $r3;
    }

    public com.android.ims.ImsEcbm getEcbmInterface() throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.internal.IImsEcbm r1;
        com.android.ims.MmTelFeatureConnection $r2;
        boolean $z0;
        com.android.ims.ImsEcbm $r3, r6, r7;
        android.os.RemoteException $r4;
        com.android.ims.ImsException $r5, r8;

        r0 := @this: com.android.ims.ImsManager;

        r6 = r0.<com.android.ims.ImsManager: com.android.ims.ImsEcbm mEcbm>;

        if r6 == null goto label1;

        $z0 = virtualinvoke r6.<com.android.ims.ImsEcbm: boolean isBinderAlive()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.ImsEcbm mEcbm>;

        return $r3;

     label1:
        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

     label2:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        r1 = virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: com.android.ims.internal.IImsEcbm getEcbmInterface()>();

     label3:
        if r1 == null goto label6;

     label4:
        r7 = new com.android.ims.ImsEcbm;

        specialinvoke r7.<com.android.ims.ImsEcbm: void <init>(com.android.ims.internal.IImsEcbm)>(r1);

        r0.<com.android.ims.ImsManager: com.android.ims.ImsEcbm mEcbm> = r7;

     label5:
        return r7;

     label6:
        r8 = new com.android.ims.ImsException;

        specialinvoke r8.<com.android.ims.ImsException: void <init>(java.lang.String,int)>("getEcbmInterface()", 901);

        throw r8;

     label7:
        $r4 := @caughtexception;

        $r5 = new com.android.ims.ImsException;

        specialinvoke $r5.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("getEcbmInterface()", $r4, 106);

        throw $r5;

        catch android.os.RemoteException from label2 to label3 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
        catch android.os.RemoteException from label6 to label7 with label7;
    }

    public int getImsServiceState() throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.MmTelFeatureConnection $r1;
        int $i0;

        r0 := @this: com.android.ims.ImsManager;

        $r1 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $i0 = virtualinvoke $r1.<com.android.ims.MmTelFeatureConnection: int getFeatureState()>();

        return $i0;
    }

    public void getImsServiceState(java.util.function.Consumer)
    {
        com.android.ims.ImsManager r0;
        java.util.function.Consumer r1;
        com.android.ims._$$Lambda$ImsManager$asJ9uWFV_YPWMDJwNIH8gTM6fQg $r2;
        com.android.ims.ImsManager$ExecutorFactory $r3;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.util.function.Consumer;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.ImsManager$ExecutorFactory mExecutorFactory>;

        $r2 = new com.android.ims._$$Lambda$ImsManager$asJ9uWFV_YPWMDJwNIH8gTM6fQg;

        specialinvoke $r2.<com.android.ims._$$Lambda$ImsManager$asJ9uWFV_YPWMDJwNIH8gTM6fQg: void <init>(com.android.ims.ImsManager,java.util.function.Consumer)>(r0, r1);

        interfaceinvoke $r3.<com.android.ims.ImsManager$ExecutorFactory: void executeRunnable(java.lang.Runnable)>($r2);

        return;
    }

    public com.android.ims.ImsMultiEndpoint getMultiEndpointInterface() throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.ImsMultiEndpoint r1, $r3, r6;
        com.android.ims.MmTelFeatureConnection $r2;
        boolean $z0;
        android.os.RemoteException $r4;
        com.android.ims.ImsException $r5, r8;
        com.android.ims.internal.IImsMultiEndpoint r7;

        r0 := @this: com.android.ims.ImsManager;

        r6 = r0.<com.android.ims.ImsManager: com.android.ims.ImsMultiEndpoint mMultiEndpoint>;

        if r6 == null goto label1;

        $z0 = virtualinvoke r6.<com.android.ims.ImsMultiEndpoint: boolean isBinderAlive()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.ImsMultiEndpoint mMultiEndpoint>;

        return $r3;

     label1:
        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

     label2:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        r7 = virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: com.android.ims.internal.IImsMultiEndpoint getMultiEndpointInterface()>();

     label3:
        if r7 == null goto label6;

     label4:
        r1 = new com.android.ims.ImsMultiEndpoint;

        specialinvoke r1.<com.android.ims.ImsMultiEndpoint: void <init>(com.android.ims.internal.IImsMultiEndpoint)>(r7);

        r0.<com.android.ims.ImsManager: com.android.ims.ImsMultiEndpoint mMultiEndpoint> = r1;

     label5:
        return r1;

     label6:
        r8 = new com.android.ims.ImsException;

        specialinvoke r8.<com.android.ims.ImsException: void <init>(java.lang.String,int)>("getMultiEndpointInterface()", 902);

        throw r8;

     label7:
        $r4 := @caughtexception;

        $r5 = new com.android.ims.ImsException;

        specialinvoke $r5.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("getMultiEndpointInterface()", $r4, 106);

        throw $r5;

        catch android.os.RemoteException from label2 to label3 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
        catch android.os.RemoteException from label6 to label7 with label7;
    }

    public java.util.ArrayList getRecentImsDisconnectReasons()
    {
        com.android.ims.ImsManager r0;
        java.util.Iterator r2;
        java.util.ArrayList $r3;
        java.util.concurrent.ConcurrentLinkedDeque $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.telephony.ims.ImsReasonInfo $r6, $r7;

        r0 := @this: com.android.ims.ImsManager;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        $r4 = r0.<com.android.ims.ImsManager: java.util.concurrent.ConcurrentLinkedDeque mRecentDisconnectReasons>;

        r2 = virtualinvoke $r4.<java.util.concurrent.ConcurrentLinkedDeque: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (android.telephony.ims.ImsReasonInfo) $r5;

        $r7 = specialinvoke r0.<com.android.ims.ImsManager: android.telephony.ims.ImsReasonInfo makeACopy(android.telephony.ims.ImsReasonInfo)>($r6);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        goto label1;

     label2:
        return $r3;
    }

    public int getRegistrationTech()
    {
        com.android.ims.ImsManager r0;
        int i0;
        com.android.ims.MmTelFeatureConnection $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.ims.ImsManager;

     label1:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        i0 = virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: int getRegistrationTech()>();

     label2:
        return i0;

     label3:
        $r3 := @caughtexception;

        specialinvoke r0.<com.android.ims.ImsManager: void logw(java.lang.String)>("getRegistrationTech: no connection to ImsService.");

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void getRegistrationTech(java.util.function.Consumer)
    {
        com.android.ims.ImsManager r0;
        java.util.function.Consumer r1;
        com.android.ims._$$Lambda$ImsManager$auu9PL318cEwW1XLrd9kV0k556Q $r2;
        com.android.ims.ImsManager$ExecutorFactory $r3;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.util.function.Consumer;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.ImsManager$ExecutorFactory mExecutorFactory>;

        $r2 = new com.android.ims._$$Lambda$ImsManager$auu9PL318cEwW1XLrd9kV0k556Q;

        specialinvoke $r2.<com.android.ims._$$Lambda$ImsManager$auu9PL318cEwW1XLrd9kV0k556Q: void <init>(com.android.ims.ImsManager,java.util.function.Consumer)>(r0, r1);

        interfaceinvoke $r3.<com.android.ims.ImsManager$ExecutorFactory: void executeRunnable(java.lang.Runnable)>($r2);

        return;
    }

    public java.lang.String getSmsFormat() throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.MmTelFeatureConnection $r1;
        android.os.RemoteException $r2;
        com.android.ims.ImsException $r3;
        java.lang.String r4;

        r0 := @this: com.android.ims.ImsManager;

     label1:
        $r1 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        r4 = virtualinvoke $r1.<com.android.ims.MmTelFeatureConnection: java.lang.String getSmsFormat()>();

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        $r3 = new com.android.ims.ImsException;

        specialinvoke $r3.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("getSmsFormat()", $r2, 106);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public com.android.ims.ImsUtInterface getSupplementaryServiceConfiguration() throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.ImsUt r1, $r3, r6;
        com.android.ims.MmTelFeatureConnection $r2;
        boolean $z0;
        android.os.RemoteException $r4;
        com.android.ims.ImsException $r5, r8;
        com.android.ims.internal.IImsUt r7;

        r0 := @this: com.android.ims.ImsManager;

        r6 = r0.<com.android.ims.ImsManager: com.android.ims.ImsUt mUt>;

        if r6 == null goto label1;

        $z0 = virtualinvoke r6.<com.android.ims.ImsUt: boolean isBinderAlive()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.ImsUt mUt>;

        return $r3;

     label1:
        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

     label2:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        r7 = virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: com.android.ims.internal.IImsUt getUtInterface()>();

     label3:
        if r7 == null goto label6;

     label4:
        r1 = new com.android.ims.ImsUt;

        specialinvoke r1.<com.android.ims.ImsUt: void <init>(com.android.ims.internal.IImsUt)>(r7);

        r0.<com.android.ims.ImsManager: com.android.ims.ImsUt mUt> = r1;

     label5:
        return r1;

     label6:
        r8 = new com.android.ims.ImsException;

        specialinvoke r8.<com.android.ims.ImsException: void <init>(java.lang.String,int)>("getSupplementaryServiceConfiguration()", 801);

        throw r8;

     label7:
        $r4 := @caughtexception;

        $r5 = new com.android.ims.ImsException;

        specialinvoke $r5.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("getSupplementaryServiceConfiguration()", $r4, 106);

        throw $r5;

        catch android.os.RemoteException from label2 to label3 with label7;
        catch android.os.RemoteException from label4 to label5 with label7;
        catch android.os.RemoteException from label6 to label7 with label7;
    }

    public int getWfcMode()
    {
        com.android.ims.ImsManager r0;
        int $i0;

        r0 := @this: com.android.ims.ImsManager;

        $i0 = virtualinvoke r0.<com.android.ims.ImsManager: int getWfcMode(boolean)>(0);

        return $i0;
    }

    public int getWfcMode(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r3, $r8;
        java.lang.String $r6, $r10;
        int i0;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label3;

        $z3 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("editable_wfc_mode_bool");

        if $z3 != 0 goto label1;

        i0 = specialinvoke r0.<com.android.ims.ImsManager: int getIntCarrierConfig(java.lang.String)>("carrier_default_wfc_ims_mode_int");

        goto label2;

     label1:
        i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSettingFromSubscriptionManager(java.lang.String,java.lang.String)>("wfc_ims_mode", "carrier_default_wfc_ims_mode_int");

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getWfcMode - setting=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r6);

        goto label7;

     label3:
        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("use_wfc_home_network_mode_in_roaming_network_bool");

        if $z1 == 0 goto label4;

        i0 = virtualinvoke r0.<com.android.ims.ImsManager: int getWfcMode(boolean)>(0);

        goto label6;

     label4:
        $z2 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("editable_wfc_roaming_mode_bool");

        if $z2 != 0 goto label5;

        i0 = specialinvoke r0.<com.android.ims.ImsManager: int getIntCarrierConfig(java.lang.String)>("carrier_default_wfc_ims_roaming_mode_int");

        goto label6;

     label5:
        i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSettingFromSubscriptionManager(java.lang.String,java.lang.String)>("wfc_ims_roaming_mode", "carrier_default_wfc_ims_roaming_mode_int");

     label6:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getWfcMode (roaming) - setting=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r10);

     label7:
        return i0;
    }

    public boolean isEabProvisionedOnDevice()
    {
        com.android.ims.ImsManager r0;
        boolean $z0, $z1;

        r0 := @this: com.android.ims.ImsManager;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_rcs_provisioning_required_bool");

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean isEabProvisioned()>();

        return $z1;

     label1:
        return 1;
    }

    public boolean isEnhanced4gLteModeSettingEnabledByUser()
    {
        com.android.ims.ImsManager r0;
        int i0, $i1;
        android.content.Context $r1;
        boolean $z0, $z1, z2, z3;

        r0 := @this: com.android.ims.ImsManager;

        $i1 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $r1 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        i0 = staticinvoke <android.telephony.SubscriptionManager: int getIntegerSubscriptionProperty(int,java.lang.String,int,android.content.Context)>($i1, "volte_vt_enabled", -1, $r1);

        z2 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("enhanced_4g_lte_on_by_default_bool");

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("editable_enhanced_4g_lte_bool");

        if $z0 == 0 goto label4;

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("hide_enhanced_4g_lte_bool");

        if $z1 != 0 goto label4;

        if i0 != -1 goto label1;

        goto label4;

     label1:
        z3 = 1;

        if i0 != 1 goto label2;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;

     label4:
        return z2;
    }

    public boolean isNonTtyOrTtyOnVolteEnabled()
    {
        com.android.ims.ImsManager r0;
        boolean z0, z1;
        android.telecom.TelecomManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        int $i0;

        r0 := @this: com.android.ims.ImsManager;

        z0 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isTtyOnVoLteCapable()>();

        z1 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $r2 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("telecom");

        r1 = (android.telecom.TelecomManager) $r3;

        if r1 != null goto label2;

        specialinvoke r0.<com.android.ims.ImsManager: void logw(java.lang.String)>("isNonTtyOrTtyOnVolteEnabled: telecom not available");

        return 1;

     label2:
        $i0 = virtualinvoke r1.<android.telecom.TelecomManager: int getCurrentTtyMode()>();

        if $i0 != 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    public boolean isServiceAvailable()
    {
        com.android.ims.ImsManager r0;
        com.android.ims.MmTelFeatureConnection $r1;
        boolean $z0;

        r0 := @this: com.android.ims.ImsManager;

        virtualinvoke r0.<com.android.ims.ImsManager: void connectIfServiceIsAvailable()>();

        $r1 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $z0 = virtualinvoke $r1.<com.android.ims.MmTelFeatureConnection: boolean isBinderAlive()>();

        return $z0;
    }

    public boolean isServiceReady()
    {
        com.android.ims.ImsManager r0;
        com.android.ims.MmTelFeatureConnection $r1;
        boolean $z0;

        r0 := @this: com.android.ims.ImsManager;

        virtualinvoke r0.<com.android.ims.ImsManager: void connectIfServiceIsAvailable()>();

        $r1 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $z0 = virtualinvoke $r1.<com.android.ims.MmTelFeatureConnection: boolean isBinderReady()>();

        return $z0;
    }

    public boolean isSuppServicesOverUtEnabledByPlatform()
    {
        com.android.ims.ImsManager r0;
        int i0, $i1;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.telephony.TelephonyManager $r3;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.ims.ImsManager;

        $r1 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r3 = (android.telephony.TelephonyManager) $r2;

        $i1 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        i0 = virtualinvoke $r3.<android.telephony.TelephonyManager: int getSimState(int)>($i1);

        z2 = 0;

        if i0 == 5 goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_supports_ss_over_ut_bool");

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean isGbaValid()>();

        if $z1 == 0 goto label2;

        z2 = 1;

        goto label2;

     label2:
        return z2;
    }

    public void isSupported(int, int, java.util.function.Consumer)
    {
        com.android.ims.ImsManager r0;
        int i0, i1;
        java.util.function.Consumer r1;
        com.android.ims._$$Lambda$ImsManager$uWowiZIDPeT2fI0iAHZDz3a9G7U $r2;
        com.android.ims.ImsManager$ExecutorFactory $r3;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.function.Consumer;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.ImsManager$ExecutorFactory mExecutorFactory>;

        $r2 = new com.android.ims._$$Lambda$ImsManager$uWowiZIDPeT2fI0iAHZDz3a9G7U;

        specialinvoke $r2.<com.android.ims._$$Lambda$ImsManager$uWowiZIDPeT2fI0iAHZDz3a9G7U: void <init>(com.android.ims.ImsManager,int,int,java.util.function.Consumer)>(r0, i1, i0, r1);

        interfaceinvoke $r3.<com.android.ims.ImsManager$ExecutorFactory: void executeRunnable(java.lang.Runnable)>($r2);

        return;
    }

    public boolean isTtyOnVoLteCapable()
    {
        com.android.ims.ImsManager r0;
        boolean $z0;

        r0 := @this: com.android.ims.ImsManager;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_volte_tty_supported_bool");

        return $z0;
    }

    public boolean isVolteEnabledByPlatform()
    {
        com.android.ims.ImsManager r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;
        android.content.Context $r7;
        android.content.res.Resources $r8;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.ims.ImsManager;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("persist.dbg.volte_avail_ovr");

        $i1 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>($r6, -1);

        z3 = 1;

        if i0 == 1 goto label4;

        $i2 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.dbg.volte_avail_ovr", -1);

        if $i2 != 1 goto label1;

        goto label4;

     label1:
        $r7 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r8.<android.content.res.Resources: boolean getBoolean(int)>(17891408);

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_volte_available_bool");

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<com.android.ims.ImsManager: boolean isGbaValid()>();

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;

     label4:
        return 1;
    }

    public boolean isVolteProvisionedOnDevice()
    {
        com.android.ims.ImsManager r0;
        boolean $z0, $z1;

        r0 := @this: com.android.ims.ImsManager;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_volte_provisioning_required_bool");

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean isVolteProvisioned()>();

        return $z1;

     label1:
        return 1;
    }

    public boolean isVtEnabledByPlatform()
    {
        com.android.ims.ImsManager r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;
        android.content.Context $r7;
        android.content.res.Resources $r8;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.ims.ImsManager;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("persist.dbg.vt_avail_ovr");

        $i1 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>($r6, -1);

        z3 = 1;

        if i0 == 1 goto label4;

        $i2 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.dbg.vt_avail_ovr", -1);

        if $i2 != 1 goto label1;

        goto label4;

     label1:
        $r7 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r8.<android.content.res.Resources: boolean getBoolean(int)>(17891409);

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_vt_available_bool");

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<com.android.ims.ImsManager: boolean isGbaValid()>();

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;

     label4:
        return 1;
    }

    public boolean isVtEnabledByUser()
    {
        com.android.ims.ImsManager r0;
        int i0, $i1;
        android.content.Context $r1;
        boolean z1;

        r0 := @this: com.android.ims.ImsManager;

        $i1 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $r1 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        i0 = staticinvoke <android.telephony.SubscriptionManager: int getIntegerSubscriptionProperty(int,java.lang.String,int,android.content.Context)>($i1, "vt_ims_enabled", -1, $r1);

        z1 = 1;

        if i0 == -1 goto label2;

        if i0 != 1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isVtProvisionedOnDevice()
    {
        com.android.ims.ImsManager r0;
        boolean $z0, $z1;

        r0 := @this: com.android.ims.ImsManager;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_volte_provisioning_required_bool");

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean isVtProvisioned()>();

        return $z1;

     label1:
        return 1;
    }

    public boolean isWfcEnabledByPlatform()
    {
        com.android.ims.ImsManager r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r2;
        java.lang.String $r4, $r6;
        android.content.Context $r7;
        android.content.res.Resources $r8;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.ims.ImsManager;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("persist.dbg.wfc_avail_ovr");

        $i1 = r0.<com.android.ims.ImsManager: int mPhoneId>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>($r6, -1);

        z3 = 1;

        if i0 == 1 goto label4;

        $i2 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("persist.dbg.wfc_avail_ovr", -1);

        if $i2 != 1 goto label1;

        goto label4;

     label1:
        $r7 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r8.<android.content.res.Resources: boolean getBoolean(int)>(17891410);

        if $z0 == 0 goto label2;

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_wfc_ims_available_bool");

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<com.android.ims.ImsManager: boolean isGbaValid()>();

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;

     label4:
        return 1;
    }

    public boolean isWfcEnabledByUser()
    {
        com.android.ims.ImsManager r0;
        int i0, $i1;
        android.content.Context $r1;
        boolean $z0, z1;

        r0 := @this: com.android.ims.ImsManager;

        $i1 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $r1 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        i0 = staticinvoke <android.telephony.SubscriptionManager: int getIntegerSubscriptionProperty(int,java.lang.String,int,android.content.Context)>($i1, "wfc_ims_enabled", -1, $r1);

        if i0 != -1 goto label1;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_default_wfc_ims_enabled_bool");

        return $z0;

     label1:
        z1 = 1;

        if i0 != 1 goto label2;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    public boolean isWfcProvisionedOnDevice()
    {
        com.android.ims.ImsManager r0;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: com.android.ims.ImsManager;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_volte_override_wfc_provisioning_bool");

        if $z0 == 0 goto label1;

        $z3 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVolteProvisionedOnDevice()>();

        if $z3 != 0 goto label1;

        return 0;

     label1:
        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_volte_provisioning_required_bool");

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<com.android.ims.ImsManager: boolean isWfcProvisioned()>();

        return $z2;

     label2:
        return 1;
    }

    public boolean isWfcRoamingEnabledByUser()
    {
        com.android.ims.ImsManager r0;
        int i0, $i1;
        android.content.Context $r1;
        boolean $z0, z1;

        r0 := @this: com.android.ims.ImsManager;

        $i1 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $r1 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        i0 = staticinvoke <android.telephony.SubscriptionManager: int getIntegerSubscriptionProperty(int,java.lang.String,int,android.content.Context)>($i1, "wfc_ims_roaming_enabled", -1, $r1);

        if i0 != -1 goto label1;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_default_wfc_ims_roaming_enabled_bool");

        return $z0;

     label1:
        z1 = 1;

        if i0 != 1 goto label2;

        goto label3;

     label2:
        z1 = 0;

     label3:
        return z1;
    }

    public void lambda$getImsServiceState$6$ImsManager(java.util.function.Consumer)
    {
        com.android.ims.ImsManager r0;
        java.util.function.Consumer r1;
        int $i0;
        java.lang.Integer $r3, $r5;
        com.android.ims.ImsException $r4;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.util.function.Consumer;

     label1:
        $i0 = virtualinvoke r0.<com.android.ims.ImsManager: int getImsServiceState()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r5);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public void lambda$getRegistrationTech$4$ImsManager(java.util.function.Consumer)
    {
        com.android.ims.ImsManager r0;
        java.util.function.Consumer r1;
        com.android.ims.MmTelFeatureConnection $r3;
        int $i0;
        java.lang.Integer $r4, $r6;
        android.os.RemoteException $r5;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: java.util.function.Consumer;

     label1:
        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $i0 = virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: int getRegistrationTech()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        specialinvoke r0.<com.android.ims.ImsManager: void logw(java.lang.String)>("getRegistrationTech(C): no connection to ImsService.");

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void lambda$isSupported$0$ImsManager(int, int, java.util.function.Consumer)
    {
        com.android.ims.ImsManager r0;
        int i0, i1;
        java.util.function.Consumer r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Boolean $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.util.function.Consumer;

        if i0 == 1 goto label06;

        if i0 == 2 goto label01;

        goto label07;

     label01:
        if i1 == 1 goto label05;

        if i1 == 2 goto label04;

        if i1 == 4 goto label03;

        if i1 == 8 goto label02;

        goto label07;

     label02:
        $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r9);

        return;

     label03:
        $z5 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isSuppServicesOverUtEnabledByPlatform()>();

        $r8 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z5);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r8);

        return;

     label04:
        $z4 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtEnabledByPlatform()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z4);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r7);

        return;

     label05:
        $z3 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcEnabledByPlatform()>();

        $r6 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z3);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r6);

        return;

     label06:
        if i1 == 1 goto label11;

        if i1 == 2 goto label10;

        if i1 == 4 goto label09;

        if i1 == 8 goto label08;

     label07:
        $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r10);

        return;

     label08:
        $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r5);

        return;

     label09:
        $z2 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isSuppServicesOverUtEnabledByPlatform()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r4);

        return;

     label10:
        $z1 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtEnabledByPlatform()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r3);

        return;

     label11:
        $z0 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVolteEnabledByPlatform()>();

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r2);

        return;
    }

    public void lambda$setRttConfig$5$ImsManager(boolean, int)
    {
        com.android.ims.ImsManager r0;
        boolean z0;
        int i0;
        java.lang.String $r4, $r12;
        com.android.ims.ImsConfig $r5;
        com.android.ims.ImsException $r6;
        java.lang.StringBuilder $r7, r13;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

     label1:
        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting RTT enabled to ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void logi(java.lang.String)>($r4);

        $r5 = virtualinvoke r0.<com.android.ims.ImsManager: com.android.ims.ImsConfig getConfigInterface()>();

        virtualinvoke $r5.<com.android.ims.ImsConfig: int setProvisionedValue(int,int)>(66, i0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to set RTT value enabled to ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String)>($r12);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public void lambda$setWfcModeInternal$1$ImsManager(int)
    {
        com.android.ims.ImsManager r0;
        int i0;
        com.android.ims.ImsConfig $r2;
        com.android.ims.ImsException $r3;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.ims.ImsManager: com.android.ims.ImsConfig getConfigInterface()>();

        virtualinvoke $r2.<com.android.ims.ImsConfig: int setConfig(int,int)>(27, i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public void lambda$setWfcRoamingSettingInternal$2$ImsManager(int)
    {
        com.android.ims.ImsManager r0;
        int i0;
        com.android.ims.ImsConfig $r2;
        com.android.ims.ImsException $r3;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.ims.ImsManager: com.android.ims.ImsConfig getConfigInterface()>();

        virtualinvoke $r2.<com.android.ims.ImsConfig: int setConfig(int,int)>(26, i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public com.android.ims.ImsCall makeCall(android.telephony.ims.ImsCallProfile, java.lang.String[], com.android.ims.ImsCall$Listener) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        java.lang.String[] r1;
        com.android.ims.ImsCall$Listener r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r6, $r9;
        com.android.ims.ImsCall $r7;
        android.content.Context $r8;
        int $i0;
        boolean $z0;
        android.telephony.ims.ImsCallProfile r10;
        android.telephony.ims.ImsCallSession r13;

        r0 := @this: com.android.ims.ImsManager;

        r10 := @parameter0: android.telephony.ims.ImsCallProfile;

        r1 := @parameter1: java.lang.String[];

        r2 := @parameter2: com.android.ims.ImsCall$Listener;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("makeCall :: profile=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r6);

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

        $r7 = new com.android.ims.ImsCall;

        $r8 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        specialinvoke $r7.<com.android.ims.ImsCall: void <init>(android.content.Context,android.telephony.ims.ImsCallProfile)>($r8, r10);

        virtualinvoke $r7.<com.android.ims.ImsCall: void setListener(com.android.ims.ImsCall$Listener)>(r2);

        r13 = specialinvoke r0.<com.android.ims.ImsManager: android.telephony.ims.ImsCallSession createCallSession(android.telephony.ims.ImsCallProfile)>(r10);

        if r1 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 1 goto label1;

        $z0 = virtualinvoke r13.<android.telephony.ims.ImsCallSession: boolean isMultiparty()>();

        if $z0 != 0 goto label1;

        $r9 = r1[0];

        virtualinvoke $r7.<com.android.ims.ImsCall: void start(android.telephony.ims.ImsCallSession,java.lang.String)>(r13, $r9);

        goto label2;

     label1:
        virtualinvoke $r7.<com.android.ims.ImsCall: void start(android.telephony.ims.ImsCallSession,java.lang.String[])>(r13, r1);

     label2:
        return $r7;
    }

    public void onSmsReady() throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.MmTelFeatureConnection $r2;
        android.os.RemoteException $r3;
        com.android.ims.ImsException $r4;

        r0 := @this: com.android.ims.ImsManager;

     label1:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: void onSmsReady()>();

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.android.ims.ImsException;

        specialinvoke $r4.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("onSmsReady()", $r3, 106);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void open(android.telephony.ims.feature.MmTelFeature$Listener) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        java.lang.NullPointerException $r1;
        com.android.ims.MmTelFeatureConnection $r2;
        android.os.RemoteException $r3;
        com.android.ims.ImsException $r4;
        android.telephony.ims.feature.MmTelFeature$Listener r5;

        r0 := @this: com.android.ims.ImsManager;

        r5 := @parameter0: android.telephony.ims.feature.MmTelFeature$Listener;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

        if r5 == null goto label4;

     label1:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: void openConnection(android.telephony.ims.feature.MmTelFeature$Listener)>(r5);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.android.ims.ImsException;

        specialinvoke $r4.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("open()", $r3, 106);

        throw $r4;

     label4:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("listener can\'t be null");

        throw $r1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean queryMmTelCapability(int, int) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0, i1;
        com.android.ims.MmTelFeatureConnection r2;
        boolean z0;
        java.util.concurrent.LinkedBlockingDeque $r3;
        java.util.concurrent.TimeUnit $r4;
        java.lang.Object $r5;
        java.lang.Boolean $r6;
        java.lang.Throwable $r7;
        android.os.RemoteException $r8;
        com.android.ims.ImsException $r9;
        com.android.ims.ImsManager$2 r10;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

        $r3 = new java.util.concurrent.LinkedBlockingDeque;

        specialinvoke $r3.<java.util.concurrent.LinkedBlockingDeque: void <init>(int)>(1);

     label1:
        r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        r10 = new com.android.ims.ImsManager$2;

        specialinvoke r10.<com.android.ims.ImsManager$2: void <init>(com.android.ims.ImsManager,int,int,java.util.concurrent.BlockingQueue)>(r0, i0, i1, $r3);

        virtualinvoke r2.<com.android.ims.MmTelFeatureConnection: void queryEnabledCapabilities(int,int,android.telephony.ims.aidl.IImsCapabilityCallback)>(i0, i1, r10);

     label2:
        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $r5 = interfaceinvoke $r3.<java.util.concurrent.BlockingQueue: java.lang.Object poll(long,java.util.concurrent.TimeUnit)>(3000L, $r4);

        $r6 = (java.lang.Boolean) $r5;

        z0 = virtualinvoke $r6.<java.lang.Boolean: boolean booleanValue()>();

     label3:
        return z0;

     label4:
        $r7 := @caughtexception;

        specialinvoke r0.<com.android.ims.ImsManager: void logw(java.lang.String)>("queryMmTelCapability: interrupted while waiting for response");

        return 0;

     label5:
        $r8 := @caughtexception;

        $r9 = new com.android.ims.ImsException;

        specialinvoke $r9.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("queryMmTelCapability()", $r8, 106);

        throw $r9;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch java.lang.InterruptedException from label2 to label3 with label4;
    }

    public boolean queryMmTelCapabilityStatus(int, int) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0, i1, $i2;
        boolean z0;
        com.android.ims.MmTelFeatureConnection $r2;
        android.telephony.ims.feature.MmTelFeature$MmTelCapabilities $r3;
        android.os.RemoteException $r4;
        com.android.ims.ImsException $r5;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

        $i2 = virtualinvoke r0.<com.android.ims.ImsManager: int getRegistrationTech()>();

        if $i2 == i1 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $r3 = virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: android.telephony.ims.feature.MmTelFeature$MmTelCapabilities queryCapabilityStatus()>();

        z0 = virtualinvoke $r3.<android.telephony.ims.feature.MmTelFeature$MmTelCapabilities: boolean isCapable(int)>(i0);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.android.ims.ImsException;

        specialinvoke $r5.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("queryMmTelCapabilityStatus()", $r4, 106);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeCapabilitiesCallback(android.telephony.ims.ImsMmTelManager$CapabilityCallback) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.ImsMmTelManager$CapabilityCallback r1;
        java.lang.NullPointerException $r2;
        com.android.ims.MmTelFeatureConnection $r3;
        android.telephony.ims.aidl.IImsCapabilityCallback $r4;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.ImsMmTelManager$CapabilityCallback;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $r4 = virtualinvoke r1.<android.telephony.ims.ImsMmTelManager$CapabilityCallback: android.telephony.ims.aidl.IImsCapabilityCallback getBinder()>();

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void removeCapabilityCallback(android.telephony.ims.aidl.IImsCapabilityCallback)>($r4);

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("capabilities callback can\'t be null");

        throw $r2;
    }

    public void removeCapabilitiesCallbackForSubscription(android.telephony.ims.aidl.IImsCapabilityCallback, int)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.aidl.IImsCapabilityCallback r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        com.android.ims.MmTelFeatureConnection $r3;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.aidl.IImsCapabilityCallback;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void removeCapabilityCallbackForSubscription(android.telephony.ims.aidl.IImsCapabilityCallback,int)>(r1, i0);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("capabilities callback can\'t be null");

        throw $r2;
    }

    public void removeNotifyStatusChangedCallback(com.android.ims.FeatureConnection$IFeatureUpdate)
    {
        com.android.ims.ImsManager r0;
        com.android.ims.FeatureConnection$IFeatureUpdate r1;
        java.util.Set $r2;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: com.android.ims.FeatureConnection$IFeatureUpdate;

        if r1 == null goto label1;

        $r2 = r0.<com.android.ims.ImsManager: java.util.Set mStatusCallbacks>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<com.android.ims.ImsManager: void logw(java.lang.String)>("removeNotifyStatusChangedCallback: callback is null!");

     label2:
        return;
    }

    public void removeProvisioningCallbackForSubscription(android.telephony.ims.aidl.IImsConfigCallback, int)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.aidl.IImsConfigCallback r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        com.android.ims.MmTelFeatureConnection $r3;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.aidl.IImsConfigCallback;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void removeProvisioningCallbackForSubscription(android.telephony.ims.aidl.IImsConfigCallback,int)>(r1, i0);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("provisioning callback can\'t be null");

        throw $r2;
    }

    public void removeRegistrationCallbackForSubscription(android.telephony.ims.aidl.IImsRegistrationCallback, int)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.aidl.IImsRegistrationCallback r1;
        int i0;
        java.lang.IllegalArgumentException $r2;
        com.android.ims.MmTelFeatureConnection $r3;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.aidl.IImsRegistrationCallback;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void removeRegistrationCallbackForSubscription(android.telephony.ims.aidl.IImsRegistrationCallback,int)>(r1, i0);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("registration callback can\'t be null");

        throw $r2;
    }

    public void removeRegistrationListener(android.telephony.ims.RegistrationManager$RegistrationCallback)
    {
        com.android.ims.ImsManager r0;
        android.telephony.ims.RegistrationManager$RegistrationCallback r1;
        java.lang.NullPointerException $r2;
        com.android.ims.MmTelFeatureConnection $r3;
        android.telephony.ims.aidl.IImsRegistrationCallback $r4;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: android.telephony.ims.RegistrationManager$RegistrationCallback;

        if r1 == null goto label1;

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $r4 = virtualinvoke r1.<android.telephony.ims.RegistrationManager$RegistrationCallback: android.telephony.ims.aidl.IImsRegistrationCallback getBinder()>();

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void removeRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>($r4);

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("Registration callback removed.");

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("registration callback can\'t be null");

        throw $r2;
    }

    public void removeRegistrationListener(com.android.ims.ImsConnectionStateListener) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.ImsConnectionStateListener r1;
        java.lang.NullPointerException $r2;
        com.android.ims.MmTelFeatureConnection $r3;
        android.telephony.ims.aidl.IImsRegistrationCallback $r4;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: com.android.ims.ImsConnectionStateListener;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        $r4 = virtualinvoke r1.<com.android.ims.ImsConnectionStateListener: android.telephony.ims.aidl.IImsRegistrationCallback getBinder()>();

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void removeRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>($r4);

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("Registration Callback/Listener registered.");

        return;

     label1:
        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>("listener can\'t be null");

        throw $r2;
    }

    public void sendSms(int, int, java.lang.String, java.lang.String, boolean, byte[]) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0, i1;
        java.lang.String r1, r6;
        boolean z0;
        byte[] r2;
        com.android.ims.MmTelFeatureConnection $r3;
        android.os.RemoteException $r4;
        com.android.ims.ImsException $r5;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r6 := @parameter2: java.lang.String;

        r1 := @parameter3: java.lang.String;

        z0 := @parameter4: boolean;

        r2 := @parameter5: byte[];

     label1:
        $r3 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r3.<com.android.ims.MmTelFeatureConnection: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])>(i0, i1, r6, r1, z0, r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new com.android.ims.ImsException;

        specialinvoke $r5.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("sendSms()", $r4, 106);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setConfigListener(com.android.ims.ImsConfigListener)
    {
        com.android.ims.ImsManager r0;
        com.android.ims.ImsConfigListener r1;

        r0 := @this: com.android.ims.ImsManager;

        r1 := @parameter0: com.android.ims.ImsConfigListener;

        r0.<com.android.ims.ImsManager: com.android.ims.ImsConfigListener mImsConfigListener> = r1;

        return;
    }

    public void setEabProvisioned(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0;
        byte b0;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        b0 = 1;

        goto label2;

     label1:
        b0 = 0;

     label2:
        specialinvoke r0.<com.android.ims.ImsManager: boolean setProvisionedBoolNoException(int,int)>(25, b0);

        return;
    }

    public void setEnhanced4gLteModeSetting(boolean)
    {
        com.android.ims.ImsManager r0;
        int i0, i1, i2;
        boolean $z0, $z1, $z2, $z3, $z4, z5;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, $r5;
        com.android.ims.ImsException $r6;
        android.content.Context $r7;

        r0 := @this: com.android.ims.ImsManager;

        z5 := @parameter0: boolean;

        if z5 == 0 goto label01;

        $z4 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVolteProvisionedOnDevice()>();

        if $z4 != 0 goto label01;

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("setEnhanced4gLteModeSetting: Not possible to enable VoLTE due to provisioning.");

        return;

     label01:
        i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("editable_enhanced_4g_lte_bool");

        if $z0 == 0 goto label02;

        $z3 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("hide_enhanced_4g_lte_bool");

        if $z3 == 0 goto label03;

     label02:
        z5 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("enhanced_4g_lte_on_by_default_bool");

     label03:
        $r7 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        i1 = staticinvoke <android.telephony.SubscriptionManager: int getIntegerSubscriptionProperty(int,java.lang.String,int,android.content.Context)>(i0, "volte_vt_enabled", -1, $r7);

        if z5 == 0 goto label04;

        i2 = 1;

        goto label05;

     label04:
        i2 = 0;

     label05:
        if i1 == i2 goto label11;

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean isSubIdValid(int)>(i0);

        if $z1 == 0 goto label06;

        $r5 = staticinvoke <com.android.ims.ImsManager: java.lang.String booleanToPropertyString(boolean)>(z5);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i0, "volte_vt_enabled", $r5);

        goto label07;

     label06:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setEnhanced4gLteModeSetting: invalid sub id, can not set property in  siminfo db; subId=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String)>($r4);

     label07:
        $z2 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isNonTtyOrTtyOnVolteEnabled()>();

        if $z2 == 0 goto label11;

     label08:
        specialinvoke r0.<com.android.ims.ImsManager: void setAdvanced4GMode(boolean)>(z5);

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

     label11:
        return;

        catch com.android.ims.ImsException from label08 to label09 with label10;
    }

    public void setRttEnabled(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0, $z1, z2;
        com.android.ims.ImsException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r9;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label04;

     label01:
        virtualinvoke r0.<com.android.ims.ImsManager: void setEnhanced4gLteModeSetting(boolean)>(z0);

     label02:
        goto label10;

     label03:
        $r3 := @caughtexception;

        goto label12;

     label04:
        if z0 != 0 goto label08;

     label05:
        $z1 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser()>();

        if $z1 == 0 goto label07;

     label06:
        goto label08;

     label07:
        z2 = 0;

        goto label09;

     label08:
        z2 = 1;

     label09:
        specialinvoke r0.<com.android.ims.ImsManager: void setAdvanced4GMode(boolean)>(z2);

     label10:
        specialinvoke r0.<com.android.ims.ImsManager: void setRttConfig(boolean)>(z0);

     label11:
        goto label13;

     label12:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to set RTT enabled to ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String)>($r9);

     label13:
        return;

        catch com.android.ims.ImsException from label01 to label02 with label03;
        catch com.android.ims.ImsException from label05 to label06 with label03;
        catch com.android.ims.ImsException from label09 to label10 with label03;
        catch com.android.ims.ImsException from label10 to label11 with label03;
    }

    public void setSmsListener(android.telephony.ims.aidl.IImsSmsListener) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.MmTelFeatureConnection $r1;
        android.os.RemoteException $r2;
        com.android.ims.ImsException $r3;
        android.telephony.ims.aidl.IImsSmsListener r4;

        r0 := @this: com.android.ims.ImsManager;

        r4 := @parameter0: android.telephony.ims.aidl.IImsSmsListener;

     label1:
        $r1 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r1.<com.android.ims.MmTelFeatureConnection: void setSmsListener(android.telephony.ims.aidl.IImsSmsListener)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = new com.android.ims.ImsException;

        specialinvoke $r3.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("setSmsListener()", $r2, 106);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTtyMode(int) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("carrier_volte_tty_supported_bool");

        if $z0 != 0 goto label3;

        if i0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        specialinvoke r0.<com.android.ims.ImsManager: void setAdvanced4GMode(boolean)>(z2);

     label3:
        return;
    }

    public void setUiTTYMode(android.content.Context, int, android.os.Message) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        int i0;
        android.os.Message r1;
        com.android.ims.MmTelFeatureConnection $r2;
        android.os.RemoteException $r3;
        com.android.ims.ImsException $r4;
        android.content.Context r5;

        r0 := @this: com.android.ims.ImsManager;

        r5 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

     label1:
        $r2 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        virtualinvoke $r2.<com.android.ims.MmTelFeatureConnection: void setUiTTYMode(int,android.os.Message)>(i0, r1);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new com.android.ims.ImsException;

        specialinvoke $r4.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("setTTYMode()", $r3, 106);

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVolteProvisioned(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0;
        byte b0;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        b0 = 1;

        goto label2;

     label1:
        b0 = 0;

     label2:
        specialinvoke r0.<com.android.ims.ImsManager: boolean setProvisionedBoolNoException(int,int)>(10, b0);

        return;
    }

    public void setVtProvisioned(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0;
        byte b0;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        b0 = 1;

        goto label2;

     label1:
        b0 = 0;

     label2:
        specialinvoke r0.<com.android.ims.ImsManager: boolean setProvisionedBoolNoException(int,int)>(11, b0);

        return;
    }

    public void setVtSetting(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, $r5;
        com.android.ims.ImsException $r6;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label01;

        $z5 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVtProvisionedOnDevice()>();

        if $z5 != 0 goto label01;

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("setVtSetting: Not possible to enable Vt due to provisioning.");

        return;

     label01:
        i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean isSubIdValid(int)>(i0);

        if $z1 == 0 goto label02;

        $r5 = staticinvoke <com.android.ims.ImsManager: java.lang.String booleanToPropertyString(boolean)>(z0);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i0, "vt_ims_enabled", $r5);

        goto label03;

     label02:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setVtSetting: sub id invalid, skip modifying vt state in subinfo db; subId=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String)>($r4);

     label03:
        virtualinvoke r0.<com.android.ims.ImsManager: void changeMmTelCapability(int,int,boolean)>(2, 0, z0);

     label04:
        if z0 == 0 goto label07;

     label05:
        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("setVtSetting(b) : turnOnIms");

        specialinvoke r0.<com.android.ims.ImsManager: void turnOnIms()>();

     label06:
        goto label09;

     label07:
        $z2 = specialinvoke r0.<com.android.ims.ImsManager: boolean isTurnOffImsAllowedByPlatform()>();

        if $z2 == 0 goto label09;

        $z3 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVolteEnabledByPlatform()>();

        if $z3 == 0 goto label08;

        $z4 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser()>();

        if $z4 != 0 goto label09;

     label08:
        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("setVtSetting(b) : imsServiceAllowTurnOff -> turnOffIms");

        specialinvoke r0.<com.android.ims.ImsManager: void turnOffIms()>();

     label09:
        goto label11;

     label10:
        $r6 := @caughtexception;

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String,java.lang.Throwable)>("setVtSetting(b): ", $r6);

     label11:
        return;

        catch com.android.ims.ImsException from label03 to label04 with label10;
        catch com.android.ims.ImsException from label05 to label06 with label10;
        catch com.android.ims.ImsException from label07 to label08 with label10;
        catch com.android.ims.ImsException from label08 to label09 with label10;
    }

    public void setWfcMode(int)
    {
        com.android.ims.ImsManager r0;
        int i0;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.ims.ImsManager: void setWfcMode(int,boolean)>(i0, 0);

        return;
    }

    public void setWfcMode(int, boolean)
    {
        com.android.ims.ImsManager r0;
        int i0, i1, $i2;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r1, $r5, $r10;
        java.lang.String $r4, $r8, $r9, $r13, $r14;
        android.content.Context $r18;
        java.lang.Object $r19;
        android.telephony.TelephonyManager $r20;

        r0 := @this: com.android.ims.ImsManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean isSubIdValid(int)>(i1);

        if $z1 == 0 goto label2;

        if z0 != 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setWfcMode(i,b) - setting=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r13);

        $r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i1, "wfc_ims_mode", $r14);

        goto label3;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setWfcMode(i,b) (roaming) - setting=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>($r8);

        $r9 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i1, "wfc_ims_roaming_mode", $r9);

        goto label3;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setWfcMode(i,b): invalid sub id, skip setting setting in siminfo db; subId=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String)>($r4);

     label3:
        $r18 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r20 = (android.telephony.TelephonyManager) $r19;

        $i2 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $z2 = virtualinvoke $r20.<android.telephony.TelephonyManager: boolean isNetworkRoaming(int)>($i2);

        if z0 != $z2 goto label4;

        specialinvoke r0.<com.android.ims.ImsManager: void setWfcModeInternal(int)>(i0);

     label4:
        return;
    }

    public void setWfcNonPersistent(boolean, int)
    {
        com.android.ims.ImsManager r0;
        boolean z0, $z1, $z2, $z3, $z4, z5;
        com.android.ims.ImsException $r2;
        int i0;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        z5 = 1;

        if z0 == 0 goto label01;

        goto label02;

     label01:
        i0 = 1;

     label02:
        virtualinvoke r0.<com.android.ims.ImsManager: void changeMmTelCapability(int,int,boolean)>(1, 1, z0);

        specialinvoke r0.<com.android.ims.ImsManager: void setWfcModeInternal(int)>(i0);

     label03:
        if z0 == 0 goto label06;

     label04:
        $z4 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcRoamingEnabledByUser()>();

        if $z4 == 0 goto label06;

     label05:
        goto label07;

     label06:
        z5 = 0;

     label07:
        specialinvoke r0.<com.android.ims.ImsManager: void setWfcRoamingSettingInternal(boolean)>(z5);

     label08:
        if z0 == 0 goto label11;

     label09:
        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("setWfcSetting() : turnOnIms");

        specialinvoke r0.<com.android.ims.ImsManager: void turnOnIms()>();

     label10:
        goto label13;

     label11:
        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean isTurnOffImsAllowedByPlatform()>();

        if $z1 == 0 goto label13;

        $z2 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isVolteEnabledByPlatform()>();

        if $z2 == 0 goto label12;

        $z3 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser()>();

        if $z3 != 0 goto label13;

     label12:
        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("setWfcSetting() : imsServiceAllowTurnOff -> turnOffIms");

        specialinvoke r0.<com.android.ims.ImsManager: void turnOffIms()>();

     label13:
        goto label15;

     label14:
        $r2 := @caughtexception;

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String,java.lang.Throwable)>("setWfcSetting(): ", $r2);

     label15:
        return;

        catch com.android.ims.ImsException from label02 to label03 with label14;
        catch com.android.ims.ImsException from label04 to label05 with label14;
        catch com.android.ims.ImsException from label07 to label08 with label14;
        catch com.android.ims.ImsException from label09 to label10 with label14;
        catch com.android.ims.ImsException from label11 to label12 with label14;
        catch com.android.ims.ImsException from label12 to label13 with label14;
    }

    public void setWfcProvisioned(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0;
        byte b0;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        b0 = 1;

        goto label2;

     label1:
        b0 = 0;

     label2:
        specialinvoke r0.<com.android.ims.ImsManager: boolean setProvisionedBoolNoException(int,int)>(28, b0);

        return;
    }

    public void setWfcRoamingSetting(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0;
        int $i0;
        java.lang.String $r1;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        $i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $r1 = staticinvoke <com.android.ims.ImsManager: java.lang.String booleanToPropertyString(boolean)>(z0);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>($i0, "wfc_ims_roaming_enabled", $r1);

        specialinvoke r0.<com.android.ims.ImsManager: void setWfcRoamingSettingInternal(boolean)>(z0);

        return;
    }

    public void setWfcSetting(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0, $z1, $z2, $z3;
        int i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r9;
        android.content.Context $r6;
        java.lang.Object $r7;
        android.telephony.TelephonyManager $r8;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $z3 = virtualinvoke r0.<com.android.ims.ImsManager: boolean isWfcProvisionedOnDevice()>();

        if $z3 != 0 goto label1;

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("setWfcSetting: Not possible to enable WFC due to provisioning.");

        return;

     label1:
        i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $z1 = specialinvoke r0.<com.android.ims.ImsManager: boolean isSubIdValid(int)>(i0);

        if $z1 == 0 goto label2;

        $r9 = staticinvoke <com.android.ims.ImsManager: java.lang.String booleanToPropertyString(boolean)>(z0);

        staticinvoke <android.telephony.SubscriptionManager: void setSubscriptionProperty(int,java.lang.String,java.lang.String)>(i0, "wfc_ims_enabled", $r9);

        goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setWfcSetting: invalid sub id, can not set WFC setting in siminfo db; subId=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String)>($r5);

     label3:
        $r6 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r8 = (android.telephony.TelephonyManager) $r7;

        $z2 = virtualinvoke $r8.<android.telephony.TelephonyManager: boolean isNetworkRoaming(int)>(i0);

        $i1 = virtualinvoke r0.<com.android.ims.ImsManager: int getWfcMode(boolean)>($z2);

        virtualinvoke r0.<com.android.ims.ImsManager: void setWfcNonPersistent(boolean,int)>(z0, $i1);

        return;
    }

    public int shouldProcessCall(boolean, java.lang.String[]) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        boolean z0;
        int i0;
        com.android.ims.MmTelFeatureConnection $r1;
        android.os.RemoteException $r2;
        com.android.ims.ImsException $r3;
        java.lang.String[] r4;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        r4 := @parameter1: java.lang.String[];

     label1:
        $r1 = r0.<com.android.ims.ImsManager: com.android.ims.MmTelFeatureConnection mMmTelFeatureConnection>;

        i0 = virtualinvoke $r1.<com.android.ims.MmTelFeatureConnection: int shouldProcessCall(boolean,java.lang.String[])>(z0, r4);

     label2:
        return i0;

     label3:
        $r2 := @caughtexception;

        $r3 = new com.android.ims.ImsException;

        specialinvoke $r3.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("shouldProcessCall()", $r2, 106);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public com.android.ims.ImsCall takeCall(com.android.ims.internal.IImsCallSession, com.android.ims.ImsCall$Listener) throws com.android.ims.ImsException
    {
        com.android.ims.ImsManager r0;
        com.android.ims.ImsCall$Listener r1;
        com.android.ims.ImsCall r2;
        android.telephony.ims.ImsCallSession r3;
        android.content.Context $r4;
        android.telephony.ims.ImsCallProfile $r5;
        java.lang.Throwable $r6;
        com.android.ims.ImsException $r7, r10;
        com.android.ims.internal.IImsCallSession r8;

        r0 := @this: com.android.ims.ImsManager;

        r8 := @parameter0: com.android.ims.internal.IImsCallSession;

        r1 := @parameter1: com.android.ims.ImsCall$Listener;

        specialinvoke r0.<com.android.ims.ImsManager: void checkAndThrowExceptionIfServiceUnavailable()>();

        if r8 == null goto label4;

     label1:
        r2 = new com.android.ims.ImsCall;

        $r4 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r5 = interfaceinvoke r8.<com.android.ims.internal.IImsCallSession: android.telephony.ims.ImsCallProfile getCallProfile()>();

        specialinvoke r2.<com.android.ims.ImsCall: void <init>(android.content.Context,android.telephony.ims.ImsCallProfile)>($r4, $r5);

        r3 = new android.telephony.ims.ImsCallSession;

        specialinvoke r3.<android.telephony.ims.ImsCallSession: void <init>(com.android.ims.internal.IImsCallSession)>(r8);

        virtualinvoke r2.<com.android.ims.ImsCall: void attachSession(android.telephony.ims.ImsCallSession)>(r3);

        virtualinvoke r2.<com.android.ims.ImsCall: void setListener(com.android.ims.ImsCall$Listener)>(r1);

     label2:
        return r2;

     label3:
        $r6 := @caughtexception;

        goto label5;

     label4:
        r10 = new com.android.ims.ImsException;

        specialinvoke r10.<com.android.ims.ImsException: void <init>(java.lang.String,int)>("No pending session for the call", 107);

        throw r10;

     label5:
        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String,java.lang.Throwable)>("takeCall caught: ", $r6);

        $r7 = new com.android.ims.ImsException;

        specialinvoke $r7.<com.android.ims.ImsException: void <init>(java.lang.String,java.lang.Throwable,int)>("takeCall()", $r6, 0);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void updateImsServiceConfig(boolean)
    {
        com.android.ims.ImsManager r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6;
        android.telephony.CarrierConfigManager $r1;
        int $i0, $i1, $i2;
        android.os.PersistableBundle $r2;
        android.telephony.TelephonyManager $r3;
        android.content.Context $r4;
        com.android.ims.ImsException $r5;
        android.telephony.ims.feature.CapabilityChangeRequest r6;

        r0 := @this: com.android.ims.ImsManager;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label01;

        $r3 = new android.telephony.TelephonyManager;

        $r4 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $i1 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        specialinvoke $r3.<android.telephony.TelephonyManager: void <init>(android.content.Context,int)>($r4, $i1);

        $i2 = virtualinvoke $r3.<android.telephony.TelephonyManager: int getSimState()>();

        if $i2 == 5 goto label01;

        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("updateImsServiceConfig: SIM not ready");

        return;

     label01:
        $z1 = r0.<com.android.ims.ImsManager: boolean mConfigUpdated>;

        if $z1 == 0 goto label02;

        if z0 == 0 goto label15;

     label02:
        $r1 = r0.<com.android.ims.ImsManager: android.telephony.CarrierConfigManager mConfigManager>;

        $i0 = specialinvoke r0.<com.android.ims.ImsManager: int getSubId()>();

        $r2 = virtualinvoke $r1.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigByComponentForSubId(java.lang.String,int)>("ims.", $i0);

        specialinvoke r0.<com.android.ims.ImsManager: void updateImsCarrierConfigs(android.os.PersistableBundle)>($r2);

        r6 = new android.telephony.ims.feature.CapabilityChangeRequest;

        specialinvoke r6.<android.telephony.ims.feature.CapabilityChangeRequest: void <init>()>();

        specialinvoke r0.<com.android.ims.ImsManager: void updateVolteFeatureValue(android.telephony.ims.feature.CapabilityChangeRequest)>(r6);

        specialinvoke r0.<com.android.ims.ImsManager: void updateWfcFeatureAndProvisionedValues(android.telephony.ims.feature.CapabilityChangeRequest)>(r6);

        specialinvoke r0.<com.android.ims.ImsManager: void updateVideoCallFeatureValue(android.telephony.ims.feature.CapabilityChangeRequest)>(r6);

        $z2 = virtualinvoke r0.<com.android.ims.ImsManager: boolean updateRttConfigValue()>();

        if $z2 == 0 goto label04;

        $z5 = specialinvoke r0.<com.android.ims.ImsManager: boolean isActiveSubscriptionPresent()>();

        if $z5 == 0 goto label04;

     label03:
        z6 = 1;

        goto label05;

     label04:
        z6 = 0;

     label05:
        specialinvoke r0.<com.android.ims.ImsManager: void updateUtFeatureValue(android.telephony.ims.feature.CapabilityChangeRequest)>(r6);

        virtualinvoke r0.<com.android.ims.ImsManager: void changeMmTelCapability(android.telephony.ims.feature.CapabilityChangeRequest)>(r6);

     label06:
        if z6 != 0 goto label11;

     label07:
        $z3 = specialinvoke r0.<com.android.ims.ImsManager: boolean isTurnOffImsAllowedByPlatform()>();

        if $z3 == 0 goto label11;

        $z4 = specialinvoke r0.<com.android.ims.ImsManager: boolean isImsNeeded(android.telephony.ims.feature.CapabilityChangeRequest)>(r6);

        if $z4 == 0 goto label09;

     label08:
        goto label11;

     label09:
        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("updateImsServiceConfig: turnOffIms");

        specialinvoke r0.<com.android.ims.ImsManager: void turnOffIms()>();

     label10:
        goto label12;

     label11:
        specialinvoke r0.<com.android.ims.ImsManager: void log(java.lang.String)>("updateImsServiceConfig: turnOnIms");

        specialinvoke r0.<com.android.ims.ImsManager: void turnOnIms()>();

     label12:
        r0.<com.android.ims.ImsManager: boolean mConfigUpdated> = 1;

     label13:
        goto label15;

     label14:
        $r5 := @caughtexception;

        specialinvoke r0.<com.android.ims.ImsManager: void loge(java.lang.String,java.lang.Throwable)>("updateImsServiceConfig: ", $r5);

        r0.<com.android.ims.ImsManager: boolean mConfigUpdated> = 0;

     label15:
        return;

        catch com.android.ims.ImsException from label02 to label03 with label14;
        catch com.android.ims.ImsException from label05 to label06 with label14;
        catch com.android.ims.ImsException from label07 to label08 with label14;
        catch com.android.ims.ImsException from label09 to label10 with label14;
        catch com.android.ims.ImsException from label11 to label12 with label14;
        catch com.android.ims.ImsException from label12 to label13 with label14;
    }

    public boolean updateRttConfigValue()
    {
        com.android.ims.ImsManager r0;
        boolean z0, z2, z3, z4, z5, z6, z7;
        android.content.Context $r8;
        android.content.ContentResolver $r9;
        int $i0;
        java.lang.StringBuilder $r10;
        java.lang.String $r11;

        r0 := @this: com.android.ims.ImsManager;

        z0 = specialinvoke r0.<com.android.ims.ImsManager: boolean isActiveSubscriptionPresent()>();

        z3 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("rtt_supported_bool");

        if z3 != 0 goto label02;

        if z0 != 0 goto label01;

        goto label02;

     label01:
        z4 = 0;

        goto label03;

     label02:
        z4 = 1;

     label03:
        $r8 = r0.<com.android.ims.ImsManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r9, "rtt_calling_mode", 0);

        if $i0 == 0 goto label04;

        z5 = 1;

        goto label05;

     label04:
        z5 = 0;

     label05:
        z2 = specialinvoke r0.<com.android.ims.ImsManager: boolean getBooleanCarrierConfig(java.lang.String)>("ignore_rtt_mode_setting_bool");

        if z5 != 0 goto label07;

        if z2 == 0 goto label06;

        goto label07;

     label06:
        z6 = 0;

        goto label08;

     label07:
        z6 = 1;

     label08:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update RTT: settings value: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z5);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" always-on carrierconfig: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isActiveSubscriptionPresent: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.ImsManager: void logi(java.lang.String)>($r11);

        if z4 == 0 goto label09;

        specialinvoke r0.<com.android.ims.ImsManager: void setRttConfig(boolean)>(z6);

        goto label10;

     label09:
        specialinvoke r0.<com.android.ims.ImsManager: void setRttConfig(boolean)>(0);

     label10:
        if z4 == 0 goto label11;

        if z6 == 0 goto label11;

        z7 = 1;

        goto label12;

     label11:
        z7 = 0;

     label12:
        return z7;
    }
}
