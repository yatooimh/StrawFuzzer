public class com.android.ims.RcsFeatureManager extends java.lang.Object implements com.android.ims.IFeatureConnector
{
    private static final int CAPABILITY_OPTIONS;
    private static final int CAPABILITY_PRESENCE;
    private static boolean DBG;
    private static final java.lang.String TAG;
    private static com.android.ims.RcsFeatureManager$SubscriptionManagerProxy sSubscriptionManagerProxy;
    private final android.content.Context mContext;
    private final android.telephony.ims.aidl.IRcsFeatureListener mRcsFeatureCallbackAdapter;
    private final java.util.Set mRcsFeatureCallbacks;
    public com.android.ims.RcsFeatureConnection mRcsFeatureConnection;
    private final int mSlotId;
    public final java.util.Set mStatusCallbacks;

    static void <clinit>()
    {
        com.android.ims.'-$$Lambda$RcsFeatureManager$2jXwdOnNZ4gjUJVwvh_kVEM47C0' $r0;
        com.android.ims.RcsFeatureManager$SubscriptionManagerProxy r1;

        <com.android.ims.RcsFeatureManager: java.lang.String TAG> = "RcsFeatureManager";

        <com.android.ims.RcsFeatureManager: int CAPABILITY_PRESENCE> = 2;

        <com.android.ims.RcsFeatureManager: int CAPABILITY_OPTIONS> = 1;

        <com.android.ims.RcsFeatureManager: boolean DBG> = 1;

        $r0 = <com.android.ims._$$Lambda$RcsFeatureManager$2jXwdOnNZ4gjUJVwvh_kVEM47C0: com.android.ims.'-$$Lambda$RcsFeatureManager$2jXwdOnNZ4gjUJVwvh_kVEM47C0' INSTANCE>;

        r1 = (com.android.ims.RcsFeatureManager$SubscriptionManagerProxy) $r0;

        <com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureManager$SubscriptionManagerProxy sSubscriptionManagerProxy> = r1;

        return;
    }

    public void <init>(android.content.Context, int)
    {
        com.android.ims.RcsFeatureManager r0;
        android.content.Context r1;
        int i0;
        com.android.ims.RcsFeatureManager$1 $r2;
        java.util.concurrent.CopyOnWriteArraySet $r3, $r4;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new com.android.ims.RcsFeatureManager$1;

        specialinvoke $r2.<com.android.ims.RcsFeatureManager$1: void <init>(com.android.ims.RcsFeatureManager)>(r0);

        r0.<com.android.ims.RcsFeatureManager: android.telephony.ims.aidl.IRcsFeatureListener mRcsFeatureCallbackAdapter> = $r2;

        $r3 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r3.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        r0.<com.android.ims.RcsFeatureManager: java.util.Set mStatusCallbacks> = $r3;

        $r4 = new java.util.concurrent.CopyOnWriteArraySet;

        specialinvoke $r4.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>();

        r0.<com.android.ims.RcsFeatureManager: java.util.Set mRcsFeatureCallbacks> = $r4;

        r0.<com.android.ims.RcsFeatureManager: android.content.Context mContext> = r1;

        r0.<com.android.ims.RcsFeatureManager: int mSlotId> = i0;

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void createImsService()>();

        return;
    }

    static java.util.Set access$000(com.android.ims.RcsFeatureManager)
    {
        com.android.ims.RcsFeatureManager r0;
        java.util.Set $r1;

        r0 := @parameter0: com.android.ims.RcsFeatureManager;

        $r1 = r0.<com.android.ims.RcsFeatureManager: java.util.Set mRcsFeatureCallbacks>;

        return $r1;
    }

    static void access$100(com.android.ims.RcsFeatureManager, java.lang.String)
    {
        com.android.ims.RcsFeatureManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.ims.RcsFeatureManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void logi(java.lang.String)>(r1);

        return;
    }

    static boolean access$200()
    {
        boolean $z0;

        $z0 = <com.android.ims.RcsFeatureManager: boolean DBG>;

        return $z0;
    }

    static void access$300(com.android.ims.RcsFeatureManager, java.lang.String)
    {
        com.android.ims.RcsFeatureManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.ims.RcsFeatureManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void log(java.lang.String)>(r1);

        return;
    }

    private static java.lang.Object awaitResult(java.util.concurrent.CountDownLatch, java.util.concurrent.atomic.AtomicReference)
    {
        java.util.concurrent.atomic.AtomicReference r0;
        java.lang.Object $r1;
        java.lang.Throwable $r2;
        java.lang.Thread $r3;
        java.util.concurrent.CountDownLatch r4;

        r4 := @parameter0: java.util.concurrent.CountDownLatch;

        r0 := @parameter1: java.util.concurrent.atomic.AtomicReference;

     label1:
        virtualinvoke r4.<java.util.concurrent.CountDownLatch: void await()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void interrupt()>();

     label4:
        $r1 = virtualinvoke r0.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        return $r1;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }

    private void createImsService()
    {
        com.android.ims.RcsFeatureManager r0;
        com.android.ims.RcsFeatureManager$2 $r1;
        android.content.Context $r2;
        int $i0;
        com.android.ims.RcsFeatureConnection $r3;

        r0 := @this: com.android.ims.RcsFeatureManager;

        $r2 = r0.<com.android.ims.RcsFeatureManager: android.content.Context mContext>;

        $i0 = r0.<com.android.ims.RcsFeatureManager: int mSlotId>;

        $r1 = new com.android.ims.RcsFeatureManager$2;

        specialinvoke $r1.<com.android.ims.RcsFeatureManager$2: void <init>(com.android.ims.RcsFeatureManager)>(r0);

        $r3 = staticinvoke <com.android.ims.RcsFeatureConnection: com.android.ims.RcsFeatureConnection create(android.content.Context,int,com.android.ims.FeatureConnection$IFeatureUpdate)>($r2, $i0, $r1);

        r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection> = $r3;

        return;
    }

    private void disableAllRcsUceCapabilities() throws android.telephony.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        android.telephony.ims.feature.CapabilityChangeRequest $r2;

        r0 := @this: com.android.ims.RcsFeatureManager;

        $r2 = new android.telephony.ims.feature.CapabilityChangeRequest;

        specialinvoke $r2.<android.telephony.ims.feature.CapabilityChangeRequest: void <init>()>();

        virtualinvoke $r2.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(1, 0);

        virtualinvoke $r2.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(1, 1);

        virtualinvoke $r2.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(2, 0);

        virtualinvoke $r2.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToDisableForTech(int,int)>(2, 1);

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void sendCapabilityChangeRequest(android.telephony.ims.feature.CapabilityChangeRequest)>($r2);

        return;
    }

    private static boolean isCapabilityTypeSupported(android.content.Context, int, int)
    {
        int i0, i1, i2;
        com.android.ims.RcsFeatureManager$SubscriptionManagerProxy $r0;
        java.lang.Object $r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r6, $r10;
        java.lang.String $r5, $r9, $r13;
        android.content.Context r14;
        android.telephony.CarrierConfigManager r16;
        android.os.PersistableBundle r18;

        r14 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r0 = <com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureManager$SubscriptionManagerProxy sSubscriptionManagerProxy>;

        i2 = interfaceinvoke $r0.<com.android.ims.RcsFeatureManager$SubscriptionManagerProxy: int getSubId(int)>(i0);

        if i2 != -1 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isCapabilityTypeSupported: Getting subIds is failure! slotId=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RcsFeatureManager", $r13);

        return 0;

     label1:
        $r1 = virtualinvoke r14.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        r16 = (android.telephony.CarrierConfigManager) $r1;

        if r16 != null goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isCapabilityTypeSupported: CarrierConfigManager is null, ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RcsFeatureManager", $r9);

        return 0;

     label2:
        r18 = virtualinvoke r16.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>(i2);

        if r18 != null goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isCapabilityTypeSupported: PersistableBundle is null, ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("RcsFeatureManager", $r5);

        return 0;

     label3:
        if i1 != 1 goto label4;

        $z1 = virtualinvoke r18.<android.os.PersistableBundle: boolean getBoolean(java.lang.String,boolean)>("use_rcs_sip_options_bool", 0);

        return $z1;

     label4:
        if i1 != 2 goto label5;

        $z0 = virtualinvoke r18.<android.os.PersistableBundle: boolean getBoolean(java.lang.String,boolean)>("use_rcs_presence_bool", 0);

        return $z0;

     label5:
        return 0;
    }

    private boolean isOptionsSupported()
    {
        com.android.ims.RcsFeatureManager r0;
        int $i0;
        android.content.Context $r1;
        boolean $z0;

        r0 := @this: com.android.ims.RcsFeatureManager;

        $r1 = r0.<com.android.ims.RcsFeatureManager: android.content.Context mContext>;

        $i0 = r0.<com.android.ims.RcsFeatureManager: int mSlotId>;

        $z0 = staticinvoke <com.android.ims.RcsFeatureManager: boolean isCapabilityTypeSupported(android.content.Context,int,int)>($r1, $i0, 1);

        return $z0;
    }

    private boolean isPresenceSupported()
    {
        com.android.ims.RcsFeatureManager r0;
        int $i0;
        android.content.Context $r1;
        boolean $z0;

        r0 := @this: com.android.ims.RcsFeatureManager;

        $r1 = r0.<com.android.ims.RcsFeatureManager: android.content.Context mContext>;

        $i0 = r0.<com.android.ims.RcsFeatureManager: int mSlotId>;

        $z0 = staticinvoke <com.android.ims.RcsFeatureManager: boolean isCapabilityTypeSupported(android.content.Context,int,int)>($r1, $i0, 2);

        return $z0;
    }

    static int lambda$static$0(int)
    {
        int i0, $i1;
        int[] r0;

        i0 := @parameter0: int;

        r0 = staticinvoke <android.telephony.SubscriptionManager: int[] getSubId(int)>(i0);

        if r0 == null goto label1;

        $i1 = r0[0];

        return $i1;

     label1:
        return -1;
    }

    private void log(java.lang.String)
    {
        com.android.ims.RcsFeatureManager r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RcsFeatureManager [");

        $i0 = r0.<com.android.ims.RcsFeatureManager: int mSlotId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r7, r1);

        return;
    }

    private void loge(java.lang.String)
    {
        com.android.ims.RcsFeatureManager r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RcsFeatureManager [");

        $i0 = r0.<com.android.ims.RcsFeatureManager: int mSlotId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r7, r1);

        return;
    }

    private void loge(java.lang.String, java.lang.Throwable)
    {
        com.android.ims.RcsFeatureManager r0;
        java.lang.String r1, $r8;
        java.lang.Throwable r2;
        java.lang.StringBuilder $r4;
        int $i0;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RcsFeatureManager [");

        $i0 = r0.<com.android.ims.RcsFeatureManager: int mSlotId>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r8, r1, r2);

        return;
    }

    private void logi(java.lang.String)
    {
        com.android.ims.RcsFeatureManager r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RcsFeatureManager [");

        $i0 = r0.<com.android.ims.RcsFeatureManager: int mSlotId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int i(java.lang.String,java.lang.String)>($r7, r1);

        return;
    }

    private void sendCapabilityChangeRequest(android.telephony.ims.feature.CapabilityChangeRequest) throws android.telephony.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        java.lang.StringBuilder r1;
        boolean $z0;
        com.android.ims.RcsFeatureConnection $r2;
        java.lang.String $r5;
        android.os.RemoteException $r6;
        android.telephony.ims.ImsException $r7;
        android.telephony.ims.feature.CapabilityChangeRequest r8;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r8 := @parameter0: android.telephony.ims.feature.CapabilityChangeRequest;

     label1:
        $z0 = <com.android.ims.RcsFeatureManager: boolean DBG>;

        if $z0 == 0 goto label2;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendCapabilityChangeRequest: ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void log(java.lang.String)>($r5);

     label2:
        $r2 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        virtualinvoke $r2.<com.android.ims.RcsFeatureConnection: void changeEnabledCapabilities(android.telephony.ims.feature.CapabilityChangeRequest,android.telephony.ims.aidl.IImsCapabilityCallback)>(r8, null);

     label3:
        return;

     label4:
        $r6 := @caughtexception;

        $r7 = new android.telephony.ims.ImsException;

        specialinvoke $r7.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Can not connect to service", 1);

        throw $r7;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public static void setSubscriptionManager(com.android.ims.RcsFeatureManager$SubscriptionManagerProxy)
    {
        com.android.ims.RcsFeatureManager$SubscriptionManagerProxy r0;

        r0 := @parameter0: com.android.ims.RcsFeatureManager$SubscriptionManagerProxy;

        <com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureManager$SubscriptionManagerProxy sSubscriptionManagerProxy> = r0;

        return;
    }

    public void addFeatureListenerCallback(com.android.ims.RcsFeatureManager$RcsFeatureCallbacks)
    {
        com.android.ims.RcsFeatureManager r0;
        com.android.ims.RcsFeatureManager$RcsFeatureCallbacks r1;
        java.util.Set $r2;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: com.android.ims.RcsFeatureManager$RcsFeatureCallbacks;

        $r2 = r0.<com.android.ims.RcsFeatureManager: java.util.Set mRcsFeatureCallbacks>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void addNotifyStatusChangedCallbackIfAvailable(com.android.ims.FeatureConnection$IFeatureUpdate) throws android.telephony.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        com.android.ims.FeatureConnection$IFeatureUpdate r1;
        com.android.ims.RcsFeatureConnection $r2;
        boolean $z0;
        android.telephony.ims.ImsException $r3;
        java.util.Set $r4;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: com.android.ims.FeatureConnection$IFeatureUpdate;

        $r2 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        $z0 = virtualinvoke $r2.<com.android.ims.RcsFeatureConnection: boolean isBinderAlive()>();

        if $z0 == 0 goto label2;

        if r1 == null goto label1;

        $r4 = r0.<com.android.ims.RcsFeatureManager: java.util.Set mStatusCallbacks>;

        interfaceinvoke $r4.<java.util.Set: boolean add(java.lang.Object)>(r1);

     label1:
        return;

     label2:
        $r3 = new android.telephony.ims.ImsException;

        specialinvoke $r3.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Can not connect to service.", 1);

        throw $r3;
    }

    public void addRcsUceCapability(android.telephony.ims.feature.CapabilityChangeRequest, int)
    {
        com.android.ims.RcsFeatureManager r0;
        android.telephony.ims.feature.CapabilityChangeRequest r1;
        int i0;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: android.telephony.ims.feature.CapabilityChangeRequest;

        i0 := @parameter1: int;

        virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToEnableForTech(int,int)>(i0, 0);

        virtualinvoke r1.<android.telephony.ims.feature.CapabilityChangeRequest: void addCapabilitiesToEnableForTech(int,int)>(i0, 1);

        return;
    }

    public void getImsRegistrationTech(java.util.function.Consumer)
    {
        com.android.ims.RcsFeatureManager r0;
        java.util.function.Consumer r1;
        com.android.ims.RcsFeatureConnection $r3;
        int $i0;
        java.lang.Integer $r4, $r6;
        android.os.RemoteException $r5;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: java.util.function.Consumer;

     label1:
        $r3 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        $i0 = virtualinvoke $r3.<com.android.ims.RcsFeatureConnection: int getRegistrationTech()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r4);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void loge(java.lang.String,java.lang.Throwable)>("getImsRegistrationTech error: ", $r5);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r6);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getImsServiceState() throws com.android.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        com.android.ims.RcsFeatureConnection $r1;
        int $i0;

        r0 := @this: com.android.ims.RcsFeatureManager;

        $r1 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        $i0 = virtualinvoke $r1.<com.android.ims.RcsFeatureConnection: int getFeatureState()>();

        return $i0;
    }

    public boolean isAvailable(int) throws android.telephony.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        int i0, i1;
        boolean z0;
        com.android.ims.RcsFeatureConnection $r1;
        android.os.RemoteException $r2;
        android.telephony.ims.ImsException $r3;
        android.telephony.ims.feature.RcsFeature$RcsImsCapabilities r4;

        r0 := @this: com.android.ims.RcsFeatureManager;

        i0 := @parameter0: int;

     label1:
        $r1 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        i1 = virtualinvoke $r1.<com.android.ims.RcsFeatureConnection: int queryCapabilityStatus()>();

        r4 = new android.telephony.ims.feature.RcsFeature$RcsImsCapabilities;

        specialinvoke r4.<android.telephony.ims.feature.RcsFeature$RcsImsCapabilities: void <init>(int)>(i1);

        z0 = virtualinvoke r4.<android.telephony.ims.feature.RcsFeature$RcsImsCapabilities: boolean isCapable(int)>(i0);

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void loge(java.lang.String,java.lang.Throwable)>("isAvailable error: ", $r2);

        $r3 = new android.telephony.ims.ImsException;

        specialinvoke $r3.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Can not determine availability", 1);

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isCapable(int, int) throws android.telephony.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        int i0, i1;
        java.lang.StringBuilder r3;
        boolean z0, $z1;
        java.util.concurrent.CountDownLatch $r4;
        java.util.concurrent.atomic.AtomicReference $r5;
        com.android.ims.RcsFeatureManager$3 $r6;
        com.android.ims.RcsFeatureConnection $r7;
        java.lang.Object $r8;
        java.lang.Boolean $r9;
        java.lang.String $r14;
        android.os.RemoteException $r15;
        android.telephony.ims.ImsException $r16;

        r0 := @this: com.android.ims.RcsFeatureManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r4 = new java.util.concurrent.CountDownLatch;

        specialinvoke $r4.<java.util.concurrent.CountDownLatch: void <init>(int)>(1);

        $r5 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r5.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        $r6 = new com.android.ims.RcsFeatureManager$3;

        specialinvoke $r6.<com.android.ims.RcsFeatureManager$3: void <init>(com.android.ims.RcsFeatureManager,int,int,java.util.concurrent.atomic.AtomicReference,java.util.concurrent.CountDownLatch)>(r0, i0, i1, $r5, $r4);

     label1:
        $z1 = <com.android.ims.RcsFeatureManager: boolean DBG>;

        if $z1 == 0 goto label2;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Query capability: ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", radioTech=");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void log(java.lang.String)>($r14);

     label2:
        $r7 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        virtualinvoke $r7.<com.android.ims.RcsFeatureConnection: void queryCapabilityConfiguration(int,int,android.telephony.ims.aidl.IImsCapabilityCallback)>(i0, i1, $r6);

        $r8 = staticinvoke <com.android.ims.RcsFeatureManager: java.lang.Object awaitResult(java.util.concurrent.CountDownLatch,java.util.concurrent.atomic.AtomicReference)>($r4, $r5);

        $r9 = (java.lang.Boolean) $r8;

        z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

     label3:
        return z0;

     label4:
        $r15 := @caughtexception;

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void loge(java.lang.String,java.lang.Throwable)>("isCapable error: ", $r15);

        $r16 = new android.telephony.ims.ImsException;

        specialinvoke $r16.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Can not determine capabilities", 1);

        throw $r16;

        catch android.os.RemoteException from label1 to label2 with label4;
        catch android.os.RemoteException from label2 to label3 with label4;
    }

    public void openConnection() throws android.telephony.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        android.telephony.ims.aidl.IRcsFeatureListener $r2;
        com.android.ims.RcsFeatureConnection $r3;
        android.os.RemoteException $r4;
        android.telephony.ims.ImsException $r5;

        r0 := @this: com.android.ims.RcsFeatureManager;

     label1:
        $r3 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        $r2 = r0.<com.android.ims.RcsFeatureManager: android.telephony.ims.aidl.IRcsFeatureListener mRcsFeatureCallbackAdapter>;

        virtualinvoke $r3.<com.android.ims.RcsFeatureConnection: void setRcsFeatureListener(android.telephony.ims.aidl.IRcsFeatureListener)>($r2);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new android.telephony.ims.ImsException;

        specialinvoke $r5.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Service is not available.", 1);

        throw $r5;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerImsRegistrationCallback(int, android.telephony.ims.aidl.IImsRegistrationCallback) throws android.telephony.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        int i0;
        com.android.ims.RcsFeatureConnection $r1;
        java.lang.Throwable $r2;
        android.telephony.ims.ImsException $r3;
        android.telephony.ims.aidl.IImsRegistrationCallback r4;

        r0 := @this: com.android.ims.RcsFeatureManager;

        i0 := @parameter0: int;

        r4 := @parameter1: android.telephony.ims.aidl.IImsRegistrationCallback;

     label1:
        $r1 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        virtualinvoke $r1.<com.android.ims.RcsFeatureConnection: void addCallbackForSubscription(int,android.telephony.ims.aidl.IImsRegistrationCallback)>(i0, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void loge(java.lang.String,java.lang.Throwable)>("registerImsRegistrationCallback error: ", $r2);

        $r3 = new android.telephony.ims.ImsException;

        specialinvoke $r3.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Can not register callback", 1);

        throw $r3;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void registerImsRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback) throws android.telephony.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        com.android.ims.RcsFeatureConnection $r1;
        java.lang.Throwable $r2;
        android.telephony.ims.ImsException $r3;
        android.telephony.ims.aidl.IImsRegistrationCallback r4;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r4 := @parameter0: android.telephony.ims.aidl.IImsRegistrationCallback;

     label1:
        $r1 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        virtualinvoke $r1.<com.android.ims.RcsFeatureConnection: void addCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>(r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void loge(java.lang.String,java.lang.Throwable)>("registerImsRegistrationCallback error: ", $r2);

        $r3 = new android.telephony.ims.ImsException;

        specialinvoke $r3.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Can not register callback", 1);

        throw $r3;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void registerRcsAvailabilityCallback(int, android.telephony.ims.aidl.IImsCapabilityCallback) throws android.telephony.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        int i0;
        com.android.ims.RcsFeatureConnection $r1;
        java.lang.Throwable $r2;
        android.telephony.ims.ImsException $r3;
        android.telephony.ims.aidl.IImsCapabilityCallback r4;

        r0 := @this: com.android.ims.RcsFeatureManager;

        i0 := @parameter0: int;

        r4 := @parameter1: android.telephony.ims.aidl.IImsCapabilityCallback;

     label1:
        $r1 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        virtualinvoke $r1.<com.android.ims.RcsFeatureConnection: void addCallbackForSubscription(int,android.telephony.ims.aidl.IImsCapabilityCallback)>(i0, r4);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void loge(java.lang.String,java.lang.Throwable)>("registerRcsAvailabilityCallback: ", $r2);

        $r3 = new android.telephony.ims.ImsException;

        specialinvoke $r3.<android.telephony.ims.ImsException: void <init>(java.lang.String,int)>("Can not register callback", 1);

        throw $r3;

        catch java.lang.IllegalStateException from label1 to label2 with label3;
    }

    public void releaseConnection()
    {
        com.android.ims.RcsFeatureManager r0;
        com.android.ims.RcsFeatureConnection $r2, $r4;
        java.util.Set $r3, $r5;
        android.os.RemoteException $r6;

        r0 := @this: com.android.ims.RcsFeatureManager;

     label1:
        $r2 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        virtualinvoke $r2.<com.android.ims.RcsFeatureConnection: void setRcsFeatureListener(android.telephony.ims.aidl.IRcsFeatureListener)>(null);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        $r3 = r0.<com.android.ims.RcsFeatureManager: java.util.Set mStatusCallbacks>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

        $r4 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        virtualinvoke $r4.<com.android.ims.RcsFeatureConnection: void close()>();

        $r5 = r0.<com.android.ims.RcsFeatureManager: java.util.Set mRcsFeatureCallbacks>;

        interfaceinvoke $r5.<java.util.Set: void clear()>();

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeFeatureListenerCallback(com.android.ims.RcsFeatureManager$RcsFeatureCallbacks)
    {
        com.android.ims.RcsFeatureManager r0;
        com.android.ims.RcsFeatureManager$RcsFeatureCallbacks r1;
        java.util.Set $r2;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: com.android.ims.RcsFeatureManager$RcsFeatureCallbacks;

        $r2 = r0.<com.android.ims.RcsFeatureManager: java.util.Set mRcsFeatureCallbacks>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void removeNotifyStatusChangedCallback(com.android.ims.FeatureConnection$IFeatureUpdate)
    {
        com.android.ims.RcsFeatureManager r0;
        com.android.ims.FeatureConnection$IFeatureUpdate r1;
        java.util.Set $r2;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: com.android.ims.FeatureConnection$IFeatureUpdate;

        if r1 == null goto label1;

        $r2 = r0.<com.android.ims.RcsFeatureManager: java.util.Set mStatusCallbacks>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void unregisterImsRegistrationCallback(int, android.telephony.ims.aidl.IImsRegistrationCallback)
    {
        com.android.ims.RcsFeatureManager r0;
        int i0;
        android.telephony.ims.aidl.IImsRegistrationCallback r1;
        com.android.ims.RcsFeatureConnection $r2;

        r0 := @this: com.android.ims.RcsFeatureManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.telephony.ims.aidl.IImsRegistrationCallback;

        $r2 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        virtualinvoke $r2.<com.android.ims.RcsFeatureConnection: void removeCallbackForSubscription(int,android.telephony.ims.aidl.IImsRegistrationCallback)>(i0, r1);

        return;
    }

    public void unregisterImsRegistrationCallback(android.telephony.ims.aidl.IImsRegistrationCallback)
    {
        com.android.ims.RcsFeatureManager r0;
        android.telephony.ims.aidl.IImsRegistrationCallback r1;
        com.android.ims.RcsFeatureConnection $r2;

        r0 := @this: com.android.ims.RcsFeatureManager;

        r1 := @parameter0: android.telephony.ims.aidl.IImsRegistrationCallback;

        $r2 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        virtualinvoke $r2.<com.android.ims.RcsFeatureConnection: void removeCallback(android.telephony.ims.aidl.IImsRegistrationCallback)>(r1);

        return;
    }

    public void unregisterRcsAvailabilityCallback(int, android.telephony.ims.aidl.IImsCapabilityCallback)
    {
        com.android.ims.RcsFeatureManager r0;
        int i0;
        android.telephony.ims.aidl.IImsCapabilityCallback r1;
        com.android.ims.RcsFeatureConnection $r2;

        r0 := @this: com.android.ims.RcsFeatureManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.telephony.ims.aidl.IImsCapabilityCallback;

        $r2 = r0.<com.android.ims.RcsFeatureManager: com.android.ims.RcsFeatureConnection mRcsFeatureConnection>;

        virtualinvoke $r2.<com.android.ims.RcsFeatureConnection: void removeCallbackForSubscription(int,android.telephony.ims.aidl.IImsCapabilityCallback)>(i0, r1);

        return;
    }

    public void updateCapabilities() throws android.telephony.ims.ImsException
    {
        com.android.ims.RcsFeatureManager r0;
        boolean z0, z1;
        java.lang.StringBuilder $r1;
        int $i0;
        java.lang.String $r8;
        android.telephony.ims.feature.CapabilityChangeRequest $r9;

        r0 := @this: com.android.ims.RcsFeatureManager;

        z0 = specialinvoke r0.<com.android.ims.RcsFeatureManager: boolean isOptionsSupported()>();

        z1 = specialinvoke r0.<com.android.ims.RcsFeatureManager: boolean isPresenceSupported()>();

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update capabilities for slot ");

        $i0 = r0.<com.android.ims.RcsFeatureManager: int mSlotId>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": options=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", presence=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r8 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.ims.RcsFeatureManager: void logi(java.lang.String)>($r8);

        if z0 != 0 goto label2;

        if z1 == 0 goto label1;

        goto label2;

     label1:
        specialinvoke r0.<com.android.ims.RcsFeatureManager: void disableAllRcsUceCapabilities()>();

        goto label5;

     label2:
        $r9 = new android.telephony.ims.feature.CapabilityChangeRequest;

        specialinvoke $r9.<android.telephony.ims.feature.CapabilityChangeRequest: void <init>()>();

        if z0 == 0 goto label3;

        virtualinvoke r0.<com.android.ims.RcsFeatureManager: void addRcsUceCapability(android.telephony.ims.feature.CapabilityChangeRequest,int)>($r9, 1);

     label3:
        if z1 == 0 goto label4;

        virtualinvoke r0.<com.android.ims.RcsFeatureManager: void addRcsUceCapability(android.telephony.ims.feature.CapabilityChangeRequest,int)>($r9, 2);

     label4:
        specialinvoke r0.<com.android.ims.RcsFeatureManager: void sendCapabilityChangeRequest(android.telephony.ims.feature.CapabilityChangeRequest)>($r9);

     label5:
        return;
    }
}
