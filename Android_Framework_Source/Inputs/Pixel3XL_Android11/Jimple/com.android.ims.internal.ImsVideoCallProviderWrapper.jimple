public class com.android.ims.internal.ImsVideoCallProviderWrapper extends android.telecom.Connection$VideoProvider
{
    private static final java.lang.String LOG_TAG;
    private static final int MSG_CHANGE_CALL_DATA_USAGE;
    private static final int MSG_CHANGE_CAMERA_CAPABILITIES;
    private static final int MSG_CHANGE_PEER_DIMENSIONS;
    private static final int MSG_CHANGE_VIDEO_QUALITY;
    private static final int MSG_HANDLE_CALL_SESSION_EVENT;
    private static final int MSG_RECEIVE_SESSION_MODIFY_REQUEST;
    private static final int MSG_RECEIVE_SESSION_MODIFY_RESPONSE;
    private final com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoCallCallback mBinder;
    private final java.util.Set mCallbacks;
    private int mCurrentVideoState;
    private com.android.ims.RegistrantList mDataUsageUpdateRegistrants;
    private android.os.IBinder$DeathRecipient mDeathRecipient;
    private final android.os.Handler mHandler;
    private boolean mIsVideoEnabled;
    private boolean mUseVideoPauseWorkaround;
    private final com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider;
    private com.android.ims.internal.VideoPauseTracker mVideoPauseTracker;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.ims.internal.ImsVideoCallProviderWrapper: int MSG_RECEIVE_SESSION_MODIFY_RESPONSE> = 2;

        <com.android.ims.internal.ImsVideoCallProviderWrapper: int MSG_RECEIVE_SESSION_MODIFY_REQUEST> = 1;

        <com.android.ims.internal.ImsVideoCallProviderWrapper: int MSG_HANDLE_CALL_SESSION_EVENT> = 3;

        <com.android.ims.internal.ImsVideoCallProviderWrapper: int MSG_CHANGE_VIDEO_QUALITY> = 7;

        <com.android.ims.internal.ImsVideoCallProviderWrapper: int MSG_CHANGE_PEER_DIMENSIONS> = 4;

        <com.android.ims.internal.ImsVideoCallProviderWrapper: int MSG_CHANGE_CAMERA_CAPABILITIES> = 6;

        <com.android.ims.internal.ImsVideoCallProviderWrapper: int MSG_CHANGE_CALL_DATA_USAGE> = 5;

        $r0 = class "Lcom/android/ims/internal/ImsVideoCallProviderWrapper;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>(com.android.ims.internal.IImsVideoCallProvider) throws android.os.RemoteException
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.RegistrantList $r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.Set $r3;
        com.android.ims.internal.VideoPauseTracker $r4;
        com.android.ims.internal.ImsVideoCallProviderWrapper$1 $r5;
        com.android.ims.internal.ImsVideoCallProviderWrapper$2 $r6;
        android.os.Looper $r7;
        android.os.IBinder $r8;
        android.os.IBinder$DeathRecipient $r9;
        com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoCallCallback $r10;
        com.android.ims.internal.IImsVideoCallProvider $r11, r12;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r12 := @parameter0: com.android.ims.internal.IImsVideoCallProvider;

        specialinvoke r0.<android.telecom.Connection$VideoProvider: void <init>()>();

        $r1 = new com.android.ims.RegistrantList;

        specialinvoke $r1.<com.android.ims.RegistrantList: void <init>()>();

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.RegistrantList mDataUsageUpdateRegistrants> = $r1;

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>(8, 0.9F, 1);

        $r3 = staticinvoke <java.util.Collections: java.util.Set newSetFromMap(java.util.Map)>($r2);

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: java.util.Set mCallbacks> = $r3;

        $r4 = new com.android.ims.internal.VideoPauseTracker;

        specialinvoke $r4.<com.android.ims.internal.VideoPauseTracker: void <init>()>();

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.VideoPauseTracker mVideoPauseTracker> = $r4;

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: boolean mUseVideoPauseWorkaround> = 0;

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: boolean mIsVideoEnabled> = 1;

        $r5 = new com.android.ims.internal.ImsVideoCallProviderWrapper$1;

        specialinvoke $r5.<com.android.ims.internal.ImsVideoCallProviderWrapper$1: void <init>(com.android.ims.internal.ImsVideoCallProviderWrapper)>(r0);

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: android.os.IBinder$DeathRecipient mDeathRecipient> = $r5;

        $r6 = new com.android.ims.internal.ImsVideoCallProviderWrapper$2;

        $r7 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        specialinvoke $r6.<com.android.ims.internal.ImsVideoCallProviderWrapper$2: void <init>(com.android.ims.internal.ImsVideoCallProviderWrapper,android.os.Looper)>(r0, $r7);

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: android.os.Handler mHandler> = $r6;

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider> = r12;

        if r12 == null goto label1;

        $r8 = interfaceinvoke r12.<com.android.ims.internal.IImsVideoCallProvider: android.os.IBinder asBinder()>();

        $r9 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: android.os.IBinder$DeathRecipient mDeathRecipient>;

        interfaceinvoke $r8.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>($r9, 0);

        $r10 = new com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoCallCallback;

        specialinvoke $r10.<com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoCallCallback: void <init>(com.android.ims.internal.ImsVideoCallProviderWrapper,com.android.ims.internal.ImsVideoCallProviderWrapper$1)>(r0, null);

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoCallCallback mBinder> = $r10;

        $r11 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r11.<com.android.ims.internal.IImsVideoCallProvider: void setCallback(com.android.ims.internal.IImsVideoCallCallback)>($r10);

        goto label2;

     label1:
        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoCallCallback mBinder> = null;

     label2:
        return;
    }

    public void <init>(com.android.ims.internal.IImsVideoCallProvider, com.android.ims.internal.VideoPauseTracker) throws android.os.RemoteException
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.IImsVideoCallProvider r1;
        com.android.ims.internal.VideoPauseTracker r2;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r1 := @parameter0: com.android.ims.internal.IImsVideoCallProvider;

        r2 := @parameter1: com.android.ims.internal.VideoPauseTracker;

        specialinvoke r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: void <init>(com.android.ims.internal.IImsVideoCallProvider)>(r1);

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.VideoPauseTracker mVideoPauseTracker> = r2;

        return;
    }

    static com.android.ims.internal.IImsVideoCallProvider access$000(com.android.ims.internal.ImsVideoCallProviderWrapper)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.IImsVideoCallProvider $r1;

        r0 := @parameter0: com.android.ims.internal.ImsVideoCallProviderWrapper;

        $r1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        return $r1;
    }

    static android.os.Handler access$100(com.android.ims.internal.ImsVideoCallProviderWrapper)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.ims.internal.ImsVideoCallProviderWrapper;

        $r1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: android.os.Handler mHandler>;

        return $r1;
    }

    static int access$200(com.android.ims.internal.ImsVideoCallProviderWrapper)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        int $i0;

        r0 := @parameter0: com.android.ims.internal.ImsVideoCallProviderWrapper;

        $i0 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: int mCurrentVideoState>;

        return $i0;
    }

    static boolean access$300(com.android.ims.internal.ImsVideoCallProviderWrapper)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        boolean $z0;

        r0 := @parameter0: com.android.ims.internal.ImsVideoCallProviderWrapper;

        $z0 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: boolean mIsVideoEnabled>;

        return $z0;
    }

    static java.lang.String access$400()
    {
        java.lang.String $r0;

        $r0 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        return $r0;
    }

    static java.util.Set access$500(com.android.ims.internal.ImsVideoCallProviderWrapper)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        java.util.Set $r1;

        r0 := @parameter0: com.android.ims.internal.ImsVideoCallProviderWrapper;

        $r1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: java.util.Set mCallbacks>;

        return $r1;
    }

    static com.android.ims.RegistrantList access$600(com.android.ims.internal.ImsVideoCallProviderWrapper)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.RegistrantList $r1;

        r0 := @parameter0: com.android.ims.internal.ImsVideoCallProviderWrapper;

        $r1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.RegistrantList mDataUsageUpdateRegistrants>;

        return $r1;
    }

    public static boolean isPauseRequest(int, int)
    {
        int i0, i1;
        boolean z0, z1, z2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = staticinvoke <android.telecom.VideoProfile: boolean isPaused(int)>(i0);

        z1 = staticinvoke <android.telecom.VideoProfile: boolean isPaused(int)>(i1);

        if z0 != 0 goto label1;

        if z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public static boolean isResumeRequest(int, int)
    {
        int i0, i1;
        boolean z0, z1, z2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 = staticinvoke <android.telecom.VideoProfile: boolean isPaused(int)>(i0);

        z1 = staticinvoke <android.telecom.VideoProfile: boolean isPaused(int)>(i1);

        if z0 == 0 goto label1;

        if z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public static boolean isTurnOffCameraRequest(int, int)
    {
        int i0, i1;
        boolean $z0, $z1, z2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <android.telecom.VideoProfile: boolean isTransmissionEnabled(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.telecom.VideoProfile: boolean isTransmissionEnabled(int)>(i1);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public static boolean isTurnOnCameraRequest(int, int)
    {
        int i0, i1;
        boolean $z0, $z1, z2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <android.telecom.VideoProfile: boolean isTransmissionEnabled(int)>(i0);

        if $z0 != 0 goto label1;

        $z1 = staticinvoke <android.telecom.VideoProfile: boolean isTransmissionEnabled(int)>(i1);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public void addImsVideoProviderCallback(com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoProviderWrapperCallback)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoProviderWrapperCallback r1;
        java.util.Set $r2;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r1 := @parameter0: com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoProviderWrapperCallback;

        $r2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: java.util.Set mCallbacks>;

        interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public android.telecom.VideoProfile maybeFilterPauseResume(android.telecom.VideoProfile, android.telecom.VideoProfile, int)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        android.telecom.VideoProfile r1, $r8, $r20, r21, r22;
        int i0, i1, i2, $i4, $i5, $i8, $i9;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, $z7, z8, z9, z10;
        java.lang.Object[] $r2, $r9, $r14;
        java.lang.String $r3, $r4, $r5, $r6, $r10, $r11, $r12, $r13, $r15, $r16, $r17, $r18;
        com.android.ims.internal.VideoPauseTracker $r7, $r19;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r21 := @parameter0: android.telecom.VideoProfile;

        r1 := @parameter1: android.telecom.VideoProfile;

        i0 := @parameter2: int;

        i1 = virtualinvoke r21.<android.telecom.VideoProfile: int getVideoState()>();

        i2 = virtualinvoke r1.<android.telecom.VideoProfile: int getVideoState()>();

        if i0 != 1 goto label1;

        $z4 = staticinvoke <android.telecom.VideoProfile: boolean isPaused(int)>(i1);

        if $z4 == 0 goto label1;

        $z5 = staticinvoke <android.telecom.VideoProfile: boolean isPaused(int)>(i2);

        if $z5 == 0 goto label1;

        z6 = 1;

        goto label2;

     label1:
        z6 = 0;

     label2:
        $z7 = staticinvoke <com.android.ims.internal.ImsVideoCallProviderWrapper: boolean isPauseRequest(int,int)>(i1, i2);

        if $z7 != 0 goto label4;

        if z6 == 0 goto label3;

        goto label4;

     label3:
        z8 = 0;

        goto label5;

     label4:
        z8 = 1;

     label5:
        z9 = staticinvoke <com.android.ims.internal.ImsVideoCallProviderWrapper: boolean isResumeRequest(int,int)>(i1, i2);

        if z8 == 0 goto label6;

        $r15 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        $r14 = newarray (java.lang.Object)[2];

        $r16 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>(i1);

        $r14[0] = $r16;

        $r17 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>(i2);

        $r14[1] = $r17;

        $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("maybeFilterPauseResume: isPauseRequest (from=%s, to=%s)", $r14);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r15, $r18);

        r22 = r1;

        $r19 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.VideoPauseTracker mVideoPauseTracker>;

        $z3 = virtualinvoke $r19.<com.android.ims.internal.VideoPauseTracker: boolean shouldPauseVideoFor(int)>(i0);

        if $z3 != 0 goto label9;

        r22 = r1;

        if z6 != 0 goto label9;

        $r20 = new android.telecom.VideoProfile;

        $i8 = i2 & -5;

        $i9 = virtualinvoke r1.<android.telecom.VideoProfile: int getQuality()>();

        specialinvoke $r20.<android.telecom.VideoProfile: void <init>(int,int)>($i8, $i9);

        r22 = $r20;

        goto label9;

     label6:
        r22 = r1;

        if z9 == 0 goto label9;

        z0 = staticinvoke <com.android.ims.internal.ImsVideoCallProviderWrapper: boolean isTurnOffCameraRequest(int,int)>(i1, i2);

        z10 = staticinvoke <com.android.ims.internal.ImsVideoCallProviderWrapper: boolean isTurnOnCameraRequest(int,int)>(i1, i2);

        $z1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: boolean mUseVideoPauseWorkaround>;

        if $z1 == 0 goto label8;

        if z0 != 0 goto label7;

        if z10 == 0 goto label8;

     label7:
        $r10 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        $r9 = newarray (java.lang.Object)[2];

        $r11 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>(i1);

        $r9[0] = $r11;

        $r12 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>(i2);

        $r9[1] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("maybeFilterPauseResume: isResumeRequest, but camera turning on/off so skipping (from=%s, to=%s)", $r9);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r10, $r13);

        return r1;

     label8:
        $r3 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        $r2 = newarray (java.lang.Object)[2];

        $r4 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>(i1);

        $r2[0] = $r4;

        $r5 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>(i2);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("maybeFilterPauseResume: isResumeRequest (from=%s, to=%s)", $r2);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r3, $r6);

        r22 = r1;

        $r7 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.VideoPauseTracker mVideoPauseTracker>;

        $z2 = virtualinvoke $r7.<com.android.ims.internal.VideoPauseTracker: boolean shouldResumeVideoFor(int)>(i0);

        if $z2 != 0 goto label9;

        $r8 = new android.telecom.VideoProfile;

        $i4 = i2 | 4;

        $i5 = virtualinvoke r1.<android.telecom.VideoProfile: int getQuality()>();

        specialinvoke $r8.<android.telecom.VideoProfile: void <init>(int,int)>($i4, $i5);

        r22 = $r8;

     label9:
        return r22;
    }

    public void onRequestCameraCapabilities()
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.IImsVideoCallProvider $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

     label1:
        $r2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r2.<com.android.ims.internal.IImsVideoCallProvider: void requestCameraCapabilities()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onRequestConnectionDataUsage()
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.IImsVideoCallProvider $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

     label1:
        $r2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r2.<com.android.ims.internal.IImsVideoCallProvider: void requestCallDataUsage()>();

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onSendSessionModifyRequest(android.telecom.VideoProfile, android.telecom.VideoProfile)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        java.lang.String $r1, $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12;
        int $i1, $i2, $i5, $i6, $i8, $i9, $i10;
        boolean $z0, $z1;
        java.lang.Object[] $r2, $r8;
        com.android.ims.internal.IImsVideoCallProvider $r7;
        android.os.RemoteException $r13;
        android.telecom.VideoProfile r14, r15, r16;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r14 := @parameter0: android.telecom.VideoProfile;

        r15 := @parameter1: android.telecom.VideoProfile;

        if r14 == null goto label7;

        if r15 != null goto label1;

        goto label7;

     label1:
        $i1 = virtualinvoke r14.<android.telecom.VideoProfile: int getVideoState()>();

        $i2 = virtualinvoke r15.<android.telecom.VideoProfile: int getVideoState()>();

        $z0 = staticinvoke <com.android.ims.internal.ImsVideoCallProviderWrapper: boolean isResumeRequest(int,int)>($i1, $i2);

        if $z0 == 0 goto label3;

        $i8 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: int mCurrentVideoState>;

        $z1 = staticinvoke <android.telecom.VideoProfile: boolean isPaused(int)>($i8);

        if $z1 != 0 goto label3;

        $r9 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        $r8 = newarray (java.lang.Object)[2];

        $i9 = virtualinvoke r14.<android.telecom.VideoProfile: int getVideoState()>();

        $r10 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>($i9);

        $r8[0] = $r10;

        $i10 = virtualinvoke r15.<android.telecom.VideoProfile: int getVideoState()>();

        $r11 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>($i10);

        $r8[1] = $r11;

        $r12 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("onSendSessionModifyRequest: fromVideoState=%s, toVideoState=%s; skipping resume request - already resumed.", $r8);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r9, $r12);

     label2:
        return;

     label3:
        r16 = virtualinvoke r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: android.telecom.VideoProfile maybeFilterPauseResume(android.telecom.VideoProfile,android.telecom.VideoProfile,int)>(r14, r15, 1);

        virtualinvoke r14.<android.telecom.VideoProfile: int getVideoState()>();

        virtualinvoke r16.<android.telecom.VideoProfile: int getVideoState()>();

        $r3 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        $r2 = newarray (java.lang.Object)[2];

        $i5 = virtualinvoke r14.<android.telecom.VideoProfile: int getVideoState()>();

        $r4 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>($i5);

        $r2[0] = $r4;

        $i6 = virtualinvoke r16.<android.telecom.VideoProfile: int getVideoState()>();

        $r5 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>($i6);

        $r2[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("onSendSessionModifyRequest: fromVideoState=%s, toVideoState=%s; ", $r2);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r3, $r6);

        $r7 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r7.<com.android.ims.internal.IImsVideoCallProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>(r14, r16);

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

     label6:
        return;

     label7:
        $r1 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r1, "onSendSessionModifyRequest: null profile in request.");

        return;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label3 to label4 with label5;
    }

    public void onSendSessionModifyResponse(android.telecom.VideoProfile)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.IImsVideoCallProvider $r1;
        android.os.RemoteException $r2;
        android.telecom.VideoProfile r3;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r3 := @parameter0: android.telecom.VideoProfile;

     label1:
        $r1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r1.<com.android.ims.internal.IImsVideoCallProvider: void sendSessionModifyResponse(android.telecom.VideoProfile)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onSetCamera(java.lang.String)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.IImsVideoCallProvider $r1;
        int $i0;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r3 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        interfaceinvoke $r1.<com.android.ims.internal.IImsVideoCallProvider: void setCamera(java.lang.String,int)>(r3, $i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onSetDeviceOrientation(int)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        int i0;
        com.android.ims.internal.IImsVideoCallProvider $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        i0 := @parameter0: int;

     label1:
        $r2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r2.<com.android.ims.internal.IImsVideoCallProvider: void setDeviceOrientation(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onSetDisplaySurface(android.view.Surface)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.IImsVideoCallProvider $r1;
        android.os.RemoteException $r2;
        android.view.Surface r3;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r3 := @parameter0: android.view.Surface;

     label1:
        $r1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r1.<com.android.ims.internal.IImsVideoCallProvider: void setDisplaySurface(android.view.Surface)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onSetPauseImage(android.net.Uri)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.IImsVideoCallProvider $r1;
        android.os.RemoteException $r2;
        android.net.Uri r3;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r3 := @parameter0: android.net.Uri;

     label1:
        $r1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r1.<com.android.ims.internal.IImsVideoCallProvider: void setPauseImage(android.net.Uri)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onSetPreviewSurface(android.view.Surface)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.IImsVideoCallProvider $r1;
        android.os.RemoteException $r2;
        android.view.Surface r3;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r3 := @parameter0: android.view.Surface;

     label1:
        $r1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r1.<com.android.ims.internal.IImsVideoCallProvider: void setPreviewSurface(android.view.Surface)>(r3);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onSetZoom(float)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        float f0;
        com.android.ims.internal.IImsVideoCallProvider $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        f0 := @parameter0: float;

     label1:
        $r2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r2.<com.android.ims.internal.IImsVideoCallProvider: void setZoom(float)>(f0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void onVideoStateChanged(int)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        int i0, $i1, $i2, $i4;
        boolean $z0, $z1;
        java.lang.Object[] $r1, $r6;
        java.lang.String $r2, $r3, $r4, $r5, $r7, $r8, $r9, $r10;
        com.android.ims.internal.VideoPauseTracker $r11;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: int mCurrentVideoState>;

        $z0 = staticinvoke <android.telecom.VideoProfile: boolean isPaused(int)>($i1);

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <android.telecom.VideoProfile: boolean isPaused(int)>(i0);

        if $z1 != 0 goto label1;

        $r7 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        $r6 = newarray (java.lang.Object)[2];

        $i4 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: int mCurrentVideoState>;

        $r8 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>($i4);

        $r6[0] = $r8;

        $r9 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>(i0);

        $r6[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("onVideoStateChanged: currentVideoState=%s, newVideoState=%s, clearing pending pause requests.", $r6);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r7, $r10);

        $r11 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.VideoPauseTracker mVideoPauseTracker>;

        virtualinvoke $r11.<com.android.ims.internal.VideoPauseTracker: void clearPauseRequests()>();

        goto label2;

     label1:
        $r2 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        $r1 = newarray (java.lang.Object)[2];

        $i2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: int mCurrentVideoState>;

        $r3 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>($i2);

        $r1[0] = $r3;

        $r4 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>(i0);

        $r1[1] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("onVideoStateChanged: currentVideoState=%s, newVideoState=%s", $r1);

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, $r5);

     label2:
        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: int mCurrentVideoState> = i0;

        return;
    }

    public void pauseVideo(int, int)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        int i0, i1, $i3, $i4, $i5;
        com.android.ims.internal.VideoPauseTracker $r2;
        boolean $z0;
        java.lang.String $r3, $r7, $r8, $r9, $r10;
        android.telecom.VideoProfile $r4, $r5;
        java.lang.Object[] $r6;
        com.android.ims.internal.IImsVideoCallProvider $r11;
        android.os.RemoteException $r12;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.VideoPauseTracker mVideoPauseTracker>;

        $z0 = virtualinvoke $r2.<com.android.ims.internal.VideoPauseTracker: boolean shouldPauseVideoFor(int)>(i1);

        if $z0 == 0 goto label5;

        $r4 = new android.telecom.VideoProfile;

        specialinvoke $r4.<android.telecom.VideoProfile: void <init>(int)>(i0);

        $r5 = new android.telecom.VideoProfile;

        $i3 = i0 | 4;

        specialinvoke $r5.<android.telecom.VideoProfile: void <init>(int)>($i3);

     label1:
        $r7 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        $r6 = newarray (java.lang.Object)[2];

        $i4 = virtualinvoke $r4.<android.telecom.VideoProfile: int getVideoState()>();

        $r8 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>($i4);

        $r6[0] = $r8;

        $i5 = virtualinvoke $r5.<android.telecom.VideoProfile: int getVideoState()>();

        $r9 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>($i5);

        $r6[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("pauseVideo: fromVideoState=%s, toVideoState=%s", $r6);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r7, $r10);

        $r11 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r11.<com.android.ims.internal.IImsVideoCallProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>($r4, $r5);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        goto label6;

     label5:
        $r3 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r3, "pauseVideo: video already paused");

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void registerForDataUsageUpdate(android.os.Handler, int, java.lang.Object)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.ims.RegistrantList $r3;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.RegistrantList mDataUsageUpdateRegistrants>;

        virtualinvoke $r3.<com.android.ims.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void removeImsVideoProviderCallback(com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoProviderWrapperCallback)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoProviderWrapperCallback r1;
        java.util.Set $r2;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r1 := @parameter0: com.android.ims.internal.ImsVideoCallProviderWrapper$ImsVideoProviderWrapperCallback;

        $r2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: java.util.Set mCallbacks>;

        interfaceinvoke $r2.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        return;
    }

    public void resumeVideo(int, int)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        int i0, i1, $i3, $i4, $i5;
        com.android.ims.internal.VideoPauseTracker $r2;
        boolean $z0;
        java.lang.String $r3, $r7, $r8, $r9, $r10;
        android.telecom.VideoProfile $r4, $r5;
        java.lang.Object[] $r6;
        com.android.ims.internal.IImsVideoCallProvider $r11;
        android.os.RemoteException $r12;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.VideoPauseTracker mVideoPauseTracker>;

        $z0 = virtualinvoke $r2.<com.android.ims.internal.VideoPauseTracker: boolean shouldResumeVideoFor(int)>(i1);

        if $z0 == 0 goto label5;

        $r4 = new android.telecom.VideoProfile;

        specialinvoke $r4.<android.telecom.VideoProfile: void <init>(int)>(i0);

        $r5 = new android.telecom.VideoProfile;

        $i3 = i0 & -5;

        specialinvoke $r5.<android.telecom.VideoProfile: void <init>(int)>($i3);

     label1:
        $r7 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        $r6 = newarray (java.lang.Object)[2];

        $i4 = virtualinvoke $r4.<android.telecom.VideoProfile: int getVideoState()>();

        $r8 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>($i4);

        $r6[0] = $r8;

        $i5 = virtualinvoke $r5.<android.telecom.VideoProfile: int getVideoState()>();

        $r9 = staticinvoke <android.telecom.VideoProfile: java.lang.String videoStateToString(int)>($i5);

        $r6[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("resumeVideo: fromVideoState=%s, toVideoState=%s", $r6);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r7, $r10);

        $r11 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        interfaceinvoke $r11.<com.android.ims.internal.IImsVideoCallProvider: void sendSessionModifyRequest(android.telecom.VideoProfile,android.telecom.VideoProfile)>($r4, $r5);

     label2:
        goto label4;

     label3:
        $r12 := @caughtexception;

     label4:
        goto label6;

     label5:
        $r3 = <com.android.ims.internal.ImsVideoCallProviderWrapper: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r3, "resumeVideo: remaining paused (paused from other sources)");

     label6:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setIsVideoEnabled(boolean)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        boolean z0;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        z0 := @parameter0: boolean;

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: boolean mIsVideoEnabled> = z0;

        return;
    }

    public void setUseVideoPauseWorkaround(boolean)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        boolean z0;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        z0 := @parameter0: boolean;

        r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: boolean mUseVideoPauseWorkaround> = z0;

        return;
    }

    public void tearDown()
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        android.os.IBinder$DeathRecipient $r2, $r5;
        com.android.ims.internal.IImsVideoCallProvider $r3;
        android.os.IBinder $r4;
        java.lang.Throwable $r6;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        $r2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: android.os.IBinder$DeathRecipient mDeathRecipient>;

        if $r2 == null goto label4;

     label1:
        $r3 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.IImsVideoCallProvider mVideoCallProvider>;

        $r4 = interfaceinvoke $r3.<com.android.ims.internal.IImsVideoCallProvider: android.os.IBinder asBinder()>();

        $r5 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: android.os.IBinder$DeathRecipient mDeathRecipient>;

        interfaceinvoke $r4.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>($r5, 0);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

     label4:
        return;

        catch java.util.NoSuchElementException from label1 to label2 with label3;
    }

    public void unregisterForDataUsageUpdate(android.os.Handler)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        android.os.Handler r1;
        com.android.ims.RegistrantList $r2;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.RegistrantList mDataUsageUpdateRegistrants>;

        virtualinvoke $r2.<com.android.ims.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public boolean wasVideoPausedFromSource(int)
    {
        com.android.ims.internal.ImsVideoCallProviderWrapper r0;
        int i0;
        com.android.ims.internal.VideoPauseTracker $r1;
        boolean $z0;

        r0 := @this: com.android.ims.internal.ImsVideoCallProviderWrapper;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.ims.internal.ImsVideoCallProviderWrapper: com.android.ims.internal.VideoPauseTracker mVideoPauseTracker>;

        $z0 = virtualinvoke $r1.<com.android.ims.internal.VideoPauseTracker: boolean wasVideoPausedFromSource(int)>(i0);

        return $z0;
    }
}
