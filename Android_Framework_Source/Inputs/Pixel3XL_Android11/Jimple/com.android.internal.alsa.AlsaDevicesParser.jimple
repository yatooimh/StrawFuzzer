public class com.android.internal.alsa.AlsaDevicesParser extends java.lang.Object
{
    protected static final boolean DEBUG;
    public static final int SCANSTATUS_EMPTY;
    public static final int SCANSTATUS_FAIL;
    public static final int SCANSTATUS_NOTSCANNED;
    public static final int SCANSTATUS_SUCCESS;
    private static final java.lang.String TAG;
    private static final java.lang.String kDevicesFilePath;
    private static final int kEndIndex_CardNum;
    private static final int kEndIndex_DeviceNum;
    private static final int kIndex_CardDeviceField;
    private static final int kStartIndex_CardNum;
    private static final int kStartIndex_DeviceNum;
    private static final int kStartIndex_Type;
    private static com.android.internal.alsa.LineTokenizer mTokenizer;
    private final java.util.ArrayList mDeviceRecords;
    private boolean mHasCaptureDevices;
    private boolean mHasMIDIDevices;
    private boolean mHasPlaybackDevices;
    private int mScanStatus;

    static void <clinit>()
    {
        com.android.internal.alsa.LineTokenizer $r0;

        <com.android.internal.alsa.AlsaDevicesParser: int kStartIndex_Type> = 14;

        <com.android.internal.alsa.AlsaDevicesParser: int kStartIndex_DeviceNum> = 9;

        <com.android.internal.alsa.AlsaDevicesParser: int kStartIndex_CardNum> = 6;

        <com.android.internal.alsa.AlsaDevicesParser: int kIndex_CardDeviceField> = 5;

        <com.android.internal.alsa.AlsaDevicesParser: int kEndIndex_DeviceNum> = 11;

        <com.android.internal.alsa.AlsaDevicesParser: int kEndIndex_CardNum> = 8;

        <com.android.internal.alsa.AlsaDevicesParser: java.lang.String kDevicesFilePath> = "/proc/asound/devices";

        <com.android.internal.alsa.AlsaDevicesParser: java.lang.String TAG> = "AlsaDevicesParser";

        <com.android.internal.alsa.AlsaDevicesParser: int SCANSTATUS_SUCCESS> = 0;

        <com.android.internal.alsa.AlsaDevicesParser: int SCANSTATUS_NOTSCANNED> = -1;

        <com.android.internal.alsa.AlsaDevicesParser: int SCANSTATUS_FAIL> = 1;

        <com.android.internal.alsa.AlsaDevicesParser: int SCANSTATUS_EMPTY> = 2;

        <com.android.internal.alsa.AlsaDevicesParser: boolean DEBUG> = 0;

        $r0 = new com.android.internal.alsa.LineTokenizer;

        specialinvoke $r0.<com.android.internal.alsa.LineTokenizer: void <init>(java.lang.String)>(" :[]-");

        <com.android.internal.alsa.AlsaDevicesParser: com.android.internal.alsa.LineTokenizer mTokenizer> = $r0;

        return;
    }

    public void <init>()
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        java.util.ArrayList $r1;

        r0 := @this: com.android.internal.alsa.AlsaDevicesParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.alsa.AlsaDevicesParser: boolean mHasCaptureDevices> = 0;

        r0.<com.android.internal.alsa.AlsaDevicesParser: boolean mHasPlaybackDevices> = 0;

        r0.<com.android.internal.alsa.AlsaDevicesParser: boolean mHasMIDIDevices> = 0;

        r0.<com.android.internal.alsa.AlsaDevicesParser: int mScanStatus> = -1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.alsa.AlsaDevicesParser: java.util.ArrayList mDeviceRecords> = $r1;

        return;
    }

    private void Log(java.lang.String)
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.alsa.AlsaDevicesParser;

        r1 := @parameter0: java.lang.String;

        return;
    }

    static com.android.internal.alsa.LineTokenizer access$000()
    {
        com.android.internal.alsa.LineTokenizer $r0;

        $r0 = <com.android.internal.alsa.AlsaDevicesParser: com.android.internal.alsa.LineTokenizer mTokenizer>;

        return $r0;
    }

    static boolean access$102(com.android.internal.alsa.AlsaDevicesParser, boolean)
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.alsa.AlsaDevicesParser;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.alsa.AlsaDevicesParser: boolean mHasMIDIDevices> = z0;

        return z0;
    }

    static boolean access$202(com.android.internal.alsa.AlsaDevicesParser, boolean)
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.alsa.AlsaDevicesParser;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.alsa.AlsaDevicesParser: boolean mHasCaptureDevices> = z0;

        return z0;
    }

    static boolean access$302(com.android.internal.alsa.AlsaDevicesParser, boolean)
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.alsa.AlsaDevicesParser;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.alsa.AlsaDevicesParser: boolean mHasPlaybackDevices> = z0;

        return z0;
    }

    private boolean isLineDeviceRecord(java.lang.String)
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        java.lang.String r1;
        char $c0;
        boolean z0;

        r0 := @this: com.android.internal.alsa.AlsaDevicesParser;

        r1 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(5);

        if $c0 != 91 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public int getDefaultDeviceNum(int)
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        int i0;

        r0 := @this: com.android.internal.alsa.AlsaDevicesParser;

        i0 := @parameter0: int;

        return 0;
    }

    public int getScanStatus()
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        int $i0;

        r0 := @this: com.android.internal.alsa.AlsaDevicesParser;

        $i0 = r0.<com.android.internal.alsa.AlsaDevicesParser: int mScanStatus>;

        return $i0;
    }

    public boolean hasCaptureDevices(int)
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        int i0, $i1, $i2, $i3;
        java.util.Iterator r1;
        com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord r2;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.alsa.AlsaDevicesParser;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.internal.alsa.AlsaDevicesParser: java.util.ArrayList mDeviceRecords>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord) $r4;

        $i1 = r2.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mCardNum>;

        if $i1 != i0 goto label2;

        $i2 = r2.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mDeviceType>;

        if $i2 != 0 goto label2;

        $i3 = r2.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mDeviceDir>;

        if $i3 != 0 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean hasMIDIDevices(int)
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord r2;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.alsa.AlsaDevicesParser;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.internal.alsa.AlsaDevicesParser: java.util.ArrayList mDeviceRecords>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord) $r4;

        $i1 = r2.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mCardNum>;

        if $i1 != i0 goto label2;

        $i2 = r2.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mDeviceType>;

        if $i2 != 2 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public boolean hasPlaybackDevices(int)
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        int i0, $i1, $i2, $i3;
        java.util.Iterator r1;
        com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord r2;
        java.util.ArrayList $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.alsa.AlsaDevicesParser;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.internal.alsa.AlsaDevicesParser: java.util.ArrayList mDeviceRecords>;

        r1 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord) $r4;

        $i1 = r2.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mCardNum>;

        if $i1 != i0 goto label2;

        $i2 = r2.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mDeviceType>;

        if $i2 != 0 goto label2;

        $i3 = r2.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: int mDeviceDir>;

        if $i3 != 1 goto label2;

        return 1;

     label2:
        goto label1;

     label3:
        return 0;
    }

    public int scan()
    {
        com.android.internal.alsa.AlsaDevicesParser r0;
        java.util.ArrayList $r3, $r5, $r7;
        int $i0, $i2;
        boolean $z0;
        java.lang.String $r6, r12;
        java.lang.Throwable $r8, $r9;
        java.io.File r15;
        java.io.FileReader r16;
        java.io.BufferedReader r17;
        com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord r18;
        java.io.IOException r19;
        java.io.FileNotFoundException r20;

        r0 := @this: com.android.internal.alsa.AlsaDevicesParser;

        $r3 = r0.<com.android.internal.alsa.AlsaDevicesParser: java.util.ArrayList mDeviceRecords>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        r15 = new java.io.File;

        specialinvoke r15.<java.io.File: void <init>(java.lang.String)>("/proc/asound/devices");

     label01:
        r16 = new java.io.FileReader;

        specialinvoke r16.<java.io.FileReader: void <init>(java.io.File)>(r15);

        r17 = new java.io.BufferedReader;

        specialinvoke r17.<java.io.BufferedReader: void <init>(java.io.Reader)>(r16);

     label02:
        r12 = virtualinvoke r17.<java.io.BufferedReader: java.lang.String readLine()>();

     label03:
        if r12 == null goto label06;

     label04:
        $z0 = specialinvoke r0.<com.android.internal.alsa.AlsaDevicesParser: boolean isLineDeviceRecord(java.lang.String)>(r12);

        if $z0 == 0 goto label02;

        r18 = new com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord;

        specialinvoke r18.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: void <init>(com.android.internal.alsa.AlsaDevicesParser)>(r0);

        virtualinvoke r18.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: boolean parse(java.lang.String)>(r12);

        $r6 = virtualinvoke r18.<com.android.internal.alsa.AlsaDevicesParser$AlsaDeviceRecord: java.lang.String textFormat()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AlsaDevicesParser", $r6);

        $r7 = r0.<com.android.internal.alsa.AlsaDevicesParser: java.util.ArrayList mDeviceRecords>;

        virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r18);

     label05:
        goto label02;

     label06:
        virtualinvoke r16.<java.io.FileReader: void close()>();

        $r5 = r0.<com.android.internal.alsa.AlsaDevicesParser: java.util.ArrayList mDeviceRecords>;

        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label08;

        r0.<com.android.internal.alsa.AlsaDevicesParser: int mScanStatus> = 0;

     label07:
        goto label12;

     label08:
        r0.<com.android.internal.alsa.AlsaDevicesParser: int mScanStatus> = 2;

     label09:
        goto label12;

     label10:
        $r9 := @caughtexception;

        r19 = (java.io.IOException) $r9;

        virtualinvoke r19.<java.io.IOException: void printStackTrace()>();

        r0.<com.android.internal.alsa.AlsaDevicesParser: int mScanStatus> = 1;

        goto label12;

     label11:
        $r8 := @caughtexception;

        r20 = (java.io.FileNotFoundException) $r8;

        virtualinvoke r20.<java.io.FileNotFoundException: void printStackTrace()>();

        r0.<com.android.internal.alsa.AlsaDevicesParser: int mScanStatus> = 1;

     label12:
        $i2 = r0.<com.android.internal.alsa.AlsaDevicesParser: int mScanStatus>;

        return $i2;

        catch java.io.FileNotFoundException from label01 to label02 with label11;
        catch java.io.IOException from label01 to label02 with label10;
        catch java.io.FileNotFoundException from label02 to label03 with label11;
        catch java.io.IOException from label02 to label03 with label10;
        catch java.io.FileNotFoundException from label04 to label05 with label11;
        catch java.io.IOException from label04 to label05 with label10;
        catch java.io.FileNotFoundException from label06 to label07 with label11;
        catch java.io.IOException from label06 to label07 with label10;
        catch java.io.FileNotFoundException from label08 to label09 with label11;
        catch java.io.IOException from label08 to label09 with label10;
    }
}
