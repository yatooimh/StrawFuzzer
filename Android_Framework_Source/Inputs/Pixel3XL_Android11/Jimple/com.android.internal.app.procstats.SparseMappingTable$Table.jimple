public class com.android.internal.app.procstats.SparseMappingTable$Table extends java.lang.Object
{
    private com.android.internal.app.procstats.SparseMappingTable mParent;
    private int mSequence;
    private int mSize;
    private int[] mTable;

    public void <init>(com.android.internal.app.procstats.SparseMappingTable)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        com.android.internal.app.procstats.SparseMappingTable r1;
        int $i0;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        r1 := @parameter0: com.android.internal.app.procstats.SparseMappingTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSequence> = 1;

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent> = r1;

        $i0 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int access$000(com.android.internal.app.procstats.SparseMappingTable)>(r1);

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSequence> = $i0;

        return;
    }

    private void assertConsistency()
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        return;
    }

    private int binarySearch(byte)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        byte b0, b2;
        int i1, $i3, $i4, $i5, $i6, $i7, i8, i9;
        int[] $r1;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        b0 := @parameter0: byte;

        i8 = 0;

        $i3 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize>;

        i9 = $i3 - 1;

     label1:
        if i8 > i9 goto label5;

        $i4 = i8 + i9;

        i1 = $i4 >>> 1;

        $r1 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        $i5 = $r1[i1];

        $i6 = $i5 >> 0;

        $i7 = $i6 & 255;

        b2 = (byte) $i7;

        if b2 >= b0 goto label2;

        i8 = i1 + 1;

        goto label3;

     label2:
        if b2 <= b0 goto label4;

        i9 = i1 - 1;

     label3:
        goto label1;

     label4:
        return i1;

     label5:
        return i8;
    }

    private boolean validateKeys(boolean)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        boolean z0;
        int i0, i1, i2, $i4, i5, i6, i7;
        com.android.internal.app.procstats.SparseMappingTable $r1;
        int[] $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7, $r9;
        java.lang.Object $r10;
        long[] $r11;
        java.util.ArrayList r12;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        r12 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList access$100(com.android.internal.app.procstats.SparseMappingTable)>($r1);

        i0 = virtualinvoke r12.<java.util.ArrayList: int size()>();

        i1 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize>;

        i5 = 0;

     label1:
        if i5 >= i1 goto label5;

        $r2 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        i6 = $r2[i5];

        i2 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getArrayFromKey(int)>(i6);

        i7 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getIndexFromKey(int)>(i6);

        if i2 >= i0 goto label3;

        $r10 = virtualinvoke r12.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        $r11 = (long[]) $r10;

        $i4 = lengthof $r11;

        if i7 < $i4 goto label2;

        goto label3;

     label2:
        i5 = i5 + 1;

        goto label1;

     label3:
        if z0 == 0 goto label4;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid stats at index ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        $r7 = virtualinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: java.lang.String dumpInternalState()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SparseMappingTable", $r9);

     label4:
        return 0;

     label5:
        return 1;
    }

    public void copyFrom(com.android.internal.app.procstats.SparseMappingTable$Table, int)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0, r1;
        int i0, i1, i2, i3, $i4, $i6, $i7, $i8, i9;
        long[] r2, r3;
        com.android.internal.app.procstats.SparseMappingTable $r4, $r7;
        java.util.ArrayList $r5, $r8;
        java.lang.Object $r6, $r9;
        byte $b5;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        r1 := @parameter0: com.android.internal.app.procstats.SparseMappingTable$Table;

        i0 := @parameter1: int;

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable> = null;

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize> = 0;

        i1 = virtualinvoke r1.<com.android.internal.app.procstats.SparseMappingTable$Table: int getKeyCount()>();

        i9 = 0;

     label1:
        if i9 >= i1 goto label2;

        i2 = virtualinvoke r1.<com.android.internal.app.procstats.SparseMappingTable$Table: int getKeyAt(int)>(i9);

        $r4 = r1.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $r5 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList access$100(com.android.internal.app.procstats.SparseMappingTable)>($r4);

        $i4 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getArrayFromKey(int)>(i2);

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        r2 = (long[]) $r6;

        $b5 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: byte getIdFromKey(int)>(i2);

        i3 = virtualinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int getOrAddKey(byte,int)>($b5, i0);

        $r7 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $r8 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList access$100(com.android.internal.app.procstats.SparseMappingTable)>($r7);

        $i6 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getArrayFromKey(int)>(i3);

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>($i6);

        r3 = (long[]) $r9;

        $i7 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getIndexFromKey(int)>(i2);

        $i8 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getIndexFromKey(int)>(i3);

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, $i7, r3, $i8, i0);

        i9 = i9 + 1;

        goto label1;

     label2:
        return;
    }

    public java.lang.String dumpInternalState()
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        int[] r2, $r24;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13;
        java.lang.StringBuilder $r3;
        com.android.internal.app.procstats.SparseMappingTable $r7, $r10;
        java.util.ArrayList $r11;
        java.lang.Class $r19;
        java.lang.String $r20, $r23, $r26, $r29, $r32;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SparseMappingTable.Table{mSequence=");

        $i2 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSequence>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mParent.mSequence=");

        $r7 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $i3 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int access$000(com.android.internal.app.procstats.SparseMappingTable)>($r7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mParent.mLongs.size()=");

        $r10 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $r11 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList access$100(com.android.internal.app.procstats.SparseMappingTable)>($r10);

        $i4 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSize=");

        $i5 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mTable=");

        r2 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        if r2 != null goto label1;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null");

        goto label5;

     label1:
        i0 = lengthof r2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        i13 = 0;

     label2:
        if i13 >= i0 goto label4;

        $r24 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        i1 = $r24[i13];

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0x");

        $i6 = i1 >> 0;

        $i7 = $i6 & 255;

        $r26 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/0x");

        $i8 = i1 >> 8;

        $i9 = $i8 & 255;

        $r29 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i9);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/0x");

        $i10 = i1 >> 16;

        $i11 = $i10 & 65535;

        $r32 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i11);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32);

        $i12 = i0 - 1;

        if i13 == $i12 goto label3;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label3:
        i13 = i13 + 1;

        goto label2;

     label4:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(93);

     label5:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" clazz=");

        $r19 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r20 = virtualinvoke $r19.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125);

        $r23 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r23;
    }

    public long[] getArrayForKey(int)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        int i0, $i1;
        com.android.internal.app.procstats.SparseMappingTable $r1;
        java.util.ArrayList $r2;
        java.lang.Object $r3;
        long[] $r4;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: void assertConsistency()>();

        $r1 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $r2 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList access$100(com.android.internal.app.procstats.SparseMappingTable)>($r1);

        $i1 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getArrayFromKey(int)>(i0);

        $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1);

        $r4 = (long[]) $r3;

        return $r4;
    }

    public int getKey(byte)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        byte b0;
        int i1, $i2;
        int[] $r1;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        b0 := @parameter0: byte;

        specialinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: void assertConsistency()>();

        i1 = specialinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int binarySearch(byte)>(b0);

        if i1 < 0 goto label1;

        $r1 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        $i2 = $r1[i1];

        return $i2;

     label1:
        return -1;
    }

    public int getKeyAt(int)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        int i0, $i1;
        int[] $r1;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        $i1 = $r1[i0];

        return $i1;
    }

    public int getKeyCount()
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        int $i0;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        $i0 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize>;

        return $i0;
    }

    public int getOrAddKey(byte, int)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        byte b0;
        int i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i18, i19, i20;
        long[] r1, $r8;
        com.android.internal.app.procstats.SparseMappingTable $r2, $r4, $r5, $r6, $r9;
        java.lang.Object $r3;
        int[] $r7, $r10, r12;
        java.util.ArrayList r11;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        b0 := @parameter0: byte;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: void assertConsistency()>();

        i2 = specialinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int binarySearch(byte)>(b0);

        if i2 < 0 goto label1;

        $r10 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        $i18 = $r10[i2];

        return $i18;

     label1:
        $r2 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        r11 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList access$100(com.android.internal.app.procstats.SparseMappingTable)>($r2);

        $i4 = virtualinvoke r11.<java.util.ArrayList: int size()>();

        i3 = $i4 - 1;

        $r3 = virtualinvoke r11.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r1 = (long[]) $r3;

        i19 = i3;

        $r4 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $i5 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int access$200(com.android.internal.app.procstats.SparseMappingTable)>($r4);

        $i7 = $i5 + i1;

        $i6 = lengthof r1;

        if $i7 <= $i6 goto label2;

        $r8 = newarray (long)[4096];

        virtualinvoke r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        i19 = i3 + 1;

        $r9 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int access$202(com.android.internal.app.procstats.SparseMappingTable,int)>($r9, 0);

     label2:
        $i8 = i19 << 8;

        $r5 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $i9 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int access$200(com.android.internal.app.procstats.SparseMappingTable)>($r5);

        $i10 = $i9 << 16;

        $i12 = $i8 | $i10;

        $i11 = b0 << 0;

        i20 = $i12 | $i11;

        $r6 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int access$212(com.android.internal.app.procstats.SparseMappingTable,int)>($r6, i1);

        r12 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        if r12 == null goto label3;

        goto label4;

     label3:
        r12 = <libcore.util.EmptyArray: int[] INT>;

     label4:
        $i14 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize>;

        $r7 = staticinvoke <com.android.internal.util.GrowingArrayUtils: int[] insert(int[],int,int,int)>(r12, $i14, i2, i20);

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable> = $r7;

        $i15 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize>;

        $i16 = $i15 + 1;

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize> = $i16;

        return i20;
    }

    public long getValue(int)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        int i0;
        long $l1;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        i0 := @parameter0: int;

        $l1 = virtualinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: long getValue(int,int)>(i0, 0);

        return $l1;
    }

    public long getValue(int, int)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        int i0, i1, $i3, $i4, $i5;
        long l2;
        com.android.internal.app.procstats.SparseMappingTable $r3;
        java.util.ArrayList $r4;
        java.lang.Object $r5;
        long[] $r6;
        java.lang.IndexOutOfBoundsException $r7;
        java.lang.StringBuilder $r8;
        java.lang.String $r10, $r15, $r17;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: void assertConsistency()>();

     label1:
        $r3 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $r4 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList access$100(com.android.internal.app.procstats.SparseMappingTable)>($r3);

        $i3 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getArrayFromKey(int)>(i0);

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>($i3);

        $r6 = (long[]) $r5;

        $i4 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getIndexFromKey(int)>(i0);

        $i5 = $i4 + i1;

        l2 = $r6[$i5];

     label2:
        return l2;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key=0x");

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" index=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        $r15 = virtualinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: java.lang.String dumpInternalState()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void access$300(java.lang.String,java.lang.Throwable)>($r17, $r7);

        return 0L;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public long getValueForId(byte)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        byte b0;
        long $l1;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        b0 := @parameter0: byte;

        $l1 = virtualinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: long getValueForId(byte,int)>(b0, 0);

        return $l1;
    }

    public long getValueForId(byte, int)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        byte b0;
        int i1, i2, i3, $i5, $i6, $i7;
        long l4;
        int[] $r3;
        com.android.internal.app.procstats.SparseMappingTable $r4;
        java.util.ArrayList $r5;
        java.lang.Object $r6;
        long[] $r7;
        java.lang.IndexOutOfBoundsException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r11, $r16, $r21, $r23;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        b0 := @parameter0: byte;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: void assertConsistency()>();

        i2 = specialinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int binarySearch(byte)>(b0);

        if i2 < 0 goto label4;

        $r3 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        i3 = $r3[i2];

     label1:
        $r4 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $r5 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList access$100(com.android.internal.app.procstats.SparseMappingTable)>($r4);

        $i5 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getArrayFromKey(int)>(i3);

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>($i5);

        $r7 = (long[]) $r6;

        $i6 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getIndexFromKey(int)>(i3);

        $i7 = $i6 + i1;

        l4 = $r7[$i7];

     label2:
        return l4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id=0x");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(b0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" idx=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" key=0x");

        $r16 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i3);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" index=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        $r21 = virtualinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: java.lang.String dumpInternalState()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void access$300(java.lang.String,java.lang.Throwable)>($r23, $r8);

        return 0L;

     label4:
        return 0L;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public boolean readFromParcel(android.os.Parcel)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        android.os.Parcel r1;
        int $i0, $i1, $i2, i3, i4;
        boolean $z0;
        int[] $r2, $r3;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        r1 := @parameter0: android.os.Parcel;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSequence> = $i0;

        i3 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize> = i3;

        if i3 == 0 goto label3;

        $r2 = newarray (int)[i3];

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable> = $r2;

        i4 = 0;

     label1:
        $i1 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize>;

        if i4 >= $i1 goto label2;

        $r3 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        $i2 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        $r3[i4] = $i2;

        i4 = i4 + 1;

        goto label1;

     label2:
        goto label4;

     label3:
        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable> = null;

     label4:
        $z0 = specialinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: boolean validateKeys(boolean)>(1);

        if $z0 == 0 goto label5;

        return 1;

     label5:
        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize> = 0;

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable> = null;

        return 0;
    }

    public void resetTable()
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        com.android.internal.app.procstats.SparseMappingTable $r1;
        int $i0;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable> = null;

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize> = 0;

        $r1 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $i0 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int access$000(com.android.internal.app.procstats.SparseMappingTable)>($r1);

        r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSequence> = $i0;

        return;
    }

    public void setValue(int, int, long)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        int i0, i1, $i4, $i5, $i6;
        long l2;
        byte $b3;
        com.android.internal.app.procstats.SparseMappingTable $r2;
        java.util.ArrayList $r3;
        java.lang.Object $r4;
        long[] $r5;
        java.lang.StringBuilder $r6, $r19;
        java.lang.String $r8, $r15, $r17, $r21, $r28, $r30;
        java.lang.IndexOutOfBoundsException $r18;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        l2 := @parameter2: long;

        specialinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: void assertConsistency()>();

        $b3 = l2 cmp 0L;

        if $b3 >= 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("can\'t store negative values key=0x");

        $r8 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" index=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value=");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        $r15 = virtualinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: java.lang.String dumpInternalState()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        $r17 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void access$400(java.lang.String)>($r17);

        return;

     label1:
        $r2 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: com.android.internal.app.procstats.SparseMappingTable mParent>;

        $r3 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList access$100(com.android.internal.app.procstats.SparseMappingTable)>($r2);

        $i4 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getArrayFromKey(int)>(i0);

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r5 = (long[]) $r4;

        $i5 = staticinvoke <com.android.internal.app.procstats.SparseMappingTable: int getIndexFromKey(int)>(i0);

        $i6 = $i5 + i1;

        $r5[$i6] = l2;

     label2:
        return;

     label3:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("key=0x");

        $r21 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" index=");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" value=");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- ");

        $r28 = virtualinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: java.lang.String dumpInternalState()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void access$300(java.lang.String,java.lang.Throwable)>($r30, $r18);

        return;

        catch java.lang.IndexOutOfBoundsException from label1 to label2 with label3;
    }

    public void setValue(int, long)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        int i0;
        long l1;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        virtualinvoke r0.<com.android.internal.app.procstats.SparseMappingTable$Table: void setValue(int,int,long)>(i0, 0, l1);

        return;
    }

    public void writeToParcel(android.os.Parcel)
    {
        com.android.internal.app.procstats.SparseMappingTable$Table r0;
        android.os.Parcel r1;
        int $i0, $i1, $i2, $i3, i4;
        int[] $r2;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable$Table;

        r1 := @parameter0: android.os.Parcel;

        $i0 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSequence>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i0);

        $i1 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        i4 = 0;

     label1:
        $i2 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int mSize>;

        if i4 >= $i2 goto label2;

        $r2 = r0.<com.android.internal.app.procstats.SparseMappingTable$Table: int[] mTable>;

        $i3 = $r2[i4];

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i3);

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }
}
