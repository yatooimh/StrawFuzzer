public class com.android.internal.app.procstats.SparseMappingTable extends java.lang.Object
{
    private static final int ARRAY_MASK;
    private static final int ARRAY_SHIFT;
    public static final int ARRAY_SIZE;
    private static final int ID_MASK;
    private static final int ID_SHIFT;
    private static final int INDEX_MASK;
    private static final int INDEX_SHIFT;
    public static final int INVALID_KEY;
    private static final java.lang.String TAG;
    private final java.util.ArrayList mLongs;
    private int mNextIndex;
    private int mSequence;

    public void <init>()
    {
        com.android.internal.app.procstats.SparseMappingTable r0;
        java.util.ArrayList $r2;
        long[] $r3;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs> = $r2;

        $r3 = newarray (long)[4096];

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        return;
    }

    static int access$000(com.android.internal.app.procstats.SparseMappingTable)
    {
        com.android.internal.app.procstats.SparseMappingTable r0;
        int $i0;

        r0 := @parameter0: com.android.internal.app.procstats.SparseMappingTable;

        $i0 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mSequence>;

        return $i0;
    }

    static java.util.ArrayList access$100(com.android.internal.app.procstats.SparseMappingTable)
    {
        com.android.internal.app.procstats.SparseMappingTable r0;
        java.util.ArrayList $r1;

        r0 := @parameter0: com.android.internal.app.procstats.SparseMappingTable;

        $r1 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        return $r1;
    }

    static int access$200(com.android.internal.app.procstats.SparseMappingTable)
    {
        com.android.internal.app.procstats.SparseMappingTable r0;
        int $i0;

        r0 := @parameter0: com.android.internal.app.procstats.SparseMappingTable;

        $i0 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex>;

        return $i0;
    }

    static int access$202(com.android.internal.app.procstats.SparseMappingTable, int)
    {
        com.android.internal.app.procstats.SparseMappingTable r0;
        int i0;

        r0 := @parameter0: com.android.internal.app.procstats.SparseMappingTable;

        i0 := @parameter1: int;

        r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex> = i0;

        return i0;
    }

    static int access$212(com.android.internal.app.procstats.SparseMappingTable, int)
    {
        com.android.internal.app.procstats.SparseMappingTable r0;
        int $i0, i1, i2;

        r0 := @parameter0: com.android.internal.app.procstats.SparseMappingTable;

        i1 := @parameter1: int;

        $i0 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex>;

        i2 = $i0 + i1;

        r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex> = i2;

        return i2;
    }

    static void access$300(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void logOrThrow(java.lang.String,java.lang.Throwable)>(r0, r1);

        return;
    }

    static void access$400(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void logOrThrow(java.lang.String)>(r0);

        return;
    }

    public static int getArrayFromKey(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = i0 >> 8;

        $i2 = $i1 & 255;

        return $i2;
    }

    public static byte getIdFromKey(int)
    {
        int i0, $i1, $i2;
        byte $b3;

        i0 := @parameter0: int;

        $i1 = i0 >> 0;

        $i2 = $i1 & 255;

        $b3 = (byte) $i2;

        return $b3;
    }

    public static int getIndexFromKey(int)
    {
        int i0, $i1, $i2;

        i0 := @parameter0: int;

        $i1 = i0 >> 16;

        $i2 = $i1 & 65535;

        return $i2;
    }

    private static void logOrThrow(java.lang.String)
    {
        java.lang.String r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stack trace");

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void logOrThrow(java.lang.String,java.lang.Throwable)>(r0, $r1);

        return;
    }

    private static void logOrThrow(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0;
        java.lang.Throwable r1;
        boolean $z0;
        java.lang.RuntimeException $r2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SparseMappingTable", r0, r1);

        $z0 = <android.os.Build: boolean IS_ENG>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>(r0, r1);

        throw $r2;
    }

    private static void readCompactedLongArray(android.os.Parcel, long[], int)
    {
        long[] r0;
        int i0, i1, i2, i8, i9, i10;
        long $l3, $l4, $l5, $l6, $l7;
        java.lang.StringBuilder $r1;
        java.lang.String $r6;
        android.os.Parcel r7;

        r7 := @parameter0: android.os.Parcel;

        r0 := @parameter1: long[];

        i0 := @parameter2: int;

        i1 = lengthof r0;

        if i0 <= i1 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad array lengths: got ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" array is ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void logOrThrow(java.lang.String)>($r6);

        return;

     label1:
        i8 = 0;

     label2:
        i9 = i8;

        if i8 >= i0 goto label5;

        i2 = virtualinvoke r7.<android.os.Parcel: int readInt()>();

        if i2 < 0 goto label3;

        $l7 = (long) i2;

        r0[i8] = $l7;

        goto label4;

     label3:
        i10 = virtualinvoke r7.<android.os.Parcel: int readInt()>();

        $l3 = (long) i2;

        $l5 = $l3 << 32;

        $l4 = (long) i10;

        $l6 = $l5 | $l4;

        r0[i8] = $l6;

     label4:
        i8 = i8 + 1;

        goto label2;

     label5:
        if i9 >= i1 goto label6;

        r0[i9] = 0L;

        i9 = i9 + 1;

        goto label5;

     label6:
        return;
    }

    private static void writeCompactedLongArray(android.os.Parcel, long[], int)
    {
        android.os.Parcel r0;
        long[] r1;
        int i0, i2, i3, $i9, i11;
        long l1, $l6, $l7, $l8, l12;
        byte $b4, $b5;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @parameter0: android.os.Parcel;

        r1 := @parameter1: long[];

        i0 := @parameter2: int;

        i11 = 0;

     label1:
        if i11 >= i0 goto label5;

        l1 = r1[i11];

        l12 = l1;

        $b4 = l1 cmp 0L;

        if $b4 >= 0 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Time val negative: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("SparseMappingTable", $r6);

        l12 = 0L;

     label2:
        $b5 = l12 cmp 2147483647L;

        if $b5 > 0 goto label3;

        $i9 = (int) l12;

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>($i9);

        goto label4;

     label3:
        $l6 = l12 >> 32;

        $l7 = 2147483647L & $l6;

        i2 = (int) $l7;

        $l8 = 4294967295L & l12;

        i3 = (int) $l8;

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(i2);

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(i3);

     label4:
        i11 = i11 + 1;

        goto label1;

     label5:
        return;
    }

    public java.lang.String dumpInternalState(boolean)
    {
        com.android.internal.app.procstats.SparseMappingTable r0;
        boolean z0;
        int i0, $i1, $i2, $i3, $i4, $i7, i8, i9;
        long[] r2;
        java.lang.StringBuilder $r3;
        java.util.ArrayList $r10, $r15;
        java.lang.String $r14, $r22;
        java.lang.Object $r16;
        java.lang.Object[] $r17;
        java.lang.Integer $r18, $r19;
        long $l5, $l6;
        java.lang.Long $r20, $r21;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable;

        z0 := @parameter0: boolean;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SparseMappingTable{");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSequence=");

        $i1 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mSequence>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mNextIndex=");

        $i2 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mLongs.size=");

        $r10 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        i0 = virtualinvoke $r10.<java.util.ArrayList: int size()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        if z0 == 0 goto label5;

        i8 = 0;

     label1:
        if i8 >= i0 goto label5;

        $r15 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        $r16 = virtualinvoke $r15.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        r2 = (long[]) $r16;

        i9 = 0;

     label2:
        $i3 = lengthof r2;

        if i9 >= $i3 goto label4;

        $i4 = i0 - 1;

        if i8 != $i4 goto label3;

        $i7 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex>;

        if i9 != $i7 goto label3;

        goto label4;

     label3:
        $r17 = newarray (java.lang.Object)[4];

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        $r17[0] = $r18;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i9);

        $r17[1] = $r19;

        $l5 = r2[i9];

        $r20 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l5);

        $r17[2] = $r20;

        $l6 = r2[i9];

        $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l6);

        $r17[3] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(" %4d %d 0x%016x %-19d\n", $r17);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        i9 = i9 + 1;

        goto label2;

     label4:
        i8 = i8 + 1;

        goto label1;

     label5:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r14 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;
    }

    public void readFromParcel(android.os.Parcel)
    {
        com.android.internal.app.procstats.SparseMappingTable r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, i11;
        long[] r1, $r5, $r14;
        java.util.ArrayList $r2, $r3, $r12, $r18;
        java.lang.Object $r4, $r13;
        java.lang.Object[] $r6;
        java.lang.Integer $r7;
        java.lang.StringBuilder $r8;
        java.lang.IllegalStateException $r16;
        java.lang.String $r17;
        android.os.Parcel r19;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable;

        r19 := @parameter0: android.os.Parcel;

        $i2 = virtualinvoke r19.<android.os.Parcel: int readInt()>();

        r0.<com.android.internal.app.procstats.SparseMappingTable: int mSequence> = $i2;

        $i3 = virtualinvoke r19.<android.os.Parcel: int readInt()>();

        r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex> = $i3;

        $r2 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        virtualinvoke $r2.<java.util.ArrayList: void clear()>();

        i0 = virtualinvoke r19.<android.os.Parcel: int readInt()>();

        i11 = 0;

     label1:
        if i11 >= i0 goto label2;

        i1 = virtualinvoke r19.<android.os.Parcel: int readInt()>();

        r1 = newarray (long)[i1];

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void readCompactedLongArray(android.os.Parcel,long[],int)>(r19, r1, i1);

        $r18 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        i11 = i11 + 1;

        goto label1;

     label2:
        if i0 <= 0 goto label4;

        $r3 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        $i4 = i0 - 1;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        $r5 = (long[]) $r4;

        $i6 = lengthof $r5;

        $i5 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex>;

        if $i6 != $i5 goto label3;

        goto label4;

     label3:
        $r6 = newarray (java.lang.Object)[3];

        $r6[0] = "73252178";

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        $r6[1] = $r7;

        $r6[2] = "";

        staticinvoke <android.util.EventLog: int writeEvent(int,java.lang.Object[])>(1397638484, $r6);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected array of length ");

        $i8 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but was ");

        $r12 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        $i9 = i0 - 1;

        $r13 = virtualinvoke $r12.<java.util.ArrayList: java.lang.Object get(int)>($i9);

        $r14 = (long[]) $r13;

        $i10 = lengthof $r14;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

        $r16 = new java.lang.IllegalStateException;

        $r17 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r17);

        throw $r16;

     label4:
        return;
    }

    public void reset()
    {
        com.android.internal.app.procstats.SparseMappingTable r0;
        java.util.ArrayList $r1, $r3;
        long[] $r2;
        int $i0, $i1;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable;

        $r1 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r3 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        $r2 = newarray (long)[4096];

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r2);

        r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex> = 0;

        $i0 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mSequence>;

        $i1 = $i0 + 1;

        r0.<com.android.internal.app.procstats.SparseMappingTable: int mSequence> = $i1;

        return;
    }

    public void writeToParcel(android.os.Parcel)
    {
        com.android.internal.app.procstats.SparseMappingTable r0;
        android.os.Parcel r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        java.util.ArrayList $r2, $r3, $r5;
        java.lang.Object $r4, $r6;
        long[] r7, r8;

        r0 := @this: com.android.internal.app.procstats.SparseMappingTable;

        r1 := @parameter0: android.os.Parcel;

        $i1 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mSequence>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $i2 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i2);

        $r2 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i0);

        i9 = 0;

     label1:
        $i3 = i0 - 1;

        if i9 >= $i3 goto label2;

        $r5 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i9);

        r7 = (long[]) $r6;

        $i7 = lengthof r7;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i7);

        $i8 = lengthof r7;

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void writeCompactedLongArray(android.os.Parcel,long[],int)>(r1, r7, $i8);

        i9 = i9 + 1;

        goto label1;

     label2:
        $r3 = r0.<com.android.internal.app.procstats.SparseMappingTable: java.util.ArrayList mLongs>;

        $i4 = i0 - 1;

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        r8 = (long[]) $r4;

        $i5 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i5);

        $i6 = r0.<com.android.internal.app.procstats.SparseMappingTable: int mNextIndex>;

        staticinvoke <com.android.internal.app.procstats.SparseMappingTable: void writeCompactedLongArray(android.os.Parcel,long[],int)>(r1, r8, $i6);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.app.procstats.SparseMappingTable: java.lang.String TAG> = "SparseMappingTable";

        <com.android.internal.app.procstats.SparseMappingTable: int INVALID_KEY> = -1;

        <com.android.internal.app.procstats.SparseMappingTable: int INDEX_SHIFT> = 16;

        <com.android.internal.app.procstats.SparseMappingTable: int INDEX_MASK> = 65535;

        <com.android.internal.app.procstats.SparseMappingTable: int ID_SHIFT> = 0;

        <com.android.internal.app.procstats.SparseMappingTable: int ID_MASK> = 255;

        <com.android.internal.app.procstats.SparseMappingTable: int ARRAY_SIZE> = 4096;

        <com.android.internal.app.procstats.SparseMappingTable: int ARRAY_SHIFT> = 8;

        <com.android.internal.app.procstats.SparseMappingTable: int ARRAY_MASK> = 255;

        return;
    }
}
