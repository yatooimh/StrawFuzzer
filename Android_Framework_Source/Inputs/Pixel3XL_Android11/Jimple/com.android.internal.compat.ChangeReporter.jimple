public final class com.android.internal.compat.ChangeReporter extends java.lang.Object
{
    public static final int SOURCE_APP_PROCESS;
    public static final int SOURCE_SYSTEM_SERVER;
    public static final int SOURCE_UNKNOWN_SOURCE;
    public static final int STATE_DISABLED;
    public static final int STATE_ENABLED;
    public static final int STATE_LOGGED;
    public static final int STATE_UNKNOWN_STATE;
    private static final java.lang.String TAG;
    private boolean mDebugLogAll;
    private final java.util.Map mReportedChanges;
    private int mSource;

    public void <init>(int)
    {
        com.android.internal.compat.ChangeReporter r0;
        int i0;
        java.util.HashMap $r1;

        r0 := @this: com.android.internal.compat.ChangeReporter;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.compat.ChangeReporter: int mSource> = i0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<com.android.internal.compat.ChangeReporter: java.util.Map mReportedChanges> = $r1;

        r0.<com.android.internal.compat.ChangeReporter: boolean mDebugLogAll> = 0;

        return;
    }

    private void debugLog(int, long, int)
    {
        com.android.internal.compat.ChangeReporter r0;
        int i0, i2, $i3;
        long l1;
        java.lang.String r1, $r5;
        java.lang.Object[] $r2;
        java.lang.Long $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.internal.compat.ChangeReporter;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $r2 = newarray (java.lang.Object)[3];

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r2[0] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r2[1] = $r4;

        $r5 = staticinvoke <com.android.internal.compat.ChangeReporter: java.lang.String stateToString(int)>(i2);

        $r2[2] = $r5;

        r1 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Compat change id reported: %d; UID %d; state: %s", $r2);

        $i3 = r0.<com.android.internal.compat.ChangeReporter: int mSource>;

        if $i3 != 2 goto label1;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>("CompatibilityChangeReporter", r1);

        goto label2;

     label1:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("CompatibilityChangeReporter", r1);

     label2:
        return;
    }

    private boolean isAlreadyReported(int, com.android.internal.compat.ChangeReporter$ChangeReport)
    {
        com.android.internal.compat.ChangeReporter r0;
        int i0;
        java.util.Map r1, $r3;
        java.util.Set r2;
        boolean z0;
        java.lang.Integer $r4;
        java.lang.Object $r5;
        java.lang.Throwable $r6;
        com.android.internal.compat.ChangeReporter$ChangeReport r7;

        r0 := @this: com.android.internal.compat.ChangeReporter;

        i0 := @parameter0: int;

        r7 := @parameter1: com.android.internal.compat.ChangeReporter$ChangeReport;

        r1 = r0.<com.android.internal.compat.ChangeReporter: java.util.Map mReportedChanges>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.internal.compat.ChangeReporter: java.util.Map mReportedChanges>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        r2 = (java.util.Set) $r5;

     label2:
        if r2 != null goto label5;

     label3:
        exitmonitor r1;

     label4:
        return 0;

     label5:
        z0 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r7);

        exitmonitor r1;

     label6:
        return z0;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void markAsReported(int, com.android.internal.compat.ChangeReporter$ChangeReport)
    {
        com.android.internal.compat.ChangeReporter r0;
        int i0;
        java.util.Map r1, $r2, $r7, r14;
        java.lang.Integer $r3, $r5, $r8;
        java.lang.Object $r4, $r9;
        java.lang.Throwable $r10;
        com.android.internal.compat.ChangeReporter$ChangeReport r11;
        java.util.Set r12, r13;
        java.util.HashSet r15;

        r0 := @this: com.android.internal.compat.ChangeReporter;

        i0 := @parameter0: int;

        r11 := @parameter1: com.android.internal.compat.ChangeReporter$ChangeReport;

        r1 = r0.<com.android.internal.compat.ChangeReporter: java.util.Map mReportedChanges>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.internal.compat.ChangeReporter: java.util.Map mReportedChanges>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r12 = (java.util.Set) $r4;

     label2:
        r13 = r12;

        if r12 != null goto label4;

     label3:
        r14 = r0.<com.android.internal.compat.ChangeReporter: java.util.Map mReportedChanges>;

        r15 = new java.util.HashSet;

        specialinvoke r15.<java.util.HashSet: void <init>()>();

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r15);

        $r7 = r0.<com.android.internal.compat.ChangeReporter: java.util.Map mReportedChanges>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        r13 = (java.util.Set) $r9;

     label4:
        interfaceinvoke r13.<java.util.Set: boolean add(java.lang.Object)>(r11);

     label5:
        exitmonitor r1;

     label6:
        return;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private static java.lang.String stateToString(int)
    {
        int i0;

        i0 := @parameter0: int;

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        return "UNKNOWN";

     label1:
        return "LOGGED";

     label2:
        return "DISABLED";

     label3:
        return "ENABLED";
    }

    public void reportChange(int, long, int)
    {
        com.android.internal.compat.ChangeReporter r0;
        int i0, i2, $i3;
        long l1;
        boolean $z0, $z1;
        com.android.internal.compat.ChangeReporter$ChangeReport $r1;

        r0 := @this: com.android.internal.compat.ChangeReporter;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $z0 = virtualinvoke r0.<com.android.internal.compat.ChangeReporter: boolean shouldWriteToStatsLog(int,long,int)>(i0, l1, i2);

        if $z0 == 0 goto label1;

        $i3 = r0.<com.android.internal.compat.ChangeReporter: int mSource>;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long,int,int)>(228, i0, l1, i2, $i3);

     label1:
        $z1 = virtualinvoke r0.<com.android.internal.compat.ChangeReporter: boolean shouldWriteToDebug(int,long,int)>(i0, l1, i2);

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.internal.compat.ChangeReporter: void debugLog(int,long,int)>(i0, l1, i2);

     label2:
        $r1 = new com.android.internal.compat.ChangeReporter$ChangeReport;

        specialinvoke $r1.<com.android.internal.compat.ChangeReporter$ChangeReport: void <init>(long,int)>(l1, i2);

        specialinvoke r0.<com.android.internal.compat.ChangeReporter: void markAsReported(int,com.android.internal.compat.ChangeReporter$ChangeReport)>(i0, $r1);

        return;
    }

    public void resetReportedChanges(int)
    {
        com.android.internal.compat.ChangeReporter r0;
        int i0;
        java.util.Map r1, $r3;
        java.lang.Integer $r4;
        java.lang.Throwable $r6;

        r0 := @this: com.android.internal.compat.ChangeReporter;

        i0 := @parameter0: int;

        r1 = r0.<com.android.internal.compat.ChangeReporter: java.util.Map mReportedChanges>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.internal.compat.ChangeReporter: java.util.Map mReportedChanges>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean shouldWriteToDebug(int, long, int)
    {
        com.android.internal.compat.ChangeReporter r0;
        int i0, i2;
        long l1;
        boolean $z0, $z1, z2;
        com.android.internal.compat.ChangeReporter$ChangeReport $r1;

        r0 := @this: com.android.internal.compat.ChangeReporter;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $z0 = r0.<com.android.internal.compat.ChangeReporter: boolean mDebugLogAll>;

        if $z0 != 0 goto label2;

        $r1 = new com.android.internal.compat.ChangeReporter$ChangeReport;

        specialinvoke $r1.<com.android.internal.compat.ChangeReporter$ChangeReport: void <init>(long,int)>(l1, i2);

        $z1 = specialinvoke r0.<com.android.internal.compat.ChangeReporter: boolean isAlreadyReported(int,com.android.internal.compat.ChangeReporter$ChangeReport)>(i0, $r1);

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public boolean shouldWriteToStatsLog(int, long, int)
    {
        com.android.internal.compat.ChangeReporter r0;
        int i0, i2;
        long l1;
        com.android.internal.compat.ChangeReporter$ChangeReport $r1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.compat.ChangeReporter;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        i2 := @parameter2: int;

        $r1 = new com.android.internal.compat.ChangeReporter$ChangeReport;

        specialinvoke $r1.<com.android.internal.compat.ChangeReporter$ChangeReport: void <init>(long,int)>(l1, i2);

        $z0 = specialinvoke r0.<com.android.internal.compat.ChangeReporter: boolean isAlreadyReported(int,com.android.internal.compat.ChangeReporter$ChangeReport)>(i0, $r1);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    public void startDebugLogAll()
    {
        com.android.internal.compat.ChangeReporter r0;

        r0 := @this: com.android.internal.compat.ChangeReporter;

        r0.<com.android.internal.compat.ChangeReporter: boolean mDebugLogAll> = 1;

        return;
    }

    public void stopDebugLogAll()
    {
        com.android.internal.compat.ChangeReporter r0;

        r0 := @this: com.android.internal.compat.ChangeReporter;

        r0.<com.android.internal.compat.ChangeReporter: boolean mDebugLogAll> = 0;

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.compat.ChangeReporter: java.lang.String TAG> = "CompatibilityChangeReporter";

        <com.android.internal.compat.ChangeReporter: int STATE_UNKNOWN_STATE> = 0;

        <com.android.internal.compat.ChangeReporter: int STATE_LOGGED> = 3;

        <com.android.internal.compat.ChangeReporter: int STATE_ENABLED> = 1;

        <com.android.internal.compat.ChangeReporter: int STATE_DISABLED> = 2;

        <com.android.internal.compat.ChangeReporter: int SOURCE_UNKNOWN_SOURCE> = 0;

        <com.android.internal.compat.ChangeReporter: int SOURCE_SYSTEM_SERVER> = 2;

        <com.android.internal.compat.ChangeReporter: int SOURCE_APP_PROCESS> = 1;

        return;
    }
}
