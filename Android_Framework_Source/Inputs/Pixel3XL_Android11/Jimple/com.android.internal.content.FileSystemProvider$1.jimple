class com.android.internal.content.FileSystemProvider$1 extends java.lang.Object implements java.nio.file.FileVisitor
{
    final com.android.internal.content.FileSystemProvider this$0;
    final android.system.Int64Ref val$treeCount;
    final android.system.Int64Ref val$treeSize;

    void <init>(com.android.internal.content.FileSystemProvider, android.system.Int64Ref, android.system.Int64Ref)
    {
        com.android.internal.content.FileSystemProvider$1 r0;
        com.android.internal.content.FileSystemProvider r1;
        android.system.Int64Ref r2, r3;

        r0 := @this: com.android.internal.content.FileSystemProvider$1;

        r1 := @parameter0: com.android.internal.content.FileSystemProvider;

        r2 := @parameter1: android.system.Int64Ref;

        r3 := @parameter2: android.system.Int64Ref;

        r0.<com.android.internal.content.FileSystemProvider$1: com.android.internal.content.FileSystemProvider this$0> = r1;

        r0.<com.android.internal.content.FileSystemProvider$1: android.system.Int64Ref val$treeCount> = r2;

        r0.<com.android.internal.content.FileSystemProvider$1: android.system.Int64Ref val$treeSize> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public volatile java.nio.file.FileVisitResult postVisitDirectory(java.lang.Object, java.io.IOException) throws java.io.IOException
    {
        com.android.internal.content.FileSystemProvider$1 r0;
        java.lang.Object r1;
        java.io.IOException r2;
        java.nio.file.Path $r3;
        java.nio.file.FileVisitResult $r4;

        r0 := @this: com.android.internal.content.FileSystemProvider$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.io.IOException;

        $r3 = (java.nio.file.Path) r1;

        $r4 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider$1: java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path,java.io.IOException)>($r3, r2);

        return $r4;
    }

    public java.nio.file.FileVisitResult postVisitDirectory(java.nio.file.Path, java.io.IOException)
    {
        com.android.internal.content.FileSystemProvider$1 r0;
        java.nio.file.Path r1;
        java.io.IOException r2;
        java.nio.file.FileVisitResult $r3;

        r0 := @this: com.android.internal.content.FileSystemProvider$1;

        r1 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.io.IOException;

        $r3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;

        return $r3;
    }

    public volatile java.nio.file.FileVisitResult preVisitDirectory(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
    {
        com.android.internal.content.FileSystemProvider$1 r0;
        java.lang.Object r1;
        java.nio.file.attribute.BasicFileAttributes r2;
        java.nio.file.Path $r3;
        java.nio.file.FileVisitResult $r4;

        r0 := @this: com.android.internal.content.FileSystemProvider$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $r3 = (java.nio.file.Path) r1;

        $r4 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider$1: java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>($r3, r2);

        return $r4;
    }

    public java.nio.file.FileVisitResult preVisitDirectory(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
    {
        com.android.internal.content.FileSystemProvider$1 r0;
        java.nio.file.Path r1;
        java.nio.file.attribute.BasicFileAttributes r2;
        java.nio.file.FileVisitResult $r3;

        r0 := @this: com.android.internal.content.FileSystemProvider$1;

        r1 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $r3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;

        return $r3;
    }

    public volatile java.nio.file.FileVisitResult visitFile(java.lang.Object, java.nio.file.attribute.BasicFileAttributes) throws java.io.IOException
    {
        com.android.internal.content.FileSystemProvider$1 r0;
        java.lang.Object r1;
        java.nio.file.attribute.BasicFileAttributes r2;
        java.nio.file.Path $r3;
        java.nio.file.FileVisitResult $r4;

        r0 := @this: com.android.internal.content.FileSystemProvider$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $r3 = (java.nio.file.Path) r1;

        $r4 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider$1: java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)>($r3, r2);

        return $r4;
    }

    public java.nio.file.FileVisitResult visitFile(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
    {
        com.android.internal.content.FileSystemProvider$1 r0;
        java.nio.file.attribute.BasicFileAttributes r1;
        long $l0, $l1, $l2, $l3, $l4;
        java.nio.file.FileVisitResult $r2;
        java.nio.file.Path r3;
        android.system.Int64Ref r4, r5;

        r0 := @this: com.android.internal.content.FileSystemProvider$1;

        r3 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        r4 = r0.<com.android.internal.content.FileSystemProvider$1: android.system.Int64Ref val$treeCount>;

        $l0 = r4.<android.system.Int64Ref: long value>;

        $l1 = $l0 + 1L;

        r4.<android.system.Int64Ref: long value> = $l1;

        r5 = r0.<com.android.internal.content.FileSystemProvider$1: android.system.Int64Ref val$treeSize>;

        $l2 = r5.<android.system.Int64Ref: long value>;

        $l3 = interfaceinvoke r1.<java.nio.file.attribute.BasicFileAttributes: long size()>();

        $l4 = $l2 + $l3;

        r5.<android.system.Int64Ref: long value> = $l4;

        $r2 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;

        return $r2;
    }

    public volatile java.nio.file.FileVisitResult visitFileFailed(java.lang.Object, java.io.IOException) throws java.io.IOException
    {
        com.android.internal.content.FileSystemProvider$1 r0;
        java.lang.Object r1;
        java.io.IOException r2;
        java.nio.file.Path $r3;
        java.nio.file.FileVisitResult $r4;

        r0 := @this: com.android.internal.content.FileSystemProvider$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.io.IOException;

        $r3 = (java.nio.file.Path) r1;

        $r4 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider$1: java.nio.file.FileVisitResult visitFileFailed(java.nio.file.Path,java.io.IOException)>($r3, r2);

        return $r4;
    }

    public java.nio.file.FileVisitResult visitFileFailed(java.nio.file.Path, java.io.IOException)
    {
        com.android.internal.content.FileSystemProvider$1 r0;
        java.nio.file.Path r1;
        java.io.IOException r2;
        java.nio.file.FileVisitResult $r3;

        r0 := @this: com.android.internal.content.FileSystemProvider$1;

        r1 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.io.IOException;

        $r3 = <java.nio.file.FileVisitResult: java.nio.file.FileVisitResult CONTINUE>;

        return $r3;
    }
}
