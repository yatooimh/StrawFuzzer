public abstract class com.android.internal.content.FileSystemProvider extends android.provider.DocumentsProvider
{
    private static final boolean LOG_INOTIFY;
    private static final java.util.regex.Pattern PATTERN_HIDDEN_PATH;
    protected static final java.lang.String SUPPORTED_QUERY_ARGS;
    private static final java.lang.String TAG;
    private java.lang.String[] mDefaultProjection;
    private android.os.Handler mHandler;
    private final android.util.ArrayMap mObservers;

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.lang.String $r1;
        java.util.regex.Pattern $r2;

        <com.android.internal.content.FileSystemProvider: java.lang.String TAG> = "FileSystemProvider";

        <com.android.internal.content.FileSystemProvider: boolean LOG_INOTIFY> = 0;

        $r0 = newarray (java.lang.String)[4];

        $r0[0] = "android:query-arg-display-name";

        $r0[1] = "android:query-arg-file-size-over";

        $r0[2] = "android:query-arg-last-modified-after";

        $r0[3] = "android:query-arg-mime-types";

        $r1 = staticinvoke <com.android.internal.content.FileSystemProvider: java.lang.String joinNewline(java.lang.String[])>($r0);

        <com.android.internal.content.FileSystemProvider: java.lang.String SUPPORTED_QUERY_ARGS> = $r1;

        $r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?i)^/storage/[^/]+/(?:[0-9]+/)?Android/(?:data|obb|sandbox)$");

        <com.android.internal.content.FileSystemProvider: java.util.regex.Pattern PATTERN_HIDDEN_PATH> = $r2;

        return;
    }

    public void <init>()
    {
        com.android.internal.content.FileSystemProvider r0;
        android.util.ArrayMap $r1;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        specialinvoke r0.<android.provider.DocumentsProvider: void <init>()>();

        $r1 = new android.util.ArrayMap;

        specialinvoke $r1.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.internal.content.FileSystemProvider: android.util.ArrayMap mObservers> = $r1;

        return;
    }

    static void access$100(com.android.internal.content.FileSystemProvider, java.io.File, android.net.Uri, com.android.internal.content.FileSystemProvider$DirectoryCursor)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1;
        android.net.Uri r2;
        com.android.internal.content.FileSystemProvider$DirectoryCursor r3;

        r0 := @parameter0: com.android.internal.content.FileSystemProvider;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: android.net.Uri;

        r3 := @parameter3: com.android.internal.content.FileSystemProvider$DirectoryCursor;

        specialinvoke r0.<com.android.internal.content.FileSystemProvider: void startObserving(java.io.File,android.net.Uri,com.android.internal.content.FileSystemProvider$DirectoryCursor)>(r1, r2, r3);

        return;
    }

    static void access$200(com.android.internal.content.FileSystemProvider, java.io.File, com.android.internal.content.FileSystemProvider$DirectoryCursor)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1;
        com.android.internal.content.FileSystemProvider$DirectoryCursor r2;

        r0 := @parameter0: com.android.internal.content.FileSystemProvider;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: com.android.internal.content.FileSystemProvider$DirectoryCursor;

        specialinvoke r0.<com.android.internal.content.FileSystemProvider: void stopObserving(java.io.File,com.android.internal.content.FileSystemProvider$DirectoryCursor)>(r1, r2);

        return;
    }

    private java.lang.String getDocumentType(java.lang.String, java.io.File) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1;
        int i0, $i1;
        boolean $z0;
        java.lang.String $r2, r4, r5, r6;
        android.webkit.MimeTypeMap $r3;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r4 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.File;

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        return "vnd.android.document/directory";

     label1:
        i0 = virtualinvoke r4.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 < 0 goto label2;

        $i1 = i0 + 1;

        $r2 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i1);

        r5 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>();

        $r3 = staticinvoke <android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>();

        r6 = virtualinvoke $r3.<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>(r5);

        if r6 == null goto label2;

        return r6;

     label2:
        return "application/octet-stream";
    }

    private static transient java.lang.String joinNewline(java.lang.String[])
    {
        java.lang.String[] r0;
        java.lang.String $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>("\n", r0);

        return $r1;
    }

    static boolean lambda$queryChildDocumentsShowAll$0(java.io.File)
    {
        java.io.File r0;

        r0 := @parameter0: java.io.File;

        return 1;
    }

    public static boolean lambda$wdd3IYyJrETFNprLDtbduosGS8I(com.android.internal.content.FileSystemProvider, java.io.File)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1;
        boolean $z0;

        r0 := @parameter0: com.android.internal.content.FileSystemProvider;

        r1 := @parameter1: java.io.File;

        $z0 = specialinvoke r0.<com.android.internal.content.FileSystemProvider: boolean shouldShow(java.io.File)>(r1);

        return $z0;
    }

    private boolean matchSearchQueryArguments(java.io.File, android.os.Bundle)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1;
        android.os.Bundle r2;
        java.lang.String r3, r5, r6;
        int i0, $i1;
        boolean $z0, $z1;
        android.webkit.MimeTypeMap $r4;
        long $l2, $l3;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: android.os.Bundle;

        if r1 != null goto label1;

        return 0;

     label1:
        r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label2;

        r5 = "vnd.android.document/directory";

        goto label4;

     label2:
        i0 = virtualinvoke r3.<java.lang.String: int lastIndexOf(int)>(46);

        if i0 >= 0 goto label3;

        return 0;

     label3:
        $i1 = i0 + 1;

        r6 = virtualinvoke r3.<java.lang.String: java.lang.String substring(int)>($i1);

        $r4 = staticinvoke <android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>();

        r5 = virtualinvoke $r4.<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>(r6);

     label4:
        $l2 = virtualinvoke r1.<java.io.File: long lastModified()>();

        $l3 = virtualinvoke r1.<java.io.File: long length()>();

        $z1 = staticinvoke <android.provider.DocumentsContract: boolean matchSearchQueryArguments(android.os.Bundle,java.lang.String,java.lang.String,long,long)>(r2, r3, r5, $l2, $l3);

        return $z1;
    }

    private void moveInMediaStore(java.io.File, java.io.File)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1, r2;
        android.content.Context $r3, $r6;
        android.content.ContentResolver $r4, $r7;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.io.File;

        r2 := @parameter1: java.io.File;

        if r1 == null goto label1;

        $r6 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: android.content.Context getContext()>();

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.MediaStore: android.net.Uri scanFile(android.content.ContentResolver,java.io.File)>($r7, r1);

     label1:
        if r2 == null goto label2;

        $r3 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.MediaStore: android.net.Uri scanFile(android.content.ContentResolver,java.io.File)>($r4, r2);

     label2:
        return;
    }

    private android.database.Cursor queryChildDocuments(java.lang.String, java.lang.String[], java.lang.String, java.util.function.Predicate) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.util.function.Predicate r1;
        int i0, i2;
        com.android.internal.content.FileSystemProvider$DirectoryCursor $r2;
        java.lang.String[] $r3, r11;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        java.lang.String $r8, r10, r12;
        java.io.File r13, r16;
        java.io.File[] r15;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r10 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String[];

        r12 := @parameter2: java.lang.String;

        r1 := @parameter3: java.util.function.Predicate;

        r13 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r10);

        $r2 = new com.android.internal.content.FileSystemProvider$DirectoryCursor;

        $r3 = specialinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String[] resolveProjection(java.lang.String[])>(r11);

        specialinvoke $r2.<com.android.internal.content.FileSystemProvider$DirectoryCursor: void <init>(com.android.internal.content.FileSystemProvider,java.lang.String[],java.lang.String,java.io.File)>(r0, $r3, r10, r13);

        $z0 = virtualinvoke r13.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label3;

        r15 = staticinvoke <android.os.FileUtils: java.io.File[] listFilesOrEmpty(java.io.File)>(r13);

        i0 = lengthof r15;

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        r16 = r15[i2];

        $z1 = interfaceinvoke r1.<java.util.function.Predicate: boolean test(java.lang.Object)>(r16);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: android.database.MatrixCursor$RowBuilder includeFile(android.database.MatrixCursor,java.lang.String,java.io.File)>($r2, null, r16);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parentDocumentId \'");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not Directory");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FileSystemProvider", $r8);

     label4:
        return $r2;
    }

    private void removeFromMediaStore(java.io.File) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        long l0;
        android.content.ContentResolver r1;
        android.net.Uri r2;
        android.os.Bundle r3;
        java.lang.StringBuilder r4;
        android.content.Context $r5;
        java.lang.String $r6, $r10, r14;
        java.lang.String[] $r9;
        java.lang.Throwable $r12;
        java.io.File r13;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r13 := @parameter0: java.io.File;

        if r13 == null goto label5;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r5 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: android.content.Context getContext()>();

        r1 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r2 = staticinvoke <android.provider.MediaStore$Files: android.net.Uri getContentUri(java.lang.String)>("external");

        r3 = new android.os.Bundle;

        specialinvoke r3.<android.os.Bundle: void <init>()>();

        virtualinvoke r3.<android.os.Bundle: void putInt(java.lang.String,int)>("android:query-arg-match-pending", 1);

     label2:
        $r6 = virtualinvoke r13.<java.io.File: java.lang.String getAbsolutePath()>();

        r14 = staticinvoke <android.database.DatabaseUtils: java.lang.String escapeForLike(java.lang.String)>($r6);

        r4 = new java.lang.StringBuilder;

        specialinvoke r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/%");

        $r9 = newarray (java.lang.String)[2];

        $r10 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9[0] = $r10;

        $r9[1] = r14;

        staticinvoke <android.content.ContentResolver: android.os.Bundle includeSqlSelectionArgs(android.os.Bundle,java.lang.String,java.lang.String[])>(r3, "_data LIKE ? ESCAPE \'\\\' OR _data LIKE ? ESCAPE \'\\\'", $r9);

        virtualinvoke r1.<android.content.ContentResolver: int delete(android.net.Uri,android.os.Bundle)>(r2, r3);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        goto label5;

     label4:
        $r12 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r12;

     label5:
        return;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private java.lang.String[] resolveProjection(java.lang.String[])
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String[] r1;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String[];

        if r1 != null goto label1;

        r1 = r0.<com.android.internal.content.FileSystemProvider: java.lang.String[] mDefaultProjection>;

        goto label1;

     label1:
        return r1;
    }

    private void scanFile(java.io.File)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1;
        android.content.Intent $r3;
        android.net.Uri $r4;
        android.content.Context $r6;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.io.File;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.MEDIA_SCANNER_SCAN_FILE");

        $r4 = staticinvoke <android.net.Uri: android.net.Uri fromFile(java.io.File)>(r1);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r4);

        $r6 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: android.content.Context getContext()>();

        virtualinvoke $r6.<android.content.Context: void sendBroadcast(android.content.Intent)>($r3);

        return;
    }

    private boolean shouldShow(java.io.File)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: boolean shouldHide(java.io.File)>(r1);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    private void startObserving(java.io.File, android.net.Uri, com.android.internal.content.FileSystemProvider$DirectoryCursor)
    {
        com.android.internal.content.FileSystemProvider r0;
        android.net.Uri r1;
        com.android.internal.content.FileSystemProvider$DirectoryCursor r2;
        android.util.ArrayMap r3, $r5, $r10;
        com.android.internal.content.FileSystemProvider$DirectoryObserver r4, r14;
        java.lang.Object $r6;
        java.util.concurrent.CopyOnWriteArrayList $r7;
        android.content.Context $r8;
        android.content.ContentResolver $r9;
        java.lang.Throwable $r12;
        java.io.File r13;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r13 := @parameter0: java.io.File;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: com.android.internal.content.FileSystemProvider$DirectoryCursor;

        r3 = r0.<com.android.internal.content.FileSystemProvider: android.util.ArrayMap mObservers>;

        entermonitor r3;

     label01:
        $r5 = r0.<com.android.internal.content.FileSystemProvider: android.util.ArrayMap mObservers>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r4 = (com.android.internal.content.FileSystemProvider$DirectoryObserver) $r6;

     label02:
        r14 = r4;

        if r4 != null goto label05;

     label03:
        r14 = new com.android.internal.content.FileSystemProvider$DirectoryObserver;

        $r8 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: android.content.Context getContext()>();

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        specialinvoke r14.<com.android.internal.content.FileSystemProvider$DirectoryObserver: void <init>(java.io.File,android.content.ContentResolver,android.net.Uri)>(r13, $r9, r1);

     label04:
        virtualinvoke r14.<com.android.internal.content.FileSystemProvider$DirectoryObserver: void startWatching()>();

        $r10 = r0.<com.android.internal.content.FileSystemProvider: android.util.ArrayMap mObservers>;

        virtualinvoke $r10.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, r14);

     label05:
        $r7 = staticinvoke <com.android.internal.content.FileSystemProvider$DirectoryObserver: java.util.concurrent.CopyOnWriteArrayList access$000(com.android.internal.content.FileSystemProvider$DirectoryObserver)>(r14);

        virtualinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r2);

     label06:
        exitmonitor r3;

     label07:
        return;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor r3;

     label10:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void stopObserving(java.io.File, com.android.internal.content.FileSystemProvider$DirectoryCursor)
    {
        com.android.internal.content.FileSystemProvider r0;
        com.android.internal.content.FileSystemProvider$DirectoryCursor r1;
        android.util.ArrayMap r2, $r4, $r8;
        com.android.internal.content.FileSystemProvider$DirectoryObserver r3;
        java.lang.Object $r5;
        java.util.concurrent.CopyOnWriteArrayList $r6, $r7;
        int $i0;
        java.lang.Throwable $r10;
        java.io.File r11;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r11 := @parameter0: java.io.File;

        r1 := @parameter1: com.android.internal.content.FileSystemProvider$DirectoryCursor;

        r2 = r0.<com.android.internal.content.FileSystemProvider: android.util.ArrayMap mObservers>;

        entermonitor r2;

     label01:
        $r4 = r0.<com.android.internal.content.FileSystemProvider: android.util.ArrayMap mObservers>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r11);

        r3 = (com.android.internal.content.FileSystemProvider$DirectoryObserver) $r5;

     label02:
        if r3 != null goto label05;

     label03:
        exitmonitor r2;

     label04:
        return;

     label05:
        $r6 = staticinvoke <com.android.internal.content.FileSystemProvider$DirectoryObserver: java.util.concurrent.CopyOnWriteArrayList access$000(com.android.internal.content.FileSystemProvider$DirectoryObserver)>(r3);

        virtualinvoke $r6.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1);

        $r7 = staticinvoke <com.android.internal.content.FileSystemProvider$DirectoryObserver: java.util.concurrent.CopyOnWriteArrayList access$000(com.android.internal.content.FileSystemProvider$DirectoryObserver)>(r3);

        $i0 = virtualinvoke $r7.<java.util.concurrent.CopyOnWriteArrayList: int size()>();

        if $i0 != 0 goto label06;

        $r8 = r0.<com.android.internal.content.FileSystemProvider: android.util.ArrayMap mObservers>;

        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r11);

        virtualinvoke r3.<com.android.internal.content.FileSystemProvider$DirectoryObserver: void stopWatching()>();

     label06:
        exitmonitor r2;

     label07:
        return;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    protected abstract android.net.Uri buildNotificationUri(java.lang.String);

    public java.lang.String createDocument(java.lang.String, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2, $r5, $r13, $r21, r22, r23, r24, r25, r28;
        android.content.Context $r6;
        android.content.ContentResolver $r7;
        java.lang.StringBuilder $r9, $r15, r31;
        java.lang.IllegalStateException $r12, $r20, r30;
        java.lang.Throwable $r14;
        java.io.File r26, r27;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r22 := @parameter0: java.lang.String;

        r23 := @parameter1: java.lang.String;

        r24 := @parameter2: java.lang.String;

        r25 = staticinvoke <android.os.FileUtils: java.lang.String buildValidFatFilename(java.lang.String)>(r24);

        r26 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r22);

        $z0 = virtualinvoke r26.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label6;

        r27 = staticinvoke <android.os.FileUtils: java.io.File buildUniqueFile(java.io.File,java.lang.String,java.lang.String)>(r26, r23, r25);

        $r2 = "vnd.android.document/directory";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r23);

        if $z1 == 0 goto label2;

        $z3 = virtualinvoke r27.<java.io.File: boolean mkdir()>();

        if $z3 == 0 goto label1;

        r28 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String getDocIdForFile(java.io.File)>(r27);

        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: void onDocIdChanged(java.lang.String)>(r28);

        goto label3;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to mkdir ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label2:
        $z2 = virtualinvoke r27.<java.io.File: boolean createNewFile()>();

        if $z2 == 0 goto label4;

        r28 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String getDocIdForFile(java.io.File)>(r27);

        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: void onDocIdChanged(java.lang.String)>(r28);

     label3:
        $r6 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: android.content.Context getContext()>();

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.MediaStore: android.net.Uri scanFile(android.content.ContentResolver,java.io.File)>($r7, r27);

        return r28;

     label4:
        r30 = new java.lang.IllegalStateException;

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to touch ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        $r5 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r30.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw r30;

     label5:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to touch ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r27);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r20 = new java.lang.IllegalStateException;

        $r21 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r21);

        throw $r20;

     label6:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parent document isn\'t a directory");

        throw $r1;

        catch java.io.IOException from label2 to label3 with label5;
        catch java.io.IOException from label4 to label5 with label5;
    }

    public void deleteDocument(java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1, r2;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7, r8;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r8 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r8);

        r2 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String,boolean)>(r8, 1);

        $z0 = virtualinvoke r1.<java.io.File: boolean isDirectory()>();

        if $z0 == 0 goto label1;

        staticinvoke <android.os.FileUtils: boolean deleteContents(java.io.File)>(r1);

     label1:
        $z1 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r1.<java.io.File: boolean delete()>();

        if $z2 == 0 goto label2;

        goto label3;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to delete ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;

     label3:
        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: void onDocIdChanged(java.lang.String)>(r8);

        specialinvoke r0.<com.android.internal.content.FileSystemProvider: void removeFromMediaStore(java.io.File)>(r2);

        return;
    }

    protected final java.util.List findDocumentPath(java.io.File, java.io.File) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r1, $r6;
        java.io.FileNotFoundException $r4, $r10;
        java.lang.String $r5, $r11, $r13;
        java.util.LinkedList $r12;
        java.io.File r14, r15;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r14 := @parameter0: java.io.File;

        r15 := @parameter1: java.io.File;

        $z0 = virtualinvoke r15.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label4;

        $z1 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>(r14, r15);

        if $z1 == 0 goto label3;

        $r12 = new java.util.LinkedList;

        specialinvoke $r12.<java.util.LinkedList: void <init>()>();

     label1:
        if r15 == null goto label2;

        $z2 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>(r14, r15);

        if $z2 == 0 goto label2;

        $r13 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String getDocIdForFile(java.io.File)>(r15);

        virtualinvoke $r12.<java.util.LinkedList: void addFirst(java.lang.Object)>($r13);

        r15 = virtualinvoke r15.<java.io.File: java.io.File getParentFile()>();

        goto label1;

     label2:
        return $r12;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not found under ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r10 = new java.io.FileNotFoundException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r11);

        throw $r10;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not found.");

        $r4 = new java.io.FileNotFoundException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    protected abstract java.lang.String getDocIdForFile(java.io.File) throws java.io.FileNotFoundException;

    public android.os.Bundle getDocumentMetadata(java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1;
        java.lang.String r2, $r6, $r7, $r8, $r10, $r14, r20;
        android.os.Bundle r3, $r16;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r4, $r9;
        java.io.FileNotFoundException $r5;
        android.system.Int64Ref $r11, $r12;
        java.nio.file.FileSystem $r13;
        java.lang.String[] $r15;
        long $l0, $l1;
        java.lang.Throwable $r17, $r18, $r19;
        java.nio.file.Path r23;
        com.android.internal.content.FileSystemProvider$1 r24;
        java.io.FileInputStream r28, r29, r30;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r20 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r20);

        $z0 = virtualinvoke r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label23;

        r2 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String getDocumentType(java.lang.String)>(r20);

        $r7 = "vnd.android.document/directory";

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label04;

        $r11 = new android.system.Int64Ref;

        specialinvoke $r11.<android.system.Int64Ref: void <init>(long)>(0L);

        $r12 = new android.system.Int64Ref;

        specialinvoke $r12.<android.system.Int64Ref: void <init>(long)>(0L);

     label01:
        $r13 = staticinvoke <java.nio.file.FileSystems: java.nio.file.FileSystem getDefault()>();

        $r14 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r15 = newarray (java.lang.String)[0];

        r23 = virtualinvoke $r13.<java.nio.file.FileSystem: java.nio.file.Path getPath(java.lang.String,java.lang.String[])>($r14, $r15);

        r24 = new com.android.internal.content.FileSystemProvider$1;

        specialinvoke r24.<com.android.internal.content.FileSystemProvider$1: void <init>(com.android.internal.content.FileSystemProvider,android.system.Int64Ref,android.system.Int64Ref)>(r0, $r11, $r12);

        staticinvoke <java.nio.file.Files: java.nio.file.Path walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor)>(r23, r24);

     label02:
        $r16 = new android.os.Bundle;

        specialinvoke $r16.<android.os.Bundle: void <init>()>();

        $l0 = $r11.<android.system.Int64Ref: long value>;

        virtualinvoke $r16.<android.os.Bundle: void putLong(java.lang.String,long)>("android:metadataTreeCount", $l0);

        $l1 = $r12.<android.system.Int64Ref: long value>;

        virtualinvoke $r16.<android.os.Bundle: void putLong(java.lang.String,long)>("android:metadataTreeSize", $l1);

        return $r16;

     label03:
        $r19 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FileSystemProvider", "An error occurred retrieving the metadata", $r19);

        return null;

     label04:
        $z2 = virtualinvoke r1.<java.io.File: boolean isFile()>();

        if $z2 != 0 goto label05;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FileSystemProvider", "Can\'t stream non-regular file. Returning empty metadata.");

        return null;

     label05:
        $z3 = virtualinvoke r1.<java.io.File: boolean canRead()>();

        if $z3 != 0 goto label06;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FileSystemProvider", "Can\'t stream non-readable file. Returning empty metadata.");

        return null;

     label06:
        $z4 = staticinvoke <android.provider.MetadataReader: boolean isSupportedMimeType(java.lang.String)>(r2);

        if $z4 != 0 goto label07;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported type ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Returning empty metadata.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("FileSystemProvider", $r10);

        return null;

     label07:
        r28 = null;

        r29 = null;

     label08:
        r3 = new android.os.Bundle;

     label09:
        r28 = null;

        r29 = null;

     label10:
        specialinvoke r3.<android.os.Bundle: void <init>()>();

     label11:
        r28 = null;

        r29 = null;

     label12:
        r30 = new java.io.FileInputStream;

     label13:
        r28 = null;

        r29 = null;

     label14:
        $r8 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        specialinvoke r30.<java.io.FileInputStream: void <init>(java.lang.String)>($r8);

     label15:
        r28 = r30;

        r29 = r30;

     label16:
        staticinvoke <android.provider.MetadataReader: void getMetadata(android.os.Bundle,java.io.InputStream,java.lang.String,java.lang.String[])>(r3, r30, r2, null);

     label17:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r30);

        return r3;

     label18:
        $r17 := @caughtexception;

        goto label22;

     label19:
        $r18 := @caughtexception;

        r28 = r29;

     label20:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("FileSystemProvider", "An error occurred retrieving the metadata", $r18);

     label21:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r29);

        return null;

     label22:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r28);

        throw $r17;

     label23:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find the file for documentId: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r5 = new java.io.FileNotFoundException;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r6);

        throw $r5;

        catch java.io.IOException from label01 to label02 with label03;
        catch java.io.IOException from label08 to label09 with label19;
        catch java.lang.Throwable from label08 to label09 with label18;
        catch java.io.IOException from label10 to label11 with label19;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.io.IOException from label12 to label13 with label19;
        catch java.lang.Throwable from label12 to label13 with label18;
        catch java.io.IOException from label14 to label15 with label19;
        catch java.lang.Throwable from label14 to label15 with label18;
        catch java.io.IOException from label16 to label17 with label19;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.lang.Throwable from label20 to label21 with label18;
    }

    public java.lang.String getDocumentType(java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1, $r3;
        java.io.File $r2;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r1);

        $r3 = specialinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String getDocumentType(java.lang.String,java.io.File)>(r1, $r2);

        return $r3;
    }

    protected final java.io.File getFileForDocId(java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1;
        java.io.File $r2;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String,boolean)>(r1, 0);

        return $r2;
    }

    protected abstract java.io.File getFileForDocId(java.lang.String, boolean) throws java.io.FileNotFoundException;

    protected android.database.MatrixCursor$RowBuilder includeFile(android.database.MatrixCursor, java.lang.String, java.io.File) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String[] r1;
        java.lang.String r2, $r9, r14;
        int i0, i14, i15, i16;
        long l1, $l2;
        java.lang.Long $r5, $r7;
        byte $b3;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Integer $r11;
        char $c4, $c5, $c6, $c7, $c8, $c9, c10, c11, c12, c13;
        android.database.MatrixCursor r13;
        java.io.File r15;
        android.database.MatrixCursor$RowBuilder r16;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r13 := @parameter0: android.database.MatrixCursor;

        r14 := @parameter1: java.lang.String;

        r15 := @parameter2: java.io.File;

        r1 = virtualinvoke r13.<android.database.MatrixCursor: java.lang.String[] getColumnNames()>();

        r16 = virtualinvoke r13.<android.database.MatrixCursor: android.database.MatrixCursor$RowBuilder newRow()>();

        if r14 != null goto label01;

        r14 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String getDocIdForFile(java.io.File)>(r15);

        goto label02;

     label01:
        r15 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r14);

     label02:
        r2 = specialinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String getDocumentType(java.lang.String,java.io.File)>(r14, r15);

        virtualinvoke r16.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.String,java.lang.Object)>("document_id", r14);

        virtualinvoke r16.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.String,java.lang.Object)>("mime_type", r2);

        i0 = staticinvoke <com.android.internal.util.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(r1, "flags");

        if i0 == -1 goto label07;

        c10 = 0;

        $z0 = virtualinvoke r15.<java.io.File: boolean canWrite()>();

        if $z0 == 0 goto label04;

        $z2 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("vnd.android.document/directory");

        if $z2 == 0 goto label03;

        $c7 = 0 | 8;

        $c8 = $c7 | 4;

        $c9 = $c8 | 64;

        c11 = $c9 | 256;

        c10 = c11;

        $z3 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: boolean shouldBlockFromTree(java.lang.String)>(r14);

        if $z3 == 0 goto label04;

        c10 = c11 | 32768;

        goto label04;

     label03:
        $c4 = 0 | 2;

        $c5 = $c4 | 4;

        $c6 = $c5 | 64;

        c10 = $c6 | 256;

     label04:
        c12 = c10;

        $z4 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("image/");

        if $z4 == 0 goto label05;

        c12 = c10 | 1;

     label05:
        c13 = c12;

        $z1 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: boolean typeSupportsMetadata(java.lang.String)>(r2);

        if $z1 == 0 goto label06;

        c13 = c12 | 16384;

     label06:
        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(c13);

        virtualinvoke r16.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(int,java.lang.Object)>(i0, $r11);

     label07:
        i14 = staticinvoke <com.android.internal.util.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(r1, "_display_name");

        if i14 == -1 goto label08;

        $r9 = virtualinvoke r15.<java.io.File: java.lang.String getName()>();

        virtualinvoke r16.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(int,java.lang.Object)>(i14, $r9);

     label08:
        i15 = staticinvoke <com.android.internal.util.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(r1, "last_modified");

        if i15 == -1 goto label09;

        l1 = virtualinvoke r15.<java.io.File: long lastModified()>();

        $b3 = l1 cmp 31536000000L;

        if $b3 <= 0 goto label09;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        virtualinvoke r16.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(int,java.lang.Object)>(i15, $r7);

     label09:
        i16 = staticinvoke <com.android.internal.util.ArrayUtils: int indexOf(java.lang.Object[],java.lang.Object)>(r1, "_size");

        if i16 == -1 goto label10;

        $l2 = virtualinvoke r15.<java.io.File: long length()>();

        $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        virtualinvoke r16.<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(int,java.lang.Object)>(i16, $r5);

     label10:
        return r16;
    }

    public boolean isChildDocument(java.lang.String, java.lang.String)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1, r2, $r18;
        boolean z0;
        java.io.File $r5, $r6, $r7, $r8;
        java.lang.Throwable $r9;
        java.lang.StringBuilder $r10;
        java.lang.IllegalArgumentException $r17;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

     label1:
        $r5 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.io.File: java.io.File getCanonicalFile()>();

        $r7 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.io.File: java.io.File getCanonicalFile()>();

        z0 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>($r6, $r8);

     label2:
        return z0;

     label3:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to determine if ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is child of ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r17 = new java.lang.IllegalArgumentException;

        $r18 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r18);

        throw $r17;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void lambda$openDocument$1$FileSystemProvider(java.lang.String, java.io.File, java.io.IOException)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1;
        java.io.File r2;
        java.io.IOException r3;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.File;

        r3 := @parameter2: java.io.IOException;

        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: void onDocIdChanged(java.lang.String)>(r1);

        specialinvoke r0.<com.android.internal.content.FileSystemProvider: void scanFile(java.io.File)>(r2);

        return;
    }

    public java.lang.String moveDocument(java.lang.String, java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1, $r2, $r3, $r15, r20;
        java.lang.String $r4, $r9, $r14, r16, r17, r18, r21;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r10;
        java.lang.IllegalStateException $r8, $r13;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r16 := @parameter0: java.lang.String;

        r17 := @parameter1: java.lang.String;

        r18 := @parameter2: java.lang.String;

        r1 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r16);

        $r2 = new java.io.File;

        $r3 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r18);

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getName()>();

        specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r4);

        r20 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String,boolean)>(r16, 1);

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r1.<java.io.File: boolean renameTo(java.io.File)>($r2);

        if $z1 == 0 goto label1;

        r21 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String getDocIdForFile(java.io.File)>($r2);

        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: void onDocIdChanged(java.lang.String)>(r16);

        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: void onDocIdChanged(java.lang.String)>(r21);

        $r15 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String,boolean)>(r21, 1);

        specialinvoke r0.<com.android.internal.content.FileSystemProvider: void moveInMediaStore(java.io.File,java.io.File)>(r20, $r15);

        return r21;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to move to ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Already exists ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r2);

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    protected void onCreate(java.lang.String[])
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String[] r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String[];

        $r2 = new android.os.Handler;

        specialinvoke $r2.<android.os.Handler: void <init>()>();

        r0.<com.android.internal.content.FileSystemProvider: android.os.Handler mHandler> = $r2;

        r0.<com.android.internal.content.FileSystemProvider: java.lang.String[] mDefaultProjection> = r1;

        return;
    }

    public boolean onCreate()
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Subclass should override this and call onCreate(defaultDocumentProjection)");

        throw $r1;
    }

    protected void onDocIdChanged(java.lang.String)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public android.os.ParcelFileDescriptor openDocument(java.lang.String, java.lang.String, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1, r13;
        int i0;
        com.android.internal.content._$$Lambda$FileSystemProvider$ckJway_R_1_Nz9h7IMaXmGekKKg r2;
        android.os.ParcelFileDescriptor $r3, r15;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.io.FileNotFoundException $r8;
        java.lang.String $r9, r10, r11;
        android.os.CancellationSignal r12;
        android.os.Handler r14;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r10 := @parameter0: java.lang.String;

        r11 := @parameter1: java.lang.String;

        r12 := @parameter2: android.os.CancellationSignal;

        r1 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r10);

        r13 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String,boolean)>(r10, 1);

        i0 = staticinvoke <android.os.ParcelFileDescriptor: int parseMode(java.lang.String)>(r11);

        if i0 == 268435456 goto label4;

        if r13 != null goto label1;

        goto label4;

     label1:
        r14 = r0.<com.android.internal.content.FileSystemProvider: android.os.Handler mHandler>;

        r2 = new com.android.internal.content._$$Lambda$FileSystemProvider$ckJway_R_1_Nz9h7IMaXmGekKKg;

        specialinvoke r2.<com.android.internal.content._$$Lambda$FileSystemProvider$ckJway_R_1_Nz9h7IMaXmGekKKg: void <init>(com.android.internal.content.FileSystemProvider,java.lang.String,java.io.File)>(r0, r10, r13);

        r15 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int,android.os.Handler,android.os.ParcelFileDescriptor$OnCloseListener)>(r1, i0, r14, r2);

     label2:
        return r15;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to open for writing: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = new java.io.FileNotFoundException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label4:
        $r3 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>(r1, i0);

        return $r3;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public android.content.res.AssetFileDescriptor openDocumentThumbnail(java.lang.String, android.graphics.Point, android.os.CancellationSignal) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1;
        android.graphics.Point r2;
        android.os.CancellationSignal r3;
        java.io.File $r4;
        android.content.res.AssetFileDescriptor $r5;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.graphics.Point;

        r3 := @parameter2: android.os.CancellationSignal;

        $r4 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r1);

        $r5 = staticinvoke <android.provider.DocumentsContract: android.content.res.AssetFileDescriptor openImageThumbnail(java.io.File)>($r4);

        return $r5;
    }

    public android.database.Cursor queryChildDocuments(java.lang.String, java.lang.String[], java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        com.android.internal.content._$$Lambda$FileSystemProvider$wdd3IYyJrETFNprLDtbduosGS8I $r4;
        android.database.Cursor $r5;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        $r4 = new com.android.internal.content._$$Lambda$FileSystemProvider$wdd3IYyJrETFNprLDtbduosGS8I;

        specialinvoke $r4.<com.android.internal.content._$$Lambda$FileSystemProvider$wdd3IYyJrETFNprLDtbduosGS8I: void <init>(com.android.internal.content.FileSystemProvider)>(r0);

        $r5 = specialinvoke r0.<com.android.internal.content.FileSystemProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],java.lang.String,java.util.function.Predicate)>(r1, r2, r3, $r4);

        return $r5;
    }

    protected android.database.Cursor queryChildDocumentsShowAll(java.lang.String, java.lang.String[], java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1, r3;
        java.lang.String[] r2;
        com.android.internal.content.'-$$Lambda$FileSystemProvider$ytk6fgF3pMK_GQ-HWUoYxxXHZXM' $r4;
        android.database.Cursor $r5;
        java.util.function.Predicate r6;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String[];

        r3 := @parameter2: java.lang.String;

        $r4 = <com.android.internal.content._$$Lambda$FileSystemProvider$ytk6fgF3pMK_GQ_HWUoYxxXHZXM: com.android.internal.content.'-$$Lambda$FileSystemProvider$ytk6fgF3pMK_GQ-HWUoYxxXHZXM' INSTANCE>;

        r6 = (java.util.function.Predicate) $r4;

        $r5 = specialinvoke r0.<com.android.internal.content.FileSystemProvider: android.database.Cursor queryChildDocuments(java.lang.String,java.lang.String[],java.lang.String,java.util.function.Predicate)>(r1, r2, r3, r6);

        return $r5;
    }

    public android.database.Cursor queryDocument(java.lang.String, java.lang.String[]) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1;
        android.database.MatrixCursor $r2;
        java.lang.String[] $r3, r5;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String[];

        $r2 = new android.database.MatrixCursor;

        $r3 = specialinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String[] resolveProjection(java.lang.String[])>(r5);

        specialinvoke $r2.<android.database.MatrixCursor: void <init>(java.lang.String[])>($r3);

        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: android.database.MatrixCursor$RowBuilder includeFile(android.database.MatrixCursor,java.lang.String,java.io.File)>($r2, r1, null);

        return $r2;
    }

    protected final android.database.Cursor querySearchDocuments(java.io.File, java.lang.String[], java.util.Set, android.os.Bundle) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        android.os.Bundle r1, $r7;
        java.io.File r3, $r11, r12;
        int i0, $i1, $i2, i3;
        android.database.MatrixCursor $r4;
        java.lang.String[] $r5, r13, r17;
        java.util.LinkedList $r6;
        java.lang.Object $r8;
        boolean $z1, $z2, $z3, $z4, $z6;
        java.lang.String $r9;
        java.util.Set r14;
        java.io.File[] r16;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r12 := @parameter0: java.io.File;

        r13 := @parameter1: java.lang.String[];

        r14 := @parameter2: java.util.Set;

        r1 := @parameter3: android.os.Bundle;

        $r4 = new android.database.MatrixCursor;

        $r5 = specialinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String[] resolveProjection(java.lang.String[])>(r13);

        specialinvoke $r4.<android.database.MatrixCursor: void <init>(java.lang.String[])>($r5);

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>(r12);

     label1:
        $z6 = virtualinvoke $r6.<java.util.LinkedList: boolean isEmpty()>();

        if $z6 != 0 goto label6;

        $i2 = virtualinvoke $r4.<android.database.MatrixCursor: int getCount()>();

        if $i2 >= 24 goto label6;

        $r8 = virtualinvoke $r6.<java.util.LinkedList: java.lang.Object removeFirst()>();

        r3 = (java.io.File) $r8;

        $z1 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: boolean shouldHide(java.io.File)>(r3);

        if $z1 == 0 goto label2;

        goto label1;

     label2:
        $z2 = virtualinvoke r3.<java.io.File: boolean isDirectory()>();

        if $z2 == 0 goto label4;

        r16 = staticinvoke <android.os.FileUtils: java.io.File[] listFilesOrEmpty(java.io.File)>(r3);

        i0 = lengthof r16;

        i3 = 0;

     label3:
        if i3 >= i0 goto label4;

        $r11 = r16[i3];

        virtualinvoke $r6.<java.util.LinkedList: boolean add(java.lang.Object)>($r11);

        i3 = i3 + 1;

        goto label3;

     label4:
        $r9 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        $z3 = interfaceinvoke r14.<java.util.Set: boolean contains(java.lang.Object)>($r9);

        if $z3 != 0 goto label5;

        $z4 = specialinvoke r0.<com.android.internal.content.FileSystemProvider: boolean matchSearchQueryArguments(java.io.File,android.os.Bundle)>(r3, r1);

        if $z4 == 0 goto label5;

        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: android.database.MatrixCursor$RowBuilder includeFile(android.database.MatrixCursor,java.lang.String,java.io.File)>($r4, null, r3);

     label5:
        goto label1;

     label6:
        r17 = staticinvoke <android.provider.DocumentsContract: java.lang.String[] getHandledQueryArguments(android.os.Bundle)>(r1);

        $i1 = lengthof r17;

        if $i1 <= 0 goto label7;

        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        virtualinvoke $r7.<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>("android.content.extra.HONORED_ARGS", r17);

        virtualinvoke $r4.<android.database.MatrixCursor: void setExtras(android.os.Bundle)>($r7);

     label7:
        return $r4;
    }

    public java.lang.String renameDocument(java.lang.String, java.lang.String) throws java.io.FileNotFoundException
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1, $r2, $r8, r12, r13;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.IllegalStateException $r6;
        java.lang.String $r7, r9, r10, r11, r14;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r9 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.String;

        r11 = staticinvoke <android.os.FileUtils: java.lang.String buildValidFatFilename(java.lang.String)>(r10);

        r1 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String)>(r9);

        r12 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String,boolean)>(r9, 1);

        $r2 = virtualinvoke r1.<java.io.File: java.io.File getParentFile()>();

        r13 = staticinvoke <android.os.FileUtils: java.io.File buildUniqueFile(java.io.File,java.lang.String)>($r2, r11);

        $z0 = virtualinvoke r1.<java.io.File: boolean renameTo(java.io.File)>(r13);

        if $z0 == 0 goto label2;

        r14 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.lang.String getDocIdForFile(java.io.File)>(r13);

        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: void onDocIdChanged(java.lang.String)>(r9);

        virtualinvoke r0.<com.android.internal.content.FileSystemProvider: void onDocIdChanged(java.lang.String)>(r14);

        $r8 = virtualinvoke r0.<com.android.internal.content.FileSystemProvider: java.io.File getFileForDocId(java.lang.String,boolean)>(r14, 1);

        specialinvoke r0.<com.android.internal.content.FileSystemProvider: void moveInMediaStore(java.io.File,java.io.File)>(r12, $r8);

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r9, r14);

        if $z1 != 0 goto label1;

        return r14;

     label1:
        return null;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to rename to ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r6 = new java.lang.IllegalStateException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r7);

        throw $r6;
    }

    protected boolean shouldBlockFromTree(java.lang.String)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    protected boolean shouldHide(java.io.File)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.io.File r1;
        java.util.regex.Pattern $r2;
        java.lang.String $r3;
        java.util.regex.Matcher $r4;
        boolean $z0;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.io.File;

        $r2 = <com.android.internal.content.FileSystemProvider: java.util.regex.Pattern PATTERN_HIDDEN_PATH>;

        $r3 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        $r4 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r3);

        $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    protected boolean typeSupportsMetadata(java.lang.String)
    {
        com.android.internal.content.FileSystemProvider r0;
        java.lang.String r1, $r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.internal.content.FileSystemProvider;

        r1 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.provider.MetadataReader: boolean isSupportedMimeType(java.lang.String)>(r1);

        if $z0 != 0 goto label2;

        $r2 = "vnd.android.document/directory";

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }
}
