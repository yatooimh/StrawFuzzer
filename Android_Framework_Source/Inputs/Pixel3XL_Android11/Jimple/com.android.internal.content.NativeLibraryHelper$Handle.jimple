public class com.android.internal.content.NativeLibraryHelper$Handle extends java.lang.Object implements java.io.Closeable
{
    final long[] apkHandles;
    final java.lang.String[] apkPaths;
    final boolean debuggable;
    final boolean extractNativeLibs;
    private volatile boolean mClosed;
    private final dalvik.system.CloseGuard mGuard;
    final boolean multiArch;

    void <init>(java.lang.String[], long[], boolean, boolean, boolean)
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.lang.String[] r1;
        long[] r2;
        boolean z0, z1, z2;
        dalvik.system.CloseGuard r3;

        r0 := @this: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: long[];

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        z2 := @parameter4: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r3 = staticinvoke <dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>();

        r0.<com.android.internal.content.NativeLibraryHelper$Handle: dalvik.system.CloseGuard mGuard> = r3;

        r0.<com.android.internal.content.NativeLibraryHelper$Handle: java.lang.String[] apkPaths> = r1;

        r0.<com.android.internal.content.NativeLibraryHelper$Handle: long[] apkHandles> = r2;

        r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean multiArch> = z0;

        r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean extractNativeLibs> = z1;

        r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean debuggable> = z2;

        virtualinvoke r3.<dalvik.system.CloseGuard: void open(java.lang.String)>("close");

        return;
    }

    public static com.android.internal.content.NativeLibraryHelper$Handle create(android.content.pm.PackageParser$PackageLite) throws java.io.IOException
    {
        android.content.pm.PackageParser$PackageLite r0;
        java.util.List $r1;
        boolean $z0, $z1, $z2;
        com.android.internal.content.NativeLibraryHelper$Handle $r2;

        r0 := @parameter0: android.content.pm.PackageParser$PackageLite;

        $r1 = virtualinvoke r0.<android.content.pm.PackageParser$PackageLite: java.util.List getAllCodePaths()>();

        $z2 = r0.<android.content.pm.PackageParser$PackageLite: boolean multiArch>;

        $z1 = r0.<android.content.pm.PackageParser$PackageLite: boolean extractNativeLibs>;

        $z0 = r0.<android.content.pm.PackageParser$PackageLite: boolean debuggable>;

        $r2 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(java.util.List,boolean,boolean,boolean)>($r1, $z2, $z1, $z0);

        return $r2;
    }

    public static com.android.internal.content.NativeLibraryHelper$Handle create(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        android.content.pm.PackageParser$PackageLite $r2;
        android.content.pm.PackageParser$PackageParserException $r3;
        java.lang.StringBuilder $r4;
        java.io.IOException $r7;
        java.lang.String $r8;
        com.android.internal.content.NativeLibraryHelper$Handle r9;

        r0 := @parameter0: java.io.File;

     label1:
        $r2 = staticinvoke <android.content.pm.PackageParser: android.content.pm.PackageParser$PackageLite parsePackageLite(java.io.File,int)>(r0, 0);

        r9 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(android.content.pm.PackageParser$PackageLite)>($r2);

     label2:
        return r9;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse package: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = new java.io.IOException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r3);

        throw $r7;

        catch android.content.pm.PackageParser$PackageParserException from label1 to label2 with label3;
    }

    public static com.android.internal.content.NativeLibraryHelper$Handle create(java.util.List, boolean, boolean, boolean) throws java.io.IOException
    {
        boolean z0, z1, z2;
        java.lang.String[] r0;
        long[] r1;
        java.lang.String r2, $r9;
        com.android.internal.content.NativeLibraryHelper$Handle $r3;
        java.lang.Object $r4;
        long $l0, $l1, $l3;
        byte $b2;
        java.lang.StringBuilder $r5;
        java.io.IOException $r8;
        java.util.List r10;
        int i4, i5, i6;

        r10 := @parameter0: java.util.List;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        i4 = interfaceinvoke r10.<java.util.List: int size()>();

        r0 = newarray (java.lang.String)[i4];

        r1 = newarray (long)[i4];

        i5 = 0;

     label1:
        if i5 >= i4 goto label5;

        $r4 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>(i5);

        r2 = (java.lang.String) $r4;

        r0[i5] = r2;

        $l0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long access$000(java.lang.String)>(r2);

        r1[i5] = $l0;

        $l1 = r1[i5];

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label4;

        i6 = 0;

     label2:
        if i6 >= i5 goto label3;

        $l3 = r1[i6];

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void access$100(long)>($l3);

        i6 = i6 + 1;

        goto label2;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to open APK: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = new java.io.IOException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label4:
        i5 = i5 + 1;

        goto label1;

     label5:
        $r3 = new com.android.internal.content.NativeLibraryHelper$Handle;

        specialinvoke $r3.<com.android.internal.content.NativeLibraryHelper$Handle: void <init>(java.lang.String[],long[],boolean,boolean,boolean)>(r0, r1, z0, z1, z2);

        return $r3;
    }

    public static com.android.internal.content.NativeLibraryHelper$Handle createFd(android.content.pm.PackageParser$PackageLite, java.io.FileDescriptor) throws java.io.IOException
    {
        java.io.FileDescriptor r0;
        long[] r1;
        java.lang.String r2, $r9;
        boolean z0, z1, z2;
        long $l0, $l1;
        byte $b2;
        java.lang.StringBuilder $r3;
        java.io.IOException $r8;
        com.android.internal.content.NativeLibraryHelper$Handle $r10;
        java.lang.String[] $r11;
        android.content.pm.PackageParser$PackageLite r12;

        r12 := @parameter0: android.content.pm.PackageParser$PackageLite;

        r0 := @parameter1: java.io.FileDescriptor;

        r1 = newarray (long)[1];

        r2 = r12.<android.content.pm.PackageParser$PackageLite: java.lang.String baseCodePath>;

        $l0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long access$200(java.io.FileDescriptor,java.lang.String)>(r0, r2);

        r1[0] = $l0;

        $l1 = r1[0];

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label1;

        z0 = r12.<android.content.pm.PackageParser$PackageLite: boolean multiArch>;

        z1 = r12.<android.content.pm.PackageParser$PackageLite: boolean extractNativeLibs>;

        z2 = r12.<android.content.pm.PackageParser$PackageLite: boolean debuggable>;

        $r10 = new com.android.internal.content.NativeLibraryHelper$Handle;

        $r11 = newarray (java.lang.String)[1];

        $r11[0] = r2;

        specialinvoke $r10.<com.android.internal.content.NativeLibraryHelper$Handle: void <init>(java.lang.String[],long[],boolean,boolean,boolean)>($r11, r1, z0, z1, z2);

        return $r10;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to open APK ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from fd ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r8 = new java.io.IOException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public void close()
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        long[] r1;
        int i0, i2;
        dalvik.system.CloseGuard $r2;
        long $l1;

        r0 := @this: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: long[] apkHandles>;

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        $l1 = r1[i2];

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void access$100(long)>($l1);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r2 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: dalvik.system.CloseGuard mGuard>;

        virtualinvoke $r2.<dalvik.system.CloseGuard: void close()>();

        r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean mClosed> = 1;

        return;
    }

    protected void finalize() throws java.lang.Throwable
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        boolean $z0;
        java.lang.Throwable $r1;
        dalvik.system.CloseGuard r2;

        r0 := @this: com.android.internal.content.NativeLibraryHelper$Handle;

        r2 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: dalvik.system.CloseGuard mGuard>;

        if r2 == null goto label1;

        virtualinvoke r2.<dalvik.system.CloseGuard: void warnIfOpen()>();

     label1:
        $z0 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean mClosed>;

        if $z0 != 0 goto label2;

        virtualinvoke r0.<com.android.internal.content.NativeLibraryHelper$Handle: void close()>();

     label2:
        specialinvoke r0.<java.lang.Object: void finalize()>();

        return;

     label3:
        $r1 := @caughtexception;

        specialinvoke r0.<java.lang.Object: void finalize()>();

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
