public class com.android.internal.content.NativeLibraryHelper extends java.lang.Object
{
    private static final int BITCODE_PRESENT;
    public static final java.lang.String CLEAR_ABI_OVERRIDE;
    private static final boolean DEBUG_NATIVE;
    public static final java.lang.String LIB64_DIR_NAME;
    public static final java.lang.String LIB_DIR_NAME;
    private static final java.lang.String TAG;

    public void <init>()
    {
        com.android.internal.content.NativeLibraryHelper r0;

        r0 := @this: com.android.internal.content.NativeLibraryHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static long access$000(java.lang.String)
    {
        java.lang.String r0;
        long $l0;

        r0 := @parameter0: java.lang.String;

        $l0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long nativeOpenApk(java.lang.String)>(r0);

        return $l0;
    }

    static void access$100(long)
    {
        long l0;

        l0 := @parameter0: long;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void nativeClose(long)>(l0);

        return;
    }

    static long access$200(java.io.FileDescriptor, java.lang.String)
    {
        java.io.FileDescriptor r0;
        java.lang.String r1;
        long $l0;

        r0 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.lang.String;

        $l0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long nativeOpenApkFd(java.io.FileDescriptor,java.lang.String)>(r0, r1);

        return $l0;
    }

    public static int copyNativeBinaries(com.android.internal.content.NativeLibraryHelper$Handle, java.io.File, java.lang.String)
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.io.File r1;
        java.lang.String r2, $r4;
        long[] r3;
        int i0, i1, i3;
        long $l2;
        boolean $z0, $z1;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.io.File;

        r2 := @parameter2: java.lang.String;

        r3 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: long[] apkHandles>;

        i0 = lengthof r3;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        $l2 = r3[i3];

        $r4 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        $z1 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean extractNativeLibs>;

        $z0 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean debuggable>;

        i1 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int nativeCopyNativeBinaries(long,java.lang.String,java.lang.String,boolean,boolean)>($l2, $r4, r2, $z1, $z0);

        if i1 == 1 goto label2;

        return i1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 1;
    }

    public static int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle, java.io.File, java.lang.String[], boolean, boolean) throws java.io.IOException
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.io.File r1, $r3, r6;
        boolean z0, z1;
        int i0, i1, i2;
        java.lang.String r2, r5;
        java.lang.String[] r4;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.io.File;

        r4 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        i0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r0, r4);

        if i0 >= 0 goto label1;

        return i0;

     label1:
        r2 = r4[i0];

        r5 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getInstructionSet(java.lang.String)>(r2);

        if z0 == 0 goto label2;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, r5);

        r6 = $r3;

        goto label3;

     label2:
        r6 = r1;

     label3:
        if z1 == 0 goto label5;

        i1 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int incrementalConfigureNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String)>(r0, r6, r2);

        if i1 == 1 goto label4;

        return i1;

     label4:
        return i0;

     label5:
        staticinvoke <com.android.internal.content.NativeLibraryHelper: void createNativeLibrarySubdir(java.io.File)>(r1);

        if r6 == r1 goto label6;

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void createNativeLibrarySubdir(java.io.File)>(r6);

     label6:
        i2 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinaries(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String)>(r0, r6, r2);

        if i2 == 1 goto label7;

        return i2;

     label7:
        return i0;
    }

    public static int copyNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle, java.io.File, java.lang.String, boolean)
    {
        java.io.File r0;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.String $r1, $r6, $r10, $r14, $r15, r18, r23;
        java.lang.String[] $r2, $r7, $r11, $r19, $r21, r24, r25;
        int $i0, $i6, i7, $i8, i9, i10;
        java.lang.Throwable $r16;
        com.android.internal.content.NativeLibraryHelper$Handle r17;
        java.lang.StringBuilder r20, r22, r26;

        r17 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r0 := @parameter1: java.io.File;

        r18 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

     label01:
        z1 = r17.<com.android.internal.content.NativeLibraryHelper$Handle: boolean multiArch>;

     label02:
        if z1 == 0 goto label13;

        if r18 == null goto label04;

     label03:
        $r15 = "-";

        $z4 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z4 != 0 goto label04;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", "Ignoring abiOverride for multi arch application.");

     label04:
        $r19 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $i6 = lengthof $r19;

        if $i6 <= 0 goto label08;

        $r11 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        i7 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean,boolean)>(r17, r0, $r11, 1, z0);

     label05:
        if i7 >= 0 goto label08;

        if i7 == -114 goto label08;

        if i7 == -113 goto label08;

     label06:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure copying 32 bit native libraries; copyRet=");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i7);

        $r14 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", $r14);

     label07:
        return i7;

     label08:
        $r21 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i8 = lengthof $r21;

        if $i8 <= 0 goto label12;

        $r7 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        i9 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean,boolean)>(r17, r0, $r7, 1, z0);

     label09:
        if i9 >= 0 goto label12;

        if i9 == -114 goto label12;

        if i9 == -113 goto label12;

     label10:
        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure copying 64 bit native libraries; copyRet=");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r10 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", $r10);

     label11:
        return i9;

     label12:
        goto label29;

     label13:
        r23 = null;

     label14:
        $r1 = "-";

        $z2 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r18);

        if $z2 == 0 goto label16;

     label15:
        r23 = null;

        goto label17;

     label16:
        if r18 == null goto label17;

        r23 = r18;

     label17:
        if r23 == null goto label20;

     label18:
        r24 = newarray (java.lang.String)[1];

     label19:
        r24[0] = r23;

        goto label21;

     label20:
        r24 = <android.os.Build: java.lang.String[] SUPPORTED_ABIS>;

     label21:
        r25 = r24;

     label22:
        $r2 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label25;

     label23:
        r25 = r24;

        if r23 != null goto label25;

        r25 = r24;

     label24:
        $z3 = staticinvoke <com.android.internal.content.NativeLibraryHelper: boolean hasRenderscriptBitcode(com.android.internal.content.NativeLibraryHelper$Handle)>(r17);

        if $z3 == 0 goto label25;

        r25 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

     label25:
        i10 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.io.File,java.lang.String[],boolean,boolean)>(r17, r0, r25, 1, z0);

     label26:
        if i10 >= 0 goto label29;

        if i10 == -114 goto label29;

     label27:
        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failure copying native libraries [errorCode=");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i10);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r6 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", $r6);

     label28:
        return i10;

     label29:
        return 1;

     label30:
        $r16 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NativeHelper", "Copying native libraries failed", $r16);

        return -110;

        catch java.io.IOException from label01 to label02 with label30;
        catch java.io.IOException from label03 to label04 with label30;
        catch java.io.IOException from label04 to label05 with label30;
        catch java.io.IOException from label06 to label07 with label30;
        catch java.io.IOException from label08 to label09 with label30;
        catch java.io.IOException from label10 to label11 with label30;
        catch java.io.IOException from label14 to label15 with label30;
        catch java.io.IOException from label18 to label19 with label30;
        catch java.io.IOException from label20 to label21 with label30;
        catch java.io.IOException from label22 to label23 with label30;
        catch java.io.IOException from label24 to label25 with label30;
        catch java.io.IOException from label25 to label26 with label30;
        catch java.io.IOException from label27 to label28 with label30;
    }

    public static void createNativeLibrarySubdir(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        boolean $z0, $z1, $z3;
        java.lang.StringBuilder $r2, $r8, $r16;
        java.lang.String $r4, $r7, $r10, $r13, $r14, $r18, $r21;
        java.io.IOException $r6, $r12, $r20;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.Throwable $r15;

        r0 := @parameter0: java.io.File;

        $z0 = virtualinvoke r0.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label5;

        virtualinvoke r0.<java.io.File: boolean delete()>();

        $z3 = virtualinvoke r0.<java.io.File: boolean mkdir()>();

        if $z3 == 0 goto label4;

     label1:
        $r14 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        $i1 = <android.system.OsConstants: int S_IRWXU>;

        $i0 = <android.system.OsConstants: int S_IRGRP>;

        $i3 = $i1 | $i0;

        $i2 = <android.system.OsConstants: int S_IXGRP>;

        $i5 = $i3 | $i2;

        $i4 = <android.system.OsConstants: int S_IROTH>;

        $i7 = $i5 | $i4;

        $i6 = <android.system.OsConstants: int S_IXOTH>;

        $i8 = $i7 | $i6;

        staticinvoke <android.system.Os: void chmod(java.lang.String,int)>($r14, $i8);

     label2:
        goto label6;

     label3:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot chmod native library directory ");

        $r18 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = new java.io.IOException;

        $r21 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)>($r21, $r15);

        throw $r20;

     label4:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot create ");

        $r10 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = new java.io.IOException;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label5:
        $z1 = staticinvoke <android.os.SELinux: boolean restorecon(java.io.File)>(r0);

        if $z1 == 0 goto label7;

     label6:
        return;

     label7:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set SELinux context for ");

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = new java.io.IOException;

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>($r7);

        throw $r6;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    public static int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle, java.lang.String[])
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.lang.String[] r1;
        long[] r2;
        int i0, i1, i3, i4, i5;
        boolean $z0;
        long $l2;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.lang.String[];

        i3 = -114;

        r2 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: long[] apkHandles>;

        i0 = lengthof r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label7;

        $l2 = r2[i4];

        $z0 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean debuggable>;

        i1 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int nativeFindSupportedAbi(long,java.lang.String[],boolean)>($l2, r1, $z0);

        if i1 != -114 goto label2;

        i5 = i3;

        goto label5;

     label2:
        if i1 != -113 goto label3;

        i5 = i3;

        if i3 >= 0 goto label5;

        i5 = -113;

        goto label5;

     label3:
        if i1 < 0 goto label6;

        if i3 < 0 goto label4;

        i5 = i3;

        if i1 >= i3 goto label5;

     label4:
        i5 = i1;

     label5:
        i4 = i4 + 1;

        i3 = i5;

        goto label1;

     label6:
        return i1;

     label7:
        return i3;
    }

    private static java.lang.String getRelativePath(java.io.File, java.io.File)
    {
        java.io.File r0, r1;
        java.nio.file.Path $r2, $r3, r14;
        java.lang.String $r4, $r8, $r11, $r13, r15;
        boolean $z0;
        java.lang.Throwable $r5;
        java.lang.StringBuilder $r6;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: java.io.File;

     label1:
        $r2 = virtualinvoke r0.<java.io.File: java.nio.file.Path toPath()>();

        $r3 = virtualinvoke r1.<java.io.File: java.nio.file.Path toPath()>();

        r14 = interfaceinvoke $r2.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>($r3);

        $r4 = interfaceinvoke r14.<java.nio.file.Path: java.lang.String toString()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label3;

     label2:
        return "";

     label3:
        r15 = interfaceinvoke r14.<java.nio.file.Path: java.lang.String toString()>();

     label4:
        return r15;

     label5:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find relative path between: ");

        $r8 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and: ");

        $r11 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NativeHelper", $r13);

        return null;

        catch java.lang.IllegalArgumentException from label1 to label2 with label5;
        catch java.lang.IllegalArgumentException from label3 to label4 with label5;
    }

    private static native int hasRenderscriptBitcode(long);

    public static boolean hasRenderscriptBitcode(com.android.internal.content.NativeLibraryHelper$Handle) throws java.io.IOException
    {
        int i0, i1, i3;
        long $l2;
        java.lang.StringBuilder $r0;
        java.io.IOException $r3;
        java.lang.String $r4;
        com.android.internal.content.NativeLibraryHelper$Handle r5;
        long[] r6;

        r5 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r6 = r5.<com.android.internal.content.NativeLibraryHelper$Handle: long[] apkHandles>;

        i0 = lengthof r6;

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        $l2 = r6[i3];

        i1 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int hasRenderscriptBitcode(long)>($l2);

        if i1 < 0 goto label3;

        if i1 != 1 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error scanning APK, code: ");

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r3 = new java.io.IOException;

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>($r4);

        throw $r3;

     label4:
        return 0;
    }

    private static int incrementalConfigureNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle, java.io.File, java.lang.String)
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.lang.String r1, $r7, $r8, $r9, r14;
        java.lang.String[] r2;
        java.io.File r3, $r6, r10;
        int $i1, $i2, i4;
        android.os.incremental.IncrementalManager $r4;
        android.os.incremental.IIncrementalService $r5;
        boolean $z0, $z1;
        android.os.IBinder r11;
        android.os.incremental.IncrementalStorage r13;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r10 := @parameter1: java.io.File;

        r1 := @parameter2: java.lang.String;

        r2 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: java.lang.String[] apkPaths>;

        if r2 == null goto label8;

        $i1 = lengthof r2;

        if $i1 != 0 goto label1;

        goto label8;

     label1:
        r11 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("incremental");

        if r11 != null goto label2;

        return -110;

     label2:
        $r4 = new android.os.incremental.IncrementalManager;

        $r5 = staticinvoke <android.os.incremental.IIncrementalService$Stub: android.os.incremental.IIncrementalService asInterface(android.os.IBinder)>(r11);

        specialinvoke $r4.<android.os.incremental.IncrementalManager: void <init>(android.os.incremental.IIncrementalService)>($r5);

        $r6 = new java.io.File;

        $r7 = r2[0];

        specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>($r7);

        r3 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>();

        $r8 = virtualinvoke r3.<java.io.File: java.lang.String getAbsolutePath()>();

        r13 = virtualinvoke $r4.<android.os.incremental.IncrementalManager: android.os.incremental.IncrementalStorage openStorage(java.lang.String)>($r8);

        if r13 != null goto label3;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NativeHelper", "Failed to find incremental storage");

        return -110;

     label3:
        r14 = staticinvoke <com.android.internal.content.NativeLibraryHelper: java.lang.String getRelativePath(java.io.File,java.io.File)>(r3, r10);

        if r14 != null goto label4;

        return -110;

     label4:
        i4 = 0;

     label5:
        $i2 = lengthof r2;

        if i4 >= $i2 goto label7;

        $r9 = r2[i4];

        $z0 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean extractNativeLibs>;

        $z1 = virtualinvoke r13.<android.os.incremental.IncrementalStorage: boolean configureNativeBinaries(java.lang.String,java.lang.String,java.lang.String,boolean)>($r9, r14, r1, $z0);

        if $z1 != 0 goto label6;

        return -110;

     label6:
        i4 = i4 + 1;

        goto label5;

     label7:
        return 1;

     label8:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("NativeHelper", "No apks to extract native libraries from.");

        return -110;
    }

    private static native void nativeClose(long);

    private static native int nativeCopyNativeBinaries(long, java.lang.String, java.lang.String, boolean, boolean);

    private static native int nativeFindSupportedAbi(long, java.lang.String[], boolean);

    private static native long nativeOpenApk(java.lang.String);

    private static native long nativeOpenApkFd(java.io.FileDescriptor, java.lang.String);

    private static native long nativeSumNativeBinaries(long, java.lang.String, boolean);

    public static void removeNativeBinariesFromDirLI(java.io.File, boolean)
    {
        java.io.File r0, $r7, $r8, $r11, $r15;
        boolean z0, $z1, $z2, $z3, $z4;
        java.io.File[] r1;
        java.lang.StringBuilder $r2, $r9;
        java.lang.String $r4, $r6, $r12, $r14;
        int $i1, i3;

        r0 := @parameter0: java.io.File;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label5;

        r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>();

        if r1 == null goto label4;

        i3 = 0;

     label1:
        $i1 = lengthof r1;

        if i3 >= $i1 goto label4;

        $r7 = r1[i3];

        $z3 = virtualinvoke $r7.<java.io.File: boolean isDirectory()>();

        if $z3 == 0 goto label2;

        $r15 = r1[i3];

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void removeNativeBinariesFromDirLI(java.io.File,boolean)>($r15, 1);

        goto label3;

     label2:
        $r8 = r1[i3];

        $z4 = virtualinvoke $r8.<java.io.File: boolean delete()>();

        if $z4 != 0 goto label3;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete native binary: ");

        $r11 = r1[i3];

        $r12 = virtualinvoke $r11.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", $r14);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        if z0 == 0 goto label5;

        $z2 = virtualinvoke r0.<java.io.File: boolean delete()>();

        if $z2 != 0 goto label5;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete native binary directory: ");

        $r4 = virtualinvoke r0.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", $r6);

     label5:
        return;
    }

    public static void removeNativeBinariesLI(java.lang.String)
    {
        java.lang.String r0;
        java.io.File $r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        return;

     label1:
        $r1 = new java.io.File;

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0);

        staticinvoke <com.android.internal.content.NativeLibraryHelper: void removeNativeBinariesFromDirLI(java.io.File,boolean)>($r1, 0);

        return;
    }

    private static long sumNativeBinaries(com.android.internal.content.NativeLibraryHelper$Handle, java.lang.String)
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.lang.String r1;
        long[] r2;
        int i0, i4;
        boolean $z0;
        long $l1, $l2, l3;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.lang.String;

        l3 = 0L;

        r2 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: long[] apkHandles>;

        i0 = lengthof r2;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $l1 = r2[i4];

        $z0 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean debuggable>;

        $l2 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long nativeSumNativeBinaries(long,java.lang.String,boolean)>($l1, r1, $z0);

        l3 = l3 + $l2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return l3;
    }

    private static long sumNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle, java.lang.String[])
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        java.lang.String[] r1;
        int i0;
        java.lang.String $r2;
        long $l1;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r1 := @parameter1: java.lang.String[];

        i0 = staticinvoke <com.android.internal.content.NativeLibraryHelper: int findSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r0, r1);

        if i0 < 0 goto label1;

        $r2 = r1[i0];

        $l1 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long sumNativeBinaries(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String)>(r0, $r2);

        return $l1;

     label1:
        return 0L;
    }

    public static long sumNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle, java.lang.String) throws java.io.IOException
    {
        com.android.internal.content.NativeLibraryHelper$Handle r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r1, $r6, r7, r9;
        java.lang.String[] $r2, $r3, $r4, $r5, $r8, r10, r11;
        int $i0, $i1, $i6;
        long $l2, $l3, l5, l7, $l8;

        r0 := @parameter0: com.android.internal.content.NativeLibraryHelper$Handle;

        r7 := @parameter1: java.lang.String;

        l5 = 0L;

        $z0 = r0.<com.android.internal.content.NativeLibraryHelper$Handle: boolean multiArch>;

        if $z0 == 0 goto label3;

        if r7 == null goto label1;

        $r6 = "-";

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z3 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("NativeHelper", "Ignoring abiOverride for multi arch application.");

     label1:
        $r8 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $i6 = lengthof $r8;

        if $i6 <= 0 goto label2;

        $r5 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

        $l3 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long sumNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r0, $r5);

        l5 = 0L + $l3;

     label2:
        l7 = l5;

        $r3 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i1 = lengthof $r3;

        if $i1 <= 0 goto label9;

        $r4 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $l2 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long sumNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r0, $r4);

        l7 = l5 + $l2;

        goto label9;

     label3:
        r9 = null;

        $r1 = "-";

        $z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z1 == 0 goto label4;

        r9 = null;

        goto label5;

     label4:
        if r7 == null goto label5;

        r9 = r7;

     label5:
        if r9 == null goto label6;

        r10 = newarray (java.lang.String)[1];

        r10[0] = r9;

        goto label7;

     label6:
        r10 = <android.os.Build: java.lang.String[] SUPPORTED_ABIS>;

     label7:
        r11 = r10;

        $r2 = <android.os.Build: java.lang.String[] SUPPORTED_64_BIT_ABIS>;

        $i0 = lengthof $r2;

        if $i0 <= 0 goto label8;

        r11 = r10;

        if r9 != null goto label8;

        r11 = r10;

        $z2 = staticinvoke <com.android.internal.content.NativeLibraryHelper: boolean hasRenderscriptBitcode(com.android.internal.content.NativeLibraryHelper$Handle)>(r0);

        if $z2 == 0 goto label8;

        r11 = <android.os.Build: java.lang.String[] SUPPORTED_32_BIT_ABIS>;

     label8:
        $l8 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long sumNativeBinariesForSupportedAbi(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String[])>(r0, r11);

        l7 = 0L + $l8;

     label9:
        return l7;
    }

    public static void waitForNativeBinariesExtraction(android.util.ArraySet)
    {
        android.util.ArraySet r0;
        int $i0, i1;
        java.lang.Object $r1;
        android.os.incremental.IncrementalStorage $r2;

        r0 := @parameter0: android.util.ArraySet;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r0.<android.util.ArraySet: int size()>();

        if i1 >= $i0 goto label2;

        $r1 = virtualinvoke r0.<android.util.ArraySet: java.lang.Object valueAtUnchecked(int)>(i1);

        $r2 = (android.os.incremental.IncrementalStorage) $r1;

        virtualinvoke $r2.<android.os.incremental.IncrementalStorage: boolean waitForNativeBinariesExtraction()>();

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.content.NativeLibraryHelper: java.lang.String TAG> = "NativeHelper";

        <com.android.internal.content.NativeLibraryHelper: java.lang.String LIB_DIR_NAME> = "lib";

        <com.android.internal.content.NativeLibraryHelper: java.lang.String LIB64_DIR_NAME> = "lib64";

        <com.android.internal.content.NativeLibraryHelper: boolean DEBUG_NATIVE> = 0;

        <com.android.internal.content.NativeLibraryHelper: java.lang.String CLEAR_ABI_OVERRIDE> = "-";

        <com.android.internal.content.NativeLibraryHelper: int BITCODE_PRESENT> = 1;

        return;
    }
}
