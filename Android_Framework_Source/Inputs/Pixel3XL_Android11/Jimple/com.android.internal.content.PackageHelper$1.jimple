class com.android.internal.content.PackageHelper$1 extends com.android.internal.content.PackageHelper$TestableInterface
{

    void <init>()
    {
        com.android.internal.content.PackageHelper$1 r0;

        r0 := @this: com.android.internal.content.PackageHelper$1;

        specialinvoke r0.<com.android.internal.content.PackageHelper$TestableInterface: void <init>()>();

        return;
    }

    public boolean getAllow3rdPartyOnInternalConfig(android.content.Context)
    {
        com.android.internal.content.PackageHelper$1 r0;
        android.content.Context r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.android.internal.content.PackageHelper$1;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891340);

        return $z0;
    }

    public java.io.File getDataDirectory()
    {
        com.android.internal.content.PackageHelper$1 r0;
        java.io.File $r1;

        r0 := @this: com.android.internal.content.PackageHelper$1;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        return $r1;
    }

    public android.content.pm.ApplicationInfo getExistingAppInfo(android.content.Context, java.lang.String)
    {
        com.android.internal.content.PackageHelper$1 r0;
        java.lang.String r1;
        android.content.pm.PackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        android.content.Context r4;
        android.content.pm.ApplicationInfo r5;

        r0 := @this: com.android.internal.content.PackageHelper$1;

        r4 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r5 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r1, 4194304);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        r5 = null;

     label4:
        return r5;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public boolean getForceAllowOnExternalSetting(android.content.Context)
    {
        com.android.internal.content.PackageHelper$1 r0;
        int $i0;
        android.content.Context r1;
        android.content.ContentResolver r2;
        boolean z0;

        r0 := @this: com.android.internal.content.PackageHelper$1;

        r1 := @parameter0: android.content.Context;

        r2 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r2, "force_allow_on_external", 0);

        if $i0 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public android.os.storage.StorageManager getStorageManager(android.content.Context)
    {
        com.android.internal.content.PackageHelper$1 r0;
        android.content.Context r1;
        java.lang.Object $r2;
        android.os.storage.StorageManager $r3;

        r0 := @this: com.android.internal.content.PackageHelper$1;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        $r3 = (android.os.storage.StorageManager) $r2;

        return $r3;
    }
}
