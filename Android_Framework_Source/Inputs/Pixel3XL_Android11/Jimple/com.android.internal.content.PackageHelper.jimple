public class com.android.internal.content.PackageHelper extends java.lang.Object
{
    public static final int APP_INSTALL_AUTO;
    public static final int APP_INSTALL_EXTERNAL;
    public static final int APP_INSTALL_INTERNAL;
    public static final int RECOMMEND_FAILED_ALREADY_EXISTS;
    public static final int RECOMMEND_FAILED_INSUFFICIENT_STORAGE;
    public static final int RECOMMEND_FAILED_INVALID_APK;
    public static final int RECOMMEND_FAILED_INVALID_LOCATION;
    public static final int RECOMMEND_FAILED_INVALID_URI;
    public static final int RECOMMEND_FAILED_VERSION_DOWNGRADE;
    public static final int RECOMMEND_FAILED_WRONG_INSTALLED_VERSION;
    public static final int RECOMMEND_INSTALL_EPHEMERAL;
    public static final int RECOMMEND_INSTALL_EXTERNAL;
    public static final int RECOMMEND_INSTALL_INTERNAL;
    public static final int RECOMMEND_MEDIA_UNAVAILABLE;
    private static final java.lang.String TAG;
    private static com.android.internal.content.PackageHelper$TestableInterface sDefaultTestableInterface;

    static void <clinit>()
    {
        <com.android.internal.content.PackageHelper: java.lang.String TAG> = "PackageHelper";

        <com.android.internal.content.PackageHelper: int RECOMMEND_MEDIA_UNAVAILABLE> = -5;

        <com.android.internal.content.PackageHelper: int RECOMMEND_INSTALL_INTERNAL> = 1;

        <com.android.internal.content.PackageHelper: int RECOMMEND_INSTALL_EXTERNAL> = 2;

        <com.android.internal.content.PackageHelper: int RECOMMEND_INSTALL_EPHEMERAL> = 3;

        <com.android.internal.content.PackageHelper: int RECOMMEND_FAILED_WRONG_INSTALLED_VERSION> = -8;

        <com.android.internal.content.PackageHelper: int RECOMMEND_FAILED_VERSION_DOWNGRADE> = -7;

        <com.android.internal.content.PackageHelper: int RECOMMEND_FAILED_INVALID_URI> = -6;

        <com.android.internal.content.PackageHelper: int RECOMMEND_FAILED_INVALID_LOCATION> = -3;

        <com.android.internal.content.PackageHelper: int RECOMMEND_FAILED_INVALID_APK> = -2;

        <com.android.internal.content.PackageHelper: int RECOMMEND_FAILED_INSUFFICIENT_STORAGE> = -1;

        <com.android.internal.content.PackageHelper: int RECOMMEND_FAILED_ALREADY_EXISTS> = -4;

        <com.android.internal.content.PackageHelper: int APP_INSTALL_INTERNAL> = 1;

        <com.android.internal.content.PackageHelper: int APP_INSTALL_EXTERNAL> = 2;

        <com.android.internal.content.PackageHelper: int APP_INSTALL_AUTO> = 0;

        <com.android.internal.content.PackageHelper: com.android.internal.content.PackageHelper$TestableInterface sDefaultTestableInterface> = null;

        return;
    }

    public void <init>()
    {
        com.android.internal.content.PackageHelper r0;

        r0 := @this: com.android.internal.content.PackageHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long calculateInstalledSize(android.content.pm.PackageParser$PackageLite, com.android.internal.content.NativeLibraryHelper$Handle, java.lang.String) throws java.io.IOException
    {
        android.content.pm.PackageParser$PackageLite r0;
        com.android.internal.content.NativeLibraryHelper$Handle r1;
        java.lang.String r2, $r7;
        java.util.Iterator r3;
        java.util.List $r4;
        boolean $z0;
        long $l0, $l1, $l2, $l3, $l4, l5;
        java.io.File $r5;
        java.lang.Object $r6;

        r0 := @parameter0: android.content.pm.PackageParser$PackageLite;

        r1 := @parameter1: com.android.internal.content.NativeLibraryHelper$Handle;

        r2 := @parameter2: java.lang.String;

        l5 = 0L;

        $r4 = virtualinvoke r0.<android.content.pm.PackageParser$PackageLite: java.util.List getAllCodePaths()>();

        r3 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r5 = new java.io.File;

        $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r7 = (java.lang.String) $r6;

        specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r7);

        $l4 = virtualinvoke $r5.<java.io.File: long length()>();

        l5 = l5 + $l4;

        goto label1;

     label2:
        $l0 = staticinvoke <android.content.pm.dex.DexMetadataHelper: long getPackageDexMetadataSize(android.content.pm.PackageParser$PackageLite)>(r0);

        $l1 = l5 + $l0;

        $l2 = staticinvoke <com.android.internal.content.NativeLibraryHelper: long sumNativeBinariesWithOverride(com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String)>(r1, r2);

        $l3 = $l1 + $l2;

        return $l3;
    }

    public static long calculateInstalledSize(android.content.pm.PackageParser$PackageLite, java.lang.String) throws java.io.IOException
    {
        android.content.pm.PackageParser$PackageLite r0;
        java.lang.String r1;
        long $l0;

        r0 := @parameter0: android.content.pm.PackageParser$PackageLite;

        r1 := @parameter1: java.lang.String;

        $l0 = staticinvoke <com.android.internal.content.PackageHelper: long calculateInstalledSize(android.content.pm.PackageParser$PackageLite,java.lang.String,java.io.FileDescriptor)>(r0, r1, null);

        return $l0;
    }

    public static long calculateInstalledSize(android.content.pm.PackageParser$PackageLite, java.lang.String, java.io.FileDescriptor) throws java.io.IOException
    {
        java.lang.String r0;
        long l0;
        java.lang.Throwable $r1;
        android.content.pm.PackageParser$PackageLite r2;
        java.io.FileDescriptor r3;
        com.android.internal.content.NativeLibraryHelper$Handle r4, r5;

        r2 := @parameter0: android.content.pm.PackageParser$PackageLite;

        r0 := @parameter1: java.lang.String;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 = null;

        if r3 == null goto label3;

     label1:
        r5 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle createFd(android.content.pm.PackageParser$PackageLite,java.io.FileDescriptor)>(r2, r3);

     label2:
        goto label4;

     label3:
        r5 = staticinvoke <com.android.internal.content.NativeLibraryHelper$Handle: com.android.internal.content.NativeLibraryHelper$Handle create(android.content.pm.PackageParser$PackageLite)>(r2);

     label4:
        r4 = r5;

     label5:
        l0 = staticinvoke <com.android.internal.content.PackageHelper: long calculateInstalledSize(android.content.pm.PackageParser$PackageLite,com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String)>(r2, r5, r0);

     label6:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r5);

        return l0;

     label7:
        $r1 := @caughtexception;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r4);

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public static long calculateInstalledSize(android.content.pm.PackageParser$PackageLite, boolean, com.android.internal.content.NativeLibraryHelper$Handle, java.lang.String) throws java.io.IOException
    {
        android.content.pm.PackageParser$PackageLite r0;
        boolean z0;
        com.android.internal.content.NativeLibraryHelper$Handle r1;
        java.lang.String r2;
        long $l0;

        r0 := @parameter0: android.content.pm.PackageParser$PackageLite;

        z0 := @parameter1: boolean;

        r1 := @parameter2: com.android.internal.content.NativeLibraryHelper$Handle;

        r2 := @parameter3: java.lang.String;

        $l0 = staticinvoke <com.android.internal.content.PackageHelper: long calculateInstalledSize(android.content.pm.PackageParser$PackageLite,com.android.internal.content.NativeLibraryHelper$Handle,java.lang.String)>(r0, r1, r2);

        return $l0;
    }

    public static long calculateInstalledSize(android.content.pm.PackageParser$PackageLite, boolean, java.lang.String) throws java.io.IOException
    {
        android.content.pm.PackageParser$PackageLite r0;
        boolean z0;
        java.lang.String r1;
        long $l0;

        r0 := @parameter0: android.content.pm.PackageParser$PackageLite;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        $l0 = staticinvoke <com.android.internal.content.PackageHelper: long calculateInstalledSize(android.content.pm.PackageParser$PackageLite,java.lang.String)>(r0, r1);

        return $l0;
    }

    private static boolean checkFitOnVolume(android.os.storage.StorageManager, java.lang.String, android.content.pm.PackageInstaller$SessionParams) throws java.io.IOException
    {
        android.os.storage.StorageManager r0;
        android.content.pm.PackageInstaller$SessionParams r1;
        int i0, $i3, $i4, $i7;
        long l1, l2, $l5, $l8, $l9;
        java.io.File $r2;
        byte $b6, $b10;
        java.lang.String r3;
        boolean z0;
        java.util.UUID r4;

        r0 := @parameter0: android.os.storage.StorageManager;

        r3 := @parameter1: java.lang.String;

        r1 := @parameter2: android.content.pm.PackageInstaller$SessionParams;

        z0 = 0;

        if r3 != null goto label1;

        return 0;

     label1:
        $i3 = r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        i0 = staticinvoke <com.android.internal.content.PackageHelper: int translateAllocateFlags(int)>($i3);

        $r2 = new java.io.File;

        specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r3);

        r4 = virtualinvoke r0.<android.os.storage.StorageManager: java.util.UUID getUuidForPath(java.io.File)>($r2);

        $i4 = i0 | 8;

        l1 = virtualinvoke r0.<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID,int)>(r4, $i4);

        $l5 = r1.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $b6 = $l5 cmp l1;

        if $b6 > 0 goto label2;

        return 1;

     label2:
        $i7 = i0 | 16;

        l2 = virtualinvoke r0.<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID,int)>(r4, $i7);

        $l9 = r1.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $l8 = l1 + l2;

        $b10 = $l9 cmp $l8;

        if $b10 > 0 goto label3;

        z0 = 1;

     label3:
        return z0;
    }

    public static boolean fitsOnExternal(android.content.Context, android.content.pm.PackageInstaller$SessionParams)
    {
        android.content.pm.PackageInstaller$SessionParams r0;
        android.os.storage.StorageVolume r1;
        java.lang.Object $r2;
        long $l0, $l2, $l3;
        byte $b1, $b4;
        boolean $z0, $z1, z2;
        java.lang.String $r3, $r4;
        java.io.File $r5;
        android.content.Context r6;
        android.os.storage.StorageManager r7;

        r6 := @parameter0: android.content.Context;

        r0 := @parameter1: android.content.pm.PackageInstaller$SessionParams;

        $r2 = virtualinvoke r6.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        r7 = (android.os.storage.StorageManager) $r2;

        r1 = virtualinvoke r7.<android.os.storage.StorageManager: android.os.storage.StorageVolume getPrimaryVolume()>();

        $l0 = r0.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $b1 = $l0 cmp 0L;

        if $b1 <= 0 goto label1;

        $z0 = virtualinvoke r1.<android.os.storage.StorageVolume: boolean isEmulated()>();

        if $z0 != 0 goto label1;

        $r3 = "mounted";

        $r4 = virtualinvoke r1.<android.os.storage.StorageVolume: java.lang.String getState()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        $l2 = r0.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $r5 = virtualinvoke r1.<android.os.storage.StorageVolume: java.io.File getPathFile()>();

        $l3 = virtualinvoke r7.<android.os.storage.StorageManager: long getStorageBytesUntilLow(java.io.File)>($r5);

        $b4 = $l2 cmp $l3;

        if $b4 > 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public static boolean fitsOnInternal(android.content.Context, android.content.pm.PackageInstaller$SessionParams) throws java.io.IOException
    {
        android.content.pm.PackageInstaller$SessionParams r0;
        java.util.UUID r1;
        int i0, $i2, $i3, $i5;
        long l1, $l6, $l7, l9, l10;
        java.lang.Object $r2;
        java.io.File $r3;
        byte $b4, $b8;
        android.content.Context r4;
        android.os.storage.StorageManager r5;
        boolean z0;

        r4 := @parameter0: android.content.Context;

        r0 := @parameter1: android.content.pm.PackageInstaller$SessionParams;

        $r2 = virtualinvoke r4.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/storage/StorageManager;");

        r5 = (android.os.storage.StorageManager) $r2;

        $r3 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        r1 = virtualinvoke r5.<android.os.storage.StorageManager: java.util.UUID getUuidForPath(java.io.File)>($r3);

        $i2 = r0.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        i0 = staticinvoke <com.android.internal.content.PackageHelper: int translateAllocateFlags(int)>($i2);

        $i3 = i0 | 8;

        l1 = virtualinvoke r5.<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID,int)>(r1, $i3);

        l9 = r0.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        z0 = 1;

        $b4 = l9 cmp l1;

        if $b4 > 0 goto label1;

        return 1;

     label1:
        $i5 = i0 | 16;

        l10 = virtualinvoke r5.<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID,int)>(r1, $i5);

        $l7 = r0.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $l6 = l1 + l10;

        $b8 = $l7 cmp $l6;

        if $b8 > 0 goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    private static com.android.internal.content.PackageHelper$TestableInterface getDefaultTestableInterface()
    {
        com.android.internal.content.PackageHelper$TestableInterface $r0, r3;
        java.lang.Throwable $r1;
        com.android.internal.content.PackageHelper$1 r2;

        entermonitor class "Lcom/android/internal/content/PackageHelper;";

     label1:
        $r0 = <com.android.internal.content.PackageHelper: com.android.internal.content.PackageHelper$TestableInterface sDefaultTestableInterface>;

        if $r0 != null goto label2;

        r2 = new com.android.internal.content.PackageHelper$1;

        specialinvoke r2.<com.android.internal.content.PackageHelper$1: void <init>()>();

        <com.android.internal.content.PackageHelper: com.android.internal.content.PackageHelper$TestableInterface sDefaultTestableInterface> = r2;

     label2:
        r3 = <com.android.internal.content.PackageHelper: com.android.internal.content.PackageHelper$TestableInterface sDefaultTestableInterface>;

     label3:
        exitmonitor class "Lcom/android/internal/content/PackageHelper;";

        return r3;

     label4:
        $r1 := @caughtexception;

        exitmonitor class "Lcom/android/internal/content/PackageHelper;";

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public static android.os.storage.IStorageManager getStorageManager() throws android.os.RemoteException
    {
        android.os.IBinder r0;
        android.os.RemoteException $r1;
        android.os.storage.IStorageManager $r2;

        r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r0 == null goto label1;

        $r2 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>(r0);

        return $r2;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PackageHelper", "Can\'t get storagemanager service");

        $r1 = new android.os.RemoteException;

        specialinvoke $r1.<android.os.RemoteException: void <init>(java.lang.String)>("Could not contact storagemanager service");

        throw $r1;
    }

    public static java.lang.String replaceEnd(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r9, $r11, $r14, r15;
        boolean $z0;
        java.lang.StringBuilder $r3, $r10;
        java.lang.IllegalArgumentException $r8;
        int $i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r15 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean endsWith(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        $i2 = $i0 - $i1;

        $r11 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i2);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r14;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to end with ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    public static int resolveInstallLocation(android.content.Context, android.content.pm.PackageInstaller$SessionParams) throws java.io.IOException
    {
        android.content.Context r0;
        android.content.pm.PackageInstaller$SessionParams r1;
        android.content.pm.PackageManager $r2;
        java.lang.String $r3;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        android.content.pm.ApplicationInfo r5, r6;
        boolean z0, z1, z2, z3;
        byte b10, b11;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.pm.PackageInstaller$SessionParams;

        r5 = null;

     label01:
        $r2 = virtualinvoke r0.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = r1.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        r6 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>($r3, 4194304);

     label02:
        r5 = r6;

        goto label04;

     label03:
        $r4 := @caughtexception;

     label04:
        z0 = 0;

        i9 = r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i1 = i9 & 2048;

        if $i1 == 0 goto label05;

        b10 = 1;

        z0 = 1;

        z1 = 0;

        goto label13;

     label05:
        $i2 = r1.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i3 = $i2 & 16;

        if $i3 == 0 goto label06;

        b10 = 1;

        z1 = 0;

        goto label13;

     label06:
        $i4 = r1.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        if $i4 != 1 goto label07;

        b10 = 1;

        z1 = 0;

        goto label13;

     label07:
        $i5 = r1.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        if $i5 != 2 goto label08;

        b10 = 2;

        z1 = 1;

        goto label13;

     label08:
        $i6 = r1.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        if $i6 != 0 goto label12;

        if r5 == null goto label10;

        $i7 = r5.<android.content.pm.ApplicationInfo: int flags>;

        $i8 = $i7 & 262144;

        if $i8 == 0 goto label09;

        b10 = 2;

        goto label11;

     label09:
        b10 = 1;

        goto label11;

     label10:
        b10 = 1;

     label11:
        z1 = 1;

        goto label13;

     label12:
        b10 = 1;

        z1 = 0;

     label13:
        z2 = 0;

        if z1 != 0 goto label14;

        if b10 != 1 goto label15;

     label14:
        z2 = staticinvoke <com.android.internal.content.PackageHelper: boolean fitsOnInternal(android.content.Context,android.content.pm.PackageInstaller$SessionParams)>(r0, r1);

     label15:
        z3 = 0;

        if z1 != 0 goto label16;

        if b10 != 2 goto label17;

     label16:
        z3 = staticinvoke <com.android.internal.content.PackageHelper: boolean fitsOnExternal(android.content.Context,android.content.pm.PackageInstaller$SessionParams)>(r0, r1);

     label17:
        if b10 != 1 goto label20;

        if z2 == 0 goto label21;

        if z0 == 0 goto label18;

        b11 = 3;

        goto label19;

     label18:
        b11 = 1;

     label19:
        return b11;

     label20:
        if b10 != 2 goto label21;

        if z3 == 0 goto label21;

        return 2;

     label21:
        if z1 == 0 goto label23;

        if z2 == 0 goto label22;

        return 1;

     label22:
        if z3 == 0 goto label23;

        return 2;

     label23:
        return -1;

        catch android.content.pm.PackageManager$NameNotFoundException from label01 to label02 with label03;
    }

    public static int resolveInstallLocation(android.content.Context, java.lang.String, int, long, int)
    {
        java.lang.String r0;
        long l0;
        int i1, i2, i3;
        android.content.pm.PackageInstaller$SessionParams $r2;
        java.lang.Throwable $r3;
        java.lang.IllegalStateException $r4;
        android.content.Context r5;

        r5 := @parameter0: android.content.Context;

        r0 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        l0 := @parameter3: long;

        i1 := @parameter4: int;

        $r2 = new android.content.pm.PackageInstaller$SessionParams;

        specialinvoke $r2.<android.content.pm.PackageInstaller$SessionParams: void <init>(int)>(-1);

        $r2.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName> = r0;

        $r2.<android.content.pm.PackageInstaller$SessionParams: int installLocation> = i2;

        $r2.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes> = l0;

        $r2.<android.content.pm.PackageInstaller$SessionParams: int installFlags> = i1;

     label1:
        i3 = staticinvoke <com.android.internal.content.PackageHelper: int resolveInstallLocation(android.content.Context,android.content.pm.PackageInstaller$SessionParams)>(r5, $r2);

     label2:
        return i3;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.Throwable)>($r3);

        throw $r4;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public static java.lang.String resolveInstallVolume(android.content.Context, android.content.pm.PackageInstaller$SessionParams) throws java.io.IOException
    {
        android.content.Context r0;
        android.content.pm.PackageInstaller$SessionParams r1;
        com.android.internal.content.PackageHelper$TestableInterface r2;
        long $l0;
        int $i1;
        java.lang.String $r3, $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.pm.PackageInstaller$SessionParams;

        r2 = staticinvoke <com.android.internal.content.PackageHelper: com.android.internal.content.PackageHelper$TestableInterface getDefaultTestableInterface()>();

        $r3 = r1.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        $i1 = r1.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        $l0 = r1.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $r4 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String resolveInstallVolume(android.content.Context,java.lang.String,int,long,com.android.internal.content.PackageHelper$TestableInterface)>(r0, $r3, $i1, $l0, r2);

        return $r4;
    }

    public static java.lang.String resolveInstallVolume(android.content.Context, android.content.pm.PackageInstaller$SessionParams, com.android.internal.content.PackageHelper$TestableInterface) throws java.io.IOException
    {
        android.content.pm.PackageInstaller$SessionParams r0;
        android.os.storage.StorageManager r1;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.util.Iterator r3, r62;
        android.os.storage.VolumeInfo r4;
        long l0, $l2, l9, l10;
        java.lang.String $r5, $r11, $r15, $r18, $r20, $r21, $r22, $r23, $r25, $r26, $r28, $r29, $r30, $r34, $r35, $r36, $r38, $r39, $r41, $r43, $r44, $r46, $r47, $r49, $r50, $r51, $r52, r56, r57, r61, r63;
        android.util.ArrayMap $r6;
        java.util.List $r7;
        int $i1, $i4, $i5, $i7, $i8;
        java.util.Set $r8;
        byte $b3, $b6;
        java.lang.StringBuilder $r9, $r24, $r37, $r42;
        java.io.IOException $r10, $r27, $r32, $r33, $r40, $r45;
        java.lang.Object $r12, $r14, $r17, $r19, $r31, $r48;
        java.io.File $r13;
        java.util.UUID $r16;
        android.content.Context r53;
        com.android.internal.content.PackageHelper$TestableInterface r54;
        android.content.pm.ApplicationInfo r55;

        r53 := @parameter0: android.content.Context;

        r0 := @parameter1: android.content.pm.PackageInstaller$SessionParams;

        r54 := @parameter2: com.android.internal.content.PackageHelper$TestableInterface;

        r1 = virtualinvoke r54.<com.android.internal.content.PackageHelper$TestableInterface: android.os.storage.StorageManager getStorageManager(android.content.Context)>(r53);

        z0 = virtualinvoke r54.<com.android.internal.content.PackageHelper$TestableInterface: boolean getForceAllowOnExternalSetting(android.content.Context)>(r53);

        z1 = virtualinvoke r54.<com.android.internal.content.PackageHelper$TestableInterface: boolean getAllow3rdPartyOnInternalConfig(android.content.Context)>(r53);

        $r5 = r0.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        r55 = virtualinvoke r54.<com.android.internal.content.PackageHelper$TestableInterface: android.content.pm.ApplicationInfo getExistingAppInfo(android.content.Context,java.lang.String)>(r53, $r5);

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        r56 = null;

        $r7 = virtualinvoke r1.<android.os.storage.StorageManager: java.util.List getVolumes()>();

        r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label05;

        $r48 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (android.os.storage.VolumeInfo) $r48;

        r57 = r56;

        $i8 = r4.<android.os.storage.VolumeInfo: int type>;

        if $i8 != 1 goto label04;

        r57 = r56;

        $z12 = virtualinvoke r4.<android.os.storage.VolumeInfo: boolean isMountedWritable()>();

        if $z12 == 0 goto label04;

        $r50 = "private";

        $r49 = r4.<android.os.storage.VolumeInfo: java.lang.String id>;

        z2 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>($r49);

        if z2 == 0 goto label02;

        r56 = r4.<android.os.storage.VolumeInfo: java.lang.String path>;

     label02:
        if z2 == 0 goto label03;

        r57 = r56;

        if z1 == 0 goto label04;

     label03:
        $r52 = r4.<android.os.storage.VolumeInfo: java.lang.String fsUuid>;

        $r51 = r4.<android.os.storage.VolumeInfo: java.lang.String path>;

        virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r52, $r51);

        r57 = r56;

     label04:
        r56 = r57;

        goto label01;

     label05:
        if r55 == null goto label07;

        $z10 = virtualinvoke r55.<android.content.pm.ApplicationInfo: boolean isSystemApp()>();

        if $z10 == 0 goto label07;

        $z11 = staticinvoke <com.android.internal.content.PackageHelper: boolean checkFitOnVolume(android.os.storage.StorageManager,java.lang.String,android.content.pm.PackageInstaller$SessionParams)>(r1, r56, r0);

        if $z11 == 0 goto label06;

        $r47 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        return $r47;

     label06:
        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not enough space on existing volume ");

        $r43 = r55.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid>;

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for system app ");

        $r44 = r0.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" upgrade");

        $r45 = new java.io.IOException;

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r45.<java.io.IOException: void <init>(java.lang.String)>($r46);

        throw $r45;

     label07:
        if z0 != 0 goto label12;

        $i7 = r0.<android.content.pm.PackageInstaller$SessionParams: int installLocation>;

        if $i7 != 1 goto label12;

        if r55 == null goto label09;

        $r36 = r55.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid>;

        $r35 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $z9 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r36, $r35);

        if $z9 == 0 goto label08;

        goto label09;

     label08:
        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot automatically move ");

        $r38 = r0.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38);

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r39 = r55.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid>;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to internal storage");

        $r40 = new java.io.IOException;

        $r41 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r40.<java.io.IOException: void <init>(java.lang.String)>($r41);

        throw $r40;

     label09:
        if z1 == 0 goto label11;

        $z8 = staticinvoke <com.android.internal.content.PackageHelper: boolean checkFitOnVolume(android.os.storage.StorageManager,java.lang.String,android.content.pm.PackageInstaller$SessionParams)>(r1, r56, r0);

        if $z8 == 0 goto label10;

        $r34 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        return $r34;

     label10:
        $r33 = new java.io.IOException;

        specialinvoke $r33.<java.io.IOException: void <init>(java.lang.String)>("Requested internal only, but not enough space");

        throw $r33;

     label11:
        $r32 = new java.io.IOException;

        specialinvoke $r32.<java.io.IOException: void <init>(java.lang.String)>("Not allowed to install non-system apps on internal storage");

        throw $r32;

     label12:
        if r55 == null goto label16;

        $r22 = r55.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid>;

        $r21 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

        $z6 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r22, $r21);

        if $z6 == 0 goto label13;

        goto label14;

     label13:
        r56 = null;

        $r23 = r55.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid>;

        $z7 = virtualinvoke $r6.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>($r23);

        if $z7 == 0 goto label14;

        $r30 = r55.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid>;

        $r31 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>($r30);

        r56 = (java.lang.String) $r31;

     label14:
        $z13 = staticinvoke <com.android.internal.content.PackageHelper: boolean checkFitOnVolume(android.os.storage.StorageManager,java.lang.String,android.content.pm.PackageInstaller$SessionParams)>(r1, r56, r0);

        if $z13 == 0 goto label15;

        $r29 = r55.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid>;

        return $r29;

     label15:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not enough space on existing volume ");

        $r25 = r55.<android.content.pm.ApplicationInfo: java.lang.String volumeUuid>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r26 = r0.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" upgrade");

        $r27 = new java.io.IOException;

        $r28 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r27.<java.io.IOException: void <init>(java.lang.String)>($r28);

        throw $r27;

     label16:
        $i1 = virtualinvoke $r6.<android.util.ArrayMap: int size()>();

        if $i1 != 1 goto label17;

        $r17 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(0);

        $r18 = (java.lang.String) $r17;

        $z5 = staticinvoke <com.android.internal.content.PackageHelper: boolean checkFitOnVolume(android.os.storage.StorageManager,java.lang.String,android.content.pm.PackageInstaller$SessionParams)>(r1, $r18, r0);

        if $z5 == 0 goto label21;

        $r19 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object keyAt(int)>(0);

        $r20 = (java.lang.String) $r19;

        return $r20;

     label17:
        r61 = null;

        l9 = -9223372036854775808L;

        $r8 = virtualinvoke $r6.<android.util.ArrayMap: java.util.Set keySet()>();

        r62 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

     label18:
        $z4 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label20;

        $r12 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r63 = (java.lang.String) $r12;

        $r13 = new java.io.File;

        $r14 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r63);

        $r15 = (java.lang.String) $r14;

        specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>($r15);

        $r16 = virtualinvoke r1.<android.os.storage.StorageManager: java.util.UUID getUuidForPath(java.io.File)>($r13);

        $i4 = r0.<android.content.pm.PackageInstaller$SessionParams: int installFlags>;

        $i5 = staticinvoke <com.android.internal.content.PackageHelper: int translateAllocateFlags(int)>($i4);

        l0 = virtualinvoke r1.<android.os.storage.StorageManager: long getAllocatableBytes(java.util.UUID,int)>($r16, $i5);

        l10 = l9;

        $b6 = l0 cmp l9;

        if $b6 < 0 goto label19;

        l10 = l0;

        r61 = r63;

     label19:
        l9 = l10;

        goto label18;

     label20:
        $l2 = r0.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes>;

        $b3 = l9 cmp $l2;

        if $b3 < 0 goto label21;

        return r61;

     label21:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No special requests, but no room on allowed volumes.  allow3rdPartyOnInternal? ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r10 = new java.io.IOException;

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    public static java.lang.String resolveInstallVolume(android.content.Context, java.lang.String, int, long, com.android.internal.content.PackageHelper$TestableInterface) throws java.io.IOException
    {
        android.content.Context r0;
        java.lang.String r1, $r5;
        int i0;
        long l1;
        com.android.internal.content.PackageHelper$TestableInterface r2;
        android.content.pm.PackageInstaller$SessionParams $r4;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        r2 := @parameter4: com.android.internal.content.PackageHelper$TestableInterface;

        $r4 = new android.content.pm.PackageInstaller$SessionParams;

        specialinvoke $r4.<android.content.pm.PackageInstaller$SessionParams: void <init>(int)>(-1);

        $r4.<android.content.pm.PackageInstaller$SessionParams: java.lang.String appPackageName> = r1;

        $r4.<android.content.pm.PackageInstaller$SessionParams: int installLocation> = i0;

        $r4.<android.content.pm.PackageInstaller$SessionParams: long sizeBytes> = l1;

        $r5 = staticinvoke <com.android.internal.content.PackageHelper: java.lang.String resolveInstallVolume(android.content.Context,android.content.pm.PackageInstaller$SessionParams,com.android.internal.content.PackageHelper$TestableInterface)>(r0, $r4, r2);

        return $r5;
    }

    public static int translateAllocateFlags(int)
    {
        int i0, $i1;

        i0 := @parameter0: int;

        $i1 = 32768 & i0;

        if $i1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }
}
