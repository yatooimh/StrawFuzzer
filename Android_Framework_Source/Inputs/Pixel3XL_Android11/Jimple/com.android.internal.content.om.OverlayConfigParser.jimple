final class com.android.internal.content.om.OverlayConfigParser extends java.lang.Object
{
    private static final java.lang.String CONFIG_DEFAULT_FILENAME;
    private static final java.lang.String CONFIG_DIRECTORY;
    static final boolean DEFAULT_ENABLED_STATE;
    static final boolean DEFAULT_MUTABILITY;
    private static final int MAXIMUM_MERGE_DEPTH;

    void <init>()
    {
        com.android.internal.content.om.OverlayConfigParser r0;

        r0 := @this: com.android.internal.content.om.OverlayConfigParser;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.util.ArrayList getConfigurations(com.android.internal.content.om.OverlayConfigParser$OverlayPartition, com.android.internal.content.om.OverlayScanner)
    {
        com.android.internal.content.om.OverlayScanner r0;
        java.io.File $r2, $r3, $r4, $r7;
        boolean $z0;
        com.android.internal.content.om.OverlayConfigParser$ParsingContext $r5;
        java.util.ArrayList $r6;
        com.android.internal.content.om.OverlayConfigParser$OverlayPartition r8;

        r8 := @parameter0: com.android.internal.content.om.OverlayConfigParser$OverlayPartition;

        r0 := @parameter1: com.android.internal.content.om.OverlayScanner;

        $r2 = virtualinvoke r8.<com.android.internal.content.om.OverlayConfigParser$OverlayPartition: java.io.File getOverlayFolder()>();

        if $r2 != null goto label1;

        return null;

     label1:
        if r0 == null goto label2;

        $r7 = virtualinvoke r8.<com.android.internal.content.om.OverlayConfigParser$OverlayPartition: java.io.File getOverlayFolder()>();

        virtualinvoke r0.<com.android.internal.content.om.OverlayScanner: void scanDir(java.io.File)>($r7);

     label2:
        $r3 = new java.io.File;

        $r4 = virtualinvoke r8.<com.android.internal.content.om.OverlayConfigParser$OverlayPartition: java.io.File getOverlayFolder()>();

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "config/config.xml");

        $z0 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label3;

        return null;

     label3:
        $r5 = new com.android.internal.content.om.OverlayConfigParser$ParsingContext;

        specialinvoke $r5.<com.android.internal.content.om.OverlayConfigParser$ParsingContext: void <init>(com.android.internal.content.om.OverlayConfigParser$OverlayPartition,com.android.internal.content.om.OverlayConfigParser$1)>(r8, null);

        staticinvoke <com.android.internal.content.om.OverlayConfigParser: void readConfigFile(java.io.File,com.android.internal.content.om.OverlayScanner,com.android.internal.content.om.OverlayConfigParser$ParsingContext)>($r3, r0, $r5);

        $r6 = staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: java.util.ArrayList access$100(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>($r5);

        return $r6;
    }

    private static void parseMerge(java.io.File, org.xmlpull.v1.XmlPullParser, com.android.internal.content.om.OverlayScanner, com.android.internal.content.om.OverlayConfigParser$ParsingContext)
    {
        java.io.File r0, $r21, r37, r38, r39, r40;
        org.xmlpull.v1.XmlPullParser r1;
        com.android.internal.content.om.OverlayConfigParser$ParsingContext r2;
        java.lang.String r3, $r8, $r10, $r11, $r14, $r15, $r18, $r19, $r24, $r25, $r28, $r29, $r30, $r34, $r35;
        java.lang.StringBuilder $r4;
        java.lang.IllegalStateException $r7, $r12, $r16, $r22, $r26, $r32;
        java.lang.Object[] $r9, $r13, $r17, $r23, $r27, $r33;
        boolean $z0, $z1, $z2;
        int $i0;
        com.android.internal.content.om.OverlayConfigParser$OverlayPartition $r20;
        java.lang.Throwable $r31;
        com.android.internal.content.om.OverlayScanner r36;

        r0 := @parameter0: java.io.File;

        r1 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r36 := @parameter2: com.android.internal.content.om.OverlayScanner;

        r2 := @parameter3: com.android.internal.content.om.OverlayConfigParser$ParsingContext;

        r3 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "path");

        if r3 == null goto label8;

        $z0 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("/");

        if $z0 != 0 goto label7;

        $i0 = staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: int access$208(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r2);

        if $i0 == 5 goto label6;

     label1:
        r37 = new java.io.File;

        $r20 = staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: com.android.internal.content.om.OverlayConfigParser$OverlayPartition access$300(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r2);

        $r21 = virtualinvoke $r20.<com.android.internal.content.om.OverlayConfigParser$OverlayPartition: java.io.File getOverlayFolder()>();

        specialinvoke r37.<java.io.File: void <init>(java.io.File,java.lang.String)>($r21, "config");

        r38 = virtualinvoke r37.<java.io.File: java.io.File getCanonicalFile()>();

        r39 = new java.io.File;

        specialinvoke r39.<java.io.File: void <init>(java.io.File,java.lang.String)>(r38, r3);

        r40 = virtualinvoke r39.<java.io.File: java.io.File getCanonicalFile()>();

     label2:
        $z1 = virtualinvoke r40.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label4;

        $z2 = staticinvoke <android.os.FileUtils: boolean contains(java.io.File,java.io.File)>(r38, r40);

        if $z2 == 0 goto label3;

        staticinvoke <com.android.internal.content.om.OverlayConfigParser: void readConfigFile(java.io.File,com.android.internal.content.om.OverlayScanner,com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r40, r36, r2);

        staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: int access$210(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r2);

        return;

     label3:
        $r26 = new java.lang.IllegalStateException;

        $r27 = newarray (java.lang.Object)[3];

        $r28 = virtualinvoke r40.<java.io.File: java.lang.String getAbsolutePath()>();

        $r27[0] = $r28;

        $r27[1] = r40;

        $r29 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r27[2] = $r29;

        $r30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Merged file %s outside of configuration directory in %s at %s", $r27);

        specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r30);

        throw $r26;

     label4:
        $r22 = new java.lang.IllegalStateException;

        $r23 = newarray (java.lang.Object)[3];

        $r23[0] = r3;

        $r23[1] = r0;

        $r24 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r23[2] = $r24;

        $r25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Merged configuration file %s does not exist in %s at %s", $r23);

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25);

        throw $r22;

     label5:
        $r31 := @caughtexception;

        $r32 = new java.lang.IllegalStateException;

        $r33 = newarray (java.lang.Object)[3];

        $r33[0] = r3;

        $r33[1] = r0;

        $r34 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r33[2] = $r34;

        $r35 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Couldn\'t find or open merged configuration file %s in %s at %s", $r33);

        specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r35, $r31);

        throw $r32;

     label6:
        $r16 = new java.lang.IllegalStateException;

        $r17 = newarray (java.lang.Object)[2];

        $r17[0] = r0;

        $r18 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r17[1] = $r18;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Maximum <merge> depth exceeded in %s at %s", $r17);

        specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r19);

        throw $r16;

     label7:
        $r12 = new java.lang.IllegalStateException;

        $r13 = newarray (java.lang.Object)[3];

        $r13[0] = r3;

        $r13[1] = r0;

        $r14 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r13[2] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Path %s must be relative to the directory containing overlay configurations  files in %s at %s ", $r13);

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15);

        throw $r12;

     label8:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("<merge> without path in %s at %s");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = new java.lang.IllegalStateException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9 = newarray (java.lang.Object)[1];

        $r10 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r9[0] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r8, $r9);

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label5;
    }

    private static void parseOverlay(java.io.File, org.xmlpull.v1.XmlPullParser, com.android.internal.content.om.OverlayScanner, com.android.internal.content.om.OverlayConfigParser$ParsingContext)
    {
        org.xmlpull.v1.XmlPullParser r0;
        com.android.internal.content.om.OverlayConfigParser$ParsingContext r1;
        java.lang.String r2, $r5, $r6, $r10, $r11, $r15, $r16, $r19, $r20, $r21, $r26, $r27, r33, r34, $r38;
        java.lang.IllegalStateException $r3, $r8, $r17, $r22;
        java.lang.Object[] $r4, $r9, $r18, $r23;
        android.util.ArraySet $r7, $r40;
        boolean $z0, $z4, $z5, $z6, $z7, z8, z9;
        java.lang.StringBuilder $r12;
        com.android.internal.content.om.OverlayConfigParser$OverlayPartition $r24, $r28, $r37;
        java.io.File $r25, $r29, r30;
        com.android.internal.content.om.OverlayScanner r31;
        com.android.internal.content.om.OverlayScanner$ParsedOverlayInfo r32;
        com.android.internal.content.om.OverlayConfigParser$ParsedConfiguration $r36;
        java.util.ArrayList $r41;

        r30 := @parameter0: java.io.File;

        r0 := @parameter1: org.xmlpull.v1.XmlPullParser;

        r31 := @parameter2: com.android.internal.content.om.OverlayScanner;

        r1 := @parameter3: com.android.internal.content.om.OverlayConfigParser$ParsingContext;

        r2 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "package");

        if r2 == null goto label13;

        if r31 == null goto label02;

        r32 = virtualinvoke r31.<com.android.internal.content.om.OverlayScanner: com.android.internal.content.om.OverlayScanner$ParsedOverlayInfo getParsedInfo(java.lang.String)>(r2);

        if r32 == null goto label01;

        $r28 = staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: com.android.internal.content.om.OverlayConfigParser$OverlayPartition access$300(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r1);

        $r29 = r32.<com.android.internal.content.om.OverlayScanner$ParsedOverlayInfo: java.io.File path>;

        $z7 = virtualinvoke $r28.<com.android.internal.content.om.OverlayConfigParser$OverlayPartition: boolean containsOverlay(java.io.File)>($r29);

        if $z7 == 0 goto label01;

        goto label03;

     label01:
        $r22 = new java.lang.IllegalStateException;

        $r23 = newarray (java.lang.Object)[4];

        $r23[0] = r2;

        $r24 = staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: com.android.internal.content.om.OverlayConfigParser$OverlayPartition access$300(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r1);

        $r25 = virtualinvoke $r24.<com.android.internal.content.om.OverlayConfigParser$OverlayPartition: java.io.File getOverlayFolder()>();

        $r23[1] = $r25;

        $r23[2] = r30;

        $r26 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r23[3] = $r26;

        $r27 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("overlay %s not present in partition %s in %s at %s", $r23);

        specialinvoke $r22.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r27);

        throw $r22;

     label02:
        r32 = null;

     label03:
        $r7 = staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: android.util.ArraySet access$400(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r1);

        $z0 = virtualinvoke $r7.<android.util.ArraySet: boolean contains(java.lang.Object)>(r2);

        if $z0 != 0 goto label12;

        r33 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "enabled");

        if r33 == null goto label04;

        $r21 = "false";

        $z6 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r33);

        z8 = $z6 ^ 1;

        goto label05;

     label04:
        z8 = 0;

     label05:
        r34 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "mutable");

        if r34 == null goto label08;

        $r16 = "false";

        $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r34);

        z9 = $z4 ^ 1;

        if z9 != 0 goto label07;

        $z5 = staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: boolean access$500(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r1);

        if $z5 != 0 goto label06;

        goto label07;

     label06:
        $r17 = new java.lang.IllegalStateException;

        $r18 = newarray (java.lang.Object)[2];

        $r18[0] = r30;

        $r19 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r18[1] = $r19;

        $r20 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("immutable overlays must precede mutable overlays: found in %s at %s", $r18);

        specialinvoke $r17.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r20);

        throw $r17;

     label07:
        goto label09;

     label08:
        z9 = 1;

     label09:
        if z9 == 0 goto label10;

        staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: boolean access$502(com.android.internal.content.om.OverlayConfigParser$ParsingContext,boolean)>(r1, 1);

        goto label11;

     label10:
        if z8 != 0 goto label11;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("found default-disabled immutable overlay ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("OverlayConfig", $r15);

     label11:
        $r36 = new com.android.internal.content.om.OverlayConfigParser$ParsedConfiguration;

        $r37 = staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: com.android.internal.content.om.OverlayConfigParser$OverlayPartition access$300(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r1);

        $r38 = $r37.<com.android.internal.content.om.OverlayConfigParser$OverlayPartition: java.lang.String policy>;

        specialinvoke $r36.<com.android.internal.content.om.OverlayConfigParser$ParsedConfiguration: void <init>(java.lang.String,boolean,boolean,java.lang.String,com.android.internal.content.om.OverlayScanner$ParsedOverlayInfo)>(r2, z8, z9, $r38, r32);

        $r40 = staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: android.util.ArraySet access$400(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r1);

        virtualinvoke $r40.<android.util.ArraySet: boolean add(java.lang.Object)>(r2);

        $r41 = staticinvoke <com.android.internal.content.om.OverlayConfigParser$ParsingContext: java.util.ArrayList access$100(com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r1);

        virtualinvoke $r41.<java.util.ArrayList: boolean add(java.lang.Object)>($r36);

        return;

     label12:
        $r8 = new java.lang.IllegalStateException;

        $r9 = newarray (java.lang.Object)[3];

        $r9[0] = r2;

        $r9[1] = r30;

        $r10 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r9[2] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("overlay %s configured multiple times in a single partition in %s at %s", $r9);

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label13:
        $r3 = new java.lang.IllegalStateException;

        $r4 = newarray (java.lang.Object)[2];

        $r4[0] = r30;

        $r5 = interfaceinvoke r0.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r4[1] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("\"<overlay> without package in %s at %s", $r4);

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6);

        throw $r3;
    }

    private static void readConfigFile(java.io.File, com.android.internal.content.om.OverlayScanner, com.android.internal.content.om.OverlayConfigParser$ParsingContext)
    {
        com.android.internal.content.om.OverlayConfigParser$ParsingContext r0;
        org.xmlpull.v1.XmlPullParser r2;
        int i0, i1;
        java.lang.String r3, $r6, $r7, $r14;
        java.io.FileReader $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r5;
        java.lang.Throwable $r8, $r9, $r10;
        java.lang.StringBuilder $r11;
        java.io.File r15;
        com.android.internal.content.om.OverlayScanner r16;
        byte b5;

        r15 := @parameter0: java.io.File;

        r16 := @parameter1: com.android.internal.content.om.OverlayScanner;

        r0 := @parameter2: com.android.internal.content.om.OverlayConfigParser$ParsingContext;

     label01:
        $r4 = new java.io.FileReader;

        specialinvoke $r4.<java.io.FileReader: void <init>(java.io.File)>(r15);

     label02:
        r2 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>($r4);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r2, "config");

        i0 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label03:
        $z0 = staticinvoke <com.android.internal.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r2, i0);

        if $z0 == 0 goto label19;

        r3 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label04:
        b5 = -1;

     label05:
        i1 = virtualinvoke r3.<java.lang.String: int hashCode()>();

     label06:
        if i1 == -1091287984 goto label10;

        if i1 == 103785528 goto label08;

     label07:
        goto label12;

     label08:
        $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("merge");

        if $z2 == 0 goto label07;

     label09:
        b5 = 0;

        goto label12;

     label10:
        $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("overlay");

        if $z1 == 0 goto label07;

     label11:
        b5 = 1;

     label12:
        if b5 == 0 goto label17;

        if b5 == 1 goto label15;

     label13:
        $r5 = newarray (java.lang.Object)[3];

        $r5[0] = r3;

        $r5[1] = r15;

        $r6 = interfaceinvoke r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getPositionDescription()>();

        $r5[2] = $r6;

        $r7 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Tag %s is unknown in %s at %s", $r5);

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("OverlayConfig", $r7);

     label14:
        goto label18;

     label15:
        staticinvoke <com.android.internal.content.om.OverlayConfigParser: void parseOverlay(java.io.File,org.xmlpull.v1.XmlPullParser,com.android.internal.content.om.OverlayScanner,com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r15, r2, r16, r0);

     label16:
        goto label18;

     label17:
        staticinvoke <com.android.internal.content.om.OverlayConfigParser: void parseMerge(java.io.File,org.xmlpull.v1.XmlPullParser,com.android.internal.content.om.OverlayScanner,com.android.internal.content.om.OverlayConfigParser$ParsingContext)>(r15, r2, r16, r0);

     label18:
        goto label03;

     label19:
        goto label23;

     label20:
        $r8 := @caughtexception;

        goto label24;

     label21:
        $r9 := @caughtexception;

     label22:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("OverlayConfig", "Got exception parsing overlay configuration.", $r9);

     label23:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r4);

        return;

     label24:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r4);

        throw $r8;

     label25:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t find or open overlay configuration file ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("OverlayConfig", $r14);

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label21;
        catch java.io.IOException from label02 to label03 with label21;
        catch java.lang.Throwable from label02 to label03 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label03 to label04 with label21;
        catch java.io.IOException from label03 to label04 with label21;
        catch java.lang.Throwable from label03 to label04 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label21;
        catch java.io.IOException from label05 to label06 with label21;
        catch java.lang.Throwable from label05 to label06 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label08 to label09 with label21;
        catch java.io.IOException from label08 to label09 with label21;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label10 to label11 with label21;
        catch java.io.IOException from label10 to label11 with label21;
        catch java.lang.Throwable from label10 to label11 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label13 to label14 with label21;
        catch java.io.IOException from label13 to label14 with label21;
        catch java.lang.Throwable from label13 to label14 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label15 to label16 with label21;
        catch java.io.IOException from label15 to label16 with label21;
        catch java.lang.Throwable from label15 to label16 with label20;
        catch org.xmlpull.v1.XmlPullParserException from label17 to label18 with label21;
        catch java.io.IOException from label17 to label18 with label21;
        catch java.lang.Throwable from label17 to label18 with label20;
        catch java.lang.Throwable from label22 to label23 with label20;
    }

    public static void <clinit>()
    {
        <com.android.internal.content.om.OverlayConfigParser: int MAXIMUM_MERGE_DEPTH> = 5;

        <com.android.internal.content.om.OverlayConfigParser: boolean DEFAULT_MUTABILITY> = 1;

        <com.android.internal.content.om.OverlayConfigParser: boolean DEFAULT_ENABLED_STATE> = 0;

        <com.android.internal.content.om.OverlayConfigParser: java.lang.String CONFIG_DIRECTORY> = "config";

        <com.android.internal.content.om.OverlayConfigParser: java.lang.String CONFIG_DEFAULT_FILENAME> = "config/config.xml";

        return;
    }
}
