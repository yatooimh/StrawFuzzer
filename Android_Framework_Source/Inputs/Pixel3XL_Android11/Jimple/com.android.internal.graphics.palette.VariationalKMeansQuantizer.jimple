public class com.android.internal.graphics.palette.VariationalKMeansQuantizer extends java.lang.Object implements com.android.internal.graphics.palette.Quantizer
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final int mInitializations;
    private final com.android.internal.ml.clustering.KMeans mKMeans;
    private final float mMinClusterSqDistance;
    private java.util.List mQuantizedColors;

    public void <init>()
    {
        com.android.internal.graphics.palette.VariationalKMeansQuantizer r0;

        r0 := @this: com.android.internal.graphics.palette.VariationalKMeansQuantizer;

        specialinvoke r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: void <init>(float)>(0.25F);

        return;
    }

    public void <init>(float)
    {
        com.android.internal.graphics.palette.VariationalKMeansQuantizer r0;
        float f0;

        r0 := @this: com.android.internal.graphics.palette.VariationalKMeansQuantizer;

        f0 := @parameter0: float;

        specialinvoke r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: void <init>(float,int)>(f0, 1);

        return;
    }

    public void <init>(float, int)
    {
        com.android.internal.graphics.palette.VariationalKMeansQuantizer r0;
        float f0, $f1;
        int i0;
        com.android.internal.ml.clustering.KMeans $r1;
        java.util.Random $r2;

        r0 := @this: com.android.internal.graphics.palette.VariationalKMeansQuantizer;

        f0 := @parameter0: float;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.android.internal.ml.clustering.KMeans;

        $r2 = new java.util.Random;

        specialinvoke $r2.<java.util.Random: void <init>(long)>(0L);

        specialinvoke $r1.<com.android.internal.ml.clustering.KMeans: void <init>(java.util.Random,int,float)>($r2, 30, 0.0F);

        r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: com.android.internal.ml.clustering.KMeans mKMeans> = $r1;

        $f1 = f0 * f0;

        r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: float mMinClusterSqDistance> = $f1;

        r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: int mInitializations> = i0;

        return;
    }

    private java.util.List getOptimalKMeans(int, float[][])
    {
        com.android.internal.graphics.palette.VariationalKMeansQuantizer r0;
        int i0, i2;
        float[][] r1;
        java.util.List r2, r4;
        double d0, d1, d2;
        com.android.internal.ml.clustering.KMeans $r3;
        byte $b1;

        r0 := @this: com.android.internal.graphics.palette.VariationalKMeansQuantizer;

        i0 := @parameter0: int;

        r1 := @parameter1: float[][];

        r4 = null;

        d1 = -1.7976931348623157E308;

        i2 = r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: int mInitializations>;

     label1:
        if i2 <= 0 goto label4;

        $r3 = r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: com.android.internal.ml.clustering.KMeans mKMeans>;

        r2 = virtualinvoke $r3.<com.android.internal.ml.clustering.KMeans: java.util.List predict(int,float[][])>(i0, r1);

        d0 = staticinvoke <com.android.internal.ml.clustering.KMeans: double score(java.util.List)>(r2);

        if r4 == null goto label2;

        d2 = d1;

        $b1 = d0 cmpl d1;

        if $b1 <= 0 goto label3;

     label2:
        d2 = d0;

        r4 = r2;

     label3:
        i2 = i2 + -1;

        d1 = d2;

        goto label1;

     label4:
        return r4;
    }

    public java.util.List getQuantizedColors()
    {
        com.android.internal.graphics.palette.VariationalKMeansQuantizer r0;
        java.util.List $r1;

        r0 := @this: com.android.internal.graphics.palette.VariationalKMeansQuantizer;

        $r1 = r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: java.util.List mQuantizedColors>;

        return $r1;
    }

    public void quantize(int[], int, com.android.internal.graphics.palette.Palette$Filter[])
    {
        com.android.internal.graphics.palette.VariationalKMeansQuantizer r0;
        com.android.internal.ml.clustering.KMeans$Mean r1, r22, r25;
        float[] r2, $r8, $r13, $r14, $r15, r18, r23, r26;
        float f0, f1, f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14;
        int $i0, $i1, $i2, $i3, $i4, $i6, $i7, i8, i9, i10, i11, i12, i13;
        java.util.ArrayList $r3;
        java.lang.Object $r4, $r9, $r10;
        java.util.List $r5, $r6, $r11, $r12, r20, r27;
        com.android.internal.graphics.palette.Palette$Swatch $r7;
        byte $b5;
        double $d0, $d1, $d2, $d3;
        int[] r16;
        com.android.internal.graphics.palette.Palette$Filter[] r17;
        float[][] r19;
        java.util.Iterator r24;
        boolean $z3;

        r0 := @this: com.android.internal.graphics.palette.VariationalKMeansQuantizer;

        r16 := @parameter0: int[];

        i8 := @parameter1: int;

        r17 := @parameter2: com.android.internal.graphics.palette.Palette$Filter[];

        r18 = newarray (float)[3];

        r18[0] = 0.0F;

        r18[1] = 0.0F;

        r18[2] = 0.0F;

        $i0 = lengthof r16;

        r19 = newmultiarray (float)[$i0][3];

        i9 = 0;

     label01:
        $i1 = lengthof r16;

        if i9 >= $i1 goto label02;

        $i7 = r16[i9];

        staticinvoke <com.android.internal.graphics.ColorUtils: void colorToHSL(int,float[])>($i7, r18);

        $r13 = r19[i9];

        $f11 = r18[0];

        $f12 = $f11 / 360.0F;

        $r13[0] = $f12;

        $r14 = r19[i9];

        $f13 = r18[1];

        $r14[1] = $f13;

        $r15 = r19[i9];

        $f14 = r18[2];

        $r15[2] = $f14;

        i9 = i9 + 1;

        goto label01;

     label02:
        r20 = specialinvoke r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: java.util.List getOptimalKMeans(int,float[][])>(i8, r19);

        i10 = 0;

     label03:
        $i2 = interfaceinvoke r20.<java.util.List: int size()>();

        if i10 >= $i2 goto label09;

        $r9 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(i10);

        r22 = (com.android.internal.ml.clustering.KMeans$Mean) $r9;

        r23 = virtualinvoke r22.<com.android.internal.ml.clustering.KMeans$Mean: float[] getCentroid()>();

        i11 = i10 + 1;

     label04:
        $i4 = interfaceinvoke r20.<java.util.List: int size()>();

        if i11 >= $i4 goto label08;

        $r10 = interfaceinvoke r20.<java.util.List: java.lang.Object get(int)>(i11);

        r1 = (com.android.internal.ml.clustering.KMeans$Mean) $r10;

        r2 = virtualinvoke r1.<com.android.internal.ml.clustering.KMeans$Mean: float[] getCentroid()>();

        $f4 = staticinvoke <com.android.internal.ml.clustering.KMeans: float sqDistance(float[],float[])>(r23, r2);

        $f5 = r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: float mMinClusterSqDistance>;

        $b5 = $f4 cmpg $f5;

        if $b5 >= 0 goto label07;

        interfaceinvoke r20.<java.util.List: boolean remove(java.lang.Object)>(r1);

        $r11 = virtualinvoke r22.<com.android.internal.ml.clustering.KMeans$Mean: java.util.List getItems()>();

        $r12 = virtualinvoke r1.<com.android.internal.ml.clustering.KMeans$Mean: java.util.List getItems()>();

        interfaceinvoke $r11.<java.util.List: boolean addAll(java.util.Collection)>($r12);

        i12 = 0;

     label05:
        $i6 = lengthof r23;

        if i12 >= $i6 goto label06;

        $f6 = r23[i12];

        $d2 = (double) $f6;

        $f8 = r2[i12];

        $f7 = r23[i12];

        $f9 = $f8 - $f7;

        $d0 = (double) $f9;

        $d1 = $d0 / 2.0;

        $d3 = $d2 + $d1;

        $f10 = (float) $d3;

        r23[i12] = $f10;

        i12 = i12 + 1;

        goto label05;

     label06:
        i11 = i11 + -1;

        goto label07;

     label07:
        i11 = i11 + 1;

        goto label04;

     label08:
        i10 = i10 + 1;

        goto label03;

     label09:
        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: java.util.List mQuantizedColors> = $r3;

        r24 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z3 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label12;

        $r4 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>();

        r25 = (com.android.internal.ml.clustering.KMeans$Mean) $r4;

        $r5 = virtualinvoke r25.<com.android.internal.ml.clustering.KMeans$Mean: java.util.List getItems()>();

        $i3 = interfaceinvoke $r5.<java.util.List: int size()>();

        if $i3 != 0 goto label11;

        goto label10;

     label11:
        r26 = virtualinvoke r25.<com.android.internal.ml.clustering.KMeans$Mean: float[] getCentroid()>();

        r27 = r0.<com.android.internal.graphics.palette.VariationalKMeansQuantizer: java.util.List mQuantizedColors>;

        f0 = r26[0];

        f1 = r26[1];

        f2 = r26[2];

        $r6 = virtualinvoke r25.<com.android.internal.ml.clustering.KMeans$Mean: java.util.List getItems()>();

        i13 = interfaceinvoke $r6.<java.util.List: int size()>();

        $r7 = new com.android.internal.graphics.palette.Palette$Swatch;

        $r8 = newarray (float)[3];

        $f3 = f0 * 360.0F;

        $r8[0] = $f3;

        $r8[1] = f1;

        $r8[2] = f2;

        specialinvoke $r7.<com.android.internal.graphics.palette.Palette$Swatch: void <init>(float[],int)>($r8, i13);

        interfaceinvoke r27.<java.util.List: boolean add(java.lang.Object)>($r7);

        goto label10;

     label12:
        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.graphics.palette.VariationalKMeansQuantizer: java.lang.String TAG> = "KMeansQuantizer";

        <com.android.internal.graphics.palette.VariationalKMeansQuantizer: boolean DEBUG> = 0;

        return;
    }
}
