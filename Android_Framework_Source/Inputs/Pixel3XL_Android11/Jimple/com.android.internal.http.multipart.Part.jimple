public abstract class com.android.internal.http.multipart.Part extends java.lang.Object
{
    protected static final java.lang.String BOUNDARY;
    protected static final byte[] BOUNDARY_BYTES;
    protected static final java.lang.String CHARSET;
    protected static final byte[] CHARSET_BYTES;
    protected static final java.lang.String CONTENT_DISPOSITION;
    protected static final byte[] CONTENT_DISPOSITION_BYTES;
    protected static final java.lang.String CONTENT_TRANSFER_ENCODING;
    protected static final byte[] CONTENT_TRANSFER_ENCODING_BYTES;
    protected static final java.lang.String CONTENT_TYPE;
    protected static final byte[] CONTENT_TYPE_BYTES;
    protected static final java.lang.String CRLF;
    protected static final byte[] CRLF_BYTES;
    private static final byte[] DEFAULT_BOUNDARY_BYTES;
    protected static final java.lang.String EXTRA;
    protected static final byte[] EXTRA_BYTES;
    private static final org.apache.commons.logging.Log LOG;
    protected static final java.lang.String QUOTE;
    protected static final byte[] QUOTE_BYTES;
    private byte[] boundaryBytes;

    static void <clinit>()
    {
        byte[] r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        org.apache.commons.logging.Log $r1;

        <com.android.internal.http.multipart.Part: java.lang.String QUOTE> = "\"";

        <com.android.internal.http.multipart.Part: java.lang.String EXTRA> = "--";

        <com.android.internal.http.multipart.Part: java.lang.String CRLF> = "\r\n";

        <com.android.internal.http.multipart.Part: java.lang.String CONTENT_TYPE> = "Content-Type: ";

        <com.android.internal.http.multipart.Part: java.lang.String CONTENT_TRANSFER_ENCODING> = "Content-Transfer-Encoding: ";

        <com.android.internal.http.multipart.Part: java.lang.String CONTENT_DISPOSITION> = "Content-Disposition: form-data; name=";

        <com.android.internal.http.multipart.Part: java.lang.String CHARSET> = "; charset=";

        <com.android.internal.http.multipart.Part: java.lang.String BOUNDARY> = "----------------314159265358979323846";

        $r1 = staticinvoke <org.apache.commons.logging.LogFactory: org.apache.commons.logging.Log getLog(java.lang.Class)>(class "Lcom/android/internal/http/multipart/Part;");

        <com.android.internal.http.multipart.Part: org.apache.commons.logging.Log LOG> = $r1;

        r0 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>("----------------314159265358979323846");

        <com.android.internal.http.multipart.Part: byte[] BOUNDARY_BYTES> = r0;

        <com.android.internal.http.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES> = r0;

        $r2 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>("\r\n");

        <com.android.internal.http.multipart.Part: byte[] CRLF_BYTES> = $r2;

        $r3 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>("\"");

        <com.android.internal.http.multipart.Part: byte[] QUOTE_BYTES> = $r3;

        $r4 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>("--");

        <com.android.internal.http.multipart.Part: byte[] EXTRA_BYTES> = $r4;

        $r5 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>("Content-Disposition: form-data; name=");

        <com.android.internal.http.multipart.Part: byte[] CONTENT_DISPOSITION_BYTES> = $r5;

        $r6 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>("Content-Type: ");

        <com.android.internal.http.multipart.Part: byte[] CONTENT_TYPE_BYTES> = $r6;

        $r7 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>("; charset=");

        <com.android.internal.http.multipart.Part: byte[] CHARSET_BYTES> = $r7;

        $r8 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>("Content-Transfer-Encoding: ");

        <com.android.internal.http.multipart.Part: byte[] CONTENT_TRANSFER_ENCODING_BYTES> = $r8;

        return;
    }

    public void <init>()
    {
        com.android.internal.http.multipart.Part r0;

        r0 := @this: com.android.internal.http.multipart.Part;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String getBoundary()
    {
        return "----------------314159265358979323846";
    }

    public static long getLengthOfParts(com.android.internal.http.multipart.Part[]) throws java.io.IOException
    {
        com.android.internal.http.multipart.Part[] r0;
        byte[] $r1;
        long $l0;

        r0 := @parameter0: com.android.internal.http.multipart.Part[];

        $r1 = <com.android.internal.http.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES>;

        $l0 = staticinvoke <com.android.internal.http.multipart.Part: long getLengthOfParts(com.android.internal.http.multipart.Part[],byte[])>(r0, $r1);

        return $l0;
    }

    public static long getLengthOfParts(com.android.internal.http.multipart.Part[], byte[]) throws java.io.IOException
    {
        byte[] r0, $r3, r7;
        long l0, $l3, $l5, $l6, $l8, $l9, $l11, $l12, $l13, l15;
        org.apache.commons.logging.Log $r1;
        java.lang.IllegalArgumentException $r2;
        int $i1, $i2, $i4, $i7, $i10, i16;
        com.android.internal.http.multipart.Part $r4, $r5;
        byte $b14;
        com.android.internal.http.multipart.Part[] r6;

        r6 := @parameter0: com.android.internal.http.multipart.Part[];

        r0 := @parameter1: byte[];

        $r1 = <com.android.internal.http.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r1.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("getLengthOfParts(Parts[])");

        if r6 == null goto label4;

        l15 = 0L;

        i16 = 0;

     label1:
        $i1 = lengthof r6;

        if i16 >= $i1 goto label3;

        $r4 = r6[i16];

        virtualinvoke $r4.<com.android.internal.http.multipart.Part: void setPartBoundary(byte[])>(r0);

        $r5 = r6[i16];

        l0 = virtualinvoke $r5.<com.android.internal.http.multipart.Part: long length()>();

        $b14 = l0 cmp 0L;

        if $b14 >= 0 goto label2;

        return -1L;

     label2:
        l15 = l15 + l0;

        i16 = i16 + 1;

        goto label1;

     label3:
        r7 = <com.android.internal.http.multipart.Part: byte[] EXTRA_BYTES>;

        $i2 = lengthof r7;

        $l3 = (long) $i2;

        $l6 = l15 + $l3;

        $i4 = lengthof r0;

        $l5 = (long) $i4;

        $l9 = $l6 + $l5;

        $i7 = lengthof r7;

        $l8 = (long) $i7;

        $l12 = $l9 + $l8;

        $r3 = <com.android.internal.http.multipart.Part: byte[] CRLF_BYTES>;

        $i10 = lengthof $r3;

        $l11 = (long) $i10;

        $l13 = $l12 + $l11;

        return $l13;

     label4:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parts may not be null");

        throw $r2;
    }

    public static void sendParts(java.io.OutputStream, com.android.internal.http.multipart.Part[]) throws java.io.IOException
    {
        java.io.OutputStream r0;
        com.android.internal.http.multipart.Part[] r1;
        byte[] $r2;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.android.internal.http.multipart.Part[];

        $r2 = <com.android.internal.http.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES>;

        staticinvoke <com.android.internal.http.multipart.Part: void sendParts(java.io.OutputStream,com.android.internal.http.multipart.Part[],byte[])>(r0, r1, $r2);

        return;
    }

    public static void sendParts(java.io.OutputStream, com.android.internal.http.multipart.Part[], byte[]) throws java.io.IOException
    {
        java.io.OutputStream r0;
        com.android.internal.http.multipart.Part[] r1;
        byte[] r2, $r5, $r6, $r7;
        java.lang.IllegalArgumentException $r3, $r4;
        int $i0, $i1, i2;
        com.android.internal.http.multipart.Part $r8, $r9;

        r0 := @parameter0: java.io.OutputStream;

        r1 := @parameter1: com.android.internal.http.multipart.Part[];

        r2 := @parameter2: byte[];

        if r1 == null goto label4;

        if r2 == null goto label3;

        $i0 = lengthof r2;

        if $i0 == 0 goto label3;

        i2 = 0;

     label1:
        $i1 = lengthof r1;

        if i2 >= $i1 goto label2;

        $r8 = r1[i2];

        virtualinvoke $r8.<com.android.internal.http.multipart.Part: void setPartBoundary(byte[])>(r2);

        $r9 = r1[i2];

        virtualinvoke $r9.<com.android.internal.http.multipart.Part: void send(java.io.OutputStream)>(r0);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r5 = <com.android.internal.http.multipart.Part: byte[] EXTRA_BYTES>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r5);

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>(r2);

        $r6 = <com.android.internal.http.multipart.Part: byte[] EXTRA_BYTES>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r6);

        $r7 = <com.android.internal.http.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r0.<java.io.OutputStream: void write(byte[])>($r7);

        return;

     label3:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("partBoundary may not be empty");

        throw $r4;

     label4:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Parts may not be null");

        throw $r3;
    }

    public abstract java.lang.String getCharSet();

    public abstract java.lang.String getContentType();

    public abstract java.lang.String getName();

    protected byte[] getPartBoundary()
    {
        com.android.internal.http.multipart.Part r0;
        byte[] r1, $r2;

        r0 := @this: com.android.internal.http.multipart.Part;

        r1 = r0.<com.android.internal.http.multipart.Part: byte[] boundaryBytes>;

        if r1 != null goto label1;

        $r2 = <com.android.internal.http.multipart.Part: byte[] DEFAULT_BOUNDARY_BYTES>;

        return $r2;

     label1:
        return r1;
    }

    public abstract java.lang.String getTransferEncoding();

    public boolean isRepeatable()
    {
        com.android.internal.http.multipart.Part r0;

        r0 := @this: com.android.internal.http.multipart.Part;

        return 1;
    }

    public long length() throws java.io.IOException
    {
        com.android.internal.http.multipart.Part r0;
        org.apache.commons.logging.Log $r2;
        long $l0, $l3, $l4, $l5;
        byte $b1;
        java.io.ByteArrayOutputStream $r3;
        int $i2;

        r0 := @this: com.android.internal.http.multipart.Part;

        $r2 = <com.android.internal.http.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter length()");

        $l0 = virtualinvoke r0.<com.android.internal.http.multipart.Part: long lengthOfData()>();

        $b1 = $l0 cmp 0L;

        if $b1 >= 0 goto label1;

        return -1L;

     label1:
        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendStart(java.io.OutputStream)>($r3);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>($r3);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>($r3);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>($r3);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>($r3);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendEnd(java.io.OutputStream)>($r3);

        $i2 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: int size()>();

        $l3 = (long) $i2;

        $l4 = virtualinvoke r0.<com.android.internal.http.multipart.Part: long lengthOfData()>();

        $l5 = $l3 + $l4;

        return $l5;
    }

    protected abstract long lengthOfData() throws java.io.IOException;

    public void send(java.io.OutputStream) throws java.io.IOException
    {
        com.android.internal.http.multipart.Part r0;
        java.io.OutputStream r1;
        org.apache.commons.logging.Log $r2;

        r0 := @this: com.android.internal.http.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = <com.android.internal.http.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter send(OutputStream out)");

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendStart(java.io.OutputStream)>(r1);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendDispositionHeader(java.io.OutputStream)>(r1);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendContentTypeHeader(java.io.OutputStream)>(r1);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendTransferEncodingHeader(java.io.OutputStream)>(r1);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendEndOfHeader(java.io.OutputStream)>(r1);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendData(java.io.OutputStream)>(r1);

        virtualinvoke r0.<com.android.internal.http.multipart.Part: void sendEnd(java.io.OutputStream)>(r1);

        return;
    }

    protected void sendContentTypeHeader(java.io.OutputStream) throws java.io.IOException
    {
        com.android.internal.http.multipart.Part r0;
        java.io.OutputStream r1;
        org.apache.commons.logging.Log $r2;
        byte[] $r3, $r4, $r5, $r6, $r7;
        java.lang.String r8, r9;

        r0 := @this: com.android.internal.http.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = <com.android.internal.http.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendContentTypeHeader(OutputStream out)");

        r8 = virtualinvoke r0.<com.android.internal.http.multipart.Part: java.lang.String getContentType()>();

        if r8 == null goto label1;

        $r3 = <com.android.internal.http.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

        $r4 = <com.android.internal.http.multipart.Part: byte[] CONTENT_TYPE_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r5 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>(r8);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r5);

        r9 = virtualinvoke r0.<com.android.internal.http.multipart.Part: java.lang.String getCharSet()>();

        if r9 == null goto label1;

        $r6 = <com.android.internal.http.multipart.Part: byte[] CHARSET_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r6);

        $r7 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>(r9);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r7);

     label1:
        return;
    }

    protected abstract void sendData(java.io.OutputStream) throws java.io.IOException;

    protected void sendDispositionHeader(java.io.OutputStream) throws java.io.IOException
    {
        com.android.internal.http.multipart.Part r0;
        java.io.OutputStream r1;
        org.apache.commons.logging.Log $r2;
        byte[] $r3, $r4, $r6, $r7;
        java.lang.String $r5;

        r0 := @this: com.android.internal.http.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = <com.android.internal.http.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendDispositionHeader(OutputStream out)");

        $r3 = <com.android.internal.http.multipart.Part: byte[] CONTENT_DISPOSITION_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

        $r4 = <com.android.internal.http.multipart.Part: byte[] QUOTE_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r5 = virtualinvoke r0.<com.android.internal.http.multipart.Part: java.lang.String getName()>();

        $r6 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>($r5);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r6);

        $r7 = <com.android.internal.http.multipart.Part: byte[] QUOTE_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r7);

        return;
    }

    protected void sendEnd(java.io.OutputStream) throws java.io.IOException
    {
        com.android.internal.http.multipart.Part r0;
        java.io.OutputStream r1;
        org.apache.commons.logging.Log $r2;
        byte[] $r3;

        r0 := @this: com.android.internal.http.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = <com.android.internal.http.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendEnd(OutputStream out)");

        $r3 = <com.android.internal.http.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

        return;
    }

    protected void sendEndOfHeader(java.io.OutputStream) throws java.io.IOException
    {
        com.android.internal.http.multipart.Part r0;
        java.io.OutputStream r1;
        org.apache.commons.logging.Log $r2;
        byte[] $r3, $r4;

        r0 := @this: com.android.internal.http.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = <com.android.internal.http.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendEndOfHeader(OutputStream out)");

        $r3 = <com.android.internal.http.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

        $r4 = <com.android.internal.http.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r4);

        return;
    }

    protected void sendStart(java.io.OutputStream) throws java.io.IOException
    {
        com.android.internal.http.multipart.Part r0;
        java.io.OutputStream r1;
        org.apache.commons.logging.Log $r2;
        byte[] $r3, $r4, $r5;

        r0 := @this: com.android.internal.http.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r2 = <com.android.internal.http.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r2.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendStart(OutputStream out)");

        $r3 = <com.android.internal.http.multipart.Part: byte[] EXTRA_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3);

        $r4 = virtualinvoke r0.<com.android.internal.http.multipart.Part: byte[] getPartBoundary()>();

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r5 = <com.android.internal.http.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r5);

        return;
    }

    protected void sendTransferEncodingHeader(java.io.OutputStream) throws java.io.IOException
    {
        com.android.internal.http.multipart.Part r0;
        java.io.OutputStream r1;
        java.lang.String r2;
        org.apache.commons.logging.Log $r3;
        byte[] $r4, $r5, $r6;

        r0 := @this: com.android.internal.http.multipart.Part;

        r1 := @parameter0: java.io.OutputStream;

        $r3 = <com.android.internal.http.multipart.Part: org.apache.commons.logging.Log LOG>;

        interfaceinvoke $r3.<org.apache.commons.logging.Log: void trace(java.lang.Object)>("enter sendTransferEncodingHeader(OutputStream out)");

        r2 = virtualinvoke r0.<com.android.internal.http.multipart.Part: java.lang.String getTransferEncoding()>();

        if r2 == null goto label1;

        $r4 = <com.android.internal.http.multipart.Part: byte[] CRLF_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r4);

        $r5 = <com.android.internal.http.multipart.Part: byte[] CONTENT_TRANSFER_ENCODING_BYTES>;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r5);

        $r6 = staticinvoke <org.apache.http.util.EncodingUtils: byte[] getAsciiBytes(java.lang.String)>(r2);

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r6);

     label1:
        return;
    }

    void setPartBoundary(byte[])
    {
        com.android.internal.http.multipart.Part r0;
        byte[] r1;

        r0 := @this: com.android.internal.http.multipart.Part;

        r1 := @parameter0: byte[];

        r0.<com.android.internal.http.multipart.Part: byte[] boundaryBytes> = r1;

        return;
    }

    public java.lang.String toString()
    {
        com.android.internal.http.multipart.Part r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.http.multipart.Part;

        $r1 = virtualinvoke r0.<com.android.internal.http.multipart.Part: java.lang.String getName()>();

        return $r1;
    }
}
