public abstract class com.android.internal.infra.AbstractRemoteService$PendingRequest extends com.android.internal.infra.AbstractRemoteService$BasePendingRequest
{
    private final android.os.Handler mServiceHandler;
    private final java.lang.Runnable mTimeoutTrigger;

    protected void <init>(com.android.internal.infra.AbstractRemoteService)
    {
        com.android.internal.infra.AbstractRemoteService$PendingRequest r0;
        com.android.internal.infra.AbstractRemoteService r1;
        android.os.Handler $r3, $r5;
        com.android.internal.infra._$$Lambda$AbstractRemoteService$PendingRequest$IBoaBGXZQEXJr69u3aJF_LCJ42Y $r4;
        long $l0, $l1, $l2;

        r0 := @this: com.android.internal.infra.AbstractRemoteService$PendingRequest;

        r1 := @parameter0: com.android.internal.infra.AbstractRemoteService;

        specialinvoke r0.<com.android.internal.infra.AbstractRemoteService$BasePendingRequest: void <init>(com.android.internal.infra.AbstractRemoteService)>(r1);

        $r3 = r1.<com.android.internal.infra.AbstractRemoteService: android.os.Handler mHandler>;

        r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: android.os.Handler mServiceHandler> = $r3;

        $r4 = new com.android.internal.infra._$$Lambda$AbstractRemoteService$PendingRequest$IBoaBGXZQEXJr69u3aJF_LCJ42Y;

        specialinvoke $r4.<com.android.internal.infra._$$Lambda$AbstractRemoteService$PendingRequest$IBoaBGXZQEXJr69u3aJF_LCJ42Y: void <init>(com.android.internal.infra.AbstractRemoteService$PendingRequest,com.android.internal.infra.AbstractRemoteService)>(r0, r1);

        r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: java.lang.Runnable mTimeoutTrigger> = $r4;

        $r5 = r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: android.os.Handler mServiceHandler>;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l1 = virtualinvoke r1.<com.android.internal.infra.AbstractRemoteService: long getRemoteRequestMillis()>();

        $l2 = $l0 + $l1;

        virtualinvoke $r5.<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>($r4, $l2);

        return;
    }

    public void lambda$new$0$AbstractRemoteService$PendingRequest(com.android.internal.infra.AbstractRemoteService)
    {
        com.android.internal.infra.AbstractRemoteService$PendingRequest r0;
        com.android.internal.infra.AbstractRemoteService r1, r12;
        boolean $z0;
        java.lang.ref.WeakReference $r3;
        java.lang.Object $r4, r13;
        java.lang.String $r5, $r10, r14;
        java.lang.StringBuilder $r6;
        long $l1;
        java.lang.Throwable $r11;

        r0 := @this: com.android.internal.infra.AbstractRemoteService$PendingRequest;

        r12 := @parameter0: com.android.internal.infra.AbstractRemoteService;

        r13 = r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: java.lang.Object mLock>;

        entermonitor r13;

     label1:
        $z0 = r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: boolean mCancelled>;

        if $z0 == 0 goto label3;

        exitmonitor r13;

     label2:
        return;

     label3:
        r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: boolean mCompleted> = 1;

        exitmonitor r13;

     label4:
        $r3 = r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: java.lang.ref.WeakReference mWeakService>;

        $r4 = virtualinvoke $r3.<java.lang.ref.WeakReference: java.lang.Object get()>();

        r1 = (com.android.internal.infra.AbstractRemoteService) $r4;

        if r1 == null goto label5;

        r14 = r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: java.lang.String mTag>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("timed out after ");

        $l1 = virtualinvoke r12.<com.android.internal.infra.AbstractRemoteService: long getRemoteRequestMillis()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ms");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r14, $r10);

        virtualinvoke r1.<com.android.internal.infra.AbstractRemoteService: void finishRequest(com.android.internal.infra.AbstractRemoteService$BasePendingRequest)>(r0);

        virtualinvoke r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: void onTimeout(com.android.internal.infra.AbstractRemoteService)>(r1);

        goto label6;

     label5:
        $r5 = r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: java.lang.String mTag>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r5, "timed out (no service)");

     label6:
        return;

     label7:
        $r11 := @caughtexception;

     label8:
        exitmonitor r13;

     label9:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    final void onCancel()
    {
        com.android.internal.infra.AbstractRemoteService$PendingRequest r0;
        java.lang.Runnable $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.infra.AbstractRemoteService$PendingRequest;

        $r2 = r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: android.os.Handler mServiceHandler>;

        $r1 = r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: java.lang.Runnable mTimeoutTrigger>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        return;
    }

    final void onFinished()
    {
        com.android.internal.infra.AbstractRemoteService$PendingRequest r0;
        java.lang.Runnable $r1;
        android.os.Handler $r2;

        r0 := @this: com.android.internal.infra.AbstractRemoteService$PendingRequest;

        $r2 = r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: android.os.Handler mServiceHandler>;

        $r1 = r0.<com.android.internal.infra.AbstractRemoteService$PendingRequest: java.lang.Runnable mTimeoutTrigger>;

        virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r1);

        return;
    }

    protected abstract void onTimeout(com.android.internal.infra.AbstractRemoteService);
}
