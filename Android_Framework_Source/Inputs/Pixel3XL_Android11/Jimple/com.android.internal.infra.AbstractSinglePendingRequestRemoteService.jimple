public abstract class com.android.internal.infra.AbstractSinglePendingRequestRemoteService extends com.android.internal.infra.AbstractRemoteService
{
    protected com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest;

    public void <init>(android.content.Context, java.lang.String, android.content.ComponentName, int, com.android.internal.infra.AbstractRemoteService$VultureCallback, android.os.Handler, int, boolean)
    {
        com.android.internal.infra.AbstractSinglePendingRequestRemoteService r0;
        android.content.Context r1;
        java.lang.String r2;
        android.content.ComponentName r3;
        int i0, i1;
        com.android.internal.infra.AbstractRemoteService$VultureCallback r4;
        android.os.Handler r5;
        boolean z0;

        r0 := @this: com.android.internal.infra.AbstractSinglePendingRequestRemoteService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.content.ComponentName;

        i0 := @parameter3: int;

        r4 := @parameter4: com.android.internal.infra.AbstractRemoteService$VultureCallback;

        r5 := @parameter5: android.os.Handler;

        i1 := @parameter6: int;

        z0 := @parameter7: boolean;

        specialinvoke r0.<com.android.internal.infra.AbstractRemoteService: void <init>(android.content.Context,java.lang.String,android.content.ComponentName,int,com.android.internal.infra.AbstractRemoteService$VultureCallback,android.os.Handler,int,boolean)>(r1, r2, r3, i0, r4, r5, i1, z0);

        return;
    }

    public void dump(java.lang.String, java.io.PrintWriter)
    {
        com.android.internal.infra.AbstractSinglePendingRequestRemoteService r0;
        java.io.PrintWriter r1, $r2, $r5, r7;
        com.android.internal.infra.AbstractRemoteService$BasePendingRequest $r3;
        java.lang.String $r4, r6;
        boolean z0;

        r0 := @this: com.android.internal.infra.AbstractSinglePendingRequestRemoteService;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.io.PrintWriter;

        specialinvoke r0.<com.android.internal.infra.AbstractRemoteService: void dump(java.lang.String,java.io.PrintWriter)>(r6, r1);

        $r2 = virtualinvoke r1.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>(r6);

        r7 = virtualinvoke $r2.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>("hasPendingRequest=");

        $r3 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest>;

        if $r3 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>(z0);

        $r5 = virtualinvoke r7.<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)>($r4);

        virtualinvoke $r5.<java.io.PrintWriter: void println()>();

        return;
    }

    void handleBindFailure()
    {
        com.android.internal.infra.AbstractSinglePendingRequestRemoteService r0;
        java.lang.String r1, $r9;
        com.android.internal.infra.AbstractRemoteService$BasePendingRequest $r3, $r4, $r7;
        boolean $z0;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.internal.infra.AbstractSinglePendingRequestRemoteService;

        $r3 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest>;

        if $r3 == null goto label2;

        $z0 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: boolean mVerbose>;

        if $z0 == 0 goto label1;

        r1 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: java.lang.String mTag>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending failure to ");

        $r7 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>(r1, $r9);

     label1:
        $r4 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest>;

        virtualinvoke $r4.<com.android.internal.infra.AbstractRemoteService$BasePendingRequest: void onFailed()>();

        r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest> = null;

     label2:
        return;
    }

    protected void handleOnDestroy()
    {
        com.android.internal.infra.AbstractSinglePendingRequestRemoteService r0;
        com.android.internal.infra.AbstractRemoteService$BasePendingRequest r1;

        r0 := @this: com.android.internal.infra.AbstractSinglePendingRequestRemoteService;

        r1 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.infra.AbstractRemoteService$BasePendingRequest: boolean cancel()>();

        r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest> = null;

     label1:
        return;
    }

    void handlePendingRequestWhileUnBound(com.android.internal.infra.AbstractRemoteService$BasePendingRequest)
    {
        com.android.internal.infra.AbstractSinglePendingRequestRemoteService r0;
        com.android.internal.infra.AbstractRemoteService$BasePendingRequest r1, $r4, $r5, $r8;
        java.lang.String r2, $r12;
        boolean $z0;
        java.lang.StringBuilder $r6;

        r0 := @this: com.android.internal.infra.AbstractSinglePendingRequestRemoteService;

        r1 := @parameter0: com.android.internal.infra.AbstractRemoteService$BasePendingRequest;

        $r4 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest>;

        if $r4 == null goto label2;

        $z0 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: boolean mVerbose>;

        if $z0 == 0 goto label1;

        r2 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: java.lang.String mTag>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handlePendingRequestWhileUnBound(): cancelling ");

        $r8 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to handle ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>(r2, $r12);

     label1:
        $r5 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest>;

        virtualinvoke $r5.<com.android.internal.infra.AbstractRemoteService$BasePendingRequest: boolean cancel()>();

     label2:
        r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest> = r1;

        return;
    }

    void handlePendingRequests()
    {
        com.android.internal.infra.AbstractSinglePendingRequestRemoteService r0;
        com.android.internal.infra.AbstractRemoteService$BasePendingRequest r1, $r2;

        r0 := @this: com.android.internal.infra.AbstractSinglePendingRequestRemoteService;

        $r2 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest>;

        if $r2 == null goto label1;

        r1 = r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest>;

        r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: com.android.internal.infra.AbstractRemoteService$BasePendingRequest mPendingRequest> = null;

        virtualinvoke r0.<com.android.internal.infra.AbstractSinglePendingRequestRemoteService: void handlePendingRequest(com.android.internal.infra.AbstractRemoteService$BasePendingRequest)>(r1);

     label1:
        return;
    }
}
