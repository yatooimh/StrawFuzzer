public abstract class com.android.internal.infra.RemoteStream extends com.android.internal.infra.AndroidFuture implements java.lang.Runnable
{
    private final com.android.internal.util.FunctionalUtils$ThrowingFunction mHandleStream;
    private volatile android.os.ParcelFileDescriptor mLocalPipe;

    private void <init>(com.android.internal.util.FunctionalUtils$ThrowingConsumer, com.android.internal.util.FunctionalUtils$ThrowingFunction, java.util.concurrent.Executor, boolean)
    {
        com.android.internal.infra.RemoteStream r0;
        java.util.concurrent.Executor r1;
        boolean z0;
        android.os.ParcelFileDescriptor[] r2;
        android.os.ParcelFileDescriptor $r3, r11;
        java.util.concurrent.TimeUnit $r4;
        java.lang.Throwable $r6, $r7, $r8;
        com.android.internal.util.FunctionalUtils$ThrowingConsumer r9;
        com.android.internal.util.FunctionalUtils$ThrowingFunction r10;
        byte b1, b2;

        r0 := @this: com.android.internal.infra.RemoteStream;

        r9 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingConsumer;

        r10 := @parameter1: com.android.internal.util.FunctionalUtils$ThrowingFunction;

        r1 := @parameter2: java.util.concurrent.Executor;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.internal.infra.AndroidFuture: void <init>()>();

        r0.<com.android.internal.infra.RemoteStream: com.android.internal.util.FunctionalUtils$ThrowingFunction mHandleStream> = r10;

     label01:
        r2 = staticinvoke <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>();

     label02:
        if z0 == 0 goto label03;

        b1 = 1;

        goto label04;

     label03:
        b1 = 0;

     label04:
        r11 = r2[b1];

     label05:
        interfaceinvoke r9.<com.android.internal.util.FunctionalUtils$ThrowingConsumer: void acceptOrThrow(java.lang.Object)>(r11);

     label06:
        if r11 == null goto label08;

     label07:
        virtualinvoke r11.<android.os.ParcelFileDescriptor: void close()>();

     label08:
        b2 = 1;

        if z0 == 0 goto label09;

        b2 = 0;

     label09:
        $r3 = r2[b2];

        r0.<com.android.internal.infra.RemoteStream: android.os.ParcelFileDescriptor mLocalPipe> = $r3;

        interfaceinvoke r1.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>(r0);

        $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>;

        virtualinvoke r0.<com.android.internal.infra.RemoteStream: com.android.internal.infra.AndroidFuture orTimeout(long,java.util.concurrent.TimeUnit)>(30L, $r4);

     label10:
        goto label18;

     label11:
        $r6 := @caughtexception;

        if r11 == null goto label16;

     label12:
        virtualinvoke r11.<android.os.ParcelFileDescriptor: void close()>();

     label13:
        goto label16;

     label14:
        $r8 := @caughtexception;

     label15:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label16:
        throw $r6;

     label17:
        $r7 := @caughtexception;

        virtualinvoke r0.<com.android.internal.infra.RemoteStream: boolean completeExceptionally(java.lang.Throwable)>($r7);

     label18:
        return;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
    }

    void <init>(com.android.internal.util.FunctionalUtils$ThrowingConsumer, com.android.internal.util.FunctionalUtils$ThrowingFunction, java.util.concurrent.Executor, boolean, com.android.internal.infra.RemoteStream$1)
    {
        com.android.internal.infra.RemoteStream r0;
        com.android.internal.util.FunctionalUtils$ThrowingConsumer r1;
        com.android.internal.util.FunctionalUtils$ThrowingFunction r2;
        java.util.concurrent.Executor r3;
        boolean z0;
        com.android.internal.infra.RemoteStream$1 r4;

        r0 := @this: com.android.internal.infra.RemoteStream;

        r1 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingConsumer;

        r2 := @parameter1: com.android.internal.util.FunctionalUtils$ThrowingFunction;

        r3 := @parameter2: java.util.concurrent.Executor;

        z0 := @parameter3: boolean;

        r4 := @parameter4: com.android.internal.infra.RemoteStream$1;

        specialinvoke r0.<com.android.internal.infra.RemoteStream: void <init>(com.android.internal.util.FunctionalUtils$ThrowingConsumer,com.android.internal.util.FunctionalUtils$ThrowingFunction,java.util.concurrent.Executor,boolean)>(r1, r2, r3, z0);

        return;
    }

    static java.lang.Void lambda$sendBytes$0(com.android.internal.util.FunctionalUtils$ThrowingConsumer, java.io.OutputStream) throws java.lang.Exception
    {
        com.android.internal.util.FunctionalUtils$ThrowingConsumer r0;
        java.io.OutputStream r1;

        r0 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingConsumer;

        r1 := @parameter1: java.io.OutputStream;

        interfaceinvoke r0.<com.android.internal.util.FunctionalUtils$ThrowingConsumer: void acceptOrThrow(java.lang.Object)>(r1);

        return null;
    }

    static java.lang.Void lambda$sendBytes$1(byte[], java.io.OutputStream) throws java.lang.Exception
    {
        byte[] r0;
        java.io.OutputStream r1;

        r0 := @parameter0: byte[];

        r1 := @parameter1: java.io.OutputStream;

        virtualinvoke r1.<java.io.OutputStream: void write(byte[])>(r0);

        return null;
    }

    public static byte[] readAll(java.io.InputStream) throws java.io.IOException
    {
        java.io.InputStream r0;
        byte[] r2, $r4;
        int i0;
        java.io.ByteArrayOutputStream $r3;

        r0 := @parameter0: java.io.InputStream;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

        r2 = newarray (byte)[16384];

     label1:
        i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2);

        if i0 != -1 goto label2;

        $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        return $r4;

     label2:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r2, 0, i0);

        goto label1;
    }

    public static com.android.internal.infra.AndroidFuture receiveBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer)
    {
        com.android.internal.util.FunctionalUtils$ThrowingConsumer r0;
        com.android.internal.infra.'-$$Lambda$aeiZbEpH6rq4kD9vJrlAnboJGDM' $r1;
        com.android.internal.infra.AndroidFuture $r2;
        com.android.internal.util.FunctionalUtils$ThrowingFunction r3;

        r0 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingConsumer;

        $r1 = <com.android.internal.infra._$$Lambda$aeiZbEpH6rq4kD9vJrlAnboJGDM: com.android.internal.infra.'-$$Lambda$aeiZbEpH6rq4kD9vJrlAnboJGDM' INSTANCE>;

        r3 = (com.android.internal.util.FunctionalUtils$ThrowingFunction) $r1;

        $r2 = staticinvoke <com.android.internal.infra.RemoteStream: com.android.internal.infra.AndroidFuture receiveBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer,com.android.internal.util.FunctionalUtils$ThrowingFunction)>(r0, r3);

        return $r2;
    }

    public static com.android.internal.infra.AndroidFuture receiveBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer, com.android.internal.util.FunctionalUtils$ThrowingFunction)
    {
        com.android.internal.util.FunctionalUtils$ThrowingConsumer r0;
        com.android.internal.util.FunctionalUtils$ThrowingFunction r1;
        com.android.internal.infra.RemoteStream$1 $r2;
        java.util.concurrent.Executor $r3;

        r0 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingConsumer;

        r1 := @parameter1: com.android.internal.util.FunctionalUtils$ThrowingFunction;

        $r2 = new com.android.internal.infra.RemoteStream$1;

        $r3 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        specialinvoke $r2.<com.android.internal.infra.RemoteStream$1: void <init>(com.android.internal.util.FunctionalUtils$ThrowingConsumer,com.android.internal.util.FunctionalUtils$ThrowingFunction,java.util.concurrent.Executor,boolean)>(r0, r1, $r3, 1);

        return $r2;
    }

    public static com.android.internal.infra.AndroidFuture sendBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer, com.android.internal.util.FunctionalUtils$ThrowingConsumer)
    {
        com.android.internal.util.FunctionalUtils$ThrowingConsumer r0, r1;
        com.android.internal.infra._$$Lambda$RemoteStream$cEAy1MmFFZV4u2Yc69293eEHU20 $r2;
        com.android.internal.infra.AndroidFuture $r3;

        r0 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingConsumer;

        r1 := @parameter1: com.android.internal.util.FunctionalUtils$ThrowingConsumer;

        $r2 = new com.android.internal.infra._$$Lambda$RemoteStream$cEAy1MmFFZV4u2Yc69293eEHU20;

        specialinvoke $r2.<com.android.internal.infra._$$Lambda$RemoteStream$cEAy1MmFFZV4u2Yc69293eEHU20: void <init>(com.android.internal.util.FunctionalUtils$ThrowingConsumer)>(r1);

        $r3 = staticinvoke <com.android.internal.infra.RemoteStream: com.android.internal.infra.AndroidFuture sendBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer,com.android.internal.util.FunctionalUtils$ThrowingFunction)>(r0, $r2);

        return $r3;
    }

    public static com.android.internal.infra.AndroidFuture sendBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer, com.android.internal.util.FunctionalUtils$ThrowingFunction)
    {
        com.android.internal.util.FunctionalUtils$ThrowingConsumer r0;
        com.android.internal.util.FunctionalUtils$ThrowingFunction r1;
        com.android.internal.infra.RemoteStream$2 $r2;
        java.util.concurrent.Executor $r3;

        r0 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingConsumer;

        r1 := @parameter1: com.android.internal.util.FunctionalUtils$ThrowingFunction;

        $r2 = new com.android.internal.infra.RemoteStream$2;

        $r3 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        specialinvoke $r2.<com.android.internal.infra.RemoteStream$2: void <init>(com.android.internal.util.FunctionalUtils$ThrowingConsumer,com.android.internal.util.FunctionalUtils$ThrowingFunction,java.util.concurrent.Executor,boolean)>(r0, r1, $r3, 0);

        return $r2;
    }

    public static com.android.internal.infra.AndroidFuture sendBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer, byte[])
    {
        com.android.internal.util.FunctionalUtils$ThrowingConsumer r0;
        byte[] r1;
        com.android.internal.infra._$$Lambda$RemoteStream$6uKWoLJ2mpc1mLim72Ru_QU6tYI $r2;
        com.android.internal.infra.AndroidFuture $r3;

        r0 := @parameter0: com.android.internal.util.FunctionalUtils$ThrowingConsumer;

        r1 := @parameter1: byte[];

        $r2 = new com.android.internal.infra._$$Lambda$RemoteStream$6uKWoLJ2mpc1mLim72Ru_QU6tYI;

        specialinvoke $r2.<com.android.internal.infra._$$Lambda$RemoteStream$6uKWoLJ2mpc1mLim72Ru_QU6tYI: void <init>(byte[])>(r1);

        $r3 = staticinvoke <com.android.internal.infra.RemoteStream: com.android.internal.infra.AndroidFuture sendBytes(com.android.internal.util.FunctionalUtils$ThrowingConsumer,com.android.internal.util.FunctionalUtils$ThrowingFunction)>(r0, $r2);

        return $r3;
    }

    protected abstract java.io.Closeable createStream(android.os.ParcelFileDescriptor);

    protected void onCompleted(java.lang.Object, java.lang.Throwable)
    {
        com.android.internal.infra.RemoteStream r0;
        java.lang.Object r1;
        java.lang.Throwable r2;
        android.os.ParcelFileDescriptor $r3;

        r0 := @this: com.android.internal.infra.RemoteStream;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.android.internal.infra.AndroidFuture: void onCompleted(java.lang.Object,java.lang.Throwable)>(r1, r2);

        $r3 = r0.<com.android.internal.infra.RemoteStream: android.os.ParcelFileDescriptor mLocalPipe>;

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        return;
    }

    public void run()
    {
        com.android.internal.infra.RemoteStream r0;
        android.os.ParcelFileDescriptor $r1;
        com.android.internal.util.FunctionalUtils$ThrowingFunction $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4, $r5, $r6;
        java.io.Closeable r7;

        r0 := @this: com.android.internal.infra.RemoteStream;

     label01:
        $r1 = r0.<com.android.internal.infra.RemoteStream: android.os.ParcelFileDescriptor mLocalPipe>;

        r7 = virtualinvoke r0.<com.android.internal.infra.RemoteStream: java.io.Closeable createStream(android.os.ParcelFileDescriptor)>($r1);

     label02:
        $r2 = r0.<com.android.internal.infra.RemoteStream: com.android.internal.util.FunctionalUtils$ThrowingFunction mHandleStream>;

        $r3 = interfaceinvoke $r2.<com.android.internal.util.FunctionalUtils$ThrowingFunction: java.lang.Object applyOrThrow(java.lang.Object)>(r7);

        virtualinvoke r0.<com.android.internal.infra.RemoteStream: boolean complete(java.lang.Object)>($r3);

     label03:
        if r7 == null goto label05;

     label04:
        interfaceinvoke r7.<java.io.Closeable: void close()>();

     label05:
        goto label13;

     label06:
        $r6 := @caughtexception;

        if r7 == null goto label11;

     label07:
        interfaceinvoke r7.<java.io.Closeable: void close()>();

     label08:
        goto label11;

     label09:
        $r5 := @caughtexception;

     label10:
        virtualinvoke $r6.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label11:
        throw $r6;

     label12:
        $r4 := @caughtexception;

        virtualinvoke r0.<com.android.internal.infra.RemoteStream: boolean completeExceptionally(java.lang.Throwable)>($r4);

     label13:
        return;

        catch java.lang.Throwable from label01 to label02 with label12;
        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label12;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label12;
        catch java.lang.Throwable from label11 to label12 with label12;
    }
}
