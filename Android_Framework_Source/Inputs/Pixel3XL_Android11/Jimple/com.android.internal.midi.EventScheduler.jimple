public class com.android.internal.midi.EventScheduler extends java.lang.Object
{
    private static final long NANOS_PER_MILLI;
    private boolean mClosed;
    private volatile java.util.SortedMap mEventBuffer;
    private com.android.internal.midi.EventScheduler$FastEventQueue mEventPool;
    private final java.lang.Object mLock;
    private int mMaxPoolSize;

    public void <init>()
    {
        com.android.internal.midi.EventScheduler r0;
        java.lang.Object $r1;
        java.util.TreeMap $r2;

        r0 := @this: com.android.internal.midi.EventScheduler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.midi.EventScheduler: java.lang.Object mLock> = $r1;

        r0.<com.android.internal.midi.EventScheduler: com.android.internal.midi.EventScheduler$FastEventQueue mEventPool> = null;

        r0.<com.android.internal.midi.EventScheduler: int mMaxPoolSize> = 200;

        $r2 = new java.util.TreeMap;

        specialinvoke $r2.<java.util.TreeMap: void <init>()>();

        r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer> = $r2;

        return;
    }

    private com.android.internal.midi.EventScheduler$SchedulableEvent removeNextEventLocked(long)
    {
        com.android.internal.midi.EventScheduler r0;
        long l0;
        com.android.internal.midi.EventScheduler$FastEventQueue r1;
        java.util.SortedMap $r2, $r6;
        java.lang.Long $r3, $r7;
        java.lang.Object $r4;
        int $i1;
        com.android.internal.midi.EventScheduler$SchedulableEvent $r5;

        r0 := @this: com.android.internal.midi.EventScheduler;

        l0 := @parameter0: long;

        $r2 = r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer>;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r4 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.internal.midi.EventScheduler$FastEventQueue) $r4;

        $i1 = virtualinvoke r1.<com.android.internal.midi.EventScheduler$FastEventQueue: int size()>();

        if $i1 != 1 goto label1;

        $r6 = r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object remove(java.lang.Object)>($r7);

     label1:
        $r5 = virtualinvoke r1.<com.android.internal.midi.EventScheduler$FastEventQueue: com.android.internal.midi.EventScheduler$SchedulableEvent remove()>();

        return $r5;
    }

    public void add(com.android.internal.midi.EventScheduler$SchedulableEvent)
    {
        com.android.internal.midi.EventScheduler r0;
        java.lang.Object r1, $r4, $r7, $r12;
        java.util.SortedMap $r2, $r5, $r6, $r9;
        long $l0, $l1, $l2, l4;
        java.lang.Long $r3, $r8, $r10;
        boolean $z0;
        byte $b3;
        java.lang.Throwable $r13;
        com.android.internal.midi.EventScheduler$SchedulableEvent r14;
        com.android.internal.midi.EventScheduler$FastEventQueue r15, r16;

        r0 := @this: com.android.internal.midi.EventScheduler;

        r14 := @parameter0: com.android.internal.midi.EventScheduler$SchedulableEvent;

        r1 = r0.<com.android.internal.midi.EventScheduler: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer>;

        $l0 = virtualinvoke r14.<com.android.internal.midi.EventScheduler$SchedulableEvent: long getTimestamp()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        $r4 = interfaceinvoke $r2.<java.util.SortedMap: java.lang.Object get(java.lang.Object)>($r3);

        r15 = (com.android.internal.midi.EventScheduler$FastEventQueue) $r4;

     label02:
        if r15 != null goto label08;

     label03:
        $r5 = r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer>;

        $z0 = interfaceinvoke $r5.<java.util.SortedMap: boolean isEmpty()>();

        if $z0 == 0 goto label05;

     label04:
        l4 = 9223372036854775807L;

        goto label06;

     label05:
        $r6 = r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer>;

        $r7 = interfaceinvoke $r6.<java.util.SortedMap: java.lang.Object firstKey()>();

        $r8 = (java.lang.Long) $r7;

        l4 = virtualinvoke $r8.<java.lang.Long: long longValue()>();

     label06:
        r16 = new com.android.internal.midi.EventScheduler$FastEventQueue;

        specialinvoke r16.<com.android.internal.midi.EventScheduler$FastEventQueue: void <init>(com.android.internal.midi.EventScheduler,com.android.internal.midi.EventScheduler$SchedulableEvent)>(r0, r14);

        $r9 = r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer>;

        $l1 = virtualinvoke r14.<com.android.internal.midi.EventScheduler$SchedulableEvent: long getTimestamp()>();

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        interfaceinvoke $r9.<java.util.SortedMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r16);

        $l2 = virtualinvoke r14.<com.android.internal.midi.EventScheduler$SchedulableEvent: long getTimestamp()>();

        $b3 = $l2 cmp l4;

        if $b3 >= 0 goto label07;

        $r12 = r0.<com.android.internal.midi.EventScheduler: java.lang.Object mLock>;

        virtualinvoke $r12.<java.lang.Object: void notify()>();

     label07:
        goto label09;

     label08:
        virtualinvoke r15.<com.android.internal.midi.EventScheduler$FastEventQueue: void add(com.android.internal.midi.EventScheduler$SchedulableEvent)>(r14);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r13 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public void addEventToPool(com.android.internal.midi.EventScheduler$SchedulableEvent)
    {
        com.android.internal.midi.EventScheduler r0;
        com.android.internal.midi.EventScheduler$SchedulableEvent r1;
        com.android.internal.midi.EventScheduler$FastEventQueue r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.android.internal.midi.EventScheduler;

        r1 := @parameter0: com.android.internal.midi.EventScheduler$SchedulableEvent;

        r2 = r0.<com.android.internal.midi.EventScheduler: com.android.internal.midi.EventScheduler$FastEventQueue mEventPool>;

        if r2 != null goto label1;

        $r4 = new com.android.internal.midi.EventScheduler$FastEventQueue;

        specialinvoke $r4.<com.android.internal.midi.EventScheduler$FastEventQueue: void <init>(com.android.internal.midi.EventScheduler,com.android.internal.midi.EventScheduler$SchedulableEvent)>(r0, r1);

        r0.<com.android.internal.midi.EventScheduler: com.android.internal.midi.EventScheduler$FastEventQueue mEventPool> = $r4;

        goto label2;

     label1:
        $i0 = virtualinvoke r2.<com.android.internal.midi.EventScheduler$FastEventQueue: int size()>();

        $i1 = r0.<com.android.internal.midi.EventScheduler: int mMaxPoolSize>;

        if $i0 >= $i1 goto label2;

        $r3 = r0.<com.android.internal.midi.EventScheduler: com.android.internal.midi.EventScheduler$FastEventQueue mEventPool>;

        virtualinvoke $r3.<com.android.internal.midi.EventScheduler$FastEventQueue: void add(com.android.internal.midi.EventScheduler$SchedulableEvent)>(r1);

     label2:
        return;
    }

    public void close()
    {
        com.android.internal.midi.EventScheduler r0;
        java.lang.Object r1, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.internal.midi.EventScheduler;

        r1 = r0.<com.android.internal.midi.EventScheduler: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.internal.midi.EventScheduler: boolean mClosed> = 1;

        $r3 = r0.<com.android.internal.midi.EventScheduler: java.lang.Object mLock>;

        virtualinvoke $r3.<java.lang.Object: void notify()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void flush()
    {
        com.android.internal.midi.EventScheduler r0;
        java.util.TreeMap $r1;

        r0 := @this: com.android.internal.midi.EventScheduler;

        $r1 = new java.util.TreeMap;

        specialinvoke $r1.<java.util.TreeMap: void <init>()>();

        r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer> = $r1;

        return;
    }

    public com.android.internal.midi.EventScheduler$SchedulableEvent getNextEvent(long)
    {
        com.android.internal.midi.EventScheduler r0;
        long l0, l1;
        java.lang.Object r1, $r4;
        java.util.SortedMap $r2, $r3;
        boolean $z0;
        java.lang.Long $r5;
        byte $b2;
        java.lang.Throwable $r6;
        com.android.internal.midi.EventScheduler$SchedulableEvent r7;

        r0 := @this: com.android.internal.midi.EventScheduler;

        l0 := @parameter0: long;

        r1 = r0.<com.android.internal.midi.EventScheduler: java.lang.Object mLock>;

        entermonitor r1;

        r7 = null;

     label1:
        $r2 = r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer>;

        $z0 = interfaceinvoke $r2.<java.util.SortedMap: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $r3 = r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer>;

        $r4 = interfaceinvoke $r3.<java.util.SortedMap: java.lang.Object firstKey()>();

        $r5 = (java.lang.Long) $r4;

        l1 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

     label2:
        r7 = null;

        $b2 = l1 cmp l0;

        if $b2 > 0 goto label4;

     label3:
        r7 = specialinvoke r0.<com.android.internal.midi.EventScheduler: com.android.internal.midi.EventScheduler$SchedulableEvent removeNextEventLocked(long)>(l1);

     label4:
        exitmonitor r1;

     label5:
        return r7;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public com.android.internal.midi.EventScheduler$SchedulableEvent removeEventfromPool()
    {
        com.android.internal.midi.EventScheduler r0;
        com.android.internal.midi.EventScheduler$FastEventQueue r1, $r2;
        int $i0;
        com.android.internal.midi.EventScheduler$SchedulableEvent r3;

        r0 := @this: com.android.internal.midi.EventScheduler;

        r1 = r0.<com.android.internal.midi.EventScheduler: com.android.internal.midi.EventScheduler$FastEventQueue mEventPool>;

        r3 = null;

        if r1 == null goto label1;

        r3 = null;

        $i0 = virtualinvoke r1.<com.android.internal.midi.EventScheduler$FastEventQueue: int size()>();

        if $i0 <= 1 goto label1;

        $r2 = r0.<com.android.internal.midi.EventScheduler: com.android.internal.midi.EventScheduler$FastEventQueue mEventPool>;

        r3 = virtualinvoke $r2.<com.android.internal.midi.EventScheduler$FastEventQueue: com.android.internal.midi.EventScheduler$SchedulableEvent remove()>();

     label1:
        return r3;
    }

    public com.android.internal.midi.EventScheduler$SchedulableEvent waitNextEvent() throws java.lang.InterruptedException
    {
        com.android.internal.midi.EventScheduler r0;
        java.lang.Object r1, $r4, $r8;
        boolean $z0, $z1;
        java.util.SortedMap $r2, $r3;
        java.lang.Long $r5;
        byte $b0, $b3;
        long $l1, $l2, l4, l5, l6, l7, $l9;
        java.lang.Throwable $r6;
        com.android.internal.midi.EventScheduler$SchedulableEvent r7;
        int $i8;

        r0 := @this: com.android.internal.midi.EventScheduler;

        r1 = r0.<com.android.internal.midi.EventScheduler: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        r7 = null;

     label02:
        $z0 = r0.<com.android.internal.midi.EventScheduler: boolean mClosed>;

        if $z0 != 0 goto label12;

     label03:
        l4 = 2147483647L;

     label04:
        $r2 = r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer>;

        $z1 = interfaceinvoke $r2.<java.util.SortedMap: boolean isEmpty()>();

        if $z1 != 0 goto label10;

        l5 = staticinvoke <java.lang.System: long nanoTime()>();

        $r3 = r0.<com.android.internal.midi.EventScheduler: java.util.SortedMap mEventBuffer>;

        $r4 = interfaceinvoke $r3.<java.util.SortedMap: java.lang.Object firstKey()>();

        $r5 = (java.lang.Long) $r4;

        l6 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

     label05:
        $b0 = l6 cmp l5;

        if $b0 > 0 goto label08;

     label06:
        r7 = specialinvoke r0.<com.android.internal.midi.EventScheduler: com.android.internal.midi.EventScheduler$SchedulableEvent removeNextEventLocked(long)>(l6);

     label07:
        goto label12;

     label08:
        $l1 = l6 - l5;

        $l2 = $l1 / 1000000L;

        l7 = $l2 + 1L;

     label09:
        l4 = l7;

        $b3 = l7 cmp 2147483647L;

        if $b3 <= 0 goto label10;

        l4 = 2147483647L;

     label10:
        $r8 = r0.<com.android.internal.midi.EventScheduler: java.lang.Object mLock>;

        $i8 = (int) l4;

        $l9 = (long) $i8;

        virtualinvoke $r8.<java.lang.Object: void wait(long)>($l9);

     label11:
        goto label01;

     label12:
        exitmonitor r1;

     label13:
        return r7;

     label14:
        $r6 := @caughtexception;

     label15:
        exitmonitor r1;

     label16:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public static void <clinit>()
    {
        <com.android.internal.midi.EventScheduler: long NANOS_PER_MILLI> = 1000000L;

        return;
    }
}
