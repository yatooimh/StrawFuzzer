public class com.android.internal.ml.clustering.KMeans extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final int mMaxIterations;
    private final java.util.Random mRandomState;
    private float mSqConvergenceEpsilon;

    public void <init>()
    {
        com.android.internal.ml.clustering.KMeans r0;
        java.util.Random $r1;

        r0 := @this: com.android.internal.ml.clustering.KMeans;

        $r1 = new java.util.Random;

        specialinvoke $r1.<java.util.Random: void <init>()>();

        specialinvoke r0.<com.android.internal.ml.clustering.KMeans: void <init>(java.util.Random)>($r1);

        return;
    }

    public void <init>(java.util.Random)
    {
        com.android.internal.ml.clustering.KMeans r0;
        java.util.Random r1;

        r0 := @this: com.android.internal.ml.clustering.KMeans;

        r1 := @parameter0: java.util.Random;

        specialinvoke r0.<com.android.internal.ml.clustering.KMeans: void <init>(java.util.Random,int,float)>(r1, 30, 0.005F);

        return;
    }

    public void <init>(java.util.Random, int, float)
    {
        com.android.internal.ml.clustering.KMeans r0;
        java.util.Random r1;
        int i0;
        float f0, $f1;

        r0 := @this: com.android.internal.ml.clustering.KMeans;

        r1 := @parameter0: java.util.Random;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.ml.clustering.KMeans: java.util.Random mRandomState> = r1;

        r0.<com.android.internal.ml.clustering.KMeans: int mMaxIterations> = i0;

        $f1 = f0 * f0;

        r0.<com.android.internal.ml.clustering.KMeans: float mSqConvergenceEpsilon> = $f1;

        return;
    }

    public static com.android.internal.ml.clustering.KMeans$Mean nearestMean(float[], java.util.List)
    {
        float[] r0, $r4;
        java.util.List r1;
        int i0, i2;
        com.android.internal.ml.clustering.KMeans$Mean r2, r5;
        float f0, f1, f2;
        java.lang.Object $r3;
        byte $b1;

        r0 := @parameter0: float[];

        r1 := @parameter1: java.util.List;

        r5 = null;

        f1 = 3.4028235E38F;

        i0 = interfaceinvoke r1.<java.util.List: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (com.android.internal.ml.clustering.KMeans$Mean) $r3;

        $r4 = r2.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid>;

        f0 = staticinvoke <com.android.internal.ml.clustering.KMeans: float sqDistance(float[],float[])>(r0, $r4);

        f2 = f1;

        $b1 = f0 cmpg f1;

        if $b1 >= 0 goto label2;

        r5 = r2;

        f2 = f0;

     label2:
        i2 = i2 + 1;

        f1 = f2;

        goto label1;

     label3:
        return r5;
    }

    public static double score(java.util.List)
    {
        java.util.List r0;
        int i0, i1, i2;
        com.android.internal.ml.clustering.KMeans$Mean r1, r2;
        java.lang.Object $r3, $r4;
        float[] $r5, $r6;
        float $f0;
        double $d0, $d1, d2;

        r0 := @parameter0: java.util.List;

        d2 = 0.0;

        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        i1 = 0;

     label1:
        if i1 >= i0 goto label6;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1);

        r1 = (com.android.internal.ml.clustering.KMeans$Mean) $r3;

        i2 = 0;

     label2:
        if i2 >= i0 goto label5;

        $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i2);

        r2 = (com.android.internal.ml.clustering.KMeans$Mean) $r4;

        if r1 != r2 goto label3;

        goto label4;

     label3:
        $r6 = r1.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid>;

        $r5 = r2.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid>;

        $f0 = staticinvoke <com.android.internal.ml.clustering.KMeans: float sqDistance(float[],float[])>($r6, $r5);

        $d0 = (double) $f0;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        d2 = d2 + $d1;

     label4:
        i2 = i2 + 1;

        goto label2;

     label5:
        i1 = i1 + 1;

        goto label1;

     label6:
        return d2;
    }

    public static float sqDistance(float[], float[])
    {
        float[] r0, r1;
        int i0, i1;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, f7;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        f7 = 0.0F;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $f1 = r0[i1];

        $f0 = r1[i1];

        $f5 = $f1 - $f0;

        $f3 = r0[i1];

        $f2 = r1[i1];

        $f4 = $f3 - $f2;

        $f6 = $f5 * $f4;

        f7 = f7 + $f6;

        i1 = i1 + 1;

        goto label1;

     label2:
        return f7;
    }

    private boolean step(java.util.ArrayList, float[][])
    {
        com.android.internal.ml.clustering.KMeans r0;
        java.util.ArrayList r1, $r3, $r5, $r8, $r10, $r14, $r17;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i8, $i9, i10, i11, i12, i13, i14, i15;
        java.lang.Object $r2, $r11, $r15;
        float[] $r4, $r6, $r7, $r9, $r12, r19, r21, r22, r23;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        byte $b7;
        com.android.internal.ml.clustering.KMeans$Mean $r13, $r16, r20;
        float[][] r18;
        boolean z1;

        r0 := @this: com.android.internal.ml.clustering.KMeans;

        r1 := @parameter0: java.util.ArrayList;

        r18 := @parameter1: float[][];

        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i10 = $i0 - 1;

     label01:
        if i10 < 0 goto label02;

        $r15 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i10);

        $r16 = (com.android.internal.ml.clustering.KMeans$Mean) $r15;

        $r17 = $r16.<com.android.internal.ml.clustering.KMeans$Mean: java.util.ArrayList mClosestItems>;

        virtualinvoke $r17.<java.util.ArrayList: void clear()>();

        i10 = i10 + -1;

        goto label01;

     label02:
        $i1 = lengthof r18;

        i11 = $i1 - 1;

     label03:
        if i11 < 0 goto label04;

        r19 = r18[i11];

        $r13 = staticinvoke <com.android.internal.ml.clustering.KMeans: com.android.internal.ml.clustering.KMeans$Mean nearestMean(float[],java.util.List)>(r19, r1);

        $r14 = $r13.<com.android.internal.ml.clustering.KMeans$Mean: java.util.ArrayList mClosestItems>;

        virtualinvoke $r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r19);

        i11 = i11 + -1;

        goto label03;

     label04:
        z1 = 1;

        $i2 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i12 = $i2 - 1;

     label05:
        if i12 < 0 goto label14;

        $r2 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i12);

        r20 = (com.android.internal.ml.clustering.KMeans$Mean) $r2;

        $r3 = r20.<com.android.internal.ml.clustering.KMeans$Mean: java.util.ArrayList mClosestItems>;

        $i3 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i3 != 0 goto label06;

        goto label13;

     label06:
        r21 = r20.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid>;

        $i4 = lengthof r21;

        $r4 = newarray (float)[$i4];

        r20.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid> = $r4;

        i13 = 0;

     label07:
        $r5 = r20.<com.android.internal.ml.clustering.KMeans$Mean: java.util.ArrayList mClosestItems>;

        $i5 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if i13 >= $i5 goto label10;

        i14 = 0;

     label08:
        $r9 = r20.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid>;

        $i9 = lengthof $r9;

        if i14 >= $i9 goto label09;

        r22 = r20.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid>;

        $f5 = r22[i14];

        $r10 = r20.<com.android.internal.ml.clustering.KMeans$Mean: java.util.ArrayList mClosestItems>;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>(i13);

        $r12 = (float[]) $r11;

        $f6 = $r12[i14];

        $f7 = $f5 + $f6;

        r22[i14] = $f7;

        i14 = i14 + 1;

        goto label08;

     label09:
        i13 = i13 + 1;

        goto label07;

     label10:
        i15 = 0;

     label11:
        $r6 = r20.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid>;

        $i6 = lengthof $r6;

        if i15 >= $i6 goto label12;

        r23 = r20.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid>;

        $f2 = r23[i15];

        $r8 = r20.<com.android.internal.ml.clustering.KMeans$Mean: java.util.ArrayList mClosestItems>;

        $i8 = virtualinvoke $r8.<java.util.ArrayList: int size()>();

        $f3 = (float) $i8;

        $f4 = $f2 / $f3;

        r23[i15] = $f4;

        i15 = i15 + 1;

        goto label11;

     label12:
        $r7 = r20.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid>;

        $f0 = staticinvoke <com.android.internal.ml.clustering.KMeans: float sqDistance(float[],float[])>(r21, $r7);

        $f1 = r0.<com.android.internal.ml.clustering.KMeans: float mSqConvergenceEpsilon>;

        $b7 = $f0 cmpl $f1;

        if $b7 <= 0 goto label13;

        z1 = 0;

     label13:
        i12 = i12 + -1;

        goto label05;

     label14:
        return z1;
    }

    public void checkDataSetSanity(float[][])
    {
        com.android.internal.ml.clustering.KMeans r0;
        float[][] r1;
        int i0, i1, $i2, $i3, i4;
        java.lang.IllegalArgumentException $r2, $r3, $r5, $r8;
        float[] $r4, $r6, $r7, $r9;

        r0 := @this: com.android.internal.ml.clustering.KMeans;

        r1 := @parameter0: float[][];

        if r1 == null goto label6;

        $i2 = lengthof r1;

        if $i2 == 0 goto label5;

        $r4 = r1[0];

        if $r4 == null goto label4;

        $r6 = r1[0];

        i0 = lengthof $r6;

        i1 = lengthof r1;

        i4 = 1;

     label1:
        if i4 >= i1 goto label3;

        $r7 = r1[i4];

        if $r7 == null goto label2;

        $r9 = r1[i4];

        $i3 = lengthof $r9;

        if $i3 != i0 goto label2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad data set format.");

        throw $r8;

     label3:
        return;

     label4:
        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad data set format.");

        throw $r5;

     label5:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Data set is empty.");

        throw $r3;

     label6:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Data set is null.");

        throw $r2;
    }

    public java.util.List predict(int, float[][])
    {
        com.android.internal.ml.clustering.KMeans r0;
        float[][] r1;
        int i0, $i1, i2, i3, i4, i5;
        float[] $r4, $r8;
        java.util.ArrayList $r5;
        boolean $z0;
        com.android.internal.ml.clustering.KMeans$Mean $r6;
        java.util.Random $r7;
        float $f0;

        r0 := @this: com.android.internal.ml.clustering.KMeans;

        i2 := @parameter0: int;

        r1 := @parameter1: float[][];

        virtualinvoke r0.<com.android.internal.ml.clustering.KMeans: void checkDataSetSanity(float[][])>(r1);

        $r4 = r1[0];

        i0 = lengthof $r4;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        i3 = 0;

     label1:
        if i3 >= i2 goto label4;

        $r6 = new com.android.internal.ml.clustering.KMeans$Mean;

        specialinvoke $r6.<com.android.internal.ml.clustering.KMeans$Mean: void <init>(int)>(i0);

        i4 = 0;

     label2:
        if i4 >= i0 goto label3;

        $r8 = $r6.<com.android.internal.ml.clustering.KMeans$Mean: float[] mCentroid>;

        $r7 = r0.<com.android.internal.ml.clustering.KMeans: java.util.Random mRandomState>;

        $f0 = virtualinvoke $r7.<java.util.Random: float nextFloat()>();

        $r8[i4] = $f0;

        i4 = i4 + 1;

        goto label2;

     label3:
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

        i3 = i3 + 1;

        goto label1;

     label4:
        i5 = 0;

     label5:
        $i1 = r0.<com.android.internal.ml.clustering.KMeans: int mMaxIterations>;

        if i5 >= $i1 goto label7;

        $z0 = specialinvoke r0.<com.android.internal.ml.clustering.KMeans: boolean step(java.util.ArrayList,float[][])>($r5, r1);

        if $z0 == 0 goto label6;

        goto label7;

     label6:
        i5 = i5 + 1;

        goto label5;

     label7:
        return $r5;
    }

    public static void <clinit>()
    {
        <com.android.internal.ml.clustering.KMeans: java.lang.String TAG> = "KMeans";

        <com.android.internal.ml.clustering.KMeans: boolean DEBUG> = 0;

        return;
    }
}
