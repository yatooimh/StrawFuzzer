public class com.android.internal.net.VpnConfig extends java.lang.Object implements android.os.Parcelable
{
    public static final android.os.Parcelable$Creator CREATOR;
    public static final java.lang.String DIALOGS_PACKAGE;
    public static final java.lang.String LEGACY_VPN;
    public static final java.lang.String SERVICE_INTERFACE;
    public java.util.List addresses;
    public boolean allowBypass;
    public boolean allowIPv4;
    public boolean allowIPv6;
    public java.util.List allowedApplications;
    public boolean blocking;
    public android.app.PendingIntent configureIntent;
    public java.util.List disallowedApplications;
    public java.util.List dnsServers;
    public java.lang.String interfaze;
    public boolean isMetered;
    public boolean legacy;
    public int mtu;
    public android.net.ProxyInfo proxyInfo;
    public java.util.List routes;
    public java.util.List searchDomains;
    public java.lang.String session;
    public long startTime;
    public android.net.Network[] underlyingNetworks;
    public java.lang.String user;

    static void <clinit>()
    {
        com.android.internal.net.VpnConfig$1 $r0;

        <com.android.internal.net.VpnConfig: java.lang.String SERVICE_INTERFACE> = "android.net.VpnService";

        <com.android.internal.net.VpnConfig: java.lang.String LEGACY_VPN> = "[Legacy VPN]";

        <com.android.internal.net.VpnConfig: java.lang.String DIALOGS_PACKAGE> = "com.android.vpndialogs";

        $r0 = new com.android.internal.net.VpnConfig$1;

        specialinvoke $r0.<com.android.internal.net.VpnConfig$1: void <init>()>();

        <com.android.internal.net.VpnConfig: android.os.Parcelable$Creator CREATOR> = $r0;

        return;
    }

    public void <init>()
    {
        com.android.internal.net.VpnConfig r0;
        java.util.ArrayList $r1, $r2;

        r0 := @this: com.android.internal.net.VpnConfig;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.net.VpnConfig: int mtu> = -1;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.net.VpnConfig: java.util.List addresses> = $r1;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.net.VpnConfig: java.util.List routes> = $r2;

        r0.<com.android.internal.net.VpnConfig: long startTime> = -1L;

        r0.<com.android.internal.net.VpnConfig: boolean isMetered> = 1;

        return;
    }

    public static android.content.Intent getIntentForConfirmation()
    {
        android.content.ComponentName r1;
        android.content.Intent $r2;
        android.content.res.Resources $r3;
        java.lang.String $r4, $r5, $r6;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        $r3 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: java.lang.String getString(int)>(17039851);

        r1 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>($r4);

        $r5 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getPackageName()>();

        $r6 = virtualinvoke r1.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>($r5, $r6);

        return $r2;
    }

    public static android.app.PendingIntent getIntentForStatusPanel(android.content.Context)
    {
        android.content.Context r0;
        android.content.Intent $r2;
        android.os.UserHandle $r5;
        android.app.PendingIntent $r6;

        r0 := @parameter0: android.content.Context;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>()>();

        virtualinvoke $r2.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>("com.android.vpndialogs", "com.android.vpndialogs.ManageDialog");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(1350565888);

        $r5 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        $r6 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>(r0, 0, $r2, 0, null, $r5);

        return $r6;
    }

    public static java.lang.CharSequence getVpnLabel(android.content.Context, java.lang.String) throws android.content.pm.PackageManager$NameNotFoundException
    {
        java.lang.String r0;
        android.content.Intent $r1;
        android.content.pm.ApplicationInfo $r3;
        java.lang.CharSequence $r4, $r7;
        int $i0;
        java.lang.Object $r5;
        android.content.pm.ResolveInfo $r6;
        android.content.Context r8;
        android.content.pm.PackageManager r9;
        java.util.List r11;

        r8 := @parameter0: android.content.Context;

        r0 := @parameter1: java.lang.String;

        r9 = virtualinvoke r8.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.net.VpnService");

        virtualinvoke $r1.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r0);

        r11 = virtualinvoke r9.<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>($r1, 0);

        if r11 == null goto label1;

        $i0 = interfaceinvoke r11.<java.util.List: int size()>();

        if $i0 != 1 goto label1;

        $r5 = interfaceinvoke r11.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (android.content.pm.ResolveInfo) $r5;

        $r7 = virtualinvoke $r6.<android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>(r9);

        return $r7;

     label1:
        $r3 = virtualinvoke r9.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r0, 0);

        $r4 = virtualinvoke $r3.<android.content.pm.ApplicationInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)>(r9);

        return $r4;
    }

    static java.lang.String toString(java.util.List)
    {
        java.util.List r0;
        java.lang.Object[] $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        return "null";

     label1:
        $r1 = interfaceinvoke r0.<java.util.List: java.lang.Object[] toArray()>();

        $r2 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r1);

        return $r2;
    }

    public void addLegacyAddresses(java.lang.String)
    {
        com.android.internal.net.VpnConfig r0;
        int i0, i1;
        java.lang.String $r2, $r3, $r5, r8;
        boolean $z0;
        android.net.LinkAddress $r4;
        java.util.List $r6;
        java.net.InetAddress $r7;
        java.lang.String[] r9;

        r0 := @this: com.android.internal.net.VpnConfig;

        r8 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r8.<java.lang.String: java.lang.String trim()>();

        r9 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        i0 = lengthof r9;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = new android.net.LinkAddress;

        $r5 = r9[i1];

        specialinvoke $r4.<android.net.LinkAddress: void <init>(java.lang.String)>($r5);

        $r6 = r0.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r7 = virtualinvoke $r4.<android.net.LinkAddress: java.net.InetAddress getAddress()>();

        virtualinvoke r0.<com.android.internal.net.VpnConfig: void updateAllowedFamilies(java.net.InetAddress)>($r7);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public void addLegacyRoutes(java.lang.String)
    {
        com.android.internal.net.VpnConfig r0;
        int i0, i1;
        java.lang.String $r2, $r3, $r6, r10;
        boolean $z0;
        android.net.RouteInfo $r4;
        android.net.IpPrefix $r5, $r8;
        java.util.List $r7;
        java.net.InetAddress $r9;
        java.lang.String[] r11;

        r0 := @this: com.android.internal.net.VpnConfig;

        r10 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r10.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r10.<java.lang.String: java.lang.String trim()>();

        r11 = virtualinvoke $r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        i0 = lengthof r11;

        i1 = 0;

     label2:
        if i1 >= i0 goto label3;

        $r4 = new android.net.RouteInfo;

        $r5 = new android.net.IpPrefix;

        $r6 = r11[i1];

        specialinvoke $r5.<android.net.IpPrefix: void <init>(java.lang.String)>($r6);

        specialinvoke $r4.<android.net.RouteInfo: void <init>(android.net.IpPrefix,java.net.InetAddress)>($r5, null);

        $r7 = r0.<com.android.internal.net.VpnConfig: java.util.List routes>;

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r4.<android.net.RouteInfo: android.net.IpPrefix getDestination()>();

        $r9 = virtualinvoke $r8.<android.net.IpPrefix: java.net.InetAddress getAddress()>();

        virtualinvoke r0.<com.android.internal.net.VpnConfig: void updateAllowedFamilies(java.net.InetAddress)>($r9);

        i1 = i1 + 1;

        goto label2;

     label3:
        return;
    }

    public int describeContents()
    {
        com.android.internal.net.VpnConfig r0;

        r0 := @this: com.android.internal.net.VpnConfig;

        return 0;
    }

    public java.lang.String toString()
    {
        com.android.internal.net.VpnConfig r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r8, $r11, $r17, $r21, $r25, $r29, $r33, $r37, $r56, $r62;
        int $i0;
        java.util.List $r16, $r20, $r24, $r28, $r32, $r36;
        android.app.PendingIntent $r40;
        long $l1;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.net.Network[] $r55;
        android.net.ProxyInfo $r59;

        r0 := @this: com.android.internal.net.VpnConfig;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VpnConfig");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{ user=");

        $r5 = r0.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", interface=");

        $r8 = r0.<com.android.internal.net.VpnConfig: java.lang.String interfaze>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", session=");

        $r11 = r0.<com.android.internal.net.VpnConfig: java.lang.String session>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mtu=");

        $i0 = r0.<com.android.internal.net.VpnConfig: int mtu>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", addresses=");

        $r16 = r0.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        $r17 = staticinvoke <com.android.internal.net.VpnConfig: java.lang.String toString(java.util.List)>($r16);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", routes=");

        $r20 = r0.<com.android.internal.net.VpnConfig: java.util.List routes>;

        $r21 = staticinvoke <com.android.internal.net.VpnConfig: java.lang.String toString(java.util.List)>($r20);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", dns=");

        $r24 = r0.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        $r25 = staticinvoke <com.android.internal.net.VpnConfig: java.lang.String toString(java.util.List)>($r24);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", searchDomains=");

        $r28 = r0.<com.android.internal.net.VpnConfig: java.util.List searchDomains>;

        $r29 = staticinvoke <com.android.internal.net.VpnConfig: java.lang.String toString(java.util.List)>($r28);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", allowedApps=");

        $r32 = r0.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        $r33 = staticinvoke <com.android.internal.net.VpnConfig: java.lang.String toString(java.util.List)>($r32);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", disallowedApps=");

        $r36 = r0.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        $r37 = staticinvoke <com.android.internal.net.VpnConfig: java.lang.String toString(java.util.List)>($r36);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", configureIntent=");

        $r40 = r0.<com.android.internal.net.VpnConfig: android.app.PendingIntent configureIntent>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", startTime=");

        $l1 = r0.<com.android.internal.net.VpnConfig: long startTime>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", legacy=");

        $z0 = r0.<com.android.internal.net.VpnConfig: boolean legacy>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", blocking=");

        $z1 = r0.<com.android.internal.net.VpnConfig: boolean blocking>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", allowBypass=");

        $z2 = r0.<com.android.internal.net.VpnConfig: boolean allowBypass>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", allowIPv4=");

        $z3 = r0.<com.android.internal.net.VpnConfig: boolean allowIPv4>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", allowIPv6=");

        $z4 = r0.<com.android.internal.net.VpnConfig: boolean allowIPv6>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", underlyingNetworks=");

        $r55 = r0.<com.android.internal.net.VpnConfig: android.net.Network[] underlyingNetworks>;

        $r56 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r55);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", proxyInfo=");

        $r59 = r0.<com.android.internal.net.VpnConfig: android.net.ProxyInfo proxyInfo>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r62 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r62;
    }

    public void updateAllowedFamilies(java.net.InetAddress)
    {
        com.android.internal.net.VpnConfig r0;
        java.net.InetAddress r1;
        boolean $z0;

        r0 := @this: com.android.internal.net.VpnConfig;

        r1 := @parameter0: java.net.InetAddress;

        $z0 = r1 instanceof java.net.Inet4Address;

        if $z0 == 0 goto label1;

        r0.<com.android.internal.net.VpnConfig: boolean allowIPv4> = 1;

        goto label2;

     label1:
        r0.<com.android.internal.net.VpnConfig: boolean allowIPv6> = 1;

     label2:
        return;
    }

    public void writeToParcel(android.os.Parcel, int)
    {
        com.android.internal.net.VpnConfig r0;
        android.os.Parcel r1;
        int i0, $i1, i3, i4, i5, i6, i7, i8;
        java.lang.String $r2, $r3, $r4;
        java.util.List $r5, $r6, $r7, $r8, $r9, $r10;
        android.app.PendingIntent $r11;
        long $l2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.net.Network[] $r12;
        android.net.ProxyInfo $r13;

        r0 := @this: com.android.internal.net.VpnConfig;

        r1 := @parameter0: android.os.Parcel;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r2);

        $r3 = r0.<com.android.internal.net.VpnConfig: java.lang.String interfaze>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r3);

        $r4 = r0.<com.android.internal.net.VpnConfig: java.lang.String session>;

        virtualinvoke r1.<android.os.Parcel: void writeString(java.lang.String)>($r4);

        $i1 = r0.<com.android.internal.net.VpnConfig: int mtu>;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i1);

        $r5 = r0.<com.android.internal.net.VpnConfig: java.util.List addresses>;

        virtualinvoke r1.<android.os.Parcel: void writeTypedList(java.util.List)>($r5);

        $r6 = r0.<com.android.internal.net.VpnConfig: java.util.List routes>;

        virtualinvoke r1.<android.os.Parcel: void writeTypedList(java.util.List)>($r6);

        $r7 = r0.<com.android.internal.net.VpnConfig: java.util.List dnsServers>;

        virtualinvoke r1.<android.os.Parcel: void writeStringList(java.util.List)>($r7);

        $r8 = r0.<com.android.internal.net.VpnConfig: java.util.List searchDomains>;

        virtualinvoke r1.<android.os.Parcel: void writeStringList(java.util.List)>($r8);

        $r9 = r0.<com.android.internal.net.VpnConfig: java.util.List allowedApplications>;

        virtualinvoke r1.<android.os.Parcel: void writeStringList(java.util.List)>($r9);

        $r10 = r0.<com.android.internal.net.VpnConfig: java.util.List disallowedApplications>;

        virtualinvoke r1.<android.os.Parcel: void writeStringList(java.util.List)>($r10);

        $r11 = r0.<com.android.internal.net.VpnConfig: android.app.PendingIntent configureIntent>;

        virtualinvoke r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>($r11, i0);

        $l2 = r0.<com.android.internal.net.VpnConfig: long startTime>;

        virtualinvoke r1.<android.os.Parcel: void writeLong(long)>($l2);

        $z0 = r0.<com.android.internal.net.VpnConfig: boolean legacy>;

        i3 = (int) $z0;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i3);

        $z1 = r0.<com.android.internal.net.VpnConfig: boolean blocking>;

        i4 = (int) $z1;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i4);

        $z2 = r0.<com.android.internal.net.VpnConfig: boolean allowBypass>;

        i5 = (int) $z2;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i5);

        $z3 = r0.<com.android.internal.net.VpnConfig: boolean allowIPv4>;

        i6 = (int) $z3;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i6);

        $z4 = r0.<com.android.internal.net.VpnConfig: boolean allowIPv6>;

        i7 = (int) $z4;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i7);

        $z5 = r0.<com.android.internal.net.VpnConfig: boolean isMetered>;

        i8 = (int) $z5;

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>(i8);

        $r12 = r0.<com.android.internal.net.VpnConfig: android.net.Network[] underlyingNetworks>;

        virtualinvoke r1.<android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)>($r12, i0);

        $r13 = r0.<com.android.internal.net.VpnConfig: android.net.ProxyInfo proxyInfo>;

        virtualinvoke r1.<android.os.Parcel: void writeParcelable(android.os.Parcelable,int)>($r13, i0);

        return;
    }
}
