public final class com.android.internal.os.AtomicDirectory extends java.lang.Object
{
    private static final java.lang.String LOG_TAG;
    private final java.io.File mBackupDirectory;
    private final java.io.File mBaseDirectory;
    private final android.util.ArrayMap mOpenFiles;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        $r0 = class "Lcom/android/internal/os/AtomicDirectory;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.internal.os.AtomicDirectory: java.lang.String LOG_TAG> = $r1;

        return;
    }

    public void <init>(java.io.File)
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File r1, $r9;
        android.util.ArrayMap $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r6, $r10;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        r1 := @parameter0: java.io.File;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.internal.os.AtomicDirectory: android.util.ArrayMap mOpenFiles> = $r3;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r1, "baseDirectory cannot be null");

        r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory> = r1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r1.<java.io.File: java.lang.String getPath()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_bak");

        $r9 = new java.io.File;

        $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.io.File: void <init>(java.lang.String)>($r10);

        r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory> = $r9;

        return;
    }

    private void backup() throws java.io.IOException
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File $r2, $r3, $r4, $r5, $r8, $r11, $r15;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6;
        java.io.IOException $r13;
        java.lang.String $r14;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        $r2 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $r15 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        staticinvoke <com.android.internal.os.AtomicDirectory: boolean deleteDirectory(java.io.File)>($r15);

     label2:
        $r5 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $r4 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        $z2 = virtualinvoke $r5.<java.io.File: boolean renameTo(java.io.File)>($r4);

        if $z2 == 0 goto label3;

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void syncParentDirectory()>();

        return;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to backup ");

        $r8 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r11 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = new java.io.IOException;

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r13;
    }

    private static boolean deleteDirectory(java.io.File)
    {
        java.io.File r0;
        boolean $z0;

        r0 := @parameter0: java.io.File;

        $z0 = staticinvoke <android.os.FileUtils: boolean deleteContentsAndDir(java.io.File)>(r0);

        return $z0;
    }

    private void ensureBaseDirectory() throws java.io.IOException
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File $r2, $r3, $r6, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        java.io.IOException $r8;
        java.lang.String $r9, $r11;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        $r2 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $z1 = virtualinvoke $r3.<java.io.File: boolean mkdirs()>();

        if $z1 == 0 goto label2;

        $r10 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $r11 = virtualinvoke $r10.<java.io.File: java.lang.String getPath()>();

        staticinvoke <android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>($r11, 505, -1, -1);

        return;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to create directory ");

        $r6 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = new java.io.IOException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private void restore() throws java.io.IOException
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File $r2, $r3, $r4, $r5, $r8, $r11, $r15;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r6;
        java.io.IOException $r13;
        java.lang.String $r14;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        $r2 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $z1 = virtualinvoke $r3.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $r15 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        staticinvoke <com.android.internal.os.AtomicDirectory: boolean deleteDirectory(java.io.File)>($r15);

     label2:
        $r5 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        $r4 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $z2 = virtualinvoke $r5.<java.io.File: boolean renameTo(java.io.File)>($r4);

        if $z2 == 0 goto label3;

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void syncParentDirectory()>();

        return;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to restore ");

        $r8 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r11 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = new java.io.IOException;

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r14);

        throw $r13;
    }

    private static void syncDirectory(java.io.File)
    {
        java.lang.StringBuilder r0, $r6;
        int $i0;
        java.lang.Throwable $r1, $r5, $r10;
        java.lang.String $r4, $r9, r12, r16, r18;
        java.io.File r11;
        java.io.FileDescriptor r13;

        r11 := @parameter0: java.io.File;

        r12 = virtualinvoke r11.<java.io.File: java.lang.String getAbsolutePath()>();

     label01:
        $i0 = <android.system.OsConstants: int O_RDONLY>;

        r13 = staticinvoke <android.system.Os: java.io.FileDescriptor open(java.lang.String,int,int)>(r12, $i0, 0);

     label02:
        staticinvoke <android.system.Os: void fsync(java.io.FileDescriptor)>(r13);

     label03:
        staticinvoke <android.os.FileUtils: void closeQuietly(java.io.FileDescriptor)>(r13);

        goto label08;

     label04:
        $r10 := @caughtexception;

        goto label09;

     label05:
        $r1 := @caughtexception;

     label06:
        r16 = <com.android.internal.os.AtomicDirectory: java.lang.String LOG_TAG>;

        r0 = new java.lang.StringBuilder;

        specialinvoke r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to fsync ");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r4 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r16, $r4, $r1);

     label07:
        goto label03;

     label08:
        return;

     label09:
        staticinvoke <android.os.FileUtils: void closeQuietly(java.io.FileDescriptor)>(r13);

        throw $r10;

     label10:
        $r5 := @caughtexception;

        r18 = <com.android.internal.os.AtomicDirectory: java.lang.String LOG_TAG>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to open ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r18, $r9, $r5);

        return;

        catch android.system.ErrnoException from label01 to label02 with label10;
        catch android.system.ErrnoException from label02 to label03 with label05;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label06 to label07 with label04;
    }

    private void syncParentDirectory()
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File $r1, $r2;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        $r1 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $r2 = virtualinvoke $r1.<java.io.File: java.io.File getParentFile()>();

        staticinvoke <com.android.internal.os.AtomicDirectory: void syncDirectory(java.io.File)>($r2);

        return;
    }

    private void throwIfSomeFilesOpen()
    {
        com.android.internal.os.AtomicDirectory r0;
        android.util.ArrayMap $r2, $r5;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.util.Set $r6;
        java.lang.Object[] $r7;
        java.lang.String $r8, $r11;
        java.lang.IllegalStateException $r10;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        $r2 = r0.<com.android.internal.os.AtomicDirectory: android.util.ArrayMap mOpenFiles>;

        $z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unclosed files: ");

        $r5 = r0.<com.android.internal.os.AtomicDirectory: android.util.ArrayMap mOpenFiles>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.util.Set keySet()>();

        $r7 = interfaceinvoke $r6.<java.util.Set: java.lang.Object[] toArray()>();

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r7);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = new java.lang.IllegalStateException;

        $r11 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    public void closeWrite(java.io.FileOutputStream)
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.FileOutputStream r1;
        int i0;
        android.util.ArrayMap $r3, $r9;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        r1 := @parameter0: java.io.FileOutputStream;

        $r3 = r0.<com.android.internal.os.AtomicDirectory: android.util.ArrayMap mOpenFiles>;

        i0 = virtualinvoke $r3.<android.util.ArrayMap: int indexOfValue(java.lang.Object)>(r1);

        if i0 < 0 goto label1;

        $r9 = r0.<com.android.internal.os.AtomicDirectory: android.util.ArrayMap mOpenFiles>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i0);

        staticinvoke <android.os.FileUtils: boolean sync(java.io.FileOutputStream)>(r1);

        staticinvoke <android.os.FileUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown file stream ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public void delete()
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File $r1, $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, z4, z5;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        z4 = 0;

        $r1 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $z3 = staticinvoke <com.android.internal.os.AtomicDirectory: boolean deleteDirectory(java.io.File)>($r4);

        z4 = 0 | $z3;

     label1:
        z5 = z4;

        $r2 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label2;

        $r3 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        $z2 = staticinvoke <com.android.internal.os.AtomicDirectory: boolean deleteDirectory(java.io.File)>($r3);

        z5 = z4 | $z2;

     label2:
        if z5 == 0 goto label3;

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void syncParentDirectory()>();

     label3:
        return;
    }

    public boolean exists()
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File $r1, $r2;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        $r1 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public void failWrite()
    {
        com.android.internal.os.AtomicDirectory r0;
        java.lang.Throwable $r2;
        java.lang.String $r3;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void throwIfSomeFilesOpen()>();

     label1:
        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void restore()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r3 = <com.android.internal.os.AtomicDirectory: java.lang.String LOG_TAG>;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, "Failed to restore in failWrite()", $r2);

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public void failWrite(java.io.FileOutputStream)
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.FileOutputStream r1;
        int i0;
        android.util.ArrayMap $r3, $r9;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        r1 := @parameter0: java.io.FileOutputStream;

        $r3 = r0.<com.android.internal.os.AtomicDirectory: android.util.ArrayMap mOpenFiles>;

        i0 = virtualinvoke $r3.<android.util.ArrayMap: int indexOfValue(java.lang.Object)>(r1);

        if i0 < 0 goto label1;

        $r9 = r0.<com.android.internal.os.AtomicDirectory: android.util.ArrayMap mOpenFiles>;

        virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object removeAt(int)>(i0);

        staticinvoke <android.os.FileUtils: void closeQuietly(java.lang.AutoCloseable)>(r1);

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown file stream ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public void finishRead()
    {
        com.android.internal.os.AtomicDirectory r0;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        return;
    }

    public void finishWrite()
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File $r1, $r2;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void throwIfSomeFilesOpen()>();

        $r1 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        staticinvoke <com.android.internal.os.AtomicDirectory: void syncDirectory(java.io.File)>($r1);

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void syncParentDirectory()>();

        $r2 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        staticinvoke <com.android.internal.os.AtomicDirectory: boolean deleteDirectory(java.io.File)>($r2);

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void syncParentDirectory()>();

        return;
    }

    public java.io.File getBackupDirectory()
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File $r1;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        $r1 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBackupDirectory>;

        return $r1;
    }

    public java.io.FileOutputStream openWrite(java.io.File) throws java.io.IOException
    {
        com.android.internal.os.AtomicDirectory r0;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r1, $r10;
        java.io.File $r3, $r7, $r8, r19;
        java.lang.IllegalArgumentException $r5, $r14;
        java.lang.String $r6, $r12, $r15;
        android.util.ArrayMap $r9, $r17;
        java.io.FileOutputStream $r16;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        r19 := @parameter0: java.io.File;

        $z0 = virtualinvoke r19.<java.io.File: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        $r7 = virtualinvoke r19.<java.io.File: java.io.File getParentFile()>();

        $r8 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        $z1 = virtualinvoke $r7.<java.io.File: boolean equals(java.lang.Object)>($r8);

        if $z1 == 0 goto label2;

        $r9 = r0.<com.android.internal.os.AtomicDirectory: android.util.ArrayMap mOpenFiles>;

        $z2 = virtualinvoke $r9.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r19);

        if $z2 != 0 goto label1;

        $r16 = new java.io.FileOutputStream;

        specialinvoke $r16.<java.io.FileOutputStream: void <init>(java.io.File)>(r19);

        $r17 = r0.<com.android.internal.os.AtomicDirectory: android.util.ArrayMap mOpenFiles>;

        virtualinvoke $r17.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r19, $r16);

        return $r16;

     label1:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Already open file ");

        $r12 = virtualinvoke r19.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = new java.lang.IllegalArgumentException;

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must be a file in ");

        $r3 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public java.io.File startRead() throws java.io.IOException
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File $r1;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void restore()>();

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void ensureBaseDirectory()>();

        $r1 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        return $r1;
    }

    public java.io.File startWrite() throws java.io.IOException
    {
        com.android.internal.os.AtomicDirectory r0;
        java.io.File $r1;

        r0 := @this: com.android.internal.os.AtomicDirectory;

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void backup()>();

        specialinvoke r0.<com.android.internal.os.AtomicDirectory: void ensureBaseDirectory()>();

        $r1 = r0.<com.android.internal.os.AtomicDirectory: java.io.File mBaseDirectory>;

        return $r1;
    }
}
