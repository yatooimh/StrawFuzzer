public class com.android.internal.os.BatteryStatsImpl$Counter extends android.os.BatteryStats$Counter implements com.android.internal.os.BatteryStatsImpl$TimeBaseObs
{
    final java.util.concurrent.atomic.AtomicInteger mCount;
    final com.android.internal.os.BatteryStatsImpl$TimeBase mTimeBase;

    public void <init>(com.android.internal.os.BatteryStatsImpl$TimeBase)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        com.android.internal.os.BatteryStatsImpl$TimeBase r1;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        r1 := @parameter0: com.android.internal.os.BatteryStatsImpl$TimeBase;

        specialinvoke r0.<android.os.BatteryStats$Counter: void <init>()>();

        $r2 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.android.internal.os.BatteryStatsImpl$Counter: java.util.concurrent.atomic.AtomicInteger mCount> = $r2;

        r0.<com.android.internal.os.BatteryStatsImpl$Counter: com.android.internal.os.BatteryStatsImpl$TimeBase mTimeBase> = r1;

        virtualinvoke r1.<com.android.internal.os.BatteryStatsImpl$TimeBase: void add(com.android.internal.os.BatteryStatsImpl$TimeBaseObs)>(r0);

        return;
    }

    public void <init>(com.android.internal.os.BatteryStatsImpl$TimeBase, android.os.Parcel)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        com.android.internal.os.BatteryStatsImpl$TimeBase r1;
        android.os.Parcel r2;
        java.util.concurrent.atomic.AtomicInteger $r4;
        int $i0;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        r1 := @parameter0: com.android.internal.os.BatteryStatsImpl$TimeBase;

        r2 := @parameter1: android.os.Parcel;

        specialinvoke r0.<android.os.BatteryStats$Counter: void <init>()>();

        $r4 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.android.internal.os.BatteryStatsImpl$Counter: java.util.concurrent.atomic.AtomicInteger mCount> = $r4;

        r0.<com.android.internal.os.BatteryStatsImpl$Counter: com.android.internal.os.BatteryStatsImpl$TimeBase mTimeBase> = r1;

        $i0 = virtualinvoke r2.<android.os.Parcel: int readInt()>();

        virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i0);

        virtualinvoke r1.<com.android.internal.os.BatteryStatsImpl$TimeBase: void add(com.android.internal.os.BatteryStatsImpl$TimeBaseObs)>(r0);

        return;
    }

    public static com.android.internal.os.BatteryStatsImpl$Counter readCounterFromParcel(com.android.internal.os.BatteryStatsImpl$TimeBase, android.os.Parcel)
    {
        com.android.internal.os.BatteryStatsImpl$TimeBase r0;
        android.os.Parcel r1;
        int $i0;
        com.android.internal.os.BatteryStatsImpl$Counter $r2;

        r0 := @parameter0: com.android.internal.os.BatteryStatsImpl$TimeBase;

        r1 := @parameter1: android.os.Parcel;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        if $i0 != 0 goto label1;

        return null;

     label1:
        $r2 = new com.android.internal.os.BatteryStatsImpl$Counter;

        specialinvoke $r2.<com.android.internal.os.BatteryStatsImpl$Counter: void <init>(com.android.internal.os.BatteryStatsImpl$TimeBase,android.os.Parcel)>(r0, r1);

        return $r2;
    }

    public static void writeCounterToParcel(android.os.Parcel, com.android.internal.os.BatteryStatsImpl$Counter)
    {
        android.os.Parcel r0;
        com.android.internal.os.BatteryStatsImpl$Counter r1;

        r0 := @parameter0: android.os.Parcel;

        r1 := @parameter1: com.android.internal.os.BatteryStatsImpl$Counter;

        if r1 != null goto label1;

        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(0);

        return;

     label1:
        virtualinvoke r0.<android.os.Parcel: void writeInt(int)>(1);

        virtualinvoke r1.<com.android.internal.os.BatteryStatsImpl$Counter: void writeToParcel(android.os.Parcel)>(r0);

        return;
    }

    void addAtomic(int)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        int i0;
        com.android.internal.os.BatteryStatsImpl$TimeBase $r1;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: com.android.internal.os.BatteryStatsImpl$TimeBase mTimeBase>;

        $z0 = virtualinvoke $r1.<com.android.internal.os.BatteryStatsImpl$TimeBase: boolean isRunning()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: java.util.concurrent.atomic.AtomicInteger mCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int addAndGet(int)>(i0);

     label1:
        return;
    }

    public void detach()
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        com.android.internal.os.BatteryStatsImpl$TimeBase $r1;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        $r1 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: com.android.internal.os.BatteryStatsImpl$TimeBase mTimeBase>;

        virtualinvoke $r1.<com.android.internal.os.BatteryStatsImpl$TimeBase: void remove(com.android.internal.os.BatteryStatsImpl$TimeBaseObs)>(r0);

        return;
    }

    public int getCountLocked(int)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        int i0, $i1;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: java.util.concurrent.atomic.AtomicInteger mCount>;

        $i1 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        return $i1;
    }

    public void logState(android.util.Printer, java.lang.String)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        android.util.Printer r1;
        java.lang.String r2, $r9;
        java.lang.StringBuilder $r4;
        java.util.concurrent.atomic.AtomicInteger $r7;
        int $i0;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        r1 := @parameter0: android.util.Printer;

        r2 := @parameter1: java.lang.String;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCount=");

        $r7 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: java.util.concurrent.atomic.AtomicInteger mCount>;

        $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.util.Printer: void println(java.lang.String)>($r9);

        return;
    }

    public void onTimeStarted(long, long, long)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        long l0, l1, l2;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        return;
    }

    public void onTimeStopped(long, long, long)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        long l0, l1, l2;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        return;
    }

    public void readSummaryFromParcelLocked(android.os.Parcel)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        android.os.Parcel r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        r1 := @parameter0: android.os.Parcel;

        $r2 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: java.util.concurrent.atomic.AtomicInteger mCount>;

        $i0 = virtualinvoke r1.<android.os.Parcel: int readInt()>();

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void set(int)>($i0);

        return;
    }

    public boolean reset(boolean)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        boolean z0;
        java.util.concurrent.atomic.AtomicInteger $r1;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: java.util.concurrent.atomic.AtomicInteger mCount>;

        virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(0);

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.os.BatteryStatsImpl$Counter: void detach()>();

     label1:
        return 1;
    }

    public void stepAtomic()
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        com.android.internal.os.BatteryStatsImpl$TimeBase $r1;
        boolean $z0;
        java.util.concurrent.atomic.AtomicInteger $r2;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        $r1 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: com.android.internal.os.BatteryStatsImpl$TimeBase mTimeBase>;

        $z0 = virtualinvoke $r1.<com.android.internal.os.BatteryStatsImpl$TimeBase: boolean isRunning()>();

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: java.util.concurrent.atomic.AtomicInteger mCount>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

     label1:
        return;
    }

    public void writeSummaryFromParcelLocked(android.os.Parcel)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        android.os.Parcel r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        r1 := @parameter0: android.os.Parcel;

        $r2 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: java.util.concurrent.atomic.AtomicInteger mCount>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i0);

        return;
    }

    public void writeToParcel(android.os.Parcel)
    {
        com.android.internal.os.BatteryStatsImpl$Counter r0;
        android.os.Parcel r1;
        java.util.concurrent.atomic.AtomicInteger $r2;
        int $i0;

        r0 := @this: com.android.internal.os.BatteryStatsImpl$Counter;

        r1 := @parameter0: android.os.Parcel;

        $r2 = r0.<com.android.internal.os.BatteryStatsImpl$Counter: java.util.concurrent.atomic.AtomicInteger mCount>;

        $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>();

        virtualinvoke r1.<android.os.Parcel: void writeInt(int)>($i0);

        return;
    }
}
