public class com.android.internal.os.KernelCpuProcStringReader extends java.lang.Object
{
    private static final com.android.internal.os.KernelCpuProcStringReader ACTIVE_TIME_READER;
    private static final com.android.internal.os.KernelCpuProcStringReader CLUSTER_TIME_READER;
    private static final int ERROR_THRESHOLD;
    private static final com.android.internal.os.KernelCpuProcStringReader FREQ_TIME_READER;
    private static final long FRESHNESS;
    private static final int MAX_BUFFER_SIZE;
    private static final java.lang.String PROC_UID_ACTIVE_TIME;
    private static final java.lang.String PROC_UID_CLUSTER_TIME;
    private static final java.lang.String PROC_UID_FREQ_TIME;
    private static final java.lang.String PROC_UID_USER_SYS_TIME;
    private static final java.lang.String TAG;
    private static final com.android.internal.os.KernelCpuProcStringReader USER_SYS_TIME_READER;
    private char[] mBuf;
    private int mErrors;
    private final java.nio.file.Path mFile;
    private long mLastReadTime;
    private final java.util.concurrent.locks.ReentrantReadWriteLock mLock;
    private final java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock;
    private int mSize;
    private final java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        com.android.internal.os.KernelCpuProcStringReader $r2, $r3, $r4, $r5;

        <com.android.internal.os.KernelCpuProcStringReader: java.lang.String PROC_UID_USER_SYS_TIME> = "/proc/uid_cputime/show_uid_stat";

        <com.android.internal.os.KernelCpuProcStringReader: java.lang.String PROC_UID_FREQ_TIME> = "/proc/uid_time_in_state";

        <com.android.internal.os.KernelCpuProcStringReader: java.lang.String PROC_UID_CLUSTER_TIME> = "/proc/uid_concurrent_policy_time";

        <com.android.internal.os.KernelCpuProcStringReader: java.lang.String PROC_UID_ACTIVE_TIME> = "/proc/uid_concurrent_active_time";

        <com.android.internal.os.KernelCpuProcStringReader: int MAX_BUFFER_SIZE> = 1048576;

        <com.android.internal.os.KernelCpuProcStringReader: long FRESHNESS> = 500L;

        <com.android.internal.os.KernelCpuProcStringReader: int ERROR_THRESHOLD> = 5;

        $r0 = class "Lcom/android/internal/os/KernelCpuProcStringReader;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.internal.os.KernelCpuProcStringReader: java.lang.String TAG> = $r1;

        $r2 = new com.android.internal.os.KernelCpuProcStringReader;

        specialinvoke $r2.<com.android.internal.os.KernelCpuProcStringReader: void <init>(java.lang.String)>("/proc/uid_time_in_state");

        <com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader FREQ_TIME_READER> = $r2;

        $r3 = new com.android.internal.os.KernelCpuProcStringReader;

        specialinvoke $r3.<com.android.internal.os.KernelCpuProcStringReader: void <init>(java.lang.String)>("/proc/uid_concurrent_active_time");

        <com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader ACTIVE_TIME_READER> = $r3;

        $r4 = new com.android.internal.os.KernelCpuProcStringReader;

        specialinvoke $r4.<com.android.internal.os.KernelCpuProcStringReader: void <init>(java.lang.String)>("/proc/uid_concurrent_policy_time");

        <com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader CLUSTER_TIME_READER> = $r4;

        $r5 = new com.android.internal.os.KernelCpuProcStringReader;

        specialinvoke $r5.<com.android.internal.os.KernelCpuProcStringReader: void <init>(java.lang.String)>("/proc/uid_cputime/show_uid_stat");

        <com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader USER_SYS_TIME_READER> = $r5;

        return;
    }

    public void <init>(java.lang.String)
    {
        com.android.internal.os.KernelCpuProcStringReader r0;
        java.lang.String r1;
        java.util.concurrent.locks.ReentrantReadWriteLock $r3, $r5;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r6;
        java.lang.String[] $r7;
        java.nio.file.Path $r8;

        r0 := @this: com.android.internal.os.KernelCpuProcStringReader;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.os.KernelCpuProcStringReader: int mErrors> = 0;

        r0.<com.android.internal.os.KernelCpuProcStringReader: long mLastReadTime> = 0L;

        $r3 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock mLock> = $r3;

        $r4 = virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock> = $r4;

        $r5 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock mLock>;

        $r6 = virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock> = $r6;

        $r7 = newarray (java.lang.String)[0];

        $r8 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r1, $r7);

        r0.<com.android.internal.os.KernelCpuProcStringReader: java.nio.file.Path mFile> = $r8;

        return;
    }

    static char[] access$000(com.android.internal.os.KernelCpuProcStringReader)
    {
        com.android.internal.os.KernelCpuProcStringReader r0;
        char[] $r1;

        r0 := @parameter0: com.android.internal.os.KernelCpuProcStringReader;

        $r1 = r0.<com.android.internal.os.KernelCpuProcStringReader: char[] mBuf>;

        return $r1;
    }

    static java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock access$100(com.android.internal.os.KernelCpuProcStringReader)
    {
        com.android.internal.os.KernelCpuProcStringReader r0;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r1;

        r0 := @parameter0: com.android.internal.os.KernelCpuProcStringReader;

        $r1 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock>;

        return $r1;
    }

    public static int asLongs(java.nio.CharBuffer, long[])
    {
        java.nio.CharBuffer r0;
        long[] r1;
        int i0, $i4, $i9, i10, $i12, i14;
        char c1;
        long l2, $l5, $l6, $l7, l11;
        byte $b3, $b8, $b13;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.nio.CharBuffer;

        r1 := @parameter1: long[];

        if r0 != null goto label1;

        return -1;

     label1:
        i0 = virtualinvoke r0.<java.nio.CharBuffer: int position()>();

        i10 = 0;

        l11 = -1L;

     label2:
        $i12 = virtualinvoke r0.<java.nio.CharBuffer: int remaining()>();

        if $i12 <= 0 goto label6;

        $i4 = lengthof r1;

        if i10 >= $i4 goto label6;

        c1 = virtualinvoke r0.<java.nio.CharBuffer: char get()>();

        $z0 = staticinvoke <com.android.internal.os.KernelCpuProcStringReader: boolean isNumber(char)>(c1);

        if $z0 != 0 goto label3;

        if c1 == 32 goto label3;

        if c1 == 58 goto label3;

        virtualinvoke r0.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);

        return -2;

     label3:
        $b13 = l11 cmp 0L;

        if $b13 >= 0 goto label4;

        $z2 = staticinvoke <com.android.internal.os.KernelCpuProcStringReader: boolean isNumber(char)>(c1);

        if $z2 == 0 goto label2;

        $i9 = c1 - 48;

        l11 = (long) $i9;

        goto label2;

     label4:
        $z1 = staticinvoke <com.android.internal.os.KernelCpuProcStringReader: boolean isNumber(char)>(c1);

        if $z1 == 0 goto label5;

        $l6 = 10L * l11;

        $l5 = (long) c1;

        $l7 = $l6 + $l5;

        l2 = $l7 - 48L;

        l11 = l2;

        $b8 = l2 cmp 0L;

        if $b8 >= 0 goto label2;

        virtualinvoke r0.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);

        return -3;

     label5:
        r1[i10] = l11;

        l11 = -1L;

        i10 = i10 + 1;

        goto label2;

     label6:
        i14 = i10;

        $b3 = l11 cmp 0L;

        if $b3 < 0 goto label7;

        r1[i10] = l11;

        i14 = i10 + 1;

     label7:
        virtualinvoke r0.<java.nio.CharBuffer: java.nio.Buffer position(int)>(i0);

        return i14;
    }

    private boolean dataValid()
    {
        com.android.internal.os.KernelCpuProcStringReader r0;
        int $i0;
        long $l1, $l2, $l3;
        byte $b4;
        boolean z0;

        r0 := @this: com.android.internal.os.KernelCpuProcStringReader;

        $i0 = r0.<com.android.internal.os.KernelCpuProcStringReader: int mSize>;

        if $i0 <= 0 goto label1;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l2 = r0.<com.android.internal.os.KernelCpuProcStringReader: long mLastReadTime>;

        $l3 = $l1 - $l2;

        $b4 = $l3 cmp 500L;

        if $b4 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static com.android.internal.os.KernelCpuProcStringReader getActiveTimeReaderInstance()
    {
        com.android.internal.os.KernelCpuProcStringReader $r0;

        $r0 = <com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader ACTIVE_TIME_READER>;

        return $r0;
    }

    static com.android.internal.os.KernelCpuProcStringReader getClusterTimeReaderInstance()
    {
        com.android.internal.os.KernelCpuProcStringReader $r0;

        $r0 = <com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader CLUSTER_TIME_READER>;

        return $r0;
    }

    static com.android.internal.os.KernelCpuProcStringReader getFreqTimeReaderInstance()
    {
        com.android.internal.os.KernelCpuProcStringReader $r0;

        $r0 = <com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader FREQ_TIME_READER>;

        return $r0;
    }

    static com.android.internal.os.KernelCpuProcStringReader getUserSysTimeReaderInstance()
    {
        com.android.internal.os.KernelCpuProcStringReader $r0;

        $r0 = <com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader USER_SYS_TIME_READER>;

        return $r0;
    }

    private static boolean isNumber(char)
    {
        char c0;
        boolean z0;

        c0 := @parameter0: char;

        if c0 < 48 goto label1;

        if c0 > 57 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator open()
    {
        com.android.internal.os.KernelCpuProcStringReader r0;
        com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator $r1;

        r0 := @this: com.android.internal.os.KernelCpuProcStringReader;

        $r1 = virtualinvoke r0.<com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator open(boolean)>(0);

        return $r1;
    }

    public com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator open(boolean)
    {
        com.android.internal.os.KernelCpuProcStringReader r0;
        boolean z0, $z1, $z2;
        int i0, $i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i16, $i17, i20, $i21, $i22, i23, i24;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r1, $r2, $r6, $r20;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r3, $r8, $r18, $r21, $r24, $r26, $r32;
        java.nio.file.Path $r4, $r15, $r29, $r36;
        char[] $r5, $r9, $r10, $r11, $r12, $r13, $r19, $r41, $r42;
        long $l2;
        com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator $r7, $r22, $r23;
        java.lang.String $r17, $r31, $r38, r43, r50, r53;
        java.lang.Throwable $r25, $r27, $r33, $r34, $r39;
        java.io.BufferedReader r40;
        java.lang.StringBuilder r44, r51, r54;

        r0 := @this: com.android.internal.os.KernelCpuProcStringReader;

        z0 := @parameter0: boolean;

        $i1 = r0.<com.android.internal.os.KernelCpuProcStringReader: int mErrors>;

        if $i1 < 5 goto label01;

        return null;

     label01:
        if z0 == 0 goto label02;

        $r24 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r24.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        goto label04;

     label02:
        $r1 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $z1 = specialinvoke r0.<com.android.internal.os.KernelCpuProcStringReader: boolean dataValid()>();

        if $z1 == 0 goto label03;

        $r23 = new com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator;

        $i12 = r0.<com.android.internal.os.KernelCpuProcStringReader: int mSize>;

        specialinvoke $r23.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: void <init>(com.android.internal.os.KernelCpuProcStringReader,int)>(r0, $i12);

        return $r23;

     label03:
        $r2 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r3 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        $z2 = specialinvoke r0.<com.android.internal.os.KernelCpuProcStringReader: boolean dataValid()>();

        if $z2 == 0 goto label04;

        $r20 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock>;

        virtualinvoke $r20.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $r21 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r21.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        $r22 = new com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator;

        $i11 = r0.<com.android.internal.os.KernelCpuProcStringReader: int mSize>;

        specialinvoke $r22.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: void <init>(com.android.internal.os.KernelCpuProcStringReader,int)>(r0, $i11);

        return $r22;

     label04:
        r0.<com.android.internal.os.KernelCpuProcStringReader: int mSize> = 0;

        i0 = staticinvoke <android.os.StrictMode: int allowThreadDiskReadsMask()>();

     label05:
        $r4 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.nio.file.Path mFile>;

        r40 = staticinvoke <java.nio.file.Files: java.io.BufferedReader newBufferedReader(java.nio.file.Path)>($r4);

     label06:
        i20 = 0;

     label07:
        $r5 = r0.<com.android.internal.os.KernelCpuProcStringReader: char[] mBuf>;

        if $r5 != null goto label09;

        $r19 = newarray (char)[1024];

        r0.<com.android.internal.os.KernelCpuProcStringReader: char[] mBuf> = $r19;

     label08:
        i20 = 0;

     label09:
        $r41 = r0.<com.android.internal.os.KernelCpuProcStringReader: char[] mBuf>;

        $r42 = r0.<com.android.internal.os.KernelCpuProcStringReader: char[] mBuf>;

        $i21 = lengthof $r42;

        $i22 = $i21 - i20;

        i23 = virtualinvoke r40.<java.io.BufferedReader: int read(char[],int,int)>($r41, i20, $i22);

     label10:
        if i23 < 0 goto label17;

        i24 = i20 + i23;

        i20 = i24;

     label11:
        $r9 = r0.<com.android.internal.os.KernelCpuProcStringReader: char[] mBuf>;

        $i3 = lengthof $r9;

        if i24 != $i3 goto label09;

        $r10 = r0.<com.android.internal.os.KernelCpuProcStringReader: char[] mBuf>;

        $i4 = lengthof $r10;

        if $i4 != 1048576 goto label15;

        $i8 = r0.<com.android.internal.os.KernelCpuProcStringReader: int mErrors>;

        $i9 = $i8 + 1;

        r0.<com.android.internal.os.KernelCpuProcStringReader: int mErrors> = $i9;

        r43 = <com.android.internal.os.KernelCpuProcStringReader: java.lang.String TAG>;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Proc file too large: ");

        $r15 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.nio.file.Path mFile>;

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r43, $r17);

     label12:
        if r40 == null goto label14;

     label13:
        virtualinvoke r40.<java.io.BufferedReader: void close()>();

     label14:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i0);

        $r18 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r18.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return null;

     label15:
        $r12 = r0.<com.android.internal.os.KernelCpuProcStringReader: char[] mBuf>;

        $r11 = r0.<com.android.internal.os.KernelCpuProcStringReader: char[] mBuf>;

        $i5 = lengthof $r11;

        $i6 = $i5 << 1;

        $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i6, 1048576);

        $r13 = staticinvoke <java.util.Arrays: char[] copyOf(char[],int)>($r12, $i7);

        r0.<com.android.internal.os.KernelCpuProcStringReader: char[] mBuf> = $r13;

     label16:
        i20 = i24;

        goto label09;

     label17:
        r0.<com.android.internal.os.KernelCpuProcStringReader: int mSize> = i20;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.os.KernelCpuProcStringReader: long mLastReadTime> = $l2;

        $r6 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $r7 = new com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator;

        specialinvoke $r7.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: void <init>(com.android.internal.os.KernelCpuProcStringReader,int)>(r0, i20);

     label18:
        if r40 == null goto label20;

     label19:
        virtualinvoke r40.<java.io.BufferedReader: void close()>();

     label20:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i0);

        $r8 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r8.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return $r7;

     label21:
        $r33 := @caughtexception;

        if r40 == null goto label26;

     label22:
        virtualinvoke r40.<java.io.BufferedReader: void close()>();

     label23:
        goto label26;

     label24:
        $r39 := @caughtexception;

     label25:
        virtualinvoke $r33.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r39);

     label26:
        throw $r33;

     label27:
        $r25 := @caughtexception;

        goto label34;

     label28:
        $r27 := @caughtexception;

     label29:
        $i13 = r0.<com.android.internal.os.KernelCpuProcStringReader: int mErrors>;

        $i14 = $i13 + 1;

        r0.<com.android.internal.os.KernelCpuProcStringReader: int mErrors> = $i14;

        r50 = <com.android.internal.os.KernelCpuProcStringReader: java.lang.String TAG>;

        r51 = new java.lang.StringBuilder;

        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error reading ");

        $r29 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.nio.file.Path mFile>;

        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>(r50, $r31, $r27);

     label30:
        goto label33;

     label31:
        $r34 := @caughtexception;

     label32:
        $i16 = r0.<com.android.internal.os.KernelCpuProcStringReader: int mErrors>;

        $i17 = $i16 + 1;

        r0.<com.android.internal.os.KernelCpuProcStringReader: int mErrors> = $i17;

        r53 = <com.android.internal.os.KernelCpuProcStringReader: java.lang.String TAG>;

        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File not found. It\'s normal if not implemented: ");

        $r36 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.nio.file.Path mFile>;

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r36);

        $r38 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r53, $r38);

     label33:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i0);

        $r32 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r32.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return null;

     label34:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i0);

        $r26 = r0.<com.android.internal.os.KernelCpuProcStringReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r26.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        throw $r25;

        catch java.io.FileNotFoundException from label05 to label06 with label31;
        catch java.nio.file.NoSuchFileException from label05 to label06 with label31;
        catch java.io.IOException from label05 to label06 with label28;
        catch java.lang.Throwable from label05 to label06 with label27;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label11 to label12 with label21;
        catch java.io.FileNotFoundException from label13 to label14 with label31;
        catch java.nio.file.NoSuchFileException from label13 to label14 with label31;
        catch java.io.IOException from label13 to label14 with label28;
        catch java.lang.Throwable from label13 to label14 with label27;
        catch java.lang.Throwable from label15 to label16 with label21;
        catch java.lang.Throwable from label17 to label18 with label21;
        catch java.io.FileNotFoundException from label19 to label20 with label31;
        catch java.nio.file.NoSuchFileException from label19 to label20 with label31;
        catch java.io.IOException from label19 to label20 with label28;
        catch java.lang.Throwable from label19 to label20 with label27;
        catch java.lang.Throwable from label22 to label23 with label24;
        catch java.io.FileNotFoundException from label25 to label26 with label31;
        catch java.nio.file.NoSuchFileException from label25 to label26 with label31;
        catch java.io.IOException from label25 to label26 with label28;
        catch java.lang.Throwable from label25 to label26 with label27;
        catch java.io.FileNotFoundException from label26 to label27 with label31;
        catch java.nio.file.NoSuchFileException from label26 to label27 with label31;
        catch java.io.IOException from label26 to label27 with label28;
        catch java.lang.Throwable from label26 to label27 with label27;
        catch java.lang.Throwable from label29 to label30 with label27;
        catch java.lang.Throwable from label32 to label33 with label27;
    }
}
