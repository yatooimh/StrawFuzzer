public class com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator extends java.lang.Object
{
    private final int[] mBucketStartIndices;
    private final int mNumBuckets;
    private final int mNumFrequencies;

    public void <init>(long[], int)
    {
        com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator r0;
        int i0, $i1, $i2, $i3;
        int[] $r1, r3;
        long[] r2;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator;

        r2 := @parameter0: long[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $i1 = lengthof r2;

        r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int mNumFrequencies> = $i1;

        $r1 = staticinvoke <com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int[] getClusterStartIndices(long[])>(r2);

        $i2 = r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int mNumFrequencies>;

        r3 = staticinvoke <com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int[] getBucketStartIndices(int[],int,int)>($r1, i0, $i2);

        r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int[] mBucketStartIndices> = r3;

        $i3 = lengthof r3;

        r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int mNumBuckets> = $i3;

        return;
    }

    private static int[] getBucketStartIndices(int[], int, int)
    {
        int[] r0, $r3, $r5;
        int i0, i1, i2, i3, i4, i5, i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16;
        java.util.ArrayList $r2;
        java.lang.Integer $r4;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = lengthof r0;

        if i2 <= i0 goto label1;

        $r5 = staticinvoke <java.util.Arrays: int[] copyOfRange(int[],int,int)>(r0, 0, i0);

        return $r5;

     label1:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        i14 = 0;

     label2:
        if i14 >= i2 goto label8;

        i3 = staticinvoke <com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int getLowerBound(int,int[])>(i14, r0);

        i4 = staticinvoke <com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int getUpperBound(int,int[],int)>(i14, r0, i1);

        $i7 = i2 - 1;

        if i14 == $i7 goto label3;

        i15 = i0 / i2;

        goto label4;

     label3:
        $i9 = i2 - 1;

        $i8 = i0 / i2;

        $i10 = $i9 * $i8;

        i15 = i0 - $i10;

     label4:
        $i11 = i4 - i3;

        $i12 = $i11 / i15;

        i5 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i12);

        i16 = 0;

     label5:
        if i16 >= i15 goto label7;

        $i13 = i16 * i5;

        i6 = $i13 + i3;

        if i6 < i4 goto label6;

        goto label7;

     label6:
        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

        i16 = i16 + 1;

        goto label5;

     label7:
        i14 = i14 + 1;

        goto label2;

     label8:
        $r3 = staticinvoke <com.android.internal.util.ArrayUtils: int[] convertToIntArray(java.util.List)>($r2);

        return $r3;
    }

    private static int[] getClusterStartIndices(long[])
    {
        long[] r0;
        java.util.ArrayList $r2;
        java.lang.Integer $r3, $r5;
        int $i0, $i1, $i2, $i6, i7;
        int[] $r4;
        long $l3, $l4;
        byte $b5;

        r0 := @parameter0: long[];

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3);

        i7 = 0;

     label1:
        $i0 = lengthof r0;

        $i1 = $i0 - 1;

        if i7 >= $i1 goto label3;

        $l4 = r0[i7];

        $i2 = i7 + 1;

        $l3 = r0[$i2];

        $b5 = $l4 cmp $l3;

        if $b5 < 0 goto label2;

        $i6 = i7 + 1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r5);

     label2:
        i7 = i7 + 1;

        goto label1;

     label3:
        $r4 = staticinvoke <com.android.internal.util.ArrayUtils: int[] convertToIntArray(java.util.List)>($r2);

        return $r4;
    }

    private static int getLowerBound(int, int[])
    {
        int i0, $i1;
        int[] r0;

        i0 := @parameter0: int;

        r0 := @parameter1: int[];

        $i1 = r0[i0];

        return $i1;
    }

    private static int getUpperBound(int, int[], int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;
        int[] r0;

        i0 := @parameter0: int;

        r0 := @parameter1: int[];

        i1 := @parameter2: int;

        $i2 = lengthof r0;

        $i3 = $i2 - 1;

        if i0 == $i3 goto label1;

        $i4 = i0 + 1;

        $i5 = r0[$i4];

        return $i5;

     label1:
        return i1;
    }

    public int[] bucketFrequencies(long[])
    {
        com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator r0;
        long[] r1;
        int[] r2, $r3;
        int $i0, $i1, $i2, $i3, $i5, i6, $i7;
        long $l4;
        boolean z0;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator;

        r1 := @parameter0: long[];

        $i1 = lengthof r1;

        $i0 = r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int mNumFrequencies>;

        if $i1 != $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z0);

        $i2 = r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int mNumBuckets>;

        r2 = newarray (int)[$i2];

        i6 = 0;

     label3:
        $i7 = lengthof r2;

        if i6 >= $i7 goto label4;

        $r3 = r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int[] mBucketStartIndices>;

        $i3 = $r3[i6];

        $l4 = r1[$i3];

        $i5 = (int) $l4;

        r2[i6] = $i5;

        i6 = i6 + 1;

        goto label3;

     label4:
        return r2;
    }

    public int[] bucketValues(long[])
    {
        com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator r0;
        long[] r1;
        int[] r2, $r3, $r4;
        int i0, $i1, $i2, $i3, $i4, $i5, $i9, i10, $i11, i12;
        long $l6, $l7, $l8;
        boolean z0;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator;

        r1 := @parameter0: long[];

        $i2 = lengthof r1;

        $i1 = r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int mNumFrequencies>;

        if $i2 != $i1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean)>(z0);

        $i3 = r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int mNumBuckets>;

        r2 = newarray (int)[$i3];

        i10 = 0;

     label3:
        $i11 = r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int mNumBuckets>;

        if i10 >= $i11 goto label6;

        $r3 = r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int[] mBucketStartIndices>;

        i12 = staticinvoke <com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int getLowerBound(int,int[])>(i10, $r3);

        $r4 = r0.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int[] mBucketStartIndices>;

        $i4 = lengthof r1;

        i0 = staticinvoke <com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int getUpperBound(int,int[],int)>(i10, $r4, $i4);

     label4:
        if i12 >= i0 goto label5;

        $i5 = r2[i10];

        $l7 = (long) $i5;

        $l6 = r1[i12];

        $l8 = $l7 + $l6;

        $i9 = (int) $l8;

        r2[i10] = $i9;

        i12 = i12 + 1;

        goto label4;

     label5:
        i10 = i10 + 1;

        goto label3;

     label6:
        return r2;
    }
}
