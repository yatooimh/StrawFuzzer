public class com.android.internal.os.KernelCpuThreadReader extends java.lang.Object
{
    private static final java.lang.String CPU_STATISTICS_FILENAME;
    private static final boolean DEBUG;
    private static final java.nio.file.Path DEFAULT_INITIAL_TIME_IN_STATE_PATH;
    private static final java.lang.String DEFAULT_PROCESS_NAME;
    private static final java.nio.file.Path DEFAULT_PROC_PATH;
    private static final java.lang.String DEFAULT_THREAD_NAME;
    private static final int ID_ERROR;
    private static final java.lang.String PROCESS_DIRECTORY_FILTER;
    private static final java.lang.String PROCESS_NAME_FILENAME;
    private static final java.lang.String TAG;
    private static final java.lang.String THREAD_NAME_FILENAME;
    private int[] mFrequenciesKhz;
    private com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator mFrequencyBucketCreator;
    private final com.android.internal.os.KernelCpuThreadReader$Injector mInjector;
    private final java.nio.file.Path mProcPath;
    private final com.android.internal.os.ProcTimeInStateReader mProcTimeInStateReader;
    private java.util.function.Predicate mUidPredicate;

    static void <clinit>()
    {
        java.nio.file.Path r0, $r2;
        java.lang.String[] $r1;

        <com.android.internal.os.KernelCpuThreadReader: java.lang.String THREAD_NAME_FILENAME> = "comm";

        <com.android.internal.os.KernelCpuThreadReader: java.lang.String TAG> = "KernelCpuThreadReader";

        <com.android.internal.os.KernelCpuThreadReader: java.lang.String PROCESS_NAME_FILENAME> = "cmdline";

        <com.android.internal.os.KernelCpuThreadReader: java.lang.String PROCESS_DIRECTORY_FILTER> = "[0-9]*";

        <com.android.internal.os.KernelCpuThreadReader: int ID_ERROR> = -1;

        <com.android.internal.os.KernelCpuThreadReader: java.lang.String DEFAULT_THREAD_NAME> = "unknown_thread";

        <com.android.internal.os.KernelCpuThreadReader: java.lang.String DEFAULT_PROCESS_NAME> = "unknown_process";

        <com.android.internal.os.KernelCpuThreadReader: boolean DEBUG> = 0;

        <com.android.internal.os.KernelCpuThreadReader: java.lang.String CPU_STATISTICS_FILENAME> = "time_in_state";

        $r1 = newarray (java.lang.String)[0];

        r0 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>("/proc", $r1);

        <com.android.internal.os.KernelCpuThreadReader: java.nio.file.Path DEFAULT_PROC_PATH> = r0;

        $r2 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("self/time_in_state");

        <com.android.internal.os.KernelCpuThreadReader: java.nio.file.Path DEFAULT_INITIAL_TIME_IN_STATE_PATH> = $r2;

        return;
    }

    public void <init>(int, java.util.function.Predicate, java.nio.file.Path, java.nio.file.Path, com.android.internal.os.KernelCpuThreadReader$Injector) throws java.io.IOException
    {
        com.android.internal.os.KernelCpuThreadReader r0;
        int i0;
        java.util.function.Predicate r1;
        java.nio.file.Path r2, r3;
        com.android.internal.os.KernelCpuThreadReader$Injector r4;
        com.android.internal.os.ProcTimeInStateReader $r5;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader;

        i0 := @parameter0: int;

        r1 := @parameter1: java.util.function.Predicate;

        r2 := @parameter2: java.nio.file.Path;

        r3 := @parameter3: java.nio.file.Path;

        r4 := @parameter4: com.android.internal.os.KernelCpuThreadReader$Injector;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.os.KernelCpuThreadReader: java.util.function.Predicate mUidPredicate> = r1;

        r0.<com.android.internal.os.KernelCpuThreadReader: java.nio.file.Path mProcPath> = r2;

        $r5 = new com.android.internal.os.ProcTimeInStateReader;

        specialinvoke $r5.<com.android.internal.os.ProcTimeInStateReader: void <init>(java.nio.file.Path)>(r3);

        r0.<com.android.internal.os.KernelCpuThreadReader: com.android.internal.os.ProcTimeInStateReader mProcTimeInStateReader> = $r5;

        r0.<com.android.internal.os.KernelCpuThreadReader: com.android.internal.os.KernelCpuThreadReader$Injector mInjector> = r4;

        virtualinvoke r0.<com.android.internal.os.KernelCpuThreadReader: void setNumBuckets(int)>(i0);

        return;
    }

    public static com.android.internal.os.KernelCpuThreadReader create(int, java.util.function.Predicate)
    {
        int i0;
        java.nio.file.Path r0, r1;
        com.android.internal.os.KernelCpuThreadReader$Injector r2;
        com.android.internal.os.KernelCpuThreadReader $r3;
        java.lang.Throwable $r4;
        java.util.function.Predicate r5;

        i0 := @parameter0: int;

        r5 := @parameter1: java.util.function.Predicate;

     label1:
        r0 = <com.android.internal.os.KernelCpuThreadReader: java.nio.file.Path DEFAULT_PROC_PATH>;

        r1 = <com.android.internal.os.KernelCpuThreadReader: java.nio.file.Path DEFAULT_INITIAL_TIME_IN_STATE_PATH>;

        r2 = new com.android.internal.os.KernelCpuThreadReader$Injector;

        specialinvoke r2.<com.android.internal.os.KernelCpuThreadReader$Injector: void <init>()>();

        $r3 = new com.android.internal.os.KernelCpuThreadReader;

        specialinvoke $r3.<com.android.internal.os.KernelCpuThreadReader: void <init>(int,java.util.function.Predicate,java.nio.file.Path,java.nio.file.Path,com.android.internal.os.KernelCpuThreadReader$Injector)>(i0, r5, r0, r1, r2);

     label2:
        return $r3;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("KernelCpuThreadReader", "Failed to initialize KernelCpuThreadReader", $r4);

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage getProcessCpuUsage(java.nio.file.Path, int, int)
    {
        com.android.internal.os.KernelCpuThreadReader r0;
        int i0, i1;
        java.util.Iterator r2;
        com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage r3;
        java.util.ArrayList $r4;
        boolean $z0, $z2;
        com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage $r5;
        java.lang.String $r6;
        java.lang.Object $r7;
        java.nio.file.Path $r8, r12, r13;
        java.lang.Throwable $r9, $r10, $r11;
        java.nio.file.DirectoryStream r14;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader;

        r12 := @parameter0: java.nio.file.Path;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r13 = interfaceinvoke r12.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("task");

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

     label01:
        r14 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)>(r13);

     label02:
        r2 = interfaceinvoke r14.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>();

     label03:
        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label07;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r8 = (java.nio.file.Path) $r7;

        r3 = specialinvoke r0.<com.android.internal.os.KernelCpuThreadReader: com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage getThreadCpuUsage(java.nio.file.Path)>($r8);

     label04:
        if r3 != null goto label05;

        goto label03;

     label05:
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label06:
        goto label03;

     label07:
        if r14 == null goto label09;

     label08:
        interfaceinvoke r14.<java.nio.file.DirectoryStream: void close()>();

     label09:
        $z0 = virtualinvoke $r4.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label10;

        return null;

     label10:
        $r5 = new com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage;

        $r6 = specialinvoke r0.<com.android.internal.os.KernelCpuThreadReader: java.lang.String getProcessName(java.nio.file.Path)>(r12);

        specialinvoke $r5.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: void <init>(int,java.lang.String,int,java.util.ArrayList)>(i0, $r6, i1, $r4);

        return $r5;

     label11:
        $r11 := @caughtexception;

        if r14 == null goto label16;

     label12:
        interfaceinvoke r14.<java.nio.file.DirectoryStream: void close()>();

     label13:
        goto label16;

     label14:
        $r10 := @caughtexception;

     label15:
        virtualinvoke $r11.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r10);

     label16:
        throw $r11;

     label17:
        $r9 := @caughtexception;

        return null;

        catch java.io.IOException from label01 to label02 with label17;
        catch java.nio.file.DirectoryIteratorException from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.io.IOException from label08 to label09 with label17;
        catch java.nio.file.DirectoryIteratorException from label08 to label09 with label17;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.nio.file.DirectoryIteratorException from label15 to label16 with label17;
        catch java.io.IOException from label16 to label17 with label17;
        catch java.nio.file.DirectoryIteratorException from label16 to label17 with label17;
    }

    private int getProcessId(java.nio.file.Path)
    {
        com.android.internal.os.KernelCpuThreadReader r0;
        int i0;
        java.nio.file.Path $r3, r10;
        java.lang.Throwable $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r9, r11;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader;

        r10 := @parameter0: java.nio.file.Path;

        $r3 = interfaceinvoke r10.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        r11 = interfaceinvoke $r3.<java.nio.file.Path: java.lang.String toString()>();

     label1:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r11);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to parse ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" as process ID");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("KernelCpuThreadReader", $r9, $r4);

        return -1;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private java.lang.String getProcessName(java.nio.file.Path)
    {
        com.android.internal.os.KernelCpuThreadReader r0;
        java.nio.file.Path $r1, r3;
        java.lang.String $r2, r4;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader;

        r3 := @parameter0: java.nio.file.Path;

        $r1 = interfaceinvoke r3.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("cmdline");

        $r2 = interfaceinvoke $r1.<java.nio.file.Path: java.lang.String toString()>();

        r4 = staticinvoke <com.android.internal.os.ProcStatsUtil: java.lang.String readSingleLineProcFile(java.lang.String)>($r2);

        if r4 == null goto label1;

        return r4;

     label1:
        return "unknown_process";
    }

    private com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage getThreadCpuUsage(java.nio.file.Path)
    {
        com.android.internal.os.KernelCpuThreadReader r0;
        int i0;
        java.lang.String r1, $r3;
        java.nio.file.Path $r2, r9, r10;
        com.android.internal.os.ProcTimeInStateReader $r4;
        com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage $r5;
        com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator $r6;
        int[] $r7;
        java.lang.Throwable $r8;
        long[] r11;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader;

        r9 := @parameter0: java.nio.file.Path;

     label1:
        $r2 = interfaceinvoke r9.<java.nio.file.Path: java.nio.file.Path getFileName()>();

        $r3 = interfaceinvoke $r2.<java.nio.file.Path: java.lang.String toString()>();

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

     label2:
        r1 = specialinvoke r0.<com.android.internal.os.KernelCpuThreadReader: java.lang.String getThreadName(java.nio.file.Path)>(r9);

        r10 = interfaceinvoke r9.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("time_in_state");

        $r4 = r0.<com.android.internal.os.KernelCpuThreadReader: com.android.internal.os.ProcTimeInStateReader mProcTimeInStateReader>;

        r11 = virtualinvoke $r4.<com.android.internal.os.ProcTimeInStateReader: long[] getUsageTimesMillis(java.nio.file.Path)>(r10);

        if r11 != null goto label3;

        return null;

     label3:
        $r5 = new com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage;

        $r6 = r0.<com.android.internal.os.KernelCpuThreadReader: com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator mFrequencyBucketCreator>;

        $r7 = virtualinvoke $r6.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int[] bucketValues(long[])>(r11);

        specialinvoke $r5.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: void <init>(int,java.lang.String,int[])>(i0, r1, $r7);

        return $r5;

     label4:
        $r8 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("KernelCpuThreadReader", "Failed to parse thread ID when iterating over /proc/*/task", $r8);

        return null;

        catch java.lang.NumberFormatException from label1 to label2 with label4;
    }

    private java.lang.String getThreadName(java.nio.file.Path)
    {
        com.android.internal.os.KernelCpuThreadReader r0;
        java.nio.file.Path $r1, r3;
        java.lang.String $r2, r4;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader;

        r3 := @parameter0: java.nio.file.Path;

        $r1 = interfaceinvoke r3.<java.nio.file.Path: java.nio.file.Path resolve(java.lang.String)>("comm");

        $r2 = interfaceinvoke $r1.<java.nio.file.Path: java.lang.String toString()>();

        r4 = staticinvoke <com.android.internal.os.ProcStatsUtil: java.lang.String readNullSeparatedFile(java.lang.String)>($r2);

        if r4 != null goto label1;

        return "unknown_thread";

     label1:
        return r4;
    }

    public int[] getCpuFrequenciesKhz()
    {
        com.android.internal.os.KernelCpuThreadReader r0;
        int[] $r1;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader;

        $r1 = r0.<com.android.internal.os.KernelCpuThreadReader: int[] mFrequenciesKhz>;

        return $r1;
    }

    public java.util.ArrayList getProcessCpuUsage()
    {
        com.android.internal.os.KernelCpuThreadReader r0;
        java.util.Iterator r1;
        int i0, i1;
        java.util.ArrayList $r2;
        java.nio.file.Path $r3, r13;
        boolean $z0, $z1, $z3;
        java.lang.Object $r4;
        com.android.internal.os.KernelCpuThreadReader$Injector $r5;
        java.util.function.Predicate $r6;
        java.lang.Integer $r7;
        java.lang.Throwable $r8, $r9, $r10;
        java.nio.file.DirectoryStream r12;
        com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage r14;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

     label01:
        $r3 = r0.<com.android.internal.os.KernelCpuThreadReader: java.nio.file.Path mProcPath>;

        r12 = staticinvoke <java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.lang.String)>($r3, "[0-9]*");

     label02:
        r1 = interfaceinvoke r12.<java.nio.file.DirectoryStream: java.util.Iterator iterator()>();

     label03:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r13 = (java.nio.file.Path) $r4;

        i0 = specialinvoke r0.<com.android.internal.os.KernelCpuThreadReader: int getProcessId(java.nio.file.Path)>(r13);

        $r5 = r0.<com.android.internal.os.KernelCpuThreadReader: com.android.internal.os.KernelCpuThreadReader$Injector mInjector>;

        i1 = virtualinvoke $r5.<com.android.internal.os.KernelCpuThreadReader$Injector: int getUidForPid(int)>(i0);

     label04:
        if i1 == -1 goto label03;

        if i0 != -1 goto label05;

        goto label03;

     label05:
        $r6 = r0.<com.android.internal.os.KernelCpuThreadReader: java.util.function.Predicate mUidPredicate>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z1 = interfaceinvoke $r6.<java.util.function.Predicate: boolean test(java.lang.Object)>($r7);

        if $z1 != 0 goto label07;

     label06:
        goto label03;

     label07:
        r14 = specialinvoke r0.<com.android.internal.os.KernelCpuThreadReader: com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage getProcessCpuUsage(java.nio.file.Path,int,int)>(r13, i0, i1);

     label08:
        if r14 == null goto label10;

     label09:
        virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r14);

     label10:
        goto label03;

     label11:
        if r12 == null goto label13;

     label12:
        interfaceinvoke r12.<java.nio.file.DirectoryStream: void close()>();

     label13:
        $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 == 0 goto label14;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("KernelCpuThreadReader", "Didn\'t successfully get any process CPU information for UIDs specified");

        return null;

     label14:
        return $r2;

     label15:
        $r9 := @caughtexception;

        if r12 == null goto label20;

     label16:
        interfaceinvoke r12.<java.nio.file.DirectoryStream: void close()>();

     label17:
        goto label20;

     label18:
        $r8 := @caughtexception;

     label19:
        virtualinvoke $r9.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r8);

     label20:
        throw $r9;

     label21:
        $r10 := @caughtexception;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("KernelCpuThreadReader", "Failed to iterate over process paths", $r10);

        return null;

        catch java.io.IOException from label01 to label02 with label21;
        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.io.IOException from label12 to label13 with label21;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.io.IOException from label20 to label21 with label21;
    }

    void setNumBuckets(int)
    {
        com.android.internal.os.KernelCpuThreadReader r0;
        int i0, $i1;
        com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator $r1;
        com.android.internal.os.ProcTimeInStateReader $r2, $r4;
        long[] $r3, $r5;
        int[] $r6, r12;
        java.lang.StringBuilder $r7;
        java.lang.String $r10;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader;

        i0 := @parameter0: int;

        if i0 >= 1 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of buckets must be at least 1, but was ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("KernelCpuThreadReader", $r10);

        return;

     label1:
        r12 = r0.<com.android.internal.os.KernelCpuThreadReader: int[] mFrequenciesKhz>;

        if r12 == null goto label2;

        $i1 = lengthof r12;

        if $i1 != i0 goto label2;

        return;

     label2:
        $r1 = new com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator;

        $r2 = r0.<com.android.internal.os.KernelCpuThreadReader: com.android.internal.os.ProcTimeInStateReader mProcTimeInStateReader>;

        $r3 = virtualinvoke $r2.<com.android.internal.os.ProcTimeInStateReader: long[] getFrequenciesKhz()>();

        specialinvoke $r1.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: void <init>(long[],int)>($r3, i0);

        r0.<com.android.internal.os.KernelCpuThreadReader: com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator mFrequencyBucketCreator> = $r1;

        $r4 = r0.<com.android.internal.os.KernelCpuThreadReader: com.android.internal.os.ProcTimeInStateReader mProcTimeInStateReader>;

        $r5 = virtualinvoke $r4.<com.android.internal.os.ProcTimeInStateReader: long[] getFrequenciesKhz()>();

        $r6 = virtualinvoke $r1.<com.android.internal.os.KernelCpuThreadReader$FrequencyBucketCreator: int[] bucketFrequencies(long[])>($r5);

        r0.<com.android.internal.os.KernelCpuThreadReader: int[] mFrequenciesKhz> = $r6;

        return;
    }

    void setUidPredicate(java.util.function.Predicate)
    {
        com.android.internal.os.KernelCpuThreadReader r0;
        java.util.function.Predicate r1;

        r0 := @this: com.android.internal.os.KernelCpuThreadReader;

        r1 := @parameter0: java.util.function.Predicate;

        r0.<com.android.internal.os.KernelCpuThreadReader: java.util.function.Predicate mUidPredicate> = r1;

        return;
    }
}
