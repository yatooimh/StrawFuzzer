public class com.android.internal.os.KernelCpuThreadReaderDiff extends java.lang.Object
{
    private static final int OTHER_THREADS_ID;
    private static final java.lang.String OTHER_THREADS_NAME;
    private static final java.lang.String TAG;
    private int mMinimumTotalCpuUsageMillis;
    private java.util.Map mPreviousCpuUsage;
    private final com.android.internal.os.KernelCpuThreadReader mReader;

    public void <init>(com.android.internal.os.KernelCpuThreadReader, int)
    {
        com.android.internal.os.KernelCpuThreadReaderDiff r0;
        com.android.internal.os.KernelCpuThreadReader r1, $r3;
        int i0;
        java.lang.Object $r2;

        r0 := @this: com.android.internal.os.KernelCpuThreadReaderDiff;

        r1 := @parameter0: com.android.internal.os.KernelCpuThreadReader;

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        $r3 = (com.android.internal.os.KernelCpuThreadReader) $r2;

        r0.<com.android.internal.os.KernelCpuThreadReaderDiff: com.android.internal.os.KernelCpuThreadReader mReader> = $r3;

        r0.<com.android.internal.os.KernelCpuThreadReaderDiff: int mMinimumTotalCpuUsageMillis> = i0;

        r0.<com.android.internal.os.KernelCpuThreadReaderDiff: java.util.Map mPreviousCpuUsage> = null;

        return;
    }

    private static void addToCpuUsage(int[], int[])
    {
        int[] r0, r1;
        int $i0, $i1, $i2, $i3, i4;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i4 = 0;

     label1:
        $i0 = lengthof r0;

        if i4 >= $i0 goto label2;

        $i2 = r0[i4];

        $i1 = r1[i4];

        $i3 = $i2 + $i1;

        r0[i4] = $i3;

        i4 = i4 + 1;

        goto label1;

     label2:
        return;
    }

    private void applyThresholding(com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage)
    {
        com.android.internal.os.KernelCpuThreadReaderDiff r0;
        com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage r1;
        com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage r3, $r6;
        java.util.ArrayList $r4, $r5, $r7;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r8;
        int[] $r9, $r10, $r11, r12, r13;

        r0 := @this: com.android.internal.os.KernelCpuThreadReaderDiff;

        r1 := @parameter0: com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage;

        r12 = null;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label1:
        $r5 = r1.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.util.ArrayList threadCpuUsages>;

        $i0 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        if i4 >= $i0 goto label5;

        $r7 = r1.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.util.ArrayList threadCpuUsages>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r3 = (com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage) $r8;

        $i1 = r0.<com.android.internal.os.KernelCpuThreadReaderDiff: int mMinimumTotalCpuUsageMillis>;

        $r9 = r3.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int[] usageTimesMillis>;

        $i2 = staticinvoke <com.android.internal.os.KernelCpuThreadReaderDiff: int totalCpuUsage(int[])>($r9);

        if $i1 <= $i2 goto label3;

        r13 = r12;

        if r12 != null goto label2;

        $r11 = r3.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int[] usageTimesMillis>;

        $i3 = lengthof $r11;

        r13 = newarray (int)[$i3];

     label2:
        $r10 = r3.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int[] usageTimesMillis>;

        staticinvoke <com.android.internal.os.KernelCpuThreadReaderDiff: void addToCpuUsage(int[],int[])>(r13, $r10);

        r12 = r13;

        goto label4;

     label3:
        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label4:
        i4 = i4 + 1;

        goto label1;

     label5:
        if r12 == null goto label6;

        $r6 = new com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage;

        specialinvoke $r6.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: void <init>(int,java.lang.String,int[])>(-1, "__OTHER_THREADS", r12);

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label6:
        r1.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.util.ArrayList threadCpuUsages> = $r4;

        return;
    }

    private static void changeToDiffs(java.util.Map, com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage)
    {
        java.util.Map r0;
        com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage r1;
        com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage r2;
        int[] r3, $r11, $r12, $r13, r14;
        java.util.ArrayList $r4, $r5;
        int $i0, $i1, $i2, $i3, i4;
        java.lang.Object $r6, $r10;
        com.android.internal.os.KernelCpuThreadReaderDiff$ThreadKey $r7;
        java.lang.String $r8, $r9;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage;

        i4 = 0;

     label1:
        $r4 = r1.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.util.ArrayList threadCpuUsages>;

        $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        if i4 >= $i0 goto label3;

        $r5 = r1.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.util.ArrayList threadCpuUsages>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r2 = (com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage) $r6;

        $r7 = new com.android.internal.os.KernelCpuThreadReaderDiff$ThreadKey;

        $i2 = r1.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: int processId>;

        $i1 = r2.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int threadId>;

        $r9 = r1.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.lang.String processName>;

        $r8 = r2.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: java.lang.String threadName>;

        specialinvoke $r7.<com.android.internal.os.KernelCpuThreadReaderDiff$ThreadKey: void <init>(int,int,java.lang.String,java.lang.String)>($i2, $i1, $r9, $r8);

        $r10 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r3 = (int[]) $r10;

        r14 = r3;

        if r3 != null goto label2;

        $r13 = r2.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int[] usageTimesMillis>;

        $i3 = lengthof $r13;

        r14 = newarray (int)[$i3];

     label2:
        $r11 = r2.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int[] usageTimesMillis>;

        $r12 = staticinvoke <com.android.internal.os.KernelCpuThreadReaderDiff: int[] cpuTimeDiff(int[],int[])>($r11, r14);

        r2.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int[] usageTimesMillis> = $r12;

        i4 = i4 + 1;

        goto label1;

     label3:
        return;
    }

    private static int[] cpuTimeDiff(int[], int[])
    {
        int[] r0, r1, r2;
        int $i0, $i1, $i2, $i3, $i4, i5;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        $i0 = lengthof r0;

        r2 = newarray (int)[$i0];

        i5 = 0;

     label1:
        $i1 = lengthof r0;

        if i5 >= $i1 goto label2;

        $i3 = r0[i5];

        $i2 = r1[i5];

        $i4 = $i3 - $i2;

        r2[i5] = $i4;

        i5 = i5 + 1;

        goto label1;

     label2:
        return r2;
    }

    private static java.util.Map createCpuUsageMap(java.util.List)
    {
        java.util.List r0;
        com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage r2;
        com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage r3;
        android.util.ArrayMap $r4;
        int $i0, $i1, $i2, $i3, i4, i5;
        java.lang.Object $r5, $r8;
        java.util.ArrayList $r6, $r7;
        com.android.internal.os.KernelCpuThreadReaderDiff$ThreadKey $r9;
        java.lang.String $r10, $r11;
        int[] $r12;

        r0 := @parameter0: java.util.List;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        i4 = 0;

     label1:
        $i0 = interfaceinvoke r0.<java.util.List: int size()>();

        if i4 >= $i0 goto label4;

        $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i4);

        r2 = (com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage) $r5;

        i5 = 0;

     label2:
        $r6 = r2.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.util.ArrayList threadCpuUsages>;

        $i1 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        if i5 >= $i1 goto label3;

        $r7 = r2.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.util.ArrayList threadCpuUsages>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i5);

        r3 = (com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage) $r8;

        $r9 = new com.android.internal.os.KernelCpuThreadReaderDiff$ThreadKey;

        $i3 = r2.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: int processId>;

        $i2 = r3.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int threadId>;

        $r11 = r2.<com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage: java.lang.String processName>;

        $r10 = r3.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: java.lang.String threadName>;

        specialinvoke $r9.<com.android.internal.os.KernelCpuThreadReaderDiff$ThreadKey: void <init>(int,int,java.lang.String,java.lang.String)>($i3, $i2, $r11, $r10);

        $r12 = r3.<com.android.internal.os.KernelCpuThreadReader$ThreadCpuUsage: int[] usageTimesMillis>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r12);

        i5 = i5 + 1;

        goto label2;

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return $r4;
    }

    private static int totalCpuUsage(int[])
    {
        int[] r0;
        int $i0, $i1, i2, i3;

        r0 := @parameter0: int[];

        i2 = 0;

        i3 = 0;

     label1:
        $i0 = lengthof r0;

        if i3 >= $i0 goto label2;

        $i1 = r0[i3];

        i2 = i2 + $i1;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i2;
    }

    public int[] getCpuFrequenciesKhz()
    {
        com.android.internal.os.KernelCpuThreadReaderDiff r0;
        com.android.internal.os.KernelCpuThreadReader $r1;
        int[] $r2;

        r0 := @this: com.android.internal.os.KernelCpuThreadReaderDiff;

        $r1 = r0.<com.android.internal.os.KernelCpuThreadReaderDiff: com.android.internal.os.KernelCpuThreadReader mReader>;

        $r2 = virtualinvoke $r1.<com.android.internal.os.KernelCpuThreadReader: int[] getCpuFrequenciesKhz()>();

        return $r2;
    }

    public java.util.ArrayList getProcessCpuUsageDiffed()
    {
        com.android.internal.os.KernelCpuThreadReaderDiff r0;
        java.util.ArrayList r1;
        com.android.internal.os.KernelCpuThreadReader $r2;
        int $i0, i1;
        java.lang.Object $r3;
        java.util.Map $r4, r6, r7, r8;
        java.lang.Throwable $r5;
        com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage r9;

        r0 := @this: com.android.internal.os.KernelCpuThreadReaderDiff;

        r6 = null;

     label01:
        $r2 = r0.<com.android.internal.os.KernelCpuThreadReaderDiff: com.android.internal.os.KernelCpuThreadReader mReader>;

        r1 = virtualinvoke $r2.<com.android.internal.os.KernelCpuThreadReader: java.util.ArrayList getProcessCpuUsage()>();

     label02:
        r6 = null;

     label03:
        r7 = staticinvoke <com.android.internal.os.KernelCpuThreadReaderDiff: java.util.Map createCpuUsageMap(java.util.List)>(r1);

     label04:
        r6 = r7;

     label05:
        r8 = r0.<com.android.internal.os.KernelCpuThreadReaderDiff: java.util.Map mPreviousCpuUsage>;

     label06:
        if r8 != null goto label07;

        r0.<com.android.internal.os.KernelCpuThreadReaderDiff: java.util.Map mPreviousCpuUsage> = r7;

        return null;

     label07:
        i1 = 0;

     label08:
        r6 = r7;

     label09:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        if i1 >= $i0 goto label17;

     label10:
        r6 = r7;

     label11:
        $r3 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r9 = (com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage) $r3;

     label12:
        r6 = r7;

     label13:
        $r4 = r0.<com.android.internal.os.KernelCpuThreadReaderDiff: java.util.Map mPreviousCpuUsage>;

        staticinvoke <com.android.internal.os.KernelCpuThreadReaderDiff: void changeToDiffs(java.util.Map,com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage)>($r4, r9);

     label14:
        r6 = r7;

     label15:
        specialinvoke r0.<com.android.internal.os.KernelCpuThreadReaderDiff: void applyThresholding(com.android.internal.os.KernelCpuThreadReader$ProcessCpuUsage)>(r9);

     label16:
        i1 = i1 + 1;

        goto label08;

     label17:
        r0.<com.android.internal.os.KernelCpuThreadReaderDiff: java.util.Map mPreviousCpuUsage> = r7;

        return r1;

     label18:
        $r5 := @caughtexception;

        r0.<com.android.internal.os.KernelCpuThreadReaderDiff: java.util.Map mPreviousCpuUsage> = r6;

        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label03 to label04 with label18;
        catch java.lang.Throwable from label05 to label06 with label18;
        catch java.lang.Throwable from label09 to label10 with label18;
        catch java.lang.Throwable from label11 to label12 with label18;
        catch java.lang.Throwable from label13 to label14 with label18;
        catch java.lang.Throwable from label15 to label16 with label18;
    }

    void setMinimumTotalCpuUsageMillis(int)
    {
        com.android.internal.os.KernelCpuThreadReaderDiff r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: com.android.internal.os.KernelCpuThreadReaderDiff;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative minimumTotalCpuUsageMillis: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("KernelCpuThreadReaderDiff", $r5);

        return;

     label1:
        r0.<com.android.internal.os.KernelCpuThreadReaderDiff: int mMinimumTotalCpuUsageMillis> = i0;

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.os.KernelCpuThreadReaderDiff: java.lang.String TAG> = "KernelCpuThreadReaderDiff";

        <com.android.internal.os.KernelCpuThreadReaderDiff: java.lang.String OTHER_THREADS_NAME> = "__OTHER_THREADS";

        <com.android.internal.os.KernelCpuThreadReaderDiff: int OTHER_THREADS_ID> = -1;

        return;
    }
}
