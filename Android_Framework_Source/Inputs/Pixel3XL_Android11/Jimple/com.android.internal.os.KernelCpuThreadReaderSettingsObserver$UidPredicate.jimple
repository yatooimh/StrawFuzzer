public class com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate extends java.lang.Object implements java.util.function.Predicate
{
    private static final java.util.regex.Pattern UID_RANGE_PATTERN;
    private static final java.lang.String UID_SPECIFIER_DELIMITER;
    private final java.util.List mAcceptedUidRanges;

    static void <clinit>()
    {
        java.util.regex.Pattern $r0;

        <com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate: java.lang.String UID_SPECIFIER_DELIMITER> = ";";

        $r0 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("([0-9]+)-([0-9]+)");

        <com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate: java.util.regex.Pattern UID_RANGE_PATTERN> = $r0;

        return;
    }

    private void <init>(java.util.List)
    {
        com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate r0;
        java.util.List r1;

        r0 := @this: com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate;

        r1 := @parameter0: java.util.List;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate: java.util.List mAcceptedUidRanges> = r1;

        return;
    }

    public static com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate fromString(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String[] r0;
        int i0, $i1, $i2, i3;
        java.util.regex.Matcher r1;
        java.util.ArrayList $r2;
        com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate $r3;
        java.util.regex.Pattern $r4;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.NumberFormatException $r8;
        java.lang.String $r9, $r10, $r12, r15, r17;
        java.lang.Integer $r11, $r13;
        android.util.Range $r14;

        r15 := @parameter0: java.lang.String;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0 = virtualinvoke r15.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        r17 = r0[i3];

        $r4 = <com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate: java.util.regex.Pattern UID_RANGE_PATTERN>;

        r1 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r17);

        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label2;

        $r10 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10);

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r12 = virtualinvoke r1.<java.util.regex.Matcher: java.lang.String group(int)>(2);

        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12);

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r14 = staticinvoke <android.util.Range: android.util.Range create(java.lang.Comparable,java.lang.Comparable)>($r11, $r13);

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r14);

        i3 = i3 + 1;

        goto label1;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to recognize as number range: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r8 = new java.lang.NumberFormatException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label3:
        $r3 = new com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate;

        specialinvoke $r3.<com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate: void <init>(java.util.List)>($r2);

        return $r3;
    }

    public boolean test(java.lang.Integer)
    {
        com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate r0;
        java.lang.Integer r1;
        java.util.List $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        android.util.Range $r5;
        boolean $z0;

        r0 := @this: com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate;

        r1 := @parameter0: java.lang.Integer;

        i1 = 0;

     label1:
        $r2 = r0.<com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate: java.util.List mAcceptedUidRanges>;

        $i0 = interfaceinvoke $r2.<java.util.List: int size()>();

        if i1 >= $i0 goto label3;

        $r3 = r0.<com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate: java.util.List mAcceptedUidRanges>;

        $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1);

        $r5 = (android.util.Range) $r4;

        $z0 = virtualinvoke $r5.<android.util.Range: boolean contains(java.lang.Comparable)>(r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        return 0;
    }

    public volatile boolean test(java.lang.Object)
    {
        com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate r0;
        java.lang.Object r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.Integer) r1;

        $z0 = virtualinvoke r0.<com.android.internal.os.KernelCpuThreadReaderSettingsObserver$UidPredicate: boolean test(java.lang.Integer)>($r2);

        return $z0;
    }
}
