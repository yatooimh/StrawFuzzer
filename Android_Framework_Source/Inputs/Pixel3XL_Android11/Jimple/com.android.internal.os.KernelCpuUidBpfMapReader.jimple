public abstract class com.android.internal.os.KernelCpuUidBpfMapReader extends java.lang.Object
{
    private static final com.android.internal.os.KernelCpuUidBpfMapReader ACTIVE_TIME_READER;
    private static final com.android.internal.os.KernelCpuUidBpfMapReader CLUSTER_TIME_READER;
    private static final int ERROR_THRESHOLD;
    private static final com.android.internal.os.KernelCpuUidBpfMapReader FREQ_TIME_READER;
    private static final long FRESHNESS_MS;
    protected android.util.SparseArray mData;
    private int mErrors;
    private long mLastReadTime;
    protected final java.util.concurrent.locks.ReentrantReadWriteLock mLock;
    protected final java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock;
    final java.lang.String mTag;
    private boolean mTracking;
    protected final java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock;

    static void <clinit>()
    {
        com.android.internal.os.KernelCpuUidBpfMapReader$KernelCpuUidFreqTimeBpfMapReader $r0;
        com.android.internal.os.KernelCpuUidBpfMapReader$KernelCpuUidActiveTimeBpfMapReader $r1;
        com.android.internal.os.KernelCpuUidBpfMapReader$KernelCpuUidClusterTimeBpfMapReader $r2;

        <com.android.internal.os.KernelCpuUidBpfMapReader: long FRESHNESS_MS> = 500L;

        <com.android.internal.os.KernelCpuUidBpfMapReader: int ERROR_THRESHOLD> = 5;

        $r0 = new com.android.internal.os.KernelCpuUidBpfMapReader$KernelCpuUidFreqTimeBpfMapReader;

        specialinvoke $r0.<com.android.internal.os.KernelCpuUidBpfMapReader$KernelCpuUidFreqTimeBpfMapReader: void <init>()>();

        <com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader FREQ_TIME_READER> = $r0;

        $r1 = new com.android.internal.os.KernelCpuUidBpfMapReader$KernelCpuUidActiveTimeBpfMapReader;

        specialinvoke $r1.<com.android.internal.os.KernelCpuUidBpfMapReader$KernelCpuUidActiveTimeBpfMapReader: void <init>()>();

        <com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader ACTIVE_TIME_READER> = $r1;

        $r2 = new com.android.internal.os.KernelCpuUidBpfMapReader$KernelCpuUidClusterTimeBpfMapReader;

        specialinvoke $r2.<com.android.internal.os.KernelCpuUidBpfMapReader$KernelCpuUidClusterTimeBpfMapReader: void <init>()>();

        <com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader CLUSTER_TIME_READER> = $r2;

        return;
    }

    public void <init>()
    {
        com.android.internal.os.KernelCpuUidBpfMapReader r0;
        java.lang.Class $r2;
        java.lang.String $r3;
        android.util.SparseArray $r4;
        java.util.concurrent.locks.ReentrantReadWriteLock $r5, $r7;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r6;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r8;

        r0 := @this: com.android.internal.os.KernelCpuUidBpfMapReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.lang.String mTag> = $r3;

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: int mErrors> = 0;

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: boolean mTracking> = 0;

        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: android.util.SparseArray mData> = $r4;

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: long mLastReadTime> = 0L;

        $r5 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock mLock> = $r5;

        $r6 = virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock readLock()>();

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock> = $r6;

        $r7 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock mLock>;

        $r8 = virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock writeLock()>();

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock> = $r8;

        return;
    }

    private boolean dataValid()
    {
        com.android.internal.os.KernelCpuUidBpfMapReader r0;
        android.util.SparseArray $r1;
        int $i0;
        long $l1, $l2, $l3;
        byte $b4;
        boolean z0;

        r0 := @this: com.android.internal.os.KernelCpuUidBpfMapReader;

        $r1 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: android.util.SparseArray mData>;

        $i0 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        if $i0 <= 0 goto label1;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l2 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: long mLastReadTime>;

        $l3 = $l1 - $l2;

        $b4 = $l3 cmp 500L;

        if $b4 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static com.android.internal.os.KernelCpuUidBpfMapReader getActiveTimeReaderInstance()
    {
        com.android.internal.os.KernelCpuUidBpfMapReader $r0;

        $r0 = <com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader ACTIVE_TIME_READER>;

        return $r0;
    }

    static com.android.internal.os.KernelCpuUidBpfMapReader getClusterTimeReaderInstance()
    {
        com.android.internal.os.KernelCpuUidBpfMapReader $r0;

        $r0 = <com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader CLUSTER_TIME_READER>;

        return $r0;
    }

    static com.android.internal.os.KernelCpuUidBpfMapReader getFreqTimeReaderInstance()
    {
        com.android.internal.os.KernelCpuUidBpfMapReader $r0;

        $r0 = <com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader FREQ_TIME_READER>;

        return $r0;
    }

    public abstract long[] getDataDimensions();

    public com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator open()
    {
        com.android.internal.os.KernelCpuUidBpfMapReader r0;
        com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator $r1;

        r0 := @this: com.android.internal.os.KernelCpuUidBpfMapReader;

        $r1 = virtualinvoke r0.<com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator open(boolean)>(0);

        return $r1;
    }

    public com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator open(boolean)
    {
        com.android.internal.os.KernelCpuUidBpfMapReader r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        int $i0, $i1, $i2, $i6, $i7;
        java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock $r1, $r2, $r6, $r9;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r3, $r4, $r7, $r10, $r13;
        java.lang.String $r5, $r14;
        long $l4;
        com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator $r8, $r11, $r12;

        r0 := @this: com.android.internal.os.KernelCpuUidBpfMapReader;

        z0 := @parameter0: boolean;

        $i0 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: int mErrors>;

        if $i0 <= 5 goto label1;

        return null;

     label1:
        $z1 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: boolean mTracking>;

        if $z1 != 0 goto label2;

        $z5 = virtualinvoke r0.<com.android.internal.os.KernelCpuUidBpfMapReader: boolean startTrackingBpfTimes()>();

        if $z5 != 0 goto label2;

        $r14 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.lang.String mTag>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r14, "Failed to start tracking");

        $i6 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: int mErrors>;

        $i7 = $i6 + 1;

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: int mErrors> = $i7;

        return null;

     label2:
        if z0 == 0 goto label3;

        $r13 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r13.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        goto label5;

     label3:
        $r1 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $z2 = specialinvoke r0.<com.android.internal.os.KernelCpuUidBpfMapReader: boolean dataValid()>();

        if $z2 == 0 goto label4;

        $r12 = new com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator;

        specialinvoke $r12.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: void <init>(com.android.internal.os.KernelCpuUidBpfMapReader)>(r0);

        return $r12;

     label4:
        $r2 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock>;

        virtualinvoke $r2.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void unlock()>();

        $r3 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r3.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        $z3 = specialinvoke r0.<com.android.internal.os.KernelCpuUidBpfMapReader: boolean dataValid()>();

        if $z3 == 0 goto label5;

        $r9 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock>;

        virtualinvoke $r9.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $r10 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r10.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        $r11 = new com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator;

        specialinvoke $r11.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: void <init>(com.android.internal.os.KernelCpuUidBpfMapReader)>(r0);

        return $r11;

     label5:
        $z4 = virtualinvoke r0.<com.android.internal.os.KernelCpuUidBpfMapReader: boolean readBpfData()>();

        if $z4 == 0 goto label6;

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: long mLastReadTime> = $l4;

        $r6 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock mReadLock>;

        virtualinvoke $r6.<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void lock()>();

        $r7 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r7.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        $r8 = new com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator;

        specialinvoke $r8.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: void <init>(com.android.internal.os.KernelCpuUidBpfMapReader)>(r0);

        return $r8;

     label6:
        $r4 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r4.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        $i1 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: int mErrors>;

        $i2 = $i1 + 1;

        r0.<com.android.internal.os.KernelCpuUidBpfMapReader: int mErrors> = $i2;

        $r5 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.lang.String mTag>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r5, "Failed to read bpf times");

        return null;
    }

    protected abstract boolean readBpfData();

    public void removeUidsInRange(int, int)
    {
        com.android.internal.os.KernelCpuUidBpfMapReader r0;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock $r1, $r5;
        android.util.SparseArray $r2, $r3, $r4;

        r0 := @this: com.android.internal.os.KernelCpuUidBpfMapReader;

        i3 := @parameter0: int;

        i4 := @parameter1: int;

        $i0 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: int mErrors>;

        if $i0 <= 5 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void lock()>();

        $r2 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: android.util.SparseArray mData>;

        i5 = virtualinvoke $r2.<android.util.SparseArray: int indexOfKey(int)>(i3);

        $r3 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: android.util.SparseArray mData>;

        i6 = virtualinvoke $r3.<android.util.SparseArray: int indexOfKey(int)>(i4);

        $r4 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: android.util.SparseArray mData>;

        $i1 = i6 - i5;

        $i2 = $i1 + 1;

        virtualinvoke $r4.<android.util.SparseArray: void removeAtRange(int,int)>(i5, $i2);

        $r5 = r0.<com.android.internal.os.KernelCpuUidBpfMapReader: java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock mWriteLock>;

        virtualinvoke $r5.<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void unlock()>();

        return;
    }

    public native boolean startTrackingBpfTimes();
}
