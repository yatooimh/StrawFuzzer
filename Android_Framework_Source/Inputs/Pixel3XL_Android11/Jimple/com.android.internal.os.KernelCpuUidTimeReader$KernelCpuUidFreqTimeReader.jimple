public class com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader extends com.android.internal.os.KernelCpuUidTimeReader
{
    private static final int MAX_ERROR_COUNT;
    private static final java.lang.String UID_TIMES_PROC_FILE;
    private boolean mAllUidTimesAvailable;
    private long[] mBuffer;
    private long[] mCpuFreqs;
    private long[] mCurTimes;
    private long[] mDeltaTimes;
    private int mErrors;
    private int mFreqCount;
    private boolean mPerClusterTimesAvailable;
    private final java.nio.file.Path mProcFilePath;

    public void <init>(java.lang.String, com.android.internal.os.KernelCpuProcStringReader, com.android.internal.os.KernelCpuUidBpfMapReader, boolean)
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        java.lang.String r1;
        com.android.internal.os.KernelCpuProcStringReader r2;
        com.android.internal.os.KernelCpuUidBpfMapReader r3;
        boolean z0;
        java.lang.String[] $r4;
        java.nio.file.Path $r5;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.os.KernelCpuProcStringReader;

        r3 := @parameter2: com.android.internal.os.KernelCpuUidBpfMapReader;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader: void <init>(com.android.internal.os.KernelCpuProcStringReader,com.android.internal.os.KernelCpuUidBpfMapReader,boolean)>(r2, r3, z0);

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mFreqCount> = 0;

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mErrors> = 0;

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mAllUidTimesAvailable> = 1;

        $r4 = newarray (java.lang.String)[0];

        $r5 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r1, $r4);

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: java.nio.file.Path mProcFilePath> = $r5;

        return;
    }

    public void <init>(boolean)
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        boolean z0;
        com.android.internal.os.KernelCpuProcStringReader $r1;
        com.android.internal.os.KernelCpuUidBpfMapReader $r2;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader getFreqTimeReaderInstance()>();

        $r2 = staticinvoke <com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader getFreqTimeReaderInstance()>();

        specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: void <init>(java.lang.String,com.android.internal.os.KernelCpuProcStringReader,com.android.internal.os.KernelCpuUidBpfMapReader,boolean)>("/proc/uid_time_in_state", $r1, $r2, z0);

        return;
    }

    private boolean checkPrecondition(com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator)
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        boolean $z0, z1;
        long[] $r1, $r3;
        java.lang.String $r2;
        com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator r4;
        java.nio.CharBuffer r5;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        r4 := @parameter0: com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator;

        z1 = 0;

        if r4 == null goto label4;

        $z0 = virtualinvoke r4.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: boolean hasNextLine()>();

        if $z0 != 0 goto label1;

        goto label4;

     label1:
        r5 = virtualinvoke r4.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: java.nio.CharBuffer nextLine()>();

        $r1 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCpuFreqs>;

        if $r1 == null goto label2;

        return 1;

     label2:
        $r2 = virtualinvoke r5.<java.nio.CharBuffer: java.lang.String toString()>();

        $r3 = specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] readFreqs(java.lang.String)>($r2);

        if $r3 == null goto label3;

        z1 = 1;

     label3:
        return z1;

     label4:
        return 0;
    }

    private boolean checkPrecondition(com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator)
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator r1;
        long[] $r2, $r3;
        boolean $z0, z1;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        r1 := @parameter0: com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator;

        z1 = 0;

        if r1 != null goto label1;

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mBpfTimesAvailable> = 0;

        return 0;

     label1:
        $r2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCpuFreqs>;

        if $r2 == null goto label2;

        return 1;

     label2:
        $r3 = specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] readFreqsThroughBpf()>();

        if $r3 == null goto label3;

        z1 = 1;

     label3:
        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mBpfTimesAvailable> = z1;

        $z0 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mBpfTimesAvailable>;

        return $z0;
    }

    private void copyToCurTimes()
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        boolean $z0;
        int $i0, i4, $i5;
        long[] $r1, $r2;
        long $l1, $l2, l3;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        $z0 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mBpfTimesAvailable>;

        if $z0 == 0 goto label1;

        l3 = 1L;

        goto label2;

     label1:
        l3 = 10L;

     label2:
        i4 = 0;

     label3:
        $i5 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mFreqCount>;

        if i4 >= $i5 goto label4;

        $r2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCurTimes>;

        $r1 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer>;

        $i0 = i4 + 1;

        $l1 = $r1[$i0];

        $l2 = $l1 * l3;

        $r2[i4] = $l2;

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    private android.util.IntArray extractClusterInfoFromProcFileFreqs()
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        int i0, i1, $i2, $i3, i7, i8;
        long[] r2;
        android.util.IntArray $r3;
        long $l4, $l5;
        byte $b6;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        $r3 = new android.util.IntArray;

        specialinvoke $r3.<android.util.IntArray: void <init>()>();

        i7 = 0;

        i8 = 0;

     label1:
        i0 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mFreqCount>;

        if i8 >= i0 goto label4;

        i1 = i7 + 1;

        $i2 = i8 + 1;

        if $i2 == i0 goto label2;

        r2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCpuFreqs>;

        i7 = i1;

        $i3 = i8 + 1;

        $l5 = r2[$i3];

        $l4 = r2[i8];

        $b6 = $l5 cmp $l4;

        if $b6 > 0 goto label3;

     label2:
        virtualinvoke $r3.<android.util.IntArray: void add(int)>(i1);

        i7 = 0;

     label3:
        i8 = i8 + 1;

        goto label1;

     label4:
        return $r3;
    }

    private void processUidDelta(com.android.internal.os.KernelCpuUidTimeReader$Callback)
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        com.android.internal.os.KernelCpuUidTimeReader$Callback r1;
        int i0, $i11, i12, i13;
        java.lang.String r2, $r14;
        long[] $r3, $r6, $r7, $r8, $r9, $r12, r16, r17, r18;
        long $l1, $l2, $l3, $l4, $l5, $l7, $l9;
        android.util.SparseArray $r4, $r15;
        java.lang.Object $r5;
        byte $b6, $b8;
        java.lang.StringBuilder $r10;
        boolean z0, z1, z2;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        r1 := @parameter0: com.android.internal.os.KernelCpuUidTimeReader$Callback;

        $r3 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer>;

        $l1 = $r3[0];

        i0 = (int) $l1;

        $r4 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: android.util.SparseArray mLastTimes>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r16 = (long[]) $r5;

        r17 = r16;

        if r16 != null goto label1;

        $i11 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mFreqCount>;

        r17 = newarray (long)[$i11];

        $r15 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: android.util.SparseArray mLastTimes>;

        virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r17);

     label1:
        specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: void copyToCurTimes()>();

        z0 = 0;

        z1 = 1;

        i12 = 0;

     label2:
        i13 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mFreqCount>;

        if i12 >= i13 goto label6;

        r18 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mDeltaTimes>;

        $r8 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCurTimes>;

        $l3 = $r8[i12];

        $l2 = r17[i12];

        $l4 = $l3 - $l2;

        r18[i12] = $l4;

        $l5 = r18[i12];

        $b6 = $l5 cmp 0L;

        if $b6 >= 0 goto label3;

        r2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: java.lang.String mTag>;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative delta from freq time proc: ");

        $r12 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mDeltaTimes>;

        $l9 = $r12[i12];

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r2, $r14);

        z1 = 0;

     label3:
        $r9 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mDeltaTimes>;

        $l7 = $r9[i12];

        $b8 = $l7 cmp 0L;

        if $b8 <= 0 goto label4;

        z2 = 1;

        goto label5;

     label4:
        z2 = 0;

     label5:
        z0 = z0 | z2;

        i12 = i12 + 1;

        goto label2;

     label6:
        if z0 == 0 goto label7;

        if z1 == 0 goto label7;

        $r6 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCurTimes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r6, 0, r17, 0, i13);

        if r1 == null goto label7;

        $r7 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mDeltaTimes>;

        interfaceinvoke r1.<com.android.internal.os.KernelCpuUidTimeReader$Callback: void onUidCpuTime(int,java.lang.Object)>(i0, $r7);

     label7:
        return;
    }

    private long[] readFreqs(java.lang.String)
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        java.lang.String r1, r2, $r3, $r9, $r14;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, i7, i8;
        long[] $r4, $r5, $r6, $r7, $r8, $r10;
        long $l5;
        java.lang.StringBuilder $r11;
        java.lang.String[] r15;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label5;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label5;

     label1:
        r15 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ");

        $i0 = lengthof r15;

        if $i0 > 1 goto label2;

        r2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: java.lang.String mTag>;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Malformed freq line: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r2, $r14);

        return null;

     label2:
        $i1 = lengthof r15;

        i7 = $i1 - 1;

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mFreqCount> = i7;

        $r4 = newarray (long)[i7];

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCpuFreqs> = $r4;

        $r5 = newarray (long)[i7];

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCurTimes> = $r5;

        $r6 = newarray (long)[i7];

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mDeltaTimes> = $r6;

        $i2 = i7 + 1;

        $r7 = newarray (long)[$i2];

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer> = $r7;

        i8 = 0;

     label3:
        $i3 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mFreqCount>;

        if i8 >= $i3 goto label4;

        $r10 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCpuFreqs>;

        $i4 = i8 + 1;

        $r9 = r15[$i4];

        $l5 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>($r9, 10);

        $r10[i8] = $l5;

        i8 = i8 + 1;

        goto label3;

     label4:
        $r8 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCpuFreqs>;

        return $r8;

     label5:
        return null;
    }

    private long[] readFreqsThroughBpf()
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        long[] r1, $r4, $r5, $r6;
        int i0, $i1;
        boolean $z0;
        com.android.internal.os.KernelCpuUidBpfMapReader $r2, $r3;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        $z0 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mBpfTimesAvailable>;

        if $z0 == 0 goto label3;

        $r2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: com.android.internal.os.KernelCpuUidBpfMapReader mBpfReader>;

        if $r2 != null goto label1;

        goto label3;

     label1:
        $r3 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: com.android.internal.os.KernelCpuUidBpfMapReader mBpfReader>;

        r1 = virtualinvoke $r3.<com.android.internal.os.KernelCpuUidBpfMapReader: long[] getDataDimensions()>();

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCpuFreqs> = r1;

        if r1 != null goto label2;

        return null;

     label2:
        i0 = lengthof r1;

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mFreqCount> = i0;

        $r4 = newarray (long)[i0];

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCurTimes> = $r4;

        $r5 = newarray (long)[i0];

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mDeltaTimes> = $r5;

        $i1 = i0 + 1;

        $r6 = newarray (long)[$i1];

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer> = $r6;

        return r1;

     label3:
        return null;
    }

    public boolean allUidTimesAvailable()
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        boolean $z0;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        $z0 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mAllUidTimesAvailable>;

        return $z0;
    }

    public android.util.SparseArray getAllUidCpuFreqTimeMs()
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        $r1 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: android.util.SparseArray mLastTimes>;

        return $r1;
    }

    public boolean perClusterTimesAvailable()
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        boolean $z0;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        $z0 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mPerClusterTimesAvailable>;

        return $z0;
    }

    void readAbsoluteImpl(com.android.internal.os.KernelCpuUidTimeReader$Callback)
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.nio.CharBuffer r1;
        java.lang.String r2, $r9, $r11;
        java.lang.StringBuilder r3;
        long[] $r4, $r5, $r6, $r7, $r13, $r14, $r15;
        int $i0, $i1, $i3, $i6;
        long $l2, $l5;
        com.android.internal.os.KernelCpuUidBpfMapReader $r12;
        java.lang.Throwable $r16, $r17, $r18, $r19;
        com.android.internal.os.KernelCpuUidTimeReader$Callback r20;
        com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator r21;
        com.android.internal.os.KernelCpuProcStringReader $r24;
        com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator r25;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        r20 := @parameter0: com.android.internal.os.KernelCpuUidTimeReader$Callback;

        $z1 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mBpfTimesAvailable>;

        if $z1 == 0 goto label12;

        $r12 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: com.android.internal.os.KernelCpuUidBpfMapReader mBpfReader>;

        $z2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mThrottle>;

        $z3 = $z2 ^ 1;

        r21 = virtualinvoke $r12.<com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator open(boolean)>($z3);

     label01:
        $z4 = specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean checkPrecondition(com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator)>(r21);

        if $z4 == 0 goto label06;

     label02:
        $r13 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer>;

        $z5 = virtualinvoke r21.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: boolean getNextUid(long[])>($r13);

        if $z5 == 0 goto label04;

        specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: void copyToCurTimes()>();

        $r14 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer>;

        $l5 = $r14[0];

        $i6 = (int) $l5;

        $r15 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCurTimes>;

        interfaceinvoke r20.<com.android.internal.os.KernelCpuUidTimeReader$Callback: void onUidCpuTime(int,java.lang.Object)>($i6, $r15);

     label03:
        goto label02;

     label04:
        if r21 == null goto label05;

        virtualinvoke r21.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: void close()>();

     label05:
        return;

     label06:
        if r21 == null goto label12;

        virtualinvoke r21.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: void close()>();

        goto label12;

     label07:
        $r19 := @caughtexception;

        if r21 == null goto label11;

     label08:
        virtualinvoke r21.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: void close()>();

     label09:
        goto label11;

     label10:
        $r16 := @caughtexception;

        virtualinvoke $r19.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r16);

     label11:
        throw $r19;

     label12:
        $r24 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: com.android.internal.os.KernelCpuProcStringReader mReader>;

        $z6 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mThrottle>;

        $z7 = $z6 ^ 1;

        r25 = virtualinvoke $r24.<com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator open(boolean)>($z7);

     label13:
        z0 = specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean checkPrecondition(com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator)>(r25);

     label14:
        if z0 != 0 goto label16;

        if r25 == null goto label15;

        virtualinvoke r25.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: void close()>();

     label15:
        return;

     label16:
        r1 = virtualinvoke r25.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: java.nio.CharBuffer nextLine()>();

     label17:
        if r1 == null goto label22;

     label18:
        $r4 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer>;

        $i0 = staticinvoke <com.android.internal.os.KernelCpuProcStringReader: int asLongs(java.nio.CharBuffer,long[])>(r1, $r4);

        $r5 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer>;

        $i1 = lengthof $r5;

        if $i0 == $i1 goto label20;

        r2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: java.lang.String mTag>;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid line: ");

        $r9 = virtualinvoke r1.<java.nio.CharBuffer: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r2, $r11);

     label19:
        goto label16;

     label20:
        specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: void copyToCurTimes()>();

        $r6 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer>;

        $l2 = $r6[0];

        $i3 = (int) $l2;

        $r7 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCurTimes>;

        interfaceinvoke r20.<com.android.internal.os.KernelCpuUidTimeReader$Callback: void onUidCpuTime(int,java.lang.Object)>($i3, $r7);

     label21:
        goto label16;

     label22:
        if r25 == null goto label23;

        virtualinvoke r25.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: void close()>();

     label23:
        return;

     label24:
        $r18 := @caughtexception;

        if r25 == null goto label28;

     label25:
        virtualinvoke r25.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: void close()>();

     label26:
        goto label28;

     label27:
        $r17 := @caughtexception;

        virtualinvoke $r18.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r17);

     label28:
        throw $r18;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label25 to label26 with label27;
    }

    void readDeltaImpl(com.android.internal.os.KernelCpuUidTimeReader$Callback)
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.nio.CharBuffer r1;
        java.lang.String r2, $r7, $r9;
        java.lang.StringBuilder r3;
        long[] $r4, $r5, $r11;
        int $i0, $i1;
        com.android.internal.os.KernelCpuUidBpfMapReader $r10;
        java.lang.Throwable $r12, $r13, $r14, $r15;
        com.android.internal.os.KernelCpuUidTimeReader$Callback r16;
        com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator r17;
        com.android.internal.os.KernelCpuProcStringReader $r20;
        com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator r21;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        r16 := @parameter0: com.android.internal.os.KernelCpuUidTimeReader$Callback;

        $z1 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mBpfTimesAvailable>;

        if $z1 == 0 goto label12;

        $r10 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: com.android.internal.os.KernelCpuUidBpfMapReader mBpfReader>;

        $z2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mThrottle>;

        $z3 = $z2 ^ 1;

        r17 = virtualinvoke $r10.<com.android.internal.os.KernelCpuUidBpfMapReader: com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator open(boolean)>($z3);

     label01:
        $z4 = specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean checkPrecondition(com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator)>(r17);

        if $z4 == 0 goto label06;

     label02:
        $r11 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer>;

        $z5 = virtualinvoke r17.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: boolean getNextUid(long[])>($r11);

        if $z5 == 0 goto label04;

        specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: void processUidDelta(com.android.internal.os.KernelCpuUidTimeReader$Callback)>(r16);

     label03:
        goto label02;

     label04:
        if r17 == null goto label05;

        virtualinvoke r17.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: void close()>();

     label05:
        return;

     label06:
        if r17 == null goto label12;

        virtualinvoke r17.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: void close()>();

        goto label12;

     label07:
        $r14 := @caughtexception;

        if r17 == null goto label11;

     label08:
        virtualinvoke r17.<com.android.internal.os.KernelCpuUidBpfMapReader$BpfMapIterator: void close()>();

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

        virtualinvoke $r14.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r12);

     label11:
        throw $r14;

     label12:
        $r20 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: com.android.internal.os.KernelCpuProcStringReader mReader>;

        $z6 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mThrottle>;

        $z7 = $z6 ^ 1;

        r21 = virtualinvoke $r20.<com.android.internal.os.KernelCpuProcStringReader: com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator open(boolean)>($z7);

     label13:
        z0 = specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean checkPrecondition(com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator)>(r21);

     label14:
        if z0 != 0 goto label16;

        if r21 == null goto label15;

        virtualinvoke r21.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: void close()>();

     label15:
        return;

     label16:
        r1 = virtualinvoke r21.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: java.nio.CharBuffer nextLine()>();

     label17:
        if r1 == null goto label22;

     label18:
        $r4 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer>;

        $i0 = staticinvoke <com.android.internal.os.KernelCpuProcStringReader: int asLongs(java.nio.CharBuffer,long[])>(r1, $r4);

        $r5 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mBuffer>;

        $i1 = lengthof $r5;

        if $i0 == $i1 goto label20;

        r2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: java.lang.String mTag>;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid line: ");

        $r7 = virtualinvoke r1.<java.nio.CharBuffer: java.lang.String toString()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r2, $r9);

     label19:
        goto label16;

     label20:
        specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: void processUidDelta(com.android.internal.os.KernelCpuUidTimeReader$Callback)>(r16);

     label21:
        goto label16;

     label22:
        if r21 == null goto label23;

        virtualinvoke r21.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: void close()>();

     label23:
        return;

     label24:
        $r15 := @caughtexception;

        if r21 == null goto label28;

     label25:
        virtualinvoke r21.<com.android.internal.os.KernelCpuProcStringReader$ProcFileIterator: void close()>();

     label26:
        goto label28;

     label27:
        $r13 := @caughtexception;

        virtualinvoke $r15.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r13);

     label28:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label13 to label14 with label24;
        catch java.lang.Throwable from label16 to label17 with label24;
        catch java.lang.Throwable from label18 to label19 with label24;
        catch java.lang.Throwable from label20 to label21 with label24;
        catch java.lang.Throwable from label25 to label26 with label27;
    }

    public long[] readFreqs(com.android.internal.os.PowerProfile)
    {
        com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader r0;
        boolean $z0, $z1, $z2;
        long[] $r2, $r7, r19, r21;
        int $i0, $i2, $i3, $i4, i6, i7, i8, i9;
        java.lang.StringBuilder $r3, r27;
        java.lang.String $r6, $r9, $r14, r26, r29;
        java.nio.file.Path $r8;
        java.lang.Throwable $r11, $r15, $r16, $r17;
        com.android.internal.os.PowerProfile r18;
        java.io.BufferedReader r20;
        android.util.IntArray r28;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader;

        r18 := @parameter0: com.android.internal.os.PowerProfile;

        staticinvoke <com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r18);

        r19 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCpuFreqs>;

        if r19 == null goto label01;

        return r19;

     label01:
        $z0 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mAllUidTimesAvailable>;

        if $z0 != 0 goto label02;

        return null;

     label02:
        $z1 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mBpfTimesAvailable>;

        if $z1 == 0 goto label03;

        specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] readFreqsThroughBpf()>();

     label03:
        $r2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCpuFreqs>;

        if $r2 != null goto label26;

        i6 = staticinvoke <android.os.StrictMode: int allowThreadDiskReadsMask()>();

     label04:
        $r8 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: java.nio.file.Path mProcFilePath>;

        r20 = staticinvoke <java.nio.file.Files: java.io.BufferedReader newBufferedReader(java.nio.file.Path)>($r8);

     label05:
        $r9 = virtualinvoke r20.<java.io.BufferedReader: java.lang.String readLine()>();

        r21 = specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] readFreqs(java.lang.String)>($r9);

     label06:
        if r21 != null goto label09;

        if r20 == null goto label08;

     label07:
        virtualinvoke r20.<java.io.BufferedReader: void close()>();

     label08:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i6);

        return null;

     label09:
        if r20 == null goto label11;

     label10:
        virtualinvoke r20.<java.io.BufferedReader: void close()>();

     label11:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i6);

        goto label26;

     label12:
        $r16 := @caughtexception;

        if r20 == null goto label17;

     label13:
        virtualinvoke r20.<java.io.BufferedReader: void close()>();

     label14:
        goto label17;

     label15:
        $r15 := @caughtexception;

     label16:
        virtualinvoke $r16.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r15);

     label17:
        throw $r16;

     label18:
        $r17 := @caughtexception;

        goto label25;

     label19:
        $r11 := @caughtexception;

     label20:
        $i4 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mErrors>;

        i7 = $i4 + 1;

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int mErrors> = i7;

     label21:
        if i7 < 5 goto label23;

     label22:
        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mAllUidTimesAvailable> = 0;

     label23:
        r26 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: java.lang.String mTag>;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to read /proc/uid_time_in_state: ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r14 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r26, $r14);

     label24:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i6);

        return null;

     label25:
        staticinvoke <android.os.StrictMode: void setThreadPolicyMask(int)>(i6);

        throw $r17;

     label26:
        r28 = specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: android.util.IntArray extractClusterInfoFromProcFileFreqs()>();

        i8 = virtualinvoke r18.<com.android.internal.os.PowerProfile: int getNumCpuClusters()>();

        $i0 = virtualinvoke r28.<android.util.IntArray: int size()>();

        if $i0 != i8 goto label30;

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mPerClusterTimesAvailable> = 1;

        i9 = 0;

     label27:
        if i9 >= i8 goto label29;

        $i2 = virtualinvoke r28.<android.util.IntArray: int get(int)>(i9);

        $i3 = virtualinvoke r18.<com.android.internal.os.PowerProfile: int getNumSpeedStepsInCpuCluster(int)>(i9);

        if $i2 == $i3 goto label28;

        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mPerClusterTimesAvailable> = 0;

        goto label29;

     label28:
        i9 = i9 + 1;

        goto label27;

     label29:
        goto label31;

     label30:
        r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mPerClusterTimesAvailable> = 0;

     label31:
        r29 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: java.lang.String mTag>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPerClusterTimesAvailable=");

        $z2 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: boolean mPerClusterTimesAvailable>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>(r29, $r6);

        $r7 = r0.<com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: long[] mCpuFreqs>;

        return $r7;

        catch java.io.IOException from label04 to label05 with label19;
        catch java.lang.Throwable from label04 to label05 with label18;
        catch java.lang.Throwable from label05 to label06 with label12;
        catch java.io.IOException from label07 to label08 with label19;
        catch java.lang.Throwable from label07 to label08 with label18;
        catch java.io.IOException from label10 to label11 with label19;
        catch java.lang.Throwable from label10 to label11 with label18;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.io.IOException from label16 to label17 with label19;
        catch java.lang.Throwable from label16 to label17 with label18;
        catch java.io.IOException from label17 to label18 with label19;
        catch java.lang.Throwable from label17 to label18 with label18;
        catch java.lang.Throwable from label20 to label21 with label18;
        catch java.lang.Throwable from label22 to label23 with label18;
        catch java.lang.Throwable from label23 to label24 with label18;
    }

    public static void <clinit>()
    {
        <com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: java.lang.String UID_TIMES_PROC_FILE> = "/proc/uid_time_in_state";

        <com.android.internal.os.KernelCpuUidTimeReader$KernelCpuUidFreqTimeReader: int MAX_ERROR_COUNT> = 5;

        return;
    }
}
