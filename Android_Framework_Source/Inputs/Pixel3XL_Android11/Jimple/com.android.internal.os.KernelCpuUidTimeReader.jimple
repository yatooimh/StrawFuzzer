public abstract class com.android.internal.os.KernelCpuUidTimeReader extends java.lang.Object
{
    protected static final boolean DEBUG;
    private static final long DEFAULT_MIN_TIME_BETWEEN_READ;
    final com.android.internal.os.KernelCpuUidBpfMapReader mBpfReader;
    protected boolean mBpfTimesAvailable;
    private long mLastReadTimeMs;
    final android.util.SparseArray mLastTimes;
    private long mMinTimeBetweenRead;
    final com.android.internal.os.KernelCpuProcStringReader mReader;
    final java.lang.String mTag;
    final boolean mThrottle;

    void <init>(com.android.internal.os.KernelCpuProcStringReader, com.android.internal.os.KernelCpuUidBpfMapReader, boolean)
    {
        com.android.internal.os.KernelCpuUidTimeReader r0;
        com.android.internal.os.KernelCpuProcStringReader r1;
        com.android.internal.os.KernelCpuUidBpfMapReader r2;
        java.lang.Class $r3;
        java.lang.String $r4;
        android.util.SparseArray $r5;
        boolean z0, z1;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader;

        r1 := @parameter0: com.android.internal.os.KernelCpuProcStringReader;

        r2 := @parameter1: com.android.internal.os.KernelCpuUidBpfMapReader;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>();

        r0.<com.android.internal.os.KernelCpuUidTimeReader: java.lang.String mTag> = $r4;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<com.android.internal.os.KernelCpuUidTimeReader: android.util.SparseArray mLastTimes> = $r5;

        r0.<com.android.internal.os.KernelCpuUidTimeReader: long mMinTimeBetweenRead> = 1000L;

        r0.<com.android.internal.os.KernelCpuUidTimeReader: long mLastReadTimeMs> = 0L;

        r0.<com.android.internal.os.KernelCpuUidTimeReader: com.android.internal.os.KernelCpuProcStringReader mReader> = r1;

        r0.<com.android.internal.os.KernelCpuUidTimeReader: boolean mThrottle> = z0;

        r0.<com.android.internal.os.KernelCpuUidTimeReader: com.android.internal.os.KernelCpuUidBpfMapReader mBpfReader> = r2;

        if r2 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        r0.<com.android.internal.os.KernelCpuUidTimeReader: boolean mBpfTimesAvailable> = z1;

        return;
    }

    void <init>(com.android.internal.os.KernelCpuProcStringReader, boolean)
    {
        com.android.internal.os.KernelCpuUidTimeReader r0;
        com.android.internal.os.KernelCpuProcStringReader r1;
        boolean z0;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader;

        r1 := @parameter0: com.android.internal.os.KernelCpuProcStringReader;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader: void <init>(com.android.internal.os.KernelCpuProcStringReader,com.android.internal.os.KernelCpuUidBpfMapReader,boolean)>(r1, null, z0);

        return;
    }

    public void readAbsolute(com.android.internal.os.KernelCpuUidTimeReader$Callback)
    {
        com.android.internal.os.KernelCpuUidTimeReader r0;
        com.android.internal.os.KernelCpuUidTimeReader$Callback r1;
        long l0, $l1, $l2, $l3;
        boolean $z0;
        byte $b4;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader;

        r1 := @parameter0: com.android.internal.os.KernelCpuUidTimeReader$Callback;

        $z0 = r0.<com.android.internal.os.KernelCpuUidTimeReader: boolean mThrottle>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader: void readAbsoluteImpl(com.android.internal.os.KernelCpuUidTimeReader$Callback)>(r1);

        return;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l2 = r0.<com.android.internal.os.KernelCpuUidTimeReader: long mLastReadTimeMs>;

        $l1 = r0.<com.android.internal.os.KernelCpuUidTimeReader: long mMinTimeBetweenRead>;

        $l3 = $l2 + $l1;

        $b4 = l0 cmp $l3;

        if $b4 >= 0 goto label2;

        return;

     label2:
        virtualinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader: void readAbsoluteImpl(com.android.internal.os.KernelCpuUidTimeReader$Callback)>(r1);

        r0.<com.android.internal.os.KernelCpuUidTimeReader: long mLastReadTimeMs> = l0;

        return;
    }

    abstract void readAbsoluteImpl(com.android.internal.os.KernelCpuUidTimeReader$Callback);

    public void readDelta(com.android.internal.os.KernelCpuUidTimeReader$Callback)
    {
        com.android.internal.os.KernelCpuUidTimeReader r0;
        com.android.internal.os.KernelCpuUidTimeReader$Callback r1;
        long l0, $l1, $l2, $l3;
        boolean $z0;
        byte $b4;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader;

        r1 := @parameter0: com.android.internal.os.KernelCpuUidTimeReader$Callback;

        $z0 = r0.<com.android.internal.os.KernelCpuUidTimeReader: boolean mThrottle>;

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader: void readDeltaImpl(com.android.internal.os.KernelCpuUidTimeReader$Callback)>(r1);

        return;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l2 = r0.<com.android.internal.os.KernelCpuUidTimeReader: long mLastReadTimeMs>;

        $l1 = r0.<com.android.internal.os.KernelCpuUidTimeReader: long mMinTimeBetweenRead>;

        $l3 = $l2 + $l1;

        $b4 = l0 cmp $l3;

        if $b4 >= 0 goto label2;

        return;

     label2:
        virtualinvoke r0.<com.android.internal.os.KernelCpuUidTimeReader: void readDeltaImpl(com.android.internal.os.KernelCpuUidTimeReader$Callback)>(r1);

        r0.<com.android.internal.os.KernelCpuUidTimeReader: long mLastReadTimeMs> = l0;

        return;
    }

    abstract void readDeltaImpl(com.android.internal.os.KernelCpuUidTimeReader$Callback);

    public void removeUid(int)
    {
        com.android.internal.os.KernelCpuUidTimeReader r0;
        int i0;
        android.util.SparseArray $r1;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.os.KernelCpuUidTimeReader: android.util.SparseArray mLastTimes>;

        virtualinvoke $r1.<android.util.SparseArray: void delete(int)>(i0);

        return;
    }

    public void removeUidsInRange(int, int)
    {
        com.android.internal.os.KernelCpuUidTimeReader r0;
        int i0, i1, i2, i3, $i4, $i5;
        java.lang.String r1, $r14;
        android.util.SparseArray $r3, $r4, $r5, $r6, $r7;
        boolean $z0;
        com.android.internal.os.KernelCpuUidBpfMapReader $r8;
        java.lang.StringBuilder $r9;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 >= i0 goto label1;

        r1 = r0.<com.android.internal.os.KernelCpuUidTimeReader: java.lang.String mTag>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start UID ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > end UID ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r1, $r14);

        return;

     label1:
        $r3 = r0.<com.android.internal.os.KernelCpuUidTimeReader: android.util.SparseArray mLastTimes>;

        virtualinvoke $r3.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, null);

        $r4 = r0.<com.android.internal.os.KernelCpuUidTimeReader: android.util.SparseArray mLastTimes>;

        virtualinvoke $r4.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, null);

        $r5 = r0.<com.android.internal.os.KernelCpuUidTimeReader: android.util.SparseArray mLastTimes>;

        i2 = virtualinvoke $r5.<android.util.SparseArray: int indexOfKey(int)>(i0);

        $r6 = r0.<com.android.internal.os.KernelCpuUidTimeReader: android.util.SparseArray mLastTimes>;

        i3 = virtualinvoke $r6.<android.util.SparseArray: int indexOfKey(int)>(i1);

        $r7 = r0.<com.android.internal.os.KernelCpuUidTimeReader: android.util.SparseArray mLastTimes>;

        $i4 = i3 - i2;

        $i5 = $i4 + 1;

        virtualinvoke $r7.<android.util.SparseArray: void removeAtRange(int,int)>(i2, $i5);

        $z0 = r0.<com.android.internal.os.KernelCpuUidTimeReader: boolean mBpfTimesAvailable>;

        if $z0 == 0 goto label2;

        $r8 = r0.<com.android.internal.os.KernelCpuUidTimeReader: com.android.internal.os.KernelCpuUidBpfMapReader mBpfReader>;

        virtualinvoke $r8.<com.android.internal.os.KernelCpuUidBpfMapReader: void removeUidsInRange(int,int)>(i0, i1);

     label2:
        return;
    }

    public void setThrottle(long)
    {
        com.android.internal.os.KernelCpuUidTimeReader r0;
        long l0;
        boolean $z0;
        byte $b1;

        r0 := @this: com.android.internal.os.KernelCpuUidTimeReader;

        l0 := @parameter0: long;

        $z0 = r0.<com.android.internal.os.KernelCpuUidTimeReader: boolean mThrottle>;

        if $z0 == 0 goto label1;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        r0.<com.android.internal.os.KernelCpuUidTimeReader: long mMinTimeBetweenRead> = l0;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.os.KernelCpuUidTimeReader: long DEFAULT_MIN_TIME_BETWEEN_READ> = 1000L;

        <com.android.internal.os.KernelCpuUidTimeReader: boolean DEBUG> = 0;

        return;
    }
}
