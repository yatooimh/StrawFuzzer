public class com.android.internal.os.LooperStats extends java.lang.Object implements android.os.Looper$Observer
{
    public static final java.lang.String DEBUG_ENTRY_PREFIX;
    private static final boolean DISABLED_SCREEN_STATE_TRACKING_VALUE;
    private static final int SESSION_POOL_SIZE;
    private boolean mAddDebugEntries;
    private com.android.internal.os.CachedDeviceState$TimeInStateStopwatch mBatteryStopwatch;
    private com.android.internal.os.CachedDeviceState$Readonly mDeviceState;
    private final android.util.SparseArray mEntries;
    private final int mEntriesSizeCap;
    private final com.android.internal.os.LooperStats$Entry mHashCollisionEntry;
    private final java.lang.Object mLock;
    private final com.android.internal.os.LooperStats$Entry mOverflowEntry;
    private int mSamplingInterval;
    private final java.util.concurrent.ConcurrentLinkedQueue mSessionPool;
    private long mStartCurrentTime;
    private long mStartElapsedTime;
    private boolean mTrackScreenInteractive;

    public void <init>(int, int)
    {
        com.android.internal.os.LooperStats r0;
        int i0, i1;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        com.android.internal.os.LooperStats$Entry $r3, $r4;
        java.util.concurrent.ConcurrentLinkedQueue $r5;
        long $l2, $l3;

        r0 := @this: com.android.internal.os.LooperStats;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.SparseArray;

        specialinvoke $r1.<android.util.SparseArray: void <init>(int)>(512);

        r0.<com.android.internal.os.LooperStats: android.util.SparseArray mEntries> = $r1;

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.os.LooperStats: java.lang.Object mLock> = $r2;

        $r3 = new com.android.internal.os.LooperStats$Entry;

        specialinvoke $r3.<com.android.internal.os.LooperStats$Entry: void <init>(java.lang.String)>("OVERFLOW");

        r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry mOverflowEntry> = $r3;

        $r4 = new com.android.internal.os.LooperStats$Entry;

        specialinvoke $r4.<com.android.internal.os.LooperStats$Entry: void <init>(java.lang.String)>("HASH_COLLISION");

        r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry mHashCollisionEntry> = $r4;

        $r5 = new java.util.concurrent.ConcurrentLinkedQueue;

        specialinvoke $r5.<java.util.concurrent.ConcurrentLinkedQueue: void <init>()>();

        r0.<com.android.internal.os.LooperStats: java.util.concurrent.ConcurrentLinkedQueue mSessionPool> = $r5;

        $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.internal.os.LooperStats: long mStartCurrentTime> = $l2;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.os.LooperStats: long mStartElapsedTime> = $l3;

        r0.<com.android.internal.os.LooperStats: boolean mAddDebugEntries> = 0;

        r0.<com.android.internal.os.LooperStats: boolean mTrackScreenInteractive> = 0;

        r0.<com.android.internal.os.LooperStats: int mSamplingInterval> = i0;

        r0.<com.android.internal.os.LooperStats: int mEntriesSizeCap> = i1;

        return;
    }

    private com.android.internal.os.LooperStats$ExportedEntry createDebugEntry(java.lang.String, long)
    {
        com.android.internal.os.LooperStats r0;
        long l0;
        java.lang.StringBuilder $r2;
        com.android.internal.os.LooperStats$Entry $r5;
        java.lang.String $r6, r8;
        com.android.internal.os.LooperStats$ExportedEntry $r7;

        r0 := @this: com.android.internal.os.LooperStats;

        r8 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("__DEBUG_");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r5 = new com.android.internal.os.LooperStats$Entry;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<com.android.internal.os.LooperStats$Entry: void <init>(java.lang.String)>($r6);

        $r5.<com.android.internal.os.LooperStats$Entry: long messageCount> = 1L;

        $r5.<com.android.internal.os.LooperStats$Entry: long recordedMessageCount> = 1L;

        $r5.<com.android.internal.os.LooperStats$Entry: long totalLatencyMicro> = l0;

        $r7 = new com.android.internal.os.LooperStats$ExportedEntry;

        specialinvoke $r7.<com.android.internal.os.LooperStats$ExportedEntry: void <init>(com.android.internal.os.LooperStats$Entry)>($r5);

        return $r7;
    }

    private boolean deviceStateAllowsCollection()
    {
        com.android.internal.os.LooperStats r0;
        com.android.internal.os.CachedDeviceState$Readonly r1;
        boolean $z0, z1;

        r0 := @this: com.android.internal.os.LooperStats;

        r1 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.CachedDeviceState$Readonly mDeviceState>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.internal.os.CachedDeviceState$Readonly: boolean isCharging()>();

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private com.android.internal.os.LooperStats$Entry findEntry(android.os.Message, boolean)
    {
        com.android.internal.os.LooperStats r0;
        boolean z0, $z1, $z2, z3;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, $r4;
        com.android.internal.os.LooperStats$Entry r2, r20, r21, $r22;
        android.util.SparseArray $r3, $r15, $r16;
        android.os.Handler $r5, $r7, $r9, $r12;
        java.lang.Class $r6, $r8;
        android.os.Looper $r10, $r13;
        java.lang.Thread $r11, $r14;
        com.android.internal.os.CachedDeviceState$Readonly $r17;
        java.lang.Throwable $r18;
        android.os.Message r19;

        r0 := @this: com.android.internal.os.LooperStats;

        r19 := @parameter0: android.os.Message;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.internal.os.LooperStats: boolean mTrackScreenInteractive>;

        if $z1 == 0 goto label01;

        $r17 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.CachedDeviceState$Readonly mDeviceState>;

        z3 = virtualinvoke $r17.<com.android.internal.os.CachedDeviceState$Readonly: boolean isScreenInteractive()>();

        goto label02;

     label01:
        z3 = 0;

     label02:
        i0 = staticinvoke <com.android.internal.os.LooperStats$Entry: int idFor(android.os.Message,boolean)>(r19, z3);

        r1 = r0.<com.android.internal.os.LooperStats: java.lang.Object mLock>;

        entermonitor r1;

     label03:
        $r3 = r0.<com.android.internal.os.LooperStats: android.util.SparseArray mEntries>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.internal.os.LooperStats$Entry) $r4;

     label04:
        r20 = r2;

        if r2 != null goto label11;

        if z0 != 0 goto label07;

     label05:
        exitmonitor r1;

     label06:
        return null;

     label07:
        $r15 = r0.<com.android.internal.os.LooperStats: android.util.SparseArray mEntries>;

        $i3 = virtualinvoke $r15.<android.util.SparseArray: int size()>();

        $i4 = r0.<com.android.internal.os.LooperStats: int mEntriesSizeCap>;

        if $i3 < $i4 goto label09;

        r21 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry mOverflowEntry>;

        exitmonitor r1;

     label08:
        return r21;

     label09:
        r20 = new com.android.internal.os.LooperStats$Entry;

        specialinvoke r20.<com.android.internal.os.LooperStats$Entry: void <init>(android.os.Message,boolean)>(r19, z3);

     label10:
        $r16 = r0.<com.android.internal.os.LooperStats: android.util.SparseArray mEntries>;

        virtualinvoke $r16.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r20);

     label11:
        exitmonitor r1;

     label12:
        $i2 = r20.<com.android.internal.os.LooperStats$Entry: int workSourceUid>;

        $i1 = r19.<android.os.Message: int workSourceUid>;

        if $i2 != $i1 goto label14;

        $r5 = r20.<com.android.internal.os.LooperStats$Entry: android.os.Handler handler>;

        $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>();

        $r7 = virtualinvoke r19.<android.os.Message: android.os.Handler getTarget()>();

        $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>();

        if $r6 != $r8 goto label14;

        $r9 = r20.<com.android.internal.os.LooperStats$Entry: android.os.Handler handler>;

        $r10 = virtualinvoke $r9.<android.os.Handler: android.os.Looper getLooper()>();

        $r11 = virtualinvoke $r10.<android.os.Looper: java.lang.Thread getThread()>();

        $r12 = virtualinvoke r19.<android.os.Message: android.os.Handler getTarget()>();

        $r13 = virtualinvoke $r12.<android.os.Handler: android.os.Looper getLooper()>();

        $r14 = virtualinvoke $r13.<android.os.Looper: java.lang.Thread getThread()>();

        if $r11 != $r14 goto label14;

        $z2 = r20.<com.android.internal.os.LooperStats$Entry: boolean isInteractive>;

        if $z2 == z3 goto label13;

        goto label14;

     label13:
        return r20;

     label14:
        $r22 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry mHashCollisionEntry>;

        return $r22;

     label15:
        $r18 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r18;

        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private void maybeAddSpecialEntry(java.util.List, com.android.internal.os.LooperStats$Entry)
    {
        com.android.internal.os.LooperStats r0;
        com.android.internal.os.LooperStats$Entry r1;
        com.android.internal.os.LooperStats$ExportedEntry r2;
        long $l0, $l2;
        byte $b1, $b3;
        java.lang.Throwable $r3;
        java.util.List r4;

        r0 := @this: com.android.internal.os.LooperStats;

        r4 := @parameter0: java.util.List;

        r1 := @parameter1: com.android.internal.os.LooperStats$Entry;

        entermonitor r1;

     label1:
        $l0 = r1.<com.android.internal.os.LooperStats$Entry: long messageCount>;

        $b1 = $l0 cmp 0L;

        if $b1 > 0 goto label2;

        $l2 = r1.<com.android.internal.os.LooperStats$Entry: long exceptionCount>;

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label3;

     label2:
        r2 = new com.android.internal.os.LooperStats$ExportedEntry;

        specialinvoke r2.<com.android.internal.os.LooperStats$ExportedEntry: void <init>(com.android.internal.os.LooperStats$Entry)>(r1);

        interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r2);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void recycleSession(com.android.internal.os.LooperStats$DispatchSession)
    {
        com.android.internal.os.LooperStats r0;
        com.android.internal.os.LooperStats$DispatchSession r1, $r2;
        java.util.concurrent.ConcurrentLinkedQueue $r3, $r4;
        int $i0;

        r0 := @this: com.android.internal.os.LooperStats;

        r1 := @parameter0: com.android.internal.os.LooperStats$DispatchSession;

        $r2 = <com.android.internal.os.LooperStats$DispatchSession: com.android.internal.os.LooperStats$DispatchSession NOT_SAMPLED>;

        if r1 == $r2 goto label1;

        $r3 = r0.<com.android.internal.os.LooperStats: java.util.concurrent.ConcurrentLinkedQueue mSessionPool>;

        $i0 = virtualinvoke $r3.<java.util.concurrent.ConcurrentLinkedQueue: int size()>();

        if $i0 >= 50 goto label1;

        $r4 = r0.<com.android.internal.os.LooperStats: java.util.concurrent.ConcurrentLinkedQueue mSessionPool>;

        virtualinvoke $r4.<java.util.concurrent.ConcurrentLinkedQueue: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    public void dispatchingThrewException(java.lang.Object, android.os.Message, java.lang.Exception)
    {
        com.android.internal.os.LooperStats r0;
        boolean $z0, z1;
        com.android.internal.os.LooperStats$DispatchSession $r1, r6;
        long $l0, $l1;
        java.lang.Throwable $r2;
        java.lang.Object r3;
        android.os.Message r4;
        java.lang.Exception r5;
        com.android.internal.os.LooperStats$Entry r7;

        r0 := @this: com.android.internal.os.LooperStats;

        r3 := @parameter0: java.lang.Object;

        r4 := @parameter1: android.os.Message;

        r5 := @parameter2: java.lang.Exception;

        $z0 = specialinvoke r0.<com.android.internal.os.LooperStats: boolean deviceStateAllowsCollection()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        r6 = (com.android.internal.os.LooperStats$DispatchSession) r3;

        $r1 = <com.android.internal.os.LooperStats$DispatchSession: com.android.internal.os.LooperStats$DispatchSession NOT_SAMPLED>;

        if r6 == $r1 goto label2;

        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        r7 = specialinvoke r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry findEntry(android.os.Message,boolean)>(r4, z1);

        if r7 == null goto label9;

        entermonitor r7;

     label4:
        $l0 = r7.<com.android.internal.os.LooperStats$Entry: long exceptionCount>;

        $l1 = $l0 + 1L;

        r7.<com.android.internal.os.LooperStats$Entry: long exceptionCount> = $l1;

        exitmonitor r7;

     label5:
        goto label9;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r7;

     label8:
        throw $r2;

     label9:
        specialinvoke r0.<com.android.internal.os.LooperStats: void recycleSession(com.android.internal.os.LooperStats$DispatchSession)>(r6);

        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public long getBatteryTimeMillis()
    {
        com.android.internal.os.LooperStats r0;
        com.android.internal.os.CachedDeviceState$TimeInStateStopwatch r1;
        long l0;

        r0 := @this: com.android.internal.os.LooperStats;

        r1 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.CachedDeviceState$TimeInStateStopwatch mBatteryStopwatch>;

        if r1 == null goto label1;

        l0 = virtualinvoke r1.<com.android.internal.os.CachedDeviceState$TimeInStateStopwatch: long getMillis()>();

        goto label2;

     label1:
        l0 = 0L;

     label2:
        return l0;
    }

    protected long getElapsedRealtimeMicro()
    {
        com.android.internal.os.LooperStats r0;
        long $l0, $l1;

        r0 := @this: com.android.internal.os.LooperStats;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtimeNanos()>();

        $l1 = $l0 / 1000L;

        return $l1;
    }

    public java.util.List getEntries()
    {
        com.android.internal.os.LooperStats r0;
        java.lang.Object r1, $r13;
        int i0, $i4, i6;
        com.android.internal.os.LooperStats$ExportedEntry r2, $r7, $r8, $r10, $r11;
        android.util.SparseArray $r3, $r12;
        com.android.internal.os.LooperStats$Entry $r4, $r5, r17;
        boolean $z0;
        com.android.internal.os.CachedDeviceState$TimeInStateStopwatch $r6, $r9;
        long $l1, $l2, $l3, $l5;
        java.lang.Throwable $r14, $r15;
        java.util.ArrayList r16;

        r0 := @this: com.android.internal.os.LooperStats;

        r1 = r0.<com.android.internal.os.LooperStats: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r3 = r0.<com.android.internal.os.LooperStats: android.util.SparseArray mEntries>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        r16 = new java.util.ArrayList;

        specialinvoke r16.<java.util.ArrayList: void <init>(int)>(i0);

     label02:
        i6 = 0;

     label03:
        if i6 >= i0 goto label10;

     label04:
        $r12 = r0.<com.android.internal.os.LooperStats: android.util.SparseArray mEntries>;

        $r13 = virtualinvoke $r12.<android.util.SparseArray: java.lang.Object valueAt(int)>(i6);

        r17 = (com.android.internal.os.LooperStats$Entry) $r13;

        entermonitor r17;

     label05:
        r2 = new com.android.internal.os.LooperStats$ExportedEntry;

        specialinvoke r2.<com.android.internal.os.LooperStats$ExportedEntry: void <init>(com.android.internal.os.LooperStats$Entry)>(r17);

        virtualinvoke r16.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        exitmonitor r17;

     label06:
        i6 = i6 + 1;

        goto label03;

     label07:
        $r15 := @caughtexception;

     label08:
        exitmonitor r17;

     label09:
        throw $r15;

     label10:
        exitmonitor r1;

     label11:
        $r4 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry mOverflowEntry>;

        specialinvoke r0.<com.android.internal.os.LooperStats: void maybeAddSpecialEntry(java.util.List,com.android.internal.os.LooperStats$Entry)>(r16, $r4);

        $r5 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry mHashCollisionEntry>;

        specialinvoke r0.<com.android.internal.os.LooperStats: void maybeAddSpecialEntry(java.util.List,com.android.internal.os.LooperStats$Entry)>(r16, $r5);

        $z0 = r0.<com.android.internal.os.LooperStats: boolean mAddDebugEntries>;

        if $z0 == 0 goto label12;

        $r6 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.CachedDeviceState$TimeInStateStopwatch mBatteryStopwatch>;

        if $r6 == null goto label12;

        $l1 = r0.<com.android.internal.os.LooperStats: long mStartElapsedTime>;

        $r7 = specialinvoke r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$ExportedEntry createDebugEntry(java.lang.String,long)>("start_time_millis", $l1);

        virtualinvoke r16.<java.util.ArrayList: boolean add(java.lang.Object)>($r7);

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r8 = specialinvoke r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$ExportedEntry createDebugEntry(java.lang.String,long)>("end_time_millis", $l2);

        virtualinvoke r16.<java.util.ArrayList: boolean add(java.lang.Object)>($r8);

        $r9 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.CachedDeviceState$TimeInStateStopwatch mBatteryStopwatch>;

        $l3 = virtualinvoke $r9.<com.android.internal.os.CachedDeviceState$TimeInStateStopwatch: long getMillis()>();

        $r10 = specialinvoke r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$ExportedEntry createDebugEntry(java.lang.String,long)>("battery_time_millis", $l3);

        virtualinvoke r16.<java.util.ArrayList: boolean add(java.lang.Object)>($r10);

        $i4 = r0.<com.android.internal.os.LooperStats: int mSamplingInterval>;

        $l5 = (long) $i4;

        $r11 = specialinvoke r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$ExportedEntry createDebugEntry(java.lang.String,long)>("sampling_interval", $l5);

        virtualinvoke r16.<java.util.ArrayList: boolean add(java.lang.Object)>($r11);

     label12:
        return r16;

     label13:
        $r14 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r14;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public long getStartElapsedTimeMillis()
    {
        com.android.internal.os.LooperStats r0;
        long $l0;

        r0 := @this: com.android.internal.os.LooperStats;

        $l0 = r0.<com.android.internal.os.LooperStats: long mStartElapsedTime>;

        return $l0;
    }

    public long getStartTimeMillis()
    {
        com.android.internal.os.LooperStats r0;
        long $l0;

        r0 := @this: com.android.internal.os.LooperStats;

        $l0 = r0.<com.android.internal.os.LooperStats: long mStartCurrentTime>;

        return $l0;
    }

    protected long getSystemUptimeMillis()
    {
        com.android.internal.os.LooperStats r0;
        long $l0;

        r0 := @this: com.android.internal.os.LooperStats;

        $l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        return $l0;
    }

    protected long getThreadTimeMicro()
    {
        com.android.internal.os.LooperStats r0;
        long $l0;

        r0 := @this: com.android.internal.os.LooperStats;

        $l0 = staticinvoke <android.os.SystemClock: long currentThreadTimeMicro()>();

        return $l0;
    }

    public java.lang.Object messageDispatchStarting()
    {
        com.android.internal.os.LooperStats r0;
        boolean $z0, $z1;
        com.android.internal.os.LooperStats$DispatchSession $r1, $r4, r5;
        java.util.concurrent.ConcurrentLinkedQueue $r2;
        java.lang.Object $r3;
        long $l0, $l1, $l2;

        r0 := @this: com.android.internal.os.LooperStats;

        $z0 = specialinvoke r0.<com.android.internal.os.LooperStats: boolean deviceStateAllowsCollection()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.internal.os.LooperStats: boolean shouldCollectDetailedData()>();

        if $z1 == 0 goto label2;

        $r2 = r0.<com.android.internal.os.LooperStats: java.util.concurrent.ConcurrentLinkedQueue mSessionPool>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentLinkedQueue: java.lang.Object poll()>();

        r5 = (com.android.internal.os.LooperStats$DispatchSession) $r3;

        if r5 != null goto label1;

        $r4 = new com.android.internal.os.LooperStats$DispatchSession;

        specialinvoke $r4.<com.android.internal.os.LooperStats$DispatchSession: void <init>(com.android.internal.os.LooperStats$1)>(null);

        r5 = $r4;

        goto label1;

     label1:
        $l0 = virtualinvoke r0.<com.android.internal.os.LooperStats: long getElapsedRealtimeMicro()>();

        r5.<com.android.internal.os.LooperStats$DispatchSession: long startTimeMicro> = $l0;

        $l1 = virtualinvoke r0.<com.android.internal.os.LooperStats: long getThreadTimeMicro()>();

        r5.<com.android.internal.os.LooperStats$DispatchSession: long cpuStartMicro> = $l1;

        $l2 = virtualinvoke r0.<com.android.internal.os.LooperStats: long getSystemUptimeMillis()>();

        r5.<com.android.internal.os.LooperStats$DispatchSession: long systemUptimeMillis> = $l2;

        return r5;

     label2:
        $r1 = <com.android.internal.os.LooperStats$DispatchSession: com.android.internal.os.LooperStats$DispatchSession NOT_SAMPLED>;

        return $r1;
    }

    public void messageDispatched(java.lang.Object, android.os.Message)
    {
        com.android.internal.os.LooperStats r0;
        com.android.internal.os.LooperStats$DispatchSession r1, $r2, $r3;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, $l27, l28, l29;
        boolean $z0, z1;
        byte $b18;
        java.lang.Throwable $r4;
        java.lang.Object r5;
        android.os.Message r6;
        com.android.internal.os.LooperStats$Entry r7;

        r0 := @this: com.android.internal.os.LooperStats;

        r5 := @parameter0: java.lang.Object;

        r6 := @parameter1: android.os.Message;

        $z0 = specialinvoke r0.<com.android.internal.os.LooperStats: boolean deviceStateAllowsCollection()>();

        if $z0 != 0 goto label01;

        return;

     label01:
        r1 = (com.android.internal.os.LooperStats$DispatchSession) r5;

        $r2 = <com.android.internal.os.LooperStats$DispatchSession: com.android.internal.os.LooperStats$DispatchSession NOT_SAMPLED>;

        if r1 == $r2 goto label02;

        z1 = 1;

        goto label03;

     label02:
        z1 = 0;

     label03:
        r7 = specialinvoke r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry findEntry(android.os.Message,boolean)>(r6, z1);

        if r7 == null goto label10;

        entermonitor r7;

     label04:
        $l1 = r7.<com.android.internal.os.LooperStats$Entry: long messageCount>;

        $l2 = $l1 + 1L;

        r7.<com.android.internal.os.LooperStats$Entry: long messageCount> = $l2;

        $r3 = <com.android.internal.os.LooperStats$DispatchSession: com.android.internal.os.LooperStats$DispatchSession NOT_SAMPLED>;

        if r1 == $r3 goto label05;

        $l3 = r7.<com.android.internal.os.LooperStats$Entry: long recordedMessageCount>;

        $l4 = $l3 + 1L;

        r7.<com.android.internal.os.LooperStats$Entry: long recordedMessageCount> = $l4;

        $l5 = virtualinvoke r0.<com.android.internal.os.LooperStats: long getElapsedRealtimeMicro()>();

        $l6 = r1.<com.android.internal.os.LooperStats$DispatchSession: long startTimeMicro>;

        l28 = $l5 - $l6;

        $l7 = virtualinvoke r0.<com.android.internal.os.LooperStats: long getThreadTimeMicro()>();

        $l8 = r1.<com.android.internal.os.LooperStats$DispatchSession: long cpuStartMicro>;

        l0 = $l7 - $l8;

        $l9 = r7.<com.android.internal.os.LooperStats$Entry: long totalLatencyMicro>;

        $l10 = $l9 + l28;

        r7.<com.android.internal.os.LooperStats$Entry: long totalLatencyMicro> = $l10;

        $l11 = r7.<com.android.internal.os.LooperStats$Entry: long maxLatencyMicro>;

        $l12 = staticinvoke <java.lang.Math: long max(long,long)>($l11, l28);

        r7.<com.android.internal.os.LooperStats$Entry: long maxLatencyMicro> = $l12;

        $l13 = r7.<com.android.internal.os.LooperStats$Entry: long cpuUsageMicro>;

        $l14 = $l13 + l0;

        r7.<com.android.internal.os.LooperStats$Entry: long cpuUsageMicro> = $l14;

        $l15 = r7.<com.android.internal.os.LooperStats$Entry: long maxCpuUsageMicro>;

        $l16 = staticinvoke <java.lang.Math: long max(long,long)>($l15, l0);

        r7.<com.android.internal.os.LooperStats$Entry: long maxCpuUsageMicro> = $l16;

        $l17 = virtualinvoke r6.<android.os.Message: long getWhen()>();

        $b18 = $l17 cmp 0L;

        if $b18 <= 0 goto label05;

        $l19 = r1.<com.android.internal.os.LooperStats$DispatchSession: long systemUptimeMillis>;

        $l20 = virtualinvoke r6.<android.os.Message: long getWhen()>();

        $l21 = $l19 - $l20;

        l29 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l21);

        $l22 = r7.<com.android.internal.os.LooperStats$Entry: long delayMillis>;

        $l23 = $l22 + l29;

        r7.<com.android.internal.os.LooperStats$Entry: long delayMillis> = $l23;

        $l24 = r7.<com.android.internal.os.LooperStats$Entry: long maxDelayMillis>;

        $l25 = staticinvoke <java.lang.Math: long max(long,long)>($l24, l29);

        r7.<com.android.internal.os.LooperStats$Entry: long maxDelayMillis> = $l25;

        $l26 = r7.<com.android.internal.os.LooperStats$Entry: long recordedDelayMessageCount>;

        $l27 = $l26 + 1L;

        r7.<com.android.internal.os.LooperStats$Entry: long recordedDelayMessageCount> = $l27;

     label05:
        exitmonitor r7;

     label06:
        goto label10;

     label07:
        $r4 := @caughtexception;

     label08:
        exitmonitor r7;

     label09:
        throw $r4;

     label10:
        specialinvoke r0.<com.android.internal.os.LooperStats: void recycleSession(com.android.internal.os.LooperStats$DispatchSession)>(r1);

        return;

        catch java.lang.Throwable from label04 to label05 with label07;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label08 to label09 with label07;
    }

    public void reset()
    {
        com.android.internal.os.LooperStats r0;
        android.util.SparseArray $r1;
        com.android.internal.os.LooperStats$Entry $r2, $r3, r8, r9;
        long $l0, $l1;
        java.lang.Throwable $r4, $r5, $r6;
        java.lang.Object r7;
        com.android.internal.os.CachedDeviceState$TimeInStateStopwatch r10;

        r0 := @this: com.android.internal.os.LooperStats;

        r7 = r0.<com.android.internal.os.LooperStats: java.lang.Object mLock>;

        entermonitor r7;

     label01:
        $r1 = r0.<com.android.internal.os.LooperStats: android.util.SparseArray mEntries>;

        virtualinvoke $r1.<android.util.SparseArray: void clear()>();

        exitmonitor r7;

     label02:
        r8 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry mHashCollisionEntry>;

        entermonitor r8;

     label03:
        $r2 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry mHashCollisionEntry>;

        virtualinvoke $r2.<com.android.internal.os.LooperStats$Entry: void reset()>();

        exitmonitor r8;

     label04:
        r9 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry mOverflowEntry>;

        entermonitor r9;

     label05:
        $r3 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.LooperStats$Entry mOverflowEntry>;

        virtualinvoke $r3.<com.android.internal.os.LooperStats$Entry: void reset()>();

        exitmonitor r9;

     label06:
        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r0.<com.android.internal.os.LooperStats: long mStartCurrentTime> = $l0;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.os.LooperStats: long mStartElapsedTime> = $l1;

        r10 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.CachedDeviceState$TimeInStateStopwatch mBatteryStopwatch>;

        if r10 == null goto label07;

        virtualinvoke r10.<com.android.internal.os.CachedDeviceState$TimeInStateStopwatch: void reset()>();

     label07:
        return;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r9;

     label10:
        throw $r5;

     label11:
        $r6 := @caughtexception;

     label12:
        exitmonitor r8;

     label13:
        throw $r6;

     label14:
        $r4 := @caughtexception;

     label15:
        exitmonitor r7;

     label16:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
        catch java.lang.Throwable from label12 to label13 with label11;
        catch java.lang.Throwable from label15 to label16 with label14;
    }

    public void setAddDebugEntries(boolean)
    {
        com.android.internal.os.LooperStats r0;
        boolean z0;

        r0 := @this: com.android.internal.os.LooperStats;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.os.LooperStats: boolean mAddDebugEntries> = z0;

        return;
    }

    public void setDeviceState(com.android.internal.os.CachedDeviceState$Readonly)
    {
        com.android.internal.os.LooperStats r0;
        com.android.internal.os.CachedDeviceState$Readonly r1;
        com.android.internal.os.CachedDeviceState$TimeInStateStopwatch r2, $r3;

        r0 := @this: com.android.internal.os.LooperStats;

        r1 := @parameter0: com.android.internal.os.CachedDeviceState$Readonly;

        r2 = r0.<com.android.internal.os.LooperStats: com.android.internal.os.CachedDeviceState$TimeInStateStopwatch mBatteryStopwatch>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.internal.os.CachedDeviceState$TimeInStateStopwatch: void close()>();

     label1:
        r0.<com.android.internal.os.LooperStats: com.android.internal.os.CachedDeviceState$Readonly mDeviceState> = r1;

        $r3 = virtualinvoke r1.<com.android.internal.os.CachedDeviceState$Readonly: com.android.internal.os.CachedDeviceState$TimeInStateStopwatch createTimeOnBatteryStopwatch()>();

        r0.<com.android.internal.os.LooperStats: com.android.internal.os.CachedDeviceState$TimeInStateStopwatch mBatteryStopwatch> = $r3;

        return;
    }

    public void setSamplingInterval(int)
    {
        com.android.internal.os.LooperStats r0;
        int i0;

        r0 := @this: com.android.internal.os.LooperStats;

        i0 := @parameter0: int;

        r0.<com.android.internal.os.LooperStats: int mSamplingInterval> = i0;

        return;
    }

    public void setTrackScreenInteractive(boolean)
    {
        com.android.internal.os.LooperStats r0;
        boolean z0;

        r0 := @this: com.android.internal.os.LooperStats;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.os.LooperStats: boolean mTrackScreenInteractive> = z0;

        return;
    }

    protected boolean shouldCollectDetailedData()
    {
        com.android.internal.os.LooperStats r0;
        java.util.concurrent.ThreadLocalRandom $r1;
        int $i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.android.internal.os.LooperStats;

        $r1 = staticinvoke <java.util.concurrent.ThreadLocalRandom: java.util.concurrent.ThreadLocalRandom current()>();

        $i0 = virtualinvoke $r1.<java.util.concurrent.ThreadLocalRandom: int nextInt()>();

        $i1 = r0.<com.android.internal.os.LooperStats: int mSamplingInterval>;

        $i2 = $i0 % $i1;

        if $i2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static void <clinit>()
    {
        <com.android.internal.os.LooperStats: int SESSION_POOL_SIZE> = 50;

        <com.android.internal.os.LooperStats: boolean DISABLED_SCREEN_STATE_TRACKING_VALUE> = 0;

        <com.android.internal.os.LooperStats: java.lang.String DEBUG_ENTRY_PREFIX> = "__DEBUG_";

        return;
    }
}
