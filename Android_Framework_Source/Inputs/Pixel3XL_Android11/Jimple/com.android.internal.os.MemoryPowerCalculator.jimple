public class com.android.internal.os.MemoryPowerCalculator extends com.android.internal.os.PowerCalculator
{
    private static final boolean DEBUG;
    public static final java.lang.String TAG;
    private final double[] powerAverages;

    public void <init>(com.android.internal.os.PowerProfile)
    {
        com.android.internal.os.MemoryPowerCalculator r0;
        com.android.internal.os.PowerProfile r1;
        int i0, i1;
        double d0, $d1;
        double[] $r2, $r3, $r4;

        r0 := @this: com.android.internal.os.MemoryPowerCalculator;

        r1 := @parameter0: com.android.internal.os.PowerProfile;

        specialinvoke r0.<com.android.internal.os.PowerCalculator: void <init>()>();

        i0 = virtualinvoke r1.<com.android.internal.os.PowerProfile: int getNumElements(java.lang.String)>("memory.bandwidths");

        $r2 = newarray (double)[i0];

        r0.<com.android.internal.os.MemoryPowerCalculator: double[] powerAverages> = $r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r0.<com.android.internal.os.MemoryPowerCalculator: double[] powerAverages>;

        $d1 = virtualinvoke r1.<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String,int)>("memory.bandwidths", i1);

        $r3[i1] = $d1;

        $r4 = r0.<com.android.internal.os.MemoryPowerCalculator: double[] powerAverages>;

        d0 = $r4[i1];

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void calculateApp(com.android.internal.os.BatterySipper, android.os.BatteryStats$Uid, long, long, int)
    {
        com.android.internal.os.MemoryPowerCalculator r0;
        com.android.internal.os.BatterySipper r1;
        android.os.BatteryStats$Uid r2;
        long l0, l1;
        int i2;

        r0 := @this: com.android.internal.os.MemoryPowerCalculator;

        r1 := @parameter0: com.android.internal.os.BatterySipper;

        r2 := @parameter1: android.os.BatteryStats$Uid;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        i2 := @parameter4: int;

        return;
    }

    public void calculateRemaining(com.android.internal.os.BatterySipper, android.os.BatteryStats, long, long, int)
    {
        com.android.internal.os.MemoryPowerCalculator r0;
        com.android.internal.os.BatterySipper r1;
        long l0, l2, $l5, l7, l8;
        int i1, $i3, $i4, $i6, i9;
        android.util.LongSparseArray r2;
        double d0, $d1, $d2, $d3, $d4, d5;
        java.lang.Object $r3;
        android.os.BatteryStats$Timer $r4;
        android.os.BatteryStats r5;
        double[] r6;

        r0 := @this: com.android.internal.os.MemoryPowerCalculator;

        r1 := @parameter0: com.android.internal.os.BatterySipper;

        r5 := @parameter1: android.os.BatteryStats;

        l0 := @parameter2: long;

        l7 := @parameter3: long;

        i1 := @parameter4: int;

        d5 = 0.0;

        l8 = 0L;

        r2 = virtualinvoke r5.<android.os.BatteryStats: android.util.LongSparseArray getKernelMemoryStats()>();

        i9 = 0;

     label1:
        $i3 = virtualinvoke r2.<android.util.LongSparseArray: int size()>();

        if i9 >= $i3 goto label2;

        r6 = r0.<com.android.internal.os.MemoryPowerCalculator: double[] powerAverages>;

        $i4 = lengthof r6;

        if i9 >= $i4 goto label2;

        $l5 = virtualinvoke r2.<android.util.LongSparseArray: long keyAt(int)>(i9);

        $i6 = (int) $l5;

        d0 = r6[$i6];

        $r3 = virtualinvoke r2.<android.util.LongSparseArray: java.lang.Object valueAt(int)>(i9);

        $r4 = (android.os.BatteryStats$Timer) $r3;

        l2 = virtualinvoke $r4.<android.os.BatteryStats$Timer: long getTotalTimeLocked(long,int)>(l0, i1);

        $d1 = (double) l2;

        $d2 = $d1 * d0;

        $d3 = $d2 / 60000.0;

        $d4 = $d3 / 60.0;

        d5 = d5 + $d4;

        l8 = l8 + l2;

        i9 = i9 + 1;

        goto label1;

     label2:
        r1.<com.android.internal.os.BatterySipper: double usagePowerMah> = d5;

        r1.<com.android.internal.os.BatterySipper: long usageTimeMs> = l8;

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.os.MemoryPowerCalculator: java.lang.String TAG> = "MemoryPowerCalculator";

        <com.android.internal.os.MemoryPowerCalculator: boolean DEBUG> = 0;

        return;
    }
}
