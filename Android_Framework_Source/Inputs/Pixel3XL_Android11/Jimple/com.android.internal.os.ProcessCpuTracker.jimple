public class com.android.internal.os.ProcessCpuTracker extends java.lang.Object
{
    private static final boolean DEBUG;
    private static final int[] LOAD_AVERAGE_FORMAT;
    private static final int[] PROCESS_FULL_STATS_FORMAT;
    static final int PROCESS_FULL_STAT_MAJOR_FAULTS;
    static final int PROCESS_FULL_STAT_MINOR_FAULTS;
    static final int PROCESS_FULL_STAT_STIME;
    static final int PROCESS_FULL_STAT_UTIME;
    static final int PROCESS_FULL_STAT_VSIZE;
    private static final int[] PROCESS_STATS_FORMAT;
    static final int PROCESS_STAT_MAJOR_FAULTS;
    static final int PROCESS_STAT_MINOR_FAULTS;
    static final int PROCESS_STAT_STIME;
    static final int PROCESS_STAT_UTIME;
    private static final int[] SYSTEM_CPU_FORMAT;
    private static final java.lang.String TAG;
    private static final boolean localLOGV;
    private static final java.util.Comparator sLoadComparator;
    private long mBaseIdleTime;
    private long mBaseIoWaitTime;
    private long mBaseIrqTime;
    private long mBaseSoftIrqTime;
    private long mBaseSystemTime;
    private long mBaseUserTime;
    private int[] mCurPids;
    private int[] mCurThreadPids;
    private long mCurrentSampleRealTime;
    private long mCurrentSampleTime;
    private long mCurrentSampleWallTime;
    private boolean mFirst;
    private final boolean mIncludeThreads;
    private final long mJiffyMillis;
    private long mLastSampleRealTime;
    private long mLastSampleTime;
    private long mLastSampleWallTime;
    private float mLoad1;
    private float mLoad15;
    private float mLoad5;
    private final float[] mLoadAverageData;
    private final java.util.ArrayList mProcStats;
    private final long[] mProcessFullStatsData;
    private final java.lang.String[] mProcessFullStatsStringData;
    private final long[] mProcessStatsData;
    private int mRelIdleTime;
    private int mRelIoWaitTime;
    private int mRelIrqTime;
    private int mRelSoftIrqTime;
    private boolean mRelStatsAreGood;
    private int mRelSystemTime;
    private int mRelUserTime;
    private final long[] mSinglePidStatsData;
    private final long[] mSystemCpuData;
    private final java.util.ArrayList mWorkingProcs;
    private boolean mWorkingProcsSorted;

    static void <clinit>()
    {
        int[] $r0, $r1, $r2, $r3;
        com.android.internal.os.ProcessCpuTracker$1 $r4;

        <com.android.internal.os.ProcessCpuTracker: boolean localLOGV> = 0;

        <com.android.internal.os.ProcessCpuTracker: java.lang.String TAG> = "ProcessCpuTracker";

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_STAT_UTIME> = 2;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_STAT_STIME> = 3;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_STAT_MINOR_FAULTS> = 0;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_STAT_MAJOR_FAULTS> = 1;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_FULL_STAT_VSIZE> = 5;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_FULL_STAT_UTIME> = 3;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_FULL_STAT_STIME> = 4;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_FULL_STAT_MINOR_FAULTS> = 1;

        <com.android.internal.os.ProcessCpuTracker: int PROCESS_FULL_STAT_MAJOR_FAULTS> = 2;

        <com.android.internal.os.ProcessCpuTracker: boolean DEBUG> = 0;

        $r0 = newarray (int)[15];

        $r0[0] = 32;

        $r0[1] = 544;

        $r0[2] = 32;

        $r0[3] = 32;

        $r0[4] = 32;

        $r0[5] = 32;

        $r0[6] = 32;

        $r0[7] = 32;

        $r0[8] = 32;

        $r0[9] = 8224;

        $r0[10] = 32;

        $r0[11] = 8224;

        $r0[12] = 32;

        $r0[13] = 8224;

        $r0[14] = 8224;

        <com.android.internal.os.ProcessCpuTracker: int[] PROCESS_STATS_FORMAT> = $r0;

        $r1 = newarray (int)[23];

        $r1[0] = 32;

        $r1[1] = 4640;

        $r1[2] = 32;

        $r1[3] = 32;

        $r1[4] = 32;

        $r1[5] = 32;

        $r1[6] = 32;

        $r1[7] = 32;

        $r1[8] = 32;

        $r1[9] = 8224;

        $r1[10] = 32;

        $r1[11] = 8224;

        $r1[12] = 32;

        $r1[13] = 8224;

        $r1[14] = 8224;

        $r1[15] = 32;

        $r1[16] = 32;

        $r1[17] = 32;

        $r1[18] = 32;

        $r1[19] = 32;

        $r1[20] = 32;

        $r1[21] = 32;

        $r1[22] = 8224;

        <com.android.internal.os.ProcessCpuTracker: int[] PROCESS_FULL_STATS_FORMAT> = $r1;

        $r2 = newarray (int)[8];

        $r2[0] = 288;

        $r2[1] = 8224;

        $r2[2] = 8224;

        $r2[3] = 8224;

        $r2[4] = 8224;

        $r2[5] = 8224;

        $r2[6] = 8224;

        $r2[7] = 8224;

        <com.android.internal.os.ProcessCpuTracker: int[] SYSTEM_CPU_FORMAT> = $r2;

        $r3 = newarray (int)[3];

        $r3[0] = 16416;

        $r3[1] = 16416;

        $r3[2] = 16416;

        <com.android.internal.os.ProcessCpuTracker: int[] LOAD_AVERAGE_FORMAT> = $r3;

        $r4 = new com.android.internal.os.ProcessCpuTracker$1;

        specialinvoke $r4.<com.android.internal.os.ProcessCpuTracker$1: void <init>()>();

        <com.android.internal.os.ProcessCpuTracker: java.util.Comparator sLoadComparator> = $r4;

        return;
    }

    public void <init>(boolean)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        boolean z0;
        long[] $r1, $r2, $r4, $r5;
        java.lang.String[] $r3;
        float[] $r6;
        java.util.ArrayList $r7, $r8;
        int $i0;
        long $l1, $l2;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        z0 := @parameter0: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = newarray (long)[4];

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mProcessStatsData> = $r1;

        $r2 = newarray (long)[4];

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mSinglePidStatsData> = $r2;

        $r3 = newarray (java.lang.String)[6];

        r0.<com.android.internal.os.ProcessCpuTracker: java.lang.String[] mProcessFullStatsStringData> = $r3;

        $r4 = newarray (long)[6];

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mProcessFullStatsData> = $r4;

        $r5 = newarray (long)[7];

        r0.<com.android.internal.os.ProcessCpuTracker: long[] mSystemCpuData> = $r5;

        $r6 = newarray (float)[3];

        r0.<com.android.internal.os.ProcessCpuTracker: float[] mLoadAverageData> = $r6;

        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad1> = 0.0F;

        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad5> = 0.0F;

        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad15> = 0.0F;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats> = $r7;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs> = $r8;

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mFirst> = 1;

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mIncludeThreads> = z0;

        $i0 = <android.system.OsConstants: int _SC_CLK_TCK>;

        $l1 = staticinvoke <android.system.Os: long sysconf(int)>($i0);

        $l2 = 1000L / $l1;

        r0.<com.android.internal.os.ProcessCpuTracker: long mJiffyMillis> = $l2;

        return;
    }

    private int[] collectStats(java.lang.String, int, boolean, int[], java.util.ArrayList)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0, i1, $i7, $i17, $i18, i25, i26, i28, i29, i30, i31, $i40, $i43, $i46, $i49, i50, i52, i53, i54, i57, i58, i59;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        long l2, l3, l4, $l5, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l19, $l20, $l22, l32, l33, l34, l35, $l36, $l37, $l38, $l39, $l41, $l42, $l44, $l45, $l47, $l48;
        java.lang.String r1, $r5, $r6, $r11, $r12, $r13, $r14, $r18, $r20, $r22, $r23, $r25, r29;
        java.lang.Object $r2, $r28;
        com.android.internal.os.ProcessCpuTracker$Stats $r4, r34, r42;
        int[] $r7, $r17, $r19, $r24, $r27, r30, r32, r36;
        java.lang.StringBuilder $r8;
        java.util.ArrayList $r15, $r16, $r26, r31, r37;
        byte $b21, $b23;
        long[] r35, r40;
        java.lang.String[] r39;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r29 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r30 := @parameter3: int[];

        r31 := @parameter4: java.util.ArrayList;

        r32 = staticinvoke <android.os.Process: int[] getPids(java.lang.String,int[])>(r29, r30);

        if r32 != null goto label01;

        i25 = 0;

        goto label02;

     label01:
        i25 = lengthof r32;

     label02:
        i26 = virtualinvoke r31.<java.util.ArrayList: int size()>();

        i28 = 0;

        i1 = i25;

        i29 = i0;

        i30 = 0;

     label03:
        if i28 >= i1 goto label24;

        i31 = r32[i28];

        if i31 >= 0 goto label04;

        goto label24;

     label04:
        if i30 >= i26 goto label05;

        $r28 = virtualinvoke r31.<java.util.ArrayList: java.lang.Object get(int)>(i30);

        r34 = (com.android.internal.os.ProcessCpuTracker$Stats) $r28;

        goto label06;

     label05:
        r34 = null;

     label06:
        if r34 == null goto label14;

        $i18 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        if $i18 != i31 goto label14;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: boolean added> = 0;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working> = 0;

        $z5 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: boolean interesting>;

        if $z5 == 0 goto label13;

        l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        r35 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mProcessStatsData>;

        $r22 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String statFile>;

        $r23 = virtualinvoke $r22.<java.lang.String: java.lang.String toString()>();

        $r24 = <com.android.internal.os.ProcessCpuTracker: int[] PROCESS_STATS_FORMAT>;

        $z6 = staticinvoke <android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>($r23, $r24, null, r35, null);

        if $z6 != 0 goto label07;

        goto label13;

     label07:
        l3 = r35[0];

        l4 = r35[1];

        l32 = r35[2];

        l33 = r0.<com.android.internal.os.ProcessCpuTracker: long mJiffyMillis>;

        l34 = l32 * l33;

        $l19 = r35[3];

        l35 = $l19 * l33;

        $l20 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime>;

        $b21 = l34 cmp $l20;

        if $b21 != 0 goto label09;

        $l22 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime>;

        $b23 = l35 cmp $l22;

        if $b23 != 0 goto label09;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime> = 0;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime> = 0;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults> = 0;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults> = 0;

        $z8 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: boolean active>;

        if $z8 == 0 goto label08;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: boolean active> = 0;

        goto label13;

     label08:
        goto label13;

     label09:
        $z7 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: boolean active>;

        if $z7 != 0 goto label10;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: boolean active> = 1;

        goto label10;

     label10:
        if i29 >= 0 goto label12;

        $r25 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String cmdlineFile>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void getName(com.android.internal.os.ProcessCpuTracker$Stats,java.lang.String)>(r34, $r25);

        $r26 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        if $r26 == null goto label11;

        r1 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String threadsDir>;

        r36 = r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurThreadPids>;

        r37 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        $r27 = specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: int[] collectStats(java.lang.String,int,boolean,int[],java.util.ArrayList)>(r1, i31, 0, r36, r37);

        r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurThreadPids> = $r27;

        goto label12;

     label11:
        goto label12;

     label12:
        $l36 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_uptime>;

        $l37 = l2 - $l36;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: long rel_uptime> = $l37;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_uptime> = l2;

        $l38 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime>;

        $l39 = l34 - $l38;

        $i40 = (int) $l39;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime> = $i40;

        $l41 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime>;

        $l42 = l35 - $l41;

        $i43 = (int) $l42;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime> = $i43;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime> = l34;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime> = l35;

        $l44 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_minfaults>;

        $l45 = l3 - $l44;

        $i46 = (int) $l45;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults> = $i46;

        $l47 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_majfaults>;

        $l48 = l4 - $l47;

        $i49 = (int) $l48;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults> = $i49;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_minfaults> = l3;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: long base_majfaults> = l4;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working> = 1;

        goto label13;

     label13:
        i50 = i30 + 1;

        i52 = i50;

        i59 = (int) 1;

        i53 = i59;

        i54 = i28;

        goto label23;

     label14:
        if r34 == null goto label16;

        $i17 = r34.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        if $i17 <= i31 goto label15;

        goto label16;

     label15:
        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime> = 0;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime> = 0;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults> = 0;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults> = 0;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed> = 1;

        r34.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working> = 1;

        virtualinvoke r31.<java.util.ArrayList: java.lang.Object remove(int)>(i30);

        i26 = i26 + -1;

        i54 = i28 - 1;

        i52 = i30;

        i53 = 1;

        goto label23;

     label16:
        z1 = r0.<com.android.internal.os.ProcessCpuTracker: boolean mIncludeThreads>;

        $r4 = new com.android.internal.os.ProcessCpuTracker$Stats;

        specialinvoke $r4.<com.android.internal.os.ProcessCpuTracker$Stats: void <init>(int,int,boolean)>(i31, i0, z1);

        virtualinvoke r31.<java.util.ArrayList: void add(int,java.lang.Object)>(i30, $r4);

        i26 = i26 + 1;

        r39 = r0.<com.android.internal.os.ProcessCpuTracker: java.lang.String[] mProcessFullStatsStringData>;

        r40 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mProcessFullStatsData>;

        $l5 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: long base_uptime> = $l5;

        $r5 = $r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String statFile>;

        $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toString()>();

        $r7 = <com.android.internal.os.ProcessCpuTracker: int[] PROCESS_FULL_STATS_FORMAT>;

        $z2 = staticinvoke <android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>($r6, $r7, r39, r40, null);

        if $z2 == 0 goto label17;

        $l8 = r40[5];

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: long vsize> = $l8;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: boolean interesting> = 1;

        $r20 = r39[0];

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String baseName> = $r20;

        $l9 = r40[1];

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: long base_minfaults> = $l9;

        $l10 = r40[2];

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: long base_majfaults> = $l10;

        $l12 = r40[3];

        $l11 = r0.<com.android.internal.os.ProcessCpuTracker: long mJiffyMillis>;

        $l13 = $l12 * $l11;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime> = $l13;

        $l15 = r40[4];

        $l14 = r0.<com.android.internal.os.ProcessCpuTracker: long mJiffyMillis>;

        $l16 = $l15 * $l14;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime> = $l16;

        goto label18;

     label17:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Skipping unknown process pid ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i31);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("ProcessCpuTracker", $r11);

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String baseName> = "<unknown>";

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: long base_stime> = 0L;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: long base_utime> = 0L;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: long base_majfaults> = 0L;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: long base_minfaults> = 0L;

     label18:
        if i0 >= 0 goto label20;

        $r14 = $r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String cmdlineFile>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void getName(com.android.internal.os.ProcessCpuTracker$Stats,java.lang.String)>($r4, $r14);

        $r15 = $r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        if $r15 == null goto label19;

        $r18 = $r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String threadsDir>;

        $r17 = r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurThreadPids>;

        $r16 = $r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        $r19 = specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: int[] collectStats(java.lang.String,int,boolean,int[],java.util.ArrayList)>($r18, i31, 1, $r17, $r16);

        r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurThreadPids> = $r19;

        goto label21;

     label19:
        goto label21;

     label20:
        $z3 = $r4.<com.android.internal.os.ProcessCpuTracker$Stats: boolean interesting>;

        if $z3 == 0 goto label21;

        $r12 = $r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String baseName>;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name> = $r12;

        $r13 = $r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $i7 = virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: int onMeasureProcessName(java.lang.String)>($r13);

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: int nameWidth> = $i7;

     label21:
        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime> = 0;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime> = 0;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults> = 0;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults> = 0;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: boolean added> = 1;

        if z0 != 0 goto label22;

        $z4 = $r4.<com.android.internal.os.ProcessCpuTracker$Stats: boolean interesting>;

        if $z4 == 0 goto label22;

        $r4.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working> = 1;

     label22:
        i57 = i30 + 1;

        i54 = i28;

        i53 = 1;

        i52 = i57;

     label23:
        i58 = i54 + i53;

        i29 = i0;

        i30 = i52;

        i28 = i58;

        goto label03;

     label24:
        if i30 >= i26 goto label25;

        $r2 = virtualinvoke r31.<java.util.ArrayList: java.lang.Object get(int)>(i30);

        r42 = (com.android.internal.os.ProcessCpuTracker$Stats) $r2;

        r42.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime> = 0;

        r42.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime> = 0;

        r42.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults> = 0;

        r42.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults> = 0;

        r42.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed> = 1;

        r42.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working> = 1;

        virtualinvoke r31.<java.util.ArrayList: java.lang.Object remove(int)>(i30);

        i26 = i26 + -1;

        goto label24;

     label25:
        return r32;
    }

    private static void dumpProcessCpuProto(android.util.proto.ProtoOutputStream, com.android.internal.os.ProcessCpuTracker$Stats, com.android.internal.os.ProcessCpuTracker$Stats)
    {
        android.util.proto.ProtoOutputStream r0;
        com.android.internal.os.ProcessCpuTracker$Stats r1, r2;
        long l0, $l3;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i8;
        java.lang.String $r3;
        boolean $z0, $z1;

        r0 := @parameter0: android.util.proto.ProtoOutputStream;

        r1 := @parameter1: com.android.internal.os.ProcessCpuTracker$Stats;

        r2 := @parameter2: com.android.internal.os.ProcessCpuTracker$Stats;

        l0 = virtualinvoke r0.<android.util.proto.ProtoOutputStream: long start(long)>(2246267895824L);

        $i1 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: int uid>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464257L, $i1);

        $i2 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464258L, $i2);

        $r3 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,java.lang.String)>(1138166333443L, $r3);

        $z0 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: boolean added>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366148L, $z0);

        $z1 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,boolean)>(1133871366149L, $z1);

        $l3 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: long rel_uptime>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,long)>(1120986464262L, $l3);

        $i4 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464263L, $i4);

        $i5 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464264L, $i5);

        $i6 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464265L, $i6);

        $i7 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464266L, $i7);

        if r2 == null goto label1;

        $i8 = r2.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464267L, $i8);

     label1:
        virtualinvoke r0.<android.util.proto.ProtoOutputStream: void end(long)>(l0);

        return;
    }

    private void getName(com.android.internal.os.ProcessCpuTracker$Stats, java.lang.String)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        com.android.internal.os.ProcessCpuTracker$Stats r1;
        java.lang.String r2, $r3, $r4, $r5, $r6, $r7, r8, r9, r10, r11, $r12;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: com.android.internal.os.ProcessCpuTracker$Stats;

        r8 := @parameter1: java.lang.String;

        r2 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $r3 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        if $r3 == null goto label1;

        $r6 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $z1 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("app_process");

        if $z1 != 0 goto label1;

        r9 = r2;

        $r7 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("<pre-initialized>");

        if $z2 == 0 goto label3;

     label1:
        r10 = staticinvoke <com.android.internal.os.ProcStatsUtil: java.lang.String readTerminatedProcFile(java.lang.String,byte)>(r8, 0);

        r11 = r2;

        if r10 == null goto label2;

        r11 = r2;

        $i2 = virtualinvoke r10.<java.lang.String: int length()>();

        if $i2 <= 1 goto label2;

        i0 = virtualinvoke r10.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        r11 = r10;

        if i0 <= 0 goto label2;

        r11 = r10;

        $i3 = virtualinvoke r10.<java.lang.String: int length()>();

        $i4 = $i3 - 1;

        if i0 >= $i4 goto label2;

        $i5 = i0 + 1;

        r11 = virtualinvoke r10.<java.lang.String: java.lang.String substring(int)>($i5);

     label2:
        r9 = r11;

        if r11 != null goto label3;

        r9 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String baseName>;

     label3:
        $r12 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        if $r12 == null goto label4;

        $r5 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $z0 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z0 != 0 goto label5;

     label4:
        r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name> = r9;

        $r4 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $i1 = virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: int onMeasureProcessName(java.lang.String)>($r4);

        r1.<com.android.internal.os.ProcessCpuTracker$Stats: int nameWidth> = $i1;

     label5:
        return;
    }

    private void printProcessCPU(java.io.PrintWriter, java.lang.String, int, java.lang.String, int, int, int, int, int, int, int, int)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.io.PrintWriter r1;
        java.lang.String r2, r3;
        int i0, i1, i2, i3, i4, i5, i6, i7, $i8, $i9, $i10, $i11, i24;
        long $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l21, $l22, $l23;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        i24 := @parameter4: int;

        i1 := @parameter5: int;

        i2 := @parameter6: int;

        i3 := @parameter7: int;

        i4 := @parameter8: int;

        i5 := @parameter9: int;

        i6 := @parameter10: int;

        i7 := @parameter11: int;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r2);

        if i24 != 0 goto label1;

        i24 = 1;

        goto label1;

     label1:
        $i8 = i1 + i2;

        $i9 = $i8 + i3;

        $i10 = $i9 + i4;

        $i11 = $i10 + i5;

        $l13 = (long) $i11;

        $l12 = (long) i24;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l13, $l12);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% ");

        if i0 < 0 goto label2;

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i0);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("/");

     label2:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r3);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        $l15 = (long) i1;

        $l14 = (long) i24;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l15, $l14);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% user + ");

        $l17 = (long) i2;

        $l16 = (long) i24;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l17, $l16);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% kernel");

        if i3 <= 0 goto label3;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" + ");

        $l23 = (long) i3;

        $l22 = (long) i24;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l23, $l22);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% iowait");

        goto label3;

     label3:
        if i4 <= 0 goto label4;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" + ");

        $l21 = (long) i4;

        $l20 = (long) i24;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l21, $l20);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% irq");

     label4:
        if i5 <= 0 goto label5;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" + ");

        $l19 = (long) i5;

        $l18 = (long) i24;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printRatio(java.io.PrintWriter,long,long)>(r1, $l19, $l18);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("% softirq");

     label5:
        if i6 > 0 goto label6;

        if i7 <= 0 goto label8;

     label6:
        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" / faults:");

        if i6 <= 0 goto label7;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i6);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" minor");

     label7:
        if i7 <= 0 goto label8;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" ");

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>(i7);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" major");

     label8:
        virtualinvoke r1.<java.io.PrintWriter: void println()>();

        return;
    }

    private void printRatio(java.io.PrintWriter, long, long)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.io.PrintWriter r1;
        long $l0, $l2, l4, l5, l6, l7, l8;
        byte $b1, $b3;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: java.io.PrintWriter;

        l4 := @parameter1: long;

        l5 := @parameter2: long;

        $l0 = 1000L * l4;

        l6 = $l0 / l5;

        l7 = l6 / 10L;

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>(l7);

        $b1 = l7 cmp 10L;

        if $b1 >= 0 goto label1;

        $l2 = 10L * l7;

        l8 = l6 - $l2;

        $b3 = l8 cmp 0L;

        if $b3 == 0 goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void print(char)>(46);

        virtualinvoke r1.<java.io.PrintWriter: void print(long)>(l8);

     label1:
        return;
    }

    final void buildWorkingProcs()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0, i1, $i2, i3, i4;
        com.android.internal.os.ProcessCpuTracker$Stats r1, r2;
        boolean $z0, $z1, $z3;
        java.util.ArrayList $r3, $r4, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r18;
        java.util.Comparator $r5, $r14;
        java.lang.Object $r8, $r17;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $z0 = r0.<com.android.internal.os.ProcessCpuTracker: boolean mWorkingProcsSorted>;

        if $z0 != 0 goto label7;

        $r3 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        $r4 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>();

        i3 = 0;

     label1:
        if i3 >= i0 goto label6;

        $r7 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        r1 = (com.android.internal.os.ProcessCpuTracker$Stats) $r8;

        $z1 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working>;

        if $z1 == 0 goto label5;

        $r9 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $r10 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        if $r10 == null goto label5;

        $r11 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        $i2 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

        if $i2 <= 1 goto label5;

        $r12 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        virtualinvoke $r12.<java.util.ArrayList: void clear()>();

        $r13 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        i1 = virtualinvoke $r13.<java.util.ArrayList: int size()>();

        i4 = 0;

     label2:
        if i4 >= i1 goto label4;

        $r16 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList threadStats>;

        $r17 = virtualinvoke $r16.<java.util.ArrayList: java.lang.Object get(int)>(i4);

        r2 = (com.android.internal.os.ProcessCpuTracker$Stats) $r17;

        $z3 = r2.<com.android.internal.os.ProcessCpuTracker$Stats: boolean working>;

        if $z3 == 0 goto label3;

        $r18 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        virtualinvoke $r18.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        $r15 = r1.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        $r14 = <com.android.internal.os.ProcessCpuTracker: java.util.Comparator sLoadComparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r15, $r14);

     label5:
        i3 = i3 + 1;

        goto label1;

     label6:
        $r6 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        $r5 = <com.android.internal.os.ProcessCpuTracker: java.util.Comparator sLoadComparator>;

        staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r6, $r5);

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mWorkingProcsSorted> = 1;

     label7:
        return;
    }

    public final int countStats()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.util.ArrayList $r1;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $r1 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public final int countWorkingStats()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.util.ArrayList $r1;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: void buildWorkingProcs()>();

        $r1 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>();

        return $i0;
    }

    public final void dumpProto(java.io.FileDescriptor)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        long l0, l1, $l2, $l3, $l4, $l5, $l6, $l7;
        java.util.Iterator r1, r3;
        com.android.internal.os.ProcessCpuTracker$Stats r2, $r10;
        android.util.proto.ProtoOutputStream $r4;
        float $f0, $f1, $f2;
        int $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24;
        java.util.ArrayList $r5, $r7, $r8;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r9;
        java.io.FileDescriptor r11;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r11 := @parameter0: java.io.FileDescriptor;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r4 = new android.util.proto.ProtoOutputStream;

        specialinvoke $r4.<android.util.proto.ProtoOutputStream: void <init>(java.io.FileDescriptor)>(r11);

        l1 = virtualinvoke $r4.<android.util.proto.ProtoOutputStream: long start(long)>(1146756268033L);

        $f0 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad1>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,float)>(1108101562369L, $f0);

        $f1 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad5>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,float)>(1108101562370L, $f1);

        $f2 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad15>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,float)>(1108101562371L, $f2);

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void end(long)>(l1);

        virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: void buildWorkingProcs()>();

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529666L, l0);

        $l2 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529667L, $l2);

        $l3 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529668L, $l3);

        $l4 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleRealTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529669L, $l4);

        $l5 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleRealTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529670L, $l5);

        $l6 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleWallTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529671L, $l6);

        $l7 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleWallTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529672L, $l7);

        $i8 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464265L, $i8);

        $i9 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464266L, $i9);

        $i10 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIoWaitTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464267L, $i10);

        $i11 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464268L, $i11);

        $i12 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSoftIrqTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464269L, $i12);

        $i13 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIdleTime>;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464270L, $i13);

        $i15 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        $i14 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        $i17 = $i15 + $i14;

        $i16 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIoWaitTime>;

        $i19 = $i17 + $i16;

        $i18 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        $i21 = $i19 + $i18;

        $i20 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSoftIrqTime>;

        $i23 = $i21 + $i20;

        $i22 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIdleTime>;

        $i24 = $i23 + $i22;

        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void write(long,int)>(1120986464271L, $i24);

        $r5 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        r1 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.internal.os.ProcessCpuTracker$Stats) $r6;

        staticinvoke <com.android.internal.os.ProcessCpuTracker: void dumpProcessCpuProto(android.util.proto.ProtoOutputStream,com.android.internal.os.ProcessCpuTracker$Stats,com.android.internal.os.ProcessCpuTracker$Stats)>($r4, r2, null);

        $z1 = r2.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed>;

        if $z1 != 0 goto label3;

        $r7 = r2.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        if $r7 == null goto label3;

        $r8 = r2.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        r3 = virtualinvoke $r8.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.android.internal.os.ProcessCpuTracker$Stats) $r9;

        staticinvoke <com.android.internal.os.ProcessCpuTracker: void dumpProcessCpuProto(android.util.proto.ProtoOutputStream,com.android.internal.os.ProcessCpuTracker$Stats,com.android.internal.os.ProcessCpuTracker$Stats)>($r4, $r10, r2);

        goto label2;

     label3:
        goto label1;

     label4:
        virtualinvoke $r4.<android.util.proto.ProtoOutputStream: void flush()>();

        return;
    }

    public long getCpuTimeForPid(int)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0;
        long[] r1, r9;
        java.lang.String r2;
        long l1, l2, l3, $l4, $l5;
        int[] $r6;
        boolean $z0;
        java.lang.Throwable $r7;
        java.lang.StringBuilder r8;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        i0 := @parameter0: int;

        r1 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mSinglePidStatsData>;

        entermonitor r1;

     label1:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/proc/");

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/stat");

        r2 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r9 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mSinglePidStatsData>;

        $r6 = <com.android.internal.os.ProcessCpuTracker: int[] PROCESS_STATS_FORMAT>;

        $z0 = staticinvoke <android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>(r2, $r6, null, r9, null);

        if $z0 == 0 goto label5;

     label2:
        l1 = r9[2];

        l2 = r9[3];

     label3:
        l3 = r0.<com.android.internal.os.ProcessCpuTracker: long mJiffyMillis>;

        exitmonitor r1;

     label4:
        $l4 = l1 + l2;

        $l5 = l3 * $l4;

        return $l5;

     label5:
        exitmonitor r1;

     label6:
        return 0L;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public final int getLastIdleTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIdleTime>;

        return $i0;
    }

    public final int getLastIoWaitTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIoWaitTime>;

        return $i0;
    }

    public final int getLastIrqTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        return $i0;
    }

    public final int getLastSoftIrqTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSoftIrqTime>;

        return $i0;
    }

    public final int getLastSystemTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        return $i0;
    }

    public final int getLastUserTime()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int $i0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        return $i0;
    }

    public final com.android.internal.os.ProcessCpuTracker$Stats getStats(int)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        com.android.internal.os.ProcessCpuTracker$Stats $r3;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (com.android.internal.os.ProcessCpuTracker$Stats) $r2;

        return $r3;
    }

    public final java.util.List getStats(com.android.internal.os.ProcessCpuTracker$FilterStats)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        com.android.internal.os.ProcessCpuTracker$FilterStats r1;
        int i0, $i1, i2;
        com.android.internal.os.ProcessCpuTracker$Stats r3;
        java.util.ArrayList $r4, $r5, $r6, $r7;
        java.lang.Object $r8;
        boolean $z0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: com.android.internal.os.ProcessCpuTracker$FilterStats;

        $r4 = new java.util.ArrayList;

        $r5 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        $i1 = virtualinvoke $r5.<java.util.ArrayList: int size()>();

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>($i1);

        $r6 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        i0 = virtualinvoke $r6.<java.util.ArrayList: int size()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r7 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(i2);

        r3 = (com.android.internal.os.ProcessCpuTracker$Stats) $r8;

        $z0 = interfaceinvoke r1.<com.android.internal.os.ProcessCpuTracker$FilterStats: boolean needed(com.android.internal.os.ProcessCpuTracker$Stats)>(r3);

        if $z0 == 0 goto label2;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return $r4;
    }

    public final float getTotalCpuPercent()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8;
        float $f0, $f1, $f2, $f3;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        i0 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        i1 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        i2 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        $i4 = i0 + i1;

        $i6 = $i4 + i2;

        $i5 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIdleTime>;

        i3 = $i6 + $i5;

        if i3 > 0 goto label1;

        return 0.0F;

     label1:
        $i7 = i0 + i1;

        $i8 = $i7 + i2;

        $f0 = (float) $i8;

        $f2 = $f0 * 100.0F;

        $f1 = (float) i3;

        $f3 = $f2 / $f1;

        return $f3;
    }

    public final com.android.internal.os.ProcessCpuTracker$Stats getWorkingStats(int)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        int i0;
        java.util.ArrayList $r1;
        java.lang.Object $r2;
        com.android.internal.os.ProcessCpuTracker$Stats $r3;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (com.android.internal.os.ProcessCpuTracker$Stats) $r2;

        return $r3;
    }

    public final boolean hasGoodLastStats()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        boolean $z0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $z0 = r0.<com.android.internal.os.ProcessCpuTracker: boolean mRelStatsAreGood>;

        return $z0;
    }

    public void init()
    {
        com.android.internal.os.ProcessCpuTracker r0;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mFirst> = 1;

        virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: void update()>();

        return;
    }

    public void onLoadChanged(float, float, float)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        float f0, f1, f2;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        return;
    }

    public int onMeasureProcessName(java.lang.String)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public final java.lang.String printCurrentLoad()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        java.io.StringWriter $r3;
        com.android.internal.util.FastPrintWriter $r4;
        float $f0, $f1, $f2;
        java.lang.String $r5;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        $r3 = new java.io.StringWriter;

        specialinvoke $r3.<java.io.StringWriter: void <init>()>();

        $r4 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r4.<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer,boolean,int)>($r3, 0, 128);

        virtualinvoke $r4.<java.io.PrintWriter: void print(java.lang.String)>("Load: ");

        $f0 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad1>;

        virtualinvoke $r4.<java.io.PrintWriter: void print(float)>($f0);

        virtualinvoke $r4.<java.io.PrintWriter: void print(java.lang.String)>(" / ");

        $f1 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad5>;

        virtualinvoke $r4.<java.io.PrintWriter: void print(float)>($f1);

        virtualinvoke $r4.<java.io.PrintWriter: void print(java.lang.String)>(" / ");

        $f2 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad15>;

        virtualinvoke $r4.<java.io.PrintWriter: void println(float)>($f2);

        virtualinvoke $r4.<java.io.PrintWriter: void flush()>();

        $r5 = virtualinvoke $r3.<java.io.StringWriter: java.lang.String toString()>();

        return $r5;
    }

    public final java.lang.String printCurrentState(long)
    {
        com.android.internal.os.ProcessCpuTracker r0;
        long l0, l1, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l30, $l37, $l42, $l43, $l44, $l45, $l46, l47, l48, l49, l50;
        int i2, i3, i4, i5, i6, i7, i8, i9, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i31, $i32, $i33, $i34, $i35, $i36, $i38, $i39, $i40, $i41, i51, i52;
        com.android.internal.os.ProcessCpuTracker$Stats r3, r4;
        java.text.SimpleDateFormat $r5;
        java.io.StringWriter $r6;
        com.android.internal.util.FastPrintWriter $r7;
        byte $b10, $b18, $b19;
        java.util.Date $r8, $r10;
        java.lang.String $r9, $r11, $r13, $r16, $r21, r23, r24;
        java.util.ArrayList $r12, $r14, $r17, $r18, $r19;
        java.lang.Object $r15, $r20;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        l47 := @parameter0: long;

        $r5 = new java.text.SimpleDateFormat;

        specialinvoke $r5.<java.text.SimpleDateFormat: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss.SSS");

        virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: void buildWorkingProcs()>();

        $r6 = new java.io.StringWriter;

        specialinvoke $r6.<java.io.StringWriter: void <init>()>();

        $r7 = new com.android.internal.util.FastPrintWriter;

        specialinvoke $r7.<com.android.internal.util.FastPrintWriter: void <init>(java.io.Writer,boolean,int)>($r6, 0, 1024);

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>("CPU usage from ");

        l48 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleTime>;

        $b10 = l47 cmp l48;

        if $b10 <= 0 goto label01;

        $l44 = l47 - l48;

        virtualinvoke $r7.<java.io.PrintWriter: void print(long)>($l44);

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>("ms to ");

        $l45 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime>;

        $l46 = l47 - $l45;

        virtualinvoke $r7.<java.io.PrintWriter: void print(long)>($l46);

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>("ms ago");

        goto label02;

     label01:
        $l11 = l48 - l47;

        virtualinvoke $r7.<java.io.PrintWriter: void print(long)>($l11);

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>("ms to ");

        $l12 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime>;

        $l13 = $l12 - l47;

        virtualinvoke $r7.<java.io.PrintWriter: void print(long)>($l13);

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>("ms later");

     label02:
        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>(" (");

        $r8 = new java.util.Date;

        $l14 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleWallTime>;

        specialinvoke $r8.<java.util.Date: void <init>(long)>($l14);

        $r9 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r8);

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>($r9);

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>(" to ");

        $r10 = new java.util.Date;

        $l15 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleWallTime>;

        specialinvoke $r10.<java.util.Date: void <init>(long)>($l15);

        $r11 = virtualinvoke $r5.<java.text.SimpleDateFormat: java.lang.String format(java.util.Date)>($r10);

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>($r11);

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>(")");

        l0 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime>;

        l49 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleTime>;

        $l17 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleRealTime>;

        $l16 = r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleRealTime>;

        l1 = $l17 - $l16;

        l50 = 0L;

        $b18 = l1 cmp 0L;

        if $b18 <= 0 goto label03;

        $l42 = l0 - l49;

        $l43 = $l42 * 100L;

        l50 = $l43 / l1;

     label03:
        $b19 = l50 cmp 100L;

        if $b19 == 0 goto label04;

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>(" with ");

        virtualinvoke $r7.<java.io.PrintWriter: void print(long)>(l50);

        virtualinvoke $r7.<java.io.PrintWriter: void print(java.lang.String)>("% awake");

     label04:
        virtualinvoke $r7.<java.io.PrintWriter: void println(java.lang.String)>(":");

        i2 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        i3 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        i4 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIoWaitTime>;

        i5 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        i6 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSoftIrqTime>;

        i7 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIdleTime>;

        $r12 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        i8 = virtualinvoke $r12.<java.util.ArrayList: int size()>();

        i51 = 0;

     label05:
        if i51 >= i8 goto label17;

        $r14 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mWorkingProcs>;

        $r15 = virtualinvoke $r14.<java.util.ArrayList: java.lang.Object get(int)>(i51);

        r3 = (com.android.internal.os.ProcessCpuTracker$Stats) $r15;

        $z0 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: boolean added>;

        if $z0 == 0 goto label07;

        r23 = " +";

     label06:
        goto label09;

     label07:
        $z1 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed>;

        if $z1 == 0 goto label08;

        r23 = " -";

        goto label06;

     label08:
        r23 = "  ";

        goto label06;

     label09:
        $i36 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        $r16 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $l30 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: long rel_uptime>;

        $i35 = (int) $l30;

        $i34 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime>;

        $i33 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime>;

        $i32 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_minfaults>;

        $i31 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_majfaults>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printProcessCPU(java.io.PrintWriter,java.lang.String,int,java.lang.String,int,int,int,int,int,int,int,int)>($r7, r23, $i36, $r16, $i35, $i34, $i33, 0, 0, 0, $i32, $i31);

        $z2 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed>;

        if $z2 != 0 goto label16;

        $r17 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        if $r17 == null goto label16;

        $r18 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        i9 = virtualinvoke $r18.<java.util.ArrayList: int size()>();

        i52 = 0;

     label10:
        if i52 >= i9 goto label15;

        $r19 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: java.util.ArrayList workingThreads>;

        $r20 = virtualinvoke $r19.<java.util.ArrayList: java.lang.Object get(int)>(i52);

        r4 = (com.android.internal.os.ProcessCpuTracker$Stats) $r20;

        $z3 = r4.<com.android.internal.os.ProcessCpuTracker$Stats: boolean added>;

        if $z3 == 0 goto label12;

        r24 = "   +";

     label11:
        goto label14;

     label12:
        $z4 = r4.<com.android.internal.os.ProcessCpuTracker$Stats: boolean removed>;

        if $z4 == 0 goto label13;

        r24 = "   -";

        goto label11;

     label13:
        r24 = "    ";

        goto label11;

     label14:
        $i41 = r4.<com.android.internal.os.ProcessCpuTracker$Stats: int pid>;

        $r21 = r4.<com.android.internal.os.ProcessCpuTracker$Stats: java.lang.String name>;

        $l37 = r3.<com.android.internal.os.ProcessCpuTracker$Stats: long rel_uptime>;

        $i40 = (int) $l37;

        $i39 = r4.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_utime>;

        $i38 = r4.<com.android.internal.os.ProcessCpuTracker$Stats: int rel_stime>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printProcessCPU(java.io.PrintWriter,java.lang.String,int,java.lang.String,int,int,int,int,int,int,int,int)>($r7, r24, $i41, $r21, $i40, $i39, $i38, 0, 0, 0, 0, 0);

        i52 = i52 + 1;

        goto label10;

     label15:
        goto label16;

     label16:
        i51 = i51 + 1;

        goto label05;

     label17:
        $i20 = i2 + i3;

        $i21 = $i20 + i4;

        $i22 = $i21 + i5;

        $i23 = $i22 + i6;

        $i29 = $i23 + i7;

        $i28 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime>;

        $i27 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime>;

        $i26 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIoWaitTime>;

        $i25 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime>;

        $i24 = r0.<com.android.internal.os.ProcessCpuTracker: int mRelSoftIrqTime>;

        specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: void printProcessCPU(java.io.PrintWriter,java.lang.String,int,java.lang.String,int,int,int,int,int,int,int,int)>($r7, "", -1, "TOTAL", $i29, $i28, $i27, $i26, $i25, $i24, 0, 0);

        virtualinvoke $r7.<java.io.PrintWriter: void flush()>();

        $r13 = virtualinvoke $r6.<java.io.StringWriter: java.lang.String toString()>();

        return $r13;
    }

    public void update()
    {
        com.android.internal.os.ProcessCpuTracker r0;
        long l0, l1, l2, l3, l4, l5, $l6, $l7, $l8, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l21, $l22, $l24, $l25, $l27, $l28, $l30, $l31, $l33, $l34, l36, l37, l38, l39, l40, l41;
        android.os.StrictMode$ThreadPolicy r1;
        float f0, f1, f2, $f3, $f4, $f5;
        int[] $r2, $r4, $r5, $r6;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r3;
        byte $b9, $b10, $b11;
        int $i20, $i23, $i26, $i29, $i32, $i35;
        java.lang.Throwable $r7;
        long[] r8;
        float[] r9;

        r0 := @this: com.android.internal.os.ProcessCpuTracker;

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l2 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        r8 = r0.<com.android.internal.os.ProcessCpuTracker: long[] mSystemCpuData>;

        $r2 = <com.android.internal.os.ProcessCpuTracker: int[] SYSTEM_CPU_FORMAT>;

        $z0 = staticinvoke <android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>("/proc/stat", $r2, null, r8, null);

        if $z0 == 0 goto label1;

        l36 = r8[0];

        l37 = r8[1];

        l38 = r0.<com.android.internal.os.ProcessCpuTracker: long mJiffyMillis>;

        $l12 = l36 + l37;

        l39 = $l12 * l38;

        $l13 = r8[2];

        l40 = $l13 * l38;

        $l14 = r8[3];

        l3 = $l14 * l38;

        $l15 = r8[4];

        l4 = $l15 * l38;

        $l16 = r8[5];

        l5 = $l16 * l38;

        $l17 = r8[6];

        l41 = l38 * $l17;

        $l18 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseUserTime>;

        $l19 = l39 - $l18;

        $i20 = (int) $l19;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelUserTime> = $i20;

        $l21 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseSystemTime>;

        $l22 = l40 - $l21;

        $i23 = (int) $l22;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelSystemTime> = $i23;

        $l24 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIoWaitTime>;

        $l25 = l4 - $l24;

        $i26 = (int) $l25;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelIoWaitTime> = $i26;

        $l27 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIrqTime>;

        $l28 = l5 - $l27;

        $i29 = (int) $l28;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelIrqTime> = $i29;

        $l30 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseSoftIrqTime>;

        $l31 = l41 - $l30;

        $i32 = (int) $l31;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelSoftIrqTime> = $i32;

        $l33 = r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIdleTime>;

        $l34 = l3 - $l33;

        $i35 = (int) $l34;

        r0.<com.android.internal.os.ProcessCpuTracker: int mRelIdleTime> = $i35;

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mRelStatsAreGood> = 1;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseUserTime> = l39;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseSystemTime> = l40;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIoWaitTime> = l4;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIrqTime> = l5;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseSoftIrqTime> = l41;

        r0.<com.android.internal.os.ProcessCpuTracker: long mBaseIdleTime> = l3;

        goto label1;

     label1:
        $l6 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime>;

        r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleTime> = $l6;

        r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleTime> = l0;

        $l7 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleRealTime>;

        r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleRealTime> = $l7;

        r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleRealTime> = l1;

        $l8 = r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleWallTime>;

        r0.<com.android.internal.os.ProcessCpuTracker: long mLastSampleWallTime> = $l8;

        r0.<com.android.internal.os.ProcessCpuTracker: long mCurrentSampleWallTime> = l2;

        r1 = staticinvoke <android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskReads()>();

     label2:
        $z1 = r0.<com.android.internal.os.ProcessCpuTracker: boolean mFirst>;

        $r4 = r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurPids>;

        $r3 = r0.<com.android.internal.os.ProcessCpuTracker: java.util.ArrayList mProcStats>;

        $r5 = specialinvoke r0.<com.android.internal.os.ProcessCpuTracker: int[] collectStats(java.lang.String,int,boolean,int[],java.util.ArrayList)>("/proc", -1, $z1, $r4, $r3);

        r0.<com.android.internal.os.ProcessCpuTracker: int[] mCurPids> = $r5;

     label3:
        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r1);

        r9 = r0.<com.android.internal.os.ProcessCpuTracker: float[] mLoadAverageData>;

        $r6 = <com.android.internal.os.ProcessCpuTracker: int[] LOAD_AVERAGE_FORMAT>;

        $z2 = staticinvoke <android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>("/proc/loadavg", $r6, null, null, r9);

        if $z2 == 0 goto label5;

        f0 = r9[0];

        f1 = r9[1];

        f2 = r9[2];

        $f3 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad1>;

        $b9 = f0 cmpl $f3;

        if $b9 != 0 goto label4;

        $f4 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad5>;

        $b10 = f1 cmpl $f4;

        if $b10 != 0 goto label4;

        $f5 = r0.<com.android.internal.os.ProcessCpuTracker: float mLoad15>;

        $b11 = f2 cmpl $f5;

        if $b11 == 0 goto label5;

     label4:
        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad1> = f0;

        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad5> = f1;

        r0.<com.android.internal.os.ProcessCpuTracker: float mLoad15> = f2;

        virtualinvoke r0.<com.android.internal.os.ProcessCpuTracker: void onLoadChanged(float,float,float)>(f0, f1, f2);

     label5:
        r0.<com.android.internal.os.ProcessCpuTracker: boolean mWorkingProcsSorted> = 0;

        r0.<com.android.internal.os.ProcessCpuTracker: boolean mFirst> = 0;

        return;

     label6:
        $r7 := @caughtexception;

        staticinvoke <android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>(r1);

        throw $r7;

        catch java.lang.Throwable from label2 to label3 with label6;
    }
}
