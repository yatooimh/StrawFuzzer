public class com.android.internal.os.RuntimeInit extends java.lang.Object
{
    static final boolean DEBUG;
    static final java.lang.String TAG;
    private static boolean initialized;
    private static android.os.IBinder mApplicationObject;
    private static volatile boolean mCrashing;
    private static volatile com.android.internal.os.RuntimeInit$ApplicationWtfHandler sDefaultApplicationWtfHandler;

    static void <clinit>()
    {
        <com.android.internal.os.RuntimeInit: java.lang.String TAG> = "AndroidRuntime";

        <com.android.internal.os.RuntimeInit: boolean DEBUG> = 0;

        <com.android.internal.os.RuntimeInit: boolean mCrashing> = 0;

        return;
    }

    public void <init>()
    {
        com.android.internal.os.RuntimeInit r0;

        r0 := @this: com.android.internal.os.RuntimeInit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static int Clog_e(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0, r1;
        java.lang.Throwable r2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        $i0 = staticinvoke <android.util.Log: int printlns(int,int,java.lang.String,java.lang.String,java.lang.Throwable)>(4, 6, r0, r1, r2);

        return $i0;
    }

    static boolean access$000()
    {
        boolean $z0;

        $z0 = <com.android.internal.os.RuntimeInit: boolean mCrashing>;

        return $z0;
    }

    static boolean access$002(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        <com.android.internal.os.RuntimeInit: boolean mCrashing> = z0;

        return z0;
    }

    static android.os.IBinder access$100()
    {
        android.os.IBinder $r0;

        $r0 = <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject>;

        return $r0;
    }

    static int access$200(java.lang.String, java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0, r1;
        java.lang.Throwable r2;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Throwable;

        $i0 = staticinvoke <com.android.internal.os.RuntimeInit: int Clog_e(java.lang.String,java.lang.String,java.lang.Throwable)>(r0, r1, r2);

        return $i0;
    }

    protected static java.lang.Runnable applicationInit(int, long[], java.lang.String[], java.lang.ClassLoader)
    {
        int i0;
        java.lang.String[] r0, $r5;
        java.lang.ClassLoader r1;
        dalvik.system.VMRuntime $r2, $r3;
        com.android.internal.os.RuntimeInit$Arguments $r4;
        java.lang.String $r6;
        java.lang.Runnable $r7;
        long[] r8;

        i0 := @parameter0: int;

        r8 := @parameter1: long[];

        r0 := @parameter2: java.lang.String[];

        r1 := @parameter3: java.lang.ClassLoader;

        staticinvoke <com.android.internal.os.RuntimeInit: void nativeSetExitWithoutCleanup(boolean)>(1);

        $r2 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r2.<dalvik.system.VMRuntime: void setTargetSdkVersion(int)>(i0);

        $r3 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r3.<dalvik.system.VMRuntime: void setDisabledCompatChanges(long[])>(r8);

        $r4 = new com.android.internal.os.RuntimeInit$Arguments;

        specialinvoke $r4.<com.android.internal.os.RuntimeInit$Arguments: void <init>(java.lang.String[])>(r0);

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        $r6 = $r4.<com.android.internal.os.RuntimeInit$Arguments: java.lang.String startClass>;

        $r5 = $r4.<com.android.internal.os.RuntimeInit$Arguments: java.lang.String[] startArgs>;

        $r7 = staticinvoke <com.android.internal.os.RuntimeInit: java.lang.Runnable findStaticMain(java.lang.String,java.lang.String[],java.lang.ClassLoader)>($r6, $r5, r1);

        return $r7;
    }

    protected static final void commonInit()
    {
        com.android.internal.os.'-$$Lambda$RuntimeInit$ep4ioD9YINkHI5Q1wZ0N_7VFAOg' $r3;
        java.util.logging.LogManager $r4;
        java.lang.String $r6, $r8;
        boolean $z0;
        com.android.internal.os.RuntimeInit$LoggingHandler r9;
        com.android.internal.os.RuntimeInit$KillApplicationHandler r10;
        com.android.internal.logging.AndroidConfig r11;
        java.util.function.Supplier r12;

        r9 = new com.android.internal.os.RuntimeInit$LoggingHandler;

        specialinvoke r9.<com.android.internal.os.RuntimeInit$LoggingHandler: void <init>(com.android.internal.os.RuntimeInit$1)>(null);

        staticinvoke <dalvik.system.RuntimeHooks: void setUncaughtExceptionPreHandler(java.lang.Thread$UncaughtExceptionHandler)>(r9);

        r10 = new com.android.internal.os.RuntimeInit$KillApplicationHandler;

        specialinvoke r10.<com.android.internal.os.RuntimeInit$KillApplicationHandler: void <init>(com.android.internal.os.RuntimeInit$LoggingHandler)>(r9);

        staticinvoke <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)>(r10);

        $r3 = <com.android.internal.os._$$Lambda$RuntimeInit$ep4ioD9YINkHI5Q1wZ0N_7VFAOg: com.android.internal.os.'-$$Lambda$RuntimeInit$ep4ioD9YINkHI5Q1wZ0N_7VFAOg' INSTANCE>;

        r12 = (java.util.function.Supplier) $r3;

        staticinvoke <dalvik.system.RuntimeHooks: void setTimeZoneIdSupplier(java.util.function.Supplier)>(r12);

        $r4 = staticinvoke <java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>();

        virtualinvoke $r4.<java.util.logging.LogManager: void reset()>();

        r11 = new com.android.internal.logging.AndroidConfig;

        specialinvoke r11.<com.android.internal.logging.AndroidConfig: void <init>()>();

        $r6 = staticinvoke <com.android.internal.os.RuntimeInit: java.lang.String getDefaultUserAgent()>();

        staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("http.agent", $r6);

        staticinvoke <com.android.server.NetworkManagementSocketTagger: void install()>();

        $r8 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.kernel.android.tracing");

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("1");

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("AndroidRuntime", "NOTE: emulator trace profiling enabled");

        staticinvoke <android.os.Debug: void enableEmulatorTraceOutput()>();

     label1:
        <com.android.internal.os.RuntimeInit: boolean initialized> = 1;

        return;
    }

    private static void enableDdms()
    {
        staticinvoke <android.ddm.DdmRegister: void registerHandlers()>();

        return;
    }

    protected static java.lang.Runnable findStaticMain(java.lang.String, java.lang.String[], java.lang.ClassLoader)
    {
        java.lang.String r0, $r6, $r13, $r19, $r25;
        int i0;
        java.lang.Class[] $r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r9, $r15, $r21;
        java.lang.RuntimeException $r5, $r12, $r18, $r24;
        com.android.internal.os.RuntimeInit$MethodAndArgsCaller $r7;
        java.lang.Throwable $r8, $r14;
        java.lang.ClassNotFoundException $r20;
        java.lang.String[] r26;
        java.lang.ClassLoader r27;
        java.lang.Class r28;
        java.lang.reflect.Method r29;

        r0 := @parameter0: java.lang.String;

        r26 := @parameter1: java.lang.String[];

        r27 := @parameter2: java.lang.ClassLoader;

     label1:
        r28 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r0, 1, r27);

     label2:
        $r1 = newarray (java.lang.Class)[1];

        $r1[0] = class "[Ljava/lang/String;";

        r29 = virtualinvoke r28.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("main", $r1);

     label3:
        i0 = virtualinvoke r29.<java.lang.reflect.Method: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>(i0);

        if $z0 == 0 goto label4;

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i0);

        if $z1 == 0 goto label4;

        $r7 = new com.android.internal.os.RuntimeInit$MethodAndArgsCaller;

        specialinvoke $r7.<com.android.internal.os.RuntimeInit$MethodAndArgsCaller: void <init>(java.lang.reflect.Method,java.lang.String[])>(r29, r26);

        return $r7;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Main method is not public and static on ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = new java.lang.RuntimeException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6);

        throw $r5;

     label5:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem getting static main on ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r12 = new java.lang.RuntimeException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r8);

        throw $r12;

     label6:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing static main on ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r18 = new java.lang.RuntimeException;

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r19, $r14);

        throw $r18;

     label7:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing class when invoking static main ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r24 = new java.lang.RuntimeException;

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r24.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r25, $r20);

        throw $r24;

        catch java.lang.ClassNotFoundException from label1 to label2 with label7;
        catch java.lang.NoSuchMethodException from label2 to label3 with label6;
        catch java.lang.SecurityException from label2 to label3 with label5;
    }

    public static final android.os.IBinder getApplicationObject()
    {
        android.os.IBinder $r0;

        $r0 = <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject>;

        return $r0;
    }

    private static java.lang.String getDefaultUserAgent()
    {
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r7, $r8, $r10, r15, r16, r17;
        int $i0, $i1, $i2;
        boolean $z0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>(64);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dalvik/");

        $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.version");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (Linux; U; Android ");

        r15 = <android.os.Build$VERSION: java.lang.String RELEASE_OR_CODENAME>;

        $i0 = virtualinvoke r15.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        goto label2;

     label1:
        r15 = "1.0";

     label2:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r8 = "REL";

        $r7 = <android.os.Build$VERSION: java.lang.String CODENAME>;

        $z0 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z0 == 0 goto label3;

        r16 = <android.os.Build: java.lang.String MODEL>;

        $i1 = virtualinvoke r16.<java.lang.String: int length()>();

        if $i1 <= 0 goto label3;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

     label3:
        r17 = <android.os.Build: java.lang.String ID>;

        $i2 = virtualinvoke r17.<java.lang.String: int length()>();

        if $i2 <= 0 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Build/");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r10 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    static java.lang.String lambda$commonInit$0()
    {
        java.lang.String $r0;

        $r0 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("persist.sys.timezone");

        return $r0;
    }

    public static void logUncaught(java.lang.String, java.lang.String, int, java.lang.Throwable)
    {
        java.lang.String r0, r1, $r10;
        int i0;
        java.lang.Throwable r2;
        java.lang.StringBuilder $r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.Throwable;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FATAL EXCEPTION: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        if r1 == null goto label1;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Process: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label1:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PID: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.os.RuntimeInit: int Clog_e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", $r10, r2);

        return;
    }

    public static final void main(java.lang.String[])
    {
        java.lang.String[] r0;
        int $i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <com.android.internal.os.RuntimeInit: void preForkInit()>();

        $i0 = lengthof r0;

        if $i0 != 2 goto label1;

        $r1 = r0[1];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("application");

        if $z0 == 0 goto label1;

        staticinvoke <com.android.internal.os.RuntimeInit: void redirectLogStreams()>();

     label1:
        staticinvoke <com.android.internal.os.RuntimeInit: void commonInit()>();

        staticinvoke <com.android.internal.os.RuntimeInit: void nativeFinishInit()>();

        return;
    }

    private static final native void nativeFinishInit();

    private static final native void nativeSetExitWithoutCleanup(boolean);

    public static void preForkInit()
    {
        com.android.internal.os.'-$$Lambda$6-ytl6NLMGWt_iQr4_PfakNWUKQ' $r1;
        com.android.internal.os.RuntimeInit$RuntimeThreadPrioritySetter r2;
        java.util.function.Supplier r3;

        r2 = new com.android.internal.os.RuntimeInit$RuntimeThreadPrioritySetter;

        specialinvoke r2.<com.android.internal.os.RuntimeInit$RuntimeThreadPrioritySetter: void <init>(com.android.internal.os.RuntimeInit$1)>(null);

        staticinvoke <dalvik.system.RuntimeHooks: void setThreadPrioritySetter(dalvik.system.ThreadPrioritySetter)>(r2);

        staticinvoke <com.android.internal.os.RuntimeInit: void enableDdms()>();

        $r1 = <com.android.internal.os._$$Lambda$6_ytl6NLMGWt_iQr4_PfakNWUKQ: com.android.internal.os.'-$$Lambda$6-ytl6NLMGWt_iQr4_PfakNWUKQ' INSTANCE>;

        r3 = (java.util.function.Supplier) $r1;

        staticinvoke <libcore.content.type.MimeMap: void setDefaultSupplier(java.util.function.Supplier)>(r3);

        return;
    }

    public static void redirectLogStreams()
    {
        java.io.PrintStream $r0, $r2;
        com.android.internal.os.AndroidPrintStream $r1, $r3;

        $r0 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r0.<java.io.PrintStream: void close()>();

        $r1 = new com.android.internal.os.AndroidPrintStream;

        specialinvoke $r1.<com.android.internal.os.AndroidPrintStream: void <init>(int,java.lang.String)>(4, "System.out");

        staticinvoke <java.lang.System: void setOut(java.io.PrintStream)>($r1);

        $r2 = <java.lang.System: java.io.PrintStream err>;

        virtualinvoke $r2.<java.io.PrintStream: void close()>();

        $r3 = new com.android.internal.os.AndroidPrintStream;

        specialinvoke $r3.<com.android.internal.os.AndroidPrintStream: void <init>(int,java.lang.String)>(5, "System.err");

        staticinvoke <java.lang.System: void setErr(java.io.PrintStream)>($r3);

        return;
    }

    public static final void setApplicationObject(android.os.IBinder)
    {
        android.os.IBinder r0;

        r0 := @parameter0: android.os.IBinder;

        <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject> = r0;

        return;
    }

    public static void setDefaultApplicationWtfHandler(com.android.internal.os.RuntimeInit$ApplicationWtfHandler)
    {
        com.android.internal.os.RuntimeInit$ApplicationWtfHandler r0;

        r0 := @parameter0: com.android.internal.os.RuntimeInit$ApplicationWtfHandler;

        <com.android.internal.os.RuntimeInit: com.android.internal.os.RuntimeInit$ApplicationWtfHandler sDefaultApplicationWtfHandler> = r0;

        return;
    }

    public static void wtf(java.lang.String, java.lang.Throwable, boolean)
    {
        java.lang.Throwable r0, $r1;
        int $i1, $i2, $i3;
        boolean $z1, z2, z3;
        java.lang.String r2;
        android.app.IActivityManager r3;
        android.os.IBinder r4, r7;
        android.app.ApplicationErrorReport$ParcelableCrashInfo r5, r8;
        com.android.internal.os.RuntimeInit$ApplicationWtfHandler r6;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Throwable;

        z2 := @parameter2: boolean;

     label01:
        r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

     label02:
        if r3 == null goto label05;

     label03:
        r4 = <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject>;

        r5 = new android.app.ApplicationErrorReport$ParcelableCrashInfo;

        specialinvoke r5.<android.app.ApplicationErrorReport$ParcelableCrashInfo: void <init>(java.lang.Throwable)>(r0);

        $i3 = staticinvoke <android.os.Process: int myPid()>();

        z3 = interfaceinvoke r3.<android.app.IActivityManager: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>(r4, r2, z2, r5, $i3);

     label04:
        goto label11;

     label05:
        r6 = <com.android.internal.os.RuntimeInit: com.android.internal.os.RuntimeInit$ApplicationWtfHandler sDefaultApplicationWtfHandler>;

     label06:
        if r6 == null goto label09;

     label07:
        r7 = <com.android.internal.os.RuntimeInit: android.os.IBinder mApplicationObject>;

        r8 = new android.app.ApplicationErrorReport$ParcelableCrashInfo;

        specialinvoke r8.<android.app.ApplicationErrorReport$ParcelableCrashInfo: void <init>(java.lang.Throwable)>(r0);

        $i2 = staticinvoke <android.os.Process: int myPid()>();

        z3 = interfaceinvoke r6.<com.android.internal.os.RuntimeInit$ApplicationWtfHandler: boolean handleApplicationWtf(android.os.IBinder,java.lang.String,boolean,android.app.ApplicationErrorReport$ParcelableCrashInfo,int)>(r7, r2, z2, r8, $i2);

     label08:
        goto label11;

     label09:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", "Original WTF:", r0);

     label10:
        z3 = 0;

     label11:
        if z3 == 0 goto label13;

     label12:
        $i1 = staticinvoke <android.os.Process: int myPid()>();

        staticinvoke <android.os.Process: void killProcess(int)>($i1);

        staticinvoke <java.lang.System: void exit(int)>(10);

     label13:
        goto label16;

     label14:
        $r1 := @caughtexception;

        $z1 = $r1 instanceof android.os.DeadObjectException;

        if $z1 == 0 goto label15;

        goto label16;

     label15:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", "Error reporting WTF", $r1);

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", "Original WTF:", r0);

     label16:
        return;

        catch java.lang.Throwable from label01 to label02 with label14;
        catch java.lang.Throwable from label03 to label04 with label14;
        catch java.lang.Throwable from label05 to label06 with label14;
        catch java.lang.Throwable from label07 to label08 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
    }
}
