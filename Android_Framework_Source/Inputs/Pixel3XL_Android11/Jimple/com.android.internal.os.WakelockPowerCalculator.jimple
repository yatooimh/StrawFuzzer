public class com.android.internal.os.WakelockPowerCalculator extends com.android.internal.os.PowerCalculator
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private final double mPowerWakelock;
    private long mTotalAppWakelockTimeMs;

    public void <init>(com.android.internal.os.PowerProfile)
    {
        com.android.internal.os.WakelockPowerCalculator r0;
        com.android.internal.os.PowerProfile r1;
        double $d0;

        r0 := @this: com.android.internal.os.WakelockPowerCalculator;

        r1 := @parameter0: com.android.internal.os.PowerProfile;

        specialinvoke r0.<com.android.internal.os.PowerCalculator: void <init>()>();

        r0.<com.android.internal.os.WakelockPowerCalculator: long mTotalAppWakelockTimeMs> = 0L;

        $d0 = virtualinvoke r1.<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String)>("cpu.idle");

        r0.<com.android.internal.os.WakelockPowerCalculator: double mPowerWakelock> = $d0;

        return;
    }

    public void calculateApp(com.android.internal.os.BatterySipper, android.os.BatteryStats$Uid, long, long, int)
    {
        com.android.internal.os.WakelockPowerCalculator r0;
        com.android.internal.os.BatterySipper r1;
        long l0, $l3, $l4, $l5, $l6, $l7, $l8, l9, l10;
        int i1, i2, i11;
        android.os.BatteryStats$Timer r2;
        double $d0, $d1, $d2, $d3;
        java.lang.Object $r3;
        android.os.BatteryStats$Uid$Wakelock $r4;
        android.os.BatteryStats$Uid r5;
        android.util.ArrayMap r6;

        r0 := @this: com.android.internal.os.WakelockPowerCalculator;

        r1 := @parameter0: com.android.internal.os.BatterySipper;

        r5 := @parameter1: android.os.BatteryStats$Uid;

        l0 := @parameter2: long;

        l9 := @parameter3: long;

        i1 := @parameter4: int;

        l10 = 0L;

        r6 = virtualinvoke r5.<android.os.BatteryStats$Uid: android.util.ArrayMap getWakelockStats()>();

        i2 = virtualinvoke r6.<android.util.ArrayMap: int size()>();

        i11 = 0;

     label1:
        if i11 >= i2 goto label3;

        $r3 = virtualinvoke r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i11);

        $r4 = (android.os.BatteryStats$Uid$Wakelock) $r3;

        r2 = virtualinvoke $r4.<android.os.BatteryStats$Uid$Wakelock: android.os.BatteryStats$Timer getWakeTime(int)>(0);

        if r2 == null goto label2;

        $l8 = virtualinvoke r2.<android.os.BatteryStats$Timer: long getTotalTimeLocked(long,int)>(l0, i1);

        l10 = l10 + $l8;

        goto label2;

     label2:
        i11 = i11 + 1;

        goto label1;

     label3:
        $l3 = l10 / 1000L;

        r1.<com.android.internal.os.BatterySipper: long wakeLockTimeMs> = $l3;

        $l5 = r0.<com.android.internal.os.WakelockPowerCalculator: long mTotalAppWakelockTimeMs>;

        $l4 = r1.<com.android.internal.os.BatterySipper: long wakeLockTimeMs>;

        $l6 = $l5 + $l4;

        r0.<com.android.internal.os.WakelockPowerCalculator: long mTotalAppWakelockTimeMs> = $l6;

        $l7 = r1.<com.android.internal.os.BatterySipper: long wakeLockTimeMs>;

        $d1 = (double) $l7;

        $d0 = r0.<com.android.internal.os.WakelockPowerCalculator: double mPowerWakelock>;

        $d2 = $d1 * $d0;

        $d3 = $d2 / 3600000.0;

        r1.<com.android.internal.os.BatterySipper: double wakeLockPowerMah> = $d3;

        return;
    }

    public void calculateRemaining(com.android.internal.os.BatterySipper, android.os.BatteryStats, long, long, int)
    {
        com.android.internal.os.WakelockPowerCalculator r0;
        com.android.internal.os.BatterySipper r1;
        android.os.BatteryStats r2;
        long l0, $l2, $l3, $l4, $l5, $l6, $l7, $l9, $l10, l11, l12;
        int i1;
        double d0, $d1, $d2, $d3, $d4, $d5;
        byte $b8;

        r0 := @this: com.android.internal.os.WakelockPowerCalculator;

        r1 := @parameter0: com.android.internal.os.BatterySipper;

        r2 := @parameter1: android.os.BatteryStats;

        l11 := @parameter2: long;

        l0 := @parameter3: long;

        i1 := @parameter4: int;

        $l2 = virtualinvoke r2.<android.os.BatteryStats: long getBatteryUptime(long)>(l0);

        $l3 = $l2 / 1000L;

        $l4 = r0.<com.android.internal.os.WakelockPowerCalculator: long mTotalAppWakelockTimeMs>;

        $l5 = virtualinvoke r2.<android.os.BatteryStats: long getScreenOnTime(long,int)>(l11, i1);

        $l6 = $l5 / 1000L;

        $l7 = $l4 + $l6;

        l12 = $l3 - $l7;

        $b8 = l12 cmp 0L;

        if $b8 <= 0 goto label1;

        $d2 = (double) l12;

        $d1 = r0.<com.android.internal.os.WakelockPowerCalculator: double mPowerWakelock>;

        $d3 = $d2 * $d1;

        d0 = $d3 / 3600000.0;

        $l9 = r1.<com.android.internal.os.BatterySipper: long wakeLockTimeMs>;

        $l10 = $l9 + l12;

        r1.<com.android.internal.os.BatterySipper: long wakeLockTimeMs> = $l10;

        $d4 = r1.<com.android.internal.os.BatterySipper: double wakeLockPowerMah>;

        $d5 = $d4 + d0;

        r1.<com.android.internal.os.BatterySipper: double wakeLockPowerMah> = $d5;

     label1:
        return;
    }

    public void reset()
    {
        com.android.internal.os.WakelockPowerCalculator r0;

        r0 := @this: com.android.internal.os.WakelockPowerCalculator;

        r0.<com.android.internal.os.WakelockPowerCalculator: long mTotalAppWakelockTimeMs> = 0L;

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.os.WakelockPowerCalculator: java.lang.String TAG> = "WakelockPowerCalculator";

        <com.android.internal.os.WakelockPowerCalculator: boolean DEBUG> = 0;

        return;
    }
}
