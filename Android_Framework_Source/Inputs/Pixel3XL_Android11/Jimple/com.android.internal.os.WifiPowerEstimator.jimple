public class com.android.internal.os.WifiPowerEstimator extends com.android.internal.os.PowerCalculator
{
    private static final boolean DEBUG;
    private static final java.lang.String TAG;
    private long mTotalAppWifiRunningTimeMs;
    private final double mWifiPowerBatchScan;
    private final double mWifiPowerOn;
    private final double mWifiPowerPerPacket;
    private final double mWifiPowerScan;

    public void <init>(com.android.internal.os.PowerProfile)
    {
        com.android.internal.os.WifiPowerEstimator r0;
        com.android.internal.os.PowerProfile r1;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.android.internal.os.WifiPowerEstimator;

        r1 := @parameter0: com.android.internal.os.PowerProfile;

        specialinvoke r0.<com.android.internal.os.PowerCalculator: void <init>()>();

        r0.<com.android.internal.os.WifiPowerEstimator: long mTotalAppWifiRunningTimeMs> = 0L;

        $d0 = staticinvoke <com.android.internal.os.WifiPowerEstimator: double getWifiPowerPerPacket(com.android.internal.os.PowerProfile)>(r1);

        r0.<com.android.internal.os.WifiPowerEstimator: double mWifiPowerPerPacket> = $d0;

        $d1 = virtualinvoke r1.<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String)>("wifi.on");

        r0.<com.android.internal.os.WifiPowerEstimator: double mWifiPowerOn> = $d1;

        $d2 = virtualinvoke r1.<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String)>("wifi.scan");

        r0.<com.android.internal.os.WifiPowerEstimator: double mWifiPowerScan> = $d2;

        $d3 = virtualinvoke r1.<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String)>("wifi.batchedscan");

        r0.<com.android.internal.os.WifiPowerEstimator: double mWifiPowerBatchScan> = $d3;

        return;
    }

    private static double getWifiPowerPerPacket(com.android.internal.os.PowerProfile)
    {
        com.android.internal.os.PowerProfile r0;
        double $d0, $d1, $d2;

        r0 := @parameter0: com.android.internal.os.PowerProfile;

        $d0 = virtualinvoke r0.<com.android.internal.os.PowerProfile: double getAveragePower(java.lang.String)>("wifi.active");

        $d1 = $d0 / 3600.0;

        $d2 = $d1 / 61.03515625;

        return $d2;
    }

    public void calculateApp(com.android.internal.os.BatterySipper, android.os.BatteryStats$Uid, long, long, int)
    {
        com.android.internal.os.WifiPowerEstimator r0;
        com.android.internal.os.BatterySipper r1;
        android.os.BatteryStats$Uid r2;
        long l0, $l2, $l3, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, l19;
        int i1, i22;
        double d0, d1, d2, d3, $d4, $d5, $d6, $d7, $d8, $d9, $d10, $d11, $d12, $d13, $d14, $d15, $d16, $d17, d18;

        r0 := @this: com.android.internal.os.WifiPowerEstimator;

        r1 := @parameter0: com.android.internal.os.BatterySipper;

        r2 := @parameter1: android.os.BatteryStats$Uid;

        l0 := @parameter2: long;

        l19 := @parameter3: long;

        i1 := @parameter4: int;

        $l2 = virtualinvoke r2.<android.os.BatteryStats$Uid: long getNetworkActivityPackets(int,int)>(2, i1);

        r1.<com.android.internal.os.BatterySipper: long wifiRxPackets> = $l2;

        $l3 = virtualinvoke r2.<android.os.BatteryStats$Uid: long getNetworkActivityPackets(int,int)>(3, i1);

        r1.<com.android.internal.os.BatterySipper: long wifiTxPackets> = $l3;

        $l4 = virtualinvoke r2.<android.os.BatteryStats$Uid: long getNetworkActivityBytes(int,int)>(2, i1);

        r1.<com.android.internal.os.BatterySipper: long wifiRxBytes> = $l4;

        $l5 = virtualinvoke r2.<android.os.BatteryStats$Uid: long getNetworkActivityBytes(int,int)>(3, i1);

        r1.<com.android.internal.os.BatterySipper: long wifiTxBytes> = $l5;

        $l7 = r1.<com.android.internal.os.BatterySipper: long wifiRxPackets>;

        $l6 = r1.<com.android.internal.os.BatterySipper: long wifiTxPackets>;

        $l8 = $l7 + $l6;

        d0 = (double) $l8;

        d1 = r0.<com.android.internal.os.WifiPowerEstimator: double mWifiPowerPerPacket>;

        $l9 = virtualinvoke r2.<android.os.BatteryStats$Uid: long getWifiRunningTime(long,int)>(l0, i1);

        $l10 = $l9 / 1000L;

        r1.<com.android.internal.os.BatterySipper: long wifiRunningTimeMs> = $l10;

        $l12 = r0.<com.android.internal.os.WifiPowerEstimator: long mTotalAppWifiRunningTimeMs>;

        $l11 = r1.<com.android.internal.os.BatterySipper: long wifiRunningTimeMs>;

        $l13 = $l12 + $l11;

        r0.<com.android.internal.os.WifiPowerEstimator: long mTotalAppWifiRunningTimeMs> = $l13;

        $l14 = r1.<com.android.internal.os.BatterySipper: long wifiRunningTimeMs>;

        $d5 = (double) $l14;

        $d4 = r0.<com.android.internal.os.WifiPowerEstimator: double mWifiPowerOn>;

        $d6 = $d5 * $d4;

        d2 = $d6 / 3600000.0;

        $l15 = virtualinvoke r2.<android.os.BatteryStats$Uid: long getWifiScanTime(long,int)>(l0, i1);

        $l16 = $l15 / 1000L;

        $d8 = (double) $l16;

        $d7 = r0.<com.android.internal.os.WifiPowerEstimator: double mWifiPowerScan>;

        $d9 = $d8 * $d7;

        d3 = $d9 / 3600000.0;

        d18 = 0.0;

        i22 = 0;

     label1:
        if i22 >= 5 goto label2;

        $l17 = virtualinvoke r2.<android.os.BatteryStats$Uid: long getWifiBatchedScanTime(int,long,int)>(i22, l0, i1);

        $l18 = $l17 / 1000L;

        $d15 = (double) $l18;

        $d14 = r0.<com.android.internal.os.WifiPowerEstimator: double mWifiPowerBatchScan>;

        $d16 = $d15 * $d14;

        $d17 = $d16 / 3600000.0;

        d18 = d18 + $d17;

        i22 = i22 + 1;

        goto label1;

     label2:
        $d10 = d0 * d1;

        $d11 = $d10 + d2;

        $d12 = $d11 + d3;

        $d13 = $d12 + d18;

        r1.<com.android.internal.os.BatterySipper: double wifiPowerMah> = $d13;

        return;
    }

    public void calculateRemaining(com.android.internal.os.BatterySipper, android.os.BatteryStats, long, long, int)
    {
        com.android.internal.os.WifiPowerEstimator r0;
        com.android.internal.os.BatterySipper r1;
        android.os.BatteryStats r2;
        long l0, $l2, $l3, $l4, l5, l6;
        int i1;
        double d0, $d1, $d2, $d3, $d4;

        r0 := @this: com.android.internal.os.WifiPowerEstimator;

        r1 := @parameter0: com.android.internal.os.BatterySipper;

        r2 := @parameter1: android.os.BatteryStats;

        l5 := @parameter2: long;

        l0 := @parameter3: long;

        i1 := @parameter4: int;

        $l2 = virtualinvoke r2.<android.os.BatteryStats: long getGlobalWifiRunningTime(long,int)>(l5, i1);

        l6 = $l2 / 1000L;

        $l3 = r0.<com.android.internal.os.WifiPowerEstimator: long mTotalAppWifiRunningTimeMs>;

        $l4 = l6 - $l3;

        $d2 = (double) $l4;

        $d1 = r0.<com.android.internal.os.WifiPowerEstimator: double mWifiPowerOn>;

        $d3 = $d2 * $d1;

        d0 = $d3 / 3600000.0;

        r1.<com.android.internal.os.BatterySipper: long wifiRunningTimeMs> = l6;

        $d4 = staticinvoke <java.lang.Math: double max(double,double)>(0.0, d0);

        r1.<com.android.internal.os.BatterySipper: double wifiPowerMah> = $d4;

        return;
    }

    public void reset()
    {
        com.android.internal.os.WifiPowerEstimator r0;

        r0 := @this: com.android.internal.os.WifiPowerEstimator;

        r0.<com.android.internal.os.WifiPowerEstimator: long mTotalAppWifiRunningTimeMs> = 0L;

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.os.WifiPowerEstimator: java.lang.String TAG> = "WifiPowerEstimator";

        <com.android.internal.os.WifiPowerEstimator: boolean DEBUG> = 0;

        return;
    }
}
