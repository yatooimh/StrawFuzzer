public class com.android.internal.os.WrapperInit extends java.lang.Object
{
    private static final java.lang.String TAG;

    private void <init>()
    {
        com.android.internal.os.WrapperInit r0;

        r0 := @this: com.android.internal.os.WrapperInit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void execApplication(java.lang.String, java.lang.String, int, java.lang.String, java.io.FileDescriptor, java.lang.String[])
    {
        java.lang.String r0, r1, $r14, r18, r19;
        int i0, i1;
        java.io.FileDescriptor r2;
        java.lang.String[] r3;
        java.lang.StringBuilder $r5;
        boolean $z0;

        r18 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        r2 := @parameter4: java.io.FileDescriptor;

        r3 := @parameter5: java.lang.String[];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(r18);

        $z0 = staticinvoke <dalvik.system.VMRuntime: boolean is64BitInstructionSet(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        r19 = "/system/bin/app_process64";

        goto label2;

     label1:
        r19 = "/system/bin/app_process32";

     label2:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -Xcompiler-option --generate-mini-debug-info");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" /system/bin --application");

        if r0 == null goto label3;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'--nice-name=");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

     label3:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" com.android.internal.os.WrapperInit ");

        if r2 == null goto label4;

        i1 = virtualinvoke r2.<java.io.FileDescriptor: int getInt$()>();

        goto label5;

     label4:
        i1 = 0;

     label5:
        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        staticinvoke <com.android.internal.os.Zygote: void appendQuotedShellArgs(java.lang.StringBuilder,java.lang.String[])>($r5, r3);

        staticinvoke <com.android.internal.os.WrapperInit: void preserveCapabilities()>();

        $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.os.Zygote: void execShell(java.lang.String)>($r14);

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0, r9;
        int i0, i1, $i2, $i4, $i5, $i6;
        java.io.DataOutputStream r1;
        java.io.FileOutputStream r2;
        java.lang.String $r3, $r4;
        java.lang.Throwable $r5;
        java.io.FileDescriptor r6;
        android.util.TimingsTraceLog $r8;
        java.lang.Runnable $r10;

        r0 := @parameter0: java.lang.String[];

        $r3 = r0[0];

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r3, 10);

        $r4 = r0[1];

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r4, 10);

        if i0 == 0 goto label4;

     label1:
        r6 = new java.io.FileDescriptor;

        specialinvoke r6.<java.io.FileDescriptor: void <init>()>();

        virtualinvoke r6.<java.io.FileDescriptor: void setInt$(int)>(i0);

        r1 = new java.io.DataOutputStream;

        r2 = new java.io.FileOutputStream;

        specialinvoke r2.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>(r6);

        specialinvoke r1.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r2);

        $i2 = staticinvoke <android.os.Process: int myPid()>();

        virtualinvoke r1.<java.io.DataOutputStream: void writeInt(int)>($i2);

        virtualinvoke r1.<java.io.DataOutputStream: void close()>();

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r6);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", "Could not write pid of wrapped process to Zygote pipe.", $r5);

     label4:
        $r8 = new android.util.TimingsTraceLog;

        specialinvoke $r8.<android.util.TimingsTraceLog: void <init>(java.lang.String,long)>("WrapperInitTiming", 16384L);

        staticinvoke <com.android.internal.os.ZygoteInit: void preload(android.util.TimingsTraceLog)>($r8);

        $i4 = lengthof r0;

        $i5 = $i4 - 2;

        r9 = newarray (java.lang.String)[$i5];

        $i6 = lengthof r9;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 2, r9, 0, $i6);

        $r10 = staticinvoke <com.android.internal.os.WrapperInit: java.lang.Runnable wrapperInit(int,java.lang.String[])>(i1, r9);

        interfaceinvoke $r10.<java.lang.Runnable: void run()>();

        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static void preserveCapabilities()
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i18, $i19, i23;
        android.system.StructCapUserHeader $r1;
        android.system.StructCapUserData $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        long $l14, $l15;
        java.lang.Throwable $r15, $r20, $r21;
        java.lang.StringBuilder $r16;
        java.lang.String $r19;
        android.system.StructCapUserData[] r23;

        $r1 = new android.system.StructCapUserHeader;

        $i2 = <android.system.OsConstants: int _LINUX_CAPABILITY_VERSION_3>;

        specialinvoke $r1.<android.system.StructCapUserHeader: void <init>(int,int)>($i2, 0);

     label01:
        r23 = staticinvoke <android.system.Os: android.system.StructCapUserData[] capget(android.system.StructCapUserHeader)>($r1);

     label02:
        $r2 = r23[0];

        $i4 = $r2.<android.system.StructCapUserData: int permitted>;

        $r3 = r23[0];

        $i3 = $r3.<android.system.StructCapUserData: int inheritable>;

        if $i4 != $i3 goto label03;

        $r13 = r23[1];

        $i19 = $r13.<android.system.StructCapUserData: int permitted>;

        $r14 = r23[1];

        $i18 = $r14.<android.system.StructCapUserData: int inheritable>;

        if $i19 == $i18 goto label05;

     label03:
        $r4 = new android.system.StructCapUserData;

        $r5 = r23[0];

        $i7 = $r5.<android.system.StructCapUserData: int effective>;

        $r6 = r23[0];

        $i6 = $r6.<android.system.StructCapUserData: int permitted>;

        $r7 = r23[0];

        $i5 = $r7.<android.system.StructCapUserData: int permitted>;

        specialinvoke $r4.<android.system.StructCapUserData: void <init>(int,int,int)>($i7, $i6, $i5);

        r23[0] = $r4;

        $r8 = new android.system.StructCapUserData;

        $r9 = r23[1];

        $i10 = $r9.<android.system.StructCapUserData: int effective>;

        $r10 = r23[1];

        $i9 = $r10.<android.system.StructCapUserData: int permitted>;

        $r11 = r23[1];

        $i8 = $r11.<android.system.StructCapUserData: int permitted>;

        specialinvoke $r8.<android.system.StructCapUserData: void <init>(int,int,int)>($i10, $i9, $i8);

        r23[1] = $r8;

     label04:
        staticinvoke <android.system.Os: void capset(android.system.StructCapUserHeader,android.system.StructCapUserData[])>($r1, r23);

     label05:
        i23 = 0;

     label06:
        if i23 >= 64 goto label11;

        i0 = staticinvoke <android.system.OsConstants: int CAP_TO_INDEX(int)>(i23);

        i1 = staticinvoke <android.system.OsConstants: int CAP_TO_MASK(int)>(i23);

        $r12 = r23[i0];

        $i11 = $r12.<android.system.StructCapUserData: int inheritable>;

        $i12 = $i11 & i1;

        if $i12 == 0 goto label10;

     label07:
        $i16 = <android.system.OsConstants: int PR_CAP_AMBIENT>;

        $i13 = <android.system.OsConstants: int PR_CAP_AMBIENT_RAISE>;

        $l15 = (long) $i13;

        $l14 = (long) i23;

        staticinvoke <android.system.Os: int prctl(int,long,long,long,long)>($i16, $l15, $l14, 0L, 0L);

     label08:
        goto label10;

     label09:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RuntimeInit: Failed to raise ambient capability ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i23);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", $r19, $r15);

     label10:
        i23 = i23 + 1;

        goto label06;

     label11:
        return;

     label12:
        $r21 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", "RuntimeInit: Failed capset", $r21);

        return;

     label13:
        $r20 := @caughtexception;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AndroidRuntime", "RuntimeInit: Failed capget", $r20);

        return;

        catch android.system.ErrnoException from label01 to label02 with label13;
        catch android.system.ErrnoException from label04 to label05 with label12;
        catch android.system.ErrnoException from label07 to label08 with label09;
    }

    private static java.lang.Runnable wrapperInit(int, java.lang.String[])
    {
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.String[] r0, r5;
        java.lang.String $r1, $r2;
        boolean $z0;
        java.lang.Thread $r3;
        java.lang.ClassLoader r4;
        java.lang.Runnable $r6;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String[];

        r4 = null;

        r5 = r0;

        if r0 == null goto label1;

        r4 = null;

        r5 = r0;

        $i1 = lengthof r0;

        if $i1 <= 2 goto label1;

        r4 = null;

        r5 = r0;

        $r1 = r0[0];

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("-cp");

        if $z0 == 0 goto label1;

        $r2 = r0[1];

        r4 = staticinvoke <com.android.internal.os.ZygoteInit: java.lang.ClassLoader createPathClassLoader(java.lang.String,int)>($r2, i0);

        $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r3.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r4);

        $i2 = lengthof r0;

        $i3 = $i2 - 2;

        r5 = newarray (java.lang.String)[$i3];

        $i4 = lengthof r0;

        $i5 = $i4 - 2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 2, r5, 0, $i5);

     label1:
        staticinvoke <com.android.internal.os.Zygote: void nativePreApplicationInit()>();

        $r6 = staticinvoke <com.android.internal.os.RuntimeInit: java.lang.Runnable applicationInit(int,long[],java.lang.String[],java.lang.ClassLoader)>(i0, null, r5, r4);

        return $r6;
    }

    public static void <clinit>()
    {
        <com.android.internal.os.WrapperInit: java.lang.String TAG> = "AndroidRuntime";

        return;
    }
}
