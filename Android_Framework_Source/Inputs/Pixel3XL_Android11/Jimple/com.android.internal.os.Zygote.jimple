public final class com.android.internal.os.Zygote extends java.lang.Object
{
    private static final java.lang.String ANDROID_SOCKET_PREFIX;
    public static final int API_ENFORCEMENT_POLICY_MASK;
    public static final int API_ENFORCEMENT_POLICY_SHIFT;
    public static final java.lang.String BIND_MOUNT_APP_DATA_DIRS;
    public static final java.lang.String BIND_MOUNT_APP_STORAGE_DIRS;
    public static final java.lang.String CHILD_ZYGOTE_ABI_LIST_ARG;
    public static final java.lang.String CHILD_ZYGOTE_SOCKET_NAME_ARG;
    public static final java.lang.String CHILD_ZYGOTE_UID_RANGE_END;
    public static final java.lang.String CHILD_ZYGOTE_UID_RANGE_START;
    public static final int DEBUG_ALWAYS_JIT;
    public static final int DEBUG_ENABLE_ASSERT;
    public static final int DEBUG_ENABLE_CHECKJNI;
    public static final int DEBUG_ENABLE_JDWP;
    public static final int DEBUG_ENABLE_JNI_LOGGING;
    public static final int DEBUG_ENABLE_SAFEMODE;
    public static final int DEBUG_GENERATE_DEBUG_INFO;
    public static final int DEBUG_GENERATE_MINI_DEBUG_INFO;
    public static final int DEBUG_IGNORE_APP_SIGNAL_HANDLER;
    public static final int DEBUG_JAVA_DEBUGGABLE;
    public static final int DEBUG_NATIVE_DEBUGGABLE;
    public static final int DISABLE_TEST_API_ENFORCEMENT_POLICY;
    public static final int DISABLE_VERIFIER;
    public static final int GWP_ASAN_LEVEL_ALWAYS;
    public static final int GWP_ASAN_LEVEL_LOTTERY;
    public static final int GWP_ASAN_LEVEL_MASK;
    public static final int GWP_ASAN_LEVEL_NEVER;
    static final int[][] INT_ARRAY_2D;
    public static final int MEMORY_TAG_LEVEL_ASYNC;
    public static final int MEMORY_TAG_LEVEL_MASK;
    public static final int MEMORY_TAG_LEVEL_SYNC;
    public static final int MEMORY_TAG_LEVEL_TBI;
    public static final int MOUNT_EXTERNAL_ANDROID_WRITABLE;
    public static final int MOUNT_EXTERNAL_DEFAULT;
    public static final int MOUNT_EXTERNAL_FULL;
    public static final int MOUNT_EXTERNAL_INSTALLER;
    public static final int MOUNT_EXTERNAL_LEGACY;
    public static final int MOUNT_EXTERNAL_NONE;
    public static final int MOUNT_EXTERNAL_PASS_THROUGH;
    public static final int MOUNT_EXTERNAL_READ;
    public static final int MOUNT_EXTERNAL_WRITE;
    public static final int ONLY_USE_SYSTEM_OAT_FILES;
    public static final java.lang.String PKG_DATA_INFO_MAP;
    public static final java.lang.String PRIMARY_SOCKET_NAME;
    private static final int PRIORITY_MAX;
    public static final int PROFILE_FROM_SHELL;
    public static final int PROFILE_SYSTEM_SERVER;
    public static final long PROPERTY_CHECK_INTERVAL;
    public static final java.lang.String SECONDARY_SOCKET_NAME;
    public static final int SOCKET_BUFFER_SIZE;
    public static final java.lang.String START_AS_TOP_APP_ARG;
    private static final java.lang.String USAP_ERROR_PREFIX;
    static final int USAP_MANAGEMENT_MESSAGE_BYTES;
    public static final java.lang.String USAP_POOL_PRIMARY_SOCKET_NAME;
    public static final java.lang.String USAP_POOL_SECONDARY_SOCKET_NAME;
    public static final int USE_APP_IMAGE_STARTUP_CACHE;
    public static final java.lang.String WHITELISTED_DATA_INFO_MAP;

    static void <clinit>()
    {
        int $i0;
        int[][] $r0;

        <com.android.internal.os.Zygote: java.lang.String WHITELISTED_DATA_INFO_MAP> = "--whitelisted-data-info-map";

        <com.android.internal.os.Zygote: int USE_APP_IMAGE_STARTUP_CACHE> = 65536;

        <com.android.internal.os.Zygote: java.lang.String USAP_POOL_SECONDARY_SOCKET_NAME> = "usap_pool_secondary";

        <com.android.internal.os.Zygote: java.lang.String USAP_POOL_PRIMARY_SOCKET_NAME> = "usap_pool_primary";

        <com.android.internal.os.Zygote: int USAP_MANAGEMENT_MESSAGE_BYTES> = 8;

        <com.android.internal.os.Zygote: java.lang.String USAP_ERROR_PREFIX> = "Invalid command to USAP: ";

        <com.android.internal.os.Zygote: java.lang.String START_AS_TOP_APP_ARG> = "--is-top-app";

        <com.android.internal.os.Zygote: int SOCKET_BUFFER_SIZE> = 256;

        <com.android.internal.os.Zygote: java.lang.String SECONDARY_SOCKET_NAME> = "zygote_secondary";

        <com.android.internal.os.Zygote: long PROPERTY_CHECK_INTERVAL> = 60000L;

        <com.android.internal.os.Zygote: int PROFILE_SYSTEM_SERVER> = 16384;

        <com.android.internal.os.Zygote: int PROFILE_FROM_SHELL> = 32768;

        <com.android.internal.os.Zygote: int PRIORITY_MAX> = -20;

        <com.android.internal.os.Zygote: java.lang.String PRIMARY_SOCKET_NAME> = "zygote";

        <com.android.internal.os.Zygote: java.lang.String PKG_DATA_INFO_MAP> = "--pkg-data-info-map";

        <com.android.internal.os.Zygote: int ONLY_USE_SYSTEM_OAT_FILES> = 1024;

        <com.android.internal.os.Zygote: int MOUNT_EXTERNAL_WRITE> = 3;

        <com.android.internal.os.Zygote: int MOUNT_EXTERNAL_READ> = 2;

        <com.android.internal.os.Zygote: int MOUNT_EXTERNAL_PASS_THROUGH> = 7;

        <com.android.internal.os.Zygote: int MOUNT_EXTERNAL_NONE> = 0;

        <com.android.internal.os.Zygote: int MOUNT_EXTERNAL_LEGACY> = 4;

        <com.android.internal.os.Zygote: int MOUNT_EXTERNAL_INSTALLER> = 5;

        <com.android.internal.os.Zygote: int MOUNT_EXTERNAL_FULL> = 6;

        <com.android.internal.os.Zygote: int MOUNT_EXTERNAL_DEFAULT> = 1;

        <com.android.internal.os.Zygote: int MOUNT_EXTERNAL_ANDROID_WRITABLE> = 8;

        <com.android.internal.os.Zygote: int MEMORY_TAG_LEVEL_TBI> = 524288;

        <com.android.internal.os.Zygote: int MEMORY_TAG_LEVEL_SYNC> = 1572864;

        <com.android.internal.os.Zygote: int MEMORY_TAG_LEVEL_MASK> = 1572864;

        <com.android.internal.os.Zygote: int MEMORY_TAG_LEVEL_ASYNC> = 1048576;

        <com.android.internal.os.Zygote: int GWP_ASAN_LEVEL_NEVER> = 0;

        <com.android.internal.os.Zygote: int GWP_ASAN_LEVEL_MASK> = 6291456;

        <com.android.internal.os.Zygote: int GWP_ASAN_LEVEL_LOTTERY> = 2097152;

        <com.android.internal.os.Zygote: int GWP_ASAN_LEVEL_ALWAYS> = 4194304;

        <com.android.internal.os.Zygote: int DISABLE_VERIFIER> = 512;

        <com.android.internal.os.Zygote: int DISABLE_TEST_API_ENFORCEMENT_POLICY> = 262144;

        <com.android.internal.os.Zygote: int DEBUG_NATIVE_DEBUGGABLE> = 128;

        <com.android.internal.os.Zygote: int DEBUG_JAVA_DEBUGGABLE> = 256;

        <com.android.internal.os.Zygote: int DEBUG_IGNORE_APP_SIGNAL_HANDLER> = 131072;

        <com.android.internal.os.Zygote: int DEBUG_GENERATE_MINI_DEBUG_INFO> = 2048;

        <com.android.internal.os.Zygote: int DEBUG_GENERATE_DEBUG_INFO> = 32;

        <com.android.internal.os.Zygote: int DEBUG_ENABLE_SAFEMODE> = 8;

        <com.android.internal.os.Zygote: int DEBUG_ENABLE_JNI_LOGGING> = 16;

        <com.android.internal.os.Zygote: int DEBUG_ENABLE_JDWP> = 1;

        <com.android.internal.os.Zygote: int DEBUG_ENABLE_CHECKJNI> = 2;

        <com.android.internal.os.Zygote: int DEBUG_ENABLE_ASSERT> = 4;

        <com.android.internal.os.Zygote: int DEBUG_ALWAYS_JIT> = 64;

        <com.android.internal.os.Zygote: java.lang.String CHILD_ZYGOTE_UID_RANGE_START> = "--uid-range-start=";

        <com.android.internal.os.Zygote: java.lang.String CHILD_ZYGOTE_UID_RANGE_END> = "--uid-range-end=";

        <com.android.internal.os.Zygote: java.lang.String CHILD_ZYGOTE_SOCKET_NAME_ARG> = "--zygote-socket=";

        <com.android.internal.os.Zygote: java.lang.String CHILD_ZYGOTE_ABI_LIST_ARG> = "--abi-list=";

        <com.android.internal.os.Zygote: java.lang.String BIND_MOUNT_APP_STORAGE_DIRS> = "--bind-mount-storage-dirs";

        <com.android.internal.os.Zygote: java.lang.String BIND_MOUNT_APP_DATA_DIRS> = "--bind-mount-data-dirs";

        <com.android.internal.os.Zygote: int API_ENFORCEMENT_POLICY_MASK> = 12288;

        <com.android.internal.os.Zygote: java.lang.String ANDROID_SOCKET_PREFIX> = "ANDROID_SOCKET_";

        $i0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(12288);

        <com.android.internal.os.Zygote: int API_ENFORCEMENT_POLICY_SHIFT> = $i0;

        $r0 = newmultiarray (int)[0][0];

        <com.android.internal.os.Zygote: int[][] INT_ARRAY_2D> = $r0;

        return;
    }

    private void <init>()
    {
        com.android.internal.os.Zygote r0;

        r0 := @this: com.android.internal.os.Zygote;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void allowAppFilesAcrossFork(android.content.pm.ApplicationInfo)
    {
        int i0, i1;
        java.lang.String $r0;
        android.content.pm.ApplicationInfo r1;
        java.lang.String[] r2;

        r1 := @parameter0: android.content.pm.ApplicationInfo;

        r2 = virtualinvoke r1.<android.content.pm.ApplicationInfo: java.lang.String[] getAllApkPaths()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r0 = r2[i1];

        staticinvoke <com.android.internal.os.Zygote: void nativeAllowFileAcrossFork(java.lang.String)>($r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    static void appendQuotedShellArgs(java.lang.StringBuilder, java.lang.String[])
    {
        java.lang.StringBuilder r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2, $r4;

        r0 := @parameter0: java.lang.StringBuilder;

        r1 := @parameter1: java.lang.String[];

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \'");

        $r4 = virtualinvoke r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("\'", "\'\\\'\'");

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    static void applyDebuggerSystemProperty(com.android.internal.os.ZygoteArguments)
    {
        com.android.internal.os.ZygoteArguments r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0: com.android.internal.os.ZygoteArguments;

        $z0 = <com.android.internal.os.RoSystemProperties: boolean DEBUGGABLE>;

        if $z0 == 0 goto label1;

        $i0 = r0.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags>;

        $i1 = $i0 | 1;

        r0.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags> = $i1;

     label1:
        return;
    }

    static void applyInvokeWithSecurityPolicy(com.android.internal.os.ZygoteArguments, android.net.Credentials) throws com.android.internal.os.ZygoteSecurityException
    {
        com.android.internal.os.ZygoteArguments r0;
        android.net.Credentials r1;
        int i0, $i1, $i2;
        java.lang.String $r2;
        com.android.internal.os.ZygoteSecurityException $r3;

        r0 := @parameter0: com.android.internal.os.ZygoteArguments;

        r1 := @parameter1: android.net.Credentials;

        i0 = virtualinvoke r1.<android.net.Credentials: int getUid()>();

        $r2 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mInvokeWith>;

        if $r2 == null goto label2;

        if i0 == 0 goto label2;

        $i1 = r0.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        goto label2;

     label1:
        $r3 = new com.android.internal.os.ZygoteSecurityException;

        specialinvoke $r3.<com.android.internal.os.ZygoteSecurityException: void <init>(java.lang.String)>("Peer is permitted to specify an explicit invoke-with wrapper command only for debuggable applications.");

        throw $r3;

     label2:
        return;
    }

    static void applyInvokeWithSystemProperty(com.android.internal.os.ZygoteArguments)
    {
        com.android.internal.os.ZygoteArguments r0;
        java.lang.String $r1, $r2, $r3;

        r0 := @parameter0: com.android.internal.os.ZygoteArguments;

        $r1 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mInvokeWith>;

        if $r1 != null goto label1;

        $r2 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mNiceName>;

        $r3 = staticinvoke <com.android.internal.os.Zygote: java.lang.String getWrapProperty(java.lang.String)>($r2);

        r0.<com.android.internal.os.ZygoteArguments: java.lang.String mInvokeWith> = $r3;

     label1:
        return;
    }

    static void applyUidSecurityPolicy(com.android.internal.os.ZygoteArguments, android.net.Credentials) throws com.android.internal.os.ZygoteSecurityException
    {
        com.android.internal.os.ZygoteArguments r0;
        android.net.Credentials r1;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, $z1, z2, $z3;
        com.android.internal.os.ZygoteSecurityException $r2;

        r0 := @parameter0: com.android.internal.os.ZygoteArguments;

        r1 := @parameter1: android.net.Credentials;

        $i0 = virtualinvoke r1.<android.net.Credentials: int getUid()>();

        if $i0 != 1000 goto label4;

        $i3 = staticinvoke <android.os.FactoryTest: int getMode()>();

        if $i3 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 == 0 goto label4;

        $z1 = r0.<com.android.internal.os.ZygoteArguments: boolean mUidSpecified>;

        if $z1 == 0 goto label4;

        $i4 = r0.<com.android.internal.os.ZygoteArguments: int mUid>;

        if $i4 < 1000 goto label3;

        goto label4;

     label3:
        $r2 = new com.android.internal.os.ZygoteSecurityException;

        specialinvoke $r2.<com.android.internal.os.ZygoteSecurityException: void <init>(java.lang.String)>("System UID may not launch process with UID < 1000");

        throw $r2;

     label4:
        $z3 = r0.<com.android.internal.os.ZygoteArguments: boolean mUidSpecified>;

        if $z3 != 0 goto label5;

        $i2 = virtualinvoke r1.<android.net.Credentials: int getUid()>();

        r0.<com.android.internal.os.ZygoteArguments: int mUid> = $i2;

        r0.<com.android.internal.os.ZygoteArguments: boolean mUidSpecified> = 1;

     label5:
        $z0 = r0.<com.android.internal.os.ZygoteArguments: boolean mGidSpecified>;

        if $z0 != 0 goto label6;

        $i1 = virtualinvoke r1.<android.net.Credentials: int getGid()>();

        r0.<com.android.internal.os.ZygoteArguments: int mGid> = $i1;

        r0.<com.android.internal.os.ZygoteArguments: boolean mGidSpecified> = 1;

     label6:
        return;
    }

    private static void blockSigTerm()
    {
        staticinvoke <com.android.internal.os.Zygote: void nativeBlockSigTerm()>();

        return;
    }

    private static void boostUsapPriority()
    {
        staticinvoke <com.android.internal.os.Zygote: void nativeBoostUsapPriority()>();

        return;
    }

    private static void callPostForkChildHooks(int, boolean, boolean, java.lang.String)
    {
        int i0;
        boolean z0, z1;
        java.lang.String r0;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        r0 := @parameter3: java.lang.String;

        staticinvoke <dalvik.system.ZygoteHooks: void postForkChild(int,boolean,boolean,java.lang.String)>(i0, z0, z1, r0);

        return;
    }

    private static void callPostForkSystemServerHooks(int)
    {
        int i0;

        i0 := @parameter0: int;

        staticinvoke <dalvik.system.ZygoteHooks: void postForkSystemServer(int)>(i0);

        return;
    }

    private static boolean containsInetGid(int[])
    {
        int[] r0;
        int $i0, $i1, i2;

        r0 := @parameter0: int[];

        i2 = 0;

     label1:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label3;

        $i1 = r0[i2];

        if $i1 != 3003 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    static android.net.LocalServerSocket createManagedSocketFromInitSocket(java.lang.String)
    {
        int i0;
        java.lang.StringBuilder $r1, $r7, $r13;
        java.lang.String $r4, $r11, $r17, r18, r20;
        android.net.LocalServerSocket $r5;
        java.lang.RuntimeException $r6, $r10, $r16;
        java.lang.Throwable $r12;
        java.io.FileDescriptor r21;

        r18 := @parameter0: java.lang.String;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ANDROID_SOCKET_");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        r20 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r4 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>(r20);

        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r4);

     label2:
        r21 = new java.io.FileDescriptor;

        specialinvoke r21.<java.io.FileDescriptor: void <init>()>();

        virtualinvoke r21.<java.io.FileDescriptor: void setInt$(int)>(i0);

        $r5 = new android.net.LocalServerSocket;

        specialinvoke $r5.<android.net.LocalServerSocket: void <init>(java.io.FileDescriptor)>(r21);

     label3:
        return $r5;

     label4:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error building socket from file descriptor: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = new java.lang.RuntimeException;

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r12);

        throw $r16;

     label5:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Socket unset or invalid: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r10 = new java.lang.RuntimeException;

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r6);

        throw $r10;

        catch java.lang.RuntimeException from label1 to label2 with label5;
        catch java.io.IOException from label2 to label3 with label4;
    }

    static void emptyUsapPool()
    {
        staticinvoke <com.android.internal.os.Zygote: void nativeEmptyUsapPool()>();

        return;
    }

    static void execShell(java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.String $r1, r4;
        java.lang.Throwable $r2;
        java.lang.RuntimeException $r3;

        r4 := @parameter0: java.lang.String;

        r0 = newarray (java.lang.String)[3];

        r0[0] = "/system/bin/sh";

        r0[1] = "-c";

        r0[2] = r4;

     label1:
        $r1 = r0[0];

        staticinvoke <android.system.Os: void execv(java.lang.String,java.lang.String[])>($r1, r0);

     label2:
        return;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2);

        throw $r3;

        catch android.system.ErrnoException from label1 to label2 with label3;
    }

    static int forkAndSpecialize(int, int, int[], int, int[][], int, java.lang.String, java.lang.String, int[], int[], boolean, java.lang.String, java.lang.String, boolean, java.lang.String[], java.lang.String[], boolean, boolean)
    {
        int i0, i1, i2, $i3, i4, i5;
        int[] r0, r4, r5;
        int[][] r1;
        java.lang.String r2, r3, r6, r7;
        boolean z0, z1, z2, z3, $z4;
        java.lang.String[] r8, r9;
        java.lang.Thread $r10;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        r0 := @parameter2: int[];

        i1 := @parameter3: int;

        r1 := @parameter4: int[][];

        i2 := @parameter5: int;

        r2 := @parameter6: java.lang.String;

        r3 := @parameter7: java.lang.String;

        r4 := @parameter8: int[];

        r5 := @parameter9: int[];

        z0 := @parameter10: boolean;

        r6 := @parameter11: java.lang.String;

        r7 := @parameter12: java.lang.String;

        z1 := @parameter13: boolean;

        r8 := @parameter14: java.lang.String[];

        r9 := @parameter15: java.lang.String[];

        z2 := @parameter16: boolean;

        z3 := @parameter17: boolean;

        staticinvoke <dalvik.system.ZygoteHooks: void preFork()>();

        i5 = staticinvoke <com.android.internal.os.Zygote: int nativeForkAndSpecialize(int,int,int[],int,int[][],int,java.lang.String,java.lang.String,int[],int[],boolean,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String[],boolean,boolean)>(i4, i0, r0, i1, r1, i2, r2, r3, r4, r5, z0, r6, r7, z1, r8, r9, z2, z3);

        if i5 != 0 goto label1;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "PostFork");

        if r0 == null goto label1;

        $i3 = lengthof r0;

        if $i3 <= 0 goto label1;

        $z4 = staticinvoke <com.android.internal.os.Zygote: boolean containsInetGid(int[])>(r0);

        staticinvoke <android.net.NetworkUtils: void setAllowNetworkingForProcess(boolean)>($z4);

     label1:
        $r10 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r10.<java.lang.Thread: void setPriority(int)>(5);

        staticinvoke <dalvik.system.ZygoteHooks: void postForkCommon()>();

        return i5;
    }

    static int forkSystemServer(int, int, int[], int, int[][], long, long)
    {
        int i0, i1, i4, i5;
        int[] r0;
        int[][] r1;
        long l2, l3;
        java.lang.Thread $r2;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        r0 := @parameter2: int[];

        i1 := @parameter3: int;

        r1 := @parameter4: int[][];

        l2 := @parameter5: long;

        l3 := @parameter6: long;

        staticinvoke <dalvik.system.ZygoteHooks: void preFork()>();

        i5 = staticinvoke <com.android.internal.os.Zygote: int nativeForkSystemServer(int,int,int[],int,int[][],long,long)>(i4, i0, r0, i1, r1, l2, l3);

        $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r2.<java.lang.Thread: void setPriority(int)>(5);

        staticinvoke <dalvik.system.ZygoteHooks: void postForkCommon()>();

        return i5;
    }

    static java.lang.Runnable forkUsap(android.net.LocalServerSocket, int[], boolean)
    {
        int[] r0;
        boolean z0;
        java.io.FileDescriptor[] r1;
        int $i0, $i1, $i2, $i3;
        java.io.FileDescriptor $r2, $r3, $r4, $r5, $r6;
        java.lang.Runnable $r7;
        java.lang.Throwable $r8;
        java.lang.IllegalStateException $r9;
        android.net.LocalServerSocket r10;

        r10 := @parameter0: android.net.LocalServerSocket;

        r0 := @parameter1: int[];

        z0 := @parameter2: boolean;

     label1:
        $i0 = <android.system.OsConstants: int O_CLOEXEC>;

        r1 = staticinvoke <android.system.Os: java.io.FileDescriptor[] pipe2(int)>($i0);

     label2:
        $r2 = r1[0];

        $i1 = virtualinvoke $r2.<java.io.FileDescriptor: int getInt$()>();

        $r3 = r1[1];

        $i2 = virtualinvoke $r3.<java.io.FileDescriptor: int getInt$()>();

        $i3 = staticinvoke <com.android.internal.os.Zygote: int nativeForkUsap(int,int,int[],boolean)>($i1, $i2, r0, z0);

        if $i3 != 0 goto label3;

        $r5 = r1[0];

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>($r5);

        $r6 = r1[1];

        $r7 = staticinvoke <com.android.internal.os.Zygote: java.lang.Runnable usapMain(android.net.LocalServerSocket,java.io.FileDescriptor)>(r10, $r6);

        return $r7;

     label3:
        $r4 = r1[1];

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>($r4);

        return null;

     label4:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalStateException;

        specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to create USAP pipe.", $r8);

        throw $r9;

        catch android.system.ErrnoException from label1 to label2 with label4;
    }

    public static java.lang.String getConfigurationProperty(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r3, $r4;
        java.lang.Object[] $r2;
        java.lang.CharSequence[] r5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = newarray (java.lang.CharSequence)[3];

        $r2[0] = "persist.device_config";

        $r2[1] = "runtime_native";

        $r2[2] = r0;

        r5 = (java.lang.CharSequence[]) $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(".", r5);

        $r4 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>($r3, r1);

        return $r4;
    }

    public static boolean getConfigurationPropertyBoolean(java.lang.String, java.lang.Boolean)
    {
        java.lang.String r0, $r3;
        java.lang.Boolean r1;
        java.lang.Object[] $r2;
        boolean $z0, $z1;
        java.lang.CharSequence[] r4;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Boolean;

        $r2 = newarray (java.lang.CharSequence)[3];

        $r2[0] = "persist.device_config";

        $r2[1] = "runtime_native";

        $r2[2] = r0;

        r4 = (java.lang.CharSequence[]) $r2;

        $r3 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(".", r4);

        $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>($r3, $z0);

        return $z1;
    }

    static int[] getUsapPipeFDs()
    {
        int[] $r0;

        $r0 = staticinvoke <com.android.internal.os.Zygote: int[] nativeGetUsapPipeFDs()>();

        return $r0;
    }

    static int getUsapPoolCount()
    {
        int $i0;

        $i0 = staticinvoke <com.android.internal.os.Zygote: int nativeGetUsapPoolCount()>();

        return $i0;
    }

    static java.io.FileDescriptor getUsapPoolEventFD()
    {
        java.io.FileDescriptor $r1;
        int $i0;

        $r1 = new java.io.FileDescriptor;

        specialinvoke $r1.<java.io.FileDescriptor: void <init>()>();

        $i0 = staticinvoke <com.android.internal.os.Zygote: int nativeGetUsapPoolEventFD()>();

        virtualinvoke $r1.<java.io.FileDescriptor: void setInt$(int)>($i0);

        return $r1;
    }

    public static java.lang.String getWrapProperty(java.lang.String)
    {
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r4, r5, r6;

        r5 := @parameter0: java.lang.String;

        if r5 == null goto label3;

        $z0 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wrap.");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        r6 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>($r4);

        if r6 == null goto label2;

        $z1 = virtualinvoke r6.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        return r6;

     label2:
        return null;

     label3:
        return null;
    }

    static void initNativeState(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.internal.os.Zygote: void nativeInitNativeState(boolean)>(z0);

        return;
    }

    protected static native void nativeAllowFileAcrossFork(java.lang.String);

    private static native void nativeBlockSigTerm();

    private static native void nativeBoostUsapPriority();

    private static native void nativeEmptyUsapPool();

    private static native int nativeForkAndSpecialize(int, int, int[], int, int[][], int, java.lang.String, java.lang.String, int[], int[], boolean, java.lang.String, java.lang.String, boolean, java.lang.String[], java.lang.String[], boolean, boolean);

    private static native int nativeForkSystemServer(int, int, int[], int, int[][], long, long);

    private static native int nativeForkUsap(int, int, int[], boolean);

    private static native int[] nativeGetUsapPipeFDs();

    private static native int nativeGetUsapPoolCount();

    private static native int nativeGetUsapPoolEventFD();

    protected static native void nativeInitNativeState(boolean);

    protected static native void nativeInstallSeccompUidGidFilter(int, int);

    public static native int nativeParseSigChld(byte[], int, int[]);

    static native void nativePreApplicationInit();

    private static native boolean nativeRemoveUsapTableEntry(int);

    private static native void nativeSpecializeAppProcess(int, int, int[], int, int[][], int, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, boolean, java.lang.String[], java.lang.String[], boolean, boolean);

    public static native boolean nativeSupportsTaggedPointers();

    private static native void nativeUnblockSigTerm();

    static java.lang.String[] readArgumentList(java.io.BufferedReader) throws java.io.IOException
    {
        int i0, i2;
        java.io.IOException $r0, $r3, $r5;
        java.lang.String $r1, $r2, r7;
        java.lang.Throwable $r4;
        java.io.BufferedReader r6;
        java.lang.String[] r8;

        r6 := @parameter0: java.io.BufferedReader;

     label1:
        r7 = virtualinvoke r6.<java.io.BufferedReader: java.lang.String readLine()>();

     label2:
        if r7 != null goto label3;

        return null;

     label3:
        i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r7);

     label4:
        if i0 > 1024 goto label8;

        r8 = newarray (java.lang.String)[i0];

        i2 = 0;

     label5:
        if i2 >= i0 goto label7;

        $r1 = virtualinvoke r6.<java.io.BufferedReader: java.lang.String readLine()>();

        r8[i2] = $r1;

        $r2 = r8[i2];

        if $r2 == null goto label6;

        i2 = i2 + 1;

        goto label5;

     label6:
        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Truncated request");

        throw $r3;

     label7:
        return r8;

     label8:
        $r0 = new java.io.IOException;

        specialinvoke $r0.<java.io.IOException: void <init>(java.lang.String)>("Max arg count exceeded");

        throw $r0;

     label9:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Zygote", "Invalid Zygote wire format: non-int at argc");

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("Invalid wire format");

        throw $r5;

        catch java.lang.NumberFormatException from label1 to label2 with label9;
        catch java.lang.NumberFormatException from label3 to label4 with label9;
    }

    static boolean removeUsapTableEntry(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.internal.os.Zygote: boolean nativeRemoveUsapTableEntry(int)>(i0);

        return $z0;
    }

    static void setAppProcessName(com.android.internal.os.ZygoteArguments, java.lang.String)
    {
        com.android.internal.os.ZygoteArguments r0;
        java.lang.String r1, $r2, $r3, $r4, $r5;

        r0 := @parameter0: com.android.internal.os.ZygoteArguments;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mNiceName>;

        if $r2 == null goto label1;

        $r5 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mNiceName>;

        staticinvoke <android.os.Process: void setArgV0(java.lang.String)>($r5);

        goto label3;

     label1:
        $r3 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mPackageName>;

        if $r3 == null goto label2;

        $r4 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mPackageName>;

        staticinvoke <android.os.Process: void setArgV0(java.lang.String)>($r4);

        goto label3;

     label2:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r1, "Unable to set package name.");

     label3:
        return;
    }

    private static void specializeAppProcess(int, int, int[], int, int[][], int, java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, boolean, java.lang.String[], java.lang.String[], boolean, boolean)
    {
        int i0, i1, i2, i3;
        int[] r0;
        int[][] r1;
        java.lang.String r2, r3, r4, r5;
        boolean z0, z1, z2, z3;
        java.lang.String[] r6, r7;
        java.lang.Thread $r8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: int[];

        i2 := @parameter3: int;

        r1 := @parameter4: int[][];

        i3 := @parameter5: int;

        r2 := @parameter6: java.lang.String;

        r3 := @parameter7: java.lang.String;

        z0 := @parameter8: boolean;

        r4 := @parameter9: java.lang.String;

        r5 := @parameter10: java.lang.String;

        z1 := @parameter11: boolean;

        r6 := @parameter12: java.lang.String[];

        r7 := @parameter13: java.lang.String[];

        z2 := @parameter14: boolean;

        z3 := @parameter15: boolean;

        staticinvoke <com.android.internal.os.Zygote: void nativeSpecializeAppProcess(int,int,int[],int,int[][],int,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String[],boolean,boolean)>(i0, i1, r0, i2, r1, i3, r2, r3, z0, r4, r5, z1, r6, r7, z2, z3);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "PostFork");

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r8.<java.lang.Thread: void setPriority(int)>(5);

        staticinvoke <dalvik.system.ZygoteHooks: void postForkCommon()>();

        return;
    }

    private static void unblockSigTerm()
    {
        staticinvoke <com.android.internal.os.Zygote: void nativeUnblockSigTerm()>();

        return;
    }

    private static java.lang.Runnable usapMain(android.net.LocalServerSocket, java.io.FileDescriptor)
    {
        int i0, i1, i2, $i5, $i7, $i10, i14, i15;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.String[] r0, $r3, r50, r62;
        java.io.FileDescriptor $r1, $r10, r39;
        long $l4;
        byte[] $r2;
        long[] $r4;
        int[][] $r5, r53;
        java.util.ArrayList $r6, r52;
        java.lang.Object[] $r7, $r18;
        java.lang.Throwable $r8, $r9, $r11, $r12, $r14, $r15, $r16, $r23, $r24, $r25, $r27, $r28, $r34, r54, r64, r69;
        java.lang.Exception $r17, $r26, $r33, $r35, $r36, $r37, r74;
        java.lang.Integer $r19, $r20;
        java.lang.String $r21, $r22, $r30, $r32, r40, r58, r59, r60, r61, $r76;
        android.net.LocalServerSocket r38;
        android.net.LocalSocket r41, r42, r43;
        java.io.InputStream $r46;
        java.io.OutputStream $r48;
        android.net.Credentials r49;
        int[] r57;
        java.lang.Runnable r63;
        java.lang.RuntimeException r68, r83, r84, r86, r87;
        java.io.InputStreamReader r77;
        java.io.BufferedReader r78;
        java.io.DataOutputStream r79, r82;
        com.android.internal.os.ZygoteArguments r80;
        java.io.ByteArrayOutputStream r81;
        java.lang.StringBuilder r85;
        java.io.IOException r88;

        r38 := @parameter0: android.net.LocalServerSocket;

        r39 := @parameter1: java.io.FileDescriptor;

        i14 = staticinvoke <android.os.Process: int myPid()>();

        $z2 = staticinvoke <android.os.Process: boolean is64Bit()>();

        if $z2 == 0 goto label01;

        r40 = "usap64";

        goto label02;

     label01:
        r40 = "usap32";

     label02:
        staticinvoke <android.os.Process: void setArgV0(java.lang.String)>(r40);

        staticinvoke <com.android.internal.os.Zygote: void boostUsapPriority()>();

        r41 = null;

     label03:
        r42 = virtualinvoke r38.<android.net.LocalServerSocket: android.net.LocalSocket accept()>();

     label04:
        r43 = r42;

     label05:
        staticinvoke <com.android.internal.os.Zygote: void blockSigTerm()>();

        r78 = new java.io.BufferedReader;

        r77 = new java.io.InputStreamReader;

        $r46 = virtualinvoke r42.<android.net.LocalSocket: java.io.InputStream getInputStream()>();

        specialinvoke r77.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r46);

        specialinvoke r78.<java.io.BufferedReader: void <init>(java.io.Reader)>(r77);

        r79 = new java.io.DataOutputStream;

        $r48 = virtualinvoke r42.<android.net.LocalSocket: java.io.OutputStream getOutputStream()>();

        specialinvoke r79.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r48);

     label06:
        r49 = virtualinvoke r42.<android.net.LocalSocket: android.net.Credentials getPeerCredentials()>();

     label07:
        r50 = staticinvoke <com.android.internal.os.Zygote: java.lang.String[] readArgumentList(java.io.BufferedReader)>(r78);

     label08:
        if r50 == null goto label52;

     label09:
        r80 = new com.android.internal.os.ZygoteArguments;

        specialinvoke r80.<com.android.internal.os.ZygoteArguments: void <init>(java.lang.String[])>(r50);

        staticinvoke <com.android.internal.os.Zygote: void validateUsapCommand(com.android.internal.os.ZygoteArguments)>(r80);

     label10:
        staticinvoke <com.android.internal.os.Zygote: void setAppProcessName(com.android.internal.os.ZygoteArguments,java.lang.String)>(r80, "USAP");

        staticinvoke <com.android.internal.os.Zygote: void applyUidSecurityPolicy(com.android.internal.os.ZygoteArguments,android.net.Credentials)>(r80, r49);

        staticinvoke <com.android.internal.os.Zygote: void applyDebuggerSystemProperty(com.android.internal.os.ZygoteArguments)>(r80);

        r52 = r80.<com.android.internal.os.ZygoteArguments: java.util.ArrayList mRLimits>;

     label11:
        if r52 == null goto label15;

     label12:
        $r6 = r80.<com.android.internal.os.ZygoteArguments: java.util.ArrayList mRLimits>;

        $r5 = <com.android.internal.os.Zygote: int[][] INT_ARRAY_2D>;

        $r7 = virtualinvoke $r6.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        r53 = (int[][]) $r7;

     label13:
        goto label16;

     label14:
        $r25 := @caughtexception;

        r54 = $r25;

        goto label51;

     label15:
        r53 = null;

     label16:
        virtualinvoke r79.<java.io.DataOutputStream: void writeInt(int)>(i14);

     label17:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r42);

     label18:
        $r1 = virtualinvoke r38.<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()>();

        staticinvoke <android.system.Os: void close(java.io.FileDescriptor)>($r1);

     label19:
        r81 = new java.io.ByteArrayOutputStream;

        specialinvoke r81.<java.io.ByteArrayOutputStream: void <init>(int)>(8);

        r82 = new java.io.DataOutputStream;

        specialinvoke r82.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>(r81);

        $l4 = (long) i14;

        virtualinvoke r82.<java.io.DataOutputStream: void writeLong(long)>($l4);

        virtualinvoke r82.<java.io.DataOutputStream: void flush()>();

        $r2 = virtualinvoke r81.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i5 = virtualinvoke r81.<java.io.ByteArrayOutputStream: int size()>();

        staticinvoke <android.system.Os: int write(java.io.FileDescriptor,byte[],int,int)>(r39, $r2, 0, $i5);

     label20:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r39);

     label21:
        i0 = r80.<com.android.internal.os.ZygoteArguments: int mUid>;

        i15 = r80.<com.android.internal.os.ZygoteArguments: int mGid>;

        r57 = r80.<com.android.internal.os.ZygoteArguments: int[] mGids>;

        i1 = r80.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags>;

        i2 = r80.<com.android.internal.os.ZygoteArguments: int mMountExternal>;

        r58 = r80.<com.android.internal.os.ZygoteArguments: java.lang.String mSeInfo>;

        r59 = r80.<com.android.internal.os.ZygoteArguments: java.lang.String mNiceName>;

        z0 = r80.<com.android.internal.os.ZygoteArguments: boolean mStartChildZygote>;

        r60 = r80.<com.android.internal.os.ZygoteArguments: java.lang.String mInstructionSet>;

        r61 = r80.<com.android.internal.os.ZygoteArguments: java.lang.String mAppDataDir>;

     label22:
        z1 = r80.<com.android.internal.os.ZygoteArguments: boolean mIsTopApp>;

     label23:
        r0 = r80.<com.android.internal.os.ZygoteArguments: java.lang.String[] mPkgDataInfoList>;

     label24:
        r62 = r80.<com.android.internal.os.ZygoteArguments: java.lang.String[] mWhitelistedDataInfoList>;

     label25:
        $z4 = r80.<com.android.internal.os.ZygoteArguments: boolean mBindMountAppDataDirs>;

        $z3 = r80.<com.android.internal.os.ZygoteArguments: boolean mBindMountAppStorageDirs>;

        staticinvoke <com.android.internal.os.Zygote: void specializeAppProcess(int,int,int[],int,int[][],int,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,boolean,java.lang.String[],java.lang.String[],boolean,boolean)>(i0, i15, r57, i1, r53, i2, r58, r59, z0, r60, r61, z1, r0, r62, $z4, $z3);

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        $i7 = r80.<com.android.internal.os.ZygoteArguments: int mTargetSdkVersion>;

        $r4 = r80.<com.android.internal.os.ZygoteArguments: long[] mDisabledCompatChanges>;

        $r3 = r80.<com.android.internal.os.ZygoteArguments: java.lang.String[] mRemainingArgs>;

        r63 = staticinvoke <com.android.internal.os.ZygoteInit: java.lang.Runnable zygoteInit(int,long[],java.lang.String[],java.lang.ClassLoader)>($i7, $r4, $r3, null);

     label26:
        staticinvoke <com.android.internal.os.Zygote: void unblockSigTerm()>();

        return r63;

     label27:
        $r8 := @caughtexception;

        r54 = $r8;

        goto label51;

     label28:
        $r14 := @caughtexception;

        r54 = $r14;

        goto label51;

     label29:
        $r27 := @caughtexception;

        r54 = $r27;

        goto label51;

     label30:
        $r16 := @caughtexception;

        r64 = $r16;

        goto label34;

     label31:
        $r17 := @caughtexception;

     label32:
        $r18 = newarray (java.lang.Object)[3];

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i14);

        $r18[0] = $r19;

        $i10 = virtualinvoke r39.<java.io.FileDescriptor: int getInt$()>();

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i10);

        $r18[1] = $r20;

        $r21 = virtualinvoke $r17.<java.lang.Exception: java.lang.String getMessage()>();

        $r18[2] = $r21;

        $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Failed to write PID (%d) to pipe (%d): %s", $r18);

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("USAP", $r22);

        r83 = new java.lang.RuntimeException;

        specialinvoke r83.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r17);

        throw r83;

     label33:
        $r24 := @caughtexception;

        r64 = $r24;

     label34:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.io.FileDescriptor)>(r39);

     label35:
        throw r64;

     label36:
        $r15 := @caughtexception;

     label37:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("USAP", "Failed to close USAP pool socket");

        r84 = new java.lang.RuntimeException;

        r68 = r84;

        specialinvoke r84.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r15);

     label38:
        throw r68;

     label39:
        $r11 := @caughtexception;

        r69 = $r11;

        goto label43;

     label40:
        $r28 := @caughtexception;

     label41:
        r85 = new java.lang.StringBuilder;

        specialinvoke r85.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to write response to session socket: ");

        r88 = (java.io.IOException) $r28;

        $r30 = virtualinvoke r88.<java.io.IOException: java.lang.String getMessage()>();

        virtualinvoke r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        $r32 = virtualinvoke r85.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("USAP", $r32);

        r86 = new java.lang.RuntimeException;

        specialinvoke r86.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r28);

        throw r86;

     label42:
        $r9 := @caughtexception;

        r69 = $r9;

     label43:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r42);

     label44:
        $r10 = virtualinvoke r38.<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()>();

        staticinvoke <android.system.Os: void close(java.io.FileDescriptor)>($r10);

     label45:
        throw r69;

     label46:
        $r12 := @caughtexception;

     label47:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("USAP", "Failed to close USAP pool socket");

        r87 = new java.lang.RuntimeException;

        specialinvoke r87.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r12);

        r68 = r87;

     label48:
        goto label38;

     label49:
        $r23 := @caughtexception;

        r54 = $r23;

        goto label51;

     label50:
        $r34 := @caughtexception;

        r54 = $r34;

     label51:
        staticinvoke <com.android.internal.os.Zygote: void unblockSigTerm()>();

        throw r54;

     label52:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("USAP", "Truncated command received.");

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r42);

        staticinvoke <com.android.internal.os.Zygote: void unblockSigTerm()>();

     label53:
        r41 = r42;

        goto label03;

     label54:
        $r33 := @caughtexception;

        r74 = $r33;

        goto label59;

     label55:
        $r36 := @caughtexception;

        r74 = $r36;

        goto label59;

     label56:
        $r37 := @caughtexception;

        r74 = $r37;

        goto label59;

     label57:
        $r35 := @caughtexception;

        r74 = $r35;

        goto label59;

     label58:
        $r26 := @caughtexception;

        r43 = r41;

        r74 = $r26;

     label59:
        $r76 = virtualinvoke r74.<java.lang.Exception: java.lang.String getMessage()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("USAP", $r76);

        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>(r43);

        staticinvoke <com.android.internal.os.Zygote: void unblockSigTerm()>();

        r41 = r43;

        goto label03;

        catch java.lang.Exception from label03 to label04 with label58;
        catch java.lang.Exception from label05 to label06 with label57;
        catch java.lang.Exception from label06 to label07 with label56;
        catch java.lang.Exception from label07 to label08 with label55;
        catch java.lang.Exception from label09 to label10 with label55;
        catch java.lang.Throwable from label10 to label11 with label50;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.io.IOException from label16 to label17 with label40;
        catch java.lang.Throwable from label16 to label17 with label39;
        catch java.lang.Throwable from label17 to label18 with label50;
        catch android.system.ErrnoException from label18 to label19 with label36;
        catch java.lang.Throwable from label18 to label19 with label50;
        catch java.lang.Exception from label19 to label20 with label31;
        catch java.lang.Throwable from label19 to label20 with label30;
        catch java.lang.Throwable from label20 to label21 with label50;
        catch java.lang.Throwable from label21 to label22 with label50;
        catch java.lang.Throwable from label22 to label23 with label29;
        catch java.lang.Throwable from label23 to label24 with label28;
        catch java.lang.Throwable from label24 to label25 with label27;
        catch java.lang.Throwable from label25 to label26 with label49;
        catch java.lang.Throwable from label32 to label33 with label33;
        catch java.lang.Throwable from label34 to label35 with label49;
        catch java.lang.Throwable from label35 to label36 with label49;
        catch java.lang.Throwable from label37 to label38 with label49;
        catch java.lang.Throwable from label38 to label39 with label49;
        catch java.lang.Throwable from label41 to label42 with label42;
        catch java.lang.Throwable from label43 to label44 with label49;
        catch android.system.ErrnoException from label44 to label45 with label46;
        catch java.lang.Throwable from label44 to label45 with label49;
        catch java.lang.Throwable from label45 to label46 with label49;
        catch java.lang.Throwable from label47 to label48 with label49;
        catch java.lang.Exception from label52 to label53 with label54;
    }

    private static void validateUsapCommand(com.android.internal.os.ZygoteArguments)
    {
        com.android.internal.os.ZygoteArguments r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.IllegalArgumentException $r2, $r3, $r4, $r6, $r8, $r9, $r11, $r12, $r13, $r15;
        java.lang.String $r5, $r7, $r14, $r18, $r21, $r24;
        java.lang.String[] $r10;
        int $i0, $i1;
        long $l2, $l4, $l5, $l6;
        byte $b3, $b7;
        java.lang.StringBuilder $r16;
        com.android.internal.os.ZygoteSecurityException $r23;

        r0 := @parameter0: com.android.internal.os.ZygoteArguments;

        $z0 = r0.<com.android.internal.os.ZygoteArguments: boolean mAbiListQuery>;

        if $z0 != 0 goto label11;

        $z1 = r0.<com.android.internal.os.ZygoteArguments: boolean mPidQuery>;

        if $z1 != 0 goto label10;

        $z2 = r0.<com.android.internal.os.ZygoteArguments: boolean mPreloadDefault>;

        if $z2 != 0 goto label09;

        $r5 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mPreloadPackage>;

        if $r5 != null goto label08;

        $r7 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mPreloadApp>;

        if $r7 != null goto label07;

        $z3 = r0.<com.android.internal.os.ZygoteArguments: boolean mStartChildZygote>;

        if $z3 != 0 goto label06;

        $r10 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String[] mApiBlacklistExemptions>;

        if $r10 != null goto label05;

        $i0 = r0.<com.android.internal.os.ZygoteArguments: int mHiddenApiAccessLogSampleRate>;

        if $i0 != -1 goto label04;

        $i1 = r0.<com.android.internal.os.ZygoteArguments: int mHiddenApiAccessStatslogSampleRate>;

        if $i1 != -1 goto label03;

        $r14 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mInvokeWith>;

        if $r14 != null goto label02;

        $l2 = r0.<com.android.internal.os.ZygoteArguments: long mPermittedCapabilities>;

        $b3 = $l2 cmp 0L;

        if $b3 != 0 goto label01;

        $l6 = r0.<com.android.internal.os.ZygoteArguments: long mEffectiveCapabilities>;

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label01;

        return;

     label01:
        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Client may not specify capabilities: permitted=0x");

        $l4 = r0.<com.android.internal.os.ZygoteArguments: long mPermittedCapabilities>;

        $r18 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l4);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", effective=0x");

        $l5 = r0.<com.android.internal.os.ZygoteArguments: long mEffectiveCapabilities>;

        $r21 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>($l5);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = new com.android.internal.os.ZygoteSecurityException;

        $r24 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r23.<com.android.internal.os.ZygoteSecurityException: void <init>(java.lang.String)>($r24);

        throw $r23;

     label02:
        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command to USAP: --invoke-with");

        throw $r15;

     label03:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command to USAP: --hidden-api-statslog-sampling-rate=");

        throw $r13;

     label04:
        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command to USAP: --hidden-api-log-sampling-rate=");

        throw $r12;

     label05:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command to USAP: --set-api-blacklist-exemptions");

        throw $r11;

     label06:
        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command to USAP: --start-child-zygote");

        throw $r9;

     label07:
        $r8 = new java.lang.IllegalArgumentException;

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command to USAP: --preload-app");

        throw $r8;

     label08:
        $r6 = new java.lang.IllegalArgumentException;

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command to USAP: --preload-package");

        throw $r6;

     label09:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command to USAP: --preload-default");

        throw $r4;

     label10:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command to USAP: --get-pid");

        throw $r3;

     label11:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Invalid command to USAP: --query-abi-list");

        throw $r2;
    }
}
