public class com.android.internal.os.ZygoteInit extends java.lang.Object
{
    private static final java.lang.String ABI_LIST_ARG;
    private static final int LOG_BOOT_PROGRESS_PRELOAD_END;
    private static final int LOG_BOOT_PROGRESS_PRELOAD_START;
    private static final java.lang.String PRELOADED_CLASSES;
    public static final boolean PRELOAD_RESOURCES;
    private static final java.lang.String PROPERTY_DISABLE_GRAPHICS_DRIVER_PRELOADING;
    private static final int ROOT_GID;
    private static final int ROOT_UID;
    private static final java.lang.String SOCKET_NAME_ARG;
    private static final java.lang.String TAG;
    private static final int UNPRIVILEGED_GID;
    private static final int UNPRIVILEGED_UID;
    private static android.content.res.Resources mResources;
    private static boolean sPreloadComplete;

    private void <init>()
    {
        com.android.internal.os.ZygoteInit r0;

        r0 := @this: com.android.internal.os.ZygoteInit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static void beginPreload()
    {
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", "Calling ZygoteHooks.beginPreload()");

        staticinvoke <dalvik.system.ZygoteHooks: void onBeginPreload()>();

        return;
    }

    private static void cacheNonBootClasspathClassLoaders()
    {
        android.content.pm.SharedLibraryInfo $r3, $r4, $r5;
        android.app.ApplicationLoaders $r6;
        android.content.pm.SharedLibraryInfo[] $r7;

        $r3 = new android.content.pm.SharedLibraryInfo;

        specialinvoke $r3.<android.content.pm.SharedLibraryInfo: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.String,long,int,android.content.pm.VersionedPackage,java.util.List,java.util.List)>("/system/framework/android.hidl.base-V1.0-java.jar", null, null, null, 0L, 0, null, null, null);

        $r4 = new android.content.pm.SharedLibraryInfo;

        specialinvoke $r4.<android.content.pm.SharedLibraryInfo: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.String,long,int,android.content.pm.VersionedPackage,java.util.List,java.util.List)>("/system/framework/android.hidl.manager-V1.0-java.jar", null, null, null, 0L, 0, null, null, null);

        virtualinvoke $r4.<android.content.pm.SharedLibraryInfo: void addDependency(android.content.pm.SharedLibraryInfo)>($r3);

        $r5 = new android.content.pm.SharedLibraryInfo;

        specialinvoke $r5.<android.content.pm.SharedLibraryInfo: void <init>(java.lang.String,java.lang.String,java.util.List,java.lang.String,long,int,android.content.pm.VersionedPackage,java.util.List,java.util.List)>("/system/framework/android.test.base.jar", null, null, null, 0L, 0, null, null, null);

        $r6 = staticinvoke <android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()>();

        $r7 = newarray (android.content.pm.SharedLibraryInfo)[3];

        $r7[0] = $r3;

        $r7[1] = $r4;

        $r7[2] = $r5;

        virtualinvoke $r6.<android.app.ApplicationLoaders: void createAndCacheNonBootclasspathSystemClassLoaders(android.content.pm.SharedLibraryInfo[])>($r7);

        return;
    }

    static final java.lang.Runnable childZygoteInit(int, java.lang.String[], java.lang.ClassLoader)
    {
        int i0;
        java.lang.ClassLoader r0;
        com.android.internal.os.RuntimeInit$Arguments $r1;
        java.lang.String[] $r2, r5;
        java.lang.String $r3;
        java.lang.Runnable $r4;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String[];

        r0 := @parameter2: java.lang.ClassLoader;

        $r1 = new com.android.internal.os.RuntimeInit$Arguments;

        specialinvoke $r1.<com.android.internal.os.RuntimeInit$Arguments: void <init>(java.lang.String[])>(r5);

        $r3 = $r1.<com.android.internal.os.RuntimeInit$Arguments: java.lang.String startClass>;

        $r2 = $r1.<com.android.internal.os.RuntimeInit$Arguments: java.lang.String[] startArgs>;

        $r4 = staticinvoke <com.android.internal.os.RuntimeInit: java.lang.Runnable findStaticMain(java.lang.String,java.lang.String[],java.lang.ClassLoader)>($r3, $r2, r0);

        return $r4;
    }

    static java.lang.ClassLoader createPathClassLoader(java.lang.String, int)
    {
        java.lang.String r0, r1;
        int i0;
        java.lang.ClassLoader $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.library.path");

        $r2 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.ClassLoader getParent()>();

        $r4 = staticinvoke <com.android.internal.os.ClassLoaderFactory: java.lang.ClassLoader createClassLoader(java.lang.String,java.lang.String,java.lang.String,java.lang.ClassLoader,int,boolean,java.lang.String)>(r0, r1, r1, $r3, i0, 1, null);

        return $r4;
    }

    private static java.lang.String encodeSystemServerClassPath(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r6;
        boolean $z0;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: java.lang.String;

        r6 := @parameter1: java.lang.String;

        if r0 == null goto label2;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label2:
        return r6;
    }

    private static void endPreload()
    {
        staticinvoke <dalvik.system.ZygoteHooks: void onEndPreload()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", "Called ZygoteHooks.endPreload()");

        return;
    }

    private static java.lang.Runnable forkSystemServer(java.lang.String, java.lang.String, com.android.internal.os.ZygoteServer)
    {
        java.lang.String r0, r2, r19;
        com.android.internal.os.ZygoteServer r1;
        long l0, $l18, $l19, $l20, $l23, $l24, l32, l33;
        int i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i21, $i22, $i25, $i26, $i27, $i28, $i29, $i30, $i31;
        int[] $r3, $r13;
        android.system.StructCapUserHeader $r4;
        android.system.StructCapUserData $r5, $r6;
        java.lang.StringBuilder $r7;
        java.lang.String[] $r12;
        boolean $z0, $z1, $z2;
        java.lang.Runnable $r14;
        java.lang.Throwable $r15, $r17;
        java.lang.RuntimeException $r16, $r18;
        android.system.StructCapUserData[] r21;
        com.android.internal.os.ZygoteArguments r23;

        r19 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: com.android.internal.os.ZygoteServer;

        $r3 = newarray (int)[13];

        $i2 = <android.system.OsConstants: int CAP_IPC_LOCK>;

        $r3[0] = $i2;

        $i3 = <android.system.OsConstants: int CAP_KILL>;

        $r3[1] = $i3;

        $i4 = <android.system.OsConstants: int CAP_NET_ADMIN>;

        $r3[2] = $i4;

        $i5 = <android.system.OsConstants: int CAP_NET_BIND_SERVICE>;

        $r3[3] = $i5;

        $i6 = <android.system.OsConstants: int CAP_NET_BROADCAST>;

        $r3[4] = $i6;

        $i7 = <android.system.OsConstants: int CAP_NET_RAW>;

        $r3[5] = $i7;

        $i8 = <android.system.OsConstants: int CAP_SYS_MODULE>;

        $r3[6] = $i8;

        $i9 = <android.system.OsConstants: int CAP_SYS_NICE>;

        $r3[7] = $i9;

        $i10 = <android.system.OsConstants: int CAP_SYS_PTRACE>;

        $r3[8] = $i10;

        $i11 = <android.system.OsConstants: int CAP_SYS_TIME>;

        $r3[9] = $i11;

        $i12 = <android.system.OsConstants: int CAP_SYS_TTY_CONFIG>;

        $r3[10] = $i12;

        $i13 = <android.system.OsConstants: int CAP_WAKE_ALARM>;

        $r3[11] = $i13;

        $i14 = <android.system.OsConstants: int CAP_BLOCK_SUSPEND>;

        $r3[12] = $i14;

        l0 = staticinvoke <com.android.internal.os.ZygoteInit: long posixCapabilitiesAsBits(int[])>($r3);

        $r4 = new android.system.StructCapUserHeader;

        $i15 = <android.system.OsConstants: int _LINUX_CAPABILITY_VERSION_3>;

        specialinvoke $r4.<android.system.StructCapUserHeader: void <init>(int,int)>($i15, 0);

     label01:
        r21 = staticinvoke <android.system.Os: android.system.StructCapUserData[] capget(android.system.StructCapUserHeader)>($r4);

     label02:
        $r5 = r21[0];

        $i16 = $r5.<android.system.StructCapUserData: int effective>;

        l32 = (long) $i16;

        $r6 = r21[1];

        $i17 = $r6.<android.system.StructCapUserData: int effective>;

        $l18 = (long) $i17;

        $l19 = $l18 << 32;

        $l20 = $l19 | l32;

        l33 = $l20 & l0;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--capabilities=");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l33);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l33);

        r2 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

     label03:
        r23 = new com.android.internal.os.ZygoteArguments;

        $r12 = newarray (java.lang.String)[8];

        $r12[0] = "--setuid=1000";

        $r12[1] = "--setgid=1000";

        $r12[2] = "--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1023,1024,1032,1065,3001,3002,3003,3006,3007,3009,3010,3011";

        $r12[3] = r2;

        $r12[4] = "--nice-name=system_server";

        $r12[5] = "--runtime-args";

        $r12[6] = "--target-sdk-version=10000";

        $r12[7] = "com.android.server.SystemServer";

        specialinvoke r23.<com.android.internal.os.ZygoteArguments: void <init>(java.lang.String[])>($r12);

        staticinvoke <com.android.internal.os.Zygote: void applyDebuggerSystemProperty(com.android.internal.os.ZygoteArguments)>(r23);

        staticinvoke <com.android.internal.os.Zygote: void applyInvokeWithSystemProperty(com.android.internal.os.ZygoteArguments)>(r23);

        $z0 = staticinvoke <com.android.internal.os.Zygote: boolean nativeSupportsTaggedPointers()>();

        if $z0 == 0 goto label04;

        $i30 = r23.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags>;

        $i31 = $i30 | 524288;

        r23.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags> = $i31;

     label04:
        $i21 = r23.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags>;

        $i22 = $i21 | 2097152;

        r23.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags> = $i22;

        $z1 = staticinvoke <com.android.internal.os.ZygoteInit: boolean shouldProfileSystemServer()>();

        if $z1 == 0 goto label05;

        $i28 = r23.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags>;

        $i29 = $i28 | 16384;

        r23.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags> = $i29;

     label05:
        $i27 = r23.<com.android.internal.os.ZygoteArguments: int mUid>;

        $i26 = r23.<com.android.internal.os.ZygoteArguments: int mGid>;

        $r13 = r23.<com.android.internal.os.ZygoteArguments: int[] mGids>;

        $i25 = r23.<com.android.internal.os.ZygoteArguments: int mRuntimeFlags>;

        $l24 = r23.<com.android.internal.os.ZygoteArguments: long mPermittedCapabilities>;

        $l23 = r23.<com.android.internal.os.ZygoteArguments: long mEffectiveCapabilities>;

        i1 = staticinvoke <com.android.internal.os.Zygote: int forkSystemServer(int,int,int[],int,int[][],long,long)>($i27, $i26, $r13, $i25, null, $l24, $l23);

     label06:
        if i1 != 0 goto label08;

        $z2 = staticinvoke <com.android.internal.os.ZygoteInit: boolean hasSecondZygote(java.lang.String)>(r19);

        if $z2 == 0 goto label07;

        staticinvoke <com.android.internal.os.ZygoteInit: void waitForSecondaryZygote(java.lang.String)>(r0);

     label07:
        virtualinvoke r1.<com.android.internal.os.ZygoteServer: void closeServerSocket()>();

        $r14 = staticinvoke <com.android.internal.os.ZygoteInit: java.lang.Runnable handleSystemServerProcess(com.android.internal.os.ZygoteArguments)>(r23);

        return $r14;

     label08:
        return null;

     label09:
        $r15 := @caughtexception;

        $r16 = new java.lang.RuntimeException;

        specialinvoke $r16.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r15);

        throw $r16;

     label10:
        $r17 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to capget()", $r17);

        throw $r18;

        catch android.system.ErrnoException from label01 to label02 with label10;
        catch java.lang.IllegalArgumentException from label03 to label04 with label09;
        catch java.lang.IllegalArgumentException from label04 to label05 with label09;
        catch java.lang.IllegalArgumentException from label05 to label06 with label09;
    }

    private static void gcAndFinalize()
    {
        staticinvoke <dalvik.system.ZygoteHooks: void gcAndFinalize()>();

        return;
    }

    private static java.lang.String getSystemServerClassLoaderContext(java.lang.String)
    {
        java.lang.StringBuilder $r1;
        java.lang.String r5, r6;

        r5 := @parameter0: java.lang.String;

        if r5 != null goto label1;

        r6 = "PCL[]";

        goto label2;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PCL[");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        return r6;
    }

    private static java.lang.Runnable handleSystemServerProcess(com.android.internal.os.ZygoteArguments)
    {
        com.android.internal.os.ZygoteArguments r0;
        java.lang.String r1, $r3, $r8, $r9, $r10, $r12, $r15;
        java.lang.String[] r2, $r4, r16;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9;
        long[] $r5;
        java.lang.Runnable $r6;
        java.lang.Thread $r7;
        java.lang.IllegalStateException $r11;
        boolean $z0, $z1, $z2;
        java.lang.Exception $r13;
        java.lang.ClassLoader r17;

        r0 := @parameter0: com.android.internal.os.ZygoteArguments;

        $i1 = <android.system.OsConstants: int S_IRWXG>;

        $i0 = <android.system.OsConstants: int S_IRWXO>;

        $i2 = $i1 | $i0;

        staticinvoke <android.system.Os: int umask(int)>($i2);

        $r3 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mNiceName>;

        if $r3 == null goto label1;

        $r12 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mNiceName>;

        staticinvoke <android.os.Process: void setArgV0(java.lang.String)>($r12);

     label1:
        r1 = staticinvoke <android.system.Os: java.lang.String getenv(java.lang.String)>("SYSTEMSERVERCLASSPATH");

        if r1 == null goto label5;

        staticinvoke <com.android.internal.os.ZygoteInit: void performSystemServerDexOpt(java.lang.String)>(r1);

        $z0 = staticinvoke <com.android.internal.os.ZygoteInit: boolean shouldProfileSystemServer()>();

        if $z0 == 0 goto label5;

        $z1 = <android.os.Build: boolean IS_USERDEBUG>;

        if $z1 != 0 goto label2;

        $z2 = <android.os.Build: boolean IS_ENG>;

        if $z2 == 0 goto label5;

     label2:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Zygote", "Preparing system server profile");

        staticinvoke <com.android.internal.os.ZygoteInit: void prepareSystemServerProfile(java.lang.String)>(r1);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>("Zygote", "Failed to set up system server profile", $r13);

     label5:
        $r15 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mInvokeWith>;

        if $r15 == null goto label7;

        r2 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String[] mRemainingArgs>;

        r16 = r2;

        if r1 == null goto label6;

        $i7 = lengthof r2;

        $i8 = $i7 + 2;

        r16 = newarray (java.lang.String)[$i8];

        r16[0] = "-cp";

        r16[1] = r1;

        $i9 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r16, 2, $i9);

     label6:
        $r8 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mInvokeWith>;

        $r9 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String mNiceName>;

        $i6 = r0.<com.android.internal.os.ZygoteArguments: int mTargetSdkVersion>;

        $r10 = staticinvoke <dalvik.system.VMRuntime: java.lang.String getCurrentInstructionSet()>();

        staticinvoke <com.android.internal.os.WrapperInit: void execApplication(java.lang.String,java.lang.String,int,java.lang.String,java.io.FileDescriptor,java.lang.String[])>($r8, $r9, $i6, $r10, null, r16);

        $r11 = new java.lang.IllegalStateException;

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected return from WrapperInit.execApplication");

        throw $r11;

     label7:
        r17 = null;

        if r1 == null goto label8;

        $i5 = r0.<com.android.internal.os.ZygoteArguments: int mTargetSdkVersion>;

        r17 = staticinvoke <com.android.internal.os.ZygoteInit: java.lang.ClassLoader createPathClassLoader(java.lang.String,int)>(r1, $i5);

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>(r17);

     label8:
        $i4 = r0.<com.android.internal.os.ZygoteArguments: int mTargetSdkVersion>;

        $r5 = r0.<com.android.internal.os.ZygoteArguments: long[] mDisabledCompatChanges>;

        $r4 = r0.<com.android.internal.os.ZygoteArguments: java.lang.String[] mRemainingArgs>;

        $r6 = staticinvoke <com.android.internal.os.ZygoteInit: java.lang.Runnable zygoteInit(int,long[],java.lang.String[],java.lang.ClassLoader)>($i4, $r5, $r4, r17);

        return $r6;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private static boolean hasSecondZygote(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.product.cpu.abilist");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        $z1 = $z0 ^ 1;

        return $z1;
    }

    static boolean isPreloadComplete()
    {
        boolean $z0;

        $z0 = <com.android.internal.os.ZygoteInit: boolean sPreloadComplete>;

        return $z0;
    }

    public static void lazyPreload()
    {
        boolean $z0, $z1;
        android.util.TimingsTraceLog $r0;

        $z0 = <com.android.internal.os.ZygoteInit: boolean sPreloadComplete>;

        $z1 = $z0 ^ 1;

        staticinvoke <com.android.internal.util.Preconditions: void checkState(boolean)>($z1);

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", "Lazily preloading resources.");

        $r0 = new android.util.TimingsTraceLog;

        specialinvoke $r0.<android.util.TimingsTraceLog: void <init>(java.lang.String,long)>("ZygoteInitTiming_lazy", 16384L);

        staticinvoke <com.android.internal.os.ZygoteInit: void preload(android.util.TimingsTraceLog)>($r0);

        return;
    }

    public static void main(java.lang.String[])
    {
        long l0, $l1, $l2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, z6, z7, z8, z9;
        android.util.TimingsTraceLog r0;
        java.lang.String $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, r23, r24, r25;
        int $i3, $i4, i5, $i6;
        java.lang.Throwable $r15, $r16, $r17, $r19, $r20, $r21, r31;
        java.lang.RuntimeException $r18, r27, r33;
        java.lang.String[] r22;
        com.android.internal.os.ZygoteServer r26, r29;
        java.lang.StringBuilder r28;
        java.lang.Runnable r30, r32;

        r22 := @parameter0: java.lang.String[];

        staticinvoke <dalvik.system.ZygoteHooks: void startZygoteNoThreadCreation()>();

     label01:
        staticinvoke <android.system.Os: void setpgid(int,int)>(0, 0);

     label02:
        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r1 = "1";

        $r2 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("sys.boot_completed");

        z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        z6 = staticinvoke <android.os.Process: boolean is64Bit()>();

     label03:
        if z6 == 0 goto label04;

        r23 = "Zygote64Timing";

        goto label05;

     label04:
        r23 = "Zygote32Timing";

     label05:
        r0 = new android.util.TimingsTraceLog;

        specialinvoke r0.<android.util.TimingsTraceLog: void <init>(java.lang.String,long)>(r23, 16384L);

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceBegin(java.lang.String)>("ZygoteInit");

        staticinvoke <com.android.internal.os.RuntimeInit: void preForkInit()>();

     label06:
        z7 = 0;

        r24 = "zygote";

        r25 = null;

        z8 = 0;

        i5 = 1;

        r26 = null;

     label07:
        $i6 = lengthof r22;

        if i5 >= $i6 goto label16;

        $r4 = "start-system-server";

        $r3 = r22[i5];

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        if $z2 == 0 goto label09;

     label08:
        z7 = 1;

        goto label14;

     label09:
        $r6 = "--enable-lazy-preload";

        $r5 = r22[i5];

        $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z3 == 0 goto label11;

     label10:
        z8 = 1;

        goto label14;

     label11:
        $r7 = r22[i5];

        $z4 = virtualinvoke $r7.<java.lang.String: boolean startsWith(java.lang.String)>("--abi-list=");

        if $z4 == 0 goto label13;

        $r14 = r22[i5];

        $r13 = "--abi-list=";

        $i4 = virtualinvoke $r13.<java.lang.String: int length()>();

        r25 = virtualinvoke $r14.<java.lang.String: java.lang.String substring(int)>($i4);

     label12:
        goto label14;

     label13:
        $r8 = r22[i5];

        $z5 = virtualinvoke $r8.<java.lang.String: boolean startsWith(java.lang.String)>("--socket-name=");

        if $z5 == 0 goto label15;

        $r12 = r22[i5];

        $r11 = "--socket-name=";

        $i3 = virtualinvoke $r11.<java.lang.String: int length()>();

        r24 = virtualinvoke $r12.<java.lang.String: java.lang.String substring(int)>($i3);

     label14:
        i5 = i5 + 1;

        goto label07;

     label15:
        r27 = new java.lang.RuntimeException;

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown command line argument: ");

        $r9 = r22[i5];

        virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r10 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r27.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw r27;

     label16:
        z9 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("zygote");

     label17:
        if z0 != 0 goto label21;

        if z9 == 0 goto label20;

     label18:
        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long)>(240, 17, l0);

     label19:
        goto label21;

     label20:
        $z1 = virtualinvoke r24.<java.lang.String: boolean equals(java.lang.Object)>("zygote_secondary");

        if $z1 == 0 goto label21;

        staticinvoke <com.android.internal.util.FrameworkStatsLog: void write(int,int,long)>(240, 18, l0);

     label21:
        if r25 == null goto label36;

        if z8 != 0 goto label26;

     label22:
        virtualinvoke r0.<android.util.TimingsTraceLog: void traceBegin(java.lang.String)>("ZygotePreload");

     label23:
        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3020, $l1);

        staticinvoke <com.android.internal.os.ZygoteInit: void preload(android.util.TimingsTraceLog)>(r0);

     label24:
        $l2 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.util.EventLog: int writeEvent(int,long)>(3030, $l2);

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceEnd()>();

     label25:
        goto label26;

     label26:
        virtualinvoke r0.<android.util.TimingsTraceLog: void traceBegin(java.lang.String)>("PostZygoteInitGC");

        staticinvoke <com.android.internal.os.ZygoteInit: void gcAndFinalize()>();

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceEnd()>();

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceEnd()>();

        staticinvoke <com.android.internal.os.Zygote: void initNativeState(boolean)>(z9);

        staticinvoke <dalvik.system.ZygoteHooks: void stopZygoteNoThreadCreation()>();

        r29 = new com.android.internal.os.ZygoteServer;

        specialinvoke r29.<com.android.internal.os.ZygoteServer: void <init>(boolean)>(z9);

     label27:
        if z7 == 0 goto label33;

     label28:
        r30 = staticinvoke <com.android.internal.os.ZygoteInit: java.lang.Runnable forkSystemServer(java.lang.String,java.lang.String,com.android.internal.os.ZygoteServer)>(r25, r24, r29);

     label29:
        if r30 == null goto label33;

     label30:
        interfaceinvoke r30.<java.lang.Runnable: void run()>();

     label31:
        virtualinvoke r29.<com.android.internal.os.ZygoteServer: void closeServerSocket()>();

        return;

     label32:
        $r20 := @caughtexception;

        r31 = $r20;

        r26 = r29;

        goto label40;

     label33:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", "Accepting command socket connections");

        r32 = virtualinvoke r29.<com.android.internal.os.ZygoteServer: java.lang.Runnable runSelectLoop(java.lang.String)>(r25);

     label34:
        virtualinvoke r29.<com.android.internal.os.ZygoteServer: void closeServerSocket()>();

        if r32 == null goto label35;

        interfaceinvoke r32.<java.lang.Runnable: void run()>();

     label35:
        return;

     label36:
        r33 = new java.lang.RuntimeException;

        specialinvoke r33.<java.lang.RuntimeException: void <init>(java.lang.String)>("No ABI list supplied.");

        throw r33;

     label37:
        $r15 := @caughtexception;

        r31 = $r15;

        goto label40;

     label38:
        $r21 := @caughtexception;

        r31 = $r21;

        goto label40;

     label39:
        $r16 := @caughtexception;

        r31 = $r16;

        r26 = null;

     label40:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Zygote", "System zygote died with exception", r31);

     label41:
        throw r31;

     label42:
        $r19 := @caughtexception;

        if r26 == null goto label43;

        virtualinvoke r26.<com.android.internal.os.ZygoteServer: void closeServerSocket()>();

     label43:
        throw $r19;

     label44:
        $r17 := @caughtexception;

        $r18 = new java.lang.RuntimeException;

        specialinvoke $r18.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to setpgid(0,0)", $r17);

        throw $r18;

        catch android.system.ErrnoException from label01 to label02 with label44;
        catch java.lang.Throwable from label02 to label03 with label39;
        catch java.lang.Throwable from label05 to label06 with label39;
        catch java.lang.Throwable from label07 to label08 with label38;
        catch java.lang.Throwable from label09 to label10 with label38;
        catch java.lang.Throwable from label11 to label12 with label38;
        catch java.lang.Throwable from label13 to label14 with label38;
        catch java.lang.Throwable from label15 to label16 with label38;
        catch java.lang.Throwable from label16 to label17 with label38;
        catch java.lang.Throwable from label18 to label19 with label38;
        catch java.lang.Throwable from label20 to label21 with label38;
        catch java.lang.Throwable from label22 to label23 with label38;
        catch java.lang.Throwable from label23 to label24 with label37;
        catch java.lang.Throwable from label24 to label25 with label37;
        catch java.lang.Throwable from label26 to label27 with label37;
        catch java.lang.Throwable from label28 to label29 with label32;
        catch java.lang.Throwable from label30 to label31 with label32;
        catch java.lang.Throwable from label33 to label34 with label32;
        catch java.lang.Throwable from label36 to label37 with label37;
        catch java.lang.Throwable from label40 to label41 with label42;
        catch java.lang.Throwable from label41 to label42 with label42;
    }

    private static void maybePreloadGraphicsDriver()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.zygote.disable_gl_preload", 0);

        if $z0 != 0 goto label1;

        staticinvoke <com.android.internal.os.ZygoteInit: void nativePreloadGraphicsDriver()>();

     label1:
        return;
    }

    private static native void nativePreloadAppProcessHALs();

    static native void nativePreloadGraphicsDriver();

    private static final native void nativeZygoteInit();

    private static void performSystemServerDexOpt(java.lang.String)
    {
        java.lang.String[] r0;
        android.os.IInstalld r1;
        java.lang.String r2, r3, $r11, $r16, $r21, r22, r23, r24, r25, r27;
        int i0, i4, i5;
        android.os.IBinder $r5;
        dalvik.system.VMRuntime $r6;
        java.lang.Exception $r7;
        java.lang.StringBuilder $r8, $r13, $r18;
        java.lang.Throwable $r12, $r17;

        r22 := @parameter0: java.lang.String;

        r0 = virtualinvoke r22.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r5 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("installd");

        r1 = staticinvoke <android.os.IInstalld$Stub: android.os.IInstalld asInterface(android.os.IBinder)>($r5);

        $r6 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        r2 = virtualinvoke $r6.<dalvik.system.VMRuntime: java.lang.String vmInstructionSet()>();

        i0 = lengthof r0;

        r23 = "";

        i4 = 0;

     label01:
        if i4 >= i0 goto label13;

        r3 = r0[i4];

        r24 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("dalvik.vm.systemservercompilerfilter", "verify");

        r25 = staticinvoke <com.android.internal.os.ZygoteInit: java.lang.String getSystemServerClassLoaderContext(java.lang.String)>(r23);

     label02:
        i5 = staticinvoke <dalvik.system.DexFile: int getDexOptNeeded(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>(r3, r2, r24, r25, 0, 0);

     label03:
        goto label05;

     label04:
        $r17 := @caughtexception;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error checking classpath element for system server: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Zygote", $r21, $r17);

        i5 = 0;

     label05:
        if i5 == 0 goto label10;

        r27 = <android.os.storage.StorageManager: java.lang.String UUID_PRIVATE_INTERNAL>;

     label06:
        interfaceinvoke r1.<android.os.IInstalld: void dexopt(java.lang.String,int,java.lang.String,java.lang.String,int,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,int,java.lang.String,java.lang.String,java.lang.String)>(r3, 1000, "*", r2, i5, null, 0, r24, r27, r25, null, 0, 0, null, null, "server-dexopt");

     label07:
        goto label10;

     label08:
        $r7 := @caughtexception;

        goto label09;

     label09:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed compiling classpath element for system server: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Zygote", $r11, $r7);

        goto label10;

     label10:
        r23 = staticinvoke <com.android.internal.os.ZygoteInit: java.lang.String encodeSystemServerClassPath(java.lang.String,java.lang.String)>(r23, r3);

        goto label12;

     label11:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing classpath element for system server: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Zygote", $r16);

     label12:
        i4 = i4 + 1;

        goto label01;

     label13:
        return;

        catch java.io.FileNotFoundException from label02 to label03 with label11;
        catch java.io.IOException from label02 to label03 with label04;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch android.os.ServiceSpecificException from label06 to label07 with label08;
    }

    private static transient long posixCapabilitiesAsBits(int[])
    {
        int[] r0;
        int i0, i1, $i2, i5;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;
        long $l3, l4;

        r0 := @parameter0: int[];

        l4 = 0L;

        i0 = lengthof r0;

        i5 = 0;

     label1:
        if i5 >= i0 goto label3;

        i1 = r0[i5];

        if i1 < 0 goto label2;

        $i2 = <android.system.OsConstants: int CAP_LAST_CAP>;

        if i1 > $i2 goto label2;

        $l3 = 1L << i1;

        l4 = l4 | $l3;

        i5 = i5 + 1;

        goto label1;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i1);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;

     label3:
        return l4;
    }

    static void preload(android.util.TimingsTraceLog)
    {
        android.util.TimingsTraceLog r0;

        r0 := @parameter0: android.util.TimingsTraceLog;

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Zygote", "begin preload");

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceBegin(java.lang.String)>("BeginPreload");

        staticinvoke <com.android.internal.os.ZygoteInit: void beginPreload()>();

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceEnd()>();

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceBegin(java.lang.String)>("PreloadClasses");

        staticinvoke <com.android.internal.os.ZygoteInit: void preloadClasses()>();

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceEnd()>();

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceBegin(java.lang.String)>("CacheNonBootClasspathClassLoaders");

        staticinvoke <com.android.internal.os.ZygoteInit: void cacheNonBootClasspathClassLoaders()>();

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceEnd()>();

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceBegin(java.lang.String)>("PreloadResources");

        staticinvoke <com.android.internal.os.ZygoteInit: void preloadResources()>();

        virtualinvoke r0.<android.util.TimingsTraceLog: void traceEnd()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, "PreloadAppProcessHALs");

        staticinvoke <com.android.internal.os.ZygoteInit: void nativePreloadAppProcessHALs()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, "PreloadGraphicsDriver");

        staticinvoke <com.android.internal.os.ZygoteInit: void maybePreloadGraphicsDriver()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

        staticinvoke <com.android.internal.os.ZygoteInit: void preloadSharedLibraries()>();

        staticinvoke <com.android.internal.os.ZygoteInit: void preloadTextResources()>();

        staticinvoke <android.webkit.WebViewFactory: void prepareWebViewInZygote()>();

        staticinvoke <com.android.internal.os.ZygoteInit: void endPreload()>();

        staticinvoke <com.android.internal.os.ZygoteInit: void warmUpJcaProviders()>();

        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Zygote", "end preload");

        <com.android.internal.os.ZygoteInit: boolean sPreloadComplete> = 1;

        return;
    }

    private static void preloadClasses()
    {
        dalvik.system.VMRuntime r0;
        long l0, $l4, $l5;
        int i1, i2, $i7, $i10, i14, $i15;
        java.io.BufferedReader r2;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, z8;
        java.io.FileInputStream $r3;
        java.lang.String $r9, $r10, $r18, $r24, $r27, $r34, $r39, r53, r54, r63, r72, r75, r76;
        java.lang.Throwable $r12, $r14, $r21, $r23, $r25, $r26, $r28, $r35, $r40, $r42, $r43, r67, r69;
        java.lang.RuntimeException $r13, $r20, $r22, $r41, $r44, r57;
        java.lang.Error $r19;
        java.lang.UnsatisfiedLinkError $r29;
        java.lang.ClassNotFoundException $r36;
        java.io.InputStreamReader r52;
        java.lang.StringBuilder r56, r59, r61, r62;

        r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

     label01:
        $r3 = new java.io.FileInputStream;

        specialinvoke $r3.<java.io.FileInputStream: void <init>(java.lang.String)>("/system/etc/preloaded-classes");

     label02:
        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", "Preloading classes...");

        l0 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        i1 = staticinvoke <android.system.Os: int getuid()>();

        i2 = staticinvoke <android.system.Os: int getgid()>();

        z8 = 0;

        if i1 != 0 goto label06;

        z8 = 0;

        if i2 != 0 goto label06;

     label03:
        staticinvoke <android.system.Os: void setregid(int,int)>(0, 9999);

        staticinvoke <android.system.Os: void setreuid(int,int)>(0, 9999);

     label04:
        z8 = 1;

        goto label06;

     label05:
        $r43 := @caughtexception;

        $r44 = new java.lang.RuntimeException;

        specialinvoke $r44.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to drop root", $r43);

        throw $r44;

     label06:
        r2 = new java.io.BufferedReader;

     label07:
        r52 = new java.io.InputStreamReader;

     label08:
        specialinvoke r52.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r3);

     label09:
        specialinvoke r2.<java.io.BufferedReader: void <init>(java.io.Reader,int)>(r52, 256);

     label10:
        i14 = 0;

     label11:
        r53 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>();

     label12:
        if r53 == null goto label32;

     label13:
        r54 = virtualinvoke r53.<java.lang.String: java.lang.String trim()>();

     label14:
        $z2 = virtualinvoke r54.<java.lang.String: boolean startsWith(java.lang.String)>("#");

        if $z2 != 0 goto label31;

     label15:
        z0 = virtualinvoke r54.<java.lang.String: boolean equals(java.lang.Object)>("");

     label16:
        if z0 == 0 goto label17;

        goto label31;

     label17:
        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, r54);

     label18:
        staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r54, 1, null);

     label19:
        i14 = i14 + 1;

        goto label29;

     label20:
        $r14 := @caughtexception;

     label21:
        r56 = new java.lang.StringBuilder;

        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error preloading ");

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r18 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Zygote", $r18, $r14);

        $z3 = $r14 instanceof java.lang.Error;

        if $z3 != 0 goto label23;

        $z4 = $r14 instanceof java.lang.RuntimeException;

        if $z4 == 0 goto label22;

        $r20 = (java.lang.RuntimeException) $r14;

        throw $r20;

     label22:
        r57 = new java.lang.RuntimeException;

        specialinvoke r57.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r14);

        throw r57;

     label23:
        $r19 = (java.lang.Error) $r14;

        throw $r19;

     label24:
        $r29 := @caughtexception;

     label25:
        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem preloading ");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r34 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Zygote", $r34);

     label26:
        goto label29;

     label27:
        $r36 := @caughtexception;

     label28:
        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class not found for preloading: ");

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r54);

        $r39 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("Zygote", $r39);

     label29:
        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

     label30:
        goto label11;

     label31:
        goto label11;

     label32:
        r62 = new java.lang.StringBuilder;

        specialinvoke r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...preloaded ");

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" classes in ");

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l5 = $l4 - l0;

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms.");

        $r9 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", $r9);

     label33:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, "PreloadDexCaches");

        virtualinvoke r0.<dalvik.system.VMRuntime: void preloadDexCaches()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

        r63 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("persist.device_config.runtime_native_boot.profilebootclasspath", "");

        $i7 = virtualinvoke r63.<java.lang.String: int length()>();

        if $i7 != 0 goto label34;

        r63 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("dalvik.vm.profilebootclasspath", "");

        goto label34;

     label34:
        $r10 = "true";

        $z1 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r63);

        if $z1 == 0 goto label35;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, "ResetJitCounters");

        staticinvoke <dalvik.system.VMRuntime: void resetJitCounters()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

     label35:
        if z8 == 0 goto label50;

     label36:
        staticinvoke <android.system.Os: void setreuid(int,int)>(0, 0);

        staticinvoke <android.system.Os: void setregid(int,int)>(0, 0);

     label37:
        goto label48;

     label38:
        $r21 := @caughtexception;

        $r22 = new java.lang.RuntimeException;

        specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to restore root", $r21);

        throw $r22;

     label39:
        $r26 := @caughtexception;

        r67 = $r26;

        goto label52;

     label40:
        $r25 := @caughtexception;

        r69 = $r25;

        goto label43;

     label41:
        $r28 := @caughtexception;

        r67 = $r28;

        goto label52;

     label42:
        $r23 := @caughtexception;

        r69 = $r23;

     label43:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("Zygote", "Error reading /system/etc/preloaded-classes.", r69);

     label44:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, "PreloadDexCaches");

        virtualinvoke r0.<dalvik.system.VMRuntime: void preloadDexCaches()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

        r72 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("persist.device_config.runtime_native_boot.profilebootclasspath", "");

        $i10 = virtualinvoke r72.<java.lang.String: int length()>();

        if $i10 != 0 goto label45;

        r72 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("dalvik.vm.profilebootclasspath", "");

        goto label45;

     label45:
        $r24 = "true";

        $z5 = virtualinvoke $r24.<java.lang.String: boolean equals(java.lang.Object)>(r72);

        if $z5 == 0 goto label46;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, "ResetJitCounters");

        staticinvoke <dalvik.system.VMRuntime: void resetJitCounters()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

     label46:
        if z8 == 0 goto label50;

     label47:
        staticinvoke <android.system.Os: void setreuid(int,int)>(0, 0);

        staticinvoke <android.system.Os: void setregid(int,int)>(0, 0);

     label48:
        goto label50;

     label49:
        $r12 := @caughtexception;

        $r13 = new java.lang.RuntimeException;

        specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to restore root", $r12);

        throw $r13;

     label50:
        return;

     label51:
        $r42 := @caughtexception;

        r67 = $r42;

     label52:
        staticinvoke <libcore.io.IoUtils: void closeQuietly(java.lang.AutoCloseable)>($r3);

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, "PreloadDexCaches");

        virtualinvoke r0.<dalvik.system.VMRuntime: void preloadDexCaches()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

        r75 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("persist.device_config.runtime_native_boot.profilebootclasspath", "");

        r76 = r75;

        $i15 = virtualinvoke r75.<java.lang.String: int length()>();

        if $i15 != 0 goto label53;

        r76 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>("dalvik.vm.profilebootclasspath", "");

     label53:
        $r27 = "true";

        $z6 = virtualinvoke $r27.<java.lang.String: boolean equals(java.lang.Object)>(r76);

        if $z6 == 0 goto label54;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, "ResetJitCounters");

        staticinvoke <dalvik.system.VMRuntime: void resetJitCounters()>();

        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

     label54:
        if z8 == 0 goto label58;

     label55:
        staticinvoke <android.system.Os: void setreuid(int,int)>(0, 0);

        staticinvoke <android.system.Os: void setregid(int,int)>(0, 0);

     label56:
        goto label58;

     label57:
        $r40 := @caughtexception;

        $r41 = new java.lang.RuntimeException;

        specialinvoke $r41.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Failed to restore root", $r40);

        throw $r41;

     label58:
        throw r67;

     label59:
        $r35 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("Zygote", "Couldn\'t find /system/etc/preloaded-classes.");

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label59;
        catch android.system.ErrnoException from label03 to label04 with label05;
        catch java.io.IOException from label06 to label07 with label42;
        catch java.lang.Throwable from label06 to label07 with label41;
        catch java.io.IOException from label07 to label08 with label42;
        catch java.lang.Throwable from label07 to label08 with label41;
        catch java.io.IOException from label08 to label09 with label42;
        catch java.lang.Throwable from label08 to label09 with label41;
        catch java.io.IOException from label09 to label10 with label42;
        catch java.lang.Throwable from label09 to label10 with label41;
        catch java.io.IOException from label11 to label12 with label42;
        catch java.lang.Throwable from label11 to label12 with label41;
        catch java.io.IOException from label13 to label14 with label42;
        catch java.lang.Throwable from label13 to label14 with label41;
        catch java.io.IOException from label14 to label15 with label42;
        catch java.lang.Throwable from label14 to label15 with label41;
        catch java.io.IOException from label15 to label16 with label42;
        catch java.lang.Throwable from label15 to label16 with label41;
        catch java.io.IOException from label17 to label18 with label40;
        catch java.lang.Throwable from label17 to label18 with label39;
        catch java.lang.ClassNotFoundException from label18 to label19 with label27;
        catch java.lang.UnsatisfiedLinkError from label18 to label19 with label24;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.io.IOException from label21 to label22 with label40;
        catch java.lang.Throwable from label21 to label22 with label39;
        catch java.io.IOException from label22 to label23 with label40;
        catch java.lang.Throwable from label22 to label23 with label39;
        catch java.io.IOException from label23 to label24 with label40;
        catch java.lang.Throwable from label23 to label24 with label39;
        catch java.io.IOException from label25 to label26 with label40;
        catch java.lang.Throwable from label25 to label26 with label39;
        catch java.io.IOException from label28 to label29 with label40;
        catch java.lang.Throwable from label28 to label29 with label39;
        catch java.io.IOException from label29 to label30 with label40;
        catch java.lang.Throwable from label29 to label30 with label39;
        catch java.io.IOException from label32 to label33 with label40;
        catch java.lang.Throwable from label32 to label33 with label39;
        catch android.system.ErrnoException from label36 to label37 with label38;
        catch java.lang.Throwable from label43 to label44 with label51;
        catch android.system.ErrnoException from label47 to label48 with label49;
        catch android.system.ErrnoException from label55 to label56 with label57;
    }

    private static int preloadColorStateLists(android.content.res.TypedArray)
    {
        android.content.res.TypedArray r0;
        int i0, i1, i2;
        android.content.res.Resources $r2;
        android.content.res.ColorStateList $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r9, $r13;
        java.lang.IllegalArgumentException $r12;

        r0 := @parameter0: android.content.res.TypedArray;

        i0 = virtualinvoke r0.<android.content.res.TypedArray: int length()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i1 = virtualinvoke r0.<android.content.res.TypedArray: int getResourceId(int,int)>(i2, 0);

        if i1 == 0 goto label3;

        $r2 = <com.android.internal.os.ZygoteInit: android.content.res.Resources mResources>;

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int,android.content.res.Resources$Theme)>(i1, null);

        if $r3 == null goto label2;

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find preloaded color resource #0x");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r9 = virtualinvoke r0.<android.content.res.TypedArray: java.lang.String getString(int)>(i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return i0;
    }

    private static int preloadDrawables(android.content.res.TypedArray)
    {
        android.content.res.TypedArray r0;
        int i0, i1, i2;
        android.content.res.Resources $r2;
        android.graphics.drawable.Drawable $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r9, $r13;
        java.lang.IllegalArgumentException $r12;

        r0 := @parameter0: android.content.res.TypedArray;

        i0 = virtualinvoke r0.<android.content.res.TypedArray: int length()>();

        i2 = 0;

     label1:
        if i2 >= i0 goto label4;

        i1 = virtualinvoke r0.<android.content.res.TypedArray: int getResourceId(int,int)>(i2, 0);

        if i1 == 0 goto label3;

        $r2 = <com.android.internal.os.ZygoteInit: android.content.res.Resources mResources>;

        $r3 = virtualinvoke $r2.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int,android.content.res.Resources$Theme)>(i1, null);

        if $r3 == null goto label2;

        goto label3;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to find preloaded drawable resource #0x");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r9 = virtualinvoke r0.<android.content.res.TypedArray: java.lang.String getString(int)>(i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return i0;
    }

    private static void preloadResources()
    {
        android.content.res.Resources $r1, $r8, $r15, $r16, $r17, r25;
        long $l1, $l2, $l4, $l5, $l7, $l8, l11, l13, l15;
        java.lang.String $r7, $r14, $r23;
        boolean $z0;
        java.lang.RuntimeException $r24;
        android.content.res.TypedArray r26, r28, r30;
        int i12, i14, i16;
        java.lang.StringBuilder r27, r29, r31;

        staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

     label1:
        r25 = staticinvoke <android.content.res.Resources: android.content.res.Resources getSystem()>();

        <com.android.internal.os.ZygoteInit: android.content.res.Resources mResources> = r25;

        virtualinvoke r25.<android.content.res.Resources: void startPreloading()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", "Preloading resources...");

        l11 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r1 = <com.android.internal.os.ZygoteInit: android.content.res.Resources mResources>;

        r26 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>(17236114);

        i12 = staticinvoke <com.android.internal.os.ZygoteInit: int preloadDrawables(android.content.res.TypedArray)>(r26);

        virtualinvoke r26.<android.content.res.TypedArray: void recycle()>();

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...preloaded ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resources in ");

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = $l1 - l11;

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms.");

        $r7 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", $r7);

        l13 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r8 = <com.android.internal.os.ZygoteInit: android.content.res.Resources mResources>;

        r28 = virtualinvoke $r8.<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>(17236113);

        i14 = staticinvoke <com.android.internal.os.ZygoteInit: int preloadColorStateLists(android.content.res.TypedArray)>(r28);

        virtualinvoke r28.<android.content.res.TypedArray: void recycle()>();

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...preloaded ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i14);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resources in ");

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l5 = $l4 - l13;

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms.");

        $r14 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", $r14);

        $r15 = <com.android.internal.os.ZygoteInit: android.content.res.Resources mResources>;

        $z0 = virtualinvoke $r15.<android.content.res.Resources: boolean getBoolean(int)>(17891466);

        if $z0 == 0 goto label2;

        l15 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $r17 = <com.android.internal.os.ZygoteInit: android.content.res.Resources mResources>;

        r30 = virtualinvoke $r17.<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>(17236115);

        i16 = staticinvoke <com.android.internal.os.ZygoteInit: int preloadDrawables(android.content.res.TypedArray)>(r30);

        virtualinvoke r30.<android.content.res.TypedArray: void recycle()>();

        r31 = new java.lang.StringBuilder;

        specialinvoke r31.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("...preloaded ");

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i16);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" resource in ");

        $l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l8 = $l7 - l15;

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l8);

        virtualinvoke r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms.");

        $r23 = virtualinvoke r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", $r23);

     label2:
        $r16 = <com.android.internal.os.ZygoteInit: android.content.res.Resources mResources>;

        virtualinvoke $r16.<android.content.res.Resources: void finishPreloading()>();

     label3:
        goto label5;

     label4:
        $r24 := @caughtexception;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Zygote", "Failure preloading resources", $r24);

     label5:
        return;

        catch java.lang.RuntimeException from label1 to label2 with label4;
        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    private static void preloadSharedLibraries()
    {
        java.lang.Throwable $r1;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", "Preloading shared libraries...");

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("android");

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("compiler_rt");

        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("jnigraphics");

     label1:
        staticinvoke <java.lang.System: void loadLibrary(java.lang.String)>("sfplugin_ccodec");

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.Error from label1 to label2 with label3;
        catch java.lang.RuntimeException from label1 to label2 with label3;
    }

    private static void preloadTextResources()
    {
        staticinvoke <android.text.Hyphenator: void init()>();

        staticinvoke <android.widget.TextView: void preloadFontCache()>();

        return;
    }

    private static void prepareSystemServerProfile(java.lang.String) throws android.os.RemoteException
    {
        boolean $z0;
        android.os.IBinder $r0;
        android.os.IInstalld $r1;
        int $i0;
        java.lang.String $r2, $r5, r6;
        java.io.File $r3, $r4;
        java.lang.String[] r7;

        r6 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r6.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        r7 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("installd");

        $r1 = staticinvoke <android.os.IInstalld$Stub: android.os.IInstalld asInterface(android.os.IBinder)>($r0);

        $i0 = staticinvoke <android.os.UserHandle: int getAppId(int)>(1000);

        $r2 = r7[0];

        interfaceinvoke $r1.<android.os.IInstalld: boolean prepareAppProfile(java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String)>("android", 0, $i0, "primary.prof", $r2, null);

        $r3 = new java.io.File;

        $r4 = staticinvoke <android.os.Environment: java.io.File getDataProfilesDePackageDirectory(int,java.lang.String)>(0, "android");

        specialinvoke $r3.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, "primary.prof");

        $r5 = virtualinvoke $r3.<java.io.File: java.lang.String getAbsolutePath()>();

        staticinvoke <dalvik.system.VMRuntime: void registerAppInfo(java.lang.String,java.lang.String[])>($r5, r7);

        return;
    }

    public static void setApiBlacklistExemptions(java.lang.String[])
    {
        java.lang.String[] r0;
        dalvik.system.VMRuntime $r1;

        r0 := @parameter0: java.lang.String[];

        $r1 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r1.<dalvik.system.VMRuntime: void setHiddenApiExemptions(java.lang.String[])>(r0);

        return;
    }

    public static void setHiddenApiAccessLogSampleRate(int)
    {
        int i0;
        dalvik.system.VMRuntime $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        virtualinvoke $r0.<dalvik.system.VMRuntime: void setHiddenApiAccessLogSamplingRate(int)>(i0);

        return;
    }

    public static void setHiddenApiUsageLogger(dalvik.system.VMRuntime$HiddenApiUsageLogger)
    {
        dalvik.system.VMRuntime$HiddenApiUsageLogger r0;

        r0 := @parameter0: dalvik.system.VMRuntime$HiddenApiUsageLogger;

        staticinvoke <dalvik.system.VMRuntime: dalvik.system.VMRuntime getRuntime()>();

        staticinvoke <dalvik.system.VMRuntime: void setHiddenApiUsageLogger(dalvik.system.VMRuntime$HiddenApiUsageLogger)>(r0);

        return;
    }

    private static boolean shouldProfileSystemServer()
    {
        boolean $z0, $z1;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("dalvik.vm.profilesystemserver", 0);

        $z1 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("persist.device_config.runtime_native_boot.profilesystemserver", $z0);

        return $z1;
    }

    private static void waitForSecondaryZygote(java.lang.String)
    {
        java.lang.String $r1, r2, r3;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        $r1 = "zygote";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        r3 = "zygote_secondary";

        goto label2;

     label1:
        r3 = "zygote";

     label2:
        staticinvoke <android.os.ZygoteProcess: void waitForConnectionToZygote(java.lang.String)>(r3);

        return;
    }

    private static void warmUpJcaProviders()
    {
        int i0, i9;
        java.lang.StringBuilder $r0, $r5;
        long $l1, $l2, $l4, $l5, l7, l8;
        java.lang.String $r4, $r9;
        java.security.Provider $r10;
        java.security.Provider[] r12;

        l7 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, "Starting installation of AndroidKeyStoreProvider");

        staticinvoke <android.security.keystore.AndroidKeyStoreProvider: void install()>();

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Installed AndroidKeyStoreProvider in ");

        $l1 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l2 = $l1 - l7;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms.");

        $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", $r4);

        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

        l8 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(16384L, "Starting warm up of JCA providers");

        r12 = staticinvoke <java.security.Security: java.security.Provider[] getProviders()>();

        i0 = lengthof r12;

        i9 = 0;

     label1:
        if i9 >= i0 goto label2;

        $r10 = r12[i9];

        virtualinvoke $r10.<java.security.Provider: void warmUpServiceProvision()>();

        i9 = i9 + 1;

        goto label1;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warmed up JCA providers in ");

        $l4 = staticinvoke <android.os.SystemClock: long uptimeMillis()>();

        $l5 = $l4 - l8;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l5);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms.");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("Zygote", $r9);

        staticinvoke <android.os.Trace: void traceEnd(long)>(16384L);

        return;
    }

    public static final java.lang.Runnable zygoteInit(int, long[], java.lang.String[], java.lang.ClassLoader)
    {
        int i0;
        long[] r0;
        java.lang.String[] r1;
        java.lang.ClassLoader r2;
        java.lang.Runnable $r3;

        i0 := @parameter0: int;

        r0 := @parameter1: long[];

        r1 := @parameter2: java.lang.String[];

        r2 := @parameter3: java.lang.ClassLoader;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "ZygoteInit");

        staticinvoke <com.android.internal.os.RuntimeInit: void redirectLogStreams()>();

        staticinvoke <com.android.internal.os.RuntimeInit: void commonInit()>();

        staticinvoke <com.android.internal.os.ZygoteInit: void nativeZygoteInit()>();

        $r3 = staticinvoke <com.android.internal.os.RuntimeInit: java.lang.Runnable applicationInit(int,long[],java.lang.String[],java.lang.ClassLoader)>(i0, r0, r1, r2);

        return $r3;
    }

    public static void <clinit>()
    {
        <com.android.internal.os.ZygoteInit: int UNPRIVILEGED_UID> = 9999;

        <com.android.internal.os.ZygoteInit: int UNPRIVILEGED_GID> = 9999;

        <com.android.internal.os.ZygoteInit: java.lang.String TAG> = "Zygote";

        <com.android.internal.os.ZygoteInit: java.lang.String SOCKET_NAME_ARG> = "--socket-name=";

        <com.android.internal.os.ZygoteInit: int ROOT_UID> = 0;

        <com.android.internal.os.ZygoteInit: int ROOT_GID> = 0;

        <com.android.internal.os.ZygoteInit: java.lang.String PROPERTY_DISABLE_GRAPHICS_DRIVER_PRELOADING> = "ro.zygote.disable_gl_preload";

        <com.android.internal.os.ZygoteInit: boolean PRELOAD_RESOURCES> = 1;

        <com.android.internal.os.ZygoteInit: java.lang.String PRELOADED_CLASSES> = "/system/etc/preloaded-classes";

        <com.android.internal.os.ZygoteInit: int LOG_BOOT_PROGRESS_PRELOAD_START> = 3020;

        <com.android.internal.os.ZygoteInit: int LOG_BOOT_PROGRESS_PRELOAD_END> = 3030;

        <com.android.internal.os.ZygoteInit: java.lang.String ABI_LIST_ARG> = "--abi-list=";

        return;
    }
}
