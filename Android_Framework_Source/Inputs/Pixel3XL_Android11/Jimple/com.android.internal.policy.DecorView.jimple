public class com.android.internal.policy.DecorView extends android.widget.FrameLayout implements com.android.internal.view.RootViewSurfaceTaker, android.view.WindowCallbacks
{
    private static final boolean DEBUG_MEASURE;
    public static final int DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP;
    public static final int DECOR_SHADOW_UNFOCUSED_HEIGHT_IN_DIP;
    public static final com.android.internal.policy.DecorView$ColorViewAttributes NAVIGATION_BAR_COLOR_VIEW_ATTRIBUTES;
    private static final android.view.ViewOutlineProvider PIP_OUTLINE_PROVIDER;
    private static final int SCRIM_LIGHT;
    public static final com.android.internal.policy.DecorView$ColorViewAttributes STATUS_BAR_COLOR_VIEW_ATTRIBUTES;
    private static final boolean SWEEP_OPEN_MENU;
    private static final java.lang.String TAG;
    private boolean mAllowUpdateElevation;
    private boolean mApplyFloatingHorizontalInsets;
    private boolean mApplyFloatingVerticalInsets;
    private float mAvailableWidth;
    private com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer;
    private final com.android.internal.widget.BackgroundFallback mBackgroundFallback;
    private android.graphics.Insets mBackgroundInsets;
    private final android.graphics.Rect mBackgroundPadding;
    private final int mBarEnterExitDuration;
    private android.graphics.drawable.Drawable mCaptionBackgroundDrawable;
    private boolean mChanging;
    android.view.ViewGroup mContentRoot;
    private com.android.internal.widget.DecorCaptionView mDecorCaptionView;
    int mDefaultOpacity;
    private int mDownY;
    private boolean mDrawLegacyNavigationBarBackground;
    private final android.graphics.Rect mDrawingBounds;
    private boolean mElevationAdjustedForStack;
    private android.animation.ObjectAnimator mFadeAnim;
    private final int mFeatureId;
    private android.view.ActionMode mFloatingActionMode;
    private android.view.View mFloatingActionModeOriginatingView;
    private final android.graphics.Rect mFloatingInsets;
    private com.android.internal.widget.FloatingToolbar mFloatingToolbar;
    private android.view.ViewTreeObserver$OnPreDrawListener mFloatingToolbarPreDrawListener;
    final boolean mForceWindowDrawsBarBackgrounds;
    private final android.graphics.Rect mFrameOffsets;
    private final android.graphics.Rect mFramePadding;
    private boolean mHasCaption;
    private final android.view.animation.Interpolator mHideInterpolator;
    private final android.graphics.Paint mHorizontalResizeShadowPaint;
    private boolean mIsInPictureInPictureMode;
    private android.graphics.drawable.Drawable$Callback mLastBackgroundDrawableCb;
    private android.graphics.Insets mLastBackgroundInsets;
    private int mLastBottomInset;
    private boolean mLastHasBottomStableInset;
    private boolean mLastHasLeftStableInset;
    private boolean mLastHasRightStableInset;
    private boolean mLastHasTopStableInset;
    private int mLastLeftInset;
    private android.graphics.drawable.Drawable mLastOriginalBackgroundDrawable;
    private android.view.ViewOutlineProvider mLastOutlineProvider;
    private int mLastRightInset;
    private boolean mLastShouldAlwaysConsumeSystemBars;
    private int mLastTopInset;
    private int mLastWindowFlags;
    private final android.graphics.Paint mLegacyNavigationBarBackgroundPaint;
    java.lang.String mLogTag;
    private android.graphics.drawable.Drawable mMenuBackground;
    private final com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState;
    private android.graphics.drawable.Drawable mOriginalBackgroundDrawable;
    private android.view.PendingInsetsController mPendingInsetsController;
    private android.graphics.drawable.Drawable mPendingWindowBackground;
    android.view.ActionMode mPrimaryActionMode;
    private android.widget.PopupWindow mPrimaryActionModePopup;
    private com.android.internal.widget.ActionBarContextView mPrimaryActionModeView;
    private int mResizeMode;
    private final int mResizeShadowSize;
    private android.graphics.drawable.Drawable mResizingBackgroundDrawable;
    private int mRootScrollY;
    private final int mSemiTransparentBarColor;
    private final android.view.animation.Interpolator mShowInterpolator;
    private java.lang.Runnable mShowPrimaryActionModePopup;
    private final com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState;
    private android.view.View mStatusGuard;
    private android.graphics.Rect mTempRect;
    private android.graphics.drawable.Drawable mUserCaptionBackgroundDrawable;
    private final android.graphics.Paint mVerticalResizeShadowPaint;
    private boolean mWatchingForMenu;
    private com.android.internal.policy.PhoneWindow mWindow;
    private boolean mWindowResizeCallbacksAdded;

    static void <clinit>()
    {
        com.android.internal.policy.DecorView$ColorViewAttributes $r0, $r1;
        com.android.internal.policy.DecorView$1 $r2;

        <com.android.internal.policy.DecorView: java.lang.String TAG> = "DecorView";

        <com.android.internal.policy.DecorView: boolean SWEEP_OPEN_MENU> = 0;

        <com.android.internal.policy.DecorView: int SCRIM_LIGHT> = -419430401;

        <com.android.internal.policy.DecorView: int DECOR_SHADOW_UNFOCUSED_HEIGHT_IN_DIP> = 5;

        <com.android.internal.policy.DecorView: int DECOR_SHADOW_FOCUSED_HEIGHT_IN_DIP> = 20;

        <com.android.internal.policy.DecorView: boolean DEBUG_MEASURE> = 0;

        $r0 = new com.android.internal.policy.DecorView$ColorViewAttributes;

        specialinvoke $r0.<com.android.internal.policy.DecorView$ColorViewAttributes: void <init>(int,int,int,int,int,java.lang.String,int,int,int,com.android.internal.policy.DecorView$1)>(4, 67108864, 48, 3, 5, "android:status:background", 16908335, 1024, 0, null);

        <com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewAttributes STATUS_BAR_COLOR_VIEW_ATTRIBUTES> = $r0;

        $r1 = new com.android.internal.policy.DecorView$ColorViewAttributes;

        specialinvoke $r1.<com.android.internal.policy.DecorView$ColorViewAttributes: void <init>(int,int,int,int,int,java.lang.String,int,int,int,com.android.internal.policy.DecorView$1)>(2, 134217728, 80, 5, 3, "android:navigation:background", 16908336, 0, 1, null);

        <com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewAttributes NAVIGATION_BAR_COLOR_VIEW_ATTRIBUTES> = $r1;

        $r2 = new com.android.internal.policy.DecorView$1;

        specialinvoke $r2.<com.android.internal.policy.DecorView$1: void <init>()>();

        <com.android.internal.policy.DecorView: android.view.ViewOutlineProvider PIP_OUTLINE_PROVIDER> = $r2;

        return;
    }

    void <init>(android.content.Context, int, com.android.internal.policy.PhoneWindow, android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.DecorView r0;
        android.content.Context r1;
        int i0, $i1, $i2, $i3, $i4;
        com.android.internal.policy.PhoneWindow r2;
        android.view.WindowManager$LayoutParams r3;
        android.graphics.Rect $r4, $r5, $r6, $r7, $r13;
        com.android.internal.policy.DecorView$ColorViewState $r8, $r10;
        com.android.internal.policy.DecorView$ColorViewAttributes $r9, $r11;
        com.android.internal.widget.BackgroundFallback $r12;
        android.graphics.Paint $r14, $r15, $r16, $r27;
        android.graphics.Insets $r17, $r18;
        android.view.PendingInsetsController $r19;
        android.view.animation.Interpolator $r20, $r21;
        android.content.res.Resources $r22, $r23, $r25, $r26;
        boolean $z0, z1;
        android.content.pm.ApplicationInfo $r24;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.internal.policy.PhoneWindow;

        r3 := @parameter3: android.view.WindowManager$LayoutParams;

        specialinvoke r0.<android.widget.FrameLayout: void <init>(android.content.Context)>(r1);

        z1 = 0;

        r0.<com.android.internal.policy.DecorView: boolean mAllowUpdateElevation> = 0;

        r0.<com.android.internal.policy.DecorView: boolean mElevationAdjustedForStack> = 0;

        r0.<com.android.internal.policy.DecorView: int mDefaultOpacity> = -1;

        $r4 = new android.graphics.Rect;

        specialinvoke $r4.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.policy.DecorView: android.graphics.Rect mDrawingBounds> = $r4;

        $r5 = new android.graphics.Rect;

        specialinvoke $r5.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.policy.DecorView: android.graphics.Rect mBackgroundPadding> = $r5;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFramePadding> = $r6;

        $r7 = new android.graphics.Rect;

        specialinvoke $r7.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFrameOffsets> = $r7;

        r0.<com.android.internal.policy.DecorView: boolean mHasCaption> = 0;

        $r8 = new com.android.internal.policy.DecorView$ColorViewState;

        $r9 = <com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewAttributes STATUS_BAR_COLOR_VIEW_ATTRIBUTES>;

        specialinvoke $r8.<com.android.internal.policy.DecorView$ColorViewState: void <init>(com.android.internal.policy.DecorView$ColorViewAttributes)>($r9);

        r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState> = $r8;

        $r10 = new com.android.internal.policy.DecorView$ColorViewState;

        $r11 = <com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewAttributes NAVIGATION_BAR_COLOR_VIEW_ATTRIBUTES>;

        specialinvoke $r10.<com.android.internal.policy.DecorView$ColorViewState: void <init>(com.android.internal.policy.DecorView$ColorViewAttributes)>($r11);

        r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState> = $r10;

        $r12 = new com.android.internal.widget.BackgroundFallback;

        specialinvoke $r12.<com.android.internal.widget.BackgroundFallback: void <init>()>();

        r0.<com.android.internal.policy.DecorView: com.android.internal.widget.BackgroundFallback mBackgroundFallback> = $r12;

        r0.<com.android.internal.policy.DecorView: int mLastTopInset> = 0;

        r0.<com.android.internal.policy.DecorView: int mLastBottomInset> = 0;

        r0.<com.android.internal.policy.DecorView: int mLastRightInset> = 0;

        r0.<com.android.internal.policy.DecorView: int mLastLeftInset> = 0;

        r0.<com.android.internal.policy.DecorView: boolean mLastHasTopStableInset> = 0;

        r0.<com.android.internal.policy.DecorView: boolean mLastHasBottomStableInset> = 0;

        r0.<com.android.internal.policy.DecorView: boolean mLastHasRightStableInset> = 0;

        r0.<com.android.internal.policy.DecorView: boolean mLastHasLeftStableInset> = 0;

        r0.<com.android.internal.policy.DecorView: int mLastWindowFlags> = 0;

        r0.<com.android.internal.policy.DecorView: boolean mLastShouldAlwaysConsumeSystemBars> = 0;

        r0.<com.android.internal.policy.DecorView: int mRootScrollY> = 0;

        r0.<com.android.internal.policy.DecorView: boolean mWindowResizeCallbacksAdded> = 0;

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable$Callback mLastBackgroundDrawableCb> = null;

        r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer> = null;

        r0.<com.android.internal.policy.DecorView: java.lang.String mLogTag> = "DecorView";

        $r13 = new android.graphics.Rect;

        specialinvoke $r13.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets> = $r13;

        r0.<com.android.internal.policy.DecorView: boolean mApplyFloatingVerticalInsets> = 0;

        r0.<com.android.internal.policy.DecorView: boolean mApplyFloatingHorizontalInsets> = 0;

        r0.<com.android.internal.policy.DecorView: int mResizeMode> = -1;

        $r14 = new android.graphics.Paint;

        specialinvoke $r14.<android.graphics.Paint: void <init>()>();

        r0.<com.android.internal.policy.DecorView: android.graphics.Paint mVerticalResizeShadowPaint> = $r14;

        $r15 = new android.graphics.Paint;

        specialinvoke $r15.<android.graphics.Paint: void <init>()>();

        r0.<com.android.internal.policy.DecorView: android.graphics.Paint mHorizontalResizeShadowPaint> = $r15;

        $r16 = new android.graphics.Paint;

        specialinvoke $r16.<android.graphics.Paint: void <init>()>();

        r0.<com.android.internal.policy.DecorView: android.graphics.Paint mLegacyNavigationBarBackgroundPaint> = $r16;

        $r17 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets> = $r17;

        $r18 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<com.android.internal.policy.DecorView: android.graphics.Insets mLastBackgroundInsets> = $r18;

        $r19 = new android.view.PendingInsetsController;

        specialinvoke $r19.<android.view.PendingInsetsController: void <init>()>();

        r0.<com.android.internal.policy.DecorView: android.view.PendingInsetsController mPendingInsetsController> = $r19;

        r0.<com.android.internal.policy.DecorView: int mFeatureId> = i0;

        $r20 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r1, 17563662);

        r0.<com.android.internal.policy.DecorView: android.view.animation.Interpolator mShowInterpolator> = $r20;

        $r21 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r1, 17563663);

        r0.<com.android.internal.policy.DecorView: android.view.animation.Interpolator mHideInterpolator> = $r21;

        $r22 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r22.<android.content.res.Resources: int getInteger(int)>(17694934);

        r0.<com.android.internal.policy.DecorView: int mBarEnterExitDuration> = $i1;

        $r23 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r23.<android.content.res.Resources: boolean getBoolean(int)>(17891465);

        if $z0 == 0 goto label1;

        $r24 = virtualinvoke r1.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i2 = $r24.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i2 < 24 goto label1;

        z1 = 1;

        goto label1;

     label1:
        r0.<com.android.internal.policy.DecorView: boolean mForceWindowDrawsBarBackgrounds> = z1;

        $r25 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i3 = virtualinvoke $r25.<android.content.res.Resources: int getColor(int,android.content.res.Resources$Theme)>(17170993, null);

        r0.<com.android.internal.policy.DecorView: int mSemiTransparentBarColor> = $i3;

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateAvailableWidth()>();

        virtualinvoke r0.<com.android.internal.policy.DecorView: void setWindow(com.android.internal.policy.PhoneWindow)>(r2);

        virtualinvoke r0.<com.android.internal.policy.DecorView: void updateLogTag(android.view.WindowManager$LayoutParams)>(r3);

        $r26 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>();

        $i4 = virtualinvoke $r26.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105433);

        r0.<com.android.internal.policy.DecorView: int mResizeShadowSize> = $i4;

        specialinvoke r0.<com.android.internal.policy.DecorView: void initResizingPaints()>();

        $r27 = r0.<com.android.internal.policy.DecorView: android.graphics.Paint mLegacyNavigationBarBackgroundPaint>;

        virtualinvoke $r27.<android.graphics.Paint: void setColor(int)>(-16777216);

        return;
    }

    static com.android.internal.widget.ActionBarContextView access$100(com.android.internal.policy.DecorView)
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.widget.ActionBarContextView $r1;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        return $r1;
    }

    static android.widget.PopupWindow access$200(com.android.internal.policy.DecorView)
    {
        com.android.internal.policy.DecorView r0;
        android.widget.PopupWindow $r1;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup>;

        return $r1;
    }

    static void access$300(com.android.internal.policy.DecorView)
    {
        com.android.internal.policy.DecorView r0;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        specialinvoke r0.<com.android.internal.policy.DecorView: void endOnGoingFadeAnimation()>();

        return;
    }

    static android.animation.ObjectAnimator access$400(com.android.internal.policy.DecorView)
    {
        com.android.internal.policy.DecorView r0;
        android.animation.ObjectAnimator $r1;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: android.animation.ObjectAnimator mFadeAnim>;

        return $r1;
    }

    static android.animation.ObjectAnimator access$402(com.android.internal.policy.DecorView, android.animation.ObjectAnimator)
    {
        com.android.internal.policy.DecorView r0;
        android.animation.ObjectAnimator r1;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        r1 := @parameter1: android.animation.ObjectAnimator;

        r0.<com.android.internal.policy.DecorView: android.animation.ObjectAnimator mFadeAnim> = r1;

        return r1;
    }

    static android.content.Context access$500(com.android.internal.policy.DecorView)
    {
        com.android.internal.policy.DecorView r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        return $r1;
    }

    static android.view.ActionMode access$600(com.android.internal.policy.DecorView)
    {
        com.android.internal.policy.DecorView r0;
        android.view.ActionMode $r1;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: android.view.ActionMode mFloatingActionMode>;

        return $r1;
    }

    static android.view.ActionMode access$602(com.android.internal.policy.DecorView, android.view.ActionMode)
    {
        com.android.internal.policy.DecorView r0;
        android.view.ActionMode r1;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        r1 := @parameter1: android.view.ActionMode;

        r0.<com.android.internal.policy.DecorView: android.view.ActionMode mFloatingActionMode> = r1;

        return r1;
    }

    static java.lang.Runnable access$700(com.android.internal.policy.DecorView)
    {
        com.android.internal.policy.DecorView r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: java.lang.Runnable mShowPrimaryActionModePopup>;

        return $r1;
    }

    static void access$800(com.android.internal.policy.DecorView)
    {
        com.android.internal.policy.DecorView r0;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        specialinvoke r0.<com.android.internal.policy.DecorView: void cleanupFloatingActionModeViews()>();

        return;
    }

    static com.android.internal.policy.PhoneWindow access$900(com.android.internal.policy.DecorView)
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.PhoneWindow $r1;

        r0 := @parameter0: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        return $r1;
    }

    public static int calculateBarColor(int, int, int, int, int, int, boolean)
    {
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, i9, i10;
        boolean z0, z1;

        i9 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        i4 := @parameter5: int;

        z0 := @parameter6: boolean;

        $i5 = i9 & i0;

        if $i5 == 0 goto label1;

        return i1;

     label1:
        $i6 = -2147483648 & i9;

        if $i6 != 0 goto label2;

        return -16777216;

     label2:
        if z0 == 0 goto label7;

        $i7 = staticinvoke <android.graphics.Color: int alpha(int)>(i2);

        if $i7 != 0 goto label7;

        $i8 = i3 & i4;

        if $i8 == 0 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        if z1 == 0 goto label5;

        i10 = -419430401;

        goto label6;

     label5:
        i10 = i1;

     label6:
        return i10;

     label7:
        return i2;
    }

    private int calculateNavigationBarColor()
    {
        com.android.internal.policy.DecorView r0;
        int i0, i1, i2, i3, $i4;
        com.android.internal.policy.PhoneWindow $r1, $r3, $r4;
        android.view.WindowManager$LayoutParams $r2;
        boolean $z0, $z1, z2;
        android.content.Context $r5;
        android.content.res.Resources $r6;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r2 = virtualinvoke $r1.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        i0 = $r2.<android.view.WindowManager$LayoutParams: int flags>;

        i1 = r0.<com.android.internal.policy.DecorView: int mSemiTransparentBarColor>;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        i2 = $r3.<com.android.internal.policy.PhoneWindow: int mNavigationBarColor>;

        i3 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getWindowSystemUiVisibility()>();

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = $r4.<com.android.internal.policy.PhoneWindow: boolean mEnsureNavigationBarContrastWhenTransparent>;

        if $z0 == 0 goto label1;

        $r5 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r6.<android.content.res.Resources: boolean getBoolean(int)>(17891491);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $i4 = staticinvoke <com.android.internal.policy.DecorView: int calculateBarColor(int,int,int,int,int,int,boolean)>(i0, 134217728, i1, i2, i3, 16, z2);

        return $i4;
    }

    private int calculateStatusBarColor()
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.PhoneWindow $r1, $r3, $r4;
        android.view.WindowManager$LayoutParams $r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r2 = virtualinvoke $r1.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i0 = $r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = r0.<com.android.internal.policy.DecorView: int mSemiTransparentBarColor>;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $i2 = $r3.<com.android.internal.policy.PhoneWindow: int mStatusBarColor>;

        $i3 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getWindowSystemUiVisibility()>();

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = $r4.<com.android.internal.policy.PhoneWindow: boolean mEnsureStatusBarContrastWhenTransparent>;

        $i4 = staticinvoke <com.android.internal.policy.DecorView: int calculateBarColor(int,int,int,int,int,int,boolean)>($i0, 67108864, $i1, $i2, $i3, 8192, $z0);

        return $i4;
    }

    private void cleanupFloatingActionModeViews()
    {
        com.android.internal.policy.DecorView r0;
        android.view.ViewTreeObserver$OnPreDrawListener $r1, $r3;
        android.view.ViewTreeObserver $r2;
        com.android.internal.widget.FloatingToolbar r4;
        android.view.View r5;

        r0 := @this: com.android.internal.policy.DecorView;

        r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.FloatingToolbar mFloatingToolbar>;

        if r4 == null goto label1;

        virtualinvoke r4.<com.android.internal.widget.FloatingToolbar: void dismiss()>();

        r0.<com.android.internal.policy.DecorView: com.android.internal.widget.FloatingToolbar mFloatingToolbar> = null;

     label1:
        r5 = r0.<com.android.internal.policy.DecorView: android.view.View mFloatingActionModeOriginatingView>;

        if r5 == null goto label3;

        $r1 = r0.<com.android.internal.policy.DecorView: android.view.ViewTreeObserver$OnPreDrawListener mFloatingToolbarPreDrawListener>;

        if $r1 == null goto label2;

        $r2 = virtualinvoke r5.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r3 = r0.<com.android.internal.policy.DecorView: android.view.ViewTreeObserver$OnPreDrawListener mFloatingToolbarPreDrawListener>;

        virtualinvoke $r2.<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>($r3);

        r0.<com.android.internal.policy.DecorView: android.view.ViewTreeObserver$OnPreDrawListener mFloatingToolbarPreDrawListener> = null;

     label2:
        r0.<com.android.internal.policy.DecorView: android.view.View mFloatingActionModeOriginatingView> = null;

     label3:
        return;
    }

    private void cleanupPrimaryActionMode()
    {
        com.android.internal.policy.DecorView r0;
        android.view.ActionMode r1;
        com.android.internal.widget.ActionBarContextView r2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 = r0.<com.android.internal.policy.DecorView: android.view.ActionMode mPrimaryActionMode>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.view.ActionMode: void finish()>();

        r0.<com.android.internal.policy.DecorView: android.view.ActionMode mPrimaryActionMode> = null;

     label1:
        r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        if r2 == null goto label2;

        virtualinvoke r2.<com.android.internal.widget.ActionBarContextView: void killMode()>();

     label2:
        return;
    }

    private android.view.ActionMode createActionMode(int, android.view.ActionMode$Callback2, android.view.View)
    {
        com.android.internal.policy.DecorView r0;
        int i0;
        android.view.ActionMode$Callback2 r1;
        android.view.View r2;
        android.view.ActionMode $r3, $r4;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.ActionMode$Callback2;

        r2 := @parameter2: android.view.View;

        if i0 == 1 goto label1;

        $r4 = specialinvoke r0.<com.android.internal.policy.DecorView: android.view.ActionMode createStandaloneActionMode(android.view.ActionMode$Callback)>(r1);

        return $r4;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.policy.DecorView: android.view.ActionMode createFloatingActionMode(android.view.View,android.view.ActionMode$Callback2)>(r2, r1);

        return $r3;
    }

    private com.android.internal.widget.DecorCaptionView createDecorCaptionView(android.view.LayoutInflater)
    {
        com.android.internal.policy.DecorView r0;
        android.view.LayoutInflater r1;
        com.android.internal.policy.PhoneWindow $r2, $r3, $r10;
        int $i0, $i1, $i2, i3, i4;
        boolean $z0, $z1, z2, z3, $z4;
        com.android.internal.widget.DecorCaptionView r4, r11;
        android.view.View r5;
        android.view.WindowManager$LayoutParams r6;
        android.content.res.Resources $r7;
        android.content.res.Configuration $r8;
        android.app.WindowConfiguration r9;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.LayoutInflater;

        r4 = null;

        i3 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getChildCount()>();

        z2 = 1;

        i4 = i3 + -1;

     label01:
        if i4 < 0 goto label03;

        if r4 != null goto label03;

        r5 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.View getChildAt(int)>(i4);

        $z1 = r5 instanceof com.android.internal.widget.DecorCaptionView;

        if $z1 == 0 goto label02;

        r4 = (com.android.internal.widget.DecorCaptionView) r5;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void removeViewAt(int)>(i4);

     label02:
        i4 = i4 + -1;

        goto label01;

     label03:
        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r6 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i0 = r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i0 == 1 goto label05;

        $i1 = r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i1 == 2 goto label05;

        $i2 = r6.<android.view.WindowManager$LayoutParams: int type>;

        if $i2 != 4 goto label04;

        goto label05;

     label04:
        z3 = 0;

        goto label06;

     label05:
        z3 = 1;

     label06:
        $r7 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        r9 = $r8.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r10 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z4 = virtualinvoke $r10.<com.android.internal.policy.PhoneWindow: boolean isFloating()>();

        if $z4 != 0 goto label08;

        if z3 == 0 goto label08;

        $z0 = virtualinvoke r9.<android.app.WindowConfiguration: boolean hasWindowDecorCaption()>();

        if $z0 == 0 goto label08;

        r11 = r4;

        if r4 != null goto label07;

        r11 = specialinvoke r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView inflateDecorCaptionView(android.view.LayoutInflater)>(r1);

     label07:
        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke r11.<com.android.internal.widget.DecorCaptionView: void setPhoneWindow(com.android.internal.policy.PhoneWindow,boolean)>($r3, 1);

        goto label09;

     label08:
        r11 = null;

     label09:
        if r11 == null goto label10;

        goto label11;

     label10:
        z2 = 0;

     label11:
        virtualinvoke r0.<com.android.internal.policy.DecorView: void enableCaption(boolean)>(z2);

        return r11;
    }

    private android.view.ActionMode createFloatingActionMode(android.view.View, android.view.ActionMode$Callback2)
    {
        com.android.internal.policy.DecorView r0;
        android.view.View r1;
        android.view.ActionMode r2;
        com.android.internal.widget.FloatingToolbar $r3, $r6;
        com.android.internal.policy.PhoneWindow $r4;
        com.android.internal.view.FloatingActionMode $r5;
        android.content.Context $r7;
        com.android.internal.policy.DecorView$6 $r8;
        android.view.ActionMode$Callback2 r9;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.View;

        r9 := @parameter1: android.view.ActionMode$Callback2;

        r2 = r0.<com.android.internal.policy.DecorView: android.view.ActionMode mFloatingActionMode>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.view.ActionMode: void finish()>();

     label1:
        specialinvoke r0.<com.android.internal.policy.DecorView: void cleanupFloatingActionModeViews()>();

        $r3 = new com.android.internal.widget.FloatingToolbar;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        specialinvoke $r3.<com.android.internal.widget.FloatingToolbar: void <init>(android.view.Window)>($r4);

        r0.<com.android.internal.policy.DecorView: com.android.internal.widget.FloatingToolbar mFloatingToolbar> = $r3;

        $r5 = new com.android.internal.view.FloatingActionMode;

        $r7 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.FloatingToolbar mFloatingToolbar>;

        specialinvoke $r5.<com.android.internal.view.FloatingActionMode: void <init>(android.content.Context,android.view.ActionMode$Callback2,android.view.View,com.android.internal.widget.FloatingToolbar)>($r7, r9, r1, $r6);

        r0.<com.android.internal.policy.DecorView: android.view.View mFloatingActionModeOriginatingView> = r1;

        $r8 = new com.android.internal.policy.DecorView$6;

        specialinvoke $r8.<com.android.internal.policy.DecorView$6: void <init>(com.android.internal.policy.DecorView,com.android.internal.view.FloatingActionMode)>(r0, $r5);

        r0.<com.android.internal.policy.DecorView: android.view.ViewTreeObserver$OnPreDrawListener mFloatingToolbarPreDrawListener> = $r8;

        return $r5;
    }

    private android.view.ActionMode createStandaloneActionMode(android.view.ActionMode$Callback)
    {
        com.android.internal.policy.DecorView r0;
        android.view.ActionMode$Callback r1;
        int i0, $i1, $i2, $i3;
        com.android.internal.policy.PhoneWindow $r2;
        boolean $z0, $z3, z4;
        android.view.View $r3, $r7;
        com.android.internal.widget.ActionBarContextView $r4, $r8, $r11, $r13, $r19, r27, r34, r36;
        android.widget.PopupWindow $r5, $r12, $r14, $r15, $r20;
        com.android.internal.view.StandaloneActionMode $r6;
        android.util.TypedValue $r9;
        android.content.Context $r10, $r22, $r25, r31, r35;
        android.content.res.Resources$Theme $r16, $r26, r29, r30;
        android.content.res.Resources $r17, $r23;
        android.util.DisplayMetrics $r18;
        com.android.internal.policy.DecorView$4 $r21;
        android.view.ContextThemeWrapper $r24;
        android.view.ViewStub r33;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.ActionMode$Callback;

        specialinvoke r0.<com.android.internal.policy.DecorView: void endOnGoingFadeAnimation()>();

        specialinvoke r0.<com.android.internal.policy.DecorView: void cleanupPrimaryActionMode()>();

        r27 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        z4 = 0;

        if r27 == null goto label1;

        $z3 = virtualinvoke r27.<com.android.internal.widget.ActionBarContextView: boolean isAttachedToWindow()>();

        if $z3 != 0 goto label5;

     label1:
        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: boolean isFloating()>();

        if $z0 == 0 goto label4;

        $r9 = new android.util.TypedValue;

        specialinvoke $r9.<android.util.TypedValue: void <init>()>();

        $r10 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        r29 = virtualinvoke $r10.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke r29.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843825, $r9, 1);

        $i1 = $r9.<android.util.TypedValue: int resourceId>;

        if $i1 == 0 goto label2;

        $r22 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        $r23 = virtualinvoke $r22.<android.content.Context: android.content.res.Resources getResources()>();

        r30 = virtualinvoke $r23.<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>();

        virtualinvoke r30.<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>(r29);

        $i3 = $r9.<android.util.TypedValue: int resourceId>;

        virtualinvoke r30.<android.content.res.Resources$Theme: void applyStyle(int,boolean)>($i3, 1);

        $r24 = new android.view.ContextThemeWrapper;

        $r25 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        specialinvoke $r24.<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>($r25, 0);

        r31 = $r24;

        $r26 = virtualinvoke $r24.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r26.<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>(r30);

        goto label3;

     label2:
        r31 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

     label3:
        $r11 = new com.android.internal.widget.ActionBarContextView;

        specialinvoke $r11.<com.android.internal.widget.ActionBarContextView: void <init>(android.content.Context)>(r31);

        r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView> = $r11;

        $r12 = new android.widget.PopupWindow;

        specialinvoke $r12.<android.widget.PopupWindow: void <init>(android.content.Context,android.util.AttributeSet,int)>(r31, null, 17956872);

        r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup> = $r12;

        virtualinvoke $r12.<android.widget.PopupWindow: void setWindowLayoutType(int)>(2);

        $r14 = r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup>;

        $r13 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        virtualinvoke $r14.<android.widget.PopupWindow: void setContentView(android.view.View)>($r13);

        $r15 = r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup>;

        virtualinvoke $r15.<android.widget.PopupWindow: void setWidth(int)>(-1);

        $r16 = virtualinvoke r31.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r16.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843499, $r9, 1);

        $i2 = $r9.<android.util.TypedValue: int data>;

        $r17 = virtualinvoke r31.<android.content.Context: android.content.res.Resources getResources()>();

        $r18 = virtualinvoke $r17.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        i0 = staticinvoke <android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>($i2, $r18);

        $r19 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        virtualinvoke $r19.<com.android.internal.widget.ActionBarContextView: void setContentHeight(int)>(i0);

        $r20 = r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup>;

        virtualinvoke $r20.<android.widget.PopupWindow: void setHeight(int)>(-2);

        $r21 = new com.android.internal.policy.DecorView$4;

        specialinvoke $r21.<com.android.internal.policy.DecorView$4: void <init>(com.android.internal.policy.DecorView)>(r0);

        r0.<com.android.internal.policy.DecorView: java.lang.Runnable mShowPrimaryActionModePopup> = $r21;

        goto label5;

     label4:
        $r3 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.View findViewById(int)>(16908719);

        r33 = (android.view.ViewStub) $r3;

        if r33 == null goto label5;

        $r7 = virtualinvoke r33.<android.view.ViewStub: android.view.View inflate()>();

        $r8 = (com.android.internal.widget.ActionBarContextView) $r7;

        r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView> = $r8;

        r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup> = null;

     label5:
        r34 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        if r34 == null goto label7;

        virtualinvoke r34.<com.android.internal.widget.ActionBarContextView: void killMode()>();

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        r35 = virtualinvoke $r4.<com.android.internal.widget.ActionBarContextView: android.content.Context getContext()>();

        r36 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        $r5 = r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup>;

        if $r5 != null goto label6;

        z4 = 1;

     label6:
        $r6 = new com.android.internal.view.StandaloneActionMode;

        specialinvoke $r6.<com.android.internal.view.StandaloneActionMode: void <init>(android.content.Context,com.android.internal.widget.ActionBarContextView,android.view.ActionMode$Callback,boolean)>(r35, r36, r1, z4);

        return $r6;

     label7:
        return null;
    }

    private float dipToPx(float)
    {
        com.android.internal.policy.DecorView r0;
        float f0, $f1;
        android.content.res.Resources $r1;
        android.util.DisplayMetrics $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        f0 := @parameter0: float;

        $r1 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f1 = staticinvoke <android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>(1, f0, $r2);

        return $f1;
    }

    private void drawLegacyNavigationBarBackground(android.graphics.RecordingCanvas)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.RecordingCanvas r1;
        android.view.View r2;
        boolean $z0;
        com.android.internal.policy.DecorView$ColorViewState $r3;
        int $i0, $i1, $i2, $i3;
        float $f0, $f1, $f2, $f3;
        android.graphics.Paint $r4;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.RecordingCanvas;

        $z0 = r0.<com.android.internal.policy.DecorView: boolean mDrawLegacyNavigationBarBackground>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        r2 = $r3.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        if r2 != null goto label2;

        return;

     label2:
        $i0 = virtualinvoke r2.<android.view.View: int getLeft()>();

        $f0 = (float) $i0;

        $i1 = virtualinvoke r2.<android.view.View: int getTop()>();

        $f1 = (float) $i1;

        $i2 = virtualinvoke r2.<android.view.View: int getRight()>();

        $f2 = (float) $i2;

        $i3 = virtualinvoke r2.<android.view.View: int getBottom()>();

        $f3 = (float) $i3;

        $r4 = r0.<com.android.internal.policy.DecorView: android.graphics.Paint mLegacyNavigationBarBackgroundPaint>;

        virtualinvoke r1.<android.graphics.RecordingCanvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r4);

        return;
    }

    private void drawResizingShadowIfNeeded(android.graphics.RecordingCanvas)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.RecordingCanvas r1;
        int $i0, $i2, $i3, $i4, $i5, $i6, $i8, $i9, $i10, $i11, $i12;
        com.android.internal.policy.PhoneWindow $r2, $r3, $r4;
        boolean $z0, $z1, $z2;
        android.graphics.Rect $r5, $r7;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.graphics.Paint $r6, $r8;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.RecordingCanvas;

        $i0 = r0.<com.android.internal.policy.DecorView: int mResizeMode>;

        if $i0 != 1 goto label2;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = $r2.<com.android.internal.policy.PhoneWindow: boolean mIsFloating>;

        if $z0 != 0 goto label2;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z1 = virtualinvoke $r3.<com.android.internal.policy.PhoneWindow: boolean isTranslucent()>();

        if $z1 != 0 goto label2;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z2 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: boolean isShowingWallpaper()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        virtualinvoke r1.<android.graphics.RecordingCanvas: int save()>();

        $i2 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getHeight()>();

        $r5 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFrameOffsets>;

        $i3 = $r5.<android.graphics.Rect: int bottom>;

        $i4 = $i2 - $i3;

        $f0 = (float) $i4;

        virtualinvoke r1.<android.graphics.RecordingCanvas: void translate(float,float)>(0.0F, $f0);

        $i5 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getWidth()>();

        $f2 = (float) $i5;

        $i6 = r0.<com.android.internal.policy.DecorView: int mResizeShadowSize>;

        $f1 = (float) $i6;

        $r6 = r0.<com.android.internal.policy.DecorView: android.graphics.Paint mHorizontalResizeShadowPaint>;

        virtualinvoke r1.<android.graphics.RecordingCanvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, 0.0F, $f2, $f1, $r6);

        virtualinvoke r1.<android.graphics.RecordingCanvas: void restore()>();

        virtualinvoke r1.<android.graphics.RecordingCanvas: int save()>();

        $i8 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getWidth()>();

        $r7 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFrameOffsets>;

        $i9 = $r7.<android.graphics.Rect: int right>;

        $i10 = $i8 - $i9;

        $f3 = (float) $i10;

        virtualinvoke r1.<android.graphics.RecordingCanvas: void translate(float,float)>($f3, 0.0F);

        $i11 = r0.<com.android.internal.policy.DecorView: int mResizeShadowSize>;

        $f4 = (float) $i11;

        $i12 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getHeight()>();

        $f5 = (float) $i12;

        $r8 = r0.<com.android.internal.policy.DecorView: android.graphics.Paint mVerticalResizeShadowPaint>;

        virtualinvoke r1.<android.graphics.RecordingCanvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, 0.0F, $f4, $f5, $r8);

        virtualinvoke r1.<android.graphics.RecordingCanvas: void restore()>();

        return;

     label2:
        return;
    }

    private void drawableChanged()
    {
        com.android.internal.policy.DecorView r0;
        boolean z0, $z1, $z2;
        android.graphics.drawable.Drawable r1, r11;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18;
        android.graphics.Rect $r2, $r3, r8, r9;
        android.content.res.Resources $r4;
        android.content.res.Configuration $r5;
        com.android.internal.policy.PhoneWindow $r6, $r7;
        android.app.WindowConfiguration r10;

        r0 := @this: com.android.internal.policy.DecorView;

        $z1 = r0.<com.android.internal.policy.DecorView: boolean mChanging>;

        if $z1 == 0 goto label01;

        return;

     label01:
        r8 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFramePadding>;

        if r8 == null goto label02;

        goto label03;

     label02:
        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        r8 = $r2;

     label03:
        r9 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mBackgroundPadding>;

        if r9 == null goto label04;

        goto label05;

     label04:
        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r9 = $r3;

     label05:
        $i2 = r8.<android.graphics.Rect: int left>;

        $i1 = r9.<android.graphics.Rect: int left>;

        $i12 = $i2 + $i1;

        $i4 = r8.<android.graphics.Rect: int top>;

        $i3 = r9.<android.graphics.Rect: int top>;

        $i11 = $i4 + $i3;

        $i6 = r8.<android.graphics.Rect: int right>;

        $i5 = r9.<android.graphics.Rect: int right>;

        $i10 = $i6 + $i5;

        $i8 = r8.<android.graphics.Rect: int bottom>;

        $i7 = r9.<android.graphics.Rect: int bottom>;

        $i9 = $i8 + $i7;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void setPadding(int,int,int,int)>($i12, $i11, $i10, $i9);

        virtualinvoke r0.<com.android.internal.policy.DecorView: void requestLayout()>();

        virtualinvoke r0.<com.android.internal.policy.DecorView: void invalidate()>();

        i17 = -1;

        $r4 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        r10 = $r5.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        z0 = $r6.<com.android.internal.policy.PhoneWindow: boolean mRenderShadowsInCompositor>;

        $z2 = virtualinvoke r10.<android.app.WindowConfiguration: boolean hasWindowShadow()>();

        if $z2 == 0 goto label06;

        if z0 != 0 goto label06;

        i17 = -3;

        goto label14;

     label06:
        r11 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable getBackground()>();

        r1 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable getForeground()>();

        if r11 == null goto label14;

        if r1 != null goto label07;

        i17 = virtualinvoke r11.<android.graphics.drawable.Drawable: int getOpacity()>();

        goto label14;

     label07:
        $i13 = r8.<android.graphics.Rect: int left>;

        if $i13 > 0 goto label13;

        $i14 = r8.<android.graphics.Rect: int top>;

        if $i14 > 0 goto label13;

        $i15 = r8.<android.graphics.Rect: int right>;

        if $i15 > 0 goto label13;

        $i16 = r8.<android.graphics.Rect: int bottom>;

        if $i16 > 0 goto label13;

        i17 = virtualinvoke r1.<android.graphics.drawable.Drawable: int getOpacity()>();

        i0 = virtualinvoke r11.<android.graphics.drawable.Drawable: int getOpacity()>();

        if i17 == -1 goto label11;

        if i0 != -1 goto label08;

        goto label11;

     label08:
        if i17 != 0 goto label09;

        i17 = i0;

        goto label12;

     label09:
        if i0 != 0 goto label10;

        goto label12;

     label10:
        i17 = staticinvoke <android.graphics.drawable.Drawable: int resolveOpacity(int,int)>(i17, i0);

        goto label12;

     label11:
        i17 = -1;

     label12:
        goto label14;

     label13:
        i17 = -3;

     label14:
        r0.<com.android.internal.policy.DecorView: int mDefaultOpacity> = i17;

        $i18 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i18 >= 0 goto label15;

        $r7 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r7.<com.android.internal.policy.PhoneWindow: void setDefaultWindowFormat(int)>(i17);

     label15:
        return;
    }

    private void endOnGoingFadeAnimation()
    {
        com.android.internal.policy.DecorView r0;
        android.animation.ObjectAnimator r1;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 = r0.<com.android.internal.policy.DecorView: android.animation.ObjectAnimator mFadeAnim>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.animation.ObjectAnimator: void end()>();

     label1:
        return;
    }

    private static android.graphics.drawable.Drawable enforceNonTranslucentBackground(android.graphics.drawable.Drawable, boolean)
    {
        boolean z0, $z1;
        android.graphics.drawable.ColorDrawable r0, r5;
        int i0, $i1, $i2, $i3, $i4, $i5;
        android.graphics.drawable.Drawable$ConstantState $r1;
        android.graphics.drawable.Drawable $r2, $r3, r4;

        r4 := @parameter0: android.graphics.drawable.Drawable;

        z0 := @parameter1: boolean;

        if z0 != 0 goto label1;

        $z1 = r4 instanceof android.graphics.drawable.ColorDrawable;

        if $z1 == 0 goto label1;

        r0 = (android.graphics.drawable.ColorDrawable) r4;

        i0 = virtualinvoke r0.<android.graphics.drawable.ColorDrawable: int getColor()>();

        $i1 = staticinvoke <android.graphics.Color: int alpha(int)>(i0);

        if $i1 == 255 goto label1;

        $r1 = virtualinvoke r0.<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>();

        $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable()>();

        $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>();

        r5 = (android.graphics.drawable.ColorDrawable) $r3;

        $i2 = staticinvoke <android.graphics.Color: int red(int)>(i0);

        $i3 = staticinvoke <android.graphics.Color: int green(int)>(i0);

        $i4 = staticinvoke <android.graphics.Color: int blue(int)>(i0);

        $i5 = staticinvoke <android.graphics.Color: int argb(int,int,int,int)>(255, $i2, $i3, $i4);

        virtualinvoke r5.<android.graphics.drawable.ColorDrawable: void setColor(int)>($i5);

        return r5;

     label1:
        return r4;
    }

    private int getCurrentColor(com.android.internal.policy.DecorView$ColorViewState)
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.DecorView$ColorViewState r1;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: com.android.internal.policy.DecorView$ColorViewState;

        $z0 = r1.<com.android.internal.policy.DecorView$ColorViewState: boolean visible>;

        if $z0 == 0 goto label1;

        $i0 = r1.<com.android.internal.policy.DecorView$ColorViewState: int color>;

        return $i0;

     label1:
        return 0;
    }

    public static int getNavBarSize(int, int, int)
    {
        int i0, i1, i2;
        boolean $z0, $z1;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = staticinvoke <com.android.internal.policy.DecorView: boolean isNavBarToRightEdge(int,int)>(i2, i0);

        if $z0 == 0 goto label1;

        i2 = i0;

        goto label2;

     label1:
        $z1 = staticinvoke <com.android.internal.policy.DecorView: boolean isNavBarToLeftEdge(int,int)>(i2, i1);

        if $z1 == 0 goto label2;

        i2 = i1;

        goto label2;

     label2:
        return i2;
    }

    public static void getNavigationBarRect(int, int, android.graphics.Rect, android.graphics.Rect, float)
    {
        int i0, i1, i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10;
        android.graphics.Rect r0, r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6;
        boolean $z0, $z1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: android.graphics.Rect;

        r1 := @parameter3: android.graphics.Rect;

        f0 := @parameter4: float;

        $i6 = r0.<android.graphics.Rect: int bottom>;

        $f1 = (float) $i6;

        $f2 = $f1 * f0;

        i2 = (int) $f2;

        $i7 = r0.<android.graphics.Rect: int left>;

        $f3 = (float) $i7;

        $f4 = $f3 * f0;

        i3 = (int) $f4;

        $i8 = r0.<android.graphics.Rect: int right>;

        $f5 = (float) $i8;

        $f6 = $f5 * f0;

        i4 = (int) $f6;

        i5 = staticinvoke <com.android.internal.policy.DecorView: int getNavBarSize(int,int,int)>(i2, i4, i3);

        $z0 = staticinvoke <com.android.internal.policy.DecorView: boolean isNavBarToRightEdge(int,int)>(i2, i4);

        if $z0 == 0 goto label1;

        $i10 = i0 - i5;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>($i10, 0, i0, i1);

        goto label3;

     label1:
        $z1 = staticinvoke <com.android.internal.policy.DecorView: boolean isNavBarToLeftEdge(int,int)>(i2, i3);

        if $z1 == 0 goto label2;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, i5, i1);

        goto label3;

     label2:
        $i9 = i1 - i5;

        virtualinvoke r1.<android.graphics.Rect: void set(int,int,int,int)>(0, $i9, i0, i1);

     label3:
        return;
    }

    public static android.graphics.drawable.Drawable getResizingBackgroundDrawable(android.graphics.drawable.Drawable, android.graphics.drawable.Drawable, boolean)
    {
        android.graphics.drawable.Drawable r0, r1, $r3, $r4;
        boolean z0;
        android.graphics.drawable.ColorDrawable $r2;

        r0 := @parameter0: android.graphics.drawable.Drawable;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        z0 := @parameter2: boolean;

        if r0 == null goto label1;

        $r4 = staticinvoke <com.android.internal.policy.DecorView: android.graphics.drawable.Drawable enforceNonTranslucentBackground(android.graphics.drawable.Drawable,boolean)>(r0, z0);

        return $r4;

     label1:
        if r1 == null goto label2;

        $r3 = staticinvoke <com.android.internal.policy.DecorView: android.graphics.drawable.Drawable enforceNonTranslucentBackground(android.graphics.drawable.Drawable,boolean)>(r1, z0);

        return $r3;

     label2:
        $r2 = new android.graphics.drawable.ColorDrawable;

        specialinvoke $r2.<android.graphics.drawable.ColorDrawable: void <init>(int)>(-16777216);

        return $r2;
    }

    private static java.lang.String getTitleSuffix(android.view.WindowManager$LayoutParams)
    {
        java.lang.CharSequence $r0;
        java.lang.String $r1, $r2;
        int $i0, $i1, $i2;
        android.view.WindowManager$LayoutParams r3;
        java.lang.String[] r4;

        r3 := @parameter0: android.view.WindowManager$LayoutParams;

        if r3 != null goto label1;

        return "";

     label1:
        $r0 = virtualinvoke r3.<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>();

        $r1 = interfaceinvoke $r0.<java.lang.CharSequence: java.lang.String toString()>();

        r4 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.");

        $i0 = lengthof r4;

        if $i0 <= 0 goto label2;

        $i1 = lengthof r4;

        $i2 = $i1 - 1;

        $r2 = r4[$i2];

        return $r2;

     label2:
        return "";
    }

    private com.android.internal.widget.DecorCaptionView inflateDecorCaptionView(android.view.LayoutInflater)
    {
        com.android.internal.policy.DecorView r0;
        android.content.Context $r1;
        android.view.LayoutInflater $r2, r4;
        android.view.View $r3;
        com.android.internal.widget.DecorCaptionView r5;

        r0 := @this: com.android.internal.policy.DecorView;

        r4 := @parameter0: android.view.LayoutInflater;

        $r1 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.Context getContext()>();

        $r2 = staticinvoke <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>($r1);

        $r3 = virtualinvoke $r2.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(17367146, null);

        r5 = (com.android.internal.widget.DecorCaptionView) $r3;

        specialinvoke r0.<com.android.internal.policy.DecorView: void setDecorCaptionShade(com.android.internal.widget.DecorCaptionView)>(r5);

        return r5;
    }

    private void initResizingPaints()
    {
        com.android.internal.policy.DecorView r0;
        int i0, i1, i2, $i3, $i4, $i5;
        android.content.Context $r1, $r3;
        android.content.res.Resources $r2, $r4;
        android.graphics.LinearGradient $r5, $r9;
        int[] $r6, $r10;
        float[] $r7, $r11;
        android.graphics.Paint r13, r15;
        float f0, f1;
        android.graphics.Shader$TileMode r14, r16;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke $r2.<android.content.res.Resources: int getColor(int,android.content.res.Resources$Theme)>(17170948, null);

        $r3 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        i1 = virtualinvoke $r4.<android.content.res.Resources: int getColor(int,android.content.res.Resources$Theme)>(17170947, null);

        $i3 = i0 + i1;

        i2 = $i3 / 2;

        r13 = r0.<com.android.internal.policy.DecorView: android.graphics.Paint mHorizontalResizeShadowPaint>;

        $i4 = r0.<com.android.internal.policy.DecorView: int mResizeShadowSize>;

        f0 = (float) $i4;

        r14 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        $r5 = new android.graphics.LinearGradient;

        $r6 = newarray (int)[3];

        $r6[0] = i0;

        $r6[1] = i2;

        $r6[2] = i1;

        $r7 = newarray (float)[3];

        $r7[0] = 0.0F;

        $r7[1] = 0.3F;

        $r7[2] = 1.0F;

        specialinvoke $r5.<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)>(0.0F, 0.0F, 0.0F, f0, $r6, $r7, r14);

        virtualinvoke r13.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r5);

        r15 = r0.<com.android.internal.policy.DecorView: android.graphics.Paint mVerticalResizeShadowPaint>;

        $i5 = r0.<com.android.internal.policy.DecorView: int mResizeShadowSize>;

        f1 = (float) $i5;

        r16 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode CLAMP>;

        $r9 = new android.graphics.LinearGradient;

        $r10 = newarray (int)[3];

        $r10[0] = i0;

        $r10[1] = i2;

        $r10[2] = i1;

        $r11 = newarray (float)[3];

        $r11[0] = 0.0F;

        $r11[1] = 0.3F;

        $r11[2] = 1.0F;

        specialinvoke $r9.<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)>(0.0F, 0.0F, f1, 0.0F, $r10, $r11, r16);

        virtualinvoke r15.<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>($r9);

        return;
    }

    private void initializeElevation()
    {
        com.android.internal.policy.DecorView r0;

        r0 := @this: com.android.internal.policy.DecorView;

        r0.<com.android.internal.policy.DecorView: boolean mAllowUpdateElevation> = 0;

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateElevation()>();

        return;
    }

    private boolean isFillingScreen(android.content.res.Configuration)
    {
        com.android.internal.policy.DecorView r0;
        android.content.res.Configuration r1;
        android.app.WindowConfiguration $r2;
        int $i0, $i1, $i2, $i3, i4;
        boolean z1, z2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.content.res.Configuration;

        $r2 = r1.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i4 = virtualinvoke $r2.<android.app.WindowConfiguration: int getWindowingMode()>();

        if i4 != 1 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        z2 = 0;

        if z1 == 0 goto label3;

        z2 = 0;

        $i0 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getWindowSystemUiVisibility()>();

        $i1 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getSystemUiVisibility()>();

        $i2 = $i0 | $i1;

        $i3 = $i2 & 4;

        if $i3 == 0 goto label3;

        z2 = 1;

     label3:
        return z2;
    }

    public static boolean isNavBarToLeftEdge(int, int)
    {
        int i0, i1;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label1;

        if i1 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isNavBarToRightEdge(int, int)
    {
        int i0, i1;
        boolean z0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label1;

        if i1 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isOutOfBounds(int, int)
    {
        com.android.internal.policy.DecorView r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        boolean z0;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < -5 goto label2;

        if i1 < -5 goto label2;

        $i2 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getWidth()>();

        $i3 = $i2 + 5;

        if i0 > $i3 goto label2;

        $i4 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getHeight()>();

        $i5 = $i4 + 5;

        if i1 <= $i5 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isOutOfInnerBounds(int, int)
    {
        com.android.internal.policy.DecorView r0;
        int i0, i1, $i2, $i3;
        boolean z0;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 < 0 goto label2;

        if i1 < 0 goto label2;

        $i2 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getWidth()>();

        if i0 > $i2 goto label2;

        $i3 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getHeight()>();

        if i1 <= $i3 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isResizing()
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.BackdropFrameRenderer $r1;
        boolean z0;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void loadBackgroundDrawablesIfNeeded()
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.drawable.Drawable $r1, $r3, $r5, r15, r16, r17, $r20, r21;
        android.graphics.drawable.Drawable$Callback $r2;
        android.content.Context $r4;
        com.android.internal.policy.PhoneWindow $r6, $r7, $r8, $r11, $r14;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r9;
        java.lang.String $r13, r18;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mResizingBackgroundDrawable>;

        if $r1 != null goto label4;

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r15 = $r6.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        $r7 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r16 = $r7.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundFallbackDrawable>;

        $r8 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = virtualinvoke $r8.<com.android.internal.policy.PhoneWindow: boolean isTranslucent()>();

        if $z0 != 0 goto label2;

        $r14 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z1 = virtualinvoke $r14.<com.android.internal.policy.PhoneWindow: boolean isShowingWallpaper()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        r17 = staticinvoke <com.android.internal.policy.DecorView: android.graphics.drawable.Drawable getResizingBackgroundDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,boolean)>(r15, r16, z2);

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mResizingBackgroundDrawable> = r17;

        if r17 != null goto label4;

        r18 = r0.<com.android.internal.policy.DecorView: java.lang.String mLogTag>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to find background drawable for PhoneWindow=");

        $r11 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r18, $r13);

     label4:
        $r20 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mCaptionBackgroundDrawable>;

        if $r20 != null goto label5;

        $r4 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(17302147);

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mCaptionBackgroundDrawable> = $r5;

     label5:
        r21 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mResizingBackgroundDrawable>;

        if r21 == null goto label6;

        $r2 = virtualinvoke r21.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>();

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable$Callback mLastBackgroundDrawableCb> = $r2;

        $r3 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mResizingBackgroundDrawable>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null);

     label6:
        return;
    }

    private void releaseThreadedRenderer()
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.drawable.Drawable$Callback r1;
        android.graphics.drawable.Drawable r2;
        com.android.internal.policy.BackdropFrameRenderer r3;

        r0 := @this: com.android.internal.policy.DecorView;

        r2 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mResizingBackgroundDrawable>;

        if r2 == null goto label1;

        r1 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable$Callback mLastBackgroundDrawableCb>;

        if r1 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r1);

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable$Callback mLastBackgroundDrawableCb> = null;

     label1:
        r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer>;

        if r3 == null goto label2;

        virtualinvoke r3.<com.android.internal.policy.BackdropFrameRenderer: void releaseRenderer()>();

        r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer> = null;

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateElevation()>();

     label2:
        return;
    }

    private static void setColor(android.view.View, int, int, boolean, boolean)
    {
        int i0, i1, i2, i3, i4;
        boolean z0, z1, $z2, $z3;
        java.lang.Object $r0, $r1, $r3;
        java.lang.Boolean $r2, $r4, $r26, $r27;
        android.graphics.drawable.Drawable $r5, $r6, $r8, $r10;
        android.graphics.drawable.InsetDrawable $r7, $r20;
        android.graphics.drawable.ColorDrawable $r9, $r11, $r18, $r24;
        android.view.View r12;
        android.util.Pair r13, $r25;
        android.graphics.drawable.LayerDrawable r14, $r22;
        android.content.Context $r15;
        android.content.res.Resources $r16;
        android.util.DisplayMetrics $r17;
        float $f0;
        android.graphics.drawable.Drawable[] $r23;

        r12 := @parameter0: android.view.View;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        z1 := @parameter4: boolean;

        if i0 == 0 goto label10;

        $r0 = virtualinvoke r12.<android.view.View: java.lang.Object getTag()>();

        r13 = (android.util.Pair) $r0;

        if r13 == null goto label02;

        $r1 = r13.<android.util.Pair: java.lang.Object first>;

        $r2 = (java.lang.Boolean) $r1;

        $z2 = virtualinvoke $r2.<java.lang.Boolean: boolean booleanValue()>();

        if $z2 != z0 goto label02;

        $r3 = r13.<android.util.Pair: java.lang.Object second>;

        $r4 = (java.lang.Boolean) $r3;

        $z3 = virtualinvoke $r4.<java.lang.Boolean: boolean booleanValue()>();

        if $z3 == z1 goto label01;

        goto label02;

     label01:
        $r5 = virtualinvoke r12.<android.view.View: android.graphics.drawable.Drawable getBackground()>();

        r14 = (android.graphics.drawable.LayerDrawable) $r5;

        $r6 = virtualinvoke r14.<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>(1);

        $r7 = (android.graphics.drawable.InsetDrawable) $r6;

        $r8 = virtualinvoke $r7.<android.graphics.drawable.InsetDrawable: android.graphics.drawable.Drawable getDrawable()>();

        $r9 = (android.graphics.drawable.ColorDrawable) $r8;

        virtualinvoke $r9.<android.graphics.drawable.ColorDrawable: void setColor(int)>(i1);

        $r10 = virtualinvoke r14.<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>(0);

        $r11 = (android.graphics.drawable.ColorDrawable) $r10;

        virtualinvoke $r11.<android.graphics.drawable.ColorDrawable: void setColor(int)>(i0);

        goto label09;

     label02:
        $r15 = virtualinvoke r12.<android.view.View: android.content.Context getContext()>();

        $r16 = virtualinvoke $r15.<android.content.Context: android.content.res.Resources getResources()>();

        $r17 = virtualinvoke $r16.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f0 = staticinvoke <android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>(1, 1.0F, $r17);

        i2 = staticinvoke <java.lang.Math: int round(float)>($f0);

        $r18 = new android.graphics.drawable.ColorDrawable;

        specialinvoke $r18.<android.graphics.drawable.ColorDrawable: void <init>(int)>(i1);

        if z0 == 0 goto label03;

        if z1 != 0 goto label03;

        i3 = i2;

        goto label04;

     label03:
        i3 = 0;

     label04:
        if z0 != 0 goto label05;

        i4 = i2;

        goto label06;

     label05:
        i4 = 0;

     label06:
        if z0 == 0 goto label07;

        if z1 == 0 goto label07;

        goto label08;

     label07:
        i2 = 0;

     label08:
        $r20 = new android.graphics.drawable.InsetDrawable;

        specialinvoke $r20.<android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int,int,int,int)>($r18, i3, i4, i2, 0);

        $r22 = new android.graphics.drawable.LayerDrawable;

        $r23 = newarray (android.graphics.drawable.Drawable)[2];

        $r24 = new android.graphics.drawable.ColorDrawable;

        specialinvoke $r24.<android.graphics.drawable.ColorDrawable: void <init>(int)>(i0);

        $r23[0] = $r24;

        $r23[1] = $r20;

        specialinvoke $r22.<android.graphics.drawable.LayerDrawable: void <init>(android.graphics.drawable.Drawable[])>($r23);

        virtualinvoke r12.<android.view.View: void setBackground(android.graphics.drawable.Drawable)>($r22);

        $r25 = new android.util.Pair;

        $r26 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        $r27 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z1);

        specialinvoke $r25.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r26, $r27);

        virtualinvoke r12.<android.view.View: void setTag(java.lang.Object)>($r25);

     label09:
        goto label11;

     label10:
        virtualinvoke r12.<android.view.View: void setTag(java.lang.Object)>(null);

        virtualinvoke r12.<android.view.View: void setBackgroundColor(int)>(i1);

     label11:
        return;
    }

    private void setDarkDecorCaptionShade(com.android.internal.widget.DecorCaptionView)
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.widget.DecorCaptionView r1;
        android.view.View $r2, $r3;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: com.android.internal.widget.DecorCaptionView;

        $r2 = virtualinvoke r1.<com.android.internal.widget.DecorCaptionView: android.view.View findViewById(int)>(16909147);

        virtualinvoke $r2.<android.view.View: void setBackgroundResource(int)>(17302151);

        $r3 = virtualinvoke r1.<com.android.internal.widget.DecorCaptionView: android.view.View findViewById(int)>(16908852);

        virtualinvoke $r3.<android.view.View: void setBackgroundResource(int)>(17302149);

        return;
    }

    private void setDecorCaptionShade(com.android.internal.widget.DecorCaptionView)
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.widget.DecorCaptionView r1;
        int i0, $i1, $i2;
        com.android.internal.policy.PhoneWindow $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: com.android.internal.widget.DecorCaptionView;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        i0 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: int getDecorCaptionShade()>();

        if i0 == 1 goto label3;

        if i0 == 2 goto label2;

        $i1 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getWindowSystemUiVisibility()>();

        $i2 = $i1 & 8192;

        if $i2 == 0 goto label1;

        specialinvoke r0.<com.android.internal.policy.DecorView: void setDarkDecorCaptionShade(com.android.internal.widget.DecorCaptionView)>(r1);

        goto label4;

     label1:
        specialinvoke r0.<com.android.internal.policy.DecorView: void setLightDecorCaptionShade(com.android.internal.widget.DecorCaptionView)>(r1);

        goto label4;

     label2:
        specialinvoke r0.<com.android.internal.policy.DecorView: void setDarkDecorCaptionShade(com.android.internal.widget.DecorCaptionView)>(r1);

        goto label4;

     label3:
        specialinvoke r0.<com.android.internal.policy.DecorView: void setLightDecorCaptionShade(com.android.internal.widget.DecorCaptionView)>(r1);

     label4:
        return;
    }

    private void setHandledActionMode(android.view.ActionMode)
    {
        com.android.internal.policy.DecorView r0;
        android.view.ActionMode r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.ActionMode;

        $i0 = virtualinvoke r1.<android.view.ActionMode: int getType()>();

        if $i0 != 0 goto label1;

        specialinvoke r0.<com.android.internal.policy.DecorView: void setHandledPrimaryActionMode(android.view.ActionMode)>(r1);

        goto label2;

     label1:
        $i1 = virtualinvoke r1.<android.view.ActionMode: int getType()>();

        if $i1 != 1 goto label2;

        specialinvoke r0.<com.android.internal.policy.DecorView: void setHandledFloatingActionMode(android.view.ActionMode)>(r1);

     label2:
        return;
    }

    private void setHandledFloatingActionMode(android.view.ActionMode)
    {
        com.android.internal.policy.DecorView r0;
        android.view.ActionMode r1;
        android.view.View $r2;
        android.view.ViewTreeObserver $r3;
        android.view.ViewTreeObserver$OnPreDrawListener $r4;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.ActionMode;

        r0.<com.android.internal.policy.DecorView: android.view.ActionMode mFloatingActionMode> = r1;

        virtualinvoke r1.<android.view.ActionMode: void invalidate()>();

        $r2 = r0.<com.android.internal.policy.DecorView: android.view.View mFloatingActionModeOriginatingView>;

        $r3 = virtualinvoke $r2.<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r4 = r0.<com.android.internal.policy.DecorView: android.view.ViewTreeObserver$OnPreDrawListener mFloatingToolbarPreDrawListener>;

        virtualinvoke $r3.<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>($r4);

        return;
    }

    private void setHandledPrimaryActionMode(android.view.ActionMode)
    {
        com.android.internal.policy.DecorView r0;
        android.view.ActionMode $r1, r12;
        com.android.internal.widget.ActionBarContextView $r2, $r4, $r5, $r8, $r14;
        android.widget.PopupWindow $r3;
        boolean $z0;
        float[] $r6;
        android.util.Property $r7;
        com.android.internal.policy.DecorView$5 $r9;
        android.animation.ObjectAnimator $r10, r13;
        java.lang.Runnable $r11;

        r0 := @this: com.android.internal.policy.DecorView;

        r12 := @parameter0: android.view.ActionMode;

        specialinvoke r0.<com.android.internal.policy.DecorView: void endOnGoingFadeAnimation()>();

        r0.<com.android.internal.policy.DecorView: android.view.ActionMode mPrimaryActionMode> = r12;

        virtualinvoke r12.<android.view.ActionMode: void invalidate()>();

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        $r1 = r0.<com.android.internal.policy.DecorView: android.view.ActionMode mPrimaryActionMode>;

        virtualinvoke $r2.<com.android.internal.widget.ActionBarContextView: void initForMode(android.view.ActionMode)>($r1);

        $r3 = r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup>;

        if $r3 == null goto label1;

        $r11 = r0.<com.android.internal.policy.DecorView: java.lang.Runnable mShowPrimaryActionModePopup>;

        virtualinvoke r0.<com.android.internal.policy.DecorView: boolean post(java.lang.Runnable)>($r11);

        goto label3;

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean shouldAnimatePrimaryActionModeView()>();

        if $z0 == 0 goto label2;

        $r8 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        $r7 = <android.view.View: android.util.Property ALPHA>;

        $r6 = newarray (float)[2];

        $r6[0] = 0.0F;

        $r6[1] = 1.0F;

        r13 = staticinvoke <android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>($r8, $r7, $r6);

        r0.<com.android.internal.policy.DecorView: android.animation.ObjectAnimator mFadeAnim> = r13;

        $r9 = new com.android.internal.policy.DecorView$5;

        specialinvoke $r9.<com.android.internal.policy.DecorView$5: void <init>(com.android.internal.policy.DecorView)>(r0);

        virtualinvoke r13.<android.animation.ObjectAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r9);

        $r10 = r0.<com.android.internal.policy.DecorView: android.animation.ObjectAnimator mFadeAnim>;

        virtualinvoke $r10.<android.animation.ObjectAnimator: void start()>();

        goto label3;

     label2:
        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        virtualinvoke $r4.<com.android.internal.widget.ActionBarContextView: void setAlpha(float)>(1.0F);

        $r5 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        virtualinvoke $r5.<com.android.internal.widget.ActionBarContextView: void setVisibility(int)>(0);

     label3:
        $r14 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        virtualinvoke $r14.<com.android.internal.widget.ActionBarContextView: void sendAccessibilityEvent(int)>(32);

        return;
    }

    private void setLightDecorCaptionShade(com.android.internal.widget.DecorCaptionView)
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.widget.DecorCaptionView r1;
        android.view.View $r2, $r3;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: com.android.internal.widget.DecorCaptionView;

        $r2 = virtualinvoke r1.<com.android.internal.widget.DecorCaptionView: android.view.View findViewById(int)>(16909147);

        virtualinvoke $r2.<android.view.View: void setBackgroundResource(int)>(17302152);

        $r3 = virtualinvoke r1.<com.android.internal.widget.DecorCaptionView: android.view.View findViewById(int)>(16908852);

        virtualinvoke $r3.<android.view.View: void setBackgroundResource(int)>(17302150);

        return;
    }

    private boolean showContextMenuForChildInternal(android.view.View, float, float)
    {
        com.android.internal.policy.DecorView r0;
        float f0, f1;
        com.android.internal.policy.PhoneWindow$PhoneWindowMenuCallback r1;
        com.android.internal.policy.PhoneWindow $r2, $r4, $r5, $r7, $r9, $r12, $r16, $r18, $r20, $r22, $r25;
        com.android.internal.view.menu.MenuHelper $r3, $r21, r24;
        com.android.internal.view.menu.ContextMenuBuilder $r6, $r8, $r10, $r13, $r15, $r19;
        android.os.IBinder $r11;
        android.content.Context $r14, $r17;
        boolean $z1, z2, z3, z4, z5;
        android.view.View r23;

        r0 := @this: com.android.internal.policy.DecorView;

        r23 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r3 = $r2.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.MenuHelper mContextMenuHelper>;

        if $r3 == null goto label01;

        $r20 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r21 = $r20.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.MenuHelper mContextMenuHelper>;

        interfaceinvoke $r21.<com.android.internal.view.menu.MenuHelper: void dismiss()>();

        $r22 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r22.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.MenuHelper mContextMenuHelper> = null;

     label01:
        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r1 = $r4.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PhoneWindowMenuCallback mContextMenuCallback>;

        $r5 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r6 = $r5.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        if $r6 != null goto label02;

        $r16 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r15 = new com.android.internal.view.menu.ContextMenuBuilder;

        $r17 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.Context getContext()>();

        specialinvoke $r15.<com.android.internal.view.menu.ContextMenuBuilder: void <init>(android.content.Context)>($r17);

        $r16.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu> = $r15;

        $r18 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r19 = $r18.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        virtualinvoke $r19.<com.android.internal.view.menu.ContextMenuBuilder: void setCallback(com.android.internal.view.menu.MenuBuilder$Callback)>(r1);

        goto label03;

     label02:
        $r7 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r8 = $r7.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        virtualinvoke $r8.<com.android.internal.view.menu.ContextMenuBuilder: void clearAll()>();

     label03:
        z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if z2 != 0 goto label04;

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1);

        if $z1 != 0 goto label04;

        z3 = 1;

        goto label05;

     label04:
        z3 = 0;

     label05:
        if z3 == 0 goto label06;

        $r12 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r13 = $r12.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        $r14 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.Context getContext()>();

        r24 = virtualinvoke $r13.<com.android.internal.view.menu.ContextMenuBuilder: com.android.internal.view.menu.MenuPopupHelper showPopup(android.content.Context,android.view.View,float,float)>($r14, r23, f0, f1);

        goto label07;

     label06:
        $r9 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r10 = $r9.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        $r11 = virtualinvoke r23.<android.view.View: android.os.IBinder getWindowToken()>();

        r24 = virtualinvoke $r10.<com.android.internal.view.menu.ContextMenuBuilder: com.android.internal.view.menu.MenuDialogHelper showDialog(android.view.View,android.os.IBinder)>(r23, $r11);

     label07:
        if r24 == null goto label10;

        if z3 != 0 goto label08;

        z4 = 1;

        goto label09;

     label08:
        z4 = 0;

     label09:
        virtualinvoke r1.<com.android.internal.policy.PhoneWindow$PhoneWindowMenuCallback: void setShowDialogForSubmenu(boolean)>(z4);

        interfaceinvoke r24.<com.android.internal.view.menu.MenuHelper: void setPresenterCallback(com.android.internal.view.menu.MenuPresenter$Callback)>(r1);

     label10:
        $r25 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r25.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.MenuHelper mContextMenuHelper> = r24;

        if r24 == null goto label11;

        z5 = 1;

        goto label12;

     label11:
        z5 = 0;

     label12:
        return z5;
    }

    private android.view.ActionMode startActionMode(android.view.View, android.view.ActionMode$Callback, int)
    {
        com.android.internal.policy.DecorView r0;
        int i0, $i1, $i2;
        com.android.internal.policy.DecorView$ActionModeCallback2Wrapper $r2;
        com.android.internal.policy.PhoneWindow $r3, $r5, $r7, $r8, $r11, $r12, $r16;
        android.view.Window$Callback $r4, $r6, $r9, $r13, $r17;
        boolean $z0, $z1, $z2;
        android.view.Menu $r10;
        java.lang.AbstractMethodError $r14, $r15, $r18;
        android.view.View r19;
        android.view.ActionMode$Callback r20;
        android.view.ActionMode r21, r22, r23;

        r0 := @this: com.android.internal.policy.DecorView;

        r19 := @parameter0: android.view.View;

        r20 := @parameter1: android.view.ActionMode$Callback;

        i0 := @parameter2: int;

        $r2 = new com.android.internal.policy.DecorView$ActionModeCallback2Wrapper;

        specialinvoke $r2.<com.android.internal.policy.DecorView$ActionModeCallback2Wrapper: void <init>(com.android.internal.policy.DecorView,android.view.ActionMode$Callback)>(r0, r20);

        r21 = null;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r4 = virtualinvoke $r3.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if $r4 == null goto label07;

        r21 = null;

        $r11 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z2 = virtualinvoke $r11.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z2 != 0 goto label07;

     label01:
        $r12 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r13 = virtualinvoke $r12.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        r21 = interfaceinvoke $r13.<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback,int)>($r2, i0);

     label02:
        goto label07;

     label03:
        $r15 := @caughtexception;

        r21 = null;

        if i0 != 0 goto label07;

     label04:
        $r16 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r17 = virtualinvoke $r16.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        r21 = interfaceinvoke $r17.<android.view.Window$Callback: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)>($r2);

     label05:
        goto label07;

     label06:
        $r14 := @caughtexception;

        r21 = null;

     label07:
        if r21 == null goto label10;

        $i1 = virtualinvoke r21.<android.view.ActionMode: int getType()>();

        if $i1 != 0 goto label08;

        specialinvoke r0.<com.android.internal.policy.DecorView: void cleanupPrimaryActionMode()>();

        r0.<com.android.internal.policy.DecorView: android.view.ActionMode mPrimaryActionMode> = r21;

        r22 = r21;

        goto label12;

     label08:
        r22 = r21;

        $i2 = virtualinvoke r21.<android.view.ActionMode: int getType()>();

        if $i2 != 1 goto label12;

        r23 = r0.<com.android.internal.policy.DecorView: android.view.ActionMode mFloatingActionMode>;

        if r23 == null goto label09;

        virtualinvoke r23.<android.view.ActionMode: void finish()>();

     label09:
        r0.<com.android.internal.policy.DecorView: android.view.ActionMode mFloatingActionMode> = r21;

        r22 = r21;

        goto label12;

     label10:
        r22 = specialinvoke r0.<com.android.internal.policy.DecorView: android.view.ActionMode createActionMode(int,android.view.ActionMode$Callback2,android.view.View)>(i0, $r2, r19);

        if r22 == null goto label11;

        $r10 = virtualinvoke r22.<android.view.ActionMode: android.view.Menu getMenu()>();

        $z1 = virtualinvoke $r2.<android.view.ActionMode$Callback2: boolean onCreateActionMode(android.view.ActionMode,android.view.Menu)>(r22, $r10);

        if $z1 == 0 goto label11;

        specialinvoke r0.<com.android.internal.policy.DecorView: void setHandledActionMode(android.view.ActionMode)>(r22);

        goto label12;

     label11:
        r22 = null;

     label12:
        if r22 == null goto label16;

        $r5 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r6 = virtualinvoke $r5.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if $r6 == null goto label16;

        $r7 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = virtualinvoke $r7.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label16;

     label13:
        $r8 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r9 = virtualinvoke $r8.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        interfaceinvoke $r9.<android.view.Window$Callback: void onActionModeStarted(android.view.ActionMode)>(r22);

     label14:
        goto label16;

     label15:
        $r18 := @caughtexception;

     label16:
        return r22;

        catch java.lang.AbstractMethodError from label01 to label02 with label03;
        catch java.lang.AbstractMethodError from label04 to label05 with label06;
        catch java.lang.AbstractMethodError from label13 to label14 with label15;
    }

    private void updateAvailableWidth()
    {
        com.android.internal.policy.DecorView r0;
        android.content.res.Resources r1;
        android.content.res.Configuration $r2;
        int $i0;
        float $f0, $f1;
        android.util.DisplayMetrics $r3;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i0 = $r2.<android.content.res.Configuration: int screenWidthDp>;

        $f0 = (float) $i0;

        $r3 = virtualinvoke r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $f1 = staticinvoke <android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>(1, $f0, $r3);

        r0.<com.android.internal.policy.DecorView: float mAvailableWidth> = $f1;

        return;
    }

    private void updateBackgroundDrawable()
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.Insets $r1, $r2, $r3, $r6, $r7, $r9, $r10, $r11, $r12, $r16, $r17;
        boolean $z0, $z1;
        android.graphics.drawable.Drawable $r4, $r5, $r13, $r14, $r15, $r18;
        com.android.internal.policy.DecorView$2 $r8;
        int $i0, $i1, $i2, $i3;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets>;

        if $r1 != null goto label1;

        $r16 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets> = $r16;

     label1:
        $r3 = r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets>;

        $r2 = r0.<com.android.internal.policy.DecorView: android.graphics.Insets mLastBackgroundInsets>;

        $z0 = virtualinvoke $r3.<android.graphics.Insets: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        $r15 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mLastOriginalBackgroundDrawable>;

        $r14 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mOriginalBackgroundDrawable>;

        if $r15 != $r14 goto label2;

        return;

     label2:
        $r4 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mOriginalBackgroundDrawable>;

        if $r4 == null goto label4;

        $r7 = r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets>;

        $r6 = <android.graphics.Insets: android.graphics.Insets NONE>;

        $z1 = virtualinvoke $r7.<android.graphics.Insets: boolean equals(java.lang.Object)>($r6);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r8 = new com.android.internal.policy.DecorView$2;

        $r13 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mOriginalBackgroundDrawable>;

        $r9 = r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets>;

        $i3 = $r9.<android.graphics.Insets: int left>;

        $r10 = r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets>;

        $i2 = $r10.<android.graphics.Insets: int top>;

        $r11 = r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets>;

        $i1 = $r11.<android.graphics.Insets: int right>;

        $r12 = r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets>;

        $i0 = $r12.<android.graphics.Insets: int bottom>;

        specialinvoke $r8.<com.android.internal.policy.DecorView$2: void <init>(com.android.internal.policy.DecorView,android.graphics.drawable.Drawable,int,int,int,int)>(r0, $r13, $i3, $i2, $i1, $i0);

        specialinvoke r0.<android.widget.FrameLayout: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r8);

        goto label5;

     label4:
        $r5 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mOriginalBackgroundDrawable>;

        specialinvoke r0.<android.widget.FrameLayout: void setBackgroundDrawable(android.graphics.drawable.Drawable)>($r5);

     label5:
        $r17 = r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets>;

        r0.<com.android.internal.policy.DecorView: android.graphics.Insets mLastBackgroundInsets> = $r17;

        $r18 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mOriginalBackgroundDrawable>;

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mLastOriginalBackgroundDrawable> = $r18;

        return;
    }

    private void updateColorViewInt(com.android.internal.policy.DecorView$ColorViewState, int, int, int, int, boolean, boolean, int, boolean, boolean, android.view.WindowInsetsController)
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.DecorView$ColorViewState r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i10, $i12, $i13, $i14, $i15, $i16, $i17, i18, i19, i20, i21, i22, i23, i24, i26;
        boolean z0, z1, z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10, z11, z14, z15;
        com.android.internal.policy.DecorView$ColorViewAttributes $r2, $r3, $r7, $r9, $r26, $r28, $r31, r35;
        com.android.internal.policy.PhoneWindow $r4, $r6, $r30;
        android.view.WindowManager$LayoutParams $r5, $r8, $r32;
        android.view.ViewGroup$LayoutParams $r10;
        android.view.ViewPropertyAnimator $r11, $r12, $r13, $r15, $r16, $r19, $r20, $r22;
        android.view.animation.Interpolator $r14, $r21;
        long $l8, $l11;
        com.android.internal.policy.DecorView$3 $r17;
        android.view.View $r24, r34;
        android.content.Context $r25;
        java.lang.String $r27;
        android.widget.FrameLayout$LayoutParams $r29, r38;
        android.view.WindowInsetsController r33;
        byte b25, b27;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: com.android.internal.policy.DecorView$ColorViewState;

        i18 := @parameter1: int;

        i0 := @parameter2: int;

        i19 := @parameter3: int;

        i20 := @parameter4: int;

        z0 := @parameter5: boolean;

        z1 := @parameter6: boolean;

        i21 := @parameter7: int;

        z2 := @parameter8: boolean;

        z8 := @parameter9: boolean;

        r33 := @parameter10: android.view.WindowInsetsController;

        $i1 = <android.view.ViewRootImpl: int sNewInsetsMode>;

        if $i1 == 2 goto label01;

        $r31 = r1.<com.android.internal.policy.DecorView$ColorViewState: com.android.internal.policy.DecorView$ColorViewAttributes attributes>;

        $r30 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r32 = virtualinvoke $r30.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i17 = $r32.<android.view.WindowManager$LayoutParams: int flags>;

        z9 = virtualinvoke $r31.<com.android.internal.policy.DecorView$ColorViewAttributes: boolean isPresent(int,int,boolean)>(i18, $i17, z8);

        goto label02;

     label01:
        $r3 = r1.<com.android.internal.policy.DecorView$ColorViewState: com.android.internal.policy.DecorView$ColorViewAttributes attributes>;

        $r2 = r1.<com.android.internal.policy.DecorView$ColorViewState: com.android.internal.policy.DecorView$ColorViewAttributes attributes>;

        $i2 = $r2.<com.android.internal.policy.DecorView$ColorViewAttributes: int insetsType>;

        $z3 = interfaceinvoke r33.<android.view.WindowInsetsController: boolean isRequestedVisible(int)>($i2);

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r5 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i3 = $r5.<android.view.WindowManager$LayoutParams: int flags>;

        z9 = virtualinvoke $r3.<com.android.internal.policy.DecorView$ColorViewAttributes: boolean isPresent(boolean,int,boolean)>($z3, $i3, z8);

     label02:
        r1.<com.android.internal.policy.DecorView$ColorViewState: boolean present> = z9;

        $r7 = r1.<com.android.internal.policy.DecorView$ColorViewState: com.android.internal.policy.DecorView$ColorViewAttributes attributes>;

        $z4 = r1.<com.android.internal.policy.DecorView$ColorViewState: boolean present>;

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r8 = virtualinvoke $r6.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i4 = $r8.<android.view.WindowManager$LayoutParams: int flags>;

        z10 = virtualinvoke $r7.<com.android.internal.policy.DecorView$ColorViewAttributes: boolean isVisible(boolean,int,int,boolean)>($z4, i0, $i4, z8);

        if z10 == 0 goto label03;

        $z6 = specialinvoke r0.<com.android.internal.policy.DecorView: boolean isResizing()>();

        if $z6 != 0 goto label03;

        $z7 = r0.<com.android.internal.policy.DecorView: boolean mHasCaption>;

        if $z7 != 0 goto label03;

        if i20 <= 0 goto label03;

        z11 = 1;

        goto label04;

     label03:
        z11 = 0;

     label04:
        r34 = r1.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        i22 = -1;

        if z0 == 0 goto label05;

        i23 = -1;

        goto label06;

     label05:
        i23 = i20;

     label06:
        if z0 == 0 goto label07;

        i22 = i20;

     label07:
        if z0 == 0 goto label09;

        r35 = r1.<com.android.internal.policy.DecorView$ColorViewState: com.android.internal.policy.DecorView$ColorViewAttributes attributes>;

        if z1 == 0 goto label08;

        i24 = r35.<com.android.internal.policy.DecorView$ColorViewAttributes: int seascapeGravity>;

        goto label10;

     label08:
        i24 = r35.<com.android.internal.policy.DecorView$ColorViewAttributes: int horizontalGravity>;

        goto label10;

     label09:
        $r9 = r1.<com.android.internal.policy.DecorView$ColorViewState: com.android.internal.policy.DecorView$ColorViewAttributes attributes>;

        i24 = $r9.<com.android.internal.policy.DecorView$ColorViewAttributes: int verticalGravity>;

     label10:
        if r34 != null goto label14;

        if z11 == 0 goto label13;

        $r24 = new android.view.View;

        $r25 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        specialinvoke $r24.<android.view.View: void <init>(android.content.Context)>($r25);

        r34 = $r24;

        r1.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view> = $r24;

        staticinvoke <com.android.internal.policy.DecorView: void setColor(android.view.View,int,int,boolean,boolean)>($r24, i0, i19, z0, z1);

        $r26 = r1.<com.android.internal.policy.DecorView$ColorViewState: com.android.internal.policy.DecorView$ColorViewAttributes attributes>;

        $r27 = $r26.<com.android.internal.policy.DecorView$ColorViewAttributes: java.lang.String transitionName>;

        virtualinvoke $r24.<android.view.View: void setTransitionName(java.lang.String)>($r27);

        $r28 = r1.<com.android.internal.policy.DecorView$ColorViewState: com.android.internal.policy.DecorView$ColorViewAttributes attributes>;

        $i16 = $r28.<com.android.internal.policy.DecorView$ColorViewAttributes: int id>;

        virtualinvoke $r24.<android.view.View: void setId(int)>($i16);

        virtualinvoke $r24.<android.view.View: void setVisibility(int)>(4);

        r1.<com.android.internal.policy.DecorView$ColorViewState: int targetVisibility> = 0;

        $r29 = new android.widget.FrameLayout$LayoutParams;

        specialinvoke $r29.<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>(i22, i23, i24);

        if z1 == 0 goto label11;

        $r29.<android.widget.FrameLayout$LayoutParams: int leftMargin> = i21;

        goto label12;

     label11:
        $r29.<android.widget.FrameLayout$LayoutParams: int rightMargin> = i21;

     label12:
        virtualinvoke r0.<com.android.internal.policy.DecorView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r24, $r29);

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateColorViewTranslations()>();

        z14 = 1;

        goto label27;

     label13:
        z14 = 0;

        goto label27;

     label14:
        if z11 == 0 goto label15;

        b25 = 0;

        goto label16;

     label15:
        b25 = 4;

     label16:
        $i5 = r1.<com.android.internal.policy.DecorView$ColorViewState: int targetVisibility>;

        if $i5 == b25 goto label17;

        z15 = 1;

        goto label18;

     label17:
        z15 = 0;

     label18:
        r1.<com.android.internal.policy.DecorView$ColorViewState: int targetVisibility> = b25;

        $r10 = virtualinvoke r34.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r38 = (android.widget.FrameLayout$LayoutParams) $r10;

        if z1 == 0 goto label19;

        i26 = 0;

        goto label20;

     label19:
        i26 = i21;

     label20:
        if z1 == 0 goto label21;

        goto label22;

     label21:
        i21 = 0;

     label22:
        $i6 = r38.<android.widget.FrameLayout$LayoutParams: int height>;

        if $i6 != i23 goto label24;

        $i12 = r38.<android.widget.FrameLayout$LayoutParams: int width>;

        if $i12 != i22 goto label24;

        $i13 = r38.<android.widget.FrameLayout$LayoutParams: int gravity>;

        if $i13 != i24 goto label24;

        $i14 = r38.<android.widget.FrameLayout$LayoutParams: int rightMargin>;

        if $i14 != i26 goto label23;

        $i15 = r38.<android.widget.FrameLayout$LayoutParams: int leftMargin>;

        if $i15 == i21 goto label25;

        goto label24;

     label23:
        goto label24;

     label24:
        r38.<android.widget.FrameLayout$LayoutParams: int height> = i23;

        r38.<android.widget.FrameLayout$LayoutParams: int width> = i22;

        r38.<android.widget.FrameLayout$LayoutParams: int gravity> = i24;

        r38.<android.widget.FrameLayout$LayoutParams: int rightMargin> = i26;

        r38.<android.widget.FrameLayout$LayoutParams: int leftMargin> = i21;

        virtualinvoke r34.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r38);

     label25:
        if z11 == 0 goto label26;

        staticinvoke <com.android.internal.policy.DecorView: void setColor(android.view.View,int,int,boolean,boolean)>(r34, i0, i19, z0, z1);

     label26:
        z14 = z15;

     label27:
        if z14 == 0 goto label33;

        $r11 = virtualinvoke r34.<android.view.View: android.view.ViewPropertyAnimator animate()>();

        virtualinvoke $r11.<android.view.ViewPropertyAnimator: void cancel()>();

        if z2 == 0 goto label30;

        $z5 = specialinvoke r0.<com.android.internal.policy.DecorView: boolean isResizing()>();

        if $z5 != 0 goto label30;

        if z11 == 0 goto label29;

        $i9 = virtualinvoke r34.<android.view.View: int getVisibility()>();

        if $i9 == 0 goto label28;

        virtualinvoke r34.<android.view.View: void setVisibility(int)>(0);

        virtualinvoke r34.<android.view.View: void setAlpha(float)>(0.0F);

     label28:
        $r19 = virtualinvoke r34.<android.view.View: android.view.ViewPropertyAnimator animate()>();

        $r20 = virtualinvoke $r19.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>(1.0F);

        $r21 = r0.<com.android.internal.policy.DecorView: android.view.animation.Interpolator mShowInterpolator>;

        $r22 = virtualinvoke $r20.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>($r21);

        $i10 = r0.<com.android.internal.policy.DecorView: int mBarEnterExitDuration>;

        $l11 = (long) $i10;

        virtualinvoke $r22.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>($l11);

        goto label33;

     label29:
        $r12 = virtualinvoke r34.<android.view.View: android.view.ViewPropertyAnimator animate()>();

        $r13 = virtualinvoke $r12.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)>(0.0F);

        $r14 = r0.<com.android.internal.policy.DecorView: android.view.animation.Interpolator mHideInterpolator>;

        $r15 = virtualinvoke $r13.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>($r14);

        $i7 = r0.<com.android.internal.policy.DecorView: int mBarEnterExitDuration>;

        $l8 = (long) $i7;

        $r16 = virtualinvoke $r15.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>($l8);

        $r17 = new com.android.internal.policy.DecorView$3;

        specialinvoke $r17.<com.android.internal.policy.DecorView$3: void <init>(com.android.internal.policy.DecorView,com.android.internal.policy.DecorView$ColorViewState)>(r0, r1);

        virtualinvoke $r16.<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable)>($r17);

        goto label33;

     label30:
        b27 = 0;

        virtualinvoke r34.<android.view.View: void setAlpha(float)>(1.0F);

        if z11 == 0 goto label31;

        goto label32;

     label31:
        b27 = 4;

     label32:
        virtualinvoke r34.<android.view.View: void setVisibility(int)>(b27);

     label33:
        r1.<com.android.internal.policy.DecorView$ColorViewState: boolean visible> = z10;

        r1.<com.android.internal.policy.DecorView$ColorViewState: int color> = i0;

        return;
    }

    private void updateColorViewTranslations()
    {
        com.android.internal.policy.DecorView r0;
        int i0;
        com.android.internal.policy.DecorView$ColorViewState $r1, $r2, $r3, $r6;
        android.view.View r4, r5, $r7, r8;
        float f1, f2;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 = r0.<com.android.internal.policy.DecorView: int mRootScrollY>;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState>;

        r4 = $r1.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        if r4 == null goto label3;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState>;

        r5 = $r3.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        if i0 <= 0 goto label1;

        f1 = (float) i0;

        goto label2;

     label1:
        f1 = 0.0F;

     label2:
        virtualinvoke r5.<android.view.View: void setTranslationY(float)>(f1);

     label3:
        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        $r7 = $r6.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        if $r7 == null goto label5;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        r8 = $r2.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        f2 = 0.0F;

        if i0 >= 0 goto label4;

        f2 = (float) i0;

     label4:
        virtualinvoke r8.<android.view.View: void setTranslationY(float)>(f2);

     label5:
        return;
    }

    private void updateDecorCaptionStatus(android.content.res.Configuration)
    {
        com.android.internal.policy.DecorView r0;
        android.app.WindowConfiguration $r1;
        boolean $z0, $z1, z2;
        com.android.internal.policy.PhoneWindow $r2;
        android.view.LayoutInflater $r3;
        android.view.ViewParent $r4;
        android.view.ViewGroup $r5, $r8;
        android.view.ViewGroup$MarginLayoutParams $r6;
        com.android.internal.widget.DecorCaptionView $r7, $r10, $r12, r13, r14;
        android.view.ViewGroup$LayoutParams $r9;
        android.content.res.Configuration r11;

        r0 := @this: com.android.internal.policy.DecorView;

        r11 := @parameter0: android.content.res.Configuration;

        $r1 = r11.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        $z0 = virtualinvoke $r1.<android.app.WindowConfiguration: boolean hasWindowDecorCaption()>();

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.internal.policy.DecorView: boolean isFillingScreen(android.content.res.Configuration)>(r11);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r12 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        if $r12 != null goto label4;

        if z2 == 0 goto label4;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r3 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: android.view.LayoutInflater getLayoutInflater()>();

        r13 = specialinvoke r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView createDecorCaptionView(android.view.LayoutInflater)>($r3);

        r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView> = r13;

        if r13 == null goto label5;

        $r4 = virtualinvoke r13.<com.android.internal.widget.DecorCaptionView: android.view.ViewParent getParent()>();

        if $r4 != null goto label3;

        $r10 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        $r9 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r9.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke r0.<com.android.internal.policy.DecorView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>($r10, 0, $r9);

     label3:
        $r5 = r0.<com.android.internal.policy.DecorView: android.view.ViewGroup mContentRoot>;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void removeView(android.view.View)>($r5);

        $r7 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        $r8 = r0.<com.android.internal.policy.DecorView: android.view.ViewGroup mContentRoot>;

        $r6 = new android.view.ViewGroup$MarginLayoutParams;

        specialinvoke $r6.<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke $r7.<com.android.internal.widget.DecorCaptionView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r8, $r6);

        goto label5;

     label4:
        r14 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        if r14 == null goto label5;

        virtualinvoke r14.<com.android.internal.widget.DecorCaptionView: void onConfigurationChanged(boolean)>(z2);

        virtualinvoke r0.<com.android.internal.policy.DecorView: void enableCaption(boolean)>(z2);

        goto label5;

     label5:
        return;
    }

    private void updateElevation()
    {
        com.android.internal.policy.DecorView r0;
        int i0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.content.res.Resources $r1;
        android.content.res.Configuration $r2;
        android.app.WindowConfiguration $r3;
        com.android.internal.policy.PhoneWindow $r4, $r5;
        float $f1, f2, f3;
        byte $b1;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.res.Resources getResources()>();

        $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $r3 = $r2.<android.content.res.Configuration: android.app.WindowConfiguration windowConfiguration>;

        i0 = virtualinvoke $r3.<android.app.WindowConfiguration: int getWindowingMode()>();

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z1 = $r4.<com.android.internal.policy.PhoneWindow: boolean mRenderShadowsInCompositor>;

        if $z1 == 0 goto label01;

        return;

     label01:
        f2 = 0.0F;

        z0 = r0.<com.android.internal.policy.DecorView: boolean mElevationAdjustedForStack>;

        if i0 != 5 goto label05;

        $z4 = specialinvoke r0.<com.android.internal.policy.DecorView: boolean isResizing()>();

        if $z4 != 0 goto label05;

        $z5 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean hasWindowFocus()>();

        if $z5 == 0 goto label02;

        f3 = 20.0F;

        goto label03;

     label02:
        f3 = 5.0F;

     label03:
        $z6 = r0.<com.android.internal.policy.DecorView: boolean mAllowUpdateElevation>;

        if $z6 != 0 goto label04;

        f3 = 20.0F;

     label04:
        f2 = specialinvoke r0.<com.android.internal.policy.DecorView: float dipToPx(float)>(f3);

        r0.<com.android.internal.policy.DecorView: boolean mElevationAdjustedForStack> = 1;

        goto label07;

     label05:
        if i0 != 2 goto label06;

        f2 = specialinvoke r0.<com.android.internal.policy.DecorView: float dipToPx(float)>(5.0F);

        r0.<com.android.internal.policy.DecorView: boolean mElevationAdjustedForStack> = 1;

        goto label07;

     label06:
        r0.<com.android.internal.policy.DecorView: boolean mElevationAdjustedForStack> = 0;

     label07:
        if z0 != 0 goto label08;

        $z3 = r0.<com.android.internal.policy.DecorView: boolean mElevationAdjustedForStack>;

        if $z3 == 0 goto label10;

     label08:
        $f1 = virtualinvoke r0.<com.android.internal.policy.DecorView: float getElevation()>();

        $b1 = $f1 cmpl f2;

        if $b1 == 0 goto label10;

        $z2 = specialinvoke r0.<com.android.internal.policy.DecorView: boolean isResizing()>();

        if $z2 != 0 goto label09;

        $r5 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r5.<com.android.internal.policy.PhoneWindow: void setElevation(float)>(f2);

        goto label10;

     label09:
        virtualinvoke r0.<com.android.internal.policy.DecorView: void setElevation(float)>(f2);

     label10:
        return;
    }

    private android.view.WindowInsets updateStatusGuard(android.view.WindowInsets)
    {
        com.android.internal.policy.DecorView r0;
        android.view.ViewGroup$MarginLayoutParams r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, i18, $i19, $i20, $i21;
        android.view.ViewGroup$LayoutParams $r2, $r4, $r11;
        boolean $z0, $z1, z3, z4, z5, z6;
        com.android.internal.widget.ActionBarContextView $r3, $r5, $r6, r22;
        android.graphics.Rect $r7, $r19, r23;
        com.android.internal.policy.PhoneWindow $r8, $r32;
        android.view.ViewGroup $r9;
        android.view.View $r10, $r12, $r13, $r17, $r18, r28, $r30, r31, r35;
        android.content.Context $r14;
        android.widget.FrameLayout$LayoutParams $r15, r29;
        com.android.internal.policy.DecorView$ColorViewState $r16;
        android.view.WindowInsets r20, r21, r24, r25, r33, r34;
        byte b22;

        r0 := @this: com.android.internal.policy.DecorView;

        r20 := @parameter0: android.view.WindowInsets;

        r21 = r20;

        r22 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        if r22 == null goto label18;

        $r2 = virtualinvoke r22.<com.android.internal.widget.ActionBarContextView: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $z0 = $r2 instanceof android.view.ViewGroup$MarginLayoutParams;

        if $z0 == 0 goto label17;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        $r4 = virtualinvoke $r3.<com.android.internal.widget.ActionBarContextView: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r1 = (android.view.ViewGroup$MarginLayoutParams) $r4;

        z3 = 0;

        $r5 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        $z1 = virtualinvoke $r5.<com.android.internal.widget.ActionBarContextView: boolean isShown()>();

        if $z1 == 0 goto label13;

        $r7 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mTempRect>;

        if $r7 != null goto label01;

        $r19 = new android.graphics.Rect;

        specialinvoke $r19.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.policy.DecorView: android.graphics.Rect mTempRect> = $r19;

     label01:
        r23 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mTempRect>;

        $r8 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r9 = $r8.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        r24 = virtualinvoke $r9.<android.view.ViewGroup: android.view.WindowInsets computeSystemWindowInsets(android.view.WindowInsets,android.graphics.Rect)>(r20, r23);

        i0 = virtualinvoke r24.<android.view.WindowInsets: int getSystemWindowInsetTop()>();

        i17 = virtualinvoke r24.<android.view.WindowInsets: int getSystemWindowInsetLeft()>();

        i1 = virtualinvoke r24.<android.view.WindowInsets: int getSystemWindowInsetRight()>();

        r25 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.WindowInsets getRootWindowInsets()>();

        i18 = virtualinvoke r25.<android.view.WindowInsets: int getSystemWindowInsetLeft()>();

        i2 = virtualinvoke r25.<android.view.WindowInsets: int getSystemWindowInsetRight()>();

        $i6 = r1.<android.view.ViewGroup$MarginLayoutParams: int topMargin>;

        if $i6 != i0 goto label02;

        $i15 = r1.<android.view.ViewGroup$MarginLayoutParams: int leftMargin>;

        if $i15 != i17 goto label02;

        $i16 = r1.<android.view.ViewGroup$MarginLayoutParams: int rightMargin>;

        if $i16 == i1 goto label03;

     label02:
        z3 = 1;

        r1.<android.view.ViewGroup$MarginLayoutParams: int topMargin> = i0;

        r1.<android.view.ViewGroup$MarginLayoutParams: int leftMargin> = i17;

        r1.<android.view.ViewGroup$MarginLayoutParams: int rightMargin> = i1;

     label03:
        if i0 <= 0 goto label04;

        $r12 = r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard>;

        if $r12 != null goto label04;

        $r13 = new android.view.View;

        $r14 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        specialinvoke $r13.<android.view.View: void <init>(android.content.Context)>($r14);

        r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard> = $r13;

        virtualinvoke $r13.<android.view.View: void setVisibility(int)>(8);

        $r15 = new android.widget.FrameLayout$LayoutParams;

        $i13 = r1.<android.view.ViewGroup$MarginLayoutParams: int topMargin>;

        specialinvoke $r15.<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>(-1, $i13, 51);

        $r15.<android.widget.FrameLayout$LayoutParams: int leftMargin> = i18;

        $r15.<android.widget.FrameLayout$LayoutParams: int rightMargin> = i2;

        $r18 = r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard>;

        $r16 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState>;

        $r17 = $r16.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        $i14 = virtualinvoke r0.<com.android.internal.policy.DecorView: int indexOfChild(android.view.View)>($r17);

        virtualinvoke r0.<com.android.internal.policy.DecorView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>($r18, $i14, $r15);

        goto label06;

     label04:
        r28 = r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard>;

        if r28 == null goto label06;

        $r11 = virtualinvoke r28.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r29 = (android.widget.FrameLayout$LayoutParams) $r11;

        $i10 = r29.<android.widget.FrameLayout$LayoutParams: int height>;

        $i9 = r1.<android.view.ViewGroup$MarginLayoutParams: int topMargin>;

        if $i10 != $i9 goto label05;

        $i11 = r29.<android.widget.FrameLayout$LayoutParams: int leftMargin>;

        if $i11 != i18 goto label05;

        $i12 = r29.<android.widget.FrameLayout$LayoutParams: int rightMargin>;

        if $i12 == i2 goto label06;

     label05:
        $i19 = r1.<android.view.ViewGroup$MarginLayoutParams: int topMargin>;

        r29.<android.widget.FrameLayout$LayoutParams: int height> = $i19;

        r29.<android.widget.FrameLayout$LayoutParams: int leftMargin> = i18;

        r29.<android.widget.FrameLayout$LayoutParams: int rightMargin> = i2;

        $r30 = r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard>;

        virtualinvoke $r30.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r29);

        goto label06;

     label06:
        r31 = r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard>;

        z4 = 1;

        if r31 == null goto label07;

        z5 = 1;

        goto label08;

     label07:
        z5 = 0;

     label08:
        if z5 == 0 goto label09;

        $r10 = r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard>;

        $i8 = virtualinvoke $r10.<android.view.View: int getVisibility()>();

        if $i8 == 0 goto label09;

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateStatusGuardColor()>();

     label09:
        $r32 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $i20 = virtualinvoke $r32.<com.android.internal.policy.PhoneWindow: int getLocalFeaturesPrivate()>();

        $i21 = $i20 & 1024;

        if $i21 != 0 goto label10;

        goto label11;

     label10:
        z4 = 0;

     label11:
        r33 = r20;

        if z4 == 0 goto label12;

        r33 = r20;

        if z5 == 0 goto label12;

        $i7 = virtualinvoke r20.<android.view.WindowInsets: int getSystemWindowInsetTop()>();

        r33 = virtualinvoke r20.<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>(0, $i7, 0, 0);

     label12:
        r21 = r33;

        goto label16;

     label13:
        z5 = 0;

        $i3 = r1.<android.view.ViewGroup$MarginLayoutParams: int topMargin>;

        if $i3 != 0 goto label15;

        $i4 = r1.<android.view.ViewGroup$MarginLayoutParams: int leftMargin>;

        if $i4 != 0 goto label15;

        $i5 = r1.<android.view.ViewGroup$MarginLayoutParams: int rightMargin>;

        if $i5 == 0 goto label14;

        goto label15;

     label14:
        z3 = 0;

        goto label16;

     label15:
        z3 = 1;

        r1.<android.view.ViewGroup$MarginLayoutParams: int topMargin> = 0;

     label16:
        r34 = r21;

        z6 = z5;

        if z3 == 0 goto label19;

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.ActionBarContextView mPrimaryActionModeView>;

        virtualinvoke $r6.<com.android.internal.widget.ActionBarContextView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r1);

        r34 = r21;

        z6 = z5;

        goto label19;

     label17:
        z6 = 0;

        r34 = r20;

        goto label19;

     label18:
        z6 = 0;

        r34 = r20;

     label19:
        r35 = r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard>;

        if r35 == null goto label22;

        if z6 == 0 goto label20;

        b22 = 0;

        goto label21;

     label20:
        b22 = 8;

     label21:
        virtualinvoke r35.<android.view.View: void setVisibility(int)>(b22);

     label22:
        return r34;
    }

    private void updateStatusGuardColor()
    {
        com.android.internal.policy.DecorView r0;
        android.view.View r1;
        int $i0, $i1, i2;
        android.content.Context $r2, $r3;
        boolean z0;

        r0 := @this: com.android.internal.policy.DecorView;

        $i0 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getWindowSystemUiVisibility()>();

        $i1 = $i0 & 8192;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        r1 = r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard>;

        if z0 == 0 goto label3;

        $r3 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        i2 = virtualinvoke $r3.<android.content.Context: int getColor(int)>(17170751);

        goto label4;

     label3:
        $r2 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        i2 = virtualinvoke $r2.<android.content.Context: int getColor(int)>(17170750);

     label4:
        virtualinvoke r1.<android.view.View: void setBackgroundColor(int)>(i2);

        return;
    }

    void clearContentView()
    {
        com.android.internal.policy.DecorView r0;
        int $i0, i1;
        com.android.internal.policy.DecorView$ColorViewState $r1, $r3;
        android.view.View $r2, $r4, $r5, r7;
        com.android.internal.widget.DecorCaptionView r6;

        r0 := @this: com.android.internal.policy.DecorView;

        r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        if r6 == null goto label1;

        virtualinvoke r6.<com.android.internal.widget.DecorCaptionView: void removeContentView()>();

        goto label4;

     label1:
        $i0 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getChildCount()>();

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        r7 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.View getChildAt(int)>(i1);

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState>;

        $r2 = $r1.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        if r7 == $r2 goto label3;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        $r4 = $r3.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        if r7 == $r4 goto label3;

        $r5 = r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard>;

        if r7 == $r5 goto label3;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void removeViewAt(int)>(i1);

     label3:
        i1 = i1 + -1;

        goto label2;

     label4:
        return;
    }

    public boolean dispatchGenericMotionEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.MotionEvent r1;
        android.view.Window$Callback r2;
        com.android.internal.policy.PhoneWindow $r3, $r4;
        boolean $z0, z1;
        int $i0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.MotionEvent;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r2 = virtualinvoke $r3.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r2 == null goto label1;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label1;

        $i0 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i0 >= 0 goto label1;

        z1 = interfaceinvoke r2.<android.view.Window$Callback: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        goto label2;

     label1:
        z1 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

     label2:
        return z1;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.KeyEvent r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.internal.policy.PhoneWindow $r2, $r3, $r4, $r5, $r6, $r9, $r10, r12, $r13;
        com.android.internal.policy.PhoneWindow$PanelFeatureState $r7, $r8, $r11;
        boolean $z0, $z1, $z2, z3, $z4, z5, z6;
        android.view.Window$Callback r14;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $i1 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        if $i1 != 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        if z3 == 0 goto label4;

        $i7 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i7 != 0 goto label4;

        $r5 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $i8 = $r5.<com.android.internal.policy.PhoneWindow: int mPanelChordingKey>;

        if $i8 <= 0 goto label3;

        $r9 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $i9 = $r9.<com.android.internal.policy.PhoneWindow: int mPanelChordingKey>;

        if $i9 == i0 goto label3;

        $z2 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

        if $z2 == 0 goto label3;

        return 1;

     label3:
        $r10 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r11 = $r10.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r11 == null goto label4;

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r7 = $r6.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel>;

        $z0 = $r7.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label4;

        r12 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r8 = r12.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel>;

        $z1 = virtualinvoke r12.<com.android.internal.policy.PhoneWindow: boolean performPanelShortcut(com.android.internal.policy.PhoneWindow$PanelFeatureState,int,android.view.KeyEvent,int)>($r8, i0, r1, 0);

        if $z1 == 0 goto label4;

        return 1;

     label4:
        $r13 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z4 = virtualinvoke $r13.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z4 != 0 goto label7;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r14 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r14 == null goto label5;

        $i6 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i6 >= 0 goto label5;

        z5 = interfaceinvoke r14.<android.view.Window$Callback: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        goto label6;

     label5:
        z5 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

     label6:
        if z5 == 0 goto label7;

        return 1;

     label7:
        if z3 == 0 goto label8;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $i4 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        $i5 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        z6 = virtualinvoke $r3.<com.android.internal.policy.PhoneWindow: boolean onKeyDown(int,int,android.view.KeyEvent)>($i4, $i5, r1);

        goto label9;

     label8:
        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $i2 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        $i3 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        z6 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: boolean onKeyUp(int,int,android.view.KeyEvent)>($i2, $i3, r1);

     label9:
        return z6;
    }

    public boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.KeyEvent r1;
        com.android.internal.policy.PhoneWindow $r2, $r4, $r5, $r6, $r8, $r9, $r10, $r12, $r14, r16;
        com.android.internal.policy.PhoneWindow$PanelFeatureState $r3, $r7, $r11, $r13, $r15, r18;
        int $i0, $i1, $i2;
        boolean $z1, $z2, z3, z4;
        android.view.Window$Callback r17;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r3 = $r2.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r3 == null goto label2;

        r16 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r11 = r16.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel>;

        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $z2 = virtualinvoke r16.<com.android.internal.policy.PhoneWindow: boolean performPanelShortcut(com.android.internal.policy.PhoneWindow$PanelFeatureState,int,android.view.KeyEvent,int)>($r11, $i2, r1, 1);

        if $z2 == 0 goto label2;

        $r12 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r13 = $r12.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r13 == null goto label1;

        $r14 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r15 = $r14.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel>;

        $r15.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isHandled> = 1;

     label1:
        return 1;

     label2:
        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r17 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r17 == null goto label3;

        $r10 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z1 = virtualinvoke $r10.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z1 != 0 goto label3;

        $i1 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i1 >= 0 goto label3;

        z3 = interfaceinvoke r17.<android.view.Window$Callback: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

        goto label4;

     label3:
        z3 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

     label4:
        if z3 == 0 goto label5;

        return 1;

     label5:
        $r5 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r18 = virtualinvoke $r5.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r18 == null goto label6;

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r7 = $r6.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r7 != null goto label6;

        $r8 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r8.<com.android.internal.policy.PhoneWindow: boolean preparePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r18, r1);

        $r9 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        z4 = virtualinvoke $r9.<com.android.internal.policy.PhoneWindow: boolean performPanelShortcut(com.android.internal.policy.PhoneWindow$PanelFeatureState,int,android.view.KeyEvent,int)>(r18, $i0, r1, 1);

        r18.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        if z4 == 0 goto label6;

        return 1;

     label6:
        return 0;
    }

    public void dispatchPointerCaptureChanged(boolean)
    {
        com.android.internal.policy.DecorView r0;
        boolean z0, $z1;
        com.android.internal.policy.PhoneWindow $r1, $r2, $r4;
        android.view.Window$Callback $r3, $r5;

        r0 := @this: com.android.internal.policy.DecorView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.widget.FrameLayout: void dispatchPointerCaptureChanged(boolean)>(z0);

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z1 = virtualinvoke $r1.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z1 != 0 goto label1;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r3 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if $r3 == null goto label1;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r5 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        interfaceinvoke $r5.<android.view.Window$Callback: void onPointerCaptureChanged(boolean)>(z0);

     label1:
        return;
    }

    public boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.Window$Callback r2;
        com.android.internal.policy.PhoneWindow $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r2 = virtualinvoke $r3.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r2 == null goto label1;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label1;

        $z1 = interfaceinvoke r2.<android.view.Window$Callback: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        $z2 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>(r1);

        return $z2;
    }

    public boolean dispatchTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.MotionEvent r1;
        android.view.Window$Callback r2;
        com.android.internal.policy.PhoneWindow $r3, $r4;
        boolean $z0, z1;
        int $i0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.MotionEvent;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r2 = virtualinvoke $r3.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r2 == null goto label1;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label1;

        $i0 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i0 >= 0 goto label1;

        z1 = interfaceinvoke r2.<android.view.Window$Callback: boolean dispatchTouchEvent(android.view.MotionEvent)>(r1);

        goto label2;

     label1:
        z1 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchTouchEvent(android.view.MotionEvent)>(r1);

     label2:
        return z1;
    }

    public boolean dispatchTrackballEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.MotionEvent r1;
        android.view.Window$Callback r2;
        com.android.internal.policy.PhoneWindow $r3, $r4;
        boolean $z0, z1;
        int $i0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.MotionEvent;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r2 = virtualinvoke $r3.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r2 == null goto label1;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label1;

        $i0 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i0 >= 0 goto label1;

        z1 = interfaceinvoke r2.<android.view.Window$Callback: boolean dispatchTrackballEvent(android.view.MotionEvent)>(r1);

        goto label2;

     label1:
        z1 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchTrackballEvent(android.view.MotionEvent)>(r1);

     label2:
        return z1;
    }

    public void draw(android.graphics.Canvas)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.Canvas;

        specialinvoke r0.<android.widget.FrameLayout: void draw(android.graphics.Canvas)>(r1);

        r2 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mMenuBackground>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label1:
        return;
    }

    void enableCaption(boolean)
    {
        com.android.internal.policy.DecorView r0;
        boolean z0, $z1;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.android.internal.policy.DecorView;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.internal.policy.DecorView: boolean mHasCaption>;

        if $z1 == z0 goto label1;

        r0.<com.android.internal.policy.DecorView: boolean mHasCaption> = z0;

        $r1 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable getForeground()>();

        if $r1 == null goto label1;

        specialinvoke r0.<com.android.internal.policy.DecorView: void drawableChanged()>();

     label1:
        return;
    }

    void finishChanging()
    {
        com.android.internal.policy.DecorView r0;

        r0 := @this: com.android.internal.policy.DecorView;

        r0.<com.android.internal.policy.DecorView: boolean mChanging> = 0;

        specialinvoke r0.<com.android.internal.policy.DecorView: void drawableChanged()>();

        return;
    }

    public boolean gatherTransparentRegion(android.graphics.Region)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.Region r1;
        boolean z0, z1, z2, z3;
        com.android.internal.policy.DecorView$ColorViewState $r2, $r3;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.Region;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState>;

        z0 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean gatherTransparentRegion(com.android.internal.policy.DecorView$ColorViewState,android.graphics.Region)>($r2, r1);

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        z1 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean gatherTransparentRegion(com.android.internal.policy.DecorView$ColorViewState,android.graphics.Region)>($r3, r1);

        z2 = specialinvoke r0.<android.widget.FrameLayout: boolean gatherTransparentRegion(android.graphics.Region)>(r1);

        if z0 != 0 goto label2;

        if z1 != 0 goto label2;

        if z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    boolean gatherTransparentRegion(com.android.internal.policy.DecorView$ColorViewState, android.graphics.Region)
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.DecorView$ColorViewState r1;
        android.graphics.Region r2;
        android.view.View $r3, $r4;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: com.android.internal.policy.DecorView$ColorViewState;

        r2 := @parameter1: android.graphics.Region;

        $r3 = r1.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        if $r3 == null goto label1;

        $z0 = r1.<com.android.internal.policy.DecorView$ColorViewState: boolean visible>;

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.internal.policy.DecorView: boolean isResizing()>();

        if $z1 == 0 goto label1;

        $r4 = r1.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        $z2 = virtualinvoke $r4.<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>(r2);

        return $z2;

     label1:
        return 0;
    }

    public int getAccessibilityViewId()
    {
        com.android.internal.policy.DecorView r0;

        r0 := @this: com.android.internal.policy.DecorView;

        return 2147483646;
    }

    public android.graphics.drawable.Drawable getBackground()
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.drawable.Drawable $r1;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mOriginalBackgroundDrawable>;

        return $r1;
    }

    public android.graphics.drawable.Drawable getBackgroundFallback()
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.widget.BackgroundFallback $r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.BackgroundFallback mBackgroundFallback>;

        $r2 = virtualinvoke $r1.<com.android.internal.widget.BackgroundFallback: android.graphics.drawable.Drawable getDrawable()>();

        return $r2;
    }

    int getCaptionHeight()
    {
        com.android.internal.policy.DecorView r0;
        boolean $z0;
        com.android.internal.widget.DecorCaptionView $r1;
        int i0;

        r0 := @this: com.android.internal.policy.DecorView;

        $z0 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean isShowingCaption()>();

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        i0 = virtualinvoke $r1.<com.android.internal.widget.DecorCaptionView: int getCaptionHeight()>();

        goto label2;

     label1:
        i0 = 0;

     label2:
        return i0;
    }

    public int getCaptionInsetsHeight()
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.PhoneWindow $r1;
        boolean $z0;
        int $i0;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = virtualinvoke $r1.<com.android.internal.policy.PhoneWindow: boolean isOverlayWithDecorCaptionEnabled()>();

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $i0 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getCaptionHeight()>();

        return $i0;
    }

    android.view.View getNavigationBarBackgroundView()
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.DecorView$ColorViewState $r1;
        android.view.View $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        $r2 = $r1.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        return $r2;
    }

    public android.content.res.Resources getResources()
    {
        com.android.internal.policy.DecorView r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        return $r2;
    }

    android.view.View getStatusBarBackgroundView()
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.DecorView$ColorViewState $r1;
        android.view.View $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState>;

        $r2 = $r1.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        return $r2;
    }

    public android.view.WindowInsetsController getWindowInsetsController()
    {
        com.android.internal.policy.DecorView r0;
        boolean $z0;
        android.view.PendingInsetsController $r1;
        android.view.WindowInsetsController $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        $z0 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean isAttachedToWindow()>();

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<android.widget.FrameLayout: android.view.WindowInsetsController getWindowInsetsController()>();

        return $r2;

     label1:
        $r1 = r0.<com.android.internal.policy.DecorView: android.view.PendingInsetsController mPendingInsetsController>;

        return $r1;
    }

    boolean isShowingCaption()
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.widget.DecorCaptionView r1;
        boolean $z0, z1;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.internal.widget.DecorCaptionView: boolean isCaptionShowing()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public boolean isTransitionGroup()
    {
        com.android.internal.policy.DecorView r0;

        r0 := @this: com.android.internal.policy.DecorView;

        return 0;
    }

    public void notifyCaptionHeightChanged()
    {
        com.android.internal.policy.DecorView r0;
        android.view.WindowInsetsController $r1;
        int $i0;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.WindowInsetsController getWindowInsetsController()>();

        $i0 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getCaptionInsetsHeight()>();

        interfaceinvoke $r1.<android.view.WindowInsetsController: void setCaptionInsetsHeight(int)>($i0);

        return;
    }

    public android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)
    {
        com.android.internal.policy.DecorView r0;
        android.view.WindowManager$LayoutParams r1, $r5;
        com.android.internal.policy.PhoneWindow $r2, $r4;
        android.graphics.Rect $r3, $r6, $r7, $r8, $r9, $r13, $r14;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.view.WindowInsets r10, r11, r12, $r15, r16;
        android.graphics.drawable.Drawable $r17;

        r0 := @this: com.android.internal.policy.DecorView;

        r10 := @parameter0: android.view.WindowInsets;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r1 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $r3 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        virtualinvoke $r3.<android.graphics.Rect: void setEmpty()>();

        r11 = r10;

        $i0 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 256;

        if $i1 != 0 goto label2;

        r12 = r10;

        $i2 = r1.<android.view.WindowManager$LayoutParams: int height>;

        if $i2 != -2 goto label1;

        $r8 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        $i8 = virtualinvoke r10.<android.view.WindowInsets: int getSystemWindowInsetTop()>();

        $r8.<android.graphics.Rect: int top> = $i8;

        $r9 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        $i9 = virtualinvoke r10.<android.view.WindowInsets: int getSystemWindowInsetBottom()>();

        $r9.<android.graphics.Rect: int bottom> = $i9;

        $i10 = virtualinvoke r10.<android.view.WindowInsets: int getSystemWindowInsetTop()>();

        $i11 = virtualinvoke r10.<android.view.WindowInsets: int getSystemWindowInsetBottom()>();

        r12 = virtualinvoke r10.<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>(0, $i10, 0, $i11);

     label1:
        r11 = r12;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r5 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i3 = $r5.<android.view.WindowManager$LayoutParams: int width>;

        if $i3 != -2 goto label2;

        $r6 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        $i4 = virtualinvoke r12.<android.view.WindowInsets: int getSystemWindowInsetTop()>();

        $r6.<android.graphics.Rect: int left> = $i4;

        $r7 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        $i5 = virtualinvoke r12.<android.view.WindowInsets: int getSystemWindowInsetBottom()>();

        $r7.<android.graphics.Rect: int right> = $i5;

        $i6 = virtualinvoke r12.<android.view.WindowInsets: int getSystemWindowInsetLeft()>();

        $i7 = virtualinvoke r12.<android.view.WindowInsets: int getSystemWindowInsetRight()>();

        r11 = virtualinvoke r12.<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>($i6, 0, $i7, 0);

     label2:
        $r13 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFrameOffsets>;

        $r14 = virtualinvoke r11.<android.view.WindowInsets: android.graphics.Rect getSystemWindowInsetsAsRect()>();

        virtualinvoke $r13.<android.graphics.Rect: void set(android.graphics.Rect)>($r14);

        $r15 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>(r11, 1);

        r16 = specialinvoke r0.<com.android.internal.policy.DecorView: android.view.WindowInsets updateStatusGuard(android.view.WindowInsets)>($r15);

        $r17 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable getForeground()>();

        if $r17 == null goto label3;

        specialinvoke r0.<com.android.internal.policy.DecorView: void drawableChanged()>();

     label3:
        return r16;
    }

    protected void onAttachedToWindow()
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.PhoneWindow $r1, $r3, $r4, $r7;
        boolean $z0, $z1;
        android.view.ViewRootImpl $r2, $r8;
        int $i0, $i1;
        android.view.Window$Callback r5;
        com.android.internal.policy.BackdropFrameRenderer r6;

        r0 := @this: com.android.internal.policy.DecorView;

        specialinvoke r0.<android.widget.FrameLayout: void onAttachedToWindow()>();

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r5 = virtualinvoke $r1.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r5 == null goto label1;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z1 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z1 != 0 goto label1;

        $i0 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i0 >= 0 goto label1;

        interfaceinvoke r5.<android.view.Window$Callback: void onAttachedToWindow()>();

     label1:
        $i1 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i1 != -1 goto label2;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r3.<com.android.internal.policy.PhoneWindow: void openPanelsAfterRestore()>();

     label2:
        $z0 = r0.<com.android.internal.policy.DecorView: boolean mWindowResizeCallbacksAdded>;

        if $z0 != 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void addWindowCallbacks(android.view.WindowCallbacks)>(r0);

        r0.<com.android.internal.policy.DecorView: boolean mWindowResizeCallbacksAdded> = 1;

        goto label4;

     label3:
        r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer>;

        if r6 == null goto label4;

        virtualinvoke r6.<com.android.internal.policy.BackdropFrameRenderer: void onConfigurationChange()>();

     label4:
        $r7 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r8 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r7.<com.android.internal.policy.PhoneWindow: void onViewRootImplSet(android.view.ViewRootImpl)>($r8);

        return;
    }

    public void onCloseSystemDialogs(java.lang.String)
    {
        com.android.internal.policy.DecorView r0;
        java.lang.String r1;
        int $i0;
        com.android.internal.policy.PhoneWindow $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: java.lang.String;

        $i0 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i0 < 0 goto label1;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: void closeAllPanels()>();

     label1:
        return;
    }

    protected void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.internal.policy.DecorView r0;
        android.content.res.Configuration r1;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.content.res.Configuration;

        specialinvoke r0.<android.widget.FrameLayout: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateDecorCaptionStatus(android.content.res.Configuration)>(r1);

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateAvailableWidth()>();

        specialinvoke r0.<com.android.internal.policy.DecorView: void initializeElevation()>();

        return;
    }

    public boolean onContentDrawn(int, int, int, int)
    {
        com.android.internal.policy.DecorView r0;
        int i0, i1, i2, i3;
        com.android.internal.policy.BackdropFrameRenderer r1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer>;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<com.android.internal.policy.BackdropFrameRenderer: boolean onContentDrawn(int,int,int,int)>(i0, i1, i2, i3);

        return $z0;
    }

    protected void onDetachedFromWindow()
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.policy.PhoneWindow $r1, $r3, $r11, $r14;
        android.widget.PopupWindow $r2, $r9, $r10;
        android.view.PendingInsetsController $r4;
        android.view.ViewRootImpl $r5;
        com.android.internal.view.menu.MenuBuilder $r6, $r7;
        int $i0, $i1;
        java.lang.Runnable $r8;
        boolean $z1, $z2;
        com.android.internal.widget.DecorContentParent $r12, $r15;
        android.view.Window$Callback r13;
        com.android.internal.widget.FloatingToolbar r16;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r17;

        r0 := @this: com.android.internal.policy.DecorView;

        specialinvoke r0.<android.widget.FrameLayout: void onDetachedFromWindow()>();

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r13 = virtualinvoke $r1.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r13 == null goto label1;

        $i1 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i1 >= 0 goto label1;

        interfaceinvoke r13.<android.view.Window$Callback: void onDetachedFromWindow()>();

     label1:
        $r14 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r15 = $r14.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r15 == null goto label2;

        $r11 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r12 = $r11.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r12.<com.android.internal.widget.DecorContentParent: void dismissPopups()>();

     label2:
        $r2 = r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup>;

        if $r2 == null goto label4;

        $r8 = r0.<com.android.internal.policy.DecorView: java.lang.Runnable mShowPrimaryActionModePopup>;

        virtualinvoke r0.<com.android.internal.policy.DecorView: boolean removeCallbacks(java.lang.Runnable)>($r8);

        $r9 = r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup>;

        $z1 = virtualinvoke $r9.<android.widget.PopupWindow: boolean isShowing()>();

        if $z1 == 0 goto label3;

        $r10 = r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup>;

        virtualinvoke $r10.<android.widget.PopupWindow: void dismiss()>();

     label3:
        r0.<com.android.internal.policy.DecorView: android.widget.PopupWindow mPrimaryActionModePopup> = null;

     label4:
        r16 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.FloatingToolbar mFloatingToolbar>;

        if r16 == null goto label5;

        virtualinvoke r16.<com.android.internal.widget.FloatingToolbar: void dismiss()>();

        r0.<com.android.internal.policy.DecorView: com.android.internal.widget.FloatingToolbar mFloatingToolbar> = null;

     label5:
        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r17 = virtualinvoke $r3.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r17 == null goto label6;

        $r6 = r17.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r6 == null goto label6;

        $i0 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i0 >= 0 goto label6;

        $r7 = r17.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r7.<com.android.internal.view.menu.MenuBuilder: void close()>();

     label6:
        specialinvoke r0.<com.android.internal.policy.DecorView: void releaseThreadedRenderer()>();

        $z2 = r0.<com.android.internal.policy.DecorView: boolean mWindowResizeCallbacksAdded>;

        if $z2 == 0 goto label7;

        $r5 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r5.<android.view.ViewRootImpl: void removeWindowCallbacks(android.view.WindowCallbacks)>(r0);

        r0.<com.android.internal.policy.DecorView: boolean mWindowResizeCallbacksAdded> = 0;

     label7:
        $r4 = r0.<com.android.internal.policy.DecorView: android.view.PendingInsetsController mPendingInsetsController>;

        virtualinvoke $r4.<android.view.PendingInsetsController: void detach()>();

        return;
    }

    public void onDraw(android.graphics.Canvas)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.Canvas r1;
        com.android.internal.policy.PhoneWindow $r2;
        com.android.internal.policy.DecorView$ColorViewState $r3, $r4;
        android.view.View $r5, $r6;
        android.view.ViewGroup $r7, $r8;
        com.android.internal.widget.BackgroundFallback $r9;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.Canvas;

        specialinvoke r0.<android.widget.FrameLayout: void onDraw(android.graphics.Canvas)>(r1);

        $r9 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.BackgroundFallback mBackgroundFallback>;

        $r8 = r0.<com.android.internal.policy.DecorView: android.view.ViewGroup mContentRoot>;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r7 = $r2.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState>;

        $r6 = $r3.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        $r5 = $r4.<com.android.internal.policy.DecorView$ColorViewState: android.view.View view>;

        virtualinvoke $r9.<com.android.internal.widget.BackgroundFallback: void draw(android.view.ViewGroup,android.view.ViewGroup,android.graphics.Canvas,android.view.View,android.view.View,android.view.View)>(r0, $r8, r1, $r7, $r6, $r5);

        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.MotionEvent r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2, $z3;
        float $f0, $f1, $f2, $f3;
        com.android.internal.policy.PhoneWindow $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        $z0 = r0.<com.android.internal.policy.DecorView: boolean mHasCaption>;

        if $z0 == 0 goto label1;

        $z2 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean isShowingCaption()>();

        if $z2 == 0 goto label1;

        if i0 != 0 goto label1;

        $f2 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $i4 = (int) $f2;

        $f3 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $i5 = (int) $f3;

        $z3 = specialinvoke r0.<com.android.internal.policy.DecorView: boolean isOutOfInnerBounds(int,int)>($i4, $i5);

        if $z3 == 0 goto label1;

        return 1;

     label1:
        $i6 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i6 < 0 goto label2;

        if i0 != 0 goto label2;

        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $i1 = (int) $f0;

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $i2 = (int) $f1;

        $z1 = specialinvoke r0.<com.android.internal.policy.DecorView: boolean isOutOfBounds(int,int)>($i1, $i2);

        if $z1 == 0 goto label2;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $i3 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: void closePanel(int)>($i3);

        return 1;

     label2:
        return 0;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        com.android.internal.policy.DecorView r0;
        boolean z0, $z1, $z2, $z3;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        android.view.ViewRootImpl $r1;
        android.graphics.Rect $r2, $r3;

        r0 := @this: com.android.internal.policy.DecorView;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        specialinvoke r0.<android.widget.FrameLayout: void onLayout(boolean,int,int,int,int)>(z0, i0, i1, i2, i3);

        $z1 = r0.<com.android.internal.policy.DecorView: boolean mApplyFloatingVerticalInsets>;

        if $z1 == 0 goto label1;

        $r3 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        $i6 = $r3.<android.graphics.Rect: int top>;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void offsetTopAndBottom(int)>($i6);

     label1:
        $z2 = r0.<com.android.internal.policy.DecorView: boolean mApplyFloatingHorizontalInsets>;

        if $z2 == 0 goto label2;

        $r2 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        $i5 = $r2.<android.graphics.Rect: int left>;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void offsetLeftAndRight(int)>($i5);

     label2:
        specialinvoke r0.<com.android.internal.policy.DecorView: void updateElevation()>();

        r0.<com.android.internal.policy.DecorView: boolean mAllowUpdateElevation> = 1;

        if z0 == 0 goto label4;

        $i4 = r0.<com.android.internal.policy.DecorView: int mResizeMode>;

        if $i4 == 1 goto label3;

        $z3 = r0.<com.android.internal.policy.DecorView: boolean mDrawLegacyNavigationBarBackground>;

        if $z3 == 0 goto label4;

     label3:
        $r1 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r1.<android.view.ViewRootImpl: void requestInvalidateRootRenderNode()>();

     label4:
        return;
    }

    protected void onMeasure(int, int)
    {
        com.android.internal.policy.DecorView r0;
        android.util.DisplayMetrics r1;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10;
        android.content.Context $r2;
        android.content.res.Resources $r3, $r4;
        android.content.res.Configuration $r5;
        com.android.internal.policy.PhoneWindow $r6, $r7, $r11, r14, r17;
        android.view.WindowManager$LayoutParams $r8;
        android.graphics.Rect $r9, $r10, $r12, $r13;
        boolean z1, z2, z3;
        android.util.TypedValue r15, r16, r18;

        r0 := @this: com.android.internal.policy.DecorView;

        i29 := @parameter0: int;

        i30 := @parameter1: int;

        $r2 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r3.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>();

        $r4 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.res.Resources getResources()>();

        $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i3 = $r5.<android.content.res.Configuration: int orientation>;

        if $i3 != 1 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        i0 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i29);

        i31 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i30);

        z2 = 0;

        r0.<com.android.internal.policy.DecorView: boolean mApplyFloatingHorizontalInsets> = 0;

        if i0 != -2147483648 goto label09;

        r14 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        if z1 == 0 goto label03;

        r15 = r14.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedWidthMinor>;

        goto label04;

     label03:
        r15 = r14.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedWidthMajor>;

     label04:
        if r15 == null goto label09;

        $i19 = r15.<android.util.TypedValue: int type>;

        if $i19 == 0 goto label09;

        $i20 = r15.<android.util.TypedValue: int type>;

        if $i20 != 5 goto label05;

        $f10 = virtualinvoke r15.<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>(r1);

        i32 = (int) $f10;

        goto label07;

     label05:
        $i21 = r15.<android.util.TypedValue: int type>;

        if $i21 != 6 goto label06;

        $i27 = r1.<android.util.DisplayMetrics: int widthPixels>;

        $f8 = (float) $i27;

        $i28 = r1.<android.util.DisplayMetrics: int widthPixels>;

        $f7 = (float) $i28;

        $f9 = virtualinvoke r15.<android.util.TypedValue: float getFraction(float,float)>($f8, $f7);

        i32 = (int) $f9;

        goto label07;

     label06:
        i32 = 0;

     label07:
        i33 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i29);

        if i32 <= 0 goto label08;

        $i26 = staticinvoke <java.lang.Math: int min(int,int)>(i32, i33);

        i34 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i26, 1073741824);

        z2 = 1;

        goto label10;

     label08:
        $r12 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        $i22 = $r12.<android.graphics.Rect: int left>;

        $i24 = i33 - $i22;

        $r13 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        $i23 = $r13.<android.graphics.Rect: int right>;

        $i25 = $i24 - $i23;

        i34 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i25, -2147483648);

        r0.<com.android.internal.policy.DecorView: boolean mApplyFloatingHorizontalInsets> = 1;

        goto label10;

     label09:
        i34 = i29;

     label10:
        r0.<com.android.internal.policy.DecorView: boolean mApplyFloatingVerticalInsets> = 0;

        if i31 != -2147483648 goto label17;

        if z1 == 0 goto label11;

        $r11 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r16 = $r11.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedHeightMajor>;

        goto label12;

     label11:
        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r16 = $r6.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedHeightMinor>;

     label12:
        if r16 == null goto label17;

        $i7 = r16.<android.util.TypedValue: int type>;

        if $i7 == 0 goto label17;

        $i8 = r16.<android.util.TypedValue: int type>;

        if $i8 != 5 goto label13;

        $f6 = virtualinvoke r16.<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>(r1);

        i35 = (int) $f6;

        goto label15;

     label13:
        $i9 = r16.<android.util.TypedValue: int type>;

        if $i9 != 6 goto label14;

        $i17 = r1.<android.util.DisplayMetrics: int heightPixels>;

        $f4 = (float) $i17;

        $i18 = r1.<android.util.DisplayMetrics: int heightPixels>;

        $f3 = (float) $i18;

        $f5 = virtualinvoke r16.<android.util.TypedValue: float getFraction(float,float)>($f4, $f3);

        i35 = (int) $f5;

        goto label15;

     label14:
        i35 = 0;

     label15:
        i36 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i30);

        if i35 <= 0 goto label16;

        $i16 = staticinvoke <java.lang.Math: int min(int,int)>(i35, i36);

        i37 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i16, 1073741824);

        goto label18;

     label16:
        $r7 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r8 = virtualinvoke $r7.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i10 = $r8.<android.view.WindowManager$LayoutParams: int flags>;

        $i11 = $i10 & 256;

        if $i11 != 0 goto label17;

        $r9 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        $i12 = $r9.<android.graphics.Rect: int top>;

        $i14 = i36 - $i12;

        $r10 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFloatingInsets>;

        $i13 = $r10.<android.graphics.Rect: int bottom>;

        $i15 = $i14 - $i13;

        i37 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i15, -2147483648);

        r0.<com.android.internal.policy.DecorView: boolean mApplyFloatingVerticalInsets> = 1;

        goto label18;

     label17:
        i37 = i30;

     label18:
        specialinvoke r0.<android.widget.FrameLayout: void onMeasure(int,int)>(i34, i37);

        i1 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getMeasuredWidth()>();

        i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i1, 1073741824);

        z3 = 0;

        i38 = i2;

        if z2 != 0 goto label24;

        z3 = 0;

        i38 = i2;

        if i0 != -2147483648 goto label24;

        r17 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        if z1 == 0 goto label19;

        r18 = r17.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mMinWidthMinor>;

        goto label20;

     label19:
        r18 = r17.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mMinWidthMajor>;

     label20:
        z3 = 0;

        i38 = i2;

        $i4 = r18.<android.util.TypedValue: int type>;

        if $i4 == 0 goto label24;

        $i5 = r18.<android.util.TypedValue: int type>;

        if $i5 != 5 goto label21;

        $f2 = virtualinvoke r18.<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>(r1);

        i39 = (int) $f2;

        goto label23;

     label21:
        $i6 = r18.<android.util.TypedValue: int type>;

        if $i6 != 6 goto label22;

        f0 = r0.<com.android.internal.policy.DecorView: float mAvailableWidth>;

        $f1 = virtualinvoke r18.<android.util.TypedValue: float getFraction(float,float)>(f0, f0);

        i39 = (int) $f1;

        goto label23;

     label22:
        i39 = 0;

     label23:
        z3 = 0;

        i38 = i2;

        if i1 >= i39 goto label24;

        i38 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i39, 1073741824);

        z3 = 1;

     label24:
        if z3 == 0 goto label25;

        specialinvoke r0.<android.widget.FrameLayout: void onMeasure(int,int)>(i38, i37);

     label25:
        return;
    }

    public void onMovedToDisplay(int, android.content.res.Configuration)
    {
        com.android.internal.policy.DecorView r0;
        int i0;
        android.content.res.Configuration r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        r1 := @parameter1: android.content.res.Configuration;

        specialinvoke r0.<android.widget.FrameLayout: void onMovedToDisplay(int,android.content.res.Configuration)>(i0, r1);

        $r2 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.Context getContext()>();

        virtualinvoke $r2.<android.content.Context: void updateDisplay(int)>(i0);

        return;
    }

    public void onPostDraw(android.graphics.RecordingCanvas)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.RecordingCanvas r1;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.RecordingCanvas;

        specialinvoke r0.<com.android.internal.policy.DecorView: void drawResizingShadowIfNeeded(android.graphics.RecordingCanvas)>(r1);

        specialinvoke r0.<com.android.internal.policy.DecorView: void drawLegacyNavigationBarBackground(android.graphics.RecordingCanvas)>(r1);

        return;
    }

    public void onRequestDraw(boolean)
    {
        com.android.internal.policy.DecorView r0;
        boolean z0, $z1;
        com.android.internal.policy.BackdropFrameRenderer r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.policy.BackdropFrameRenderer: void onRequestDraw(boolean)>(z0);

        goto label2;

     label1:
        if z0 == 0 goto label2;

        $z1 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean isAttachedToWindow()>();

        if $z1 == 0 goto label2;

        $r2 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void reportDrawFinish()>();

     label2:
        return;
    }

    void onResourcesLoaded(android.view.LayoutInflater, int)
    {
        com.android.internal.policy.DecorView r0;
        int i0, $i1, $i2;
        android.view.View r1;
        com.android.internal.policy.BackdropFrameRenderer $r2, $r12;
        com.android.internal.widget.DecorCaptionView $r3, $r8, $r10, r18;
        android.view.ViewGroup$LayoutParams $r4, $r9;
        android.view.ViewGroup $r5;
        android.view.ViewParent $r6;
        android.view.ViewGroup$MarginLayoutParams $r7;
        com.android.internal.policy.DecorView$ColorViewState $r11, $r16;
        android.graphics.drawable.Drawable $r13, $r14, $r15;
        android.view.LayoutInflater r17;

        r0 := @this: com.android.internal.policy.DecorView;

        r17 := @parameter0: android.view.LayoutInflater;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer>;

        if $r2 == null goto label1;

        specialinvoke r0.<com.android.internal.policy.DecorView: void loadBackgroundDrawablesIfNeeded()>();

        $r12 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer>;

        $r13 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mResizingBackgroundDrawable>;

        $r14 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mCaptionBackgroundDrawable>;

        $r15 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mUserCaptionBackgroundDrawable>;

        $r11 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState>;

        $i1 = specialinvoke r0.<com.android.internal.policy.DecorView: int getCurrentColor(com.android.internal.policy.DecorView$ColorViewState)>($r11);

        $r16 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        $i2 = specialinvoke r0.<com.android.internal.policy.DecorView: int getCurrentColor(com.android.internal.policy.DecorView$ColorViewState)>($r16);

        virtualinvoke $r12.<com.android.internal.policy.BackdropFrameRenderer: void onResourcesLoaded(com.android.internal.policy.DecorView,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,int,int)>(r0, $r13, $r14, $r15, $i1, $i2);

     label1:
        $r3 = specialinvoke r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView createDecorCaptionView(android.view.LayoutInflater)>(r17);

        r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView> = $r3;

        r1 = virtualinvoke r17.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i0, null);

        r18 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        if r18 == null goto label3;

        $r6 = virtualinvoke r18.<com.android.internal.widget.DecorCaptionView: android.view.ViewParent getParent()>();

        if $r6 != null goto label2;

        $r10 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        $r9 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r9.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke r0.<com.android.internal.policy.DecorView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r10, $r9);

     label2:
        $r8 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        $r7 = new android.view.ViewGroup$MarginLayoutParams;

        specialinvoke $r7.<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke $r8.<com.android.internal.widget.DecorCaptionView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, $r7);

        goto label4;

     label3:
        $r4 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r4.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke r0.<com.android.internal.policy.DecorView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>(r1, 0, $r4);

     label4:
        $r5 = (android.view.ViewGroup) r1;

        r0.<com.android.internal.policy.DecorView: android.view.ViewGroup mContentRoot> = $r5;

        specialinvoke r0.<com.android.internal.policy.DecorView: void initializeElevation()>();

        return;
    }

    public void onRootViewScrollYChanged(int)
    {
        com.android.internal.policy.DecorView r0;
        int i0;
        com.android.internal.widget.DecorCaptionView r1;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.DecorView: int mRootScrollY> = i0;

        r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.widget.DecorCaptionView: void onRootViewScrollYChanged(int)>(i0);

     label1:
        specialinvoke r0.<com.android.internal.policy.DecorView: void updateColorViewTranslations()>();

        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.MotionEvent r1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean onInterceptTouchEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public void onWindowDragResizeEnd()
    {
        com.android.internal.policy.DecorView r0;
        android.view.ViewRootImpl $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        specialinvoke r0.<com.android.internal.policy.DecorView: void releaseThreadedRenderer()>();

        virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>(null, 0);

        r0.<com.android.internal.policy.DecorView: int mResizeMode> = -1;

        $r2 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void requestInvalidateRootRenderNode()>();

        return;
    }

    public void onWindowDragResizeStart(android.graphics.Rect, boolean, android.graphics.Rect, android.graphics.Rect, int)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.Rect r1, r13, r14;
        boolean z0, $z1;
        int i0, $i1, $i2, $i3;
        com.android.internal.policy.PhoneWindow $r2;
        com.android.internal.policy.BackdropFrameRenderer $r3, $r5;
        android.view.ViewRootImpl $r4;
        com.android.internal.policy.DecorView$ColorViewState $r6, $r10;
        android.graphics.drawable.Drawable $r7, $r8, $r9;
        android.graphics.Insets $r11;
        android.view.ThreadedRenderer r15;
        android.view.WindowInsets r16;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        r13 := @parameter2: android.graphics.Rect;

        r14 := @parameter3: android.graphics.Rect;

        i0 := @parameter4: int;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z1 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.internal.policy.DecorView: void releaseThreadedRenderer()>();

        return;

     label1:
        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer>;

        if $r3 == null goto label2;

        return;

     label2:
        r15 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ThreadedRenderer getThreadedRenderer()>();

        if r15 == null goto label3;

        specialinvoke r0.<com.android.internal.policy.DecorView: void loadBackgroundDrawablesIfNeeded()>();

        r16 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.WindowInsets getRootWindowInsets()>();

        $r5 = new com.android.internal.policy.BackdropFrameRenderer;

        $r7 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mResizingBackgroundDrawable>;

        $r8 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mCaptionBackgroundDrawable>;

        $r9 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mUserCaptionBackgroundDrawable>;

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState>;

        $i1 = specialinvoke r0.<com.android.internal.policy.DecorView: int getCurrentColor(com.android.internal.policy.DecorView$ColorViewState)>($r6);

        $r10 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        $i2 = specialinvoke r0.<com.android.internal.policy.DecorView: int getCurrentColor(com.android.internal.policy.DecorView$ColorViewState)>($r10);

        $i3 = staticinvoke <android.view.WindowInsets$Type: int systemBars()>();

        $r11 = virtualinvoke r16.<android.view.WindowInsets: android.graphics.Insets getInsets(int)>($i3);

        specialinvoke $r5.<com.android.internal.policy.BackdropFrameRenderer: void <init>(com.android.internal.policy.DecorView,android.view.ThreadedRenderer,android.graphics.Rect,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,int,int,boolean,android.graphics.Insets)>(r0, r15, r1, $r7, $r8, $r9, $i1, $i2, z0, $r11);

        r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer> = $r5;

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateElevation()>();

        virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>(null, 0);

     label3:
        r0.<com.android.internal.policy.DecorView: int mResizeMode> = i0;

        $r4 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r4.<android.view.ViewRootImpl: void requestInvalidateRootRenderNode()>();

        return;
    }

    public void onWindowFocusChanged(boolean)
    {
        com.android.internal.policy.DecorView r0;
        boolean z0, $z1, $z2;
        com.android.internal.policy.PhoneWindow $r1, $r2, $r3, $r4, $r5;
        int $i0, $i1;
        android.view.Window$Callback r6;
        android.view.ActionMode r7, r8;

        r0 := @this: com.android.internal.policy.DecorView;

        z0 := @parameter0: boolean;

        specialinvoke r0.<android.widget.FrameLayout: void onWindowFocusChanged(boolean)>(z0);

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z1 = virtualinvoke $r1.<com.android.internal.policy.PhoneWindow: boolean hasFeature(int)>(0);

        if $z1 == 0 goto label1;

        if z0 != 0 goto label1;

        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $i1 = $r3.<com.android.internal.policy.PhoneWindow: int mPanelChordingKey>;

        if $i1 == 0 goto label1;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: void closePanel(int)>(0);

     label1:
        $r5 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r6 = virtualinvoke $r5.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r6 == null goto label2;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z2 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z2 != 0 goto label2;

        $i0 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i0 >= 0 goto label2;

        interfaceinvoke r6.<android.view.Window$Callback: void onWindowFocusChanged(boolean)>(z0);

     label2:
        r7 = r0.<com.android.internal.policy.DecorView: android.view.ActionMode mPrimaryActionMode>;

        if r7 == null goto label3;

        virtualinvoke r7.<android.view.ActionMode: void onWindowFocusChanged(boolean)>(z0);

     label3:
        r8 = r0.<com.android.internal.policy.DecorView: android.view.ActionMode mFloatingActionMode>;

        if r8 == null goto label4;

        virtualinvoke r8.<android.view.ActionMode: void onWindowFocusChanged(boolean)>(z0);

     label4:
        specialinvoke r0.<com.android.internal.policy.DecorView: void updateElevation()>();

        return;
    }

    public void onWindowSizeIsChanging(android.graphics.Rect, boolean, android.graphics.Rect, android.graphics.Rect)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.Rect r1, r2, r3;
        boolean z0;
        com.android.internal.policy.BackdropFrameRenderer r4;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.Rect;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.graphics.Rect;

        r3 := @parameter3: android.graphics.Rect;

        r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer>;

        if r4 == null goto label1;

        virtualinvoke r4.<com.android.internal.policy.BackdropFrameRenderer: void setTargetRect(android.graphics.Rect,boolean,android.graphics.Rect)>(r1, z0, r2);

     label1:
        return;
    }

    public void onWindowSystemUiVisibilityChanged(int)
    {
        com.android.internal.policy.DecorView r0;
        int i0, $i1;
        android.view.View r1;
        android.content.res.Resources $r3;
        android.content.res.Configuration $r4;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>(null, 1);

        $r3 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateDecorCaptionStatus(android.content.res.Configuration)>($r4);

        r1 = r0.<com.android.internal.policy.DecorView: android.view.View mStatusGuard>;

        if r1 == null goto label1;

        $i1 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i1 != 0 goto label1;

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateStatusGuardColor()>();

     label1:
        return;
    }

    public android.view.PendingInsetsController providePendingInsetsController()
    {
        com.android.internal.policy.DecorView r0;
        android.view.PendingInsetsController $r1;

        r0 := @this: com.android.internal.policy.DecorView;

        $r1 = r0.<com.android.internal.policy.DecorView: android.view.PendingInsetsController mPendingInsetsController>;

        return $r1;
    }

    public void requestKeyboardShortcuts(java.util.List, int)
    {
        com.android.internal.policy.DecorView r0;
        java.util.List r1;
        int i0;
        com.android.internal.policy.PhoneWindow $r2, $r3, $r4, $r6;
        boolean $z0;
        android.view.Window$Callback $r5, $r7;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r8;
        com.android.internal.view.menu.MenuBuilder r9;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: java.util.List;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r8 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r8 == null goto label1;

        r9 = r8.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        goto label2;

     label1:
        r9 = null;

     label2:
        $r3 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z0 = virtualinvoke $r3.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label3;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r5 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if $r5 == null goto label3;

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r7 = virtualinvoke $r6.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        interfaceinvoke $r7.<android.view.Window$Callback: void onProvideKeyboardShortcuts(java.util.List,android.view.Menu,int)>(r1, r9, i0);

     label3:
        return;
    }

    public void sendAccessibilityEvent(int)
    {
        com.android.internal.policy.DecorView r0;
        int i0, i1, $i2;
        android.content.Context $r1;
        android.view.accessibility.AccessibilityManager $r2;
        boolean $z0;
        android.view.View $r3;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.DecorView: android.content.Context mContext>;

        $r2 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r1);

        $z0 = virtualinvoke $r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        i1 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if i1 == 0 goto label2;

        if i1 == 6 goto label2;

        if i1 == 2 goto label2;

        if i1 != 5 goto label3;

     label2:
        $i2 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getChildCount()>();

        if $i2 != 1 goto label3;

        $r3 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.View getChildAt(int)>(0);

        virtualinvoke $r3.<android.view.View: void sendAccessibilityEvent(int)>(i0);

        goto label4;

     label3:
        specialinvoke r0.<android.widget.FrameLayout: void sendAccessibilityEvent(int)>(i0);

     label4:
        return;
    }

    public void setBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.drawable.Drawable r1;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    void setBackgroundFallback(android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.drawable.Drawable r1, $r3;
        com.android.internal.widget.BackgroundFallback $r2, $r4;
        boolean $z0, z1;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.BackgroundFallback mBackgroundFallback>;

        virtualinvoke $r2.<com.android.internal.widget.BackgroundFallback: void setDrawable(android.graphics.drawable.Drawable)>(r1);

        $r3 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable getBackground()>();

        if $r3 != null goto label1;

        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.BackgroundFallback mBackgroundFallback>;

        $z0 = virtualinvoke $r4.<com.android.internal.widget.BackgroundFallback: boolean hasFallback()>();

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        virtualinvoke r0.<com.android.internal.policy.DecorView: void setWillNotDraw(boolean)>(z1);

        return;
    }

    protected boolean setFrame(int, int, int, int)
    {
        com.android.internal.policy.DecorView r0;
        int i0, i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35;
        boolean z0;
        android.graphics.Rect r1, r3, r4;
        android.graphics.drawable.Drawable r2, r5;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        i3 := @parameter3: int;

        z0 = specialinvoke r0.<android.widget.FrameLayout: boolean setFrame(int,int,int,int)>(i0, i1, i2, i3);

        if z0 == 0 goto label2;

        r1 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mDrawingBounds>;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void getDrawingRect(android.graphics.Rect)>(r1);

        r2 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable getForeground()>();

        if r2 == null goto label1;

        r3 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFrameOffsets>;

        $i5 = r1.<android.graphics.Rect: int left>;

        $i4 = r3.<android.graphics.Rect: int left>;

        $i6 = $i5 + $i4;

        r1.<android.graphics.Rect: int left> = $i6;

        $i8 = r1.<android.graphics.Rect: int top>;

        $i7 = r3.<android.graphics.Rect: int top>;

        $i9 = $i8 + $i7;

        r1.<android.graphics.Rect: int top> = $i9;

        $i11 = r1.<android.graphics.Rect: int right>;

        $i10 = r3.<android.graphics.Rect: int right>;

        $i12 = $i11 - $i10;

        r1.<android.graphics.Rect: int right> = $i12;

        $i14 = r1.<android.graphics.Rect: int bottom>;

        $i13 = r3.<android.graphics.Rect: int bottom>;

        $i15 = $i14 - $i13;

        r1.<android.graphics.Rect: int bottom> = $i15;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r1);

        r4 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFramePadding>;

        $i19 = r1.<android.graphics.Rect: int left>;

        $i17 = r4.<android.graphics.Rect: int left>;

        $i16 = r3.<android.graphics.Rect: int left>;

        $i18 = $i17 - $i16;

        $i20 = $i19 + $i18;

        r1.<android.graphics.Rect: int left> = $i20;

        $i24 = r1.<android.graphics.Rect: int top>;

        $i22 = r4.<android.graphics.Rect: int top>;

        $i21 = r3.<android.graphics.Rect: int top>;

        $i23 = $i22 - $i21;

        $i25 = $i24 + $i23;

        r1.<android.graphics.Rect: int top> = $i25;

        $i29 = r1.<android.graphics.Rect: int right>;

        $i27 = r4.<android.graphics.Rect: int right>;

        $i26 = r3.<android.graphics.Rect: int right>;

        $i28 = $i27 - $i26;

        $i30 = $i29 - $i28;

        r1.<android.graphics.Rect: int right> = $i30;

        $i34 = r1.<android.graphics.Rect: int bottom>;

        $i32 = r4.<android.graphics.Rect: int bottom>;

        $i31 = r3.<android.graphics.Rect: int bottom>;

        $i33 = $i32 - $i31;

        $i35 = $i34 - $i33;

        r1.<android.graphics.Rect: int bottom> = $i35;

     label1:
        r5 = specialinvoke r0.<android.widget.FrameLayout: android.graphics.drawable.Drawable getBackground()>();

        if r5 == null goto label2;

        virtualinvoke r5.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r1);

     label2:
        return z0;
    }

    public void setOutlineProvider(android.view.ViewOutlineProvider)
    {
        com.android.internal.policy.DecorView r0;
        android.view.ViewOutlineProvider r1;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.ViewOutlineProvider;

        specialinvoke r0.<android.widget.FrameLayout: void setOutlineProvider(android.view.ViewOutlineProvider)>(r1);

        r0.<com.android.internal.policy.DecorView: android.view.ViewOutlineProvider mLastOutlineProvider> = r1;

        return;
    }

    public void setSurfaceFormat(int)
    {
        com.android.internal.policy.DecorView r0;
        int i0;
        com.android.internal.policy.PhoneWindow $r1;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r1.<com.android.internal.policy.PhoneWindow: void setFormat(int)>(i0);

        return;
    }

    public void setSurfaceKeepScreenOn(boolean)
    {
        com.android.internal.policy.DecorView r0;
        boolean z0;
        com.android.internal.policy.PhoneWindow $r1, $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: void addFlags(int)>(128);

        goto label2;

     label1:
        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r1.<com.android.internal.policy.PhoneWindow: void clearFlags(int)>(128);

     label2:
        return;
    }

    public void setSurfaceType(int)
    {
        com.android.internal.policy.DecorView r0;
        int i0;
        com.android.internal.policy.PhoneWindow $r1;

        r0 := @this: com.android.internal.policy.DecorView;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r1.<com.android.internal.policy.PhoneWindow: void setType(int)>(i0);

        return;
    }

    void setUserCaptionBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.drawable.Drawable r1;
        com.android.internal.policy.BackdropFrameRenderer r2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mUserCaptionBackgroundDrawable> = r1;

        r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.BackdropFrameRenderer mBackdropFrameRenderer>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.internal.policy.BackdropFrameRenderer: void setUserCaptionBackgroundDrawable(android.graphics.drawable.Drawable)>(r1);

     label1:
        return;
    }

    void setWindow(com.android.internal.policy.PhoneWindow)
    {
        com.android.internal.policy.DecorView r0;
        boolean $z0;
        android.graphics.drawable.Drawable $r1, r6;
        com.android.internal.policy.PhoneWindow $r2, r4;
        com.android.internal.policy.DecorContext $r3;
        android.content.Context r5;

        r0 := @this: com.android.internal.policy.DecorView;

        r4 := @parameter0: com.android.internal.policy.PhoneWindow;

        r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow> = r4;

        r5 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.content.Context getContext()>();

        $z0 = r5 instanceof com.android.internal.policy.DecorContext;

        if $z0 == 0 goto label1;

        $r3 = (com.android.internal.policy.DecorContext) r5;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        virtualinvoke $r3.<com.android.internal.policy.DecorContext: void setPhoneWindow(com.android.internal.policy.PhoneWindow)>($r2);

     label1:
        $r1 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mPendingWindowBackground>;

        if $r1 == null goto label2;

        r6 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mPendingWindowBackground>;

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mPendingWindowBackground> = null;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>(r6);

     label2:
        return;
    }

    public void setWindowBackground(android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.drawable.Drawable r1, $r3, r12, $r13, r14, $r15, r16;
        com.android.internal.policy.PhoneWindow $r2, $r4, $r5, $r6, $r9, $r10, $r11;
        boolean $z1, $z2, $z4, $z5, $z6, z7, z8;
        android.graphics.Rect $r7, $r8;

        r0 := @this: com.android.internal.policy.DecorView;

        r12 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        if $r2 != null goto label01;

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mPendingWindowBackground> = r12;

        return;

     label01:
        $r3 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mOriginalBackgroundDrawable>;

        if $r3 == r12 goto label10;

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mOriginalBackgroundDrawable> = r12;

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateBackgroundDrawable()>();

        z7 = 0;

        if r12 == null goto label04;

        $r10 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z5 = virtualinvoke $r10.<com.android.internal.policy.PhoneWindow: boolean isTranslucent()>();

        if $z5 != 0 goto label02;

        $r11 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z6 = virtualinvoke $r11.<com.android.internal.policy.PhoneWindow: boolean isShowingWallpaper()>();

        if $z6 == 0 goto label03;

     label02:
        z7 = 1;

     label03:
        $r13 = staticinvoke <com.android.internal.policy.DecorView: android.graphics.drawable.Drawable enforceNonTranslucentBackground(android.graphics.drawable.Drawable,boolean)>(r12, z7);

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mResizingBackgroundDrawable> = $r13;

        goto label07;

     label04:
        $r4 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r1 = $r4.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        $r5 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r14 = $r5.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundFallbackDrawable>;

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z1 = virtualinvoke $r6.<com.android.internal.policy.PhoneWindow: boolean isTranslucent()>();

        if $z1 != 0 goto label05;

        z8 = 0;

        $r9 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z4 = virtualinvoke $r9.<com.android.internal.policy.PhoneWindow: boolean isShowingWallpaper()>();

        if $z4 == 0 goto label06;

     label05:
        z8 = 1;

     label06:
        $r15 = staticinvoke <com.android.internal.policy.DecorView: android.graphics.drawable.Drawable getResizingBackgroundDrawable(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,boolean)>(r1, r14, z8);

        r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mResizingBackgroundDrawable> = $r15;

     label07:
        r16 = r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable mResizingBackgroundDrawable>;

        if r16 == null goto label08;

        $r8 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mBackgroundPadding>;

        virtualinvoke r16.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>($r8);

        goto label09;

     label08:
        $r7 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mBackgroundPadding>;

        virtualinvoke $r7.<android.graphics.Rect: void setEmpty()>();

     label09:
        $z2 = <android.view.View: boolean sBrokenWindowBackground>;

        if $z2 != 0 goto label10;

        specialinvoke r0.<com.android.internal.policy.DecorView: void drawableChanged()>();

     label10:
        return;
    }

    public void setWindowFrame(android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.DecorView r0;
        android.graphics.drawable.Drawable r1, $r2;
        android.graphics.Rect $r3, $r4;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable getForeground()>();

        if $r2 == r1 goto label3;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void setForeground(android.graphics.drawable.Drawable)>(r1);

        if r1 == null goto label1;

        $r4 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFramePadding>;

        virtualinvoke r1.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>($r4);

        goto label2;

     label1:
        $r3 = r0.<com.android.internal.policy.DecorView: android.graphics.Rect mFramePadding>;

        virtualinvoke $r3.<android.graphics.Rect: void setEmpty()>();

     label2:
        specialinvoke r0.<com.android.internal.policy.DecorView: void drawableChanged()>();

     label3:
        return;
    }

    boolean shouldAnimatePrimaryActionModeView()
    {
        com.android.internal.policy.DecorView r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.DecorView;

        $z0 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean isLaidOut()>();

        return $z0;
    }

    public boolean showContextMenuForChild(android.view.View)
    {
        com.android.internal.policy.DecorView r0;
        android.view.View r1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.View;

        $z0 = specialinvoke r0.<com.android.internal.policy.DecorView: boolean showContextMenuForChildInternal(android.view.View,float,float)>(r1, #NaNF, #NaNF);

        return $z0;
    }

    public boolean showContextMenuForChild(android.view.View, float, float)
    {
        com.android.internal.policy.DecorView r0;
        android.view.View r1;
        float f0, f1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $z0 = specialinvoke r0.<com.android.internal.policy.DecorView: boolean showContextMenuForChildInternal(android.view.View,float,float)>(r1, f0, f1);

        return $z0;
    }

    public android.view.ActionMode startActionMode(android.view.ActionMode$Callback)
    {
        com.android.internal.policy.DecorView r0;
        android.view.ActionMode$Callback r1;
        android.view.ActionMode $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.ActionMode$Callback;

        $r2 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ActionMode startActionMode(android.view.ActionMode$Callback,int)>(r1, 0);

        return $r2;
    }

    public android.view.ActionMode startActionMode(android.view.ActionMode$Callback, int)
    {
        com.android.internal.policy.DecorView r0;
        android.view.ActionMode$Callback r1;
        int i0;
        android.view.ActionMode $r2;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.ActionMode$Callback;

        i0 := @parameter1: int;

        $r2 = specialinvoke r0.<com.android.internal.policy.DecorView: android.view.ActionMode startActionMode(android.view.View,android.view.ActionMode$Callback,int)>(r0, r1, i0);

        return $r2;
    }

    public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback)
    {
        com.android.internal.policy.DecorView r0;
        android.view.View r1;
        android.view.ActionMode$Callback r2;
        android.view.ActionMode $r3;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ActionMode$Callback;

        $r3 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback,int)>(r1, r2, 0);

        return $r3;
    }

    public android.view.ActionMode startActionModeForChild(android.view.View, android.view.ActionMode$Callback, int)
    {
        com.android.internal.policy.DecorView r0;
        android.view.View r1;
        android.view.ActionMode$Callback r2;
        int i0;
        android.view.ActionMode $r3;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.ActionMode$Callback;

        i0 := @parameter2: int;

        $r3 = specialinvoke r0.<com.android.internal.policy.DecorView: android.view.ActionMode startActionMode(android.view.View,android.view.ActionMode$Callback,int)>(r1, r2, i0);

        return $r3;
    }

    void startChanging()
    {
        com.android.internal.policy.DecorView r0;

        r0 := @this: com.android.internal.policy.DecorView;

        r0.<com.android.internal.policy.DecorView: boolean mChanging> = 1;

        return;
    }

    public boolean superDispatchGenericMotionEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.MotionEvent r1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchKeyEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.KeyEvent r1;
        android.view.ActionMode r2;
        boolean $z0, $z1, z2;
        android.view.ViewRootImpl $r3, $r4;
        int i0, i1;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        z2 = 1;

        if i0 != 4 goto label2;

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        r2 = r0.<com.android.internal.policy.DecorView: android.view.ActionMode mPrimaryActionMode>;

        if r2 == null goto label2;

        if i1 != 1 goto label1;

        virtualinvoke r2.<android.view.ActionMode: void finish()>();

     label1:
        return 1;

     label2:
        $z0 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchKeyEvent(android.view.KeyEvent)>(r1);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r3 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        if $r3 == null goto label4;

        $r4 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        $z1 = virtualinvoke $r4.<android.view.ViewRootImpl: boolean dispatchUnhandledKeyEvent(android.view.KeyEvent)>(r1);

        if $z1 == 0 goto label4;

        goto label5;

     label4:
        z2 = 0;

     label5:
        return z2;
    }

    public boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.KeyEvent r1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.KeyEvent;

        $z0 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.MotionEvent r1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchTouchEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchTrackballEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.DecorView r0;
        android.view.MotionEvent r1;
        boolean $z0;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = specialinvoke r0.<android.widget.FrameLayout: boolean dispatchTrackballEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public java.lang.String toString()
    {
        com.android.internal.policy.DecorView r0;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.String $r4, $r9, $r12;
        com.android.internal.policy.PhoneWindow $r7;
        android.view.WindowManager$LayoutParams $r8;

        r0 := @this: com.android.internal.policy.DecorView;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DecorView@");

        $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r7 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r8 = virtualinvoke $r7.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $r9 = staticinvoke <com.android.internal.policy.DecorView: java.lang.String getTitleSuffix(android.view.WindowManager$LayoutParams)>($r8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r12;
    }

    android.view.WindowInsets updateColorViews(android.view.WindowInsets, boolean)
    {
        com.android.internal.policy.DecorView r0;
        android.view.WindowManager$LayoutParams r2, $r7, $r20;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, i47, i48, i49, i50, i51, i52, i53, $i54, $i55, $i56, $i57, i58, i59, i60, i61;
        android.graphics.Insets r3, r4, $r10, $r11;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, z18, z19, z20, z21, z22, z23, z24, z25, z26, z27, z28, z29, z30, z31, z32, z33, $z34, z35, $z36, z37, z38, z39, z40, $z41, $z42, z43, z44, $z45, $z46, z47, z48, z49, $z50, z51;
        com.android.internal.policy.PhoneWindow $r5, $r6, $r8, $r9, $r19, $r29;
        android.view.ViewGroup$LayoutParams $r12, $r14;
        android.view.ViewGroup $r13, r30, $r32;
        com.android.internal.widget.DecorCaptionView $r15;
        android.view.View $r16;
        com.android.internal.policy.DecorView$ColorViewState $r17, $r18, r23, $r24, r26;
        android.view.WindowInsets r21, r33;
        android.view.WindowInsetsController r22;
        android.view.ViewRootImpl r25;
        android.view.ViewGroup$MarginLayoutParams r31;

        r0 := @this: com.android.internal.policy.DecorView;

        r21 := @parameter0: android.view.WindowInsets;

        z18 := @parameter1: boolean;

        $r5 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r2 = virtualinvoke $r5.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i1 = r2.<android.view.WindowManager$LayoutParams: int systemUiVisibility>;

        $i2 = virtualinvoke r0.<com.android.internal.policy.DecorView: int getWindowSystemUiVisibility()>();

        i0 = $i1 | $i2;

        r22 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.WindowInsetsController getWindowInsetsController()>();

        $r6 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r7 = virtualinvoke $r6.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i3 = $r7.<android.view.WindowManager$LayoutParams: int type>;

        if $i3 != 2011 goto label01;

        z19 = 1;

        goto label02;

     label01:
        z19 = 0;

     label02:
        $r8 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $z2 = $r8.<com.android.internal.policy.PhoneWindow: boolean mIsFloating>;

        if $z2 == 0 goto label04;

        if z19 == 0 goto label03;

        goto label04;

     label03:
        goto label42;

     label04:
        z20 = virtualinvoke r0.<com.android.internal.policy.DecorView: boolean isLaidOut()>();

        $i5 = r0.<com.android.internal.policy.DecorView: int mLastWindowFlags>;

        $i4 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i6 = $i5 ^ $i4;

        $i7 = $i6 & -2147483648;

        if $i7 == 0 goto label05;

        z21 = 1;

        goto label06;

     label05:
        z21 = 0;

     label06:
        $z3 = z20 ^ 1;

        z22 = $z3 | z21;

        $i8 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        r0.<com.android.internal.policy.DecorView: int mLastWindowFlags> = $i8;

        if r21 == null goto label23;

        $i37 = staticinvoke <android.view.WindowInsets$Type: int systemBars()>();

        r3 = virtualinvoke r21.<android.view.WindowInsets: android.graphics.Insets getInsets(int)>($i37);

        $i38 = staticinvoke <android.view.WindowInsets$Type: int systemBars()>();

        r4 = virtualinvoke r21.<android.view.WindowInsets: android.graphics.Insets getInsetsIgnoringVisibility(int)>($i38);

        $i39 = r3.<android.graphics.Insets: int top>;

        r0.<com.android.internal.policy.DecorView: int mLastTopInset> = $i39;

        $i40 = r3.<android.graphics.Insets: int bottom>;

        r0.<com.android.internal.policy.DecorView: int mLastBottomInset> = $i40;

        $i41 = r3.<android.graphics.Insets: int right>;

        r0.<com.android.internal.policy.DecorView: int mLastRightInset> = $i41;

        $i42 = r3.<android.graphics.Insets: int left>;

        r0.<com.android.internal.policy.DecorView: int mLastLeftInset> = $i42;

        $i43 = r4.<android.graphics.Insets: int top>;

        if $i43 == 0 goto label07;

        z23 = 1;

        goto label08;

     label07:
        z23 = 0;

     label08:
        $z10 = r0.<com.android.internal.policy.DecorView: boolean mLastHasTopStableInset>;

        if z23 == $z10 goto label09;

        z24 = 1;

        goto label10;

     label09:
        z24 = 0;

     label10:
        r0.<com.android.internal.policy.DecorView: boolean mLastHasTopStableInset> = z23;

        $i44 = r4.<android.graphics.Insets: int bottom>;

        if $i44 == 0 goto label11;

        z25 = 1;

        goto label12;

     label11:
        z25 = 0;

     label12:
        $z11 = r0.<com.android.internal.policy.DecorView: boolean mLastHasBottomStableInset>;

        if z25 == $z11 goto label13;

        z26 = 1;

        goto label14;

     label13:
        z26 = 0;

     label14:
        r0.<com.android.internal.policy.DecorView: boolean mLastHasBottomStableInset> = z25;

        $i45 = r4.<android.graphics.Insets: int right>;

        if $i45 == 0 goto label15;

        z27 = 1;

        goto label16;

     label15:
        z27 = 0;

     label16:
        $z12 = r0.<com.android.internal.policy.DecorView: boolean mLastHasRightStableInset>;

        if z27 == $z12 goto label17;

        z28 = 1;

        goto label18;

     label17:
        z28 = 0;

     label18:
        r0.<com.android.internal.policy.DecorView: boolean mLastHasRightStableInset> = z27;

        $i46 = r4.<android.graphics.Insets: int left>;

        if $i46 == 0 goto label19;

        z29 = 1;

        goto label20;

     label19:
        z29 = 0;

     label20:
        $z13 = r0.<com.android.internal.policy.DecorView: boolean mLastHasLeftStableInset>;

        if z29 == $z13 goto label21;

        z30 = 1;

        goto label22;

     label21:
        z30 = 0;

     label22:
        r0.<com.android.internal.policy.DecorView: boolean mLastHasLeftStableInset> = z29;

        $z14 = virtualinvoke r21.<android.view.WindowInsets: boolean shouldAlwaysConsumeSystemBars()>();

        r0.<com.android.internal.policy.DecorView: boolean mLastShouldAlwaysConsumeSystemBars> = $z14;

        $z15 = z22 | z24;

        $z16 = $z15 | z26;

        $z17 = $z16 | z28;

        z31 = $z17 | z30;

        goto label24;

     label23:
        z31 = z22;

     label24:
        $i10 = r0.<com.android.internal.policy.DecorView: int mLastBottomInset>;

        $i9 = r0.<com.android.internal.policy.DecorView: int mLastRightInset>;

        z0 = staticinvoke <com.android.internal.policy.DecorView: boolean isNavBarToRightEdge(int,int)>($i10, $i9);

        $i12 = r0.<com.android.internal.policy.DecorView: int mLastBottomInset>;

        $i11 = r0.<com.android.internal.policy.DecorView: int mLastLeftInset>;

        z1 = staticinvoke <com.android.internal.policy.DecorView: boolean isNavBarToLeftEdge(int,int)>($i12, $i11);

        $i15 = r0.<com.android.internal.policy.DecorView: int mLastBottomInset>;

        $i14 = r0.<com.android.internal.policy.DecorView: int mLastRightInset>;

        $i13 = r0.<com.android.internal.policy.DecorView: int mLastLeftInset>;

        i47 = staticinvoke <com.android.internal.policy.DecorView: int getNavBarSize(int,int,int)>($i15, $i14, $i13);

        r23 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        i48 = specialinvoke r0.<com.android.internal.policy.DecorView: int calculateNavigationBarColor()>();

        $r9 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        i49 = $r9.<com.android.internal.policy.PhoneWindow: int mNavigationBarDividerColor>;

        if z0 != 0 goto label26;

        if z1 == 0 goto label25;

        goto label26;

     label25:
        z32 = 0;

        goto label27;

     label26:
        z32 = 1;

     label27:
        if z18 == 0 goto label28;

        if z31 != 0 goto label28;

        z33 = 1;

        goto label29;

     label28:
        z33 = 0;

     label29:
        $z34 = r0.<com.android.internal.policy.DecorView: boolean mForceWindowDrawsBarBackgrounds>;

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateColorViewInt(com.android.internal.policy.DecorView$ColorViewState,int,int,int,int,boolean,boolean,int,boolean,boolean,android.view.WindowInsetsController)>(r23, i0, i48, i49, i47, z32, z1, 0, z33, $z34, r22);

        z35 = r0.<com.android.internal.policy.DecorView: boolean mDrawLegacyNavigationBarBackground>;

        $r24 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        $z36 = $r24.<com.android.internal.policy.DecorView$ColorViewState: boolean visible>;

        if $z36 == 0 goto label30;

        $r19 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        $r20 = virtualinvoke $r19.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i35 = $r20.<android.view.WindowManager$LayoutParams: int flags>;

        $i36 = $i35 & -2147483648;

        if $i36 != 0 goto label30;

        z37 = 1;

        goto label31;

     label30:
        z37 = 0;

     label31:
        r0.<com.android.internal.policy.DecorView: boolean mDrawLegacyNavigationBarBackground> = z37;

        if z35 == z37 goto label32;

        r25 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        if r25 == null goto label32;

        virtualinvoke r25.<android.view.ViewRootImpl: void requestInvalidateRootRenderNode()>();

     label32:
        if z0 == 0 goto label33;

        $r18 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        $z9 = $r18.<com.android.internal.policy.DecorView$ColorViewState: boolean present>;

        if $z9 == 0 goto label33;

        z38 = 1;

        goto label34;

     label33:
        z38 = 0;

     label34:
        if z1 == 0 goto label35;

        $r17 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mNavigationColorViewState>;

        $z8 = $r17.<com.android.internal.policy.DecorView$ColorViewState: boolean present>;

        if $z8 == 0 goto label35;

        z39 = 1;

        goto label36;

     label35:
        z39 = 0;

     label36:
        if z38 == 0 goto label37;

        i50 = r0.<com.android.internal.policy.DecorView: int mLastRightInset>;

        goto label39;

     label37:
        if z39 == 0 goto label38;

        i50 = r0.<com.android.internal.policy.DecorView: int mLastLeftInset>;

        goto label39;

     label38:
        i50 = 0;

     label39:
        r26 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.DecorView$ColorViewState mStatusColorViewState>;

        i51 = specialinvoke r0.<com.android.internal.policy.DecorView: int calculateStatusBarColor()>();

        i52 = r0.<com.android.internal.policy.DecorView: int mLastTopInset>;

        if z18 == 0 goto label40;

        if z31 != 0 goto label40;

        z40 = 1;

        goto label41;

     label40:
        z40 = 0;

     label41:
        $z41 = r0.<com.android.internal.policy.DecorView: boolean mForceWindowDrawsBarBackgrounds>;

        specialinvoke r0.<com.android.internal.policy.DecorView: void updateColorViewInt(com.android.internal.policy.DecorView$ColorViewState,int,int,int,int,boolean,boolean,int,boolean,boolean,android.view.WindowInsetsController)>(r26, i0, i51, 0, i52, 0, z39, i50, z40, $z41, r22);

        $z42 = r0.<com.android.internal.policy.DecorView: boolean mHasCaption>;

        if $z42 == 0 goto label42;

        i53 = specialinvoke r0.<com.android.internal.policy.DecorView: int calculateStatusBarColor()>();

        $r15 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        $r16 = virtualinvoke $r15.<com.android.internal.widget.DecorCaptionView: android.view.View getCaption()>();

        virtualinvoke $r16.<android.view.View: void setBackgroundColor(int)>(i53);

        virtualinvoke r0.<com.android.internal.policy.DecorView: void updateDecorCaptionShade()>();

     label42:
        $i54 = i0 & 2;

        if $i54 != 0 goto label44;

        if r22 == null goto label43;

        $z7 = interfaceinvoke r22.<android.view.WindowInsetsController: boolean isRequestedVisible(int)>(1);

        if $z7 != 0 goto label43;

        goto label44;

     label43:
        z43 = 0;

        goto label45;

     label44:
        z43 = 1;

     label45:
        $r29 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        z44 = $r29.<com.android.internal.policy.PhoneWindow: boolean mDecorFitsSystemWindows>;

        $z45 = r0.<com.android.internal.policy.DecorView: boolean mForceWindowDrawsBarBackgrounds>;

        if $z45 == 0 goto label46;

        $i32 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i33 = $i32 & -2147483648;

        if $i33 != 0 goto label46;

        $i34 = i0 & 512;

        if $i34 != 0 goto label46;

        if z44 == 0 goto label46;

        if z43 == 0 goto label47;

     label46:
        $z46 = r0.<com.android.internal.policy.DecorView: boolean mLastShouldAlwaysConsumeSystemBars>;

        if $z46 == 0 goto label48;

        if z43 == 0 goto label48;

     label47:
        z47 = 1;

        goto label49;

     label48:
        z47 = 0;

     label49:
        $i55 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i56 = $i55 & -2147483648;

        if $i56 == 0 goto label50;

        $i31 = i0 & 512;

        if $i31 != 0 goto label50;

        if z44 == 0 goto label50;

        if z43 == 0 goto label51;

     label50:
        if z47 == 0 goto label52;

     label51:
        z48 = 1;

        goto label53;

     label52:
        z48 = 0;

     label53:
        $i16 = i0 & 4;

        if $i16 != 0 goto label55;

        $i29 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i30 = $i29 & 1024;

        if $i30 != 0 goto label55;

        if r22 == null goto label54;

        $z6 = interfaceinvoke r22.<android.view.WindowInsetsController: boolean isRequestedVisible(int)>(0);

        if $z6 != 0 goto label54;

        goto label55;

     label54:
        z49 = 0;

        goto label56;

     label55:
        z49 = 1;

     label56:
        $i57 = i0 & 1024;

        if $i57 != 0 goto label57;

        if z44 == 0 goto label57;

        $i24 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i25 = $i24 & 256;

        if $i25 != 0 goto label57;

        $i26 = r2.<android.view.WindowManager$LayoutParams: int flags>;

        $i27 = $i26 & 65536;

        if $i27 != 0 goto label57;

        $z5 = r0.<com.android.internal.policy.DecorView: boolean mForceWindowDrawsBarBackgrounds>;

        if $z5 == 0 goto label57;

        $i28 = r0.<com.android.internal.policy.DecorView: int mLastTopInset>;

        if $i28 != 0 goto label58;

     label57:
        $z50 = r0.<com.android.internal.policy.DecorView: boolean mLastShouldAlwaysConsumeSystemBars>;

        if $z50 == 0 goto label59;

        if z49 == 0 goto label59;

     label58:
        z51 = 1;

        goto label60;

     label59:
        z51 = 0;

     label60:
        if z51 == 0 goto label61;

        i58 = r0.<com.android.internal.policy.DecorView: int mLastTopInset>;

        goto label62;

     label61:
        i58 = 0;

     label62:
        if z48 == 0 goto label63;

        i59 = r0.<com.android.internal.policy.DecorView: int mLastRightInset>;

        goto label64;

     label63:
        i59 = 0;

     label64:
        if z48 == 0 goto label65;

        i60 = r0.<com.android.internal.policy.DecorView: int mLastBottomInset>;

        goto label66;

     label65:
        i60 = 0;

     label66:
        if z48 == 0 goto label67;

        i61 = r0.<com.android.internal.policy.DecorView: int mLastLeftInset>;

        goto label68;

     label67:
        i61 = 0;

     label68:
        r30 = r0.<com.android.internal.policy.DecorView: android.view.ViewGroup mContentRoot>;

        if r30 == null goto label72;

        $r12 = virtualinvoke r30.<android.view.ViewGroup: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $z4 = $r12 instanceof android.view.ViewGroup$MarginLayoutParams;

        if $z4 == 0 goto label71;

        $r13 = r0.<com.android.internal.policy.DecorView: android.view.ViewGroup mContentRoot>;

        $r14 = virtualinvoke $r13.<android.view.ViewGroup: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r31 = (android.view.ViewGroup$MarginLayoutParams) $r14;

        $i20 = r31.<android.view.ViewGroup$MarginLayoutParams: int topMargin>;

        if $i20 != i58 goto label69;

        $i21 = r31.<android.view.ViewGroup$MarginLayoutParams: int rightMargin>;

        if $i21 != i59 goto label69;

        $i22 = r31.<android.view.ViewGroup$MarginLayoutParams: int bottomMargin>;

        if $i22 != i60 goto label69;

        $i23 = r31.<android.view.ViewGroup$MarginLayoutParams: int leftMargin>;

        if $i23 == i61 goto label70;

     label69:
        r31.<android.view.ViewGroup$MarginLayoutParams: int topMargin> = i58;

        r31.<android.view.ViewGroup$MarginLayoutParams: int rightMargin> = i59;

        r31.<android.view.ViewGroup$MarginLayoutParams: int bottomMargin> = i60;

        r31.<android.view.ViewGroup$MarginLayoutParams: int leftMargin> = i61;

        $r32 = r0.<com.android.internal.policy.DecorView: android.view.ViewGroup mContentRoot>;

        virtualinvoke $r32.<android.view.ViewGroup: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r31);

        if r21 != null goto label70;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void requestApplyInsets()>();

     label70:
        r33 = r21;

        if r21 == null goto label73;

        r33 = virtualinvoke r21.<android.view.WindowInsets: android.view.WindowInsets inset(int,int,int,int)>(i61, i58, i59, i60);

        goto label73;

     label71:
        r33 = r21;

        goto label73;

     label72:
        r33 = r21;

     label73:
        if z47 == 0 goto label74;

        $i19 = r0.<com.android.internal.policy.DecorView: int mLastLeftInset>;

        $i18 = r0.<com.android.internal.policy.DecorView: int mLastRightInset>;

        $i17 = r0.<com.android.internal.policy.DecorView: int mLastBottomInset>;

        $r11 = staticinvoke <android.graphics.Insets: android.graphics.Insets of(int,int,int,int)>($i19, 0, $i18, $i17);

        r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets> = $r11;

        goto label75;

     label74:
        $r10 = <android.graphics.Insets: android.graphics.Insets NONE>;

        r0.<com.android.internal.policy.DecorView: android.graphics.Insets mBackgroundInsets> = $r10;

     label75:
        specialinvoke r0.<com.android.internal.policy.DecorView: void updateBackgroundDrawable()>();

        return r33;
    }

    void updateDecorCaptionShade()
    {
        com.android.internal.policy.DecorView r0;
        com.android.internal.widget.DecorCaptionView r1;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.widget.DecorCaptionView mDecorCaptionView>;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.internal.policy.DecorView: void setDecorCaptionShade(com.android.internal.widget.DecorCaptionView)>(r1);

     label1:
        return;
    }

    void updateLogTag(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.DecorView r0;
        android.view.WindowManager$LayoutParams r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8;

        r0 := @this: com.android.internal.policy.DecorView;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DecorView[");

        $r5 = staticinvoke <com.android.internal.policy.DecorView: java.lang.String getTitleSuffix(android.view.WindowManager$LayoutParams)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.internal.policy.DecorView: java.lang.String mLogTag> = $r8;

        return;
    }

    public void updatePictureInPictureOutlineProvider(boolean)
    {
        com.android.internal.policy.DecorView r0;
        boolean z0, $z1, $z2;
        android.view.ViewOutlineProvider r1, $r3, r5;
        com.android.internal.policy.PhoneWindow $r2;
        android.view.Window$WindowControllerCallback r4;

        r0 := @this: com.android.internal.policy.DecorView;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.internal.policy.DecorView: boolean mIsInPictureInPictureMode>;

        if $z1 != z0 goto label1;

        return;

     label1:
        if z0 == 0 goto label3;

        $r2 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r4 = virtualinvoke $r2.<com.android.internal.policy.PhoneWindow: android.view.Window$WindowControllerCallback getWindowControllerCallback()>();

        if r4 == null goto label2;

        $z2 = interfaceinvoke r4.<android.view.Window$WindowControllerCallback: boolean isTaskRoot()>();

        if $z2 == 0 goto label2;

        $r3 = <com.android.internal.policy.DecorView: android.view.ViewOutlineProvider PIP_OUTLINE_PROVIDER>;

        specialinvoke r0.<android.widget.FrameLayout: void setOutlineProvider(android.view.ViewOutlineProvider)>($r3);

     label2:
        goto label4;

     label3:
        r5 = virtualinvoke r0.<com.android.internal.policy.DecorView: android.view.ViewOutlineProvider getOutlineProvider()>();

        r1 = r0.<com.android.internal.policy.DecorView: android.view.ViewOutlineProvider mLastOutlineProvider>;

        if r5 == r1 goto label4;

        virtualinvoke r0.<com.android.internal.policy.DecorView: void setOutlineProvider(android.view.ViewOutlineProvider)>(r1);

     label4:
        r0.<com.android.internal.policy.DecorView: boolean mIsInPictureInPictureMode> = z0;

        return;
    }

    public android.view.InputQueue$Callback willYouTakeTheInputQueue()
    {
        com.android.internal.policy.DecorView r0;
        int $i0;
        com.android.internal.policy.PhoneWindow $r1;
        android.view.InputQueue$Callback r2;

        r0 := @this: com.android.internal.policy.DecorView;

        $i0 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i0 >= 0 goto label1;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r2 = $r1.<com.android.internal.policy.PhoneWindow: android.view.InputQueue$Callback mTakeInputQueueCallback>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public android.view.SurfaceHolder$Callback2 willYouTakeTheSurface()
    {
        com.android.internal.policy.DecorView r0;
        int $i0;
        com.android.internal.policy.PhoneWindow $r1;
        android.view.SurfaceHolder$Callback2 r2;

        r0 := @this: com.android.internal.policy.DecorView;

        $i0 = r0.<com.android.internal.policy.DecorView: int mFeatureId>;

        if $i0 >= 0 goto label1;

        $r1 = r0.<com.android.internal.policy.DecorView: com.android.internal.policy.PhoneWindow mWindow>;

        r2 = $r1.<com.android.internal.policy.PhoneWindow: android.view.SurfaceHolder$Callback2 mTakeSurfaceCallback>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }
}
