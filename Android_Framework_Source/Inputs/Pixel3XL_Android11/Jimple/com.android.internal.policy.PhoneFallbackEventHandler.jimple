public class com.android.internal.policy.PhoneFallbackEventHandler extends java.lang.Object implements android.view.FallbackEventHandler
{
    private static final boolean DEBUG;
    private static java.lang.String TAG;
    android.media.AudioManager mAudioManager;
    android.content.Context mContext;
    android.app.KeyguardManager mKeyguardManager;
    android.media.session.MediaSessionManager mMediaSessionManager;
    android.app.SearchManager mSearchManager;
    android.telephony.TelephonyManager mTelephonyManager;
    android.view.View mView;

    static void <clinit>()
    {
        <com.android.internal.policy.PhoneFallbackEventHandler: boolean DEBUG> = 0;

        <com.android.internal.policy.PhoneFallbackEventHandler: java.lang.String TAG> = "PhoneFallbackEventHandler";

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.content.Context r1;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext> = r1;

        return;
    }

    private void handleMediaKeyEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.view.KeyEvent r1;
        android.media.session.MediaSessionManager $r2;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.media.session.MediaSessionManager getMediaSessionManager()>();

        virtualinvoke $r2.<android.media.session.MediaSessionManager: void dispatchMediaKeyEventAsSystemService(android.view.KeyEvent)>(r1);

        return;
    }

    private void handleVolumeKeyEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.view.KeyEvent r1;
        android.media.session.MediaSessionManager $r2;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.media.session.MediaSessionManager getMediaSessionManager()>();

        virtualinvoke $r2.<android.media.session.MediaSessionManager: void dispatchVolumeKeyEventAsSystemService(android.view.KeyEvent,int)>(r1, -2147483648);

        return;
    }

    private boolean isNotInstantAppAndKeyguardRestricted(android.view.KeyEvent$DispatcherState)
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.view.KeyEvent$DispatcherState r1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        boolean $z0, $z1, z2;
        android.app.KeyguardManager $r4;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        r1 := @parameter0: android.view.KeyEvent$DispatcherState;

        $r2 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean isInstantApp()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.app.KeyguardManager getKeyguardManager()>();

        $z1 = virtualinvoke $r4.<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>();

        if $z1 != 0 goto label1;

        if r1 != null goto label2;

     label1:
        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        return z2;
    }

    private boolean isUserSetupComplete()
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.content.ContentResolver r1;
        android.content.Context $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        $r2 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z0 = 0;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "user_setup_complete", 0);

        if $i0 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean dispatchKeyEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.view.KeyEvent r1;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        r1 := @parameter0: android.view.KeyEvent;

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getAction()>();

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        if i0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean onKeyDown(int,android.view.KeyEvent)>(i1, r1);

        return $z1;

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean onKeyUp(int,android.view.KeyEvent)>(i1, r1);

        return $z0;
    }

    android.media.AudioManager getAudioManager()
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.media.AudioManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        $r1 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.media.AudioManager mAudioManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r5 = (android.media.AudioManager) $r4;

        r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.media.AudioManager mAudioManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.media.AudioManager mAudioManager>;

        return $r2;
    }

    android.app.KeyguardManager getKeyguardManager()
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.app.KeyguardManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        $r1 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.app.KeyguardManager mKeyguardManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("keyguard");

        $r5 = (android.app.KeyguardManager) $r4;

        r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.app.KeyguardManager mKeyguardManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.app.KeyguardManager mKeyguardManager>;

        return $r2;
    }

    android.media.session.MediaSessionManager getMediaSessionManager()
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.media.session.MediaSessionManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        $r1 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.media.session.MediaSessionManager mMediaSessionManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("media_session");

        $r5 = (android.media.session.MediaSessionManager) $r4;

        r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.media.session.MediaSessionManager mMediaSessionManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.media.session.MediaSessionManager mMediaSessionManager>;

        return $r2;
    }

    android.app.SearchManager getSearchManager()
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.app.SearchManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        $r1 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.app.SearchManager mSearchManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("search");

        $r5 = (android.app.SearchManager) $r4;

        r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.app.SearchManager mSearchManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.app.SearchManager mSearchManager>;

        return $r2;
    }

    android.telephony.TelephonyManager getTelephonyManager()
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.telephony.TelephonyManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        $r1 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.telephony.TelephonyManager mTelephonyManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r5 = (android.telephony.TelephonyManager) $r4;

        r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.telephony.TelephonyManager mTelephonyManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.telephony.TelephonyManager mTelephonyManager>;

        return $r2;
    }

    boolean onKeyDown(int, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        int i0, $i1, $i3, $i5, $i6, $i8, $i9;
        android.view.View $r1, $r3, $r8, $r19;
        boolean $z0, $z1, $z2, $z3, $z5, $z6, $z7, $z8, $z10, $z11, $z12, $z13;
        java.lang.String $r2, $r7, $r16;
        android.content.Intent $r4, $r9, $r17;
        android.content.Context $r6, $r13, $r14, $r21;
        android.os.UserHandle $r12;
        android.content.res.Resources $r15;
        android.app.SearchManager $r20;
        android.content.ActivityNotFoundException $r22, $r23;
        android.view.KeyEvent r24;
        android.view.KeyEvent$DispatcherState r25;
        android.content.res.Configuration r26;
        android.telephony.TelephonyManager $r29;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        i0 := @parameter0: int;

        r24 := @parameter1: android.view.KeyEvent;

        $r1 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.view.View mView>;

        r25 = virtualinvoke $r1.<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>();

        if i0 == 5 goto label18;

        if i0 == 27 goto label13;

        if i0 == 79 goto label12;

        if i0 == 130 goto label12;

        if i0 == 164 goto label11;

        if i0 == 222 goto label12;

        if i0 == 24 goto label11;

        if i0 == 25 goto label11;

        if i0 == 126 goto label10;

        if i0 == 127 goto label10;

        tableswitch(i0)
        {
            case 84: goto label02;
            case 85: goto label10;
            case 86: goto label12;
            case 87: goto label12;
            case 88: goto label12;
            case 89: goto label12;
            case 90: goto label12;
            case 91: goto label12;
            default: goto label01;
        };

     label01:
        goto label19;

     label02:
        $z10 = specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean isNotInstantAppAndKeyguardRestricted(android.view.KeyEvent$DispatcherState)>(r25);

        if $z10 == 0 goto label03;

        goto label19;

     label03:
        $i5 = virtualinvoke r24.<android.view.KeyEvent: int getRepeatCount()>();

        if $i5 != 0 goto label04;

        virtualinvoke r25.<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>(r24, r0);

        goto label19;

     label04:
        $z11 = virtualinvoke r24.<android.view.KeyEvent: boolean isLongPress()>();

        if $z11 == 0 goto label19;

        $z12 = virtualinvoke r25.<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>(r24);

        if $z12 == 0 goto label19;

        $r14 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.res.Resources getResources()>();

        r26 = virtualinvoke $r15.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i6 = r26.<android.content.res.Configuration: int keyboard>;

        if $i6 == 1 goto label05;

        $i8 = r26.<android.content.res.Configuration: int hardKeyboardHidden>;

        if $i8 != 2 goto label19;

     label05:
        $z13 = specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean isUserSetupComplete()>();

        if $z13 == 0 goto label09;

        $r17 = new android.content.Intent;

        specialinvoke $r17.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.SEARCH_LONG_PRESS");

        virtualinvoke $r17.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

     label06:
        $r19 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.view.View mView>;

        virtualinvoke $r19.<android.view.View: boolean performHapticFeedback(int)>(0);

        virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: void sendCloseSystemWindows()>();

        $r20 = virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.app.SearchManager getSearchManager()>();

        virtualinvoke $r20.<android.app.SearchManager: void stopSearch()>();

        $r21 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        virtualinvoke $r21.<android.content.Context: void startActivity(android.content.Intent)>($r17);

        virtualinvoke r25.<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>(r24);

     label07:
        return 1;

     label08:
        $r22 := @caughtexception;

        goto label19;

     label09:
        $r16 = <com.android.internal.policy.PhoneFallbackEventHandler: java.lang.String TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r16, "Not dispatching SEARCH long press because user setup is in progress.");

        goto label19;

     label10:
        $r29 = virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.telephony.TelephonyManager getTelephonyManager()>();

        $i9 = virtualinvoke $r29.<android.telephony.TelephonyManager: int getCallState()>();

        if $i9 == 0 goto label12;

        return 1;

     label11:
        specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: void handleVolumeKeyEvent(android.view.KeyEvent)>(r24);

        return 1;

     label12:
        specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: void handleMediaKeyEvent(android.view.KeyEvent)>(r24);

        return 1;

     label13:
        $z5 = specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean isNotInstantAppAndKeyguardRestricted(android.view.KeyEvent$DispatcherState)>(r25);

        if $z5 == 0 goto label14;

        goto label19;

     label14:
        $i3 = virtualinvoke r24.<android.view.KeyEvent: int getRepeatCount()>();

        if $i3 != 0 goto label15;

        virtualinvoke r25.<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>(r24, r0);

        goto label17;

     label15:
        $z6 = virtualinvoke r24.<android.view.KeyEvent: boolean isLongPress()>();

        if $z6 == 0 goto label17;

        $z7 = virtualinvoke r25.<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>(r24);

        if $z7 == 0 goto label17;

        virtualinvoke r25.<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>(r24);

        $z8 = specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean isUserSetupComplete()>();

        if $z8 == 0 goto label16;

        $r8 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.view.View mView>;

        virtualinvoke $r8.<android.view.View: boolean performHapticFeedback(int)>(0);

        virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: void sendCloseSystemWindows()>();

        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.intent.action.CAMERA_BUTTON", null);

        virtualinvoke $r9.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.intent.extra.KEY_EVENT", r24);

        $r13 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        $r12 = <android.os.UserHandle: android.os.UserHandle CURRENT_OR_SELF>;

        virtualinvoke $r13.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r9, $r12, null, null, null, 0, null, null);

        goto label17;

     label16:
        $r7 = <com.android.internal.policy.PhoneFallbackEventHandler: java.lang.String TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r7, "Not dispatching CAMERA long press because user setup is in progress.");

     label17:
        return 1;

     label18:
        $z0 = specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean isNotInstantAppAndKeyguardRestricted(android.view.KeyEvent$DispatcherState)>(r25);

        if $z0 == 0 goto label20;

     label19:
        return 0;

     label20:
        $i1 = virtualinvoke r24.<android.view.KeyEvent: int getRepeatCount()>();

        if $i1 != 0 goto label21;

        virtualinvoke r25.<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>(r24, r0);

        goto label27;

     label21:
        $z1 = virtualinvoke r24.<android.view.KeyEvent: boolean isLongPress()>();

        if $z1 == 0 goto label27;

        $z2 = virtualinvoke r25.<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>(r24);

        if $z2 == 0 goto label27;

        virtualinvoke r25.<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>(r24);

        $z3 = specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean isUserSetupComplete()>();

        if $z3 == 0 goto label26;

        $r3 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.view.View mView>;

        virtualinvoke $r3.<android.view.View: boolean performHapticFeedback(int)>(0);

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.VOICE_COMMAND");

        virtualinvoke $r4.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

     label22:
        virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: void sendCloseSystemWindows()>();

        $r6 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void startActivity(android.content.Intent)>($r4);

     label23:
        goto label25;

     label24:
        $r23 := @caughtexception;

        virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: void startCallActivity()>();

     label25:
        goto label27;

     label26:
        $r2 = <com.android.internal.policy.PhoneFallbackEventHandler: java.lang.String TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r2, "Not starting call activity because user setup is in progress.");

     label27:
        return 1;

        catch android.content.ActivityNotFoundException from label06 to label07 with label08;
        catch android.content.ActivityNotFoundException from label22 to label23 with label24;
    }

    boolean onKeyUp(int, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        int i0;
        android.view.KeyEvent r1;
        android.view.KeyEvent$DispatcherState r2;
        android.view.View $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z7;
        java.lang.String $r4;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        $r3 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.view.View mView>;

        r2 = virtualinvoke $r3.<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>();

        if r2 == null goto label01;

        virtualinvoke r2.<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>(r1);

     label01:
        if i0 == 5 goto label09;

        if i0 == 27 goto label06;

        if i0 == 79 goto label05;

        if i0 == 130 goto label05;

        if i0 == 164 goto label03;

        if i0 == 222 goto label05;

        if i0 == 24 goto label03;

        if i0 == 25 goto label03;

        if i0 == 126 goto label05;

        if i0 == 127 goto label05;

        tableswitch(i0)
        {
            case 85: goto label05;
            case 86: goto label05;
            case 87: goto label05;
            case 88: goto label05;
            case 89: goto label05;
            case 90: goto label05;
            case 91: goto label05;
            default: goto label02;
        };

     label02:
        goto label10;

     label03:
        $z7 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        if $z7 != 0 goto label04;

        specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: void handleVolumeKeyEvent(android.view.KeyEvent)>(r1);

     label04:
        return 1;

     label05:
        specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: void handleMediaKeyEvent(android.view.KeyEvent)>(r1);

        return 1;

     label06:
        $z4 = specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean isNotInstantAppAndKeyguardRestricted(android.view.KeyEvent$DispatcherState)>(r2);

        if $z4 == 0 goto label07;

        goto label10;

     label07:
        $z5 = virtualinvoke r1.<android.view.KeyEvent: boolean isTracking()>();

        if $z5 == 0 goto label08;

        virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

     label08:
        return 1;

     label09:
        $z0 = specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean isNotInstantAppAndKeyguardRestricted(android.view.KeyEvent$DispatcherState)>(r2);

        if $z0 == 0 goto label11;

     label10:
        return 0;

     label11:
        $z1 = virtualinvoke r1.<android.view.KeyEvent: boolean isTracking()>();

        if $z1 == 0 goto label13;

        $z2 = virtualinvoke r1.<android.view.KeyEvent: boolean isCanceled()>();

        if $z2 != 0 goto label13;

        $z3 = specialinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: boolean isUserSetupComplete()>();

        if $z3 == 0 goto label12;

        virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: void startCallActivity()>();

        goto label13;

     label12:
        $r4 = <com.android.internal.policy.PhoneFallbackEventHandler: java.lang.String TAG>;

        staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r4, "Not starting call activity because user setup is in progress.");

     label13:
        return 1;
    }

    public void preDispatchKeyEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.view.KeyEvent r1;
        android.media.AudioManager $r2;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.media.AudioManager getAudioManager()>();

        virtualinvoke $r2.<android.media.AudioManager: void preDispatchKeyEvent(android.view.KeyEvent,int)>(r1, -2147483648);

        return;
    }

    void sendCloseSystemWindows()
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.content.Context $r1;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        $r1 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        staticinvoke <com.android.internal.policy.PhoneWindow: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r1, null);

        return;
    }

    public void setView(android.view.View)
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.view.View r1;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        r1 := @parameter0: android.view.View;

        r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.view.View mView> = r1;

        return;
    }

    void startCallActivity()
    {
        com.android.internal.policy.PhoneFallbackEventHandler r0;
        android.content.Intent $r1;
        android.content.Context $r3;
        android.content.ActivityNotFoundException $r4;
        java.lang.String $r5;

        r0 := @this: com.android.internal.policy.PhoneFallbackEventHandler;

        virtualinvoke r0.<com.android.internal.policy.PhoneFallbackEventHandler: void sendCloseSystemWindows()>();

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.CALL_BUTTON");

        virtualinvoke $r1.<android.content.Intent: android.content.Intent setFlags(int)>(268435456);

     label1:
        $r3 = r0.<com.android.internal.policy.PhoneFallbackEventHandler: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void startActivity(android.content.Intent)>($r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = <com.android.internal.policy.PhoneFallbackEventHandler: java.lang.String TAG>;

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r5, "No activity found for android.intent.action.CALL_BUTTON.");

     label4:
        return;

        catch android.content.ActivityNotFoundException from label1 to label2 with label3;
    }
}
