public class com.android.internal.policy.PhoneWindow extends android.view.Window implements com.android.internal.view.menu.MenuBuilder$Callback
{
    private static final java.lang.String ACTION_BAR_TAG;
    private static final int CUSTOM_TITLE_COMPATIBLE_FEATURES;
    private static final boolean DEBUG;
    private static final int DEFAULT_BACKGROUND_FADE_DURATION_MS;
    static final int FLAG_RESOURCE_SET_ICON;
    static final int FLAG_RESOURCE_SET_ICON_FALLBACK;
    static final int FLAG_RESOURCE_SET_LOGO;
    private static final java.lang.String FOCUSED_ID_TAG;
    private static final java.lang.String PANELS_TAG;
    private static final java.lang.String TAG;
    private static final android.transition.Transition USE_DEFAULT_TRANSITION;
    private static final java.lang.String VIEWS_TAG;
    private static final android.view.Window$OnContentApplyWindowInsetsListener sDefaultContentInsetsApplier;
    static final com.android.internal.policy.PhoneWindow$RotationWatcher sRotationWatcher;
    private com.android.internal.policy.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback;
    private android.view.ViewRootImpl$ActivityConfigCallback mActivityConfigCallback;
    private java.lang.Boolean mAllowEnterTransitionOverlap;
    private java.lang.Boolean mAllowReturnTransitionOverlap;
    private boolean mAlwaysReadCloseOnTouchAttr;
    private android.media.AudioManager mAudioManager;
    android.graphics.drawable.Drawable mBackgroundDrawable;
    private long mBackgroundFadeDurationMillis;
    android.graphics.drawable.Drawable mBackgroundFallbackDrawable;
    private android.widget.ProgressBar mCircularProgressBar;
    private boolean mClipToOutline;
    private boolean mClosingActionMenu;
    android.view.ViewGroup mContentParent;
    private boolean mContentParentExplicitlySet;
    private android.transition.Scene mContentScene;
    com.android.internal.view.menu.ContextMenuBuilder mContextMenu;
    final com.android.internal.policy.PhoneWindow$PhoneWindowMenuCallback mContextMenuCallback;
    com.android.internal.view.menu.MenuHelper mContextMenuHelper;
    private com.android.internal.policy.DecorView mDecor;
    private int mDecorCaptionShade;
    com.android.internal.widget.DecorContentParent mDecorContentParent;
    boolean mDecorFitsSystemWindows;
    private com.android.internal.policy.PhoneWindow$DrawableFeatureState[] mDrawables;
    private float mElevation;
    boolean mEnsureNavigationBarContrastWhenTransparent;
    boolean mEnsureStatusBarContrastWhenTransparent;
    private android.transition.Transition mEnterTransition;
    private android.transition.Transition mExitTransition;
    android.util.TypedValue mFixedHeightMajor;
    android.util.TypedValue mFixedHeightMinor;
    android.util.TypedValue mFixedWidthMajor;
    android.util.TypedValue mFixedWidthMinor;
    private boolean mForceDecorInstall;
    private boolean mForcedNavigationBarColor;
    private boolean mForcedStatusBarColor;
    private int mFrameResource;
    private android.widget.ProgressBar mHorizontalProgressBar;
    int mIconRes;
    private int mInvalidatePanelMenuFeatures;
    private boolean mInvalidatePanelMenuPosted;
    private final java.lang.Runnable mInvalidatePanelMenuRunnable;
    boolean mIsFloating;
    private boolean mIsStartingWindow;
    private boolean mIsTranslucent;
    private android.app.KeyguardManager mKeyguardManager;
    private android.view.LayoutInflater mLayoutInflater;
    private android.widget.ImageView mLeftIconView;
    private boolean mLoadElevation;
    int mLogoRes;
    private android.media.session.MediaController mMediaController;
    private android.media.session.MediaSessionManager mMediaSessionManager;
    final android.util.TypedValue mMinWidthMajor;
    final android.util.TypedValue mMinWidthMinor;
    int mNavigationBarColor;
    int mNavigationBarDividerColor;
    int mPanelChordingKey;
    private com.android.internal.policy.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback;
    private com.android.internal.policy.PhoneWindow$PanelFeatureState[] mPanels;
    com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel;
    private android.transition.Transition mReenterTransition;
    public final boolean mRenderShadowsInCompositor;
    int mResourcesSetFlags;
    private android.transition.Transition mReturnTransition;
    private android.widget.ImageView mRightIconView;
    private android.transition.Transition mSharedElementEnterTransition;
    private android.transition.Transition mSharedElementExitTransition;
    private android.transition.Transition mSharedElementReenterTransition;
    private android.transition.Transition mSharedElementReturnTransition;
    private java.lang.Boolean mSharedElementsUseOverlay;
    int mStatusBarColor;
    private boolean mSupportsPictureInPicture;
    android.view.InputQueue$Callback mTakeInputQueueCallback;
    android.view.SurfaceHolder$Callback2 mTakeSurfaceCallback;
    private int mTextColor;
    private int mTheme;
    private java.lang.CharSequence mTitle;
    private int mTitleColor;
    private android.widget.TextView mTitleView;
    private android.transition.TransitionManager mTransitionManager;
    private int mUiOptions;
    private boolean mUseDecorContext;
    private int mVolumeControlStreamType;

    static void <clinit>()
    {
        com.android.internal.policy.'-$$Lambda$PhoneWindow$F9lizKYeW8CQHD_8FLjKaBpUfBQ' $r0;
        android.transition.TransitionSet r3;
        com.android.internal.policy.PhoneWindow$RotationWatcher r4;
        android.view.Window$OnContentApplyWindowInsetsListener r5;

        <com.android.internal.policy.PhoneWindow: java.lang.String VIEWS_TAG> = "android:views";

        <com.android.internal.policy.PhoneWindow: java.lang.String TAG> = "PhoneWindow";

        <com.android.internal.policy.PhoneWindow: java.lang.String PANELS_TAG> = "android:Panels";

        <com.android.internal.policy.PhoneWindow: java.lang.String FOCUSED_ID_TAG> = "android:focusedViewId";

        <com.android.internal.policy.PhoneWindow: int FLAG_RESOURCE_SET_LOGO> = 2;

        <com.android.internal.policy.PhoneWindow: int FLAG_RESOURCE_SET_ICON_FALLBACK> = 4;

        <com.android.internal.policy.PhoneWindow: int FLAG_RESOURCE_SET_ICON> = 1;

        <com.android.internal.policy.PhoneWindow: int DEFAULT_BACKGROUND_FADE_DURATION_MS> = 300;

        <com.android.internal.policy.PhoneWindow: boolean DEBUG> = 0;

        <com.android.internal.policy.PhoneWindow: int CUSTOM_TITLE_COMPATIBLE_FEATURES> = 13505;

        <com.android.internal.policy.PhoneWindow: java.lang.String ACTION_BAR_TAG> = "android:ActionBar";

        $r0 = <com.android.internal.policy._$$Lambda$PhoneWindow$F9lizKYeW8CQHD_8FLjKaBpUfBQ: com.android.internal.policy.'-$$Lambda$PhoneWindow$F9lizKYeW8CQHD_8FLjKaBpUfBQ' INSTANCE>;

        r5 = (android.view.Window$OnContentApplyWindowInsetsListener) $r0;

        <com.android.internal.policy.PhoneWindow: android.view.Window$OnContentApplyWindowInsetsListener sDefaultContentInsetsApplier> = r5;

        r3 = new android.transition.TransitionSet;

        specialinvoke r3.<android.transition.TransitionSet: void <init>()>();

        <com.android.internal.policy.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION> = r3;

        r4 = new com.android.internal.policy.PhoneWindow$RotationWatcher;

        specialinvoke r4.<com.android.internal.policy.PhoneWindow$RotationWatcher: void <init>()>();

        <com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$RotationWatcher sRotationWatcher> = r4;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.content.Context r1;
        android.transition.Transition r2;
        com.android.internal.policy.PhoneWindow$PhoneWindowMenuCallback $r3;
        android.util.TypedValue $r4, $r5;
        com.android.internal.policy.PhoneWindow$1 $r6;
        android.view.LayoutInflater $r7;
        android.content.ContentResolver $r8;
        int $i0;
        boolean z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<android.view.Window: void <init>(android.content.Context)>(r1);

        $r3 = new com.android.internal.policy.PhoneWindow$PhoneWindowMenuCallback;

        specialinvoke $r3.<com.android.internal.policy.PhoneWindow$PhoneWindowMenuCallback: void <init>(com.android.internal.policy.PhoneWindow)>(r0);

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PhoneWindowMenuCallback mContextMenuCallback> = $r3;

        $r4 = new android.util.TypedValue;

        specialinvoke $r4.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mMinWidthMajor> = $r4;

        $r5 = new android.util.TypedValue;

        specialinvoke $r5.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mMinWidthMinor> = $r5;

        z0 = 0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mForceDecorInstall> = 0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mContentParentExplicitlySet> = 0;

        r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable> = null;

        r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundFallbackDrawable> = null;

        r0.<com.android.internal.policy.PhoneWindow: boolean mLoadElevation> = 1;

        r0.<com.android.internal.policy.PhoneWindow: int mFrameResource> = 0;

        r0.<com.android.internal.policy.PhoneWindow: int mTextColor> = 0;

        r0.<com.android.internal.policy.PhoneWindow: int mStatusBarColor> = 0;

        r0.<com.android.internal.policy.PhoneWindow: int mNavigationBarColor> = 0;

        r0.<com.android.internal.policy.PhoneWindow: int mNavigationBarDividerColor> = 0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mForcedStatusBarColor> = 0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mForcedNavigationBarColor> = 0;

        r0.<com.android.internal.policy.PhoneWindow: java.lang.CharSequence mTitle> = null;

        r0.<com.android.internal.policy.PhoneWindow: int mTitleColor> = 0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mAlwaysReadCloseOnTouchAttr> = 0;

        r0.<com.android.internal.policy.PhoneWindow: int mVolumeControlStreamType> = -2147483648;

        r0.<com.android.internal.policy.PhoneWindow: int mUiOptions> = 0;

        $r6 = new com.android.internal.policy.PhoneWindow$1;

        specialinvoke $r6.<com.android.internal.policy.PhoneWindow$1: void <init>(com.android.internal.policy.PhoneWindow)>(r0);

        r0.<com.android.internal.policy.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable> = $r6;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mEnterTransition> = null;

        r2 = <com.android.internal.policy.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mReturnTransition> = r2;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mExitTransition> = null;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mReenterTransition> = r2;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementEnterTransition> = null;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementReturnTransition> = r2;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementExitTransition> = null;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementReenterTransition> = r2;

        r0.<com.android.internal.policy.PhoneWindow: long mBackgroundFadeDurationMillis> = -1L;

        r0.<com.android.internal.policy.PhoneWindow: int mTheme> = -1;

        r0.<com.android.internal.policy.PhoneWindow: int mDecorCaptionShade> = 0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mUseDecorContext> = 0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mDecorFitsSystemWindows> = 1;

        $r7 = staticinvoke <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>(r1);

        r0.<com.android.internal.policy.PhoneWindow: android.view.LayoutInflater mLayoutInflater> = $r7;

        $r8 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r8, "render_shadows_in_compositor", 1);

        if $i0 == 0 goto label1;

        z0 = 1;

     label1:
        r0.<com.android.internal.policy.PhoneWindow: boolean mRenderShadowsInCompositor> = z0;

        return;
    }

    public void <init>(android.content.Context, android.view.Window, android.view.ViewRootImpl$ActivityConfigCallback)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.content.Context r1;
        android.view.Window r2;
        android.view.ViewRootImpl$ActivityConfigCallback r3;
        android.content.ContentResolver $r4;
        int $i0;
        android.content.pm.PackageManager $r5;
        boolean $z1, z2, z3;
        android.view.View $r6;
        com.android.internal.policy.DecorView $r7;
        float $f0;
        android.view.WindowManager$LayoutParams $r8, $r9;
        android.os.IBinder $r10;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.view.Window;

        r3 := @parameter2: android.view.ViewRootImpl$ActivityConfigCallback;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void <init>(android.content.Context)>(r1);

        r0.<com.android.internal.policy.PhoneWindow: boolean mUseDecorContext> = 1;

        if r2 == null goto label1;

        $r6 = virtualinvoke r2.<android.view.Window: android.view.View getDecorView()>();

        $r7 = (com.android.internal.policy.DecorView) $r6;

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor> = $r7;

        $f0 = virtualinvoke r2.<android.view.Window: float getElevation()>();

        r0.<com.android.internal.policy.PhoneWindow: float mElevation> = $f0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mLoadElevation> = 0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mForceDecorInstall> = 1;

        $r8 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $r9 = virtualinvoke r2.<android.view.Window: android.view.WindowManager$LayoutParams getAttributes()>();

        $r10 = $r9.<android.view.WindowManager$LayoutParams: android.os.IBinder token>;

        $r8.<android.view.WindowManager$LayoutParams: android.os.IBinder token> = $r10;

     label1:
        $r4 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r4, "force_resizable_activities", 0);

        if $i0 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        z3 = 1;

        if z2 != 0 goto label5;

        $r5 = virtualinvoke r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r5.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.picture_in_picture");

        if $z1 == 0 goto label4;

        z3 = 1;

        goto label5;

     label4:
        z3 = 0;

     label5:
        r0.<com.android.internal.policy.PhoneWindow: boolean mSupportsPictureInPicture> = z3;

        r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl$ActivityConfigCallback mActivityConfigCallback> = r3;

        return;
    }

    static int access$000(com.android.internal.policy.PhoneWindow)
    {
        com.android.internal.policy.PhoneWindow r0;
        int $i0;

        r0 := @parameter0: com.android.internal.policy.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        return $i0;
    }

    static int access$002(com.android.internal.policy.PhoneWindow, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;

        r0 := @parameter0: com.android.internal.policy.PhoneWindow;

        i0 := @parameter1: int;

        r0.<com.android.internal.policy.PhoneWindow: int mInvalidatePanelMenuFeatures> = i0;

        return i0;
    }

    static boolean access$102(com.android.internal.policy.PhoneWindow, boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.policy.PhoneWindow;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.policy.PhoneWindow: boolean mInvalidatePanelMenuPosted> = z0;

        return z0;
    }

    static void access$400(com.android.internal.policy.PhoneWindow, int, com.android.internal.policy.PhoneWindow$PanelFeatureState, android.view.Menu)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1;
        android.view.Menu r2;

        r0 := @parameter0: com.android.internal.policy.PhoneWindow;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        r2 := @parameter3: android.view.Menu;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void callOnPanelClosed(int,com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.Menu)>(i0, r1, r2);

        return;
    }

    static void access$700(com.android.internal.policy.PhoneWindow)
    {
        com.android.internal.policy.PhoneWindow r0;

        r0 := @parameter0: com.android.internal.policy.PhoneWindow;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void dismissContextMenu()>();

        return;
    }

    private void applyDecorFitsSystemWindows()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.ViewRootImpl r1;
        boolean $z0;
        android.view.Window$OnContentApplyWindowInsetsListener r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl getViewRootImplOrNull()>();

        if r1 == null goto label3;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mDecorFitsSystemWindows>;

        if $z0 == 0 goto label1;

        r2 = <com.android.internal.policy.PhoneWindow: android.view.Window$OnContentApplyWindowInsetsListener sDefaultContentInsetsApplier>;

        goto label2;

     label1:
        r2 = null;

     label2:
        virtualinvoke r1.<android.view.ViewRootImpl: void setOnContentApplyWindowInsetsListener(android.view.Window$OnContentApplyWindowInsetsListener)>(r2);

     label3:
        return;
    }

    private void callOnPanelClosed(int, com.android.internal.policy.PhoneWindow$PanelFeatureState, android.view.Menu)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1, r4, r6;
        android.view.Menu r2, r5;
        android.view.Window$Callback r3;
        boolean $z0, $z1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState[] r7;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        r2 := @parameter2: android.view.Menu;

        r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r3 != null goto label1;

        return;

     label1:
        r4 = r1;

        r5 = r2;

        if r2 != null goto label3;

        r6 = r1;

        if r1 != null goto label2;

        r6 = r1;

        if i0 < 0 goto label2;

        r7 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState[] mPanels>;

        r6 = r1;

        $i1 = lengthof r7;

        if i0 >= $i1 goto label2;

        r6 = r7[i0];

     label2:
        r4 = r6;

        r5 = r2;

        if r6 == null goto label3;

        r5 = r6.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        r4 = r6;

     label3:
        if r4 == null goto label4;

        $z1 = r4.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z1 != 0 goto label4;

        return;

     label4:
        $z0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label5;

        interfaceinvoke r3.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>(i0, r5);

     label5:
        return;
    }

    private static void clearMenuViews(com.android.internal.policy.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.PhoneWindow$PanelFeatureState r0;

        r0 := @parameter0: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        r0.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View createdPanelView> = null;

        r0.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow$PanelFeatureState: void clearMenuPresenters()>();

        return;
    }

    private void closeContextMenu()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.view.menu.ContextMenuBuilder $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        virtualinvoke $r3.<com.android.internal.view.menu.ContextMenuBuilder: void close()>();

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void dismissContextMenu()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void dismissContextMenu()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.view.menu.MenuHelper $r2, $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        entermonitor r0;

     label1:
        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu> = null;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.MenuHelper mContextMenuHelper>;

        if $r2 == null goto label2;

        $r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.MenuHelper mContextMenuHelper>;

        interfaceinvoke $r3.<com.android.internal.view.menu.MenuHelper: void dismiss()>();

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.MenuHelper mContextMenuHelper> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r4 := @caughtexception;

        exitmonitor r0;

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private android.widget.ProgressBar getCircularProgressBar(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;
        android.view.ViewGroup $r1;
        android.widget.ProgressBar $r2, r3, r5;
        android.view.View $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        r3 = r0.<com.android.internal.policy.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        if r3 == null goto label1;

        return r3;

     label1:
        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 != null goto label2;

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void installDecor()>();

     label2:
        $r4 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.View findViewById(int)>(16909322);

        r5 = (android.widget.ProgressBar) $r4;

        r0.<com.android.internal.policy.PhoneWindow: android.widget.ProgressBar mCircularProgressBar> = r5;

        if r5 == null goto label3;

        virtualinvoke r5.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label3:
        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.widget.ProgressBar mCircularProgressBar>;

        return $r2;
    }

    private com.android.internal.policy.PhoneWindow$DrawableFeatureState getDrawableState(int, boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;
        com.android.internal.policy.PhoneWindow$DrawableFeatureState $r1, r7, r8;
        java.lang.RuntimeException $r2;
        com.android.internal.policy.PhoneWindow$DrawableFeatureState[] r3, r5, r6;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $i1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getFeatures()>();

        $i2 = 1 << i0;

        $i3 = $i1 & $i2;

        if $i3 != 0 goto label2;

        if z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("The feature has not been requested");

        throw $r2;

     label2:
        r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$DrawableFeatureState[] mDrawables>;

        if r3 == null goto label3;

        r5 = r3;

        $i6 = lengthof r3;

        if $i6 > i0 goto label5;

     label3:
        $i4 = i0 + 1;

        r6 = newarray (com.android.internal.policy.PhoneWindow$DrawableFeatureState)[$i4];

        if r3 == null goto label4;

        $i5 = lengthof r3;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r3, 0, r6, 0, $i5);

     label4:
        r5 = r6;

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$DrawableFeatureState[] mDrawables> = r6;

     label5:
        r7 = r5[i0];

        r8 = r7;

        if r7 != null goto label6;

        $r1 = new com.android.internal.policy.PhoneWindow$DrawableFeatureState;

        specialinvoke $r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: void <init>(int)>(i0);

        r8 = $r1;

        r5[i0] = $r1;

     label6:
        return r8;
    }

    private android.widget.ProgressBar getHorizontalProgressBar(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;
        android.view.ViewGroup $r1;
        android.widget.ProgressBar $r2, r3, r5;
        android.view.View $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        r3 = r0.<com.android.internal.policy.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        if r3 == null goto label1;

        return r3;

     label1:
        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 != null goto label2;

        if z0 == 0 goto label2;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void installDecor()>();

     label2:
        $r4 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.View findViewById(int)>(16909323);

        r5 = (android.widget.ProgressBar) $r4;

        r0.<com.android.internal.policy.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar> = r5;

        if r5 == null goto label3;

        virtualinvoke r5.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label3:
        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.widget.ProgressBar mHorizontalProgressBar>;

        return $r2;
    }

    private android.app.KeyguardManager getKeyguardManager()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.app.KeyguardManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.app.KeyguardManager mKeyguardManager>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("keyguard");

        $r5 = (android.app.KeyguardManager) $r4;

        r0.<com.android.internal.policy.PhoneWindow: android.app.KeyguardManager mKeyguardManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.app.KeyguardManager mKeyguardManager>;

        return $r2;
    }

    private android.widget.ImageView getLeftIconView()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.ViewGroup $r1;
        android.view.View $r2;
        android.widget.ImageView r3, r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r3 = r0.<com.android.internal.policy.PhoneWindow: android.widget.ImageView mLeftIconView>;

        if r3 == null goto label1;

        return r3;

     label1:
        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 != null goto label2;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void installDecor()>();

     label2:
        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.View findViewById(int)>(16909121);

        r4 = (android.widget.ImageView) $r2;

        r0.<com.android.internal.policy.PhoneWindow: android.widget.ImageView mLeftIconView> = r4;

        return r4;
    }

    private android.media.session.MediaSessionManager getMediaSessionManager()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.media.session.MediaSessionManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaSessionManager mMediaSessionManager>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("media_session");

        $r5 = (android.media.session.MediaSessionManager) $r4;

        r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaSessionManager mMediaSessionManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaSessionManager mMediaSessionManager>;

        return $r2;
    }

    private int getOptionsPanelGravity()
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i1;
        android.view.IWindowManager $r2;
        android.content.Context $r3;
        android.os.RemoteException $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

     label1:
        $r2 = <com.android.internal.policy.PhoneWindow$WindowManagerHolder: android.view.IWindowManager sWindowManager>;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $i1 = virtualinvoke $r3.<android.content.Context: int getDisplayId()>();

        i0 = interfaceinvoke $r2.<android.view.IWindowManager: int getPreferredOptionsPanelGravity(int)>($i1);

     label2:
        return i0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PhoneWindow", "Couldn\'t getOptionsPanelGravity; using default", $r4);

        return 81;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int, boolean, com.android.internal.policy.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        boolean z0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState $r1, r3, r8, r9;
        java.lang.RuntimeException $r2;
        com.android.internal.policy.PhoneWindow$PanelFeatureState[] r4, r6, r7;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r3 := @parameter2: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        $i1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getFeatures()>();

        $i2 = 1 << i0;

        $i3 = $i1 & $i2;

        if $i3 != 0 goto label2;

        if z0 != 0 goto label1;

        return null;

     label1:
        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("The feature has not been requested");

        throw $r2;

     label2:
        r4 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState[] mPanels>;

        if r4 == null goto label3;

        r6 = r4;

        $i6 = lengthof r4;

        if $i6 > i0 goto label5;

     label3:
        $i4 = i0 + 1;

        r7 = newarray (com.android.internal.policy.PhoneWindow$PanelFeatureState)[$i4];

        if r4 == null goto label4;

        $i5 = lengthof r4;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r4, 0, r7, 0, $i5);

     label4:
        r6 = r7;

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState[] mPanels> = r7;

     label5:
        r8 = r6[i0];

        r9 = r8;

        if r8 != null goto label8;

        if r3 == null goto label6;

        goto label7;

     label6:
        $r1 = new com.android.internal.policy.PhoneWindow$PanelFeatureState;

        specialinvoke $r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: void <init>(int)>(i0);

        r3 = $r1;

     label7:
        r9 = r3;

        r6[i0] = r3;

     label8:
        return r9;
    }

    private android.widget.ImageView getRightIconView()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.ViewGroup $r1;
        android.view.View $r2;
        android.widget.ImageView r3, r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r3 = r0.<com.android.internal.policy.PhoneWindow: android.widget.ImageView mRightIconView>;

        if r3 == null goto label1;

        return r3;

     label1:
        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 != null goto label2;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void installDecor()>();

     label2:
        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.View findViewById(int)>(16909366);

        r4 = (android.widget.ImageView) $r2;

        r0.<com.android.internal.policy.PhoneWindow: android.widget.ImageView mRightIconView> = r4;

        return r4;
    }

    private android.transition.Transition getTransition(android.transition.Transition, android.transition.Transition, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.content.res.TypedArray $r1;
        android.content.Context $r2;
        android.transition.TransitionInflater $r3;
        boolean $z0;
        android.transition.TransitionSet $r4;
        int $i0, i1, i2;
        android.transition.Transition r5, r6, r7, r8;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r5 := @parameter0: android.transition.Transition;

        r6 := @parameter1: android.transition.Transition;

        i1 := @parameter2: int;

        if r5 == r6 goto label1;

        return r5;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        i2 = virtualinvoke $r1.<android.content.res.TypedArray: int getResourceId(int,int)>(i1, -1);

        r7 = r6;

        if i2 == -1 goto label2;

        r7 = r6;

        if i2 == 17760256 goto label2;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r3 = staticinvoke <android.transition.TransitionInflater: android.transition.TransitionInflater 'from'(android.content.Context)>($r2);

        r8 = virtualinvoke $r3.<android.transition.TransitionInflater: android.transition.Transition inflateTransition(int)>(i2);

        r7 = r8;

        $z0 = r8 instanceof android.transition.TransitionSet;

        if $z0 == 0 goto label2;

        r7 = r8;

        $r4 = (android.transition.TransitionSet) r8;

        $i0 = virtualinvoke $r4.<android.transition.TransitionSet: int getTransitionCount()>();

        if $i0 != 0 goto label2;

        r7 = null;

     label2:
        return r7;
    }

    private android.view.ViewRootImpl getViewRootImpl()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.ViewRootImpl r1;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl getViewRootImplOrNull()>();

        if r1 == null goto label1;

        return r1;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("view not added");

        throw $r2;
    }

    private android.view.ViewRootImpl getViewRootImplOrNull()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        return $r2;
    }

    private void hideProgressBars(android.widget.ProgressBar, android.widget.ProgressBar)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.widget.ProgressBar r1, r2;
        int i0, $i1, $i2, $i3, $i4;
        android.view.animation.Animation r3;
        android.content.Context $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.widget.ProgressBar;

        r2 := @parameter1: android.widget.ProgressBar;

        i0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getLocalFeatures()>();

        $r4 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        r3 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Animation loadAnimation(android.content.Context,int)>($r4, 17432577);

        virtualinvoke r3.<android.view.animation.Animation: void setDuration(long)>(1000L);

        $i1 = i0 & 32;

        if $i1 == 0 goto label1;

        if r2 == null goto label1;

        $i3 = virtualinvoke r2.<android.widget.ProgressBar: int getVisibility()>();

        if $i3 != 0 goto label1;

        virtualinvoke r2.<android.widget.ProgressBar: void startAnimation(android.view.animation.Animation)>(r3);

        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label1:
        $i4 = i0 & 4;

        if $i4 == 0 goto label2;

        if r1 == null goto label2;

        $i2 = virtualinvoke r1.<android.widget.ProgressBar: int getVisibility()>();

        if $i2 != 0 goto label2;

        virtualinvoke r1.<android.widget.ProgressBar: void startAnimation(android.view.animation.Animation)>(r3);

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(4);

     label2:
        return;
    }

    private void installDecor()
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i3, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, i22, $i23, $i24, i25;
        com.android.internal.policy.DecorView $r1, $r3, $r4, $r23, $r45, $r47, r48, r49, $r55;
        android.view.ViewGroup $r2, $r21, $r27, $r50;
        android.view.View $r5, $r6, r54;
        android.transition.TransitionManager $r7, $r18, $r22;
        java.lang.Boolean $r8, $r9, $r11, $r14, $r16, $r78;
        long $l1, $l4;
        byte $b2;
        android.content.res.TypedArray $r10, $r12, $r13, $r15, $r17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.content.Context $r19, $r38;
        android.transition.TransitionInflater $r20;
        java.lang.CharSequence $r24, $r30, $r43;
        android.widget.TextView $r25, $r26, r53;
        android.view.Window$Callback $r28;
        com.android.internal.widget.DecorContentParent $r29, $r31, $r32, $r33, $r35, $r36, $r37, $r41, $r42, $r44, r51;
        com.android.internal.view.menu.MenuBuilder $r34;
        android.content.pm.PackageManager $r39;
        android.graphics.drawable.Drawable $r40, $r56, r57;
        java.lang.Runnable $r46;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r52;
        android.transition.Transition $r58, $r59, $r60, $r61, $r62, $r63, $r64, $r65, $r66, $r67, $r68, $r69, $r70, $r71, $r72, $r73, $r74, $r75, $r76, $r77;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r0.<com.android.internal.policy.PhoneWindow: boolean mForceDecorInstall> = 0;

        r48 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r48 != null goto label01;

        r49 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView generateDecor(int)>(-1);

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor> = r49;

        virtualinvoke r49.<com.android.internal.policy.DecorView: void setDescendantFocusability(int)>(262144);

        $r45 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        virtualinvoke $r45.<com.android.internal.policy.DecorView: void setIsRootNamespace(boolean)>(1);

        $z7 = r0.<com.android.internal.policy.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z7 != 0 goto label02;

        $i21 = r0.<com.android.internal.policy.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        if $i21 == 0 goto label02;

        $r47 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $r46 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke $r47.<com.android.internal.policy.DecorView: void postOnAnimation(java.lang.Runnable)>($r46);

        goto label02;

     label01:
        virtualinvoke r48.<com.android.internal.policy.DecorView: void setWindow(com.android.internal.policy.PhoneWindow)>(r0);

     label02:
        $r50 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r50 != null goto label25;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup generateLayout(com.android.internal.policy.DecorView)>($r1);

        r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent> = $r2;

        $r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        virtualinvoke $r3.<com.android.internal.policy.DecorView: void makeFrameworkOptionalFitsSystemWindows()>();

        $r4 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $r5 = virtualinvoke $r4.<com.android.internal.policy.DecorView: android.view.View findViewById(int)>(16908917);

        r51 = (com.android.internal.widget.DecorContentParent) $r5;

        if r51 == null goto label14;

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent> = r51;

        $r28 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        interfaceinvoke r51.<com.android.internal.widget.DecorContentParent: void setWindowCallback(android.view.Window$Callback)>($r28);

        $r29 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r30 = interfaceinvoke $r29.<com.android.internal.widget.DecorContentParent: java.lang.CharSequence getTitle()>();

        if $r30 != null goto label03;

        $r44 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r43 = r0.<com.android.internal.policy.PhoneWindow: java.lang.CharSequence mTitle>;

        interfaceinvoke $r44.<com.android.internal.widget.DecorContentParent: void setWindowTitle(java.lang.CharSequence)>($r43);

     label03:
        i0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getLocalFeatures()>();

        i22 = 0;

     label04:
        if i22 >= 13 goto label06;

        $i19 = 1 << i22;

        $i20 = $i19 & i0;

        if $i20 == 0 goto label05;

        $r42 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r42.<com.android.internal.widget.DecorContentParent: void initFeature(int)>(i22);

     label05:
        i22 = i22 + 1;

        goto label04;

     label06:
        $r31 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $i7 = r0.<com.android.internal.policy.PhoneWindow: int mUiOptions>;

        interfaceinvoke $r31.<com.android.internal.widget.DecorContentParent: void setUiOptions(int)>($i7);

        $i8 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        $i9 = $i8 & 1;

        if $i9 != 0 goto label08;

        $i13 = r0.<com.android.internal.policy.PhoneWindow: int mIconRes>;

        if $i13 == 0 goto label07;

        $r41 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z6 = interfaceinvoke $r41.<com.android.internal.widget.DecorContentParent: boolean hasIcon()>();

        if $z6 != 0 goto label07;

        goto label08;

     label07:
        $i14 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        $i15 = $i14 & 1;

        if $i15 != 0 goto label09;

        $i16 = r0.<com.android.internal.policy.PhoneWindow: int mIconRes>;

        if $i16 != 0 goto label09;

        $r36 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z5 = interfaceinvoke $r36.<com.android.internal.widget.DecorContentParent: boolean hasIcon()>();

        if $z5 != 0 goto label09;

        $r37 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r38 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r39 = virtualinvoke $r38.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r40 = virtualinvoke $r39.<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>();

        interfaceinvoke $r37.<com.android.internal.widget.DecorContentParent: void setIcon(android.graphics.drawable.Drawable)>($r40);

        $i17 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        $i18 = $i17 | 4;

        r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags> = $i18;

        goto label09;

     label08:
        $r32 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $i10 = r0.<com.android.internal.policy.PhoneWindow: int mIconRes>;

        interfaceinvoke $r32.<com.android.internal.widget.DecorContentParent: void setIcon(int)>($i10);

     label09:
        $i23 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        $i24 = $i23 & 2;

        if $i24 != 0 goto label10;

        $i12 = r0.<com.android.internal.policy.PhoneWindow: int mLogoRes>;

        if $i12 == 0 goto label11;

        $r35 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z4 = interfaceinvoke $r35.<com.android.internal.widget.DecorContentParent: boolean hasLogo()>();

        if $z4 != 0 goto label11;

     label10:
        $r33 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $i11 = r0.<com.android.internal.policy.PhoneWindow: int mLogoRes>;

        interfaceinvoke $r33.<com.android.internal.widget.DecorContentParent: void setLogo(int)>($i11);

     label11:
        r52 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        $z8 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z8 != 0 goto label13;

        if r52 == null goto label12;

        $r34 = r52.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r34 != null goto label13;

     label12:
        $z3 = r0.<com.android.internal.policy.PhoneWindow: boolean mIsStartingWindow>;

        if $z3 != 0 goto label13;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void invalidatePanelMenu(int)>(8);

     label13:
        goto label18;

     label14:
        $r6 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.View findViewById(int)>(16908310);

        r53 = (android.widget.TextView) $r6;

        r0.<com.android.internal.policy.PhoneWindow: android.widget.TextView mTitleView> = r53;

        if r53 == null goto label18;

        $i5 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getLocalFeatures()>();

        $i6 = $i5 & 2;

        if $i6 == 0 goto label17;

        r54 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.View findViewById(int)>(16909543);

        if r54 == null goto label15;

        virtualinvoke r54.<android.view.View: void setVisibility(int)>(8);

        goto label16;

     label15:
        $r26 = r0.<com.android.internal.policy.PhoneWindow: android.widget.TextView mTitleView>;

        virtualinvoke $r26.<android.widget.TextView: void setVisibility(int)>(8);

     label16:
        $r27 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r27.<android.view.ViewGroup: void setForeground(android.graphics.drawable.Drawable)>(null);

        goto label18;

     label17:
        $r25 = r0.<com.android.internal.policy.PhoneWindow: android.widget.TextView mTitleView>;

        $r24 = r0.<com.android.internal.policy.PhoneWindow: java.lang.CharSequence mTitle>;

        virtualinvoke $r25.<android.widget.TextView: void setText(java.lang.CharSequence)>($r24);

     label18:
        $r55 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $r56 = virtualinvoke $r55.<com.android.internal.policy.DecorView: android.graphics.drawable.Drawable getBackground()>();

        if $r56 != null goto label19;

        r57 = r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundFallbackDrawable>;

        if r57 == null goto label19;

        $r23 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        virtualinvoke $r23.<com.android.internal.policy.DecorView: void setBackgroundFallback(android.graphics.drawable.Drawable)>(r57);

     label19:
        $z9 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean hasFeature(int)>(13);

        if $z9 == 0 goto label25;

        $r7 = r0.<com.android.internal.policy.PhoneWindow: android.transition.TransitionManager mTransitionManager>;

        if $r7 != null goto label21;

        $r17 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        i25 = virtualinvoke $r17.<android.content.res.TypedArray: int getResourceId(int,int)>(26, 0);

        if i25 == 0 goto label20;

        $r19 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r20 = staticinvoke <android.transition.TransitionInflater: android.transition.TransitionInflater 'from'(android.content.Context)>($r19);

        $r21 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        $r22 = virtualinvoke $r20.<android.transition.TransitionInflater: android.transition.TransitionManager inflateTransitionManager(int,android.view.ViewGroup)>(i25, $r21);

        r0.<com.android.internal.policy.PhoneWindow: android.transition.TransitionManager mTransitionManager> = $r22;

        goto label21;

     label20:
        $r18 = new android.transition.TransitionManager;

        specialinvoke $r18.<android.transition.TransitionManager: void <init>()>();

        r0.<com.android.internal.policy.PhoneWindow: android.transition.TransitionManager mTransitionManager> = $r18;

     label21:
        $r58 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mEnterTransition>;

        $r59 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r58, null, 27);

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mEnterTransition> = $r59;

        $r60 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mReturnTransition>;

        $r61 = <com.android.internal.policy.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        $r62 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r60, $r61, 39);

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mReturnTransition> = $r62;

        $r63 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mExitTransition>;

        $r64 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r63, null, 28);

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mExitTransition> = $r64;

        $r65 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mReenterTransition>;

        $r66 = <com.android.internal.policy.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        $r67 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r65, $r66, 40);

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mReenterTransition> = $r67;

        $r68 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementEnterTransition>;

        $r69 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r68, null, 29);

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementEnterTransition> = $r69;

        $r70 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementReturnTransition>;

        $r71 = <com.android.internal.policy.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        $r72 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r70, $r71, 41);

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementReturnTransition> = $r72;

        $r73 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementExitTransition>;

        $r74 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r73, null, 30);

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementExitTransition> = $r74;

        $r75 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementReenterTransition>;

        $r76 = <com.android.internal.policy.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        $r77 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getTransition(android.transition.Transition,android.transition.Transition,int)>($r75, $r76, 42);

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementReenterTransition> = $r77;

        $r78 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mAllowEnterTransitionOverlap>;

        if $r78 != null goto label22;

        $r15 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $z2 = virtualinvoke $r15.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(32, 1);

        $r16 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2);

        r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mAllowEnterTransitionOverlap> = $r16;

     label22:
        $r8 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mAllowReturnTransitionOverlap>;

        if $r8 != null goto label23;

        $r13 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $z1 = virtualinvoke $r13.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(31, 1);

        $r14 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1);

        r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mAllowReturnTransitionOverlap> = $r14;

     label23:
        $l1 = r0.<com.android.internal.policy.PhoneWindow: long mBackgroundFadeDurationMillis>;

        $b2 = $l1 cmp 0L;

        if $b2 >= 0 goto label24;

        $r12 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $i3 = virtualinvoke $r12.<android.content.res.TypedArray: int getInteger(int,int)>(36, 300);

        $l4 = (long) $i3;

        r0.<com.android.internal.policy.PhoneWindow: long mBackgroundFadeDurationMillis> = $l4;

     label24:
        $r9 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mSharedElementsUseOverlay>;

        if $r9 != null goto label25;

        $r10 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $z0 = virtualinvoke $r10.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(43, 1);

        $r11 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mSharedElementsUseOverlay> = $r11;

     label25:
        return;
    }

    private boolean isNotInstantAppAndKeyguardRestricted()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        boolean $z0, $z1, z2;
        android.app.KeyguardManager $r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r2.<android.content.pm.PackageManager: boolean isInstantApp()>();

        if $z0 != 0 goto label1;

        $r3 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.app.KeyguardManager getKeyguardManager()>();

        $z1 = virtualinvoke $r3.<android.app.KeyguardManager: boolean inKeyguardRestrictedInputMode()>();

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    private boolean isTvUserSetupComplete()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.content.ContentResolver r1, $r4;
        android.content.Context $r2, $r3;
        int $i0, $i1;
        boolean $z0, z1, z2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        r1 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        z1 = 0;

        $i0 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, "user_setup_complete", 0);

        if $i0 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r4, "tv_user_setup_complete", 0);

        if $i1 == 0 goto label3;

        z1 = 1;

     label3:
        $z0 = z2 & z1;

        return $z0;
    }

    static android.util.Pair lambda$static$0(android.view.View, android.view.WindowInsets)
    {
        android.view.WindowInsets r0, $r2, $r3;
        int $i0, $i1;
        android.util.Pair $r1, $r4;
        android.graphics.Insets $r5, r7;
        android.view.View r6;

        r6 := @parameter0: android.view.View;

        r0 := @parameter1: android.view.WindowInsets;

        $i0 = virtualinvoke r6.<android.view.View: int getWindowSystemUiVisibility()>();

        $i1 = $i0 & 1536;

        if $i1 == 0 goto label1;

        $r4 = new android.util.Pair;

        $r5 = <android.graphics.Insets: android.graphics.Insets NONE>;

        specialinvoke $r4.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, r0);

        return $r4;

     label1:
        r7 = virtualinvoke r0.<android.view.WindowInsets: android.graphics.Insets getSystemWindowInsets()>();

        $r1 = new android.util.Pair;

        $r2 = virtualinvoke r0.<android.view.WindowInsets: android.view.WindowInsets inset(android.graphics.Insets)>(r7);

        $r3 = virtualinvoke $r2.<android.view.WindowInsets: android.view.WindowInsets consumeSystemWindowInsets()>();

        specialinvoke $r1.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r7, $r3);

        return $r1;
    }

    private boolean launchDefaultSearch(android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.KeyEvent r1;
        android.view.Window$Callback r2;
        int i0, $i1, $i2, $i3;
        android.content.Context $r4, $r6, $r10;
        android.content.pm.PackageManager $r5;
        boolean $z0, $z1, $z2, z3;
        android.content.res.Resources $r7;
        android.content.res.Configuration $r8;
        android.os.Bundle $r9;
        java.lang.Object $r11;
        android.app.SearchManager $r12;
        android.view.SearchEvent $r13, r23;
        android.view.InputDevice $r14;
        java.lang.AbstractMethodError $r15;
        java.lang.StringBuilder $r16;
        java.lang.Class $r18;
        java.lang.String $r19, $r22;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.KeyEvent;

        $r4 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r5.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.leanback");

        if $z0 == 0 goto label1;

        $z2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isTvUserSetupComplete()>();

        if $z2 != 0 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r2 == null goto label6;

        $z1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z1 == 0 goto label2;

        goto label6;

     label2:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void sendCloseSystemWindows(java.lang.String)>("search");

        i0 = virtualinvoke r1.<android.view.KeyEvent: int getDeviceId()>();

        r23 = null;

        if i0 == 0 goto label3;

        $r13 = new android.view.SearchEvent;

        $r14 = staticinvoke <android.view.InputDevice: android.view.InputDevice getDevice(int)>(i0);

        specialinvoke $r13.<android.view.SearchEvent: void <init>(android.view.InputDevice)>($r14);

        r23 = $r13;

     label3:
        z3 = interfaceinvoke r2.<android.view.Window$Callback: boolean onSearchRequested(android.view.SearchEvent)>(r23);

     label4:
        goto label7;

     label5:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WindowCallback ");

        $r18 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>();

        $r19 = virtualinvoke $r18.<java.lang.Class: java.lang.String getName()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not implement method onSearchRequested(SearchEvent); fa");

        $r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PhoneWindow", $r22, $r15);

        z3 = interfaceinvoke r2.<android.view.Window$Callback: boolean onSearchRequested()>();

        goto label7;

     label6:
        z3 = 0;

     label7:
        if z3 != 0 goto label8;

        $r6 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.res.Resources getResources()>();

        $r8 = virtualinvoke $r7.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i1 = $r8.<android.content.res.Configuration: int uiMode>;

        $i2 = $i1 & 15;

        if $i2 != 4 goto label8;

        $r9 = new android.os.Bundle;

        specialinvoke $r9.<android.os.Bundle: void <init>()>();

        $i3 = virtualinvoke r1.<android.view.KeyEvent: int getDeviceId()>();

        virtualinvoke $r9.<android.os.Bundle: void putInt(java.lang.String,int)>("android.intent.extra.ASSIST_INPUT_DEVICE_ID", $i3);

        $r10 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r11 = virtualinvoke $r10.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("search");

        $r12 = (android.app.SearchManager) $r11;

        virtualinvoke $r12.<android.app.SearchManager: void launchAssist(android.os.Bundle)>($r9);

        return 1;

     label8:
        return z3;

        catch java.lang.AbstractMethodError from label3 to label4 with label5;
    }

    private android.graphics.drawable.Drawable loadImageURI(android.net.Uri)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.net.Uri r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        java.io.InputStream $r4;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        android.graphics.drawable.Drawable r10;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.net.Uri;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = virtualinvoke $r3.<android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)>(r1);

        r10 = staticinvoke <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)>($r4, null);

     label2:
        return r10;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to open content: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", $r9);

        return null;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void openPanel(com.android.internal.policy.PhoneWindow$PanelFeatureState, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1;
        android.view.WindowManager r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z7, $z8, $z9, $z10, z11, z12, $z13, $z14, $z15;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, i13, $i14, $i15, $i16;
        com.android.internal.policy.DecorView $r3, $r4, $r6, $r10, $r16, $r17, $r18, $r32, $r36;
        android.view.View $r5, $r9, $r12, $r13, $r19, $r20, $r33, $r34;
        android.content.Context $r7, r26;
        android.graphics.drawable.Drawable $r8;
        com.android.internal.policy.PhoneWindow$RotationWatcher $r11;
        android.view.ViewGroup $r14;
        android.view.ViewGroup$LayoutParams $r15, r28, r29, r30;
        com.android.internal.view.menu.MenuBuilder $r21;
        android.content.res.Resources $r22;
        android.content.res.Configuration $r23;
        android.content.pm.ApplicationInfo $r24;
        android.view.KeyEvent r25;
        android.view.Window$Callback r27;
        byte b12;
        android.view.ViewParent r31;
        android.view.WindowManager$LayoutParams $r35;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        r25 := @parameter1: android.view.KeyEvent;

        $z0 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 != 0 goto label25;

        $z1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z1 == 0 goto label01;

        goto label25;

     label01:
        $i0 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        if $i0 != 0 goto label06;

        r26 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r22 = virtualinvoke r26.<android.content.Context: android.content.res.Resources getResources()>();

        $r23 = virtualinvoke $r22.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i8 = $r23.<android.content.res.Configuration: int screenLayout>;

        $i9 = $i8 & 15;

        if $i9 != 4 goto label02;

        z11 = 1;

        goto label03;

     label02:
        z11 = 0;

     label03:
        $r24 = virtualinvoke r26.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i10 = $r24.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i10 < 11 goto label04;

        z12 = 1;

        goto label05;

     label04:
        z12 = 0;

     label05:
        if z11 == 0 goto label06;

        if z12 == 0 goto label06;

        return;

     label06:
        r27 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r27 == null goto label07;

        $i7 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        $r21 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z10 = interfaceinvoke r27.<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>($i7, $r21);

        if $z10 != 0 goto label07;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,boolean)>(r1, 1);

        return;

     label07:
        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if r2 != null goto label08;

        return;

     label08:
        $z2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean preparePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, r25);

        if $z2 != 0 goto label09;

        return;

     label09:
        $r3 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        if $r3 == null goto label12;

        $z8 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshDecorView>;

        if $z8 == 0 goto label10;

        goto label12;

     label10:
        $z9 = virtualinvoke r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isInListMode()>();

        if $z9 != 0 goto label11;

        b12 = -1;

        goto label21;

     label11:
        b12 = -2;

        $r19 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r19 == null goto label21;

        $r20 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        r28 = virtualinvoke $r20.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        b12 = -2;

        if r28 == null goto label21;

        b12 = -2;

        $i6 = r28.<android.view.ViewGroup$LayoutParams: int width>;

        if $i6 != -1 goto label21;

        b12 = -1;

        goto label21;

     label12:
        $r4 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        if $r4 != null goto label14;

        $z7 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean initializePanelDecor(com.android.internal.policy.PhoneWindow$PanelFeatureState)>(r1);

        if $z7 == 0 goto label13;

        $r18 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        if $r18 != null goto label15;

     label13:
        return;

     label14:
        $z3 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshDecorView>;

        if $z3 == 0 goto label15;

        $r16 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        $i5 = virtualinvoke $r16.<com.android.internal.policy.DecorView: int getChildCount()>();

        if $i5 <= 0 goto label15;

        $r17 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        virtualinvoke $r17.<com.android.internal.policy.DecorView: void removeAllViews()>();

     label15:
        $z13 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean initializePanelContent(com.android.internal.policy.PhoneWindow$PanelFeatureState)>(r1);

        if $z13 == 0 goto label24;

        $z4 = virtualinvoke r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean hasPanelItems()>();

        if $z4 != 0 goto label16;

        goto label24;

     label16:
        $r5 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        r29 = virtualinvoke $r5.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r30 = r29;

        if r29 != null goto label17;

        $r15 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r15.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-2, -2);

        r30 = $r15;

     label17:
        $i1 = r30.<android.view.ViewGroup$LayoutParams: int width>;

        if $i1 != -1 goto label18;

        i13 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int fullBackground>;

        b12 = -1;

        goto label19;

     label18:
        i13 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int background>;

        b12 = -2;

     label19:
        $r6 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        $r7 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r8 = virtualinvoke $r7.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i13);

        virtualinvoke $r6.<com.android.internal.policy.DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>($r8);

        $r9 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        r31 = virtualinvoke $r9.<android.view.View: android.view.ViewParent getParent()>();

        if r31 == null goto label20;

        $z6 = r31 instanceof android.view.ViewGroup;

        if $z6 == 0 goto label20;

        $r14 = (android.view.ViewGroup) r31;

        $r13 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r14.<android.view.ViewGroup: void removeView(android.view.View)>($r13);

     label20:
        $r32 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        $r33 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r32.<com.android.internal.policy.DecorView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r33, r30);

        $r34 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        $z14 = virtualinvoke $r34.<android.view.View: boolean hasFocus()>();

        if $z14 != 0 goto label21;

        $r12 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        virtualinvoke $r12.<android.view.View: boolean requestFocus()>();

     label21:
        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        $r35 = new android.view.WindowManager$LayoutParams;

        $i14 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int x>;

        $i15 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int y>;

        $r36 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        $i16 = $r36.<com.android.internal.policy.DecorView: int mDefaultOpacity>;

        specialinvoke $r35.<android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)>(b12, -2, $i14, $i15, 1003, 8519680, $i16);

        $z15 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isCompact>;

        if $z15 == 0 goto label22;

        $i4 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: int getOptionsPanelGravity()>();

        $r35.<android.view.WindowManager$LayoutParams: int gravity> = $i4;

        $r11 = <com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$RotationWatcher sRotationWatcher>;

        virtualinvoke $r11.<com.android.internal.policy.PhoneWindow$RotationWatcher: void addWindow(com.android.internal.policy.PhoneWindow)>(r0);

        goto label23;

     label22:
        $i2 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int gravity>;

        $r35.<android.view.WindowManager$LayoutParams: int gravity> = $i2;

     label23:
        $i3 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int windowAnimations>;

        $r35.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i3;

        $r10 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        interfaceinvoke r2.<android.view.WindowManager: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>($r10, $r35);

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen> = 1;

        return;

     label24:
        return;

     label25:
        return;
    }

    private void reopenMenu(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z13, $z14, z15;
        android.content.Context $r1;
        android.view.ViewConfiguration $r2;
        com.android.internal.widget.DecorContentParent $r3, $r8, $r12, $r14, r15;
        com.android.internal.view.menu.MenuBuilder $r4, $r5, $r7, $r13;
        android.view.View $r6;
        int $i0, $i1;
        java.lang.Runnable $r9, $r11;
        com.android.internal.policy.DecorView $r10;
        android.view.Window$Callback r16;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r17, r18, r19;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        r15 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r15 == null goto label6;

        $z2 = interfaceinvoke r15.<com.android.internal.widget.DecorContentParent: boolean canShowOverflowMenu()>();

        if $z2 == 0 goto label6;

        $r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r2 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r1);

        $z3 = virtualinvoke $r2.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z3 == 0 goto label1;

        $r14 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z14 = interfaceinvoke $r14.<com.android.internal.widget.DecorContentParent: boolean isOverflowMenuShowPending()>();

        if $z14 == 0 goto label6;

     label1:
        r16 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        $r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z4 = interfaceinvoke $r3.<com.android.internal.widget.DecorContentParent: boolean isOverflowMenuShowing()>();

        if $z4 == 0 goto label3;

        if z0 != 0 goto label2;

        goto label3;

     label2:
        $r12 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r12.<com.android.internal.widget.DecorContentParent: boolean hideOverflowMenu()>();

        r17 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r17 == null goto label5;

        if r16 == null goto label5;

        $z13 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z13 != 0 goto label5;

        $r13 = r17.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        interfaceinvoke r16.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>(8, $r13);

        goto label5;

     label3:
        if r16 == null goto label5;

        $z5 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z5 != 0 goto label5;

        $z6 = r0.<com.android.internal.policy.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z6 == 0 goto label4;

        $i0 = r0.<com.android.internal.policy.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        $i1 = 1 & $i0;

        if $i1 == 0 goto label4;

        $r10 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $r9 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke $r10.<com.android.internal.policy.DecorView: boolean removeCallbacks(java.lang.Runnable)>($r9);

        $r11 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        interfaceinvoke $r11.<java.lang.Runnable: void run()>();

     label4:
        r18 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r18 == null goto label5;

        $r4 = r18.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r4 == null goto label5;

        $z7 = r18.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshMenuContent>;

        if $z7 != 0 goto label5;

        $r6 = r18.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        $r5 = r18.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z8 = interfaceinvoke r16.<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>(0, $r6, $r5);

        if $z8 == 0 goto label5;

        $r7 = r18.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        interfaceinvoke r16.<android.view.Window$Callback: boolean onMenuOpened(int,android.view.Menu)>(8, $r7);

        $r8 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r8.<com.android.internal.widget.DecorContentParent: boolean showOverflowMenu()>();

     label5:
        return;

     label6:
        r19 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r19 != null goto label7;

        return;

     label7:
        z1 = r19.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        z15 = z1;

        if z0 == 0 goto label9;

        if z1 != 0 goto label8;

        z15 = 1;

        goto label9;

     label8:
        z15 = 0;

     label9:
        r19.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,boolean)>(r19, 0);

        r19.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = z15;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void openPanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r19, null);

        return;
    }

    private void restorePanelState(android.util.SparseArray)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.util.SparseArray r1;
        int i0, $i1, i2;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r2;
        java.lang.Object $r3;
        android.os.Parcelable $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.util.SparseArray;

        $i1 = virtualinvoke r1.<android.util.SparseArray: int size()>();

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label4;

        i0 = virtualinvoke r1.<android.util.SparseArray: int keyAt(int)>(i2);

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 0);

        if r2 != null goto label2;

        goto label3;

     label2:
        $r3 = virtualinvoke r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r4 = (android.os.Parcelable) $r3;

        virtualinvoke r2.<com.android.internal.policy.PhoneWindow$PanelFeatureState: void onRestoreInstanceState(android.os.Parcelable)>($r4);

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void invalidatePanelMenu(int)>(i0);

     label3:
        i2 = i2 + -1;

        goto label1;

     label4:
        return;
    }

    private void savePanelState(android.util.SparseArray)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.util.SparseArray r1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState[] r2;
        int $i0, i1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState $r3, $r4;
        android.os.Parcelable $r5;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.util.SparseArray;

        r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState[] mPanels>;

        if r2 != null goto label1;

        return;

     label1:
        $i0 = lengthof r2;

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        $r3 = r2[i1];

        if $r3 == null goto label3;

        $r4 = r2[i1];

        $r5 = virtualinvoke $r4.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.os.Parcelable onSaveInstanceState()>();

        virtualinvoke r1.<android.util.SparseArray: void put(int,java.lang.Object)>(i1, $r5);

     label3:
        i1 = i1 + -1;

        goto label2;

     label4:
        return;
    }

    public static void sendCloseSystemWindows(android.content.Context, java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;
        android.app.IActivityManager $r1;
        android.os.RemoteException $r2;
        android.content.Context r3;

        r3 := @parameter0: android.content.Context;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <android.app.ActivityManager: boolean isSystemReady()>();

        if $z0 == 0 goto label4;

     label1:
        $r1 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        interfaceinvoke $r1.<android.app.IActivityManager: void closeSystemDialogs(java.lang.String)>(r0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void showProgressBars(android.widget.ProgressBar, android.widget.ProgressBar)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.widget.ProgressBar r1, r2;
        int i0, $i1, $i2, $i3, $i4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.widget.ProgressBar;

        r2 := @parameter1: android.widget.ProgressBar;

        i0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getLocalFeatures()>();

        $i1 = i0 & 32;

        if $i1 == 0 goto label1;

        if r2 == null goto label1;

        $i3 = virtualinvoke r2.<android.widget.ProgressBar: int getVisibility()>();

        if $i3 != 4 goto label1;

        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(0);

     label1:
        $i4 = i0 & 4;

        if $i4 == 0 goto label2;

        if r1 == null goto label2;

        $i2 = virtualinvoke r1.<android.widget.ProgressBar: int getProgress()>();

        if $i2 >= 10000 goto label2;

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(0);

     label2:
        return;
    }

    private void transitionTo(android.transition.Scene)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Scene r1, $r2;
        android.transition.TransitionManager $r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.transition.Scene;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Scene mContentScene>;

        if $r2 != null goto label1;

        virtualinvoke r1.<android.transition.Scene: void enter()>();

        goto label2;

     label1:
        $r3 = r0.<com.android.internal.policy.PhoneWindow: android.transition.TransitionManager mTransitionManager>;

        virtualinvoke $r3.<android.transition.TransitionManager: void transitionTo(android.transition.Scene)>(r1);

     label2:
        r0.<com.android.internal.policy.PhoneWindow: android.transition.Scene mContentScene> = r1;

        return;
    }

    private void updateDrawable(int, com.android.internal.policy.PhoneWindow$DrawableFeatureState, boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        com.android.internal.policy.PhoneWindow$DrawableFeatureState r1;
        boolean z0, $z1;
        android.view.ViewGroup $r2;
        android.graphics.drawable.Drawable $r3, r6, r7, r8;
        android.view.Window $r4, $r5;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.policy.PhoneWindow$DrawableFeatureState;

        z0 := @parameter2: boolean;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label1;

        return;

     label1:
        i1 = 1 << i0;

        $i2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getFeatures()>();

        $i3 = $i2 & i1;

        if $i3 != 0 goto label2;

        if z0 != 0 goto label2;

        return;

     label2:
        r6 = null;

        if r1 == null goto label4;

        r7 = r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable child>;

        r8 = r7;

        if r7 != null goto label3;

        r8 = r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local>;

     label3:
        r6 = r8;

        if r8 != null goto label4;

        r6 = r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def>;

     label4:
        $i8 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getLocalFeatures()>();

        $i9 = $i8 & i1;

        if $i9 != 0 goto label6;

        $r4 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window getContainer()>();

        if $r4 == null goto label8;

        $z1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isActive()>();

        if $z1 != 0 goto label5;

        if z0 == 0 goto label8;

     label5:
        $r5 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window getContainer()>();

        virtualinvoke $r5.<android.view.Window: void setChildDrawable(int,android.graphics.drawable.Drawable)>(i0, r6);

        goto label8;

     label6:
        if r1 == null goto label8;

        $r3 = r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable cur>;

        if $r3 != r6 goto label7;

        $i7 = r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int curAlpha>;

        $i6 = r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int alpha>;

        if $i7 == $i6 goto label8;

     label7:
        r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable cur> = r6;

        $i4 = r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int alpha>;

        r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int curAlpha> = $i4;

        $i5 = r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int alpha>;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void onDrawableChanged(int,android.graphics.drawable.Drawable,int)>(i0, r6, $i5);

     label8:
        return;
    }

    private void updateInt(int, int, boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6;
        boolean z0;
        android.view.ViewGroup $r1;
        android.view.Window $r2, $r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 != null goto label1;

        return;

     label1:
        i2 = 1 << i0;

        $i3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getFeatures()>();

        $i4 = $i3 & i2;

        if $i4 != 0 goto label2;

        if z0 != 0 goto label2;

        return;

     label2:
        $i5 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getLocalFeatures()>();

        $i6 = $i5 & i2;

        if $i6 != 0 goto label3;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window getContainer()>();

        if $r2 == null goto label4;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window getContainer()>();

        virtualinvoke $r3.<android.view.Window: void setChildInt(int,int)>(i0, i1);

        goto label4;

     label3:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void onIntChanged(int,int)>(i0, i1);

     label4:
        return;
    }

    private void updateProgressBars(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.widget.ProgressBar r1, r2;
        int i0, $i2, $i4, $i7, $i10, i13, i14, $i16, $i17;
        boolean $z0;
        byte b15;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i13 := @parameter0: int;

        r1 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.widget.ProgressBar getCircularProgressBar(boolean)>(1);

        r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.widget.ProgressBar getHorizontalProgressBar(boolean)>(1);

        i0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getLocalFeatures()>();

        if i13 != -1 goto label07;

        $i10 = i0 & 4;

        if $i10 == 0 goto label05;

        if r2 == null goto label04;

        i14 = virtualinvoke r2.<android.widget.ProgressBar: int getProgress()>();

        $z0 = virtualinvoke r2.<android.widget.ProgressBar: boolean isIndeterminate()>();

        if $z0 != 0 goto label02;

        if i14 >= 10000 goto label01;

        goto label02;

     label01:
        b15 = 4;

        goto label03;

     label02:
        b15 = 0;

     label03:
        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(b15);

        goto label05;

     label04:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

     label05:
        $i16 = i0 & 32;

        if $i16 == 0 goto label22;

        if r1 == null goto label06;

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(0);

        goto label22;

     label06:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Circular progress bar not located in current window decor");

        goto label22;

     label07:
        if i13 != -2 goto label11;

        $i7 = i0 & 4;

        if $i7 == 0 goto label09;

        if r2 == null goto label08;

        virtualinvoke r2.<android.widget.ProgressBar: void setVisibility(int)>(8);

        goto label09;

     label08:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

     label09:
        $i17 = i0 & 32;

        if $i17 == 0 goto label22;

        if r1 == null goto label10;

        virtualinvoke r1.<android.widget.ProgressBar: void setVisibility(int)>(8);

        goto label22;

     label10:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Circular progress bar not located in current window decor");

        goto label22;

     label11:
        if i13 != -3 goto label13;

        if r2 == null goto label12;

        virtualinvoke r2.<android.widget.ProgressBar: void setIndeterminate(boolean)>(1);

        goto label22;

     label12:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

        goto label22;

     label13:
        if i13 != -4 goto label15;

        if r2 == null goto label14;

        virtualinvoke r2.<android.widget.ProgressBar: void setIndeterminate(boolean)>(0);

        goto label22;

     label14:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

        goto label22;

     label15:
        if i13 < 0 goto label19;

        if i13 > 10000 goto label19;

        if r2 == null goto label16;

        $i4 = i13 + 0;

        virtualinvoke r2.<android.widget.ProgressBar: void setProgress(int)>($i4);

        goto label17;

     label16:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

     label17:
        if i13 >= 10000 goto label18;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void showProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>(r2, r1);

        goto label22;

     label18:
        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void hideProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>(r2, r1);

        goto label22;

     label19:
        if 20000 > i13 goto label22;

        if i13 > 30000 goto label22;

        if r2 == null goto label20;

        $i2 = i13 - 20000;

        virtualinvoke r2.<android.widget.ProgressBar: void setSecondaryProgress(int)>($i2);

        goto label21;

     label20:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("PhoneWindow", "Horizontal progress bar not located in current window decor");

     label21:
        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void showProgressBars(android.widget.ProgressBar,android.widget.ProgressBar)>(r2, r1);

     label22:
        return;
    }

    public void addContentView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.ViewGroup$LayoutParams r1;
        android.view.ViewGroup $r2, $r3, $r4;
        boolean $z0, $z1;
        android.view.View r5;
        android.view.Window$Callback r6;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r5 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ViewGroup$LayoutParams;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label1;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void installDecor()>();

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean hasFeature(int)>(12);

        if $z0 == 0 goto label2;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("PhoneWindow", "addContentView does not support content transitions");

     label2:
        $r3 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r3.<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r5, r1);

        $r4 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r4.<android.view.ViewGroup: void requestApplyInsets()>();

        r6 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r6 == null goto label3;

        $z1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z1 != 0 goto label3;

        interfaceinvoke r6.<android.view.Window$Callback: void onContentChanged()>();

     label3:
        return;
    }

    public void addScrollCaptureCallback(android.view.ScrollCaptureCallback)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.ScrollCaptureCallback r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.ScrollCaptureCallback;

        $r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void addScrollCaptureCallback(android.view.ScrollCaptureCallback)>(r1);

        return;
    }

    public void alwaysReadCloseOnTouchAttr()
    {
        com.android.internal.policy.PhoneWindow r0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r0.<com.android.internal.policy.PhoneWindow: boolean mAlwaysReadCloseOnTouchAttr> = 1;

        return;
    }

    void checkCloseActionMenu(android.view.Menu)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.Menu r1;
        android.view.Window$Callback r2;
        boolean $z0, $z1;
        com.android.internal.widget.DecorContentParent $r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.Menu;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mClosingActionMenu>;

        if $z0 == 0 goto label1;

        return;

     label1:
        r0.<com.android.internal.policy.PhoneWindow: boolean mClosingActionMenu> = 1;

        $r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r3.<com.android.internal.widget.DecorContentParent: void dismissPopups()>();

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r2 == null goto label2;

        $z1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z1 != 0 goto label2;

        interfaceinvoke r2.<android.view.Window$Callback: void onPanelClosed(int,android.view.Menu)>(8, r1);

     label2:
        r0.<com.android.internal.policy.PhoneWindow: boolean mClosingActionMenu> = 0;

        return;
    }

    public void clearContentView()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.policy.DecorView: void clearContentView()>();

     label1:
        return;
    }

    public final void closeAllPanels()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState[] r1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r2;
        android.view.WindowManager $r3;
        int i0, i1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if $r3 != null goto label1;

        return;

     label1:
        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState[] mPanels>;

        if r1 == null goto label2;

        i0 = lengthof r1;

        goto label3;

     label2:
        i0 = 0;

     label3:
        i1 = 0;

     label4:
        if i1 >= i0 goto label6;

        r2 = r1[i1];

        if r2 == null goto label5;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,boolean)>(r2, 1);

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void closeContextMenu()>();

        return;
    }

    public final void closePanel(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        com.android.internal.widget.DecorContentParent r1, $r5;
        com.android.internal.policy.PhoneWindow$PanelFeatureState $r2;
        boolean $z0, $z1;
        android.content.Context $r3;
        android.view.ViewConfiguration $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        if i0 != 0 goto label1;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r1 == null goto label1;

        $z0 = interfaceinvoke r1.<com.android.internal.widget.DecorContentParent: boolean canShowOverflowMenu()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r3);

        $z1 = virtualinvoke $r4.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z1 != 0 goto label1;

        $r5 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r5.<com.android.internal.widget.DecorContentParent: boolean hideOverflowMenu()>();

        goto label3;

     label1:
        if i0 != 6 goto label2;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void closeContextMenu()>();

        goto label3;

     label2:
        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,boolean)>($r2, 1);

     label3:
        return;
    }

    public final void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState, boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1, $r2;
        boolean z0, $z1, $z2, $z3, $z4;
        com.android.internal.policy.DecorView $r3, $r4;
        int $i0, $i1;
        com.android.internal.policy.PhoneWindow$RotationWatcher $r5;
        com.android.internal.view.menu.MenuBuilder $r6;
        com.android.internal.widget.DecorContentParent r7;
        android.view.WindowManager r8;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label1;

        $i1 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        if $i1 != 0 goto label1;

        r7 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r7 == null goto label1;

        $z3 = interfaceinvoke r7.<com.android.internal.widget.DecorContentParent: boolean isOverflowMenuShowing()>();

        if $z3 == 0 goto label1;

        $r6 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void checkCloseActionMenu(android.view.Menu)>($r6);

        return;

     label1:
        r8 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if r8 == null goto label3;

        $z1 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z1 == 0 goto label3;

        $r3 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        if $r3 == null goto label2;

        $r4 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        interfaceinvoke r8.<android.view.ViewManager: void removeView(android.view.View)>($r4);

        $z2 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isCompact>;

        if $z2 == 0 goto label2;

        $r5 = <com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$RotationWatcher sRotationWatcher>;

        virtualinvoke $r5.<com.android.internal.policy.PhoneWindow$RotationWatcher: void removeWindow(com.android.internal.policy.PhoneWindow)>(r0);

     label2:
        if z0 == 0 goto label3;

        $i0 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void callOnPanelClosed(int,com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.Menu)>($i0, r1, null);

     label3:
        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen> = 0;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = null;

        $z4 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z4 == 0 goto label4;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = 0;

     label4:
        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if $r2 != r1 goto label5;

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel> = null;

        r0.<com.android.internal.policy.PhoneWindow: int mPanelChordingKey> = 0;

     label5:
        return;
    }

    protected void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.WindowManager$LayoutParams r2;
        com.android.internal.policy.DecorView r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r2 := @parameter0: android.view.WindowManager$LayoutParams;

        specialinvoke r0.<android.view.Window: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r2);

        r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r3 == null goto label1;

        virtualinvoke r3.<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>(null, 1);

     label1:
        return;
    }

    void doInvalidatePanelMenu(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i1;
        com.android.internal.view.menu.MenuBuilder $r2, $r5, $r6, $r7;
        com.android.internal.widget.DecorContentParent $r3;
        android.os.Bundle $r4;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r8, r9;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r8 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 0);

        if r8 != null goto label1;

        return;

     label1:
        $r2 = r8.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r2 == null goto label3;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        $r5 = r8.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r5.<com.android.internal.view.menu.MenuBuilder: void saveActionViewStates(android.os.Bundle)>($r4);

        $i1 = virtualinvoke $r4.<android.os.Bundle: int size()>();

        if $i1 <= 0 goto label2;

        r8.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState> = $r4;

     label2:
        $r6 = r8.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r6.<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>();

        $r7 = r8.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r7.<com.android.internal.view.menu.MenuBuilder: void clear()>();

     label3:
        r8.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshMenuContent> = 1;

        r8.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshDecorView> = 1;

        if i0 == 8 goto label4;

        if i0 != 0 goto label5;

     label4:
        $r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r3 == null goto label5;

        r9 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r9 == null goto label5;

        r9.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean preparePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r9, null);

     label5:
        return;
    }

    void doPendingInvalidatePanelMenu()
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean $z0;
        java.lang.Runnable $r1, $r3;
        com.android.internal.policy.DecorView $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke $r2.<com.android.internal.policy.DecorView: boolean removeCallbacks(java.lang.Runnable)>($r1);

        $r3 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        interfaceinvoke $r3.<java.lang.Runnable: void run()>();

     label1:
        return;
    }

    public com.android.internal.policy.PhoneWindow$PanelFeatureState findMenuPanel(android.view.Menu)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.Menu r1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState[] r2;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r3;
        com.android.internal.view.menu.MenuBuilder $r4;
        int i0, i1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.Menu;

        r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState[] mPanels>;

        if r2 == null goto label1;

        i0 = lengthof r2;

        goto label2;

     label1:
        i0 = 0;

     label2:
        i1 = 0;

     label3:
        if i1 >= i0 goto label5;

        r3 = r2[i1];

        if r3 == null goto label4;

        $r4 = r3.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r4 != r1 goto label4;

        return r3;

     label4:
        i1 = i1 + 1;

        goto label3;

     label5:
        return null;
    }

    protected com.android.internal.policy.DecorView generateDecor(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1;
        boolean $z0;
        com.android.internal.policy.DecorView $r2;
        android.view.WindowManager$LayoutParams $r3;
        android.content.Context $r4, r6, r7;
        com.android.internal.policy.DecorContext $r5;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mUseDecorContext>;

        if $z0 == 0 goto label3;

        $r4 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        r6 = virtualinvoke $r4.<android.content.Context: android.content.Context getApplicationContext()>();

        if r6 != null goto label1;

        r7 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        goto label2;

     label1:
        $r5 = new com.android.internal.policy.DecorContext;

        specialinvoke $r5.<com.android.internal.policy.DecorContext: void <init>(android.content.Context,com.android.internal.policy.PhoneWindow)>(r6, r0);

        i1 = r0.<com.android.internal.policy.PhoneWindow: int mTheme>;

        r7 = $r5;

        if i1 == -1 goto label2;

        virtualinvoke $r5.<android.content.Context: void setTheme(int)>(i1);

        r7 = $r5;

     label2:
        goto label4;

     label3:
        r7 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

     label4:
        $r2 = new com.android.internal.policy.DecorView;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        specialinvoke $r2.<com.android.internal.policy.DecorView: void <init>(android.content.Context,int,com.android.internal.policy.PhoneWindow,android.view.WindowManager$LayoutParams)>(r7, i0, r0, $r3);

        return $r2;
    }

    protected android.view.ViewGroup generateLayout(com.android.internal.policy.DecorView)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.WindowManager$LayoutParams r1, $r2, $r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z27, $z29, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z48, z49, $z50, $z51, $z52, $z53, z54, z55, $z56, $z57, $z58, $z59;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, i46, i47, i48, $i49, i50, $i51, i52;
        android.content.Context $r4, $r8, $r17, $r19, $r22, $r25, $r30;
        android.content.pm.ApplicationInfo $r5, $r9, $r31;
        android.util.TypedValue $r6, $r7, $r18, $r21, $r24, $r38, $r39, $r40, $r41, $r42, $r43, $r44, $r45, $r46, $r47, $r48, $r49;
        android.view.Window $r10, $r63;
        java.lang.RuntimeException $r11;
        android.graphics.drawable.Drawable $r12, $r27, $r28, $r29, r64;
        com.android.internal.policy.DecorView $r13, $r14, $r15, $r16, r50, $r52, $r57, $r58, $r66;
        float $f0, $f1, $f2;
        android.content.res.Resources$Theme $r20, $r23, $r26;
        java.lang.StringBuilder $r32;
        java.lang.String $r34, $r37;
        java.lang.UnsupportedOperationException $r36;
        android.content.res.TypedArray r51;
        android.view.LayoutInflater $r59;
        android.view.View $r60;
        android.view.ViewGroup r61;
        android.widget.ProgressBar r62;
        java.lang.CharSequence r65;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r50 := @parameter0: com.android.internal.policy.DecorView;

        r51 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.res.TypedArray getWindowStyle()>();

        $z0 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(4, 0);

        r0.<com.android.internal.policy.PhoneWindow: boolean mIsFloating> = $z0;

        $i0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getForcedWindowFlags()>();

        i46 = $i0 & 65792;

        $z1 = r0.<com.android.internal.policy.PhoneWindow: boolean mIsFloating>;

        if $z1 == 0 goto label01;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setLayout(int,int)>(-2, -2);

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setFlags(int,int)>(0, i46);

        goto label02;

     label01:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setFlags(int,int)>(65792, i46);

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        virtualinvoke $r2.<android.view.WindowManager$LayoutParams: void setFitInsetsSides(int)>(0);

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        virtualinvoke $r3.<android.view.WindowManager$LayoutParams: void setFitInsetsTypes(int)>(0);

     label02:
        $z2 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, 0);

        if $z2 == 0 goto label03;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean requestFeature(int)>(1);

        goto label04;

     label03:
        $z3 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(15, 0);

        if $z3 == 0 goto label04;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean requestFeature(int)>(8);

     label04:
        $z48 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(17, 0);

        if $z48 == 0 goto label05;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean requestFeature(int)>(9);

     label05:
        $z4 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(16, 0);

        if $z4 == 0 goto label06;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean requestFeature(int)>(10);

     label06:
        $z5 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(9, 0);

        if $z5 == 0 goto label07;

        $i44 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getForcedWindowFlags()>();

        $i45 = $i44 & 1024;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setFlags(int,int)>(1024, $i45);

     label07:
        $z6 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(23, 0);

        if $z6 == 0 goto label08;

        $i42 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getForcedWindowFlags()>();

        $i43 = $i42 & 67108864;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setFlags(int,int)>(67108864, $i43);

     label08:
        $z7 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(24, 0);

        if $z7 == 0 goto label09;

        $i40 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getForcedWindowFlags()>();

        $i41 = $i40 & 134217728;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setFlags(int,int)>(134217728, $i41);

     label09:
        $z8 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(14, 0);

        if $z8 == 0 goto label10;

        $i38 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getForcedWindowFlags()>();

        $i39 = $i38 & 1048576;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setFlags(int,int)>(1048576, $i39);

     label10:
        $r4 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i1 = $r5.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i1 < 11 goto label11;

        z49 = 1;

        goto label12;

     label11:
        z49 = 0;

     label12:
        $z9 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(18, z49);

        if $z9 == 0 goto label13;

        $i36 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getForcedWindowFlags()>();

        $i37 = $i36 & 8388608;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setFlags(int,int)>(8388608, $i37);

     label13:
        $r6 = r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mMinWidthMajor>;

        virtualinvoke r51.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(19, $r6);

        $r7 = r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mMinWidthMinor>;

        virtualinvoke r51.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(20, $r7);

        $z12 = virtualinvoke r51.<android.content.res.TypedArray: boolean hasValue(int)>(56);

        if $z12 == 0 goto label15;

        $r47 = r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedWidthMajor>;

        if $r47 != null goto label14;

        $r49 = new android.util.TypedValue;

        specialinvoke $r49.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedWidthMajor> = $r49;

     label14:
        $r48 = r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedWidthMajor>;

        virtualinvoke r51.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(56, $r48);

     label15:
        $z50 = virtualinvoke r51.<android.content.res.TypedArray: boolean hasValue(int)>(57);

        if $z50 == 0 goto label17;

        $r44 = r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedWidthMinor>;

        if $r44 != null goto label16;

        $r46 = new android.util.TypedValue;

        specialinvoke $r46.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedWidthMinor> = $r46;

     label16:
        $r45 = r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedWidthMinor>;

        virtualinvoke r51.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(57, $r45);

     label17:
        $z51 = virtualinvoke r51.<android.content.res.TypedArray: boolean hasValue(int)>(54);

        if $z51 == 0 goto label19;

        $r41 = r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedHeightMajor>;

        if $r41 != null goto label18;

        $r43 = new android.util.TypedValue;

        specialinvoke $r43.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedHeightMajor> = $r43;

     label18:
        $r42 = r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedHeightMajor>;

        virtualinvoke r51.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(54, $r42);

     label19:
        $z52 = virtualinvoke r51.<android.content.res.TypedArray: boolean hasValue(int)>(55);

        if $z52 == 0 goto label21;

        $r38 = r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedHeightMinor>;

        if $r38 != null goto label20;

        $r40 = new android.util.TypedValue;

        specialinvoke $r40.<android.util.TypedValue: void <init>()>();

        r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedHeightMinor> = $r40;

     label20:
        $r39 = r0.<com.android.internal.policy.PhoneWindow: android.util.TypedValue mFixedHeightMinor>;

        virtualinvoke r51.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(55, $r39);

     label21:
        $z53 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(25, 0);

        if $z53 == 0 goto label22;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean requestFeature(int)>(12);

     label22:
        $z13 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(44, 0);

        if $z13 == 0 goto label23;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean requestFeature(int)>(13);

     label23:
        $z14 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(5, 0);

        r0.<com.android.internal.policy.PhoneWindow: boolean mIsTranslucent> = $z14;

        $r8 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        i47 = $r9.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if i47 >= 21 goto label24;

        z54 = 1;

        goto label25;

     label24:
        z54 = 0;

     label25:
        if i47 >= 29 goto label26;

        z55 = 1;

        goto label27;

     label26:
        z55 = 0;

     label27:
        $z15 = r0.<com.android.internal.policy.PhoneWindow: boolean mForcedStatusBarColor>;

        if $z15 != 0 goto label28;

        $i35 = virtualinvoke r51.<android.content.res.TypedArray: int getColor(int,int)>(34, -16777216);

        r0.<com.android.internal.policy.PhoneWindow: int mStatusBarColor> = $i35;

     label28:
        $z16 = r0.<com.android.internal.policy.PhoneWindow: boolean mForcedNavigationBarColor>;

        if $z16 != 0 goto label29;

        $i33 = virtualinvoke r51.<android.content.res.TypedArray: int getColor(int,int)>(35, -16777216);

        r0.<com.android.internal.policy.PhoneWindow: int mNavigationBarColor> = $i33;

        $i34 = virtualinvoke r51.<android.content.res.TypedArray: int getColor(int,int)>(49, 0);

        r0.<com.android.internal.policy.PhoneWindow: int mNavigationBarDividerColor> = $i34;

     label29:
        if z55 != 0 goto label30;

        $z36 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(51, 0);

        r0.<com.android.internal.policy.PhoneWindow: boolean mEnsureStatusBarContrastWhenTransparent> = $z36;

        $z37 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(52, 1);

        r0.<com.android.internal.policy.PhoneWindow: boolean mEnsureNavigationBarContrastWhenTransparent> = $z37;

     label30:
        r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $z17 = r0.<com.android.internal.policy.PhoneWindow: boolean mIsFloating>;

        if $z17 != 0 goto label32;

        if z54 != 0 goto label31;

        $z35 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(33, 0);

        if $z35 == 0 goto label31;

        $i31 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getForcedWindowFlags()>();

        $i32 = $i31 & -2147483648;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setFlags(int,int)>(-2147483648, $i32);

     label31:
        $r52 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $z56 = $r52.<com.android.internal.policy.DecorView: boolean mForceWindowDrawsBarBackgrounds>;

        if $z56 == 0 goto label32;

        $i29 = r1.<android.view.WindowManager$LayoutParams: int privateFlags>;

        $i30 = $i29 | 131072;

        r1.<android.view.WindowManager$LayoutParams: int privateFlags> = $i30;

     label32:
        $z57 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(45, 0);

        if $z57 == 0 goto label33;

        $i27 = virtualinvoke r50.<com.android.internal.policy.DecorView: int getSystemUiVisibility()>();

        $i28 = $i27 | 8192;

        virtualinvoke r50.<com.android.internal.policy.DecorView: void setSystemUiVisibility(int)>($i28);

     label33:
        $z18 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(48, 0);

        if $z18 == 0 goto label34;

        $i25 = virtualinvoke r50.<com.android.internal.policy.DecorView: int getSystemUiVisibility()>();

        $i26 = 16 | $i25;

        virtualinvoke r50.<com.android.internal.policy.DecorView: void setSystemUiVisibility(int)>($i26);

     label34:
        $z19 = virtualinvoke r51.<android.content.res.TypedArray: boolean hasValue(int)>(50);

        if $z19 == 0 goto label36;

        i48 = virtualinvoke r51.<android.content.res.TypedArray: int getInt(int,int)>(50, -1);

        if i48 < 0 goto label35;

        if i48 > 3 goto label35;

        r1.<android.view.WindowManager$LayoutParams: int layoutInDisplayCutoutMode> = i48;

        goto label36;

     label35:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown windowLayoutInDisplayCutoutMode: ");

        $r34 = virtualinvoke r51.<android.content.res.TypedArray: java.lang.String getString(int)>(50);

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = new java.lang.UnsupportedOperationException;

        $r37 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r36.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r37);

        throw $r36;

     label36:
        $z20 = r0.<com.android.internal.policy.PhoneWindow: boolean mAlwaysReadCloseOnTouchAttr>;

        if $z20 != 0 goto label37;

        $r30 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r31 = virtualinvoke $r30.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>();

        $i24 = $r31.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

        if $i24 < 11 goto label38;

     label37:
        $z21 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(21, 0);

        if $z21 == 0 goto label38;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setCloseOnTouchOutsideIfNotSet(boolean)>(1);

     label38:
        $z58 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean hasSoftInputMode()>();

        if $z58 != 0 goto label39;

        $i22 = r1.<android.view.WindowManager$LayoutParams: int softInputMode>;

        $i23 = virtualinvoke r51.<android.content.res.TypedArray: int getInt(int,int)>(13, $i22);

        r1.<android.view.WindowManager$LayoutParams: int softInputMode> = $i23;

     label39:
        $z22 = r0.<com.android.internal.policy.PhoneWindow: boolean mIsFloating>;

        $z23 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(11, $z22);

        if $z23 == 0 goto label41;

        $i18 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getForcedWindowFlags()>();

        $i19 = $i18 & 2;

        if $i19 != 0 goto label40;

        $i20 = r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i21 = $i20 | 2;

        r1.<android.view.WindowManager$LayoutParams: int flags> = $i21;

     label40:
        $z34 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean haveDimAmount()>();

        if $z34 != 0 goto label41;

        $f2 = virtualinvoke r51.<android.content.res.TypedArray: float getFloat(int,float)>(0, 0.5F);

        r1.<android.view.WindowManager$LayoutParams: float dimAmount> = $f2;

     label41:
        $i49 = r1.<android.view.WindowManager$LayoutParams: int windowAnimations>;

        if $i49 != 0 goto label42;

        $i17 = virtualinvoke r51.<android.content.res.TypedArray: int getResourceId(int,int)>(8, 0);

        r1.<android.view.WindowManager$LayoutParams: int windowAnimations> = $i17;

     label42:
        $r10 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window getContainer()>();

        if $r10 != null goto label47;

        $r27 = r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        if $r27 != null goto label44;

        $i15 = r0.<com.android.internal.policy.PhoneWindow: int mFrameResource>;

        if $i15 != 0 goto label43;

        $i16 = virtualinvoke r51.<android.content.res.TypedArray: int getResourceId(int,int)>(2, 0);

        r0.<com.android.internal.policy.PhoneWindow: int mFrameResource> = $i16;

     label43:
        $z33 = virtualinvoke r51.<android.content.res.TypedArray: boolean hasValue(int)>(1);

        if $z33 == 0 goto label44;

        $r29 = virtualinvoke r51.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(1);

        r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable> = $r29;

     label44:
        $z59 = virtualinvoke r51.<android.content.res.TypedArray: boolean hasValue(int)>(46);

        if $z59 == 0 goto label45;

        $r28 = virtualinvoke r51.<android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)>(46);

        r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundFallbackDrawable> = $r28;

     label45:
        $z31 = r0.<com.android.internal.policy.PhoneWindow: boolean mLoadElevation>;

        if $z31 == 0 goto label46;

        $f1 = virtualinvoke r51.<android.content.res.TypedArray: float getDimension(int,float)>(37, 0.0F);

        r0.<com.android.internal.policy.PhoneWindow: float mElevation> = $f1;

     label46:
        $z32 = virtualinvoke r51.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(38, 0);

        r0.<com.android.internal.policy.PhoneWindow: boolean mClipToOutline> = $z32;

        $i14 = virtualinvoke r51.<android.content.res.TypedArray: int getColor(int,int)>(7, 0);

        r0.<com.android.internal.policy.PhoneWindow: int mTextColor> = $i14;

     label47:
        i50 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getLocalFeatures()>();

        $i51 = i50 & 24;

        if $i51 == 0 goto label50;

        $z29 = r0.<com.android.internal.policy.PhoneWindow: boolean mIsFloating>;

        if $z29 == 0 goto label48;

        $r24 = new android.util.TypedValue;

        specialinvoke $r24.<android.util.TypedValue: void <init>()>();

        $r25 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r26 = virtualinvoke $r25.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r26.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(17956911, $r24, 1);

        i52 = $r24.<android.util.TypedValue: int resourceId>;

        goto label49;

     label48:
        i52 = 17367287;

     label49:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void removeFeature(int)>(8);

        goto label59;

     label50:
        $i2 = i50 & 36;

        if $i2 == 0 goto label51;

        $i13 = i50 & 256;

        if $i13 != 0 goto label51;

        i52 = 17367283;

        goto label59;

     label51:
        $i3 = i50 & 128;

        if $i3 == 0 goto label54;

        $z27 = r0.<com.android.internal.policy.PhoneWindow: boolean mIsFloating>;

        if $z27 == 0 goto label52;

        $r21 = new android.util.TypedValue;

        specialinvoke $r21.<android.util.TypedValue: void <init>()>();

        $r22 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r23 = virtualinvoke $r22.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r23.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(17956908, $r21, 1);

        i52 = $r21.<android.util.TypedValue: int resourceId>;

        goto label53;

     label52:
        i52 = 17367282;

     label53:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void removeFeature(int)>(8);

        goto label59;

     label54:
        $i4 = i50 & 2;

        if $i4 != 0 goto label57;

        $z25 = r0.<com.android.internal.policy.PhoneWindow: boolean mIsFloating>;

        if $z25 == 0 goto label55;

        $r18 = new android.util.TypedValue;

        specialinvoke $r18.<android.util.TypedValue: void <init>()>();

        $r19 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r20 = virtualinvoke $r19.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r20.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(17956910, $r18, 1);

        i52 = $r18.<android.util.TypedValue: int resourceId>;

        goto label59;

     label55:
        $i12 = i50 & 256;

        if $i12 == 0 goto label56;

        i52 = virtualinvoke r51.<android.content.res.TypedArray: int getResourceId(int,int)>(53, 17367281);

        goto label59;

     label56:
        i52 = 17367286;

        goto label59;

     label57:
        $i5 = i50 & 1024;

        if $i5 == 0 goto label58;

        i52 = 17367285;

        goto label59;

     label58:
        i52 = 17367284;

     label59:
        $r57 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        virtualinvoke $r57.<com.android.internal.policy.DecorView: void startChanging()>();

        $r58 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $r59 = r0.<com.android.internal.policy.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        virtualinvoke $r58.<com.android.internal.policy.DecorView: void onResourcesLoaded(android.view.LayoutInflater,int)>($r59, i52);

        $r60 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.View findViewById(int)>(16908290);

        r61 = (android.view.ViewGroup) $r60;

        if r61 == null goto label66;

        $i6 = i50 & 32;

        if $i6 == 0 goto label60;

        r62 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.widget.ProgressBar getCircularProgressBar(boolean)>(0);

        if r62 == null goto label60;

        virtualinvoke r62.<android.widget.ProgressBar: void setIndeterminate(boolean)>(1);

     label60:
        $r63 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window getContainer()>();

        if $r63 != null goto label65;

        $r13 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $r12 = r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        virtualinvoke $r13.<com.android.internal.policy.DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>($r12);

        $i7 = r0.<com.android.internal.policy.PhoneWindow: int mFrameResource>;

        if $i7 == 0 goto label61;

        $r17 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $i11 = r0.<com.android.internal.policy.PhoneWindow: int mFrameResource>;

        r64 = virtualinvoke $r17.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>($i11);

        goto label62;

     label61:
        r64 = null;

     label62:
        $r14 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        virtualinvoke $r14.<com.android.internal.policy.DecorView: void setWindowFrame(android.graphics.drawable.Drawable)>(r64);

        $r15 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $f0 = r0.<com.android.internal.policy.PhoneWindow: float mElevation>;

        virtualinvoke $r15.<com.android.internal.policy.DecorView: void setElevation(float)>($f0);

        $r16 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $z24 = r0.<com.android.internal.policy.PhoneWindow: boolean mClipToOutline>;

        virtualinvoke $r16.<com.android.internal.policy.DecorView: void setClipToOutline(boolean)>($z24);

        r65 = r0.<com.android.internal.policy.PhoneWindow: java.lang.CharSequence mTitle>;

        if r65 == null goto label63;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setTitle(java.lang.CharSequence)>(r65);

     label63:
        $i8 = r0.<com.android.internal.policy.PhoneWindow: int mTitleColor>;

        if $i8 != 0 goto label64;

        $i10 = r0.<com.android.internal.policy.PhoneWindow: int mTextColor>;

        r0.<com.android.internal.policy.PhoneWindow: int mTitleColor> = $i10;

     label64:
        $i9 = r0.<com.android.internal.policy.PhoneWindow: int mTitleColor>;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setTitleColor(int)>($i9);

     label65:
        $r66 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        virtualinvoke $r66.<com.android.internal.policy.DecorView: void finishChanging()>();

        return r61;

     label66:
        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Window couldn\'t find content container view");

        throw $r11;
    }

    public boolean getAllowEnterTransitionOverlap()
    {
        com.android.internal.policy.PhoneWindow r0;
        java.lang.Boolean r1;
        boolean z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mAllowEnterTransitionOverlap>;

        if r1 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return z0;
    }

    public boolean getAllowReturnTransitionOverlap()
    {
        com.android.internal.policy.PhoneWindow r0;
        java.lang.Boolean r1;
        boolean z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mAllowReturnTransitionOverlap>;

        if r1 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return z0;
    }

    android.media.AudioManager getAudioManager()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.media.AudioManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.media.AudioManager mAudioManager>;

        if $r1 != null goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r5 = (android.media.AudioManager) $r4;

        r0.<com.android.internal.policy.PhoneWindow: android.media.AudioManager mAudioManager> = $r5;

     label1:
        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.media.AudioManager mAudioManager>;

        return $r2;
    }

    public android.transition.Scene getContentScene()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Scene $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Scene mContentScene>;

        return $r1;
    }

    public android.view.View getCurrentFocus()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView r1;
        android.view.View r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.internal.policy.DecorView: android.view.View findFocus()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    int getDecorCaptionShade()
    {
        com.android.internal.policy.PhoneWindow r0;
        int $i0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.PhoneWindow: int mDecorCaptionShade>;

        return $i0;
    }

    public final android.view.View getDecorView()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if $r1 == null goto label1;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mForceDecorInstall>;

        if $z0 == 0 goto label2;

     label1:
        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void installDecor()>();

     label2:
        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        return $r2;
    }

    public float getElevation()
    {
        com.android.internal.policy.PhoneWindow r0;
        float $f0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $f0 = r0.<com.android.internal.policy.PhoneWindow: float mElevation>;

        return $f0;
    }

    public android.transition.Transition getEnterTransition()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mEnterTransition>;

        return $r1;
    }

    public android.transition.Transition getExitTransition()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mExitTransition>;

        return $r1;
    }

    public android.view.WindowInsetsController getInsetsController()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView $r1;
        android.view.WindowInsetsController $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $r2 = virtualinvoke $r1.<com.android.internal.policy.DecorView: android.view.WindowInsetsController getWindowInsetsController()>();

        return $r2;
    }

    public android.view.LayoutInflater getLayoutInflater()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.LayoutInflater $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        return $r1;
    }

    int getLocalFeaturesPrivate()
    {
        com.android.internal.policy.PhoneWindow r0;
        int $i0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $i0 = specialinvoke r0.<android.view.Window: int getLocalFeatures()>();

        return $i0;
    }

    public android.media.session.MediaController getMediaController()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.media.session.MediaController $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaController mMediaController>;

        return $r1;
    }

    public android.view.View getNavigationBarBackgroundView()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView r1;
        android.view.View r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.internal.policy.DecorView: android.view.View getNavigationBarBackgroundView()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public int getNavigationBarColor()
    {
        com.android.internal.policy.PhoneWindow r0;
        int $i0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.PhoneWindow: int mNavigationBarColor>;

        return $i0;
    }

    public int getNavigationBarDividerColor()
    {
        com.android.internal.policy.PhoneWindow r0;
        int $i0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.PhoneWindow: int mNavigationBarDividerColor>;

        return $i0;
    }

    com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int, boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        boolean z0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean,com.android.internal.policy.PhoneWindow$PanelFeatureState)>(i0, z0, null);

        return $r1;
    }

    public android.transition.Transition getReenterTransition()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition $r1, r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r2 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mReenterTransition>;

        $r1 = <com.android.internal.policy.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        if r2 != $r1 goto label1;

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getExitTransition()>();

        goto label1;

     label1:
        return r2;
    }

    public android.transition.Transition getReturnTransition()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition $r1, r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r2 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mReturnTransition>;

        $r1 = <com.android.internal.policy.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        if r2 != $r1 goto label1;

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getEnterTransition()>();

        goto label1;

     label1:
        return r2;
    }

    public android.transition.Transition getSharedElementEnterTransition()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementEnterTransition>;

        return $r1;
    }

    public android.transition.Transition getSharedElementExitTransition()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementExitTransition>;

        return $r1;
    }

    public android.transition.Transition getSharedElementReenterTransition()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition $r1, r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r2 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementReenterTransition>;

        $r1 = <com.android.internal.policy.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        if r2 != $r1 goto label1;

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getSharedElementExitTransition()>();

        goto label1;

     label1:
        return r2;
    }

    public android.transition.Transition getSharedElementReturnTransition()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition $r1, r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r2 = r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementReturnTransition>;

        $r1 = <com.android.internal.policy.PhoneWindow: android.transition.Transition USE_DEFAULT_TRANSITION>;

        if r2 != $r1 goto label1;

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition getSharedElementEnterTransition()>();

        goto label1;

     label1:
        return r2;
    }

    public boolean getSharedElementsUseOverlay()
    {
        com.android.internal.policy.PhoneWindow r0;
        java.lang.Boolean r1;
        boolean z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mSharedElementsUseOverlay>;

        if r1 != null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

     label2:
        return z0;
    }

    public android.view.View getStatusBarBackgroundView()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView r1;
        android.view.View r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.internal.policy.DecorView: android.view.View getStatusBarBackgroundView()>();

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    public int getStatusBarColor()
    {
        com.android.internal.policy.PhoneWindow r0;
        int $i0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.PhoneWindow: int mStatusBarColor>;

        return $i0;
    }

    public java.util.List getSystemGestureExclusionRects()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.ViewRootImpl $r1;
        java.util.List $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        $r2 = virtualinvoke $r1.<android.view.ViewRootImpl: java.util.List getRootSystemGestureExclusionRects()>();

        return $r2;
    }

    public long getTransitionBackgroundFadeDuration()
    {
        com.android.internal.policy.PhoneWindow r0;
        byte $b0;
        long l1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        l1 = r0.<com.android.internal.policy.PhoneWindow: long mBackgroundFadeDurationMillis>;

        $b0 = l1 cmp 0L;

        if $b0 >= 0 goto label1;

        l1 = 300L;

        goto label1;

     label1:
        return l1;
    }

    public android.transition.TransitionManager getTransitionManager()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.TransitionManager $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.transition.TransitionManager mTransitionManager>;

        return $r1;
    }

    public int getVolumeControlStream()
    {
        com.android.internal.policy.PhoneWindow r0;
        int $i0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $i0 = r0.<com.android.internal.policy.PhoneWindow: int mVolumeControlStreamType>;

        return $i0;
    }

    protected boolean initializePanelContent(com.android.internal.policy.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1;
        int i0;
        android.view.View $r2, $r7, $r8, $r12;
        com.android.internal.view.menu.MenuBuilder $r3;
        com.android.internal.policy.PhoneWindow$PanelMenuPresenterCallback $r4, $r6, $r10, $r11;
        boolean $z0;
        android.content.Context $r5, $r9;
        com.android.internal.view.menu.MenuView r13;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        $r2 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r2 == null goto label1;

        $r12 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = $r12;

        return 1;

     label1:
        $r3 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r3 != null goto label2;

        return 0;

     label2:
        $r4 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback>;

        if $r4 != null goto label3;

        $r11 = new com.android.internal.policy.PhoneWindow$PanelMenuPresenterCallback;

        specialinvoke $r11.<com.android.internal.policy.PhoneWindow$PanelMenuPresenterCallback: void <init>(com.android.internal.policy.PhoneWindow,com.android.internal.policy.PhoneWindow$1)>(r0, null);

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback> = $r11;

     label3:
        $z0 = virtualinvoke r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isInListMode()>();

        if $z0 == 0 goto label4;

        $r9 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r10 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback>;

        r13 = virtualinvoke r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuView getListMenuView(android.content.Context,com.android.internal.view.menu.MenuPresenter$Callback)>($r9, $r10);

        goto label5;

     label4:
        $r5 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r6 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelMenuPresenterCallback mPanelMenuPresenterCallback>;

        r13 = virtualinvoke r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuView getIconMenuView(android.content.Context,com.android.internal.view.menu.MenuPresenter$Callback)>($r5, $r6);

     label5:
        $r7 = (android.view.View) r13;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View shownPanelView> = $r7;

        $r8 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View shownPanelView>;

        if $r8 == null goto label7;

        i0 = interfaceinvoke r13.<com.android.internal.view.menu.MenuView: int getWindowAnimations()>();

        if i0 == 0 goto label6;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int windowAnimations> = i0;

     label6:
        return 1;

     label7:
        return 0;
    }

    protected boolean initializePanelDecor(com.android.internal.policy.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1;
        android.content.res.TypedArray r2;
        float f0;
        int $i0, $i1;
        com.android.internal.policy.DecorView $r3, $r7;
        android.content.Context $r4, $r5;
        int[] $r6;
        byte $b2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        $i0 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView generateDecor(int)>($i0);

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView> = $r3;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int gravity> = 81;

        $r4 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        virtualinvoke r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: void setStyle(android.content.Context)>($r4);

        $r5 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r6 = <com.android.internal.R$styleable: int[] Window>;

        $i1 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int listPresenterTheme>;

        r2 = virtualinvoke $r5.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(null, $r6, 0, $i1);

        f0 = virtualinvoke r2.<android.content.res.TypedArray: float getDimension(int,float)>(37, 0.0F);

        $b2 = f0 cmpl 0.0F;

        if $b2 == 0 goto label1;

        $r7 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        virtualinvoke $r7.<com.android.internal.policy.DecorView: void setElevation(float)>(f0);

     label1:
        virtualinvoke r2.<android.content.res.TypedArray: void recycle()>();

        return 1;
    }

    protected boolean initializePanelMenu(com.android.internal.policy.PhoneWindow$PanelFeatureState)
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1;
        android.content.Context r2, r11;
        android.content.res.Resources$Theme r4, $r8, r12, r13;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.internal.widget.DecorContentParent $r5;
        android.util.TypedValue $r6;
        android.view.ContextThemeWrapper $r7;
        android.content.res.Resources $r9, $r10;
        com.android.internal.view.menu.MenuBuilder $r14;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $i0 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        if $i0 == 0 goto label1;

        r11 = r2;

        $i5 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        if $i5 != 8 goto label6;

     label1:
        r11 = r2;

        $r5 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r5 == null goto label6;

        $r6 = new android.util.TypedValue;

        specialinvoke $r6.<android.util.TypedValue: void <init>()>();

        r4 = virtualinvoke r2.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke r4.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843825, $r6, 1);

        r12 = null;

        $i1 = $r6.<android.util.TypedValue: int resourceId>;

        if $i1 == 0 goto label2;

        $r10 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        r12 = virtualinvoke $r10.<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>();

        virtualinvoke r12.<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>(r4);

        $i4 = $r6.<android.util.TypedValue: int resourceId>;

        virtualinvoke r12.<android.content.res.Resources$Theme: void applyStyle(int,boolean)>($i4, 1);

        virtualinvoke r12.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843671, $r6, 1);

        goto label3;

     label2:
        virtualinvoke r4.<android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)>(16843671, $r6, 1);

     label3:
        r13 = r12;

        $i2 = $r6.<android.util.TypedValue: int resourceId>;

        if $i2 == 0 goto label5;

        r13 = r12;

        if r12 != null goto label4;

        $r9 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        r13 = virtualinvoke $r9.<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>();

        virtualinvoke r13.<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>(r4);

     label4:
        $i3 = $r6.<android.util.TypedValue: int resourceId>;

        virtualinvoke r13.<android.content.res.Resources$Theme: void applyStyle(int,boolean)>($i3, 1);

     label5:
        r11 = r2;

        if r13 == null goto label6;

        $r7 = new android.view.ContextThemeWrapper;

        specialinvoke $r7.<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>(r2, 0);

        r11 = $r7;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources$Theme getTheme()>();

        virtualinvoke $r8.<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>(r13);

     label6:
        $r14 = new com.android.internal.view.menu.MenuBuilder;

        specialinvoke $r14.<com.android.internal.view.menu.MenuBuilder: void <init>(android.content.Context)>(r11);

        virtualinvoke $r14.<com.android.internal.view.menu.MenuBuilder: void setCallback(com.android.internal.view.menu.MenuBuilder$Callback)>(r0);

        virtualinvoke r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: void setMenu(com.android.internal.view.menu.MenuBuilder)>($r14);

        return 1;
    }

    public void injectInputEvent(android.view.InputEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.InputEvent r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.InputEvent;

        $r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void dispatchInputEvent(android.view.InputEvent)>(r1);

        return;
    }

    public void invalidatePanelMenu(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i1, $i2, $i3;
        com.android.internal.policy.DecorView r1;
        boolean $z0;
        java.lang.Runnable $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.internal.policy.PhoneWindow: int mInvalidatePanelMenuFeatures>;

        $i1 = 1 << i0;

        $i3 = $i2 | $i1;

        r0.<com.android.internal.policy.PhoneWindow: int mInvalidatePanelMenuFeatures> = $i3;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mInvalidatePanelMenuPosted>;

        if $z0 != 0 goto label1;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: java.lang.Runnable mInvalidatePanelMenuRunnable>;

        virtualinvoke r1.<com.android.internal.policy.DecorView: void postOnAnimation(java.lang.Runnable)>($r2);

        r0.<com.android.internal.policy.PhoneWindow: boolean mInvalidatePanelMenuPosted> = 1;

     label1:
        return;
    }

    public boolean isFloating()
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mIsFloating>;

        return $z0;
    }

    public boolean isNavigationBarContrastEnforced()
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mEnsureNavigationBarContrastWhenTransparent>;

        return $z0;
    }

    public boolean isShortcutKey(int, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        android.view.KeyEvent r1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r2;
        com.android.internal.view.menu.MenuBuilder $r3, $r4;
        boolean $z1, z2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        z2 = 0;

        if r2 == null goto label1;

        z2 = 0;

        $r3 = r2.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r3 == null goto label1;

        z2 = 0;

        $r4 = r2.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z1 = virtualinvoke $r4.<com.android.internal.view.menu.MenuBuilder: boolean isShortcutKey(int,android.view.KeyEvent)>(i0, r1);

        if $z1 == 0 goto label1;

        z2 = 1;

     label1:
        return z2;
    }

    boolean isShowingWallpaper()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.WindowManager$LayoutParams $r1;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $i0 = $r1.<android.view.WindowManager$LayoutParams: int flags>;

        $i1 = $i0 & 1048576;

        if $i1 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isStatusBarContrastEnforced()
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mEnsureStatusBarContrastWhenTransparent>;

        return $z0;
    }

    public boolean isTranslucent()
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mIsTranslucent>;

        return $z0;
    }

    protected void onActive()
    {
        com.android.internal.policy.PhoneWindow r0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        return;
    }

    public void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.widget.DecorContentParent $r2;
        com.android.internal.view.menu.MenuBuilder $r3;
        boolean $z0;
        android.os.Bundle $r4;
        com.android.internal.view.menu.IconMenuPresenter $r5, $r7, $r10, $r12;
        com.android.internal.view.menu.ListMenuPresenter $r6, $r8, $r9, $r11;
        android.content.res.Configuration r13;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r14;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r13 := @parameter0: android.content.res.Configuration;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r2 != null goto label6;

        r14 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r14 == null goto label6;

        $r3 = r14.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r3 == null goto label6;

        $z0 = r14.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label5;

        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        $r5 = r14.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        if $r5 == null goto label1;

        $r12 = r14.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        virtualinvoke $r12.<com.android.internal.view.menu.IconMenuPresenter: void saveHierarchyState(android.os.Bundle)>($r4);

     label1:
        $r6 = r14.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        if $r6 == null goto label2;

        $r11 = r14.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        virtualinvoke $r11.<com.android.internal.view.menu.ListMenuPresenter: void saveHierarchyState(android.os.Bundle)>($r4);

     label2:
        staticinvoke <com.android.internal.policy.PhoneWindow: void clearMenuViews(com.android.internal.policy.PhoneWindow$PanelFeatureState)>(r14);

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void reopenMenu(boolean)>(0);

        $r7 = r14.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        if $r7 == null goto label3;

        $r10 = r14.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.IconMenuPresenter iconMenuPresenter>;

        virtualinvoke $r10.<com.android.internal.view.menu.IconMenuPresenter: void restoreHierarchyState(android.os.Bundle)>($r4);

     label3:
        $r8 = r14.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        if $r8 == null goto label4;

        $r9 = r14.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.ListMenuPresenter listMenuPresenter>;

        virtualinvoke $r9.<com.android.internal.view.menu.ListMenuPresenter: void restoreHierarchyState(android.os.Bundle)>($r4);

     label4:
        goto label6;

     label5:
        staticinvoke <com.android.internal.policy.PhoneWindow: void clearMenuViews(com.android.internal.policy.PhoneWindow$PanelFeatureState)>(r14);

     label6:
        return;
    }

    protected void onDrawableChanged(int, android.graphics.drawable.Drawable, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1;
        android.graphics.drawable.Drawable r1;
        android.widget.ImageView r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        i1 := @parameter2: int;

        if i0 != 3 goto label1;

        r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.widget.ImageView getLeftIconView()>();

        goto label2;

     label1:
        if i0 != 4 goto label5;

        r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.widget.ImageView getRightIconView()>();

     label2:
        if r1 == null goto label3;

        virtualinvoke r1.<android.graphics.drawable.Drawable: void setAlpha(int)>(i1);

        virtualinvoke r2.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>(r1);

        virtualinvoke r2.<android.widget.ImageView: void setVisibility(int)>(0);

        goto label4;

     label3:
        virtualinvoke r2.<android.widget.ImageView: void setVisibility(int)>(8);

     label4:
        return;

     label5:
        return;
    }

    protected void onIntChanged(int, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1;
        android.widget.FrameLayout r1;
        android.view.View $r2;
        android.view.LayoutInflater $r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 2 goto label2;

        if i0 != 5 goto label1;

        goto label2;

     label1:
        if i0 != 7 goto label3;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.View findViewById(int)>(16909543);

        r1 = (android.widget.FrameLayout) $r2;

        if r1 == null goto label3;

        $r3 = r0.<com.android.internal.policy.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        virtualinvoke $r3.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i1, r1);

        goto label3;

     label2:
        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void updateProgressBars(int)>(i1);

     label3:
        return;
    }

    protected boolean onKeyDown(int, int, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i2, $i3, i4;
        android.view.KeyEvent r1;
        android.media.session.MediaSessionManager $r2, $r5, $r6;
        android.media.session.MediaController $r3, $r7, $r11, $r12;
        android.media.session.MediaSession$Token $r4, $r8;
        boolean $z0;
        com.android.internal.policy.DecorView r9;
        android.view.KeyEvent$DispatcherState r10;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i4 := @parameter0: int;

        i0 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        r9 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r9 == null goto label01;

        r10 = virtualinvoke r9.<com.android.internal.policy.DecorView: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>();

        goto label02;

     label01:
        r10 = null;

     label02:
        if i0 == 4 goto label11;

        if i0 == 79 goto label09;

        if i0 == 82 goto label07;

        if i0 == 130 goto label09;

        if i0 == 164 goto label04;

        if i0 == 24 goto label04;

        if i0 == 25 goto label04;

        if i0 == 126 goto label09;

        if i0 == 127 goto label09;

        tableswitch(i0)
        {
            case 85: goto label09;
            case 86: goto label09;
            case 87: goto label09;
            case 88: goto label09;
            case 89: goto label09;
            case 90: goto label09;
            case 91: goto label09;
            default: goto label03;
        };

     label03:
        goto label13;

     label04:
        $r11 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaController mMediaController>;

        if $r11 == null goto label05;

        $r6 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaSessionManager getMediaSessionManager()>();

        $r7 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaController mMediaController>;

        $r8 = virtualinvoke $r7.<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>();

        virtualinvoke $r6.<android.media.session.MediaSessionManager: void dispatchVolumeKeyEventAsSystemService(android.media.session.MediaSession$Token,android.view.KeyEvent)>($r8, r1);

        goto label06;

     label05:
        $r5 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaSessionManager getMediaSessionManager()>();

        $i3 = r0.<com.android.internal.policy.PhoneWindow: int mVolumeControlStreamType>;

        virtualinvoke $r5.<android.media.session.MediaSessionManager: void dispatchVolumeKeyEventAsSystemService(android.view.KeyEvent,int)>(r1, $i3);

     label06:
        return 1;

     label07:
        if i4 >= 0 goto label08;

        i4 = 0;

        goto label08;

     label08:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean onKeyDownPanel(int,android.view.KeyEvent)>(i4, r1);

        return 1;

     label09:
        $r12 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaController mMediaController>;

        if $r12 == null goto label10;

        $r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaSessionManager getMediaSessionManager()>();

        $r3 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaController mMediaController>;

        $r4 = virtualinvoke $r3.<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>();

        $z0 = virtualinvoke $r2.<android.media.session.MediaSessionManager: boolean dispatchMediaKeyEventAsSystemService(android.media.session.MediaSession$Token,android.view.KeyEvent)>($r4, r1);

        if $z0 == 0 goto label10;

        return 1;

     label10:
        return 0;

     label11:
        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i2 <= 0 goto label12;

        goto label13;

     label12:
        if i4 >= 0 goto label14;

     label13:
        return 0;

     label14:
        if r10 == null goto label15;

        virtualinvoke r10.<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>(r1, r0);

     label15:
        return 1;
    }

    public final boolean onKeyDownPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1, $i2;
        android.view.KeyEvent r1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r2;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        i1 = virtualinvoke r1.<android.view.KeyEvent: int getKeyCode()>();

        $i2 = virtualinvoke r1.<android.view.KeyEvent: int getRepeatCount()>();

        if $i2 != 0 goto label1;

        r0.<com.android.internal.policy.PhoneWindow: int mPanelChordingKey> = i1;

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 0);

        if r2 == null goto label1;

        $z0 = r2.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean preparePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

        return $z1;

     label1:
        return 0;
    }

    protected boolean onKeyUp(int, int, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i2, $i3, $i4, i5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        android.media.session.MediaSessionManager $r1, $r4, $r7, $r8;
        android.media.session.MediaController $r2, $r6, $r9, $r17;
        android.media.session.MediaSession$Token $r3, $r10;
        android.view.Window$WindowControllerCallback $r5;
        android.content.Context $r11;
        android.content.res.Resources $r12;
        android.content.res.Configuration $r13;
        android.view.KeyEvent r14;
        com.android.internal.policy.DecorView r15;
        android.view.KeyEvent$DispatcherState r16;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r18;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i5 := @parameter0: int;

        i0 := @parameter1: int;

        r14 := @parameter2: android.view.KeyEvent;

        r15 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r15 == null goto label01;

        r16 = virtualinvoke r15.<com.android.internal.policy.DecorView: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>();

        goto label02;

     label01:
        r16 = null;

     label02:
        if r16 == null goto label03;

        virtualinvoke r16.<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>(r14);

     label03:
        if i0 == 4 goto label19;

        if i0 == 79 goto label17;

        if i0 == 82 goto label15;

        if i0 == 130 goto label17;

        if i0 == 164 goto label14;

        if i0 == 171 goto label12;

        if i0 == 24 goto label09;

        if i0 == 25 goto label09;

        if i0 == 126 goto label17;

        if i0 == 127 goto label17;

        tableswitch(i0)
        {
            case 84: goto label05;
            case 85: goto label17;
            case 86: goto label17;
            case 87: goto label17;
            case 88: goto label17;
            case 89: goto label17;
            case 90: goto label17;
            case 91: goto label17;
            default: goto label04;
        };

     label04:
        goto label22;

     label05:
        $z6 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isNotInstantAppAndKeyguardRestricted()>();

        if $z6 == 0 goto label06;

        goto label22;

     label06:
        $r11 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r12 = virtualinvoke $r11.<android.content.Context: android.content.res.Resources getResources()>();

        $r13 = virtualinvoke $r12.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        $i3 = $r13.<android.content.res.Configuration: int uiMode>;

        $i4 = $i3 & 15;

        if $i4 != 6 goto label07;

        goto label22;

     label07:
        $z7 = virtualinvoke r14.<android.view.KeyEvent: boolean isTracking()>();

        if $z7 == 0 goto label08;

        $z8 = virtualinvoke r14.<android.view.KeyEvent: boolean isCanceled()>();

        if $z8 != 0 goto label08;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: boolean launchDefaultSearch(android.view.KeyEvent)>(r14);

     label08:
        return 1;

     label09:
        $r6 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaController mMediaController>;

        if $r6 == null goto label10;

        $r8 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaSessionManager getMediaSessionManager()>();

        $r9 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaController mMediaController>;

        $r10 = virtualinvoke $r9.<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>();

        virtualinvoke $r8.<android.media.session.MediaSessionManager: void dispatchVolumeKeyEventAsSystemService(android.media.session.MediaSession$Token,android.view.KeyEvent)>($r10, r14);

        goto label11;

     label10:
        $r7 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaSessionManager getMediaSessionManager()>();

        $i2 = r0.<com.android.internal.policy.PhoneWindow: int mVolumeControlStreamType>;

        virtualinvoke $r7.<android.media.session.MediaSessionManager: void dispatchVolumeKeyEventAsSystemService(android.view.KeyEvent,int)>(r14, $i2);

     label11:
        return 1;

     label12:
        $z4 = r0.<com.android.internal.policy.PhoneWindow: boolean mSupportsPictureInPicture>;

        if $z4 == 0 goto label13;

        $z5 = virtualinvoke r14.<android.view.KeyEvent: boolean isCanceled()>();

        if $z5 != 0 goto label13;

        $r5 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$WindowControllerCallback getWindowControllerCallback()>();

        interfaceinvoke $r5.<android.view.Window$WindowControllerCallback: void enterPictureInPictureModeIfPossible()>();

     label13:
        return 1;

     label14:
        $r4 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaSessionManager getMediaSessionManager()>();

        virtualinvoke $r4.<android.media.session.MediaSessionManager: void dispatchVolumeKeyEventAsSystemService(android.view.KeyEvent,int)>(r14, -2147483648);

        return 1;

     label15:
        if i5 >= 0 goto label16;

        i5 = 0;

        goto label16;

     label16:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void onKeyUpPanel(int,android.view.KeyEvent)>(i5, r14);

        return 1;

     label17:
        $r17 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaController mMediaController>;

        if $r17 == null goto label18;

        $r1 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaSessionManager getMediaSessionManager()>();

        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaController mMediaController>;

        $r3 = virtualinvoke $r2.<android.media.session.MediaController: android.media.session.MediaSession$Token getSessionToken()>();

        $z3 = virtualinvoke $r1.<android.media.session.MediaSessionManager: boolean dispatchMediaKeyEventAsSystemService(android.media.session.MediaSession$Token,android.view.KeyEvent)>($r3, r14);

        if $z3 == 0 goto label18;

        return 1;

     label18:
        return 0;

     label19:
        if i5 >= 0 goto label20;

        goto label22;

     label20:
        $z0 = virtualinvoke r14.<android.view.KeyEvent: boolean isTracking()>();

        if $z0 == 0 goto label22;

        $z1 = virtualinvoke r14.<android.view.KeyEvent: boolean isCanceled()>();

        if $z1 != 0 goto label22;

        if i5 != 0 goto label21;

        r18 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i5, 0);

        if r18 == null goto label21;

        $z2 = r18.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isInExpandedMode>;

        if $z2 == 0 goto label21;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void reopenMenu(boolean)>(1);

        return 1;

     label21:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void closePanel(int)>(i5);

        return 1;

     label22:
        return 0;
    }

    public final void onKeyUpPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11, z12;
        android.content.Context $r2, $r4;
        java.lang.Object $r3;
        android.view.ViewConfiguration $r5;
        com.android.internal.widget.DecorContentParent $r6, $r7, $r8, r12;
        android.view.ActionMode $r9;
        android.view.KeyEvent r10;
        com.android.internal.policy.DecorView r11;
        android.media.AudioManager r13;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r10 := @parameter1: android.view.KeyEvent;

        $i1 = r0.<com.android.internal.policy.PhoneWindow: int mPanelChordingKey>;

        if $i1 == 0 goto label11;

        r0.<com.android.internal.policy.PhoneWindow: int mPanelChordingKey> = 0;

        r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 0);

        $z1 = virtualinvoke r10.<android.view.KeyEvent: boolean isCanceled()>();

        if $z1 != 0 goto label10;

        r11 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r11 == null goto label01;

        $r9 = r11.<com.android.internal.policy.DecorView: android.view.ActionMode mPrimaryActionMode>;

        if $r9 != null goto label10;

     label01:
        if r1 != null goto label02;

        goto label10;

     label02:
        if i0 != 0 goto label04;

        r12 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r12 == null goto label04;

        $z5 = interfaceinvoke r12.<com.android.internal.widget.DecorContentParent: boolean canShowOverflowMenu()>();

        if $z5 == 0 goto label04;

        $r4 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r5 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r4);

        $z6 = virtualinvoke $r5.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z6 != 0 goto label04;

        $r6 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $z7 = interfaceinvoke $r6.<com.android.internal.widget.DecorContentParent: boolean isOverflowMenuShowing()>();

        if $z7 != 0 goto label03;

        z10 = 0;

        $z8 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z8 != 0 goto label08;

        z10 = 0;

        $z9 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean preparePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, r10);

        if $z9 == 0 goto label08;

        $r8 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        z10 = interfaceinvoke $r8.<com.android.internal.widget.DecorContentParent: boolean showOverflowMenu()>();

        goto label08;

     label03:
        $r7 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        z10 = interfaceinvoke $r7.<com.android.internal.widget.DecorContentParent: boolean hideOverflowMenu()>();

        goto label08;

     label04:
        $z11 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z11 != 0 goto label07;

        $z2 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isHandled>;

        if $z2 == 0 goto label05;

        goto label07;

     label05:
        z10 = 0;

        $z3 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z3 == 0 goto label08;

        z12 = 1;

        $z4 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshMenuContent>;

        if $z4 == 0 goto label06;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isPrepared> = 0;

        z12 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean preparePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, r10);

     label06:
        z10 = 0;

        if z12 == 0 goto label08;

        staticinvoke <android.util.EventLog: int writeEvent(int,int)>(50001, 0);

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void openPanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, r10);

        z10 = 1;

        goto label08;

     label07:
        z10 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen>;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,boolean)>(r1, 1);

     label08:
        if z10 == 0 goto label11;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        r13 = (android.media.AudioManager) $r3;

        if r13 == null goto label09;

        virtualinvoke r13.<android.media.AudioManager: void playSoundEffect(int)>(0);

        goto label11;

     label09:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", "Couldn\'t get audio manager");

        goto label11;

     label10:
        return;

     label11:
        return;
    }

    public boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder, android.view.MenuItem)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.MenuItem r1;
        android.view.Window$Callback r2;
        boolean $z0, $z1;
        com.android.internal.view.menu.MenuBuilder $r3, r4;
        int $i0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r5;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r4 := @parameter0: com.android.internal.view.menu.MenuBuilder;

        r1 := @parameter1: android.view.MenuItem;

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r2 == null goto label1;

        $z0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z0 != 0 goto label1;

        $r3 = virtualinvoke r4.<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()>();

        r5 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState findMenuPanel(android.view.Menu)>($r3);

        if r5 == null goto label1;

        $i0 = r5.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        $z1 = interfaceinvoke r2.<android.view.Window$Callback: boolean onMenuItemSelected(int,android.view.MenuItem)>($i0, r1);

        return $z1;

     label1:
        return 0;
    }

    public void onMenuModeChange(com.android.internal.view.menu.MenuBuilder)
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.view.menu.MenuBuilder r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: com.android.internal.view.menu.MenuBuilder;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void reopenMenu(boolean)>(1);

        return;
    }

    public void onMultiWindowModeChanged()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView r1;
        android.content.Context $r2;
        android.content.res.Resources $r3;
        android.content.res.Configuration $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r4 = virtualinvoke $r3.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

        virtualinvoke r1.<com.android.internal.policy.DecorView: void onConfigurationChanged(android.content.res.Configuration)>($r4);

     label1:
        return;
    }

    void onOptionsPanelRotationChanged()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1;
        android.view.WindowManager r2;
        com.android.internal.policy.DecorView $r3, $r4, $r5;
        int $i0;
        android.view.ViewGroup$LayoutParams $r6;
        android.view.WindowManager$LayoutParams r7;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(0, 0);

        if r1 != null goto label1;

        return;

     label1:
        $r3 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        if $r3 == null goto label2;

        $r5 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        $r6 = virtualinvoke $r5.<com.android.internal.policy.DecorView: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r7 = (android.view.WindowManager$LayoutParams) $r6;

        goto label3;

     label2:
        r7 = null;

     label3:
        if r7 == null goto label4;

        $i0 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: int getOptionsPanelGravity()>();

        r7.<android.view.WindowManager$LayoutParams: int gravity> = $i0;

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager getWindowManager()>();

        if r2 == null goto label4;

        $r4 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.policy.DecorView decorView>;

        interfaceinvoke r2.<android.view.ViewManager: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>($r4, r7);

     label4:
        return;
    }

    public void onPictureInPictureModeChanged(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;
        com.android.internal.policy.DecorView r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.policy.DecorView: void updatePictureInPictureOutlineProvider(boolean)>(z0);

     label1:
        return;
    }

    void onViewRootImplSet(android.view.ViewRootImpl)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.ViewRootImpl r1;
        android.view.ViewRootImpl$ActivityConfigCallback $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.ViewRootImpl;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl$ActivityConfigCallback mActivityConfigCallback>;

        virtualinvoke r1.<android.view.ViewRootImpl: void setActivityConfigCallback(android.view.ViewRootImpl$ActivityConfigCallback)>($r2);

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void applyDecorFitsSystemWindows()>();

        return;
    }

    public final void openPanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        android.view.KeyEvent r1;
        com.android.internal.widget.DecorContentParent r2, $r5;
        boolean $z0, $z1;
        android.content.Context $r3;
        android.view.ViewConfiguration $r4;
        com.android.internal.policy.PhoneWindow$PanelFeatureState $r6;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        if i0 != 0 goto label1;

        r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r2 == null goto label1;

        $z0 = interfaceinvoke r2.<com.android.internal.widget.DecorContentParent: boolean canShowOverflowMenu()>();

        if $z0 == 0 goto label1;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r4 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r3);

        $z1 = virtualinvoke $r4.<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>();

        if $z1 != 0 goto label1;

        $r5 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r5.<com.android.internal.widget.DecorContentParent: boolean showOverflowMenu()>();

        goto label2;

     label1:
        $r6 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void openPanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>($r6, r1);

     label2:
        return;
    }

    void openPanelsAfterRestore()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState[] r1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r2;
        int $i0, i1;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState[] mPanels>;

        if r1 != null goto label1;

        return;

     label1:
        $i0 = lengthof r1;

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label4;

        r2 = r1[i1];

        if r2 == null goto label3;

        virtualinvoke r2.<com.android.internal.policy.PhoneWindow$PanelFeatureState: void applyFrozenState()>();

        $z0 = r2.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 != 0 goto label3;

        $z1 = r2.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean wasLastOpen>;

        if $z1 == 0 goto label3;

        $z2 = r2.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean wasLastExpanded>;

        r2.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isInExpandedMode> = $z2;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void openPanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, null);

     label3:
        i1 = i1 + -1;

        goto label2;

     label4:
        return;
    }

    public final android.view.View peekDecorView()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        return $r1;
    }

    public boolean performContextMenuIdentifierAction(int, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1;
        com.android.internal.view.menu.ContextMenuBuilder r1;
        boolean z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.view.menu.ContextMenuBuilder mContextMenu>;

        if r1 == null goto label1;

        z0 = virtualinvoke r1.<com.android.internal.view.menu.ContextMenuBuilder: boolean performIdentifierAction(int,int)>(i0, i1);

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean performPanelIdentifierAction(int, int, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1, i2;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1;
        boolean z0, $z1;
        android.view.KeyEvent $r2;
        com.android.internal.view.menu.MenuBuilder $r3, $r4;
        com.android.internal.widget.DecorContentParent $r5;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $r2 = new android.view.KeyEvent;

        specialinvoke $r2.<android.view.KeyEvent: void <init>(int,int)>(0, 82);

        $z1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean preparePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, $r2);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r3 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r3 != null goto label2;

        return 0;

     label2:
        $r4 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        z0 = virtualinvoke $r4.<com.android.internal.view.menu.MenuBuilder: boolean performIdentifierAction(int,int)>(i1, i2);

        $r5 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r5 != null goto label3;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,boolean)>(r1, 1);

     label3:
        return z0;
    }

    public boolean performPanelShortcut(int, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1, i2;
        android.view.KeyEvent r1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.view.KeyEvent;

        i2 := @parameter3: int;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 0);

        $z0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean performPanelShortcut(com.android.internal.policy.PhoneWindow$PanelFeatureState,int,android.view.KeyEvent,int)>($r2, i1, r1, i2);

        return $z0;
    }

    boolean performPanelShortcut(com.android.internal.policy.PhoneWindow$PanelFeatureState, int, android.view.KeyEvent, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r1;
        int i0, i1, $i2;
        android.view.KeyEvent r2;
        boolean $z1, $z2, $z3, z4;
        com.android.internal.view.menu.MenuBuilder $r3, $r5;
        com.android.internal.widget.DecorContentParent $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        i0 := @parameter1: int;

        r2 := @parameter2: android.view.KeyEvent;

        i1 := @parameter3: int;

        $z1 = virtualinvoke r2.<android.view.KeyEvent: boolean isSystem()>();

        if $z1 != 0 goto label5;

        if r1 != null goto label1;

        goto label5;

     label1:
        $z2 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z2 != 0 goto label2;

        z4 = 0;

        $z3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean preparePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r1, r2);

        if $z3 == 0 goto label3;

     label2:
        z4 = 0;

        $r3 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r3 == null goto label3;

        $r5 = r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        z4 = virtualinvoke $r5.<com.android.internal.view.menu.MenuBuilder: boolean performShortcut(int,android.view.KeyEvent,int)>(i0, r2, i1);

     label3:
        if z4 == 0 goto label4;

        r1.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isHandled> = 1;

        $i2 = i1 & 1;

        if $i2 != 0 goto label4;

        $r4 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r4 != null goto label4;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,boolean)>(r1, 1);

     label4:
        return z4;

     label5:
        return 0;
    }

    public final boolean preparePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.Window$Callback r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6;
        com.android.internal.view.menu.MenuBuilder $r2, $r3, $r5, $r6, $r8, $r11, $r12, $r15, $r19, $r22, $r29, $r31;
        com.android.internal.policy.PhoneWindow$ActionMenuPresenterCallback $r4, $r13, $r17, $r18, $r21;
        android.os.Bundle $r7, $r14;
        android.view.View $r9, $r23, $r28;
        android.view.KeyCharacterMap $r10;
        com.android.internal.widget.DecorContentParent $r16, $r20, r27, r30, r32;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r24, r26;
        android.view.KeyEvent r25;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r24 := @parameter0: com.android.internal.policy.PhoneWindow$PanelFeatureState;

        r25 := @parameter1: android.view.KeyEvent;

        $z0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z0 == 0 goto label01;

        return 0;

     label01:
        $z1 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isPrepared>;

        if $z1 == 0 goto label02;

        return 1;

     label02:
        r26 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel>;

        if r26 == null goto label03;

        if r26 == r24 goto label03;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,boolean)>(r26, 0);

     label03:
        r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r1 == null goto label04;

        $i5 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        $r23 = interfaceinvoke r1.<android.view.Window$Callback: android.view.View onCreatePanelView(int)>($i5);

        r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View createdPanelView> = $r23;

     label04:
        $i0 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        if $i0 == 0 goto label06;

        $i4 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        if $i4 != 8 goto label05;

        goto label06;

     label05:
        z7 = 0;

        goto label07;

     label06:
        z7 = 1;

     label07:
        if z7 == 0 goto label08;

        r27 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r27 == null goto label08;

        interfaceinvoke r27.<com.android.internal.widget.DecorContentParent: void setMenuPrepared()>();

     label08:
        $r28 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        if $r28 != null goto label25;

        $r2 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r2 == null goto label09;

        $z6 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshMenuContent>;

        if $z6 == 0 goto label15;

     label09:
        $r3 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r3 != null goto label11;

        $z5 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean initializePanelMenu(com.android.internal.policy.PhoneWindow$PanelFeatureState)>(r24);

        if $z5 == 0 goto label10;

        $r22 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        if $r22 != null goto label11;

     label10:
        return 0;

     label11:
        if z7 == 0 goto label13;

        $r16 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r16 == null goto label13;

        $r17 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        if $r17 != null goto label12;

        $r21 = new com.android.internal.policy.PhoneWindow$ActionMenuPresenterCallback;

        specialinvoke $r21.<com.android.internal.policy.PhoneWindow$ActionMenuPresenterCallback: void <init>(com.android.internal.policy.PhoneWindow,com.android.internal.policy.PhoneWindow$1)>(r0, null);

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback> = $r21;

     label12:
        $r20 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r19 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $r18 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        interfaceinvoke $r20.<com.android.internal.widget.DecorContentParent: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)>($r19, $r18);

     label13:
        $r29 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r29.<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>();

        if r1 == null goto label23;

        $i1 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        $r5 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z2 = interfaceinvoke r1.<android.view.Window$Callback: boolean onCreatePanelMenu(int,android.view.Menu)>($i1, $r5);

        if $z2 != 0 goto label14;

        goto label23;

     label14:
        r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean refreshMenuContent> = 0;

     label15:
        $r6 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r6.<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>();

        $r7 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState>;

        if $r7 == null goto label16;

        $r15 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $r14 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState>;

        virtualinvoke $r15.<com.android.internal.view.menu.MenuBuilder: void restoreActionViewStates(android.os.Bundle)>($r14);

        r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.os.Bundle frozenActionViewState> = null;

     label16:
        $i2 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: int featureId>;

        $r9 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: android.view.View createdPanelView>;

        $r8 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z3 = interfaceinvoke r1.<android.view.Window$Callback: boolean onPreparePanel(int,android.view.View,android.view.Menu)>($i2, $r9, $r8);

        if $z3 != 0 goto label18;

        if z7 == 0 goto label17;

        r30 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r30 == null goto label17;

        $r13 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        interfaceinvoke r30.<com.android.internal.widget.DecorContentParent: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)>(null, $r13);

     label17:
        $r31 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r31.<com.android.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>();

        return 0;

     label18:
        if r25 == null goto label19;

        i6 = virtualinvoke r25.<android.view.KeyEvent: int getDeviceId()>();

        goto label20;

     label19:
        i6 = -1;

     label20:
        $r10 = staticinvoke <android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>(i6);

        $i3 = virtualinvoke $r10.<android.view.KeyCharacterMap: int getKeyboardType()>();

        if $i3 == 1 goto label21;

        z8 = 1;

        goto label22;

     label21:
        z8 = 0;

     label22:
        r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean qwertyMode> = z8;

        $r11 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        $z4 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean qwertyMode>;

        virtualinvoke $r11.<com.android.internal.view.menu.MenuBuilder: void setQwertyMode(boolean)>($z4);

        $r12 = r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: com.android.internal.view.menu.MenuBuilder menu>;

        virtualinvoke $r12.<com.android.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>();

        goto label25;

     label23:
        virtualinvoke r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: void setMenu(com.android.internal.view.menu.MenuBuilder)>(null);

        if z7 == 0 goto label24;

        r32 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r32 == null goto label24;

        $r4 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$ActionMenuPresenterCallback mActionMenuPresenterCallback>;

        interfaceinvoke r32.<com.android.internal.widget.DecorContentParent: void setMenu(android.view.Menu,com.android.internal.view.menu.MenuPresenter$Callback)>(null, $r4);

     label24:
        return 0;

     label25:
        r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isPrepared> = 1;

        r24.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isHandled> = 0;

        r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState mPreparedPanel> = r24;

        return 1;
    }

    public void removeScrollCaptureCallback(android.view.ScrollCaptureCallback)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.ScrollCaptureCallback r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.ScrollCaptureCallback;

        $r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void removeScrollCaptureCallback(android.view.ScrollCaptureCallback)>(r1);

        return;
    }

    public void reportActivityRelaunched()
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView r1, $r3;
        android.view.ViewRootImpl $r2, $r4;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        if $r2 == null goto label1;

        $r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $r4 = virtualinvoke $r3.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r4.<android.view.ViewRootImpl: void reportActivityRelaunched()>();

     label1:
        return;
    }

    public boolean requestFeature(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2;
        android.util.AndroidRuntimeException $r1, $r4, $r5;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.internal.policy.PhoneWindow: boolean mContentParentExplicitlySet>;

        if $z0 != 0 goto label7;

        i1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: int getFeatures()>();

        $i3 = 1 << i0;

        i2 = $i3 | i1;

        $i4 = i2 & 128;

        if $i4 == 0 goto label2;

        $i7 = i2 & -13506;

        if $i7 != 0 goto label1;

        goto label2;

     label1:
        $r5 = new android.util.AndroidRuntimeException;

        specialinvoke $r5.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("You cannot combine custom titles with other title features");

        throw $r5;

     label2:
        $i5 = i1 & 2;

        if $i5 == 0 goto label3;

        if i0 != 8 goto label3;

        return 0;

     label3:
        $i6 = i1 & 256;

        if $i6 == 0 goto label4;

        if i0 != 1 goto label4;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void removeFeature(int)>(8);

     label4:
        if i0 != 5 goto label6;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z2 = virtualinvoke $r3.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.type.watch");

        if $z2 != 0 goto label5;

        goto label6;

     label5:
        $r4 = new android.util.AndroidRuntimeException;

        specialinvoke $r4.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("You cannot use indeterminate progress on a watch.");

        throw $r4;

     label6:
        $z1 = specialinvoke r0.<android.view.Window: boolean requestFeature(int)>(i0);

        return $z1;

     label7:
        $r1 = new android.util.AndroidRuntimeException;

        specialinvoke $r1.<android.util.AndroidRuntimeException: void <init>(java.lang.String)>("requestFeature() must be called before adding content");

        throw $r1;
    }

    public void requestScrollCapture(android.view.IScrollCaptureController)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.IScrollCaptureController r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.IScrollCaptureController;

        $r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void dispatchScrollCaptureRequest(android.view.IScrollCaptureController)>(r1);

        return;
    }

    public void restoreHierarchyState(android.os.Bundle)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        android.view.ViewGroup $r1, $r4, $r10;
        com.android.internal.widget.DecorContentParent $r2, $r3;
        java.lang.StringBuilder $r5;
        java.lang.String $r9;
        android.os.Bundle r11;
        android.util.SparseArray r12, r15, r16;
        android.view.View r13;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r11 := @parameter0: android.os.Bundle;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r1 != null goto label1;

        return;

     label1:
        r12 = virtualinvoke r11.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:views");

        if r12 == null goto label2;

        $r10 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r10.<android.view.ViewGroup: void restoreHierarchyState(android.util.SparseArray)>(r12);

     label2:
        i0 = virtualinvoke r11.<android.os.Bundle: int getInt(java.lang.String,int)>("android:focusedViewId", -1);

        if i0 == -1 goto label4;

        $r4 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        r13 = virtualinvoke $r4.<android.view.ViewGroup: android.view.View findViewById(int)>(i0);

        if r13 == null goto label3;

        virtualinvoke r13.<android.view.View: boolean requestFocus()>();

        goto label4;

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Previously focused view reported id ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" during save, but can\'t be found during restore.");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", $r9);

     label4:
        r15 = virtualinvoke r11.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:Panels");

        if r15 == null goto label5;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void restorePanelState(android.util.SparseArray)>(r15);

     label5:
        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r2 == null goto label7;

        r16 = virtualinvoke r11.<android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)>("android:ActionBar");

        if r16 == null goto label6;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void doPendingInvalidatePanelMenu()>();

        $r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r3.<com.android.internal.widget.DecorContentParent: void restoreToolbarHierarchyState(android.util.SparseArray)>(r16);

        goto label7;

     label6:
        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>("PhoneWindow", "Missing saved instance states for action bar views! State will not be restored.");

     label7:
        return;
    }

    public android.os.Bundle saveHierarchyState()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.os.Bundle $r2;
        android.view.ViewGroup $r3, $r5, $r6;
        android.util.SparseArray $r4, $r8, $r12;
        com.android.internal.widget.DecorContentParent $r7, $r9;
        int $i0, $i1, $i2;
        android.view.View r11;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        $r3 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r3 != null goto label1;

        return $r2;

     label1:
        $r4 = new android.util.SparseArray;

        specialinvoke $r4.<android.util.SparseArray: void <init>()>();

        $r5 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r5.<android.view.ViewGroup: void saveHierarchyState(android.util.SparseArray)>($r4);

        virtualinvoke $r2.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:views", $r4);

        $r6 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        r11 = virtualinvoke $r6.<android.view.ViewGroup: android.view.View findFocus()>();

        if r11 == null goto label2;

        $i0 = virtualinvoke r11.<android.view.View: int getId()>();

        if $i0 == -1 goto label2;

        $i1 = virtualinvoke r11.<android.view.View: int getId()>();

        virtualinvoke $r2.<android.os.Bundle: void putInt(java.lang.String,int)>("android:focusedViewId", $i1);

     label2:
        $r12 = new android.util.SparseArray;

        specialinvoke $r12.<android.util.SparseArray: void <init>()>();

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void savePanelState(android.util.SparseArray)>($r12);

        $i2 = virtualinvoke $r12.<android.util.SparseArray: int size()>();

        if $i2 <= 0 goto label3;

        virtualinvoke $r2.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:Panels", $r12);

     label3:
        $r7 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if $r7 == null goto label4;

        $r8 = new android.util.SparseArray;

        specialinvoke $r8.<android.util.SparseArray: void <init>()>();

        $r9 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r9.<com.android.internal.widget.DecorContentParent: void saveToolbarHierarchyState(android.util.SparseArray)>($r8);

        virtualinvoke $r2.<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>("android:ActionBar", $r8);

     label4:
        return $r2;
    }

    void sendCloseSystemWindows()
    {
        com.android.internal.policy.PhoneWindow r0;
        android.content.Context $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        $r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        staticinvoke <com.android.internal.policy.PhoneWindow: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r1, null);

        return;
    }

    void sendCloseSystemWindows(java.lang.String)
    {
        com.android.internal.policy.PhoneWindow r0;
        java.lang.String r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        staticinvoke <com.android.internal.policy.PhoneWindow: void sendCloseSystemWindows(android.content.Context,java.lang.String)>($r2, r1);

        return;
    }

    public void setAllowEnterTransitionOverlap(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mAllowEnterTransitionOverlap> = $r1;

        return;
    }

    public void setAllowReturnTransitionOverlap(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mAllowReturnTransitionOverlap> = $r1;

        return;
    }

    public void setAttributes(android.view.WindowManager$LayoutParams)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.WindowManager$LayoutParams r1;
        com.android.internal.policy.DecorView r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.WindowManager$LayoutParams;

        specialinvoke r0.<android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)>(r1);

        r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.internal.policy.DecorView: void updateLogTag(android.view.WindowManager$LayoutParams)>(r1);

     label1:
        return;
    }

    public final void setBackgroundDrawable(android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.PhoneWindow r0;
        com.android.internal.policy.DecorView r1, r4;
        android.graphics.drawable.Drawable $r2, r3, r5, r6;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r3 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable>;

        if r3 == $r2 goto label3;

        r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundDrawable> = r3;

        r4 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r4 == null goto label3;

        virtualinvoke r4.<com.android.internal.policy.DecorView: void setWindowBackground(android.graphics.drawable.Drawable)>(r3);

        r5 = r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable mBackgroundFallbackDrawable>;

        if r5 == null goto label3;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r3 == null goto label1;

        r6 = null;

        goto label2;

     label1:
        r6 = r5;

     label2:
        virtualinvoke r1.<com.android.internal.policy.DecorView: void setBackgroundFallback(android.graphics.drawable.Drawable)>(r6);

     label3:
        return;
    }

    public final void setChildDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        android.graphics.drawable.Drawable r1;
        com.android.internal.policy.PhoneWindow$DrawableFeatureState r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable child> = r1;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void updateDrawable(int,com.android.internal.policy.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

        return;
    }

    public final void setChildInt(int, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void updateInt(int,int,boolean)>(i0, i1, 0);

        return;
    }

    public final void setClipToOutline(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;
        com.android.internal.policy.DecorView r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.PhoneWindow: boolean mClipToOutline> = z0;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.policy.DecorView: void setClipToOutline(boolean)>(z0);

     label1:
        return;
    }

    public final void setContainer(android.view.Window)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.Window r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.Window;

        specialinvoke r0.<android.view.Window: void setContainer(android.view.Window)>(r1);

        return;
    }

    public void setContentView(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        android.view.Window$Callback r1;
        android.view.ViewGroup $r2, $r3, $r6, $r7, $r10;
        boolean $z0, $z1, $z2;
        android.view.LayoutInflater $r4;
        android.content.Context $r8;
        android.transition.Scene $r9;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label1;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void installDecor()>();

        goto label2;

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean hasFeature(int)>(12);

        if $z0 != 0 goto label2;

        $r10 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r10.<android.view.ViewGroup: void removeAllViews()>();

     label2:
        $z2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean hasFeature(int)>(12);

        if $z2 == 0 goto label3;

        $r7 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        $r8 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r9 = staticinvoke <android.transition.Scene: android.transition.Scene getSceneForLayout(android.view.ViewGroup,int,android.content.Context)>($r7, i0, $r8);

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void transitionTo(android.transition.Scene)>($r9);

        goto label4;

     label3:
        $r4 = r0.<com.android.internal.policy.PhoneWindow: android.view.LayoutInflater mLayoutInflater>;

        $r3 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r4.<android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)>(i0, $r3);

     label4:
        $r6 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r6.<android.view.ViewGroup: void requestApplyInsets()>();

        r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r1 == null goto label5;

        $z1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z1 != 0 goto label5;

        interfaceinvoke r1.<android.view.Window$Callback: void onContentChanged()>();

     label5:
        r0.<com.android.internal.policy.PhoneWindow: boolean mContentParentExplicitlySet> = 1;

        return;
    }

    public void setContentView(android.view.View)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.View r1;
        android.view.ViewGroup$LayoutParams $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.View;

        $r2 = new android.view.ViewGroup$LayoutParams;

        specialinvoke $r2.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>(-1, -1);

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>(r1, $r2);

        return;
    }

    public void setContentView(android.view.View, android.view.ViewGroup$LayoutParams)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.ViewGroup$LayoutParams r1;
        android.view.ViewGroup $r2, $r3, $r4, $r6, $r7;
        boolean $z0, $z1, $z2;
        android.transition.Scene $r5;
        android.view.View r8;
        android.view.Window$Callback r9;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r8 := @parameter0: android.view.View;

        r1 := @parameter1: android.view.ViewGroup$LayoutParams;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        if $r2 != null goto label1;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void installDecor()>();

        goto label2;

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean hasFeature(int)>(12);

        if $z0 != 0 goto label2;

        $r7 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r7.<android.view.ViewGroup: void removeAllViews()>();

     label2:
        $z2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean hasFeature(int)>(12);

        if $z2 == 0 goto label3;

        virtualinvoke r8.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r1);

        $r5 = new android.transition.Scene;

        $r6 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        specialinvoke $r5.<android.transition.Scene: void <init>(android.view.ViewGroup,android.view.View)>($r6, r8);

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void transitionTo(android.transition.Scene)>($r5);

        goto label4;

     label3:
        $r3 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r3.<android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>(r8, r1);

     label4:
        $r4 = r0.<com.android.internal.policy.PhoneWindow: android.view.ViewGroup mContentParent>;

        virtualinvoke $r4.<android.view.ViewGroup: void requestApplyInsets()>();

        r9 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$Callback getCallback()>();

        if r9 == null goto label5;

        $z1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: boolean isDestroyed()>();

        if $z1 != 0 goto label5;

        interfaceinvoke r9.<android.view.Window$Callback: void onContentChanged()>();

     label5:
        r0.<com.android.internal.policy.PhoneWindow: boolean mContentParentExplicitlySet> = 1;

        return;
    }

    public void setDecorCaptionShade(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        com.android.internal.policy.DecorView r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.PhoneWindow: int mDecorCaptionShade> = i0;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.policy.DecorView: void updateDecorCaptionShade()>();

     label1:
        return;
    }

    public void setDecorFitsSystemWindows(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.PhoneWindow: boolean mDecorFitsSystemWindows> = z0;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void applyDecorFitsSystemWindows()>();

        return;
    }

    public void setDefaultIcon(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        com.android.internal.widget.DecorContentParent r1, $r2, $r6;
        boolean $z0;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        android.graphics.drawable.Drawable $r5;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        $i2 = $i1 & 1;

        if $i2 == 0 goto label1;

        return;

     label1:
        r0.<com.android.internal.policy.PhoneWindow: int mIconRes> = i0;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r1 == null goto label4;

        $z0 = interfaceinvoke r1.<com.android.internal.widget.DecorContentParent: boolean hasIcon()>();

        if $z0 == 0 goto label2;

        $i7 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        $i8 = $i7 & 4;

        if $i8 == 0 goto label4;

     label2:
        if i0 == 0 goto label3;

        $r6 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r6.<com.android.internal.widget.DecorContentParent: void setIcon(int)>(i0);

        $i5 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        $i6 = $i5 & -5;

        r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags> = $i6;

        goto label4;

     label3:
        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r5 = virtualinvoke $r4.<android.content.pm.PackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>();

        interfaceinvoke $r2.<com.android.internal.widget.DecorContentParent: void setIcon(android.graphics.drawable.Drawable)>($r5);

        $i3 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        $i4 = $i3 | 4;

        r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags> = $i4;

     label4:
        return;
    }

    public void setDefaultLogo(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i1, $i2;
        com.android.internal.widget.DecorContentParent r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        $i2 = $i1 & 2;

        if $i2 == 0 goto label1;

        return;

     label1:
        r0.<com.android.internal.policy.PhoneWindow: int mLogoRes> = i0;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r1 == null goto label2;

        $z0 = interfaceinvoke r1.<com.android.internal.widget.DecorContentParent: boolean hasLogo()>();

        if $z0 != 0 goto label2;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        interfaceinvoke $r2.<com.android.internal.widget.DecorContentParent: void setLogo(int)>(i0);

     label2:
        return;
    }

    protected void setDefaultWindowFormat(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        specialinvoke r0.<android.view.Window: void setDefaultWindowFormat(int)>(i0);

        return;
    }

    public final void setElevation(float)
    {
        com.android.internal.policy.PhoneWindow r0;
        float f0;
        android.view.WindowManager$LayoutParams r1;
        com.android.internal.policy.DecorView r2, $r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        f0 := @parameter0: float;

        r0.<com.android.internal.policy.PhoneWindow: float mElevation> = f0;

        r1 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.internal.policy.DecorView: void setElevation(float)>(f0);

        $r3 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        virtualinvoke r1.<android.view.WindowManager$LayoutParams: void setSurfaceInsets(android.view.View,boolean,boolean)>($r3, 1, 0);

     label1:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>(r1);

        return;
    }

    public void setEnterTransition(android.transition.Transition)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mEnterTransition> = r1;

        return;
    }

    public void setExitTransition(android.transition.Transition)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mExitTransition> = r1;

        return;
    }

    protected final void setFeatureDefaultDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        android.graphics.drawable.Drawable r1, $r3;
        com.android.internal.policy.PhoneWindow$DrawableFeatureState r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $r3 = r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def>;

        if $r3 == r1 goto label1;

        r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable def> = r1;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void updateDrawable(int,com.android.internal.policy.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

     label1:
        return;
    }

    public final void setFeatureDrawable(int, android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        android.graphics.drawable.Drawable r1, $r3;
        com.android.internal.policy.PhoneWindow$DrawableFeatureState r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.graphics.drawable.Drawable;

        r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int resid> = 0;

        r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = null;

        $r3 = r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local>;

        if $r3 == r1 goto label1;

        r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = r1;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void updateDrawable(int,com.android.internal.policy.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

     label1:
        return;
    }

    public void setFeatureDrawableAlpha(int, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1, $i2;
        com.android.internal.policy.PhoneWindow$DrawableFeatureState r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $i2 = r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int alpha>;

        if $i2 == i1 goto label1;

        r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int alpha> = i1;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void updateDrawable(int,com.android.internal.policy.PhoneWindow$DrawableFeatureState,boolean)>(i0, r1, 0);

     label1:
        return;
    }

    public final void setFeatureDrawableResource(int, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1, $i2;
        com.android.internal.policy.PhoneWindow$DrawableFeatureState r1;
        android.content.Context $r2;
        android.graphics.drawable.Drawable $r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 == 0 goto label2;

        r1 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $i2 = r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int resid>;

        if $i2 == i1 goto label1;

        r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int resid> = i1;

        r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = null;

        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(i1);

        r1.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = $r3;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void updateDrawable(int,com.android.internal.policy.PhoneWindow$DrawableFeatureState,boolean)>(i0, r1, 0);

     label1:
        goto label3;

     label2:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>(i0, null);

     label3:
        return;
    }

    public final void setFeatureDrawableUri(int, android.net.Uri)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        android.net.Uri r1, $r3, $r5;
        com.android.internal.policy.PhoneWindow$DrawableFeatureState r2;
        android.graphics.drawable.Drawable $r4;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.Uri;

        if r1 == null goto label3;

        r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 1);

        $r3 = r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.net.Uri uri>;

        if $r3 == null goto label1;

        $r5 = r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.net.Uri uri>;

        $z0 = virtualinvoke $r5.<android.net.Uri: boolean equals(java.lang.Object)>(r1);

        if $z0 != 0 goto label2;

     label1:
        r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: int resid> = 0;

        r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.net.Uri uri> = r1;

        $r4 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.graphics.drawable.Drawable loadImageURI(android.net.Uri)>(r1);

        r2.<com.android.internal.policy.PhoneWindow$DrawableFeatureState: android.graphics.drawable.Drawable local> = $r4;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void updateDrawable(int,com.android.internal.policy.PhoneWindow$DrawableFeatureState,boolean)>(i0, r2, 0);

     label2:
        goto label4;

     label3:
        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>(i0, null);

     label4:
        return;
    }

    public final void setFeatureInt(int, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void updateInt(int,int,boolean)>(i0, i1, 0);

        return;
    }

    public void setIcon(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1, $i2, $i3;
        com.android.internal.widget.DecorContentParent r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.PhoneWindow: int mIconRes> = i0;

        $i2 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        i1 = $i2 | 1;

        r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags> = i1;

        $i3 = i1 & -5;

        r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags> = $i3;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.internal.widget.DecorContentParent: void setIcon(int)>(i0);

     label1:
        return;
    }

    public void setIsStartingWindow(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.PhoneWindow: boolean mIsStartingWindow> = z0;

        return;
    }

    public void setLocalFocus(boolean, boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0, z1;
        android.view.ViewRootImpl $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        $r1 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r1.<android.view.ViewRootImpl: void windowFocusChanged(boolean,boolean)>(z0, z1);

        return;
    }

    public void setLogo(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, $i1, $i2;
        com.android.internal.widget.DecorContentParent r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.PhoneWindow: int mLogoRes> = i0;

        $i1 = r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags>;

        $i2 = $i1 | 2;

        r0.<com.android.internal.policy.PhoneWindow: int mResourcesSetFlags> = $i2;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.internal.widget.DecorContentParent: void setLogo(int)>(i0);

     label1:
        return;
    }

    public void setMediaController(android.media.session.MediaController)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.media.session.MediaController r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.media.session.MediaController;

        r0.<com.android.internal.policy.PhoneWindow: android.media.session.MediaController mMediaController> = r1;

        return;
    }

    public void setNavigationBarColor(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        com.android.internal.policy.DecorView r1;
        android.view.Window$WindowControllerCallback $r2, $r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.PhoneWindow: int mNavigationBarColor> = i0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mForcedNavigationBarColor> = 1;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>(null, 0);

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$WindowControllerCallback getWindowControllerCallback()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$WindowControllerCallback getWindowControllerCallback()>();

        interfaceinvoke $r3.<android.view.Window$WindowControllerCallback: void updateNavigationBarColor(int)>(i0);

     label2:
        return;
    }

    public void setNavigationBarContrastEnforced(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;
        com.android.internal.policy.DecorView r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.PhoneWindow: boolean mEnsureNavigationBarContrastWhenTransparent> = z0;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>(null, 0);

     label1:
        return;
    }

    public void setNavigationBarDividerColor(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        com.android.internal.policy.DecorView r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.PhoneWindow: int mNavigationBarDividerColor> = i0;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>(null, 0);

     label1:
        return;
    }

    public void setReenterTransition(android.transition.Transition)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mReenterTransition> = r1;

        return;
    }

    public void setResizingCaptionDrawable(android.graphics.drawable.Drawable)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.graphics.drawable.Drawable r1;
        com.android.internal.policy.DecorView $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        virtualinvoke $r2.<com.android.internal.policy.DecorView: void setUserCaptionBackgroundDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    public void setReturnTransition(android.transition.Transition)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mReturnTransition> = r1;

        return;
    }

    public void setSharedElementEnterTransition(android.transition.Transition)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementEnterTransition> = r1;

        return;
    }

    public void setSharedElementExitTransition(android.transition.Transition)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementExitTransition> = r1;

        return;
    }

    public void setSharedElementReenterTransition(android.transition.Transition)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementReenterTransition> = r1;

        return;
    }

    public void setSharedElementReturnTransition(android.transition.Transition)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.Transition r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.transition.Transition;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.Transition mSharedElementReturnTransition> = r1;

        return;
    }

    public void setSharedElementsUseOverlay(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        r0.<com.android.internal.policy.PhoneWindow: java.lang.Boolean mSharedElementsUseOverlay> = $r1;

        return;
    }

    public void setStatusBarColor(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        com.android.internal.policy.DecorView r1;
        android.view.Window$WindowControllerCallback $r2, $r3;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.PhoneWindow: int mStatusBarColor> = i0;

        r0.<com.android.internal.policy.PhoneWindow: boolean mForcedStatusBarColor> = 1;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>(null, 0);

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$WindowControllerCallback getWindowControllerCallback()>();

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.Window$WindowControllerCallback getWindowControllerCallback()>();

        interfaceinvoke $r3.<android.view.Window$WindowControllerCallback: void updateStatusBarColor(int)>(i0);

     label2:
        return;
    }

    public void setStatusBarContrastEnforced(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;
        com.android.internal.policy.DecorView r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.policy.PhoneWindow: boolean mEnsureStatusBarContrastWhenTransparent> = z0;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.policy.DecorView: android.view.WindowInsets updateColorViews(android.view.WindowInsets,boolean)>(null, 0);

     label1:
        return;
    }

    public void setSystemGestureExclusionRects(java.util.List)
    {
        com.android.internal.policy.PhoneWindow r0;
        java.util.List r1;
        android.view.ViewRootImpl $r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: java.util.List;

        $r2 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.ViewRootImpl getViewRootImpl()>();

        virtualinvoke $r2.<android.view.ViewRootImpl: void setRootSystemGestureExclusionRects(java.util.List)>(r1);

        return;
    }

    public void setTheme(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        boolean $z0;
        com.android.internal.policy.DecorView r1;
        android.content.Context r2;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.PhoneWindow: int mTheme> = i0;

        r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r1 == null goto label1;

        r2 = virtualinvoke r1.<com.android.internal.policy.DecorView: android.content.Context getContext()>();

        $z0 = r2 instanceof com.android.internal.policy.DecorContext;

        if $z0 == 0 goto label1;

        virtualinvoke r2.<android.content.Context: void setTheme(int)>(i0);

     label1:
        return;
    }

    public void setTitle(java.lang.CharSequence)
    {
        com.android.internal.policy.PhoneWindow r0;
        java.lang.CharSequence r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: java.lang.CharSequence;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void setTitle(java.lang.CharSequence,boolean)>(r1, 1);

        return;
    }

    public void setTitle(java.lang.CharSequence, boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0, $z1;
        java.lang.CharSequence $r1, $r2, r3;
        android.widget.TextView r4;
        com.android.internal.widget.DecorContentParent r5;
        android.view.WindowManager$LayoutParams r6, $r9;
        com.android.internal.policy.DecorView r7;
        android.view.ViewRootImpl r8;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r3 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        r4 = r0.<com.android.internal.policy.PhoneWindow: android.widget.TextView mTitleView>;

        if r4 == null goto label1;

        virtualinvoke r4.<android.widget.TextView: void setText(java.lang.CharSequence)>(r3);

        goto label2;

     label1:
        r5 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.widget.DecorContentParent mDecorContentParent>;

        if r5 == null goto label2;

        interfaceinvoke r5.<com.android.internal.widget.DecorContentParent: void setWindowTitle(java.lang.CharSequence)>(r3);

     label2:
        r0.<com.android.internal.policy.PhoneWindow: java.lang.CharSequence mTitle> = r3;

        if z0 == 0 goto label4;

        r6 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        $r1 = r6.<android.view.WindowManager$LayoutParams: java.lang.CharSequence accessibilityTitle>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r3, $r1);

        if $z1 != 0 goto label4;

        $r2 = staticinvoke <android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)>(r3);

        r6.<android.view.WindowManager$LayoutParams: java.lang.CharSequence accessibilityTitle> = $r2;

        r7 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        if r7 == null goto label3;

        r8 = virtualinvoke r7.<com.android.internal.policy.DecorView: android.view.ViewRootImpl getViewRootImpl()>();

        if r8 == null goto label3;

        virtualinvoke r8.<android.view.ViewRootImpl: void onWindowTitleChanged()>();

     label3:
        $r9 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: android.view.WindowManager$LayoutParams getAttributes()>();

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void dispatchWindowAttributesChanged(android.view.WindowManager$LayoutParams)>($r9);

     label4:
        return;
    }

    public void setTitleColor(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        android.widget.TextView r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 = r0.<com.android.internal.policy.PhoneWindow: android.widget.TextView mTitleView>;

        if r1 == null goto label1;

        virtualinvoke r1.<android.widget.TextView: void setTextColor(int)>(i0);

     label1:
        r0.<com.android.internal.policy.PhoneWindow: int mTitleColor> = i0;

        return;
    }

    public void setTransitionBackgroundFadeDuration(long)
    {
        com.android.internal.policy.PhoneWindow r0;
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        r0.<com.android.internal.policy.PhoneWindow: long mBackgroundFadeDurationMillis> = l0;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("negative durations are not allowed");

        throw $r1;
    }

    public void setTransitionManager(android.transition.TransitionManager)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.transition.TransitionManager r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.transition.TransitionManager;

        r0.<com.android.internal.policy.PhoneWindow: android.transition.TransitionManager mTransitionManager> = r1;

        return;
    }

    public void setUiOptions(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.PhoneWindow: int mUiOptions> = i0;

        return;
    }

    public void setUiOptions(int, int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0, i1, $i2, $i3, $i4, $i5;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = r0.<com.android.internal.policy.PhoneWindow: int mUiOptions>;

        $i4 = $i2 & i1;

        $i3 = i0 & i1;

        $i5 = $i4 | $i3;

        r0.<com.android.internal.policy.PhoneWindow: int mUiOptions> = $i5;

        return;
    }

    public void setVolumeControlStream(int)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r0.<com.android.internal.policy.PhoneWindow: int mVolumeControlStreamType> = i0;

        return;
    }

    public boolean superDispatchGenericMotionEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.MotionEvent r1;
        com.android.internal.policy.DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.DecorView: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchKeyEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.KeyEvent r1;
        com.android.internal.policy.DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.DecorView: boolean superDispatchKeyEvent(android.view.KeyEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.KeyEvent r1;
        com.android.internal.policy.DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.KeyEvent;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.DecorView: boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.MotionEvent r1;
        com.android.internal.policy.DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.DecorView: boolean superDispatchTouchEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public boolean superDispatchTrackballEvent(android.view.MotionEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.MotionEvent r1;
        com.android.internal.policy.DecorView $r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        $z0 = virtualinvoke $r2.<com.android.internal.policy.DecorView: boolean superDispatchTrackballEvent(android.view.MotionEvent)>(r1);

        return $z0;
    }

    public void takeInputQueue(android.view.InputQueue$Callback)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.InputQueue$Callback r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.InputQueue$Callback;

        r0.<com.android.internal.policy.PhoneWindow: android.view.InputQueue$Callback mTakeInputQueueCallback> = r1;

        return;
    }

    public void takeKeyEvents(boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        boolean z0;
        com.android.internal.policy.DecorView $r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.DecorView mDecor>;

        virtualinvoke $r1.<com.android.internal.policy.DecorView: void setFocusable(boolean)>(z0);

        return;
    }

    public void takeSurface(android.view.SurfaceHolder$Callback2)
    {
        com.android.internal.policy.PhoneWindow r0;
        android.view.SurfaceHolder$Callback2 r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        r1 := @parameter0: android.view.SurfaceHolder$Callback2;

        r0.<com.android.internal.policy.PhoneWindow: android.view.SurfaceHolder$Callback2 mTakeSurfaceCallback> = r1;

        return;
    }

    public final void togglePanel(int, android.view.KeyEvent)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        android.view.KeyEvent r1;
        com.android.internal.policy.PhoneWindow$PanelFeatureState r2;
        boolean $z0;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        r1 := @parameter1: android.view.KeyEvent;

        r2 = virtualinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$PanelFeatureState getPanelState(int,boolean)>(i0, 1);

        $z0 = r2.<com.android.internal.policy.PhoneWindow$PanelFeatureState: boolean isOpen>;

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.policy.PhoneWindow: void closePanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,boolean)>(r2, 1);

        goto label2;

     label1:
        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void openPanel(com.android.internal.policy.PhoneWindow$PanelFeatureState,android.view.KeyEvent)>(r2, r1);

     label2:
        return;
    }

    protected final void updateDrawable(int, boolean)
    {
        com.android.internal.policy.PhoneWindow r0;
        int i0;
        boolean z0;
        com.android.internal.policy.PhoneWindow$DrawableFeatureState r1;

        r0 := @this: com.android.internal.policy.PhoneWindow;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 = specialinvoke r0.<com.android.internal.policy.PhoneWindow: com.android.internal.policy.PhoneWindow$DrawableFeatureState getDrawableState(int,boolean)>(i0, 0);

        if r1 == null goto label1;

        specialinvoke r0.<com.android.internal.policy.PhoneWindow: void updateDrawable(int,com.android.internal.policy.PhoneWindow$DrawableFeatureState,boolean)>(i0, r1, z0);

     label1:
        return;
    }
}
