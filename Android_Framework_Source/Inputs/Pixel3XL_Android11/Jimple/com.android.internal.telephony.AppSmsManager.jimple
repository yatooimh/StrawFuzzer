public class com.android.internal.telephony.AppSmsManager extends java.lang.Object
{
    private static final java.lang.String LOG_TAG;
    private static final long TIMEOUT_MILLIS;
    private final android.content.Context mContext;
    private final java.lang.Object mLock;
    private final java.util.Map mPackageMap;
    private final java.security.SecureRandom mRandom;
    private final java.util.Map mTokenMap;

    static void <clinit>()
    {
        java.util.concurrent.TimeUnit $r0;
        long $l0;

        <com.android.internal.telephony.AppSmsManager: java.lang.String LOG_TAG> = "AppSmsManager";

        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>;

        $l0 = virtualinvoke $r0.<java.util.concurrent.TimeUnit: long toMillis(long)>(5L);

        <com.android.internal.telephony.AppSmsManager: long TIMEOUT_MILLIS> = $l0;

        return;
    }

    public void <init>(android.content.Context)
    {
        com.android.internal.telephony.AppSmsManager r0;
        android.content.Context r1;
        java.lang.Object $r2;
        java.security.SecureRandom $r3;
        android.util.ArrayMap $r4, $r5;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.telephony.AppSmsManager: java.lang.Object mLock> = $r2;

        $r3 = new java.security.SecureRandom;

        specialinvoke $r3.<java.security.SecureRandom: void <init>()>();

        r0.<com.android.internal.telephony.AppSmsManager: java.security.SecureRandom mRandom> = $r3;

        $r4 = new android.util.ArrayMap;

        specialinvoke $r4.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mTokenMap> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mPackageMap> = $r5;

        r0.<com.android.internal.telephony.AppSmsManager: android.content.Context mContext> = r1;

        return;
    }

    private void addRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)
    {
        com.android.internal.telephony.AppSmsManager r0;
        com.android.internal.telephony.AppSmsManager$AppRequestInfo r1;
        java.lang.String $r2, $r5;
        java.util.Map $r3, $r6;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        r1 := @parameter0: com.android.internal.telephony.AppSmsManager$AppRequestInfo;

        $r3 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mTokenMap>;

        $r2 = r1.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: java.lang.String token>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1);

        $r6 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mPackageMap>;

        $r5 = r1.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: java.lang.String packageName>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1);

        return;
    }

    private java.lang.String extractMessage(android.content.Intent)
    {
        com.android.internal.telephony.AppSmsManager r0;
        int i0, i1;
        android.telephony.SmsMessage r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r5, $r6;
        android.content.Intent r8;
        android.telephony.SmsMessage[] r9;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        r8 := @parameter0: android.content.Intent;

        r9 = staticinvoke <android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>(r8);

        if r9 != null goto label1;

        return null;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        i0 = lengthof r9;

        i1 = 0;

     label2:
        if i1 >= i0 goto label5;

        r2 = r9[i1];

        if r2 == null goto label4;

        $r5 = virtualinvoke r2.<android.telephony.SmsMessage: java.lang.String getMessageBody()>();

        if $r5 != null goto label3;

        goto label4;

     label3:
        $r6 = virtualinvoke r2.<android.telephony.SmsMessage: java.lang.String getMessageBody()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label4:
        i1 = i1 + 1;

        goto label2;

     label5:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r4;
    }

    private com.android.internal.telephony.AppSmsManager$AppRequestInfo findAppRequestInfoSmsIntentLocked(java.lang.String)
    {
        com.android.internal.telephony.AppSmsManager r0;
        java.lang.String r1, r3, $r7;
        java.util.Iterator r2;
        java.util.Map $r4, $r8;
        java.util.Set $r5;
        boolean $z0, $z1, $z2;
        java.lang.Object $r6, $r9;
        com.android.internal.telephony.AppSmsManager$AppRequestInfo $r10;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mTokenMap>;

        $r5 = interfaceinvoke $r4.<java.util.Map: java.util.Set keySet()>();

        r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r6;

        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

        if $z1 == 0 goto label2;

        $z2 = specialinvoke r0.<com.android.internal.telephony.AppSmsManager: boolean hasPrefix(java.lang.String,java.lang.String)>(r3, r1);

        if $z2 == 0 goto label2;

        $r8 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mTokenMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r10 = (com.android.internal.telephony.AppSmsManager$AppRequestInfo) $r9;

        return $r10;

     label2:
        goto label1;

     label3:
        return null;
    }

    private java.lang.String generateNonce()
    {
        com.android.internal.telephony.AppSmsManager r0;
        byte[] r1;
        java.security.SecureRandom $r2;
        java.lang.String $r3;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        r1 = newarray (byte)[8];

        $r2 = r0.<com.android.internal.telephony.AppSmsManager: java.security.SecureRandom mRandom>;

        virtualinvoke $r2.<java.security.SecureRandom: void nextBytes(byte[])>(r1);

        $r3 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>(r1, 11);

        return $r3;
    }

    private boolean hasPrefix(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.AppSmsManager r0;
        java.lang.String r1, $r4, $r5, $r6, r7;
        int i0, i1;
        java.util.Map $r2;
        java.lang.Object $r3;
        boolean $z0, $z1;
        com.android.internal.telephony.AppSmsManager$AppRequestInfo r8;
        java.lang.String[] r9;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mTokenMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.android.internal.telephony.AppSmsManager$AppRequestInfo) $r3;

        $r4 = r8.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: java.lang.String prefixes>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r5 = r8.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: java.lang.String prefixes>;

        r9 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r9;

        i1 = 0;

     label2:
        if i1 >= i0 goto label4;

        $r6 = r9[i1];

        $z1 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r6);

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    private void removeExpiredTokenLocked()
    {
        com.android.internal.telephony.AppSmsManager r0;
        long l0, $l1, $l2, $l3;
        java.util.Iterator r1;
        java.util.Map $r2, $r5;
        java.util.Set $r3;
        boolean $z0, $z1;
        java.lang.Object $r4, $r6;
        byte $b4;
        android.content.Intent $r7, r13, r14;
        android.content.Context $r8;
        android.app.PendingIntent $r9;
        android.app.PendingIntent$CanceledException $r10;
        java.lang.String r11;
        com.android.internal.telephony.AppSmsManager$AppRequestInfo r12;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r2 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mTokenMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label7;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r4;

        $r5 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mTokenMap>;

        $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (com.android.internal.telephony.AppSmsManager$AppRequestInfo) $r6;

        $z1 = r12.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: boolean packageBasedToken>;

        if $z1 == 0 goto label6;

        $l1 = <com.android.internal.telephony.AppSmsManager: long TIMEOUT_MILLIS>;

        $l3 = l0 - $l1;

        $l2 = r12.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: long timestamp>;

        $b4 = $l3 cmp $l2;

        if $b4 <= 0 goto label6;

     label2:
        r13 = new android.content.Intent;

        specialinvoke r13.<android.content.Intent: void <init>()>();

        $r7 = virtualinvoke r13.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.telephony.extra.STATUS", 1);

        r14 = virtualinvoke $r7.<android.content.Intent: android.content.Intent addFlags(int)>(2097152);

        $r9 = r12.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: android.app.PendingIntent pendingIntent>;

        $r8 = r0.<com.android.internal.telephony.AppSmsManager: android.content.Context mContext>;

        virtualinvoke $r9.<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>($r8, 0, r14);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

     label5:
        specialinvoke r0.<com.android.internal.telephony.AppSmsManager: void removeRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>(r12);

     label6:
        goto label1;

     label7:
        return;

        catch android.app.PendingIntent$CanceledException from label2 to label3 with label4;
    }

    private void removeRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)
    {
        com.android.internal.telephony.AppSmsManager r0;
        com.android.internal.telephony.AppSmsManager$AppRequestInfo r1;
        java.lang.String $r2, $r5;
        java.util.Map $r3, $r6;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        r1 := @parameter0: com.android.internal.telephony.AppSmsManager$AppRequestInfo;

        $r3 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mTokenMap>;

        $r2 = r1.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: java.lang.String token>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2);

        $r6 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mPackageMap>;

        $r5 = r1.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: java.lang.String packageName>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r5);

        return;
    }

    public java.lang.String createAppSpecificSmsToken(java.lang.String, android.app.PendingIntent)
    {
        com.android.internal.telephony.AppSmsManager r0;
        android.app.PendingIntent r1;
        java.lang.String r2, r13;
        java.lang.Object r3, $r6, $r10;
        com.android.internal.telephony.AppSmsManager$AppRequestInfo r4, $r11;
        android.content.Context $r5;
        android.app.AppOpsManager $r7;
        int $i0;
        java.util.Map $r8, $r9;
        boolean $z0;
        java.lang.Throwable $r12;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        r13 := @parameter0: java.lang.String;

        r1 := @parameter1: android.app.PendingIntent;

        $r5 = r0.<com.android.internal.telephony.AppSmsManager: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r7 = (android.app.AppOpsManager) $r6;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r7.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i0, r13);

        r2 = specialinvoke r0.<com.android.internal.telephony.AppSmsManager: java.lang.String generateNonce()>();

        r3 = r0.<com.android.internal.telephony.AppSmsManager: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        $r8 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mPackageMap>;

        $z0 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r13);

        if $z0 == 0 goto label2;

        $r9 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mPackageMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13);

        $r11 = (com.android.internal.telephony.AppSmsManager$AppRequestInfo) $r10;

        specialinvoke r0.<com.android.internal.telephony.AppSmsManager: void removeRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>($r11);

     label2:
        r4 = new com.android.internal.telephony.AppSmsManager$AppRequestInfo;

        specialinvoke r4.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: void <init>(com.android.internal.telephony.AppSmsManager,java.lang.String,android.app.PendingIntent,java.lang.String)>(r0, r13, r1, r2);

        specialinvoke r0.<com.android.internal.telephony.AppSmsManager: void addRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>(r4);

        exitmonitor r3;

     label3:
        return r2;

     label4:
        $r12 := @caughtexception;

     label5:
        exitmonitor r3;

     label6:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public java.lang.String createAppSpecificSmsTokenWithPackageInfo(int, java.lang.String, java.lang.String, android.app.PendingIntent)
    {
        com.android.internal.telephony.AppSmsManager r0;
        int i0, $i1;
        java.lang.String r1, r3, r17;
        android.app.PendingIntent r2;
        java.lang.Object r4, $r9, $r14;
        com.android.internal.telephony.AppSmsManager$AppRequestInfo r5, $r15;
        android.content.Context $r8, $r11;
        android.app.AppOpsManager $r10;
        java.util.Map $r12, $r13;
        boolean $z0;
        java.lang.Throwable $r16;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        i0 := @parameter0: int;

        r17 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.app.PendingIntent;

        staticinvoke <com.android.internal.telephony.Preconditions: java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence,java.lang.Object)>(r17, "callingPackageName cannot be null or empty.");

        staticinvoke <com.android.internal.telephony.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r2, "intent cannot be null");

        $r8 = r0.<com.android.internal.telephony.AppSmsManager: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r10 = (android.app.AppOpsManager) $r9;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r10.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i1, r17);

        $r11 = r0.<com.android.internal.telephony.AppSmsManager: android.content.Context mContext>;

        r3 = staticinvoke <com.android.internal.telephony.PackageBasedTokenUtil: java.lang.String generateToken(android.content.Context,java.lang.String)>($r11, r17);

        if r3 == null goto label7;

        r4 = r0.<com.android.internal.telephony.AppSmsManager: java.lang.Object mLock>;

        entermonitor r4;

     label1:
        $r12 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mPackageMap>;

        $z0 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(r17);

        if $z0 == 0 goto label2;

        $r13 = r0.<com.android.internal.telephony.AppSmsManager: java.util.Map mPackageMap>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17);

        $r15 = (com.android.internal.telephony.AppSmsManager$AppRequestInfo) $r14;

        specialinvoke r0.<com.android.internal.telephony.AppSmsManager: void removeRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>($r15);

     label2:
        r5 = new com.android.internal.telephony.AppSmsManager$AppRequestInfo;

        specialinvoke r5.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: void <init>(com.android.internal.telephony.AppSmsManager,java.lang.String,android.app.PendingIntent,java.lang.String,java.lang.String,int,boolean)>(r0, r17, r2, r3, r1, i0, 1);

        specialinvoke r0.<com.android.internal.telephony.AppSmsManager: void addRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>(r5);

        exitmonitor r4;

     label3:
        goto label7;

     label4:
        $r16 := @caughtexception;

     label5:
        exitmonitor r4;

     label6:
        throw $r16;

     label7:
        return r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public boolean handleSmsReceivedIntent(android.content.Intent)
    {
        com.android.internal.telephony.AppSmsManager r0;
        java.lang.String r1, $r4, $r14, $r16;
        com.android.internal.telephony.AppSmsManager$AppRequestInfo r2;
        android.content.Intent r3, $r6, $r7, $r8, $r9, r19, r22;
        boolean $z0;
        android.os.Bundle $r5;
        int $i0;
        android.content.Context $r10;
        android.app.PendingIntent $r11;
        java.lang.StringBuilder $r12;
        java.lang.Throwable $r17;
        android.app.PendingIntent$CanceledException $r18;
        java.lang.Object r21;

        r0 := @this: com.android.internal.telephony.AppSmsManager;

        r19 := @parameter0: android.content.Intent;

        $r4 = virtualinvoke r19.<android.content.Intent: java.lang.String getAction()>();

        if $r4 == "android.provider.Telephony.SMS_DELIVER" goto label01;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got intent with incorrect action: ");

        $r14 = virtualinvoke r19.<android.content.Intent: java.lang.String getAction()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("AppSmsManager", $r16);

        return 0;

     label01:
        r21 = r0.<com.android.internal.telephony.AppSmsManager: java.lang.Object mLock>;

        entermonitor r21;

     label02:
        specialinvoke r0.<com.android.internal.telephony.AppSmsManager: void removeExpiredTokenLocked()>();

        r1 = specialinvoke r0.<com.android.internal.telephony.AppSmsManager: java.lang.String extractMessage(android.content.Intent)>(r19);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label04;

        exitmonitor r21;

     label03:
        return 0;

     label04:
        r2 = specialinvoke r0.<com.android.internal.telephony.AppSmsManager: com.android.internal.telephony.AppSmsManager$AppRequestInfo findAppRequestInfoSmsIntentLocked(java.lang.String)>(r1);

     label05:
        if r2 != null goto label08;

     label06:
        exitmonitor r21;

     label07:
        return 0;

     label08:
        r3 = new android.content.Intent;

        specialinvoke r3.<android.content.Intent: void <init>()>();

        $r5 = virtualinvoke r19.<android.content.Intent: android.os.Bundle getExtras()>();

        $r6 = virtualinvoke r3.<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>($r5);

        $r7 = virtualinvoke $r6.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.telephony.extra.STATUS", 0);

        $r8 = virtualinvoke $r7.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.telephony.extra.SMS_MESSAGE", r1);

        $i0 = r2.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: int subId>;

        $r9 = virtualinvoke $r8.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.telephony.extra.SIM_SUBSCRIPTION_ID", $i0);

        r22 = virtualinvoke $r9.<android.content.Intent: android.content.Intent addFlags(int)>(2097152);

        $r11 = r2.<com.android.internal.telephony.AppSmsManager$AppRequestInfo: android.app.PendingIntent pendingIntent>;

        $r10 = r0.<com.android.internal.telephony.AppSmsManager: android.content.Context mContext>;

        virtualinvoke $r11.<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)>($r10, 0, r22);

     label09:
        specialinvoke r0.<com.android.internal.telephony.AppSmsManager: void removeRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>(r2);

        exitmonitor r21;

     label10:
        return 1;

     label11:
        $r18 := @caughtexception;

     label12:
        specialinvoke r0.<com.android.internal.telephony.AppSmsManager: void removeRequestLocked(com.android.internal.telephony.AppSmsManager$AppRequestInfo)>(r2);

        exitmonitor r21;

     label13:
        return 0;

     label14:
        $r17 := @caughtexception;

     label15:
        exitmonitor r21;

     label16:
        throw $r17;

        catch java.lang.Throwable from label02 to label03 with label14;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch android.app.PendingIntent$CanceledException from label08 to label09 with label11;
        catch java.lang.Throwable from label08 to label09 with label14;
        catch java.lang.Throwable from label09 to label10 with label14;
        catch java.lang.Throwable from label12 to label13 with label14;
        catch java.lang.Throwable from label15 to label16 with label14;
    }
}
