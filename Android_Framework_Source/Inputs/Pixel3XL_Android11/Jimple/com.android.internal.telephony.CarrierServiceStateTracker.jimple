public class com.android.internal.telephony.CarrierServiceStateTracker extends android.os.Handler
{
    protected static final int CARRIER_EVENT_BASE;
    protected static final int CARRIER_EVENT_DATA_DEREGISTRATION;
    protected static final int CARRIER_EVENT_DATA_REGISTRATION;
    protected static final int CARRIER_EVENT_IMS_CAPABILITIES_CHANGED;
    protected static final int CARRIER_EVENT_VOICE_DEREGISTRATION;
    protected static final int CARRIER_EVENT_VOICE_REGISTRATION;
    public static final java.lang.String EMERGENCY_NOTIFICATION_TAG;
    private static final java.lang.String LOG_TAG;
    public static final int NOTIFICATION_EMERGENCY_NETWORK;
    public static final int NOTIFICATION_PREF_NETWORK;
    public static final java.lang.String PREF_NETWORK_NOTIFICATION_TAG;
    private static final int UNINITIALIZED_DELAY_VALUE;
    private final android.content.BroadcastReceiver mBroadcastReceiver;
    private final java.util.Map mNotificationTypeMap;
    private com.android.internal.telephony.Phone mPhone;
    private android.database.ContentObserver mPrefNetworkModeObserver;
    private int mPreviousSubId;
    private com.android.internal.telephony.ServiceStateTracker mSST;

    public void <init>(com.android.internal.telephony.Phone, com.android.internal.telephony.ServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.Phone r1, $r10;
        com.android.internal.telephony.ServiceStateTracker r2;
        java.util.HashMap $r3;
        com.android.internal.telephony.CarrierServiceStateTracker$2 $r4;
        com.android.internal.telephony.CarrierServiceStateTracker$3 $r5;
        android.content.Context $r6, $r11;
        android.content.IntentFilter $r7;
        android.content.BroadcastReceiver $r8;
        android.telephony.SubscriptionManager $r12;
        com.android.internal.telephony.CarrierServiceStateTracker$1 $r13;
        android.os.Looper $r14;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        r2 := @parameter1: com.android.internal.telephony.ServiceStateTracker;

        specialinvoke r0.<android.os.Handler: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<com.android.internal.telephony.CarrierServiceStateTracker: java.util.Map mNotificationTypeMap> = $r3;

        r0.<com.android.internal.telephony.CarrierServiceStateTracker: int mPreviousSubId> = -1;

        $r4 = new com.android.internal.telephony.CarrierServiceStateTracker$2;

        specialinvoke $r4.<com.android.internal.telephony.CarrierServiceStateTracker$2: void <init>(com.android.internal.telephony.CarrierServiceStateTracker,android.os.Handler)>(r0, r0);

        r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.database.ContentObserver mPrefNetworkModeObserver> = $r4;

        $r5 = new com.android.internal.telephony.CarrierServiceStateTracker$3;

        specialinvoke $r5.<com.android.internal.telephony.CarrierServiceStateTracker$3: void <init>(com.android.internal.telephony.CarrierServiceStateTracker)>(r0);

        r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.content.BroadcastReceiver mBroadcastReceiver> = $r5;

        r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone> = r1;

        r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.ServiceStateTracker mSST> = r2;

        $r6 = virtualinvoke r1.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r8 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.content.BroadcastReceiver mBroadcastReceiver>;

        $r7 = new android.content.IntentFilter;

        specialinvoke $r7.<android.content.IntentFilter: void <init>(java.lang.String)>("android.telephony.action.CARRIER_CONFIG_CHANGED");

        virtualinvoke $r6.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r8, $r7);

        $r10 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        $r11 = virtualinvoke $r10.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r12 = staticinvoke <android.telephony.SubscriptionManager: android.telephony.SubscriptionManager 'from'(android.content.Context)>($r11);

        $r13 = new com.android.internal.telephony.CarrierServiceStateTracker$1;

        $r14 = virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.os.Looper getLooper()>();

        specialinvoke $r13.<com.android.internal.telephony.CarrierServiceStateTracker$1: void <init>(com.android.internal.telephony.CarrierServiceStateTracker,android.os.Looper)>(r0, $r14);

        virtualinvoke $r12.<android.telephony.SubscriptionManager: void addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager$OnSubscriptionsChangedListener)>($r13);

        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void registerNotificationTypes()>();

        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void registerPrefNetworkModeObserver()>();

        return;
    }

    static com.android.internal.telephony.Phone access$000(com.android.internal.telephony.CarrierServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.Phone $r1;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        return $r1;
    }

    static int access$100(com.android.internal.telephony.CarrierServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        int $i0;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        $i0 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: int mPreviousSubId>;

        return $i0;
    }

    static int access$102(com.android.internal.telephony.CarrierServiceStateTracker, int)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        int i0;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        i0 := @parameter1: int;

        r0.<com.android.internal.telephony.CarrierServiceStateTracker: int mPreviousSubId> = i0;

        return i0;
    }

    static void access$200(com.android.internal.telephony.CarrierServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void registerPrefNetworkModeObserver()>();

        return;
    }

    static void access$300(com.android.internal.telephony.CarrierServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void handlePrefNetworkModeChanged()>();

        return;
    }

    static java.util.Map access$400(com.android.internal.telephony.CarrierServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: java.util.Map mNotificationTypeMap>;

        return $r1;
    }

    static void access$500(com.android.internal.telephony.CarrierServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void handleConfigChanges()>();

        return;
    }

    static boolean access$600(com.android.internal.telephony.CarrierServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        $z0 = specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: boolean isPhoneStillRegistered()>();

        return $z0;
    }

    static boolean access$700(com.android.internal.telephony.CarrierServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        $z0 = specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: boolean isGlobalMode()>();

        return $z0;
    }

    static com.android.internal.telephony.ServiceStateTracker access$800(com.android.internal.telephony.CarrierServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.ServiceStateTracker $r1;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.ServiceStateTracker mSST>;

        return $r1;
    }

    static boolean access$900(com.android.internal.telephony.CarrierServiceStateTracker)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker;

        $z0 = specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: boolean isPhoneRegisteredForWifiCalling()>();

        return $z0;
    }

    private boolean checkSupportedBitmask(long, long)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        long l0, l1, $l2;
        byte $b3;
        boolean z0;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        $l2 = l1 & l0;

        $b3 = $l2 cmp l1;

        if $b3 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void evaluateSendingMessageOrCancelNotification(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.CarrierServiceStateTracker$NotificationType r1;
        android.os.Message r2;
        boolean $z0;
        java.lang.StringBuilder $r3, $r7;
        int $i0, $i2, $i3, $i5;
        java.lang.String $r6, $r10;
        long $l6;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        r1 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker$NotificationType;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: boolean evaluateSendingMessage(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)>(r1);

        if $z0 == 0 goto label1;

        $i2 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: int getTypeId()>();

        r2 = virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.os.Message obtainMessage(int,java.lang.Object)>($i2, null);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("starting timer for notifications.");

        $i3 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: int getTypeId()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("CSST", $r10);

        $i5 = virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: int getDelay(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)>(r1);

        $l6 = (long) $i5;

        virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: boolean sendMessageDelayed(android.os.Message,long)>(r2, $l6);

        goto label2;

     label1:
        virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void cancelNotification(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)>(r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("canceling notifications: ");

        $i0 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: int getTypeId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("CSST", $r6);

     label2:
        return;
    }

    private void handleConfigChanges()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        java.util.Iterator r1;
        java.util.Map $r2;
        java.util.Set $r3;
        boolean $z0;
        java.lang.Object $r4, $r6;
        java.util.Map$Entry $r5;
        com.android.internal.telephony.CarrierServiceStateTracker$NotificationType $r7;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r2 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: java.util.Map mNotificationTypeMap>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke $r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r7 = (com.android.internal.telephony.CarrierServiceStateTracker$NotificationType) $r6;

        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void evaluateSendingMessageOrCancelNotification(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)>($r7);

        goto label1;

     label2:
        return;
    }

    private void handleImsCapabilitiesChanged()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.CarrierServiceStateTracker$NotificationType r1;
        java.util.Map $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r2 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: java.util.Map mNotificationTypeMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1001);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.internal.telephony.CarrierServiceStateTracker$NotificationType) $r4;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void evaluateSendingMessageOrCancelNotification(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)>(r1);

     label1:
        return;
    }

    private void handlePrefNetworkModeChanged()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.CarrierServiceStateTracker$NotificationType r1;
        java.util.Map $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r2 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: java.util.Map mNotificationTypeMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r1 = (com.android.internal.telephony.CarrierServiceStateTracker$NotificationType) $r4;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void evaluateSendingMessageOrCancelNotification(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)>(r1);

     label1:
        return;
    }

    private boolean isCarrierConfigEnableNr(android.content.Context)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        java.lang.Object $r1;
        com.android.internal.telephony.Phone $r2, $r5;
        int $i0, $i1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;
        android.content.Context r8;
        android.telephony.CarrierConfigManager r9;
        android.os.PersistableBundle r10;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        r8 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        r9 = (android.telephony.CarrierConfigManager) $r1;

        if r9 != null goto label1;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("CSST", "isCarrierConfigEnableNr: CarrierConfigManager is null");

        return 0;

     label1:
        $r2 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r2.<com.android.internal.telephony.Phone: int getSubId()>();

        r10 = virtualinvoke r9.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i0);

        if r10 != null goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isCarrierConfigEnableNr: Cannot get config ");

        $r5 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        $i1 = virtualinvoke $r5.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("CSST", $r7);

        return 0;

     label2:
        $z0 = virtualinvoke r10.<android.os.PersistableBundle: boolean getBoolean(java.lang.String)>("nr_enabled_bool");

        return $z0;
    }

    private boolean isGlobalMode()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        android.content.ContentResolver r1;
        int i0, $i1, $i2;
        com.android.internal.telephony.Phone $r2, $r4;
        java.lang.String $r6;
        boolean $z1, z2, z3;
        java.lang.Exception $r7;
        android.content.Context r8;
        java.lang.StringBuilder r9;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r2 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        r8 = virtualinvoke $r2.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        z2 = 1;

     label1:
        r1 = virtualinvoke r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r9 = new java.lang.StringBuilder;

        specialinvoke r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("preferred_network_mode");

        $r4 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        $i1 = virtualinvoke $r4.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $i2 = <com.android.internal.telephony.Phone: int PREFERRED_NT_MODE>;

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>(r1, $r6, $i2);

     label2:
        $z1 = specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: boolean isNrSupported()>();

        if $z1 == 0 goto label5;

        if i0 != 27 goto label3;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;

     label5:
        if i0 != 10 goto label6;

        z3 = 1;

        goto label7;

     label6:
        z3 = 0;

     label7:
        return z3;

     label8:
        $r7 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("CSST", "Unable to get PREFERRED_NETWORK_MODE.");

        return 1;

        catch java.lang.Exception from label1 to label2 with label8;
    }

    private boolean isNrSupported()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        android.telephony.TelephonyManager r1, $r5;
        boolean z0, z1, z2, z3;
        com.android.internal.telephony.Phone $r2, $r4;
        java.lang.Object $r3;
        int $i0;
        long $l1, $l2;
        java.lang.StringBuilder $r6;
        java.lang.String $r13;
        android.content.Context r14;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r2 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        r14 = virtualinvoke $r2.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r3 = virtualinvoke r14.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r5 = (android.telephony.TelephonyManager) $r3;

        $r4 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r4.<com.android.internal.telephony.Phone: int getSubId()>();

        r1 = virtualinvoke $r5.<android.telephony.TelephonyManager: android.telephony.TelephonyManager createForSubscriptionId(int)>($i0);

        z0 = specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: boolean isCarrierConfigEnableNr(android.content.Context)>(r14);

        $l1 = virtualinvoke r1.<android.telephony.TelephonyManager: long getSupportedRadioAccessFamily()>();

        z2 = specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: boolean checkSupportedBitmask(long,long)>($l1, 524288L);

        $l2 = virtualinvoke r1.<android.telephony.TelephonyManager: long getAllowedNetworkTypes()>();

        z1 = specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: boolean checkSupportedBitmask(long,long)>($l2, 524288L);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isNrSupported:  carrierConfigEnabled: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", AccessFamilySupported: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isNrNetworkTypeAllowed: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("CSST", $r13);

        if z0 == 0 goto label1;

        if z2 == 0 goto label1;

        if z1 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    private boolean isPhoneRegisteredForWifiCalling()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        java.lang.StringBuilder $r2;
        com.android.internal.telephony.Phone $r4, $r7;
        boolean $z0, $z1;
        java.lang.String $r6;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isPhoneRegisteredForWifiCalling: ");

        $r4 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        $z0 = virtualinvoke $r4.<com.android.internal.telephony.Phone: boolean isWifiCallingEnabled()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("CSST", $r6);

        $r7 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        $z1 = virtualinvoke $r7.<com.android.internal.telephony.Phone: boolean isWifiCallingEnabled()>();

        return $z1;
    }

    private boolean isPhoneStillRegistered()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        android.telephony.ServiceState r1, $r4, $r6;
        com.android.internal.telephony.ServiceStateTracker $r2, $r3, $r5;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r2 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.ServiceStateTracker mSST>;

        r1 = $r2.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        z0 = 1;

        if r1 != null goto label1;

        return 1;

     label1:
        $r3 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.ServiceStateTracker mSST>;

        $r4 = $r3.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        $i0 = virtualinvoke $r4.<android.telephony.ServiceState: int getState()>();

        if $i0 == 0 goto label3;

        $r5 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.ServiceStateTracker mSST>;

        $r6 = $r5.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        $i1 = virtualinvoke $r6.<android.telephony.ServiceState: int getDataRegistrationState()>();

        if $i1 != 0 goto label2;

        goto label3;

     label2:
        z0 = 0;

        goto label3;

     label3:
        return z0;
    }

    private void registerNotificationTypes()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        java.util.Map $r1, $r5;
        java.lang.Integer $r2, $r6;
        com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification $r3;
        com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification $r7;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: java.util.Map mNotificationTypeMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1000);

        $r3 = new com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification;

        specialinvoke $r3.<com.android.internal.telephony.CarrierServiceStateTracker$PrefNetworkNotification: void <init>(com.android.internal.telephony.CarrierServiceStateTracker,int)>(r0, 1000);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        $r5 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: java.util.Map mNotificationTypeMap>;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1001);

        $r7 = new com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification;

        specialinvoke $r7.<com.android.internal.telephony.CarrierServiceStateTracker$EmergencyNetworkNotification: void <init>(com.android.internal.telephony.CarrierServiceStateTracker,int)>(r0, 1001);

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r7);

        return;
    }

    private void registerPrefNetworkModeObserver()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        int i0;
        android.content.ContentResolver r1;
        com.android.internal.telephony.Phone $r3, $r4;
        boolean $z0;
        android.content.Context $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        android.net.Uri $r10;
        android.database.ContentObserver $r11;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r3 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        i0 = virtualinvoke $r3.<com.android.internal.telephony.Phone: int getSubId()>();

        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void unregisterPrefNetworkModeObserver()>();

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>(i0);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        r1 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("preferred_network_mode");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>($r9);

        $r11 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.database.ContentObserver mPrefNetworkModeObserver>;

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r10, 1, $r11);

     label1:
        return;
    }

    private void unregisterPrefNetworkModeObserver()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.Phone $r1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        android.database.ContentObserver $r4;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.database.ContentObserver mPrefNetworkModeObserver>;

        virtualinvoke $r3.<android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)>($r4);

        return;
    }

    public void cancelNotification(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.CarrierServiceStateTracker$NotificationType r1;
        android.content.Context r2;
        com.android.internal.telephony.Phone $r3;
        int $i0, $i1;
        android.app.NotificationManager $r4;
        java.lang.String $r5;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        r1 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker$NotificationType;

        $r3 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        r2 = virtualinvoke $r3.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $i0 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: int getTypeId()>();

        virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void removeMessages(int)>($i0);

        $r4 = virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.app.NotificationManager getNotificationManager(android.content.Context)>(r2);

        $r5 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: java.lang.String getNotificationTag()>();

        $i1 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: int getNotificationId()>();

        virtualinvoke $r4.<android.app.NotificationManager: void cancel(java.lang.String,int)>($r5, $i1);

        return;
    }

    public void dispose()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void unregisterPrefNetworkModeObserver()>();

        return;
    }

    public boolean evaluateSendingMessage(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.CarrierServiceStateTracker$NotificationType r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        r1 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker$NotificationType;

        $z0 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: boolean sendMessage()>();

        return $z0;
    }

    public android.database.ContentObserver getContentObserver()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        android.database.ContentObserver $r1;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.database.ContentObserver mPrefNetworkModeObserver>;

        return $r1;
    }

    public int getDelay(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.CarrierServiceStateTracker$NotificationType r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        r1 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker$NotificationType;

        $i0 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: int getDelay()>();

        return $i0;
    }

    public android.app.Notification$Builder getNotificationBuilder(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.CarrierServiceStateTracker$NotificationType r1;
        android.app.Notification$Builder $r2;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        r1 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker$NotificationType;

        $r2 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: android.app.Notification$Builder getNotificationBuilder()>();

        return $r2;
    }

    public android.app.NotificationManager getNotificationManager(android.content.Context)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        android.content.Context r1;
        java.lang.Object $r2;
        android.app.NotificationManager $r3;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        r1 := @parameter0: android.content.Context;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r3 = (android.app.NotificationManager) $r2;

        return $r3;
    }

    public java.util.Map getNotificationTypeMap()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        java.util.Map $r1;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: java.util.Map mNotificationTypeMap>;

        return $r1;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        int i0, $i1, $i3;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        java.util.Map $r6;
        java.lang.Integer $r7;
        java.lang.Object $r8;
        android.os.Message r9;
        com.android.internal.telephony.CarrierServiceStateTracker$NotificationType r10;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        r9 := @parameter0: android.os.Message;

        i0 = r9.<android.os.Message: int what>;

        if i0 == 1000 goto label4;

        if i0 == 1001 goto label4;

        tableswitch(i0)
        {
            case 101: goto label3;
            case 102: goto label3;
            case 103: goto label3;
            case 104: goto label3;
            case 105: goto label2;
            default: goto label1;
        };

     label1:
        goto label5;

     label2:
        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void handleImsCapabilitiesChanged()>();

        goto label5;

     label3:
        specialinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void handleConfigChanges()>();

        goto label5;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sending notification after delay: ");

        $i1 = r9.<android.os.Message: int what>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("CSST", $r5);

        $r6 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: java.util.Map mNotificationTypeMap>;

        $i3 = r9.<android.os.Message: int what>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        r10 = (com.android.internal.telephony.CarrierServiceStateTracker$NotificationType) $r8;

        if r10 == null goto label5;

        virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: void sendNotification(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)>(r10);

     label5:
        return;
    }

    public boolean isRadioOffOrAirplaneMode()
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        int i0;
        com.android.internal.telephony.Phone $r1;
        android.content.ContentResolver $r2;
        com.android.internal.telephony.ServiceStateTracker $r3;
        boolean $z1, z2;
        java.lang.Exception $r4;
        android.content.Context r5;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        $r1 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        r5 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

     label1:
        $r2 = virtualinvoke r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r2, "airplane_mode_on", 0);

     label2:
        z2 = 1;

        $r3 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.ServiceStateTracker mSST>;

        $z1 = virtualinvoke $r3.<com.android.internal.telephony.ServiceStateTracker: boolean isRadioOn()>();

        if $z1 == 0 goto label4;

        if i0 == 0 goto label3;

        z2 = 1;

        goto label4;

     label3:
        z2 = 0;

     label4:
        return z2;

     label5:
        $r4 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("CSST", "Unable to get AIRPLACE_MODE_ON.");

        return 1;

        catch java.lang.Exception from label1 to label2 with label5;
    }

    public void sendNotification(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)
    {
        com.android.internal.telephony.CarrierServiceStateTracker r0;
        com.android.internal.telephony.CarrierServiceStateTracker$NotificationType r1;
        android.content.Context r2;
        android.app.Notification$Builder r3, $r5, $r6, $r7;
        boolean $z0;
        com.android.internal.telephony.Phone $r4;
        long $l0;
        android.content.res.Resources $r8;
        int $i1, $i2;
        android.app.NotificationManager $r10;
        java.lang.String $r11;
        android.app.Notification $r12;

        r0 := @this: com.android.internal.telephony.CarrierServiceStateTracker;

        r1 := @parameter0: com.android.internal.telephony.CarrierServiceStateTracker$NotificationType;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: boolean evaluateSendingMessage(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = r0.<com.android.internal.telephony.CarrierServiceStateTracker: com.android.internal.telephony.Phone mPhone>;

        r2 = virtualinvoke $r4.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        r3 = virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.app.Notification$Builder getNotificationBuilder(com.android.internal.telephony.CarrierServiceStateTracker$NotificationType)>(r1);

        $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r5 = virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>($l0);

        $r6 = virtualinvoke $r5.<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)>(1);

        $r7 = virtualinvoke $r6.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301642);

        $r8 = virtualinvoke r2.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r8.<android.content.res.Resources: int getColor(int)>(17170460);

        virtualinvoke $r7.<android.app.Notification$Builder: android.app.Notification$Builder setColor(int)>($i1);

        $r10 = virtualinvoke r0.<com.android.internal.telephony.CarrierServiceStateTracker: android.app.NotificationManager getNotificationManager(android.content.Context)>(r2);

        $r11 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: java.lang.String getNotificationTag()>();

        $i2 = interfaceinvoke r1.<com.android.internal.telephony.CarrierServiceStateTracker$NotificationType: int getNotificationId()>();

        $r12 = virtualinvoke r3.<android.app.Notification$Builder: android.app.Notification build()>();

        virtualinvoke $r10.<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>($r11, $i2, $r12);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.CarrierServiceStateTracker: int UNINITIALIZED_DELAY_VALUE> = -1;

        <com.android.internal.telephony.CarrierServiceStateTracker: java.lang.String PREF_NETWORK_NOTIFICATION_TAG> = "PrefNetworkNotification";

        <com.android.internal.telephony.CarrierServiceStateTracker: int NOTIFICATION_PREF_NETWORK> = 1000;

        <com.android.internal.telephony.CarrierServiceStateTracker: int NOTIFICATION_EMERGENCY_NETWORK> = 1001;

        <com.android.internal.telephony.CarrierServiceStateTracker: java.lang.String LOG_TAG> = "CSST";

        <com.android.internal.telephony.CarrierServiceStateTracker: java.lang.String EMERGENCY_NOTIFICATION_TAG> = "EmergencyNetworkNotification";

        <com.android.internal.telephony.CarrierServiceStateTracker: int CARRIER_EVENT_VOICE_REGISTRATION> = 101;

        <com.android.internal.telephony.CarrierServiceStateTracker: int CARRIER_EVENT_VOICE_DEREGISTRATION> = 102;

        <com.android.internal.telephony.CarrierServiceStateTracker: int CARRIER_EVENT_IMS_CAPABILITIES_CHANGED> = 105;

        <com.android.internal.telephony.CarrierServiceStateTracker: int CARRIER_EVENT_DATA_REGISTRATION> = 103;

        <com.android.internal.telephony.CarrierServiceStateTracker: int CARRIER_EVENT_DATA_DEREGISTRATION> = 104;

        <com.android.internal.telephony.CarrierServiceStateTracker: int CARRIER_EVENT_BASE> = 100;

        return;
    }
}
