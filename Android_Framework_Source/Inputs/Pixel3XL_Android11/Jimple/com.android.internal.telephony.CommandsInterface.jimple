public interface  com.android.internal.telephony.CommandsInterface extends java.lang.Object
{
    public static final java.lang.String CB_FACILITY_BAIC;
    public static final java.lang.String CB_FACILITY_BAICr;
    public static final java.lang.String CB_FACILITY_BAOC;
    public static final java.lang.String CB_FACILITY_BAOIC;
    public static final java.lang.String CB_FACILITY_BAOICxH;
    public static final java.lang.String CB_FACILITY_BA_ALL;
    public static final java.lang.String CB_FACILITY_BA_FD;
    public static final java.lang.String CB_FACILITY_BA_MO;
    public static final java.lang.String CB_FACILITY_BA_MT;
    public static final java.lang.String CB_FACILITY_BA_SIM;
    public static final java.lang.String CB_FACILITY_BIC_ACR;
    public static final int CDMA_SMS_FAIL_CAUSE_ENCODING_PROBLEM;
    public static final int CDMA_SMS_FAIL_CAUSE_INVALID_TELESERVICE_ID;
    public static final int CDMA_SMS_FAIL_CAUSE_OTHER_TERMINAL_PROBLEM;
    public static final int CDMA_SMS_FAIL_CAUSE_RESOURCE_SHORTAGE;
    public static final int CF_ACTION_DISABLE;
    public static final int CF_ACTION_ENABLE;
    public static final int CF_ACTION_ERASURE;
    public static final int CF_ACTION_REGISTRATION;
    public static final int CF_REASON_ALL;
    public static final int CF_REASON_ALL_CONDITIONAL;
    public static final int CF_REASON_BUSY;
    public static final int CF_REASON_NOT_REACHABLE;
    public static final int CF_REASON_NO_REPLY;
    public static final int CF_REASON_UNCONDITIONAL;
    public static final int CLIR_DEFAULT;
    public static final int CLIR_INVOCATION;
    public static final int CLIR_SUPPRESSION;
    public static final int GSM_SMS_FAIL_CAUSE_MEMORY_CAPACITY_EXCEEDED;
    public static final int GSM_SMS_FAIL_CAUSE_UNSPECIFIED_ERROR;
    public static final int GSM_SMS_FAIL_CAUSE_USIM_APP_TOOLKIT_BUSY;
    public static final int GSM_SMS_FAIL_CAUSE_USIM_DATA_DOWNLOAD_ERROR;
    public static final int SERVICE_CLASS_DATA;
    public static final int SERVICE_CLASS_DATA_ASYNC;
    public static final int SERVICE_CLASS_DATA_SYNC;
    public static final int SERVICE_CLASS_FAX;
    public static final int SERVICE_CLASS_MAX;
    public static final int SERVICE_CLASS_NONE;
    public static final int SERVICE_CLASS_PACKET;
    public static final int SERVICE_CLASS_PAD;
    public static final int SERVICE_CLASS_SMS;
    public static final int SERVICE_CLASS_VOICE;
    public static final int USSD_MODE_LOCAL_CLIENT;
    public static final int USSD_MODE_NOTIFY;
    public static final int USSD_MODE_NOT_SUPPORTED;
    public static final int USSD_MODE_NW_RELEASE;
    public static final int USSD_MODE_NW_TIMEOUT;
    public static final int USSD_MODE_REQUEST;

    public abstract void acceptCall(android.os.Message);

    public abstract void acknowledgeIncomingGsmSmsWithPdu(boolean, java.lang.String, android.os.Message);

    public abstract void acknowledgeLastIncomingCdmaSms(boolean, int, android.os.Message);

    public abstract void acknowledgeLastIncomingGsmSms(boolean, int, android.os.Message);

    public void areUiccApplicationsEnabled(android.os.Message)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Message;

        return;
    }

    public boolean canToggleUiccApplicationsEnablement()
    {
        com.android.internal.telephony.CommandsInterface r0;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        return 0;
    }

    public abstract void cancelPendingUssd(android.os.Message);

    public abstract void changeBarringPassword(java.lang.String, java.lang.String, java.lang.String, android.os.Message);

    public abstract void changeIccPin(java.lang.String, java.lang.String, android.os.Message);

    public abstract void changeIccPin2(java.lang.String, java.lang.String, android.os.Message);

    public abstract void changeIccPin2ForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);

    public abstract void changeIccPinForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);

    public abstract void conference(android.os.Message);

    public abstract void deactivateDataCall(int, int, android.os.Message);

    public abstract void deleteSmsOnRuim(int, android.os.Message);

    public abstract void deleteSmsOnSim(int, android.os.Message);

    public abstract void dial(java.lang.String, boolean, android.telephony.emergency.EmergencyNumber, boolean, int, android.os.Message);

    public abstract void dial(java.lang.String, boolean, android.telephony.emergency.EmergencyNumber, boolean, int, com.android.internal.telephony.UUSInfo, android.os.Message);

    public void enableModem(boolean, android.os.Message)
    {
        com.android.internal.telephony.CommandsInterface r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        return;
    }

    public void enableUiccApplications(boolean, android.os.Message)
    {
        com.android.internal.telephony.CommandsInterface r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        return;
    }

    public abstract void exitEmergencyCallbackMode(android.os.Message);

    public abstract void explicitCallTransfer(android.os.Message);

    public void getAllowedCarriers(android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Message r1;
        android.os.WorkSource r2;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: android.os.WorkSource;

        return;
    }

    public abstract void getAvailableNetworks(android.os.Message);

    public void getBarringInfo(android.os.Message)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Message;

        return;
    }

    public abstract void getBasebandVersion(android.os.Message);

    public abstract void getCDMASubscription(android.os.Message);

    public abstract void getCLIR(android.os.Message);

    public abstract void getCdmaBroadcastConfig(android.os.Message);

    public abstract void getCdmaSubscriptionSource(android.os.Message);

    public void getCellInfoList(android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Message r1;
        android.os.WorkSource r2;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: android.os.WorkSource;

        return;
    }

    public java.util.List getClientRequestStats()
    {
        com.android.internal.telephony.CommandsInterface r0;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        return null;
    }

    public abstract void getCurrentCalls(android.os.Message);

    public abstract void getDataCallList(android.os.Message);

    public abstract void getDataRegistrationState(android.os.Message);

    public abstract void getDeviceIdentity(android.os.Message);

    public abstract void getGsmBroadcastConfig(android.os.Message);

    public abstract void getHardwareConfig(android.os.Message);

    public abstract void getIMEI(android.os.Message);

    public abstract void getIMEISV(android.os.Message);

    public abstract void getIMSI(android.os.Message);

    public abstract void getIMSIForApp(java.lang.String, android.os.Message);

    public abstract void getIccCardStatus(android.os.Message);

    public abstract void getIccSlotsStatus(android.os.Message);

    public abstract void getImsRegistrationState(android.os.Message);

    public abstract void getLastCallFailCause(android.os.Message);

    public abstract void getLastDataCallFailCause(android.os.Message);

    public abstract void getLastPdpFailCause(android.os.Message);

    public abstract int getLteOnCdmaMode();

    public void getModemActivityInfo(android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Message r1;
        android.os.WorkSource r2;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: android.os.WorkSource;

        return;
    }

    public void getModemStatus(android.os.Message)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Message;

        return;
    }

    public abstract void getMute(android.os.Message);

    public abstract void getNetworkSelectionMode(android.os.Message);

    public abstract void getOperator(android.os.Message);

    public abstract void getPDPContextList(android.os.Message);

    public abstract void getPreferredNetworkType(android.os.Message);

    public abstract void getPreferredVoicePrivacy(android.os.Message);

    public abstract void getRadioCapability(android.os.Message);

    public abstract int getRadioState();

    public abstract int getRilVersion();

    public abstract void getSignalStrength(android.os.Message);

    public abstract void getSmscAddress(android.os.Message);

    public abstract void getVoiceRadioTechnology(android.os.Message);

    public abstract void getVoiceRegistrationState(android.os.Message);

    public abstract void handleCallSetupRequestFromSim(boolean, android.os.Message);

    public abstract void hangupConnection(int, android.os.Message);

    public abstract void hangupForegroundResumeBackground(android.os.Message);

    public abstract void hangupWaitingOrBackground(android.os.Message);

    public abstract void iccCloseLogicalChannel(int, android.os.Message);

    public abstract void iccIO(int, int, java.lang.String, int, int, int, java.lang.String, java.lang.String, android.os.Message);

    public abstract void iccIOForApp(int, int, java.lang.String, int, int, int, java.lang.String, java.lang.String, java.lang.String, android.os.Message);

    public abstract void iccOpenLogicalChannel(java.lang.String, int, android.os.Message);

    public abstract void iccTransmitApduBasicChannel(int, int, int, int, int, java.lang.String, android.os.Message);

    public abstract void iccTransmitApduLogicalChannel(int, int, int, int, int, int, java.lang.String, android.os.Message);

    public abstract void invokeOemRilRequestRaw(byte[], android.os.Message);

    public abstract void invokeOemRilRequestStrings(java.lang.String[], android.os.Message);

    public void nvReadItem(int, android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.CommandsInterface r0;
        int i0;
        android.os.Message r1;
        android.os.WorkSource r2;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        r2 := @parameter2: android.os.WorkSource;

        return;
    }

    public abstract void nvResetConfig(int, android.os.Message);

    public abstract void nvWriteCdmaPrl(byte[], android.os.Message);

    public void nvWriteItem(int, java.lang.String, android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.CommandsInterface r0;
        int i0;
        java.lang.String r1;
        android.os.Message r2;
        android.os.WorkSource r3;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Message;

        r3 := @parameter3: android.os.WorkSource;

        return;
    }

    public void onSlotActiveStatusChange(boolean)
    {
        com.android.internal.telephony.CommandsInterface r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        z0 := @parameter0: boolean;

        return;
    }

    public abstract void pullLceData(android.os.Message);

    public abstract void queryAvailableBandMode(android.os.Message);

    public abstract void queryCLIP(android.os.Message);

    public abstract void queryCallForwardStatus(int, int, java.lang.String, android.os.Message);

    public abstract void queryCallWaiting(int, android.os.Message);

    public abstract void queryCdmaRoamingPreference(android.os.Message);

    public abstract void queryFacilityLock(java.lang.String, java.lang.String, int, android.os.Message);

    public abstract void queryFacilityLockForApp(java.lang.String, java.lang.String, int, java.lang.String, android.os.Message);

    public abstract void queryTTYMode(android.os.Message);

    public abstract void registerFoT53ClirlInfo(android.os.Handler, int, java.lang.Object);

    public abstract void registerForAvailable(android.os.Handler, int, java.lang.Object);

    public void registerForBarringInfoChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public abstract void registerForCallStateChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForCallWaitingInfo(android.os.Handler, int, java.lang.Object);

    public abstract void registerForCarrierInfoForImsiEncryption(android.os.Handler, int, java.lang.Object);

    public abstract void registerForCdmaOtaProvision(android.os.Handler, int, java.lang.Object);

    public abstract void registerForCdmaPrlChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForCdmaSubscriptionChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForCellInfoList(android.os.Handler, int, java.lang.Object);

    public abstract void registerForDataCallListChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForDisplayInfo(android.os.Handler, int, java.lang.Object);

    public abstract void registerForEmergencyNumberList(android.os.Handler, int, java.lang.Object);

    public abstract void registerForExitEmergencyCallbackMode(android.os.Handler, int, java.lang.Object);

    public abstract void registerForHardwareConfigChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForIccRefresh(android.os.Handler, int, java.lang.Object);

    public abstract void registerForIccSlotStatusChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForIccStatusChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForImsNetworkStateChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForInCallVoicePrivacyOff(android.os.Handler, int, java.lang.Object);

    public abstract void registerForInCallVoicePrivacyOn(android.os.Handler, int, java.lang.Object);

    public abstract void registerForLceInfo(android.os.Handler, int, java.lang.Object);

    public abstract void registerForLineControlInfo(android.os.Handler, int, java.lang.Object);

    public abstract void registerForModemReset(android.os.Handler, int, java.lang.Object);

    public abstract void registerForNattKeepaliveStatus(android.os.Handler, int, java.lang.Object);

    public abstract void registerForNetworkScanResult(android.os.Handler, int, java.lang.Object);

    public abstract void registerForNetworkStateChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForNotAvailable(android.os.Handler, int, java.lang.Object);

    public abstract void registerForNumberInfo(android.os.Handler, int, java.lang.Object);

    public abstract void registerForOffOrNotAvailable(android.os.Handler, int, java.lang.Object);

    public abstract void registerForOn(android.os.Handler, int, java.lang.Object);

    public abstract void registerForPcoData(android.os.Handler, int, java.lang.Object);

    public abstract void registerForPhysicalChannelConfiguration(android.os.Handler, int, java.lang.Object);

    public abstract void registerForRadioCapabilityChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForRadioStateChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForRedirectedNumberInfo(android.os.Handler, int, java.lang.Object);

    public abstract void registerForResendIncallMute(android.os.Handler, int, java.lang.Object);

    public abstract void registerForRilConnected(android.os.Handler, int, java.lang.Object);

    public abstract void registerForRingbackTone(android.os.Handler, int, java.lang.Object);

    public abstract void registerForSignalInfo(android.os.Handler, int, java.lang.Object);

    public abstract void registerForSrvccStateChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForSubscriptionStatusChanged(android.os.Handler, int, java.lang.Object);

    public abstract void registerForT53AudioControlInfo(android.os.Handler, int, java.lang.Object);

    public abstract void registerForVoiceRadioTechChanged(android.os.Handler, int, java.lang.Object);

    public void registerUiccApplicationEnablementChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public abstract void rejectCall(android.os.Message);

    public abstract void reportSmsMemoryStatus(boolean, android.os.Message);

    public abstract void reportStkServiceIsRunning(android.os.Message);

    public abstract void requestIccSimAuthentication(int, java.lang.String, java.lang.String, android.os.Message);

    public abstract void requestShutdown(android.os.Message);

    public abstract void resetRadio(android.os.Message);

    public abstract void sendBurstDtmf(java.lang.String, int, int, android.os.Message);

    public abstract void sendCDMAFeatureCode(java.lang.String, android.os.Message);

    public abstract void sendCdmaSMSExpectMore(byte[], android.os.Message);

    public abstract void sendCdmaSms(byte[], android.os.Message);

    public abstract void sendDeviceState(int, boolean, android.os.Message);

    public abstract void sendDtmf(char, android.os.Message);

    public abstract void sendEnvelope(java.lang.String, android.os.Message);

    public abstract void sendEnvelopeWithStatus(java.lang.String, android.os.Message);

    public abstract void sendImsCdmaSms(byte[], int, int, android.os.Message);

    public abstract void sendImsGsmSms(java.lang.String, java.lang.String, int, int, android.os.Message);

    public abstract void sendSMS(java.lang.String, java.lang.String, android.os.Message);

    public abstract void sendSMSExpectMore(java.lang.String, java.lang.String, android.os.Message);

    public abstract void sendTerminalResponse(java.lang.String, android.os.Message);

    public abstract void sendUSSD(java.lang.String, android.os.Message);

    public abstract void separateConnection(int, android.os.Message);

    public void setAllowedCarriers(android.telephony.CarrierRestrictionRules, android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.telephony.CarrierRestrictionRules r1;
        android.os.Message r2;
        android.os.WorkSource r3;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.telephony.CarrierRestrictionRules;

        r2 := @parameter1: android.os.Message;

        r3 := @parameter2: android.os.WorkSource;

        return;
    }

    public abstract void setBandMode(int, android.os.Message);

    public abstract void setCLIR(int, android.os.Message);

    public abstract void setCallForward(int, int, int, java.lang.String, int, android.os.Message);

    public abstract void setCallWaiting(boolean, int, android.os.Message);

    public abstract void setCarrierInfoForImsiEncryption(android.telephony.ImsiEncryptionInfo, android.os.Message);

    public abstract void setCdmaBroadcastActivation(boolean, android.os.Message);

    public abstract void setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[], android.os.Message);

    public abstract void setCdmaRoamingPreference(int, android.os.Message);

    public abstract void setCdmaSubscriptionSource(int, android.os.Message);

    public void setCellInfoListRate(int, android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.CommandsInterface r0;
        int i0;
        android.os.Message r1;
        android.os.WorkSource r2;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        r2 := @parameter2: android.os.WorkSource;

        return;
    }

    public abstract void setDataAllowed(boolean, android.os.Message);

    public abstract void setDataProfile(android.telephony.data.DataProfile[], boolean, android.os.Message);

    public abstract void setEmergencyCallbackMode(android.os.Handler, int, java.lang.Object);

    public abstract void setFacilityLock(java.lang.String, boolean, java.lang.String, int, android.os.Message);

    public abstract void setFacilityLockForApp(java.lang.String, boolean, java.lang.String, int, java.lang.String, android.os.Message);

    public abstract void setGsmBroadcastActivation(boolean, android.os.Message);

    public abstract void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[], android.os.Message);

    public abstract void setInitialAttachApn(android.telephony.data.DataProfile, boolean, android.os.Message);

    public abstract void setLinkCapacityReportingCriteria(int, int, int, int[], int[], int, android.os.Message);

    public abstract void setLocationUpdates(boolean, android.os.Message);

    public abstract void setLogicalToPhysicalSlotMapping(int[], android.os.Message);

    public abstract void setMute(boolean, android.os.Message);

    public abstract void setNetworkSelectionModeAutomatic(android.os.Message);

    public abstract void setNetworkSelectionModeManual(java.lang.String, int, android.os.Message);

    public abstract void setOnCallRing(android.os.Handler, int, java.lang.Object);

    public abstract void setOnCatCallSetUp(android.os.Handler, int, java.lang.Object);

    public abstract void setOnCatCcAlphaNotify(android.os.Handler, int, java.lang.Object);

    public abstract void setOnCatEvent(android.os.Handler, int, java.lang.Object);

    public abstract void setOnCatProactiveCmd(android.os.Handler, int, java.lang.Object);

    public abstract void setOnCatSessionEnd(android.os.Handler, int, java.lang.Object);

    public abstract void setOnIccRefresh(android.os.Handler, int, java.lang.Object);

    public abstract void setOnIccSmsFull(android.os.Handler, int, java.lang.Object);

    public abstract void setOnNITZTime(android.os.Handler, int, java.lang.Object);

    public abstract void setOnNewCdmaSms(android.os.Handler, int, java.lang.Object);

    public abstract void setOnNewGsmBroadcastSms(android.os.Handler, int, java.lang.Object);

    public abstract void setOnNewGsmSms(android.os.Handler, int, java.lang.Object);

    public void setOnRegistrationFailed(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public abstract void setOnRestrictedStateChanged(android.os.Handler, int, java.lang.Object);

    public abstract void setOnSignalStrengthUpdate(android.os.Handler, int, java.lang.Object);

    public abstract void setOnSmsOnSim(android.os.Handler, int, java.lang.Object);

    public abstract void setOnSmsStatus(android.os.Handler, int, java.lang.Object);

    public abstract void setOnSs(android.os.Handler, int, java.lang.Object);

    public abstract void setOnSuppServiceNotification(android.os.Handler, int, java.lang.Object);

    public abstract void setOnUSSD(android.os.Handler, int, java.lang.Object);

    public abstract void setOnUnsolOemHookRaw(android.os.Handler, int, java.lang.Object);

    public abstract void setPhoneType(int);

    public abstract void setPreferredNetworkType(int, android.os.Message);

    public abstract void setPreferredVoicePrivacy(boolean, android.os.Message);

    public abstract void setRadioCapability(com.android.internal.telephony.RadioCapability, android.os.Message);

    public void setRadioPower(boolean, android.os.Message)
    {
        com.android.internal.telephony.CommandsInterface r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        interfaceinvoke r0.<com.android.internal.telephony.CommandsInterface: void setRadioPower(boolean,boolean,boolean,android.os.Message)>(z0, 0, 0, r1);

        return;
    }

    public void setRadioPower(boolean, boolean, boolean, android.os.Message)
    {
        com.android.internal.telephony.CommandsInterface r0;
        boolean z0, z1, z2;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        r1 := @parameter3: android.os.Message;

        return;
    }

    public abstract void setSignalStrengthReportingCriteria(android.telephony.SignalThresholdInfo, int, android.os.Message);

    public void setSimCardPower(int, android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.CommandsInterface r0;
        int i0;
        android.os.Message r1;
        android.os.WorkSource r2;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        r2 := @parameter2: android.os.WorkSource;

        return;
    }

    public abstract void setSmscAddress(java.lang.String, android.os.Message);

    public abstract void setSuppServiceNotifications(boolean, android.os.Message);

    public void setSystemSelectionChannels(java.util.List, android.os.Message)
    {
        com.android.internal.telephony.CommandsInterface r0;
        java.util.List r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.os.Message;

        return;
    }

    public abstract void setTTYMode(int, android.os.Message);

    public abstract void setUiccSubscription(int, int, int, int, android.os.Message);

    public abstract void setUnsolResponseFilter(int, android.os.Message);

    public abstract void setupDataCall(int, android.telephony.data.DataProfile, boolean, boolean, int, android.net.LinkProperties, android.os.Message);

    public abstract void startDtmf(char, android.os.Message);

    public abstract void startLceService(int, boolean, android.os.Message);

    public abstract void startNattKeepalive(int, android.net.KeepalivePacketData, int, android.os.Message);

    public abstract void startNetworkScan(android.telephony.NetworkScanRequest, android.os.Message);

    public abstract void stopDtmf(android.os.Message);

    public abstract void stopLceService(android.os.Message);

    public abstract void stopNattKeepalive(int, android.os.Message);

    public abstract void stopNetworkScan(android.os.Message);

    public abstract void supplyIccPin(java.lang.String, android.os.Message);

    public abstract void supplyIccPin2(java.lang.String, android.os.Message);

    public abstract void supplyIccPin2ForApp(java.lang.String, java.lang.String, android.os.Message);

    public abstract void supplyIccPinForApp(java.lang.String, java.lang.String, android.os.Message);

    public abstract void supplyIccPuk(java.lang.String, java.lang.String, android.os.Message);

    public abstract void supplyIccPuk2(java.lang.String, java.lang.String, android.os.Message);

    public abstract void supplyIccPuk2ForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);

    public abstract void supplyIccPukForApp(java.lang.String, java.lang.String, java.lang.String, android.os.Message);

    public abstract void supplyNetworkDepersonalization(java.lang.String, android.os.Message);

    public abstract void supplySimDepersonalization(com.android.internal.telephony.uicc.IccCardApplicationStatus$PersoSubState, java.lang.String, android.os.Message);

    public abstract void switchWaitingOrHoldingAndActive(android.os.Message);

    public abstract void testingEmergencyCall();

    public abstract void unSetOnCallRing(android.os.Handler);

    public abstract void unSetOnCatCallSetUp(android.os.Handler);

    public abstract void unSetOnCatCcAlphaNotify(android.os.Handler);

    public abstract void unSetOnCatEvent(android.os.Handler);

    public abstract void unSetOnCatProactiveCmd(android.os.Handler);

    public abstract void unSetOnCatSessionEnd(android.os.Handler);

    public abstract void unSetOnIccSmsFull(android.os.Handler);

    public abstract void unSetOnNITZTime(android.os.Handler);

    public abstract void unSetOnNewCdmaSms(android.os.Handler);

    public abstract void unSetOnNewGsmBroadcastSms(android.os.Handler);

    public abstract void unSetOnNewGsmSms(android.os.Handler);

    public void unSetOnRegistrationFailed(android.os.Handler)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public abstract void unSetOnRestrictedStateChanged(android.os.Handler);

    public abstract void unSetOnSignalStrengthUpdate(android.os.Handler);

    public abstract void unSetOnSmsOnSim(android.os.Handler);

    public abstract void unSetOnSmsStatus(android.os.Handler);

    public abstract void unSetOnSs(android.os.Handler);

    public abstract void unSetOnSuppServiceNotification(android.os.Handler);

    public abstract void unSetOnUSSD(android.os.Handler);

    public abstract void unSetOnUnsolOemHookRaw(android.os.Handler);

    public abstract void unregisterForAvailable(android.os.Handler);

    public void unregisterForBarringInfoChanged(android.os.Handler)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public abstract void unregisterForCallStateChanged(android.os.Handler);

    public abstract void unregisterForCallWaitingInfo(android.os.Handler);

    public abstract void unregisterForCarrierInfoForImsiEncryption(android.os.Handler);

    public abstract void unregisterForCdmaOtaProvision(android.os.Handler);

    public abstract void unregisterForCdmaPrlChanged(android.os.Handler);

    public abstract void unregisterForCdmaSubscriptionChanged(android.os.Handler);

    public abstract void unregisterForCellInfoList(android.os.Handler);

    public abstract void unregisterForDataCallListChanged(android.os.Handler);

    public abstract void unregisterForDisplayInfo(android.os.Handler);

    public abstract void unregisterForEmergencyNumberList(android.os.Handler);

    public abstract void unregisterForExitEmergencyCallbackMode(android.os.Handler);

    public abstract void unregisterForHardwareConfigChanged(android.os.Handler);

    public abstract void unregisterForIccRefresh(android.os.Handler);

    public abstract void unregisterForIccSlotStatusChanged(android.os.Handler);

    public abstract void unregisterForIccStatusChanged(android.os.Handler);

    public abstract void unregisterForImsNetworkStateChanged(android.os.Handler);

    public abstract void unregisterForInCallVoicePrivacyOff(android.os.Handler);

    public abstract void unregisterForInCallVoicePrivacyOn(android.os.Handler);

    public abstract void unregisterForLceInfo(android.os.Handler);

    public abstract void unregisterForLineControlInfo(android.os.Handler);

    public abstract void unregisterForModemReset(android.os.Handler);

    public abstract void unregisterForNattKeepaliveStatus(android.os.Handler);

    public abstract void unregisterForNetworkScanResult(android.os.Handler);

    public abstract void unregisterForNetworkStateChanged(android.os.Handler);

    public abstract void unregisterForNotAvailable(android.os.Handler);

    public abstract void unregisterForNumberInfo(android.os.Handler);

    public abstract void unregisterForOffOrNotAvailable(android.os.Handler);

    public abstract void unregisterForOn(android.os.Handler);

    public abstract void unregisterForPcoData(android.os.Handler);

    public abstract void unregisterForPhysicalChannelConfiguration(android.os.Handler);

    public abstract void unregisterForRadioCapabilityChanged(android.os.Handler);

    public abstract void unregisterForRadioStateChanged(android.os.Handler);

    public abstract void unregisterForRedirectedNumberInfo(android.os.Handler);

    public abstract void unregisterForResendIncallMute(android.os.Handler);

    public abstract void unregisterForRilConnected(android.os.Handler);

    public abstract void unregisterForRingbackTone(android.os.Handler);

    public abstract void unregisterForSignalInfo(android.os.Handler);

    public abstract void unregisterForSrvccStateChanged(android.os.Handler);

    public abstract void unregisterForSubscriptionStatusChanged(android.os.Handler);

    public abstract void unregisterForT53AudioControlInfo(android.os.Handler);

    public abstract void unregisterForT53ClirInfo(android.os.Handler);

    public abstract void unregisterForVoiceRadioTechChanged(android.os.Handler);

    public void unregisterUiccApplicationEnablementChanged(android.os.Handler)
    {
        com.android.internal.telephony.CommandsInterface r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.CommandsInterface;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public abstract void unsetOnIccRefresh(android.os.Handler);

    public abstract void writeSmsToRuim(int, byte[], android.os.Message);

    public abstract void writeSmsToSim(int, java.lang.String, java.lang.String, android.os.Message);

    public static void <clinit>()
    {
        <com.android.internal.telephony.CommandsInterface: int USSD_MODE_REQUEST> = 1;

        <com.android.internal.telephony.CommandsInterface: int USSD_MODE_NW_TIMEOUT> = 5;

        <com.android.internal.telephony.CommandsInterface: int USSD_MODE_NW_RELEASE> = 2;

        <com.android.internal.telephony.CommandsInterface: int USSD_MODE_NOT_SUPPORTED> = 4;

        <com.android.internal.telephony.CommandsInterface: int USSD_MODE_NOTIFY> = 0;

        <com.android.internal.telephony.CommandsInterface: int USSD_MODE_LOCAL_CLIENT> = 3;

        <com.android.internal.telephony.CommandsInterface: int SERVICE_CLASS_VOICE> = 1;

        <com.android.internal.telephony.CommandsInterface: int SERVICE_CLASS_SMS> = 8;

        <com.android.internal.telephony.CommandsInterface: int SERVICE_CLASS_PAD> = 128;

        <com.android.internal.telephony.CommandsInterface: int SERVICE_CLASS_PACKET> = 64;

        <com.android.internal.telephony.CommandsInterface: int SERVICE_CLASS_NONE> = 0;

        <com.android.internal.telephony.CommandsInterface: int SERVICE_CLASS_MAX> = 128;

        <com.android.internal.telephony.CommandsInterface: int SERVICE_CLASS_FAX> = 4;

        <com.android.internal.telephony.CommandsInterface: int SERVICE_CLASS_DATA_SYNC> = 16;

        <com.android.internal.telephony.CommandsInterface: int SERVICE_CLASS_DATA_ASYNC> = 32;

        <com.android.internal.telephony.CommandsInterface: int SERVICE_CLASS_DATA> = 2;

        <com.android.internal.telephony.CommandsInterface: int GSM_SMS_FAIL_CAUSE_USIM_DATA_DOWNLOAD_ERROR> = 213;

        <com.android.internal.telephony.CommandsInterface: int GSM_SMS_FAIL_CAUSE_USIM_APP_TOOLKIT_BUSY> = 212;

        <com.android.internal.telephony.CommandsInterface: int GSM_SMS_FAIL_CAUSE_UNSPECIFIED_ERROR> = 255;

        <com.android.internal.telephony.CommandsInterface: int GSM_SMS_FAIL_CAUSE_MEMORY_CAPACITY_EXCEEDED> = 211;

        <com.android.internal.telephony.CommandsInterface: int CLIR_SUPPRESSION> = 2;

        <com.android.internal.telephony.CommandsInterface: int CLIR_INVOCATION> = 1;

        <com.android.internal.telephony.CommandsInterface: int CLIR_DEFAULT> = 0;

        <com.android.internal.telephony.CommandsInterface: int CF_REASON_UNCONDITIONAL> = 0;

        <com.android.internal.telephony.CommandsInterface: int CF_REASON_NO_REPLY> = 2;

        <com.android.internal.telephony.CommandsInterface: int CF_REASON_NOT_REACHABLE> = 3;

        <com.android.internal.telephony.CommandsInterface: int CF_REASON_BUSY> = 1;

        <com.android.internal.telephony.CommandsInterface: int CF_REASON_ALL_CONDITIONAL> = 5;

        <com.android.internal.telephony.CommandsInterface: int CF_REASON_ALL> = 4;

        <com.android.internal.telephony.CommandsInterface: int CF_ACTION_REGISTRATION> = 3;

        <com.android.internal.telephony.CommandsInterface: int CF_ACTION_ERASURE> = 4;

        <com.android.internal.telephony.CommandsInterface: int CF_ACTION_ENABLE> = 1;

        <com.android.internal.telephony.CommandsInterface: int CF_ACTION_DISABLE> = 0;

        <com.android.internal.telephony.CommandsInterface: int CDMA_SMS_FAIL_CAUSE_RESOURCE_SHORTAGE> = 35;

        <com.android.internal.telephony.CommandsInterface: int CDMA_SMS_FAIL_CAUSE_OTHER_TERMINAL_PROBLEM> = 39;

        <com.android.internal.telephony.CommandsInterface: int CDMA_SMS_FAIL_CAUSE_INVALID_TELESERVICE_ID> = 4;

        <com.android.internal.telephony.CommandsInterface: int CDMA_SMS_FAIL_CAUSE_ENCODING_PROBLEM> = 96;

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BIC_ACR> = "AR";

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BA_SIM> = "SC";

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BA_MT> = "AC";

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BA_MO> = "AG";

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BA_FD> = "FD";

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BA_ALL> = "AB";

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BAOICxH> = "OX";

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BAOIC> = "OI";

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BAOC> = "AO";

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BAICr> = "IR";

        <com.android.internal.telephony.CommandsInterface: java.lang.String CB_FACILITY_BAIC> = "AI";

        return;
    }
}
