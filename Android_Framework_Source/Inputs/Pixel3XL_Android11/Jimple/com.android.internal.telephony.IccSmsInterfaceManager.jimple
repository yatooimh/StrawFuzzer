public class com.android.internal.telephony.IccSmsInterfaceManager extends java.lang.Object
{
    static final boolean DBG;
    private static final int EVENT_GET_SMSC_DONE;
    private static final int EVENT_LOAD_DONE;
    protected static final int EVENT_SET_BROADCAST_ACTIVATION_DONE;
    protected static final int EVENT_SET_BROADCAST_CONFIG_DONE;
    private static final int EVENT_SET_SMSC_DONE;
    private static final int EVENT_UPDATE_DONE;
    static final java.lang.String LOG_TAG;
    private static final int SMS_CB_CODE_SCHEME_MAX;
    private static final int SMS_CB_CODE_SCHEME_MIN;
    public static final int SMS_MESSAGE_PERIOD_NOT_SPECIFIED;
    public static final int SMS_MESSAGE_PRIORITY_NOT_SPECIFIED;
    protected final android.app.AppOpsManager mAppOps;
    private com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager mCdmaBroadcastRangeManager;
    private final com.android.internal.telephony.LocalLog mCellBroadcastLocalLog;
    private com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager mCellBroadcastRangeManager;
    protected final android.content.Context mContext;
    public com.android.internal.telephony.SmsDispatchersController mDispatchersController;
    protected android.os.Handler mHandler;
    protected final java.lang.Object mLock;
    protected com.android.internal.telephony.Phone mPhone;
    private java.util.List mSms;
    private com.android.internal.telephony.SmsPermissions mSmsPermissions;
    private java.lang.String mSmsc;
    protected boolean mSuccess;

    protected void <init>(com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        com.android.internal.telephony.Phone r1;
        android.content.Context $r2, $r3, $r6;
        java.lang.Object $r4, $r7;
        android.app.AppOpsManager $r5;
        com.android.internal.telephony.SmsDispatchersController $r8;
        com.android.internal.telephony.SmsUsageMonitor $r9;
        com.android.internal.telephony.SmsStorageMonitor $r10;
        android.os.UserManager $r11;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        $r2 = virtualinvoke r1.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r3 = virtualinvoke r1.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r5 = (android.app.AppOpsManager) $r4;

        $r6 = virtualinvoke r1.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r11 = (android.os.UserManager) $r7;

        $r8 = new com.android.internal.telephony.SmsDispatchersController;

        $r10 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor>;

        $r9 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.SmsUsageMonitor mSmsUsageMonitor>;

        specialinvoke $r8.<com.android.internal.telephony.SmsDispatchersController: void <init>(com.android.internal.telephony.Phone,com.android.internal.telephony.SmsStorageMonitor,com.android.internal.telephony.SmsUsageMonitor)>(r1, $r10, $r9);

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void <init>(com.android.internal.telephony.Phone,android.content.Context,android.app.AppOpsManager,android.os.UserManager,com.android.internal.telephony.SmsDispatchersController)>(r1, $r2, $r5, $r11, $r8);

        return;
    }

    public void <init>(com.android.internal.telephony.Phone, android.content.Context, android.app.AppOpsManager, android.os.UserManager, com.android.internal.telephony.SmsDispatchersController)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        com.android.internal.telephony.Phone r1;
        android.content.Context r2;
        android.app.AppOpsManager r3;
        android.os.UserManager r4;
        com.android.internal.telephony.SmsDispatchersController r5;
        java.lang.Object $r6;
        com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager $r7;
        com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager $r8;
        com.android.internal.telephony.LocalLog $r9;
        com.android.internal.telephony.IccSmsInterfaceManager$1 $r10;
        com.android.internal.telephony.SmsPermissions $r11;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.app.AppOpsManager;

        r4 := @parameter3: android.os.UserManager;

        r5 := @parameter4: com.android.internal.telephony.SmsDispatchersController;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r6 = new java.lang.Object;

        specialinvoke $r6.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock> = $r6;

        $r7 = new com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager;

        specialinvoke $r7.<com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager: void <init>(com.android.internal.telephony.IccSmsInterfaceManager)>(r0);

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager mCellBroadcastRangeManager> = $r7;

        $r8 = new com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager;

        specialinvoke $r8.<com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager: void <init>(com.android.internal.telephony.IccSmsInterfaceManager)>(r0);

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager mCdmaBroadcastRangeManager> = $r8;

        $r9 = new com.android.internal.telephony.LocalLog;

        specialinvoke $r9.<com.android.internal.telephony.LocalLog: void <init>(int)>(100);

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.LocalLog mCellBroadcastLocalLog> = $r9;

        $r10 = new com.android.internal.telephony.IccSmsInterfaceManager$1;

        specialinvoke $r10.<com.android.internal.telephony.IccSmsInterfaceManager$1: void <init>(com.android.internal.telephony.IccSmsInterfaceManager)>(r0);

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler> = $r10;

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone> = r1;

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext> = r2;

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.app.AppOpsManager mAppOps> = r3;

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController> = r5;

        $r11 = new com.android.internal.telephony.SmsPermissions;

        specialinvoke $r11.<com.android.internal.telephony.SmsPermissions: void <init>(com.android.internal.telephony.Phone,android.content.Context,android.app.AppOpsManager)>(r1, r2, r3);

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions> = $r11;

        return;
    }

    static java.util.List access$002(com.android.internal.telephony.IccSmsInterfaceManager, java.util.List)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.util.List r1;

        r0 := @parameter0: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter1: java.util.List;

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List mSms> = r1;

        return r1;
    }

    static java.lang.String access$102(com.android.internal.telephony.IccSmsInterfaceManager, java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String mSmsc> = r1;

        return r1;
    }

    static boolean access$200(com.android.internal.telephony.IccSmsInterfaceManager, com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[] r1;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter1: com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[];

        $z0 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean setCellBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])>(r1);

        return $z0;
    }

    static boolean access$300(com.android.internal.telephony.IccSmsInterfaceManager, com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[])
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[] r1;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter1: com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[];

        $z0 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[])>(r1);

        return $z0;
    }

    private void enforceAccessMessageOnICC(java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_MESSAGES_ON_ICC", r1);

        return;
    }

    private void enforceNotOnHandlerThread(java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, $r11;
        android.os.Looper $r3, $r5;
        android.os.Handler $r4;
        java.lang.StringBuilder $r6;
        java.lang.RuntimeException $r10;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        $r3 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        $r4 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler>;

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Looper getLooper()>();

        if $r3 == $r5 goto label1;

        return;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This method ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" will deadlock if called from the handler\'s thread.");

        $r10 = new java.lang.RuntimeException;

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    private java.lang.String filterDestAddress(java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r4;
        com.android.internal.telephony.Phone $r2;
        android.content.Context $r3;
        int $i0;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r4 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r2.<com.android.internal.telephony.Phone: int getSubId()>();

        r1 = staticinvoke <com.android.internal.telephony.SmsNumberUtils: java.lang.String filterDestAddr(android.content.Context,int,java.lang.String)>($r3, $i0, r4);

        if r1 == null goto label1;

        r4 = r1;

        goto label1;

     label1:
        return r4;
    }

    private boolean isFailedOrDraft(android.content.ContentResolver, android.net.Uri)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        android.net.Uri r1;
        long l0;
        int i1;
        java.lang.String[] $r2;
        boolean $z0, z1;
        java.lang.Throwable $r3;
        android.database.sqlite.SQLiteException $r4;
        android.content.ContentResolver r5;
        android.database.Cursor r6, r7, r8;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r5 := @parameter0: android.content.ContentResolver;

        r1 := @parameter1: android.net.Uri;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r6 = null;

        r7 = null;

        z1 = 0;

     label01:
        $r2 = newarray (java.lang.String)[1];

        $r2[0] = "type";

        r8 = virtualinvoke r5.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r1, $r2, null, null, null);

     label02:
        if r8 == null goto label10;

        r7 = r8;

        r6 = r8;

     label03:
        $z0 = interfaceinvoke r8.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label10;

     label04:
        r7 = r8;

        r6 = r8;

     label05:
        i1 = interfaceinvoke r8.<android.database.Cursor: int getInt(int)>(0);

     label06:
        if i1 == 3 goto label07;

        if i1 != 5 goto label08;

     label07:
        z1 = 1;

     label08:
        if r8 == null goto label09;

        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z1;

     label10:
        if r8 == null goto label16;

        goto label15;

     label11:
        $r3 := @caughtexception;

        goto label17;

     label12:
        $r4 := @caughtexception;

        r7 = r6;

     label13:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String,java.lang.Throwable)>("isFailedOrDraft: query message type failed", $r4);

     label14:
        if r6 == null goto label16;

        r8 = r6;

     label15:
        interfaceinvoke r8.<android.database.Cursor: void close()>();

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label17:
        if r7 == null goto label18;

        interfaceinvoke r7.<android.database.Cursor: void close()>();

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r3;

        catch android.database.sqlite.SQLiteException from label01 to label02 with label12;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch android.database.sqlite.SQLiteException from label03 to label04 with label12;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch android.database.sqlite.SQLiteException from label05 to label06 with label12;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label13 to label14 with label11;
    }

    private java.lang.String[] loadTextAndAddress(android.content.ContentResolver, android.net.Uri)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        long l0;
        java.lang.String r1, r11;
        java.lang.String[] $r2, $r3;
        boolean $z0;
        java.lang.Throwable $r4;
        android.database.sqlite.SQLiteException $r5;
        android.content.ContentResolver r6;
        android.net.Uri r7;
        android.database.Cursor r8, r9, r10;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r6 := @parameter0: android.content.ContentResolver;

        r7 := @parameter1: android.net.Uri;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r8 = null;

        r9 = null;

     label01:
        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "body";

        $r2[1] = "address";

        r10 = virtualinvoke r6.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>(r7, $r2, null, null, null);

     label02:
        if r10 == null goto label10;

        r9 = r10;

        r8 = r10;

     label03:
        $z0 = interfaceinvoke r10.<android.database.Cursor: boolean moveToFirst()>();

        if $z0 == 0 goto label10;

     label04:
        r9 = r10;

        r8 = r10;

     label05:
        r11 = interfaceinvoke r10.<android.database.Cursor: java.lang.String getString(int)>(0);

     label06:
        r9 = r10;

        r8 = r10;

     label07:
        r1 = interfaceinvoke r10.<android.database.Cursor: java.lang.String getString(int)>(1);

     label08:
        if r10 == null goto label09;

        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = r11;

        $r3[1] = r1;

        return $r3;

     label10:
        if r10 == null goto label16;

        goto label15;

     label11:
        $r4 := @caughtexception;

        goto label17;

     label12:
        $r5 := @caughtexception;

        r9 = r8;

     label13:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String,java.lang.Throwable)>("loadText: query message text failed", $r5);

     label14:
        if r8 == null goto label16;

        r10 = r8;

     label15:
        interfaceinvoke r10.<android.database.Cursor: void close()>();

     label16:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return null;

     label17:
        if r9 == null goto label18;

        interfaceinvoke r9.<android.database.Cursor: void close()>();

     label18:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch android.database.sqlite.SQLiteException from label01 to label02 with label12;
        catch java.lang.Throwable from label01 to label02 with label11;
        catch android.database.sqlite.SQLiteException from label03 to label04 with label12;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch android.database.sqlite.SQLiteException from label05 to label06 with label12;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch android.database.sqlite.SQLiteException from label07 to label08 with label12;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label13 to label14 with label11;
    }

    private void notifyIfOutgoingEmergencySms(java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        com.android.internal.telephony.Phone $r1, $r3;
        com.android.internal.telephony.emergency.EmergencyNumberTracker $r2;
        java.lang.String r4;
        android.telephony.emergency.EmergencyNumber r5;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r4 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.emergency.EmergencyNumberTracker getEmergencyNumberTracker()>();

        r5 = virtualinvoke $r2.<com.android.internal.telephony.emergency.EmergencyNumberTracker: android.telephony.emergency.EmergencyNumber getEmergencyNumber(java.lang.String)>(r4);

        if r5 == null goto label1;

        $r3 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        virtualinvoke $r3.<com.android.internal.telephony.Phone: void notifyOutgoingEmergencySms(android.telephony.emergency.EmergencyNumber)>(r5);

     label1:
        return;
    }

    private void returnUnspecifiedFailure(android.app.PendingIntent)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        android.app.PendingIntent$CanceledException $r1;
        android.app.PendingIntent r2;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r2 := @parameter0: android.app.PendingIntent;

        if r2 == null goto label4;

     label1:
        virtualinvoke r2.<android.app.PendingIntent: void send(int)>(1);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch android.app.PendingIntent$CanceledException from label1 to label2 with label3;
    }

    private void returnUnspecifiedFailure(java.util.List)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        boolean $z0;
        java.lang.Object $r1;
        android.app.PendingIntent $r2;
        java.util.List r3;
        java.util.Iterator r4;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r3 := @parameter0: java.util.List;

        if r3 != null goto label1;

        return;

     label1:
        r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r1 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        $r2 = (android.app.PendingIntent) $r1;

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(android.app.PendingIntent)>($r2);

        goto label2;

     label3:
        return;
    }

    private void sendDataInternal(java.lang.String, java.lang.String, java.lang.String, int, byte[], android.app.PendingIntent, android.app.PendingIntent, boolean)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r2, $r16, $r24, r25, r26;
        int i0;
        byte[] r3;
        android.app.PendingIntent r4, r5;
        boolean z0, $z1;
        com.android.internal.telephony.SmsDispatchersController $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r25 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: byte[];

        r4 := @parameter5: android.app.PendingIntent;

        r5 := @parameter6: android.app.PendingIntent;

        z0 := @parameter7: boolean;

        $z1 = staticinvoke <com.android.telephony.Rlog: boolean isLoggable(java.lang.String,int)>("SMS", 2);

        if $z1 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendData: destAddr=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scAddr=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" destPort=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" data=\'");

        $r16 = staticinvoke <com.android.internal.telephony.HexDump: java.lang.String toHexString(byte[])>(r3);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' sentIntent=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deliveryIntent=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isForVVM=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r24 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r24);

        goto label1;

     label1:
        r26 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String filterDestAddress(java.lang.String)>(r25);

        $r7 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        virtualinvoke $r7.<com.android.internal.telephony.SmsDispatchersController: void sendData(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent,boolean)>(r1, r26, r2, i0, r3, r4, r5, z0);

        return;
    }

    private void sendTextInternal(java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, boolean, int, boolean, int, boolean, long)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r2, r3, $r29, r30, r31;
        android.app.PendingIntent r4, r5;
        boolean z0, z1, z2, $z3;
        int i0, i1;
        long l2;
        com.android.internal.telephony.SmsDispatchersController $r7;
        java.lang.StringBuilder $r8;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r30 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.app.PendingIntent;

        r5 := @parameter5: android.app.PendingIntent;

        z0 := @parameter6: boolean;

        i0 := @parameter7: int;

        z1 := @parameter8: boolean;

        i1 := @parameter9: int;

        z2 := @parameter10: boolean;

        l2 := @parameter11: long;

        $z3 = staticinvoke <com.android.telephony.Rlog: boolean isLoggable(java.lang.String,int)>("SMS", 2);

        if $z3 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendText: destAddr=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r30);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" scAddr=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" text=\'");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' sentIntent=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deliveryIntent=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" priority=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" expectMore=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" validityPeriod=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isForVVM=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id= ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r29 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r29);

        goto label1;

     label1:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void notifyIfOutgoingEmergencySms(java.lang.String)>(r30);

        r31 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String filterDestAddress(java.lang.String)>(r30);

        $r7 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        virtualinvoke $r7.<com.android.internal.telephony.SmsDispatchersController: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,android.net.Uri,java.lang.String,boolean,int,boolean,int,boolean,long)>(r31, r2, r3, r4, r5, null, r1, z0, i0, z1, i1, z2, l2);

        return;
    }

    private boolean setCdmaBroadcastActivation(boolean)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        boolean z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;
        android.os.Handler $r6;
        com.android.internal.telephony.Phone $r7;
        com.android.internal.telephony.CommandsInterface $r8;
        java.lang.Object $r9, r13;
        java.lang.Throwable $r10, $r11;
        android.os.Message r14;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling setCdmaBroadcastActivation(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r5);

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceNotOnHandlerThread(java.lang.String)>("setCdmaBroadcastActivation");

        r13 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        entermonitor r13;

     label01:
        $r6 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler>;

        r14 = virtualinvoke $r6.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess> = 0;

        $r7 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r8 = $r7.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r8.<com.android.internal.telephony.CommandsInterface: void setCdmaBroadcastActivation(boolean,android.os.Message)>(z0, r14);

     label02:
        $r9 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        virtualinvoke $r9.<java.lang.Object: void wait()>();

     label03:
        goto label06;

     label04:
        $r11 := @caughtexception;

     label05:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("interrupted while trying to set cdma broadcast activation");

     label06:
        exitmonitor r13;

     label07:
        $z1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess>;

        return $z1;

     label08:
        $r10 := @caughtexception;

     label09:
        exitmonitor r13;

     label10:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private boolean setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[])
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        android.os.Message r1;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.String $r6;
        android.os.Handler $r7;
        com.android.internal.telephony.Phone $r8;
        com.android.internal.telephony.CommandsInterface $r9;
        java.lang.Object $r10, r15;
        boolean $z0;
        java.lang.Throwable $r11, $r12;
        com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[] r13;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r13 := @parameter0: com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling setCdmaBroadcastConfig with ");

        $i0 = lengthof r13;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" configurations");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r6);

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceNotOnHandlerThread(java.lang.String)>("setCdmaBroadcastConfig");

        r15 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        entermonitor r15;

     label01:
        $r7 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler>;

        r1 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess> = 0;

        $r8 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r9 = $r8.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r9.<com.android.internal.telephony.CommandsInterface: void setCdmaBroadcastConfig(com.android.internal.telephony.cdma.CdmaSmsBroadcastConfigInfo[],android.os.Message)>(r13, r1);

     label02:
        $r10 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        virtualinvoke $r10.<java.lang.Object: void wait()>();

     label03:
        goto label06;

     label04:
        $r11 := @caughtexception;

     label05:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("interrupted while trying to set cdma broadcast config");

     label06:
        exitmonitor r15;

     label07:
        $z0 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess>;

        return $z0;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor r15;

     label10:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private boolean setCellBroadcastActivation(boolean)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        boolean z0, $z1;
        java.lang.StringBuilder $r1;
        java.lang.String $r5;
        android.os.Handler $r6;
        com.android.internal.telephony.Phone $r7;
        com.android.internal.telephony.CommandsInterface $r8;
        java.lang.Object $r9, r13;
        java.lang.Throwable $r10, $r11;
        android.os.Message r14;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        z0 := @parameter0: boolean;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling setCellBroadcastActivation(");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r5);

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceNotOnHandlerThread(java.lang.String)>("setCellBroadcastConfig");

        r13 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        entermonitor r13;

     label01:
        $r6 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler>;

        r14 = virtualinvoke $r6.<android.os.Handler: android.os.Message obtainMessage(int)>(3);

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess> = 0;

        $r7 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r8 = $r7.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r8.<com.android.internal.telephony.CommandsInterface: void setGsmBroadcastActivation(boolean,android.os.Message)>(z0, r14);

     label02:
        $r9 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        virtualinvoke $r9.<java.lang.Object: void wait()>();

     label03:
        goto label06;

     label04:
        $r10 := @caughtexception;

     label05:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("interrupted while trying to set cell broadcast activation");

     label06:
        exitmonitor r13;

     label07:
        $z1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess>;

        return $z1;

     label08:
        $r11 := @caughtexception;

     label09:
        exitmonitor r13;

     label10:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private boolean setCellBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[])
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        android.os.Message r1;
        java.lang.StringBuilder $r2;
        int $i0;
        java.lang.String $r6;
        android.os.Handler $r7;
        com.android.internal.telephony.Phone $r8;
        com.android.internal.telephony.CommandsInterface $r9;
        java.lang.Object $r10, r15;
        boolean $z0;
        java.lang.Throwable $r11, $r12;
        com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[] r13;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r13 := @parameter0: com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling setGsmBroadcastConfig with ");

        $i0 = lengthof r13;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" configurations");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r6);

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceNotOnHandlerThread(java.lang.String)>("setCellBroadcastConfig");

        r15 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        entermonitor r15;

     label01:
        $r7 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler>;

        r1 = virtualinvoke $r7.<android.os.Handler: android.os.Message obtainMessage(int)>(4);

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess> = 0;

        $r8 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r9 = $r8.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r9.<com.android.internal.telephony.CommandsInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>(r13, r1);

     label02:
        $r10 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        virtualinvoke $r10.<java.lang.Object: void wait()>();

     label03:
        goto label06;

     label04:
        $r11 := @caughtexception;

     label05:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("interrupted while trying to set cell broadcast config");

     label06:
        exitmonitor r15;

     label07:
        $z0 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess>;

        return $z0;

     label08:
        $r12 := @caughtexception;

     label09:
        exitmonitor r15;

     label10:
        throw $r12;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.InterruptedException from label02 to label03 with label04;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    protected java.util.ArrayList buildValidRawData(java.util.ArrayList)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.util.ArrayList r1, $r3;
        int i0, i3;
        java.lang.Object $r4, $r7;
        byte[] $r5, $r8;
        byte $b1, $b2;
        com.android.internal.telephony.SmsRawData $r6;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.util.ArrayList;

        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(i0);

        i3 = 0;

     label1:
        if i3 >= i0 goto label4;

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r5 = (byte[]) $r4;

        $b1 = $r5[0];

        $b2 = $b1 & 1;

        if $b2 != 0 goto label2;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(null);

        goto label3;

     label2:
        $r6 = new com.android.internal.telephony.SmsRawData;

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r8 = (byte[]) $r7;

        specialinvoke $r6.<com.android.internal.telephony.SmsRawData: void <init>(byte[])>($r8);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r6);

     label3:
        i3 = i3 + 1;

        goto label1;

     label4:
        return $r3;
    }

    public boolean copyMessageToIccEf(java.lang.String, int, byte[], byte[])
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0, $i1, $i2, $i3;
        byte[] r1, r26;
        java.lang.StringBuilder $r2;
        java.lang.String $r6, $r9, $r12, $r21, $r22, r25;
        android.app.AppOpsManager $r13;
        android.os.Handler $r14;
        com.android.internal.telephony.Phone $r15, $r16, $r19;
        com.android.internal.telephony.CommandsInterface $r17, $r20;
        java.lang.Object $r18, r28;
        boolean $z0;
        java.lang.Throwable $r23, $r24;
        android.os.Message r29;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r25 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r26 := @parameter2: byte[];

        r1 := @parameter3: byte[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("copyMessageToIccEf: status=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ==> pdu=(");

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r26);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("), smsc=(");

        $r9 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r12);

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)>("Copying message to Icc");

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceNotOnHandlerThread(java.lang.String)>("copyMessageToIccEf");

        $r13 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.app.AppOpsManager mAppOps>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i2 = virtualinvoke $r13.<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)>("android:write_icc_sms", $i1, r25);

        if $i2 == 0 goto label01;

        return 0;

     label01:
        r28 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        entermonitor r28;

     label02:
        r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess> = 0;

        $r14 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler>;

        r29 = virtualinvoke $r14.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

        $r15 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $i3 = virtualinvoke $r15.<com.android.internal.telephony.Phone: int getPhoneType()>();

        if 1 != $i3 goto label04;

        $r19 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r20 = $r19.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r21 = staticinvoke <com.android.internal.telephony.uicc.IccUtils: java.lang.String bytesToHexString(byte[])>(r1);

        $r22 = staticinvoke <com.android.internal.telephony.uicc.IccUtils: java.lang.String bytesToHexString(byte[])>(r26);

        interfaceinvoke $r20.<com.android.internal.telephony.CommandsInterface: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)>(i0, $r21, $r22, r29);

     label03:
        goto label05;

     label04:
        $r16 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r17 = $r16.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r17.<com.android.internal.telephony.CommandsInterface: void writeSmsToRuim(int,byte[],android.os.Message)>(i0, r26, r29);

     label05:
        $r18 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        virtualinvoke $r18.<java.lang.Object: void wait()>();

     label06:
        goto label09;

     label07:
        $r24 := @caughtexception;

     label08:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("interrupted while trying to update by index");

     label09:
        exitmonitor r28;

     label10:
        $z0 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess>;

        return $z0;

     label11:
        $r23 := @caughtexception;

     label12:
        exitmonitor r28;

     label13:
        throw $r23;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.InterruptedException from label05 to label06 with label07;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public boolean disableCdmaBroadcastRange(int, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0, i1, $i2;
        boolean z0, $z1, z3;
        android.content.Context $r1, $r2;
        android.content.pm.PackageManager $r3;
        com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager $r4, $r10;
        com.android.internal.telephony.LocalLog $r9, $r15;
        java.lang.Throwable $r16;
        java.lang.String r17, r19, r21;
        java.lang.StringBuilder r18, r20;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.RECEIVE_EMERGENCY_BROADCAST", "Disabling cell broadcast SMS");

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r17 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>($i2);

        $r4 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager mCdmaBroadcastRangeManager>;

        z0 = virtualinvoke $r4.<com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager: boolean disableRange(int,int,java.lang.String)>(i0, i1, r17);

     label02:
        z3 = 0;

        if z0 != 0 goto label05;

     label03:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to remove cdma broadcast channels range ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r19 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>(r19);

        $r15 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.LocalLog mCellBroadcastLocalLog>;

        virtualinvoke $r15.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r19);

     label04:
        exitmonitor r0;

        return 0;

     label05:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed cdma broadcast channels range ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r21 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>(r21);

        $r9 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.LocalLog mCellBroadcastLocalLog>;

        virtualinvoke $r9.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r21);

     label06:
        $r10 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager mCdmaBroadcastRangeManager>;

        $z1 = virtualinvoke $r10.<com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager: boolean isEmpty()>();

        if $z1 != 0 goto label08;

     label07:
        z3 = 1;

     label08:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean setCdmaBroadcastActivation(boolean)>(z3);

     label09:
        exitmonitor r0;

        return 1;

     label10:
        $r16 := @caughtexception;

        exitmonitor r0;

        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public boolean disableCellBroadcast(int, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCellBroadcastRange(int,int,int)>(i0, i0, i1);

        return $z0;
    }

    public boolean disableCellBroadcastRange(int, int, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0, i1, i2;
        android.content.Context r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r10;
        java.lang.IllegalArgumentException $r11;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("disabling cell broadcast range [");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. ranType=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.RECEIVE_EMERGENCY_BROADCAST", $r10);

        if i2 != 1 goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableGsmBroadcastRange(int,int)>(i0, i1);

        return $z1;

     label1:
        if i2 != 2 goto label2;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean disableCdmaBroadcastRange(int,int)>(i0, i1);

        return $z0;

     label2:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not a supported RAN Type");

        throw $r11;
    }

    public boolean disableGsmBroadcastRange(int, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0, i1, $i2;
        boolean z0, $z1, z3;
        android.content.Context $r1, $r2;
        android.content.pm.PackageManager $r3;
        com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager $r4, $r10;
        com.android.internal.telephony.LocalLog $r9, $r15;
        java.lang.Throwable $r16;
        java.lang.String r17, r19, r21;
        java.lang.StringBuilder r18, r20;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.RECEIVE_EMERGENCY_BROADCAST", "Disabling cell broadcast SMS");

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r17 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>($i2);

        $r4 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager mCellBroadcastRangeManager>;

        z0 = virtualinvoke $r4.<com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager: boolean disableRange(int,int,java.lang.String)>(i0, i1, r17);

     label02:
        z3 = 0;

        if z0 != 0 goto label05;

     label03:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to remove GSM cell broadcast channels range ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r19 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>(r19);

        $r15 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.LocalLog mCellBroadcastLocalLog>;

        virtualinvoke $r15.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r19);

     label04:
        exitmonitor r0;

        return 0;

     label05:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed GSM cell broadcast channels range ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r21 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>(r21);

        $r9 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.LocalLog mCellBroadcastLocalLog>;

        virtualinvoke $r9.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r21);

     label06:
        $r10 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager mCellBroadcastRangeManager>;

        $z1 = virtualinvoke $r10.<com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager: boolean isEmpty()>();

        if $z1 != 0 goto label08;

     label07:
        z3 = 1;

     label08:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean setCellBroadcastActivation(boolean)>(z3);

     label09:
        exitmonitor r0;

        return 1;

     label10:
        $r16 := @caughtexception;

        exitmonitor r0;

        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        java.lang.StringBuilder $r4, $r9;
        com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager $r6;
        java.lang.String $r8, $r13;
        com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager $r11;
        com.android.internal.telephony.LocalLog $r14;
        com.android.internal.telephony.SmsDispatchersController $r15;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enabled GSM channels: ");

        $r6 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager mCellBroadcastRangeManager>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Enabled CDMA channels: ");

        $r11 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager mCdmaBroadcastRangeManager>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r13);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("CellBroadcast log:");

        $r14 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.LocalLog mCellBroadcastLocalLog>;

        virtualinvoke $r14.<com.android.internal.telephony.LocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>("SMS dispatcher controller log:");

        $r15 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        virtualinvoke $r15.<com.android.internal.telephony.SmsDispatchersController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r2, r3);

        virtualinvoke r2.<java.io.PrintWriter: void flush()>();

        return;
    }

    public boolean enableCdmaBroadcastRange(int, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0, i1, $i2;
        boolean z0, $z1, z3;
        android.content.Context $r1, $r2;
        android.content.pm.PackageManager $r3;
        com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager $r4, $r10;
        com.android.internal.telephony.LocalLog $r9, $r15;
        java.lang.Throwable $r16;
        java.lang.String r17, r19, r21;
        java.lang.StringBuilder r18, r20;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.RECEIVE_EMERGENCY_BROADCAST", "Enabling cdma broadcast SMS");

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r17 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>($i2);

        $r4 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager mCdmaBroadcastRangeManager>;

        z0 = virtualinvoke $r4.<com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager: boolean enableRange(int,int,java.lang.String)>(i0, i1, r17);

     label02:
        z3 = 0;

        if z0 != 0 goto label05;

     label03:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to add cdma broadcast channels range ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r19 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>(r19);

        $r15 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.LocalLog mCellBroadcastLocalLog>;

        virtualinvoke $r15.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r19);

     label04:
        exitmonitor r0;

        return 0;

     label05:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added cdma broadcast channels range ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r21 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>(r21);

        $r9 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.LocalLog mCellBroadcastLocalLog>;

        virtualinvoke $r9.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r21);

     label06:
        $r10 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager mCdmaBroadcastRangeManager>;

        $z1 = virtualinvoke $r10.<com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager: boolean isEmpty()>();

        if $z1 != 0 goto label08;

     label07:
        z3 = 1;

     label08:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean setCdmaBroadcastActivation(boolean)>(z3);

     label09:
        exitmonitor r0;

        return 1;

     label10:
        $r16 := @caughtexception;

        exitmonitor r0;

        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    public boolean enableCellBroadcast(int, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCellBroadcastRange(int,int,int)>(i0, i0, i1);

        return $z0;
    }

    public boolean enableCellBroadcastRange(int, int, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0, i1, i2;
        android.content.Context r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r10;
        java.lang.IllegalArgumentException $r11;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("enabling cell broadcast range [");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]. ranType=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.RECEIVE_EMERGENCY_BROADCAST", $r10);

        if i2 != 1 goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableGsmBroadcastRange(int,int)>(i0, i1);

        return $z1;

     label1:
        if i2 != 2 goto label2;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean enableCdmaBroadcastRange(int,int)>(i0, i1);

        return $z0;

     label2:
        $r11 = new java.lang.IllegalArgumentException;

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Not a supported RAN Type");

        throw $r11;
    }

    public boolean enableGsmBroadcastRange(int, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0, i1, $i2;
        boolean z0, $z1, z3;
        android.content.Context $r1, $r2;
        android.content.pm.PackageManager $r3;
        com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager $r4, $r10;
        com.android.internal.telephony.LocalLog $r9, $r15;
        java.lang.Throwable $r16;
        java.lang.String r17, r19, r21;
        java.lang.StringBuilder r18, r20;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.RECEIVE_EMERGENCY_BROADCAST", "Enabling cell broadcast SMS");

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r17 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String getNameForUid(int)>($i2);

        $r4 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager mCellBroadcastRangeManager>;

        z0 = virtualinvoke $r4.<com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager: boolean enableRange(int,int,java.lang.String)>(i0, i1, r17);

     label02:
        z3 = 0;

        if z0 != 0 goto label05;

     label03:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to add GSM cell broadcast channels range ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r19 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>(r19);

        $r15 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.LocalLog mCellBroadcastLocalLog>;

        virtualinvoke $r15.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r19);

     label04:
        exitmonitor r0;

        return 0;

     label05:
        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added GSM cell broadcast channels range ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        r21 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>(r21);

        $r9 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.LocalLog mCellBroadcastLocalLog>;

        virtualinvoke $r9.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r21);

     label06:
        $r10 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager mCellBroadcastRangeManager>;

        $z1 = virtualinvoke $r10.<com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager: boolean isEmpty()>();

        if $z1 != 0 goto label08;

     label07:
        z3 = 1;

     label08:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean setCellBroadcastActivation(boolean)>(z3);

     label09:
        exitmonitor r0;

        return 1;

     label10:
        $r16 := @caughtexception;

        exitmonitor r0;

        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
    }

    protected void enforceReceiveAndSend(java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1;
        android.content.Context $r2, $r3;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.RECEIVE_SMS", r1);

        $r3 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        virtualinvoke $r3.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SEND_SMS", r1);

        return;
    }

    public java.util.List getAllMessagesFromIccEf(java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        android.content.Context $r1;
        android.app.AppOpsManager $r2;
        int $i0, $i1;
        com.android.internal.telephony.Phone $r3;
        android.os.Handler $r4;
        android.os.Message $r5;
        java.lang.Object $r6, r12;
        java.util.List $r7;
        java.util.ArrayList $r8;
        java.lang.Throwable $r9, $r10;
        java.lang.String r11;
        com.android.internal.telephony.uicc.IccFileHandler r13;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r11 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>("getAllMessagesFromEF");

        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.RECEIVE_SMS", "Reading messages from Icc");

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceAccessMessageOnICC(java.lang.String)>("Reading messages from Icc");

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceNotOnHandlerThread(java.lang.String)>("getAllMessagesFromIccEf");

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.app.AppOpsManager mAppOps>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = virtualinvoke $r2.<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)>("android:read_icc_sms", $i0, r11);

        if $i1 == 0 goto label01;

        $r8 = new java.util.ArrayList;

        specialinvoke $r8.<java.util.ArrayList: void <init>()>();

        return $r8;

     label01:
        r12 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        entermonitor r12;

     label02:
        $r3 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        r13 = virtualinvoke $r3.<com.android.internal.telephony.Phone: com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()>();

     label03:
        if r13 != null goto label06;

     label04:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("Cannot load Sms records. No icc card?");

        r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List mSms> = null;

        exitmonitor r12;

     label05:
        return null;

     label06:
        $r4 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler>;

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Message obtainMessage(int)>(1);

        virtualinvoke r13.<com.android.internal.telephony.uicc.IccFileHandler: void loadEFLinearFixedAll(int,android.os.Message)>(28476, $r5);

     label07:
        $r6 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        virtualinvoke $r6.<java.lang.Object: void wait()>();

     label08:
        goto label11;

     label09:
        $r9 := @caughtexception;

     label10:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("interrupted while trying to load from the Icc");

     label11:
        exitmonitor r12;

     label12:
        $r7 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.util.List mSms>;

        return $r7;

     label13:
        $r10 := @caughtexception;

     label14:
        exitmonitor r12;

     label15:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label13;
        catch java.lang.Throwable from label06 to label07 with label13;
        catch java.lang.InterruptedException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label10 to label11 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public java.lang.String getImsSmsFormat()
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        com.android.internal.telephony.SmsDispatchersController $r1;
        java.lang.String $r2;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.SmsDispatchersController: java.lang.String getImsSmsFormat()>();

        return $r2;
    }

    public int getPremiumSmsPermission(java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1;
        com.android.internal.telephony.SmsDispatchersController $r2;
        int $i0;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        $i0 = virtualinvoke $r2.<com.android.internal.telephony.SmsDispatchersController: int getPremiumSmsPermission(java.lang.String)>(r1);

        return $i0;
    }

    public int getSmsCapacityOnIcc()
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        android.content.Context $r1;
        com.android.internal.telephony.Phone $r2, $r8;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        com.android.internal.telephony.uicc.UiccController $r7;
        int $i1, i2;
        com.android.internal.telephony.uicc.IccRecords $r9;
        com.android.internal.telephony.uicc.UiccProfile r10;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.READ_PRIVILEGED_PHONE_STATE", "getSmsCapacityOnIcc");

        i2 = 0;

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.Phone: boolean getIccRecordsLoaded()>();

        if $z0 == 0 goto label3;

        $r7 = staticinvoke <com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccController getInstance()>();

        $r8 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $i1 = virtualinvoke $r8.<com.android.internal.telephony.Phone: int getPhoneId()>();

        r10 = virtualinvoke $r7.<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccProfile getUiccProfileForPhone(int)>($i1);

        if r10 == null goto label1;

        $r9 = virtualinvoke r10.<com.android.internal.telephony.uicc.UiccProfile: com.android.internal.telephony.uicc.IccRecords getIccRecords()>();

        i2 = virtualinvoke $r9.<com.android.internal.telephony.uicc.IccRecords: int getSmsCapacityOnIcc()>();

        goto label2;

     label1:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("uiccProfile is null");

     label2:
        goto label4;

     label3:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("getSmsCapacityOnIcc - aborting, no icc card present.");

        i2 = 0;

     label4:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getSmsCapacityOnIcc().numberOnIcc = ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r6);

        return i2;
    }

    public java.lang.String getSmscAddressFromIccEf(java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        com.android.internal.telephony.SmsPermissions $r1;
        boolean $z0;
        android.os.Handler $r2;
        com.android.internal.telephony.Phone $r3;
        com.android.internal.telephony.CommandsInterface $r4;
        java.lang.Object $r5, r10;
        java.lang.String $r6, r9;
        java.lang.Throwable $r7, $r8;
        android.os.Message r11;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r9 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.SmsPermissions: boolean checkCallingOrSelfCanGetSmscAddress(java.lang.String,java.lang.String)>(r9, "getSmscAddressFromIccEf");

        if $z0 != 0 goto label01;

        return null;

     label01:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceNotOnHandlerThread(java.lang.String)>("getSmscAddressFromIccEf");

        r10 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        entermonitor r10;

     label02:
        r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String mSmsc> = null;

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler>;

        r11 = virtualinvoke $r2.<android.os.Handler: android.os.Message obtainMessage(int)>(5);

        $r3 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r4 = $r3.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r4.<com.android.internal.telephony.CommandsInterface: void getSmscAddress(android.os.Message)>(r11);

     label03:
        $r5 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        virtualinvoke $r5.<java.lang.Object: void wait()>();

     label04:
        goto label07;

     label05:
        $r8 := @caughtexception;

     label06:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("interrupted while trying to read SMSC");

     label07:
        exitmonitor r10;

     label08:
        $r6 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String mSmsc>;

        return $r6;

     label09:
        $r7 := @caughtexception;

     label10:
        exitmonitor r10;

     label11:
        throw $r7;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public void injectSmsPdu(byte[], java.lang.String, android.app.PendingIntent)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        byte[] r1;
        java.lang.String r2, $r15;
        android.app.PendingIntent r3;
        android.content.Context $r5;
        int $i0;
        boolean $z0;
        com.android.internal.telephony._$$Lambda$IccSmsInterfaceManager$cvOxK575BfAjp1_eMIWU7CBhLq0 $r6;
        com.android.internal.telephony.SmsDispatchersController $r7;
        java.lang.StringBuilder $r8;
        com.android.internal.telephony.SmsPermissions $r16;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.app.PendingIntent;

        $r5 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        $i0 = virtualinvoke $r5.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.MODIFY_PHONE_STATE");

        if $i0 == 0 goto label1;

        $r16 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions>;

        virtualinvoke $r16.<com.android.internal.telephony.SmsPermissions: void enforceCallerIsImsAppOrCarrierApp(java.lang.String)>("injectSmsPdu");

     label1:
        $z0 = staticinvoke <com.android.telephony.Rlog: boolean isLoggable(java.lang.String,int)>("SMS", 2);

        if $z0 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pdu: ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n format=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n receivedIntent=");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r15);

     label2:
        $r7 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        $r6 = new com.android.internal.telephony._$$Lambda$IccSmsInterfaceManager$cvOxK575BfAjp1_eMIWU7CBhLq0;

        specialinvoke $r6.<com.android.internal.telephony._$$Lambda$IccSmsInterfaceManager$cvOxK575BfAjp1_eMIWU7CBhLq0: void <init>(com.android.internal.telephony.IccSmsInterfaceManager,android.app.PendingIntent)>(r0, r3);

        virtualinvoke $r7.<com.android.internal.telephony.SmsDispatchersController: void injectSmsPdu(byte[],java.lang.String,com.android.internal.telephony.SmsDispatchersController$SmsInjectionCallback)>(r1, r2, $r6);

        return;
    }

    public boolean isImsSmsSupported()
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        com.android.internal.telephony.SmsDispatchersController $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.SmsDispatchersController: boolean isIms()>();

        return $z0;
    }

    public void lambda$injectSmsPdu$0$IccSmsInterfaceManager(android.app.PendingIntent, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0;
        android.app.PendingIntent$CanceledException $r1;
        android.app.PendingIntent r2;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r2 := @parameter0: android.app.PendingIntent;

        i0 := @parameter1: int;

        if r2 == null goto label4;

     label1:
        virtualinvoke r2.<android.app.PendingIntent: void send(int)>(i0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("receivedIntent cancelled.");

     label4:
        return;

        catch android.app.PendingIntent$CanceledException from label1 to label2 with label3;
    }

    protected void log(java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("IccSmsInterfaceManager", r1);

        return;
    }

    protected void loge(java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("IccSmsInterfaceManager", r1);

        return;
    }

    protected void loge(java.lang.String, java.lang.Throwable)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("IccSmsInterfaceManager", r1, r2);

        return;
    }

    protected byte[] makeSmsRecordData(int, byte[])
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        byte[] r1, r3;
        com.android.internal.telephony.Phone $r2;
        int $i0, $i1, $i4, $i5, i7, i8, $i9;
        byte $b2, $b3, $b6;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        i7 := @parameter0: int;

        r1 := @parameter1: byte[];

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r2.<com.android.internal.telephony.Phone: int getPhoneType()>();

        if 1 != $i0 goto label1;

        r3 = newarray (byte)[176];

        goto label2;

     label1:
        r3 = newarray (byte)[255];

     label2:
        $i1 = i7 & 7;

        $b2 = (byte) $i1;

        $b3 = (byte) $b2;

        r3[0] = $b3;

        $i4 = lengthof r1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r3, 1, $i4);

        $i5 = lengthof r1;

        i8 = $i5 + 1;

     label3:
        $i9 = lengthof r3;

        if i8 >= $i9 goto label4;

        $b6 = (byte) -1;

        r3[i8] = $b6;

        i8 = i8 + 1;

        goto label3;

     label4:
        return r3;
    }

    protected void markMessagesAsRead(java.util.ArrayList)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.util.ArrayList r1;
        com.android.internal.telephony.uicc.IccFileHandler r2;
        int i0, i1, $i4, $i5, $i6, $i7, i8;
        byte[] r3, $r6, r12;
        com.android.internal.telephony.Phone $r4;
        java.lang.Object $r5;
        byte $b2, $b3;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7;
        java.lang.String $r11;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.util.ArrayList;

        if r1 != null goto label1;

        return;

     label1:
        $r4 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        r2 = virtualinvoke $r4.<com.android.internal.telephony.Phone: com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()>();

        if r2 != null goto label3;

        $z1 = staticinvoke <com.android.telephony.Rlog: boolean isLoggable(java.lang.String,int)>("SMS", 3);

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("markMessagesAsRead - aborting, no icc card present.");

     label2:
        return;

     label3:
        i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        i8 = 0;

     label4:
        if i8 >= i0 goto label6;

        $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>(i8);

        r12 = (byte[]) $r5;

        $b2 = r12[0];

        $b3 = $b2 & 7;

        if $b3 != 3 goto label5;

        i1 = lengthof r12;

        $i4 = i1 - 1;

        r3 = newarray (byte)[$i4];

        $i5 = i1 - 1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r12, 1, r3, 0, $i5);

        $i6 = i8 + 1;

        $r6 = virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: byte[] makeSmsRecordData(int,byte[])>(1, r3);

        virtualinvoke r2.<com.android.internal.telephony.uicc.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)>(28476, $i6, $r6, null, null);

        $z0 = staticinvoke <com.android.telephony.Rlog: boolean isLoggable(java.lang.String,int)>("SMS", 3);

        if $z0 == 0 goto label5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SMS ");

        $i7 = i8 + 1;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" marked as read");

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r11);

     label5:
        i8 = i8 + 1;

        goto label4;

     label6:
        return;
    }

    public void resetAllCellBroadcastRanges()
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        android.content.Context $r1;
        com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager $r2;
        com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager $r3;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        $r1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.RECEIVE_EMERGENCY_BROADCAST", "resetAllCellBroadcastRanges");

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager mCdmaBroadcastRangeManager>;

        virtualinvoke $r2.<com.android.internal.telephony.IccSmsInterfaceManager$CdmaBroadcastRangeManager: void clearRanges()>();

        $r3 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager mCellBroadcastRangeManager>;

        virtualinvoke $r3.<com.android.internal.telephony.IccSmsInterfaceManager$CellBroadcastRangeManager: void clearRanges()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>("Cell broadcast ranges reset.");

        return;
    }

    public void sendData(java.lang.String, java.lang.String, java.lang.String, int, byte[], android.app.PendingIntent, android.app.PendingIntent)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r2, r3;
        int i0;
        byte[] r4;
        android.app.PendingIntent r5, r6;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r4 := @parameter4: byte[];

        r5 := @parameter5: android.app.PendingIntent;

        r6 := @parameter6: android.app.PendingIntent;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void sendData(java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent)>(r1, null, r2, r3, i0, r4, r5, r6);

        return;
    }

    public void sendData(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, byte[], android.app.PendingIntent, android.app.PendingIntent)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r2, r3, r4;
        int i0;
        byte[] r5;
        android.app.PendingIntent r6, r7;
        com.android.internal.telephony.SmsPermissions $r8;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        r5 := @parameter5: byte[];

        r6 := @parameter6: android.app.PendingIntent;

        r7 := @parameter7: android.app.PendingIntent;

        $r8 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions>;

        $z0 = virtualinvoke $r8.<com.android.internal.telephony.SmsPermissions: boolean checkCallingCanSendSms(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, "Sending SMS message");

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(android.app.PendingIntent)>(r6);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void sendDataInternal(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent,boolean)>(r1, r3, r4, i0, r5, r6, r7, 0);

        return;
    }

    public void sendDataWithSelfPermissions(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, byte[], android.app.PendingIntent, android.app.PendingIntent, boolean)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r2, r3, r4;
        int i0;
        byte[] r5;
        android.app.PendingIntent r6, r7;
        boolean z0, $z1;
        com.android.internal.telephony.SmsPermissions $r8;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        i0 := @parameter4: int;

        r5 := @parameter5: byte[];

        r6 := @parameter6: android.app.PendingIntent;

        r7 := @parameter7: android.app.PendingIntent;

        z0 := @parameter8: boolean;

        $r8 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions>;

        $z1 = virtualinvoke $r8.<com.android.internal.telephony.SmsPermissions: boolean checkCallingOrSelfCanSendSms(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, "Sending SMS message");

        if $z1 != 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(android.app.PendingIntent)>(r6);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void sendDataInternal(java.lang.String,java.lang.String,java.lang.String,int,byte[],android.app.PendingIntent,android.app.PendingIntent,boolean)>(r1, r3, r4, i0, r5, r6, r7, z0);

        return;
    }

    public void sendMultipartText(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.List, java.util.List, java.util.List, boolean, long)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r2, r3, r4;
        java.util.List r5, r6, r7;
        boolean z0;
        long l0;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.util.List;

        r6 := @parameter5: java.util.List;

        r7 := @parameter6: java.util.List;

        z0 := @parameter7: boolean;

        l0 := @parameter8: long;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void sendMultipartTextWithOptions(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List,java.util.List,boolean,int,boolean,int,long)>(r1, r2, r3, r4, r5, r6, r7, z0, -1, 0, -1, l0);

        return;
    }

    public void sendMultipartTextWithOptions(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.List, java.util.List, java.util.List, boolean, int, boolean, int, long)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r2, $r10, $r14, $r18, $r36, r37, r38, r40, r42, r43, r45;
        java.util.List r3, r4, r5;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6;
        int i0, i1, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        long l2;
        com.android.internal.telephony.SmsPermissions $r6;
        java.lang.Object $r7, $r15, $r16, $r24;
        java.lang.StringBuilder $r8, $r17, $r25;
        java.util.Iterator r39;
        android.app.PendingIntent r47, r48;
        com.android.internal.telephony.SmsDispatchersController $r49, $r50;
        java.util.ArrayList $r51, $r52, $r53;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r37 := @parameter1: java.lang.String;

        r38 := @parameter2: java.lang.String;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: java.util.List;

        r4 := @parameter5: java.util.List;

        r5 := @parameter6: java.util.List;

        z0 := @parameter7: boolean;

        i0 := @parameter8: int;

        z1 := @parameter9: boolean;

        i1 := @parameter10: int;

        l2 := @parameter11: long;

        $r6 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions>;

        $z2 = virtualinvoke $r6.<com.android.internal.telephony.SmsPermissions: boolean checkCallingCanSendText(boolean,java.lang.String,java.lang.String,java.lang.String)>(z0, r1, r37, "Sending SMS message");

        if $z2 != 0 goto label01;

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(java.util.List)>(r4);

        return;

     label01:
        $z3 = staticinvoke <com.android.telephony.Rlog: boolean isLoggable(java.lang.String,int)>("SMS", 2);

        if $z3 == 0 goto label04;

        i12 = 0;

        r39 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z6 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label03;

        $r24 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>();

        r40 = (java.lang.String) $r24;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendMultipartTextWithOptions: destAddr=");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", srAddr=");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", part[");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]=");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id: ");

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2);

        $r36 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r36);

        i12 = i12 + 1;

        goto label02;

     label03:
        goto label04;

     label04:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void notifyIfOutgoingEmergencySms(java.lang.String)>(r38);

        r42 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String filterDestAddress(java.lang.String)>(r38);

        $i3 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i3 <= 1 goto label13;

        $i4 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i4 >= 10 goto label13;

        $z4 = staticinvoke <android.telephony.SmsMessage: boolean hasEmsSupport()>();

        if $z4 != 0 goto label13;

        i13 = 0;

     label05:
        $i5 = interfaceinvoke r3.<java.util.List: int size()>();

        if i13 >= $i5 goto label12;

        $r7 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i13);

        r43 = (java.lang.String) $r7;

        $z5 = staticinvoke <android.telephony.SmsMessage: boolean shouldAppendPageNumberAsPrefix()>();

        if $z5 == 0 goto label06;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $i10 = i13 + 1;

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i10);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $i11 = interfaceinvoke r3.<java.util.List: int size()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        r45 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label07;

     label06:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i6 = i13 + 1;

        $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i6);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $i7 = interfaceinvoke r3.<java.util.List: int size()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r45 = virtualinvoke r43.<java.lang.String: java.lang.String concat(java.lang.String)>($r14);

     label07:
        if r4 == null goto label08;

        $i9 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i9 <= i13 goto label08;

        $r16 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i13);

        r47 = (android.app.PendingIntent) $r16;

        goto label09;

     label08:
        r47 = null;

     label09:
        if r5 == null goto label10;

        $i8 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i8 <= i13 goto label10;

        $r15 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i13);

        r48 = (android.app.PendingIntent) $r15;

        goto label11;

     label10:
        r48 = null;

     label11:
        $r49 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        virtualinvoke $r49.<com.android.internal.telephony.SmsDispatchersController: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,android.net.Uri,java.lang.String,boolean,int,boolean,int,boolean,long)>(r42, r2, r45, r47, r48, null, r1, z0, i0, z1, i1, 0, l2);

        i13 = i13 + 1;

        goto label05;

     label12:
        return;

     label13:
        $r50 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        $r51 = (java.util.ArrayList) r3;

        $r52 = (java.util.ArrayList) r4;

        $r53 = (java.util.ArrayList) r5;

        virtualinvoke $r50.<com.android.internal.telephony.SmsDispatchersController: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.net.Uri,java.lang.String,boolean,int,boolean,int,long)>(r42, r2, $r51, $r52, $r53, null, r1, z0, i0, z1, i1, l2);

        return;
    }

    public void sendStoredMultipartText(java.lang.String, android.net.Uri, java.lang.String, java.util.List, java.util.List)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r3;
        android.net.Uri r2;
        java.util.List r4, r5;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.List;

        r5 := @parameter4: java.util.List;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void sendStoredMultipartText(java.lang.String,java.lang.String,android.net.Uri,java.lang.String,java.util.List,java.util.List)>(r1, null, r2, r3, r4, r5);

        return;
    }

    public void sendStoredMultipartText(java.lang.String, java.lang.String, android.net.Uri, java.lang.String, java.util.List, java.util.List)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r3, $r10, $r11, $r12, $r13, $r17, $r21, $r25, r31, r38, r40, $r45, $r47;
        android.net.Uri r2;
        java.util.List r4, r5;
        java.lang.String[] r6;
        com.android.internal.telephony.SmsPermissions $r7;
        boolean $z0, $z1, $z2, $z3;
        android.content.Context $r8;
        android.telephony.SmsManager $r9;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11;
        java.lang.Object $r14, $r22, $r23;
        java.lang.StringBuilder $r15, $r24;
        android.content.ContentResolver r33;
        java.util.ArrayList r34, $r48, $r49;
        android.app.PendingIntent r42, r43;
        com.android.internal.telephony.SmsDispatchersController $r44, $r46;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r31 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.Uri;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.util.List;

        r5 := @parameter5: java.util.List;

        $r7 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions>;

        $z0 = virtualinvoke $r7.<com.android.internal.telephony.SmsPermissions: boolean checkCallingCanSendSms(java.lang.String,java.lang.String,java.lang.String)>(r1, r31, "Sending SMS message");

        if $z0 != 0 goto label01;

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(java.util.List)>(r4);

        return;

     label01:
        $r8 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        r33 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $z1 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean isFailedOrDraft(android.content.ContentResolver,android.net.Uri)>(r33, r2);

        if $z1 != 0 goto label02;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("sendStoredMultipartText: not FAILED or DRAFT message");

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(java.util.List)>(r4);

        return;

     label02:
        r6 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String[] loadTextAndAddress(android.content.ContentResolver,android.net.Uri)>(r33, r2);

        if r6 != null goto label03;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("sendStoredMultipartText: can not load text");

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(java.util.List)>(r4);

        return;

     label03:
        $r9 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>();

        $r10 = r6[0];

        r34 = virtualinvoke $r9.<android.telephony.SmsManager: java.util.ArrayList divideMessage(java.lang.String)>($r10);

        if r34 == null goto label14;

        i10 = virtualinvoke r34.<java.util.ArrayList: int size()>();

        if i10 >= 1 goto label04;

        goto label14;

     label04:
        $r11 = r6[1];

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void notifyIfOutgoingEmergencySms(java.lang.String)>($r11);

        $r12 = r6[1];

        $r13 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String filterDestAddress(java.lang.String)>($r12);

        r6[1] = $r13;

        $i1 = virtualinvoke r34.<java.util.ArrayList: int size()>();

        if $i1 <= 1 goto label13;

        $i2 = virtualinvoke r34.<java.util.ArrayList: int size()>();

        if $i2 >= 10 goto label13;

        $z2 = staticinvoke <android.telephony.SmsMessage: boolean hasEmsSupport()>();

        if $z2 != 0 goto label13;

        i11 = 0;

     label05:
        $i3 = virtualinvoke r34.<java.util.ArrayList: int size()>();

        if i11 >= $i3 goto label12;

        $r14 = virtualinvoke r34.<java.util.ArrayList: java.lang.Object get(int)>(i11);

        r38 = (java.lang.String) $r14;

        $z3 = staticinvoke <android.telephony.SmsMessage: boolean shouldAppendPageNumberAsPrefix()>();

        if $z3 == 0 goto label06;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $i8 = i11 + 1;

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i8);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $i9 = virtualinvoke r34.<java.util.ArrayList: int size()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        r40 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label07;

     label06:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32);

        $i4 = i11 + 1;

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i4);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $i5 = virtualinvoke r34.<java.util.ArrayList: int size()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r21 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        r40 = virtualinvoke r38.<java.lang.String: java.lang.String concat(java.lang.String)>($r21);

     label07:
        if r4 == null goto label08;

        $i7 = interfaceinvoke r4.<java.util.List: int size()>();

        if $i7 <= i11 goto label08;

        $r23 = interfaceinvoke r4.<java.util.List: java.lang.Object get(int)>(i11);

        r42 = (android.app.PendingIntent) $r23;

        goto label09;

     label08:
        r42 = null;

     label09:
        if r5 == null goto label10;

        $i6 = interfaceinvoke r5.<java.util.List: int size()>();

        if $i6 <= i11 goto label10;

        $r22 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i11);

        r43 = (android.app.PendingIntent) $r22;

        goto label11;

     label10:
        r43 = null;

     label11:
        $r44 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        $r45 = r6[1];

        virtualinvoke $r44.<com.android.internal.telephony.SmsDispatchersController: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,android.net.Uri,java.lang.String,boolean,int,boolean,int,boolean,long)>($r45, r3, r40, r42, r43, r2, r1, 1, -1, 0, -1, 0, 0L);

        i11 = i11 + 1;

        goto label05;

     label12:
        return;

     label13:
        $r46 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        $r47 = r6[1];

        $r48 = (java.util.ArrayList) r4;

        $r49 = (java.util.ArrayList) r5;

        virtualinvoke $r46.<com.android.internal.telephony.SmsDispatchersController: void sendMultipartText(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,android.net.Uri,java.lang.String,boolean,int,boolean,int,long)>($r47, r3, r34, $r48, $r49, r2, r1, 1, -1, 0, -1, 0L);

        return;

     label14:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("sendStoredMultipartText: can not divide text");

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(java.util.List)>(r4);

        return;
    }

    public void sendStoredText(java.lang.String, android.net.Uri, java.lang.String, android.app.PendingIntent, android.app.PendingIntent)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r3;
        android.net.Uri r2;
        android.app.PendingIntent r4, r5;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.net.Uri;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: android.app.PendingIntent;

        r5 := @parameter4: android.app.PendingIntent;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void sendStoredText(java.lang.String,java.lang.String,android.net.Uri,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>(r1, null, r2, r3, r4, r5);

        return;
    }

    public void sendStoredText(java.lang.String, java.lang.String, android.net.Uri, java.lang.String, android.app.PendingIntent, android.app.PendingIntent)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r3, $r8, $r9, $r10, $r11, $r12, $r23, r24;
        android.net.Uri r2;
        android.app.PendingIntent r4, r5;
        com.android.internal.telephony.SmsPermissions $r6;
        boolean $z0, $z1, $z2;
        android.content.Context $r7;
        com.android.internal.telephony.SmsDispatchersController $r13;
        java.lang.StringBuilder $r14;
        android.content.ContentResolver r26;
        java.lang.String[] r27;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r24 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.Uri;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: android.app.PendingIntent;

        r5 := @parameter5: android.app.PendingIntent;

        $r6 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions>;

        $z0 = virtualinvoke $r6.<com.android.internal.telephony.SmsPermissions: boolean checkCallingCanSendSms(java.lang.String,java.lang.String,java.lang.String)>(r1, r24, "Sending SMS message");

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(android.app.PendingIntent)>(r4);

        return;

     label1:
        $z1 = staticinvoke <com.android.telephony.Rlog: boolean isLoggable(java.lang.String,int)>("SMS", 2);

        if $z1 == 0 goto label2;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendStoredText: scAddr=");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" messageUri=");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sentIntent=");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" deliveryIntent=");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r23 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r23);

        goto label2;

     label2:
        $r7 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.content.Context mContext>;

        r26 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $z2 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean isFailedOrDraft(android.content.ContentResolver,android.net.Uri)>(r26, r2);

        if $z2 != 0 goto label3;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("sendStoredText: not FAILED or DRAFT message");

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(android.app.PendingIntent)>(r4);

        return;

     label3:
        r27 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String[] loadTextAndAddress(android.content.ContentResolver,android.net.Uri)>(r26, r2);

        if r27 != null goto label4;

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("sendStoredText: can not load text");

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(android.app.PendingIntent)>(r4);

        return;

     label4:
        $r8 = r27[1];

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void notifyIfOutgoingEmergencySms(java.lang.String)>($r8);

        $r9 = r27[1];

        $r10 = specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String filterDestAddress(java.lang.String)>($r9);

        r27[1] = $r10;

        $r13 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        $r12 = r27[1];

        $r11 = r27[0];

        virtualinvoke $r13.<com.android.internal.telephony.SmsDispatchersController: void sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,android.net.Uri,java.lang.String,boolean,int,boolean,int,boolean,long)>($r12, r3, $r11, r4, r5, r2, r1, 1, -1, 0, -1, 0, 0L);

        return;
    }

    public void sendText(java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, boolean, long)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r2, r3, r4;
        android.app.PendingIntent r5, r6;
        boolean z0;
        long l0;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: android.app.PendingIntent;

        r6 := @parameter5: android.app.PendingIntent;

        z0 := @parameter6: boolean;

        l0 := @parameter7: long;

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void sendTextInternal(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int,boolean,long)>(r1, r2, r3, r4, r5, r6, z0, -1, 0, -1, 0, l0);

        return;
    }

    public void sendTextWithOptions(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, boolean, int, boolean, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r2, r3, r4, r5;
        android.app.PendingIntent r6, r7;
        boolean z0, z1, $z2;
        int i0, i1;
        com.android.internal.telephony.SmsPermissions $r8;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.app.PendingIntent;

        r7 := @parameter6: android.app.PendingIntent;

        z0 := @parameter7: boolean;

        i0 := @parameter8: int;

        z1 := @parameter9: boolean;

        i1 := @parameter10: int;

        $r8 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions>;

        $z2 = virtualinvoke $r8.<com.android.internal.telephony.SmsPermissions: boolean checkCallingOrSelfCanSendSms(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, "Sending SMS message");

        if $z2 != 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(android.app.PendingIntent)>(r6);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void sendTextInternal(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int,boolean,long)>(r1, r3, r4, r5, r6, r7, z0, i0, z1, i1, 0, 0L);

        return;
    }

    public void sendTextWithSelfPermissions(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, boolean, boolean)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1, r2, r3, r4, r5;
        android.app.PendingIntent r6, r7;
        boolean z0, z1, $z2;
        com.android.internal.telephony.SmsPermissions $r8;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: android.app.PendingIntent;

        r7 := @parameter6: android.app.PendingIntent;

        z0 := @parameter7: boolean;

        z1 := @parameter8: boolean;

        $r8 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions>;

        $z2 = virtualinvoke $r8.<com.android.internal.telephony.SmsPermissions: boolean checkCallingOrSelfCanSendSms(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, "Sending SMS message");

        if $z2 != 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void returnUnspecifiedFailure(android.app.PendingIntent)>(r6);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void sendTextInternal(java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,boolean,int,boolean,int,boolean,long)>(r1, r3, r4, r5, r6, r7, z0, -1, 0, -1, z1, 0L);

        return;
    }

    public void setPremiumSmsPermission(java.lang.String, int)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        java.lang.String r1;
        int i0;
        com.android.internal.telephony.SmsDispatchersController $r2;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsDispatchersController mDispatchersController>;

        virtualinvoke $r2.<com.android.internal.telephony.SmsDispatchersController: void setPremiumSmsPermission(java.lang.String,int)>(r1, i0);

        return;
    }

    public boolean setSmscAddressOnIccEf(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        android.os.Message r1;
        com.android.internal.telephony.SmsPermissions $r2;
        boolean $z0, $z1;
        android.os.Handler $r3;
        com.android.internal.telephony.Phone $r4;
        com.android.internal.telephony.CommandsInterface $r5;
        java.lang.Object $r6, r11;
        java.lang.Throwable $r7, $r8;
        java.lang.String r9, r10;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r9 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.SmsPermissions mSmsPermissions>;

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.SmsPermissions: boolean checkCallingOrSelfCanSetSmscAddress(java.lang.String,java.lang.String)>(r9, "setSmscAddressOnIccEf");

        if $z0 != 0 goto label01;

        return 0;

     label01:
        r11 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        entermonitor r11;

     label02:
        r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess> = 0;

        $r3 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler>;

        r1 = virtualinvoke $r3.<android.os.Handler: android.os.Message obtainMessage(int)>(6);

        $r4 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r5 = $r4.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r5.<com.android.internal.telephony.CommandsInterface: void setSmscAddress(java.lang.String,android.os.Message)>(r10, r1);

     label03:
        $r6 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        virtualinvoke $r6.<java.lang.Object: void wait()>();

     label04:
        goto label07;

     label05:
        $r7 := @caughtexception;

     label06:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("interrupted while trying to write SMSC");

     label07:
        exitmonitor r11;

     label08:
        $z1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess>;

        return $z1;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r11;

     label11:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.InterruptedException from label03 to label04 with label05;
        catch java.lang.Throwable from label03 to label04 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public boolean updateMessageOnIccEf(java.lang.String, int, int, byte[])
    {
        com.android.internal.telephony.IccSmsInterfaceManager r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        com.android.internal.telephony.uicc.IccFileHandler r1;
        boolean z0, $z1;
        java.lang.StringBuilder $r2;
        java.lang.String $r8, $r11, r23;
        android.app.AppOpsManager $r12;
        android.os.Handler $r13;
        com.android.internal.telephony.Phone $r14, $r16, $r17, $r19;
        byte[] $r15, r24;
        com.android.internal.telephony.CommandsInterface $r18, $r20;
        java.lang.Throwable $r21, $r22;
        java.lang.Object r26, $r28;
        android.os.Message r27;

        r0 := @this: com.android.internal.telephony.IccSmsInterfaceManager;

        r23 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r24 := @parameter3: byte[];

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateMessageOnIccEf: index=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" status=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ==> (");

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r24);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r11 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void log(java.lang.String)>($r11);

        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceReceiveAndSend(java.lang.String)>("Updating message on Icc");

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceAccessMessageOnICC(java.lang.String)>("Updating message on Icc");

        specialinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void enforceNotOnHandlerThread(java.lang.String)>("updateMessageOnIccEf");

        $r12 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.app.AppOpsManager mAppOps>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i3 = virtualinvoke $r12.<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String)>("android:write_icc_sms", $i2, r23);

        if $i3 == 0 goto label01;

        return 0;

     label01:
        r26 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        entermonitor r26;

     label02:
        r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess> = 0;

        $r13 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: android.os.Handler mHandler>;

        r27 = virtualinvoke $r13.<android.os.Handler: android.os.Message obtainMessage(int)>(2);

     label03:
        $i4 = i1 & 1;

        if $i4 != 0 goto label08;

     label04:
        $r16 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $i5 = virtualinvoke $r16.<com.android.internal.telephony.Phone: int getPhoneType()>();

        if 1 != $i5 goto label06;

        $r19 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r20 = $r19.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r20.<com.android.internal.telephony.CommandsInterface: void deleteSmsOnSim(int,android.os.Message)>(i0, r27);

     label05:
        goto label13;

     label06:
        $r17 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        $r18 = $r17.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r18.<com.android.internal.telephony.CommandsInterface: void deleteSmsOnRuim(int,android.os.Message)>(i0, r27);

     label07:
        goto label13;

     label08:
        $r14 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: com.android.internal.telephony.Phone mPhone>;

        r1 = virtualinvoke $r14.<com.android.internal.telephony.Phone: com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()>();

     label09:
        if r1 != null goto label12;

     label10:
        virtualinvoke r27.<android.os.Message: void recycle()>();

        z0 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess>;

        exitmonitor r26;

     label11:
        return z0;

     label12:
        $r15 = virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: byte[] makeSmsRecordData(int,byte[])>(i1, r24);

        virtualinvoke r1.<com.android.internal.telephony.uicc.IccFileHandler: void updateEFLinearFixed(int,int,byte[],java.lang.String,android.os.Message)>(28476, i0, $r15, null, r27);

     label13:
        $r28 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: java.lang.Object mLock>;

        virtualinvoke $r28.<java.lang.Object: void wait()>();

     label14:
        goto label17;

     label15:
        $r22 := @caughtexception;

     label16:
        virtualinvoke r0.<com.android.internal.telephony.IccSmsInterfaceManager: void loge(java.lang.String)>("interrupted while trying to update by index");

     label17:
        exitmonitor r26;

     label18:
        $z1 = r0.<com.android.internal.telephony.IccSmsInterfaceManager: boolean mSuccess>;

        return $z1;

     label19:
        $r21 := @caughtexception;

     label20:
        exitmonitor r26;

     label21:
        throw $r21;

        catch java.lang.Throwable from label02 to label03 with label19;
        catch java.lang.Throwable from label04 to label05 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label08 to label09 with label19;
        catch java.lang.Throwable from label10 to label11 with label19;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.InterruptedException from label13 to label14 with label15;
        catch java.lang.Throwable from label13 to label14 with label19;
        catch java.lang.Throwable from label16 to label17 with label19;
        catch java.lang.Throwable from label17 to label18 with label19;
        catch java.lang.Throwable from label20 to label21 with label19;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.IccSmsInterfaceManager: int SMS_MESSAGE_PRIORITY_NOT_SPECIFIED> = -1;

        <com.android.internal.telephony.IccSmsInterfaceManager: int SMS_MESSAGE_PERIOD_NOT_SPECIFIED> = -1;

        <com.android.internal.telephony.IccSmsInterfaceManager: int SMS_CB_CODE_SCHEME_MIN> = 0;

        <com.android.internal.telephony.IccSmsInterfaceManager: int SMS_CB_CODE_SCHEME_MAX> = 255;

        <com.android.internal.telephony.IccSmsInterfaceManager: java.lang.String LOG_TAG> = "IccSmsInterfaceManager";

        <com.android.internal.telephony.IccSmsInterfaceManager: int EVENT_UPDATE_DONE> = 2;

        <com.android.internal.telephony.IccSmsInterfaceManager: int EVENT_SET_SMSC_DONE> = 6;

        <com.android.internal.telephony.IccSmsInterfaceManager: int EVENT_SET_BROADCAST_CONFIG_DONE> = 4;

        <com.android.internal.telephony.IccSmsInterfaceManager: int EVENT_SET_BROADCAST_ACTIVATION_DONE> = 3;

        <com.android.internal.telephony.IccSmsInterfaceManager: int EVENT_LOAD_DONE> = 1;

        <com.android.internal.telephony.IccSmsInterfaceManager: int EVENT_GET_SMSC_DONE> = 5;

        <com.android.internal.telephony.IccSmsInterfaceManager: boolean DBG> = 1;

        return;
    }
}
