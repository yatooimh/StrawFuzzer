public class com.android.internal.telephony.ImsSmsDispatcher extends com.android.internal.telephony.SMSDispatcher
{
    private static final java.lang.String TAG;
    private android.telephony.ims.ImsMmTelManager$CapabilityCallback mCapabilityCallback;
    private final com.android.ims.FeatureConnector mImsManagerConnector;
    private final android.telephony.ims.aidl.IImsSmsListener mImsSmsListener;
    private volatile boolean mIsImsServiceUp;
    private volatile boolean mIsRegistered;
    private volatile boolean mIsSmsCapable;
    private final java.lang.Object mLock;
    private com.android.internal.telephony.metrics.TelephonyMetrics mMetrics;
    public java.util.concurrent.atomic.AtomicInteger mNextToken;
    private android.telephony.ims.RegistrationManager$RegistrationCallback mRegistrationCallback;
    public java.util.Map mTrackers;

    public void <init>(com.android.internal.telephony.Phone, com.android.internal.telephony.SmsDispatchersController)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        com.android.internal.telephony.SmsDispatchersController r1;
        java.util.concurrent.ConcurrentHashMap $r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        java.lang.Object $r4;
        com.android.internal.telephony.metrics.TelephonyMetrics $r5;
        com.android.internal.telephony.ImsSmsDispatcher$1 $r6;
        com.android.internal.telephony.ImsSmsDispatcher$2 $r7;
        com.android.internal.telephony.ImsSmsDispatcher$3 $r8;
        com.android.ims.FeatureConnector $r9;
        com.android.internal.telephony.Phone $r10, r13;
        android.content.Context $r11;
        int $i0;
        com.android.internal.telephony.ImsSmsDispatcher$4 $r12;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r13 := @parameter0: com.android.internal.telephony.Phone;

        r1 := @parameter1: com.android.internal.telephony.SmsDispatchersController;

        specialinvoke r0.<com.android.internal.telephony.SMSDispatcher: void <init>(com.android.internal.telephony.Phone,com.android.internal.telephony.SmsDispatchersController)>(r13, r1);

        $r2 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r2.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.android.internal.telephony.ImsSmsDispatcher: java.util.Map mTrackers> = $r2;

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>()>();

        r0.<com.android.internal.telephony.ImsSmsDispatcher: java.util.concurrent.atomic.AtomicInteger mNextToken> = $r3;

        $r4 = new java.lang.Object;

        specialinvoke $r4.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.telephony.ImsSmsDispatcher: java.lang.Object mLock> = $r4;

        $r5 = staticinvoke <com.android.internal.telephony.metrics.TelephonyMetrics: com.android.internal.telephony.metrics.TelephonyMetrics getInstance()>();

        r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics> = $r5;

        $r6 = new com.android.internal.telephony.ImsSmsDispatcher$1;

        specialinvoke $r6.<com.android.internal.telephony.ImsSmsDispatcher$1: void <init>(com.android.internal.telephony.ImsSmsDispatcher)>(r0);

        r0.<com.android.internal.telephony.ImsSmsDispatcher: android.telephony.ims.RegistrationManager$RegistrationCallback mRegistrationCallback> = $r6;

        $r7 = new com.android.internal.telephony.ImsSmsDispatcher$2;

        specialinvoke $r7.<com.android.internal.telephony.ImsSmsDispatcher$2: void <init>(com.android.internal.telephony.ImsSmsDispatcher)>(r0);

        r0.<com.android.internal.telephony.ImsSmsDispatcher: android.telephony.ims.ImsMmTelManager$CapabilityCallback mCapabilityCallback> = $r7;

        $r8 = new com.android.internal.telephony.ImsSmsDispatcher$3;

        specialinvoke $r8.<com.android.internal.telephony.ImsSmsDispatcher$3: void <init>(com.android.internal.telephony.ImsSmsDispatcher)>(r0);

        r0.<com.android.internal.telephony.ImsSmsDispatcher: android.telephony.ims.aidl.IImsSmsListener mImsSmsListener> = $r8;

        $r9 = new com.android.ims.FeatureConnector;

        $r11 = r0.<com.android.internal.telephony.ImsSmsDispatcher: android.content.Context mContext>;

        $r10 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r10.<com.android.internal.telephony.Phone: int getPhoneId()>();

        $r12 = new com.android.internal.telephony.ImsSmsDispatcher$4;

        specialinvoke $r12.<com.android.internal.telephony.ImsSmsDispatcher$4: void <init>(com.android.internal.telephony.ImsSmsDispatcher,com.android.internal.telephony.Phone)>(r0, r13);

        specialinvoke $r9.<com.android.ims.FeatureConnector: void <init>(android.content.Context,int,com.android.ims.FeatureConnector$Listener,java.lang.String)>($r11, $i0, $r12, "ImsSmsDispatcher");

        r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.ims.FeatureConnector mImsManagerConnector> = $r9;

        virtualinvoke $r9.<com.android.ims.FeatureConnector: void connect()>();

        return;
    }

    static void access$000(com.android.internal.telephony.ImsSmsDispatcher, java.lang.String)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void logd(java.lang.String)>(r1);

        return;
    }

    static java.lang.Object access$100(com.android.internal.telephony.ImsSmsDispatcher)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.internal.telephony.ImsSmsDispatcher;

        $r1 = r0.<com.android.internal.telephony.ImsSmsDispatcher: java.lang.Object mLock>;

        return $r1;
    }

    static boolean access$202(com.android.internal.telephony.ImsSmsDispatcher, boolean)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.telephony.ImsSmsDispatcher;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsRegistered> = z0;

        return z0;
    }

    static boolean access$302(com.android.internal.telephony.ImsSmsDispatcher, boolean)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.telephony.ImsSmsDispatcher;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsSmsCapable> = z0;

        return z0;
    }

    static com.android.internal.telephony.metrics.TelephonyMetrics access$400(com.android.internal.telephony.ImsSmsDispatcher)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        com.android.internal.telephony.metrics.TelephonyMetrics $r1;

        r0 := @parameter0: com.android.internal.telephony.ImsSmsDispatcher;

        $r1 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics>;

        return $r1;
    }

    static com.android.ims.ImsManager access$500(com.android.internal.telephony.ImsSmsDispatcher)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        com.android.ims.ImsManager $r1;

        r0 := @parameter0: com.android.internal.telephony.ImsSmsDispatcher;

        $r1 = specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.ims.ImsManager getImsManager()>();

        return $r1;
    }

    static void access$600(com.android.internal.telephony.ImsSmsDispatcher, java.lang.String)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void loge(java.lang.String)>(r1);

        return;
    }

    static void access$700(com.android.internal.telephony.ImsSmsDispatcher, java.lang.String)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void logw(java.lang.String)>(r1);

        return;
    }

    static void access$800(com.android.internal.telephony.ImsSmsDispatcher) throws com.android.ims.ImsException
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;

        r0 := @parameter0: com.android.internal.telephony.ImsSmsDispatcher;

        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void setListeners()>();

        return;
    }

    static boolean access$902(com.android.internal.telephony.ImsSmsDispatcher, boolean)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.telephony.ImsSmsDispatcher;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsImsServiceUp> = z0;

        return z0;
    }

    private com.android.ims.ImsManager getImsManager()
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        com.android.internal.telephony.Phone $r1;
        android.content.Context $r2;
        int $i0;
        com.android.ims.ImsManager $r3;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        $r2 = r0.<com.android.internal.telephony.ImsSmsDispatcher: android.content.Context mContext>;

        $r1 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r1.<com.android.internal.telephony.Phone: int getPhoneId()>();

        $r3 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>($r2, $i0);

        return $r3;
    }

    private static java.lang.String getPhoneId(com.android.internal.telephony.Phone)
    {
        int $i0;
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.Phone;

        if r0 == null goto label1;

        $i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getPhoneId()>();

        r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0);

        goto label2;

     label1:
        r1 = "?";

     label2:
        return r1;
    }

    private boolean isEmergencySmsPossible()
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        $z0 = specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean isLteService()>();

        if $z0 != 0 goto label2;

        $z1 = specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean isLimitedLteService()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private boolean isLimitedLteService()
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        com.android.internal.telephony.Phone $r1, $r3;
        android.telephony.ServiceState $r2, $r4;
        int $i0;
        boolean $z0, z1;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        $r1 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i0 = virtualinvoke $r2.<android.telephony.ServiceState: int getRilVoiceRadioTechnology()>();

        if $i0 != 14 goto label1;

        $r3 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $z0 = virtualinvoke $r4.<android.telephony.ServiceState: boolean isEmergencyOnly()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isLteService()
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        com.android.internal.telephony.Phone $r1, $r3;
        android.telephony.ServiceState $r2, $r4;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        $r1 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i0 = virtualinvoke $r2.<android.telephony.ServiceState: int getRilDataRadioTechnology()>();

        if $i0 != 14 goto label1;

        $r3 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i1 = virtualinvoke $r4.<android.telephony.ServiceState: int getDataRegistrationState()>();

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void logd(java.lang.String)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.String r1, $r6, $r9;
        java.lang.StringBuilder $r3;
        com.android.internal.telephony.Phone $r5;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImsSmsDispatcher [");

        $r5 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $r6 = staticinvoke <com.android.internal.telephony.ImsSmsDispatcher: java.lang.String getPhoneId(com.android.internal.telephony.Phone)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r9, r1);

        return;
    }

    private void loge(java.lang.String)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.String r1, $r6, $r9;
        java.lang.StringBuilder $r3;
        com.android.internal.telephony.Phone $r5;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImsSmsDispatcher [");

        $r5 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $r6 = staticinvoke <com.android.internal.telephony.ImsSmsDispatcher: java.lang.String getPhoneId(com.android.internal.telephony.Phone)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r9, r1);

        return;
    }

    private void logi(java.lang.String)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.String r1, $r6, $r9;
        java.lang.StringBuilder $r3;
        com.android.internal.telephony.Phone $r5;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImsSmsDispatcher [");

        $r5 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $r6 = staticinvoke <com.android.internal.telephony.ImsSmsDispatcher: java.lang.String getPhoneId(com.android.internal.telephony.Phone)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int i(java.lang.String,java.lang.String)>($r9, r1);

        return;
    }

    private void logw(java.lang.String)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.String r1, $r6, $r9;
        java.lang.StringBuilder $r3;
        com.android.internal.telephony.Phone $r5;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ImsSmsDispatcher [");

        $r5 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $r6 = staticinvoke <com.android.internal.telephony.ImsSmsDispatcher: java.lang.String getPhoneId(com.android.internal.telephony.Phone)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int w(java.lang.String,java.lang.String)>($r9, r1);

        return;
    }

    private void setListeners() throws com.android.ims.ImsException
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        com.android.ims.ImsManager $r1, $r3, $r5, $r7;
        android.telephony.ims.RegistrationManager$RegistrationCallback $r2;
        android.telephony.ims.ImsMmTelManager$CapabilityCallback $r4;
        android.telephony.ims.aidl.IImsSmsListener $r6;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        $r1 = specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.ims.ImsManager getImsManager()>();

        $r2 = r0.<com.android.internal.telephony.ImsSmsDispatcher: android.telephony.ims.RegistrationManager$RegistrationCallback mRegistrationCallback>;

        virtualinvoke $r1.<com.android.ims.ImsManager: void addRegistrationCallback(android.telephony.ims.RegistrationManager$RegistrationCallback)>($r2);

        $r3 = specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.ims.ImsManager getImsManager()>();

        $r4 = r0.<com.android.internal.telephony.ImsSmsDispatcher: android.telephony.ims.ImsMmTelManager$CapabilityCallback mCapabilityCallback>;

        virtualinvoke $r3.<com.android.ims.ImsManager: void addCapabilitiesCallback(android.telephony.ims.ImsMmTelManager$CapabilityCallback)>($r4);

        $r5 = specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.ims.ImsManager getImsManager()>();

        $r6 = virtualinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: android.telephony.ims.aidl.IImsSmsListener getSmsListener()>();

        virtualinvoke $r5.<com.android.ims.ImsManager: void setSmsListener(android.telephony.ims.aidl.IImsSmsListener)>($r6);

        $r7 = specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.ims.ImsManager getImsManager()>();

        virtualinvoke $r7.<com.android.ims.ImsManager: void onSmsReady()>();

        return;
    }

    protected com.android.internal.telephony.GsmAlphabet$TextEncodingDetails calculateLength(java.lang.CharSequence, boolean)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.CharSequence r1;
        boolean z0, $z1;
        com.android.internal.telephony.GsmAlphabet$TextEncodingDetails $r2;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        $z1 = virtualinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean isCdmaMo()>();

        $r2 = staticinvoke <com.android.internal.telephony.util.SMSDispatcherUtil: com.android.internal.telephony.GsmAlphabet$TextEncodingDetails calculateLength(boolean,java.lang.CharSequence,boolean)>($z1, r1, z0);

        return $r2;
    }

    public void fallbackToPstn(int, com.android.internal.telephony.SMSDispatcher$SmsTracker)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        int i0;
        com.android.internal.telephony.SMSDispatcher$SmsTracker r1;
        com.android.internal.telephony.SmsDispatchersController $r2;
        java.util.Map $r3;
        java.lang.Integer $r4;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.telephony.SMSDispatcher$SmsTracker;

        $r2 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.SmsDispatchersController mSmsDispatchersController>;

        virtualinvoke $r2.<com.android.internal.telephony.SmsDispatchersController: void sendRetrySms(com.android.internal.telephony.SMSDispatcher$SmsTracker)>(r1);

        $r3 = r0.<com.android.internal.telephony.ImsSmsDispatcher: java.util.Map mTrackers>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r4);

        return;
    }

    protected java.lang.String getFormat()
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        com.android.ims.ImsManager $r2;
        com.android.ims.ImsException $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r8, r9;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

     label1:
        $r2 = specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.ims.ImsManager getImsManager()>();

        r9 = virtualinvoke $r2.<com.android.ims.ImsManager: java.lang.String getSmsFormat()>();

     label2:
        return r9;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to get sms format. Error: ");

        $r6 = virtualinvoke $r3.<com.android.ims.ImsException: java.lang.String getMessage()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void loge(java.lang.String)>($r8);

        return "unknown";

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public android.telephony.ims.aidl.IImsSmsListener getSmsListener()
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        android.telephony.ims.aidl.IImsSmsListener $r1;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        $r1 = r0.<com.android.internal.telephony.ImsSmsDispatcher: android.telephony.ims.aidl.IImsSmsListener mImsSmsListener>;

        return $r1;
    }

    protected com.android.internal.telephony.SmsMessageBase$SubmitPduBase getSubmitPdu(java.lang.String, java.lang.String, int, byte[], boolean)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.String r1, r2;
        int i0;
        byte[] r3;
        boolean z0, $z1;
        com.android.internal.telephony.SmsMessageBase$SubmitPduBase $r4;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: byte[];

        z0 := @parameter4: boolean;

        $z1 = virtualinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean isCdmaMo()>();

        $r4 = staticinvoke <com.android.internal.telephony.util.SMSDispatcherUtil: com.android.internal.telephony.SmsMessageBase$SubmitPduBase getSubmitPdu(boolean,java.lang.String,java.lang.String,int,byte[],boolean)>($z1, r1, r2, i0, r3, z0);

        return $r4;
    }

    protected com.android.internal.telephony.SmsMessageBase$SubmitPduBase getSubmitPdu(java.lang.String, java.lang.String, java.lang.String, boolean, com.android.internal.telephony.SmsHeader, int, int)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.String r1, r2, r3;
        boolean z0, $z1;
        com.android.internal.telephony.SmsHeader r4;
        int i0, i1;
        com.android.internal.telephony.SmsMessageBase$SubmitPduBase $r5;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        r4 := @parameter4: com.android.internal.telephony.SmsHeader;

        i0 := @parameter5: int;

        i1 := @parameter6: int;

        $z1 = virtualinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean isCdmaMo()>();

        $r5 = staticinvoke <com.android.internal.telephony.util.SMSDispatcherUtil: com.android.internal.telephony.SmsMessageBase$SubmitPduBase getSubmitPdu(boolean,java.lang.String,java.lang.String,java.lang.String,boolean,com.android.internal.telephony.SmsHeader,int,int)>($z1, r1, r2, r3, z0, r4, i0, i1);

        return $r5;
    }

    public boolean isAvailable()
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        java.lang.String $r8;
        java.lang.Throwable $r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r1 = r0.<com.android.internal.telephony.ImsSmsDispatcher: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isAvailable: up=");

        $z0 = r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsImsServiceUp>;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reg= ");

        $z1 = r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsRegistered>;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", cap= ");

        $z2 = r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsSmsCapable>;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r8 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void logd(java.lang.String)>($r8);

        $z3 = r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsImsServiceUp>;

        if $z3 == 0 goto label3;

        $z4 = r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsRegistered>;

        if $z4 == 0 goto label3;

        $z5 = r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsSmsCapable>;

        if $z5 == 0 goto label3;

     label2:
        z6 = 1;

        goto label4;

     label3:
        z6 = 0;

     label4:
        exitmonitor r1;

     label5:
        return z6;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    protected boolean isCdmaMo()
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        com.android.internal.telephony.SmsDispatchersController $r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        $r1 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.SmsDispatchersController mSmsDispatchersController>;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: java.lang.String getFormat()>();

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.SmsDispatchersController: boolean isCdmaFormat(java.lang.String)>($r2);

        return $z0;
    }

    public boolean isEmergencySmsSupport(java.lang.String)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        long l0;
        boolean z1, $z2, z3, z4, z5, z6;
        com.android.internal.telephony.Phone $r1, $r3;
        android.content.Context $r2, $r4;
        int $i1, $i2;
        java.lang.Object $r5;
        java.lang.String $r9, $r15, $r18, $r20, r22;
        java.lang.StringBuilder $r16, r26;
        java.lang.Throwable $r21;
        android.telephony.CarrierConfigManager r24;
        android.os.PersistableBundle r25;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r22 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.ImsSmsDispatcher: android.content.Context mContext>;

        $r1 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $i1 = virtualinvoke $r1.<com.android.internal.telephony.Phone: int getSubId()>();

        z3 = staticinvoke <android.telephony.PhoneNumberUtils: boolean isLocalEmergencyNumber(android.content.Context,int,java.lang.String)>($r2, $i1, r22);

        if z3 != 0 goto label01;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Emergency Sms is not supported for: ");

        $r18 = staticinvoke <com.android.telephony.Rlog: java.lang.String pii(java.lang.String,java.lang.Object)>("ImsSmsDispatcher", r22);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void loge(java.lang.String)>($r20);

        return 0;

     label01:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label02:
        $r3 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        r24 = (android.telephony.CarrierConfigManager) $r5;

     label03:
        if r24 != null goto label06;

     label04:
        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void loge(java.lang.String)>("configManager is null");

     label05:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label06:
        $i2 = virtualinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: int getSubId()>();

        r25 = virtualinvoke r24.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i2);

     label07:
        if r25 != null goto label10;

     label08:
        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void loge(java.lang.String)>("PersistableBundle is null");

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return 0;

     label10:
        z4 = virtualinvoke r25.<android.os.PersistableBundle: boolean getBoolean(java.lang.String)>("support_emergency_sms_over_ims_bool");

        z1 = specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean isEmergencySmsPossible()>();

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isEmergencySmsSupport emergencySmsCarrierSupport: ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z4);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" destAddr: ");

        $r9 = staticinvoke <com.android.telephony.Rlog: java.lang.String pii(java.lang.String,java.lang.Object)>("ImsSmsDispatcher", r22);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mIsImsServiceUp: ");

        $z2 = r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsImsServiceUp>;

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lteOrLimitedLte: ");

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r15 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void logi(java.lang.String)>($r15);

     label11:
        z5 = 0;

        if z4 == 0 goto label14;

     label12:
        z6 = r0.<com.android.internal.telephony.ImsSmsDispatcher: boolean mIsImsServiceUp>;

     label13:
        z5 = 0;

        if z6 == 0 goto label14;

        z5 = 0;

        if z1 == 0 goto label14;

        z5 = 1;

     label14:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z5;

     label15:
        $r21 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r21;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
    }

    public void sendSms(com.android.internal.telephony.SMSDispatcher$SmsTracker)
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;
        com.android.internal.telephony.SMSDispatcher$SmsTracker r1;
        java.lang.String r2, $r13, $r16, $r23, $r25, r35;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i14, $i17;
        com.android.ims.ImsManager r3;
        java.lang.StringBuilder $r4, $r21;
        com.android.internal.telephony.Phone $r10, $r18, $r26;
        android.telephony.ServiceState $r11;
        java.lang.Object $r14, $r15;
        boolean $z0, z1;
        com.android.internal.telephony.metrics.TelephonyMetrics $r19, $r27;
        byte $b8, $b9, $b10, $b11, $b12, $b13, $b15, $b16;
        com.android.ims.ImsException $r20;
        java.util.HashMap r29;
        byte[] r30, r31;
        java.util.concurrent.atomic.AtomicInteger $r32;
        java.util.Map $r33;
        java.lang.Integer $r34;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        r1 := @parameter0: com.android.internal.telephony.SMSDispatcher$SmsTracker;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendSms:  mRetryCount=");

        $i2 = r1.<com.android.internal.telephony.SMSDispatcher$SmsTracker: int mRetryCount>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mMessageRef=");

        $i3 = r1.<com.android.internal.telephony.SMSDispatcher$SmsTracker: int mMessageRef>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SS=");

        $r10 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $r11 = virtualinvoke $r10.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i4 = virtualinvoke $r11.<android.telephony.ServiceState: int getState()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r13 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void logd(java.lang.String)>($r13);

        r1.<com.android.internal.telephony.SMSDispatcher$SmsTracker: boolean mUsesImsServiceForIms> = 1;

        r29 = virtualinvoke r1.<com.android.internal.telephony.SMSDispatcher$SmsTracker: java.util.HashMap getData()>();

        $r14 = virtualinvoke r29.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("pdu");

        r30 = (byte[]) $r14;

        $r15 = virtualinvoke r29.<java.util.HashMap: java.lang.Object get(java.lang.Object)>("smsc");

        r31 = (byte[]) $r15;

        $i5 = r1.<com.android.internal.telephony.SMSDispatcher$SmsTracker: int mRetryCount>;

        if $i5 <= 0 goto label01;

        z1 = 1;

        goto label02;

     label01:
        z1 = 0;

     label02:
        r2 = virtualinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: java.lang.String getFormat()>();

        $r16 = "3gpp";

        $z0 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label03;

        $i7 = r1.<com.android.internal.telephony.SMSDispatcher$SmsTracker: int mRetryCount>;

        if $i7 <= 0 goto label03;

        $b8 = r30[0];

        $b9 = $b8 & 1;

        if $b9 != 1 goto label03;

        $b10 = r30[0];

        $b11 = $b10 | 4;

        $b12 = (byte) $b11;

        $b13 = (byte) $b12;

        r30[0] = $b13;

        $i14 = r1.<com.android.internal.telephony.SMSDispatcher$SmsTracker: int mMessageRef>;

        $b15 = (byte) $i14;

        $b16 = (byte) $b15;

        r30[1] = $b16;

     label03:
        $r32 = r0.<com.android.internal.telephony.ImsSmsDispatcher: java.util.concurrent.atomic.AtomicInteger mNextToken>;

        i0 = virtualinvoke $r32.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>();

        $r33 = r0.<com.android.internal.telephony.ImsSmsDispatcher: java.util.Map mTrackers>;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r34, r1);

     label04:
        r3 = specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.ims.ImsManager getImsManager()>();

        i1 = r1.<com.android.internal.telephony.SMSDispatcher$SmsTracker: int mMessageRef>;

     label05:
        if r31 == null goto label08;

     label06:
        r35 = staticinvoke <com.android.internal.telephony.uicc.IccUtils: java.lang.String bytesToHexString(byte[])>(r31);

     label07:
        goto label09;

     label08:
        r35 = null;

     label09:
        virtualinvoke r3.<com.android.ims.ImsManager: void sendSms(int,int,java.lang.String,java.lang.String,boolean,byte[])>(i0, i1, r2, r35, z1, r30);

        $r19 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics>;

        $r18 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $i6 = virtualinvoke $r18.<com.android.internal.telephony.Phone: int getPhoneId()>();

        virtualinvoke $r19.<com.android.internal.telephony.metrics.TelephonyMetrics: void writeImsServiceSendSms(int,java.lang.String,int)>($i6, r2, 1);

     label10:
        goto label12;

     label11:
        $r20 := @caughtexception;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendSms failed. Falling back to PSTN. Error: ");

        $r23 = virtualinvoke $r20.<com.android.ims.ImsException: java.lang.String getMessage()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void loge(java.lang.String)>($r25);

        virtualinvoke r0.<com.android.internal.telephony.ImsSmsDispatcher: void fallbackToPstn(int,com.android.internal.telephony.SMSDispatcher$SmsTracker)>(i0, r1);

        $r27 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics>;

        $r26 = r0.<com.android.internal.telephony.ImsSmsDispatcher: com.android.internal.telephony.Phone mPhone>;

        $i17 = virtualinvoke $r26.<com.android.internal.telephony.Phone: int getPhoneId()>();

        virtualinvoke $r27.<com.android.internal.telephony.metrics.TelephonyMetrics: void writeImsServiceSendSms(int,java.lang.String,int)>($i17, r2, 4);

     label12:
        return;

        catch com.android.ims.ImsException from label04 to label05 with label11;
        catch com.android.ims.ImsException from label06 to label07 with label11;
        catch com.android.ims.ImsException from label09 to label10 with label11;
    }

    protected boolean shouldBlockSmsForEcbm()
    {
        com.android.internal.telephony.ImsSmsDispatcher r0;

        r0 := @this: com.android.internal.telephony.ImsSmsDispatcher;

        return 0;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.ImsSmsDispatcher: java.lang.String TAG> = "ImsSmsDispatcher";

        return;
    }
}
