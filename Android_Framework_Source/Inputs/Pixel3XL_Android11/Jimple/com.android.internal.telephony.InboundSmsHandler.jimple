public abstract class com.android.internal.telephony.InboundSmsHandler extends com.android.internal.telephony.StateMachine
{
    private static java.lang.String ACTION_OPEN_SMS_APP;
    public static final int ADDRESS_COLUMN;
    public static final int COUNT_COLUMN;
    public static final int DATE_COLUMN;
    protected static final boolean DBG;
    public static final int DELETED_FLAG_COLUMN;
    public static final int DESTINATION_PORT_COLUMN;
    public static final int DISPLAY_ADDRESS_COLUMN;
    private static final int EVENT_BROADCAST_COMPLETE;
    public static final int EVENT_BROADCAST_SMS;
    public static final int EVENT_INJECT_SMS;
    public static final int EVENT_NEW_SMS;
    private static final int EVENT_RELEASE_WAKELOCK;
    private static final int EVENT_RETURN_TO_IDLE;
    public static final int EVENT_START_ACCEPTING_SMS;
    public static final int EVENT_UPDATE_TRACKER;
    public static final int ID_COLUMN;
    public static final int MESSAGE_BODY_COLUMN;
    private static final int NOTIFICATION_ID_NEW_MESSAGE;
    private static final java.lang.String NOTIFICATION_TAG;
    public static final int PDU_COLUMN;
    private static final java.lang.String[] PDU_DELETED_FLAG_PROJECTION;
    private static final java.util.Map PDU_DELETED_FLAG_PROJECTION_INDEX_MAPPING;
    private static final java.lang.String[] PDU_SEQUENCE_PORT_PROJECTION;
    private static final java.util.Map PDU_SEQUENCE_PORT_PROJECTION_INDEX_MAPPING;
    public static final int REFERENCE_NUMBER_COLUMN;
    public static final java.lang.String SELECT_BY_ID;
    public static final int SEQUENCE_COLUMN;
    public static final int SUBID_COLUMN;
    protected static final boolean VDBG;
    private static final int WAKELOCK_TIMEOUT;
    protected static final android.net.Uri sRawUri;
    protected static final android.net.Uri sRawUriPermanentDelete;
    private final int DELETE_PERMANENTLY;
    private final int MARK_DELETED;
    private com.android.internal.telephony.LocalLog mCarrierServiceLocalLog;
    protected com.android.internal.telephony.CellBroadcastServiceManager mCellBroadcastServiceManager;
    protected final android.content.Context mContext;
    private final com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState;
    private final com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState;
    private final com.android.internal.telephony.InboundSmsHandler$IdleState mIdleState;
    private boolean mLastSmsWasInjected;
    private com.android.internal.telephony.LocalLog mLocalLog;
    protected com.android.internal.telephony.metrics.TelephonyMetrics mMetrics;
    protected com.android.internal.telephony.Phone mPhone;
    android.os.PowerWhitelistManager mPowerWhitelistManager;
    private final android.content.ContentResolver mResolver;
    private final boolean mSmsReceiveDisabled;
    private final com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState;
    protected com.android.internal.telephony.SmsStorageMonitor mStorageMonitor;
    private android.os.UserManager mUserManager;
    private final com.android.internal.telephony.InboundSmsHandler$WaitingState mWaitingState;
    private final android.os.PowerManager$WakeLock mWakeLock;
    private int mWakeLockTimeout;
    private final com.android.internal.telephony.WapPushOverSms mWapPush;

    static void <clinit>()
    {
        java.lang.String[] $r0, $r2;
        com.android.internal.telephony.InboundSmsHandler$1 $r1;
        com.android.internal.telephony.InboundSmsHandler$2 $r3;
        android.net.Uri $r4, $r5, $r6, $r7;

        <com.android.internal.telephony.InboundSmsHandler: int WAKELOCK_TIMEOUT> = 3000;

        <com.android.internal.telephony.InboundSmsHandler: boolean VDBG> = 0;

        <com.android.internal.telephony.InboundSmsHandler: int SUBID_COLUMN> = 11;

        <com.android.internal.telephony.InboundSmsHandler: int SEQUENCE_COLUMN> = 1;

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String SELECT_BY_ID> = "_id=?";

        <com.android.internal.telephony.InboundSmsHandler: int REFERENCE_NUMBER_COLUMN> = 4;

        <com.android.internal.telephony.InboundSmsHandler: int PDU_COLUMN> = 0;

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String NOTIFICATION_TAG> = "InboundSmsHandler";

        <com.android.internal.telephony.InboundSmsHandler: int NOTIFICATION_ID_NEW_MESSAGE> = 1;

        <com.android.internal.telephony.InboundSmsHandler: int MESSAGE_BODY_COLUMN> = 8;

        <com.android.internal.telephony.InboundSmsHandler: int ID_COLUMN> = 7;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_UPDATE_TRACKER> = 8;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_START_ACCEPTING_SMS> = 6;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_RETURN_TO_IDLE> = 4;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_RELEASE_WAKELOCK> = 5;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_NEW_SMS> = 1;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_INJECT_SMS> = 7;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_BROADCAST_SMS> = 2;

        <com.android.internal.telephony.InboundSmsHandler: int EVENT_BROADCAST_COMPLETE> = 3;

        <com.android.internal.telephony.InboundSmsHandler: int DISPLAY_ADDRESS_COLUMN> = 9;

        <com.android.internal.telephony.InboundSmsHandler: int DESTINATION_PORT_COLUMN> = 2;

        <com.android.internal.telephony.InboundSmsHandler: int DELETED_FLAG_COLUMN> = 10;

        <com.android.internal.telephony.InboundSmsHandler: boolean DBG> = 1;

        <com.android.internal.telephony.InboundSmsHandler: int DATE_COLUMN> = 3;

        <com.android.internal.telephony.InboundSmsHandler: int COUNT_COLUMN> = 5;

        <com.android.internal.telephony.InboundSmsHandler: int ADDRESS_COLUMN> = 6;

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = "pdu";

        $r0[1] = "deleted";

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_DELETED_FLAG_PROJECTION> = $r0;

        $r1 = new com.android.internal.telephony.InboundSmsHandler$1;

        specialinvoke $r1.<com.android.internal.telephony.InboundSmsHandler$1: void <init>()>();

        <com.android.internal.telephony.InboundSmsHandler: java.util.Map PDU_DELETED_FLAG_PROJECTION_INDEX_MAPPING> = $r1;

        $r2 = newarray (java.lang.String)[5];

        $r2[0] = "pdu";

        $r2[1] = "sequence";

        $r2[2] = "destination_port";

        $r2[3] = "display_originating_addr";

        $r2[4] = "date";

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_SEQUENCE_PORT_PROJECTION> = $r2;

        $r3 = new com.android.internal.telephony.InboundSmsHandler$2;

        specialinvoke $r3.<com.android.internal.telephony.InboundSmsHandler$2: void <init>()>();

        <com.android.internal.telephony.InboundSmsHandler: java.util.Map PDU_SEQUENCE_PORT_PROJECTION_INDEX_MAPPING> = $r3;

        $r4 = <android.provider.Telephony$Sms: android.net.Uri CONTENT_URI>;

        $r5 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r4, "raw");

        <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri> = $r5;

        $r6 = <android.provider.Telephony$Sms: android.net.Uri CONTENT_URI>;

        $r7 = staticinvoke <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>($r6, "raw/permanentDelete");

        <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUriPermanentDelete> = $r7;

        <com.android.internal.telephony.InboundSmsHandler: java.lang.String ACTION_OPEN_SMS_APP> = "com.android.internal.telephony.OPEN_DEFAULT_SMS_APP";

        return;
    }

    protected void <init>(java.lang.String, android.content.Context, com.android.internal.telephony.SmsStorageMonitor, com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.content.Context r1, $r14, $r16, $r19, $r22, $r25;
        com.android.internal.telephony.SmsStorageMonitor r2;
        com.android.internal.telephony.Phone r3, $r18;
        boolean z0, $z1, $z2;
        com.android.internal.telephony.InboundSmsHandler$DefaultState $r4, $r29, $r30, $r32, $r34;
        com.android.internal.telephony.InboundSmsHandler$StartupState $r5, $r31, $r38;
        com.android.internal.telephony.InboundSmsHandler$IdleState $r6, $r33;
        com.android.internal.telephony.InboundSmsHandler$DeliveringState $r7, $r35, $r36;
        com.android.internal.telephony.InboundSmsHandler$WaitingState $r8, $r37;
        com.android.internal.telephony.metrics.TelephonyMetrics $r9;
        com.android.internal.telephony.LocalLog $r10, $r11;
        android.content.ContentResolver $r12;
        com.android.internal.telephony.WapPushOverSms $r13;
        android.content.res.Resources $r15;
        android.telephony.TelephonyManager $r17;
        int $i0;
        java.lang.Object $r20, $r23, $r26;
        android.os.PowerManager $r21;
        android.os.UserManager $r24;
        android.os.PowerWhitelistManager $r27;
        com.android.internal.telephony.CellBroadcastServiceManager $r28;
        java.lang.String r39;
        android.os.PowerManager$WakeLock r40;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r39 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: com.android.internal.telephony.SmsStorageMonitor;

        r3 := @parameter3: com.android.internal.telephony.Phone;

        specialinvoke r0.<com.android.internal.telephony.StateMachine: void <init>(java.lang.String)>(r39);

        $r4 = new com.android.internal.telephony.InboundSmsHandler$DefaultState;

        specialinvoke $r4.<com.android.internal.telephony.InboundSmsHandler$DefaultState: void <init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)>(r0, null);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState> = $r4;

        $r5 = new com.android.internal.telephony.InboundSmsHandler$StartupState;

        specialinvoke $r5.<com.android.internal.telephony.InboundSmsHandler$StartupState: void <init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)>(r0, null);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState> = $r5;

        $r6 = new com.android.internal.telephony.InboundSmsHandler$IdleState;

        specialinvoke $r6.<com.android.internal.telephony.InboundSmsHandler$IdleState: void <init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)>(r0, null);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$IdleState mIdleState> = $r6;

        $r7 = new com.android.internal.telephony.InboundSmsHandler$DeliveringState;

        specialinvoke $r7.<com.android.internal.telephony.InboundSmsHandler$DeliveringState: void <init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)>(r0, null);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState> = $r7;

        $r8 = new com.android.internal.telephony.InboundSmsHandler$WaitingState;

        specialinvoke $r8.<com.android.internal.telephony.InboundSmsHandler$WaitingState: void <init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsHandler$1)>(r0, null);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$WaitingState mWaitingState> = $r8;

        $r9 = staticinvoke <com.android.internal.telephony.metrics.TelephonyMetrics: com.android.internal.telephony.metrics.TelephonyMetrics getInstance()>();

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics> = $r9;

        $r10 = new com.android.internal.telephony.LocalLog;

        specialinvoke $r10.<com.android.internal.telephony.LocalLog: void <init>(int)>(64);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.LocalLog mLocalLog> = $r10;

        $r11 = new com.android.internal.telephony.LocalLog;

        specialinvoke $r11.<com.android.internal.telephony.LocalLog: void <init>(int)>(10);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.LocalLog mCarrierServiceLocalLog> = $r11;

        r0.<com.android.internal.telephony.InboundSmsHandler: int DELETE_PERMANENTLY> = 1;

        r0.<com.android.internal.telephony.InboundSmsHandler: int MARK_DELETED> = 2;

        r0.<com.android.internal.telephony.InboundSmsHandler: boolean mLastSmsWasInjected> = 0;

        r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext> = r1;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.SmsStorageMonitor mStorageMonitor> = r2;

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone> = r3;

        $r12 = virtualinvoke r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver> = $r12;

        $r13 = new com.android.internal.telephony.WapPushOverSms;

        specialinvoke $r13.<com.android.internal.telephony.WapPushOverSms: void <init>(android.content.Context)>(r1);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.WapPushOverSms mWapPush> = $r13;

        $r14 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = virtualinvoke $r15.<android.content.res.Resources: boolean getBoolean(int)>(17891533);

        $r16 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r17 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager 'from'(android.content.Context)>($r16);

        $r18 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r18.<com.android.internal.telephony.Phone: int getPhoneId()>();

        $z1 = virtualinvoke $r17.<android.telephony.TelephonyManager: boolean getSmsReceiveCapableForPhone(int,boolean)>($i0, z0);

        $z2 = $z1 ^ 1;

        r0.<com.android.internal.telephony.InboundSmsHandler: boolean mSmsReceiveDisabled> = $z2;

        $r19 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r20 = virtualinvoke $r19.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r21 = (android.os.PowerManager) $r20;

        r40 = virtualinvoke $r21.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, r39);

        r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock> = r40;

        virtualinvoke r40.<android.os.PowerManager$WakeLock: void acquire()>();

        $r22 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r23 = virtualinvoke $r22.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r24 = (android.os.UserManager) $r23;

        r0.<com.android.internal.telephony.InboundSmsHandler: android.os.UserManager mUserManager> = $r24;

        $r25 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r26 = virtualinvoke $r25.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power_whitelist");

        $r27 = (android.os.PowerWhitelistManager) $r26;

        r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerWhitelistManager mPowerWhitelistManager> = $r27;

        $r28 = new com.android.internal.telephony.CellBroadcastServiceManager;

        specialinvoke $r28.<com.android.internal.telephony.CellBroadcastServiceManager: void <init>(android.content.Context,com.android.internal.telephony.Phone)>(r1, r3);

        r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.CellBroadcastServiceManager mCellBroadcastServiceManager> = $r28;

        $r29 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.telephony.State)>($r29);

        $r31 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState>;

        $r30 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.telephony.State,com.android.internal.telephony.State)>($r31, $r30);

        $r33 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$IdleState mIdleState>;

        $r32 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.telephony.State,com.android.internal.telephony.State)>($r33, $r32);

        $r35 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState>;

        $r34 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.telephony.State,com.android.internal.telephony.State)>($r35, $r34);

        $r37 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$WaitingState mWaitingState>;

        $r36 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void addState(com.android.internal.telephony.State,com.android.internal.telephony.State)>($r37, $r36);

        $r38 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$StartupState mStartupState>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void setInitialState(com.android.internal.telephony.State)>($r38);

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>("created InboundSmsHandler");

        return;
    }

    static void access$1000(com.android.internal.telephony.InboundSmsHandler, android.os.AsyncResult)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.AsyncResult r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: android.os.AsyncResult;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void handleInjectSms(android.os.AsyncResult)>(r1);

        return;
    }

    static boolean access$1100(com.android.internal.telephony.InboundSmsHandler, com.android.internal.telephony.InboundSmsTracker)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.telephony.InboundSmsTracker;

        $z0 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)>(r1);

        return $z0;
    }

    static com.android.internal.telephony.InboundSmsHandler$WaitingState access$1200(com.android.internal.telephony.InboundSmsHandler)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsHandler$WaitingState $r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$WaitingState mWaitingState>;

        return $r1;
    }

    static void access$1300(com.android.internal.telephony.InboundSmsHandler, java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logd(java.lang.String)>(r1);

        return;
    }

    static android.os.Bundle access$1400(com.android.internal.telephony.InboundSmsHandler, android.content.ComponentName, boolean)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.content.ComponentName r1;
        boolean z0;
        android.os.Bundle $r2;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: android.content.ComponentName;

        z0 := @parameter2: boolean;

        $r2 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: android.os.Bundle handleSmsWhitelisting(android.content.ComponentName,boolean)>(r1, z0);

        return $r2;
    }

    static void access$1500(com.android.internal.telephony.InboundSmsHandler, java.lang.String, java.lang.String[], int)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1;
        java.lang.String[] r2;
        int i0;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String[];

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[],int)>(r1, r2, i0);

        return;
    }

    static void access$1600(com.android.internal.telephony.InboundSmsHandler, com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void dropSms(com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver)>(r1);

        return;
    }

    static void access$1700(com.android.internal.telephony.InboundSmsHandler, byte[][], java.lang.String, int, com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver, boolean, int, long)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        byte[][] r1;
        java.lang.String r2;
        int i0, i1;
        com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver r3;
        boolean z0;
        long l2;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: byte[][];

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r3 := @parameter4: com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver;

        z0 := @parameter5: boolean;

        i1 := @parameter6: int;

        l2 := @parameter7: long;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void dispatchSmsDeliveryIntent(byte[][],java.lang.String,int,com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver,boolean,int,long)>(r1, r2, i0, r3, z0, i1, l2);

        return;
    }

    static boolean access$1800(com.android.internal.telephony.InboundSmsHandler, int)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean isSkipNotifyFlagSet(int)>(i0);

        return $z0;
    }

    static void access$1900(com.android.internal.telephony.InboundSmsHandler)
    {
        com.android.internal.telephony.InboundSmsHandler r0;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void showNewMessageNotification()>();

        return;
    }

    static java.lang.String access$2200()
    {
        java.lang.String $r0;

        $r0 = <com.android.internal.telephony.InboundSmsHandler: java.lang.String ACTION_OPEN_SMS_APP>;

        return $r0;
    }

    static void access$2400(com.android.internal.telephony.InboundSmsHandler, java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: java.lang.String;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logd(java.lang.String)>(r1);

        return;
    }

    static void access$500(com.android.internal.telephony.InboundSmsHandler, int)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        int i0;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void setWakeLockTimeout(int)>(i0);

        return;
    }

    static com.android.internal.telephony.InboundSmsHandler$IdleState access$600(com.android.internal.telephony.InboundSmsHandler)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsHandler$IdleState $r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$IdleState mIdleState>;

        return $r1;
    }

    static android.os.PowerManager$WakeLock access$700(com.android.internal.telephony.InboundSmsHandler)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock>;

        return $r1;
    }

    static com.android.internal.telephony.InboundSmsHandler$DeliveringState access$800(com.android.internal.telephony.InboundSmsHandler)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsHandler$DeliveringState $r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.InboundSmsHandler$DeliveringState mDeliveringState>;

        return $r1;
    }

    static void access$900(com.android.internal.telephony.InboundSmsHandler, android.os.AsyncResult)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.AsyncResult r1;

        r0 := @parameter0: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter1: android.os.AsyncResult;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void handleNewSms(android.os.AsyncResult)>(r1);

        return;
    }

    private int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker, boolean)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        java.lang.String r2, $r9, $r10, $r13, $r20, $r25, r28, r29;
        long l0, $l1, $l4, $l6, $l7;
        int $i2, $i3, $i5;
        android.net.Uri $r4, r31;
        android.content.ContentResolver $r5;
        java.lang.StringBuilder $r6, $r15, $r22;
        java.lang.String[] $r11, $r12;
        java.lang.Exception $r14;
        android.database.SQLException $r21;
        boolean z0, z1;
        android.content.ContentValues r30;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        z0 := @parameter1: boolean;

        if z0 == 0 goto label05;

     label01:
        z1 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean checkAndHandleDuplicate(com.android.internal.telephony.InboundSmsTracker)>(r1);

     label02:
        if z1 == 0 goto label03;

        return 5;

     label03:
        goto label06;

     label04:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addTrackerToRawTable: Can\'t access SMS database, id: ");

        $l7 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l7);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>($r25, $r21);

        return 10;

     label05:
        $l1 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String,long)>("addTrackerToRawTable: Skipped message de-duping logic", $l1);

     label06:
        r28 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getAddress()>();

        $i2 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getReferenceNumber()>();

        r29 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

        $i3 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        r30 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: android.content.ContentValues getContentValues()>();

        $r5 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r4 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        r31 = virtualinvoke $r5.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r4, r30);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addTrackerToRawTable: URI of new row: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $l4 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String,long)>($r9, $l4);

     label07:
        l0 = staticinvoke <android.content.ContentUris: long parseId(android.net.Uri)>(r31);

        $i5 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        if $i5 != 1 goto label09;

        $r12 = newarray (java.lang.String)[1];

        $r13 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        $r12[0] = $r13;

        virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: void setDeleteWhere(java.lang.String,java.lang.String[])>("_id=?", $r12);

     label08:
        goto label10;

     label09:
        $r10 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getQueryForSegments()>();

        $r11 = newarray (java.lang.String)[3];

        $r11[0] = r28;

        $r11[1] = r29;

        $r11[2] = r2;

        virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: void setDeleteWhere(java.lang.String,java.lang.String[])>($r10, $r11);

     label10:
        return 1;

     label11:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("addTrackerToRawTable: error parsing URI for new row: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" id: ");

        $l6 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l6);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>($r20, $r14);

        return 11;

        catch android.database.SQLException from label01 to label02 with label04;
        catch java.lang.Exception from label07 to label08 with label11;
        catch java.lang.Exception from label09 to label10 with label11;
    }

    private static java.lang.String buildMessageBodyFromPdus(android.telephony.SmsMessage[])
    {
        android.telephony.SmsMessage[] r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r4, $r6, $r9, $r10;
        android.telephony.SmsMessage $r5, $r8;
        int i0, i1, i2;

        r0 := @parameter0: android.telephony.SmsMessage[];

        i0 = lengthof r0;

        i1 = 0;

        if i0 != 1 goto label1;

        $r8 = r0[0];

        $r9 = virtualinvoke $r8.<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>();

        $r10 = staticinvoke <com.android.internal.telephony.InboundSmsHandler: java.lang.String replaceFormFeeds(java.lang.String)>($r9);

        return $r10;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i2 = lengthof r0;

     label2:
        if i1 >= i2 goto label3;

        $r5 = r0[i1];

        $r6 = virtualinvoke $r5.<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        i1 = i1 + 1;

        goto label2;

     label3:
        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4 = staticinvoke <com.android.internal.telephony.InboundSmsHandler: java.lang.String replaceFormFeeds(java.lang.String)>($r3);

        return $r4;
    }

    static void cancelNewMessageNotification(android.content.Context)
    {
        android.content.Context r0;
        java.lang.Object $r1;
        android.app.NotificationManager $r2;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        $r2 = (android.app.NotificationManager) $r1;

        virtualinvoke $r2.<android.app.NotificationManager: void cancel(java.lang.String,int)>("InboundSmsHandler", 1);

        return;
    }

    private boolean checkAndHandleDuplicate(com.android.internal.telephony.InboundSmsTracker) throws android.database.SQLException
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.Object $r1, $r2, $r8, $r9, $r15, $r16, $r28, $r30, $r31;
        java.lang.String[] $r3, $r5, $r10, $r12, $r17, $r32;
        java.lang.String $r4, $r11, $r18, $r21, $r25, $r33, $r36, $r39, $r43;
        android.net.Uri $r6, $r13;
        android.content.ContentResolver $r7, $r14;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i10;
        boolean $z0, $z1;
        long $l3, $l8, $l9, $l11;
        java.util.Map $r26;
        java.lang.Integer $r27, $r29;
        java.lang.Throwable $r44, $r45;
        com.android.internal.telephony.InboundSmsTracker r46;
        android.util.Pair r47, r53;
        android.database.Cursor r48, r49, r54, r55;
        java.lang.StringBuilder r50, r51, r52, r56, r57;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r46 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        r47 = virtualinvoke r46.<com.android.internal.telephony.InboundSmsTracker: android.util.Pair getExactMatchDupDetectQuery()>();

        r48 = null;

     label01:
        $r7 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r6 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        $r5 = <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_DELETED_FLAG_PROJECTION>;

        $r1 = r47.<android.util.Pair: java.lang.Object first>;

        $r4 = (java.lang.String) $r1;

        $r2 = r47.<android.util.Pair: java.lang.Object second>;

        $r3 = (java.lang.String[]) $r2;

        r49 = virtualinvoke $r7.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r6, $r5, $r4, $r3, null);

     label02:
        if r49 == null goto label50;

        r48 = r49;

     label03:
        $z1 = interfaceinvoke r49.<android.database.Cursor: boolean moveToNext()>();

        if $z1 == 0 goto label50;

     label04:
        r48 = r49;

     label05:
        $i4 = interfaceinvoke r49.<android.database.Cursor: int getCount()>();

        if $i4 == 1 goto label18;

     label06:
        r48 = r49;

     label07:
        r50 = new java.lang.StringBuilder;

     label08:
        r48 = r49;

     label09:
        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

     label10:
        r48 = r49;

     label11:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkAndHandleDuplicate: Exact match query returned ");

     label12:
        r48 = r49;

     label13:
        $i10 = interfaceinvoke r49.<android.database.Cursor: int getCount()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i10);

     label14:
        r48 = r49;

     label15:
        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rows");

     label16:
        r48 = r49;

     label17:
        $r43 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $l11 = virtualinvoke r46.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logeWithLocalLog(java.lang.String,long)>($r43, $l11);

     label18:
        r48 = r49;

     label19:
        $r26 = <com.android.internal.telephony.InboundSmsHandler: java.util.Map PDU_DELETED_FLAG_PROJECTION_INDEX_MAPPING>;

        $r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10);

        $r28 = interfaceinvoke $r26.<java.util.Map: java.lang.Object get(java.lang.Object)>($r27);

        $r29 = (java.lang.Integer) $r28;

        $i5 = virtualinvoke $r29.<java.lang.Integer: int intValue()>();

        $i6 = interfaceinvoke r49.<android.database.Cursor: int getInt(int)>($i5);

        if $i6 != 1 goto label34;

     label20:
        r48 = r49;

     label21:
        r51 = new java.lang.StringBuilder;

     label22:
        r48 = r49;

     label23:
        specialinvoke r51.<java.lang.StringBuilder: void <init>()>();

     label24:
        r48 = r49;

     label25:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkAndHandleDuplicate: Discarding duplicate message/segment: ");

     label26:
        r48 = r49;

     label27:
        virtualinvoke r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r46);

     label28:
        r48 = r49;

     label29:
        $r39 = virtualinvoke r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $l9 = virtualinvoke r46.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logWithLocalLog(java.lang.String,long)>($r39, $l9);

     label30:
        r48 = r49;

     label31:
        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logDupPduMismatch(android.database.Cursor,com.android.internal.telephony.InboundSmsTracker)>(r49, r46);

     label32:
        if r49 == null goto label33;

        interfaceinvoke r49.<android.database.Cursor: void close()>();

     label33:
        return 1;

     label34:
        r48 = r49;

     label35:
        $i7 = virtualinvoke r46.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        if $i7 != 1 goto label50;

     label36:
        r48 = r49;

     label37:
        $r30 = r47.<android.util.Pair: java.lang.Object first>;

        $r33 = (java.lang.String) $r30;

        $r31 = r47.<android.util.Pair: java.lang.Object second>;

        $r32 = (java.lang.String[]) $r31;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[],int)>($r33, $r32, 1);

     label38:
        r48 = r49;

     label39:
        r52 = new java.lang.StringBuilder;

     label40:
        r48 = r49;

     label41:
        specialinvoke r52.<java.lang.StringBuilder: void <init>()>();

     label42:
        r48 = r49;

     label43:
        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkAndHandleDuplicate: Replacing duplicate message: ");

     label44:
        r48 = r49;

     label45:
        virtualinvoke r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r46);

     label46:
        r48 = r49;

     label47:
        $r36 = virtualinvoke r52.<java.lang.StringBuilder: java.lang.String toString()>();

        $l8 = virtualinvoke r46.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logWithLocalLog(java.lang.String,long)>($r36, $l8);

     label48:
        r48 = r49;

     label49:
        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logDupPduMismatch(android.database.Cursor,com.android.internal.telephony.InboundSmsTracker)>(r49, r46);

     label50:
        if r49 == null goto label51;

        interfaceinvoke r49.<android.database.Cursor: void close()>();

     label51:
        $i0 = virtualinvoke r46.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        if $i0 <= 1 goto label86;

        r53 = virtualinvoke r46.<com.android.internal.telephony.InboundSmsTracker: android.util.Pair getInexactMatchDupDetectQuery()>();

        r54 = null;

     label52:
        $r14 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r13 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        $r12 = <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_DELETED_FLAG_PROJECTION>;

        $r8 = r53.<android.util.Pair: java.lang.Object first>;

        $r11 = (java.lang.String) $r8;

        $r9 = r53.<android.util.Pair: java.lang.Object second>;

        $r10 = (java.lang.String[]) $r9;

        r55 = virtualinvoke $r14.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r13, $r12, $r11, $r10, null);

     label53:
        if r55 == null goto label83;

        r54 = r55;

     label54:
        $z0 = interfaceinvoke r55.<android.database.Cursor: boolean moveToNext()>();

        if $z0 == 0 goto label83;

     label55:
        r54 = r55;

     label56:
        $i1 = interfaceinvoke r55.<android.database.Cursor: int getCount()>();

        if $i1 == 1 goto label69;

     label57:
        r54 = r55;

     label58:
        r56 = new java.lang.StringBuilder;

     label59:
        r54 = r55;

     label60:
        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

     label61:
        r54 = r55;

     label62:
        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkAndHandleDuplicate: Inexact match query returned ");

     label63:
        r54 = r55;

     label64:
        $i2 = interfaceinvoke r55.<android.database.Cursor: int getCount()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

     label65:
        r54 = r55;

     label66:
        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rows");

     label67:
        r54 = r55;

     label68:
        $r25 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        $l3 = virtualinvoke r46.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logeWithLocalLog(java.lang.String,long)>($r25, $l3);

     label69:
        r54 = r55;

     label70:
        $r15 = r53.<android.util.Pair: java.lang.Object first>;

        $r18 = (java.lang.String) $r15;

        $r16 = r53.<android.util.Pair: java.lang.Object second>;

        $r17 = (java.lang.String[]) $r16;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[],int)>($r18, $r17, 1);

     label71:
        r54 = r55;

     label72:
        r57 = new java.lang.StringBuilder;

     label73:
        r54 = r55;

     label74:
        specialinvoke r57.<java.lang.StringBuilder: void <init>()>();

     label75:
        r54 = r55;

     label76:
        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("checkAndHandleDuplicate: Replacing duplicate message segment: ");

     label77:
        r54 = r55;

     label78:
        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r46);

     label79:
        r54 = r55;

     label80:
        $r21 = virtualinvoke r57.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logWithLocalLog(java.lang.String)>($r21);

     label81:
        r54 = r55;

     label82:
        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logDupPduMismatch(android.database.Cursor,com.android.internal.telephony.InboundSmsTracker)>(r55, r46);

     label83:
        if r55 == null goto label86;

        interfaceinvoke r55.<android.database.Cursor: void close()>();

        goto label86;

     label84:
        $r44 := @caughtexception;

        if r54 == null goto label85;

        interfaceinvoke r54.<android.database.Cursor: void close()>();

     label85:
        throw $r44;

     label86:
        return 0;

     label87:
        $r45 := @caughtexception;

        if r48 == null goto label88;

        interfaceinvoke r48.<android.database.Cursor: void close()>();

     label88:
        throw $r45;

        catch java.lang.Throwable from label01 to label02 with label87;
        catch java.lang.Throwable from label03 to label04 with label87;
        catch java.lang.Throwable from label05 to label06 with label87;
        catch java.lang.Throwable from label07 to label08 with label87;
        catch java.lang.Throwable from label09 to label10 with label87;
        catch java.lang.Throwable from label11 to label12 with label87;
        catch java.lang.Throwable from label13 to label14 with label87;
        catch java.lang.Throwable from label15 to label16 with label87;
        catch java.lang.Throwable from label17 to label18 with label87;
        catch java.lang.Throwable from label19 to label20 with label87;
        catch java.lang.Throwable from label21 to label22 with label87;
        catch java.lang.Throwable from label23 to label24 with label87;
        catch java.lang.Throwable from label25 to label26 with label87;
        catch java.lang.Throwable from label27 to label28 with label87;
        catch java.lang.Throwable from label29 to label30 with label87;
        catch java.lang.Throwable from label31 to label32 with label87;
        catch java.lang.Throwable from label35 to label36 with label87;
        catch java.lang.Throwable from label37 to label38 with label87;
        catch java.lang.Throwable from label39 to label40 with label87;
        catch java.lang.Throwable from label41 to label42 with label87;
        catch java.lang.Throwable from label43 to label44 with label87;
        catch java.lang.Throwable from label45 to label46 with label87;
        catch java.lang.Throwable from label47 to label48 with label87;
        catch java.lang.Throwable from label49 to label50 with label87;
        catch java.lang.Throwable from label52 to label53 with label84;
        catch java.lang.Throwable from label54 to label55 with label84;
        catch java.lang.Throwable from label56 to label57 with label84;
        catch java.lang.Throwable from label58 to label59 with label84;
        catch java.lang.Throwable from label60 to label61 with label84;
        catch java.lang.Throwable from label62 to label63 with label84;
        catch java.lang.Throwable from label64 to label65 with label84;
        catch java.lang.Throwable from label66 to label67 with label84;
        catch java.lang.Throwable from label68 to label69 with label84;
        catch java.lang.Throwable from label70 to label71 with label84;
        catch java.lang.Throwable from label72 to label73 with label84;
        catch java.lang.Throwable from label74 to label75 with label84;
        catch java.lang.Throwable from label76 to label77 with label84;
        catch java.lang.Throwable from label78 to label79 with label84;
        catch java.lang.Throwable from label80 to label81 with label84;
        catch java.lang.Throwable from label82 to label83 with label84;
    }

    private void deleteFromRawTable(java.lang.String, java.lang.String[], int)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String[] r1;
        android.content.ContentResolver $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7, r8;
        int i0, i1;
        android.net.Uri r9;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String[];

        i0 := @parameter2: int;

        if i0 != 1 goto label1;

        r9 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUriPermanentDelete>;

        goto label2;

     label1:
        r9 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

     label2:
        $r2 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        i1 = virtualinvoke $r2.<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>(r9, r8, r1);

        if i1 != 0 goto label3;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("No rows were deleted from raw table!");

        goto label4;

     label3:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Deleted ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rows from raw table.");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r7);

     label4:
        return;
    }

    private int dispatchMessage(com.android.internal.telephony.SmsMessageBase)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.SmsMessageBase r1;
        int i0, $i1;
        boolean $z1, $z2, z3;
        android.os.IBinder $r3;
        android.content.pm.IPackageManager $r4;
        com.android.internal.telephony.Phone $r5;
        com.android.internal.telephony.metrics.TelephonyMetrics $r6;
        android.os.RemoteException $r7;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.SmsMessageBase;

        if r1 != null goto label1;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("dispatchSmsMessage: message is null");

        return 8;

     label1:
        $z1 = r0.<com.android.internal.telephony.InboundSmsHandler: boolean mSmsReceiveDisabled>;

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>("Received short message on device which doesn\'t support receiving SMS. Ignored.");

        return 1;

     label2:
        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("package");

        $r4 = staticinvoke <android.content.pm.IPackageManager$Stub: android.content.pm.IPackageManager asInterface(android.os.IBinder)>($r3);

        z3 = interfaceinvoke $r4.<android.content.pm.IPackageManager: boolean isOnlyCoreApps()>();

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        z3 = 0;

     label5:
        if z3 == 0 goto label6;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>("Received a short message in encrypted state. Rejecting.");

        return 9;

     label6:
        i0 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase)>(r1);

        if i0 == 1 goto label7;

        $r6 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics>;

        $r5 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $i1 = virtualinvoke $r5.<com.android.internal.telephony.Phone: int getPhoneId()>();

        $z2 = r0.<com.android.internal.telephony.InboundSmsHandler: boolean mLastSmsWasInjected>;

        virtualinvoke $r6.<com.android.internal.telephony.metrics.TelephonyMetrics: void writeIncomingSmsError(int,boolean,int)>($i1, $z2, i0);

     label7:
        return i0;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void dispatchSmsDeliveryIntent(byte[][], java.lang.String, int, com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver, boolean, int, long)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        int i0, i1;
        com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver r1;
        boolean z0, $z1;
        long l2;
        android.content.Intent $r3;
        byte $b3;
        java.lang.StringBuilder $r7, $r23;
        java.lang.String $r10, $r25, $r28, $r30, r33;
        android.net.Uri $r11;
        android.content.ComponentName $r14, r34;
        android.os.Bundle $r15;
        android.os.UserHandle $r16;
        android.content.Context $r18;
        com.android.internal.telephony.Phone $r20;
        com.android.internal.telephony.AppSmsManager $r21;
        byte[][] r32;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r32 := @parameter0: byte[][];

        r33 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r1 := @parameter3: com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver;

        z0 := @parameter4: boolean;

        i1 := @parameter5: int;

        l2 := @parameter6: long;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>()>();

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)>("pdus", r32);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("format", r33);

        $b3 = l2 cmp 0L;

        if $b3 == 0 goto label1;

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("messageId", l2);

     label1:
        if i0 != -1 goto label5;

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.provider.Telephony.SMS_DELIVER");

        $r18 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        r34 = staticinvoke <com.android.internal.telephony.SmsApplication: android.content.ComponentName getDefaultSmsApplication(android.content.Context,boolean)>($r18, 1);

        if r34 == null goto label2;

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(r34);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Delivering SMS to: ");

        $r25 = virtualinvoke r34.<android.content.ComponentName: java.lang.String getPackageName()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25);

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r28 = virtualinvoke r34.<android.content.ComponentName: java.lang.String getClassName()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logWithLocalLog(java.lang.String,long)>($r30, l2);

        goto label3;

     label2:
        virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(null);

     label3:
        $r20 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $r21 = virtualinvoke $r20.<com.android.internal.telephony.Phone: com.android.internal.telephony.AppSmsManager getAppSmsManager()>();

        $z1 = virtualinvoke $r21.<com.android.internal.telephony.AppSmsManager: boolean handleSmsReceivedIntent(android.content.Intent)>($r3);

        if $z1 == 0 goto label4;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void dropSms(com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver)>(r1);

        return;

     label4:
        goto label6;

     label5:
        virtualinvoke $r3.<android.content.Intent: android.content.Intent setAction(java.lang.String)>("android.intent.action.DATA_SMS_RECEIVED");

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sms://localhost:");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r10);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r11);

        virtualinvoke $r3.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>(null);

     label6:
        $r14 = virtualinvoke $r3.<android.content.Intent: android.content.ComponentName getComponent()>();

        $r15 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: android.os.Bundle handleSmsWhitelisting(android.content.ComponentName,boolean)>($r14, z0);

        $r16 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void dispatchIntent(android.content.Intent,java.lang.String,java.lang.String,android.os.Bundle,android.content.BroadcastReceiver,android.os.UserHandle,int)>($r3, "android.permission.RECEIVE_SMS", "android:receive_sms", $r15, r1, $r16, i1);

        return;
    }

    private void dropSms(com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver r1;
        java.lang.String $r2;
        java.lang.String[] $r3;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver;

        $r2 = staticinvoke <com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: java.lang.String access$2000(com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver)>(r1);

        $r3 = staticinvoke <com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: java.lang.String[] access$2100(com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver)>(r1);

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[],int)>($r2, $r3, 2);

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void sendMessage(int)>(3);

        return;
    }

    private boolean filterSms(byte[][], int, com.android.internal.telephony.InboundSmsTracker, com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver, boolean)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        byte[][] r1;
        int i0, $i1, $i4;
        com.android.internal.telephony.InboundSmsTracker r2;
        com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver r3;
        boolean z0, $z1, $z2, $z3, $z4;
        android.content.Context r5, $r18;
        com.android.internal.telephony.Phone r6, $r21;
        java.lang.String r7, $r10, $r12, $r16, $r19, $r22;
        com.android.internal.telephony.InboundSmsHandler$CarrierServicesSmsFilterCallback $r9;
        long $l2, $l3, $l5, $l6, $l7;
        java.lang.StringBuilder $r11;
        com.android.internal.telephony.CarrierServicesSmsFilter $r15;
        com.android.internal.telephony.LocalLog $r17;
        com.android.internal.telephony.MissedIncomingCallSmsFilter $r20;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: byte[][];

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.internal.telephony.InboundSmsTracker;

        r3 := @parameter3: com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver;

        z0 := @parameter4: boolean;

        $r9 = new com.android.internal.telephony.InboundSmsHandler$CarrierServicesSmsFilterCallback;

        $r10 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getFormat()>();

        $z1 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: boolean isClass0()>();

        $i1 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: int getSubId()>();

        $l2 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        specialinvoke $r9.<com.android.internal.telephony.InboundSmsHandler$CarrierServicesSmsFilterCallback: void <init>(com.android.internal.telephony.InboundSmsHandler,byte[][],int,java.lang.String,com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver,boolean,boolean,int,long)>(r0, r1, i0, $r10, r3, z0, $z1, $i1, $l2);

        r5 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        r6 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        r7 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getFormat()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        $r12 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::CarrierServicesSmsFilter");

        $r15 = new com.android.internal.telephony.CarrierServicesSmsFilter;

        $r16 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.LocalLog mCarrierServiceLocalLog>;

        $l3 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        specialinvoke $r15.<com.android.internal.telephony.CarrierServicesSmsFilter: void <init>(android.content.Context,com.android.internal.telephony.Phone,byte[][],int,java.lang.String,com.android.internal.telephony.CarrierServicesSmsFilter$CarrierServicesSmsFilterCallbackInterface,java.lang.String,com.android.internal.telephony.LocalLog,long)>(r5, r6, r1, i0, r7, $r9, $r16, $r17, $l3);

        $z2 = virtualinvoke $r15.<com.android.internal.telephony.CarrierServicesSmsFilter: boolean filter()>();

        if $z2 == 0 goto label1;

        $l7 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String,long)>("filterSms: SMS is being handled by carrier service", $l7);

        return 1;

     label1:
        $r18 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r19 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getFormat()>();

        $i4 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: int getSubId()>();

        $z3 = staticinvoke <com.android.internal.telephony.VisualVoicemailSmsFilter: boolean filter(android.content.Context,byte[][],java.lang.String,int,int)>($r18, r1, $r19, i0, $i4);

        if $z3 == 0 goto label2;

        $l6 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logWithLocalLog(java.lang.String,long)>("filterSms: Visual voicemail SMS dropped", $l6);

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void dropSms(com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver)>(r3);

        return 1;

     label2:
        $r20 = new com.android.internal.telephony.MissedIncomingCallSmsFilter;

        $r21 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        specialinvoke $r20.<com.android.internal.telephony.MissedIncomingCallSmsFilter: void <init>(com.android.internal.telephony.Phone)>($r21);

        $r22 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getFormat()>();

        $z4 = virtualinvoke $r20.<com.android.internal.telephony.MissedIncomingCallSmsFilter: boolean filter(byte[][],java.lang.String)>(r1, $r22);

        if $z4 == 0 goto label3;

        $l5 = virtualinvoke r2.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logWithLocalLog(java.lang.String,long)>("filterSms: Missed incoming call SMS received", $l5);

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void dropSms(com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver)>(r3);

        return 1;

     label3:
        return 0;
    }

    private void handleInjectSms(android.os.AsyncResult)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.SmsDispatchersController$SmsInjectionCallback r1, r7;
        java.lang.Object $r2, $r3;
        com.android.internal.telephony.SmsMessageBase $r4;
        java.lang.RuntimeException $r5;
        android.os.AsyncResult r6;
        android.telephony.SmsMessage r8;
        int i0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r6 := @parameter0: android.os.AsyncResult;

        r7 = null;

     label01:
        $r2 = r6.<android.os.AsyncResult: java.lang.Object userObj>;

        r1 = (com.android.internal.telephony.SmsDispatchersController$SmsInjectionCallback) $r2;

     label02:
        r7 = r1;

     label03:
        $r3 = r6.<android.os.AsyncResult: java.lang.Object result>;

        r8 = (android.telephony.SmsMessage) $r3;

     label04:
        if r8 != null goto label07;

        r7 = r1;

     label05:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("Null injected sms");

     label06:
        i0 = 7;

        goto label11;

     label07:
        r7 = r1;

     label08:
        r0.<com.android.internal.telephony.InboundSmsHandler: boolean mLastSmsWasInjected> = 1;

     label09:
        r7 = r1;

     label10:
        $r4 = r8.<android.telephony.SmsMessage: com.android.internal.telephony.SmsMessageBase mWrappedSmsMessage>;

        i0 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>($r4);

     label11:
        r7 = r1;

        goto label13;

     label12:
        $r5 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Exception dispatching message", $r5);

        i0 = 6;

     label13:
        if r7 == null goto label14;

        interfaceinvoke r7.<com.android.internal.telephony.SmsDispatchersController$SmsInjectionCallback: void onSmsInjectedResult(int)>(i0);

     label14:
        return;

        catch java.lang.RuntimeException from label01 to label02 with label12;
        catch java.lang.RuntimeException from label03 to label04 with label12;
        catch java.lang.RuntimeException from label05 to label06 with label12;
        catch java.lang.RuntimeException from label08 to label09 with label12;
        catch java.lang.RuntimeException from label10 to label11 with label12;
    }

    private void handleNewSms(android.os.AsyncResult)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.Throwable $r2, $r7;
        java.lang.Object $r3;
        com.android.internal.telephony.SmsMessageBase $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r9;
        java.lang.RuntimeException $r10;
        android.os.AsyncResult r11;
        boolean z0;
        android.telephony.SmsMessage r12;
        int i0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r11 := @parameter0: android.os.AsyncResult;

        $r2 = r11.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r2 == null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception processing incoming SMS: ");

        $r7 = r11.<android.os.AsyncResult: java.lang.Throwable exception>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>($r9);

        return;

     label1:
        z0 = 0;

     label2:
        $r3 = r11.<android.os.AsyncResult: java.lang.Object result>;

        r12 = (android.telephony.SmsMessage) $r3;

        r0.<com.android.internal.telephony.InboundSmsHandler: boolean mLastSmsWasInjected> = 0;

        $r4 = r12.<android.telephony.SmsMessage: com.android.internal.telephony.SmsMessageBase mWrappedSmsMessage>;

        i0 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int dispatchMessage(com.android.internal.telephony.SmsMessageBase)>($r4);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Exception dispatching message", $r10);

        i0 = 6;

     label5:
        if i0 == -1 goto label7;

        if i0 != 1 goto label6;

        z0 = 1;

     label6:
        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void notifyAndAcknowledgeLastIncomingSms(boolean,int,android.os.Message)>(z0, i0, null);

     label7:
        return;

        catch java.lang.RuntimeException from label2 to label3 with label4;
    }

    private android.os.Bundle handleSmsWhitelisting(android.content.ComponentName, boolean)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        boolean z0;
        long l0;
        android.content.Context $r1;
        android.os.PowerWhitelistManager $r2;
        android.os.Bundle $r3;
        android.content.ComponentName r5;
        java.lang.String r6, r7;
        android.app.BroadcastOptions r8, r9;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r5 := @parameter0: android.content.ComponentName;

        z0 := @parameter1: boolean;

        if r5 == null goto label1;

        r6 = virtualinvoke r5.<android.content.ComponentName: java.lang.String getPackageName()>();

        r7 = "sms-app";

        goto label2;

     label1:
        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        r6 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        r7 = "sms-broadcast";

     label2:
        r8 = null;

        if z0 == 0 goto label3;

        r8 = staticinvoke <android.app.BroadcastOptions: android.app.BroadcastOptions makeBasic()>();

        virtualinvoke r8.<android.app.BroadcastOptions: void setBackgroundActivityStartsAllowed(boolean)>(1);

        virtualinvoke r8.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

     label3:
        $r2 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerWhitelistManager mPowerWhitelistManager>;

        l0 = virtualinvoke $r2.<android.os.PowerWhitelistManager: long whitelistAppTemporarilyForEvent(java.lang.String,int,java.lang.String)>(r6, 1, r7);

        r9 = r8;

        if r8 != null goto label4;

        r9 = staticinvoke <android.app.BroadcastOptions: android.app.BroadcastOptions makeBasic()>();

     label4:
        virtualinvoke r9.<android.app.BroadcastOptions: void setTemporaryAppWhitelistDuration(long)>(l0);

        $r3 = virtualinvoke r9.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

        return $r3;
    }

    private boolean hasUserRestriction(java.lang.String, android.os.UserHandle)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.UserHandle r1;
        android.os.UserManager $r2;
        boolean $z0, z1;
        java.lang.String r3;
        java.util.List r4;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r3 := @parameter0: java.lang.String;

        r1 := @parameter1: android.os.UserHandle;

        $r2 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.UserManager mUserManager>;

        r4 = virtualinvoke $r2.<android.os.UserManager: java.util.List getUserRestrictionSources(java.lang.String,android.os.UserHandle)>(r3, r1);

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private byte hexToByte(java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1;
        char $c0, $c3;
        int $i1, $i2, $i4, $i5;
        byte $b6;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        $i1 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int toDigit(char)>($c0);

        $i2 = $i1 << 4;

        $c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(1);

        $i4 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int toDigit(char)>($c3);

        $i5 = $i2 + $i4;

        $b6 = (byte) $i5;

        return $b6;
    }

    static boolean isCurrentFormat3gpp2()
    {
        android.telephony.TelephonyManager $r0;
        int $i0;
        boolean z0;

        $r0 = staticinvoke <android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()>();

        $i0 = virtualinvoke $r0.<android.telephony.TelephonyManager: int getCurrentPhoneType()>();

        if 2 != $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isSkipNotifyFlagSet(int)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        i0 := @parameter0: int;

        $i1 = i0 & 2;

        if $i1 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void logDupPduMismatch(android.database.Cursor, com.android.internal.telephony.InboundSmsTracker)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        byte[] r2, $r7, r16;
        java.util.Map $r3;
        java.lang.Integer $r4, $r6;
        java.lang.Object $r5;
        int $i0, $i1, $i2;
        boolean $z0;
        java.lang.StringBuilder $r8;
        java.lang.String $r13, r15;
        long $l3;
        android.database.Cursor r14;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r14 := @parameter0: android.database.Cursor;

        r1 := @parameter1: com.android.internal.telephony.InboundSmsTracker;

        $r3 = <com.android.internal.telephony.InboundSmsHandler: java.util.Map PDU_DELETED_FLAG_PROJECTION_INDEX_MAPPING>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4);

        $r6 = (java.lang.Integer) $r5;

        $i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        r15 = interfaceinvoke r14.<android.database.Cursor: java.lang.String getString(int)>($i0);

        r16 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: byte[] getPdu()>();

        r2 = staticinvoke <com.android.internal.telephony.HexDump: byte[] hexStringToByteArray(java.lang.String)>(r15);

        $r7 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: byte[] getPdu()>();

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r2, $r7);

        if $z0 != 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Warning: dup message PDU of length ");

        $i1 = lengthof r16;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is different from existing PDU of length ");

        $i2 = lengthof r2;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $l3 = virtualinvoke r1.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logeWithLocalLog(java.lang.String,long)>($r13, $l3);

     label1:
        return;
    }

    private void notifyAndAcknowledgeLastIncomingSms(boolean, int, android.os.Message)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        boolean z0;
        int i0, $i1;
        android.os.Message r1;
        android.content.Intent $r3;
        com.android.internal.telephony.Phone $r5;
        android.content.Context $r7;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        if z0 != 0 goto label1;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.provider.Telephony.SMS_REJECTED");

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("result", i0);

        $r5 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $i1 = virtualinvoke $r5.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r3.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("subId", $i1);

        $r7 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>($r3, "android.permission.RECEIVE_SMS");

     label1:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void acknowledgeLastIncomingSms(boolean,int,android.os.Message)>(z0, i0, r1);

        return;
    }

    private static android.content.ContentValues parseSmsMessage(android.telephony.SmsMessage[])
    {
        java.lang.Integer r0, $r8, $r9;
        android.telephony.SmsMessage r1;
        android.content.ContentValues $r3;
        java.lang.String $r4, $r5, $r10, r12;
        long $l0, $l1;
        java.lang.Long $r6, $r7;
        int $i2, i3;
        boolean $z0, $z1;
        android.telephony.SmsMessage[] r11;

        r11 := @parameter0: android.telephony.SmsMessage[];

        r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        r1 = r11[0];

        $r3 = new android.content.ContentValues;

        specialinvoke $r3.<android.content.ContentValues: void <init>()>();

        $r4 = virtualinvoke r1.<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>();

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("address", $r4);

        $r5 = staticinvoke <com.android.internal.telephony.InboundSmsHandler: java.lang.String buildMessageBodyFromPdus(android.telephony.SmsMessage[])>(r11);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("body", $r5);

        $l0 = virtualinvoke r1.<android.telephony.SmsMessage: long getTimestampMillis()>();

        $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("date_sent", $r6);

        $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>();

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>("date", $r7);

        $i2 = virtualinvoke r1.<android.telephony.SmsMessage: int getProtocolIdentifier()>();

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("protocol", $r8);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("seen", r0);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("read", r0);

        r12 = virtualinvoke r1.<android.telephony.SmsMessage: java.lang.String getPseudoSubject()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r12);

        if $z0 != 0 goto label1;

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("subject", r12);

     label1:
        $z1 = virtualinvoke r1.<android.telephony.SmsMessage: boolean isReplyPathPresent()>();

        i3 = (int) $z1;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>("reply_path_present", $r9);

        $r10 = virtualinvoke r1.<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()>();

        virtualinvoke $r3.<android.content.ContentValues: void put(java.lang.String,java.lang.String)>("service_center", $r10);

        return $r3;
    }

    private boolean processMessagePart(com.android.internal.telephony.InboundSmsTracker)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        int i0, $i2, $i3, $i5, $i6, $i8, $i11, $i14, $i17, $i20, $i22, $i24, $i26, $i27, $i28, $i29, $i30, $i31, $i33, $i34, $i35, $i36, $i37, i41, i42, i43, i44, i45, $i46, i48, i49, i50;
        java.lang.String r1, $r6, $r8, $r10, $r14, $r19, $r22, $r27, $r40, $r45, $r52, $r61, $r63, $r67, $r69, r81, r82, r93, r105;
        long l1, $l4, $l7, $l9, $l10, $l12, $l13, $l15, $l16, $l18, $l19, $l21, $l23, $l25, $l32, $l38, $l39, $l40, $l47;
        java.lang.StringBuilder r2, $r9, $r18, $r26, $r66, r84, r106;
        android.content.ContentResolver $r3;
        android.net.Uri $r4;
        java.lang.String[] $r5, $r7, $r15, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, z12, z13;
        java.io.ByteArrayOutputStream $r11;
        com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver $r12;
        android.os.UserManager $r13;
        com.android.internal.telephony.WapPushOverSms $r16;
        byte[] $r17, $r28, $r46, r76, r97;
        com.android.internal.telephony.Phone $r20, $r24, $r29, $r31;
        com.android.internal.telephony.metrics.TelephonyMetrics $r21, $r25, $r30, $r32;
        java.util.Map $r33, $r41, $r48, $r53, $r57, $r89;
        java.lang.Integer $r34, $r36, $r38, $r39, $r42, $r44, $r49, $r51, $r54, $r56, $r58, $r60, $r90, $r92;
        java.lang.Object $r35, $r43, $r50, $r55, $r59, $r91;
        java.lang.Object[] $r37;
        android.content.Context $r47, $r62;
        byte[][] $r64, r77, r87, r101, r102;
        long[] $r65, r78, r88;
        android.database.SQLException $r68, $r73, r86;
        java.lang.Throwable $r70, $r71, $r72, r85;
        com.android.internal.telephony.InboundSmsTracker r74;
        android.database.Cursor r79, r80, r83;
        java.util.List r94;
        android.telephony.SmsMessage r98;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r74 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        i0 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        i41 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: int getDestPort()>();

        z10 = 0;

        r1 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getAddress()>();

        if i0 > 0 goto label01;

        $r66 = new java.lang.StringBuilder;

        specialinvoke $r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processMessagePart: returning false due to invalid message count ");

        virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        $l39 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,long)>($r67, $l39);

        return 0;

     label01:
        if i0 != 1 goto label02;

        r76 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: byte[] getPdu()>();

        l1 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getTimestamp()>();

        $r62 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r63 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getDisplayAddress()>();

        z10 = staticinvoke <com.android.internal.telephony.BlockChecker: boolean isBlocked(android.content.Context,java.lang.String,android.os.Bundle)>($r62, $r63, null);

        $r64 = newarray (byte[])[1];

        $r64[0] = r76;

        r77 = $r64;

        $r65 = newarray (long)[1];

        $r65[0] = l1;

        r78 = $r65;

        goto label51;

     label02:
        r79 = null;

        r80 = null;

     label03:
        $i2 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: int getReferenceNumber()>();

        r81 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2);

     label04:
        r79 = null;

        r80 = null;

     label05:
        $i3 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: int getMessageCount()>();

        r82 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

     label06:
        r79 = null;

        r80 = null;

     label07:
        $r3 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.ContentResolver mResolver>;

        $r4 = <com.android.internal.telephony.InboundSmsHandler: android.net.Uri sRawUri>;

        $r5 = <com.android.internal.telephony.InboundSmsHandler: java.lang.String[] PDU_SEQUENCE_PORT_PROJECTION>;

        $r6 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getQueryForSegments()>();

        $r7 = newarray (java.lang.String)[3];

        $r7[0] = r1;

        $r7[1] = r81;

        $r7[2] = r82;

        r83 = virtualinvoke $r3.<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>($r4, $r5, $r6, $r7, null);

     label08:
        r79 = r83;

        r80 = r83;

     label09:
        i42 = interfaceinvoke r83.<android.database.Cursor: int getCount()>();

     label10:
        if i42 >= i0 goto label16;

     label11:
        r84 = new java.lang.StringBuilder;

        specialinvoke r84.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processMessagePart: returning false. Only ");

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i42);

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of ");

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" segments  have arrived. refNumber: ");

        virtualinvoke r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r81);

        $r61 = virtualinvoke r84.<java.lang.StringBuilder: java.lang.String toString()>();

        $l38 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String,long)>($r61, $l38);

     label12:
        if r83 == null goto label13;

        interfaceinvoke r83.<android.database.Cursor: void close()>();

     label13:
        return 0;

     label14:
        $r71 := @caughtexception;

        r85 = $r71;

        goto label80;

     label15:
        $r73 := @caughtexception;

        r86 = $r73;

        goto label76;

     label16:
        r79 = r83;

        r80 = r83;

     label17:
        r87 = newarray (byte[])[i0];

     label18:
        r79 = r83;

        r80 = r83;

     label19:
        r88 = newarray (long)[i0];

     label20:
        r79 = r83;

        r80 = r83;

     label21:
        z11 = interfaceinvoke r83.<android.database.Cursor: boolean moveToNext()>();

     label22:
        if z11 == 0 goto label35;

     label23:
        $r33 = <com.android.internal.telephony.InboundSmsHandler: java.util.Map PDU_SEQUENCE_PORT_PROJECTION_INDEX_MAPPING>;

        $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r35 = interfaceinvoke $r33.<java.util.Map: java.lang.Object get(java.lang.Object)>($r34);

        $r36 = (java.lang.Integer) $r35;

        $i26 = virtualinvoke $r36.<java.lang.Integer: int intValue()>();

        $i27 = interfaceinvoke r83.<android.database.Cursor: int getInt(int)>($i26);

        $i28 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: int getIndexOffset()>();

        i43 = $i27 - $i28;

        $i29 = lengthof r87;

        if i43 >= $i29 goto label33;

     label24:
        if i43 >= 0 goto label25;

        goto label33;

     label25:
        $r41 = <com.android.internal.telephony.InboundSmsHandler: java.util.Map PDU_SEQUENCE_PORT_PROJECTION_INDEX_MAPPING>;

        $r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r43 = interfaceinvoke $r41.<java.util.Map: java.lang.Object get(java.lang.Object)>($r42);

        $r44 = (java.lang.Integer) $r43;

        $i33 = virtualinvoke $r44.<java.lang.Integer: int intValue()>();

        $r45 = interfaceinvoke r83.<android.database.Cursor: java.lang.String getString(int)>($i33);

        $r46 = staticinvoke <com.android.internal.telephony.HexDump: byte[] hexStringToByteArray(java.lang.String)>($r45);

        r87[i43] = $r46;

     label26:
        i44 = i41;

        if i43 != 0 goto label29;

        i44 = i41;

     label27:
        $r53 = <com.android.internal.telephony.InboundSmsHandler: java.util.Map PDU_SEQUENCE_PORT_PROJECTION_INDEX_MAPPING>;

        $r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r55 = interfaceinvoke $r53.<java.util.Map: java.lang.Object get(java.lang.Object)>($r54);

        $r56 = (java.lang.Integer) $r55;

        $i35 = virtualinvoke $r56.<java.lang.Integer: int intValue()>();

        $z9 = interfaceinvoke r83.<android.database.Cursor: boolean isNull(int)>($i35);

        if $z9 != 0 goto label29;

        $r57 = <com.android.internal.telephony.InboundSmsHandler: java.util.Map PDU_SEQUENCE_PORT_PROJECTION_INDEX_MAPPING>;

        $r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        $r59 = interfaceinvoke $r57.<java.util.Map: java.lang.Object get(java.lang.Object)>($r58);

        $r60 = (java.lang.Integer) $r59;

        $i36 = virtualinvoke $r60.<java.lang.Integer: int intValue()>();

        $i37 = interfaceinvoke r83.<android.database.Cursor: int getInt(int)>($i36);

        i45 = staticinvoke <com.android.internal.telephony.InboundSmsTracker: int getRealDestPort(int)>($i37);

     label28:
        i44 = i41;

        if i45 == -1 goto label29;

        i44 = i45;

     label29:
        $r89 = <com.android.internal.telephony.InboundSmsHandler: java.util.Map PDU_SEQUENCE_PORT_PROJECTION_INDEX_MAPPING>;

        $r90 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        $r91 = interfaceinvoke $r89.<java.util.Map: java.lang.Object get(java.lang.Object)>($r90);

        $r92 = (java.lang.Integer) $r91;

        $i46 = virtualinvoke $r92.<java.lang.Integer: int intValue()>();

        $l47 = interfaceinvoke r83.<android.database.Cursor: long getLong(int)>($i46);

        r88[i43] = $l47;

     label30:
        z12 = z10;

        if z10 != 0 goto label32;

     label31:
        $r47 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r48 = <com.android.internal.telephony.InboundSmsHandler: java.util.Map PDU_SEQUENCE_PORT_PROJECTION_INDEX_MAPPING>;

        $r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9);

        $r50 = interfaceinvoke $r48.<java.util.Map: java.lang.Object get(java.lang.Object)>($r49);

        $r51 = (java.lang.Integer) $r50;

        $i34 = virtualinvoke $r51.<java.lang.Integer: int intValue()>();

        $r52 = interfaceinvoke r83.<android.database.Cursor: java.lang.String getString(int)>($i34);

        z12 = staticinvoke <com.android.internal.telephony.BlockChecker: boolean isBlocked(android.content.Context,java.lang.String,android.os.Bundle)>($r47, $r52, null);

     label32:
        i41 = i44;

        z10 = z12;

        goto label20;

     label33:
        $r37 = newarray (java.lang.Object)[2];

        $i30 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: int getIndexOffset()>();

        $i31 = $i30 + i43;

        $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i31);

        $r37[0] = $r38;

        $r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r37[1] = $r39;

        $r40 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("processMessagePart: invalid seqNumber = %d, messageCount = %d", $r37);

        $l32 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,long)>($r40, $l32);

     label34:
        goto label20;

     label35:
        r79 = r83;

        r80 = r83;

     label36:
        r2 = new java.lang.StringBuilder;

     label37:
        r79 = r83;

        r80 = r83;

     label38:
        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

     label39:
        r79 = r83;

        r80 = r83;

     label40:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processMessagePart: all ");

     label41:
        r79 = r83;

        r80 = r83;

     label42:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

     label43:
        r79 = r83;

        r80 = r83;

     label44:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" segments  received. refNumber: ");

     label45:
        r79 = r83;

        r80 = r83;

     label46:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r81);

     label47:
        r79 = r83;

        r80 = r83;

     label48:
        $r8 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $l4 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String,long)>($r8, $l4);

     label49:
        if r83 == null goto label50;

        interfaceinvoke r83.<android.database.Cursor: void close()>();

     label50:
        r77 = r87;

        r78 = r88;

     label51:
        if i41 != 2948 goto label52;

        z13 = 1;

        goto label53;

     label52:
        z13 = 0;

     label53:
        r93 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getFormat()>();

        if z13 != 0 goto label54;

        $r32 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics>;

        $r31 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $i24 = virtualinvoke $r31.<com.android.internal.telephony.Phone: int getPhoneId()>();

        $z8 = r0.<com.android.internal.telephony.InboundSmsHandler: boolean mLastSmsWasInjected>;

        $l25 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke $r32.<com.android.internal.telephony.metrics.TelephonyMetrics: void writeIncomingSmsSession(int,boolean,java.lang.String,long[],boolean,long)>($i24, $z8, r93, r78, z10, $l25);

     label54:
        r94 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r77);

        $i5 = interfaceinvoke r94.<java.util.List: int size()>();

        if $i5 == 0 goto label71;

        $z0 = interfaceinvoke r94.<java.util.List: boolean contains(java.lang.Object)>(null);

        if $z0 == 0 goto label55;

        goto label71;

     label55:
        $r11 = new java.io.ByteArrayOutputStream;

        specialinvoke $r11.<java.io.ByteArrayOutputStream: void <init>()>();

        if z13 == 0 goto label60;

        i48 = lengthof r77;

        i49 = 0;

     label56:
        if i49 >= i48 goto label59;

        r97 = r77[i49];

        if r93 != "3gpp" goto label58;

        r98 = staticinvoke <android.telephony.SmsMessage: android.telephony.SmsMessage createFromPdu(byte[],java.lang.String)>(r97, "3gpp");

        if r98 == null goto label57;

        r97 = virtualinvoke r98.<android.telephony.SmsMessage: byte[] getUserData()>();

        goto label58;

     label57:
        $l21 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,long)>("processMessagePart: SmsMessage.createFromPdu returned null", $l21);

        $r30 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics>;

        $r29 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $i22 = virtualinvoke $r29.<com.android.internal.telephony.Phone: int getPhoneId()>();

        $z7 = r0.<com.android.internal.telephony.InboundSmsHandler: boolean mLastSmsWasInjected>;

        $l23 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke $r30.<com.android.internal.telephony.metrics.TelephonyMetrics: void writeIncomingWapPush(int,boolean,java.lang.String,long[],boolean,long)>($i22, $z7, "3gpp", r78, 0, $l23);

        return 0;

     label58:
        $i20 = lengthof r97;

        virtualinvoke $r11.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r97, 0, $i20);

        i49 = i49 + 1;

        goto label56;

     label59:
        goto label60;

     label60:
        $r12 = new com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver;

        specialinvoke $r12.<com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver: void <init>(com.android.internal.telephony.InboundSmsHandler,com.android.internal.telephony.InboundSmsTracker)>(r0, r74);

        $r13 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.UserManager mUserManager>;

        $z1 = virtualinvoke $r13.<android.os.UserManager: boolean isUserUnlocked()>();

        if $z1 != 0 goto label63;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processMessagePart: !isUserUnlocked; calling processMessagePartWithUserLocked. Port: ");

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i41);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $l19 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String,long)>($r27, $l19);

        if z13 == 0 goto label61;

        r101 = newarray (byte[])[1];

        $r28 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        r101[0] = $r28;

        r102 = r101;

        goto label62;

     label61:
        r102 = r77;

     label62:
        $z6 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean processMessagePartWithUserLocked(com.android.internal.telephony.InboundSmsTracker,byte[][],int,com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver)>(r74, r102, i41, $r12);

        return $z6;

     label63:
        if z13 == 0 goto label68;

        $r16 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.WapPushOverSms mWapPush>;

        $r17 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        $i11 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: int getSubId()>();

        $l12 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        i50 = virtualinvoke $r16.<com.android.internal.telephony.WapPushOverSms: int dispatchWapPdu(byte[],android.content.BroadcastReceiver,com.android.internal.telephony.InboundSmsHandler,java.lang.String,int,long)>($r17, $r12, r0, r1, $i11, $l12);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processMessagePart: dispatchWapPdu() returned ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i50);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $l13 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String,long)>($r19, $l13);

        if i50 == -1 goto label65;

        if i50 != 1 goto label64;

        goto label65;

     label64:
        $r25 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics>;

        $r24 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $i17 = virtualinvoke $r24.<com.android.internal.telephony.Phone: int getPhoneId()>();

        $z5 = r0.<com.android.internal.telephony.InboundSmsHandler: boolean mLastSmsWasInjected>;

        $l18 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke $r25.<com.android.internal.telephony.metrics.TelephonyMetrics: void writeIncomingWapPush(int,boolean,java.lang.String,long[],boolean,long)>($i17, $z5, r93, r78, 0, $l18);

        goto label66;

     label65:
        $r21 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics>;

        $r20 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $i14 = virtualinvoke $r20.<com.android.internal.telephony.Phone: int getPhoneId()>();

        $z4 = r0.<com.android.internal.telephony.InboundSmsHandler: boolean mLastSmsWasInjected>;

        $l15 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke $r21.<com.android.internal.telephony.metrics.TelephonyMetrics: void writeIncomingWapPush(int,boolean,java.lang.String,long[],boolean,long)>($i14, $z4, r93, r78, 1, $l15);

     label66:
        if i50 != -1 goto label67;

        return 1;

     label67:
        $r22 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getDeleteWhere()>();

        $r23 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: java.lang.String[] getDeleteWhereArgs()>();

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[],int)>($r22, $r23, 2);

        $l16 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,long)>("processMessagePart: returning false as the ordered broadcast for WAP push was not sent", $l16);

        return 0;

     label68:
        if z10 == 0 goto label69;

        $r14 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: java.lang.String getDeleteWhere()>();

        $r15 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: java.lang.String[] getDeleteWhereArgs()>();

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void deleteFromRawTable(java.lang.String,java.lang.String[],int)>($r14, $r15, 1);

        $l10 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String,long)>("processMessagePart: returning false as the phone number is blocked", $l10);

        return 0;

     label69:
        $z2 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean filterSms(byte[][],int,com.android.internal.telephony.InboundSmsTracker,com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver,boolean)>(r77, i41, r74, $r12, 1);

        if $z2 != 0 goto label70;

        $z3 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: boolean isClass0()>();

        $i8 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: int getSubId()>();

        $l9 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void dispatchSmsDeliveryIntent(byte[][],java.lang.String,int,com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver,boolean,int,long)>(r77, r93, i41, $r12, $z3, $i8, $l9);

        goto label70;

     label70:
        return 1;

     label71:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processMessagePart: returning false due to ");

        $i6 = interfaceinvoke r94.<java.util.List: int size()>();

        if $i6 != 0 goto label72;

        r105 = "pduList.size() == 0";

        goto label73;

     label72:
        r105 = "pduList.contains(null)";

     label73:
        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r105);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $l7 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void logeWithLocalLog(java.lang.String,long)>($r10, $l7);

        return 0;

     label74:
        $r72 := @caughtexception;

        r85 = $r72;

        r83 = r79;

        goto label80;

     label75:
        $r68 := @caughtexception;

        r86 = $r68;

        r83 = r80;

     label76:
        r106 = new java.lang.StringBuilder;

        specialinvoke r106.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processMessagePart: Can\'t access multipart SMS database, id: ");

        $l40 = virtualinvoke r74.<com.android.internal.telephony.InboundSmsTracker: long getMessageId()>();

        virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l40);

        $r69 = virtualinvoke r106.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>($r69, r86);

     label77:
        if r83 == null goto label78;

        interfaceinvoke r83.<android.database.Cursor: void close()>();

     label78:
        return 0;

     label79:
        $r70 := @caughtexception;

        r85 = $r70;

     label80:
        if r83 == null goto label81;

        interfaceinvoke r83.<android.database.Cursor: void close()>();

     label81:
        throw r85;

        catch android.database.SQLException from label03 to label04 with label75;
        catch java.lang.Throwable from label03 to label04 with label74;
        catch android.database.SQLException from label05 to label06 with label75;
        catch java.lang.Throwable from label05 to label06 with label74;
        catch android.database.SQLException from label07 to label08 with label75;
        catch java.lang.Throwable from label07 to label08 with label74;
        catch android.database.SQLException from label09 to label10 with label75;
        catch java.lang.Throwable from label09 to label10 with label74;
        catch android.database.SQLException from label11 to label12 with label15;
        catch java.lang.Throwable from label11 to label12 with label14;
        catch android.database.SQLException from label17 to label18 with label75;
        catch java.lang.Throwable from label17 to label18 with label74;
        catch android.database.SQLException from label19 to label20 with label75;
        catch java.lang.Throwable from label19 to label20 with label74;
        catch android.database.SQLException from label21 to label22 with label75;
        catch java.lang.Throwable from label21 to label22 with label74;
        catch android.database.SQLException from label23 to label24 with label15;
        catch java.lang.Throwable from label23 to label24 with label14;
        catch android.database.SQLException from label25 to label26 with label15;
        catch java.lang.Throwable from label25 to label26 with label14;
        catch android.database.SQLException from label27 to label28 with label15;
        catch java.lang.Throwable from label27 to label28 with label14;
        catch android.database.SQLException from label29 to label30 with label15;
        catch java.lang.Throwable from label29 to label30 with label14;
        catch android.database.SQLException from label31 to label32 with label15;
        catch java.lang.Throwable from label31 to label32 with label14;
        catch android.database.SQLException from label33 to label34 with label15;
        catch java.lang.Throwable from label33 to label34 with label14;
        catch android.database.SQLException from label36 to label37 with label75;
        catch java.lang.Throwable from label36 to label37 with label74;
        catch android.database.SQLException from label38 to label39 with label75;
        catch java.lang.Throwable from label38 to label39 with label74;
        catch android.database.SQLException from label40 to label41 with label75;
        catch java.lang.Throwable from label40 to label41 with label74;
        catch android.database.SQLException from label42 to label43 with label75;
        catch java.lang.Throwable from label42 to label43 with label74;
        catch android.database.SQLException from label44 to label45 with label75;
        catch java.lang.Throwable from label44 to label45 with label74;
        catch android.database.SQLException from label46 to label47 with label75;
        catch java.lang.Throwable from label46 to label47 with label74;
        catch android.database.SQLException from label48 to label49 with label75;
        catch java.lang.Throwable from label48 to label49 with label74;
        catch java.lang.Throwable from label76 to label77 with label79;
    }

    private boolean processMessagePartWithUserLocked(com.android.internal.telephony.InboundSmsTracker, byte[][], int, com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        byte[][] r2;
        int i0;
        com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver r3;
        boolean $z0, $z1;
        byte[] $r4;
        com.android.internal.telephony.WapPushOverSms $r5;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        r2 := @parameter1: byte[][];

        i0 := @parameter2: int;

        r3 := @parameter3: com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver;

        if i0 != 2948 goto label1;

        $r5 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.WapPushOverSms mWapPush>;

        $r4 = r2[0];

        $z1 = virtualinvoke $r5.<com.android.internal.telephony.WapPushOverSms: boolean isWapPushForMms(byte[],com.android.internal.telephony.InboundSmsHandler)>($r4, r0);

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void showNewMessageNotification()>();

        return 0;

     label1:
        if i0 != -1 goto label3;

        $z0 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean filterSms(byte[][],int,com.android.internal.telephony.InboundSmsTracker,com.android.internal.telephony.InboundSmsHandler$SmsBroadcastReceiver,boolean)>(r2, i0, r1, r3, 0);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void showNewMessageNotification()>();

        return 0;

     label3:
        return 0;
    }

    static void registerNewMessageNotificationActionHandler(android.content.Context)
    {
        android.content.Context r0;
        android.content.IntentFilter $r2;
        java.lang.String $r3;
        com.android.internal.telephony.InboundSmsHandler$NewMessageNotificationActionReceiver $r4;

        r0 := @parameter0: android.content.Context;

        $r2 = new android.content.IntentFilter;

        specialinvoke $r2.<android.content.IntentFilter: void <init>()>();

        $r3 = <com.android.internal.telephony.InboundSmsHandler: java.lang.String ACTION_OPEN_SMS_APP>;

        virtualinvoke $r2.<android.content.IntentFilter: void addAction(java.lang.String)>($r3);

        $r4 = new com.android.internal.telephony.InboundSmsHandler$NewMessageNotificationActionReceiver;

        specialinvoke $r4.<com.android.internal.telephony.InboundSmsHandler$NewMessageNotificationActionReceiver: void <init>(com.android.internal.telephony.InboundSmsHandler$1)>(null);

        virtualinvoke r0.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r4, $r2);

        return;
    }

    private static java.lang.String replaceFormFeeds(java.lang.String)
    {
        java.lang.String r0, r1;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        r1 = "";

        goto label2;

     label1:
        r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>(12, 10);

     label2:
        return r1;
    }

    private void setWakeLockTimeout(int)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        int i0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        i0 := @parameter0: int;

        r0.<com.android.internal.telephony.InboundSmsHandler: int mWakeLockTimeout> = i0;

        return;
    }

    private void showNewMessageNotification()
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.app.Notification$Builder r1, $r5, $r7, $r8, $r9, $r10, $r13, $r16, $r17;
        boolean $z0;
        android.content.Intent $r2;
        java.lang.String $r3, $r12, $r15;
        android.content.Context $r4, $r6, $r11, $r14, $r18;
        java.lang.Object $r19;
        android.app.Notification $r20;
        android.app.PendingIntent r21;
        android.app.NotificationManager r22;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>("Show new message notification.");

        $r4 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r2 = new android.content.Intent;

        $r3 = <com.android.internal.telephony.InboundSmsHandler: java.lang.String ACTION_OPEN_SMS_APP>;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>($r3);

        r21 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)>($r4, 0, $r2, 1140850688);

        $r5 = new android.app.Notification$Builder;

        $r6 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        specialinvoke $r5.<android.app.Notification$Builder: void <init>(android.content.Context)>($r6);

        $r7 = virtualinvoke $r5.<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>(17301646);

        $r8 = virtualinvoke $r7.<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)>(1);

        $r9 = virtualinvoke $r8.<android.app.Notification$Builder: android.app.Notification$Builder setVisibility(int)>(1);

        $r10 = virtualinvoke $r9.<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)>(-1);

        $r11 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r12 = virtualinvoke $r11.<android.content.Context: java.lang.String getString(int)>(17040663);

        $r13 = virtualinvoke $r10.<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>($r12);

        $r14 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: java.lang.String getString(int)>(17040662);

        $r16 = virtualinvoke $r13.<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>($r15);

        $r17 = virtualinvoke $r16.<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>(r21);

        r1 = virtualinvoke $r17.<android.app.Notification$Builder: android.app.Notification$Builder setChannelId(java.lang.String)>("sms");

        $r18 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r19 = virtualinvoke $r18.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("notification");

        r22 = (android.app.NotificationManager) $r19;

        $r20 = virtualinvoke r1.<android.app.Notification$Builder: android.app.Notification build()>();

        virtualinvoke r22.<android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>("InboundSmsHandler", 1, $r20);

        return;
    }

    private int toDigit(char)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        char c0;
        int i1;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        c0 := @parameter0: char;

        i1 = staticinvoke <java.lang.Character: int digit(char,int)>(c0, 16);

        if i1 != -1 goto label1;

        return 0;

     label1:
        return i1;
    }

    private android.net.Uri writeInboxMessage(android.content.Intent)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        int i0, $i2, i3;
        long l1;
        android.content.Context $r1;
        android.content.ContentResolver $r2;
        android.net.Uri $r3, r10;
        android.telephony.SmsMessage $r4;
        java.lang.Throwable $r5;
        java.lang.Exception $r6;
        android.content.Intent r7;
        android.telephony.SmsMessage[] r8;
        android.content.ContentValues r9;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r7 := @parameter0: android.content.Intent;

        r8 = staticinvoke <android.provider.Telephony$Sms$Intents: android.telephony.SmsMessage[] getMessagesFromIntent(android.content.Intent)>(r7);

        if r8 == null goto label12;

        $i2 = lengthof r8;

        if $i2 >= 1 goto label01;

        goto label12;

     label01:
        i0 = lengthof r8;

        i3 = 0;

     label02:
        if i3 >= i0 goto label04;

        $r4 = r8[i3];

        if $r4 != null goto label03;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("Can\u2019t write null SmsMessage");

        return null;

     label03:
        i3 = i3 + 1;

        goto label02;

     label04:
        r9 = staticinvoke <com.android.internal.telephony.InboundSmsHandler: android.content.ContentValues parseSmsMessage(android.telephony.SmsMessage[])>(r8);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = <android.provider.Telephony$Sms$Inbox: android.net.Uri CONTENT_URI>;

        r10 = virtualinvoke $r2.<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>($r3, r9);

     label06:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return r10;

     label07:
        $r5 := @caughtexception;

        goto label11;

     label08:
        $r6 := @caughtexception;

     label09:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,java.lang.Throwable)>("Failed to persist inbox message", $r6);

     label10:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return null;

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r5;

     label12:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>("Failed to parse SMS pdu");

        return null;

        catch java.lang.Exception from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }

    protected abstract void acknowledgeLastIncomingSms(boolean, int, android.os.Message);

    protected int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker, boolean)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.InboundSmsTracker r1;
        boolean z0;
        int i0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: com.android.internal.telephony.InboundSmsTracker;

        z0 := @parameter1: boolean;

        i0 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTable(com.android.internal.telephony.InboundSmsTracker,boolean)>(r1, z0);

        if i0 == 1 goto label2;

        if i0 == 5 goto label1;

        return i0;

     label1:
        return 1;

     label2:
        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void sendMessage(int,java.lang.Object)>(2, r1);

        return 1;
    }

    protected byte[] decodeHexString(java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r3;
        byte[] r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i8;
        byte $b7;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label4;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $i1 = $i0 % 2;

        if $i1 != 1 goto label1;

        goto label4;

     label1:
        $i2 = virtualinvoke r1.<java.lang.String: int length()>();

        $i3 = $i2 / 2;

        r2 = newarray (byte)[$i3];

        i8 = 0;

     label2:
        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        if i8 >= $i4 goto label3;

        $i6 = i8 / 2;

        $i5 = i8 + 2;

        $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i8, $i5);

        $b7 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: byte hexToByte(java.lang.String)>($r3);

        r2[$i6] = $b7;

        i8 = i8 + 2;

        goto label2;

     label3:
        return r2;

     label4:
        return null;
    }

    public void dispatchIntent(android.content.Intent, java.lang.String, java.lang.String, android.os.Bundle, android.content.BroadcastReceiver, android.os.UserHandle, int)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, r2, $r13, $r21;
        android.os.Bundle r3;
        android.content.BroadcastReceiver r4, r40;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6;
        android.os.Handler r6, $r15;
        com.android.internal.telephony.Phone $r9;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i15;
        android.os.UserHandle $r10, $r18, $r22, $r25, r33, r36, r38;
        android.content.Context $r11, $r12, $r14, $r19, $r20, r39;
        android.os.UserManager $r16, $r23, $r28;
        java.util.ArrayList $r17;
        java.lang.Object $r24, $r27;
        int[] $r26, r37;
        android.content.pm.PackageManager$NameNotFoundException $r29, $r30, $r31;
        android.content.Intent r32;
        java.util.List r34;
        java.util.Iterator r35;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r32 := @parameter0: android.content.Intent;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Bundle;

        r4 := @parameter4: android.content.BroadcastReceiver;

        r33 := @parameter5: android.os.UserHandle;

        i13 := @parameter6: int;

        virtualinvoke r32.<android.content.Intent: android.content.Intent addFlags(int)>(134217728);

        virtualinvoke r32.<android.content.Intent: java.lang.String getAction()>();

        $r9 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $i1 = virtualinvoke $r9.<com.android.internal.telephony.Phone: int getPhoneId()>();

        staticinvoke <android.telephony.SubscriptionManager: void putPhoneIdAndSubIdExtra(android.content.Intent,int)>(r32, $i1);

        $z1 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>(i13);

        if $z1 == 0 goto label01;

        staticinvoke <android.telephony.SubscriptionManager: void putSubscriptionIdExtra(android.content.Intent,int)>(r32, i13);

        goto label01;

     label01:
        $r10 = <android.os.UserHandle: android.os.UserHandle ALL>;

        z0 = virtualinvoke r33.<android.os.UserHandle: boolean equals(java.lang.Object)>($r10);

        if z0 == 0 goto label20;

        $r16 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.UserManager mUserManager>;

        r34 = virtualinvoke $r16.<android.os.UserManager: java.util.List getUserHandles(boolean)>(0);

        $r17 = new java.util.ArrayList;

        specialinvoke $r17.<java.util.ArrayList: void <init>()>();

        r35 = interfaceinvoke r34.<java.util.List: java.util.Iterator iterator()>();

     label02:
        $z2 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label04;

        $r27 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (android.os.UserHandle) $r27;

        $r28 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.UserManager mUserManager>;

        $z6 = virtualinvoke $r28.<android.os.UserManager: boolean isUserRunning(android.os.UserHandle)>(r36);

        if $z6 == 0 goto label03;

        interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r36);

     label03:
        goto label02;

     label04:
        $z3 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label05;

        $r26 = newarray (int)[1];

        $i12 = virtualinvoke r33.<android.os.UserHandle: int getIdentifier()>();

        $r26[0] = $i12;

        r37 = $r26;

        goto label07;

     label05:
        $i2 = interfaceinvoke $r17.<java.util.List: int size()>();

        r37 = newarray (int)[$i2];

        i14 = 0;

     label06:
        $i3 = interfaceinvoke $r17.<java.util.List: int size()>();

        if i14 >= $i3 goto label07;

        $r24 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i14);

        $r25 = (android.os.UserHandle) $r24;

        $i11 = virtualinvoke $r25.<android.os.UserHandle: int getIdentifier()>();

        r37[i14] = $i11;

        i14 = i14 + 1;

        goto label06;

     label07:
        $i4 = lengthof r37;

        i15 = $i4 - 1;

     label08:
        if i15 < 0 goto label19;

        $i5 = r37[i15];

        r38 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i5);

        $i6 = r37[i15];

        $r18 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        $i7 = virtualinvoke $r18.<android.os.UserHandle: int getIdentifier()>();

        if $i6 == $i7 goto label10;

        $z4 = specialinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_sms", r38);

        if $z4 == 0 goto label09;

        goto label18;

     label09:
        $r23 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.UserManager mUserManager>;

        $i10 = r37[i15];

        $z5 = virtualinvoke $r23.<android.os.UserManager: boolean isManagedProfile(int)>($i10);

        if $z5 == 0 goto label10;

        goto label18;

     label10:
        $r20 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r19 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r21 = virtualinvoke $r19.<android.content.Context: java.lang.String getPackageName()>();

        r39 = virtualinvoke $r20.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>($r21, 0, r38);

        $i8 = r37[i15];

        $r22 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        $i9 = virtualinvoke $r22.<android.os.UserHandle: int getIdentifier()>();

        if $i8 != $i9 goto label12;

     label11:
        r40 = r4;

        goto label13;

     label12:
        r40 = null;

     label13:
        r6 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: android.os.Handler getHandler()>();

     label14:
        virtualinvoke r39.<android.content.Context: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)>(r32, -1, r1, r2, r40, r6, null, null, r3);

     label15:
        goto label18;

     label16:
        $r30 := @caughtexception;

        goto label18;

     label17:
        $r31 := @caughtexception;

     label18:
        i15 = i15 + -1;

        goto label08;

     label19:
        goto label23;

     label20:
        $r12 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r11 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        $r13 = virtualinvoke $r11.<android.content.Context: java.lang.String getPackageName()>();

        $r14 = virtualinvoke $r12.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>($r13, 0, r33);

        $r15 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: android.os.Handler getHandler()>();

        virtualinvoke $r14.<android.content.Context: void sendOrderedBroadcast(android.content.Intent,int,java.lang.String,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,java.lang.String,android.os.Bundle,android.os.Bundle)>(r32, -1, r1, r2, r4, $r15, null, null, r3);

     label21:
        goto label23;

     label22:
        $r29 := @caughtexception;

     label23:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label10 to label11 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label13 to label14 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label14 to label15 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label20 to label21 with label22;
    }

    protected abstract int dispatchMessageRadioSpecific(com.android.internal.telephony.SmsMessageBase);

    protected int dispatchNormalMessage(com.android.internal.telephony.SmsMessageBase)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        int i0, i1, $i2, $i3, $i4, i5, i7, i9, $i11;
        com.android.internal.telephony.Phone $r1, $r14;
        com.android.internal.telephony.SmsHeader$PortAddrs $r2, $r3, r18;
        java.lang.StringBuilder $r4;
        java.lang.String $r7, $r11, r22, r23, r24, $r29, r33, r34, r35;
        com.android.internal.telephony.SmsHeader$ConcatRef $r8, r17;
        com.android.internal.telephony.TelephonyComponentFactory $r9, r19, $r27, r30;
        java.lang.Class $r10, $r28;
        com.android.internal.telephony.SmsConstants$MessageClass $r12, $r13, $r36, $r37;
        com.android.internal.telephony.SmsMessageBase r15;
        com.android.internal.telephony.SmsHeader r16;
        android.content.Context r20, r31;
        byte[] r21, r32;
        long l6, l10;
        boolean z0, z1, z2, z3, z4;
        com.android.internal.telephony.InboundSmsTracker r25;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r15 := @parameter0: com.android.internal.telephony.SmsMessageBase;

        r16 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()>();

        if r16 == null goto label06;

        $r8 = r16.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$ConcatRef concatRef>;

        if $r8 != null goto label01;

        goto label06;

     label01:
        r17 = r16.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$ConcatRef concatRef>;

        r18 = r16.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$PortAddrs portAddrs>;

        if r18 == null goto label02;

        i5 = r18.<com.android.internal.telephony.SmsHeader$PortAddrs: int destPort>;

        goto label03;

     label02:
        i5 = -1;

     label03:
        $r9 = staticinvoke <com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory getInstance()>();

        $r10 = class "Lcom/android/internal/telephony/InboundSmsTracker;";

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        r19 = virtualinvoke $r9.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory inject(java.lang.String)>($r11);

        r20 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        r21 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>();

        l6 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>();

        z0 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean is3gpp2()>();

        r22 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()>();

        r23 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()>();

        i7 = r17.<com.android.internal.telephony.SmsHeader$ConcatRef: int refNumber>;

        i0 = r17.<com.android.internal.telephony.SmsHeader$ConcatRef: int seqNumber>;

        i1 = r17.<com.android.internal.telephony.SmsHeader$ConcatRef: int msgCount>;

        r24 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()>();

        $r12 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()>();

        $r13 = <com.android.internal.telephony.SmsConstants$MessageClass: com.android.internal.telephony.SmsConstants$MessageClass CLASS_0>;

        if $r12 != $r13 goto label04;

        z1 = 1;

        goto label05;

     label04:
        z1 = 0;

     label05:
        $r14 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $i4 = virtualinvoke $r14.<com.android.internal.telephony.Phone: int getSubId()>();

        r25 = virtualinvoke r19.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.InboundSmsTracker makeInboundSmsTracker(android.content.Context,byte[],long,int,boolean,java.lang.String,java.lang.String,int,int,int,boolean,java.lang.String,boolean,int)>(r20, r21, l6, i5, z0, r22, r23, i7, i0, i1, 0, r24, z1, $i4);

        goto label10;

     label06:
        i9 = -1;

        if r16 == null goto label07;

        i9 = -1;

        $r2 = r16.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$PortAddrs portAddrs>;

        if $r2 == null goto label07;

        $r3 = r16.<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader$PortAddrs portAddrs>;

        i9 = $r3.<com.android.internal.telephony.SmsHeader$PortAddrs: int destPort>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("destination port: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r7);

     label07:
        $r27 = staticinvoke <com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory getInstance()>();

        $r28 = class "Lcom/android/internal/telephony/InboundSmsTracker;";

        $r29 = virtualinvoke $r28.<java.lang.Class: java.lang.String getName()>();

        r30 = virtualinvoke $r27.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory inject(java.lang.String)>($r29);

        r31 = r0.<com.android.internal.telephony.InboundSmsHandler: android.content.Context mContext>;

        r32 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>();

        l10 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>();

        z2 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: boolean is3gpp2()>();

        r33 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()>();

        r34 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()>();

        r35 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()>();

        $r36 = virtualinvoke r15.<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsConstants$MessageClass getMessageClass()>();

        $r37 = <com.android.internal.telephony.SmsConstants$MessageClass: com.android.internal.telephony.SmsConstants$MessageClass CLASS_0>;

        if $r36 != $r37 goto label08;

        z3 = 1;

        goto label09;

     label08:
        z3 = 0;

     label09:
        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        $i2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: int getSubId()>();

        r25 = virtualinvoke r30.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.InboundSmsTracker makeInboundSmsTracker(android.content.Context,byte[],long,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,boolean,int)>(r31, r32, l10, i9, z2, 0, r33, r34, r35, z3, $i2);

     label10:
        $i11 = virtualinvoke r25.<com.android.internal.telephony.InboundSmsTracker: int getDestPort()>();

        if $i11 != -1 goto label11;

        z4 = 1;

        goto label12;

     label11:
        z4 = 0;

     label12:
        $i3 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: int addTrackerToRawTableAndSendMessage(com.android.internal.telephony.InboundSmsTracker,boolean)>(r25, z4);

        return $i3;
    }

    public void dispose()
    {
        com.android.internal.telephony.InboundSmsHandler r0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void quit()>();

        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.io.FileDescriptor r1;
        java.lang.String[] r2;
        com.android.internal.telephony.IndentingPrintWriter $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r5, $r8;
        com.android.internal.telephony.LocalLog $r11, $r14;
        java.io.PrintWriter r17;
        com.android.internal.telephony.CellBroadcastServiceManager r20;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.io.FileDescriptor;

        r17 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r3 = new com.android.internal.telephony.IndentingPrintWriter;

        specialinvoke $r3.<com.android.internal.telephony.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r17, "  ");

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" extends StateMachine:");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r8);

        virtualinvoke $r3.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter increaseIndent()>();

        specialinvoke r0.<com.android.internal.telephony.StateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, $r3, r2);

        r20 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.CellBroadcastServiceManager mCellBroadcastServiceManager>;

        if r20 == null goto label1;

        virtualinvoke r20.<com.android.internal.telephony.CellBroadcastServiceManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, $r3, r2);

     label1:
        virtualinvoke $r3.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>("mLocalLog:");

        virtualinvoke $r3.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter increaseIndent()>();

        $r11 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.LocalLog mLocalLog>;

        virtualinvoke $r11.<com.android.internal.telephony.LocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, $r3, r2);

        virtualinvoke $r3.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>("mCarrierServiceLocalLog:");

        virtualinvoke $r3.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter increaseIndent()>();

        $r14 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.LocalLog mCarrierServiceLocalLog>;

        virtualinvoke $r14.<com.android.internal.telephony.LocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, $r3, r2);

        virtualinvoke $r3.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    public com.android.internal.telephony.Phone getPhone()
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.Phone $r1;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.Phone mPhone>;

        return $r1;
    }

    public android.os.PowerManager$WakeLock getWakeLock()
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock>;

        return $r1;
    }

    public int getWakeLockTimeout()
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        int $i0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        $i0 = r0.<com.android.internal.telephony.InboundSmsHandler: int mWakeLockTimeout>;

        return $i0;
    }

    protected java.lang.String getWhatToString(int)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String r5;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 1: goto label09;
            case 2: goto label08;
            case 3: goto label07;
            case 4: goto label06;
            case 5: goto label05;
            case 6: goto label04;
            case 7: goto label03;
            case 8: goto label02;
            default: goto label01;
        };

     label01:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNKNOWN EVENT ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label10;

     label02:
        r5 = "EVENT_UPDATE_TRACKER";

        goto label10;

     label03:
        r5 = "EVENT_INJECT_SMS";

        goto label10;

     label04:
        r5 = "EVENT_START_ACCEPTING_SMS";

        goto label10;

     label05:
        r5 = "EVENT_RELEASE_WAKELOCK";

        goto label10;

     label06:
        r5 = "EVENT_RETURN_TO_IDLE";

        goto label10;

     label07:
        r5 = "EVENT_BROADCAST_COMPLETE";

        goto label10;

     label08:
        r5 = "EVENT_BROADCAST_SMS";

        goto label10;

     label09:
        r5 = "EVENT_NEW_SMS";

     label10:
        return r5;
    }

    protected abstract boolean is3gpp2();

    protected void log(java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    protected void log(java.lang.String, long)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r7;
        long l0;
        java.lang.StringBuilder $r3;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", id: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>($r7);

        return;
    }

    protected void logWithLocalLog(java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1;
        com.android.internal.telephony.LocalLog $r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String)>(r1);

        $r2 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.LocalLog mLocalLog>;

        virtualinvoke $r2.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r1);

        return;
    }

    protected void logWithLocalLog(java.lang.String, long)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r8;
        long l0;
        com.android.internal.telephony.LocalLog r2;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void log(java.lang.String,long)>(r1, l0);

        r2 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.LocalLog mLocalLog>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", id: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>($r8);

        return;
    }

    protected void loge(java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    protected void loge(java.lang.String, long)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r7;
        long l0;
        java.lang.StringBuilder $r3;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", id: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>($r7);

        return;
    }

    protected void loge(java.lang.String, java.lang.Throwable)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r3;
        java.lang.Throwable r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: java.lang.String getName()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    protected void logeWithLocalLog(java.lang.String)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1;
        com.android.internal.telephony.LocalLog $r2;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String)>(r1);

        $r2 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.LocalLog mLocalLog>;

        virtualinvoke $r2.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r1);

        return;
    }

    protected void logeWithLocalLog(java.lang.String, long)
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        java.lang.String r1, $r8;
        long l0;
        com.android.internal.telephony.LocalLog r2;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        virtualinvoke r0.<com.android.internal.telephony.InboundSmsHandler: void loge(java.lang.String,long)>(r1, l0);

        r2 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.LocalLog mLocalLog>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", id: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>($r8);

        return;
    }

    protected void onQuitting()
    {
        com.android.internal.telephony.InboundSmsHandler r0;
        com.android.internal.telephony.WapPushOverSms $r1;
        com.android.internal.telephony.CellBroadcastServiceManager $r2;
        android.os.PowerManager$WakeLock $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.InboundSmsHandler;

        $r1 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.WapPushOverSms mWapPush>;

        virtualinvoke $r1.<com.android.internal.telephony.WapPushOverSms: void dispose()>();

        $r2 = r0.<com.android.internal.telephony.InboundSmsHandler: com.android.internal.telephony.CellBroadcastServiceManager mCellBroadcastServiceManager>;

        virtualinvoke $r2.<com.android.internal.telephony.CellBroadcastServiceManager: void disable()>();

     label1:
        $r3 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r3.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label2;

        $r4 = r0.<com.android.internal.telephony.InboundSmsHandler: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void release()>();

        goto label1;

     label2:
        return;
    }
}
