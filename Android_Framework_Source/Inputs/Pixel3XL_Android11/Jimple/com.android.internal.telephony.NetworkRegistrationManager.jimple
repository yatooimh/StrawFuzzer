public class com.android.internal.telephony.NetworkRegistrationManager extends android.os.Handler
{
    private static final int EVENT_BIND_NETWORK_SERVICE;
    private final android.content.BroadcastReceiver mBroadcastReceiver;
    private final java.util.Map mCallbackTable;
    private final android.telephony.CarrierConfigManager mCarrierConfigManager;
    private com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient mDeathRecipient;
    private android.telephony.INetworkService mINetworkService;
    private final com.android.internal.telephony.Phone mPhone;
    private final com.android.internal.telephony.RegistrantList mRegStateChangeRegistrants;
    private com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection mServiceConnection;
    private final java.lang.String mTag;
    private java.lang.String mTargetBindingPackageName;
    private final int mTransportType;

    public void <init>(int, com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        int i0, $i1;
        com.android.internal.telephony.RegistrantList $r1;
        com.android.internal.telephony.NetworkRegistrationManager$1 $r2;
        java.util.Hashtable $r3;
        java.lang.StringBuilder $r4, $r10, $r26;
        com.android.internal.telephony.Phone $r8, r31;
        java.lang.String $r13, $r20, $r28, $r30, r33, r34;
        android.content.Context $r14, $r18, $r19, $r22;
        java.lang.Object $r15;
        android.telephony.CarrierConfigManager $r16;
        android.content.IntentFilter $r17;
        android.os.UserHandle $r21;
        android.content.BroadcastReceiver $r23;
        android.content.pm.PackageManager$NameNotFoundException $r25;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        i0 := @parameter0: int;

        r31 := @parameter1: com.android.internal.telephony.Phone;

        specialinvoke r0.<android.os.Handler: void <init>()>();

        $r1 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r1.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.RegistrantList mRegStateChangeRegistrants> = $r1;

        $r2 = new com.android.internal.telephony.NetworkRegistrationManager$1;

        specialinvoke $r2.<com.android.internal.telephony.NetworkRegistrationManager$1: void <init>(com.android.internal.telephony.NetworkRegistrationManager)>(r0);

        r0.<com.android.internal.telephony.NetworkRegistrationManager: android.content.BroadcastReceiver mBroadcastReceiver> = $r2;

        $r3 = new java.util.Hashtable;

        specialinvoke $r3.<java.util.Hashtable: void <init>()>();

        r0.<com.android.internal.telephony.NetworkRegistrationManager: java.util.Map mCallbackTable> = $r3;

        r0.<com.android.internal.telephony.NetworkRegistrationManager: int mTransportType> = i0;

        r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone> = r31;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        if i0 != 1 goto label1;

        r33 = "C";

        goto label2;

     label1:
        r33 = "I";

     label2:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r8 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        $i1 = virtualinvoke $r8.<com.android.internal.telephony.Phone: int getPhoneId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        r34 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NRM");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.internal.telephony.NetworkRegistrationManager: java.lang.String mTag> = $r13;

        $r14 = virtualinvoke r31.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r15 = virtualinvoke $r14.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        $r16 = (android.telephony.CarrierConfigManager) $r15;

        r0.<com.android.internal.telephony.NetworkRegistrationManager: android.telephony.CarrierConfigManager mCarrierConfigManager> = $r16;

        $r17 = new android.content.IntentFilter;

        specialinvoke $r17.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r17.<android.content.IntentFilter: void addAction(java.lang.String)>("android.telephony.action.CARRIER_CONFIG_CHANGED");

     label3:
        $r18 = virtualinvoke r31.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r19 = virtualinvoke r31.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r20 = virtualinvoke $r19.<android.content.Context: java.lang.String getPackageName()>();

        $r21 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r22 = virtualinvoke $r18.<android.content.Context: android.content.Context createPackageContextAsUser(java.lang.String,int,android.os.UserHandle)>($r20, 0, $r21);

        $r23 = r0.<com.android.internal.telephony.NetworkRegistrationManager: android.content.BroadcastReceiver mBroadcastReceiver>;

        virtualinvoke $r22.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r23, $r17, null, null);

     label4:
        goto label6;

     label5:
        $r25 := @caughtexception;

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package name not found: ");

        $r28 = virtualinvoke $r25.<android.content.pm.PackageManager$NameNotFoundException: java.lang.String getMessage()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        $r30 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void loge(java.lang.String)>($r30);

     label6:
        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void registerForMultiSimConfigChange(android.os.Handler,int,java.lang.Object)>(r0, 1, null);

        virtualinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: boolean sendEmptyMessage(int)>(1);

        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label3 to label4 with label5;
    }

    static com.android.internal.telephony.Phone access$000(com.android.internal.telephony.NetworkRegistrationManager)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        com.android.internal.telephony.Phone $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        $r1 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        return $r1;
    }

    static void access$100(com.android.internal.telephony.NetworkRegistrationManager, java.lang.String)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void logd(java.lang.String)>(r1);

        return;
    }

    static int access$300(com.android.internal.telephony.NetworkRegistrationManager)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        int $i0;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        $i0 = r0.<com.android.internal.telephony.NetworkRegistrationManager: int mTransportType>;

        return $i0;
    }

    static android.telephony.INetworkService access$400(com.android.internal.telephony.NetworkRegistrationManager)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        android.telephony.INetworkService $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        $r1 = r0.<com.android.internal.telephony.NetworkRegistrationManager: android.telephony.INetworkService mINetworkService>;

        return $r1;
    }

    static android.telephony.INetworkService access$402(com.android.internal.telephony.NetworkRegistrationManager, android.telephony.INetworkService)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        android.telephony.INetworkService r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        r1 := @parameter1: android.telephony.INetworkService;

        r0.<com.android.internal.telephony.NetworkRegistrationManager: android.telephony.INetworkService mINetworkService> = r1;

        return r1;
    }

    static com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient access$500(com.android.internal.telephony.NetworkRegistrationManager)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        $r1 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient mDeathRecipient>;

        return $r1;
    }

    static com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient access$502(com.android.internal.telephony.NetworkRegistrationManager, com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        r1 := @parameter1: com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient;

        r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.NetworkRegistrationManager$RegManagerDeathRecipient mDeathRecipient> = r1;

        return r1;
    }

    static java.lang.String access$602(com.android.internal.telephony.NetworkRegistrationManager, java.lang.String)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.internal.telephony.NetworkRegistrationManager: java.lang.String mTargetBindingPackageName> = r1;

        return r1;
    }

    static java.util.Map access$700(com.android.internal.telephony.NetworkRegistrationManager)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        java.util.Map $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        $r1 = r0.<com.android.internal.telephony.NetworkRegistrationManager: java.util.Map mCallbackTable>;

        return $r1;
    }

    static void access$800(com.android.internal.telephony.NetworkRegistrationManager, java.lang.String)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void loge(java.lang.String)>(r1);

        return;
    }

    static com.android.internal.telephony.RegistrantList access$900(com.android.internal.telephony.NetworkRegistrationManager)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        com.android.internal.telephony.RegistrantList $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkRegistrationManager;

        $r1 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.RegistrantList mRegStateChangeRegistrants>;

        return $r1;
    }

    private void bindService(java.lang.String)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        int $i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        android.content.ComponentName $r1;
        android.content.Intent $r2, $r13, r23;
        java.lang.String $r4, $r7, $r9, $r19, r20, r22;
        com.android.internal.telephony.Phone $r10, r21;
        android.content.Context $r11;
        com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection $r12, r26;
        java.lang.Throwable $r15;
        java.lang.StringBuilder $r16, r25;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        r20 := @parameter0: java.lang.String;

        r21 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        if r21 == null goto label10;

        $i0 = virtualinvoke r21.<com.android.internal.telephony.Phone: int getPhoneId()>();

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>($i0);

        if $z0 != 0 goto label01;

        goto label10;

     label01:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r20);

        if $z1 == 0 goto label02;

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void loge(java.lang.String)>("Can\'t find the binding package");

        return;

     label02:
        r22 = specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: java.lang.String getClassName()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r22);

        if $z2 == 0 goto label03;

        $r13 = new android.content.Intent;

        specialinvoke $r13.<android.content.Intent: void <init>(java.lang.String)>("android.telephony.NetworkService");

        r23 = $r13;

        virtualinvoke $r13.<android.content.Intent: android.content.Intent setPackage(java.lang.String)>(r20);

        goto label04;

     label03:
        $r1 = new android.content.ComponentName;

        specialinvoke $r1.<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>(r20, r22);

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.telephony.NetworkService");

        r23 = virtualinvoke $r2.<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>($r1);

     label04:
        r25 = new java.lang.StringBuilder;

        specialinvoke r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to bind ");

        $r4 = specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: java.lang.String getPackageName()>();

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for transport ");

        $i1 = r0.<com.android.internal.telephony.NetworkRegistrationManager: int mTransportType>;

        $r7 = staticinvoke <android.telephony.AccessNetworkConstants: java.lang.String transportTypeToString(int)>($i1);

        virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void logd(java.lang.String)>($r9);

        r26 = new com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection;

        specialinvoke r26.<com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection: void <init>(com.android.internal.telephony.NetworkRegistrationManager,com.android.internal.telephony.NetworkRegistrationManager$1)>(r0, null);

        r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection mServiceConnection> = r26;

        $r10 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        $r11 = virtualinvoke $r10.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r12 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection mServiceConnection>;

        $z3 = virtualinvoke $r11.<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>(r23, $r12, 1);

        if $z3 != 0 goto label06;

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void loge(java.lang.String)>("Cannot bind to the data service.");

     label05:
        return;

     label06:
        r0.<com.android.internal.telephony.NetworkRegistrationManager: java.lang.String mTargetBindingPackageName> = r20;

     label07:
        goto label09;

     label08:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bindService failed ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void loge(java.lang.String)>($r19);

     label09:
        return;

     label10:
        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void loge(java.lang.String)>("can\'t bindService with invalid phone or phoneId.");

        return;

        catch java.lang.SecurityException from label04 to label05 with label08;
        catch java.lang.SecurityException from label06 to label07 with label08;
    }

    private java.lang.String getClassName()
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        java.lang.String r1, $r8, $r13, r14, r16;
        android.os.PersistableBundle r2;
        com.android.internal.telephony.Phone $r3, $r6;
        android.content.Context $r4;
        android.content.res.Resources $r5;
        android.telephony.CarrierConfigManager $r7;
        int $i0, $i1, i2, i3;
        boolean $z0;
        java.lang.StringBuilder $r9;
        java.lang.IllegalStateException $r12;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        i2 = r0.<com.android.internal.telephony.NetworkRegistrationManager: int mTransportType>;

        if i2 == 1 goto label2;

        if i2 != 2 goto label1;

        i3 = 17039970;

        r14 = "carrier_network_service_wlan_class_override_string";

        goto label3;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport type not WWAN or WLAN. type=");

        $i1 = r0.<com.android.internal.telephony.NetworkRegistrationManager: int mTransportType>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label2:
        i3 = 17039974;

        r14 = "carrier_network_service_wwan_class_override_string";

     label3:
        $r3 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(i3);

        $r7 = r0.<com.android.internal.telephony.NetworkRegistrationManager: android.telephony.CarrierConfigManager mCarrierConfigManager>;

        $r6 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r6.<com.android.internal.telephony.Phone: int getSubId()>();

        r2 = virtualinvoke $r7.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i0);

        r16 = r1;

        if r2 == null goto label4;

        r16 = r1;

        $r8 = virtualinvoke r2.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>(r14);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r8);

        if $z0 != 0 goto label4;

        r16 = virtualinvoke r2.<android.os.PersistableBundle: java.lang.String getString(java.lang.String,java.lang.String)>(r14, r1);

     label4:
        return r16;
    }

    private java.lang.String getPackageName()
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        java.lang.String r1, $r8, $r13, r14, r16;
        android.os.PersistableBundle r2;
        com.android.internal.telephony.Phone $r3, $r6;
        android.content.Context $r4;
        android.content.res.Resources $r5;
        android.telephony.CarrierConfigManager $r7;
        int $i0, $i1, i2, i3;
        boolean $z0;
        java.lang.StringBuilder $r9;
        java.lang.IllegalStateException $r12;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        i2 = r0.<com.android.internal.telephony.NetworkRegistrationManager: int mTransportType>;

        if i2 == 1 goto label2;

        if i2 != 2 goto label1;

        i3 = 17039971;

        r14 = "carrier_network_service_wlan_package_override_string";

        goto label3;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Transport type not WWAN or WLAN. type=");

        $i1 = r0.<com.android.internal.telephony.NetworkRegistrationManager: int mTransportType>;

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label2:
        i3 = 17039975;

        r14 = "carrier_network_service_wwan_package_override_string";

     label3:
        $r3 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        r1 = virtualinvoke $r5.<android.content.res.Resources: java.lang.String getString(int)>(i3);

        $r7 = r0.<com.android.internal.telephony.NetworkRegistrationManager: android.telephony.CarrierConfigManager mCarrierConfigManager>;

        $r6 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r6.<com.android.internal.telephony.Phone: int getSubId()>();

        r2 = virtualinvoke $r7.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i0);

        r16 = r1;

        if r2 == null goto label4;

        r16 = r1;

        $r8 = virtualinvoke r2.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>(r14);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r8);

        if $z0 != 0 goto label4;

        r16 = virtualinvoke r2.<android.os.PersistableBundle: java.lang.String getString(java.lang.String,java.lang.String)>(r14, r1);

     label4:
        return r16;
    }

    private void logd(java.lang.String)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.NetworkRegistrationManager: java.lang.String mTag>;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    private void loge(java.lang.String)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.NetworkRegistrationManager: java.lang.String mTag>;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    private void rebindService()
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        java.lang.String r1, $r4, $r9;
        com.android.internal.telephony.Phone $r3;
        int $i0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        r1 = specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: java.lang.String getPackageName()>();

        $r3 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r3.<com.android.internal.telephony.Phone: int getPhoneId()>();

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>($i0);

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.telephony.NetworkRegistrationManager: java.lang.String mTargetBindingPackageName>;

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>(r1, $r4);

        if $z1 == 0 goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Service ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already bound or being bound.");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void logd(java.lang.String)>($r9);

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void unbindService()>();

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void bindService(java.lang.String)>(r1);

        return;
    }

    private void unbindService()
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        com.android.internal.telephony.Phone $r2, $r6;
        android.content.Context $r3;
        com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection $r4, $r15;
        android.os.IBinder $r5;
        boolean $z0;
        android.telephony.INetworkService $r7, r13;
        int $i0;
        android.os.RemoteException $r8;
        java.lang.StringBuilder $r9;
        java.lang.String $r12;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        r13 = r0.<com.android.internal.telephony.NetworkRegistrationManager: android.telephony.INetworkService mINetworkService>;

        if r13 == null goto label4;

        $r5 = interfaceinvoke r13.<android.telephony.INetworkService: android.os.IBinder asBinder()>();

        $z0 = interfaceinvoke $r5.<android.os.IBinder: boolean isBinderAlive()>();

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void logd(java.lang.String)>("unbinding service");

     label1:
        $r7 = r0.<com.android.internal.telephony.NetworkRegistrationManager: android.telephony.INetworkService mINetworkService>;

        $r6 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r6.<com.android.internal.telephony.Phone: int getPhoneId()>();

        interfaceinvoke $r7.<android.telephony.INetworkService: void removeNetworkServiceProvider(int)>($i0);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot remove data service provider. ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void loge(java.lang.String)>($r12);

     label4:
        $r15 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection mServiceConnection>;

        if $r15 == null goto label5;

        $r2 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        $r3 = virtualinvoke $r2.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r4 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection mServiceConnection>;

        virtualinvoke $r3.<android.content.Context: void unbindService(android.content.ServiceConnection)>($r4);

     label5:
        r0.<com.android.internal.telephony.NetworkRegistrationManager: android.telephony.INetworkService mINetworkService> = null;

        r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.NetworkRegistrationManager$NetworkServiceConnection mServiceConnection> = null;

        r0.<com.android.internal.telephony.NetworkRegistrationManager: java.lang.String mTargetBindingPackageName> = null;

        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        android.os.Message r1;
        int $i0, $i1;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        r1 := @parameter0: android.os.Message;

        $i0 = r1.<android.os.Message: int what>;

        if $i0 == 1 goto label1;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unhandled event ");

        $i1 = r1.<android.os.Message: int what>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void loge(java.lang.String)>($r6);

        goto label2;

     label1:
        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void rebindService()>();

     label2:
        return;
    }

    public boolean isServiceConnected()
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        android.telephony.INetworkService r1;
        android.os.IBinder $r2;
        boolean $z0, z1;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        r1 = r0.<com.android.internal.telephony.NetworkRegistrationManager: android.telephony.INetworkService mINetworkService>;

        if r1 == null goto label1;

        $r2 = interfaceinvoke r1.<android.telephony.INetworkService: android.os.IBinder asBinder()>();

        $z0 = interfaceinvoke $r2.<android.os.IBinder: boolean isBinderAlive()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public void registerForNetworkRegistrationInfoChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void logd(java.lang.String)>("registerForNetworkRegistrationInfoChanged");

        $r3 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.RegistrantList mRegStateChangeRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void requestNetworkRegistrationInfo(int, android.os.Message)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        int i0, $i1;
        android.os.Message r1;
        boolean $z0;
        com.android.internal.telephony.NetworkRegistrationManager$NetworkRegStateCallback $r3;
        java.util.Map $r4, $r20;
        com.android.internal.telephony.Phone $r6;
        android.telephony.INetworkService $r7;
        java.lang.StringBuilder $r8, $r16;
        java.lang.String $r11, $r19, r25;
        android.os.AsyncResult $r12, $r22;
        java.lang.IllegalStateException $r13;
        java.lang.Object $r14, $r23;
        android.os.RemoteException $r15;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        if r1 != null goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: boolean isServiceConnected()>();

        if $z0 != 0 goto label4;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("service not connected. Domain = ");

        if i0 != 1 goto label2;

        r25 = "CS";

        goto label3;

     label2:
        r25 = "PS";

     label3:
        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void loge(java.lang.String)>($r11);

        $r12 = new android.os.AsyncResult;

        $r14 = r1.<android.os.Message: java.lang.Object obj>;

        $r13 = new java.lang.IllegalStateException;

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Service not connected.");

        specialinvoke $r12.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>($r14, null, $r13);

        r1.<android.os.Message: java.lang.Object obj> = $r12;

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;

     label4:
        $r3 = new com.android.internal.telephony.NetworkRegistrationManager$NetworkRegStateCallback;

        specialinvoke $r3.<com.android.internal.telephony.NetworkRegistrationManager$NetworkRegStateCallback: void <init>(com.android.internal.telephony.NetworkRegistrationManager,com.android.internal.telephony.NetworkRegistrationManager$1)>(r0, null);

     label5:
        $r4 = r0.<com.android.internal.telephony.NetworkRegistrationManager: java.util.Map mCallbackTable>;

        interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        $r7 = r0.<com.android.internal.telephony.NetworkRegistrationManager: android.telephony.INetworkService mINetworkService>;

        $r6 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.Phone mPhone>;

        $i1 = virtualinvoke $r6.<com.android.internal.telephony.Phone: int getPhoneId()>();

        interfaceinvoke $r7.<android.telephony.INetworkService: void requestNetworkRegistrationInfo(int,int,android.telephony.INetworkServiceCallback)>($i1, i0, $r3);

     label6:
        goto label8;

     label7:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestNetworkRegistrationInfo RemoteException ");

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.NetworkRegistrationManager: void loge(java.lang.String)>($r19);

        $r20 = r0.<com.android.internal.telephony.NetworkRegistrationManager: java.util.Map mCallbackTable>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r3);

        $r22 = new android.os.AsyncResult;

        $r23 = r1.<android.os.Message: java.lang.Object obj>;

        specialinvoke $r22.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>($r23, null, $r15);

        r1.<android.os.Message: java.lang.Object obj> = $r22;

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

     label8:
        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    public void unregisterForNetworkRegistrationInfoChanged(android.os.Handler)
    {
        com.android.internal.telephony.NetworkRegistrationManager r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.NetworkRegistrationManager;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.NetworkRegistrationManager: com.android.internal.telephony.RegistrantList mRegStateChangeRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.NetworkRegistrationManager: int EVENT_BIND_NETWORK_SERVICE> = 1;

        return;
    }
}
