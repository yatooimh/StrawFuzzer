class com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler extends java.lang.Object
{
    private com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo;
    private com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo;
    final com.android.internal.telephony.NetworkScanRequestTracker this$0;

    private void <init>(com.android.internal.telephony.NetworkScanRequestTracker)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker r1;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker;

        r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0> = r1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    void <init>(com.android.internal.telephony.NetworkScanRequestTracker, com.android.internal.telephony.NetworkScanRequestTracker$1)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker r1;
        com.android.internal.telephony.NetworkScanRequestTracker$1 r2;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker;

        r2 := @parameter1: com.android.internal.telephony.NetworkScanRequestTracker$1;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void <init>(com.android.internal.telephony.NetworkScanRequestTracker)>(r1);

        return;
    }

    static void access$100(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler, com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter1: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void doStartScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        return;
    }

    static void access$200(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler, android.os.AsyncResult)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        android.os.AsyncResult r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter1: android.os.AsyncResult;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void startScanDone(android.os.AsyncResult)>(r1);

        return;
    }

    static com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo access$2200(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        $r1 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        return $r1;
    }

    static com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo access$2300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        $r1 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo>;

        return $r1;
    }

    static void access$300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler, android.os.AsyncResult)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        android.os.AsyncResult r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter1: android.os.AsyncResult;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void receiveResult(android.os.AsyncResult)>(r1);

        return;
    }

    static void access$400(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler, int)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        int i0;

        r0 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void doStopScan(int)>(i0);

        return;
    }

    static void access$500(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler, android.os.AsyncResult)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        android.os.AsyncResult r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter1: android.os.AsyncResult;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void stopScanDone(android.os.AsyncResult)>(r1);

        return;
    }

    static void access$600(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler, int)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        int i0;

        r0 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void doInterruptScan(int)>(i0);

        return;
    }

    static void access$700(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler, android.os.AsyncResult)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        android.os.AsyncResult r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter1: android.os.AsyncResult;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void interruptScanDone(android.os.AsyncResult)>(r1);

        return;
    }

    static void access$800(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler, com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo, int, boolean)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo r1;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter1: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void deleteScanAndMayNotify(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,boolean)>(r1, i0, z0);

        return;
    }

    private boolean cacheScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo r1;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo;

        return 0;
    }

    private int commandExceptionErrorToScanError(com.android.internal.telephony.CommandException$Error)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.CommandException$Error r1;
        int[] $r3;
        int $i0, $i1;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter0: com.android.internal.telephony.CommandException$Error;

        $r3 = <com.android.internal.telephony.NetworkScanRequestTracker$2: int[] $SwitchMap$com$android$internal$telephony$CommandException$Error>;

        $i0 = virtualinvoke r1.<com.android.internal.telephony.CommandException$Error: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label9;
            case 2: goto label8;
            case 3: goto label7;
            case 4: goto label6;
            case 5: goto label5;
            case 6: goto label4;
            case 7: goto label3;
            case 8: goto label2;
            default: goto label1;
        };

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("commandExceptionErrorToScanError: Unexpected CommandExceptionError ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", $r7);

        return 10000;

     label2:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "commandExceptionErrorToScanError: DEVICE_IN_USE");

        return 3;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "commandExceptionErrorToScanError: INVALID_ARGUMENTS");

        return 2;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "commandExceptionErrorToScanError: OPERATION_NOT_ALLOWED");

        return 1;

     label5:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "commandExceptionErrorToScanError: MODEM_ERR");

        return 1;

     label6:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "commandExceptionErrorToScanError: INTERNAL_ERR");

        return 1;

     label7:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "commandExceptionErrorToScanError: NO_MEMORY");

        return 1;

     label8:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "commandExceptionErrorToScanError: REQUEST_NOT_SUPPORTED");

        return 4;

     label9:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "commandExceptionErrorToScanError: RADIO_NOT_AVAILABLE");

        return 1;
    }

    private void deleteScanAndMayNotify(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo, int, boolean)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        int i0, $i1, $i2;
        boolean z0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo $r1, $r2, $r3, r7, $r8, $r13;
        com.android.internal.telephony.NetworkScanRequestTracker $r4, $r5, $r11;
        java.lang.Throwable $r6;
        com.android.internal.telephony.Phone $r9;
        com.android.internal.telephony.CommandsInterface $r10;
        android.os.Handler $r12;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r7 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        if $r1 == null goto label7;

        $i1 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1200(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r7);

        $r2 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $i2 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1200(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r2);

        if $i1 != $i2 goto label7;

     label2:
        if z0 == 0 goto label6;

        if i0 != 0 goto label5;

     label3:
        $r5 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1600(com.android.internal.telephony.NetworkScanRequestTracker,com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,int,java.util.List)>($r5, r7, 3, i0, null);

     label4:
        goto label6;

     label5:
        $r4 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1600(com.android.internal.telephony.NetworkScanRequestTracker,com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,int,java.util.List)>($r4, r7, 2, i0, null);

     label6:
        $r8 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $r9 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r8);

        $r10 = $r9.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r11 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r12 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r11);

        interfaceinvoke $r10.<com.android.internal.telephony.CommandsInterface: void unregisterForModemReset(android.os.Handler)>($r12);

        r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo> = null;

        $r13 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo>;

        if $r13 == null goto label7;

        $r3 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo>;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: boolean startNewScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r3);

        r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo> = null;

     label7:
        exitmonitor r0;

        return;

     label8:
        $r6 := @caughtexception;

        exitmonitor r0;

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label5 to label6 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    private void doInterruptScan(int)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        int i0, $i2;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo $r1, $r6, $r7, $r11;
        java.lang.String $r5;
        com.android.internal.telephony.Phone $r8;
        com.android.internal.telephony.NetworkScanRequestTracker $r9;
        android.os.Handler $r10;
        android.os.Message $r12;
        java.lang.Throwable $r13;
        java.lang.StringBuilder r14;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        if $r1 == null goto label3;

        $r6 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $i2 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1200(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r6);

        if i0 != $i2 goto label3;

        $r7 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $r8 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r7);

        $r9 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r10 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r9);

        $r11 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $r12 = virtualinvoke $r10.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(7, $r11);

        virtualinvoke $r8.<com.android.internal.telephony.Phone: void stopNetworkScan(android.os.Message)>($r12);

     label2:
        goto label4;

     label3:
        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("doInterruptScan: scan ");

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist!");

        $r5 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", $r5);

     label4:
        exitmonitor r0;

        return;

     label5:
        $r13 := @caughtexception;

        exitmonitor r0;

        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
    }

    private void doStartScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo r1;
        com.android.internal.telephony.NetworkScanRequestTracker $r2, $r3, $r4;
        boolean $z0, $z1, $z2, $z3, $z4;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo;

        if r1 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "CMD_START_NETWORK_SCAN: nsri is null");

        return;

     label1:
        $r2 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $z0 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: boolean access$1500(com.android.internal.telephony.NetworkScanRequestTracker,com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r2, r1);

        if $z0 != 0 goto label2;

        $r4 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1600(com.android.internal.telephony.NetworkScanRequestTracker,com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,int,java.util.List)>($r4, r1, 2, 2, null);

        return;

     label2:
        $z1 = virtualinvoke r1.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: boolean getIsBinderDead()>();

        if $z1 == 0 goto label3;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "CMD_START_NETWORK_SCAN: Binder has died");

        return;

     label3:
        $z2 = specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: boolean startNewScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        if $z2 != 0 goto label4;

        $z3 = specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: boolean interruptLiveScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        if $z3 != 0 goto label4;

        $z4 = specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: boolean cacheScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        if $z4 != 0 goto label4;

        $r3 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1600(com.android.internal.telephony.NetworkScanRequestTracker,com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,int,java.util.List)>($r3, r1, 2, 3, null);

     label4:
        return;
    }

    private void doStopScan(int)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        int i0, $i2, $i3;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo $r1, $r2, $r7, $r8, $r10, $r11, $r15;
        java.lang.String $r6;
        com.android.internal.telephony.NetworkScanRequestTracker $r9, $r13;
        com.android.internal.telephony.Phone $r12;
        android.os.Handler $r14;
        android.os.Message $r16;
        java.lang.Throwable $r17;
        java.lang.StringBuilder r18;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        if $r1 == null goto label3;

        $r10 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $i3 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1200(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r10);

        if i0 != $i3 goto label3;

        $r11 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $r12 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r11);

        $r13 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r14 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r13);

        $r15 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $r16 = virtualinvoke $r14.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(5, $r15);

        virtualinvoke $r12.<com.android.internal.telephony.Phone: void stopNetworkScan(android.os.Message)>($r16);

     label2:
        goto label6;

     label3:
        $r2 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo>;

        if $r2 == null goto label5;

        $r7 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo>;

        $i2 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1200(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r7);

        if i0 != $i2 goto label5;

        $r9 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r8 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1600(com.android.internal.telephony.NetworkScanRequestTracker,com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,int,java.util.List)>($r9, $r8, 3, 0, null);

        r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo> = null;

     label4:
        goto label6;

     label5:
        r18 = new java.lang.StringBuilder;

        specialinvoke r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("stopScan: scan ");

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist!");

        $r6 = virtualinvoke r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", $r6);

     label6:
        exitmonitor r0;

        return;

     label7:
        $r17 := @caughtexception;

        exitmonitor r0;

        throw $r17;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private boolean interruptLiveScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo $r1, $r2, $r3, $r4, $r5, r8;
        int $i0, $i1, $i2;
        com.android.internal.telephony.NetworkScanRequestTracker $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r8 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        if $r1 == null goto label3;

        $r2 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo>;

        if $r2 != null goto label3;

        $i0 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1900(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r8);

        if $i0 != 1000 goto label3;

        $r3 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $i1 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1900(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r3);

        if $i1 == 1000 goto label3;

        $r4 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $i2 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1200(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r4);

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void doInterruptScan(int)>($i2);

        r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mPendingRequestInfo> = r8;

        $r6 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r5 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1600(com.android.internal.telephony.NetworkScanRequestTracker,com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,int,java.util.List)>($r6, $r5, 2, 10002, null);

     label2:
        exitmonitor r0;

        return 1;

     label3:
        exitmonitor r0;

        return 0;

     label4:
        $r7 := @caughtexception;

        exitmonitor r0;

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private void interruptScanDone(android.os.AsyncResult)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        java.lang.Object $r1;
        com.android.internal.telephony.Phone $r2;
        com.android.internal.telephony.NetworkScanRequestTracker $r3;
        com.android.internal.telephony.CommandsInterface $r4;
        android.os.Handler $r5;
        android.os.AsyncResult r6;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo r7;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r6 := @parameter0: android.os.AsyncResult;

        $r1 = r6.<android.os.AsyncResult: java.lang.Object userObj>;

        r7 = (com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo) $r1;

        if r7 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "EVENT_INTERRUPT_NETWORK_SCAN_DONE: nsri is null");

        return;

     label1:
        $r2 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r7);

        $r4 = $r2.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r3 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r5 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r3);

        interfaceinvoke $r4.<com.android.internal.telephony.CommandsInterface: void unregisterForNetworkScanResult(android.os.Handler)>($r5);

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void deleteScanAndMayNotify(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,boolean)>(r7, 0, 0);

        return;
    }

    private void receiveResult(android.os.AsyncResult)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo r1;
        android.telephony.LocationAccessPolicy$LocationPermissionQuery r2;
        java.lang.Object $r3, $r17, $r18;
        android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder $r4, $r6, $r7, $r8, $r9, $r10;
        java.lang.String $r5;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.Throwable $r11;
        com.android.internal.telephony.NetworkScanRequestTracker $r12, $r14, $r25, $r28, $r32, $r35;
        com.android.internal.telephony.Phone $r13, $r19, $r24, $r30, $r34, $r38;
        com.android.internal.telephony.CommandsInterface $r15, $r26, $r36;
        android.os.Handler $r16, $r27, $r37;
        android.content.Context $r20;
        android.telephony.LocationAccessPolicy$LocationPermissionResult $r21, $r22;
        java.util.List $r23, $r29, $r33, $r40;
        com.android.internal.telephony.ServiceStateTracker $r31, $r39;
        android.os.AsyncResult r41;
        com.android.internal.telephony.NetworkScanResult r42;
        boolean z0;
        byte b11;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r41 := @parameter0: android.os.AsyncResult;

        $r3 = r41.<android.os.AsyncResult: java.lang.Object userObj>;

        r1 = (com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo) $r3;

        if r1 != null goto label01;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "EVENT_RECEIVE_NETWORK_SCAN_RESULT: nsri is null");

        return;

     label01:
        $r4 = new android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder;

        specialinvoke $r4.<android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder: void <init>()>();

        $r5 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: java.lang.String access$2100(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r6 = virtualinvoke $r4.<android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder: android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder setCallingPackage(java.lang.String)>($r5);

        $i0 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$2000(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r7 = virtualinvoke $r6.<android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder: android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder setCallingPid(int)>($i0);

        $i1 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1900(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r8 = virtualinvoke $r7.<android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder: android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder setCallingUid(int)>($i1);

        $r9 = virtualinvoke $r8.<android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder: android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder setMinSdkVersionForFine(int)>(29);

        $r10 = virtualinvoke $r9.<android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder: android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder setMethod(java.lang.String)>("NetworkScanTracker#onResult");

        r2 = virtualinvoke $r10.<android.telephony.LocationAccessPolicy$LocationPermissionQuery$Builder: android.telephony.LocationAccessPolicy$LocationPermissionQuery build()>();

        $r11 = r41.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r11 != null goto label10;

        $r17 = r41.<android.os.AsyncResult: java.lang.Object result>;

        if $r17 == null goto label10;

        $r18 = r41.<android.os.AsyncResult: java.lang.Object result>;

        r42 = (com.android.internal.telephony.NetworkScanResult) $r18;

        $r19 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r20 = virtualinvoke $r19.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r21 = staticinvoke <android.telephony.LocationAccessPolicy: android.telephony.LocationAccessPolicy$LocationPermissionResult checkLocationPermission(android.content.Context,android.telephony.LocationAccessPolicy$LocationPermissionQuery)>($r20, r2);

        $r22 = <android.telephony.LocationAccessPolicy$LocationPermissionResult: android.telephony.LocationAccessPolicy$LocationPermissionResult ALLOWED>;

        if $r21 != $r22 goto label02;

        z0 = 1;

        goto label03;

     label02:
        z0 = 0;

     label03:
        if z0 == 0 goto label04;

        b11 = 1;

        goto label05;

     label04:
        b11 = 4;

     label05:
        $i2 = r42.<com.android.internal.telephony.NetworkScanResult: int scanError>;

        if $i2 != 0 goto label07;

        $r30 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r31 = virtualinvoke $r30.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if $r31 == null goto label06;

        $r38 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r39 = virtualinvoke $r38.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r40 = r42.<com.android.internal.telephony.NetworkScanResult: java.util.List networkInfos>;

        virtualinvoke $r39.<com.android.internal.telephony.ServiceStateTracker: void updateOperatorNameForCellInfo(java.util.List)>($r40);

     label06:
        $r32 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $i7 = r42.<com.android.internal.telephony.NetworkScanResult: int scanError>;

        $i8 = specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: int rilErrorToScanError(int)>($i7);

        $r33 = r42.<com.android.internal.telephony.NetworkScanResult: java.util.List networkInfos>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1600(com.android.internal.telephony.NetworkScanRequestTracker,com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,int,java.util.List)>($r32, r1, b11, $i8, $r33);

        $i9 = r42.<com.android.internal.telephony.NetworkScanResult: int scanStatus>;

        if $i9 != 2 goto label09;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void deleteScanAndMayNotify(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,boolean)>(r1, 0, 1);

        $r34 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r36 = $r34.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r35 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r37 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r35);

        interfaceinvoke $r36.<com.android.internal.telephony.CommandsInterface: void unregisterForNetworkScanResult(android.os.Handler)>($r37);

        goto label09;

     label07:
        $r23 = r42.<com.android.internal.telephony.NetworkScanResult: java.util.List networkInfos>;

        if $r23 == null goto label08;

        $r28 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $i5 = r42.<com.android.internal.telephony.NetworkScanResult: int scanError>;

        $i6 = specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: int rilErrorToScanError(int)>($i5);

        $r29 = r42.<com.android.internal.telephony.NetworkScanResult: java.util.List networkInfos>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1600(com.android.internal.telephony.NetworkScanRequestTracker,com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,int,java.util.List)>($r28, r1, b11, $i6, $r29);

     label08:
        $i3 = r42.<com.android.internal.telephony.NetworkScanResult: int scanError>;

        $i4 = specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: int rilErrorToScanError(int)>($i3);

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void deleteScanAndMayNotify(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,boolean)>(r1, $i4, 1);

        $r24 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r26 = $r24.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r25 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r27 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r25);

        interfaceinvoke $r26.<com.android.internal.telephony.CommandsInterface: void unregisterForNetworkScanResult(android.os.Handler)>($r27);

     label09:
        goto label11;

     label10:
        $r12 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1800(com.android.internal.telephony.NetworkScanRequestTracker,android.os.AsyncResult)>($r12, r41);

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void deleteScanAndMayNotify(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,boolean)>(r1, 10000, 1);

        $r13 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r15 = $r13.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r14 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r16 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r14);

        interfaceinvoke $r15.<com.android.internal.telephony.CommandsInterface: void unregisterForNetworkScanResult(android.os.Handler)>($r16);

     label11:
        return;
    }

    private int rilErrorToScanError(int)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        i0 := @parameter0: int;

        if i0 == 0 goto label9;

        if i0 == 1 goto label8;

        if i0 == 6 goto label7;

        if i0 == 40 goto label6;

        if i0 == 44 goto label5;

        if i0 == 54 goto label4;

        if i0 == 64 goto label3;

        if i0 == 37 goto label2;

        if i0 == 38 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rilErrorToScanError: Unexpected RadioError ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", $r5);

        return 10000;

     label1:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "rilErrorToScanError: INTERNAL_ERR");

        return 1;

     label2:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "rilErrorToScanError: NO_MEMORY");

        return 1;

     label3:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "rilErrorToScanError: DEVICE_IN_USE");

        return 3;

     label4:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "rilErrorToScanError: OPERATION_NOT_ALLOWED");

        return 1;

     label5:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "rilErrorToScanError: INVALID_ARGUMENTS");

        return 2;

     label6:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "rilErrorToScanError: MODEM_ERR");

        return 1;

     label7:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "rilErrorToScanError: REQUEST_NOT_SUPPORTED");

        return 4;

     label8:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "rilErrorToScanError: RADIO_NOT_AVAILABLE");

        return 1;

     label9:
        return 0;
    }

    private boolean startNewScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo $r1, r12;
        com.android.internal.telephony.Phone $r2, $r7;
        android.telephony.NetworkScanRequest $r3;
        com.android.internal.telephony.NetworkScanRequestTracker $r4, $r8;
        android.os.Handler $r5, $r10;
        android.os.Message $r6;
        com.android.internal.telephony.CommandsInterface $r9;
        java.lang.Throwable $r11;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r12 := @parameter0: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        if $r1 != null goto label3;

        r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo> = r12;

        $r2 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r12);

        $r3 = virtualinvoke r12.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: android.telephony.NetworkScanRequest getRequest()>();

        $r4 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r5 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r4);

        $r6 = virtualinvoke $r5.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(2, r12);

        virtualinvoke $r2.<com.android.internal.telephony.Phone: void startNetworkScan(android.telephony.NetworkScanRequest,android.os.Message)>($r3, $r6);

        $r7 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r12);

        $r9 = $r7.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r8 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r10 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r8);

        interfaceinvoke $r9.<com.android.internal.telephony.CommandsInterface: void registerForModemReset(android.os.Handler,int,java.lang.Object)>($r10, 8, r12);

     label2:
        exitmonitor r0;

        return 1;

     label3:
        exitmonitor r0;

        return 0;

     label4:
        $r11 := @caughtexception;

        exitmonitor r0;

        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label4;
    }

    private void startScanDone(android.os.AsyncResult)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo r1, $r3, $r4;
        java.lang.Object $r2, $r11;
        int $i1, $i2, $i4;
        java.lang.Throwable $r5, $r7, $r8, $r16;
        com.android.internal.telephony.NetworkScanRequestTracker $r6, $r13;
        com.android.internal.telephony.CommandException $r9;
        com.android.internal.telephony.CommandException$Error $r10;
        com.android.internal.telephony.Phone $r12;
        com.android.internal.telephony.CommandsInterface $r14;
        android.os.Handler $r15;
        android.os.AsyncResult r17;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r17 := @parameter0: android.os.AsyncResult;

        entermonitor r0;

     label01:
        $r2 = r17.<android.os.AsyncResult: java.lang.Object userObj>;

        r1 = (com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo) $r2;

     label02:
        if r1 != null goto label05;

     label03:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "EVENT_START_NETWORK_SCAN_DONE: nsri is null");

     label04:
        exitmonitor r0;

        return;

     label05:
        $r3 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        if $r3 == null goto label13;

        $i1 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1200(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r4 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo mLiveRequestInfo>;

        $i2 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: int access$1200(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>($r4);

        if $i1 == $i2 goto label07;

     label06:
        goto label13;

     label07:
        $r5 = r17.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r5 != null goto label09;

        $r11 = r17.<android.os.AsyncResult: java.lang.Object result>;

        if $r11 == null goto label09;

        $r12 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r1);

        $r14 = $r12.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r13 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r15 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r13);

        interfaceinvoke $r14.<com.android.internal.telephony.CommandsInterface: void registerForNetworkScanResult(android.os.Handler,int,java.lang.Object)>($r15, 3, r1);

     label08:
        goto label12;

     label09:
        $r6 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1800(com.android.internal.telephony.NetworkScanRequestTracker,android.os.AsyncResult)>($r6, r17);

        $r7 = r17.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r7 == null goto label11;

        $r8 = r17.<android.os.AsyncResult: java.lang.Throwable exception>;

        $r9 = (com.android.internal.telephony.CommandException) $r8;

        $r10 = virtualinvoke $r9.<com.android.internal.telephony.CommandException: com.android.internal.telephony.CommandException$Error getCommandError()>();

        $i4 = specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: int commandExceptionErrorToScanError(com.android.internal.telephony.CommandException$Error)>($r10);

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void deleteScanAndMayNotify(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,boolean)>(r1, $i4, 1);

     label10:
        goto label12;

     label11:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("ScanRequestTracker", "EVENT_START_NETWORK_SCAN_DONE: ar.exception can not be null!");

     label12:
        exitmonitor r0;

        return;

     label13:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "EVENT_START_NETWORK_SCAN_DONE: nsri does not match mLiveRequestInfo");

     label14:
        exitmonitor r0;

        return;

     label15:
        $r16 := @caughtexception;

        exitmonitor r0;

        throw $r16;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
    }

    private void stopScanDone(android.os.AsyncResult)
    {
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler r0;
        android.os.AsyncResult r1;
        com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo r2;
        java.lang.Object $r3, $r10;
        java.lang.Throwable $r4, $r6, $r7;
        com.android.internal.telephony.NetworkScanRequestTracker $r5, $r13;
        com.android.internal.telephony.CommandException $r8;
        com.android.internal.telephony.CommandException$Error $r9;
        int $i1;
        com.android.internal.telephony.Phone $r11;
        com.android.internal.telephony.CommandsInterface $r12;
        android.os.Handler $r14;

        r0 := @this: com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler;

        r1 := @parameter0: android.os.AsyncResult;

        $r3 = r1.<android.os.AsyncResult: java.lang.Object userObj>;

        r2 = (com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo) $r3;

        if r2 != null goto label1;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ScanRequestTracker", "EVENT_STOP_NETWORK_SCAN_DONE: nsri is null");

        return;

     label1:
        $r4 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r4 != null goto label2;

        $r10 = r1.<android.os.AsyncResult: java.lang.Object result>;

        if $r10 == null goto label2;

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void deleteScanAndMayNotify(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,boolean)>(r2, 0, 1);

        goto label4;

     label2:
        $r5 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: void access$1800(com.android.internal.telephony.NetworkScanRequestTracker,android.os.AsyncResult)>($r5, r1);

        $r6 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r6 == null goto label3;

        $r7 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        $r8 = (com.android.internal.telephony.CommandException) $r7;

        $r9 = virtualinvoke $r8.<com.android.internal.telephony.CommandException: com.android.internal.telephony.CommandException$Error getCommandError()>();

        $i1 = specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: int commandExceptionErrorToScanError(com.android.internal.telephony.CommandException$Error)>($r9);

        specialinvoke r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: void deleteScanAndMayNotify(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo,int,boolean)>(r2, $i1, 1);

        goto label4;

     label3:
        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("ScanRequestTracker", "EVENT_STOP_NETWORK_SCAN_DONE: ar.exception can not be null!");

     label4:
        $r11 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo: com.android.internal.telephony.Phone access$1300(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo)>(r2);

        $r12 = $r11.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r13 = r0.<com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestScheduler: com.android.internal.telephony.NetworkScanRequestTracker this$0>;

        $r14 = staticinvoke <com.android.internal.telephony.NetworkScanRequestTracker: android.os.Handler access$1700(com.android.internal.telephony.NetworkScanRequestTracker)>($r13);

        interfaceinvoke $r12.<com.android.internal.telephony.CommandsInterface: void unregisterForNetworkScanResult(android.os.Handler)>($r14);

        return;
    }
}
