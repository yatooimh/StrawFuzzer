public class com.android.internal.telephony.NetworkTypeController extends com.android.internal.telephony.StateMachine
{
    private static final int[] ALL_EVENTS;
    private static final java.lang.String[] ALL_STATES;
    private static final boolean DBG;
    private static final int EVENT_CARRIER_CONFIG_CHANGED;
    private static final int EVENT_DATA_RAT_CHANGED;
    private static final int EVENT_INITIALIZE;
    private static final int EVENT_NR_FREQUENCY_CHANGED;
    private static final int EVENT_NR_STATE_CHANGED;
    private static final int EVENT_PHYSICAL_CHANNEL_CONFIG_NOTIF_CHANGED;
    private static final int EVENT_PHYSICAL_LINK_STATE_CHANGED;
    private static final int EVENT_PREFERRED_NETWORK_MODE_CHANGED;
    private static final int EVENT_PRIMARY_TIMER_EXPIRED;
    public static final int EVENT_QUIT;
    private static final int EVENT_RADIO_OFF_OR_UNAVAILABLE;
    private static final int EVENT_SECONDARY_TIMER_EXPIRED;
    public static final int EVENT_UPDATE;
    private static final java.lang.String ICON_5G;
    private static final java.lang.String ICON_5G_PLUS;
    private static final java.lang.String STATE_ANY;
    private static final java.lang.String STATE_CONNECTED;
    private static final java.lang.String STATE_CONNECTED_MMWAVE;
    private static final java.lang.String STATE_LEGACY;
    private static final java.lang.String STATE_NOT_RESTRICTED_RRC_CON;
    private static final java.lang.String STATE_NOT_RESTRICTED_RRC_IDLE;
    private static final java.lang.String STATE_RESTRICTED;
    private static final java.lang.String TAG;
    private static final java.lang.String[] sEvents;
    private final com.android.internal.telephony.NetworkTypeController$DefaultState mDefaultState;
    private final com.android.internal.telephony.DisplayInfoController mDisplayInfoController;
    private final com.android.internal.telephony.NetworkTypeController$IdleState mIdleState;
    private final android.content.BroadcastReceiver mIntentReceiver;
    private boolean mIsPhysicalChannelConfigOn;
    private boolean mIsPrimaryTimerActive;
    private boolean mIsSecondaryTimerActive;
    private final com.android.internal.telephony.NetworkTypeController$LegacyState mLegacyState;
    private final com.android.internal.telephony.NetworkTypeController$LteConnectedState mLteConnectedState;
    private java.lang.String mLteEnhancedPattern;
    private final com.android.internal.telephony.NetworkTypeController$NrConnectedState mNrConnectedState;
    private int mOverrideNetworkType;
    private java.util.Map mOverrideTimerRules;
    private final com.android.internal.telephony.Phone mPhone;
    private int mPhysicalLinkState;
    private java.lang.String mPreviousState;
    private java.lang.String mPrimaryTimerState;
    private java.lang.String mSecondaryTimerState;

    static void <clinit>()
    {
        java.lang.String[] r0, $r1;
        int[] $r2;

        <com.android.internal.telephony.NetworkTypeController: java.lang.String TAG> = "NetworkTypeController";

        <com.android.internal.telephony.NetworkTypeController: java.lang.String STATE_RESTRICTED> = "restricted";

        <com.android.internal.telephony.NetworkTypeController: java.lang.String STATE_NOT_RESTRICTED_RRC_IDLE> = "not_restricted_rrc_idle";

        <com.android.internal.telephony.NetworkTypeController: java.lang.String STATE_NOT_RESTRICTED_RRC_CON> = "not_restricted_rrc_con";

        <com.android.internal.telephony.NetworkTypeController: java.lang.String STATE_LEGACY> = "legacy";

        <com.android.internal.telephony.NetworkTypeController: java.lang.String STATE_CONNECTED_MMWAVE> = "connected_mmwave";

        <com.android.internal.telephony.NetworkTypeController: java.lang.String STATE_CONNECTED> = "connected";

        <com.android.internal.telephony.NetworkTypeController: java.lang.String STATE_ANY> = "any";

        <com.android.internal.telephony.NetworkTypeController: java.lang.String ICON_5G_PLUS> = "5g_plus";

        <com.android.internal.telephony.NetworkTypeController: java.lang.String ICON_5G> = "5g";

        <com.android.internal.telephony.NetworkTypeController: int EVENT_UPDATE> = 0;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_SECONDARY_TIMER_EXPIRED> = 9;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_RADIO_OFF_OR_UNAVAILABLE> = 10;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_QUIT> = 1;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_PRIMARY_TIMER_EXPIRED> = 8;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_PREFERRED_NETWORK_MODE_CHANGED> = 11;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_PHYSICAL_LINK_STATE_CHANGED> = 5;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_PHYSICAL_CHANNEL_CONFIG_NOTIF_CHANGED> = 6;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_NR_STATE_CHANGED> = 3;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_NR_FREQUENCY_CHANGED> = 4;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_INITIALIZE> = 12;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_DATA_RAT_CHANGED> = 2;

        <com.android.internal.telephony.NetworkTypeController: int EVENT_CARRIER_CONFIG_CHANGED> = 7;

        <com.android.internal.telephony.NetworkTypeController: boolean DBG> = 1;

        $r1 = newarray (java.lang.String)[6];

        $r1[0] = "connected_mmwave";

        $r1[1] = "connected";

        $r1[2] = "not_restricted_rrc_idle";

        $r1[3] = "not_restricted_rrc_con";

        $r1[4] = "restricted";

        $r1[5] = "legacy";

        <com.android.internal.telephony.NetworkTypeController: java.lang.String[] ALL_STATES> = $r1;

        $r2 = newarray (int)[7];

        $r2[0] = 2;

        $r2[1] = 3;

        $r2[2] = 4;

        $r2[3] = 5;

        $r2[4] = 6;

        $r2[5] = 8;

        $r2[6] = 9;

        <com.android.internal.telephony.NetworkTypeController: int[] ALL_EVENTS> = $r2;

        r0 = newarray (java.lang.String)[13];

        <com.android.internal.telephony.NetworkTypeController: java.lang.String[] sEvents> = r0;

        r0[0] = "EVENT_UPDATE";

        r0[1] = "EVENT_QUIT";

        r0[2] = "EVENT_DATA_RAT_CHANGED";

        r0[3] = "EVENT_NR_STATE_CHANGED";

        r0[4] = "EVENT_NR_FREQUENCY_CHANGED";

        r0[5] = "EVENT_PHYSICAL_LINK_STATE_CHANGED";

        r0[6] = "EVENT_PHYSICAL_CHANNEL_CONFIG_NOTIF_CHANGED";

        r0[7] = "EVENT_CARRIER_CONFIG_CHANGED";

        r0[8] = "EVENT_PRIMARY_TIMER_EXPIRED";

        r0[9] = "EVENT_SECONDARY_TIMER_EXPIRED";

        r0[10] = "EVENT_RADIO_OFF_OR_UNAVAILABLE";

        r0[11] = "EVENT_PREFERRED_NETWORK_MODE_CHANGED";

        r0[12] = "EVENT_INITIALIZE";

        return;
    }

    public void <init>(com.android.internal.telephony.Phone, com.android.internal.telephony.DisplayInfoController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.Phone r1;
        com.android.internal.telephony.DisplayInfoController r2;
        com.android.internal.telephony.NetworkTypeController$1 $r3;
        java.util.HashMap $r4;
        com.android.internal.telephony.NetworkTypeController$DefaultState $r5, $r10, $r11, $r13, $r15, $r17, $r19;
        com.android.internal.telephony.NetworkTypeController$LegacyState $r6, $r12;
        com.android.internal.telephony.NetworkTypeController$IdleState $r7, $r14;
        com.android.internal.telephony.NetworkTypeController$LteConnectedState $r8, $r16;
        com.android.internal.telephony.NetworkTypeController$NrConnectedState $r9, $r18;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        r2 := @parameter1: com.android.internal.telephony.DisplayInfoController;

        specialinvoke r0.<com.android.internal.telephony.StateMachine: void <init>(java.lang.String,android.os.Handler)>("NetworkTypeController", r2);

        $r3 = new com.android.internal.telephony.NetworkTypeController$1;

        specialinvoke $r3.<com.android.internal.telephony.NetworkTypeController$1: void <init>(com.android.internal.telephony.NetworkTypeController)>(r0);

        r0.<com.android.internal.telephony.NetworkTypeController: android.content.BroadcastReceiver mIntentReceiver> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<com.android.internal.telephony.NetworkTypeController: java.util.Map mOverrideTimerRules> = $r4;

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mLteEnhancedPattern> = "";

        $r5 = new com.android.internal.telephony.NetworkTypeController$DefaultState;

        specialinvoke $r5.<com.android.internal.telephony.NetworkTypeController$DefaultState: void <init>(com.android.internal.telephony.NetworkTypeController,com.android.internal.telephony.NetworkTypeController$1)>(r0, null);

        r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$DefaultState mDefaultState> = $r5;

        $r6 = new com.android.internal.telephony.NetworkTypeController$LegacyState;

        specialinvoke $r6.<com.android.internal.telephony.NetworkTypeController$LegacyState: void <init>(com.android.internal.telephony.NetworkTypeController,com.android.internal.telephony.NetworkTypeController$1)>(r0, null);

        r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$LegacyState mLegacyState> = $r6;

        $r7 = new com.android.internal.telephony.NetworkTypeController$IdleState;

        specialinvoke $r7.<com.android.internal.telephony.NetworkTypeController$IdleState: void <init>(com.android.internal.telephony.NetworkTypeController,com.android.internal.telephony.NetworkTypeController$1)>(r0, null);

        r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$IdleState mIdleState> = $r7;

        $r8 = new com.android.internal.telephony.NetworkTypeController$LteConnectedState;

        specialinvoke $r8.<com.android.internal.telephony.NetworkTypeController$LteConnectedState: void <init>(com.android.internal.telephony.NetworkTypeController,com.android.internal.telephony.NetworkTypeController$1)>(r0, null);

        r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$LteConnectedState mLteConnectedState> = $r8;

        $r9 = new com.android.internal.telephony.NetworkTypeController$NrConnectedState;

        specialinvoke $r9.<com.android.internal.telephony.NetworkTypeController$NrConnectedState: void <init>(com.android.internal.telephony.NetworkTypeController,com.android.internal.telephony.NetworkTypeController$1)>(r0, null);

        r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$NrConnectedState mNrConnectedState> = $r9;

        r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone> = r1;

        r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.DisplayInfoController mDisplayInfoController> = r2;

        r0.<com.android.internal.telephony.NetworkTypeController: int mOverrideNetworkType> = 0;

        r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPhysicalChannelConfigOn> = 1;

        $r10 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void addState(com.android.internal.telephony.State)>($r10);

        $r12 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$LegacyState mLegacyState>;

        $r11 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void addState(com.android.internal.telephony.State,com.android.internal.telephony.State)>($r12, $r11);

        $r14 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$IdleState mIdleState>;

        $r13 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void addState(com.android.internal.telephony.State,com.android.internal.telephony.State)>($r14, $r13);

        $r16 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$LteConnectedState mLteConnectedState>;

        $r15 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void addState(com.android.internal.telephony.State,com.android.internal.telephony.State)>($r16, $r15);

        $r18 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$NrConnectedState mNrConnectedState>;

        $r17 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void addState(com.android.internal.telephony.State,com.android.internal.telephony.State)>($r18, $r17);

        $r19 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void setInitialState(com.android.internal.telephony.State)>($r19);

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void start()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void sendMessage(int)>(12);

        return;
    }

    static com.android.internal.telephony.Phone access$000(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.Phone $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        return $r1;
    }

    static java.lang.String access$100(com.android.internal.telephony.NetworkTypeController, int)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int i0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String getEventName(int)>(i0);

        return $r1;
    }

    static void access$1000(com.android.internal.telephony.NetworkTypeController, int)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int i0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void removeMessages(int)>(i0);

        return;
    }

    static void access$1100(com.android.internal.telephony.NetworkTypeController, int)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int i0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void removeMessages(int)>(i0);

        return;
    }

    static void access$1200(com.android.internal.telephony.NetworkTypeController, com.android.internal.telephony.IState)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.IState r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        r1 := @parameter1: com.android.internal.telephony.IState;

        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void transitionWithSecondaryTimerTo(com.android.internal.telephony.IState)>(r1);

        return;
    }

    static boolean access$1300(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $z0 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsSecondaryTimerActive>;

        return $z0;
    }

    static boolean access$1302(com.android.internal.telephony.NetworkTypeController, boolean)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsSecondaryTimerActive> = z0;

        return z0;
    }

    static java.lang.String access$1402(com.android.internal.telephony.NetworkTypeController, java.lang.String)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mSecondaryTimerState> = r1;

        return r1;
    }

    static void access$1500(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void updateTimers()>();

        return;
    }

    static void access$1600(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void updateOverrideNetworkType()>();

        return;
    }

    static com.android.internal.telephony.NetworkTypeController$LegacyState access$1700(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.NetworkTypeController$LegacyState $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$LegacyState mLegacyState>;

        return $r1;
    }

    static boolean access$1900(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $z0 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPrimaryTimerActive>;

        return $z0;
    }

    static void access$200(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void resetAllTimers()>();

        return;
    }

    static boolean access$2000(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $z0 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isNrRestricted()>();

        return $z0;
    }

    static java.lang.String access$2102(com.android.internal.telephony.NetworkTypeController, java.lang.String)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState> = r1;

        return r1;
    }

    static boolean access$2200(com.android.internal.telephony.NetworkTypeController, int)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        i0 := @parameter1: int;

        $z0 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isLte(int)>(i0);

        return $z0;
    }

    static boolean access$2300(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $z0 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isNrConnected()>();

        return $z0;
    }

    static com.android.internal.telephony.NetworkTypeController$NrConnectedState access$2400(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.NetworkTypeController$NrConnectedState $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$NrConnectedState mNrConnectedState>;

        return $r1;
    }

    static boolean access$2500(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $z0 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isNrNotRestricted()>();

        return $z0;
    }

    static boolean access$2600(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $z0 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isPhysicalLinkActive()>();

        return $z0;
    }

    static com.android.internal.telephony.NetworkTypeController$LteConnectedState access$2700(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.NetworkTypeController$LteConnectedState $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$LteConnectedState mLteConnectedState>;

        return $r1;
    }

    static com.android.internal.telephony.NetworkTypeController$IdleState access$2800(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.NetworkTypeController$IdleState $r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$IdleState mIdleState>;

        return $r1;
    }

    static void access$2900(com.android.internal.telephony.NetworkTypeController, com.android.internal.telephony.IState)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.IState r1;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        r1 := @parameter1: com.android.internal.telephony.IState;

        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void transitionWithTimerTo(com.android.internal.telephony.IState)>(r1);

        return;
    }

    static void access$300(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void transitionToCurrentState()>();

        return;
    }

    static boolean access$3300(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $z0 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isNrMmwave()>();

        return $z0;
    }

    static void access$400(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void unRegisterForAllEvents()>();

        return;
    }

    static void access$500(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void registerForAllEvents()>();

        return;
    }

    static void access$600(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void parseCarrierConfigs()>();

        return;
    }

    static int access$702(com.android.internal.telephony.NetworkTypeController, int)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int i0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        i0 := @parameter1: int;

        r0.<com.android.internal.telephony.NetworkTypeController: int mPhysicalLinkState> = i0;

        return i0;
    }

    static boolean access$800(com.android.internal.telephony.NetworkTypeController)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        $z0 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPhysicalChannelConfigOn>;

        return $z0;
    }

    static boolean access$802(com.android.internal.telephony.NetworkTypeController, boolean)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean z0;

        r0 := @parameter0: com.android.internal.telephony.NetworkTypeController;

        z0 := @parameter1: boolean;

        r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPhysicalChannelConfigOn> = z0;

        return z0;
    }

    static int[] access$900()
    {
        int[] $r0;

        $r0 = <com.android.internal.telephony.NetworkTypeController: int[] ALL_EVENTS>;

        return $r0;
    }

    private void createTimerRules(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        java.util.HashMap $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.lang.StringBuilder $r3, $r21, $r38, $r49, $r55;
        java.util.Map $r5;
        java.lang.String $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r15, $r17, $r19, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r32, $r34, $r36, $r41, $r44, $r45, $r46, $r47, $r48, $r51, $r53, $r58, r61, r62, r63, r65, $r69, $r71, r73, r75, r81;
        int $i0, $i1, $i2, i3, i4, i6, i7, i8, i9, i10, i11, i12, i13, i14, i15, i16, i17;
        java.lang.Object $r14, $r18, $r31, $r35;
        com.android.internal.telephony.NetworkTypeController$OverrideTimerRule $r16, $r20, $r33, $r37, $r42, $r70;
        java.lang.Throwable $r59, $r60;
        java.lang.String[] r64, r66, r72, r74, r76, r78, r80, r82, r84;
        byte b5;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        r61 := @parameter0: java.lang.String;

        r62 := @parameter1: java.lang.String;

        r63 := @parameter2: java.lang.String;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r61);

        if $z0 != 0 goto label07;

        $r44 = virtualinvoke r61.<java.lang.String: java.lang.String trim()>();

        r64 = virtualinvoke $r44.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i3 = lengthof r64;

        i4 = 0;

     label01:
        if i4 >= i3 goto label07;

        r65 = r64[i4];

        $r45 = virtualinvoke r65.<java.lang.String: java.lang.String trim()>();

        $r46 = virtualinvoke $r45.<java.lang.String: java.lang.String toLowerCase()>();

        r66 = virtualinvoke $r46.<java.lang.String: java.lang.String[] split(java.lang.String)>(":");

        $i2 = lengthof r66;

        if $i2 == 2 goto label02;

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid 5G icon configuration, config = ");

        virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r65);

        $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void loge(java.lang.String)>($r58);

        goto label06;

     label02:
        b5 = 0;

        $r47 = r66[1];

        $z6 = virtualinvoke $r47.<java.lang.String: boolean equals(java.lang.Object)>("5g");

        if $z6 == 0 goto label03;

        b5 = 3;

        goto label05;

     label03:
        $r48 = r66[1];

        $z7 = virtualinvoke $r48.<java.lang.String: boolean equals(java.lang.Object)>("5g_plus");

        if $z7 == 0 goto label04;

        b5 = 4;

        goto label05;

     label04:
        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid 5G icon = ");

        $r51 = r66[1];

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51);

        $r53 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void loge(java.lang.String)>($r53);

     label05:
        $r69 = r66[0];

        $r70 = new com.android.internal.telephony.NetworkTypeController$OverrideTimerRule;

        $r71 = r66[0];

        specialinvoke $r70.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: void <init>(com.android.internal.telephony.NetworkTypeController,java.lang.String,int)>(r0, $r71, b5);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r69, $r70);

     label06:
        i4 = i4 + 1;

        goto label01;

     label07:
        r72 = <com.android.internal.telephony.NetworkTypeController: java.lang.String[] ALL_STATES>;

        i6 = lengthof r72;

        i7 = 0;

     label08:
        if i7 >= i6 goto label10;

        r73 = r72[i7];

        $z5 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r73);

        if $z5 != 0 goto label09;

        $r42 = new com.android.internal.telephony.NetworkTypeController$OverrideTimerRule;

        specialinvoke $r42.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: void <init>(com.android.internal.telephony.NetworkTypeController,java.lang.String,int)>(r0, r73, 0);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, $r42);

     label09:
        i7 = i7 + 1;

        goto label08;

     label10:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r62);

        if $z1 != 0 goto label18;

        $r25 = virtualinvoke r62.<java.lang.String: java.lang.String trim()>();

        r74 = virtualinvoke $r25.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        i8 = lengthof r74;

        i9 = 0;

     label11:
        if i9 >= i8 goto label18;

        r75 = r74[i9];

        $r26 = virtualinvoke r75.<java.lang.String: java.lang.String trim()>();

        $r27 = virtualinvoke $r26.<java.lang.String: java.lang.String toLowerCase()>();

        r76 = virtualinvoke $r27.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i1 = lengthof r76;

        if $i1 == 3 goto label12;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid 5G icon timer configuration, config = ");

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r75);

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void loge(java.lang.String)>($r41);

        goto label17;

     label12:
        $r28 = r76[2];

        i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r28);

     label13:
        $r29 = r76[0];

        $z4 = virtualinvoke $r29.<java.lang.String: boolean equals(java.lang.Object)>("any");

        if $z4 == 0 goto label15;

        r78 = <com.android.internal.telephony.NetworkTypeController: java.lang.String[] ALL_STATES>;

        i11 = lengthof r78;

        i12 = 0;

     label14:
        if i12 >= i11 goto label17;

        $r34 = r78[i12];

        $r35 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r34);

        $r37 = (com.android.internal.telephony.NetworkTypeController$OverrideTimerRule) $r35;

        $r36 = r76[1];

        virtualinvoke $r37.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: void addTimer(java.lang.String,int)>($r36, i10);

        i12 = i12 + 1;

        goto label14;

     label15:
        $r30 = r76[0];

        $r31 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);

        $r33 = (com.android.internal.telephony.NetworkTypeController$OverrideTimerRule) $r31;

        $r32 = r76[1];

        virtualinvoke $r33.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: void addTimer(java.lang.String,int)>($r32, i10);

        goto label17;

     label16:
        $r59 := @caughtexception;

     label17:
        i9 = i9 + 1;

        goto label11;

     label18:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r63);

        if $z2 != 0 goto label27;

        $r8 = virtualinvoke r63.<java.lang.String: java.lang.String trim()>();

        r80 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(";");

        i13 = lengthof r80;

        i14 = 0;

     label19:
        if i14 >= i13 goto label27;

        r81 = r80[i14];

        $r9 = virtualinvoke r81.<java.lang.String: java.lang.String trim()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>();

        r82 = virtualinvoke $r10.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $i0 = lengthof r82;

        if $i0 == 3 goto label20;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid 5G icon secondary timer configuration, config = ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r81);

        $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void loge(java.lang.String)>($r24);

        goto label26;

     label20:
        $r11 = r82[2];

        i15 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r11);

     label21:
        $r12 = r82[0];

        $z3 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("any");

        if $z3 == 0 goto label24;

        r84 = <com.android.internal.telephony.NetworkTypeController: java.lang.String[] ALL_STATES>;

        i16 = lengthof r84;

        i17 = 0;

     label22:
        if i17 >= i16 goto label23;

        $r17 = r84[i17];

        $r18 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        $r20 = (com.android.internal.telephony.NetworkTypeController$OverrideTimerRule) $r18;

        $r19 = r82[1];

        virtualinvoke $r20.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: void addSecondaryTimer(java.lang.String,int)>($r19, i15);

        i17 = i17 + 1;

        goto label22;

     label23:
        goto label26;

     label24:
        $r13 = r82[0];

        $r14 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r13);

        $r16 = (com.android.internal.telephony.NetworkTypeController$OverrideTimerRule) $r14;

        $r15 = r82[1];

        virtualinvoke $r16.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: void addSecondaryTimer(java.lang.String,int)>($r15, i15);

        goto label26;

     label25:
        $r60 := @caughtexception;

     label26:
        i14 = i14 + 1;

        goto label19;

     label27:
        r0.<com.android.internal.telephony.NetworkTypeController: java.util.Map mOverrideTimerRules> = $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mOverrideTimerRules: ");

        $r5 = r0.<com.android.internal.telephony.NetworkTypeController: java.util.Map mOverrideTimerRules>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void log(java.lang.String)>($r7);

        return;

        catch java.lang.NumberFormatException from label12 to label13 with label16;
        catch java.lang.NumberFormatException from label20 to label21 with label25;
    }

    private int getCurrentOverrideNetworkType()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.Phone $r1, $r3;
        android.telephony.ServiceState $r2, $r4;
        boolean $z0, $z1;
        int $i0, i1, i2, i3;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        i1 = 0;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        i2 = virtualinvoke $r2.<android.telephony.ServiceState: int getDataNetworkType()>();

        $z0 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPhysicalChannelConfigOn>;

        if $z0 == 0 goto label2;

        $r3 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i0 = virtualinvoke $r4.<android.telephony.ServiceState: int getNrState()>();

        if $i0 != 0 goto label1;

        if i2 != 20 goto label2;

     label1:
        i3 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: int getNrDisplayType()>();

        i1 = i3;

        if i3 != 0 goto label3;

        i1 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: int getLteDisplayType()>();

        goto label3;

     label2:
        $z1 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isLte(int)>(i2);

        if $z1 == 0 goto label3;

        i1 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: int getLteDisplayType()>();

     label3:
        return i1;
    }

    private java.lang.String getEventName(int)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int i0;
        java.lang.String[] $r1;
        java.lang.ArrayIndexOutOfBoundsException $r2;
        java.lang.String r3;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        i0 := @parameter0: int;

     label1:
        $r1 = <com.android.internal.telephony.NetworkTypeController: java.lang.String[] sEvents>;

        r3 = $r1[i0];

     label2:
        return r3;

     label3:
        $r2 := @caughtexception;

        return "EVENT_NOT_DEFINED";

        catch java.lang.ArrayIndexOutOfBoundsException from label1 to label2 with label3;
    }

    private int getLteDisplayType()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.Phone $r1, $r3;
        android.telephony.ServiceState $r2, $r4;
        int $i0;
        boolean $z0, $z1;
        byte b1;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        b1 = 0;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i0 = virtualinvoke $r2.<android.telephony.ServiceState: int getDataNetworkType()>();

        if $i0 == 19 goto label1;

        $r3 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $z0 = virtualinvoke $r4.<android.telephony.ServiceState: boolean isUsingCarrierAggregation()>();

        if $z0 == 0 goto label2;

     label1:
        b1 = 1;

     label2:
        $z1 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isLteEnhancedAvailable()>();

        if $z1 == 0 goto label3;

        b1 = 2;

     label3:
        return b1;
    }

    private int getNrDisplayType()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int i0, $i1, $i2, $i6, $i7;
        com.android.internal.telephony.Phone $r1, $r3;
        long $l3, $l4;
        byte $b5;
        java.util.ArrayList $r2;
        android.telephony.ServiceState $r4;
        java.lang.Object $r5, $r7;
        java.util.Map $r6;
        boolean $z1, $z3, $z6;
        java.lang.String r9, r11;
        java.util.Iterator r10;
        com.android.internal.telephony.NetworkTypeController$OverrideTimerRule r12;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $i1 = virtualinvoke $r1.<com.android.internal.telephony.Phone: int getCachedPreferredNetworkType()>();

        $i2 = staticinvoke <android.telephony.RadioAccessFamily: int getRafFromNetworkType(int)>($i1);

        $l3 = (long) $i2;

        $l4 = $l3 & 524288L;

        $b5 = $l4 cmp 0L;

        if $b5 != 0 goto label01;

        return 0;

     label01:
        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        i0 = virtualinvoke $r4.<android.telephony.ServiceState: int getNrState()>();

        if i0 == 1 goto label07;

        if i0 == 2 goto label04;

        if i0 == 3 goto label02;

        goto label08;

     label02:
        $z3 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isNrMmwave()>();

        if $z3 == 0 goto label03;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("connected_mmwave");

     label03:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("connected");

        goto label08;

     label04:
        $z1 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isPhysicalLinkActive()>();

        if $z1 == 0 goto label05;

        r9 = "not_restricted_rrc_con";

        goto label06;

     label05:
        r9 = "not_restricted_rrc_idle";

     label06:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r9);

        goto label08;

     label07:
        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>("restricted");

     label08:
        r10 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z6 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label11;

        $r5 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r11 = (java.lang.String) $r5;

        $r6 = r0.<com.android.internal.telephony.NetworkTypeController: java.util.Map mOverrideTimerRules>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r11);

        r12 = (com.android.internal.telephony.NetworkTypeController$OverrideTimerRule) $r7;

        if r12 == null goto label10;

        $i6 = r12.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: int mOverrideType>;

        if $i6 == 0 goto label10;

        $i7 = r12.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: int mOverrideType>;

        return $i7;

     label10:
        goto label09;

     label11:
        return 0;
    }

    private boolean isLte(int)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        i0 := @parameter0: int;

        if i0 == 13 goto label2;

        if i0 != 19 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean isLteEnhancedAvailable()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        java.util.regex.Pattern r1;
        java.lang.String r2, r3, r4, $r5, $r6;
        boolean $z0, $z1, $z2;
        com.android.internal.telephony.Phone $r7, $r9;
        android.telephony.ServiceState $r8, $r10;
        java.lang.String[] $r11;
        java.util.regex.Matcher $r12;
        int i0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r5 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mLteEnhancedPattern>;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r5);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r6 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mLteEnhancedPattern>;

        r1 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r6);

        $r7 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r8 = virtualinvoke $r7.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        r2 = virtualinvoke $r8.<android.telephony.ServiceState: java.lang.String getOperatorAlphaLongRaw()>();

        $r9 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r10 = virtualinvoke $r9.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        r3 = virtualinvoke $r10.<android.telephony.ServiceState: java.lang.String getOperatorAlphaShortRaw()>();

        i0 = 0;

     label2:
        if i0 >= 2 goto label4;

        $r11 = newarray (java.lang.String)[2];

        $r11[0] = r2;

        $r11[1] = r3;

        r4 = $r11[i0];

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z1 != 0 goto label3;

        $r12 = virtualinvoke r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r4);

        $z2 = virtualinvoke $r12.<java.util.regex.Matcher: boolean find()>();

        if $z2 == 0 goto label3;

        return 1;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return 0;
    }

    private boolean isNrConnected()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.Phone $r1;
        android.telephony.ServiceState $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i0 = virtualinvoke $r2.<android.telephony.ServiceState: int getNrState()>();

        if $i0 != 3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isNrMmwave()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.Phone $r1;
        android.telephony.ServiceState $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i0 = virtualinvoke $r2.<android.telephony.ServiceState: int getNrFrequencyRange()>();

        if $i0 != 4 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isNrNotRestricted()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.Phone $r1;
        android.telephony.ServiceState $r2;
        int $i0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i0 = virtualinvoke $r2.<android.telephony.ServiceState: int getNrState()>();

        if $i0 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isNrRestricted()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int i0;
        com.android.internal.telephony.Phone $r1;
        android.telephony.ServiceState $r2;
        boolean z0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        i0 = virtualinvoke $r2.<android.telephony.ServiceState: int getNrState()>();

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isPhysicalLinkActive()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $i0 = r0.<com.android.internal.telephony.NetworkTypeController: int mPhysicalLinkState>;

        if $i0 != 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private void parseCarrierConfigs()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        android.os.PersistableBundle $r1, $r2, $r3, $r4, r22;
        java.lang.String $r5, $r10, $r11, $r12, $r13, $r14, r15, r16, r17, r19, r20, r21;
        com.android.internal.telephony.Phone $r6, $r9;
        android.content.Context $r7;
        java.lang.Object $r8;
        int $i0;
        android.telephony.CarrierConfigManager r18;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r1 = staticinvoke <android.telephony.CarrierConfigManager: android.os.PersistableBundle getDefaultConfig()>();

        r15 = virtualinvoke $r1.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("5g_icon_configuration_string");

        $r2 = staticinvoke <android.telephony.CarrierConfigManager: android.os.PersistableBundle getDefaultConfig()>();

        r16 = virtualinvoke $r2.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("5g_icon_display_grace_period_string");

        $r3 = staticinvoke <android.telephony.CarrierConfigManager: android.os.PersistableBundle getDefaultConfig()>();

        r17 = virtualinvoke $r3.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("5g_icon_display_secondary_grace_period_string");

        $r4 = staticinvoke <android.telephony.CarrierConfigManager: android.os.PersistableBundle getDefaultConfig()>();

        $r5 = virtualinvoke $r4.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("show_carrier_data_icon_pattern_string");

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mLteEnhancedPattern> = $r5;

        $r6 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r8 = virtualinvoke $r7.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        r18 = (android.telephony.CarrierConfigManager) $r8;

        r19 = r15;

        r20 = r16;

        r21 = r17;

        if r18 == null goto label4;

        $r9 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r9.<com.android.internal.telephony.Phone: int getSubId()>();

        r22 = virtualinvoke r18.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i0);

        r19 = r15;

        r20 = r16;

        r21 = r17;

        if r22 == null goto label4;

        $r10 = virtualinvoke r22.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("5g_icon_configuration_string");

        if $r10 == null goto label1;

        r15 = virtualinvoke r22.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("5g_icon_configuration_string");

     label1:
        $r11 = virtualinvoke r22.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("5g_icon_display_grace_period_string");

        if $r11 == null goto label2;

        r16 = virtualinvoke r22.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("5g_icon_display_grace_period_string");

     label2:
        $r12 = virtualinvoke r22.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("5g_icon_display_secondary_grace_period_string");

        if $r12 == null goto label3;

        r17 = virtualinvoke r22.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("5g_icon_display_secondary_grace_period_string");

     label3:
        r19 = r15;

        r20 = r16;

        r21 = r17;

        $r13 = virtualinvoke r22.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("show_carrier_data_icon_pattern_string");

        if $r13 == null goto label4;

        $r14 = virtualinvoke r22.<android.os.PersistableBundle: java.lang.String getString(java.lang.String)>("show_carrier_data_icon_pattern_string");

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mLteEnhancedPattern> = $r14;

        r21 = r17;

        r20 = r16;

        r19 = r15;

     label4:
        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void createTimerRules(java.lang.String,java.lang.String,java.lang.String)>(r19, r20, r21);

        return;
    }

    private void registerForAllEvents()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.Phone $r2, $r4, $r6, $r9, $r12, $r15, $r18, $r22, $r24;
        android.os.Handler $r3, $r5, $r8, $r11, $r14, $r17, $r20;
        com.android.internal.telephony.ServiceStateTracker $r7, $r13, $r16;
        com.android.internal.telephony.dataconnection.DcTracker $r10;
        com.android.internal.telephony.DeviceStateMonitor $r19;
        android.content.IntentFilter $r21;
        android.content.Context $r23;
        android.content.BroadcastReceiver $r25;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r2 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r2.<com.android.internal.telephony.Phone: void registerForRadioOffOrNotAvailable(android.os.Handler,int,java.lang.Object)>($r3, 10, null);

        $r4 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r5 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r4.<com.android.internal.telephony.Phone: void registerForPreferredNetworkTypeChanged(android.os.Handler,int,java.lang.Object)>($r5, 11, null);

        $r6 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r8 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r7.<com.android.internal.telephony.ServiceStateTracker: void registerForDataRegStateOrRatChanged(int,android.os.Handler,int,java.lang.Object)>(1, $r8, 2, null);

        $r9 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r10 = virtualinvoke $r9.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(1);

        $r11 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r10.<com.android.internal.telephony.dataconnection.DcTracker: void registerForPhysicalLinkStateChanged(android.os.Handler,int)>($r11, 5);

        $r12 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r13 = virtualinvoke $r12.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r14 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r13.<com.android.internal.telephony.ServiceStateTracker: void registerForNrStateChanged(android.os.Handler,int,java.lang.Object)>($r14, 3, null);

        $r15 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r16 = virtualinvoke $r15.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r17 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r16.<com.android.internal.telephony.ServiceStateTracker: void registerForNrFrequencyChanged(android.os.Handler,int,java.lang.Object)>($r17, 4, null);

        $r18 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r19 = virtualinvoke $r18.<com.android.internal.telephony.Phone: com.android.internal.telephony.DeviceStateMonitor getDeviceStateMonitor()>();

        $r20 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r19.<com.android.internal.telephony.DeviceStateMonitor: void registerForPhysicalChannelConfigNotifChanged(android.os.Handler,int,java.lang.Object)>($r20, 6, null);

        $r21 = new android.content.IntentFilter;

        specialinvoke $r21.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r21.<android.content.IntentFilter: void addAction(java.lang.String)>("android.telephony.action.CARRIER_CONFIG_CHANGED");

        $r22 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r23 = virtualinvoke $r22.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r25 = r0.<com.android.internal.telephony.NetworkTypeController: android.content.BroadcastReceiver mIntentReceiver>;

        $r24 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        virtualinvoke $r23.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r25, $r21, null, $r24);

        return;
    }

    private void resetAllTimers()
    {
        com.android.internal.telephony.NetworkTypeController r0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void removeMessages(int)>(8);

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void removeMessages(int)>(9);

        r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPrimaryTimerActive> = 0;

        r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsSecondaryTimerActive> = 0;

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPrimaryTimerState> = "";

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mSecondaryTimerState> = "";

        return;
    }

    private void transitionToCurrentState()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int i0;
        com.android.internal.telephony.Phone $r1;
        android.telephony.ServiceState $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.internal.telephony.State r3;
        com.android.internal.telephony.NetworkTypeController$LegacyState r4;
        java.lang.String r5, r7;
        com.android.internal.telephony.NetworkTypeController$NrConnectedState r6;
        com.android.internal.telephony.IState $r8;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        i0 = virtualinvoke $r2.<android.telephony.ServiceState: int getDataNetworkType()>();

        if i0 == 20 goto label06;

        $z1 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isNrConnected()>();

        if $z1 == 0 goto label01;

        goto label06;

     label01:
        $z2 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isLte(int)>(i0);

        if $z2 == 0 goto label03;

        $z4 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isNrNotRestricted()>();

        if $z4 == 0 goto label03;

        $z5 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isPhysicalLinkActive()>();

        if $z5 == 0 goto label02;

        r3 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$LteConnectedState mLteConnectedState>;

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState> = "not_restricted_rrc_con";

        goto label09;

     label02:
        r3 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$IdleState mIdleState>;

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState> = "not_restricted_rrc_idle";

        goto label09;

     label03:
        r4 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$LegacyState mLegacyState>;

        $z3 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isNrRestricted()>();

        if $z3 == 0 goto label04;

        r5 = "restricted";

        goto label05;

     label04:
        r5 = "legacy";

     label05:
        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState> = r5;

        r3 = r4;

        goto label09;

     label06:
        r6 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.NetworkTypeController$NrConnectedState mNrConnectedState>;

        $z0 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: boolean isNrMmwave()>();

        if $z0 == 0 goto label07;

        r7 = "connected_mmwave";

        goto label08;

     label07:
        r7 = "connected";

     label08:
        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState> = r7;

        r3 = r6;

     label09:
        $r8 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.IState getCurrentState()>();

        $z6 = virtualinvoke r3.<java.lang.Object: boolean equals(java.lang.Object)>($r8);

        if $z6 != 0 goto label10;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void transitionTo(com.android.internal.telephony.IState)>(r3);

        goto label11;

     label10:
        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void updateOverrideNetworkType()>();

     label11:
        return;
    }

    private void transitionWithSecondaryTimerTo(com.android.internal.telephony.IState)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.IState r1, $r5, $r13;
        java.lang.String r2, $r6, $r12;
        com.android.internal.telephony.NetworkTypeController$OverrideTimerRule r3;
        java.util.Map $r7;
        java.lang.Object $r8;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r9;
        long $l3;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        r1 := @parameter0: com.android.internal.telephony.IState;

        $r5 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.IState getCurrentState()>();

        r2 = interfaceinvoke $r5.<com.android.internal.telephony.IState: java.lang.String getName()>();

        $r7 = r0.<com.android.internal.telephony.NetworkTypeController: java.util.Map mOverrideTimerRules>;

        $r6 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPrimaryTimerState>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r3 = (com.android.internal.telephony.NetworkTypeController$OverrideTimerRule) $r8;

        if r3 == null goto label1;

        $i0 = virtualinvoke r3.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: int getSecondaryTimer(java.lang.String)>(r2);

        if $i0 <= 0 goto label1;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Secondary timer started for state: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void log(java.lang.String)>($r12);

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mSecondaryTimerState> = r2;

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState> = r2;

        r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsSecondaryTimerActive> = 1;

        $i1 = virtualinvoke r3.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: int getSecondaryTimer(java.lang.String)>(r2);

        $i2 = $i1 * 1000;

        $l3 = (long) $i2;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void sendMessageDelayed(int,java.lang.Object,long)>(9, r1, $l3);

     label1:
        r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPrimaryTimerActive> = 0;

        $r13 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.IState getCurrentState()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void transitionTo(com.android.internal.telephony.IState)>($r13);

        return;
    }

    private void transitionWithTimerTo(com.android.internal.telephony.IState)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.IState r1, $r14;
        java.lang.String r2, $r5, $r10, $r12, $r13, $r15;
        com.android.internal.telephony.NetworkTypeController$OverrideTimerRule r3;
        java.util.Map $r6;
        java.lang.Object $r7;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r8;
        long $l3;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        r1 := @parameter0: com.android.internal.telephony.IState;

        r2 = interfaceinvoke r1.<com.android.internal.telephony.IState: java.lang.String getName()>();

        $r6 = r0.<com.android.internal.telephony.NetworkTypeController: java.util.Map mOverrideTimerRules>;

        $r5 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        r3 = (com.android.internal.telephony.NetworkTypeController$OverrideTimerRule) $r7;

        if r3 == null goto label1;

        $i0 = virtualinvoke r3.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: int getTimer(java.lang.String)>(r2);

        if $i0 <= 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Primary timer started for state: ");

        $r10 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void log(java.lang.String)>($r12);

        $r13 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState>;

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPrimaryTimerState> = $r13;

        $r14 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.IState getCurrentState()>();

        $r15 = interfaceinvoke $r14.<com.android.internal.telephony.IState: java.lang.String getName()>();

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState> = $r15;

        r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPrimaryTimerActive> = 1;

        $i1 = virtualinvoke r3.<com.android.internal.telephony.NetworkTypeController$OverrideTimerRule: int getTimer(java.lang.String)>(r2);

        $i2 = $i1 * 1000;

        $l3 = (long) $i2;

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void sendMessageDelayed(int,java.lang.Object,long)>(8, r1, $l3);

     label1:
        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void transitionTo(com.android.internal.telephony.IState)>(r1);

        return;
    }

    private void unRegisterForAllEvents()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        com.android.internal.telephony.Phone $r1, $r3, $r5, $r8, $r11, $r14, $r17;
        android.os.Handler $r2, $r4, $r7, $r10, $r13, $r16;
        com.android.internal.telephony.ServiceStateTracker $r6, $r9, $r12;
        com.android.internal.telephony.DeviceStateMonitor $r15;
        android.content.Context $r18;
        android.content.BroadcastReceiver $r19;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r1.<com.android.internal.telephony.Phone: void unregisterForRadioOffOrNotAvailable(android.os.Handler)>($r2);

        $r3 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r3.<com.android.internal.telephony.Phone: void unregisterForPreferredNetworkTypeChanged(android.os.Handler)>($r4);

        $r5 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r6 = virtualinvoke $r5.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r7 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r6.<com.android.internal.telephony.ServiceStateTracker: void unregisterForDataRegStateOrRatChanged(int,android.os.Handler)>(1, $r7);

        $r8 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r9 = virtualinvoke $r8.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r10 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r9.<com.android.internal.telephony.ServiceStateTracker: void unregisterForNrStateChanged(android.os.Handler)>($r10);

        $r11 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r12 = virtualinvoke $r11.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r13 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r12.<com.android.internal.telephony.ServiceStateTracker: void unregisterForNrFrequencyChanged(android.os.Handler)>($r13);

        $r14 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r15 = virtualinvoke $r14.<com.android.internal.telephony.Phone: com.android.internal.telephony.DeviceStateMonitor getDeviceStateMonitor()>();

        $r16 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: android.os.Handler getHandler()>();

        virtualinvoke $r15.<com.android.internal.telephony.DeviceStateMonitor: void unregisterForPhysicalChannelConfigNotifChanged(android.os.Handler)>($r16);

        $r17 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $r18 = virtualinvoke $r17.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r19 = r0.<com.android.internal.telephony.NetworkTypeController: android.content.BroadcastReceiver mIntentReceiver>;

        virtualinvoke $r18.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r19);

        return;
    }

    private void updateOverrideNetworkType()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        boolean $z0, $z1;
        int $i0;
        com.android.internal.telephony.DisplayInfoController $r1;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $z0 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPrimaryTimerActive>;

        if $z0 != 0 goto label2;

        $z1 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsSecondaryTimerActive>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $i0 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: int getCurrentOverrideNetworkType()>();

        r0.<com.android.internal.telephony.NetworkTypeController: int mOverrideNetworkType> = $i0;

        $r1 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.DisplayInfoController mDisplayInfoController>;

        virtualinvoke $r1.<com.android.internal.telephony.DisplayInfoController: void updateTelephonyDisplayInfo()>();

        return;

     label2:
        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void log(java.lang.String)>("Skip updating override network type since timer is active.");

        return;
    }

    private void updateTimers()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        java.lang.String r1, $r3, $r8, $r11, $r14, $r16;
        com.android.internal.telephony.IState $r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r4, $r12;
        int $i0, $i1;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.IState getCurrentState()>();

        r1 = interfaceinvoke $r2.<com.android.internal.telephony.IState: java.lang.String getName()>();

        $z0 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPrimaryTimerActive>;

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: int getOverrideNetworkType()>();

        $i1 = specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: int getCurrentOverrideNetworkType()>();

        if $i0 != $i1 goto label1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remove primary timer since icon of primary state and current icon equal: ");

        $r14 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPrimaryTimerState>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void log(java.lang.String)>($r16);

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void removeMessages(int)>(8);

        r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPrimaryTimerActive> = 0;

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPrimaryTimerState> = "";

     label1:
        $z2 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsSecondaryTimerActive>;

        if $z2 == 0 goto label2;

        $r3 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mSecondaryTimerState>;

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 != 0 goto label2;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Remove secondary timer since current state (");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is no longer secondary timer state (");

        $r8 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mSecondaryTimerState>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").");

        $r11 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void log(java.lang.String)>($r11);

        virtualinvoke r0.<com.android.internal.telephony.NetworkTypeController: void removeMessages(int)>(9);

        r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsSecondaryTimerActive> = 0;

        r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mSecondaryTimerState> = "";

     label2:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("connected_mmwave");

        if $z3 == 0 goto label3;

        specialinvoke r0.<com.android.internal.telephony.NetworkTypeController: void resetAllTimers()>();

     label3:
        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.internal.telephony.NetworkTypeController r0;
        java.lang.String[] r1;
        com.android.internal.telephony.IndentingPrintWriter $r2;
        java.lang.StringBuilder $r4, $r9, $r15, $r20, $r24, $r28, $r32, $r37, $r42;
        com.android.internal.telephony.Phone $r6;
        int $i0;
        java.lang.String $r8, $r12, $r14, $r17, $r19, $r23, $r27, $r31, $r34, $r36, $r39, $r41, $r44, $r46;
        java.util.Map $r11;
        boolean $z0, $z1, $z2;
        java.io.FileDescriptor r48;
        java.io.PrintWriter r49;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        r48 := @parameter0: java.io.FileDescriptor;

        r49 := @parameter1: java.io.PrintWriter;

        r1 := @parameter2: java.lang.String[];

        $r2 = new com.android.internal.telephony.IndentingPrintWriter;

        specialinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r49, " ");

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void print(java.lang.String)>("NetworkTypeController: ");

        specialinvoke r0.<com.android.internal.telephony.StateMachine: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r48, $r2, r1);

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void flush()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter increaseIndent()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSubId=");

        $r6 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r6.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r8);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mOverrideTimerRules=");

        $r11 = r0.<com.android.internal.telephony.NetworkTypeController: java.util.Map mOverrideTimerRules>;

        $r12 = virtualinvoke $r11.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLteEnhancedPattern=");

        $r17 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mLteEnhancedPattern>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mIsPhysicalChannelConfigOn=");

        $z0 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPhysicalChannelConfigOn>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mIsPrimaryTimerActive=");

        $z1 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPrimaryTimerActive>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mIsSecondaryTimerActive=");

        $z2 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsSecondaryTimerActive>;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPrimaryTimerState=");

        $r34 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPrimaryTimerState>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r36);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mSecondaryTimerState=");

        $r39 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mSecondaryTimerState>;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39);

        $r41 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r41);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPreviousState=");

        $r44 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState>;

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44);

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r46);

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void flush()>();

        return;
    }

    public int getOverrideNetworkType()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        int $i0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $i0 = r0.<com.android.internal.telephony.NetworkTypeController: int mOverrideNetworkType>;

        return $i0;
    }

    protected void log(java.lang.String)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        java.lang.String r1, $r9;
        java.lang.StringBuilder $r3;
        com.android.internal.telephony.Phone $r5;
        int $i0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r5.<com.android.internal.telephony.Phone: int getPhoneId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("NetworkTypeController", $r9);

        return;
    }

    protected void loge(java.lang.String)
    {
        com.android.internal.telephony.NetworkTypeController r0;
        java.lang.String r1, $r9;
        java.lang.StringBuilder $r3;
        com.android.internal.telephony.Phone $r5;
        int $i0;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r5 = r0.<com.android.internal.telephony.NetworkTypeController: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r5.<com.android.internal.telephony.Phone: int getPhoneId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("NetworkTypeController", $r9);

        return;
    }

    public java.lang.String toString()
    {
        com.android.internal.telephony.NetworkTypeController r0;
        java.lang.StringBuilder $r2;
        java.util.Map $r4;
        java.lang.String $r5, $r8, $r17, $r20, $r23, $r25;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.telephony.NetworkTypeController;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mOverrideTimerRules=");

        $r4 = r0.<com.android.internal.telephony.NetworkTypeController: java.util.Map mOverrideTimerRules>;

        $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mLteEnhancedPattern=");

        $r8 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mLteEnhancedPattern>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mIsPhysicalChannelConfigOn=");

        $z0 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPhysicalChannelConfigOn>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mIsPrimaryTimerActive=");

        $z1 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsPrimaryTimerActive>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mIsSecondaryTimerActive=");

        $z2 = r0.<com.android.internal.telephony.NetworkTypeController: boolean mIsSecondaryTimerActive>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mPrimaryTimerState=");

        $r17 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPrimaryTimerState>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mSecondaryTimerState=");

        $r20 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mSecondaryTimerState>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mPreviousState=");

        $r23 = r0.<com.android.internal.telephony.NetworkTypeController: java.lang.String mPreviousState>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        $r25 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r25;
    }
}
