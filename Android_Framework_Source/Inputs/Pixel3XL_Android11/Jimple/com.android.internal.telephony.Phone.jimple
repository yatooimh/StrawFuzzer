public abstract class com.android.internal.telephony.Phone extends android.os.Handler implements com.android.internal.telephony.PhoneInternalInterface
{
    private static final int ALREADY_IN_AUTO_SELECTION;
    private static final java.lang.String CDMA_NON_ROAMING_LIST_OVERRIDE_PREFIX;
    private static final java.lang.String CDMA_ROAMING_LIST_OVERRIDE_PREFIX;
    public static final java.lang.String CF_ID;
    public static final java.lang.String CF_STATUS;
    public static final java.lang.String CLIR_KEY;
    public static final java.lang.String CS_FALLBACK;
    public static final java.lang.String DATA_DISABLED_ON_BOOT_KEY;
    public static final java.lang.String DATA_ROAMING_IS_USER_SETTING_KEY;
    private static final int DEFAULT_REPORT_INTERVAL_MS;
    private static final java.lang.String DNS_SERVER_CHECK_DISABLED_KEY;
    private static final int EMERGENCY_SMS_NO_TIME_RECORDED;
    private static final int EMERGENCY_SMS_TIMER_MAX_MS;
    private static final int EVENT_ALL_DATA_DISCONNECTED;
    protected static final int EVENT_BARRING_INFO_CHANGED;
    protected static final int EVENT_CALL_RING;
    private static final int EVENT_CALL_RING_CONTINUE;
    protected static final int EVENT_CARRIER_CONFIG_CHANGED;
    protected static final int EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED;
    private static final int EVENT_CHECK_FOR_NETWORK_AUTOMATIC;
    private static final int EVENT_CONFIG_LCE;
    protected static final int EVENT_DEVICE_PROVISIONED_CHANGE;
    protected static final int EVENT_DEVICE_PROVISIONING_DATA_SETTING_CHANGE;
    protected static final int EVENT_EMERGENCY_CALLBACK_MODE_ENTER;
    protected static final int EVENT_EXIT_EMERGENCY_CALLBACK_RESPONSE;
    protected static final int EVENT_GET_AVAILABLE_NETWORKS_DONE;
    protected static final int EVENT_GET_BASEBAND_VERSION_DONE;
    protected static final int EVENT_GET_CALL_FORWARD_DONE;
    protected static final int EVENT_GET_DEVICE_IDENTITY_DONE;
    protected static final int EVENT_GET_IMEISV_DONE;
    protected static final int EVENT_GET_IMEI_DONE;
    protected static final int EVENT_GET_RADIO_CAPABILITY;
    private static final int EVENT_GET_SIM_STATUS_DONE;
    protected static final int EVENT_GET_UICC_APPS_ENABLEMENT_DONE;
    protected static final int EVENT_ICC_CHANGED;
    protected static final int EVENT_ICC_RECORD_EVENTS;
    private static final int EVENT_INITIATE_SILENT_REDIAL;
    protected static final int EVENT_LAST;
    private static final int EVENT_MMI_DONE;
    protected static final int EVENT_MODEM_RESET;
    protected static final int EVENT_NV_READY;
    protected static final int EVENT_RADIO_AVAILABLE;
    private static final int EVENT_RADIO_NOT_AVAILABLE;
    protected static final int EVENT_RADIO_OFF_OR_NOT_AVAILABLE;
    protected static final int EVENT_RADIO_ON;
    protected static final int EVENT_RADIO_STATE_CHANGED;
    protected static final int EVENT_REAPPLY_UICC_APPS_ENABLEMENT_DONE;
    protected static final int EVENT_REGISTERED_TO_NETWORK;
    protected static final int EVENT_REGISTRATION_FAILED;
    protected static final int EVENT_REQUEST_VOICE_RADIO_TECH_DONE;
    protected static final int EVENT_RIL_CONNECTED;
    protected static final int EVENT_RUIM_RECORDS_LOADED;
    protected static final int EVENT_SET_CALL_FORWARD_DONE;
    protected static final int EVENT_SET_CARRIER_DATA_ENABLED;
    protected static final int EVENT_SET_CLIR_COMPLETE;
    private static final int EVENT_SET_ENHANCED_VP;
    protected static final int EVENT_SET_NETWORK_AUTOMATIC;
    private static final int EVENT_SET_NETWORK_AUTOMATIC_COMPLETE;
    private static final int EVENT_SET_NETWORK_MANUAL_COMPLETE;
    protected static final int EVENT_SET_ROAMING_PREFERENCE_DONE;
    protected static final int EVENT_SET_VM_NUMBER_DONE;
    protected static final int EVENT_SIM_RECORDS_LOADED;
    protected static final int EVENT_SRVCC_STATE_CHANGED;
    protected static final int EVENT_SS;
    protected static final int EVENT_SSN;
    protected static final int EVENT_UICC_APPS_ENABLEMENT_SETTING_CHANGED;
    protected static final int EVENT_UICC_APPS_ENABLEMENT_STATUS_CHANGED;
    private static final int EVENT_UNSOL_OEM_HOOK_RAW;
    protected static final int EVENT_UPDATE_PHONE_OBJECT;
    protected static final int EVENT_USSD;
    protected static final int EVENT_VOICE_RADIO_TECH_CHANGED;
    protected static final int EVENT_VRS_OR_RAT_CHANGED;
    public static final java.lang.String EXTRA_KEY_ALERT_MESSAGE;
    public static final java.lang.String EXTRA_KEY_ALERT_SHOW;
    public static final java.lang.String EXTRA_KEY_ALERT_TITLE;
    public static final java.lang.String EXTRA_KEY_NOTIFICATION_MESSAGE;
    private static final java.lang.String GSM_NON_ROAMING_LIST_OVERRIDE_PREFIX;
    private static final java.lang.String GSM_ROAMING_LIST_OVERRIDE_PREFIX;
    private static final boolean LCE_PULL_MODE;
    private static final java.lang.String LOG_TAG;
    public static final java.lang.String NETWORK_SELECTION_KEY;
    public static final java.lang.String NETWORK_SELECTION_NAME_KEY;
    public static final java.lang.String NETWORK_SELECTION_SHORT_KEY;
    private static final java.lang.String VM_COUNT;
    private static final java.lang.String VM_ID;
    protected static final java.lang.Object lockForRadioTechnologyChange;
    protected final int USSD_MAX_QUEUE;
    private final java.lang.String mActionAttached;
    private final java.lang.String mActionDetached;
    private final com.android.internal.telephony.RegistrantList mAllDataDisconnectedRegistrants;
    private java.util.Map mAllowedNetworkTypesForReasons;
    private final com.android.internal.telephony.AppSmsManager mAppSmsManager;
    private int mCallRingContinueToken;
    private int mCallRingDelay;
    protected com.android.internal.telephony.CarrierActionAgent mCarrierActionAgent;
    private final com.android.internal.telephony.CarrierPrivilegesTracker mCarrierPrivilegesTracker;
    protected com.android.internal.telephony.CarrierResolver mCarrierResolver;
    protected com.android.internal.telephony.CarrierSignalAgent mCarrierSignalAgent;
    private final com.android.internal.telephony.RegistrantList mCellInfoRegistrants;
    public com.android.internal.telephony.CommandsInterface mCi;
    protected final android.content.Context mContext;
    protected com.android.internal.telephony.dataconnection.DataEnabledSettings mDataEnabledSettings;
    protected final android.util.SparseArray mDcTrackers;
    protected com.android.internal.telephony.DeviceStateMonitor mDeviceStateMonitor;
    protected final com.android.internal.telephony.RegistrantList mDisconnectRegistrants;
    protected com.android.internal.telephony.DisplayInfoController mDisplayInfoController;
    private boolean mDnsCheckDisabled;
    private boolean mDoesRilSendMultipleCallRing;
    protected boolean mEcmCanceledForEmergency;
    protected final com.android.internal.telephony.RegistrantList mEmergencyCallToggledRegistrants;
    private final com.android.internal.telephony.RegistrantList mHandoverRegistrants;
    protected final java.util.concurrent.atomic.AtomicReference mIccRecords;
    protected com.android.internal.telephony.Phone mImsPhone;
    private final com.android.internal.telephony.RegistrantList mIncomingRingRegistrants;
    protected boolean mIsPhoneInEcmState;
    protected boolean mIsVideoCapable;
    private boolean mIsVoiceCapable;
    private int mLceStatus;
    protected final com.android.internal.telephony.LocalLog mLocalLog;
    private android.os.Looper mLooper;
    protected final com.android.internal.telephony.RegistrantList mMmiCompleteRegistrants;
    protected final com.android.internal.telephony.RegistrantList mMmiRegistrants;
    private java.lang.String mName;
    private final com.android.internal.telephony.RegistrantList mNewRingingConnectionRegistrants;
    protected com.android.internal.telephony.PhoneNotifier mNotifier;
    private final com.android.internal.telephony.RegistrantList mOtaspRegistrants;
    protected int mPhoneId;
    private final com.android.internal.telephony.RegistrantList mPhysicalChannelConfigRegistrants;
    protected com.android.internal.telephony.Registrant mPostDialHandler;
    private final com.android.internal.telephony.RegistrantList mPreciseCallStateRegistrants;
    private final com.android.internal.telephony.RegistrantList mPreferredNetworkTypeRegistrants;
    private final java.util.concurrent.atomic.AtomicReference mRadioCapability;
    protected final com.android.internal.telephony.RegistrantList mRadioOffOrNotAvailableRegistrants;
    private final com.android.internal.telephony.RegistrantList mRedialRegistrants;
    private final com.android.internal.telephony.RegistrantList mServiceStateRegistrants;
    private com.android.internal.telephony.SimActivationTracker mSimActivationTracker;
    protected final com.android.internal.telephony.RegistrantList mSimRecordsLoadedRegistrants;
    protected com.android.internal.telephony.test.SimulatedRadioControl mSimulatedRadioControl;
    public com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor;
    public com.android.internal.telephony.SmsUsageMonitor mSmsUsageMonitor;
    protected final com.android.internal.telephony.RegistrantList mSuppServiceFailedRegistrants;
    protected com.android.internal.telephony.TelephonyComponentFactory mTelephonyComponentFactory;
    com.android.internal.telephony.TelephonyTester mTelephonyTester;
    private volatile long mTimeLastEmergencySmsSentMs;
    protected com.android.internal.telephony.dataconnection.TransportManager mTransportManager;
    protected java.util.concurrent.atomic.AtomicReference mUiccApplication;
    protected com.android.internal.telephony.uicc.UiccController mUiccController;
    private boolean mUnitTestMode;
    protected final com.android.internal.telephony.RegistrantList mUnknownConnectionRegistrants;
    private final com.android.internal.telephony.RegistrantList mVideoCapabilityChangedRegistrants;
    protected int mVmCount;
    protected com.android.internal.telephony.metrics.VoiceCallSessionStats mVoiceCallSessionStats;

    static void <clinit>()
    {
        java.lang.Object $r0;

        <com.android.internal.telephony.Phone: java.lang.String VM_ID> = "vm_id_key";

        <com.android.internal.telephony.Phone: java.lang.String VM_COUNT> = "vm_count_key";

        <com.android.internal.telephony.Phone: java.lang.String NETWORK_SELECTION_SHORT_KEY> = "network_selection_short_key";

        <com.android.internal.telephony.Phone: java.lang.String NETWORK_SELECTION_NAME_KEY> = "network_selection_name_key";

        <com.android.internal.telephony.Phone: java.lang.String NETWORK_SELECTION_KEY> = "network_selection_key";

        <com.android.internal.telephony.Phone: java.lang.String LOG_TAG> = "Phone";

        <com.android.internal.telephony.Phone: boolean LCE_PULL_MODE> = 1;

        <com.android.internal.telephony.Phone: java.lang.String GSM_ROAMING_LIST_OVERRIDE_PREFIX> = "gsm_roaming_list_";

        <com.android.internal.telephony.Phone: java.lang.String GSM_NON_ROAMING_LIST_OVERRIDE_PREFIX> = "gsm_non_roaming_list_";

        <com.android.internal.telephony.Phone: java.lang.String EXTRA_KEY_NOTIFICATION_MESSAGE> = "notificationMessage";

        <com.android.internal.telephony.Phone: java.lang.String EXTRA_KEY_ALERT_TITLE> = "android.telephony.ims.extra.WFC_REGISTRATION_FAILURE_TITLE";

        <com.android.internal.telephony.Phone: java.lang.String EXTRA_KEY_ALERT_SHOW> = "alertShow";

        <com.android.internal.telephony.Phone: java.lang.String EXTRA_KEY_ALERT_MESSAGE> = "android.telephony.ims.extra.WFC_REGISTRATION_FAILURE_MESSAGE";

        <com.android.internal.telephony.Phone: int EVENT_VRS_OR_RAT_CHANGED> = 46;

        <com.android.internal.telephony.Phone: int EVENT_VOICE_RADIO_TECH_CHANGED> = 39;

        <com.android.internal.telephony.Phone: int EVENT_USSD> = 7;

        <com.android.internal.telephony.Phone: int EVENT_UPDATE_PHONE_OBJECT> = 42;

        <com.android.internal.telephony.Phone: int EVENT_UNSOL_OEM_HOOK_RAW> = 34;

        <com.android.internal.telephony.Phone: int EVENT_UICC_APPS_ENABLEMENT_STATUS_CHANGED> = 53;

        <com.android.internal.telephony.Phone: int EVENT_UICC_APPS_ENABLEMENT_SETTING_CHANGED> = 54;

        <com.android.internal.telephony.Phone: int EVENT_SSN> = 2;

        <com.android.internal.telephony.Phone: int EVENT_SS> = 36;

        <com.android.internal.telephony.Phone: int EVENT_SRVCC_STATE_CHANGED> = 31;

        <com.android.internal.telephony.Phone: int EVENT_SIM_RECORDS_LOADED> = 3;

        <com.android.internal.telephony.Phone: int EVENT_SET_VM_NUMBER_DONE> = 20;

        <com.android.internal.telephony.Phone: int EVENT_SET_ROAMING_PREFERENCE_DONE> = 44;

        <com.android.internal.telephony.Phone: int EVENT_SET_NETWORK_MANUAL_COMPLETE> = 16;

        <com.android.internal.telephony.Phone: int EVENT_SET_NETWORK_AUTOMATIC_COMPLETE> = 17;

        <com.android.internal.telephony.Phone: int EVENT_SET_NETWORK_AUTOMATIC> = 28;

        <com.android.internal.telephony.Phone: int EVENT_SET_ENHANCED_VP> = 24;

        <com.android.internal.telephony.Phone: int EVENT_SET_CLIR_COMPLETE> = 18;

        <com.android.internal.telephony.Phone: int EVENT_SET_CARRIER_DATA_ENABLED> = 48;

        <com.android.internal.telephony.Phone: int EVENT_SET_CALL_FORWARD_DONE> = 12;

        <com.android.internal.telephony.Phone: int EVENT_RUIM_RECORDS_LOADED> = 22;

        <com.android.internal.telephony.Phone: int EVENT_RIL_CONNECTED> = 41;

        <com.android.internal.telephony.Phone: int EVENT_REQUEST_VOICE_RADIO_TECH_DONE> = 40;

        <com.android.internal.telephony.Phone: int EVENT_REGISTRATION_FAILED> = 57;

        <com.android.internal.telephony.Phone: int EVENT_REGISTERED_TO_NETWORK> = 19;

        <com.android.internal.telephony.Phone: int EVENT_REAPPLY_UICC_APPS_ENABLEMENT_DONE> = 56;

        <com.android.internal.telephony.Phone: int EVENT_RADIO_STATE_CHANGED> = 47;

        <com.android.internal.telephony.Phone: int EVENT_RADIO_ON> = 5;

        <com.android.internal.telephony.Phone: int EVENT_RADIO_OFF_OR_NOT_AVAILABLE> = 8;

        <com.android.internal.telephony.Phone: int EVENT_RADIO_NOT_AVAILABLE> = 33;

        <com.android.internal.telephony.Phone: int EVENT_RADIO_AVAILABLE> = 1;

        <com.android.internal.telephony.Phone: int EVENT_NV_READY> = 23;

        <com.android.internal.telephony.Phone: int EVENT_MODEM_RESET> = 45;

        <com.android.internal.telephony.Phone: int EVENT_MMI_DONE> = 4;

        <com.android.internal.telephony.Phone: int EVENT_LAST> = 58;

        <com.android.internal.telephony.Phone: int EVENT_INITIATE_SILENT_REDIAL> = 32;

        <com.android.internal.telephony.Phone: int EVENT_ICC_RECORD_EVENTS> = 29;

        <com.android.internal.telephony.Phone: int EVENT_ICC_CHANGED> = 30;

        <com.android.internal.telephony.Phone: int EVENT_GET_UICC_APPS_ENABLEMENT_DONE> = 55;

        <com.android.internal.telephony.Phone: int EVENT_GET_SIM_STATUS_DONE> = 11;

        <com.android.internal.telephony.Phone: int EVENT_GET_RADIO_CAPABILITY> = 35;

        <com.android.internal.telephony.Phone: int EVENT_GET_IMEI_DONE> = 9;

        <com.android.internal.telephony.Phone: int EVENT_GET_IMEISV_DONE> = 10;

        <com.android.internal.telephony.Phone: int EVENT_GET_DEVICE_IDENTITY_DONE> = 21;

        <com.android.internal.telephony.Phone: int EVENT_GET_CALL_FORWARD_DONE> = 13;

        <com.android.internal.telephony.Phone: int EVENT_GET_BASEBAND_VERSION_DONE> = 6;

        <com.android.internal.telephony.Phone: int EVENT_GET_AVAILABLE_NETWORKS_DONE> = 51;

        <com.android.internal.telephony.Phone: int EVENT_EXIT_EMERGENCY_CALLBACK_RESPONSE> = 26;

        <com.android.internal.telephony.Phone: int EVENT_EMERGENCY_CALLBACK_MODE_ENTER> = 25;

        <com.android.internal.telephony.Phone: int EVENT_DEVICE_PROVISIONING_DATA_SETTING_CHANGE> = 50;

        <com.android.internal.telephony.Phone: int EVENT_DEVICE_PROVISIONED_CHANGE> = 49;

        <com.android.internal.telephony.Phone: int EVENT_CONFIG_LCE> = 37;

        <com.android.internal.telephony.Phone: int EVENT_CHECK_FOR_NETWORK_AUTOMATIC> = 38;

        <com.android.internal.telephony.Phone: int EVENT_CDMA_SUBSCRIPTION_SOURCE_CHANGED> = 27;

        <com.android.internal.telephony.Phone: int EVENT_CARRIER_CONFIG_CHANGED> = 43;

        <com.android.internal.telephony.Phone: int EVENT_CALL_RING_CONTINUE> = 15;

        <com.android.internal.telephony.Phone: int EVENT_CALL_RING> = 14;

        <com.android.internal.telephony.Phone: int EVENT_BARRING_INFO_CHANGED> = 58;

        <com.android.internal.telephony.Phone: int EVENT_ALL_DATA_DISCONNECTED> = 52;

        <com.android.internal.telephony.Phone: int EMERGENCY_SMS_TIMER_MAX_MS> = 300000;

        <com.android.internal.telephony.Phone: int EMERGENCY_SMS_NO_TIME_RECORDED> = -1;

        <com.android.internal.telephony.Phone: java.lang.String DNS_SERVER_CHECK_DISABLED_KEY> = "dns_server_check_disabled_key";

        <com.android.internal.telephony.Phone: int DEFAULT_REPORT_INTERVAL_MS> = 200;

        <com.android.internal.telephony.Phone: java.lang.String DATA_ROAMING_IS_USER_SETTING_KEY> = "data_roaming_is_user_setting_key";

        <com.android.internal.telephony.Phone: java.lang.String DATA_DISABLED_ON_BOOT_KEY> = "disabled_on_boot_key";

        <com.android.internal.telephony.Phone: java.lang.String CS_FALLBACK> = "cs_fallback";

        <com.android.internal.telephony.Phone: java.lang.String CLIR_KEY> = "clir_sub_key";

        <com.android.internal.telephony.Phone: java.lang.String CF_STATUS> = "cf_status_key";

        <com.android.internal.telephony.Phone: java.lang.String CF_ID> = "cf_id_key";

        <com.android.internal.telephony.Phone: java.lang.String CDMA_ROAMING_LIST_OVERRIDE_PREFIX> = "cdma_roaming_list_";

        <com.android.internal.telephony.Phone: java.lang.String CDMA_NON_ROAMING_LIST_OVERRIDE_PREFIX> = "cdma_non_roaming_list_";

        <com.android.internal.telephony.Phone: int ALREADY_IN_AUTO_SELECTION> = 1;

        $r0 = new java.lang.Object;

        specialinvoke $r0.<java.lang.Object: void <init>()>();

        <com.android.internal.telephony.Phone: java.lang.Object lockForRadioTechnologyChange> = $r0;

        return;
    }

    protected void <init>(java.lang.String, com.android.internal.telephony.PhoneNotifier, android.content.Context, com.android.internal.telephony.CommandsInterface, boolean)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        com.android.internal.telephony.PhoneNotifier r2;
        android.content.Context r3;
        com.android.internal.telephony.CommandsInterface r4;
        boolean z0;
        com.android.internal.telephony.TelephonyComponentFactory $r5;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.PhoneNotifier;

        r3 := @parameter2: android.content.Context;

        r4 := @parameter3: com.android.internal.telephony.CommandsInterface;

        z0 := @parameter4: boolean;

        $r5 = staticinvoke <com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory getInstance()>();

        specialinvoke r0.<com.android.internal.telephony.Phone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean,int,com.android.internal.telephony.TelephonyComponentFactory)>(r1, r2, r3, r4, z0, 2147483647, $r5);

        return;
    }

    protected void <init>(java.lang.String, com.android.internal.telephony.PhoneNotifier, android.content.Context, com.android.internal.telephony.CommandsInterface, boolean, int, com.android.internal.telephony.TelephonyComponentFactory)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.PhoneNotifier r1;
        android.content.Context r2, $r55;
        com.android.internal.telephony.CommandsInterface r3, $r51, $r87, $r89;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        int i0, $i2, $i3, $i5, $i6;
        com.android.internal.telephony.TelephonyComponentFactory r4, $r47, $r75, $r78, $r80, $r83, $r85;
        android.util.SparseArray $r5;
        java.util.concurrent.atomic.AtomicReference $r6, $r7, $r8;
        com.android.internal.telephony.RegistrantList $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;
        java.util.HashMap $r29;
        android.os.Looper $r30, $r56;
        java.lang.StringBuilder $r31, $r38, $r61, $r69;
        java.lang.Class $r32, $r39, $r45, $r73, $r77, $r82;
        java.lang.Package $r33, $r40;
        java.lang.String $r34, $r37, $r41, $r44, $r46, $r64, $r72, $r74, $r79, $r84, r91;
        com.android.internal.telephony.AppSmsManager $r48;
        com.android.internal.telephony.LocalLog $r49;
        android.content.SharedPreferences $r50;
        java.lang.Object $r52, $r59, $r67;
        android.telephony.TelephonyManager $r53;
        com.android.internal.telephony.CarrierPrivilegesTracker $r54;
        java.util.Optional $r57, $r65;
        java.lang.Boolean $r58, $r60;
        java.lang.Integer $r66, $r68;
        com.android.internal.telephony.SmsStorageMonitor $r76;
        com.android.internal.telephony.SmsUsageMonitor $r81;
        com.android.internal.telephony.SimActivationTracker $r86;
        android.os.Message $r88;
        com.android.internal.telephony.TelephonyTester $r90;
        com.android.internal.telephony.uicc.UiccController r96;

        r0 := @this: com.android.internal.telephony.Phone;

        r91 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.internal.telephony.PhoneNotifier;

        r2 := @parameter2: android.content.Context;

        r3 := @parameter3: com.android.internal.telephony.CommandsInterface;

        z0 := @parameter4: boolean;

        i0 := @parameter5: int;

        r4 := @parameter6: com.android.internal.telephony.TelephonyComponentFactory;

        specialinvoke r0.<android.os.Handler: void <init>()>();

        r0.<com.android.internal.telephony.Phone: int USSD_MAX_QUEUE> = 10;

        r0.<com.android.internal.telephony.Phone: int mVmCount> = 0;

        $r5 = new android.util.SparseArray;

        specialinvoke $r5.<android.util.SparseArray: void <init>()>();

        r0.<com.android.internal.telephony.Phone: android.util.SparseArray mDcTrackers> = $r5;

        r0.<com.android.internal.telephony.Phone: boolean mIsVoiceCapable> = 1;

        r0.<com.android.internal.telephony.Phone: boolean mIsPhoneInEcmState> = 0;

        r0.<com.android.internal.telephony.Phone: boolean mEcmCanceledForEmergency> = 0;

        r0.<com.android.internal.telephony.Phone: long mTimeLastEmergencySmsSentMs> = -1L;

        r0.<com.android.internal.telephony.Phone: boolean mIsVideoCapable> = 0;

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.uicc.UiccController mUiccController> = null;

        $r6 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mIccRecords> = $r6;

        $r7 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r7.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mUiccApplication> = $r7;

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone> = null;

        $r8 = new java.util.concurrent.atomic.AtomicReference;

        specialinvoke $r8.<java.util.concurrent.atomic.AtomicReference: void <init>()>();

        r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mRadioCapability> = $r8;

        r0.<com.android.internal.telephony.Phone: int mLceStatus> = -1;

        $r9 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r9.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPreciseCallStateRegistrants> = $r9;

        $r10 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r10.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mHandoverRegistrants> = $r10;

        $r11 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r11.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mNewRingingConnectionRegistrants> = $r11;

        $r12 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r12.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mIncomingRingRegistrants> = $r12;

        $r13 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r13.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mDisconnectRegistrants> = $r13;

        $r14 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r14.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mServiceStateRegistrants> = $r14;

        $r15 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r15.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mMmiCompleteRegistrants> = $r15;

        $r16 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r16.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mMmiRegistrants> = $r16;

        $r17 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r17.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mUnknownConnectionRegistrants> = $r17;

        $r18 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r18.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mSuppServiceFailedRegistrants> = $r18;

        $r19 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r19.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mRadioOffOrNotAvailableRegistrants> = $r19;

        $r20 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r20.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mSimRecordsLoadedRegistrants> = $r20;

        $r21 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r21.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mVideoCapabilityChangedRegistrants> = $r21;

        $r22 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r22.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mEmergencyCallToggledRegistrants> = $r22;

        $r23 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r23.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mAllDataDisconnectedRegistrants> = $r23;

        $r24 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r24.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mCellInfoRegistrants> = $r24;

        $r25 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r25.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mRedialRegistrants> = $r25;

        $r26 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r26.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPhysicalChannelConfigRegistrants> = $r26;

        $r27 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r27.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mOtaspRegistrants> = $r27;

        $r28 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r28.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPreferredNetworkTypeRegistrants> = $r28;

        $r29 = new java.util.HashMap;

        specialinvoke $r29.<java.util.HashMap: void <init>()>();

        r0.<com.android.internal.telephony.Phone: java.util.Map mAllowedNetworkTypesForReasons> = $r29;

        r0.<com.android.internal.telephony.Phone: int mPhoneId> = i0;

        r0.<com.android.internal.telephony.Phone: java.lang.String mName> = r91;

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier> = r1;

        r0.<com.android.internal.telephony.Phone: android.content.Context mContext> = r2;

        $r30 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        r0.<com.android.internal.telephony.Phone: android.os.Looper mLooper> = $r30;

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi> = r3;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>()>();

        $r32 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r33 = virtualinvoke $r32.<java.lang.Class: java.lang.Package getPackage()>();

        $r34 = virtualinvoke $r33.<java.lang.Package: java.lang.String getName()>();

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".action_detached");

        $r37 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.internal.telephony.Phone: java.lang.String mActionDetached> = $r37;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        $r39 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>();

        $r40 = virtualinvoke $r39.<java.lang.Class: java.lang.Package getPackage()>();

        $r41 = virtualinvoke $r40.<java.lang.Package: java.lang.String getName()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".action_attached");

        $r44 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        r0.<com.android.internal.telephony.Phone: java.lang.String mActionAttached> = $r44;

        $r45 = class "Lcom/android/internal/telephony/AppSmsManager;";

        $r46 = virtualinvoke $r45.<java.lang.Class: java.lang.String getName()>();

        $r47 = virtualinvoke r4.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory inject(java.lang.String)>($r46);

        $r48 = virtualinvoke $r47.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.AppSmsManager makeAppSmsManager(android.content.Context)>(r2);

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.AppSmsManager mAppSmsManager> = $r48;

        $r49 = new com.android.internal.telephony.LocalLog;

        specialinvoke $r49.<com.android.internal.telephony.LocalLog: void <init>(int)>(64);

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.LocalLog mLocalLog> = $r49;

        $z1 = <com.android.internal.telephony.util.TelephonyUtils: boolean IS_DEBUGGABLE>;

        if $z1 == 0 goto label1;

        $r90 = new com.android.internal.telephony.TelephonyTester;

        specialinvoke $r90.<com.android.internal.telephony.TelephonyTester: void <init>(com.android.internal.telephony.Phone)>(r0);

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.TelephonyTester mTelephonyTester> = $r90;

     label1:
        specialinvoke r0.<com.android.internal.telephony.Phone: void setUnitTestMode(boolean)>(z0);

        $r50 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>(r2);

        $z2 = interfaceinvoke $r50.<android.content.SharedPreferences: boolean getBoolean(java.lang.String,boolean)>("dns_server_check_disabled_key", 0);

        r0.<com.android.internal.telephony.Phone: boolean mDnsCheckDisabled> = $z2;

        $r51 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r51.<com.android.internal.telephony.CommandsInterface: void setOnCallRing(android.os.Handler,int,java.lang.Object)>(r0, 14, null);

        $r52 = virtualinvoke r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r53 = (android.telephony.TelephonyManager) $r52;

        $z3 = virtualinvoke $r53.<android.telephony.TelephonyManager: boolean isVoiceCapable()>();

        r0.<com.android.internal.telephony.Phone: boolean mIsVoiceCapable> = $z3;

        $r54 = new com.android.internal.telephony.CarrierPrivilegesTracker;

        $r56 = r0.<com.android.internal.telephony.Phone: android.os.Looper mLooper>;

        $r55 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        specialinvoke $r54.<com.android.internal.telephony.CarrierPrivilegesTracker: void <init>(android.os.Looper,com.android.internal.telephony.Phone,android.content.Context)>($r56, r0, $r55);

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierPrivilegesTracker mCarrierPrivilegesTracker> = $r54;

        $r57 = staticinvoke <android.internal.telephony.sysprop.TelephonyProperties: java.util.Optional ril_sends_multiple_call_ring()>();

        $r58 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        $r59 = virtualinvoke $r57.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r58);

        $r60 = (java.lang.Boolean) $r59;

        $z4 = virtualinvoke $r60.<java.lang.Boolean: boolean booleanValue()>();

        r0.<com.android.internal.telephony.Phone: boolean mDoesRilSendMultipleCallRing> = $z4;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mDoesRilSendMultipleCallRing=");

        $z5 = r0.<com.android.internal.telephony.Phone: boolean mDoesRilSendMultipleCallRing>;

        virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r64 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r64);

        $r65 = staticinvoke <android.internal.telephony.sysprop.TelephonyProperties: java.util.Optional call_ring_delay()>();

        $r66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3000);

        $r67 = virtualinvoke $r65.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r66);

        $r68 = (java.lang.Integer) $r67;

        $i2 = virtualinvoke $r68.<java.lang.Integer: int intValue()>();

        r0.<com.android.internal.telephony.Phone: int mCallRingDelay> = $i2;

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCallRingDelay=");

        $i3 = r0.<com.android.internal.telephony.Phone: int mCallRingDelay>;

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r72 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r72);

        $i5 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getPhoneType()>();

        if $i5 != 5 goto label2;

        return;

     label2:
        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.TelephonyComponentFactory mTelephonyComponentFactory> = r4;

        $r73 = class "Lcom/android/internal/telephony/SmsStorageMonitor;";

        $r74 = virtualinvoke $r73.<java.lang.Class: java.lang.String getName()>();

        $r75 = virtualinvoke r4.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory inject(java.lang.String)>($r74);

        $r76 = virtualinvoke $r75.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.SmsStorageMonitor makeSmsStorageMonitor(com.android.internal.telephony.Phone)>(r0);

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor> = $r76;

        $r78 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.TelephonyComponentFactory mTelephonyComponentFactory>;

        $r77 = class "Lcom/android/internal/telephony/SmsUsageMonitor;";

        $r79 = virtualinvoke $r77.<java.lang.Class: java.lang.String getName()>();

        $r80 = virtualinvoke $r78.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory inject(java.lang.String)>($r79);

        $r81 = virtualinvoke $r80.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.SmsUsageMonitor makeSmsUsageMonitor(android.content.Context)>(r2);

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.SmsUsageMonitor mSmsUsageMonitor> = $r81;

        r96 = staticinvoke <com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccController getInstance()>();

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.uicc.UiccController mUiccController> = r96;

        virtualinvoke r96.<com.android.internal.telephony.uicc.UiccController: void registerForIccChanged(android.os.Handler,int,java.lang.Object)>(r0, 30, null);

        $r83 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.TelephonyComponentFactory mTelephonyComponentFactory>;

        $r82 = class "Lcom/android/internal/telephony/SimActivationTracker;";

        $r84 = virtualinvoke $r82.<java.lang.Class: java.lang.String getName()>();

        $r85 = virtualinvoke $r83.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory inject(java.lang.String)>($r84);

        $r86 = virtualinvoke $r85.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.SimActivationTracker makeSimActivationTracker(com.android.internal.telephony.Phone)>(r0);

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.SimActivationTracker mSimActivationTracker> = $r86;

        $i6 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getPhoneType()>();

        if $i6 == 3 goto label3;

        $r89 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r89.<com.android.internal.telephony.CommandsInterface: void registerForSrvccStateChanged(android.os.Handler,int,java.lang.Object)>(r0, 31, null);

     label3:
        $r87 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r88 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.os.Message obtainMessage(int)>(37);

        interfaceinvoke $r87.<com.android.internal.telephony.CommandsInterface: void startLceService(int,boolean,android.os.Message)>(200, 1, $r88);

        return;
    }

    private void checkCorrectThread(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        android.os.Looper $r2, $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = virtualinvoke r1.<android.os.Handler: android.os.Looper getLooper()>();

        $r3 = r0.<com.android.internal.telephony.Phone: android.os.Looper mLooper>;

        if $r2 != $r3 goto label1;

        return;

     label1:
        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("com.android.internal.telephony.Phone must be used from within one thread");

        throw $r4;
    }

    public static void checkWfcWifiOnlyModeBeforeDial(com.android.internal.telephony.Phone, int, android.content.Context) throws com.android.internal.telephony.CallStateException
    {
        android.content.Context r0;
        boolean $z0, $z1, $z2, z3;
        com.android.internal.telephony.CallStateException $r1;
        int $i0, i1;
        com.android.internal.telephony.Phone r2;
        com.android.ims.ImsManager r3;

        r2 := @parameter0: com.android.internal.telephony.Phone;

        i1 := @parameter1: int;

        r0 := @parameter2: android.content.Context;

        if r2 == null goto label1;

        $z2 = virtualinvoke r2.<com.android.internal.telephony.Phone: boolean isWifiCallingEnabled()>();

        if $z2 != 0 goto label4;

     label1:
        r3 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>(r0, i1);

        $z0 = virtualinvoke r3.<com.android.ims.ImsManager: boolean isWfcEnabledByPlatform()>();

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r3.<com.android.ims.ImsManager: boolean isWfcEnabledByUser()>();

        if $z1 == 0 goto label2;

        $i0 = virtualinvoke r3.<com.android.ims.ImsManager: int getWfcMode()>();

        if $i0 != 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        if z3 != 0 goto label5;

     label4:
        return;

     label5:
        $r1 = new com.android.internal.telephony.CallStateException;

        specialinvoke $r1.<com.android.internal.telephony.CallStateException: void <init>(int,java.lang.String)>(1, "WFC Wi-Fi Only Mode: IMS not registered");

        throw $r1;
    }

    private void clearSavedNetworkSelection()
    {
        com.android.internal.telephony.Phone r0;
        android.content.Context $r1;
        android.content.SharedPreferences $r2;
        java.lang.StringBuilder $r3, $r7, $r11;
        int $i0, $i1, $i2;
        java.lang.String $r6, $r10, $r14;
        android.content.SharedPreferences$Editor $r15, r16, r18, r20;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r2 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r1);

        r16 = interfaceinvoke $r2.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network_selection_key");

        $i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r18 = interfaceinvoke r16.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network_selection_name_key");

        $i1 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        r20 = interfaceinvoke r18.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network_selection_short_key");

        $i2 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = interfaceinvoke r20.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>($r14);

        interfaceinvoke $r15.<android.content.SharedPreferences$Editor: boolean commit()>();

        return;
    }

    private long getAllowedNetworkTypes()
    {
        com.android.internal.telephony.Phone r0;
        long l0, l3;
        com.android.internal.telephony.SubscriptionController $r1, $r2;
        int $i1;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.internal.telephony.Phone;

        l0 = staticinvoke <android.telephony.TelephonyManager: long getAllNetworkTypesBitmask()>();

        l3 = l0;

        $r1 = staticinvoke <com.android.internal.telephony.SubscriptionController: com.android.internal.telephony.SubscriptionController getInstance()>();

        if $r1 == null goto label4;

        $r2 = staticinvoke <com.android.internal.telephony.SubscriptionController: com.android.internal.telephony.SubscriptionController getInstance()>();

        $i1 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        r4 = virtualinvoke $r2.<com.android.internal.telephony.SubscriptionController: java.lang.String getSubscriptionProperty(int,java.lang.String)>($i1, "allowed_network_types");

        l3 = l0;

        if r4 == null goto label4;

     label1:
        l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r4);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "allowedNetworkTypes NumberFormat exception");

        l3 = l0;

     label4:
        return l3;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    private long getAllowedNetworkTypesForAllReasons()
    {
        com.android.internal.telephony.Phone r0;
        java.util.Map r1, $r2;
        java.util.Collection $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Long $r5;
        long $l0, l1;
        java.lang.Throwable $r6;
        java.util.Iterator r7;

        r0 := @this: com.android.internal.telephony.Phone;

        l1 = staticinvoke <android.telephony.TelephonyManager: long getAllNetworkTypesBitmask()>();

        r1 = r0.<com.android.internal.telephony.Phone: java.util.Map mAllowedNetworkTypesForReasons>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.internal.telephony.Phone: java.util.Map mAllowedNetworkTypesForReasons>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>();

        r7 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>();

        $r5 = (java.lang.Long) $r4;

        $l0 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        l1 = l1 & $l0;

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        return l1;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private int getCallForwardingIndicatorFromSharedPref()
    {
        com.android.internal.telephony.Phone r0;
        int i0, i1, i6;
        boolean $z0, $z1, z2;
        java.lang.StringBuilder $r1, $r6, $r10, $r19;
        java.lang.String $r4, $r9, $r15, $r16, $r22, r26;
        android.content.Context $r5;
        android.content.SharedPreferences r23;
        android.content.SharedPreferences$Editor r28;

        r0 := @this: com.android.internal.telephony.Phone;

        i6 = 0;

        i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>(i0);

        if $z0 == 0 goto label5;

        $r5 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        r23 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cf_status_key");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        i1 = interfaceinvoke r23.<android.content.SharedPreferences: int getInt(java.lang.String,int)>($r9, -1);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCallForwardingIndicatorFromSharedPref: for subId ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r15);

        i6 = i1;

        if i1 != -1 goto label4;

        r26 = interfaceinvoke r23.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("cf_id_key", null);

        i6 = i1;

        if r26 == null goto label4;

        $r16 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.lang.String getSubscriberId()>();

        $z1 = virtualinvoke r26.<java.lang.String: boolean equals(java.lang.Object)>($r16);

        if $z1 == 0 goto label2;

        z2 = 0;

        i6 = interfaceinvoke r23.<android.content.SharedPreferences: int getInt(java.lang.String,int)>("cf_status_key", 0);

        if i6 != 1 goto label1;

        z2 = 1;

     label1:
        specialinvoke r0.<com.android.internal.telephony.Phone: void setCallForwardingIndicatorInSharedPref(boolean)>(z2);

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCallForwardingIndicatorFromSharedPref: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r22);

        goto label3;

     label2:
        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "getCallForwardingIndicatorFromSharedPref: returning DISABLED as status for matching subscriberId not found");

        i6 = i1;

     label3:
        r28 = interfaceinvoke r23.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        interfaceinvoke r28.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>("cf_id_key");

        interfaceinvoke r28.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>("cf_status_key");

        interfaceinvoke r28.<android.content.SharedPreferences$Editor: void apply()>();

     label4:
        goto label6;

     label5:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCallForwardingIndicatorFromSharedPref: invalid subId ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", $r4);

     label6:
        return i6;
    }

    protected static boolean getInEcmMode()
    {
        java.util.Optional $r0;
        java.lang.Boolean $r1, $r3;
        java.lang.Object $r2;
        boolean $z0;

        $r0 = staticinvoke <android.internal.telephony.sysprop.TelephonyProperties: java.util.Optional in_ecm_mode()>();

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r2 = virtualinvoke $r0.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r1);

        $r3 = (java.lang.Boolean) $r2;

        $z0 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    private boolean getRoamingOverrideHelper(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1, r2, $r9, r10;
        android.content.SharedPreferences r3;
        boolean $z0, $z1, $z2;
        android.content.Context $r5;
        java.lang.StringBuilder $r6;
        java.util.Set r11;

        r0 := @this: com.android.internal.telephony.Phone;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.lang.String getIccSerialNumber()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label3;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label1;

        goto label3;

     label1:
        $r5 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        r3 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r5);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        r11 = interfaceinvoke r3.<android.content.SharedPreferences: java.util.Set getStringSet(java.lang.String,java.util.Set)>($r9, null);

        if r11 != null goto label2;

        return 0;

     label2:
        $z2 = interfaceinvoke r11.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z2;

     label3:
        return 0;
    }

    private static int getVideoState(com.android.internal.telephony.Call)
    {
        com.android.internal.telephony.Call r0;
        int i0;
        com.android.internal.telephony.Connection r1;

        r0 := @parameter0: com.android.internal.telephony.Call;

        i0 = 0;

        r1 = virtualinvoke r0.<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getEarliestConnection()>();

        if r1 == null goto label1;

        i0 = virtualinvoke r1.<com.android.internal.telephony.Connection: int getVideoState()>();

     label1:
        return i0;
    }

    private void handleSetSelectNetwork(android.os.AsyncResult)
    {
        com.android.internal.telephony.Phone r0;
        android.os.AsyncResult r1;
        com.android.internal.telephony.Phone$NetworkSelectMessage r2;
        java.lang.Object $r3, $r4, $r7;
        boolean $z0;
        android.os.Message $r5, $r8, $r10;
        java.lang.Throwable $r6;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.AsyncResult;

        $r3 = r1.<android.os.AsyncResult: java.lang.Object userObj>;

        $z0 = $r3 instanceof com.android.internal.telephony.Phone$NetworkSelectMessage;

        if $z0 != 0 goto label1;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "unexpected result from user object.");

        return;

     label1:
        $r4 = r1.<android.os.AsyncResult: java.lang.Object userObj>;

        r2 = (com.android.internal.telephony.Phone$NetworkSelectMessage) $r4;

        $r5 = r2.<com.android.internal.telephony.Phone$NetworkSelectMessage: android.os.Message message>;

        if $r5 == null goto label2;

        $r8 = r2.<com.android.internal.telephony.Phone$NetworkSelectMessage: android.os.Message message>;

        $r7 = r1.<android.os.AsyncResult: java.lang.Object result>;

        $r6 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>($r8, $r7, $r6);

        $r10 = r2.<com.android.internal.telephony.Phone$NetworkSelectMessage: android.os.Message message>;

        virtualinvoke $r10.<android.os.Message: void sendToTarget()>();

     label2:
        return;
    }

    private void handleSrvccStateChanged(int[])
    {
        com.android.internal.telephony.Phone r0, r1;
        com.android.internal.telephony.Call$SrvccState r2, r5;
        int i0, $i2;
        int[] r3;
        java.util.ArrayList r4;
        com.android.internal.telephony.CallTracker $r6;

        r0 := @this: com.android.internal.telephony.Phone;

        r3 := @parameter0: int[];

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "handleSrvccStateChanged");

        r4 = null;

        r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        r2 = <com.android.internal.telephony.Call$SrvccState: com.android.internal.telephony.Call$SrvccState NONE>;

        if r3 == null goto label7;

        $i2 = lengthof r3;

        if $i2 == 0 goto label7;

        i0 = r3[0];

        if i0 == 0 goto label4;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        return;

     label1:
        r5 = <com.android.internal.telephony.Call$SrvccState: com.android.internal.telephony.Call$SrvccState FAILED>;

        goto label6;

     label2:
        r5 = <com.android.internal.telephony.Call$SrvccState: com.android.internal.telephony.Call$SrvccState COMPLETED>;

        if r1 == null goto label3;

        virtualinvoke r1.<com.android.internal.telephony.Phone: void notifySrvccState(com.android.internal.telephony.Call$SrvccState)>(r5);

        goto label6;

     label3:
        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "HANDOVER_COMPLETED: mImsPhone null");

        goto label6;

     label4:
        r5 = <com.android.internal.telephony.Call$SrvccState: com.android.internal.telephony.Call$SrvccState STARTED>;

        if r1 == null goto label5;

        r4 = virtualinvoke r1.<com.android.internal.telephony.Phone: java.util.ArrayList getHandoverConnection()>();

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrateFrom(com.android.internal.telephony.Phone)>(r1);

        goto label6;

     label5:
        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "HANDOVER_STARTED: mImsPhone null");

     label6:
        $r6 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CallTracker getCallTracker()>();

        virtualinvoke $r6.<com.android.internal.telephony.CallTracker: void notifySrvccState(com.android.internal.telephony.Call$SrvccState,java.util.ArrayList)>(r5, r4);

        virtualinvoke r0.<com.android.internal.telephony.Phone: void notifySrvccStateChanged(int)>(i0);

     label7:
        return;
    }

    public static boolean isEmergencyCallOnly()
    {
        com.android.internal.telephony.Phone[] r0;
        int i0, $i1, $i2, i3;
        com.android.internal.telephony.ServiceStateTracker $r1;
        boolean $z0, z1, z2;
        com.android.internal.telephony.Phone r2;
        android.telephony.ServiceState r3;

        z1 = 0;

        r0 = staticinvoke <com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone[] getPhones()>();

        i0 = lengthof r0;

        i3 = 0;

     label1:
        if i3 >= i0 goto label5;

        r2 = r0[i3];

        z2 = z1;

        if r2 == null goto label4;

        $r1 = virtualinvoke r2.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        r3 = virtualinvoke $r1.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState getServiceState()>();

        $i1 = virtualinvoke r3.<android.telephony.ServiceState: int getState()>();

        if $i1 == 0 goto label3;

        $i2 = virtualinvoke r3.<android.telephony.ServiceState: int getDataRegistrationState()>();

        if $i2 != 0 goto label2;

        goto label3;

     label2:
        $z0 = virtualinvoke r3.<android.telephony.ServiceState: boolean isEmergencyOnly()>();

        z2 = z1 | $z0;

        goto label4;

     label3:
        return 0;

     label4:
        i3 = i3 + 1;

        z1 = z2;

        goto label1;

     label5:
        return z1;
    }

    private boolean isVideoCallOrConference(com.android.internal.telephony.Call)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0, $z1, $z2, $z3, z4;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r1;
        com.android.internal.telephony.Call r2;
        com.android.ims.ImsCall r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r2 := @parameter0: com.android.internal.telephony.Call;

        z0 = virtualinvoke r2.<com.android.internal.telephony.Call: boolean isMultiparty()>();

        z4 = 1;

        if z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = r2 instanceof com.android.internal.telephony.imsphone.ImsPhoneCall;

        if $z1 == 0 goto label5;

        $r1 = (com.android.internal.telephony.imsphone.ImsPhoneCall) r2;

        r3 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.ims.ImsCall getImsCall()>();

        if r3 == null goto label3;

        $z2 = virtualinvoke r3.<com.android.ims.ImsCall: boolean isVideoCall()>();

        if $z2 != 0 goto label2;

        $z3 = virtualinvoke r3.<com.android.ims.ImsCall: boolean wasVideoCall()>();

        if $z3 == 0 goto label3;

     label2:
        goto label4;

     label3:
        z4 = 0;

     label4:
        return z4;

     label5:
        return 0;
    }

    private void notifyIncomingRing()
    {
        com.android.internal.telephony.Phone r0;
        boolean $z0;
        android.os.AsyncResult $r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mIsVoiceCapable>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new android.os.AsyncResult;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r0, null);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mIncomingRingRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r2);

        return;
    }

    private void notifyMessageWaitingIndicator()
    {
        com.android.internal.telephony.Phone r0;
        boolean $z0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mIsVoiceCapable>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyMessageWaitingChanged(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    private void onCheckForNetworkSelectionModeAutomatic(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1, $r5, $r6, r12, r17;
        int i0;
        java.lang.Object $r2, $r3, $r8, $r9;
        java.lang.Throwable $r4;
        com.android.internal.telephony.CommandsInterface $r7;
        int[] $r10;
        java.lang.Exception $r11;
        android.os.AsyncResult r13;
        boolean z2;
        com.android.internal.telephony.Phone$NetworkSelectMessage $r15;

        r0 := @this: com.android.internal.telephony.Phone;

        r12 := @parameter0: android.os.Message;

        $r2 = r12.<android.os.Message: java.lang.Object obj>;

        r13 = (android.os.AsyncResult) $r2;

        $r3 = r13.<android.os.AsyncResult: java.lang.Object userObj>;

        r1 = (android.os.Message) $r3;

        z2 = 1;

        $r4 = r13.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r4 != null goto label5;

        z2 = 1;

        $r8 = r13.<android.os.AsyncResult: java.lang.Object result>;

        if $r8 == null goto label5;

     label1:
        $r9 = r13.<android.os.AsyncResult: java.lang.Object result>;

        $r10 = (int[]) $r9;

        i0 = $r10[0];

     label2:
        z2 = 1;

        if i0 != 0 goto label3;

        z2 = 0;

     label3:
        goto label5;

     label4:
        $r11 := @caughtexception;

        z2 = 1;

     label5:
        $r15 = new com.android.internal.telephony.Phone$NetworkSelectMessage;

        specialinvoke $r15.<com.android.internal.telephony.Phone$NetworkSelectMessage: void <init>()>();

        $r15.<com.android.internal.telephony.Phone$NetworkSelectMessage: android.os.Message message> = r1;

        $r15.<com.android.internal.telephony.Phone$NetworkSelectMessage: java.lang.String operatorNumeric> = "";

        $r15.<com.android.internal.telephony.Phone$NetworkSelectMessage: java.lang.String operatorAlphaLong> = "";

        $r15.<com.android.internal.telephony.Phone$NetworkSelectMessage: java.lang.String operatorAlphaShort> = "";

        if z2 == 0 goto label6;

        r17 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.os.Message obtainMessage(int,java.lang.Object)>(17, $r15);

        $r7 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r7.<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeAutomatic(android.os.Message)>(r17);

        goto label8;

     label6:
        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "setNetworkSelectionModeAutomatic - already auto, ignoring");

        $r5 = $r15.<com.android.internal.telephony.Phone$NetworkSelectMessage: android.os.Message message>;

        if $r5 == null goto label7;

        $r6 = $r15.<com.android.internal.telephony.Phone$NetworkSelectMessage: android.os.Message message>;

        $r6.<android.os.Message: int arg1> = 1;

     label7:
        r13.<android.os.AsyncResult: java.lang.Object userObj> = $r15;

        specialinvoke r0.<com.android.internal.telephony.Phone: void handleSetSelectNetwork(android.os.AsyncResult)>(r13);

     label8:
        specialinvoke r0.<com.android.internal.telephony.Phone: void updateSavedNetworkOperator(com.android.internal.telephony.Phone$NetworkSelectMessage)>($r15);

        return;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    private void restoreSavedNetworkSelection(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        com.android.internal.telephony.OperatorInfo r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.OperatorInfo getSavedNetworkSelection()>();

        if r2 == null goto label2;

        $r3 = virtualinvoke r2.<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorNumeric()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r3);

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        virtualinvoke r0.<com.android.internal.telephony.Phone: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,boolean,android.os.Message)>(r2, 1, r1);

        goto label3;

     label2:
        virtualinvoke r0.<com.android.internal.telephony.Phone: void setNetworkSelectionModeAutomatic(android.os.Message)>(r1);

     label3:
        return;
    }

    private void sendIncomingCallRingNotification(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0, $i2, $i4, $i6;
        boolean $z0, $z1, $z3, $z4;
        android.os.Message $r10;
        long $l5;
        java.lang.StringBuilder $r11;
        java.lang.String $r12;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mIsVoiceCapable>;

        if $z0 == 0 goto label1;

        $z1 = r0.<com.android.internal.telephony.Phone: boolean mDoesRilSendMultipleCallRing>;

        if $z1 != 0 goto label1;

        $i2 = r0.<com.android.internal.telephony.Phone: int mCallRingContinueToken>;

        if i0 != $i2 goto label1;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "Sending notifyIncomingRing");

        specialinvoke r0.<com.android.internal.telephony.Phone: void notifyIncomingRing()>();

        $r10 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.os.Message obtainMessage(int,int,int)>(15, i0, 0);

        $i4 = r0.<com.android.internal.telephony.Phone: int mCallRingDelay>;

        $l5 = (long) $i4;

        virtualinvoke r0.<com.android.internal.telephony.Phone: boolean sendMessageDelayed(android.os.Message,long)>($r10, $l5);

        goto label2;

     label1:
        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring ring notification request, mDoesRilSendMultipleCallRing=");

        $z3 = r0.<com.android.internal.telephony.Phone: boolean mDoesRilSendMultipleCallRing>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" token=");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCallRingContinueToken=");

        $i6 = r0.<com.android.internal.telephony.Phone: int mCallRingContinueToken>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mIsVoiceCapable=");

        $z4 = r0.<com.android.internal.telephony.Phone: boolean mIsVoiceCapable>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r12);

     label2:
        return;
    }

    private void setCallForwardingIndicatorInSharedPref(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        int i0;
        android.content.SharedPreferences$Editor r1;
        java.lang.StringBuilder $r2, $r11;
        java.lang.String $r8, $r14;
        android.content.Context $r9;
        android.content.SharedPreferences $r10;
        byte b2;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        b2 = 1;

        goto label2;

     label1:
        b2 = 0;

     label2:
        i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setCallForwardingIndicatorInSharedPref: Storing status = ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in pref ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cf_status_key");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("Phone", $r8);

        $r9 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        $r10 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r9);

        r1 = interfaceinvoke $r10.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cf_status_key");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>($r14, b2);

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: void apply()>();

        return;
    }

    private void setRoamingOverrideHelper(java.util.List, java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.util.List r1;
        java.lang.String r2, r13, r14;
        android.content.SharedPreferences$Editor r3, $r10, $r12;
        android.content.Context $r5;
        android.content.SharedPreferences $r6;
        java.lang.StringBuilder $r7;
        boolean $z1;
        java.util.HashSet $r11;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.util.List;

        r13 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        $r5 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        $r6 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r5);

        r3 = interfaceinvoke $r6.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r14 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        if r1 == null goto label2;

        $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>(java.util.Collection)>(r1);

        $r12 = interfaceinvoke r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>(r14, $r11);

        interfaceinvoke $r12.<android.content.SharedPreferences$Editor: boolean commit()>();

        goto label3;

     label2:
        $r10 = interfaceinvoke r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>(r14);

        interfaceinvoke $r10.<android.content.SharedPreferences$Editor: boolean commit()>();

     label3:
        return;
    }

    private void setUnitTestMode(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.telephony.Phone: boolean mUnitTestMode> = z0;

        return;
    }

    private void updateSavedNetworkOperator(com.android.internal.telephony.Phone$NetworkSelectMessage)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.content.SharedPreferences$Editor r1;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r8, $r14, $r20;
        java.lang.String $r5, $r11, $r12, $r17, $r18, $r23, $r24;
        android.content.Context $r6;
        android.content.SharedPreferences $r7;
        com.android.internal.telephony.Phone$NetworkSelectMessage r26;

        r0 := @this: com.android.internal.telephony.Phone;

        r26 := @parameter0: com.android.internal.telephony.Phone$NetworkSelectMessage;

        i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>(i0);

        if $z0 == 0 goto label2;

        $r6 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r7 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r6);

        r1 = interfaceinvoke $r7.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network_selection_key");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12 = r26.<com.android.internal.telephony.Phone$NetworkSelectMessage: java.lang.String operatorNumeric>;

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>($r11, $r12);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network_selection_name_key");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = r26.<com.android.internal.telephony.Phone$NetworkSelectMessage: java.lang.String operatorAlphaLong>;

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>($r17, $r18);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network_selection_short_key");

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24 = r26.<com.android.internal.telephony.Phone$NetworkSelectMessage: java.lang.String operatorAlphaShort>;

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>($r23, $r24);

        $z1 = interfaceinvoke r1.<android.content.SharedPreferences$Editor: boolean commit()>();

        if $z1 != 0 goto label1;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "failed to commit network selection preference");

     label1:
        goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot update network selection preference due to invalid subId ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", $r5);

     label3:
        return;
    }

    public boolean areAllDataDisconnected()
    {
        com.android.internal.telephony.Phone r0;
        int i0, i1, i2;
        com.android.internal.telephony.dataconnection.DcTracker $r1, $r2;
        boolean $z0;
        com.android.internal.telephony.dataconnection.TransportManager r3;
        int[] r4;

        r0 := @this: com.android.internal.telephony.Phone;

        r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        if r3 == null goto label3;

        r4 = virtualinvoke r3.<com.android.internal.telephony.dataconnection.TransportManager: int[] getAvailableTransports()>();

        i0 = lengthof r4;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        i1 = r4[i2];

        $r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i1);

        if $r1 == null goto label2;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i1);

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.dataconnection.DcTracker: boolean isDisconnected()>();

        if $z0 != 0 goto label2;

        return 0;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 1;
    }

    public void callEndCleanupHandOverCallIfAny()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return;
    }

    public boolean canDisablePhysicalSubscription()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return 0;
    }

    public void cancelUSSD(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        return;
    }

    public void carrierActionReportDefaultNetworkStatus(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        com.android.internal.telephony.CarrierActionAgent $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierActionAgent mCarrierActionAgent>;

        virtualinvoke $r1.<com.android.internal.telephony.CarrierActionAgent: void carrierActionReportDefaultNetworkStatus(boolean)>(z0);

        return;
    }

    public void carrierActionResetAll()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CarrierActionAgent $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierActionAgent mCarrierActionAgent>;

        virtualinvoke $r1.<com.android.internal.telephony.CarrierActionAgent: void carrierActionReset()>();

        return;
    }

    public void carrierActionSetMeteredApnsEnabled(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        com.android.internal.telephony.CarrierActionAgent $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierActionAgent mCarrierActionAgent>;

        virtualinvoke $r1.<com.android.internal.telephony.CarrierActionAgent: void carrierActionSetMeteredApnsEnabled(boolean)>(z0);

        return;
    }

    public void carrierActionSetRadioEnabled(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        com.android.internal.telephony.CarrierActionAgent $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierActionAgent mCarrierActionAgent>;

        virtualinvoke $r1.<com.android.internal.telephony.CarrierActionAgent: void carrierActionSetRadioEnabled(boolean)>(z0);

        return;
    }

    public void createImsPhone()
    {
        com.android.internal.telephony.Phone r0, $r3, $r5, $r7, $r8;
        java.lang.Object r1;
        int $i0;
        com.android.internal.telephony.PhoneNotifier $r4;
        com.android.internal.telephony.CallManager $r6;
        java.lang.Throwable $r9;

        r0 := @this: com.android.internal.telephony.Phone;

        $i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getPhoneType()>();

        if $i0 != 3 goto label1;

        return;

     label1:
        r1 = <com.android.internal.telephony.Phone: java.lang.Object lockForRadioTechnologyChange>;

        entermonitor r1;

     label2:
        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if $r3 != null goto label3;

        $r4 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        $r5 = staticinvoke <com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone makeImsPhone(com.android.internal.telephony.PhoneNotifier,com.android.internal.telephony.Phone)>($r4, r0);

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone> = $r5;

        $r6 = staticinvoke <com.android.internal.telephony.CallManager: com.android.internal.telephony.CallManager getInstance()>();

        $r7 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        virtualinvoke $r6.<com.android.internal.telephony.CallManager: boolean registerPhone(com.android.internal.telephony.Phone)>($r7);

        $r8 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        virtualinvoke $r8.<com.android.internal.telephony.Phone: void registerForSilentRedial(android.os.Handler,int,java.lang.Object)>(r0, 32, null);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r9 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r9;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    protected com.android.internal.telephony.Connection dialInternal(java.lang.String, com.android.internal.telephony.PhoneInternalInterface$DialArgs) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        com.android.internal.telephony.PhoneInternalInterface$DialArgs r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.PhoneInternalInterface$DialArgs;

        return null;
    }

    public void disableDnsCheck(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        android.content.SharedPreferences$Editor r1;
        android.content.Context $r2;
        android.content.SharedPreferences $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.telephony.Phone: boolean mDnsCheckDisabled> = z0;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r3 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r2);

        r1 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("dns_server_check_disabled_key", z0);

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: void apply()>();

        return;
    }

    public void dispose()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.internal.telephony.Phone r0, r211;
        java.io.PrintWriter r1;
        java.lang.String[] r2, $r135;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8;
        java.lang.StringBuilder $r3, $r7, $r11, $r16, $r20, $r24, $r28, $r32, $r36, $r42, $r48, $r53, $r58, $r63, $r68, $r73, $r78, $r82, $r86, $r90, $r95, $r100, $r104, $r108, $r112, $r116, $r120, $r125, $r129, $r133, $r138, $r142, $r146, $r150;
        java.lang.String $r6, $r10, $r15, $r19, $r23, $r27, $r31, $r35, $r41, $r47, $r52, $r57, $r62, $r67, $r72, $r77, $r81, $r85, $r89, $r94, $r97, $r99, $r103, $r107, $r111, $r115, $r119, $r122, $r124, $r128, $r132, $r137, $r141, $r145, $r149, $r154;
        com.android.internal.telephony.CommandsInterface $r13, r232;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.util.concurrent.atomic.AtomicReference $r38, $r44;
        java.lang.Object $r39, $r45;
        com.android.internal.telephony.SmsStorageMonitor $r50;
        com.android.internal.telephony.SmsUsageMonitor $r55;
        android.os.Looper $r60;
        android.content.Context $r65;
        com.android.internal.telephony.PhoneNotifier $r70;
        com.android.internal.telephony.test.SimulatedRadioControl $r75;
        com.android.internal.telephony.PhoneConstants$State $r92;
        android.telephony.ServiceState $r152;
        com.android.internal.telephony.ServiceStateTracker $r155, $r162;
        com.android.internal.telephony.CarrierPrivilegesTracker $r156, $r234;
        com.android.internal.telephony.RIL $r157;
        com.android.internal.telephony.DeviceStateMonitor $r158, $r230;
        com.android.internal.telephony.CallTracker $r159, $r226;
        com.android.internal.telephony.DisplayInfoController $r160, $r218;
        com.android.internal.telephony.emergency.EmergencyNumberTracker $r161, $r216;
        com.android.internal.telephony.dataconnection.DcTracker $r163, $r164;
        java.lang.Exception $r165, $r166, $r167, $r168, $r169, $r170, $r171, $r172, $r173, $r174, $r175;
        java.io.FileDescriptor r176;
        com.android.internal.telephony.dataconnection.TransportManager r213, r231;
        int[] r214;
        com.android.internal.telephony.CarrierResolver r220;
        com.android.internal.telephony.CarrierActionAgent r222;
        com.android.internal.telephony.CarrierSignalAgent r224;
        com.android.internal.telephony.SimActivationTracker r228;
        com.android.internal.telephony.LocalLog r235;

        r0 := @this: com.android.internal.telephony.Phone;

        r176 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Phone: subId=");

        $i2 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mPhoneId=");

        $i3 = r0.<com.android.internal.telephony.Phone: int mPhoneId>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCi=");

        $r13 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDnsCheckDisabled=");

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mDnsCheckDisabled>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mDoesRilSendMultipleCallRing=");

        $z1 = r0.<com.android.internal.telephony.Phone: boolean mDoesRilSendMultipleCallRing>;

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r23 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r23);

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCallRingContinueToken=");

        $i4 = r0.<com.android.internal.telephony.Phone: int mCallRingContinueToken>;

        virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mCallRingDelay=");

        $i5 = r0.<com.android.internal.telephony.Phone: int mCallRingDelay>;

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mIsVoiceCapable=");

        $z2 = r0.<com.android.internal.telephony.Phone: boolean mIsVoiceCapable>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r35);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mIccRecords=");

        $r38 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r39 = virtualinvoke $r38.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r41);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mUiccApplication=");

        $r44 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mUiccApplication>;

        $r45 = virtualinvoke $r44.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        $r47 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r47);

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSmsStorageMonitor=");

        $r50 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.SmsStorageMonitor mSmsStorageMonitor>;

        virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r50);

        $r52 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r52);

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSmsUsageMonitor=");

        $r55 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.SmsUsageMonitor mSmsUsageMonitor>;

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r55);

        $r57 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r57);

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        $r58 = new java.lang.StringBuilder;

        specialinvoke $r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mLooper=");

        $r60 = r0.<com.android.internal.telephony.Phone: android.os.Looper mLooper>;

        virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r60);

        $r62 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r62);

        $r63 = new java.lang.StringBuilder;

        specialinvoke $r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mContext=");

        $r65 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r65);

        $r67 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r67);

        $r68 = new java.lang.StringBuilder;

        specialinvoke $r68.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mNotifier=");

        $r70 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        virtualinvoke $r68.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r70);

        $r72 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r72);

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mSimulatedRadioControl=");

        $r75 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.test.SimulatedRadioControl mSimulatedRadioControl>;

        virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r75);

        $r77 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r77);

        $r78 = new java.lang.StringBuilder;

        specialinvoke $r78.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" mUnitTestMode=");

        $z3 = r0.<com.android.internal.telephony.Phone: boolean mUnitTestMode>;

        virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z3);

        $r81 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r81);

        $r82 = new java.lang.StringBuilder;

        specialinvoke $r82.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isDnsCheckDisabled()=");

        $z4 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean isDnsCheckDisabled()>();

        virtualinvoke $r82.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r85 = virtualinvoke $r82.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r85);

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getUnitTestMode()=");

        $z5 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean getUnitTestMode()>();

        virtualinvoke $r86.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z5);

        $r89 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r89);

        $r90 = new java.lang.StringBuilder;

        specialinvoke $r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getState()=");

        $r92 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneConstants$State getState()>();

        virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r92);

        $r94 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r94);

        $r95 = new java.lang.StringBuilder;

        specialinvoke $r95.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getIccSerialNumber()=");

        $r97 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.lang.String getIccSerialNumber()>();

        virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r97);

        $r99 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r99);

        $r100 = new java.lang.StringBuilder;

        specialinvoke $r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getIccRecordsLoaded()=");

        $z6 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean getIccRecordsLoaded()>();

        virtualinvoke $r100.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z6);

        $r103 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r103);

        $r104 = new java.lang.StringBuilder;

        specialinvoke $r104.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getMessageWaitingIndicator()=");

        $z7 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean getMessageWaitingIndicator()>();

        virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z7);

        $r107 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r107);

        $r108 = new java.lang.StringBuilder;

        specialinvoke $r108.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getCallForwardingIndicator()=");

        $z8 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean getCallForwardingIndicator()>();

        virtualinvoke $r108.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z8);

        $r111 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r111);

        $r112 = new java.lang.StringBuilder;

        specialinvoke $r112.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isInEmergencyCall()=");

        $z9 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean isInEmergencyCall()>();

        virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z9);

        $r115 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r115);

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        $r116 = new java.lang.StringBuilder;

        specialinvoke $r116.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isInEcm()=");

        $z10 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean isInEcm()>();

        virtualinvoke $r116.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z10);

        $r119 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r119);

        $r120 = new java.lang.StringBuilder;

        specialinvoke $r120.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getPhoneName()=");

        $r122 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.lang.String getPhoneName()>();

        virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r122);

        $r124 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r124);

        $r125 = new java.lang.StringBuilder;

        specialinvoke $r125.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getPhoneType()=");

        $i6 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getPhoneType()>();

        virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r128 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r128);

        $r129 = new java.lang.StringBuilder;

        specialinvoke $r129.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getVoiceMessageCount()=");

        $i7 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getVoiceMessageCount()>();

        virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r132 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r132);

        $r133 = new java.lang.StringBuilder;

        specialinvoke $r133.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" getActiveApnTypes()=");

        $r135 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.lang.String[] getActiveApnTypes()>();

        virtualinvoke $r133.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r135);

        $r137 = virtualinvoke $r133.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r137);

        $r138 = new java.lang.StringBuilder;

        specialinvoke $r138.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" needsOtaServiceProvisioning=");

        $z11 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean needsOtaServiceProvisioning()>();

        virtualinvoke $r138.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z11);

        $r141 = virtualinvoke $r138.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r141);

        $r142 = new java.lang.StringBuilder;

        specialinvoke $r142.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isInEmergencySmsMode=");

        $z12 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean isInEmergencySmsMode()>();

        virtualinvoke $r142.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z12);

        $r145 = virtualinvoke $r142.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r145);

        $r146 = new java.lang.StringBuilder;

        specialinvoke $r146.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r146.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" isEcmCanceledForEmergency=");

        $z13 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean isEcmCanceledForEmergency()>();

        virtualinvoke $r146.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z13);

        $r149 = virtualinvoke $r146.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r149);

        $r150 = new java.lang.StringBuilder;

        specialinvoke $r150.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" service state=");

        $r152 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        virtualinvoke $r150.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r152);

        $r154 = virtualinvoke $r150.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r154);

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

        r211 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if r211 == null goto label05;

     label01:
        virtualinvoke r211.<com.android.internal.telephony.Phone: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label02:
        goto label04;

     label03:
        $r169 := @caughtexception;

        virtualinvoke $r169.<java.lang.Exception: void printStackTrace()>();

     label04:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label05:
        r213 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        if r213 == null goto label08;

        r214 = virtualinvoke r213.<com.android.internal.telephony.dataconnection.TransportManager: int[] getAvailableTransports()>();

        i0 = lengthof r214;

        i8 = 0;

     label06:
        if i8 >= i0 goto label08;

        i1 = r214[i8];

        $r163 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i1);

        if $r163 == null goto label07;

        $r164 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i1);

        virtualinvoke $r164.<com.android.internal.telephony.dataconnection.DcTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label07:
        i8 = i8 + 1;

        goto label06;

     label08:
        $r155 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if $r155 == null goto label13;

     label09:
        $r162 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        virtualinvoke $r162.<com.android.internal.telephony.ServiceStateTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label10:
        goto label12;

     label11:
        $r172 := @caughtexception;

        virtualinvoke $r172.<java.lang.Exception: void printStackTrace()>();

     label12:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label13:
        $r216 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.emergency.EmergencyNumberTracker getEmergencyNumberTracker()>();

        if $r216 == null goto label18;

     label14:
        $r161 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.emergency.EmergencyNumberTracker getEmergencyNumberTracker()>();

        virtualinvoke $r161.<com.android.internal.telephony.emergency.EmergencyNumberTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label15:
        goto label17;

     label16:
        $r173 := @caughtexception;

        virtualinvoke $r173.<java.lang.Exception: void printStackTrace()>();

     label17:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label18:
        $r218 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.DisplayInfoController getDisplayInfoController()>();

        if $r218 == null goto label23;

     label19:
        $r160 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.DisplayInfoController getDisplayInfoController()>();

        virtualinvoke $r160.<com.android.internal.telephony.DisplayInfoController: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label20:
        goto label22;

     label21:
        $r167 := @caughtexception;

        virtualinvoke $r167.<java.lang.Exception: void printStackTrace()>();

     label22:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label23:
        r220 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierResolver mCarrierResolver>;

        if r220 == null goto label28;

     label24:
        virtualinvoke r220.<com.android.internal.telephony.CarrierResolver: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label25:
        goto label27;

     label26:
        $r166 := @caughtexception;

        virtualinvoke $r166.<java.lang.Exception: void printStackTrace()>();

     label27:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label28:
        r222 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierActionAgent mCarrierActionAgent>;

        if r222 == null goto label33;

     label29:
        virtualinvoke r222.<com.android.internal.telephony.CarrierActionAgent: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label30:
        goto label32;

     label31:
        $r168 := @caughtexception;

        virtualinvoke $r168.<java.lang.Exception: void printStackTrace()>();

     label32:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label33:
        r224 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierSignalAgent mCarrierSignalAgent>;

        if r224 == null goto label38;

     label34:
        virtualinvoke r224.<com.android.internal.telephony.CarrierSignalAgent: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label35:
        goto label37;

     label36:
        $r165 := @caughtexception;

        virtualinvoke $r165.<java.lang.Exception: void printStackTrace()>();

     label37:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label38:
        $r226 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CallTracker getCallTracker()>();

        if $r226 == null goto label43;

     label39:
        $r159 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CallTracker getCallTracker()>();

        virtualinvoke $r159.<com.android.internal.telephony.CallTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label40:
        goto label42;

     label41:
        $r175 := @caughtexception;

        virtualinvoke $r175.<java.lang.Exception: void printStackTrace()>();

     label42:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label43:
        r228 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.SimActivationTracker mSimActivationTracker>;

        if r228 == null goto label48;

     label44:
        virtualinvoke r228.<com.android.internal.telephony.SimActivationTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label45:
        goto label47;

     label46:
        $r174 := @caughtexception;

        virtualinvoke $r174.<java.lang.Exception: void printStackTrace()>();

     label47:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label48:
        $r230 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.DeviceStateMonitor mDeviceStateMonitor>;

        if $r230 == null goto label49;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("DeviceStateMonitor:");

        $r158 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.DeviceStateMonitor mDeviceStateMonitor>;

        virtualinvoke $r158.<com.android.internal.telephony.DeviceStateMonitor: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label49:
        r231 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        if r231 == null goto label50;

        virtualinvoke r231.<com.android.internal.telephony.dataconnection.TransportManager: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label50:
        r232 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        if r232 == null goto label55;

        $z14 = r232 instanceof com.android.internal.telephony.RIL;

        if $z14 == 0 goto label55;

     label51:
        $r157 = (com.android.internal.telephony.RIL) r232;

        virtualinvoke $r157.<com.android.internal.telephony.RIL: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label52:
        goto label54;

     label53:
        $r171 := @caughtexception;

        virtualinvoke $r171.<java.lang.Exception: void printStackTrace()>();

     label54:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label55:
        $r234 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierPrivilegesTracker getCarrierPrivilegesTracker()>();

        if $r234 == null goto label56;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("CarrierPrivilegesTracker:");

        $r156 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierPrivilegesTracker getCarrierPrivilegesTracker()>();

        virtualinvoke $r156.<com.android.internal.telephony.CarrierPrivilegesTracker: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label56:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Phone Local Log: ");

        r235 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.LocalLog mLocalLog>;

        if r235 == null goto label61;

     label57:
        virtualinvoke r235.<com.android.internal.telephony.LocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r176, r1, r2);

     label58:
        goto label60;

     label59:
        $r170 := @caughtexception;

        virtualinvoke $r170.<java.lang.Exception: void printStackTrace()>();

     label60:
        virtualinvoke r1.<java.io.PrintWriter: void flush()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("++++++++++++++++++++++++++++++++");

     label61:
        return;

        catch java.lang.Exception from label01 to label02 with label03;
        catch java.lang.Exception from label09 to label10 with label11;
        catch java.lang.Exception from label14 to label15 with label16;
        catch java.lang.Exception from label19 to label20 with label21;
        catch java.lang.Exception from label24 to label25 with label26;
        catch java.lang.Exception from label29 to label30 with label31;
        catch java.lang.Exception from label34 to label35 with label36;
        catch java.lang.Exception from label39 to label40 with label41;
        catch java.lang.Exception from label44 to label45 with label46;
        catch java.lang.Exception from label51 to label52 with label53;
        catch java.lang.Exception from label57 to label58 with label59;
    }

    public void enableEnhancedVoicePrivacy(boolean, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        return;
    }

    public void enableUiccApplications(boolean, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        return;
    }

    public void eraseModemConfig(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void nvResetConfig(int,android.os.Message)>(2, r1);

        return;
    }

    public void exitEmergencyCallbackMode()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return;
    }

    public java.lang.String getActionAttached()
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: java.lang.String mActionAttached>;

        return $r1;
    }

    public java.lang.String getActionDetached()
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: java.lang.String mActionDetached>;

        return $r1;
    }

    public java.lang.String getActiveApnHost(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1, $r5;
        com.android.internal.telephony.dataconnection.TransportManager r2;
        int i0, $i1;
        com.android.internal.telephony.dataconnection.DcTracker $r3, $r4;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        if r2 == null goto label1;

        $i1 = staticinvoke <android.telephony.data.ApnSetting: int getApnTypesBitmaskFromString(java.lang.String)>(r1);

        i0 = virtualinvoke r2.<com.android.internal.telephony.dataconnection.TransportManager: int getCurrentTransport(int)>($i1);

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i0);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i0);

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.dataconnection.DcTracker: java.lang.String getActiveApnString(java.lang.String)>(r1);

        return $r5;

     label1:
        return null;
    }

    public java.lang.String[] getActiveApnTypes()
    {
        com.android.internal.telephony.Phone r0;
        int[] r2;
        int i0, $i2, $i3, i4;
        java.lang.String[] $r3, $r7, $r9, $r10;
        android.util.SparseArray $r4;
        java.util.HashSet $r5;
        com.android.internal.telephony.dataconnection.TransportManager $r6, r12;
        java.lang.Object[] $r8;
        java.util.List $r11;
        com.android.internal.telephony.dataconnection.DcTracker r13;

        r0 := @this: com.android.internal.telephony.Phone;

        r12 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        i4 = 0;

        if r12 == null goto label6;

        $r4 = r0.<com.android.internal.telephony.Phone: android.util.SparseArray mDcTrackers>;

        if $r4 != null goto label1;

        goto label6;

     label1:
        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        r2 = virtualinvoke $r6.<com.android.internal.telephony.dataconnection.TransportManager: int[] getAvailableTransports()>();

        i0 = lengthof r2;

     label2:
        if i4 >= i0 goto label5;

        $i3 = r2[i4];

        r13 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>($i3);

        if r13 != null goto label3;

        goto label4;

     label3:
        $r10 = virtualinvoke r13.<com.android.internal.telephony.dataconnection.DcTracker: java.lang.String[] getActiveApnTypes()>();

        $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r10);

        interfaceinvoke $r5.<java.util.Set: boolean addAll(java.util.Collection)>($r11);

     label4:
        i4 = i4 + 1;

        goto label2;

     label5:
        $i2 = interfaceinvoke $r5.<java.util.Set: int size()>();

        $r7 = newarray (java.lang.String)[$i2];

        $r8 = interfaceinvoke $r5.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r7);

        $r9 = (java.lang.String[]) $r8;

        return $r9;

     label6:
        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "Invalid state for Transport/DcTrackers");

        $r3 = newarray (java.lang.String)[0];

        return $r3;
    }

    public java.util.List getAllCellInfo()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.ServiceStateTracker $r1;
        java.util.List $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.ServiceStateTracker: java.util.List getAllCellInfo()>();

        return $r2;
    }

    public void getAllowedCarriers(android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        android.os.WorkSource r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: android.os.WorkSource;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void getAllowedCarriers(android.os.Message,android.os.WorkSource)>(r1, r2);

        return;
    }

    public long getAllowedNetworkTypes(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        java.util.Map r1, $r2;
        java.lang.Integer $r3;
        long $l1, l3, l4;
        java.lang.Long $r4, $r6;
        java.lang.Object $r5;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 = r0.<com.android.internal.telephony.Phone: java.util.Map mAllowedNetworkTypesForReasons>;

        entermonitor r1;

        if i0 == 0 goto label3;

     label1:
        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid allowed network type reason: ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", $r9);

        l3 = staticinvoke <android.telephony.TelephonyManager: long getAllNetworkTypesBitmask()>();

        exitmonitor r1;

     label2:
        return l3;

     label3:
        $r2 = r0.<com.android.internal.telephony.Phone: java.util.Map mAllowedNetworkTypesForReasons>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $l1 = staticinvoke <android.telephony.TelephonyManager: long getAllNetworkTypesBitmask()>();

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1);

        $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>($r3, $r4);

        $r6 = (java.lang.Long) $r5;

        l4 = virtualinvoke $r6.<java.lang.Long: long longValue()>();

        exitmonitor r1;

     label4:
        return l4;

     label5:
        $r10 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public com.android.internal.telephony.AppSmsManager getAppSmsManager()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.AppSmsManager $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.AppSmsManager mAppSmsManager>;

        return $r1;
    }

    public int getCachedPreferredNetworkType()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CommandsInterface r1;
        int $i0, $i1;
        boolean $z0;
        com.android.internal.telephony.BaseCommands $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        if r1 == null goto label1;

        $z0 = r1 instanceof com.android.internal.telephony.BaseCommands;

        if $z0 == 0 goto label1;

        $r2 = (com.android.internal.telephony.BaseCommands) r1;

        $i1 = $r2.<com.android.internal.telephony.BaseCommands: int mPreferredNetworkType>;

        return $i1;

     label1:
        $i0 = <com.android.internal.telephony.RILConstants: int PREFERRED_NETWORK_MODE>;

        return $i0;
    }

    public boolean getCallForwardingIndicator()
    {
        com.android.internal.telephony.Phone r0;
        java.lang.StringBuilder $r2;
        int $i0, $i2, i4, i5, i6;
        java.lang.String $r7;
        boolean z0;
        com.android.internal.telephony.uicc.IccRecords r8;
        java.io.Serializable r9;

        r0 := @this: com.android.internal.telephony.Phone;

        i4 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getPhoneType()>();

        z0 = 0;

        if i4 != 2 goto label1;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "getCallForwardingIndicator: not possible in CDMA");

        return 0;

     label1:
        r8 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.uicc.IccRecords getIccRecords()>();

        i5 = -1;

        if r8 == null goto label2;

        i5 = virtualinvoke r8.<com.android.internal.telephony.uicc.IccRecords: int getVoiceCallForwardingFlag()>();

     label2:
        i6 = i5;

        if i5 != -1 goto label3;

        i6 = specialinvoke r0.<com.android.internal.telephony.Phone: int getCallForwardingIndicatorFromSharedPref()>();

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCallForwardingIndicator: iccForwardingFlag=");

        if r8 == null goto label4;

        $i2 = virtualinvoke r8.<com.android.internal.telephony.uicc.IccRecords: int getVoiceCallForwardingFlag()>();

        r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        goto label5;

     label4:
        r9 = "null";

     label5:
        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", sharedPrefFlag=");

        $i0 = specialinvoke r0.<com.android.internal.telephony.Phone: int getCallForwardingIndicatorFromSharedPref()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int v(java.lang.String,java.lang.String)>("Phone", $r7);

        if i6 != 1 goto label6;

        z0 = 1;

     label6:
        return z0;
    }

    public com.android.internal.telephony.CallTracker getCallTracker()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public com.android.internal.telephony.CarrierActionAgent getCarrierActionAgent()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CarrierActionAgent $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierActionAgent mCarrierActionAgent>;

        return $r1;
    }

    public int getCarrierId()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return -1;
    }

    public int getCarrierIdListVersion()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return -1;
    }

    public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        return null;
    }

    public java.lang.String getCarrierName()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public com.android.internal.telephony.CarrierPrivilegesTracker getCarrierPrivilegesTracker()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CarrierPrivilegesTracker $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierPrivilegesTracker mCarrierPrivilegesTracker>;

        return $r1;
    }

    public com.android.internal.telephony.CarrierSignalAgent getCarrierSignalAgent()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CarrierSignalAgent $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CarrierSignalAgent mCarrierSignalAgent>;

        return $r1;
    }

    public int getCdmaEriIconIndex()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return -1;
    }

    public int getCdmaEriIconMode()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return -1;
    }

    public java.lang.String getCdmaEriText()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return "GSM nw, no ERI";
    }

    public java.lang.String getCdmaMin()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public java.lang.String getCdmaPrlVersion()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public android.telephony.CellIdentity getCellIdentity()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.ServiceStateTracker $r1;
        android.telephony.CellIdentity $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.ServiceStateTracker: android.telephony.CellIdentity getCellIdentity()>();

        return $r2;
    }

    public void getCellIdentity(android.os.WorkSource, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.WorkSource r1;
        android.os.Message r2;
        com.android.internal.telephony.ServiceStateTracker $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.WorkSource;

        r2 := @parameter1: android.os.Message;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        virtualinvoke $r3.<com.android.internal.telephony.ServiceStateTracker: void requestCellIdentity(android.os.WorkSource,android.os.Message)>(r1, r2);

        return;
    }

    public java.util.List getClientRequestStats()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CommandsInterface $r1;
        java.util.List $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r2 = interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: java.util.List getClientRequestStats()>();

        return $r2;
    }

    public android.content.Context getContext()
    {
        com.android.internal.telephony.Phone r0;
        android.content.Context $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        return $r1;
    }

    public android.net.Uri[] getCurrentSubscriberUris()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType getCurrentUiccAppType()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.uicc.UiccCardApplication r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType $r4, $r5;

        r0 := @this: com.android.internal.telephony.Phone;

        $r2 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mUiccApplication>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.UiccCardApplication) $r3;

        if r1 == null goto label1;

        $r5 = virtualinvoke r1.<com.android.internal.telephony.uicc.UiccCardApplication: com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType getType()>();

        return $r5;

     label1:
        $r4 = <com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType: com.android.internal.telephony.uicc.IccCardApplicationStatus$AppType APPTYPE_UNKNOWN>;

        return $r4;
    }

    public int getDataActivationState()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.SimActivationTracker $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.SimActivationTracker mSimActivationTracker>;

        $i0 = virtualinvoke $r1.<com.android.internal.telephony.SimActivationTracker: int getDataActivationState()>();

        return $i0;
    }

    public com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.PhoneConstants$DataState $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)>("default");

        return $r1;
    }

    public com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        com.android.internal.telephony.PhoneConstants$DataState $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.android.internal.telephony.PhoneConstants$DataState: com.android.internal.telephony.PhoneConstants$DataState DISCONNECTED>;

        return $r2;
    }

    public com.android.internal.telephony.dataconnection.DataEnabledSettings getDataEnabledSettings()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.dataconnection.DataEnabledSettings $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DataEnabledSettings mDataEnabledSettings>;

        return $r1;
    }

    public com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.util.SparseArray $r1;
        java.lang.Object $r2;
        com.android.internal.telephony.dataconnection.DcTracker $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.Phone: android.util.SparseArray mDcTrackers>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r3 = (com.android.internal.telephony.dataconnection.DcTracker) $r2;

        return $r3;
    }

    public com.android.internal.telephony.Phone getDefaultPhone()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return r0;
    }

    public com.android.internal.telephony.DeviceStateMonitor getDeviceStateMonitor()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public com.android.internal.telephony.DisplayInfoController getDisplayInfoController()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public long getEffectiveAllowedNetworkTypes()
    {
        com.android.internal.telephony.Phone r0;
        long l0, $l1, $l2;

        r0 := @this: com.android.internal.telephony.Phone;

        l0 = specialinvoke r0.<com.android.internal.telephony.Phone: long getAllowedNetworkTypes()>();

        $l1 = specialinvoke r0.<com.android.internal.telephony.Phone: long getAllowedNetworkTypesForAllReasons()>();

        $l2 = $l1 & l0;

        return $l2;
    }

    public int getEmergencyNumberDbVersion()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return -1;
    }

    public com.android.internal.telephony.emergency.EmergencyNumberTracker getEmergencyNumberTracker()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public void getEnhancedVoicePrivacy(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        return;
    }

    public java.lang.String getFullIccSerialNumber()
    {
        com.android.internal.telephony.Phone r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        com.android.internal.telephony.uicc.IccRecords r3;
        java.lang.String r4;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (com.android.internal.telephony.uicc.IccRecords) $r2;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<com.android.internal.telephony.uicc.IccRecords: java.lang.String getFullIccId()>();

        goto label2;

     label1:
        r4 = null;

     label2:
        return r4;
    }

    public com.android.internal.telephony.HalVersion getHalVersion()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CommandsInterface r1;
        com.android.internal.telephony.HalVersion $r2, $r4;
        boolean $z0;
        com.android.internal.telephony.RIL $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        if r1 == null goto label1;

        $z0 = r1 instanceof com.android.internal.telephony.RIL;

        if $z0 == 0 goto label1;

        $r3 = (com.android.internal.telephony.RIL) r1;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.RIL: com.android.internal.telephony.HalVersion getHalVersion()>();

        return $r4;

     label1:
        $r2 = <com.android.internal.telephony.RIL: com.android.internal.telephony.HalVersion RADIO_HAL_VERSION_UNKNOWN>;

        return $r2;
    }

    public android.os.Handler getHandler()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return r0;
    }

    public java.util.ArrayList getHandoverConnection()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public com.android.internal.telephony.IccCard getIccCard()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()
    {
        com.android.internal.telephony.Phone r0;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        com.android.internal.telephony.uicc.UiccCardApplication r8;
        com.android.internal.telephony.uicc.IccFileHandler r9;

        r0 := @this: com.android.internal.telephony.Phone;

        $r2 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mUiccApplication>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r8 = (com.android.internal.telephony.uicc.UiccCardApplication) $r3;

        if r8 != null goto label1;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "getIccFileHandler: uiccApplication == null, return null");

        r9 = null;

        goto label2;

     label1:
        r9 = virtualinvoke r8.<com.android.internal.telephony.uicc.UiccCardApplication: com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()>();

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getIccFileHandler: fh=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r7);

        return r9;
    }

    public com.android.internal.telephony.uicc.IccRecords getIccRecords()
    {
        com.android.internal.telephony.Phone r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        com.android.internal.telephony.uicc.IccRecords $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (com.android.internal.telephony.uicc.IccRecords) $r2;

        return $r3;
    }

    public boolean getIccRecordsLoaded()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.uicc.IccRecords r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r2 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.IccRecords) $r3;

        if r1 == null goto label1;

        z0 = virtualinvoke r1.<com.android.internal.telephony.uicc.IccRecords: boolean getRecordsLoaded()>();

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public java.lang.String getIccSerialNumber()
    {
        com.android.internal.telephony.Phone r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        com.android.internal.telephony.uicc.IccRecords r3;
        java.lang.String r4;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (com.android.internal.telephony.uicc.IccRecords) $r2;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<com.android.internal.telephony.uicc.IccRecords: java.lang.String getIccId()>();

        goto label2;

     label1:
        r4 = null;

     label2:
        return r4;
    }

    public com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public com.android.internal.telephony.Phone getImsPhone()
    {
        com.android.internal.telephony.Phone r0, $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        return $r1;
    }

    public void getImsRegistrationState(java.util.function.Consumer)
    {
        com.android.internal.telephony.Phone r0, r2;
        java.util.function.Consumer r1;
        java.lang.Integer $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.util.function.Consumer;

        r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.internal.telephony.Phone: void getImsRegistrationState(java.util.function.Consumer)>(r1);

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r3);

        return;
    }

    public int getImsRegistrationTech()
    {
        com.android.internal.telephony.Phone r0, r5;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        int i1;

        r0 := @this: com.android.internal.telephony.Phone;

        r5 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        i1 = -1;

        if r5 == null goto label1;

        i1 = virtualinvoke r5.<com.android.internal.telephony.Phone: int getImsRegistrationTech()>();

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getImsRegistrationTechnology =");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r4);

        return i1;
    }

    public void getImsRegistrationTech(java.util.function.Consumer)
    {
        com.android.internal.telephony.Phone r0, r2;
        java.util.function.Consumer r1;
        java.lang.Integer $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.util.function.Consumer;

        r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.internal.telephony.Phone: void getImsRegistrationTech(java.util.function.Consumer)>(r1);

        goto label2;

     label1:
        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r3);

     label2:
        return;
    }

    public com.android.internal.telephony.uicc.IsimRecords getIsimRecords()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "getIsimRecords() is only supported on LTE devices");

        return null;
    }

    public int getLceStatus()
    {
        com.android.internal.telephony.Phone r0;
        int $i0;

        r0 := @this: com.android.internal.telephony.Phone;

        $i0 = r0.<com.android.internal.telephony.Phone: int mLceStatus>;

        return $i0;
    }

    public android.net.LinkProperties getLinkProperties(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        com.android.internal.telephony.dataconnection.TransportManager r2;
        int i0, $i1;
        com.android.internal.telephony.dataconnection.DcTracker $r3, $r4;
        android.net.LinkProperties $r5;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        if r2 == null goto label1;

        $i1 = staticinvoke <android.telephony.data.ApnSetting: int getApnTypesBitmaskFromString(java.lang.String)>(r1);

        i0 = virtualinvoke r2.<com.android.internal.telephony.dataconnection.TransportManager: int getCurrentTransport(int)>($i1);

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i0);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i0);

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.dataconnection.DcTracker: android.net.LinkProperties getLinkProperties(java.lang.String)>(r1);

        return $r5;

     label1:
        return null;
    }

    java.util.Locale getLocaleFromCarrierProperties()
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1, $r3, $r7, $r9, $r10;
        java.lang.CharSequence[] r2;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1;
        android.content.Context $r4;
        android.content.res.Resources $r5;
        java.lang.CharSequence $r6, $r8;
        java.util.Locale $r11;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.carrier");

        if r1 == null goto label5;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 == 0 goto label5;

        $r3 = "unknown";

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        goto label5;

     label1:
        $r4 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r5.<android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)>(17235974);

        i3 = 0;

     label2:
        $i1 = lengthof r2;

        if i3 >= $i1 goto label4;

        $r6 = r2[i3];

        $r7 = interfaceinvoke $r6.<java.lang.CharSequence: java.lang.String toString()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label3;

        $i2 = i3 + 1;

        $r8 = r2[$i2];

        $r9 = interfaceinvoke $r8.<java.lang.CharSequence: java.lang.String toString()>();

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String replace(char,char)>(95, 45);

        $r11 = staticinvoke <java.util.Locale: java.util.Locale forLanguageTag(java.lang.String)>($r10);

        return $r11;

     label3:
        i3 = i3 + 3;

        goto label2;

     label4:
        return null;

     label5:
        return null;
    }

    public java.util.Locale getLocaleFromSimAndCarrierPrefs()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.uicc.IccRecords r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        java.lang.Object $r3;
        java.util.Locale $r4, $r6;
        java.lang.String $r5, $r7;

        r0 := @this: com.android.internal.telephony.Phone;

        $r2 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r3 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r1 = (com.android.internal.telephony.uicc.IccRecords) $r3;

        if r1 == null goto label1;

        $r5 = virtualinvoke r1.<com.android.internal.telephony.uicc.IccRecords: java.lang.String getSimLanguage()>();

        if $r5 == null goto label1;

        $r6 = new java.util.Locale;

        $r7 = virtualinvoke r1.<com.android.internal.telephony.uicc.IccRecords: java.lang.String getSimLanguage()>();

        specialinvoke $r6.<java.util.Locale: void <init>(java.lang.String)>($r7);

        return $r6;

     label1:
        $r4 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.util.Locale getLocaleFromCarrierProperties()>();

        return $r4;
    }

    public int getLteOnCdmaMode()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CommandsInterface $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $i0 = interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: int getLteOnCdmaMode()>();

        return $i0;
    }

    public int getMNOCarrierId()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return -1;
    }

    public java.lang.String getManualNetworkSelectionPlmn()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return "";
    }

    public boolean getMessageWaitingIndicator()
    {
        com.android.internal.telephony.Phone r0;
        int $i0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $i0 = r0.<com.android.internal.telephony.Phone: int mVmCount>;

        if $i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void getModemActivityInfo(android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        android.os.WorkSource r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: android.os.WorkSource;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void getModemActivityInfo(android.os.Message,android.os.WorkSource)>(r1, r2);

        return;
    }

    public java.lang.String getModemUuId()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.RadioCapability r1;
        java.lang.String r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RadioCapability getRadioCapability()>();

        if r1 != null goto label1;

        r2 = "";

        goto label2;

     label1:
        r2 = virtualinvoke r1.<com.android.internal.telephony.RadioCapability: java.lang.String getLogicalModemUuid()>();

     label2:
        return r2;
    }

    public java.lang.String getMsisdn()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public java.lang.String getNai()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public android.net.NetworkCapabilities getNetworkCapabilities(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        com.android.internal.telephony.dataconnection.TransportManager r2;
        int i0, $i1;
        com.android.internal.telephony.dataconnection.DcTracker $r3, $r4;
        android.net.NetworkCapabilities $r5;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        if r2 == null goto label1;

        $i1 = staticinvoke <android.telephony.data.ApnSetting: int getApnTypesBitmaskFromString(java.lang.String)>(r1);

        i0 = virtualinvoke r2.<com.android.internal.telephony.dataconnection.TransportManager: int getCurrentTransport(int)>($i1);

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i0);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i0);

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.dataconnection.DcTracker: android.net.NetworkCapabilities getNetworkCapabilities(java.lang.String)>(r1);

        return $r5;

     label1:
        return null;
    }

    public void getNetworkSelectionMode(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void getNetworkSelectionMode(android.os.Message)>(r1);

        return;
    }

    public java.lang.String getOperatorNumeric()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return "";
    }

    public int getOtasp()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return 1;
    }

    public java.lang.String[] getPcscfAddress(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        com.android.internal.telephony.dataconnection.TransportManager r2;
        int i0, $i1;
        com.android.internal.telephony.dataconnection.DcTracker $r3, $r4;
        java.lang.String[] $r5;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        if r2 == null goto label1;

        $i1 = staticinvoke <android.telephony.data.ApnSetting: int getApnTypesBitmaskFromString(java.lang.String)>(r1);

        i0 = virtualinvoke r2.<com.android.internal.telephony.dataconnection.TransportManager: int getCurrentTransport(int)>($i1);

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i0);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i0);

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.dataconnection.DcTracker: java.lang.String[] getPcscfAddress(java.lang.String)>(r1);

        return $r5;

     label1:
        return null;
    }

    public int getPhoneId()
    {
        com.android.internal.telephony.Phone r0;
        int $i0;

        r0 := @this: com.android.internal.telephony.Phone;

        $i0 = r0.<com.android.internal.telephony.Phone: int mPhoneId>;

        return $i0;
    }

    public java.lang.String getPhoneName()
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: java.lang.String mName>;

        return $r1;
    }

    public abstract int getPhoneType();

    public java.util.List getPhysicalChannelConfigList()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public java.lang.String getPlmn()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public com.android.internal.telephony.Registrant getPostDialHandler()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.Registrant $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Registrant mPostDialHandler>;

        return $r1;
    }

    public android.telephony.PreciseDataConnectionState getPreciseDataConnectionState(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public void getPreferredNetworkType(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void getPreferredNetworkType(android.os.Message)>(r1);

        return;
    }

    public int getRadioAccessFamily()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.RadioCapability r1;
        int i0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RadioCapability getRadioCapability()>();

        if r1 != null goto label1;

        i0 = 0;

        goto label2;

     label1:
        i0 = virtualinvoke r1.<com.android.internal.telephony.RadioCapability: int getRadioAccessFamily()>();

     label2:
        return i0;
    }

    public com.android.internal.telephony.RadioCapability getRadioCapability()
    {
        com.android.internal.telephony.Phone r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        com.android.internal.telephony.RadioCapability $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mRadioCapability>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        $r3 = (com.android.internal.telephony.RadioCapability) $r2;

        return $r3;
    }

    public int getRadioPowerState()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CommandsInterface $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $i0 = interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: int getRadioState()>();

        return $i0;
    }

    public com.android.internal.telephony.OperatorInfo getSavedNetworkSelection()
    {
        com.android.internal.telephony.Phone r0;
        android.content.SharedPreferences r1;
        android.content.Context $r3;
        java.lang.StringBuilder $r4, $r8, $r12;
        int $i0, $i1, $i2;
        java.lang.String $r7, $r11, $r16, $r17, r19, r21;
        com.android.internal.telephony.OperatorInfo $r15;

        r0 := @this: com.android.internal.telephony.Phone;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        r1 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r3);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network_selection_key");

        $i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        r19 = interfaceinvoke r1.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r7, "");

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network_selection_name_key");

        $i1 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        r21 = interfaceinvoke r1.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r11, "");

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("network_selection_short_key");

        $i2 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r15 = new com.android.internal.telephony.OperatorInfo;

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17 = interfaceinvoke r1.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>($r16, "");

        specialinvoke $r15.<com.android.internal.telephony.OperatorInfo: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r21, $r17, r19);

        return $r15;
    }

    public com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public android.telephony.SignalStrength getSignalStrength()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.ServiceStateTracker r1;
        android.telephony.SignalStrength $r2, $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if r1 != null goto label1;

        $r3 = new android.telephony.SignalStrength;

        specialinvoke $r3.<android.telephony.SignalStrength: void <init>()>();

        return $r3;

     label1:
        $r2 = virtualinvoke r1.<com.android.internal.telephony.ServiceStateTracker: android.telephony.SignalStrength getSignalStrength()>();

        return $r2;
    }

    public com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.test.SimulatedRadioControl $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.test.SimulatedRadioControl mSimulatedRadioControl>;

        return $r1;
    }

    public void getSmscAddress(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void getSmscAddress(android.os.Message)>(r1);

        return;
    }

    public int getSpecificCarrierId()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return -1;
    }

    public java.lang.String getSpecificCarrierName()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public abstract com.android.internal.telephony.PhoneConstants$State getState();

    protected int getStoredVoiceMessageCount()
    {
        com.android.internal.telephony.Phone r0;
        int i1, i6, i8;
        java.lang.String r1, $r5, $r10, $r16, $r22, r26;
        boolean $z0, $z1;
        java.lang.StringBuilder $r2, $r7, $r13, $r17;
        android.content.Context $r6;
        android.content.SharedPreferences r23;
        android.content.SharedPreferences$Editor r28;

        r0 := @this: com.android.internal.telephony.Phone;

        i6 = 0;

        i1 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>(i1);

        if $z0 == 0 goto label5;

        $r6 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        r23 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vm_count_key");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        i8 = interfaceinvoke r23.<android.content.SharedPreferences: int getInt(java.lang.String,int)>($r10, -2);

        if i8 == -2 goto label1;

        i6 = i8;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getStoredVoiceMessageCount: from preference for subId ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8);

        $r22 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r22);

        goto label4;

     label1:
        r1 = interfaceinvoke r23.<android.content.SharedPreferences: java.lang.String getString(java.lang.String,java.lang.String)>("vm_id_key", null);

        if r1 == null goto label4;

        r26 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.lang.String getSubscriberId()>();

        if r26 == null goto label2;

        $z1 = virtualinvoke r26.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        i6 = interfaceinvoke r23.<android.content.SharedPreferences: int getInt(java.lang.String,int)>("vm_count_key", 0);

        virtualinvoke r0.<com.android.internal.telephony.Phone: void setVoiceMessageCount(int)>(i6);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getStoredVoiceMessageCount: from preference = ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r16);

        goto label3;

     label2:
        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "getStoredVoiceMessageCount: returning 0 as count for matching subscriberId not found");

        i6 = 0;

     label3:
        r28 = interfaceinvoke r23.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        interfaceinvoke r28.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>("vm_id_key");

        interfaceinvoke r28.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor remove(java.lang.String)>("vm_count_key");

        interfaceinvoke r28.<android.content.SharedPreferences$Editor: void apply()>();

     label4:
        goto label6;

     label5:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getStoredVoiceMessageCount: invalid subId ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", $r5);

        i6 = 0;

     label6:
        return i6;
    }

    public int getSubId()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.SubscriptionController $r1, $r2;
        int $i0, $i1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = staticinvoke <com.android.internal.telephony.SubscriptionController: com.android.internal.telephony.SubscriptionController getInstance()>();

        if $r1 != null goto label1;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "SubscriptionController.getInstance = null! Returning default subId");

        return 2147483647;

     label1:
        $r2 = staticinvoke <com.android.internal.telephony.SubscriptionController: com.android.internal.telephony.SubscriptionController getInstance()>();

        $i0 = r0.<com.android.internal.telephony.Phone: int mPhoneId>;

        $i1 = virtualinvoke $r2.<com.android.internal.telephony.SubscriptionController: int getSubIdUsingPhoneId(int)>($i0);

        return $i1;
    }

    public java.lang.String getSystemProperty(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1, r2, $r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean getUnitTestMode()>();

        if $z0 == 0 goto label1;

        return null;

     label1:
        $r3 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>(r1, r2);

        return $r3;
    }

    public com.android.internal.telephony.dataconnection.TransportManager getTransportManager()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return null;
    }

    public com.android.internal.telephony.uicc.UiccCard getUiccCard()
    {
        com.android.internal.telephony.Phone r0;
        int $i0;
        com.android.internal.telephony.uicc.UiccController $r1;
        com.android.internal.telephony.uicc.UiccCard $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.uicc.UiccController mUiccController>;

        $i0 = r0.<com.android.internal.telephony.Phone: int mPhoneId>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccCard getUiccCard(int)>($i0);

        return $r2;
    }

    public boolean getUnitTestMode()
    {
        com.android.internal.telephony.Phone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mUnitTestMode>;

        return $z0;
    }

    public com.android.internal.telephony.uicc.UsimServiceTable getUsimServiceTable()
    {
        com.android.internal.telephony.Phone r0;
        java.util.concurrent.atomic.AtomicReference $r1;
        java.lang.Object $r2;
        com.android.internal.telephony.uicc.IccRecords r3;
        com.android.internal.telephony.uicc.UsimServiceTable r4;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mIccRecords>;

        $r2 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

        r3 = (com.android.internal.telephony.uicc.IccRecords) $r2;

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<com.android.internal.telephony.uicc.IccRecords: com.android.internal.telephony.uicc.UsimServiceTable getUsimServiceTable()>();

        goto label2;

     label1:
        r4 = null;

     label2:
        return r4;
    }

    public int getVoiceActivationState()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.SimActivationTracker $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.SimActivationTracker mSimActivationTracker>;

        $i0 = virtualinvoke $r1.<com.android.internal.telephony.SimActivationTracker: int getVoiceActivationState()>();

        return $i0;
    }

    public com.android.internal.telephony.metrics.VoiceCallSessionStats getVoiceCallSessionStats()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.metrics.VoiceCallSessionStats $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.metrics.VoiceCallSessionStats mVoiceCallSessionStats>;

        return $r1;
    }

    public int getVoiceMessageCount()
    {
        com.android.internal.telephony.Phone r0;
        int $i0;

        r0 := @this: com.android.internal.telephony.Phone;

        $i0 = r0.<com.android.internal.telephony.Phone: int mVmCount>;

        return $i0;
    }

    public int getVoicePhoneServiceState()
    {
        com.android.internal.telephony.Phone r0, r1;
        android.telephony.ServiceState $r2, $r3;
        int $i0, $i1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if r1 == null goto label1;

        $r3 = virtualinvoke r1.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i1 = virtualinvoke $r3.<android.telephony.ServiceState: int getState()>();

        if $i1 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.telephony.ServiceState getServiceState()>();

        $i0 = virtualinvoke $r2.<android.telephony.ServiceState: int getState()>();

        return $i0;
    }

    protected void handleExitEmergencyCallbackMode()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.internal.telephony.Phone r0, $r40, $r41, r65;
        java.lang.Object $r1, $r8, $r21, $r23, $r25, $r32, $r34, $r35, $r42, $r49;
        android.os.AsyncResult $r2, $r9, r58, r66, r68;
        java.lang.StringBuilder $r3, $r13, $r27, $r44, $r53, r62;
        com.android.internal.telephony.PhoneConstants$State $r5, $r11, $r12, $r15, $r18, $r19, r72;
        java.lang.String $r7, $r17, $r31, $r39, $r48, $r56, r59;
        java.lang.Throwable $r10, $r22, $r29, $r33, $r43, $r46;
        boolean $z0, $z1, $z2;
        int $i1, $i3, $i4, i10, i11, i12;
        com.android.internal.telephony.RegistrantList $r20;
        java.util.ArrayList $r24;
        java.lang.Integer $r26;
        com.android.internal.telephony.PhoneInternalInterface$DialArgs $r36;
        int[] $r50;
        java.lang.RuntimeException $r51;
        com.android.internal.telephony.CallStateException $r52;
        android.os.Message r57;
        com.android.internal.telephony.PhoneInternalInterface$DialArgs$Builder r60;
        com.android.internal.telephony.Connection r61;

        r0 := @this: com.android.internal.telephony.Phone;

        r57 := @parameter0: android.os.Message;

        i10 = r57.<android.os.Message: int what>;

        if i10 == 16 goto label20;

        if i10 == 17 goto label20;

        i11 = r57.<android.os.Message: int what>;

        if i11 == 14 goto label16;

        if i11 == 15 goto label15;

        if i11 == 34 goto label14;

        if i11 == 52 goto label13;

        if i11 == 37 goto label11;

        if i11 == 38 goto label10;

        tableswitch(i11)
        {
            case 30: goto label09;
            case 31: goto label07;
            case 32: goto label02;
            default: goto label01;
        };

     label01:
        $r51 = new java.lang.RuntimeException;

        specialinvoke $r51.<java.lang.RuntimeException: void <init>(java.lang.String)>("unexpected event not handled");

        throw $r51;

     label02:
        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "Event EVENT_INITIATE_SILENT_REDIAL Received");

        $r32 = r57.<android.os.Message: java.lang.Object obj>;

        r58 = (android.os.AsyncResult) $r32;

        $r33 = r58.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r33 != null goto label19;

        $r34 = r58.<android.os.AsyncResult: java.lang.Object result>;

        if $r34 == null goto label19;

        $r35 = r58.<android.os.AsyncResult: java.lang.Object result>;

        r59 = (java.lang.String) $r35;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r59);

        if $z2 == 0 goto label03;

        return;

     label03:
        r60 = new com.android.internal.telephony.PhoneInternalInterface$DialArgs$Builder;

        specialinvoke r60.<com.android.internal.telephony.PhoneInternalInterface$DialArgs$Builder: void <init>()>();

        $r36 = virtualinvoke r60.<com.android.internal.telephony.PhoneInternalInterface$DialArgs$Builder: com.android.internal.telephony.PhoneInternalInterface$DialArgs build()>();

        r61 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Connection dialInternal(java.lang.String,com.android.internal.telephony.PhoneInternalInterface$DialArgs)>(r59, $r36);

        r62 = new java.lang.StringBuilder;

        specialinvoke r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notify redial connection changed cn: ");

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r61);

        $r39 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r39);

        $r40 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if $r40 == null goto label04;

        $r41 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        virtualinvoke $r41.<com.android.internal.telephony.Phone: void notifyRedialConnectionChanged(com.android.internal.telephony.Connection)>(r61);

     label04:
        goto label06;

     label05:
        $r52 := @caughtexception;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("silent redial failed: ");

        virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r52);

        $r56 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", $r56);

        r65 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if r65 == null goto label06;

        virtualinvoke r65.<com.android.internal.telephony.Phone: void notifyRedialConnectionChanged(com.android.internal.telephony.Connection)>(null);

     label06:
        goto label19;

     label07:
        $r42 = r57.<android.os.Message: java.lang.Object obj>;

        r66 = (android.os.AsyncResult) $r42;

        $r43 = r66.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r43 != null goto label08;

        $r49 = r66.<android.os.AsyncResult: java.lang.Object result>;

        $r50 = (int[]) $r49;

        specialinvoke r0.<com.android.internal.telephony.Phone: void handleSrvccStateChanged(int[])>($r50);

        goto label19;

     label08:
        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Srvcc exception: ");

        $r46 = r66.<android.os.AsyncResult: java.lang.Throwable exception>;

        virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r46);

        $r48 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", $r48);

        goto label19;

     label09:
        virtualinvoke r0.<com.android.internal.telephony.Phone: void onUpdateIccAvailability()>();

        goto label19;

     label10:
        specialinvoke r0.<com.android.internal.telephony.Phone: void onCheckForNetworkSelectionModeAutomatic(android.os.Message)>(r57);

        goto label19;

     label11:
        $r21 = r57.<android.os.Message: java.lang.Object obj>;

        r68 = (android.os.AsyncResult) $r21;

        $r22 = r68.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r22 == null goto label12;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("config LCE service failed: ");

        $r29 = r68.<android.os.AsyncResult: java.lang.Throwable exception>;

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r31);

        goto label19;

     label12:
        $r23 = r68.<android.os.AsyncResult: java.lang.Object result>;

        $r24 = (java.util.ArrayList) $r23;

        $r25 = virtualinvoke $r24.<java.util.ArrayList: java.lang.Object get(int)>(0);

        $r26 = (java.lang.Integer) $r25;

        $i4 = virtualinvoke $r26.<java.lang.Integer: int intValue()>();

        r0.<com.android.internal.telephony.Phone: int mLceStatus> = $i4;

        goto label19;

     label13:
        $z1 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean areAllDataDisconnected()>();

        if $z1 == 0 goto label19;

        $r20 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mAllDataDisconnectedRegistrants>;

        virtualinvoke $r20.<com.android.internal.telephony.RegistrantList: void notifyRegistrants()>();

        goto label19;

     label14:
        goto label19;

     label15:
        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Event EVENT_CALL_RING_CONTINUE Received state=");

        $r15 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneConstants$State getState()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r17);

        $r18 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneConstants$State getState()>();

        $r19 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State RINGING>;

        if $r18 != $r19 goto label19;

        $i3 = r57.<android.os.Message: int arg1>;

        specialinvoke r0.<com.android.internal.telephony.Phone: void sendIncomingCallRingNotification(int)>($i3);

        goto label19;

     label16:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Event EVENT_CALL_RING Received state=");

        $r5 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneConstants$State getState()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r7);

        $r8 = r57.<android.os.Message: java.lang.Object obj>;

        $r9 = (android.os.AsyncResult) $r8;

        $r10 = $r9.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r10 != null goto label19;

        r72 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneConstants$State getState()>();

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mDoesRilSendMultipleCallRing>;

        if $z0 != 0 goto label18;

        $r11 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State RINGING>;

        if r72 == $r11 goto label17;

        $r12 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State IDLE>;

        if r72 != $r12 goto label18;

     label17:
        $i1 = r0.<com.android.internal.telephony.Phone: int mCallRingContinueToken>;

        i12 = $i1 + 1;

        r0.<com.android.internal.telephony.Phone: int mCallRingContinueToken> = i12;

        specialinvoke r0.<com.android.internal.telephony.Phone: void sendIncomingCallRingNotification(int)>(i12);

        goto label19;

     label18:
        specialinvoke r0.<com.android.internal.telephony.Phone: void notifyIncomingRing()>();

     label19:
        return;

     label20:
        $r1 = r57.<android.os.Message: java.lang.Object obj>;

        $r2 = (android.os.AsyncResult) $r1;

        specialinvoke r0.<com.android.internal.telephony.Phone: void handleSetSelectNetwork(android.os.AsyncResult)>($r2);

        return;

        catch com.android.internal.telephony.CallStateException from label03 to label04 with label05;
    }

    public boolean hasMatchedTetherApnSetting()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.dataconnection.DcTracker $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(1);

        if $r1 == null goto label1;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(1);

        $z0 = virtualinvoke $r2.<com.android.internal.telephony.dataconnection.DcTracker: boolean hasMatchedTetherApnSetting()>();

        return $z0;

     label1:
        return 0;
    }

    public void invokeOemRilRequestRaw(byte[], android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        byte[] r1;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: byte[];

        r2 := @parameter1: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestRaw(byte[],android.os.Message)>(r1, r2);

        return;
    }

    public void invokeOemRilRequestStrings(java.lang.String[], android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String[] r1;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String[];

        r2 := @parameter1: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void invokeOemRilRequestStrings(java.lang.String[],android.os.Message)>(r1, r2);

        return;
    }

    public boolean isCdmaSubscriptionAppPresent()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return 0;
    }

    public boolean isClirActivationAndDeactivationPrevented()
    {
        com.android.internal.telephony.Phone r0;
        android.os.PersistableBundle r1, r5;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.telephony.CarrierConfigManager $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        $r4 = (android.telephony.CarrierConfigManager) $r3;

        $i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        r1 = virtualinvoke $r4.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i0);

        r5 = r1;

        if r1 != null goto label1;

        r5 = staticinvoke <android.telephony.CarrierConfigManager: android.os.PersistableBundle getDefaultConfig()>();

     label1:
        $z0 = virtualinvoke r5.<android.os.PersistableBundle: boolean getBoolean(java.lang.String)>("prevent_clir_activation_and_deactivation_code_bool");

        return $z0;
    }

    public boolean isConcurrentVoiceAndDataAllowed()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.ServiceStateTracker r1;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if r1 != null goto label1;

        z0 = 0;

        goto label2;

     label1:
        z0 = virtualinvoke r1.<com.android.internal.telephony.ServiceStateTracker: boolean isConcurrentVoiceAndDataAllowed()>();

     label2:
        return z0;
    }

    public boolean isCspPlmnEnabled()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return 0;
    }

    public boolean isDataAllowed(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean isDataAllowed(int,com.android.internal.telephony.dataconnection.DataConnectionReasons)>(i0, null);

        return $z0;
    }

    public boolean isDataAllowed(int, com.android.internal.telephony.dataconnection.DataConnectionReasons)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.dataconnection.DataConnectionReasons r1;
        com.android.internal.telephony.dataconnection.TransportManager r2;
        com.android.internal.telephony.dataconnection.DcTracker $r3, $r4;
        boolean $z0;
        int i0, i1;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.telephony.dataconnection.DataConnectionReasons;

        r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        if r2 == null goto label1;

        i1 = virtualinvoke r2.<com.android.internal.telephony.dataconnection.TransportManager: int getCurrentTransport(int)>(i0);

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i1);

        if $r3 == null goto label1;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i1);

        $z0 = virtualinvoke $r4.<com.android.internal.telephony.dataconnection.DcTracker: boolean isDataAllowed(com.android.internal.telephony.dataconnection.DataConnectionReasons)>(r1);

        return $z0;

     label1:
        return 0;
    }

    public boolean isDnsCheckDisabled()
    {
        com.android.internal.telephony.Phone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mDnsCheckDisabled>;

        return $z0;
    }

    public boolean isEcmCanceledForEmergency()
    {
        com.android.internal.telephony.Phone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mEcmCanceledForEmergency>;

        return $z0;
    }

    public boolean isImsAvailable()
    {
        com.android.internal.telephony.Phone r0, r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if r1 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r1.<com.android.internal.telephony.Phone: boolean isImsAvailable()>();

        return $z0;
    }

    public boolean isImsCapabilityAvailable(int, int) throws com.android.ims.ImsException
    {
        com.android.internal.telephony.Phone r0, r5;
        int i0, i1;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r5 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        z0 = 0;

        if r5 == null goto label1;

        z0 = virtualinvoke r5.<com.android.internal.telephony.Phone: boolean isImsCapabilityAvailable(int,int)>(i0, i1);

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isImsRegistered =");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r4);

        return z0;
    }

    public boolean isImsRegistered()
    {
        com.android.internal.telephony.Phone r0, r3;
        boolean z0;
        com.android.internal.telephony.ServiceStateTracker r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r7;

        r0 := @this: com.android.internal.telephony.Phone;

        r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        z0 = 0;

        if r3 == null goto label1;

        z0 = virtualinvoke r3.<com.android.internal.telephony.Phone: boolean isImsRegistered()>();

        goto label2;

     label1:
        r4 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if r4 == null goto label2;

        z0 = virtualinvoke r4.<com.android.internal.telephony.ServiceStateTracker: boolean isImsRegistered()>();

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isImsRegistered =");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r7);

        return z0;
    }

    public boolean isImsUseEnabled()
    {
        com.android.internal.telephony.Phone r0;
        com.android.ims.ImsManager r1;
        int $i0;
        android.content.Context $r2;
        boolean $z0, $z1, $z2, $z3, $z4, z5;

        r0 := @this: com.android.internal.telephony.Phone;

        $r2 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        $i0 = r0.<com.android.internal.telephony.Phone: int mPhoneId>;

        r1 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>($r2, $i0);

        $z0 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isVolteEnabledByPlatform()>();

        if $z0 == 0 goto label1;

        $z4 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isEnhanced4gLteModeSettingEnabledByUser()>();

        if $z4 != 0 goto label2;

     label1:
        $z1 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isWfcEnabledByPlatform()>();

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isWfcEnabledByUser()>();

        if $z2 == 0 goto label3;

        $z3 = virtualinvoke r1.<com.android.ims.ImsManager: boolean isNonTtyOrTtyOnVolteEnabled()>();

        if $z3 == 0 goto label3;

     label2:
        z5 = 1;

        goto label4;

     label3:
        z5 = 0;

     label4:
        return z5;
    }

    public boolean isImsVideoCallOrConferencePresent()
    {
        com.android.internal.telephony.Phone r0, $r4, $r6, r8;
        com.android.internal.telephony.Call $r3, $r5, $r7;
        boolean $z0, $z1, $z2, z3;
        java.lang.StringBuilder $r9;
        java.lang.String $r11;

        r0 := @this: com.android.internal.telephony.Phone;

        z3 = 0;

        r8 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if r8 == null goto label3;

        $r3 = virtualinvoke r8.<com.android.internal.telephony.Phone: com.android.internal.telephony.Call getForegroundCall()>();

        $z0 = specialinvoke r0.<com.android.internal.telephony.Phone: boolean isVideoCallOrConference(com.android.internal.telephony.Call)>($r3);

        if $z0 != 0 goto label2;

        $r4 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.Phone: com.android.internal.telephony.Call getBackgroundCall()>();

        $z1 = specialinvoke r0.<com.android.internal.telephony.Phone: boolean isVideoCallOrConference(com.android.internal.telephony.Call)>($r5);

        if $z1 != 0 goto label2;

        $r6 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.Phone: com.android.internal.telephony.Call getRingingCall()>();

        $z2 = specialinvoke r0.<com.android.internal.telephony.Phone: boolean isVideoCallOrConference(com.android.internal.telephony.Call)>($r7);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isImsVideoCallOrConferencePresent: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3);

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r11);

        return z3;
    }

    public boolean isInEcm()
    {
        com.android.internal.telephony.Phone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mIsPhoneInEcmState>;

        return $z0;
    }

    public boolean isInEmergencyCall()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return 0;
    }

    public boolean isInEmergencySmsMode()
    {
        com.android.internal.telephony.Phone r0;
        long l0, $l4, $l5, $l6;
        android.os.PersistableBundle r1;
        int i1, $i3, i8;
        byte $b2, $b7;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.telephony.CarrierConfigManager $r4;
        com.android.internal.telephony.LocalLog $r5;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        l0 = r0.<com.android.internal.telephony.Phone: long mTimeLastEmergencySmsSentMs>;

        z0 = 0;

        $b2 = l0 cmp -1L;

        if $b2 != 0 goto label1;

        return 0;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        $r4 = (android.telephony.CarrierConfigManager) $r3;

        $i3 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        r1 = virtualinvoke $r4.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i3);

        if r1 != null goto label2;

        return 0;

     label2:
        i1 = virtualinvoke r1.<android.os.PersistableBundle: int getInt(java.lang.String,int)>("emergency_sms_mode_timer_ms_int", 0);

        if i1 != 0 goto label3;

        return 0;

     label3:
        i8 = i1;

        if i1 <= 300000 goto label4;

        i8 = 300000;

     label4:
        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l5 = (long) i8;

        $l6 = $l5 + l0;

        $b7 = $l4 cmp $l6;

        if $b7 > 0 goto label5;

        z0 = 1;

     label5:
        if z0 != 0 goto label6;

        r0.<com.android.internal.telephony.Phone: long mTimeLastEmergencySmsSentMs> = -1L;

        goto label7;

     label6:
        $r5 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.LocalLog mLocalLog>;

        virtualinvoke $r5.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>("isInEmergencySmsMode: queried while eSMS mode is active.");

     label7:
        return z0;
    }

    public boolean isInImsEcm()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return 0;
    }

    protected boolean isMatchGid(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1, r2, $r3;
        int i0, $i1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.lang.String getGroupIdLevel1()>();

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 != 0 goto label1;

        $i1 = virtualinvoke r2.<java.lang.String: int length()>();

        if $i1 < i0 goto label1;

        $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1);

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isMccMncMarkedAsNonRoaming(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.Phone: boolean getRoamingOverrideHelper(java.lang.String,java.lang.String)>("gsm_non_roaming_list_", r1);

        return $z0;
    }

    public boolean isMccMncMarkedAsRoaming(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.Phone: boolean getRoamingOverrideHelper(java.lang.String,java.lang.String)>("gsm_roaming_list_", r1);

        return $z0;
    }

    public boolean isMinInfoReady()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return 0;
    }

    public boolean isOtaSpNumber(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean isRadioAvailable()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CommandsInterface $r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $i0 = interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: int getRadioState()>();

        if $i0 == 2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isRadioOn()
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        com.android.internal.telephony.CommandsInterface $r1;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        i0 = interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: int getRadioState()>();

        z0 = 1;

        if i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isShuttingDown()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.ServiceStateTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.ServiceStateTracker: boolean isDeviceShuttingDown()>();

        return $z0;
    }

    public boolean isSidMarkedAsNonRoaming(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $z0 = specialinvoke r0.<com.android.internal.telephony.Phone: boolean getRoamingOverrideHelper(java.lang.String,java.lang.String)>("cdma_non_roaming_list_", $r1);

        return $z0;
    }

    public boolean isSidMarkedAsRoaming(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        java.lang.String $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $z0 = specialinvoke r0.<com.android.internal.telephony.Phone: boolean getRoamingOverrideHelper(java.lang.String,java.lang.String)>("cdma_roaming_list_", $r1);

        return $z0;
    }

    public boolean isUtEnabled()
    {
        com.android.internal.telephony.Phone r0, r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.internal.telephony.Phone: boolean isUtEnabled()>();

        return $z0;

     label1:
        return 0;
    }

    public boolean isVideoEnabled()
    {
        com.android.internal.telephony.Phone r0, r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<com.android.internal.telephony.Phone: boolean isVideoEnabled()>();

        return $z0;

     label1:
        return 0;
    }

    public boolean isVolteEnabled()
    {
        com.android.internal.telephony.Phone r0, r5;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r5 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        z0 = 0;

        if r5 == null goto label1;

        z0 = virtualinvoke r5.<com.android.internal.telephony.Phone: boolean isVolteEnabled()>();

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isImsRegistered =");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r4);

        return z0;
    }

    public boolean isWifiCallingEnabled()
    {
        com.android.internal.telephony.Phone r0, r5;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r5 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Phone mImsPhone>;

        z0 = 0;

        if r5 == null goto label1;

        z0 = virtualinvoke r5.<com.android.internal.telephony.Phone: boolean isWifiCallingEnabled()>();

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isWifiCallingEnabled =");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r4);

        return z0;
    }

    protected void migrate(com.android.internal.telephony.RegistrantList, com.android.internal.telephony.RegistrantList)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.RegistrantList r1, r2;
        int i0, i2;
        android.os.Message r3;
        java.lang.Object $r4, $r6, $r8, $r9;
        com.android.internal.telephony.Registrant $r5, $r10;
        com.android.internal.telephony.CallManager $r7;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: com.android.internal.telephony.RegistrantList;

        r2 := @parameter1: com.android.internal.telephony.RegistrantList;

        if r2 != null goto label1;

        return;

     label1:
        virtualinvoke r2.<com.android.internal.telephony.RegistrantList: void removeCleared()>();

        i2 = 0;

        i0 = virtualinvoke r2.<com.android.internal.telephony.RegistrantList: int size()>();

     label2:
        if i2 >= i0 goto label6;

        $r4 = virtualinvoke r2.<com.android.internal.telephony.RegistrantList: java.lang.Object get(int)>(i2);

        $r5 = (com.android.internal.telephony.Registrant) $r4;

        r3 = virtualinvoke $r5.<com.android.internal.telephony.Registrant: android.os.Message messageForRegistrant()>();

        if r3 == null goto label4;

        $r6 = r3.<android.os.Message: java.lang.Object obj>;

        $r7 = staticinvoke <com.android.internal.telephony.CallManager: com.android.internal.telephony.CallManager getInstance()>();

        $r8 = virtualinvoke $r7.<com.android.internal.telephony.CallManager: java.lang.Object getRegistrantIdentifier()>();

        if $r6 != $r8 goto label3;

        goto label5;

     label3:
        $r9 = virtualinvoke r2.<com.android.internal.telephony.RegistrantList: java.lang.Object get(int)>(i2);

        $r10 = (com.android.internal.telephony.Registrant) $r9;

        virtualinvoke r1.<com.android.internal.telephony.RegistrantList: void add(com.android.internal.telephony.Registrant)>($r10);

        goto label5;

     label4:
        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "msg is null");

     label5:
        i2 = i2 + 1;

        goto label2;

     label6:
        return;
    }

    protected void migrateFrom(com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.Phone r0, r1;
        com.android.internal.telephony.RegistrantList $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mHandoverRegistrants>;

        $r2 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mHandoverRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r3, $r2);

        $r5 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPreciseCallStateRegistrants>;

        $r4 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPreciseCallStateRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r5, $r4);

        $r7 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mNewRingingConnectionRegistrants>;

        $r6 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mNewRingingConnectionRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r7, $r6);

        $r9 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mIncomingRingRegistrants>;

        $r8 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mIncomingRingRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r9, $r8);

        $r11 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mDisconnectRegistrants>;

        $r10 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mDisconnectRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r11, $r10);

        $r13 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mServiceStateRegistrants>;

        $r12 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mServiceStateRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r13, $r12);

        $r15 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mMmiCompleteRegistrants>;

        $r14 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mMmiCompleteRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r15, $r14);

        $r17 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mMmiRegistrants>;

        $r16 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mMmiRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r17, $r16);

        $r19 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mUnknownConnectionRegistrants>;

        $r18 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mUnknownConnectionRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r19, $r18);

        $r21 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mSuppServiceFailedRegistrants>;

        $r20 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mSuppServiceFailedRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r21, $r20);

        $r23 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mCellInfoRegistrants>;

        $r22 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mCellInfoRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r23, $r22);

        $r25 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mRedialRegistrants>;

        $r24 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mRedialRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r25, $r24);

        $z0 = virtualinvoke r1.<com.android.internal.telephony.Phone: boolean isInEmergencyCall()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void setIsInEmergencyCall()>();

     label1:
        $z1 = virtualinvoke r1.<com.android.internal.telephony.Phone: boolean isEcmCanceledForEmergency()>();

        virtualinvoke r0.<com.android.internal.telephony.Phone: void setEcmCanceledForEmergency(boolean)>($z1);

        return;
    }

    public boolean needsOtaServiceProvisioning()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return 0;
    }

    public void notifyAllActiveDataConnections()
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String[] r1;
        int i0, i1;
        java.lang.String r2;
        com.android.internal.telephony.PhoneNotifier $r3;
        android.telephony.PreciseDataConnectionState $r4;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.lang.String[] getActiveApnTypes()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.telephony.PreciseDataConnectionState getPreciseDataConnectionState(java.lang.String)>(r2);

        interfaceinvoke $r3.<com.android.internal.telephony.PhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,android.telephony.PreciseDataConnectionState)>(r0, r2, $r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    public void notifyCallForwardingIndicator()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return;
    }

    public void notifyCellInfo(java.util.List)
    {
        com.android.internal.telephony.Phone r0;
        java.util.List r1;
        android.os.AsyncResult $r3;
        com.android.internal.telephony.RegistrantList $r4;
        com.android.internal.telephony.PhoneNotifier $r5;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.util.List;

        $r3 = new android.os.AsyncResult;

        specialinvoke $r3.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        $r4 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mCellInfoRegistrants>;

        virtualinvoke $r4.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r3);

        $r5 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r5.<com.android.internal.telephony.PhoneNotifier: void notifyCellInfo(com.android.internal.telephony.Phone,java.util.List)>(r0, r1);

        return;
    }

    public void notifyDataActivationStateChanged(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyDataActivationStateChanged(com.android.internal.telephony.Phone,int)>(r0, i0);

        return;
    }

    public void notifyDataActivity()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyDataActivity(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    public void notifyDataConnection(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        com.android.internal.telephony.PhoneNotifier $r2;
        android.telephony.PreciseDataConnectionState $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.telephony.PreciseDataConnectionState getPreciseDataConnectionState(java.lang.String)>(r1);

        interfaceinvoke $r2.<com.android.internal.telephony.PhoneNotifier: void notifyDataConnection(com.android.internal.telephony.Phone,java.lang.String,android.telephony.PreciseDataConnectionState)>(r0, r1, $r3);

        return;
    }

    public void notifyDataConnectionFailed(java.lang.String, java.lang.String, int)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1, r2;
        int i0;
        com.android.internal.telephony.PhoneNotifier $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r3.<com.android.internal.telephony.PhoneNotifier: void notifyDataConnectionFailed(com.android.internal.telephony.Phone,java.lang.String,java.lang.String,int)>(r0, r1, r2, i0);

        return;
    }

    protected void notifyDisconnectP(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.Phone r0;
        android.os.AsyncResult $r1;
        com.android.internal.telephony.RegistrantList $r2;
        com.android.internal.telephony.Connection r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r3 := @parameter0: com.android.internal.telephony.Connection;

        $r1 = new android.os.AsyncResult;

        specialinvoke $r1.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r3, null);

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mDisconnectRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r1);

        return;
    }

    public void notifyDisplayInfoChanged(android.telephony.TelephonyDisplayInfo)
    {
        com.android.internal.telephony.Phone r0;
        android.telephony.TelephonyDisplayInfo r1;
        com.android.internal.telephony.PhoneNotifier $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.telephony.TelephonyDisplayInfo;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r2.<com.android.internal.telephony.PhoneNotifier: void notifyDisplayInfoChanged(com.android.internal.telephony.Phone,android.telephony.TelephonyDisplayInfo)>(r0, r1);

        return;
    }

    public void notifyEmergencyNumberList()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyEmergencyNumberList(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    public void notifyForVideoCapabilityChanged(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        android.os.AsyncResult $r2;
        java.lang.Boolean $r3;
        com.android.internal.telephony.RegistrantList $r4;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.telephony.Phone: boolean mIsVideoCapable> = z0;

        $r2 = new android.os.AsyncResult;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, $r3, null);

        $r4 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mVideoCapabilityChangedRegistrants>;

        virtualinvoke $r4.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r2);

        return;
    }

    public void notifyHandoverStateChanged(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.Phone r0;
        android.os.AsyncResult $r1;
        com.android.internal.telephony.RegistrantList $r2;
        com.android.internal.telephony.Connection r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r3 := @parameter0: com.android.internal.telephony.Connection;

        $r1 = new android.os.AsyncResult;

        specialinvoke $r1.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r3, null);

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mHandoverRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r1);

        return;
    }

    public void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.Phone r0;
        boolean $z0;
        android.os.AsyncResult $r1;
        com.android.internal.telephony.RegistrantList $r2;
        com.android.internal.telephony.Connection r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r3 := @parameter0: com.android.internal.telephony.Connection;

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mIsVoiceCapable>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new android.os.AsyncResult;

        specialinvoke $r1.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r3, null);

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mNewRingingConnectionRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r1);

        return;
    }

    public void notifyOtaspChanged(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.os.AsyncResult $r1;
        com.android.internal.telephony.RegistrantList $r2;
        java.lang.Integer $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mOtaspRegistrants>;

        $r1 = new android.os.AsyncResult;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        specialinvoke $r1.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, $r3, null);

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r1);

        return;
    }

    public void notifyOutgoingEmergencyCall(android.telephony.emergency.EmergencyNumber)
    {
        com.android.internal.telephony.Phone r0;
        android.telephony.emergency.EmergencyNumber r1;
        com.android.internal.telephony.PhoneNotifier $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.telephony.emergency.EmergencyNumber;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r2.<com.android.internal.telephony.PhoneNotifier: void notifyOutgoingEmergencyCall(com.android.internal.telephony.Phone,android.telephony.emergency.EmergencyNumber)>(r0, r1);

        return;
    }

    public void notifyOutgoingEmergencySms(android.telephony.emergency.EmergencyNumber)
    {
        com.android.internal.telephony.Phone r0;
        android.telephony.emergency.EmergencyNumber r1;
        com.android.internal.telephony.PhoneNotifier $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.telephony.emergency.EmergencyNumber;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r2.<com.android.internal.telephony.PhoneNotifier: void notifyOutgoingEmergencySms(com.android.internal.telephony.Phone,android.telephony.emergency.EmergencyNumber)>(r0, r1);

        return;
    }

    public void notifyPhysicalChannelConfiguration(java.util.List)
    {
        com.android.internal.telephony.Phone r0;
        java.util.List r1;
        android.os.AsyncResult $r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.util.List;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPhysicalChannelConfigRegistrants>;

        $r2 = new android.os.AsyncResult;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r2);

        return;
    }

    protected void notifyPreciseCallStateChangedP()
    {
        com.android.internal.telephony.Phone r0;
        android.os.AsyncResult $r2;
        com.android.internal.telephony.RegistrantList $r3;
        com.android.internal.telephony.PhoneNotifier $r4;

        r0 := @this: com.android.internal.telephony.Phone;

        $r2 = new android.os.AsyncResult;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r0, null);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPreciseCallStateRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r2);

        $r4 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r4.<com.android.internal.telephony.PhoneNotifier: void notifyPreciseCallState(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    public void notifyRedialConnectionChanged(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.Phone r0;
        android.os.AsyncResult $r1;
        com.android.internal.telephony.RegistrantList $r2;
        com.android.internal.telephony.Connection r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r3 := @parameter0: com.android.internal.telephony.Connection;

        $r1 = new android.os.AsyncResult;

        specialinvoke $r1.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r3, null);

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mRedialRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r1);

        return;
    }

    protected void notifyServiceStateChangedP(android.telephony.ServiceState)
    {
        com.android.internal.telephony.Phone r0;
        android.os.AsyncResult $r1;
        com.android.internal.telephony.RegistrantList $r2;
        com.android.internal.telephony.PhoneNotifier $r3;
        android.telephony.ServiceState r4;

        r0 := @this: com.android.internal.telephony.Phone;

        r4 := @parameter0: android.telephony.ServiceState;

        $r1 = new android.os.AsyncResult;

        specialinvoke $r1.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r4, null);

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mServiceStateRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r3.<com.android.internal.telephony.PhoneNotifier: void notifyServiceState(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    public void notifySignalStrength()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifySignalStrength(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    public void notifySmsSent(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        android.telephony.TelephonyManager r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        boolean $z0;
        com.android.internal.telephony.LocalLog $r5;
        long $l0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        r2 = (android.telephony.TelephonyManager) $r4;

        if r2 == null goto label1;

        $z0 = virtualinvoke r2.<android.telephony.TelephonyManager: boolean isEmergencyNumber(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.LocalLog mLocalLog>;

        virtualinvoke $r5.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>("Emergency SMS detected, recording time.");

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.telephony.Phone: long mTimeLastEmergencySmsSentMs> = $l0;

     label1:
        return;
    }

    public void notifySrvccState(com.android.internal.telephony.Call$SrvccState)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.Call$SrvccState r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: com.android.internal.telephony.Call$SrvccState;

        return;
    }

    public void notifySrvccStateChanged(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifySrvccStateChanged(com.android.internal.telephony.Phone,int)>(r0, i0);

        return;
    }

    public void notifyUnknownConnectionP(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.Connection r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mUnknownConnectionRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void notifyResult(java.lang.Object)>(r1);

        return;
    }

    public void notifyUserMobileDataStateChanged(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyUserMobileDataStateChanged(com.android.internal.telephony.Phone,boolean)>(r0, z0);

        return;
    }

    public void notifyVoiceActivationStateChanged(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyVoiceActivationStateChanged(com.android.internal.telephony.Phone,int)>(r0, i0);

        return;
    }

    public void nvReadItem(int, android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.os.Message r1;
        android.os.WorkSource r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        r2 := @parameter2: android.os.WorkSource;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void nvReadItem(int,android.os.Message,android.os.WorkSource)>(i0, r1, r2);

        return;
    }

    public void nvWriteCdmaPrl(byte[], android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        byte[] r1;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: byte[];

        r2 := @parameter1: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void nvWriteCdmaPrl(byte[],android.os.Message)>(r1, r2);

        return;
    }

    public void nvWriteItem(int, java.lang.String, android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        java.lang.String r1;
        android.os.Message r2;
        android.os.WorkSource r3;
        com.android.internal.telephony.CommandsInterface $r4;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: android.os.Message;

        r3 := @parameter3: android.os.WorkSource;

        $r4 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r4.<com.android.internal.telephony.CommandsInterface: void nvWriteItem(int,java.lang.String,android.os.Message,android.os.WorkSource)>(i0, r1, r2, r3);

        return;
    }

    protected abstract void onUpdateIccAvailability();

    public void queryAvailableBandMode(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void queryAvailableBandMode(android.os.Message)>(r1);

        return;
    }

    public void queryCdmaRoamingPreference(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void queryCdmaRoamingPreference(android.os.Message)>(r1);

        return;
    }

    public void queryTTYMode(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void queryTTYMode(android.os.Message)>(r1);

        return;
    }

    public void radioCapabilityUpdated(com.android.internal.telephony.RadioCapability)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.RadioCapability r1;
        java.util.concurrent.atomic.AtomicReference $r2;
        int $i0;
        boolean $z0, $z1, $z2;
        android.content.Context $r3;
        android.content.res.Resources $r4;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: com.android.internal.telephony.RadioCapability;

        $r2 = r0.<com.android.internal.telephony.Phone: java.util.concurrent.atomic.AtomicReference mRadioCapability>;

        virtualinvoke $r2.<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>(r1);

        $i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>($i0);

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r4.<android.content.res.Resources: boolean getBoolean(int)>(17891613);

        $z2 = $z1 ^ 1;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void sendSubscriptionSettings(boolean)>($z2);

     label1:
        return;
    }

    public void rebootModem(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void nvResetConfig(int,android.os.Message)>(1, r1);

        return;
    }

    public void registerFoT53ClirlInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerFoT53ClirlInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForAllDataDisconnected(android.os.Handler, int)
    {
        com.android.internal.telephony.Phone r0;
        int i0, i1, i2, i3;
        com.android.internal.telephony.RegistrantList $r1;
        com.android.internal.telephony.dataconnection.DcTracker $r2, $r3, $r4;
        boolean $z0;
        android.os.Handler r5;
        com.android.internal.telephony.dataconnection.TransportManager r6;
        int[] r7;

        r0 := @this: com.android.internal.telephony.Phone;

        r5 := @parameter0: android.os.Handler;

        i2 := @parameter1: int;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mAllDataDisconnectedRegistrants>;

        virtualinvoke $r1.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r5, i2, null);

        r6 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager mTransportManager>;

        if r6 == null goto label3;

        r7 = virtualinvoke r6.<com.android.internal.telephony.dataconnection.TransportManager: int[] getAvailableTransports()>();

        i0 = lengthof r7;

        i3 = 0;

     label1:
        if i3 >= i0 goto label3;

        i1 = r7[i3];

        $r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i1);

        if $r2 == null goto label2;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i1);

        $z0 = virtualinvoke $r3.<com.android.internal.telephony.dataconnection.DcTracker: boolean isDisconnected()>();

        if $z0 != 0 goto label2;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.DcTracker getDcTracker(int)>(i1);

        virtualinvoke $r4.<com.android.internal.telephony.dataconnection.DcTracker: void registerForAllDataDisconnected(android.os.Handler,int)>(r0, 52);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return;
    }

    public void registerForCallWaiting(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void registerForCdmaOtaStatusChange(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void registerForCellInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mCellInfoRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void add(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForDisconnect(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mDisconnectRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForDisplayInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForDisplayInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForEcmTimerReset(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void registerForEmergencyCallToggle(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        java.lang.Object r1;
        com.android.internal.telephony.Registrant $r2;
        com.android.internal.telephony.RegistrantList $r3;
        android.os.Handler r4;

        r0 := @this: com.android.internal.telephony.Phone;

        r4 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $r2 = new com.android.internal.telephony.Registrant;

        specialinvoke $r2.<com.android.internal.telephony.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r4, i0, r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mEmergencyCallToggledRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void add(com.android.internal.telephony.Registrant)>($r2);

        return;
    }

    public void registerForHandoverStateChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mHandoverRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForInCallVoicePrivacyOff(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForInCallVoicePrivacyOff(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForInCallVoicePrivacyOn(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForInCallVoicePrivacyOn(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForIncomingRing(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mIncomingRingRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForLineControlInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForLineControlInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForMmiComplete(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mMmiCompleteRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForMmiInitiate(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mMmiRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForNewRingingConnection(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mNewRingingConnectionRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForNumberInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForNumberInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForOnHoldTone(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void registerForOtaspChange(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0, $i1;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;
        com.android.internal.telephony.Registrant $r4;
        android.os.AsyncResult $r5;
        java.lang.Integer $r6;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mOtaspRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        $r4 = new com.android.internal.telephony.Registrant;

        specialinvoke $r4.<com.android.internal.telephony.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        $r5 = new android.os.AsyncResult;

        $i1 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getOtasp()>();

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        specialinvoke $r5.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, $r6, null);

        virtualinvoke $r4.<com.android.internal.telephony.Registrant: void notifyRegistrant(android.os.AsyncResult)>($r5);

        return;
    }

    public void registerForPhysicalChannelConfig(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        com.android.internal.telephony.Registrant $r1;
        com.android.internal.telephony.RegistrantList $r2;
        android.os.AsyncResult $r3;
        android.os.Handler r4;
        java.lang.Object r5;
        java.util.List r7;

        r0 := @this: com.android.internal.telephony.Phone;

        r4 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r5 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r4);

        $r1 = new com.android.internal.telephony.Registrant;

        specialinvoke $r1.<com.android.internal.telephony.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r4, i0, r5);

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPhysicalChannelConfigRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void add(com.android.internal.telephony.Registrant)>($r1);

        r7 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.util.List getPhysicalChannelConfigList()>();

        if r7 == null goto label1;

        $r3 = new android.os.AsyncResult;

        specialinvoke $r3.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r7, null);

        virtualinvoke $r1.<com.android.internal.telephony.Registrant: void notifyRegistrant(android.os.AsyncResult)>($r3);

     label1:
        return;
    }

    public void registerForPreciseCallStateChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPreciseCallStateRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForPreferredNetworkTypeChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPreferredNetworkTypeRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForRadioCapabilityChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForRadioCapabilityChanged(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForRadioOffOrNotAvailable(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mRadioOffOrNotAvailableRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForRedialConnectionChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mRedialRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForRedirectedNumberInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForRedirectedNumberInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForResendIncallMute(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForResendIncallMute(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForRingbackTone(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForRingbackTone(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForServiceStateChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mServiceStateRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void add(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForSignalInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForSignalInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForSilentRedial(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void registerForSimRecordsLoaded(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void registerForSubscriptionInfoReady(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void registerForSuppServiceFailed(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mSuppServiceFailedRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForT53AudioControlInfo(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void registerForT53AudioControlInfo(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForTtyModeReceived(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void registerForUnknownConnection(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mUnknownConnectionRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForVideoCapabilityChanged(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mVideoCapabilityChangedRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        $z0 = r0.<com.android.internal.telephony.Phone: boolean mIsVideoCapable>;

        virtualinvoke r0.<com.android.internal.telephony.Phone: void notifyForVideoCapabilityChanged(boolean)>($z0);

        return;
    }

    public void registerForVolteSilentRedial(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void requestCellInfoUpdate(android.os.WorkSource, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.WorkSource r1;
        android.os.Message r2;
        com.android.internal.telephony.ServiceStateTracker $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.WorkSource;

        r2 := @parameter1: android.os.Message;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        virtualinvoke $r3.<com.android.internal.telephony.ServiceStateTracker: void requestAllCellInfo(android.os.WorkSource,android.os.Message)>(r1, r2);

        return;
    }

    public void resetCarrierKeysForImsiEncryption()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return;
    }

    public void resetModemConfig(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void nvResetConfig(int,android.os.Message)>(3, r1);

        return;
    }

    public void resolveSubscriptionCarrierId(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void saveClirSetting(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0, $i1, $i2;
        android.content.SharedPreferences$Editor r1;
        android.content.Context $r2;
        android.content.SharedPreferences $r3;
        java.lang.StringBuilder $r4, $r9;
        java.lang.String $r7, $r14;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r3 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r2);

        r1 = interfaceinvoke $r3.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("clir_sub_key");

        $i1 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>($r7, i0);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("saveClirSetting: clir_sub_key");

        $i2 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("Phone", $r14);

        $z0 = interfaceinvoke r1.<android.content.SharedPreferences$Editor: boolean commit()>();

        if $z0 != 0 goto label1;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "Failed to commit CLIR preference");

     label1:
        return;
    }

    public void selectNetworkManually(com.android.internal.telephony.OperatorInfo, boolean, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.OperatorInfo r1;
        boolean z0;
        com.android.internal.telephony.Phone$NetworkSelectMessage $r3;
        java.lang.String $r4, $r5, $r6, $r8;
        com.android.internal.telephony.CommandsInterface $r7;
        int $i0;
        android.os.Message r9, r10;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: com.android.internal.telephony.OperatorInfo;

        z0 := @parameter1: boolean;

        r9 := @parameter2: android.os.Message;

        $r3 = new com.android.internal.telephony.Phone$NetworkSelectMessage;

        specialinvoke $r3.<com.android.internal.telephony.Phone$NetworkSelectMessage: void <init>()>();

        $r3.<com.android.internal.telephony.Phone$NetworkSelectMessage: android.os.Message message> = r9;

        $r4 = virtualinvoke r1.<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorNumeric()>();

        $r3.<com.android.internal.telephony.Phone$NetworkSelectMessage: java.lang.String operatorNumeric> = $r4;

        $r5 = virtualinvoke r1.<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaLong()>();

        $r3.<com.android.internal.telephony.Phone$NetworkSelectMessage: java.lang.String operatorAlphaLong> = $r5;

        $r6 = virtualinvoke r1.<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorAlphaShort()>();

        $r3.<com.android.internal.telephony.Phone$NetworkSelectMessage: java.lang.String operatorAlphaShort> = $r6;

        r10 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.os.Message obtainMessage(int,java.lang.Object)>(16, $r3);

        $r7 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r8 = virtualinvoke r1.<com.android.internal.telephony.OperatorInfo: java.lang.String getOperatorNumeric()>();

        $i0 = virtualinvoke r1.<com.android.internal.telephony.OperatorInfo: int getRan()>();

        interfaceinvoke $r7.<com.android.internal.telephony.CommandsInterface: void setNetworkSelectionModeManual(java.lang.String,int,android.os.Message)>($r8, $i0, r10);

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.Phone: void updateSavedNetworkOperator(com.android.internal.telephony.Phone$NetworkSelectMessage)>($r3);

        goto label2;

     label1:
        specialinvoke r0.<com.android.internal.telephony.Phone: void clearSavedNetworkSelection()>();

        virtualinvoke r0.<com.android.internal.telephony.Phone: void updateManualNetworkSelection(com.android.internal.telephony.Phone$NetworkSelectMessage)>($r3);

     label2:
        return;
    }

    public void sendBurstDtmf(java.lang.String, int, int, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        int i0, i1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: android.os.Message;

        return;
    }

    public void sendDialerSpecialCode(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        android.app.BroadcastOptions r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r11;
        android.content.Intent $r5, $r14;
        java.lang.String $r6, $r15, r20;
        android.net.Uri $r7, $r16;
        android.content.Context $r9, $r18;
        android.os.Bundle $r10, $r19;

        r0 := @this: com.android.internal.telephony.Phone;

        r20 := @parameter0: java.lang.String;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r20);

        if $z0 != 0 goto label1;

        r1 = staticinvoke <android.app.BroadcastOptions: android.app.BroadcastOptions makeBasic()>();

        virtualinvoke r1.<android.app.BroadcastOptions: void setBackgroundActivityStartsAllowed(boolean)>(1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android_secret_code://");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r5 = new android.content.Intent;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r6);

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.provider.Telephony.SECRET_CODE", $r7);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r9 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        $r10 = virtualinvoke r1.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

        virtualinvoke $r9.<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String,android.os.Bundle)>($r5, null, $r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("android_secret_code://");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        $r14 = new android.content.Intent;

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r15);

        specialinvoke $r14.<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>("android.telephony.action.SECRET_CODE", $r16);

        virtualinvoke $r14.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r18 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        $r19 = virtualinvoke r1.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

        virtualinvoke $r18.<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String,android.os.Bundle)>($r14, null, $r19);

     label1:
        return;
    }

    public abstract void sendEmergencyCallStateChange(boolean);

    public void sendSubscriptionSettings(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        android.content.Context $r1;
        int $i0, $i1;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        $i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        $i1 = staticinvoke <com.android.internal.telephony.PhoneFactory: int calculatePreferredNetworkType(android.content.Context,int)>($r1, $i0);

        virtualinvoke r0.<com.android.internal.telephony.Phone: void setPreferredNetworkType(int,android.os.Message)>($i1, null);

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.Phone: void restoreSavedNetworkSelection(android.os.Message)>(null);

     label1:
        return;
    }

    public void setAllowedCarriers(android.telephony.CarrierRestrictionRules, android.os.Message, android.os.WorkSource)
    {
        com.android.internal.telephony.Phone r0;
        android.telephony.CarrierRestrictionRules r1;
        android.os.Message r2;
        android.os.WorkSource r3;
        com.android.internal.telephony.CommandsInterface $r4;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.telephony.CarrierRestrictionRules;

        r2 := @parameter1: android.os.Message;

        r3 := @parameter2: android.os.WorkSource;

        $r4 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r4.<com.android.internal.telephony.CommandsInterface: void setAllowedCarriers(android.telephony.CarrierRestrictionRules,android.os.Message,android.os.WorkSource)>(r1, r2, r3);

        return;
    }

    public void setAllowedNetworkTypes(int, long)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        long l1;
        java.util.Map r1, $r2;
        java.lang.Integer $r3;
        java.lang.Long $r4;
        java.lang.String $r8;
        java.lang.Throwable $r9;
        java.lang.StringBuilder r10;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 = r0.<com.android.internal.telephony.Phone: java.util.Map mAllowedNetworkTypesForReasons>;

        entermonitor r1;

        if i0 == 0 goto label3;

     label1:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid allowed network type reason: ");

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", $r8);

     label2:
        goto label4;

     label3:
        $r2 = r0.<com.android.internal.telephony.Phone: java.util.Map mAllowedNetworkTypesForReasons>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r9 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setAlwaysReportSignalStrength(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;
        com.android.internal.telephony.DeviceStateMonitor r1;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.DeviceStateMonitor mDeviceStateMonitor>;

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.telephony.DeviceStateMonitor: void setAlwaysReportSignalStrength(boolean)>(z0);

     label1:
        return;
    }

    public void setBandMode(int, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setBandMode(int,android.os.Message)>(i0, r1);

        return;
    }

    public abstract void setBroadcastEmergencyCallStateChanges(boolean);

    public void setCarrierInfoForImsiEncryption(android.telephony.ImsiEncryptionInfo)
    {
        com.android.internal.telephony.Phone r0;
        android.telephony.ImsiEncryptionInfo r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.telephony.ImsiEncryptionInfo;

        return;
    }

    public void setCarrierTestOverride(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1, r2, r3, r4, r5, r6, r7, r8, r9;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.String;

        r7 := @parameter6: java.lang.String;

        r8 := @parameter7: java.lang.String;

        r9 := @parameter8: java.lang.String;

        return;
    }

    public void setCdmaRoamingPreference(int, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setCdmaRoamingPreference(int,android.os.Message)>(i0, r1);

        return;
    }

    public void setCdmaSubscription(int, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setCdmaSubscriptionSource(int,android.os.Message)>(i0, r1);

        return;
    }

    public void setCellInfoListRate(int, android.os.WorkSource)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.os.WorkSource r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.WorkSource;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setCellInfoListRate(int,android.os.Message,android.os.WorkSource)>(i0, null, r1);

        return;
    }

    public void setCellInfoMinInterval(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        com.android.internal.telephony.ServiceStateTracker $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        virtualinvoke $r1.<com.android.internal.telephony.ServiceStateTracker: void setCellInfoMinInterval(int)>(i0);

        return;
    }

    public void setDataActivationState(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        com.android.internal.telephony.SimActivationTracker $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.SimActivationTracker mSimActivationTracker>;

        virtualinvoke $r1.<com.android.internal.telephony.SimActivationTracker: void setDataActivationState(int)>(i0);

        return;
    }

    public void setEchoSuppressionEnabled()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return;
    }

    public void setEcmCanceledForEmergency(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.telephony.Phone: boolean mEcmCanceledForEmergency> = z0;

        return;
    }

    public void setImsRegistrationState(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        return;
    }

    public void setIsInEcm(boolean)
    {
        com.android.internal.telephony.Phone r0;
        boolean z0, $z1;
        java.lang.Boolean $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.internal.telephony.Phone: boolean getUnitTestMode()>();

        if $z1 != 0 goto label1;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        staticinvoke <android.internal.telephony.sysprop.TelephonyProperties: void in_ecm_mode(java.lang.Boolean)>($r1);

     label1:
        r0.<com.android.internal.telephony.Phone: boolean mIsPhoneInEcmState> = z0;

        return;
    }

    protected void setIsInEmergencyCall()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return;
    }

    public void setLinkCapacityReportingCriteria(int[], int[], int)
    {
        com.android.internal.telephony.Phone r0;
        int[] r1, r2;
        int i0;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: int[];

        r2 := @parameter1: int[];

        i0 := @parameter2: int;

        return;
    }

    public void setNetworkSelectionModeAutomatic(android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Message r1, r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Message;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "setNetworkSelectionModeAutomatic, querying current mode");

        r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.os.Message obtainMessage(int)>(38);

        r2.<android.os.Message: java.lang.Object obj> = r1;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void getNetworkSelectionMode(android.os.Message)>(r2);

        return;
    }

    public void setOnEcbModeExitResponse(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void setOnPostDialCharacter(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.Registrant $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = new com.android.internal.telephony.Registrant;

        specialinvoke $r3.<com.android.internal.telephony.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.Registrant mPostDialHandler> = $r3;

        return;
    }

    public boolean setOperatorBrandOverride(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    protected void setPhoneName(java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r0.<com.android.internal.telephony.Phone: java.lang.String mName> = r1;

        return;
    }

    public void setPreferredNetworkType(int, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        int i0, i1, i2, i4, $i7, $i12;
        android.os.Message r1;
        long l3, l5, $l8, $l9, $l10, $l11;
        java.lang.StringBuilder $r2, $r11;
        java.lang.String $r7, $r24;
        com.android.internal.telephony.CommandException $r8;
        com.android.internal.telephony.CommandException$Error $r9;
        com.android.internal.telephony.CommandsInterface $r25;
        com.android.internal.telephony.RegistrantList $r26;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        i1 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getRadioAccessFamily()>();

        i2 = staticinvoke <android.telephony.RadioAccessFamily: int getRafFromNetworkType(int)>(i0);

        l3 = specialinvoke r0.<com.android.internal.telephony.Phone: long getAllowedNetworkTypes()>();

        if i1 == 0 goto label2;

        if i2 != 0 goto label1;

        goto label2;

     label1:
        $i7 = i2 & i1;

        $l8 = (long) $i7;

        $l9 = $l8 & l3;

        $l10 = specialinvoke r0.<com.android.internal.telephony.Phone: long getAllowedNetworkTypesForAllReasons()>();

        $l11 = $l9 & $l10;

        $i12 = (int) $l11;

        i4 = staticinvoke <android.telephony.RadioAccessFamily: int getNetworkTypeFromRaf(int)>($i12);

        l5 = virtualinvoke r0.<com.android.internal.telephony.Phone: long getAllowedNetworkTypes(int)>(0);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setPreferredNetworkType: networkType = ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" modemRaf = ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rafFromType = ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" allowedNetworkTypes = ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" power allowedNetworkTypes = ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l5);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" filteredType = ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4);

        $r24 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r24);

        $r25 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r25.<com.android.internal.telephony.CommandsInterface: void setPreferredNetworkType(int,android.os.Message)>(i4, r1);

        $r26 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPreferredNetworkTypeRegistrants>;

        virtualinvoke $r26.<com.android.internal.telephony.RegistrantList: void notifyRegistrants()>();

        return;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setPreferredNetworkType: Abort, unknown RAF: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r7);

        if r1 == null goto label3;

        $r8 = new com.android.internal.telephony.CommandException;

        $r9 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error GENERIC_FAILURE>;

        specialinvoke $r8.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r9);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, $r8);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

     label3:
        return;
    }

    protected void setPreferredNetworkTypeIfSimLoaded()
    {
        com.android.internal.telephony.Phone r0;
        int $i0, $i1, $i2;
        boolean $z0;
        android.content.Context $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>($i0);

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        $i1 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        $i2 = staticinvoke <com.android.internal.telephony.PhoneFactory: int calculatePreferredNetworkType(android.content.Context,int)>($r1, $i1);

        virtualinvoke r0.<com.android.internal.telephony.Phone: void setPreferredNetworkType(int,android.os.Message)>($i2, null);

     label1:
        return;
    }

    public void setRadioCapability(com.android.internal.telephony.RadioCapability, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.RadioCapability r1;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: com.android.internal.telephony.RadioCapability;

        r2 := @parameter1: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void setRadioCapability(com.android.internal.telephony.RadioCapability,android.os.Message)>(r1, r2);

        return;
    }

    public boolean setRoamingOverride(java.util.List, java.util.List, java.util.List, java.util.List)
    {
        com.android.internal.telephony.Phone r0;
        java.util.List r1, r2, r3, r5;
        java.lang.String r4;
        boolean $z0;
        com.android.internal.telephony.ServiceStateTracker r6;

        r0 := @this: com.android.internal.telephony.Phone;

        r5 := @parameter0: java.util.List;

        r1 := @parameter1: java.util.List;

        r2 := @parameter2: java.util.List;

        r3 := @parameter3: java.util.List;

        r4 = virtualinvoke r0.<com.android.internal.telephony.Phone: java.lang.String getIccSerialNumber()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.internal.telephony.Phone: void setRoamingOverrideHelper(java.util.List,java.lang.String,java.lang.String)>(r5, "gsm_roaming_list_", r4);

        specialinvoke r0.<com.android.internal.telephony.Phone: void setRoamingOverrideHelper(java.util.List,java.lang.String,java.lang.String)>(r1, "gsm_non_roaming_list_", r4);

        specialinvoke r0.<com.android.internal.telephony.Phone: void setRoamingOverrideHelper(java.util.List,java.lang.String,java.lang.String)>(r2, "cdma_roaming_list_", r4);

        specialinvoke r0.<com.android.internal.telephony.Phone: void setRoamingOverrideHelper(java.util.List,java.lang.String,java.lang.String)>(r3, "cdma_non_roaming_list_", r4);

        r6 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if r6 == null goto label2;

        virtualinvoke r6.<com.android.internal.telephony.ServiceStateTracker: void pollState()>();

     label2:
        return 1;
    }

    public void setSignalStrengthReportingCriteria(int, int[], int, boolean)
    {
        com.android.internal.telephony.Phone r0;
        int i0, i1;
        int[] r1;
        boolean z0;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: int[];

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        return;
    }

    public void setSimPowerState(int, android.os.WorkSource)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.os.WorkSource r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.WorkSource;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setSimCardPower(int,android.os.Message,android.os.WorkSource)>(i0, null, r1);

        return;
    }

    public void setSmscAddress(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        java.lang.String r1;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void setSmscAddress(java.lang.String,android.os.Message)>(r1, r2);

        return;
    }

    public void setSystemSelectionChannels(java.util.List, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        java.util.List r1;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: android.os.Message;

        $r3 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void setSystemSelectionChannels(java.util.List,android.os.Message)>(r1, r2);

        return;
    }

    public void setTTYMode(int, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void setTTYMode(int,android.os.Message)>(i0, r1);

        return;
    }

    public void setUiTTYMode(int, android.os.Message)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "unexpected setUiTTYMode method call");

        return;
    }

    public void setVoiceActivationState(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        com.android.internal.telephony.SimActivationTracker $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.SimActivationTracker mSimActivationTracker>;

        virtualinvoke $r1.<com.android.internal.telephony.SimActivationTracker: void setVoiceActivationState(int)>(i0);

        return;
    }

    public void setVoiceCallForwardingFlag(int, boolean, java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        int i0;
        boolean z0;
        java.lang.String r1;
        com.android.internal.telephony.uicc.IccRecords r2;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.Phone: void setCallForwardingIndicatorInSharedPref(boolean)>(z0);

        r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.uicc.IccRecords getIccRecords()>();

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.internal.telephony.uicc.IccRecords: void setVoiceCallForwardingFlag(int,boolean,java.lang.String)>(i0, z0, r1);

     label1:
        virtualinvoke r0.<com.android.internal.telephony.Phone: void notifyCallForwardingIndicator()>();

        return;
    }

    public void setVoiceCallForwardingFlag(com.android.internal.telephony.uicc.IccRecords, int, boolean, java.lang.String)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.uicc.IccRecords r1;
        int i0;
        boolean z0;
        java.lang.String r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: com.android.internal.telephony.uicc.IccRecords;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.Phone: void setCallForwardingIndicatorInSharedPref(boolean)>(z0);

        if r1 == null goto label1;

        virtualinvoke r1.<com.android.internal.telephony.uicc.IccRecords: void setVoiceCallForwardingFlag(int,boolean,java.lang.String)>(i0, z0, r2);

     label1:
        virtualinvoke r0.<com.android.internal.telephony.Phone: void notifyCallForwardingIndicator()>();

        return;
    }

    public void setVoiceCallSessionStats(com.android.internal.telephony.metrics.VoiceCallSessionStats)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.metrics.VoiceCallSessionStats r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: com.android.internal.telephony.metrics.VoiceCallSessionStats;

        r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.metrics.VoiceCallSessionStats mVoiceCallSessionStats> = r1;

        return;
    }

    public void setVoiceMessageCount(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0, i1, $i3;
        android.content.SharedPreferences$Editor r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r7, $r17;
        java.lang.String $r5, $r14, $r20;
        com.android.internal.telephony.uicc.UiccController $r6;
        android.content.Context $r15;
        android.content.SharedPreferences $r16;
        com.android.internal.telephony.uicc.IccRecords r25;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        r0.<com.android.internal.telephony.Phone: int mVmCount> = i0;

        i1 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        $z0 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidSubscriptionId(int)>(i1);

        if $z0 == 0 goto label1;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setVoiceMessageCount: Storing Voice Mail Count = ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for mVmCountKey = ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vm_count_key");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in preferences.");

        $r14 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", $r14);

        $r15 = r0.<com.android.internal.telephony.Phone: android.content.Context mContext>;

        $r16 = staticinvoke <android.preference.PreferenceManager: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>($r15);

        r1 = interfaceinvoke $r16.<android.content.SharedPreferences: android.content.SharedPreferences$Editor edit()>();

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("vm_count_key");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>($r20, i0);

        interfaceinvoke r1.<android.content.SharedPreferences$Editor: void apply()>();

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setVoiceMessageCount in sharedPreference: invalid subId ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", $r5);

     label2:
        $r6 = staticinvoke <com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.UiccController getInstance()>();

        $i3 = r0.<com.android.internal.telephony.Phone: int mPhoneId>;

        r25 = virtualinvoke $r6.<com.android.internal.telephony.uicc.UiccController: com.android.internal.telephony.uicc.IccRecords getIccRecords(int,int)>($i3, 1);

        if r25 == null goto label3;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "setVoiceMessageCount: updating SIM Records");

        virtualinvoke r25.<com.android.internal.telephony.uicc.IccRecords: void setVoiceMessageWaiting(int,int)>(1, i0);

        goto label4;

     label3:
        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("Phone", "setVoiceMessageCount: SIM Records not found");

     label4:
        specialinvoke r0.<com.android.internal.telephony.Phone: void notifyMessageWaitingIndicator()>();

        return;
    }

    public void setVoiceMessageWaiting(int, int)
    {
        com.android.internal.telephony.Phone r0;
        int i0, i1;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "Error! This function should never be executed, inactive Phone.");

        return;
    }

    public void shutdownRadio()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.ServiceStateTracker $r1;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        virtualinvoke $r1.<com.android.internal.telephony.ServiceStateTracker: void requestShutdown()>();

        return;
    }

    public void startLceAfterRadioIsAvailable()
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.CommandsInterface $r1;
        android.os.Message $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        $r1 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.os.Message obtainMessage(int)>(37);

        interfaceinvoke $r1.<com.android.internal.telephony.CommandsInterface: void startLceService(int,boolean,android.os.Message)>(200, 1, $r2);

        return;
    }

    public void startRingbackTone()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return;
    }

    public void stopRingbackTone()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return;
    }

    public boolean supportsConversionOfCdmaCallerIdMmiCodesWhileRoaming()
    {
        com.android.internal.telephony.Phone r0;
        android.os.PersistableBundle r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.telephony.CarrierConfigManager $r4;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.Phone;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        $r4 = (android.telephony.CarrierConfigManager) $r3;

        $i0 = virtualinvoke r0.<com.android.internal.telephony.Phone: int getSubId()>();

        r1 = virtualinvoke $r4.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.os.PersistableBundle: boolean getBoolean(java.lang.String,boolean)>("convert_cdma_caller_id_mmi_codes_while_roaming_on_3gpp_bool", 0);

        return $z0;

     label1:
        return 0;
    }

    public void unregisterForAllDataDisconnected(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mAllDataDisconnectedRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForCallWaiting(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public void unregisterForCdmaOtaStatusChange(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public void unregisterForCellInfo(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mCellInfoRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForDisconnect(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mDisconnectRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForDisplayInfo(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForDisplayInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForEcmTimerReset(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public void unregisterForEmergencyCallToggle(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mEmergencyCallToggledRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForHandoverStateChanged(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mHandoverRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForInCallVoicePrivacyOff(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForInCallVoicePrivacyOff(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForInCallVoicePrivacyOn(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForInCallVoicePrivacyOn(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForIncomingRing(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mIncomingRingRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForLineControlInfo(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForLineControlInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForMmiComplete(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<com.android.internal.telephony.Phone: void checkCorrectThread(android.os.Handler)>(r1);

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mMmiCompleteRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForMmiInitiate(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mMmiRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForNewRingingConnection(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mNewRingingConnectionRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForNumberInfo(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForNumberInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForOnHoldTone(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public void unregisterForOtaspChange(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mOtaspRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForPhysicalChannelConfig(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPhysicalChannelConfigRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForPreciseCallStateChanged(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPreciseCallStateRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForPreferredNetworkTypeChanged(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mPreferredNetworkTypeRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForRadioCapabilityChanged(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForRadioCapabilityChanged(android.os.Handler)>(r0);

        return;
    }

    public void unregisterForRadioOffOrNotAvailable(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mRadioOffOrNotAvailableRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForRedialConnectionChanged(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mRedialRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForRedirectedNumberInfo(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForRedirectedNumberInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForResendIncallMute(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForResendIncallMute(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForRingbackTone(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForRingbackTone(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForServiceStateChanged(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mServiceStateRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForSignalInfo(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForSignalInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForSilentRedial(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public void unregisterForSimRecordsLoaded(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public void unregisterForSubscriptionInfoReady(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public void unregisterForSuppServiceFailed(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mSuppServiceFailedRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForT53AudioControlInfo(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForT53AudioControlInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForT53ClirInfo(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.CommandsInterface $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r2.<com.android.internal.telephony.CommandsInterface: void unregisterForT53ClirInfo(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForTtyModeReceived(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public void unregisterForUnknownConnection(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mUnknownConnectionRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForVideoCapabilityChanged(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.Phone: com.android.internal.telephony.RegistrantList mVideoCapabilityChangedRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForVolteSilentRedial(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public void unsetOnEcbModeExitResponse(android.os.Handler)
    {
        com.android.internal.telephony.Phone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    public boolean updateCurrentCarrierInProvider()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        return 0;
    }

    protected void updateManualNetworkSelection(com.android.internal.telephony.Phone$NetworkSelectMessage)
    {
        com.android.internal.telephony.Phone r0;
        com.android.internal.telephony.Phone$NetworkSelectMessage r1;

        r0 := @this: com.android.internal.telephony.Phone;

        r1 := @parameter0: com.android.internal.telephony.Phone$NetworkSelectMessage;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "updateManualNetworkSelection() should be overridden");

        return;
    }

    public void updatePhoneObject(int)
    {
        com.android.internal.telephony.Phone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.Phone;

        i0 := @parameter0: int;

        return;
    }

    public void updateVoiceMail()
    {
        com.android.internal.telephony.Phone r0;

        r0 := @this: com.android.internal.telephony.Phone;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("Phone", "updateVoiceMail() should be overridden");

        return;
    }
}
