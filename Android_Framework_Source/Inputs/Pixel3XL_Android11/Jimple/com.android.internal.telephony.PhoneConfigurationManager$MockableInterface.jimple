public class com.android.internal.telephony.PhoneConfigurationManager$MockableInterface extends java.lang.Object
{

    public void <init>()
    {
        com.android.internal.telephony.PhoneConfigurationManager$MockableInterface r0;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager$MockableInterface;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public boolean isRebootRequiredForModemConfigChange()
    {
        com.android.internal.telephony.PhoneConfigurationManager$MockableInterface r0;
        boolean z0;
        java.util.Optional $r2;
        java.lang.Boolean $r3, $r5;
        java.lang.Object $r4;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager$MockableInterface;

        $r2 = staticinvoke <android.internal.telephony.sysprop.TelephonyProperties: java.util.Optional reboot_on_modem_change()>();

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r4 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r3);

        $r5 = (java.lang.Boolean) $r4;

        z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isRebootRequiredForModemConfigChange: isRebootRequired = ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void access$100(java.lang.String)>($r9);

        return z0;
    }

    public void notifyPhoneFactoryOnMultiSimConfigChanged(android.content.Context, int)
    {
        com.android.internal.telephony.PhoneConfigurationManager$MockableInterface r0;
        android.content.Context r1;
        int i0;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager$MockableInterface;

        r1 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        staticinvoke <com.android.internal.telephony.PhoneFactory: void onMultiSimConfigChanged(android.content.Context,int)>(r1, i0);

        return;
    }

    public void setMultiSimProperties(int)
    {
        com.android.internal.telephony.PhoneConfigurationManager$MockableInterface r0;
        int i0;
        java.lang.String r4, $r6;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager$MockableInterface;

        i0 := @parameter0: int;

        if i0 == 2 goto label2;

        if i0 == 3 goto label1;

        r4 = "";

        goto label3;

     label1:
        r4 = "tsts";

        goto label3;

     label2:
        r4 = "dsds";

     label3:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setMultiSimProperties to ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void access$100(java.lang.String)>($r6);

        staticinvoke <android.internal.telephony.sysprop.TelephonyProperties: void multi_sim_config(java.lang.String)>(r4);

        return;
    }
}
