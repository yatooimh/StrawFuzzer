public class com.android.internal.telephony.PhoneConfigurationManager extends java.lang.Object
{
    public static final java.lang.String DSDA;
    public static final java.lang.String DSDS;
    private static final int EVENT_GET_MODEM_STATUS;
    private static final int EVENT_GET_MODEM_STATUS_DONE;
    private static final int EVENT_GET_PHONE_CAPABILITY_DONE;
    private static final int EVENT_SWITCH_DSDS_CONFIG_DONE;
    private static final java.lang.String LOG_TAG;
    public static final java.lang.String SSSS;
    public static final java.lang.String TSTS;
    private static com.android.internal.telephony.PhoneConfigurationManager sInstance;
    private static final com.android.internal.telephony.RegistrantList sMultiSimConfigChangeRegistrants;
    private final android.content.Context mContext;
    private final android.os.Handler mHandler;
    private com.android.internal.telephony.PhoneConfigurationManager$MockableInterface mMi;
    private final java.util.Map mPhoneStatusMap;
    private final com.android.internal.telephony.Phone[] mPhones;
    private final com.android.internal.telephony.RadioConfig mRadioConfig;
    private android.telephony.PhoneCapability mStaticCapability;
    private android.telephony.TelephonyManager mTelephonyManager;

    static void <clinit>()
    {
        com.android.internal.telephony.RegistrantList $r0;

        <com.android.internal.telephony.PhoneConfigurationManager: java.lang.String TSTS> = "tsts";

        <com.android.internal.telephony.PhoneConfigurationManager: java.lang.String SSSS> = "";

        <com.android.internal.telephony.PhoneConfigurationManager: java.lang.String LOG_TAG> = "PhoneCfgMgr";

        <com.android.internal.telephony.PhoneConfigurationManager: int EVENT_SWITCH_DSDS_CONFIG_DONE> = 100;

        <com.android.internal.telephony.PhoneConfigurationManager: int EVENT_GET_PHONE_CAPABILITY_DONE> = 103;

        <com.android.internal.telephony.PhoneConfigurationManager: int EVENT_GET_MODEM_STATUS_DONE> = 102;

        <com.android.internal.telephony.PhoneConfigurationManager: int EVENT_GET_MODEM_STATUS> = 101;

        <com.android.internal.telephony.PhoneConfigurationManager: java.lang.String DSDS> = "dsds";

        <com.android.internal.telephony.PhoneConfigurationManager: java.lang.String DSDA> = "dsda";

        <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager sInstance> = null;

        $r0 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r0.<com.android.internal.telephony.RegistrantList: void <init>()>();

        <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.RegistrantList sMultiSimConfigChangeRegistrants> = $r0;

        return;
    }

    private void <init>(android.content.Context)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        boolean z0;
        int i0, i2, i3, i4;
        com.android.internal.telephony.PhoneConfigurationManager$MockableInterface $r1;
        java.lang.Object $r2;
        android.telephony.TelephonyManager $r3;
        android.telephony.PhoneCapability $r4;
        android.content.Context $r5, r14;
        com.android.internal.telephony.RadioConfig $r6;
        com.android.internal.telephony.PhoneConfigurationManager$ConfigManagerHandler $r7;
        java.util.HashMap $r8;
        com.android.internal.telephony.Phone[] $r9, r15, r17;
        android.os.Handler $r10, $r12;
        com.android.internal.telephony.CommandsInterface $r11, $r13;
        com.android.internal.telephony.Phone r16, r18;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        r14 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new com.android.internal.telephony.PhoneConfigurationManager$MockableInterface;

        specialinvoke $r1.<com.android.internal.telephony.PhoneConfigurationManager$MockableInterface: void <init>()>();

        r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager$MockableInterface mMi> = $r1;

        r0.<com.android.internal.telephony.PhoneConfigurationManager: android.content.Context mContext> = r14;

        $r2 = virtualinvoke r14.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r3 = (android.telephony.TelephonyManager) $r2;

        r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.TelephonyManager mTelephonyManager> = $r3;

        $r4 = specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability getDefaultCapability()>();

        r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability mStaticCapability> = $r4;

        $r5 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.content.Context mContext>;

        $r6 = staticinvoke <com.android.internal.telephony.RadioConfig: com.android.internal.telephony.RadioConfig getInstance(android.content.Context)>($r5);

        r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.RadioConfig mRadioConfig> = $r6;

        $r7 = new com.android.internal.telephony.PhoneConfigurationManager$ConfigManagerHandler;

        specialinvoke $r7.<com.android.internal.telephony.PhoneConfigurationManager$ConfigManagerHandler: void <init>(com.android.internal.telephony.PhoneConfigurationManager,com.android.internal.telephony.PhoneConfigurationManager$1)>(r0, null);

        r0.<com.android.internal.telephony.PhoneConfigurationManager: android.os.Handler mHandler> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<com.android.internal.telephony.PhoneConfigurationManager: java.util.Map mPhoneStatusMap> = $r8;

        specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: void notifyCapabilityChanged()>();

        $r9 = staticinvoke <com.android.internal.telephony.PhoneFactory: com.android.internal.telephony.Phone[] getPhones()>();

        r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.Phone[] mPhones> = $r9;

        z0 = staticinvoke <android.os.storage.StorageManager: boolean inCryptKeeperBounce()>();

        i2 = 0;

        if z0 != 0 goto label2;

        r15 = r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.Phone[] mPhones>;

        i3 = lengthof r15;

     label1:
        if i2 >= i3 goto label4;

        r16 = r15[i2];

        $r13 = r16.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r12 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.os.Handler mHandler>;

        interfaceinvoke $r13.<com.android.internal.telephony.CommandsInterface: void registerForAvailable(android.os.Handler,int,java.lang.Object)>($r12, 1, r16);

        i2 = i2 + 1;

        goto label1;

     label2:
        r17 = r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.Phone[] mPhones>;

        i0 = lengthof r17;

        i4 = 0;

     label3:
        if i4 >= i0 goto label4;

        r18 = r17[i4];

        $r11 = r18.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $r10 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.os.Handler mHandler>;

        interfaceinvoke $r11.<com.android.internal.telephony.CommandsInterface: void registerForOn(android.os.Handler,int,java.lang.Object)>($r10, 5, r18);

        i4 = i4 + 1;

        goto label3;

     label4:
        return;
    }

    static void access$100(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>(r0);

        return;
    }

    static void access$200(com.android.internal.telephony.PhoneConfigurationManager, com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        com.android.internal.telephony.Phone r1;

        r0 := @parameter0: com.android.internal.telephony.PhoneConfigurationManager;

        r1 := @parameter1: com.android.internal.telephony.Phone;

        specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: void updatePhoneStatus(com.android.internal.telephony.Phone)>(r1);

        return;
    }

    static void access$300(com.android.internal.telephony.PhoneConfigurationManager, int)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        int i0;

        r0 := @parameter0: com.android.internal.telephony.PhoneConfigurationManager;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: void onMultiSimConfigChanged(int)>(i0);

        return;
    }

    static android.telephony.PhoneCapability access$402(com.android.internal.telephony.PhoneConfigurationManager, android.telephony.PhoneCapability)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        android.telephony.PhoneCapability r1;

        r0 := @parameter0: com.android.internal.telephony.PhoneConfigurationManager;

        r1 := @parameter1: android.telephony.PhoneCapability;

        r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability mStaticCapability> = r1;

        return r1;
    }

    static void access$500(com.android.internal.telephony.PhoneConfigurationManager)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;

        r0 := @parameter0: com.android.internal.telephony.PhoneConfigurationManager;

        specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: void notifyCapabilityChanged()>();

        return;
    }

    private void broadcastMultiSimConfigChange(int)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.content.Intent $r5;
        android.content.Context $r7;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("broadcastSimSlotNumChange numOfActiveModems");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>($r4);

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void notifyMultiSimConfigChange(int)>(i0);

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.telephony.action.MULTI_SIM_CONFIG_CHANGED");

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("android.telephony.extra.ACTIVE_SIM_SUPPORTED_COUNT", i0);

        $r7 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.content.Context mContext>;

        virtualinvoke $r7.<android.content.Context: void sendBroadcast(android.content.Intent)>($r5);

        return;
    }

    private android.telephony.PhoneCapability getDefaultCapability()
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        int $i0;
        android.telephony.PhoneCapability $r1, $r2;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        $i0 = virtualinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: int getPhoneCount()>();

        if $i0 <= 1 goto label1;

        $r2 = <android.telephony.PhoneCapability: android.telephony.PhoneCapability DEFAULT_DSDS_CAPABILITY>;

        return $r2;

     label1:
        $r1 = <android.telephony.PhoneCapability: android.telephony.PhoneCapability DEFAULT_SSSS_CAPABILITY>;

        return $r1;
    }

    public static com.android.internal.telephony.PhoneConfigurationManager getInstance()
    {
        com.android.internal.telephony.PhoneConfigurationManager $r0, $r1;

        $r0 = <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager sInstance>;

        if $r0 != null goto label1;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("PhoneCfgMgr", "getInstance null");

     label1:
        $r1 = <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager sInstance>;

        return $r1;
    }

    public static com.android.internal.telephony.PhoneConfigurationManager init(android.content.Context)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0, $r1, $r3, r9;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        android.content.Context r7;
        java.lang.StringBuilder r8;

        r7 := @parameter0: android.content.Context;

        entermonitor class "Lcom/android/internal/telephony/PhoneConfigurationManager;";

     label1:
        $r1 = <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager sInstance>;

        if $r1 != null goto label3;

        r0 = new com.android.internal.telephony.PhoneConfigurationManager;

        specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: void <init>(android.content.Context)>(r7);

        <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager sInstance> = r0;

     label2:
        goto label4;

     label3:
        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("init() called multiple times!  sInstance = ");

        $r3 = <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager sInstance>;

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("PhoneCfgMgr", $r5);

     label4:
        r9 = <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager sInstance>;

        exitmonitor class "Lcom/android/internal/telephony/PhoneConfigurationManager;";

     label5:
        return r9;

     label6:
        $r6 := @caughtexception;

     label7:
        exitmonitor class "Lcom/android/internal/telephony/PhoneConfigurationManager;";

     label8:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private static void log(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("PhoneCfgMgr", r0);

        return;
    }

    private void notifyCapabilityChanged()
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        com.android.internal.telephony.DefaultPhoneNotifier $r1;
        android.content.Context $r2;
        android.telephony.PhoneCapability $r3;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        $r1 = new com.android.internal.telephony.DefaultPhoneNotifier;

        $r2 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.content.Context mContext>;

        specialinvoke $r1.<com.android.internal.telephony.DefaultPhoneNotifier: void <init>(android.content.Context)>($r2);

        $r3 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability mStaticCapability>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)>($r3);

        return;
    }

    public static void notifyMultiSimConfigChange(int)
    {
        int i0;
        com.android.internal.telephony.RegistrantList $r0;
        java.lang.Integer $r1;

        i0 := @parameter0: int;

        $r0 = <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.RegistrantList sMultiSimConfigChangeRegistrants>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        virtualinvoke $r0.<com.android.internal.telephony.RegistrantList: void notifyResult(java.lang.Object)>($r1);

        return;
    }

    private void onMultiSimConfigChanged(int)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        com.android.internal.telephony.Phone[] r1;
        boolean $z0, $z1;
        android.content.Context $r2, $r6;
        com.android.internal.telephony.PhoneConfigurationManager$MockableInterface $r3;
        int $i0, i1, i2;
        com.android.internal.telephony.Phone $r4;
        com.android.internal.telephony.CommandsInterface $r5;
        java.lang.Object $r7;
        android.os.PowerManager $r8;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        i1 := @parameter0: int;

        specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: void setMultiSimProperties(int)>(i1);

        $z0 = virtualinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: boolean isRebootRequiredForModemConfigChange()>();

        if $z0 == 0 goto label1;

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>("onMultiSimConfigChanged: Rebooting.");

        $r6 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r8 = (android.os.PowerManager) $r7;

        virtualinvoke $r8.<android.os.PowerManager: void reboot(java.lang.String)>("Multi-SIM config changed.");

        goto label3;

     label1:
        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>("onMultiSimConfigChanged: Rebooting is not required.");

        $r3 = r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager$MockableInterface mMi>;

        $r2 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.content.Context mContext>;

        virtualinvoke $r3.<com.android.internal.telephony.PhoneConfigurationManager$MockableInterface: void notifyPhoneFactoryOnMultiSimConfigChanged(android.content.Context,int)>($r2, i1);

        specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: void broadcastMultiSimConfigChange(int)>(i1);

        i2 = 0;

     label2:
        r1 = r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.Phone[] mPhones>;

        $i0 = lengthof r1;

        if i2 >= $i0 goto label3;

        $r4 = r1[i2];

        $r5 = $r4.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        $z1 = staticinvoke <android.telephony.SubscriptionManager: boolean isValidPhoneId(int)>(i2);

        interfaceinvoke $r5.<com.android.internal.telephony.CommandsInterface: void onSlotActiveStatusChange(boolean)>($z1);

        i2 = i2 + 1;

        goto label2;

     label3:
        return;
    }

    public static void registerForMultiSimConfigChange(android.os.Handler, int, java.lang.Object)
    {
        android.os.Handler r0;
        int i0;
        java.lang.Object r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Object;

        $r2 = <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.RegistrantList sMultiSimConfigChangeRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r0, i0, r1);

        return;
    }

    private void setMultiSimProperties(int)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        int i0;
        com.android.internal.telephony.PhoneConfigurationManager$MockableInterface $r1;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager$MockableInterface mMi>;

        virtualinvoke $r1.<com.android.internal.telephony.PhoneConfigurationManager$MockableInterface: void setMultiSimProperties(int)>(i0);

        return;
    }

    public static void unregisterAllMultiSimConfigChangeRegistrants()
    {
        com.android.internal.telephony.RegistrantList $r0;

        $r0 = <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.RegistrantList sMultiSimConfigChangeRegistrants>;

        virtualinvoke $r0.<com.android.internal.telephony.RegistrantList: void removeAll()>();

        return;
    }

    public static void unregisterForMultiSimConfigChange(android.os.Handler)
    {
        android.os.Handler r0;
        com.android.internal.telephony.RegistrantList $r1;

        r0 := @parameter0: android.os.Handler;

        $r1 = <com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.RegistrantList sMultiSimConfigChangeRegistrants>;

        virtualinvoke $r1.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r0);

        return;
    }

    private void updatePhoneStatus(com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        com.android.internal.telephony.Phone r1;
        android.os.Message r2;
        android.os.Handler $r3;
        int $i0;
        com.android.internal.telephony.CommandsInterface $r4;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        $r3 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.os.Handler mHandler>;

        $i0 = virtualinvoke r1.<com.android.internal.telephony.Phone: int getPhoneId()>();

        r2 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>($r3, 102, $i0, 0);

        $r4 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r4.<com.android.internal.telephony.CommandsInterface: void getModemStatus(android.os.Message)>(r2);

        return;
    }

    public void addToPhoneStatusCache(int, boolean)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        int i0;
        boolean z0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Boolean $r3;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.internal.telephony.PhoneConfigurationManager: java.util.Map mPhoneStatusMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        return;
    }

    public void enablePhone(com.android.internal.telephony.Phone, boolean, android.os.Message)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        com.android.internal.telephony.Phone r1;
        boolean z0;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.Message;

        if r1 != null goto label1;

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>("enablePhone failed phone is null");

        return;

     label1:
        $r3 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void enableModem(boolean,android.os.Message)>(z0, r2);

        return;
    }

    public android.telephony.PhoneCapability getCurrentPhoneCapability()
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        android.telephony.PhoneCapability $r1;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability getStaticPhoneCapability()>();

        return $r1;
    }

    public int getNumberOfModemsWithSimultaneousDataConnections()
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        android.telephony.PhoneCapability $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        $r1 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability mStaticCapability>;

        $i0 = $r1.<android.telephony.PhoneCapability: int maxActiveData>;

        return $i0;
    }

    public int getPhoneCount()
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        android.telephony.TelephonyManager $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        $r1 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.TelephonyManager mTelephonyManager>;

        $i0 = virtualinvoke $r1.<android.telephony.TelephonyManager: int getActiveModemCount()>();

        return $i0;
    }

    public boolean getPhoneStatus(com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        com.android.internal.telephony.Phone r1;
        int i0;
        boolean z0;
        java.lang.Throwable $r2, $r3;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        if r1 != null goto label1;

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>("getPhoneStatus failed phone is null");

        return 0;

     label1:
        i0 = virtualinvoke r1.<com.android.internal.telephony.Phone: int getPhoneId()>();

     label2:
        z0 = virtualinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: boolean getPhoneStatusFromCache(int)>(i0);

     label3:
        specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: void updatePhoneStatus(com.android.internal.telephony.Phone)>(r1);

        return z0;

     label4:
        $r2 := @caughtexception;

        specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: void updatePhoneStatus(com.android.internal.telephony.Phone)>(r1);

        throw $r2;

     label5:
        $r3 := @caughtexception;

        specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: void updatePhoneStatus(com.android.internal.telephony.Phone)>(r1);

        return 1;

        catch java.util.NoSuchElementException from label2 to label3 with label5;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean getPhoneStatusFromCache(int) throws java.util.NoSuchElementException
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        int i0;
        java.util.Map $r2, $r9;
        java.lang.Integer $r3, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r4;
        java.util.NoSuchElementException $r7;
        java.lang.String $r8;
        java.lang.Object $r11;
        java.lang.Boolean $r12;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.internal.telephony.PhoneConfigurationManager: java.util.Map mPhoneStatusMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        $r9 = r0.<com.android.internal.telephony.PhoneConfigurationManager: java.util.Map mPhoneStatusMap>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        $r12 = (java.lang.Boolean) $r11;

        $z1 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("phoneId not found: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = new java.util.NoSuchElementException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.util.NoSuchElementException: void <init>(java.lang.String)>($r8);

        throw $r7;
    }

    public void getPhoneStatusFromModem(com.android.internal.telephony.Phone, android.os.Message)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        com.android.internal.telephony.Phone r1;
        android.os.Message r2;
        com.android.internal.telephony.CommandsInterface $r3;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        r2 := @parameter1: android.os.Message;

        if r1 != null goto label1;

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>("getPhoneStatus failed phone is null");

     label1:
        $r3 = r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.CommandsInterface mCi>;

        interfaceinvoke $r3.<com.android.internal.telephony.CommandsInterface: void getModemStatus(android.os.Message)>(r2);

        return;
    }

    public android.telephony.PhoneCapability getStaticPhoneCapability()
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        android.telephony.PhoneCapability $r1, $r2, $r4, r12;
        boolean $z0;
        java.lang.String $r6;
        android.os.Handler $r7;
        com.android.internal.telephony.RadioConfig $r8;
        java.lang.Throwable $r9;
        android.os.Message r10;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        entermonitor r0;

     label1:
        $r1 = specialinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability getDefaultCapability()>();

        $r2 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability mStaticCapability>;

        $z0 = virtualinvoke $r1.<android.telephony.PhoneCapability: boolean equals(java.lang.Object)>($r2);

        if $z0 == 0 goto label2;

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>("getStaticPhoneCapability: sending the request for getting PhoneCapability");

        $r7 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.os.Handler mHandler>;

        r10 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int)>($r7, 103);

        $r8 = r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.RadioConfig mRadioConfig>;

        virtualinvoke $r8.<com.android.internal.telephony.RadioConfig: void getPhoneCapability(android.os.Message)>(r10);

     label2:
        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getStaticPhoneCapability: mStaticCapability ");

        $r4 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability mStaticCapability>;

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r6 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>($r6);

        r12 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability mStaticCapability>;

     label3:
        exitmonitor r0;

        return r12;

     label4:
        $r9 := @caughtexception;

        exitmonitor r0;

        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean isRebootRequiredForModemConfigChange()
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        com.android.internal.telephony.PhoneConfigurationManager$MockableInterface $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        $r1 = r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.PhoneConfigurationManager$MockableInterface mMi>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.PhoneConfigurationManager$MockableInterface: boolean isRebootRequiredForModemConfigChange()>();

        return $z0;
    }

    public void switchMultiSimConfig(int)
    {
        com.android.internal.telephony.PhoneConfigurationManager r0;
        int i0, $i1, $i2;
        java.lang.StringBuilder $r1, $r7, $r13;
        java.lang.String $r4, $r10, $r17;
        android.telephony.PhoneCapability $r5;
        java.util.List $r6;
        android.os.Handler $r11;
        com.android.internal.telephony.RadioConfig $r12;
        android.os.Message r20;

        r0 := @this: com.android.internal.telephony.PhoneConfigurationManager;

        i0 := @parameter0: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("switchMultiSimConfig: with numOfSims = ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>($r4);

        $r5 = virtualinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: android.telephony.PhoneCapability getStaticPhoneCapability()>();

        $r6 = $r5.<android.telephony.PhoneCapability: java.util.List logicalModemList>;

        $i1 = interfaceinvoke $r6.<java.util.List: int size()>();

        if $i1 >= i0 goto label1;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("switchMultiSimConfig: Phone is not capable of enabling ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sims, exiting!");

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>($r17);

        return;

     label1:
        $i2 = virtualinvoke r0.<com.android.internal.telephony.PhoneConfigurationManager: int getPhoneCount()>();

        if $i2 == i0 goto label2;

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>("switchMultiSimConfig: sending the request for switching");

        $r11 = r0.<com.android.internal.telephony.PhoneConfigurationManager: android.os.Handler mHandler>;

        r20 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>($r11, 100, i0, 0);

        $r12 = r0.<com.android.internal.telephony.PhoneConfigurationManager: com.android.internal.telephony.RadioConfig mRadioConfig>;

        virtualinvoke $r12.<com.android.internal.telephony.RadioConfig: void setModemsConfig(int,android.os.Message)>(i0, r20);

        goto label3;

     label2:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("switchMultiSimConfig: No need to switch. getNumOfActiveSims is already ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.PhoneConfigurationManager: void log(java.lang.String)>($r10);

     label3:
        return;
    }
}
