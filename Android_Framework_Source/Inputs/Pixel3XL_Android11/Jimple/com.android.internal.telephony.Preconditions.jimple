public class com.android.internal.telephony.Preconditions extends java.lang.Object
{

    public void <init>()
    {
        com.android.internal.telephony.Preconditions r0;

        r0 := @this: com.android.internal.telephony.Preconditions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void checkArgument(boolean)
    {
        boolean z0;
        java.lang.IllegalArgumentException $r0;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        return;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static void checkArgument(boolean, java.lang.Object)
    {
        boolean z0;
        java.lang.Object r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.String $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.Object;

        if z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r0);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r2);

        throw $r1;
    }

    public static transient void checkArgument(boolean, java.lang.String, java.lang.Object[])
    {
        boolean z0;
        java.lang.String r0, $r3;
        java.lang.Object[] r1;
        java.lang.IllegalArgumentException $r2;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.lang.Object[];

        if z0 == 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r0, r1);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public static float checkArgumentFinite(float, java.lang.String)
    {
        float f0;
        java.lang.String r0, $r5, $r10;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1, $r6;
        java.lang.IllegalArgumentException $r4, $r9;

        f0 := @parameter0: float;

        r0 := @parameter1: java.lang.String;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0);

        if $z1 != 0 goto label1;

        return f0;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be infinite");

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be NaN");

        $r4 = new java.lang.IllegalArgumentException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static float checkArgumentInRange(float, float, float, java.lang.String)
    {
        float f0, f1, f2;
        java.lang.String r0, $r6, $r11, $r16;
        boolean $z0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5, $r7, $r12;
        byte $b0, $b1;
        java.lang.Object[] $r8, $r13;
        java.lang.Float $r9, $r10, $r14, $r15;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        f2 := @parameter2: float;

        r0 := @parameter3: java.lang.String;

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 != 0 goto label3;

        $b0 = f0 cmpg f1;

        if $b0 < 0 goto label2;

        $b1 = f0 cmpl f2;

        if $b1 > 0 goto label1;

        return f0;

     label1:
        $r12 = new java.lang.IllegalArgumentException;

        $r13 = newarray (java.lang.Object)[3];

        $r13[0] = r0;

        $r14 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r13[1] = $r14;

        $r15 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f2);

        $r13[2] = $r15;

        $r16 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is out of range of [%f, %f] (too high)", $r13);

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label2:
        $r7 = new java.lang.IllegalArgumentException;

        $r8 = newarray (java.lang.Object)[3];

        $r8[0] = r0;

        $r9 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r8[1] = $r9;

        $r10 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f2);

        $r8[2] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is out of range of [%f, %f] (too low)", $r8);

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r7;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be NaN");

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static int checkArgumentInRange(int, int, int, java.lang.String)
    {
        int i0, i1, i2;
        java.lang.String r0, $r5, $r10;
        java.lang.IllegalArgumentException $r1, $r6;
        java.lang.Object[] $r2, $r7;
        java.lang.Integer $r3, $r4, $r8, $r9;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r0 := @parameter3: java.lang.String;

        if i0 < i1 goto label2;

        if i0 > i2 goto label1;

        return i0;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[3];

        $r7[0] = r0;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r7[1] = $r8;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r7[2] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is out of range of [%d, %d] (too high)", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r0;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r2[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r2[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is out of range of [%d, %d] (too low)", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static long checkArgumentInRange(long, long, long, java.lang.String)
    {
        long l0, l1, l2;
        java.lang.String r0, $r5, $r10;
        byte $b3, $b4;
        java.lang.IllegalArgumentException $r1, $r6;
        java.lang.Object[] $r2, $r7;
        java.lang.Long $r3, $r4, $r8, $r9;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        r0 := @parameter3: java.lang.String;

        $b3 = l0 cmp l1;

        if $b3 < 0 goto label2;

        $b4 = l0 cmp l2;

        if $b4 > 0 goto label1;

        return l0;

     label1:
        $r6 = new java.lang.IllegalArgumentException;

        $r7 = newarray (java.lang.Object)[3];

        $r7[0] = r0;

        $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r7[1] = $r8;

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r7[2] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is out of range of [%d, %d] (too high)", $r7);

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        $r2 = newarray (java.lang.Object)[3];

        $r2[0] = r0;

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1);

        $r2[1] = $r3;

        $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l2);

        $r2[2] = $r4;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s is out of range of [%d, %d] (too low)", $r2);

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5);

        throw $r1;
    }

    public static java.lang.String checkArgumentIsSupported(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.String r1, $r8, $r11;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.lang.IllegalArgumentException $r10;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        staticinvoke <com.android.internal.telephony.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r1);

        staticinvoke <com.android.internal.telephony.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>(r0);

        $z0 = staticinvoke <com.android.internal.telephony.Preconditions: boolean contains(java.lang.String[],java.lang.String)>(r0, r1);

        if $z0 == 0 goto label1;

        return r1;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("is not supported ");

        $r8 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>(r0);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = new java.lang.IllegalArgumentException;

        $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11);

        throw $r10;
    }

    public static float checkArgumentNonNegative(float, java.lang.String)
    {
        float f0;
        java.lang.String r0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        f0 := @parameter0: float;

        r0 := @parameter1: java.lang.String;

        $b0 = f0 cmpg 0.0F;

        if $b0 < 0 goto label1;

        return f0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r1;
    }

    public static int checkArgumentNonnegative(int)
    {
        int i0;
        java.lang.IllegalArgumentException $r0;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        return i0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static int checkArgumentNonnegative(int, java.lang.String)
    {
        int i0;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        if i0 < 0 goto label1;

        return i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r1;
    }

    public static long checkArgumentNonnegative(long)
    {
        long l0;
        byte $b1;
        java.lang.IllegalArgumentException $r0;

        l0 := @parameter0: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        return l0;

     label1:
        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r0;
    }

    public static long checkArgumentNonnegative(long, java.lang.String)
    {
        long l0;
        java.lang.String r0;
        byte $b1;
        java.lang.IllegalArgumentException $r1;

        l0 := @parameter0: long;

        r0 := @parameter1: java.lang.String;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label1;

        return l0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r1;
    }

    public static float checkArgumentPositive(float, java.lang.String)
    {
        float f0;
        java.lang.String r0;
        byte $b0;
        java.lang.IllegalArgumentException $r1;

        f0 := @parameter0: float;

        r0 := @parameter1: java.lang.String;

        $b0 = f0 cmpg 0.0F;

        if $b0 <= 0 goto label1;

        return f0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r1;
    }

    public static int checkArgumentPositive(int, java.lang.String)
    {
        int i0;
        java.lang.String r0;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        if i0 <= 0 goto label1;

        return i0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r1;
    }

    public static float[] checkArrayElementsInRange(float[], float, float, java.lang.String)
    {
        float f0, f1, f2;
        java.lang.String r0, $r5, $r13, $r19, $r25;
        java.lang.StringBuilder $r2, $r7;
        int $i0, i3;
        boolean $z0;
        java.lang.IllegalArgumentException $r12, $r14, $r20;
        byte $b1, $b2;
        java.lang.Object[] $r15, $r21;
        java.lang.Integer $r16, $r22;
        java.lang.Float $r17, $r18, $r23, $r24;
        float[] r26;

        r26 := @parameter0: float[];

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        r0 := @parameter3: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r26, $r5);

        i3 = 0;

     label1:
        $i0 = lengthof r26;

        if i3 >= $i0 goto label5;

        f2 = r26[i3];

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f2);

        if $z0 != 0 goto label4;

        $b1 = f2 cmpg f0;

        if $b1 < 0 goto label3;

        $b2 = f2 cmpl f1;

        if $b2 > 0 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        $r20 = new java.lang.IllegalArgumentException;

        $r21 = newarray (java.lang.Object)[4];

        $r21[0] = r0;

        $r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r21[1] = $r22;

        $r23 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r21[2] = $r23;

        $r24 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r21[3] = $r24;

        $r25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[%d] is out of range of [%f, %f] (too high)", $r21);

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25);

        throw $r20;

     label3:
        $r14 = new java.lang.IllegalArgumentException;

        $r15 = newarray (java.lang.Object)[4];

        $r15[0] = r0;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i3);

        $r15[1] = $r16;

        $r17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0);

        $r15[2] = $r17;

        $r18 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f1);

        $r15[3] = $r18;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[%d] is out of range of [%f, %f] (too low)", $r15);

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label4:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] must not be NaN");

        $r12 = new java.lang.IllegalArgumentException;

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label5:
        return r26;
    }

    public static int[] checkArrayElementsInRange(int[], int, int, java.lang.String)
    {
        int[] r0;
        int i0, i1, i2, $i3, i4;
        java.lang.String r1, $r6, $r13, $r19;
        java.lang.StringBuilder $r3;
        java.lang.IllegalArgumentException $r8, $r14;
        java.lang.Object[] $r9, $r15;
        java.lang.Integer $r10, $r11, $r12, $r16, $r17, $r18;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>(r0, $r6);

        i4 = 0;

     label1:
        $i3 = lengthof r0;

        if i4 >= $i3 goto label4;

        i2 = r0[i4];

        if i2 < i0 goto label3;

        if i2 > i1 goto label2;

        i4 = i4 + 1;

        goto label1;

     label2:
        $r14 = new java.lang.IllegalArgumentException;

        $r15 = newarray (java.lang.Object)[4];

        $r15[0] = r1;

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r15[1] = $r16;

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r15[2] = $r17;

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r15[3] = $r18;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[%d] is out of range of [%d, %d] (too high)", $r15);

        specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r14;

     label3:
        $r8 = new java.lang.IllegalArgumentException;

        $r9 = newarray (java.lang.Object)[4];

        $r9[0] = r1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4);

        $r9[1] = $r10;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r9[2] = $r11;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r9[3] = $r12;

        $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[%d] is out of range of [%d, %d] (too low)", $r9);

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label4:
        return r0;
    }

    public static java.lang.Object[] checkArrayElementsNotNull(java.lang.Object[], java.lang.String)
    {
        java.lang.String r0, $r5, $r10;
        java.lang.StringBuilder $r1;
        java.lang.NullPointerException $r4, $r7;
        int $i0, i1;
        java.lang.Object $r6;
        java.lang.Object[] $r8, r11;
        java.lang.Integer $r9;

        r11 := @parameter0: java.lang.Object[];

        r0 := @parameter1: java.lang.String;

        if r11 == null goto label4;

        i1 = 0;

     label1:
        $i0 = lengthof r11;

        if i1 >= $i0 goto label3;

        $r6 = r11[i1];

        if $r6 == null goto label2;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r7 = new java.lang.NullPointerException;

        $r8 = newarray (java.lang.Object)[2];

        $r8[0] = r0;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r8[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[%d] must not be null", $r8);

        specialinvoke $r7.<java.lang.NullPointerException: void <init>(java.lang.String)>($r10);

        throw $r7;

     label3:
        return r11;

     label4:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r4 = new java.lang.NullPointerException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static byte[] checkByteArrayNotEmpty(byte[], java.lang.String)
    {
        java.lang.String r0, $r5, $r10;
        java.lang.StringBuilder $r1, $r6;
        java.lang.NullPointerException $r4;
        int $i0;
        java.lang.IllegalArgumentException $r9;
        byte[] r11;

        r11 := @parameter0: byte[];

        r0 := @parameter1: java.lang.String;

        if r11 == null goto label2;

        $i0 = lengthof r11;

        if $i0 == 0 goto label1;

        return r11;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty");

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r4 = new java.lang.NullPointerException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static java.util.Collection checkCollectionElementsNotNull(java.util.Collection, java.lang.String)
    {
        java.lang.String r0, $r6, $r11;
        java.util.Iterator r1;
        java.lang.StringBuilder $r2;
        java.lang.NullPointerException $r5, $r8;
        boolean $z0;
        java.lang.Object $r7;
        java.lang.Object[] $r9;
        java.lang.Long $r10;
        java.util.Collection r12;
        long l0;

        r12 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.String;

        if r12 == null goto label4;

        l0 = 0L;

        r1 = interfaceinvoke r12.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        if $r7 == null goto label2;

        l0 = l0 + 1L;

        goto label1;

     label2:
        $r8 = new java.lang.NullPointerException;

        $r9 = newarray (java.lang.Object)[2];

        $r9[0] = r0;

        $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0);

        $r9[1] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s[%d] must not be null", $r9);

        specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>($r11);

        throw $r8;

     label3:
        return r12;

     label4:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r5 = new java.lang.NullPointerException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.NullPointerException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static java.util.Collection checkCollectionNotEmpty(java.util.Collection, java.lang.String)
    {
        java.lang.String r0, $r5, $r10;
        java.lang.StringBuilder $r1, $r6;
        java.lang.NullPointerException $r4;
        boolean $z0;
        java.lang.IllegalArgumentException $r9;
        java.util.Collection r11;

        r11 := @parameter0: java.util.Collection;

        r0 := @parameter1: java.lang.String;

        if r11 == null goto label2;

        $z0 = interfaceinvoke r11.<java.util.Collection: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        return r11;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is empty");

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;

     label2:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must not be null");

        $r4 = new java.lang.NullPointerException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>($r5);

        throw $r4;
    }

    public static int checkFlagsArgument(int, int)
    {
        int i0, i1, $i2;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, $r6, $r10;
        java.lang.IllegalArgumentException $r9;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 & i1;

        if $i2 != i0 goto label1;

        return i0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requested flags 0x");

        $r3 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", but only 0x");

        $r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i1);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" are allowed");

        $r9 = new java.lang.IllegalArgumentException;

        $r10 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r9;
    }

    public static java.lang.Object checkNotNull(java.lang.Object)
    {
        java.lang.Object r0;

        r0 := @parameter0: java.lang.Object;

        if r0 == null goto label1;

        return r0;

     label1:
        throw null;
    }

    public static java.lang.Object checkNotNull(java.lang.Object, java.lang.Object)
    {
        java.lang.Object r0, r1;
        java.lang.NullPointerException $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.Object;

        r1 := @parameter1: java.lang.Object;

        if r0 == null goto label1;

        return r0;

     label1:
        $r2 = new java.lang.NullPointerException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r2.<java.lang.NullPointerException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public static void checkState(boolean)
    {
        boolean z0;

        z0 := @parameter0: boolean;

        staticinvoke <com.android.internal.telephony.Preconditions: void checkState(boolean,java.lang.String)>(z0, null);

        return;
    }

    public static void checkState(boolean, java.lang.String)
    {
        boolean z0;
        java.lang.String r0;
        java.lang.IllegalStateException $r1;

        z0 := @parameter0: boolean;

        r0 := @parameter1: java.lang.String;

        if z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>(r0);

        throw $r1;
    }

    public static java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        boolean $z0;
        java.lang.IllegalArgumentException $r1;

        r0 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r1;
    }

    public static java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence, java.lang.Object)
    {
        java.lang.CharSequence r0;
        java.lang.Object r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        $r3 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r1);

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r3);

        throw $r2;
    }

    public static transient java.lang.CharSequence checkStringNotEmpty(java.lang.CharSequence, java.lang.String, java.lang.Object[])
    {
        java.lang.CharSequence r0;
        java.lang.String r1, $r4;
        java.lang.Object[] r2;
        boolean $z0;
        java.lang.IllegalArgumentException $r3;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Object[];

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0);

        if $z0 != 0 goto label1;

        return r0;

     label1:
        $r3 = new java.lang.IllegalArgumentException;

        $r4 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r1, r2);

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r3;
    }

    private static boolean contains(java.lang.String[], java.lang.String)
    {
        java.lang.String[] r0;
        java.lang.String r1, $r2;
        int $i0, i1;
        boolean $z0;

        r0 := @parameter0: java.lang.String[];

        r1 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        return 0;

     label1:
        i1 = 0;

     label2:
        $i0 = lengthof r0;

        if i1 >= $i0 goto label4;

        $r2 = r0[i1];

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }
}
