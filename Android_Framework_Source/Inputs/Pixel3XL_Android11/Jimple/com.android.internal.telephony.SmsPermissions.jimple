public class com.android.internal.telephony.SmsPermissions extends java.lang.Object
{
    static final java.lang.String LOG_TAG;
    private final android.app.AppOpsManager mAppOps;
    private final android.content.Context mContext;
    private final com.android.internal.telephony.Phone mPhone;

    public void <init>(com.android.internal.telephony.Phone, android.content.Context, android.app.AppOpsManager)
    {
        com.android.internal.telephony.SmsPermissions r0;
        com.android.internal.telephony.Phone r1;
        android.content.Context r2;
        android.app.AppOpsManager r3;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: android.app.AppOpsManager;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.telephony.SmsPermissions: com.android.internal.telephony.Phone mPhone> = r1;

        r0.<com.android.internal.telephony.SmsPermissions: android.content.Context mContext> = r2;

        r0.<com.android.internal.telephony.SmsPermissions: android.app.AppOpsManager mAppOps> = r3;

        return;
    }

    public boolean checkCallingCanSendSms(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.SmsPermissions r0;
        java.lang.String r1, r2, r3;
        android.content.Context $r4;
        android.app.AppOpsManager $r5;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.android.internal.telephony.SmsPermissions: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.SEND_SMS", r3);

        $r5 = r0.<com.android.internal.telephony.SmsPermissions: android.app.AppOpsManager mAppOps>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = virtualinvoke $r5.<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>("android:send_sms", $i0, r1, r2, null);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean checkCallingCanSendText(boolean, java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.SmsPermissions r0;
        boolean z0, $z1;
        java.lang.String r1, r2, r3;
        java.lang.Throwable $r5;
        android.content.Context $r6;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: java.lang.String;

        if z0 != 0 goto label4;

     label1:
        virtualinvoke r0.<com.android.internal.telephony.SmsPermissions: void enforceCallerIsImsAppOrCarrierApp(java.lang.String)>(r3);

     label2:
        return 1;

     label3:
        $r5 := @caughtexception;

        $r6 = r0.<com.android.internal.telephony.SmsPermissions: android.content.Context mContext>;

        virtualinvoke $r6.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.MODIFY_PHONE_STATE", r3);

     label4:
        $z1 = virtualinvoke r0.<com.android.internal.telephony.SmsPermissions: boolean checkCallingCanSendSms(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        return $z1;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public boolean checkCallingOrSelfCanGetSmscAddress(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.SmsPermissions r0;
        java.lang.String r1, r2;
        boolean $z0;
        com.android.internal.telephony.Phone $r3;
        android.content.Context $r4;
        int $i0;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.SmsPermissions: boolean isCallerDefaultSmsPackage(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.internal.telephony.SmsPermissions: android.content.Context mContext>;

        $r3 = r0.<com.android.internal.telephony.SmsPermissions: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r3.<com.android.internal.telephony.Phone: int getSubId()>();

        staticinvoke <com.android.internal.telephony.TelephonyPermissions: void enforeceCallingOrSelfReadPrivilegedPhoneStatePermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)>($r4, $i0, r2);

     label1:
        return 1;
    }

    public boolean checkCallingOrSelfCanSendSms(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.SmsPermissions r0;
        java.lang.String r1, r2, r3;
        android.content.Context $r4;
        android.app.AppOpsManager $r5;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r4 = r0.<com.android.internal.telephony.SmsPermissions: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SEND_SMS", r3);

        $r5 = r0.<com.android.internal.telephony.SmsPermissions: android.app.AppOpsManager mAppOps>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = virtualinvoke $r5.<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>("android:send_sms", $i0, r1, r2, null);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean checkCallingOrSelfCanSetSmscAddress(java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.SmsPermissions r0;
        java.lang.String r1, r2;
        boolean $z0;
        com.android.internal.telephony.Phone $r3;
        android.content.Context $r4;
        int $i0;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.SmsPermissions: boolean isCallerDefaultSmsPackage(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        $r4 = r0.<com.android.internal.telephony.SmsPermissions: android.content.Context mContext>;

        $r3 = r0.<com.android.internal.telephony.SmsPermissions: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r3.<com.android.internal.telephony.Phone: int getSubId()>();

        staticinvoke <com.android.internal.telephony.TelephonyPermissions: void enforceCallingOrSelfModifyPermissionOrCarrierPrivilege(android.content.Context,int,java.lang.String)>($r4, $i0, r2);

     label1:
        return 1;
    }

    public void enforceCallerIsImsAppOrCarrierApp(java.lang.String)
    {
        com.android.internal.telephony.SmsPermissions r0;
        java.lang.String r1, r2;
        android.content.Intent $r3;
        android.content.Context $r4, $r7;
        com.android.internal.telephony.Phone $r5, $r6;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r1 := @parameter0: java.lang.String;

        $r4 = r0.<com.android.internal.telephony.SmsPermissions: android.content.Context mContext>;

        $r5 = r0.<com.android.internal.telephony.SmsPermissions: com.android.internal.telephony.Phone mPhone>;

        $r3 = new android.content.Intent;

        specialinvoke $r3.<android.content.Intent: void <init>(java.lang.String)>("android.service.carrier.CarrierMessagingService");

        r2 = staticinvoke <com.android.internal.telephony.CarrierSmsUtils: java.lang.String getCarrierImsPackageForIntent(android.content.Context,com.android.internal.telephony.Phone,android.content.Intent)>($r4, $r5, $r3);

        if r2 == null goto label1;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.SmsPermissions: boolean packageNameMatchesCallingUid(java.lang.String)>(r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r7 = r0.<com.android.internal.telephony.SmsPermissions: android.content.Context mContext>;

        $r6 = r0.<com.android.internal.telephony.SmsPermissions: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r6.<com.android.internal.telephony.Phone: int getSubId()>();

        staticinvoke <com.android.internal.telephony.TelephonyPermissions: void enforceCallingOrSelfCarrierPrivilege(android.content.Context,int,java.lang.String)>($r7, $i0, r1);

        return;
    }

    public boolean isCallerDefaultSmsPackage(java.lang.String)
    {
        com.android.internal.telephony.SmsPermissions r0;
        java.lang.String r1;
        boolean $z0, $z1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.SmsPermissions: boolean packageNameMatchesCallingUid(java.lang.String)>(r1);

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.internal.telephony.SmsPermissions: android.content.Context mContext>;

        $z1 = staticinvoke <com.android.internal.telephony.SmsApplication: boolean isDefaultSmsApplication(android.content.Context,java.lang.String)>($r2, r1);

        return $z1;

     label1:
        return 0;
    }

    protected void log(java.lang.String)
    {
        com.android.internal.telephony.SmsPermissions r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SmsPermissions", r1);

        return;
    }

    protected void loge(java.lang.String)
    {
        com.android.internal.telephony.SmsPermissions r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SmsPermissions", r1);

        return;
    }

    protected void loge(java.lang.String, java.lang.Throwable)
    {
        com.android.internal.telephony.SmsPermissions r0;
        java.lang.String r1;
        java.lang.Throwable r2;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("SmsPermissions", r1, r2);

        return;
    }

    public boolean packageNameMatchesCallingUid(java.lang.String)
    {
        com.android.internal.telephony.SmsPermissions r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.AppOpsManager $r3;
        int $i0;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.internal.telephony.SmsPermissions;

        r5 := @parameter0: java.lang.String;

     label1:
        $r1 = r0.<com.android.internal.telephony.SmsPermissions: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r3 = (android.app.AppOpsManager) $r2;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i0, r5);

     label2:
        return 1;

     label3:
        $r4 := @caughtexception;

        return 0;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.SmsPermissions: java.lang.String LOG_TAG> = "SmsPermissions";

        return;
    }
}
