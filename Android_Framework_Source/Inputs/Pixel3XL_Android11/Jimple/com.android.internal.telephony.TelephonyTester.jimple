public class com.android.internal.telephony.TelephonyTester extends java.lang.Object
{
    private static final java.lang.String ACTION_RESET;
    private static final java.lang.String ACTION_TEST_CHANGE_NUMBER;
    private static final java.lang.String ACTION_TEST_CONFERENCE_EVENT_PACKAGE;
    private static final java.lang.String ACTION_TEST_DIALOG_EVENT_PACKAGE;
    private static final java.lang.String ACTION_TEST_HANDOVER_FAIL;
    private static final java.lang.String ACTION_TEST_IMS_E_CALL;
    private static final java.lang.String ACTION_TEST_SERVICE_STATE;
    private static final java.lang.String ACTION_TEST_SUPP_SRVC_FAIL;
    private static final java.lang.String ACTION_TEST_SUPP_SRVC_NOTIFICATION;
    private static final boolean DBG;
    private static final java.lang.String EXTRA_ACTION;
    private static final java.lang.String EXTRA_BYPASS_IMSCALL;
    private static final java.lang.String EXTRA_CANPULL;
    private static final java.lang.String EXTRA_CODE;
    private static final java.lang.String EXTRA_DATA_RAT;
    private static final java.lang.String EXTRA_DATA_REG_STATE;
    private static final java.lang.String EXTRA_DATA_ROAMING_TYPE;
    private static final java.lang.String EXTRA_DIALOGID;
    private static final java.lang.String EXTRA_FAILURE_CODE;
    private static final java.lang.String EXTRA_FILENAME;
    private static final java.lang.String EXTRA_NR_FREQUENCY_RANGE;
    private static final java.lang.String EXTRA_NR_STATE;
    private static final java.lang.String EXTRA_NUMBER;
    private static final java.lang.String EXTRA_OPERATOR;
    private static final java.lang.String EXTRA_OPERATOR_RAW;
    private static final java.lang.String EXTRA_SENDPACKAGE;
    private static final java.lang.String EXTRA_STARTPACKAGE;
    private static final java.lang.String EXTRA_STATE;
    private static final java.lang.String EXTRA_TYPE;
    private static final java.lang.String EXTRA_VOICE_RAT;
    private static final java.lang.String EXTRA_VOICE_REG_STATE;
    private static final java.lang.String EXTRA_VOICE_ROAMING_TYPE;
    private static final java.lang.String LOG_TAG;
    private static java.util.List mImsExternalCallStates;
    protected android.content.BroadcastReceiver mIntentReceiver;
    private com.android.internal.telephony.Phone mPhone;
    private android.content.Intent mServiceStateTestIntent;

    static void <clinit>()
    {
        <com.android.internal.telephony.TelephonyTester: java.lang.String LOG_TAG> = "TelephonyTester";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_VOICE_ROAMING_TYPE> = "voice_roaming_type";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_VOICE_REG_STATE> = "voice_reg_state";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_VOICE_RAT> = "voice_rat";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_TYPE> = "type";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_STATE> = "state";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_STARTPACKAGE> = "startPackage";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_SENDPACKAGE> = "sendPackage";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_OPERATOR_RAW> = "operator_raw";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_OPERATOR> = "operator";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_NUMBER> = "number";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_NR_STATE> = "nr_state";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_NR_FREQUENCY_RANGE> = "nr_frequency_range";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_FILENAME> = "filename";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_FAILURE_CODE> = "failureCode";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_DIALOGID> = "dialogId";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_DATA_ROAMING_TYPE> = "data_roaming_type";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_DATA_REG_STATE> = "data_reg_state";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_DATA_RAT> = "data_rat";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_CODE> = "code";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_CANPULL> = "canPull";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_BYPASS_IMSCALL> = "bypassImsCall";

        <com.android.internal.telephony.TelephonyTester: java.lang.String EXTRA_ACTION> = "action";

        <com.android.internal.telephony.TelephonyTester: boolean DBG> = 1;

        <com.android.internal.telephony.TelephonyTester: java.lang.String ACTION_TEST_SUPP_SRVC_NOTIFICATION> = "com.android.internal.telephony.TestSuppSrvcNotification";

        <com.android.internal.telephony.TelephonyTester: java.lang.String ACTION_TEST_SUPP_SRVC_FAIL> = "com.android.internal.telephony.TestSuppSrvcFail";

        <com.android.internal.telephony.TelephonyTester: java.lang.String ACTION_TEST_SERVICE_STATE> = "com.android.internal.telephony.TestServiceState";

        <com.android.internal.telephony.TelephonyTester: java.lang.String ACTION_TEST_IMS_E_CALL> = "com.android.internal.telephony.TestImsECall";

        <com.android.internal.telephony.TelephonyTester: java.lang.String ACTION_TEST_HANDOVER_FAIL> = "com.android.internal.telephony.TestHandoverFail";

        <com.android.internal.telephony.TelephonyTester: java.lang.String ACTION_TEST_DIALOG_EVENT_PACKAGE> = "com.android.internal.telephony.TestDialogEventPackage";

        <com.android.internal.telephony.TelephonyTester: java.lang.String ACTION_TEST_CONFERENCE_EVENT_PACKAGE> = "com.android.internal.telephony.TestConferenceEventPackage";

        <com.android.internal.telephony.TelephonyTester: java.lang.String ACTION_TEST_CHANGE_NUMBER> = "com.android.internal.telephony.TestChangeNumber";

        <com.android.internal.telephony.TelephonyTester: java.lang.String ACTION_RESET> = "reset";

        <com.android.internal.telephony.TelephonyTester: java.util.List mImsExternalCallStates> = null;

        return;
    }

    void <init>(com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.TelephonyTester r0;
        com.android.internal.telephony.Phone r1, $r5, $r9, $r13, $r17, $r21, $r23;
        com.android.internal.telephony.TelephonyTester$1 $r3;
        boolean $z0;
        android.content.IntentFilter $r4;
        java.lang.String $r6, $r10, $r12, $r14, $r18, $r20;
        java.lang.StringBuilder $r7, $r15;
        int $i0;
        android.content.Context $r22;
        android.content.BroadcastReceiver $r24;
        android.os.Handler $r25;
        java.util.ArrayList $r27;

        r0 := @this: com.android.internal.telephony.TelephonyTester;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new com.android.internal.telephony.TelephonyTester$1;

        specialinvoke $r3.<com.android.internal.telephony.TelephonyTester$1: void <init>(com.android.internal.telephony.TelephonyTester)>(r0);

        r0.<com.android.internal.telephony.TelephonyTester: android.content.BroadcastReceiver mIntentReceiver> = $r3;

        r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone> = r1;

        $z0 = <com.android.internal.telephony.util.TelephonyUtils: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label2;

        $r4 = new android.content.IntentFilter;

        specialinvoke $r4.<android.content.IntentFilter: void <init>()>();

        $r5 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $r6 = virtualinvoke $r5.<com.android.internal.telephony.Phone: java.lang.String getActionDetached()>();

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>($r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("register for intent action=");

        $r9 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $r10 = virtualinvoke $r9.<com.android.internal.telephony.Phone: java.lang.String getActionDetached()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r12);

        $r13 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $r14 = virtualinvoke $r13.<com.android.internal.telephony.Phone: java.lang.String getActionAttached()>();

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>($r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("register for intent action=");

        $r17 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $r18 = virtualinvoke $r17.<com.android.internal.telephony.Phone: java.lang.String getActionAttached()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r20);

        $r21 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $i0 = virtualinvoke $r21.<com.android.internal.telephony.Phone: int getPhoneType()>();

        if $i0 != 5 goto label1;

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>("register for intent action=com.android.internal.telephony.TestConferenceEventPackage");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.internal.telephony.TestConferenceEventPackage");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.internal.telephony.TestDialogEventPackage");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.internal.telephony.TestSuppSrvcFail");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.internal.telephony.TestHandoverFail");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.internal.telephony.TestSuppSrvcNotification");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.internal.telephony.TestImsECall");

        $r27 = new java.util.ArrayList;

        specialinvoke $r27.<java.util.ArrayList: void <init>()>();

        <com.android.internal.telephony.TelephonyTester: java.util.List mImsExternalCallStates> = $r27;

     label1:
        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.internal.telephony.TestServiceState");

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>("register for intent action=com.android.internal.telephony.TestServiceState");

        virtualinvoke $r4.<android.content.IntentFilter: void addAction(java.lang.String)>("com.android.internal.telephony.TestChangeNumber");

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>("register for intent action=com.android.internal.telephony.TestChangeNumber");

        $r22 = virtualinvoke r1.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r24 = r0.<com.android.internal.telephony.TelephonyTester: android.content.BroadcastReceiver mIntentReceiver>;

        $r23 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $r25 = virtualinvoke $r23.<com.android.internal.telephony.Phone: android.os.Handler getHandler()>();

        virtualinvoke $r22.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r24, $r4, null, $r25);

     label2:
        return;
    }

    static void access$000(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>(r0);

        return;
    }

    static com.android.internal.telephony.Phone access$100(com.android.internal.telephony.TelephonyTester)
    {
        com.android.internal.telephony.TelephonyTester r0;
        com.android.internal.telephony.Phone $r1;

        r0 := @parameter0: com.android.internal.telephony.TelephonyTester;

        $r1 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        return $r1;
    }

    static void access$200(com.android.internal.telephony.TelephonyTester, android.content.Context, java.lang.String, boolean)
    {
        com.android.internal.telephony.TelephonyTester r0;
        android.content.Context r1;
        java.lang.String r2;
        boolean z0;

        r0 := @parameter0: com.android.internal.telephony.TelephonyTester;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: java.lang.String;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.internal.telephony.TelephonyTester: void handleTestConferenceEventPackage(android.content.Context,java.lang.String,boolean)>(r1, r2, z0);

        return;
    }

    static void access$300(com.android.internal.telephony.TelephonyTester, android.content.Intent)
    {
        com.android.internal.telephony.TelephonyTester r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.internal.telephony.TelephonyTester;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<com.android.internal.telephony.TelephonyTester: void handleTestDialogEventPackageIntent(android.content.Intent)>(r1);

        return;
    }

    static void access$400(com.android.internal.telephony.TelephonyTester, android.content.Intent)
    {
        com.android.internal.telephony.TelephonyTester r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.internal.telephony.TelephonyTester;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<com.android.internal.telephony.TelephonyTester: void handleSuppServiceFailedIntent(android.content.Intent)>(r1);

        return;
    }

    static void access$500(com.android.internal.telephony.TelephonyTester)
    {
        com.android.internal.telephony.TelephonyTester r0;

        r0 := @parameter0: com.android.internal.telephony.TelephonyTester;

        specialinvoke r0.<com.android.internal.telephony.TelephonyTester: void handleHandoverFailedIntent()>();

        return;
    }

    static void access$600(com.android.internal.telephony.TelephonyTester, android.content.Intent)
    {
        com.android.internal.telephony.TelephonyTester r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.internal.telephony.TelephonyTester;

        r1 := @parameter1: android.content.Intent;

        specialinvoke r0.<com.android.internal.telephony.TelephonyTester: void sendTestSuppServiceNotification(android.content.Intent)>(r1);

        return;
    }

    static android.content.Intent access$702(com.android.internal.telephony.TelephonyTester, android.content.Intent)
    {
        com.android.internal.telephony.TelephonyTester r0;
        android.content.Intent r1;

        r0 := @parameter0: com.android.internal.telephony.TelephonyTester;

        r1 := @parameter1: android.content.Intent;

        r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent> = r1;

        return r1;
    }

    private void handleHandoverFailedIntent()
    {
        com.android.internal.telephony.TelephonyTester r0;
        com.android.internal.telephony.Phone $r1;
        com.android.ims.ImsCall$ImsCallSessionListenerProxy $r2;
        android.telephony.ims.ImsCallSession $r3;
        android.telephony.ims.ImsReasonInfo $r4;
        com.android.internal.telephony.imsphone.ImsPhone r5;
        com.android.internal.telephony.imsphone.ImsPhoneCall r6;
        com.android.ims.ImsCall r7;

        r0 := @this: com.android.internal.telephony.TelephonyTester;

        $r1 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        r5 = (com.android.internal.telephony.imsphone.ImsPhone) $r1;

        if r5 != null goto label1;

        return;

     label1:
        r6 = virtualinvoke r5.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        if r6 != null goto label2;

        return;

     label2:
        r7 = virtualinvoke r6.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.ims.ImsCall getImsCall()>();

        if r7 != null goto label3;

        return;

     label3:
        $r2 = virtualinvoke r7.<com.android.ims.ImsCall: com.android.ims.ImsCall$ImsCallSessionListenerProxy getImsCallSessionListenerProxy()>();

        $r3 = virtualinvoke r7.<com.android.ims.ImsCall: android.telephony.ims.ImsCallSession getCallSession()>();

        $r4 = new android.telephony.ims.ImsReasonInfo;

        specialinvoke $r4.<android.telephony.ims.ImsReasonInfo: void <init>()>();

        virtualinvoke $r2.<com.android.ims.ImsCall$ImsCallSessionListenerProxy: void callSessionHandoverFailed(android.telephony.ims.ImsCallSession,int,int,android.telephony.ims.ImsReasonInfo)>($r3, 13, 18, $r4);

        return;
    }

    private void handleSuppServiceFailedIntent(android.content.Intent)
    {
        com.android.internal.telephony.TelephonyTester r0;
        android.content.Intent r1;
        com.android.internal.telephony.imsphone.ImsPhone r2;
        int i0;
        com.android.internal.telephony.Phone $r3;
        com.android.internal.telephony.PhoneInternalInterface$SuppService[] $r4;
        com.android.internal.telephony.PhoneInternalInterface$SuppService $r5;

        r0 := @this: com.android.internal.telephony.TelephonyTester;

        r1 := @parameter0: android.content.Intent;

        $r3 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        r2 = (com.android.internal.telephony.imsphone.ImsPhone) $r3;

        if r2 != null goto label1;

        return;

     label1:
        i0 = virtualinvoke r1.<android.content.Intent: int getIntExtra(java.lang.String,int)>("failureCode", 0);

        $r4 = staticinvoke <com.android.internal.telephony.PhoneInternalInterface$SuppService: com.android.internal.telephony.PhoneInternalInterface$SuppService[] values()>();

        $r5 = $r4[i0];

        virtualinvoke r2.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)>($r5);

        return;
    }

    private void handleTestConferenceEventPackage(android.content.Context, java.lang.String, boolean)
    {
        com.android.internal.telephony.TelephonyTester r0;
        boolean z0;
        com.android.internal.telephony.imsphone.ImsPhone r1;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker r2;
        com.android.internal.telephony.Phone $r3;
        com.android.internal.telephony.CallTracker $r4;
        java.io.File $r5, $r6;
        java.io.FileInputStream $r7;
        com.android.internal.telephony.test.TestConferenceEventPackageParser $r8;
        java.lang.Throwable $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r12, $r14, r16;
        android.content.Context r15;
        android.telephony.ims.ImsConferenceState r19;
        com.android.internal.telephony.imsphone.ImsPhoneCall r20;
        com.android.ims.ImsCall r21;

        r0 := @this: com.android.internal.telephony.TelephonyTester;

        r15 := @parameter0: android.content.Context;

        r16 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        $r3 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        r1 = (com.android.internal.telephony.imsphone.ImsPhone) $r3;

        if r1 != null goto label1;

        return;

     label1:
        $r4 = virtualinvoke r1.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CallTracker getCallTracker()>();

        r2 = (com.android.internal.telephony.imsphone.ImsPhoneCallTracker) $r4;

        $r5 = new java.io.File;

        $r6 = virtualinvoke r15.<android.content.Context: java.io.File getFilesDir()>();

        specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r16);

     label2:
        $r7 = new java.io.FileInputStream;

        specialinvoke $r7.<java.io.FileInputStream: void <init>(java.io.File)>($r5);

     label3:
        $r8 = new com.android.internal.telephony.test.TestConferenceEventPackageParser;

        specialinvoke $r8.<com.android.internal.telephony.test.TestConferenceEventPackageParser: void <init>(java.io.InputStream)>($r7);

        r19 = virtualinvoke $r8.<com.android.internal.telephony.test.TestConferenceEventPackageParser: android.telephony.ims.ImsConferenceState parse()>();

        if r19 != null goto label4;

        return;

     label4:
        if z0 == 0 goto label5;

        virtualinvoke r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void injectTestConferenceState(android.telephony.ims.ImsConferenceState)>(r19);

        goto label8;

     label5:
        r20 = virtualinvoke r1.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        if r20 != null goto label6;

        return;

     label6:
        r21 = virtualinvoke r20.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.ims.ImsCall getImsCall()>();

        if r21 != null goto label7;

        return;

     label7:
        virtualinvoke r21.<com.android.ims.ImsCall: void conferenceStateUpdated(android.telephony.ims.ImsConferenceState)>(r19);

     label8:
        return;

     label9:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test conference event package file not found: ");

        $r12 = virtualinvoke $r5.<java.io.File: java.lang.String getAbsolutePath()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r14);

        return;

        catch java.io.FileNotFoundException from label2 to label3 with label9;
    }

    private void handleTestDialogEventPackageIntent(android.content.Intent)
    {
        com.android.internal.telephony.TelephonyTester r0;
        com.android.internal.telephony.Phone $r1;
        boolean $z0, $z1, $z2, $z3;
        android.telephony.ims.ImsExternalCallState $r2;
        int $i0, $i1;
        java.lang.String $r3;
        android.net.Uri $r4;
        java.util.List $r5, $r6, $r7, $r8;
        android.content.Intent r9;
        com.android.internal.telephony.imsphone.ImsPhone r10;
        com.android.internal.telephony.imsphone.ImsExternalCallTracker r11;

        r0 := @this: com.android.internal.telephony.TelephonyTester;

        r9 := @parameter0: android.content.Intent;

        $r1 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        r10 = (com.android.internal.telephony.imsphone.ImsPhone) $r1;

        if r10 != null goto label1;

        return;

     label1:
        r11 = virtualinvoke r10.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsExternalCallTracker getExternalCallTracker()>();

        if r11 != null goto label2;

        return;

     label2:
        $z0 = virtualinvoke r9.<android.content.Intent: boolean hasExtra(java.lang.String)>("startPackage");

        if $z0 == 0 goto label3;

        $r8 = <com.android.internal.telephony.TelephonyTester: java.util.List mImsExternalCallStates>;

        interfaceinvoke $r8.<java.util.List: void clear()>();

        goto label5;

     label3:
        $z1 = virtualinvoke r9.<android.content.Intent: boolean hasExtra(java.lang.String)>("sendPackage");

        if $z1 == 0 goto label4;

        $r6 = <com.android.internal.telephony.TelephonyTester: java.util.List mImsExternalCallStates>;

        virtualinvoke r11.<com.android.internal.telephony.imsphone.ImsExternalCallTracker: void refreshExternalCallState(java.util.List)>($r6);

        $r7 = <com.android.internal.telephony.TelephonyTester: java.util.List mImsExternalCallStates>;

        interfaceinvoke $r7.<java.util.List: void clear()>();

        goto label5;

     label4:
        $z2 = virtualinvoke r9.<android.content.Intent: boolean hasExtra(java.lang.String)>("dialogId");

        if $z2 == 0 goto label5;

        $r2 = new android.telephony.ims.ImsExternalCallState;

        $i0 = virtualinvoke r9.<android.content.Intent: int getIntExtra(java.lang.String,int)>("dialogId", 0);

        $r3 = virtualinvoke r9.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("number");

        $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r3);

        $z3 = virtualinvoke r9.<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>("canPull", 1);

        $i1 = virtualinvoke r9.<android.content.Intent: int getIntExtra(java.lang.String,int)>("state", 1);

        specialinvoke $r2.<android.telephony.ims.ImsExternalCallState: void <init>(int,android.net.Uri,boolean,int,int,boolean)>($i0, $r4, $z3, $i1, 2, 0);

        $r5 = <com.android.internal.telephony.TelephonyTester: java.util.List mImsExternalCallStates>;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r2);

     label5:
        return;
    }

    static void lambda$testChangeNumber$0(java.lang.String, com.android.internal.telephony.Connection)
    {
        java.lang.String r0;
        com.android.internal.telephony.Connection r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: com.android.internal.telephony.Connection;

        virtualinvoke r1.<com.android.internal.telephony.Connection: void setAddress(java.lang.String,int)>(r0, 1);

        virtualinvoke r1.<com.android.internal.telephony.Connection: void setDialString(java.lang.String)>(r0);

        return;
    }

    private static void log(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("TelephonyTester", r0);

        return;
    }

    private void sendTestSuppServiceNotification(android.content.Intent)
    {
        com.android.internal.telephony.TelephonyTester r0;
        int i0, i1;
        boolean $z0, $z1;
        com.android.internal.telephony.Phone $r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        com.android.internal.telephony.gsm.SuppServiceNotification $r6;
        android.content.Intent r7;
        com.android.internal.telephony.imsphone.ImsPhone r8;

        r0 := @this: com.android.internal.telephony.TelephonyTester;

        r7 := @parameter0: android.content.Intent;

        $z0 = virtualinvoke r7.<android.content.Intent: boolean hasExtra(java.lang.String)>("code");

        if $z0 == 0 goto label2;

        $z1 = virtualinvoke r7.<android.content.Intent: boolean hasExtra(java.lang.String)>("type");

        if $z1 == 0 goto label2;

        i0 = virtualinvoke r7.<android.content.Intent: int getIntExtra(java.lang.String,int)>("code", -1);

        i1 = virtualinvoke r7.<android.content.Intent: int getIntExtra(java.lang.String,int)>("type", -1);

        $r1 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        r8 = (com.android.internal.telephony.imsphone.ImsPhone) $r1;

        if r8 != null goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Test supp service notification:");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r5);

        $r6 = new com.android.internal.telephony.gsm.SuppServiceNotification;

        specialinvoke $r6.<com.android.internal.telephony.gsm.SuppServiceNotification: void <init>()>();

        $r6.<com.android.internal.telephony.gsm.SuppServiceNotification: int code> = i0;

        $r6.<com.android.internal.telephony.gsm.SuppServiceNotification: int notificationType> = i1;

        virtualinvoke r8.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppSvcNotification(com.android.internal.telephony.gsm.SuppServiceNotification)>($r6);

     label2:
        return;
    }

    void dispose()
    {
        com.android.internal.telephony.TelephonyTester r0;
        boolean $z0;
        com.android.internal.telephony.Phone $r1;
        android.content.Context $r2;
        android.content.BroadcastReceiver $r3;

        r0 := @this: com.android.internal.telephony.TelephonyTester;

        $z0 = <com.android.internal.telephony.util.TelephonyUtils: boolean IS_DEBUGGABLE>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: android.content.Context getContext()>();

        $r3 = r0.<com.android.internal.telephony.TelephonyTester: android.content.BroadcastReceiver mIntentReceiver>;

        virtualinvoke $r2.<android.content.Context: void unregisterReceiver(android.content.BroadcastReceiver)>($r3);

     label1:
        return;
    }

    void overrideServiceState(android.telephony.ServiceState)
    {
        com.android.internal.telephony.TelephonyTester r0;
        android.telephony.ServiceState r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        android.content.Intent $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r16, $r24, $r32, $r40, $r48, $r53, $r58, $r63, $r68, $r73, r76, $r87, $r91, $r95, $r99;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17;
        java.lang.StringBuilder $r9, $r17, $r25, $r33, $r41, $r49, $r54, $r59, $r64, $r69;
        java.lang.String $r12, $r20, $r28, $r36, $r44, $r52, $r57, $r62, $r67, $r72, $r74, $r75, r79, r81;
        android.telephony.NetworkRegistrationInfo$Builder $r13, $r14, $r15, $r21, $r22, $r23, $r29, $r30, $r31, $r37, $r38, $r39, $r45, $r46, $r47;
        android.telephony.NetworkRegistrationInfo r84, r85, r88, r89, r92, r93, r96, r97, r100, r101;

        r0 := @this: com.android.internal.telephony.TelephonyTester;

        r1 := @parameter0: android.telephony.ServiceState;

        r76 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        if r76 == null goto label18;

        if r1 != null goto label01;

        goto label18;

     label01:
        $z0 = virtualinvoke r76.<android.content.Intent: boolean hasExtra(java.lang.String)>("action");

        if $z0 == 0 goto label02;

        $r74 = "reset";

        $r73 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $r75 = virtualinvoke $r73.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("action");

        $z7 = virtualinvoke $r74.<java.lang.String: boolean equals(java.lang.Object)>($r75);

        if $z7 == 0 goto label02;

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>("Service state override reset");

        return;

     label02:
        $r2 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $z1 = virtualinvoke $r2.<android.content.Intent: boolean hasExtra(java.lang.String)>("voice_reg_state");

        if $z1 == 0 goto label03;

        $r68 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $i16 = virtualinvoke $r68.<android.content.Intent: int getIntExtra(java.lang.String,int)>("voice_reg_state", 1);

        virtualinvoke r1.<android.telephony.ServiceState: void setVoiceRegState(int)>($i16);

        $r69 = new java.lang.StringBuilder;

        specialinvoke $r69.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override voice service state with ");

        $i17 = virtualinvoke r1.<android.telephony.ServiceState: int getState()>();

        virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i17);

        $r72 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r72);

     label03:
        $r3 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $z2 = virtualinvoke $r3.<android.content.Intent: boolean hasExtra(java.lang.String)>("data_reg_state");

        if $z2 == 0 goto label04;

        $r63 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $i14 = virtualinvoke $r63.<android.content.Intent: int getIntExtra(java.lang.String,int)>("data_reg_state", 1);

        virtualinvoke r1.<android.telephony.ServiceState: void setDataRegState(int)>($i14);

        $r64 = new java.lang.StringBuilder;

        specialinvoke $r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override data service state with ");

        $i15 = virtualinvoke r1.<android.telephony.ServiceState: int getDataRegistrationState()>();

        virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15);

        $r67 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r67);

     label04:
        $r4 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $z3 = virtualinvoke $r4.<android.content.Intent: boolean hasExtra(java.lang.String)>("operator");

        if $z3 == 0 goto label05;

        $r58 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        r79 = virtualinvoke $r58.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("operator");

        virtualinvoke r1.<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)>(r79, r79, "");

        $r59 = new java.lang.StringBuilder;

        specialinvoke $r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override operator with ");

        virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r79);

        $r62 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r62);

     label05:
        $r5 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $z4 = virtualinvoke $r5.<android.content.Intent: boolean hasExtra(java.lang.String)>("operator_raw");

        if $z4 == 0 goto label06;

        $r53 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        r81 = virtualinvoke $r53.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("operator_raw");

        virtualinvoke r1.<android.telephony.ServiceState: void setOperatorAlphaLongRaw(java.lang.String)>(r81);

        virtualinvoke r1.<android.telephony.ServiceState: void setOperatorAlphaShortRaw(java.lang.String)>(r81);

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override operator_raw with ");

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r81);

        $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r57);

     label06:
        $r6 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $z5 = virtualinvoke $r6.<android.content.Intent: boolean hasExtra(java.lang.String)>("nr_frequency_range");

        if $z5 == 0 goto label07;

        $r48 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $i12 = virtualinvoke $r48.<android.content.Intent: int getIntExtra(java.lang.String,int)>("nr_frequency_range", 0);

        virtualinvoke r1.<android.telephony.ServiceState: void setNrFrequencyRange(int)>($i12);

        $r49 = new java.lang.StringBuilder;

        specialinvoke $r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override NR frequency range with ");

        $i13 = virtualinvoke r1.<android.telephony.ServiceState: int getNrFrequencyRange()>();

        virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13);

        $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r52);

     label07:
        $r7 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $z6 = virtualinvoke $r7.<android.content.Intent: boolean hasExtra(java.lang.String)>("nr_state");

        if $z6 == 0 goto label09;

        r84 = virtualinvoke r1.<android.telephony.ServiceState: android.telephony.NetworkRegistrationInfo getNetworkRegistrationInfo(int,int)>(2, 1);

        r85 = r84;

        if r84 != null goto label08;

        $r45 = new android.telephony.NetworkRegistrationInfo$Builder;

        specialinvoke $r45.<android.telephony.NetworkRegistrationInfo$Builder: void <init>()>();

        $r46 = virtualinvoke $r45.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo$Builder setDomain(int)>(2);

        $r47 = virtualinvoke $r46.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo$Builder setTransportType(int)>(1);

        r85 = virtualinvoke $r47.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo build()>();

     label08:
        $r40 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $i10 = virtualinvoke $r40.<android.content.Intent: int getIntExtra(java.lang.String,int)>("nr_state", 0);

        virtualinvoke r85.<android.telephony.NetworkRegistrationInfo: void setNrState(int)>($i10);

        virtualinvoke r1.<android.telephony.ServiceState: void addNetworkRegistrationInfo(android.telephony.NetworkRegistrationInfo)>(r85);

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override NR state with ");

        $i11 = virtualinvoke r1.<android.telephony.ServiceState: int getNrState()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r44);

     label09:
        $r87 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $z8 = virtualinvoke $r87.<android.content.Intent: boolean hasExtra(java.lang.String)>("voice_rat");

        if $z8 == 0 goto label11;

        r88 = virtualinvoke r1.<android.telephony.ServiceState: android.telephony.NetworkRegistrationInfo getNetworkRegistrationInfo(int,int)>(1, 1);

        r89 = r88;

        if r88 != null goto label10;

        $r37 = new android.telephony.NetworkRegistrationInfo$Builder;

        specialinvoke $r37.<android.telephony.NetworkRegistrationInfo$Builder: void <init>()>();

        $r38 = virtualinvoke $r37.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo$Builder setDomain(int)>(1);

        $r39 = virtualinvoke $r38.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo$Builder setTransportType(int)>(1);

        r89 = virtualinvoke $r39.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo build()>();

     label10:
        $r32 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $i7 = virtualinvoke $r32.<android.content.Intent: int getIntExtra(java.lang.String,int)>("voice_rat", 0);

        $i8 = staticinvoke <android.telephony.ServiceState: int rilRadioTechnologyToNetworkType(int)>($i7);

        virtualinvoke r89.<android.telephony.NetworkRegistrationInfo: void setAccessNetworkTechnology(int)>($i8);

        virtualinvoke r1.<android.telephony.ServiceState: void addNetworkRegistrationInfo(android.telephony.NetworkRegistrationInfo)>(r89);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override voice rat with ");

        $i9 = virtualinvoke r1.<android.telephony.ServiceState: int getRilVoiceRadioTechnology()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r36);

     label11:
        $r91 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $z9 = virtualinvoke $r91.<android.content.Intent: boolean hasExtra(java.lang.String)>("data_rat");

        if $z9 == 0 goto label13;

        r92 = virtualinvoke r1.<android.telephony.ServiceState: android.telephony.NetworkRegistrationInfo getNetworkRegistrationInfo(int,int)>(2, 1);

        r93 = r92;

        if r92 != null goto label12;

        $r29 = new android.telephony.NetworkRegistrationInfo$Builder;

        specialinvoke $r29.<android.telephony.NetworkRegistrationInfo$Builder: void <init>()>();

        $r30 = virtualinvoke $r29.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo$Builder setDomain(int)>(2);

        $r31 = virtualinvoke $r30.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo$Builder setTransportType(int)>(1);

        r93 = virtualinvoke $r31.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo build()>();

     label12:
        $r24 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $i4 = virtualinvoke $r24.<android.content.Intent: int getIntExtra(java.lang.String,int)>("data_rat", 0);

        $i5 = staticinvoke <android.telephony.ServiceState: int rilRadioTechnologyToNetworkType(int)>($i4);

        virtualinvoke r93.<android.telephony.NetworkRegistrationInfo: void setAccessNetworkTechnology(int)>($i5);

        virtualinvoke r1.<android.telephony.ServiceState: void addNetworkRegistrationInfo(android.telephony.NetworkRegistrationInfo)>(r93);

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override data rat with ");

        $i6 = virtualinvoke r1.<android.telephony.ServiceState: int getRilDataRadioTechnology()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r28 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r28);

     label13:
        $r95 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $z10 = virtualinvoke $r95.<android.content.Intent: boolean hasExtra(java.lang.String)>("voice_roaming_type");

        if $z10 == 0 goto label15;

        r96 = virtualinvoke r1.<android.telephony.ServiceState: android.telephony.NetworkRegistrationInfo getNetworkRegistrationInfo(int,int)>(1, 1);

        r97 = r96;

        if r96 != null goto label14;

        $r21 = new android.telephony.NetworkRegistrationInfo$Builder;

        specialinvoke $r21.<android.telephony.NetworkRegistrationInfo$Builder: void <init>()>();

        $r22 = virtualinvoke $r21.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo$Builder setDomain(int)>(1);

        $r23 = virtualinvoke $r22.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo$Builder setTransportType(int)>(1);

        r97 = virtualinvoke $r23.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo build()>();

     label14:
        $r16 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $i2 = virtualinvoke $r16.<android.content.Intent: int getIntExtra(java.lang.String,int)>("voice_roaming_type", 1);

        virtualinvoke r97.<android.telephony.NetworkRegistrationInfo: void setRoamingType(int)>($i2);

        virtualinvoke r1.<android.telephony.ServiceState: void addNetworkRegistrationInfo(android.telephony.NetworkRegistrationInfo)>(r97);

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override voice roaming type with ");

        $i3 = virtualinvoke r1.<android.telephony.ServiceState: int getVoiceRoamingType()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r20);

     label15:
        $r99 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $z11 = virtualinvoke $r99.<android.content.Intent: boolean hasExtra(java.lang.String)>("data_roaming_type");

        if $z11 == 0 goto label17;

        r100 = virtualinvoke r1.<android.telephony.ServiceState: android.telephony.NetworkRegistrationInfo getNetworkRegistrationInfo(int,int)>(2, 1);

        r101 = r100;

        if r100 != null goto label16;

        $r13 = new android.telephony.NetworkRegistrationInfo$Builder;

        specialinvoke $r13.<android.telephony.NetworkRegistrationInfo$Builder: void <init>()>();

        $r14 = virtualinvoke $r13.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo$Builder setDomain(int)>(2);

        $r15 = virtualinvoke $r14.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo$Builder setTransportType(int)>(1);

        r101 = virtualinvoke $r15.<android.telephony.NetworkRegistrationInfo$Builder: android.telephony.NetworkRegistrationInfo build()>();

     label16:
        $r8 = r0.<com.android.internal.telephony.TelephonyTester: android.content.Intent mServiceStateTestIntent>;

        $i0 = virtualinvoke $r8.<android.content.Intent: int getIntExtra(java.lang.String,int)>("data_roaming_type", 1);

        virtualinvoke r101.<android.telephony.NetworkRegistrationInfo: void setRoamingType(int)>($i0);

        virtualinvoke r1.<android.telephony.ServiceState: void addNetworkRegistrationInfo(android.telephony.NetworkRegistrationInfo)>(r101);

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Override data roaming type with ");

        $i1 = virtualinvoke r1.<android.telephony.ServiceState: int getDataRoamingType()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.internal.telephony.TelephonyTester: void log(java.lang.String)>($r12);

     label17:
        return;

     label18:
        return;
    }

    void testChangeNumber(android.content.Intent)
    {
        com.android.internal.telephony.TelephonyTester r0;
        boolean $z0, $z1, $z2;
        com.android.internal.telephony.Phone $r1, $r7, $r10, r14;
        com.android.internal.telephony.Call $r2;
        java.util.ArrayList $r3;
        java.util.stream.Stream $r4;
        com.android.internal.telephony._$$Lambda$TelephonyTester$TCWctVGu9r3w7c_RY_FxfL0bSys $r5;
        com.android.internal.telephony.imsphone.ImsPhone $r6, $r8;
        com.android.internal.telephony.GsmCdmaPhone $r9, $r11;
        android.content.Intent r12;
        java.lang.String r13;

        r0 := @this: com.android.internal.telephony.TelephonyTester;

        r12 := @parameter0: android.content.Intent;

        $z0 = virtualinvoke r12.<android.content.Intent: boolean hasExtra(java.lang.String)>("number");

        if $z0 != 0 goto label1;

        return;

     label1:
        r13 = virtualinvoke r12.<android.content.Intent: java.lang.String getStringExtra(java.lang.String)>("number");

        $r1 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.Call getForegroundCall()>();

        $r3 = virtualinvoke $r2.<com.android.internal.telephony.Call: java.util.ArrayList getConnections()>();

        $r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.stream.Stream stream()>();

        $r5 = new com.android.internal.telephony._$$Lambda$TelephonyTester$TCWctVGu9r3w7c_RY_FxfL0bSys;

        specialinvoke $r5.<com.android.internal.telephony._$$Lambda$TelephonyTester$TCWctVGu9r3w7c_RY_FxfL0bSys: void <init>(java.lang.String)>(r13);

        interfaceinvoke $r4.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r5);

        r14 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $z1 = r14 instanceof com.android.internal.telephony.GsmCdmaPhone;

        if $z1 == 0 goto label2;

        $r9 = (com.android.internal.telephony.GsmCdmaPhone) r14;

        virtualinvoke $r9.<com.android.internal.telephony.GsmCdmaPhone: void notifyPhoneStateChanged()>();

        $r10 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $r11 = (com.android.internal.telephony.GsmCdmaPhone) $r10;

        virtualinvoke $r11.<com.android.internal.telephony.GsmCdmaPhone: void notifyPreciseCallStateChanged()>();

        goto label3;

     label2:
        $z2 = r14 instanceof com.android.internal.telephony.imsphone.ImsPhone;

        if $z2 == 0 goto label3;

        $r6 = (com.android.internal.telephony.imsphone.ImsPhone) r14;

        virtualinvoke $r6.<com.android.internal.telephony.imsphone.ImsPhone: void notifyPhoneStateChanged()>();

        $r7 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        $r8 = (com.android.internal.telephony.imsphone.ImsPhone) $r7;

        virtualinvoke $r8.<com.android.internal.telephony.imsphone.ImsPhone: void notifyPreciseCallStateChanged()>();

     label3:
        return;
    }

    void testImsECall()
    {
        com.android.internal.telephony.TelephonyTester r0;
        com.android.ims.ImsCall r1;
        android.telephony.ims.ImsCallProfile r2;
        android.os.Bundle r3, $r7, r10;
        com.android.internal.telephony.Phone $r4;
        com.android.ims.ImsCall$ImsCallSessionListenerProxy $r5;
        android.telephony.ims.ImsCallSession $r6;
        com.android.internal.telephony.imsphone.ImsPhone r8;
        com.android.internal.telephony.imsphone.ImsPhoneCall r9;

        r0 := @this: com.android.internal.telephony.TelephonyTester;

        $r4 = r0.<com.android.internal.telephony.TelephonyTester: com.android.internal.telephony.Phone mPhone>;

        r8 = (com.android.internal.telephony.imsphone.ImsPhone) $r4;

        if r8 != null goto label1;

        return;

     label1:
        r9 = virtualinvoke r8.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        if r9 != null goto label2;

        return;

     label2:
        r1 = virtualinvoke r9.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.ims.ImsCall getImsCall()>();

        if r1 != null goto label3;

        return;

     label3:
        r2 = virtualinvoke r1.<com.android.ims.ImsCall: android.telephony.ims.ImsCallProfile getCallProfile()>();

        r3 = virtualinvoke r2.<android.telephony.ims.ImsCallProfile: android.os.Bundle getCallExtras()>();

        r10 = r3;

        if r3 != null goto label4;

        $r7 = new android.os.Bundle;

        specialinvoke $r7.<android.os.Bundle: void <init>()>();

        r10 = $r7;

     label4:
        virtualinvoke r10.<android.os.Bundle: void putBoolean(java.lang.String,boolean)>("e_call", 1);

        r2.<android.telephony.ims.ImsCallProfile: android.os.Bundle mCallExtras> = r10;

        $r5 = virtualinvoke r1.<com.android.ims.ImsCall: com.android.ims.ImsCall$ImsCallSessionListenerProxy getImsCallSessionListenerProxy()>();

        $r6 = virtualinvoke r1.<com.android.ims.ImsCall: android.telephony.ims.ImsCallSession getSession()>();

        virtualinvoke $r5.<com.android.ims.ImsCall$ImsCallSessionListenerProxy: void callSessionUpdated(android.telephony.ims.ImsCallSession,android.telephony.ims.ImsCallProfile)>($r6, r2);

        return;
    }
}
