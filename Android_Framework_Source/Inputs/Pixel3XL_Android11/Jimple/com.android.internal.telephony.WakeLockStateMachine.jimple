public abstract class com.android.internal.telephony.WakeLockStateMachine extends com.android.internal.telephony.StateMachine
{
    protected static final boolean DBG;
    protected static final int EVENT_BROADCAST_COMPLETE;
    static final int EVENT_BROADCAST_NOT_REQUIRED;
    public static final int EVENT_NEW_SMS_MESSAGE;
    static final int EVENT_RELEASE_WAKE_LOCK;
    private static final int WAKE_LOCK_TIMEOUT;
    protected android.content.Context mContext;
    private final com.android.internal.telephony.WakeLockStateMachine$DefaultState mDefaultState;
    private final com.android.internal.telephony.WakeLockStateMachine$IdleState mIdleState;
    protected com.android.internal.telephony.Phone mPhone;
    protected final android.content.BroadcastReceiver mReceiver;
    protected java.util.concurrent.atomic.AtomicInteger mReceiverCount;
    private final com.android.internal.telephony.WakeLockStateMachine$WaitingState mWaitingState;
    private final android.os.PowerManager$WakeLock mWakeLock;

    static void <clinit>()
    {
        boolean $z0;

        <com.android.internal.telephony.WakeLockStateMachine: int WAKE_LOCK_TIMEOUT> = 3000;

        <com.android.internal.telephony.WakeLockStateMachine: int EVENT_RELEASE_WAKE_LOCK> = 3;

        <com.android.internal.telephony.WakeLockStateMachine: int EVENT_NEW_SMS_MESSAGE> = 1;

        <com.android.internal.telephony.WakeLockStateMachine: int EVENT_BROADCAST_NOT_REQUIRED> = 4;

        <com.android.internal.telephony.WakeLockStateMachine: int EVENT_BROADCAST_COMPLETE> = 2;

        $z0 = <com.android.internal.telephony.util.TelephonyUtils: boolean IS_DEBUGGABLE>;

        <com.android.internal.telephony.WakeLockStateMachine: boolean DBG> = $z0;

        return;
    }

    protected void <init>(java.lang.String, android.content.Context, com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.WakeLockStateMachine r0;
        android.content.Context r1;
        com.android.internal.telephony.Phone r2;
        java.util.concurrent.atomic.AtomicInteger $r3;
        com.android.internal.telephony.WakeLockStateMachine$DefaultState $r4, $r10, $r11, $r13;
        com.android.internal.telephony.WakeLockStateMachine$IdleState $r5, $r12, $r15;
        com.android.internal.telephony.WakeLockStateMachine$WaitingState $r6, $r14;
        com.android.internal.telephony.WakeLockStateMachine$1 $r7;
        java.lang.Object $r8;
        android.os.PowerManager $r9;
        java.lang.String r16;
        android.os.PowerManager$WakeLock r17;

        r0 := @this: com.android.internal.telephony.WakeLockStateMachine;

        r16 := @parameter0: java.lang.String;

        r1 := @parameter1: android.content.Context;

        r2 := @parameter2: com.android.internal.telephony.Phone;

        specialinvoke r0.<com.android.internal.telephony.StateMachine: void <init>(java.lang.String)>(r16);

        $r3 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0);

        r0.<com.android.internal.telephony.WakeLockStateMachine: java.util.concurrent.atomic.AtomicInteger mReceiverCount> = $r3;

        $r4 = new com.android.internal.telephony.WakeLockStateMachine$DefaultState;

        specialinvoke $r4.<com.android.internal.telephony.WakeLockStateMachine$DefaultState: void <init>(com.android.internal.telephony.WakeLockStateMachine)>(r0);

        r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$DefaultState mDefaultState> = $r4;

        $r5 = new com.android.internal.telephony.WakeLockStateMachine$IdleState;

        specialinvoke $r5.<com.android.internal.telephony.WakeLockStateMachine$IdleState: void <init>(com.android.internal.telephony.WakeLockStateMachine)>(r0);

        r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$IdleState mIdleState> = $r5;

        $r6 = new com.android.internal.telephony.WakeLockStateMachine$WaitingState;

        specialinvoke $r6.<com.android.internal.telephony.WakeLockStateMachine$WaitingState: void <init>(com.android.internal.telephony.WakeLockStateMachine)>(r0);

        r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$WaitingState mWaitingState> = $r6;

        $r7 = new com.android.internal.telephony.WakeLockStateMachine$1;

        specialinvoke $r7.<com.android.internal.telephony.WakeLockStateMachine$1: void <init>(com.android.internal.telephony.WakeLockStateMachine)>(r0);

        r0.<com.android.internal.telephony.WakeLockStateMachine: android.content.BroadcastReceiver mReceiver> = $r7;

        r0.<com.android.internal.telephony.WakeLockStateMachine: android.content.Context mContext> = r1;

        r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.Phone mPhone> = r2;

        $r8 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r9 = (android.os.PowerManager) $r8;

        r17 = virtualinvoke $r9.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, r16);

        r0.<com.android.internal.telephony.WakeLockStateMachine: android.os.PowerManager$WakeLock mWakeLock> = r17;

        virtualinvoke r17.<android.os.PowerManager$WakeLock: void acquire()>();

        $r10 = r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: void addState(com.android.internal.telephony.State)>($r10);

        $r12 = r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$IdleState mIdleState>;

        $r11 = r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: void addState(com.android.internal.telephony.State,com.android.internal.telephony.State)>($r12, $r11);

        $r14 = r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$WaitingState mWaitingState>;

        $r13 = r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$DefaultState mDefaultState>;

        virtualinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: void addState(com.android.internal.telephony.State,com.android.internal.telephony.State)>($r14, $r13);

        $r15 = r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$IdleState mIdleState>;

        virtualinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: void setInitialState(com.android.internal.telephony.State)>($r15);

        return;
    }

    static android.os.PowerManager$WakeLock access$000(com.android.internal.telephony.WakeLockStateMachine)
    {
        com.android.internal.telephony.WakeLockStateMachine r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: com.android.internal.telephony.WakeLockStateMachine;

        $r1 = r0.<com.android.internal.telephony.WakeLockStateMachine: android.os.PowerManager$WakeLock mWakeLock>;

        return $r1;
    }

    static com.android.internal.telephony.WakeLockStateMachine$WaitingState access$100(com.android.internal.telephony.WakeLockStateMachine)
    {
        com.android.internal.telephony.WakeLockStateMachine r0;
        com.android.internal.telephony.WakeLockStateMachine$WaitingState $r1;

        r0 := @parameter0: com.android.internal.telephony.WakeLockStateMachine;

        $r1 = r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$WaitingState mWaitingState>;

        return $r1;
    }

    static void access$200(com.android.internal.telephony.WakeLockStateMachine)
    {
        com.android.internal.telephony.WakeLockStateMachine r0;

        r0 := @parameter0: com.android.internal.telephony.WakeLockStateMachine;

        specialinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: void releaseWakeLock()>();

        return;
    }

    static com.android.internal.telephony.WakeLockStateMachine$IdleState access$300(com.android.internal.telephony.WakeLockStateMachine)
    {
        com.android.internal.telephony.WakeLockStateMachine r0;
        com.android.internal.telephony.WakeLockStateMachine$IdleState $r1;

        r0 := @parameter0: com.android.internal.telephony.WakeLockStateMachine;

        $r1 = r0.<com.android.internal.telephony.WakeLockStateMachine: com.android.internal.telephony.WakeLockStateMachine$IdleState mIdleState>;

        return $r1;
    }

    private void releaseWakeLock()
    {
        com.android.internal.telephony.WakeLockStateMachine r0;
        android.os.PowerManager$WakeLock $r1, $r2, $r3;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.WakeLockStateMachine;

        $r1 = r0.<com.android.internal.telephony.WakeLockStateMachine: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.internal.telephony.WakeLockStateMachine: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        $r2 = r0.<com.android.internal.telephony.WakeLockStateMachine: android.os.PowerManager$WakeLock mWakeLock>;

        $z1 = virtualinvoke $r2.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z1 == 0 goto label2;

        virtualinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: void loge(java.lang.String)>("Wait lock is held after release.");

     label2:
        return;
    }

    public final void dispatchSmsMessage(java.lang.Object)
    {
        com.android.internal.telephony.WakeLockStateMachine r0;
        java.lang.Object r1;

        r0 := @this: com.android.internal.telephony.WakeLockStateMachine;

        r1 := @parameter0: java.lang.Object;

        virtualinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: void sendMessage(int,java.lang.Object)>(1, r1);

        return;
    }

    public final void dispose()
    {
        com.android.internal.telephony.WakeLockStateMachine r0;

        r0 := @this: com.android.internal.telephony.WakeLockStateMachine;

        virtualinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: void quit()>();

        return;
    }

    protected abstract boolean handleSmsMessage(android.os.Message);

    protected void log(java.lang.String)
    {
        com.android.internal.telephony.WakeLockStateMachine r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.WakeLockStateMachine;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: java.lang.String getName()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    protected void loge(java.lang.String)
    {
        com.android.internal.telephony.WakeLockStateMachine r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.WakeLockStateMachine;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: java.lang.String getName()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    protected void loge(java.lang.String, java.lang.Throwable)
    {
        com.android.internal.telephony.WakeLockStateMachine r0;
        java.lang.String r1, $r3;
        java.lang.Throwable r2;

        r0 := @this: com.android.internal.telephony.WakeLockStateMachine;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Throwable;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.WakeLockStateMachine: java.lang.String getName()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r3, r1, r2);

        return;
    }

    protected void onQuitting()
    {
        com.android.internal.telephony.WakeLockStateMachine r0;
        android.os.PowerManager$WakeLock $r1, $r2;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.WakeLockStateMachine;

     label1:
        $r1 = r0.<com.android.internal.telephony.WakeLockStateMachine: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label2;

        $r2 = r0.<com.android.internal.telephony.WakeLockStateMachine: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

        goto label1;

     label2:
        return;
    }
}
