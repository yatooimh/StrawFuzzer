public class com.android.internal.telephony.dataconnection.TransportManager extends android.os.Handler
{
    private static final java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP;
    private static final int EVENT_QUALIFIED_NETWORKS_CHANGED;
    private static final int EVENT_UPDATE_AVAILABLE_NETWORKS;
    public static final java.lang.String IWLAN_OPERATION_MODE_AP_ASSISTED;
    public static final java.lang.String IWLAN_OPERATION_MODE_DEFAULT;
    public static final java.lang.String IWLAN_OPERATION_MODE_LEGACY;
    public static final java.lang.String SYSTEM_PROPERTIES_IWLAN_OPERATION_MODE;
    private static final java.lang.String TAG;
    private com.android.internal.telephony.dataconnection.AccessNetworksManager mAccessNetworksManager;
    private final java.util.LinkedList mAvailableNetworksList;
    private final int[] mAvailableTransports;
    private final android.util.SparseArray mCurrentAvailableNetworks;
    private final java.util.Map mCurrentTransports;
    private final com.android.internal.telephony.RegistrantList mHandoverNeededEventRegistrants;
    private final com.android.internal.telephony.LocalLog mLocalLog;
    private final android.util.SparseIntArray mPendingHandoverApns;
    private final com.android.internal.telephony.Phone mPhone;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        java.util.HashMap $r2;
        java.lang.Integer $r5, $r7, $r9, $r11, r14, r16;
        java.util.Map r15, r17, r18, r19, r20;

        <com.android.internal.telephony.dataconnection.TransportManager: java.lang.String SYSTEM_PROPERTIES_IWLAN_OPERATION_MODE> = "ro.telephony.iwlan_operation_mode";

        <com.android.internal.telephony.dataconnection.TransportManager: java.lang.String IWLAN_OPERATION_MODE_LEGACY> = "legacy";

        <com.android.internal.telephony.dataconnection.TransportManager: java.lang.String IWLAN_OPERATION_MODE_DEFAULT> = "default";

        <com.android.internal.telephony.dataconnection.TransportManager: java.lang.String IWLAN_OPERATION_MODE_AP_ASSISTED> = "AP-assisted";

        <com.android.internal.telephony.dataconnection.TransportManager: int EVENT_UPDATE_AVAILABLE_NETWORKS> = 2;

        <com.android.internal.telephony.dataconnection.TransportManager: int EVENT_QUALIFIED_NETWORKS_CHANGED> = 1;

        $r0 = class "Lcom/android/internal/telephony/dataconnection/TransportManager;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.internal.telephony.dataconnection.TransportManager: java.lang.String TAG> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP> = $r2;

        r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r14);

        r15 = <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP>;

        r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        interfaceinvoke r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r14);

        r17 = <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3);

        interfaceinvoke r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r14);

        r18 = <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4);

        interfaceinvoke r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r14);

        r19 = <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP>;

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6);

        interfaceinvoke r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r14);

        r20 = <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP>;

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5);

        interfaceinvoke r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, r16);

        return;
    }

    public void <init>(com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        com.android.internal.telephony.LocalLog $r1;
        android.util.SparseArray $r2;
        java.util.concurrent.ConcurrentHashMap $r3;
        android.util.SparseIntArray $r4;
        com.android.internal.telephony.RegistrantList $r5;
        java.util.LinkedList $r6;
        boolean $z0;
        com.android.internal.telephony.dataconnection.AccessNetworksManager $r7;
        int[] $r8, $r9;
        com.android.internal.telephony.Phone r10;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        r10 := @parameter0: com.android.internal.telephony.Phone;

        specialinvoke r0.<android.os.Handler: void <init>()>();

        $r1 = new com.android.internal.telephony.LocalLog;

        specialinvoke $r1.<com.android.internal.telephony.LocalLog: void <init>(int)>(100);

        r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.LocalLog mLocalLog> = $r1;

        r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.Phone mPhone> = r10;

        $r2 = new android.util.SparseArray;

        specialinvoke $r2.<android.util.SparseArray: void <init>()>();

        r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseArray mCurrentAvailableNetworks> = $r2;

        $r3 = new java.util.concurrent.ConcurrentHashMap;

        specialinvoke $r3.<java.util.concurrent.ConcurrentHashMap: void <init>()>();

        r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.Map mCurrentTransports> = $r3;

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseIntArray mPendingHandoverApns> = $r4;

        $r5 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r5.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.RegistrantList mHandoverNeededEventRegistrants> = $r5;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.LinkedList mAvailableNetworksList> = $r6;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: boolean isInLegacyMode()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void log(java.lang.String)>("operates in legacy mode.");

        $r9 = newarray (int)[1];

        $r9[0] = 1;

        r0.<com.android.internal.telephony.dataconnection.TransportManager: int[] mAvailableTransports> = $r9;

        goto label2;

     label1:
        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void log(java.lang.String)>("operates in AP-assisted mode.");

        $r7 = new com.android.internal.telephony.dataconnection.AccessNetworksManager;

        specialinvoke $r7.<com.android.internal.telephony.dataconnection.AccessNetworksManager: void <init>(com.android.internal.telephony.Phone)>(r10);

        r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.dataconnection.AccessNetworksManager mAccessNetworksManager> = $r7;

        virtualinvoke $r7.<com.android.internal.telephony.dataconnection.AccessNetworksManager: void registerForQualifiedNetworksChanged(android.os.Handler,int)>(r0, 1);

        $r8 = newarray (int)[2];

        $r8[0] = 1;

        $r8[1] = 2;

        r0.<com.android.internal.telephony.dataconnection.TransportManager: int[] mAvailableTransports> = $r8;

     label2:
        return;
    }

    private static boolean areNetworksValid(com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks)
    {
        int i0, i1, $i2, i3;
        int[] $r0, $r1, r5;
        java.util.Map $r2;
        java.lang.Integer $r3;
        boolean $z0;
        com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks r4;

        r4 := @parameter0: com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks;

        $r0 = r4.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int[] qualifiedNetworks>;

        if $r0 == null goto label5;

        $r1 = r4.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int[] qualifiedNetworks>;

        $i2 = lengthof $r1;

        if $i2 != 0 goto label1;

        goto label5;

     label1:
        r5 = r4.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int[] qualifiedNetworks>;

        i0 = lengthof r5;

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        i1 = r5[i3];

        $r2 = <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 != 0 goto label3;

        return 0;

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return 1;

     label5:
        return 0;
    }

    private boolean isHandoverNeeded(com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        int[] r2, r3;
        android.util.SparseArray $r4;
        java.lang.Object $r5, $r9, $r13, $r18;
        boolean $z0, $z1, $z2, $z3, $z4;
        android.util.SparseIntArray $r6;
        java.util.Map $r7, $r11, $r16;
        java.lang.Integer $r8, $r10, $r12, $r14, $r15, $r17, $r19;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        r1 := @parameter0: com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks;

        i0 = r1.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int apnType>;

        r2 = r1.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int[] qualifiedNetworks>;

        $r4 = r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseArray mCurrentAvailableNetworks>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (int[]) $r5;

        $z0 = staticinvoke <com.android.internal.telephony.util.ArrayUtils: boolean isEmpty(int[])>(r3);

        if $z0 == 0 goto label1;

        $r16 = <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP>;

        $i8 = r2[0];

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8);

        $r18 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        $r19 = (java.lang.Integer) $r18;

        $i9 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        if $i9 != 2 goto label1;

        return 1;

     label1:
        $z1 = staticinvoke <com.android.internal.telephony.util.ArrayUtils: boolean isEmpty(int[])>(r2);

        if $z1 != 0 goto label4;

        $z2 = staticinvoke <com.android.internal.telephony.util.ArrayUtils: boolean isEmpty(int[])>(r3);

        if $z2 == 0 goto label2;

        goto label4;

     label2:
        $r6 = r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseIntArray mPendingHandoverApns>;

        $i1 = r1.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int apnType>;

        $i2 = virtualinvoke $r6.<android.util.SparseIntArray: int get(int)>($i1);

        $r7 = <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP>;

        $i3 = r2[0];

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8);

        $r10 = (java.lang.Integer) $r9;

        $i4 = virtualinvoke $r10.<java.lang.Integer: int intValue()>();

        if $i2 != $i4 goto label3;

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void log(java.lang.String)>("Handover not needed. There is already an ongoing handover.");

        return 0;

     label3:
        $r11 = <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP>;

        $i5 = r2[0];

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r13 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        $r14 = (java.lang.Integer) $r13;

        $i6 = r1.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int apnType>;

        $i7 = virtualinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: int getCurrentTransport(int)>($i6);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7);

        $z3 = virtualinvoke $r14.<java.lang.Integer: boolean equals(java.lang.Object)>($r15);

        $z4 = $z3 ^ 1;

        return $z4;

     label4:
        return 0;
    }

    private boolean isHandoverPending()
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        android.util.SparseIntArray $r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        $r1 = r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseIntArray mPendingHandoverApns>;

        $i0 = virtualinvoke $r1.<android.util.SparseIntArray: int size()>();

        if $i0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    static java.lang.String lambda$dump$1(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <android.telephony.AccessNetworkConstants: java.lang.String transportTypeToString(int)>(i0);

        return $r0;
    }

    private void log(java.lang.String)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.android.internal.telephony.dataconnection.TransportManager: java.lang.String TAG>;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    private void loge(java.lang.String)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        java.lang.String r1, $r2;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.android.internal.telephony.dataconnection.TransportManager: java.lang.String TAG>;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>($r2, r1);

        return;
    }

    private void logl(java.lang.String)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        java.lang.String r1;
        com.android.internal.telephony.LocalLog $r2;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void log(java.lang.String)>(r1);

        $r2 = r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.LocalLog mLocalLog>;

        virtualinvoke $r2.<com.android.internal.telephony.LocalLog: void log(java.lang.String)>(r1);

        return;
    }

    private void setCurrentTransport(int, int)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        int i0, i1;
        java.util.Map $r1;
        java.lang.Integer $r2, $r3;
        java.lang.String $r6, $r9, $r11;
        java.lang.Throwable $r12;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.Map mCurrentTransports>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, $r3);

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setCurrentTransport: apnType=");

        $r6 = staticinvoke <android.telephony.data.ApnSetting: java.lang.String getApnTypeString(int)>(i0);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", transport=");

        $r9 = staticinvoke <android.telephony.AccessNetworkConstants: java.lang.String transportTypeToString(int)>(i1);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void logl(java.lang.String)>($r11);

     label2:
        exitmonitor r0;

        return;

     label3:
        $r12 := @caughtexception;

        exitmonitor r0;

        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void updateAvailableNetworks()
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z3, $z4;
        java.util.LinkedList $r1, $r2, $r8;
        java.lang.Object $r3, $r9, $r19;
        java.lang.StringBuilder $r4, $r10, $r21;
        java.lang.String $r7, $r13, $r23, $r26, $r28;
        int[] $r14, $r16;
        android.util.SparseArray $r15;
        java.util.Map $r17;
        java.lang.Integer $r18, $r20;
        android.util.SparseIntArray $r29;
        com.android.internal.telephony.dataconnection.TransportManager$HandoverParams $r30;
        com.android.internal.telephony.dataconnection._$$Lambda$TransportManager$JsGSYhb4iZtZF2Iq0kLuuZjTa3Y $r31;
        com.android.internal.telephony.RegistrantList $r32;
        java.util.List r33;
        java.util.Iterator r35;
        com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks r36;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        $z0 = specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: boolean isHandoverPending()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void log(java.lang.String)>("There\'s ongoing handover. Will update networks once handover completed.");

        return;

     label1:
        $r1 = r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.LinkedList mAvailableNetworksList>;

        $i1 = virtualinvoke $r1.<java.util.LinkedList: int size()>();

        if $i1 != 0 goto label2;

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void log(java.lang.String)>("Nothing in the available network list queue.");

        return;

     label2:
        $r2 = r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.LinkedList mAvailableNetworksList>;

        $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object remove()>();

        r33 = (java.util.List) $r3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateAvailableNetworks: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r33);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void logl(java.lang.String)>($r7);

        r35 = interfaceinvoke r33.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z1 = interfaceinvoke r35.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r9 = interfaceinvoke r35.<java.util.Iterator: java.lang.Object next()>();

        r36 = (com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks) $r9;

        $z3 = staticinvoke <com.android.internal.telephony.dataconnection.TransportManager: boolean areNetworksValid(com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks)>(r36);

        if $z3 == 0 goto label5;

        $z4 = specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: boolean isHandoverNeeded(com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks)>(r36);

        if $z4 == 0 goto label4;

        $r17 = <com.android.internal.telephony.dataconnection.TransportManager: java.util.Map ACCESS_NETWORK_TRANSPORT_TYPE_MAP>;

        $r16 = r36.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int[] qualifiedNetworks>;

        $i4 = $r16[0];

        $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r19 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>($r18);

        $r20 = (java.lang.Integer) $r19;

        i0 = virtualinvoke $r20.<java.lang.Integer: int intValue()>();

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Handover needed for APN type: ");

        $i5 = r36.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int apnType>;

        $r23 = staticinvoke <android.telephony.data.ApnSetting: java.lang.String getApnTypeString(int)>($i5);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", target transport: ");

        $r26 = staticinvoke <android.telephony.AccessNetworkConstants: java.lang.String transportTypeToString(int)>(i0);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        $r28 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void logl(java.lang.String)>($r28);

        $r29 = r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseIntArray mPendingHandoverApns>;

        $i6 = r36.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int apnType>;

        virtualinvoke $r29.<android.util.SparseIntArray: void put(int,int)>($i6, i0);

        $r32 = r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.RegistrantList mHandoverNeededEventRegistrants>;

        $r30 = new com.android.internal.telephony.dataconnection.TransportManager$HandoverParams;

        $i7 = r36.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int apnType>;

        $r31 = new com.android.internal.telephony.dataconnection._$$Lambda$TransportManager$JsGSYhb4iZtZF2Iq0kLuuZjTa3Y;

        specialinvoke $r31.<com.android.internal.telephony.dataconnection._$$Lambda$TransportManager$JsGSYhb4iZtZF2Iq0kLuuZjTa3Y: void <init>(com.android.internal.telephony.dataconnection.TransportManager,com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks,int)>(r0, r36, i0);

        specialinvoke $r30.<com.android.internal.telephony.dataconnection.TransportManager$HandoverParams: void <init>(int,int,com.android.internal.telephony.dataconnection.TransportManager$HandoverParams$HandoverCallback)>($i7, i0, $r31);

        virtualinvoke $r32.<com.android.internal.telephony.RegistrantList: void notifyResult(java.lang.Object)>($r30);

     label4:
        $r15 = r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseArray mCurrentAvailableNetworks>;

        $i3 = r36.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int apnType>;

        $r14 = r36.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int[] qualifiedNetworks>;

        virtualinvoke $r15.<android.util.SparseArray: void put(int,java.lang.Object)>($i3, $r14);

        goto label6;

     label5:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid networks received: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void loge(java.lang.String)>($r13);

     label6:
        goto label3;

     label7:
        $r8 = r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.LinkedList mAvailableNetworksList>;

        $i2 = virtualinvoke $r8.<java.util.LinkedList: int size()>();

        if $i2 <= 0 goto label8;

        virtualinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: boolean sendEmptyMessage(int)>(2);

     label8:
        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        java.io.FileDescriptor r1;
        java.lang.String[] r2;
        int[] $r7;
        java.util.stream.IntStream $r8;
        com.android.internal.telephony.dataconnection.'-$$Lambda$TransportManager$vVwfnOC5CydwmAdimpil6w6F3zk' $r9;
        java.util.stream.Stream $r10;
        java.util.stream.Collector $r11;
        java.lang.Object $r12;
        java.lang.String $r13, $r16, $r21, $r26, $r31, $r36, $r40, $r43, $r45;
        android.util.SparseArray $r19;
        java.util.LinkedList $r24;
        android.util.SparseIntArray $r29;
        java.util.Map $r34;
        boolean $z0;
        com.android.internal.telephony.LocalLog $r47;
        java.io.PrintWriter r50;
        com.android.internal.telephony.dataconnection.AccessNetworksManager r59;
        com.android.internal.telephony.IndentingPrintWriter r60;
        java.lang.StringBuilder r61, r62, r63, r64, r65, r66, r67;
        java.util.function.IntFunction r68;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        r1 := @parameter0: java.io.FileDescriptor;

        r50 := @parameter1: java.io.PrintWriter;

        r2 := @parameter2: java.lang.String[];

        r60 = new com.android.internal.telephony.IndentingPrintWriter;

        specialinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r50, "  ");

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>("TransportManager:");

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter increaseIndent()>();

        r61 = new java.lang.StringBuilder;

        specialinvoke r61.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAvailableTransports=[");

        $r7 = r0.<com.android.internal.telephony.dataconnection.TransportManager: int[] mAvailableTransports>;

        $r8 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>($r7);

        $r9 = <com.android.internal.telephony.dataconnection._$$Lambda$TransportManager$vVwfnOC5CydwmAdimpil6w6F3zk: com.android.internal.telephony.dataconnection.'-$$Lambda$TransportManager$vVwfnOC5CydwmAdimpil6w6F3zk' INSTANCE>;

        r68 = (java.util.function.IntFunction) $r9;

        $r10 = interfaceinvoke $r8.<java.util.stream.IntStream: java.util.stream.Stream mapToObj(java.util.function.IntFunction)>(r68);

        $r11 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector joining(java.lang.CharSequence)>(",");

        $r12 = interfaceinvoke $r10.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r11);

        $r13 = (java.lang.String) $r12;

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]");

        $r16 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r16);

        r62 = new java.lang.StringBuilder;

        specialinvoke r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCurrentAvailableNetworks=");

        $r19 = r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseArray mCurrentAvailableNetworks>;

        virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r21);

        r63 = new java.lang.StringBuilder;

        specialinvoke r63.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mAvailableNetworksList=");

        $r24 = r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.LinkedList mAvailableNetworksList>;

        virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r26);

        r64 = new java.lang.StringBuilder;

        specialinvoke r64.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mPendingHandoverApns=");

        $r29 = r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseIntArray mPendingHandoverApns>;

        virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r31);

        r65 = new java.lang.StringBuilder;

        specialinvoke r65.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mCurrentTransports=");

        $r34 = r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.Map mCurrentTransports>;

        virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke r65.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r36);

        r66 = new java.lang.StringBuilder;

        specialinvoke r66.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isInLegacy=");

        $z0 = virtualinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: boolean isInLegacyMode()>();

        virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r40 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r40);

        r67 = new java.lang.StringBuilder;

        specialinvoke r67.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IWLAN operation mode=");

        $r43 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.telephony.iwlan_operation_mode");

        virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43);

        $r45 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r45);

        r59 = r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.dataconnection.AccessNetworksManager mAccessNetworksManager>;

        if r59 == null goto label1;

        virtualinvoke r59.<com.android.internal.telephony.dataconnection.AccessNetworksManager: void dump(java.io.FileDescriptor,com.android.internal.telephony.IndentingPrintWriter,java.lang.String[])>(r1, r60, r2);

     label1:
        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>("Local logs=");

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter increaseIndent()>();

        $r47 = r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.LocalLog mLocalLog>;

        virtualinvoke $r47.<com.android.internal.telephony.LocalLog: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r1, r60, r2);

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r60.<com.android.internal.telephony.IndentingPrintWriter: void flush()>();

        return;
    }

    public int[] getAvailableTransports()
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        java.lang.Throwable $r1;
        int[] r2;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        entermonitor r0;

     label1:
        r2 = r0.<com.android.internal.telephony.dataconnection.TransportManager: int[] mAvailableTransports>;

     label2:
        exitmonitor r0;

        return r2;

     label3:
        $r1 := @caughtexception;

        exitmonitor r0;

        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public int getCurrentTransport(int)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        boolean z0;
        java.util.Map $r1, $r4;
        java.lang.Integer $r2, $r5, $r7;
        java.lang.Object $r3, $r6;
        int i1, i2;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        i1 := @parameter0: int;

        z0 = virtualinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: boolean isInLegacyMode()>();

        if z0 == 0 goto label1;

        return 1;

     label1:
        $r1 = r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.Map mCurrentTransports>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        if $r3 != null goto label2;

        i2 = 1;

        goto label3;

     label2:
        $r4 = r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.Map mCurrentTransports>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r7 = (java.lang.Integer) $r6;

        i2 = virtualinvoke $r7.<java.lang.Integer: int intValue()>();

     label3:
        return i2;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        int i0, $i1;
        java.lang.Object $r2, $r4;
        android.os.AsyncResult $r3;
        java.util.LinkedList $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9;
        android.os.Message r10;
        java.util.List r11;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        r10 := @parameter0: android.os.Message;

        i0 = r10.<android.os.Message: int what>;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected event ");

        $i1 = r10.<android.os.Message: int what>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void loge(java.lang.String)>($r9);

        goto label3;

     label1:
        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void updateAvailableNetworks()>();

        goto label3;

     label2:
        $r2 = r10.<android.os.Message: java.lang.Object obj>;

        $r3 = (android.os.AsyncResult) $r2;

        $r4 = $r3.<android.os.AsyncResult: java.lang.Object result>;

        r11 = (java.util.List) $r4;

        $r5 = r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.LinkedList mAvailableNetworksList>;

        virtualinvoke $r5.<java.util.LinkedList: boolean add(java.lang.Object)>(r11);

        virtualinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: boolean sendEmptyMessage(int)>(2);

     label3:
        return;
    }

    public boolean isAnyApnPreferredOnIwlan()
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        int[] r1;
        android.util.SparseArray $r2, $r3;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r4;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        i3 = 0;

     label1:
        $r2 = r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseArray mCurrentAvailableNetworks>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        if i3 >= $i0 goto label3;

        $r3 = r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseArray mCurrentAvailableNetworks>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r1 = (int[]) $r4;

        $i1 = lengthof r1;

        if $i1 <= 0 goto label2;

        $i2 = r1[0];

        if $i2 != 5 goto label2;

        return 1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return 0;
    }

    public boolean isInLegacyMode()
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        java.lang.String $r1;
        boolean $z0, $z1, z2;
        com.android.internal.telephony.Phone $r2;
        com.android.internal.telephony.HalVersion $r3, $r4;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        $r1 = staticinvoke <android.os.SystemProperties: java.lang.String get(java.lang.String)>("ro.telephony.iwlan_operation_mode");

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>("legacy");

        if $z0 != 0 goto label2;

        $r2 = r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.Phone mPhone>;

        $r3 = virtualinvoke $r2.<com.android.internal.telephony.Phone: com.android.internal.telephony.HalVersion getHalVersion()>();

        $r4 = <com.android.internal.telephony.RIL: com.android.internal.telephony.HalVersion RADIO_HAL_VERSION_1_4>;

        $z1 = virtualinvoke $r3.<com.android.internal.telephony.HalVersion: boolean less(com.android.internal.telephony.HalVersion)>($r4);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    public void lambda$updateAvailableNetworks$0$TransportManager(com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks, int, boolean, boolean)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks r1;
        int i0, $i1, $i2, $i3, $i4;
        boolean z0, z1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r8, $r12;
        android.util.SparseIntArray $r13;
        java.util.LinkedList $r14;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        r1 := @parameter0: com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        if z0 == 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void logl(java.lang.String)>("Handover succeeded.");

        goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("APN type ");

        $i1 = r1.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int apnType>;

        $r5 = staticinvoke <android.telephony.data.ApnSetting: java.lang.String getApnTypeString(int)>($i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" handover to ");

        $r8 = staticinvoke <android.telephony.AccessNetworkConstants: java.lang.String transportTypeToString(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed., fallback=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r12 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void logl(java.lang.String)>($r12);

     label2:
        if z0 != 0 goto label3;

        if z1 != 0 goto label4;

     label3:
        $i2 = r1.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int apnType>;

        specialinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: void setCurrentTransport(int,int)>($i2, i0);

     label4:
        $r13 = r0.<com.android.internal.telephony.dataconnection.TransportManager: android.util.SparseIntArray mPendingHandoverApns>;

        $i3 = r1.<com.android.internal.telephony.dataconnection.AccessNetworksManager$QualifiedNetworks: int apnType>;

        virtualinvoke $r13.<android.util.SparseIntArray: void delete(int)>($i3);

        $r14 = r0.<com.android.internal.telephony.dataconnection.TransportManager: java.util.LinkedList mAvailableNetworksList>;

        $i4 = virtualinvoke $r14.<java.util.LinkedList: int size()>();

        if $i4 <= 0 goto label5;

        virtualinvoke r0.<com.android.internal.telephony.dataconnection.TransportManager: boolean sendEmptyMessage(int)>(2);

     label5:
        return;
    }

    public void registerForHandoverNeededEvent(android.os.Handler, int)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        android.os.Handler r1;
        int i0;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        if r1 == null goto label1;

        $r2 = r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.RegistrantList mHandoverNeededEventRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, null);

     label1:
        return;
    }

    public void unregisterForHandoverNeededEvent(android.os.Handler)
    {
        com.android.internal.telephony.dataconnection.TransportManager r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.dataconnection.TransportManager;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.dataconnection.TransportManager: com.android.internal.telephony.RegistrantList mHandoverNeededEventRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }
}
