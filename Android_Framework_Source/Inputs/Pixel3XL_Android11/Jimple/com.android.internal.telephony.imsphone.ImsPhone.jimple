public class com.android.internal.telephony.imsphone.ImsPhone extends com.android.internal.telephony.imsphone.ImsPhoneBase
{
    static final int CANCEL_ECM_TIMER;
    private static final boolean DBG;
    private static final long DEFAULT_ECM_EXIT_TIMER_VALUE;
    private static final int EVENT_DEFAULT_PHONE_DATA_STATE_CHANGED;
    private static final int EVENT_GET_CALL_BARRING_DONE;
    private static final int EVENT_GET_CALL_WAITING_DONE;
    private static final int EVENT_GET_CLIR_DONE;
    private static final int EVENT_INITIATE_VOLTE_SILENT_REDIAL;
    public static final int EVENT_SERVICE_STATE_CHANGED;
    private static final int EVENT_SET_CALL_BARRING_DONE;
    private static final int EVENT_SET_CALL_WAITING_DONE;
    private static final int EVENT_SET_CLIR_DONE;
    private static final int EVENT_VOICE_CALL_ENDED;
    private static final java.lang.String LOG_TAG;
    static final int RESTART_ECM_TIMER;
    private static final boolean VDBG;
    com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT;
    private android.net.Uri[] mCurrentSubscriberUris;
    com.android.internal.telephony.Phone mDefaultPhone;
    private com.android.internal.telephony.Registrant mEcmExitRespRegistrant;
    private java.lang.Runnable mExitEcmRunnable;
    com.android.internal.telephony.imsphone.ImsExternalCallTracker mExternalCallTracker;
    private com.android.ims.ImsEcbmStateListener mImsEcbmStateListener;
    private com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper mImsMmTelRegistrationHelper;
    private boolean mIsInImsEcm;
    private java.lang.String mLastDialString;
    private com.android.internal.telephony.metrics.TelephonyMetrics mMetrics;
    private com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper$ImsRegistrationUpdate mMmTelRegistrationUpdate;
    private java.util.ArrayList mPendingMMIs;
    private final com.android.internal.telephony.LocalLog mRegLocalLog;
    private android.content.BroadcastReceiver mResultReceiver;
    private boolean mRoaming;
    private android.telephony.ServiceState mSS;
    private final com.android.internal.telephony.RegistrantList mSilentRedialRegistrants;
    private com.android.internal.telephony.RegistrantList mSsnRegistrants;
    private android.os.PowerManager$WakeLock mWakeLock;

    public void <init>(android.content.Context, com.android.internal.telephony.PhoneNotifier, com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.content.Context r1;
        com.android.internal.telephony.PhoneNotifier r2;
        com.android.internal.telephony.Phone r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.internal.telephony.PhoneNotifier;

        r3 := @parameter2: com.android.internal.telephony.Phone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void <init>(android.content.Context,com.android.internal.telephony.PhoneNotifier,com.android.internal.telephony.Phone,boolean)>(r1, r2, r3, 0);

        return;
    }

    public void <init>(android.content.Context, com.android.internal.telephony.PhoneNotifier, com.android.internal.telephony.Phone, boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone r1, $r24, $r31, $r33, $r35, $r37, $r44, $r45;
        boolean z0;
        int i0, i1, $i2, i3;
        java.util.ArrayList $r2;
        android.telephony.ServiceState $r3, $r23;
        com.android.internal.telephony.RegistrantList $r4, $r6;
        com.android.internal.telephony.LocalLog $r5;
        com.android.internal.telephony.imsphone.ImsPhone$1 $r7;
        com.android.internal.telephony.imsphone.ImsPhone$2 $r8;
        com.android.internal.telephony.imsphone.ImsPhone$3 $r9;
        com.android.internal.telephony.imsphone.ImsPhone$4 $r10;
        com.android.internal.telephony.TelephonyComponentFactory $r11, $r14, $r16, $r19;
        java.lang.Class $r12, $r17;
        java.lang.String $r13, $r18;
        com.android.internal.telephony.imsphone.ImsExternalCallTracker $r15, $r20, $r22;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r21, r41;
        com.android.internal.telephony.metrics.TelephonyMetrics $r25;
        com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper $r26;
        com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper$ImsRegistrationUpdate $r27;
        java.util.concurrent.Executor $r28;
        java.lang.Object $r29;
        android.os.PowerManager $r30;
        com.android.internal.telephony.ServiceStateTracker $r32, $r38;
        com.android.internal.telephony.dataconnection.TransportManager $r34, $r36;
        android.content.Context r39;
        com.android.internal.telephony.PhoneNotifier r40;
        android.os.PowerManager$WakeLock r42;
        int[] r43;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r39 := @parameter0: android.content.Context;

        r40 := @parameter1: com.android.internal.telephony.PhoneNotifier;

        r1 := @parameter2: com.android.internal.telephony.Phone;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void <init>(java.lang.String,android.content.Context,com.android.internal.telephony.PhoneNotifier,boolean)>("ImsPhone", r39, r40, z0);

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs> = $r2;

        $r3 = new android.telephony.ServiceState;

        specialinvoke $r3.<android.telephony.ServiceState: void <init>()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS> = $r3;

        $r4 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r4.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mSilentRedialRegistrants> = $r4;

        $r5 = new com.android.internal.telephony.LocalLog;

        specialinvoke $r5.<com.android.internal.telephony.LocalLog: void <init>(int)>(100);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.LocalLog mRegLocalLog> = $r5;

        i3 = 0;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mRoaming> = 0;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsInImsEcm> = 0;

        $r6 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r6.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mSsnRegistrants> = $r6;

        $r7 = new com.android.internal.telephony.imsphone.ImsPhone$1;

        specialinvoke $r7.<com.android.internal.telephony.imsphone.ImsPhone$1: void <init>(com.android.internal.telephony.imsphone.ImsPhone)>(r0);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.Runnable mExitEcmRunnable> = $r7;

        $r8 = new com.android.internal.telephony.imsphone.ImsPhone$2;

        specialinvoke $r8.<com.android.internal.telephony.imsphone.ImsPhone$2: void <init>(com.android.internal.telephony.imsphone.ImsPhone)>(r0);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.ims.ImsEcbmStateListener mImsEcbmStateListener> = $r8;

        $r9 = new com.android.internal.telephony.imsphone.ImsPhone$3;

        specialinvoke $r9.<com.android.internal.telephony.imsphone.ImsPhone$3: void <init>(com.android.internal.telephony.imsphone.ImsPhone)>(r0);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.BroadcastReceiver mResultReceiver> = $r9;

        $r10 = new com.android.internal.telephony.imsphone.ImsPhone$4;

        specialinvoke $r10.<com.android.internal.telephony.imsphone.ImsPhone$4: void <init>(com.android.internal.telephony.imsphone.ImsPhone)>(r0);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper$ImsRegistrationUpdate mMmTelRegistrationUpdate> = $r10;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone> = r1;

        $r11 = staticinvoke <com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory getInstance()>();

        $r12 = class "Lcom/android/internal/telephony/imsphone/ImsExternalCallTracker;";

        $r13 = virtualinvoke $r12.<java.lang.Class: java.lang.String getName()>();

        $r14 = virtualinvoke $r11.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory inject(java.lang.String)>($r13);

        $r15 = virtualinvoke $r14.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.imsphone.ImsExternalCallTracker makeImsExternalCallTracker(com.android.internal.telephony.imsphone.ImsPhone)>(r0);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsExternalCallTracker mExternalCallTracker> = $r15;

        $r16 = staticinvoke <com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory getInstance()>();

        $r17 = class "Lcom/android/internal/telephony/imsphone/ImsPhoneCallTracker;";

        $r18 = virtualinvoke $r17.<java.lang.Class: java.lang.String getName()>();

        $r19 = virtualinvoke $r16.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.TelephonyComponentFactory inject(java.lang.String)>($r18);

        r41 = virtualinvoke $r19.<com.android.internal.telephony.TelephonyComponentFactory: com.android.internal.telephony.imsphone.ImsPhoneCallTracker makeImsPhoneCallTracker(com.android.internal.telephony.imsphone.ImsPhone)>(r0);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT> = r41;

        $r20 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsExternalCallTracker mExternalCallTracker>;

        virtualinvoke r41.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void registerPhoneStateListener(com.android.internal.telephony.imsphone.ImsPhoneCallTracker$PhoneStateListener)>($r20);

        $r22 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsExternalCallTracker mExternalCallTracker>;

        $r21 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r22.<com.android.internal.telephony.imsphone.ImsExternalCallTracker: void setCallPuller(com.android.internal.telephony.imsphone.ImsPullCall)>($r21);

        $r23 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        virtualinvoke $r23.<android.telephony.ServiceState: void setStateOff()>();

        $r24 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $i2 = virtualinvoke $r24.<com.android.internal.telephony.Phone: int getPhoneId()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId> = $i2;

        $r25 = staticinvoke <com.android.internal.telephony.metrics.TelephonyMetrics: com.android.internal.telephony.metrics.TelephonyMetrics getInstance()>();

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics> = $r25;

        $r26 = new com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper;

        $r27 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper$ImsRegistrationUpdate mMmTelRegistrationUpdate>;

        $r28 = virtualinvoke r39.<android.content.Context: java.util.concurrent.Executor getMainExecutor()>();

        specialinvoke $r26.<com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper: void <init>(com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper$ImsRegistrationUpdate,java.util.concurrent.Executor)>($r27, $r28);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper mImsMmTelRegistrationHelper> = $r26;

        $r29 = virtualinvoke r39.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r30 = (android.os.PowerManager) $r29;

        r42 = virtualinvoke $r30.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ImsPhone");

        r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock> = r42;

        virtualinvoke r42.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r31 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r32 = virtualinvoke $r31.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if $r32 == null goto label2;

        $r33 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r34 = virtualinvoke $r33.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager getTransportManager()>();

        if $r34 == null goto label2;

        $r35 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r36 = virtualinvoke $r35.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager getTransportManager()>();

        r43 = virtualinvoke $r36.<com.android.internal.telephony.dataconnection.TransportManager: int[] getAvailableTransports()>();

        i0 = lengthof r43;

     label1:
        if i3 >= i0 goto label2;

        i1 = r43[i3];

        $r37 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r38 = virtualinvoke $r37.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        virtualinvoke $r38.<com.android.internal.telephony.ServiceStateTracker: void registerForDataRegStateOrRatChanged(int,android.os.Handler,int,java.lang.Object)>(i1, r0, 65, null);

        i3 = i3 + 1;

        goto label1;

     label2:
        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setServiceState(int)>(1);

        $r44 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r44.<com.android.internal.telephony.Phone: void registerForServiceStateChanged(android.os.Handler,int,java.lang.Object)>(r0, 66, null);

        $r45 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r45.<com.android.internal.telephony.Phone: void registerForVolteSilentRedial(android.os.Handler,int,java.lang.Object)>(r0, 68, null);

        return;
    }

    static com.android.internal.telephony.LocalLog access$1000(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.LocalLog $r1;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.LocalLog mRegLocalLog>;

        return $r1;
    }

    static int access$1100(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int $i0;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        $i0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId>;

        return $i0;
    }

    static com.android.internal.telephony.metrics.TelephonyMetrics access$1200(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.metrics.TelephonyMetrics $r1;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.metrics.TelephonyMetrics mMetrics>;

        return $r1;
    }

    static int access$1300(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int $i0;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        $i0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId>;

        return $i0;
    }

    static int access$1400(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int $i0;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        $i0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId>;

        return $i0;
    }

    static void access$500(com.android.internal.telephony.imsphone.ImsPhone, java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>(r1);

        return;
    }

    static void access$600(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void handleEnterEmergencyCallbackMode()>();

        return;
    }

    static android.content.Context access$700(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        return $r1;
    }

    static android.content.Context access$800(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        return $r1;
    }

    static android.content.Context access$900(com.android.internal.telephony.imsphone.ImsPhone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        return $r1;
    }

    private com.android.internal.telephony.Connection dialInternal(java.lang.String, com.android.internal.telephony.PhoneInternalInterface$DialArgs, android.os.ResultReceiver) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0, $z1, $z2, $z3, $z5;
        com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs $r1, $r17, $r20, $r23;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2, $r15, $r19, $r22;
        int $i0, $i1, $i2;
        com.android.internal.telephony.Phone $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r9, $r16, $r26, $r27, r29, r32, r34;
        com.android.internal.telephony.CallStateException $r10, $r25;
        java.util.ArrayList $r11, $r28;
        android.os.AsyncResult $r12;
        com.android.internal.telephony.RegistrantList $r13;
        com.android.internal.telephony.Connection $r18, $r21, $r24;
        com.android.internal.telephony.PhoneInternalInterface$DialArgs r30;
        android.os.ResultReceiver r31;
        com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder r33;
        com.android.internal.telephony.imsphone.ImsPhoneMmiCode r35;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r29 := @parameter0: java.lang.String;

        r30 := @parameter1: com.android.internal.telephony.PhoneInternalInterface$DialArgs;

        r31 := @parameter2: android.os.ResultReceiver;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.String mLastDialString> = r29;

        r32 = staticinvoke <android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>(r29);

        $z0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleInCallMmiCommands(java.lang.String)>(r32);

        if $z0 == 0 goto label01;

        return null;

     label01:
        $z1 = r30 instanceof com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs;

        if $z1 != 0 goto label02;

        r33 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder 'from'(com.android.internal.telephony.PhoneInternalInterface$DialArgs)>(r30);

        goto label03;

     label02:
        $r1 = (com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs) r30;

        r33 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder 'from'(com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs)>($r1);

     label03:
        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $i0 = virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: int getClirMode()>();

        virtualinvoke r33.<com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder setClirMode(int)>($i0);

        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $i1 = virtualinvoke $r4.<com.android.internal.telephony.Phone: int getPhoneType()>();

        if $i1 != 2 goto label04;

        $r22 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r23 = virtualinvoke r33.<com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs build()>();

        $r24 = virtualinvoke $r22.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs)>(r29, $r23);

        return $r24;

     label04:
        r34 = staticinvoke <android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortionAlt(java.lang.String)>(r32);

        r35 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhoneMmiCode: com.android.internal.telephony.imsphone.ImsPhoneMmiCode newFromDialString(java.lang.String,com.android.internal.telephony.imsphone.ImsPhone,android.os.ResultReceiver)>(r34, r0, r31);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dialInternal: dialing w/ mmi \'");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'...");

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r9);

        if r35 != null goto label05;

        $r19 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r20 = virtualinvoke r33.<com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs build()>();

        $r21 = virtualinvoke $r19.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs)>(r29, $r20);

        return $r21;

     label05:
        $z2 = virtualinvoke r35.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: boolean isTemporaryModeCLIR()>();

        if $z2 == 0 goto label06;

        $i2 = virtualinvoke r35.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: int getCLIRMode()>();

        virtualinvoke r33.<com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder setClirMode(int)>($i2);

        $r15 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r16 = virtualinvoke r35.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: java.lang.String getDialingNumber()>();

        $r17 = virtualinvoke r33.<com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs build()>();

        $r18 = virtualinvoke $r15.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs)>($r16, $r17);

        return $r18;

     label06:
        $z3 = virtualinvoke r35.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: boolean isSupportedOverImsPhone()>();

        if $z3 == 0 goto label12;

        $r11 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r35);

        $r13 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mMmiRegistrants>;

        $r12 = new android.os.AsyncResult;

        specialinvoke $r12.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r35, null);

        virtualinvoke $r13.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r12);

     label07:
        virtualinvoke r35.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: void processCode()>();

     label08:
        goto label10;

     label09:
        $r25 := @caughtexception;

        $r26 = "cs_fallback";

        $r27 = virtualinvoke $r25.<com.android.internal.telephony.CallStateException: java.lang.String getMessage()>();

        $z5 = virtualinvoke $r26.<java.lang.String: boolean equals(java.lang.Object)>($r27);

        if $z5 != 0 goto label11;

     label10:
        return null;

     label11:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logi(java.lang.String)>("dialInternal: fallback to GSM required.");

        $r28 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        virtualinvoke $r28.<java.util.ArrayList: boolean remove(java.lang.Object)>(r35);

        throw $r25;

     label12:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logi(java.lang.String)>("dialInternal: USSD not supported by IMS; fallback to CS.");

        $r10 = new com.android.internal.telephony.CallStateException;

        specialinvoke $r10.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>("cs_fallback");

        throw $r10;

        catch com.android.internal.telephony.CallStateException from label07 to label08 with label09;
    }

    private int getActionFromCFAction(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        if i0 == 0 goto label4;

        if i0 == 1 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        return -1;

     label1:
        return 4;

     label2:
        return 3;

     label3:
        return 1;

     label4:
        return 0;
    }

    private int getCBTypeFromFacility(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $r2 = "AO";

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 2;

     label1:
        $r3 = "OI";

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 3;

     label2:
        $r4 = "OX";

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label3;

        return 4;

     label3:
        $r5 = "AI";

        $z3 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label4;

        return 1;

     label4:
        $r6 = "IR";

        $z4 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z4 == 0 goto label5;

        return 5;

     label5:
        $r7 = "AB";

        $z5 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z5 == 0 goto label6;

        return 7;

     label6:
        $r8 = "AG";

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z6 == 0 goto label7;

        return 8;

     label7:
        $r9 = "AC";

        $z7 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z7 == 0 goto label8;

        return 9;

     label8:
        $r10 = "AR";

        $z8 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z8 == 0 goto label9;

        return 6;

     label9:
        return 0;
    }

    private int getCFReasonFromCondition(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        if i0 == 0 goto label5;

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 4 goto label2;

        if i0 == 5 goto label1;

        return 3;

     label1:
        return 5;

     label2:
        return 4;

     label3:
        return 2;

     label4:
        return 1;

     label5:
        return 0;
    }

    private com.android.internal.telephony.CallForwardInfo getCallForwardInfo(android.telephony.ims.ImsCallForwardInfo)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.ims.ImsCallForwardInfo r1;
        com.android.internal.telephony.CallForwardInfo $r3;
        int $i0, $i1, $i2, $i3, $i4;
        java.lang.String $r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.telephony.ims.ImsCallForwardInfo;

        $r3 = new com.android.internal.telephony.CallForwardInfo;

        specialinvoke $r3.<com.android.internal.telephony.CallForwardInfo: void <init>()>();

        $i0 = virtualinvoke r1.<android.telephony.ims.ImsCallForwardInfo: int getStatus()>();

        $r3.<com.android.internal.telephony.CallForwardInfo: int status> = $i0;

        $i1 = virtualinvoke r1.<android.telephony.ims.ImsCallForwardInfo: int getCondition()>();

        $i2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getCFReasonFromCondition(int)>($i1);

        $r3.<com.android.internal.telephony.CallForwardInfo: int reason> = $i2;

        $r3.<com.android.internal.telephony.CallForwardInfo: int serviceClass> = 1;

        $i3 = virtualinvoke r1.<android.telephony.ims.ImsCallForwardInfo: int getToA()>();

        $r3.<com.android.internal.telephony.CallForwardInfo: int toa> = $i3;

        $r4 = virtualinvoke r1.<android.telephony.ims.ImsCallForwardInfo: java.lang.String getNumber()>();

        $r3.<com.android.internal.telephony.CallForwardInfo: java.lang.String number> = $r4;

        $i4 = virtualinvoke r1.<android.telephony.ims.ImsCallForwardInfo: int getTimeSeconds()>();

        $r3.<com.android.internal.telephony.CallForwardInfo: int timeSeconds> = $i4;

        return $r3;
    }

    private com.android.internal.telephony.CommandException getCommandException(int, java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r2;
        com.android.internal.telephony.CommandException$Error r9;
        com.android.internal.telephony.CommandException $r10;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCommandException code= ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", errorString= ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r7);

        r9 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error GENERIC_FAILURE>;

        if i0 == 241 goto label09;

        if i0 == 801 goto label08;

        if i0 == 802 goto label07;

        tableswitch(i0)
        {
            case 821: goto label06;
            case 822: goto label05;
            case 823: goto label04;
            case 824: goto label03;
            case 825: goto label02;
            default: goto label01;
        };

     label01:
        goto label10;

     label02:
        r9 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error SS_MODIFIED_TO_DIAL_VIDEO>;

        goto label10;

     label03:
        r9 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error SS_MODIFIED_TO_SS>;

        goto label10;

     label04:
        r9 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error SS_MODIFIED_TO_USSD>;

        goto label10;

     label05:
        r9 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error SS_MODIFIED_TO_DIAL>;

        goto label10;

     label06:
        r9 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error PASSWORD_INCORRECT>;

        goto label10;

     label07:
        r9 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error RADIO_NOT_AVAILABLE>;

        goto label10;

     label08:
        r9 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error REQUEST_NOT_SUPPORTED>;

        goto label10;

     label09:
        r9 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error FDN_CHECK_FAILURE>;

     label10:
        $r10 = new com.android.internal.telephony.CommandException;

        specialinvoke $r10.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error,java.lang.String)>(r9, r1);

        return $r10;
    }

    private com.android.internal.telephony.CommandException getCommandException(java.lang.Throwable)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;
        com.android.internal.telephony.CommandException $r1, r6;
        com.android.internal.telephony.CommandException$Error $r2;
        com.android.ims.ImsException $r3;
        int $i0;
        java.lang.String $r4;
        java.lang.Throwable r5;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r5 := @parameter0: java.lang.Throwable;

        $z0 = r5 instanceof com.android.ims.ImsException;

        if $z0 == 0 goto label1;

        $r3 = (com.android.ims.ImsException) r5;

        $i0 = virtualinvoke $r3.<com.android.ims.ImsException: int getCode()>();

        $r4 = virtualinvoke r5.<java.lang.Throwable: java.lang.String getMessage()>();

        r6 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CommandException getCommandException(int,java.lang.String)>($i0, $r4);

        goto label2;

     label1:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("getCommandException generic failure");

        $r1 = new com.android.internal.telephony.CommandException;

        $r2 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error GENERIC_FAILURE>;

        specialinvoke $r1.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r2);

        r6 = $r1;

     label2:
        return r6;
    }

    private int getConditionFromCFReason(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        if i0 == 0 goto label6;

        if i0 == 1 goto label5;

        if i0 == 2 goto label4;

        if i0 == 3 goto label3;

        if i0 == 4 goto label2;

        if i0 == 5 goto label1;

        return -1;

     label1:
        return 5;

     label2:
        return 4;

     label3:
        return 3;

     label4:
        return 2;

     label5:
        return 1;

     label6:
        return 0;
    }

    private boolean handleCallDeflectionIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int $i0;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r1, $r4, $r8;
        com.android.internal.telephony.Call$State $r2, $r3, $r5, $r6;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r7, $r9;
        com.android.internal.telephony.CallStateException $r10, $r11;
        com.android.internal.telephony.PhoneInternalInterface$SuppService $r12;
        java.lang.String r13;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r13 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r13.<java.lang.String: int length()>();

        if $i0 <= 1 goto label01;

        return 0;

     label01:
        $r1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()>();

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r3 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r2 == $r3 goto label06;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("MmiCode 0: rejectCall");

     label02:
        $r9 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r9.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void rejectCall()>();

     label03:
        goto label05;

     label04:
        $r11 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsPhone", "reject failed", $r11);

        $r12 = <com.android.internal.telephony.PhoneInternalInterface$SuppService: com.android.internal.telephony.PhoneInternalInterface$SuppService REJECT>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)>($r12);

     label05:
        goto label10;

     label06:
        $r4 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r6 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r5 == $r6 goto label10;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("MmiCode 0: hangupWaitingOrBackground");

     label07:
        $r7 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r8 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        virtualinvoke $r7.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void hangup(com.android.internal.telephony.imsphone.ImsPhoneCall)>($r8);

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsPhone", "hangup failed", $r10);

     label10:
        return 1;

        catch com.android.internal.telephony.CallStateException from label02 to label03 with label04;
        catch com.android.internal.telephony.CallStateException from label07 to label08 with label09;
    }

    private boolean handleCallHoldIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r1, $r4, $r7, $r11;
        com.android.internal.telephony.Call$State $r2, $r3, $r5, $r6, $r8, $r9, $r12, $r13;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r10, $r14, $r15, $r16;
        com.android.internal.telephony.PhoneInternalInterface$SuppService $r17, $r19;
        com.android.internal.telephony.CallStateException $r18;
        java.lang.String r20;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r20 := @parameter0: java.lang.String;

        i0 = virtualinvoke r20.<java.lang.String: int length()>();

        if i0 <= 2 goto label01;

        return 0;

     label01:
        if i0 <= 1 goto label02;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("separate not supported");

        $r17 = <com.android.internal.telephony.PhoneInternalInterface$SuppService: com.android.internal.telephony.PhoneInternalInterface$SuppService SEPARATE>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)>($r17);

        goto label11;

     label02:
        $r1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()>();

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r3 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r2 == $r3 goto label04;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("MmiCode 2: accept ringing call");

        $r16 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r16.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void acceptCall(int)>(2);

     label03:
        goto label09;

     label04:
        $r4 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r6 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State HOLDING>;

        if $r5 != $r6 goto label08;

        $r11 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        $r12 = virtualinvoke $r11.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r13 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r12 == $r13 goto label06;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("MmiCode 2: switch holding and active");

        $r15 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r15.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void holdActiveCall()>();

     label05:
        goto label09;

     label06:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("MmiCode 2: unhold held call");

        $r14 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r14.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void unholdHeldCall()>();

     label07:
        goto label09;

     label08:
        $r7 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        $r8 = virtualinvoke $r7.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r9 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r8 == $r9 goto label09;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("MmiCode 2: hold active call");

        $r10 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r10.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void holdActiveCall()>();

     label09:
        goto label11;

     label10:
        $r18 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsPhone", "switch failed", $r18);

        $r19 = <com.android.internal.telephony.PhoneInternalInterface$SuppService: com.android.internal.telephony.PhoneInternalInterface$SuppService SWITCH>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)>($r19);

     label11:
        return 1;

        catch com.android.internal.telephony.CallStateException from label02 to label03 with label10;
        catch com.android.internal.telephony.CallStateException from label04 to label05 with label10;
        catch com.android.internal.telephony.CallStateException from label06 to label07 with label10;
        catch com.android.internal.telephony.CallStateException from label08 to label09 with label10;
    }

    private boolean handleCallWaitingIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        com.android.internal.telephony.Call$State $r1, $r2;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r3, $r4;
        com.android.internal.telephony.PhoneInternalInterface$SuppService $r5, $r7;
        com.android.internal.telephony.CallStateException $r6;
        java.lang.String r8;
        com.android.internal.telephony.imsphone.ImsPhoneCall r9;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r8 := @parameter0: java.lang.String;

        i0 = virtualinvoke r8.<java.lang.String: int length()>();

        if i0 <= 2 goto label1;

        return 0;

     label1:
        r9 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        if i0 <= 1 goto label4;

     label2:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("not support 1X SEND");

        $r5 = <com.android.internal.telephony.PhoneInternalInterface$SuppService: com.android.internal.telephony.PhoneInternalInterface$SuppService HANGUP>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)>($r5);

     label3:
        goto label7;

     label4:
        $r1 = virtualinvoke r9.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r2 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r1 == $r2 goto label6;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("MmiCode 1: hangup foreground");

        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void hangup(com.android.internal.telephony.imsphone.ImsPhoneCall)>(r9);

     label5:
        goto label7;

     label6:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("MmiCode 1: holdActiveCallForWaitingCall");

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r3.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void holdActiveCallForWaitingCall()>();

     label7:
        goto label9;

     label8:
        $r6 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsPhone", "hangup failed", $r6);

        $r7 = <com.android.internal.telephony.PhoneInternalInterface$SuppService: com.android.internal.telephony.PhoneInternalInterface$SuppService HANGUP>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)>($r7);

     label9:
        return 1;

        catch com.android.internal.telephony.CallStateException from label2 to label3 with label8;
        catch com.android.internal.telephony.CallStateException from label4 to label5 with label8;
        catch com.android.internal.telephony.CallStateException from label6 to label7 with label8;
    }

    private int[] handleCbQueryResult(android.telephony.ims.ImsSsInfo[])
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.ims.ImsSsInfo[] r1;
        int[] r2;
        android.telephony.ims.ImsSsInfo $r3;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.telephony.ims.ImsSsInfo[];

        r2 = newarray (int)[1];

        r2[0] = 0;

        $r3 = r1[0];

        $i0 = virtualinvoke $r3.<android.telephony.ims.ImsSsInfo: int getStatus()>();

        if $i0 != 1 goto label1;

        r2[0] = 1;

     label1:
        return r2;
    }

    private boolean handleCcbsIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        int $i0;
        com.android.internal.telephony.PhoneInternalInterface$SuppService $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 1 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logi(java.lang.String)>("MmiCode 5: CCBS not supported!");

        $r2 = <com.android.internal.telephony.PhoneInternalInterface$SuppService: com.android.internal.telephony.PhoneInternalInterface$SuppService UNKNOWN>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)>($r2);

        return 1;
    }

    private int[] handleCwQueryResult(android.telephony.ims.ImsSsInfo[])
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.ims.ImsSsInfo[] r1;
        int[] r2;
        android.telephony.ims.ImsSsInfo $r3;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.telephony.ims.ImsSsInfo[];

        r2 = newarray (int)[2];

        r2[0] = 0;

        $r3 = r1[0];

        $i0 = virtualinvoke $r3.<android.telephony.ims.ImsSsInfo: int getStatus()>();

        if $i0 != 1 goto label1;

        r2[0] = 1;

        r2[1] = 1;

     label1:
        return r2;
    }

    private boolean handleEctIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int $i0;
        com.android.internal.telephony.CallStateException $r1;
        com.android.internal.telephony.PhoneInternalInterface$SuppService $r2;
        java.lang.String r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r3 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i0 == 1 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("MmiCode 4: explicit call transfer");

     label2:
        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void explicitCallTransfer()>();

     label3:
        goto label5;

     label4:
        $r1 := @caughtexception;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("ImsPhone", "explicit call transfer failed", $r1);

        $r2 = <com.android.internal.telephony.PhoneInternalInterface$SuppService: com.android.internal.telephony.PhoneInternalInterface$SuppService TRANSFER>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)>($r2);

     label5:
        return 1;

        catch com.android.internal.telephony.CallStateException from label2 to label3 with label4;
    }

    private void handleEnterEmergencyCallbackMode()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        long l0;
        java.lang.StringBuilder $r2;
        boolean $z0, $z1;
        java.lang.String $r5;
        com.android.internal.telephony.Phone $r6;
        com.android.internal.telephony.GsmCdmaPhone $r7;
        java.util.Optional $r8;
        java.lang.Long $r9, $r11;
        java.lang.Object $r10;
        java.lang.Runnable $r12;
        android.os.PowerManager$WakeLock $r13;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleEnterEmergencyCallbackMode,mIsPhoneInEcmState= ");

        $z0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isInEcm()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r5);

        $z1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isInEcm()>();

        if $z1 != 0 goto label1;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setIsInEcm(boolean)>(1);

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendEmergencyCallbackModeChange()>();

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r7 = (com.android.internal.telephony.GsmCdmaPhone) $r6;

        virtualinvoke $r7.<com.android.internal.telephony.GsmCdmaPhone: void notifyEmergencyCallRegistrants(boolean)>(1);

        $r8 = staticinvoke <android.internal.telephony.sysprop.TelephonyProperties: java.util.Optional ecm_exit_timer()>();

        $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(300000L);

        $r10 = virtualinvoke $r8.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r9);

        $r11 = (java.lang.Long) $r10;

        l0 = virtualinvoke $r11.<java.lang.Long: long longValue()>();

        $r12 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.Runnable mExitEcmRunnable>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean postDelayed(java.lang.Runnable,long)>($r12, l0);

        $r13 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r13.<android.os.PowerManager$WakeLock: void acquire()>();

     label1:
        return;
    }

    private boolean handleMultipartyIncallSupplementaryService(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i0 <= 1 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("MmiCode 3: merge calls");

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void conference()>();

        return 1;
    }

    private boolean isCfEnable(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        boolean z1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        z1 = 1;

        if i0 == 1 goto label2;

        if i0 != 3 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isCsNotInServiceAndPsWwanReportingWlan(android.telephony.ServiceState)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;
        boolean $z0, $z1, z2;
        int $i0;
        android.telephony.ServiceState r2;
        com.android.internal.telephony.dataconnection.TransportManager r3;
        android.telephony.NetworkRegistrationInfo r4, r5;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r2 := @parameter0: android.telephony.ServiceState;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        r3 = virtualinvoke $r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager getTransportManager()>();

        z2 = 0;

        if r3 == null goto label3;

        $z0 = virtualinvoke r3.<com.android.internal.telephony.dataconnection.TransportManager: boolean isInLegacyMode()>();

        if $z0 != 0 goto label1;

        goto label3;

     label1:
        r4 = virtualinvoke r2.<android.telephony.ServiceState: android.telephony.NetworkRegistrationInfo getNetworkRegistrationInfo(int,int)>(1, 1);

        r5 = virtualinvoke r2.<android.telephony.ServiceState: android.telephony.NetworkRegistrationInfo getNetworkRegistrationInfo(int,int)>(2, 1);

        if r5 == null goto label2;

        if r4 == null goto label2;

        $z1 = virtualinvoke r4.<android.telephony.NetworkRegistrationInfo: boolean isInService()>();

        if $z1 != 0 goto label2;

        $i0 = virtualinvoke r5.<android.telephony.NetworkRegistrationInfo: int getAccessNetworkTechnology()>();

        if $i0 != 18 goto label2;

        z2 = 1;

        goto label2;

     label2:
        return z2;

     label3:
        return 0;
    }

    private boolean isValidCommandInterfaceCFAction(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 3 goto label1;

        if i0 == 4 goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean isValidCommandInterfaceCFReason(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        if i0 == 1 goto label1;

        if i0 == 2 goto label1;

        if i0 == 3 goto label1;

        if i0 == 4 goto label1;

        if i0 == 5 goto label1;

        return 0;

     label1:
        return 1;
    }

    private void logd(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, $r8;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $i0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r8);

        return;
    }

    private void loge(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, $r8;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $i0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsPhone", $r8);

        return;
    }

    private void logi(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, $r8;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $i0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int i(java.lang.String,java.lang.String)>("ImsPhone", $r8);

        return;
    }

    private void logv(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, $r8;
        java.lang.StringBuilder $r3;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $i0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int v(java.lang.String,java.lang.String)>("ImsPhone", $r8);

        return;
    }

    private void onNetworkInitiatedUssd(com.android.internal.telephony.imsphone.ImsPhoneMmiCode)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneMmiCode r1;
        android.os.AsyncResult $r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.imsphone.ImsPhoneMmiCode;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("onNetworkInitiatedUssd");

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mMmiCompleteRegistrants>;

        $r2 = new android.os.AsyncResult;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r2);

        return;
    }

    private void processWfcDisconnectForNotification(android.telephony.ims.ImsReasonInfo)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String[] r1, r2, r3, r4;
        android.content.Context $r5, $r7, $r9, $r25, $r48;
        java.lang.Object $r6;
        int $i0, $i1, $i2, $i3, $i5, $i6, $i7, $i9, i10, i11, i12;
        android.content.res.Resources $r8, $r10;
        java.lang.String $r11, $r12, $r13, $r14, $r15, $r18, $r19, $r27, $r28, $r30, $r31, $r32, $r33, $r36, $r38, $r42, $r50, r51, r52, $r56, $r57;
        boolean $z0, $z1, $z2, $z3, $z4;
        char $c4, $c8;
        android.content.Intent $r20;
        android.content.BroadcastReceiver $r24;
        java.lang.Object[] $r26, $r29;
        java.lang.StringBuilder $r34, $r39, $r54;
        android.telephony.ims.ImsReasonInfo r43;
        android.telephony.CarrierConfigManager r44;
        android.os.PersistableBundle r45;
        java.lang.CharSequence r49;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r43 := @parameter0: android.telephony.ims.ImsReasonInfo;

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        r44 = (android.telephony.CarrierConfigManager) $r6;

        if r44 != null goto label01;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void loge(java.lang.String)>("processDisconnectReason: CarrierConfigManager is not ready");

        return;

     label01:
        $i0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getSubId()>();

        r45 = virtualinvoke r44.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i0);

        if r45 != null goto label02;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("processDisconnectReason: no config for subId ");

        $i9 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getSubId()>();

        virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i9);

        $r42 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void loge(java.lang.String)>($r42);

        return;

     label02:
        r1 = virtualinvoke r45.<android.os.PersistableBundle: java.lang.String[] getStringArray(java.lang.String)>("wfc_operator_error_codes_string_array");

        if r1 != null goto label03;

        return;

     label03:
        $r7 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.res.Resources getResources()>();

        r2 = virtualinvoke $r8.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236135);

        $r9 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.res.Resources getResources()>();

        r3 = virtualinvoke $r10.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236136);

        i10 = 0;

     label04:
        $i1 = lengthof r1;

        if i10 >= $i1 goto label13;

        $r11 = r1[i10];

        r4 = virtualinvoke $r11.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\|");

        $i2 = lengthof r4;

        if $i2 == 2 goto label05;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid carrier config: ");

        $r36 = r1[i10];

        virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void loge(java.lang.String)>($r38);

        goto label12;

     label05:
        $r13 = r43.<android.telephony.ims.ImsReasonInfo: java.lang.String mExtraMessage>;

        $r12 = r4[0];

        $z0 = virtualinvoke $r13.<java.lang.String: boolean startsWith(java.lang.String)>($r12);

        if $z0 != 0 goto label06;

        goto label12;

     label06:
        $r14 = r4[0];

        i11 = virtualinvoke $r14.<java.lang.String: int length()>();

        $r15 = r4[0];

        $i3 = i11 - 1;

        $c4 = virtualinvoke $r15.<java.lang.String: char charAt(int)>($i3);

        $z1 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c4);

        if $z1 == 0 goto label07;

        $r32 = r43.<android.telephony.ims.ImsReasonInfo: java.lang.String mExtraMessage>;

        $i7 = virtualinvoke $r32.<java.lang.String: int length()>();

        if $i7 <= i11 goto label07;

        $r33 = r43.<android.telephony.ims.ImsReasonInfo: java.lang.String mExtraMessage>;

        $c8 = virtualinvoke $r33.<java.lang.String: char charAt(int)>(i11);

        $z4 = staticinvoke <java.lang.Character: boolean isLetterOrDigit(char)>($c8);

        if $z4 == 0 goto label07;

        goto label12;

     label07:
        $r48 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        r49 = virtualinvoke $r48.<android.content.Context: java.lang.CharSequence getText(int)>(17041442);

        $r50 = r4[1];

        i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r50);

        if i12 < 0 goto label11;

        $i5 = lengthof r2;

        if i12 >= $i5 goto label11;

        $i6 = lengthof r3;

        if i12 < $i6 goto label08;

        goto label11;

     label08:
        r51 = r43.<android.telephony.ims.ImsReasonInfo: java.lang.String mExtraMessage>;

        r52 = r43.<android.telephony.ims.ImsReasonInfo: java.lang.String mExtraMessage>;

        $r18 = r2[i12];

        $z2 = virtualinvoke $r18.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label09;

        $r31 = r2[i12];

        $r29 = newarray (java.lang.Object)[1];

        $r30 = r43.<android.telephony.ims.ImsReasonInfo: java.lang.String mExtraMessage>;

        $r29[0] = $r30;

        r51 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r31, $r29);

        goto label09;

     label09:
        $r19 = r3[i12];

        $z3 = virtualinvoke $r19.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label10;

        $r28 = r3[i12];

        $r26 = newarray (java.lang.Object)[1];

        $r27 = r43.<android.telephony.ims.ImsReasonInfo: java.lang.String mExtraMessage>;

        $r26[0] = $r27;

        r52 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r28, $r26);

     label10:
        $r20 = new android.content.Intent;

        specialinvoke $r20.<android.content.Intent: void <init>(java.lang.String)>("android.telephony.ims.action.WFC_IMS_REGISTRATION_ERROR");

        virtualinvoke $r20.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)>("android.telephony.ims.extra.WFC_REGISTRATION_FAILURE_TITLE", r49);

        virtualinvoke $r20.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("android.telephony.ims.extra.WFC_REGISTRATION_FAILURE_MESSAGE", r51);

        virtualinvoke $r20.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("notificationMessage", r52);

        $r25 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        $r24 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.BroadcastReceiver mResultReceiver>;

        virtualinvoke $r25.<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r20, null, $r24, null, -1, null, null);

        goto label13;

     label11:
        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid index: ");

        $r56 = r1[i10];

        virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56);

        $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void loge(java.lang.String)>($r57);

     label12:
        i10 = i10 + 1;

        goto label04;

     label13:
        return;
    }

    private void sendEmergencyCallbackModeChange()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.content.Intent $r1;
        boolean $z0, $z1;
        int $i0;
        android.os.UserHandle $r3;
        android.content.Context $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.EMERGENCY_CALLBACK_MODE_CHANGED");

        $z0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isInEcm()>();

        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("android.telephony.extra.PHONE_IN_ECM_STATE", $z0);

        $i0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getPhoneId()>();

        staticinvoke <android.telephony.SubscriptionManager: void putPhoneIdAndSubIdExtra(android.content.Intent,int)>($r1, $i0);

        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        $r3 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r4.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r1, $r3);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendEmergencyCallbackModeChange: isInEcm=");

        $z1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isInEcm()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r8);

        return;
    }

    private void sendErrorResponse(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;
        com.android.internal.telephony.CommandException $r2;
        com.android.internal.telephony.CommandException$Error $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("sendErrorResponse");

        if r1 == null goto label1;

        $r2 = new com.android.internal.telephony.CommandException;

        $r3 = <com.android.internal.telephony.CommandException$Error: com.android.internal.telephony.CommandException$Error GENERIC_FAILURE>;

        specialinvoke $r2.<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>($r3);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, $r2);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

     label1:
        return;
    }

    private void sendResponse(android.os.Message, java.lang.Object, java.lang.Throwable)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;
        java.lang.Object r2;
        java.lang.Throwable r3;
        com.android.internal.telephony.CommandException r5;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: java.lang.Object;

        r3 := @parameter2: java.lang.Throwable;

        if r1 == null goto label2;

        r5 = null;

        if r3 == null goto label1;

        r5 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CommandException getCommandException(java.lang.Throwable)>(r3);

     label1:
        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, r2, r5);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

     label2:
        return;
    }

    private void sendUssdResponse(java.lang.String, java.lang.CharSequence, int, android.os.ResultReceiver)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        android.os.ResultReceiver r1;
        android.telephony.UssdResponse $r2;
        android.os.Bundle $r3;
        java.lang.String r4;
        java.lang.CharSequence r5;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r4 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.CharSequence;

        i0 := @parameter2: int;

        r1 := @parameter3: android.os.ResultReceiver;

        $r2 = new android.telephony.UssdResponse;

        specialinvoke $r2.<android.telephony.UssdResponse: void <init>(java.lang.String,java.lang.CharSequence)>(r4, r5);

        $r3 = new android.os.Bundle;

        specialinvoke $r3.<android.os.Bundle: void <init>()>();

        virtualinvoke $r3.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("USSD_RESPONSE", $r2);

        virtualinvoke r1.<android.os.ResultReceiver: void send(int,android.os.Bundle)>(i0, $r3);

        return;
    }

    private void updateDataServiceState()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.ServiceState r1, $r3, $r8, $r11, $r13, $r18, $r22;
        android.telephony.NetworkRegistrationInfo r2;
        com.android.internal.telephony.Phone $r4, $r6, $r9;
        com.android.internal.telephony.ServiceStateTracker $r5, $r7, $r10;
        int $i0;
        java.util.List $r12;
        boolean $z0, $z1;
        java.lang.StringBuilder $r14;
        java.lang.String $r20;
        java.lang.Object $r21;
        java.util.Iterator r23;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        if $r3 == null goto label3;

        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if $r5 == null goto label3;

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        $r8 = $r7.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        if $r8 == null goto label3;

        $r9 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r10 = virtualinvoke $r9.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        r1 = $r10.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        $r11 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        $i0 = virtualinvoke r1.<android.telephony.ServiceState: int getDataRegistrationState()>();

        virtualinvoke $r11.<android.telephony.ServiceState: void setDataRegState(int)>($i0);

        $r12 = virtualinvoke r1.<android.telephony.ServiceState: java.util.List getNetworkRegistrationInfoListForDomain(int)>(2);

        r23 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r21 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.telephony.NetworkRegistrationInfo) $r21;

        $r22 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        virtualinvoke $r22.<android.telephony.ServiceState: void addNetworkRegistrationInfo(android.telephony.NetworkRegistrationInfo)>(r2);

        goto label1;

     label2:
        $r13 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        $z1 = virtualinvoke r1.<android.telephony.ServiceState: boolean isIwlanPreferred()>();

        virtualinvoke $r13.<android.telephony.ServiceState: void setIwlanPreferred(boolean)>($z1);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateDataServiceState: defSs = ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" imsSs = ");

        $r18 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r20);

     label3:
        return;
    }

    private void updateRoamingState(android.telephony.ServiceState)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0, $z1, $z2, $z3, z4;
        int $i0, $i1, $i2, $i3, $i4;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1, $r8;
        com.android.internal.telephony.PhoneConstants$State $r2, $r3;
        java.lang.StringBuilder $r4, $r9;
        java.lang.String $r7, $r12;
        android.content.Context $r13, $r16;
        java.lang.Object $r14;
        android.os.PersistableBundle $r15;
        android.telephony.ServiceState r17;
        android.telephony.CarrierConfigManager r19;
        com.android.ims.ImsManager r20;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r17 := @parameter0: android.telephony.ServiceState;

        if r17 != null goto label01;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void loge(java.lang.String)>("updateRoamingState: null ServiceState!");

        return;

     label01:
        z0 = virtualinvoke r17.<android.telephony.ServiceState: boolean getRoaming()>();

        $z1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mRoaming>;

        if $z1 != z0 goto label02;

        return;

     label02:
        $i0 = virtualinvoke r17.<android.telephony.ServiceState: int getState()>();

        if $i0 == 0 goto label04;

        $i4 = virtualinvoke r17.<android.telephony.ServiceState: int getDataRegistrationState()>();

        if $i4 != 0 goto label03;

        goto label04;

     label03:
        z4 = 0;

        goto label05;

     label04:
        z4 = 1;

     label05:
        if z4 != 0 goto label06;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logi(java.lang.String)>("updateRoamingState: we are OUT_OF_SERVICE, ignoring roaming change.");

        return;

     label06:
        $z2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isCsNotInServiceAndPsWwanReportingWlan(android.telephony.ServiceState)>(r17);

        if $z2 == 0 goto label07;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logi(java.lang.String)>("updateRoamingState: IWLAN masking roaming, ignore roaming change.");

        return;

     label07:
        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.PhoneConstants$State getState()>();

        $r3 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State IDLE>;

        if $r2 != $r3 goto label09;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRoamingState now: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r12);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mRoaming> = z0;

        $r13 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context getContext()>();

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        r19 = (android.telephony.CarrierConfigManager) $r14;

        if r19 == null goto label08;

        $i1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getSubId()>();

        $r15 = virtualinvoke r19.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i1);

        $z3 = staticinvoke <android.telephony.CarrierConfigManager: boolean isConfigForIdentifiedCarrier(android.os.PersistableBundle)>($r15);

        if $z3 == 0 goto label08;

        $r16 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        $i2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId>;

        r20 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>($r16, $i2);

        $i3 = virtualinvoke r20.<com.android.ims.ImsManager: int getWfcMode(boolean)>(z0);

        virtualinvoke r20.<com.android.ims.ImsManager: void setWfcMode(int,boolean)>($i3, z0);

     label08:
        goto label10;

     label09:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRoamingState postponed: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r7);

        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r8.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void registerForVoiceCallEnded(android.os.Handler,int,java.lang.Object)>(r0, 67, null);

     label10:
        return;
    }

    public void acceptCall(int) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void acceptCall(int)>(i0);

        return;
    }

    public volatile void activateCellBroadcastSms(int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void activateCellBroadcastSms(int,android.os.Message)>(i0, r1);

        return;
    }

    public void callEndCleanupHandOverCallIfAny()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void callEndCleanupHandOverCallIfAny()>();

        return;
    }

    public boolean canConference()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean canConference()>();

        return $z0;
    }

    public boolean canDial()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;
        com.android.internal.telephony.CallStateException $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

     label1:
        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void checkForDialIssues()>();

     label2:
        return 1;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch com.android.internal.telephony.CallStateException from label1 to label2 with label3;
    }

    public boolean canTransfer()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean canTransfer()>();

        return $z0;
    }

    public void cancelUSSD(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void cancelUSSD(android.os.Message)>(r1);

        return;
    }

    public void clearDisconnected()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void clearDisconnected()>();

        return;
    }

    public void conference()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void conference()>();

        return;
    }

    public com.android.internal.telephony.Connection dial(java.lang.String, com.android.internal.telephony.PhoneInternalInterface$DialArgs) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        com.android.internal.telephony.PhoneInternalInterface$DialArgs r2;
        com.android.internal.telephony.Connection $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.PhoneInternalInterface$DialArgs;

        $r3 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Connection dialInternal(java.lang.String,com.android.internal.telephony.PhoneInternalInterface$DialArgs,android.os.ResultReceiver)>(r1, r2, null);

        return $r3;
    }

    public volatile boolean disableDataConnectivity()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean disableDataConnectivity()>();

        return $z0;
    }

    public volatile void disableLocationUpdates()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void disableLocationUpdates()>();

        return;
    }

    public void dispose()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0, i1, i2;
        java.util.ArrayList $r1;
        com.android.internal.telephony.imsphone.ImsExternalCallTracker $r2, $r3;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r4, $r5, $r6;
        com.android.internal.telephony.ServiceStateTracker $r7, $r12;
        com.android.internal.telephony.Phone $r8, $r10, $r11, r13, r15;
        com.android.internal.telephony.dataconnection.TransportManager $r9;
        int[] r14;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("dispose");

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsExternalCallTracker mExternalCallTracker>;

        virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsExternalCallTracker: void tearDown()>();

        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsExternalCallTracker mExternalCallTracker>;

        virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void unregisterPhoneStateListener(com.android.internal.telephony.imsphone.ImsPhoneCallTracker$PhoneStateListener)>($r3);

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r5.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void unregisterForVoiceCallEnded(android.os.Handler)>(r0);

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r6.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void dispose()>();

        r13 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        if r13 == null goto label3;

        $r7 = virtualinvoke r13.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if $r7 == null goto label3;

        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r9 = virtualinvoke $r8.<com.android.internal.telephony.Phone: com.android.internal.telephony.dataconnection.TransportManager getTransportManager()>();

        r14 = virtualinvoke $r9.<com.android.internal.telephony.dataconnection.TransportManager: int[] getAvailableTransports()>();

        i0 = lengthof r14;

        i2 = 0;

     label1:
        if i2 >= i0 goto label2;

        i1 = r14[i2];

        $r11 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r12 = virtualinvoke $r11.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        virtualinvoke $r12.<com.android.internal.telephony.ServiceStateTracker: void unregisterForDataRegStateOrRatChanged(int,android.os.Handler)>(i1, r0);

        i2 = i2 + 1;

        goto label1;

     label2:
        $r10 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r10.<com.android.internal.telephony.Phone: void unregisterForServiceStateChanged(android.os.Handler)>(r0);

     label3:
        r15 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        if r15 == null goto label4;

        virtualinvoke r15.<com.android.internal.telephony.Phone: void unregisterForVolteSilentRedial(android.os.Handler)>(r0);

     label4:
        return;
    }

    public void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String[] r1;
        com.android.internal.telephony.IndentingPrintWriter $r2;
        java.lang.StringBuilder $r3, $r8, $r13, $r18, $r23, $r28, $r32, $r37, $r42, $r47, $r51;
        com.android.internal.telephony.Phone $r5;
        java.lang.String $r7, $r12, $r17, $r22, $r27, $r31, $r36, $r41, $r46, $r50, $r55;
        java.util.ArrayList $r10;
        com.android.internal.telephony.Registrant $r15, $r34;
        android.telephony.ServiceState $r20;
        android.os.PowerManager$WakeLock $r25;
        boolean $z0, $z1;
        com.android.internal.telephony.RegistrantList $r39, $r53;
        com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper $r44;
        int $i0;
        com.android.internal.telephony.LocalLog $r57;
        java.io.FileDescriptor r59;
        java.io.PrintWriter r60;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r59 := @parameter0: java.io.FileDescriptor;

        r60 := @parameter1: java.io.PrintWriter;

        r1 := @parameter2: java.lang.String[];

        $r2 = new com.android.internal.telephony.IndentingPrintWriter;

        specialinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r60, "  ");

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>("ImsPhone extends:");

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r59, $r2, r1);

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void flush()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>("ImsPhone:");

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mDefaultPhone = ");

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r7);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPendingMMIs = ");

        $r10 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r12);

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mPostDialHandler = ");

        $r15 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Registrant mPostDialHandler>;

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r17);

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSS = ");

        $r20 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r22);

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mWakeLock = ");

        $r25 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r27);

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mIsPhoneInEcmState = ");

        $z0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isInEcm()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r31);

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mEcmExitRespRegistrant = ");

        $r34 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Registrant mEcmExitRespRegistrant>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34);

        $r36 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r36);

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSilentRedialRegistrants = ");

        $r39 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mSilentRedialRegistrants>;

        virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r41);

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mImsMmTelRegistrationState = ");

        $r44 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper mImsMmTelRegistrationHelper>;

        $i0 = virtualinvoke $r44.<com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper: int getImsRegistrationState()>();

        virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r46 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r46);

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mRoaming = ");

        $z1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mRoaming>;

        virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r50 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r50);

        $r51 = new java.lang.StringBuilder;

        specialinvoke $r51.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  mSsnRegistrants = ");

        $r53 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mSsnRegistrants>;

        virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r53);

        $r55 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>($r55);

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void println(java.lang.String)>(" Registration Log:");

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter increaseIndent()>();

        $r57 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.LocalLog mRegLocalLog>;

        virtualinvoke $r57.<com.android.internal.telephony.LocalLog: void dump(java.io.PrintWriter)>($r2);

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: com.android.internal.telephony.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r2.<com.android.internal.telephony.IndentingPrintWriter: void flush()>();

        return;
    }

    public volatile boolean enableDataConnectivity()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean enableDataConnectivity()>();

        return $z0;
    }

    public volatile void enableLocationUpdates()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void enableLocationUpdates()>();

        return;
    }

    public void exitEmergencyCallbackMode()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.PowerManager$WakeLock $r2, $r5;
        boolean $z0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r3;
        com.android.ims.ImsEcbm $r4;
        com.android.ims.ImsException $r6;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        $z0 = virtualinvoke $r2.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label1;

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r5.<android.os.PowerManager$WakeLock: void release()>();

     label1:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("exitEmergencyCallbackMode()");

     label2:
        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsEcbm getEcbmInterface()>();

        virtualinvoke $r4.<com.android.ims.ImsEcbm: void exitEmergencyCallbackMode()>();

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        virtualinvoke $r6.<com.android.ims.ImsException: void printStackTrace()>();

     label5:
        return;

        catch com.android.ims.ImsException from label2 to label3 with label4;
    }

    public void explicitCallTransfer() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void explicitCallTransfer()>();

        return;
    }

    public volatile void getAvailableNetworks(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void getAvailableNetworks(android.os.Message)>(r1);

        return;
    }

    public volatile com.android.internal.telephony.Call getBackgroundCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        return $r1;
    }

    public com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r2 = $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.imsphone.ImsPhoneCall mBackgroundCall>;

        return $r2;
    }

    public void getCallBarring(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void getCallBarring(java.lang.String,android.os.Message,int)>(r1, r2, 1);

        return;
    }

    public void getCallBarring(java.lang.String, android.os.Message, int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        android.os.Message r2;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        i0 := @parameter2: int;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void getCallBarring(java.lang.String,java.lang.String,android.os.Message,int)>(r1, "", r2, i0);

        return;
    }

    public void getCallBarring(java.lang.String, java.lang.String, android.os.Message, int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1, r14;
        int i0, $i1;
        java.lang.StringBuilder $r2;
        java.lang.String $r7, r11, r12;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r8;
        com.android.ims.ImsUtInterface $r9;
        com.android.ims.ImsException $r10;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r11 := @parameter0: java.lang.String;

        r12 := @parameter1: java.lang.String;

        r1 := @parameter2: android.os.Message;

        i0 := @parameter3: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCallBarring facility=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", serviceClass = ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r7);

        r14 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(60, r1);

     label1:
        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r9 = virtualinvoke $r8.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        $i1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getCBTypeFromFacility(java.lang.String)>(r11);

        interfaceinvoke $r9.<com.android.ims.ImsUtInterface: void queryCallBarring(int,android.os.Message,int)>($i1, r14, i0);

     label2:
        goto label4;

     label3:
        $r10 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r1, $r10);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public void getCallForwardingOption(int, int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0, i1, $i2;
        android.os.Message r1, r10;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        boolean $z0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r6;
        com.android.ims.ImsUtInterface $r7;
        com.android.ims.ImsException $r8;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getCallForwardingOption reason=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r5);

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isValidCommandInterfaceCFReason(int)>(i0);

        if $z0 == 0 goto label4;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("requesting call forwarding query.");

        r10 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(13, r1);

     label1:
        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        $i2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getConditionFromCFReason(int)>(i0);

        interfaceinvoke $r7.<com.android.ims.ImsUtInterface: void queryCallForward(int,java.lang.String,android.os.Message)>($i2, null, r10);

     label2:
        goto label5;

     label3:
        $r8 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r1, $r8);

        goto label5;

     label4:
        if r1 == null goto label5;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message)>(r1);

        goto label5;

     label5:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public void getCallForwardingOption(int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void getCallForwardingOption(int,int,android.os.Message)>(i0, 1, r1);

        return;
    }

    public com.android.internal.telephony.CallTracker getCallTracker()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        return $r1;
    }

    public void getCallWaiting(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1, r5;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;
        com.android.ims.ImsUtInterface $r3;
        com.android.ims.ImsException $r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("getCallWaiting");

        r5 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(62, r1);

     label1:
        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r3 = virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        interfaceinvoke $r3.<com.android.ims.ImsUtInterface: void queryCallWaiting(android.os.Message)>(r5);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r1, $r4);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public volatile void getCellBroadcastSmsConfig(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void getCellBroadcastSmsConfig(android.os.Message)>(r1);

        return;
    }

    public volatile java.util.List getCurrentDataConnectionList()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.util.List $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.util.List getCurrentDataConnectionList()>();

        return $r1;
    }

    public android.net.Uri[] getCurrentSubscriberUris()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.net.Uri[] $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.net.Uri[] mCurrentSubscriberUris>;

        return $r1;
    }

    public volatile com.android.internal.telephony.PhoneInternalInterface$DataActivityState getDataActivityState()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneInternalInterface$DataActivityState $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.PhoneInternalInterface$DataActivityState getDataActivityState()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneConstants$DataState $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()>();

        return $r1;
    }

    public volatile boolean getDataRoamingEnabled()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean getDataRoamingEnabled()>();

        return $z0;
    }

    public com.android.internal.telephony.Phone getDefaultPhone()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        return $r1;
    }

    public volatile java.lang.String getDeviceId()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getDeviceId()>();

        return $r1;
    }

    public volatile java.lang.String getDeviceSvn()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getDeviceSvn()>();

        return $r1;
    }

    public int getEmergencyNumberDbVersion()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.emergency.EmergencyNumberTracker $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.emergency.EmergencyNumberTracker getEmergencyNumberTracker()>();

        $i0 = virtualinvoke $r1.<com.android.internal.telephony.emergency.EmergencyNumberTracker: int getEmergencyNumberDbVersion()>();

        return $i0;
    }

    public com.android.internal.telephony.emergency.EmergencyNumberTracker getEmergencyNumberTracker()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;
        com.android.internal.telephony.emergency.EmergencyNumberTracker $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.emergency.EmergencyNumberTracker getEmergencyNumberTracker()>();

        return $r2;
    }

    public volatile java.lang.String getEsn()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getEsn()>();

        return $r1;
    }

    public com.android.internal.telephony.imsphone.ImsExternalCallTracker getExternalCallTracker()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsExternalCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsExternalCallTracker mExternalCallTracker>;

        return $r1;
    }

    public volatile com.android.internal.telephony.Call getForegroundCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        return $r1;
    }

    public com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r2 = $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.imsphone.ImsPhoneCall mForegroundCall>;

        return $r2;
    }

    public volatile java.lang.String getGroupIdLevel1()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getGroupIdLevel1()>();

        return $r1;
    }

    public volatile java.lang.String getGroupIdLevel2()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getGroupIdLevel2()>();

        return $r1;
    }

    public java.util.ArrayList getHandoverConnection()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.util.ArrayList $r2, $r4, $r6, $r8;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r3, $r5, $r7;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        $r3 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.imsphone.ImsPhoneCall: java.util.ArrayList getConnections()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4);

        $r5 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        $r6 = virtualinvoke $r5.<com.android.internal.telephony.imsphone.ImsPhoneCall: java.util.ArrayList getConnections()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6);

        $r7 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()>();

        $r8 = virtualinvoke $r7.<com.android.internal.telephony.imsphone.ImsPhoneCall: java.util.ArrayList getConnections()>();

        virtualinvoke $r2.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r8);

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label1;

        return $r2;

     label1:
        return null;
    }

    public volatile com.android.internal.telephony.IccCard getIccCard()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.IccCard $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.IccCard getIccCard()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.uicc.IccFileHandler $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()>();

        return $r1;
    }

    public volatile com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.IccPhoneBookInterfaceManager $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>();

        return $r1;
    }

    public com.android.internal.telephony.uicc.IccRecords getIccRecords()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;
        com.android.internal.telephony.uicc.IccRecords $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.uicc.IccRecords getIccRecords()>();

        return $r2;
    }

    public volatile boolean getIccRecordsLoaded()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean getIccRecordsLoaded()>();

        return $z0;
    }

    public volatile java.lang.String getIccSerialNumber()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getIccSerialNumber()>();

        return $r1;
    }

    public volatile java.lang.String getImei()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getImei()>();

        return $r1;
    }

    public com.android.ims.ImsEcbmStateListener getImsEcbmStateListener()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.ims.ImsEcbmStateListener $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.ims.ImsEcbmStateListener mImsEcbmStateListener>;

        return $r1;
    }

    public android.telephony.ims.RegistrationManager$RegistrationCallback getImsMmTelRegistrationCallback()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper $r1;
        android.telephony.ims.RegistrationManager$RegistrationCallback $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper mImsMmTelRegistrationHelper>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper: android.telephony.ims.RegistrationManager$RegistrationCallback getCallback()>();

        return $r2;
    }

    public void getImsRegistrationState(java.util.function.Consumer)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.util.function.Consumer r1;
        com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper $r2;
        int $i0;
        java.lang.Integer $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.util.function.Consumer;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper mImsMmTelRegistrationHelper>;

        $i0 = virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper: int getImsRegistrationState()>();

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r3);

        return;
    }

    public int getImsRegistrationTech()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $i0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: int getImsRegistrationTech()>();

        return $i0;
    }

    public void getImsRegistrationTech(java.util.function.Consumer)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.util.function.Consumer r1;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.util.function.Consumer;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void getImsRegistrationTech(java.util.function.Consumer)>(r1);

        return;
    }

    public volatile java.lang.String getLine1AlphaTag()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getLine1AlphaTag()>();

        return $r1;
    }

    public java.lang.String getLine1Number()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;
        java.lang.String $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: java.lang.String getLine1Number()>();

        return $r2;
    }

    public volatile android.net.LinkProperties getLinkProperties(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        android.net.LinkProperties $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $r2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>(r1);

        return $r2;
    }

    public volatile java.lang.String getMeid()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getMeid()>();

        return $r1;
    }

    public volatile boolean getMessageWaitingIndicator()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean getMessageWaitingIndicator()>();

        return $z0;
    }

    public boolean getMute()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean getMute()>();

        return $z0;
    }

    public void getOutgoingCallerIdDisplay(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1, r5;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;
        com.android.ims.ImsUtInterface $r3;
        com.android.ims.ImsException $r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("getCLIR");

        r5 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(64, r1);

     label1:
        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r3 = virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        interfaceinvoke $r3.<com.android.ims.ImsUtInterface: void queryCLIR(android.os.Message)>(r5);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r1, $r4);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public java.util.List getPendingMmiCodes()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.util.ArrayList $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        return $r1;
    }

    public int getPhoneId()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $i0 = virtualinvoke $r1.<com.android.internal.telephony.Phone: int getPhoneId()>();

        return $i0;
    }

    public volatile int getPhoneType()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $i0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: int getPhoneType()>();

        return $i0;
    }

    public volatile com.android.internal.telephony.Call getRingingCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()>();

        return $r1;
    }

    public com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r2 = $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.imsphone.ImsPhoneCall mRingingCall>;

        return $r2;
    }

    public android.telephony.ServiceState getServiceState()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.ServiceState $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        return $r1;
    }

    public com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;
        com.android.internal.telephony.ServiceStateTracker $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        return $r2;
    }

    public volatile android.telephony.SignalStrength getSignalStrength()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.SignalStrength $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: android.telephony.SignalStrength getSignalStrength()>();

        return $r1;
    }

    public com.android.internal.telephony.PhoneConstants$State getState()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        com.android.internal.telephony.PhoneConstants$State $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.PhoneConstants$State getState()>();

        return $r2;
    }

    public int getSubId()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;
        int $i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $i0 = virtualinvoke $r1.<com.android.internal.telephony.Phone: int getSubId()>();

        return $i0;
    }

    public volatile java.lang.String getSubscriberId()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getSubscriberId()>();

        return $r1;
    }

    public com.android.internal.telephony.metrics.VoiceCallSessionStats getVoiceCallSessionStats()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;
        com.android.internal.telephony.metrics.VoiceCallSessionStats $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.metrics.VoiceCallSessionStats getVoiceCallSessionStats()>();

        return $r2;
    }

    public volatile java.lang.String getVoiceMailAlphaTag()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getVoiceMailAlphaTag()>();

        return $r1;
    }

    public volatile java.lang.String getVoiceMailNumber()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: java.lang.String getVoiceMailNumber()>();

        return $r1;
    }

    public android.os.PowerManager$WakeLock getWakeLock()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        return $r1;
    }

    public com.android.internal.telephony.CallForwardInfo[] handleCfQueryResult(android.telephony.ims.ImsCallForwardInfo[])
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.ims.ImsCallForwardInfo[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        com.android.internal.telephony.uicc.IccRecords $r2, r8;
        android.telephony.ims.ImsCallForwardInfo $r3, $r4, $r5, $r9;
        java.lang.String $r6;
        com.android.internal.telephony.CallForwardInfo[] r7;
        boolean z0;
        com.android.internal.telephony.CallForwardInfo $r10;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.telephony.ims.ImsCallForwardInfo[];

        r7 = null;

        if r1 == null goto label1;

        r7 = null;

        $i4 = lengthof r1;

        if $i4 == 0 goto label1;

        $i5 = lengthof r1;

        r7 = newarray (com.android.internal.telephony.CallForwardInfo)[$i5];

     label1:
        if r1 == null goto label7;

        $i1 = lengthof r1;

        if $i1 != 0 goto label2;

        goto label7;

     label2:
        i6 = 0;

        i0 = lengthof r1;

     label3:
        if i6 >= i0 goto label8;

        $r3 = r1[i6];

        $i2 = virtualinvoke $r3.<android.telephony.ims.ImsCallForwardInfo: int getCondition()>();

        if $i2 != 0 goto label6;

        r8 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.uicc.IccRecords getIccRecords()>();

        $r4 = r1[i6];

        $i3 = virtualinvoke $r4.<android.telephony.ims.ImsCallForwardInfo: int getStatus()>();

        if $i3 != 1 goto label4;

        z0 = 1;

        goto label5;

     label4:
        z0 = 0;

     label5:
        $r5 = r1[i6];

        $r6 = virtualinvoke $r5.<android.telephony.ims.ImsCallForwardInfo: java.lang.String getNumber()>();

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setVoiceCallForwardingFlag(com.android.internal.telephony.uicc.IccRecords,int,boolean,java.lang.String)>(r8, 1, z0, $r6);

     label6:
        $r9 = r1[i6];

        $r10 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CallForwardInfo getCallForwardInfo(android.telephony.ims.ImsCallForwardInfo)>($r9);

        r7[i6] = $r10;

        i6 = i6 + 1;

        goto label3;

     label7:
        $r2 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.uicc.IccRecords getIccRecords()>();

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setVoiceCallForwardingFlag(com.android.internal.telephony.uicc.IccRecords,int,boolean,java.lang.String)>($r2, 1, 0, null);

     label8:
        return r7;
    }

    protected void handleExitEmergencyCallbackMode()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.StringBuilder $r1;
        boolean $z0, $z1, $z2;
        java.lang.String $r4;
        java.lang.Runnable $r5;
        android.os.PowerManager$WakeLock $r6, $r9;
        com.android.internal.telephony.Phone $r7;
        com.android.internal.telephony.GsmCdmaPhone $r8;
        java.lang.Boolean $r10;
        com.android.internal.telephony.Registrant r12;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleExitEmergencyCallbackMode: mIsPhoneInEcmState = ");

        $z0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isInEcm()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r4);

        $z1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isInEcm()>();

        if $z1 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setIsInEcm(boolean)>(0);

     label1:
        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.Runnable mExitEcmRunnable>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void removeCallbacks(java.lang.Runnable)>($r5);

        r12 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Registrant mEcmExitRespRegistrant>;

        if r12 == null goto label2;

        $r10 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke r12.<com.android.internal.telephony.Registrant: void notifyResult(java.lang.Object)>($r10);

     label2:
        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        $z2 = virtualinvoke $r6.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z2 == 0 goto label3;

        $r9 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r9.<android.os.PowerManager$WakeLock: void release()>();

     label3:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendEmergencyCallbackModeChange()>();

        $r7 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r8 = (com.android.internal.telephony.GsmCdmaPhone) $r7;

        virtualinvoke $r8.<com.android.internal.telephony.GsmCdmaPhone: void notifyEmergencyCallRegistrants(boolean)>(0);

        return;
    }

    public boolean handleInCallMmiCommands(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        boolean $z0, $z1, z2;
        char $c0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isInCall()>();

        if $z0 != 0 goto label01;

        return 0;

     label01:
        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z1 == 0 goto label02;

        return 0;

     label02:
        z2 = 0;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        tableswitch($c0)
        {
            case 48: goto label09;
            case 49: goto label08;
            case 50: goto label07;
            case 51: goto label06;
            case 52: goto label05;
            case 53: goto label04;
            default: goto label03;
        };

     label03:
        goto label10;

     label04:
        z2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleCcbsIncallSupplementaryService(java.lang.String)>(r1);

        goto label10;

     label05:
        z2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleEctIncallSupplementaryService(java.lang.String)>(r1);

        goto label10;

     label06:
        z2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleMultipartyIncallSupplementaryService(java.lang.String)>(r1);

        goto label10;

     label07:
        z2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleCallHoldIncallSupplementaryService(java.lang.String)>(r1);

        goto label10;

     label08:
        z2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleCallWaitingIncallSupplementaryService(java.lang.String)>(r1);

        goto label10;

     label09:
        z2 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean handleCallDeflectionIncallSupplementaryService(java.lang.String)>(r1);

     label10:
        return z2;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.AsyncResult r1, $r26, r44;
        java.lang.Object $r2, $r5, $r9, $r12, $r14, $r16, $r17, $r25, $r27, $r29, $r30, $r35, $r37, $r57, $r60;
        java.lang.StringBuilder $r3, $r40, r49;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        java.lang.String $r4, $r7, $r19, $r41, r46;
        boolean $z0, z1;
        java.lang.Throwable $r6, $r8, $r10, $r15, $r31, $r33, $r34, $r59, $r62, $r67;
        android.os.Message $r11, $r32, r42, $r58, $r61, $r66;
        android.telephony.ims.ImsCallForwardInfo[] $r13;
        com.android.internal.telephony.PhoneInternalInterface$DialArgs $r18, r47;
        com.android.internal.telephony.Phone $r20, $r21, $r23, r52;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r22;
        android.telephony.ServiceState $r24, $r28;
        android.telephony.ims.ImsSsInfo[] $r36, $r38;
        com.android.internal.telephony.CallStateException $r39;
        com.android.internal.telephony.Phone$SilentRedialParam r45;
        com.android.internal.telephony.Connection r48;
        com.android.internal.telephony.ServiceStateTracker r53;
        android.telephony.ims.ImsSsInfo r54;
        int[] r55, r56;
        com.android.internal.telephony.CallForwardInfo[] r63;
        com.android.internal.telephony.imsphone.ImsPhone$Cf r64;
        com.android.internal.telephony.uicc.IccRecords r65;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r42 := @parameter0: android.os.Message;

        $r2 = r42.<android.os.Message: java.lang.Object obj>;

        r1 = (android.os.AsyncResult) $r2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleMessage what=");

        $i0 = r42.<android.os.Message: int what>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r4);

        i5 = r42.<android.os.Message: int what>;

        if i5 == 12 goto label19;

        if i5 == 13 goto label17;

        tableswitch(i5)
        {
            case 59: goto label16;
            case 60: goto label13;
            case 61: goto label16;
            case 62: goto label13;
            case 63: goto label12;
            case 64: goto label10;
            case 65: goto label09;
            case 66: goto label08;
            case 67: goto label07;
            case 68: goto label02;
            default: goto label01;
        };

     label01:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void handleMessage(android.os.Message)>(r42);

        goto label23;

     label02:
        $r14 = r42.<android.os.Message: java.lang.Object obj>;

        r44 = (android.os.AsyncResult) $r14;

        $r15 = r44.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r15 != null goto label23;

        $r16 = r44.<android.os.AsyncResult: java.lang.Object result>;

        if $r16 == null goto label23;

        $r17 = r44.<android.os.AsyncResult: java.lang.Object result>;

        r45 = (com.android.internal.telephony.Phone$SilentRedialParam) $r17;

        r46 = r45.<com.android.internal.telephony.Phone$SilentRedialParam: java.lang.String dialString>;

        i6 = r45.<com.android.internal.telephony.Phone$SilentRedialParam: int causeCode>;

        r47 = r45.<com.android.internal.telephony.Phone$SilentRedialParam: com.android.internal.telephony.PhoneInternalInterface$DialArgs dialArgs>;

     label03:
        $r18 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.PhoneInternalInterface$DialArgs updateDialArgsForVolteSilentRedial(com.android.internal.telephony.PhoneInternalInterface$DialArgs,int)>(r47, i6);

        r48 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Connection dial(java.lang.String,com.android.internal.telephony.PhoneInternalInterface$DialArgs)>(r46, $r18);

        r49 = new java.lang.StringBuilder;

        specialinvoke r49.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Notify volte redial connection changed cn: ");

        virtualinvoke r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r48);

        $r19 = virtualinvoke r49.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r19);

        $r20 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        if $r20 == null goto label04;

        $r21 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r21.<com.android.internal.telephony.Phone: void notifyRedialConnectionChanged(com.android.internal.telephony.Connection)>(r48);

     label04:
        goto label06;

     label05:
        $r39 := @caughtexception;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("volte silent redial failed: ");

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r39);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("ImsPhone", $r41);

        r52 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        if r52 == null goto label06;

        virtualinvoke r52.<com.android.internal.telephony.Phone: void notifyRedialConnectionChanged(com.android.internal.telephony.Connection)>(null);

     label06:
        goto label23;

     label07:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("Voice call ended. Handle pending updateRoamingState.");

        $r22 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r22.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void unregisterForVoiceCallEnded(android.os.Handler)>(r0);

        $r23 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone getDefaultPhone()>();

        r53 = virtualinvoke $r23.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if r53 == null goto label23;

        $r24 = r53.<com.android.internal.telephony.ServiceStateTracker: android.telephony.ServiceState mSS>;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void updateRoamingState(android.telephony.ServiceState)>($r24);

        goto label23;

     label08:
        $r25 = r42.<android.os.Message: java.lang.Object obj>;

        $r26 = (android.os.AsyncResult) $r25;

        $r27 = $r26.<android.os.AsyncResult: java.lang.Object result>;

        $r28 = (android.telephony.ServiceState) $r27;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void updateRoamingState(android.telephony.ServiceState)>($r28);

        goto label23;

     label09:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("EVENT_DEFAULT_PHONE_DATA_STATE_CHANGED");

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void updateDataServiceState()>();

        goto label23;

     label10:
        $r29 = r1.<android.os.AsyncResult: java.lang.Object result>;

        r54 = (android.telephony.ims.ImsSsInfo) $r29;

        r55 = null;

        if r54 == null goto label11;

        r55 = virtualinvoke r54.<android.telephony.ims.ImsSsInfo: int[] getCompatArray(int)>(8);

     label11:
        $r30 = r1.<android.os.AsyncResult: java.lang.Object userObj>;

        $r32 = (android.os.Message) $r30;

        $r31 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendResponse(android.os.Message,java.lang.Object,java.lang.Throwable)>($r32, r55, $r31);

        goto label23;

     label12:
        $r33 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r33 != null goto label16;

        $i2 = r42.<android.os.Message: int arg1>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void saveClirSetting(int)>($i2);

        goto label16;

     label13:
        r56 = null;

        $r34 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r34 != null goto label15;

        $i3 = r42.<android.os.Message: int what>;

        if $i3 != 60 goto label14;

        $r37 = r1.<android.os.AsyncResult: java.lang.Object result>;

        $r38 = (android.telephony.ims.ImsSsInfo[]) $r37;

        r56 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int[] handleCbQueryResult(android.telephony.ims.ImsSsInfo[])>($r38);

        goto label15;

     label14:
        r56 = null;

        $i4 = r42.<android.os.Message: int what>;

        if $i4 != 62 goto label15;

        $r35 = r1.<android.os.AsyncResult: java.lang.Object result>;

        $r36 = (android.telephony.ims.ImsSsInfo[]) $r35;

        r56 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int[] handleCwQueryResult(android.telephony.ims.ImsSsInfo[])>($r36);

     label15:
        $r57 = r1.<android.os.AsyncResult: java.lang.Object userObj>;

        $r58 = (android.os.Message) $r57;

        $r59 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendResponse(android.os.Message,java.lang.Object,java.lang.Throwable)>($r58, r56, $r59);

        goto label23;

     label16:
        $r60 = r1.<android.os.AsyncResult: java.lang.Object userObj>;

        $r61 = (android.os.Message) $r60;

        $r62 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendResponse(android.os.Message,java.lang.Object,java.lang.Throwable)>($r61, null, $r62);

        goto label23;

     label17:
        r63 = null;

        $r8 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r8 != null goto label18;

        $r12 = r1.<android.os.AsyncResult: java.lang.Object result>;

        $r13 = (android.telephony.ims.ImsCallForwardInfo[]) $r12;

        r63 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CallForwardInfo[] handleCfQueryResult(android.telephony.ims.ImsCallForwardInfo[])>($r13);

     label18:
        $r9 = r1.<android.os.AsyncResult: java.lang.Object userObj>;

        $r11 = (android.os.Message) $r9;

        $r10 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendResponse(android.os.Message,java.lang.Object,java.lang.Throwable)>($r11, r63, $r10);

        goto label23;

     label19:
        $r5 = r1.<android.os.AsyncResult: java.lang.Object userObj>;

        r64 = (com.android.internal.telephony.imsphone.ImsPhone$Cf) $r5;

        $z0 = r64.<com.android.internal.telephony.imsphone.ImsPhone$Cf: boolean mIsCfu>;

        if $z0 == 0 goto label22;

        $r6 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        if $r6 != null goto label22;

        r65 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.uicc.IccRecords getIccRecords()>();

        $i1 = r42.<android.os.Message: int arg1>;

        if $i1 != 1 goto label20;

        z1 = 1;

        goto label21;

     label20:
        z1 = 0;

     label21:
        $r7 = r64.<com.android.internal.telephony.imsphone.ImsPhone$Cf: java.lang.String mSetCfNumber>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setVoiceCallForwardingFlag(com.android.internal.telephony.uicc.IccRecords,int,boolean,java.lang.String)>(r65, 1, z1, $r7);

     label22:
        $r66 = r64.<com.android.internal.telephony.imsphone.ImsPhone$Cf: android.os.Message mOnComplete>;

        $r67 = r1.<android.os.AsyncResult: java.lang.Throwable exception>;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendResponse(android.os.Message,java.lang.Object,java.lang.Throwable)>($r66, null, $r67);

     label23:
        return;

        catch com.android.internal.telephony.CallStateException from label03 to label04 with label05;
    }

    public volatile boolean handlePinMmi(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean handlePinMmi(java.lang.String)>(r1);

        return $z0;
    }

    void handleTimerInEmergencyCallbackMode(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        long l1;
        java.util.Optional $r2;
        java.lang.Long $r3, $r5;
        java.lang.Object $r4;
        java.lang.Runnable $r6, $r10;
        com.android.internal.telephony.Phone $r7, $r11;
        java.lang.Boolean $r8, $r12;
        com.android.internal.telephony.GsmCdmaPhone $r9, $r13;
        java.lang.StringBuilder $r14;
        java.lang.String $r17;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        if i0 == 0 goto label2;

        if i0 == 1 goto label1;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleTimerInEmergencyCallbackMode, unsupported action ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void loge(java.lang.String)>($r17);

        goto label3;

     label1:
        $r10 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.Runnable mExitEcmRunnable>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void removeCallbacks(java.lang.Runnable)>($r10);

        $r11 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r13 = (com.android.internal.telephony.GsmCdmaPhone) $r11;

        $r12 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        virtualinvoke $r13.<com.android.internal.telephony.GsmCdmaPhone: void notifyEcbmTimerReset(java.lang.Boolean)>($r12);

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setEcmCanceledForEmergency(boolean)>(1);

        goto label3;

     label2:
        $r2 = staticinvoke <android.internal.telephony.sysprop.TelephonyProperties: java.util.Optional ecm_exit_timer()>();

        $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(300000L);

        $r4 = virtualinvoke $r2.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r3);

        $r5 = (java.lang.Long) $r4;

        l1 = virtualinvoke $r5.<java.lang.Long: long longValue()>();

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.Runnable mExitEcmRunnable>;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean postDelayed(java.lang.Runnable,long)>($r6, l1);

        $r7 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r9 = (com.android.internal.telephony.GsmCdmaPhone) $r7;

        $r8 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        virtualinvoke $r9.<com.android.internal.telephony.GsmCdmaPhone: void notifyEcbmTimerReset(java.lang.Boolean)>($r8);

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setEcmCanceledForEmergency(boolean)>(0);

     label3:
        return;
    }

    public boolean handleUssdRequest(java.lang.String, android.os.ResultReceiver) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, $r8, $r10, $r15, $r17, $r18, $r22;
        android.os.ResultReceiver r2;
        java.util.ArrayList $r3;
        int $i0;
        com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs $r4;
        java.lang.StringBuilder $r6, $r12, $r19;
        java.lang.Exception $r11;
        com.android.internal.telephony.CallStateException $r16;
        boolean $z0;
        com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder r24;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.ResultReceiver;

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        $i0 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        if $i0 <= 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleUssdRequest: queue full: ");

        $r8 = staticinvoke <com.android.telephony.Rlog: java.lang.String pii(java.lang.String,java.lang.Object)>("ImsPhone", r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logi(java.lang.String)>($r10);

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendUssdResponse(java.lang.String,java.lang.CharSequence,int,android.os.ResultReceiver)>(r1, null, -1, r2);

        return 1;

     label1:
        r24 = new com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder;

        specialinvoke r24.<com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: void <init>()>();

        $r4 = virtualinvoke r24.<com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs build()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Connection dialInternal(java.lang.String,com.android.internal.telephony.PhoneInternalInterface$DialArgs,android.os.ResultReceiver)>(r1, $r4, r2);

     label2:
        goto label5;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not execute USSD ");

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r15 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("ImsPhone", $r15);

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendUssdResponse(java.lang.String,java.lang.CharSequence,int,android.os.ResultReceiver)>(r1, null, -1, r2);

        return 0;

     label4:
        $r16 := @caughtexception;

        $r17 = "cs_fallback";

        $r18 = virtualinvoke $r16.<com.android.internal.telephony.CallStateException: java.lang.String getMessage()>();

        $z0 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r18);

        if $z0 != 0 goto label6;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not execute USSD ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int w(java.lang.String,java.lang.String)>("ImsPhone", $r22);

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendUssdResponse(java.lang.String,java.lang.CharSequence,int,android.os.ResultReceiver)>(r1, null, -1, r2);

     label5:
        return 1;

     label6:
        throw $r16;

        catch com.android.internal.telephony.CallStateException from label1 to label2 with label4;
        catch java.lang.Exception from label1 to label2 with label3;
    }

    public boolean hasAliveCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r1, $r4;
        com.android.internal.telephony.Call$State $r2, $r3, $r5, $r6;
        boolean z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r3 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r2 != $r3 goto label2;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r6 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r5 == $r6 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public void holdActiveCall() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void holdActiveCall()>();

        return;
    }

    void initiateSilentRedial()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.AsyncResult $r2;
        java.lang.String $r3;
        com.android.internal.telephony.RegistrantList $r4;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r2 = new android.os.AsyncResult;

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.String mLastDialString>;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, $r3, null);

        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mSilentRedialRegistrants>;

        virtualinvoke $r4.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r2);

        return;
    }

    public volatile boolean isDataAllowed(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean isDataAllowed(int)>(i0);

        return $z0;
    }

    public boolean isImsAvailable()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean isImsServiceReady()>();

        return $z0;
    }

    public boolean isImsCapabilityAvailable(int, int) throws com.android.ims.ImsException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0, i1;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean isImsCapabilityAvailable(int,int)>(i0, i1);

        return $z0;
    }

    public boolean isImsRegistered()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper mImsMmTelRegistrationHelper>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper: boolean isImsRegistered()>();

        return $z0;
    }

    boolean isInCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Call$State r1, r2, r3;
        com.android.internal.telephony.imsphone.ImsPhoneCall $r4, $r5, $r6;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getForegroundCall()>();

        r1 = virtualinvoke $r4.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r5 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getBackgroundCall()>();

        r2 = virtualinvoke $r5.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $r6 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCall getRingingCall()>();

        r3 = virtualinvoke $r6.<com.android.internal.telephony.imsphone.ImsPhoneCall: com.android.internal.telephony.Call$State getState()>();

        $z0 = virtualinvoke r1.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r2.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r3.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    public boolean isInEcm()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.Phone: boolean isInEcm()>();

        return $z0;
    }

    public boolean isInEmergencyCall()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean isInEmergencyCall()>();

        return $z0;
    }

    public boolean isInImsEcm()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsInImsEcm>;

        return $z0;
    }

    public volatile boolean isUserDataEnabled()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean isUserDataEnabled()>();

        return $z0;
    }

    public boolean isUtEnabled()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean isUtEnabled()>();

        return $z0;
    }

    public boolean isVideoEnabled()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean isVideoCallEnabled()>();

        return $z0;
    }

    public boolean isVolteEnabled()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean isVolteEnabled()>();

        return $z0;
    }

    public boolean isWifiCallingEnabled()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: boolean isVowifiEnabled()>();

        return $z0;
    }

    public volatile void migrateFrom(com.android.internal.telephony.Phone)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.Phone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void migrateFrom(com.android.internal.telephony.Phone)>(r1);

        return;
    }

    public volatile boolean needsOtaServiceProvisioning()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean needsOtaServiceProvisioning()>();

        return $z0;
    }

    public volatile void notifyCallForwardingIndicator()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void notifyCallForwardingIndicator()>();

        return;
    }

    public volatile void notifyDisconnect(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Connection r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void notifyDisconnect(com.android.internal.telephony.Connection)>(r1);

        return;
    }

    public void notifyForVideoCapabilityChanged(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        com.android.internal.telephony.Phone $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsVideoCapable> = z0;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r1.<com.android.internal.telephony.Phone: void notifyForVideoCapabilityChanged(boolean)>(z0);

        return;
    }

    public volatile void notifyImsReason(android.telephony.ims.ImsReasonInfo)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.ims.ImsReasonInfo r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.telephony.ims.ImsReasonInfo;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void notifyImsReason(android.telephony.ims.ImsReasonInfo)>(r1);

        return;
    }

    public void notifyIncomingRing()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.AsyncResult $r1;
        android.os.Message $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("notifyIncomingRing");

        $r1 = new android.os.AsyncResult;

        specialinvoke $r1.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, null, null);

        $r2 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(14, $r1);

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean sendMessage(android.os.Message)>($r2);

        return;
    }

    public void notifyNewRingingConnection(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Connection r1;
        com.android.internal.telephony.Phone $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r2.<com.android.internal.telephony.Phone: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)>(r1);

        return;
    }

    public volatile void notifyPhoneStateChanged()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void notifyPhoneStateChanged()>();

        return;
    }

    public volatile void notifyPreciseCallStateChanged()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void notifyPreciseCallStateChanged()>();

        return;
    }

    public void notifySrvccState(com.android.internal.telephony.Call$SrvccState)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Call$SrvccState r1;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.Call$SrvccState;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void notifySrvccState(com.android.internal.telephony.Call$SrvccState)>(r1);

        return;
    }

    public volatile void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.PhoneInternalInterface$SuppService r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.PhoneInternalInterface$SuppService;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)>(r1);

        return;
    }

    public void notifySuppSvcNotification(com.android.internal.telephony.gsm.SuppServiceNotification)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        android.os.AsyncResult $r6;
        com.android.internal.telephony.RegistrantList $r7;
        com.android.internal.telephony.gsm.SuppServiceNotification r8;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r8 := @parameter0: com.android.internal.telephony.gsm.SuppServiceNotification;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifySuppSvcNotification: suppSvc = ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r5);

        $r6 = new android.os.AsyncResult;

        specialinvoke $r6.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r8, null);

        $r7 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mSsnRegistrants>;

        virtualinvoke $r7.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r6);

        return;
    }

    void notifyUnknownConnection(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Connection r1;
        com.android.internal.telephony.Phone $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r2.<com.android.internal.telephony.Phone: void notifyUnknownConnectionP(com.android.internal.telephony.Connection)>(r1);

        return;
    }

    public volatile void onCallQualityChanged(android.telephony.CallQuality, int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.CallQuality r1;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.telephony.CallQuality;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void onCallQualityChanged(android.telephony.CallQuality,int)>(r1, i0);

        return;
    }

    public void onFeatureCapabilityChanged()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Phone $r1;
        com.android.internal.telephony.ServiceStateTracker $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        virtualinvoke $r2.<com.android.internal.telephony.ServiceStateTracker: void onImsCapabilityChanged()>();

        return;
    }

    void onIncomingUSSD(int, java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, $r3;
        java.lang.StringBuilder $r2;
        boolean $z0, $z1, z2, z3;
        com.android.internal.telephony.imsphone.ImsPhoneMmiCode $r4, $r7, r12;
        java.util.ArrayList $r5, $r8, $r11;
        java.lang.Object $r6, $r9;
        int i0, i1, i2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onIncomingUSSD ussdMode=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r3);

        if i0 != 1 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        z3 = 0;

        if i0 == 0 goto label3;

        z3 = 0;

        if i0 == 1 goto label3;

        z3 = 1;

     label3:
        i1 = 0;

        $r11 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        i2 = virtualinvoke $r11.<java.util.ArrayList: int size()>();

     label4:
        r12 = null;

        if i1 >= i2 goto label6;

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        $r7 = (com.android.internal.telephony.imsphone.ImsPhoneMmiCode) $r6;

        $z1 = virtualinvoke $r7.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: boolean isPendingUSSD()>();

        if $z1 == 0 goto label5;

        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i1);

        r12 = (com.android.internal.telephony.imsphone.ImsPhoneMmiCode) $r9;

        goto label6;

     label5:
        i1 = i1 + 1;

        goto label4;

     label6:
        if r12 == null goto label8;

        if z3 == 0 goto label7;

        virtualinvoke r12.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: void onUssdFinishedError()>();

        goto label9;

     label7:
        virtualinvoke r12.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: void onUssdFinished(java.lang.String,boolean)>(r1, z2);

        goto label9;

     label8:
        if z3 != 0 goto label9;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label9;

        $r4 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhoneMmiCode: com.android.internal.telephony.imsphone.ImsPhoneMmiCode newNetworkInitiatedUssd(java.lang.String,boolean,com.android.internal.telephony.imsphone.ImsPhone)>(r1, z2, r0);

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void onNetworkInitiatedUssd(com.android.internal.telephony.imsphone.ImsPhoneMmiCode)>($r4);

     label9:
        return;
    }

    public void onMMIDone(com.android.internal.telephony.imsphone.ImsPhoneMmiCode)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneMmiCode r1;
        java.lang.StringBuilder $r2;
        java.lang.String $r5, $r11;
        java.util.ArrayList $r6;
        boolean $z0, $z1, $z2;
        android.os.AsyncResult $r7;
        com.android.internal.telephony.RegistrantList $r8;
        com.android.internal.telephony.MmiCode$State $r9, $r10;
        java.lang.CharSequence $r12;
        android.os.ResultReceiver r14;
        byte b0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.imsphone.ImsPhoneMmiCode;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onMMIDone: mmi=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r5);

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        $z0 = virtualinvoke $r6.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r1.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: boolean isUssdRequest()>();

        if $z1 != 0 goto label1;

        $z2 = virtualinvoke r1.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: boolean isSsInfo()>();

        if $z2 == 0 goto label5;

     label1:
        r14 = virtualinvoke r1.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: android.os.ResultReceiver getUssdCallbackReceiver()>();

        if r14 == null goto label4;

        $r9 = virtualinvoke r1.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: com.android.internal.telephony.MmiCode$State getState()>();

        $r10 = <com.android.internal.telephony.MmiCode$State: com.android.internal.telephony.MmiCode$State COMPLETE>;

        if $r9 != $r10 goto label2;

        b0 = 100;

        goto label3;

     label2:
        b0 = -1;

     label3:
        $r11 = virtualinvoke r1.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: java.lang.String getDialString()>();

        $r12 = virtualinvoke r1.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: java.lang.CharSequence getMessage()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendUssdResponse(java.lang.String,java.lang.CharSequence,int,android.os.ResultReceiver)>($r11, $r12, b0, r14);

        goto label5;

     label4:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logv(java.lang.String)>("onMMIDone: notifyRegistrants");

        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mMmiCompleteRegistrants>;

        $r7 = new android.os.AsyncResult;

        specialinvoke $r7.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r1, null);

        virtualinvoke $r8.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r7);

     label5:
        return;
    }

    public volatile void onTtyModeReceived(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void onTtyModeReceived(int)>(i0);

        return;
    }

    public void processDisconnectReason(android.telephony.ims.ImsReasonInfo)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.ims.ImsReasonInfo r1;
        int $i0, $i1;
        java.lang.String $r2;
        android.content.Context $r3;
        com.android.ims.ImsManager $r4;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.telephony.ims.ImsReasonInfo;

        $i0 = r1.<android.telephony.ims.ImsReasonInfo: int mCode>;

        if $i0 != 1000 goto label1;

        $r2 = r1.<android.telephony.ims.ImsReasonInfo: java.lang.String mExtraMessage>;

        if $r2 == null goto label1;

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context mContext>;

        $i1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: int mPhoneId>;

        $r4 = staticinvoke <com.android.ims.ImsManager: com.android.ims.ImsManager getInstance(android.content.Context,int)>($r3, $i1);

        $z0 = virtualinvoke $r4.<com.android.ims.ImsManager: boolean isWfcEnabledByUser()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void processWfcDisconnectForNotification(android.telephony.ims.ImsReasonInfo)>(r1);

     label1:
        return;
    }

    public volatile void registerForOnHoldTone(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void registerForOnHoldTone(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public volatile void registerForRingbackTone(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void registerForRingbackTone(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForSilentRedial(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mSilentRedialRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForSuppServiceNotification(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mSsnRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public volatile void registerForTtyModeReceived(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void registerForTtyModeReceived(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void rejectCall() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void rejectCall()>();

        return;
    }

    public void resetImsRegistrationState()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("resetImsRegistrationState");

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper mImsMmTelRegistrationHelper>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper: void reset()>();

        return;
    }

    public volatile void selectNetworkManually(com.android.internal.telephony.OperatorInfo, boolean, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.OperatorInfo r1;
        boolean z0;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.OperatorInfo;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void selectNetworkManually(com.android.internal.telephony.OperatorInfo,boolean,android.os.Message)>(r1, z0, r2);

        return;
    }

    public void sendDtmf(char)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        char c0;
        boolean $z0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2, $r5;
        com.android.internal.telephony.PhoneConstants$State $r3, $r4;
        java.lang.StringBuilder $r6;
        java.lang.String $r10;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        c0 := @parameter0: char;

        $z0 = staticinvoke <android.telephony.PhoneNumberUtils: boolean is12Key(char)>(c0);

        if $z0 != 0 goto label1;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendDtmf called with invalid character \'");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void loge(java.lang.String)>($r10);

        goto label2;

     label1:
        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r3 = virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.PhoneConstants$State getState()>();

        $r4 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State OFFHOOK>;

        if $r3 != $r4 goto label2;

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r5.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void sendDtmf(char,android.os.Message)>(c0, null);

     label2:
        return;
    }

    public void sendEmergencyCallStateChange(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        com.android.internal.telephony.Phone $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r1.<com.android.internal.telephony.Phone: void sendEmergencyCallStateChange(boolean)>(z0);

        return;
    }

    public void sendErrorResponse(android.os.Message, java.lang.Throwable)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;
        java.lang.Throwable r2;
        com.android.internal.telephony.CommandException $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        r2 := @parameter1: java.lang.Throwable;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("sendErrorResponse");

        if r1 == null goto label1;

        $r3 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.CommandException getCommandException(java.lang.Throwable)>(r2);

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, $r3);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

     label1:
        return;
    }

    public void sendUSSD(java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, $r7;
        android.os.Message r2;
        java.lang.StringBuilder $r4;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r8;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.Message;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendUssd ussdString = ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("ImsPhone", $r7);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: java.lang.String mLastDialString> = r1;

        $r8 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r8.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void sendUSSD(java.lang.String,android.os.Message)>(r1, r2);

        return;
    }

    public void sendUssdResponse(java.lang.String)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1;
        com.android.internal.telephony.imsphone.ImsPhoneMmiCode r2;
        java.util.ArrayList $r3;
        android.os.AsyncResult $r4;
        com.android.internal.telephony.RegistrantList $r5;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("sendUssdResponse");

        r2 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhoneMmiCode: com.android.internal.telephony.imsphone.ImsPhoneMmiCode newFromUssdUserInput(java.lang.String,com.android.internal.telephony.imsphone.ImsPhone)>(r1, r0);

        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: java.util.ArrayList mPendingMMIs>;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

        $r5 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mMmiRegistrants>;

        $r4 = new android.os.AsyncResult;

        specialinvoke $r4.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, r2, null);

        virtualinvoke $r5.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r4);

        virtualinvoke r2.<com.android.internal.telephony.imsphone.ImsPhoneMmiCode: void sendUssd(java.lang.String)>(r1);

        return;
    }

    public void setBroadcastEmergencyCallStateChanges(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        com.android.internal.telephony.Phone $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r1.<com.android.internal.telephony.Phone: void setBroadcastEmergencyCallStateChanges(boolean)>(z0);

        return;
    }

    public void setCallBarring(java.lang.String, boolean, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, r2;
        boolean z0;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setCallBarring(java.lang.String,boolean,java.lang.String,android.os.Message,int)>(r1, z0, r2, r3, 1);

        return;
    }

    public void setCallBarring(java.lang.String, boolean, java.lang.String, android.os.Message, int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        java.lang.String r1, $r10, r14;
        android.os.Message r2, r16;
        int i0, $i1;
        java.lang.StringBuilder $r3;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r11;
        com.android.ims.ImsUtInterface $r12;
        com.android.ims.ImsException $r13;
        byte b2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r14 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        r2 := @parameter3: android.os.Message;

        i0 := @parameter4: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setCallBarring facility=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", lockState=");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", serviceClass = ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r10);

        r16 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(59, r2);

        if z0 == 0 goto label1;

        b2 = 1;

        goto label2;

     label1:
        b2 = 0;

     label2:
        $r11 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r12 = virtualinvoke $r11.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        $i1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getCBTypeFromFacility(java.lang.String)>(r14);

        interfaceinvoke $r12.<com.android.ims.ImsUtInterface: void updateCallBarring(int,int,android.os.Message,java.lang.String[],int,java.lang.String)>($i1, b2, r16, null, i0, r1);

     label3:
        goto label5;

     label4:
        $r13 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r2, $r13);

     label5:
        return;

        catch com.android.ims.ImsException from label2 to label3 with label4;
    }

    public void setCallForwardingOption(int, int, java.lang.String, int, int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0, i1, i2, i3, $i4, $i5, i6;
        android.os.Message r1, r17;
        java.lang.StringBuilder $r2;
        java.lang.String $r9, r14;
        boolean $z0, $z1, $z2, $z3;
        com.android.internal.telephony.imsphone.ImsPhone$Cf $r10;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r11;
        com.android.ims.ImsUtInterface $r12;
        com.android.ims.ImsException $r13;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r14 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r1 := @parameter5: android.os.Message;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setCallForwardingOption action=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", reason=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" serviceClass=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r9);

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isValidCommandInterfaceCFAction(int)>(i0);

        if $z0 == 0 goto label5;

        $z1 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isValidCommandInterfaceCFReason(int)>(i1);

        if $z1 == 0 goto label4;

        $r10 = new com.android.internal.telephony.imsphone.ImsPhone$Cf;

        $z2 = staticinvoke <com.android.internal.telephony.gsm.GsmMmiCode: boolean isVoiceUnconditionalForwarding(int,int)>(i1, i2);

        specialinvoke $r10.<com.android.internal.telephony.imsphone.ImsPhone$Cf: void <init>(java.lang.String,boolean,android.os.Message)>(r14, $z2, r1);

        $z3 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isCfEnable(int)>(i0);

        i6 = (int) $z3;

        r17 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(12, i6, 0, $r10);

     label1:
        $r11 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r12 = virtualinvoke $r11.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        $i4 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getActionFromCFAction(int)>(i0);

        $i5 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getConditionFromCFReason(int)>(i1);

        interfaceinvoke $r12.<com.android.ims.ImsUtInterface: void updateCallForward(int,int,java.lang.String,int,int,android.os.Message)>($i4, $i5, r14, i2, i3, r17);

     label2:
        goto label6;

     label3:
        $r13 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r1, $r13);

        goto label6;

     label4:
        goto label5;

     label5:
        if r1 == null goto label6;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message)>(r1);

        goto label6;

     label6:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public void setCallForwardingOption(int, int, java.lang.String, int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0, i1, i2;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        r2 := @parameter4: android.os.Message;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setCallForwardingOption(int,int,java.lang.String,int,int,android.os.Message)>(i0, i1, r1, 1, i2, r2);

        return;
    }

    public void setCallWaiting(boolean, int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        int i0;
        android.os.Message r1, r10;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r6;
        com.android.ims.ImsUtInterface $r7;
        com.android.ims.ImsException $r8;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setCallWaiting enable=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r5);

        r10 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,java.lang.Object)>(61, r1);

     label1:
        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        interfaceinvoke $r7.<com.android.ims.ImsUtInterface: void updateCallWaiting(boolean,int,android.os.Message)>(z0, i0, r10);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r1, $r8);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public void setCallWaiting(boolean, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        android.os.Message r1;
        android.os.PersistableBundle r2;
        android.content.Context $r3;
        java.lang.Object $r4;
        android.telephony.CarrierConfigManager $r5;
        int $i0, i1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        i1 = 1;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("carrier_config");

        $r5 = (android.telephony.CarrierConfigManager) $r4;

        $i0 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: int getSubId()>();

        r2 = virtualinvoke $r5.<android.telephony.CarrierConfigManager: android.os.PersistableBundle getConfigForSubId(int)>($i0);

        if r2 == null goto label1;

        i1 = virtualinvoke r2.<android.os.PersistableBundle: int getInt(java.lang.String,int)>("call_waiting_service_class_int", 1);

     label1:
        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void setCallWaiting(boolean,int,android.os.Message)>(z0, i1, r1);

        return;
    }

    public volatile void setCellBroadcastSmsConfig(int[], android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int[] r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setCellBroadcastSmsConfig(int[],android.os.Message)>(r1, r2);

        return;
    }

    protected void setCurrentSubscriberUris(android.net.Uri[])
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.net.Uri[] r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.net.Uri[];

        r0.<com.android.internal.telephony.imsphone.ImsPhone: android.net.Uri[] mCurrentSubscriberUris> = r1;

        return;
    }

    public volatile void setDataRoamingEnabled(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setDataRoamingEnabled(boolean)>(z0);

        return;
    }

    public void setImsRegistered(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper r1;
        byte b0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper mImsMmTelRegistrationHelper>;

        if z0 == 0 goto label1;

        b0 = 2;

        goto label2;

     label1:
        b0 = 0;

     label2:
        virtualinvoke r1.<com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper: void updateRegistrationState(int)>(b0);

        return;
    }

    public void setImsRegistrationState(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper $r6;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setImsRegistrationState: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r5);

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper mImsMmTelRegistrationHelper>;

        virtualinvoke $r6.<com.android.internal.telephony.imsphone.ImsRegistrationCallbackHelper: void updateRegistrationState(int)>(i0);

        return;
    }

    public void setIsInEcm(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        com.android.internal.telephony.Phone $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean mIsInImsEcm> = z0;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r1.<com.android.internal.telephony.Phone: void setIsInEcm(boolean)>(z0);

        return;
    }

    public volatile boolean setLine1Number(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, r2;
        android.os.Message r3;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        $z0 = specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: boolean setLine1Number(java.lang.String,java.lang.String,android.os.Message)>(r1, r2, r3);

        return $z0;
    }

    public void setMute(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void setMute(boolean)>(z0);

        return;
    }

    public volatile void setNetworkSelectionModeAutomatic(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>(r1);

        return;
    }

    public void setOnEcbModeExitResponse(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.Registrant $r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = new com.android.internal.telephony.Registrant;

        specialinvoke $r3.<com.android.internal.telephony.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Registrant mEcmExitRespRegistrant> = $r3;

        return;
    }

    public void setOutgoingCallerIdDisplay(int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        android.os.Message r1, r10;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r6;
        com.android.ims.ImsUtInterface $r7;
        com.android.ims.ImsException $r8;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setCLIR action= ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>($r5);

        r10 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(63, i0, 0, r1);

     label1:
        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.ims.ImsUtInterface getUtInterface()>();

        interfaceinvoke $r7.<com.android.ims.ImsUtInterface: void updateCLIR(int,android.os.Message)>(i0, r10);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void sendErrorResponse(android.os.Message,java.lang.Throwable)>(r1, $r8);

     label4:
        return;

        catch com.android.ims.ImsException from label1 to label2 with label3;
    }

    public volatile void setRadioPower(boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setRadioPower(boolean)>(z0);

        return;
    }

    public void setRadioPower(boolean, boolean, boolean, boolean)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        boolean z0, z1, z2, z3;
        com.android.internal.telephony.Phone $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        z3 := @parameter3: boolean;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        virtualinvoke $r1.<com.android.internal.telephony.Phone: void setRadioPower(boolean,boolean,boolean,boolean)>(z0, z1, z2, z3);

        return;
    }

    public void setServiceState(int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0, $i1;
        android.telephony.ServiceState $r2, $r3;
        com.android.internal.telephony.Phone $r4, $r6;
        com.android.internal.telephony.ServiceStateTracker $r5, $r7;
        java.lang.Throwable $r8;
        boolean z0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        $i1 = virtualinvoke $r2.<android.telephony.ServiceState: int getState()>();

        if $i1 == i0 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: android.telephony.ServiceState mSS>;

        virtualinvoke $r3.<android.telephony.ServiceState: void setVoiceRegState(int)>(i0);

        exitmonitor r0;

     label5:
        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void updateDataServiceState()>();

        if z0 == 0 goto label6;

        $r4 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r5 = virtualinvoke $r4.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        if $r5 == null goto label6;

        $r6 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Phone mDefaultPhone>;

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.Phone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>();

        virtualinvoke $r7.<com.android.internal.telephony.ServiceStateTracker: void onImsServiceStateChanged()>();

     label6:
        return;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void setTTYMode(int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void setTtyMode(int)>(i0);

        return;
    }

    public void setUiTTYMode(int, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        android.os.Message r1;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void setUiTTYMode(int,android.os.Message)>(i0, r1);

        return;
    }

    public volatile void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String r1, r2;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void setVoiceMailNumber(java.lang.String,java.lang.String,android.os.Message)>(r1, r2, r3);

        return;
    }

    public com.android.internal.telephony.Connection startConference(java.lang.String[], com.android.internal.telephony.PhoneInternalInterface$DialArgs) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.String[] r1;
        boolean $z0;
        com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs $r2, $r4;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r3;
        com.android.internal.telephony.Connection $r5;
        com.android.internal.telephony.PhoneInternalInterface$DialArgs r6;
        com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder r7;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: java.lang.String[];

        r6 := @parameter1: com.android.internal.telephony.PhoneInternalInterface$DialArgs;

        $z0 = r6 instanceof com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs;

        if $z0 != 0 goto label1;

        r7 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder 'from'(com.android.internal.telephony.PhoneInternalInterface$DialArgs)>(r6);

        goto label2;

     label1:
        $r2 = (com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs) r6;

        r7 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder 'from'(com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs)>($r2);

     label2:
        $r3 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        $r4 = virtualinvoke r7.<com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs build()>();

        $r5 = virtualinvoke $r3.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: com.android.internal.telephony.Connection startConference(java.lang.String[],com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs)>(r1, $r4);

        return $r5;
    }

    public void startDtmf(char)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        char c0;
        boolean $z0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r7;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        c0 := @parameter0: char;

        $z0 = staticinvoke <android.telephony.PhoneNumberUtils: boolean is12Key(char)>(c0);

        if $z0 != 0 goto label2;

        if c0 < 65 goto label1;

        if c0 <= 68 goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("startDtmf called with invalid character \'");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void loge(java.lang.String)>($r7);

        goto label3;

     label2:
        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r2.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void startDtmf(char)>(c0);

     label3:
        return;
    }

    public volatile void startNetworkScan(android.telephony.NetworkScanRequest, android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.telephony.NetworkScanRequest r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.telephony.NetworkScanRequest;

        r2 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void startNetworkScan(android.telephony.NetworkScanRequest,android.os.Message)>(r1, r2);

        return;
    }

    public volatile void startOnHoldTone(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.Connection r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void startOnHoldTone(com.android.internal.telephony.Connection)>(r1);

        return;
    }

    public volatile void startRingbackTone()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void startRingbackTone()>();

        return;
    }

    public void stopDtmf()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void stopDtmf()>();

        return;
    }

    public volatile void stopNetworkScan(android.os.Message)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void stopNetworkScan(android.os.Message)>(r1);

        return;
    }

    public volatile void stopRingbackTone()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void stopRingbackTone()>();

        return;
    }

    public void switchHoldingAndActive() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Use hold() and unhold() instead.");

        throw $r1;
    }

    public void unholdHeldCall() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        com.android.internal.telephony.imsphone.ImsPhoneCallTracker $r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        $r1 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.imsphone.ImsPhoneCallTracker mCT>;

        virtualinvoke $r1.<com.android.internal.telephony.imsphone.ImsPhoneCallTracker: void unholdHeldCall()>();

        return;
    }

    public volatile void unregisterForOnHoldTone(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void unregisterForOnHoldTone(android.os.Handler)>(r1);

        return;
    }

    public volatile void unregisterForRingbackTone(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void unregisterForRingbackTone(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForSilentRedial(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mSilentRedialRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForSuppServiceNotification(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.RegistrantList mSsnRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public volatile void unregisterForTtyModeReceived(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void unregisterForTtyModeReceived(android.os.Handler)>(r1);

        return;
    }

    public void unsetOnEcbModeExitResponse(android.os.Handler)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        android.os.Handler r1;
        com.android.internal.telephony.Registrant $r2;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.imsphone.ImsPhone: com.android.internal.telephony.Registrant mEcmExitRespRegistrant>;

        virtualinvoke $r2.<com.android.internal.telephony.Registrant: void clear()>();

        return;
    }

    public com.android.internal.telephony.PhoneInternalInterface$DialArgs updateDialArgsForVolteSilentRedial(com.android.internal.telephony.PhoneInternalInterface$DialArgs, int)
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;
        int i0;
        com.android.internal.telephony.PhoneInternalInterface$DialArgs$Builder $r1;
        com.android.internal.telephony.PhoneInternalInterface$DialArgs $r2, r8;
        boolean $z0, $z1;
        android.os.Bundle $r3, $r4;
        java.lang.String $r5;
        com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs $r7, $r11;
        com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder r9;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        r8 := @parameter0: com.android.internal.telephony.PhoneInternalInterface$DialArgs;

        i0 := @parameter1: int;

        if r8 == null goto label5;

        $z0 = r8 instanceof com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs;

        if $z0 == 0 goto label1;

        $r7 = (com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs) r8;

        r9 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder 'from'(com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs)>($r7);

        goto label2;

     label1:
        r9 = staticinvoke <com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder 'from'(com.android.internal.telephony.PhoneInternalInterface$DialArgs)>(r8);

     label2:
        $r3 = new android.os.Bundle;

        $r4 = r8.<com.android.internal.telephony.PhoneInternalInterface$DialArgs: android.os.Bundle intentExtras>;

        specialinvoke $r3.<android.os.Bundle: void <init>(android.os.Bundle)>($r4);

        if i0 != 3002 goto label3;

        $z1 = virtualinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: boolean isWifiCallingEnabled()>();

        if $z1 == 0 goto label3;

        $r5 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(18);

        virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("CallRadioTech", $r5);

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("trigger VoWifi emergency call");

        virtualinvoke r9.<com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.PhoneInternalInterface$DialArgs$Builder setIntentExtras(android.os.Bundle)>($r3);

        goto label4;

     label3:
        if i0 != 3001 goto label4;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhone: void logd(java.lang.String)>("trigger VoLte emergency call");

     label4:
        $r11 = virtualinvoke r9.<com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs$Builder: com.android.internal.telephony.imsphone.ImsPhone$ImsDialArgs build()>();

        return $r11;

     label5:
        $r1 = new com.android.internal.telephony.PhoneInternalInterface$DialArgs$Builder;

        specialinvoke $r1.<com.android.internal.telephony.PhoneInternalInterface$DialArgs$Builder: void <init>()>();

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.PhoneInternalInterface$DialArgs$Builder: com.android.internal.telephony.PhoneInternalInterface$DialArgs build()>();

        return $r2;
    }

    public volatile void updateServiceLocation()
    {
        com.android.internal.telephony.imsphone.ImsPhone r0;

        r0 := @this: com.android.internal.telephony.imsphone.ImsPhone;

        specialinvoke r0.<com.android.internal.telephony.imsphone.ImsPhoneBase: void updateServiceLocation()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.imsphone.ImsPhone: boolean VDBG> = 0;

        <com.android.internal.telephony.imsphone.ImsPhone: int RESTART_ECM_TIMER> = 0;

        <com.android.internal.telephony.imsphone.ImsPhone: java.lang.String LOG_TAG> = "ImsPhone";

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_VOICE_CALL_ENDED> = 67;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_SET_CLIR_DONE> = 63;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_SET_CALL_WAITING_DONE> = 61;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_SET_CALL_BARRING_DONE> = 59;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_SERVICE_STATE_CHANGED> = 66;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_INITIATE_VOLTE_SILENT_REDIAL> = 68;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_GET_CLIR_DONE> = 64;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_GET_CALL_WAITING_DONE> = 62;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_GET_CALL_BARRING_DONE> = 60;

        <com.android.internal.telephony.imsphone.ImsPhone: int EVENT_DEFAULT_PHONE_DATA_STATE_CHANGED> = 65;

        <com.android.internal.telephony.imsphone.ImsPhone: long DEFAULT_ECM_EXIT_TIMER_VALUE> = 300000L;

        <com.android.internal.telephony.imsphone.ImsPhone: boolean DBG> = 1;

        <com.android.internal.telephony.imsphone.ImsPhone: int CANCEL_ECM_TIMER> = 1;

        return;
    }
}
