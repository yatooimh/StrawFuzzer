public final class com.android.internal.telephony.nitz.TimeZoneLookupHelper extends java.lang.Object
{
    private android.timezone.CountryTimeZones mLastCountryTimeZones;

    public void <init>()
    {
        com.android.internal.telephony.nitz.TimeZoneLookupHelper r0;

        r0 := @this: com.android.internal.telephony.nitz.TimeZoneLookupHelper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static boolean countryUsesDifferentOffsets(long, java.util.List, android.icu.util.TimeZone)
    {
        long l0;
        java.lang.String r0, $r2;
        int i1, $i2;
        java.lang.Object $r1;
        boolean $z0, $z1;
        android.icu.util.TimeZone $r3, r5;
        java.util.List r4;
        java.util.Iterator r6;
        android.timezone.CountryTimeZones$TimeZoneMapping r7;

        l0 := @parameter0: long;

        r4 := @parameter1: java.util.List;

        r5 := @parameter2: android.icu.util.TimeZone;

        r0 = virtualinvoke r5.<android.icu.util.TimeZone: java.lang.String getID()>();

        i1 = virtualinvoke r5.<android.icu.util.TimeZone: int getOffset(long)>(l0);

        r6 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r1 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.timezone.CountryTimeZones$TimeZoneMapping) $r1;

        $r2 = virtualinvoke r7.<android.timezone.CountryTimeZones$TimeZoneMapping: java.lang.String getTimeZoneId()>();

        $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        $r3 = virtualinvoke r7.<android.timezone.CountryTimeZones$TimeZoneMapping: android.icu.util.TimeZone getTimeZone()>();

        $i2 = virtualinvoke $r3.<android.icu.util.TimeZone: int getOffset(long)>(l0);

        if i1 == $i2 goto label3;

        return 1;

     label3:
        goto label1;

     label4:
        return 0;
    }

    private android.timezone.CountryTimeZones getCountryTimeZones(java.lang.String)
    {
        com.android.internal.telephony.nitz.TimeZoneLookupHelper r0;
        android.timezone.CountryTimeZones $r2, $r4, r7, r8;
        android.timezone.TimeZoneFinder $r3;
        boolean $z0;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.internal.telephony.nitz.TimeZoneLookupHelper;

        r6 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r6);

        entermonitor r0;

     label01:
        $r2 = r0.<com.android.internal.telephony.nitz.TimeZoneLookupHelper: android.timezone.CountryTimeZones mLastCountryTimeZones>;

        if $r2 == null goto label03;

        $r4 = r0.<com.android.internal.telephony.nitz.TimeZoneLookupHelper: android.timezone.CountryTimeZones mLastCountryTimeZones>;

        $z0 = virtualinvoke $r4.<android.timezone.CountryTimeZones: boolean matchesCountryCode(java.lang.String)>(r6);

        if $z0 == 0 goto label03;

        r7 = r0.<com.android.internal.telephony.nitz.TimeZoneLookupHelper: android.timezone.CountryTimeZones mLastCountryTimeZones>;

        exitmonitor r0;

     label02:
        return r7;

     label03:
        $r3 = staticinvoke <android.timezone.TimeZoneFinder: android.timezone.TimeZoneFinder getInstance()>();

        r8 = virtualinvoke $r3.<android.timezone.TimeZoneFinder: android.timezone.CountryTimeZones lookupCountryTimeZones(java.lang.String)>(r6);

     label04:
        if r8 == null goto label06;

     label05:
        r0.<com.android.internal.telephony.nitz.TimeZoneLookupHelper: android.timezone.CountryTimeZones mLastCountryTimeZones> = r8;

     label06:
        exitmonitor r0;

     label07:
        return r8;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private static android.timezone.CountryTimeZones$OffsetResult lookupByInstantOffsetDst(long, int, java.lang.Boolean)
    {
        long l0;
        int i1, i2, i3;
        java.lang.Boolean r0;
        java.lang.String[] r1;
        android.icu.util.TimeZone r2, r5, r6;
        android.timezone.CountryTimeZones$OffsetResult $r3;
        java.lang.String $r4;
        boolean $z1, z2;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        r0 := @parameter2: java.lang.Boolean;

        r1 = staticinvoke <android.icu.util.TimeZone: java.lang.String[] getAvailableIDs()>();

        r5 = null;

        i2 = lengthof r1;

        i3 = 0;

     label1:
        z2 = 1;

        if i3 >= i2 goto label4;

        $r4 = r1[i3];

        r2 = staticinvoke <android.icu.util.TimeZone: android.icu.util.TimeZone getFrozenTimeZone(java.lang.String)>($r4);

        r6 = r5;

        $z1 = staticinvoke <com.android.internal.telephony.nitz.TimeZoneLookupHelper: boolean offsetMatchesAtTime(android.icu.util.TimeZone,int,java.lang.Boolean,long)>(r2, i1, r0, l0);

        if $z1 == 0 goto label3;

        if r5 != null goto label2;

        r6 = r2;

        goto label3;

     label2:
        z2 = 0;

        goto label4;

     label3:
        i3 = i3 + 1;

        r5 = r6;

        goto label1;

     label4:
        if r5 != null goto label5;

        return null;

     label5:
        $r3 = new android.timezone.CountryTimeZones$OffsetResult;

        specialinvoke $r3.<android.timezone.CountryTimeZones$OffsetResult: void <init>(android.icu.util.TimeZone,boolean)>(r5, z2);

        return $r3;
    }

    private static boolean offsetMatchesAtTime(android.icu.util.TimeZone, int, java.lang.Boolean, long)
    {
        android.icu.util.TimeZone r0;
        int i0, $i2, $i3, $i4, $i5;
        java.lang.Boolean r1;
        long l1;
        int[] r2;
        boolean z0, z1, z2;

        r0 := @parameter0: android.icu.util.TimeZone;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.Boolean;

        l1 := @parameter3: long;

        r2 = newarray (int)[2];

        z1 = 0;

        virtualinvoke r0.<android.icu.util.TimeZone: void getOffset(long,boolean,int[])>(l1, 0, r2);

        $i3 = r2[0];

        $i2 = r2[1];

        $i4 = $i3 + $i2;

        if i0 == $i4 goto label1;

        return 0;

     label1:
        if r1 == null goto label4;

        z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>();

        $i5 = r2[1];

        if $i5 == 0 goto label2;

        z2 = 1;

        goto label3;

     label2:
        z2 = 0;

     label3:
        if z0 != z2 goto label5;

     label4:
        z1 = 1;

     label5:
        return z1;
    }

    public boolean countryUsesUtc(java.lang.String, long)
    {
        com.android.internal.telephony.nitz.TimeZoneLookupHelper r0;
        long l0;
        boolean $z1, z2, z3;
        java.lang.String r1;
        android.timezone.CountryTimeZones r2;

        r0 := @this: com.android.internal.telephony.nitz.TimeZoneLookupHelper;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if z2 == 0 goto label1;

        return 0;

     label1:
        r2 = specialinvoke r0.<com.android.internal.telephony.nitz.TimeZoneLookupHelper: android.timezone.CountryTimeZones getCountryTimeZones(java.lang.String)>(r1);

        z3 = 0;

        if r2 == null goto label2;

        z3 = 0;

        $z1 = virtualinvoke r2.<android.timezone.CountryTimeZones: boolean hasUtcZone(long)>(l0);

        if $z1 == 0 goto label2;

        z3 = 1;

     label2:
        return z3;
    }

    public com.android.internal.telephony.nitz.TimeZoneLookupHelper$CountryResult lookupByCountry(java.lang.String, long)
    {
        com.android.internal.telephony.nitz.TimeZoneLookupHelper r0;
        long l0;
        android.icu.util.TimeZone r1;
        boolean z0, $z1, $z2;
        int $i1;
        java.lang.StringBuilder $r2, $r7, $r10;
        java.lang.String r13, r15, $r21;
        android.timezone.CountryTimeZones r14;
        byte b2;
        java.util.List r16;
        com.android.internal.telephony.nitz.TimeZoneLookupHelper$CountryResult $r20;

        r0 := @this: com.android.internal.telephony.nitz.TimeZoneLookupHelper;

        r13 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        r14 = specialinvoke r0.<com.android.internal.telephony.nitz.TimeZoneLookupHelper: android.timezone.CountryTimeZones getCountryTimeZones(java.lang.String)>(r13);

        if r14 != null goto label1;

        return null;

     label1:
        r1 = virtualinvoke r14.<android.timezone.CountryTimeZones: android.icu.util.TimeZone getDefaultTimeZone()>();

        if r1 != null goto label2;

        return null;

     label2:
        $z1 = virtualinvoke r14.<android.timezone.CountryTimeZones: boolean isDefaultTimeZoneBoosted()>();

        if $z1 == 0 goto label3;

        b2 = 2;

        r15 = "Country default is boosted";

        goto label8;

     label3:
        r16 = virtualinvoke r14.<android.timezone.CountryTimeZones: java.util.List getEffectiveTimeZoneMappingsAt(long)>(l0);

        $z2 = interfaceinvoke r16.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label4;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No effective time zones found at whenMillis=");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        r15 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        b2 = 4;

        goto label8;

     label4:
        $i1 = interfaceinvoke r16.<java.util.List: int size()>();

        if $i1 != 1 goto label5;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("One effective time zone found at whenMillis=");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        r15 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        b2 = 1;

        goto label8;

     label5:
        z0 = staticinvoke <com.android.internal.telephony.nitz.TimeZoneLookupHelper: boolean countryUsesDifferentOffsets(long,java.util.List,android.icu.util.TimeZone)>(l0, r16, r1);

        if z0 == 0 goto label6;

        b2 = 4;

        goto label7;

     label6:
        b2 = 3;

     label7:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("countryUsesDifferentOffsets=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at whenMillis=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        r15 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

     label8:
        $r20 = new com.android.internal.telephony.nitz.TimeZoneLookupHelper$CountryResult;

        $r21 = virtualinvoke r1.<android.icu.util.TimeZone: java.lang.String getID()>();

        specialinvoke $r20.<com.android.internal.telephony.nitz.TimeZoneLookupHelper$CountryResult: void <init>(java.lang.String,int,java.lang.String)>($r21, b2, r15);

        return $r20;
    }

    public android.timezone.CountryTimeZones$OffsetResult lookupByNitz(com.android.internal.telephony.NitzData)
    {
        com.android.internal.telephony.nitz.TimeZoneLookupHelper r0;
        int i0, $i2;
        long l1;
        android.timezone.CountryTimeZones$OffsetResult r1, r5;
        com.android.internal.telephony.NitzData r2;
        java.lang.Integer r3;
        java.lang.Boolean r4;
        boolean z0;

        r0 := @this: com.android.internal.telephony.nitz.TimeZoneLookupHelper;

        r2 := @parameter0: com.android.internal.telephony.NitzData;

        i0 = virtualinvoke r2.<com.android.internal.telephony.NitzData: int getLocalOffsetMillis()>();

        l1 = virtualinvoke r2.<com.android.internal.telephony.NitzData: long getCurrentTimeInMillis()>();

        r3 = virtualinvoke r2.<com.android.internal.telephony.NitzData: java.lang.Integer getDstAdjustmentMillis()>();

        if r3 != null goto label1;

        r4 = null;

        goto label4;

     label1:
        $i2 = virtualinvoke r3.<java.lang.Integer: int intValue()>();

        if $i2 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

     label4:
        r1 = staticinvoke <com.android.internal.telephony.nitz.TimeZoneLookupHelper: android.timezone.CountryTimeZones$OffsetResult lookupByInstantOffsetDst(long,int,java.lang.Boolean)>(l1, i0, r4);

        r5 = r1;

        if r1 != null goto label5;

        r5 = r1;

        if r4 == null goto label5;

        r5 = staticinvoke <com.android.internal.telephony.nitz.TimeZoneLookupHelper: android.timezone.CountryTimeZones$OffsetResult lookupByInstantOffsetDst(long,int,java.lang.Boolean)>(l1, i0, null);

     label5:
        return r5;
    }

    public android.timezone.CountryTimeZones$OffsetResult lookupByNitzCountry(com.android.internal.telephony.NitzData, java.lang.String)
    {
        com.android.internal.telephony.nitz.TimeZoneLookupHelper r0;
        com.android.internal.telephony.NitzData r1;
        android.timezone.CountryTimeZones r2;
        android.icu.util.TimeZone r3;
        int $i0, $i2, $i4;
        long $l1, $l3;
        android.timezone.CountryTimeZones$OffsetResult $r4, $r5;
        java.lang.String r6;
        java.lang.Integer r7;
        boolean z0;

        r0 := @this: com.android.internal.telephony.nitz.TimeZoneLookupHelper;

        r1 := @parameter0: com.android.internal.telephony.NitzData;

        r6 := @parameter1: java.lang.String;

        r2 = specialinvoke r0.<com.android.internal.telephony.nitz.TimeZoneLookupHelper: android.timezone.CountryTimeZones getCountryTimeZones(java.lang.String)>(r6);

        if r2 != null goto label1;

        return null;

     label1:
        r3 = staticinvoke <android.icu.util.TimeZone: android.icu.util.TimeZone getDefault()>();

        r7 = virtualinvoke r1.<com.android.internal.telephony.NitzData: java.lang.Integer getDstAdjustmentMillis()>();

        if r7 != null goto label2;

        $l3 = virtualinvoke r1.<com.android.internal.telephony.NitzData: long getCurrentTimeInMillis()>();

        $i4 = virtualinvoke r1.<com.android.internal.telephony.NitzData: int getLocalOffsetMillis()>();

        $r5 = virtualinvoke r2.<android.timezone.CountryTimeZones: android.timezone.CountryTimeZones$OffsetResult lookupByOffsetWithBias(long,android.icu.util.TimeZone,int)>($l3, r3, $i4);

        return $r5;

     label2:
        $i0 = virtualinvoke r7.<java.lang.Integer: int intValue()>();

        if $i0 == 0 goto label3;

        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        $l1 = virtualinvoke r1.<com.android.internal.telephony.NitzData: long getCurrentTimeInMillis()>();

        $i2 = virtualinvoke r1.<com.android.internal.telephony.NitzData: int getLocalOffsetMillis()>();

        $r4 = virtualinvoke r2.<android.timezone.CountryTimeZones: android.timezone.CountryTimeZones$OffsetResult lookupByOffsetWithBias(long,android.icu.util.TimeZone,int,boolean)>($l1, r3, $i2, z0);

        return $r4;
    }
}
