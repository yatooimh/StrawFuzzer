public class com.android.internal.telephony.phonenumbers.PhoneNumberUtil extends java.lang.Object
{
    private static final java.util.Map ALL_PLUS_NUMBER_GROUPING_SYMBOLS;
    private static final java.util.Map ALPHA_MAPPINGS;
    private static final java.util.Map ALPHA_PHONE_MAPPINGS;
    private static final java.util.regex.Pattern CAPTURING_DIGIT_PATTERN;
    private static final java.lang.String CAPTURING_EXTN_DIGITS;
    private static final java.lang.String CC_STRING;
    private static final java.lang.String COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX;
    private static final java.lang.String DEFAULT_EXTN_PREFIX;
    private static final java.util.Map DIALLABLE_CHAR_MAPPINGS;
    private static final java.lang.String DIGITS;
    private static final java.util.regex.Pattern EXTN_PATTERN;
    static final java.lang.String EXTN_PATTERNS_FOR_MATCHING;
    private static final java.lang.String EXTN_PATTERNS_FOR_PARSING;
    private static final java.lang.String FG_STRING;
    private static final java.util.regex.Pattern FIRST_GROUP_ONLY_PREFIX_PATTERN;
    private static final java.util.regex.Pattern FIRST_GROUP_PATTERN;
    private static final java.util.Set GEO_MOBILE_COUNTRIES;
    private static final java.util.Set GEO_MOBILE_COUNTRIES_WITHOUT_MOBILE_AREA_CODES;
    private static final int MAX_INPUT_STRING_LENGTH;
    static final int MAX_LENGTH_COUNTRY_CODE;
    static final int MAX_LENGTH_FOR_NSN;
    private static final int MIN_LENGTH_FOR_NSN;
    private static final java.util.Map MOBILE_TOKEN_MAPPINGS;
    private static final int NANPA_COUNTRY_CODE;
    static final java.util.regex.Pattern NON_DIGITS_PATTERN;
    private static final java.lang.String NP_STRING;
    static final java.lang.String PLUS_CHARS;
    static final java.util.regex.Pattern PLUS_CHARS_PATTERN;
    static final char PLUS_SIGN;
    static final int REGEX_FLAGS;
    public static final java.lang.String REGION_CODE_FOR_NON_GEO_ENTITY;
    private static final java.lang.String RFC3966_EXTN_PREFIX;
    private static final java.lang.String RFC3966_ISDN_SUBADDRESS;
    private static final java.lang.String RFC3966_PHONE_CONTEXT;
    private static final java.lang.String RFC3966_PREFIX;
    private static final java.lang.String SECOND_NUMBER_START;
    static final java.util.regex.Pattern SECOND_NUMBER_START_PATTERN;
    private static final java.util.regex.Pattern SEPARATOR_PATTERN;
    private static final java.util.regex.Pattern SINGLE_INTERNATIONAL_PREFIX;
    private static final char STAR_SIGN;
    private static final java.lang.String UNKNOWN_REGION;
    private static final java.lang.String UNWANTED_END_CHARS;
    static final java.util.regex.Pattern UNWANTED_END_CHAR_PATTERN;
    private static final java.lang.String VALID_ALPHA;
    private static final java.util.regex.Pattern VALID_ALPHA_PHONE_PATTERN;
    private static final java.lang.String VALID_PHONE_NUMBER;
    private static final java.util.regex.Pattern VALID_PHONE_NUMBER_PATTERN;
    static final java.lang.String VALID_PUNCTUATION;
    private static final java.lang.String VALID_START_CHAR;
    private static final java.util.regex.Pattern VALID_START_CHAR_PATTERN;
    private static com.android.internal.telephony.phonenumbers.PhoneNumberUtil instance;
    private static final java.util.logging.Logger logger;
    private final java.util.Map countryCallingCodeToRegionCodeMap;
    private final java.util.Set countryCodesForNonGeographicalRegion;
    private final com.android.internal.telephony.phonenumbers.internal.MatcherApi matcherApi;
    private final com.android.internal.telephony.phonenumbers.MetadataSource metadataSource;
    private final java.util.Set nanpaRegions;
    private final com.android.internal.telephony.phonenumbers.internal.RegexCache regexCache;
    private final java.util.Set supportedRegions;

    static void <clinit>()
    {
        java.lang.Character r0, r1, r2, r3, $r31, $r33, $r35, $r37, $r39, $r41, $r43, $r45, $r47, $r49, $r51, $r53, $r55, $r57, $r59, $r61, $r63, $r65, $r67, $r69, $r71, $r73, $r75, $r77, $r79, $r81, $r95, $r96, $r98, $r99, $r101, $r102, $r104, $r105, $r107, $r108, $r110, $r111, $r113, $r114, $r116, $r117, $r119, $r120, $r122, $r123, $r125, $r126, $r128, $r129, $r131, $r132, $r134, $r135, $r137, $r138, $r140, $r141, $r200, $r201, $r202, $r204, $r205, r209, r212, r213, r215, r216, r217, r220, r221, r222;
        char c0, $c1;
        java.lang.Class $r5;
        java.lang.String $r6, $r149, $r150, $r155, $r156, $r157, $r159, $r169, $r173, $r177, $r178, $r179, $r182, $r185, $r188, $r191, $r194;
        java.util.logging.Logger $r7;
        java.util.HashMap $r8, $r19, $r30, $r84, $r87, $r92;
        java.util.Map $r10, $r83, $r85, $r86, $r91, $r93, $r143, $r146, $r152;
        java.util.HashSet $r11, $r14;
        java.lang.Integer $r12, $r15, $r16, $r17, r208;
        java.util.Set $r13, $r18, $r94, $r147, $r153;
        boolean $z6;
        java.util.regex.Pattern $r144, $r160, $r161, $r162, $r163, $r164, $r165, $r166, $r186, $r195, $r196, $r197, $r198;
        java.lang.StringBuilder $r145, $r167, $r174, $r180, $r187;
        java.lang.Object[] $r148, $r154;
        java.lang.Object $r199;
        java.util.Iterator r224;

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String VALID_START_CHAR> = "[+\uff0b\\p{Nd}]";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String VALID_PUNCTUATION> = "-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String UNWANTED_END_CHARS> = "[[\\P{N}&&\\P{L}]&&[^#]]+$";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String UNKNOWN_REGION> = "ZZ";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: char STAR_SIGN> = 42;

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String SECOND_NUMBER_START> = "[\\\\/] *x";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String RFC3966_PREFIX> = "tel:";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String RFC3966_PHONE_CONTEXT> = ";phone-context=";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String RFC3966_ISDN_SUBADDRESS> = ";isub=";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String RFC3966_EXTN_PREFIX> = ";ext=";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String REGION_CODE_FOR_NON_GEO_ENTITY> = "001";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int REGEX_FLAGS> = 66;

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: char PLUS_SIGN> = 43;

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String PLUS_CHARS> = "+\uff0b";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String NP_STRING> = "$NP";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int NANPA_COUNTRY_CODE> = 1;

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int MIN_LENGTH_FOR_NSN> = 2;

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int MAX_LENGTH_FOR_NSN> = 17;

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int MAX_LENGTH_COUNTRY_CODE> = 3;

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int MAX_INPUT_STRING_LENGTH> = 250;

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String FG_STRING> = "$FG";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String DIGITS> = "\\p{Nd}";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String DEFAULT_EXTN_PREFIX> = " ext. ";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX> = "3";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String CC_STRING> = "$CC";

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String CAPTURING_EXTN_DIGITS> = "(\\p{Nd}{1,7})";

        $r5 = class "Lcom/android/internal/telephony/phonenumbers/PhoneNumberUtil;";

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = staticinvoke <java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>($r6);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r208 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(54);

        r209 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(54);

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r208, "9");

        $r10 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r8);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map MOBILE_TOKEN_MAPPINGS> = $r10;

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(86);

        virtualinvoke $r11.<java.util.HashSet: boolean add(java.lang.Object)>($r12);

        $r13 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r11);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set GEO_MOBILE_COUNTRIES_WITHOUT_MOBILE_AREA_CODES> = $r13;

        $r14 = new java.util.HashSet;

        specialinvoke $r14.<java.util.HashSet: void <init>()>();

        r212 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(52);

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(52);

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>($r15);

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>(r208);

        r213 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(55);

        $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(55);

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>($r16);

        $r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(62);

        virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>($r17);

        virtualinvoke $r14.<java.util.HashSet: boolean addAll(java.util.Collection)>($r11);

        $r18 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r14);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set GEO_MOBILE_COUNTRIES> = $r18;

        $r19 = new java.util.HashMap;

        specialinvoke $r19.<java.util.HashMap: void <init>()>();

        r215 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(48);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r215, r215);

        r216 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(49);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r216, r216);

        r0 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(50);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r0);

        r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(51);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r1);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r212, r212);

        r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(53);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r2);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r209, r209);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r213, r213);

        r217 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(56);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r217, r217);

        r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(57);

        virtualinvoke $r19.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r3);

        $r30 = new java.util.HashMap;

        specialinvoke $r30.<java.util.HashMap: void <init>(int)>(40);

        $r31 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r31, r0);

        $r33 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(66);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, r0);

        $r35 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(67);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r35, r0);

        $r37 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(68);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, r1);

        $r39 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(69);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, r1);

        $r41 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(70);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r41, r1);

        $r43 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(71);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r43, r212);

        $r45 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(72);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r45, r212);

        $r47 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(73);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r47, r212);

        $r49 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(74);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r49, r2);

        $r51 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(75);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r51, r2);

        $r53 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(76);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r53, r2);

        $r55 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(77);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r55, r209);

        $r57 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(78);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r57, r209);

        $r59 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(79);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r59, r209);

        $r61 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(80);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r61, r213);

        $r63 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(81);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r63, r213);

        $r65 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(82);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r65, r213);

        $r67 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(83);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r67, r213);

        $r69 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(84);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r69, r217);

        $r71 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(85);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r71, r217);

        $r73 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(86);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r73, r217);

        $r75 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(87);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r75, r3);

        $r77 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(88);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r77, r3);

        $r79 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(89);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r79, r3);

        $r81 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(90);

        virtualinvoke $r30.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r81, r3);

        $r83 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r30);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_MAPPINGS> = $r83;

        $r84 = new java.util.HashMap;

        specialinvoke $r84.<java.util.HashMap: void <init>(int)>(100);

        $r85 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_MAPPINGS>;

        virtualinvoke $r84.<java.util.HashMap: void putAll(java.util.Map)>($r85);

        virtualinvoke $r84.<java.util.HashMap: void putAll(java.util.Map)>($r19);

        $r86 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r84);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_PHONE_MAPPINGS> = $r86;

        $r87 = new java.util.HashMap;

        specialinvoke $r87.<java.util.HashMap: void <init>()>();

        virtualinvoke $r87.<java.util.HashMap: void putAll(java.util.Map)>($r19);

        r220 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(43);

        virtualinvoke $r87.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r220, r220);

        r221 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(42);

        virtualinvoke $r87.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r221, r221);

        r222 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(35);

        virtualinvoke $r87.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r222, r222);

        $r91 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r87);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map DIALLABLE_CHAR_MAPPINGS> = $r91;

        $r92 = new java.util.HashMap;

        specialinvoke $r92.<java.util.HashMap: void <init>()>();

        $r93 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_MAPPINGS>;

        $r94 = interfaceinvoke $r93.<java.util.Map: java.util.Set keySet()>();

        r224 = interfaceinvoke $r94.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z6 = interfaceinvoke r224.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label2;

        $r199 = interfaceinvoke r224.<java.util.Iterator: java.lang.Object next()>();

        $r200 = (java.lang.Character) $r199;

        c0 = virtualinvoke $r200.<java.lang.Character: char charValue()>();

        $c1 = staticinvoke <java.lang.Character: char toLowerCase(char)>(c0);

        $r201 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1);

        $r202 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r201, $r202);

        $r204 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        $r205 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r204, $r205);

        goto label1;

     label2:
        virtualinvoke $r92.<java.util.HashMap: void putAll(java.util.Map)>($r19);

        $r95 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        $r96 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r95, $r96);

        $r98 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65293);

        $r99 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r98, $r99);

        $r101 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8208);

        $r102 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r101, $r102);

        $r104 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8209);

        $r105 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r104, $r105);

        $r107 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8210);

        $r108 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r107, $r108);

        $r110 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8211);

        $r111 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r110, $r111);

        $r113 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8212);

        $r114 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r113, $r114);

        $r116 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8213);

        $r117 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r116, $r117);

        $r119 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8722);

        $r120 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(45);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r119, $r120);

        $r122 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(47);

        $r123 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(47);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r122, $r123);

        $r125 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65295);

        $r126 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(47);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r125, $r126);

        $r128 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        $r129 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r128, $r129);

        $r131 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(12288);

        $r132 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r131, $r132);

        $r134 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(8288);

        $r135 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(32);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r134, $r135);

        $r137 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(46);

        $r138 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(46);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r137, $r138);

        $r140 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(65294);

        $r141 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(46);

        virtualinvoke $r92.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r140, $r141);

        $r143 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r92);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map ALL_PLUS_NUMBER_GROUPING_SYMBOLS> = $r143;

        $r144 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\d]+(?:[~\u2053\u223c\uff5e][\\d]+)?");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SINGLE_INTERNATIONAL_PREFIX> = $r144;

        $r145 = new java.lang.StringBuilder;

        specialinvoke $r145.<java.lang.StringBuilder: void <init>()>();

        $r146 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_MAPPINGS>;

        $r147 = interfaceinvoke $r146.<java.util.Map: java.util.Set keySet()>();

        $r148 = interfaceinvoke $r147.<java.util.Set: java.lang.Object[] toArray()>();

        $r149 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r148);

        $r150 = virtualinvoke $r149.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[, \\[\\]]", "");

        virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r150);

        $r152 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_MAPPINGS>;

        $r153 = interfaceinvoke $r152.<java.util.Map: java.util.Set keySet()>();

        $r154 = interfaceinvoke $r153.<java.util.Set: java.lang.Object[] toArray()>();

        $r155 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r154);

        $r156 = virtualinvoke $r155.<java.lang.String: java.lang.String toLowerCase()>();

        $r157 = virtualinvoke $r156.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("[, \\[\\]]", "");

        virtualinvoke $r145.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r157);

        $r159 = virtualinvoke $r145.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String VALID_ALPHA> = $r159;

        $r160 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[+\uff0b]+");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern PLUS_CHARS_PATTERN> = $r160;

        $r161 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e]+");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SEPARATOR_PATTERN> = $r161;

        $r162 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\p{Nd})");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern CAPTURING_DIGIT_PATTERN> = $r162;

        $r163 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[+\uff0b\\p{Nd}]");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_START_CHAR_PATTERN> = $r163;

        $r164 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[\\\\/] *x");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SECOND_NUMBER_START_PATTERN> = $r164;

        $r165 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("[[\\P{N}&&\\P{L}]&&[^#]]+$");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern UNWANTED_END_CHAR_PATTERN> = $r165;

        $r166 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(?:.*?[A-Za-z]){3}.*");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_ALPHA_PHONE_PATTERN> = $r166;

        $r167 = new java.lang.StringBuilder;

        specialinvoke $r167.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\p{Nd}{2}|[+\uff0b]*+(?:[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e*]*\\p{Nd}){3,}[-x\u2010-\u2015\u2212\u30fc\uff0d-\uff0f \u00a0\u00ad\u200b\u2060\u3000()\uff08\uff09\uff3b\uff3d.\\[\\]/~\u2053\u223c\uff5e*");

        $r169 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String VALID_ALPHA>;

        virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r169);

        virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\p{Nd}");

        virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]*");

        $r173 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.String toString()>();

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String VALID_PHONE_NUMBER> = $r173;

        $r174 = new java.lang.StringBuilder;

        specialinvoke $r174.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r174.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",;");

        virtualinvoke $r174.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x\uff58#\uff03~\uff5e");

        $r177 = virtualinvoke $r174.<java.lang.StringBuilder: java.lang.String toString()>();

        $r178 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String createExtnPattern(java.lang.String)>($r177);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String EXTN_PATTERNS_FOR_PARSING> = $r178;

        $r179 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String createExtnPattern(java.lang.String)>("x\uff58#\uff03~\uff5e");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String EXTN_PATTERNS_FOR_MATCHING> = $r179;

        $r180 = new java.lang.StringBuilder;

        specialinvoke $r180.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r180.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r182 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String EXTN_PATTERNS_FOR_PARSING>;

        virtualinvoke $r180.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r182);

        virtualinvoke $r180.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")$");

        $r185 = virtualinvoke $r180.<java.lang.StringBuilder: java.lang.String toString()>();

        $r186 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r185, 66);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern EXTN_PATTERN> = $r186;

        $r187 = new java.lang.StringBuilder;

        specialinvoke $r187.<java.lang.StringBuilder: void <init>()>();

        $r188 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String VALID_PHONE_NUMBER>;

        virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r188);

        virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(?:");

        $r191 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String EXTN_PATTERNS_FOR_PARSING>;

        virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r191);

        virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")?");

        $r194 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.String toString()>();

        $r195 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>($r194, 66);

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_PHONE_NUMBER_PATTERN> = $r195;

        $r196 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\D+)");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern NON_DIGITS_PATTERN> = $r196;

        $r197 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("(\\$\\d)");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FIRST_GROUP_PATTERN> = $r197;

        $r198 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>("\\(?\\$1\\)?");

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FIRST_GROUP_ONLY_PREFIX_PATTERN> = $r198;

        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil instance> = null;

        return;
    }

    void <init>(com.android.internal.telephony.phonenumbers.MetadataSource, java.util.Map)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.util.Map r1;
        java.util.Map$Entry r2;
        java.util.List r3;
        com.android.internal.telephony.phonenumbers.internal.MatcherApi $r4;
        java.util.HashSet $r5, $r7, $r8;
        com.android.internal.telephony.phonenumbers.internal.RegexCache $r6;
        java.util.Set $r9, $r10, $r11, $r19, $r22;
        boolean $z0, $z1, $z4;
        java.lang.Integer $r12;
        java.lang.Object $r13, $r17, $r18, $r21, $r23;
        java.util.Collection $r14;
        java.util.logging.Level $r15;
        java.util.logging.Logger $r16;
        int $i0;
        java.lang.String $r20;
        com.android.internal.telephony.phonenumbers.MetadataSource r24;
        java.util.Iterator r25;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r24 := @parameter0: com.android.internal.telephony.phonenumbers.MetadataSource;

        r1 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r4 = staticinvoke <com.android.internal.telephony.phonenumbers.internal.RegexBasedMatcher: com.android.internal.telephony.phonenumbers.internal.MatcherApi create()>();

        r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.MatcherApi matcherApi> = $r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>(int)>(35);

        r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set nanpaRegions> = $r5;

        $r6 = new com.android.internal.telephony.phonenumbers.internal.RegexCache;

        specialinvoke $r6.<com.android.internal.telephony.phonenumbers.internal.RegexCache: void <init>(int)>(100);

        r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.RegexCache regexCache> = $r6;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>(int)>(320);

        r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set supportedRegions> = $r7;

        $r8 = new java.util.HashSet;

        specialinvoke $r8.<java.util.HashSet: void <init>()>();

        r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set countryCodesForNonGeographicalRegion> = $r8;

        r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.MetadataSource metadataSource> = r24;

        r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap> = r1;

        $r9 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r25 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r17 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r17;

        $r18 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        r3 = (java.util.List) $r18;

        $i0 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i0 != 1 goto label2;

        $r20 = "001";

        $r21 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0);

        $z4 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>($r21);

        if $z4 == 0 goto label2;

        $r22 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set countryCodesForNonGeographicalRegion>;

        $r23 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>();

        interfaceinvoke $r22.<java.util.Set: boolean add(java.lang.Object)>($r23);

        goto label3;

     label2:
        $r19 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set supportedRegions>;

        interfaceinvoke $r19.<java.util.Set: boolean addAll(java.util.Collection)>(r3);

     label3:
        goto label1;

     label4:
        $r10 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set supportedRegions>;

        $z1 = interfaceinvoke $r10.<java.util.Set: boolean remove(java.lang.Object)>("001");

        if $z1 == 0 goto label5;

        $r16 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r15 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        virtualinvoke $r16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r15, "invalid metadata (country calling code was mapped to the non-geo entity as well as specific region(s))");

     label5:
        $r11 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set nanpaRegions>;

        $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r12);

        $r14 = (java.util.Collection) $r13;

        interfaceinvoke $r11.<java.util.Set: boolean addAll(java.util.Collection)>($r14);

        return;
    }

    private void buildNationalNumberForParsing(java.lang.String, java.lang.StringBuilder)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r6, $r7, $r9, $r10, $r12;
        java.lang.StringBuilder r2;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, i8, i9, i10, i11;
        java.lang.CharSequence $r3;
        char $c7;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.StringBuilder;

        i0 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>(";phone-context=");

        if i0 < 0 goto label5;

        $r6 = ";phone-context=";

        $i3 = virtualinvoke $r6.<java.lang.String: int length()>();

        i1 = $i3 + i0;

        $i4 = virtualinvoke r1.<java.lang.String: int length()>();

        $i5 = $i4 - 1;

        if i1 >= $i5 goto label2;

        $c7 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1);

        if $c7 != 43 goto label2;

        i8 = virtualinvoke r1.<java.lang.String: int indexOf(int,int)>(59, i1);

        if i8 <= 0 goto label1;

        $r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i1, i8);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        goto label2;

     label1:
        $r10 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int)>(i1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

     label2:
        i9 = virtualinvoke r1.<java.lang.String: int indexOf(java.lang.String)>("tel:");

        if i9 < 0 goto label3;

        $r9 = "tel:";

        $i6 = virtualinvoke $r9.<java.lang.String: int length()>();

        i10 = $i6 + i9;

        goto label4;

     label3:
        i10 = 0;

     label4:
        $r7 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i10, i0);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label6;

     label5:
        $r3 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.CharSequence extractPossibleNumber(java.lang.CharSequence)>(r1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r3);

     label6:
        i11 = virtualinvoke r2.<java.lang.StringBuilder: int indexOf(java.lang.String)>(";isub=");

        if i11 <= 0 goto label7;

        $i2 = virtualinvoke r2.<java.lang.StringBuilder: int length()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(i11, $i2);

     label7:
        return;
    }

    private boolean checkRegionForParsing(java.lang.CharSequence, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        boolean $z0, $z1;
        int $i0;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r2);

        if $z0 != 0 goto label2;

        if r1 == null goto label1;

        $i0 = interfaceinvoke r1.<java.lang.CharSequence: int length()>();

        if $i0 == 0 goto label1;

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern PLUS_CHARS_PATTERN>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z1 = virtualinvoke $r4.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z1 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public static java.lang.String convertAlphaCharactersInNumber(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_PHONE_MAPPINGS>;

        $r2 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeHelper(java.lang.CharSequence,java.util.Map,boolean)>(r0, $r1, 0);

        return $r2;
    }

    private static com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber copyCoreFieldsOnly(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r0, $r2;
        int $i0, $i2, $i3;
        long $l1;
        java.lang.String $r5, $r8;
        boolean $z0;

        r0 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $r2 = new com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r2.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        $i0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        virtualinvoke $r2.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>($i0);

        $l1 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

        virtualinvoke $r2.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setNationalNumber(long)>($l1);

        $r5 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $i2 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i2 <= 0 goto label1;

        $r8 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        virtualinvoke $r2.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setExtension(java.lang.String)>($r8);

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean isItalianLeadingZero()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r2.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setItalianLeadingZero(boolean)>(1);

        $i3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getNumberOfLeadingZeros()>();

        virtualinvoke $r2.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setNumberOfLeadingZeros(int)>($i3);

     label2:
        return $r2;
    }

    private static java.lang.String createExtnPattern(java.lang.String)
    {
        java.lang.String r0, $r10;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: java.lang.String;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";ext=(\\p{Nd}{1,7})|[ \u00a0\\t,]*(?:e?xt(?:ensi(?:o\u0301?|\u00f3))?n?|\uff45?\uff58\uff54\uff4e?|\u0434\u043e\u0431|[");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]|int|anexo|\uff49\uff4e\uff54)[:\\.\uff0e]?[ \u00a0\\t,-]*");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(\\p{Nd}{1,7})");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#?|[- ]+(");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\p{Nd}");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{1,5})#");

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    public static com.android.internal.telephony.phonenumbers.PhoneNumberUtil createInstance(com.android.internal.telephony.phonenumbers.MetadataLoader)
    {
        com.android.internal.telephony.phonenumbers.MetadataLoader r0;
        java.lang.IllegalArgumentException $r1;
        com.android.internal.telephony.phonenumbers.MultiFileMetadataSourceImpl $r2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil $r3;

        r0 := @parameter0: com.android.internal.telephony.phonenumbers.MetadataLoader;

        if r0 == null goto label1;

        $r2 = new com.android.internal.telephony.phonenumbers.MultiFileMetadataSourceImpl;

        specialinvoke $r2.<com.android.internal.telephony.phonenumbers.MultiFileMetadataSourceImpl: void <init>(com.android.internal.telephony.phonenumbers.MetadataLoader)>(r0);

        $r3 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil createInstance(com.android.internal.telephony.phonenumbers.MetadataSource)>($r2);

        return $r3;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("metadataLoader could not be null.");

        throw $r1;
    }

    private static com.android.internal.telephony.phonenumbers.PhoneNumberUtil createInstance(com.android.internal.telephony.phonenumbers.MetadataSource)
    {
        com.android.internal.telephony.phonenumbers.MetadataSource r0;
        java.lang.IllegalArgumentException $r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil $r2;
        java.util.Map $r3;

        r0 := @parameter0: com.android.internal.telephony.phonenumbers.MetadataSource;

        if r0 == null goto label1;

        $r2 = new com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        $r3 = staticinvoke <com.android.internal.telephony.phonenumbers.CountryCodeToRegionCodeMap: java.util.Map getCountryCodeToRegionCodeMap()>();

        specialinvoke $r2.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void <init>(com.android.internal.telephony.phonenumbers.MetadataSource,java.util.Map)>(r0, $r3);

        return $r2;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("metadataSource could not be null.");

        throw $r1;
    }

    private static boolean descHasData(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)
    {
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasExampleNumber()>();

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean descHasPossibleNumberData(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r0);

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasNationalNumberPattern()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    private static boolean descHasPossibleNumberData(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)
    {
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc r0;
        int i0, $i1;
        boolean z0;

        r0 := @parameter0: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc;

        i0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: int getPossibleLengthCount()>();

        z0 = 0;

        if i0 != 1 goto label1;

        $i1 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: int getPossibleLength(int)>(0);

        if $i1 == -1 goto label2;

     label1:
        z0 = 1;

     label2:
        return z0;
    }

    static java.lang.CharSequence extractPossibleNumber(java.lang.CharSequence)
    {
        java.util.regex.Pattern $r0, $r1, $r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3;
        java.lang.CharSequence r3, r5, r7, r9;
        java.util.regex.Matcher r4, r6, r8;

        r3 := @parameter0: java.lang.CharSequence;

        $r0 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_START_CHAR_PATTERN>;

        r4 = virtualinvoke $r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r3);

        $z0 = virtualinvoke r4.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        $i0 = virtualinvoke r4.<java.util.regex.Matcher: int start()>();

        $i1 = interfaceinvoke r3.<java.lang.CharSequence: int length()>();

        r5 = interfaceinvoke r3.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>($i0, $i1);

        $r1 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern UNWANTED_END_CHAR_PATTERN>;

        r6 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r5);

        r7 = r5;

        $z1 = virtualinvoke r6.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label1;

        $i3 = virtualinvoke r6.<java.util.regex.Matcher: int start()>();

        r7 = interfaceinvoke r5.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i3);

     label1:
        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SECOND_NUMBER_START_PATTERN>;

        r8 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r7);

        r9 = r7;

        $z2 = virtualinvoke r8.<java.util.regex.Matcher: boolean find()>();

        if $z2 == 0 goto label2;

        $i2 = virtualinvoke r8.<java.util.regex.Matcher: int start()>();

        r9 = interfaceinvoke r7.<java.lang.CharSequence: java.lang.CharSequence subSequence(int,int)>(0, $i2);

     label2:
        return r9;

     label3:
        return "";
    }

    private java.lang.String formatNsn(java.lang.String, com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r4;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r3;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata;

        r3 := @parameter2: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        $r4 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNsn(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.CharSequence)>(r1, r2, r3, null);

        return $r4;
    }

    private java.lang.String formatNsn(java.lang.String, com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.CharSequence)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r1, $r4;
        java.lang.CharSequence r2;
        java.util.List $r3, r7;
        int $i0;
        java.lang.String r5;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r6;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat r8;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r5 := @parameter0: java.lang.String;

        r6 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata;

        r1 := @parameter2: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r2 := @parameter3: java.lang.CharSequence;

        $r3 = virtualinvoke r6.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List intlNumberFormats()>();

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 == 0 goto label2;

        $r4 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        if r1 != $r4 goto label1;

        goto label2;

     label1:
        r7 = virtualinvoke r6.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List intlNumberFormats()>();

        goto label3;

     label2:
        r7 = virtualinvoke r6.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>();

     label3:
        r8 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>(r7, r5);

        if r8 != null goto label4;

        goto label5;

     label4:
        r5 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNsnUsingPattern(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.CharSequence)>(r5, r8, r1, r2);

     label5:
        return r5;
    }

    private java.lang.String formatNsnUsingPattern(java.lang.String, com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.CharSequence)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r1, $r6, $r23, $r26;
        java.lang.String r2, $r4, $r10, $r11, $r12, $r15, r16, r20, r21, r22, r25;
        com.android.internal.telephony.phonenumbers.internal.RegexCache $r3;
        java.util.regex.Pattern $r5, $r7, $r9, $r13;
        boolean $z0;
        java.util.regex.Matcher $r8, $r14, r19, r24, r27;
        int $i0, $i1, $i2;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat r17;
        java.lang.CharSequence r18;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r16 := @parameter0: java.lang.String;

        r17 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat;

        r1 := @parameter2: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r18 := @parameter3: java.lang.CharSequence;

        r2 = virtualinvoke r17.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getFormat()>();

        $r3 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.RegexCache regexCache>;

        $r4 = virtualinvoke r17.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getPattern()>();

        $r5 = virtualinvoke $r3.<com.android.internal.telephony.phonenumbers.internal.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r4);

        r19 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r16);

        $r6 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        if r1 != $r6 goto label1;

        if r18 == null goto label1;

        $i1 = interfaceinvoke r18.<java.lang.CharSequence: int length()>();

        if $i1 <= 0 goto label1;

        $r11 = virtualinvoke r17.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getDomesticCarrierCodeFormattingRule()>();

        $i2 = virtualinvoke $r11.<java.lang.String: int length()>();

        if $i2 <= 0 goto label1;

        $r12 = virtualinvoke r17.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getDomesticCarrierCodeFormattingRule()>();

        r20 = virtualinvoke $r12.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$CC", r18);

        $r13 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FIRST_GROUP_PATTERN>;

        $r14 = virtualinvoke $r13.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $r15 = virtualinvoke $r14.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(r20);

        r21 = virtualinvoke r19.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r15);

        goto label3;

     label1:
        r22 = virtualinvoke r17.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()>();

        $r23 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        if r1 != $r23 goto label2;

        if r22 == null goto label2;

        $i0 = virtualinvoke r22.<java.lang.String: int length()>();

        if $i0 <= 0 goto label2;

        $r9 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FIRST_GROUP_PATTERN>;

        r24 = virtualinvoke $r9.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r2);

        $r10 = virtualinvoke r24.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(r22);

        r21 = virtualinvoke r19.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>($r10);

        goto label3;

     label2:
        r21 = virtualinvoke r19.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(r2);

     label3:
        r25 = r21;

        $r26 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat RFC3966>;

        if r1 != $r26 goto label5;

        $r7 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SEPARATOR_PATTERN>;

        r27 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r21);

        $z0 = virtualinvoke r27.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label4;

        r21 = virtualinvoke r27.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>("");

     label4:
        $r8 = virtualinvoke r27.<java.util.regex.Matcher: java.util.regex.Matcher reset(java.lang.CharSequence)>(r21);

        r25 = virtualinvoke $r8.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>("-");

     label5:
        return r25;
    }

    static boolean formattingRuleHasFirstGroupOnly(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0, z1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 == 0 goto label2;

        $r1 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern FIRST_GROUP_ONLY_PREFIX_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    private int getCountryCodeForValidRegion(java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r6;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        int $i0;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r7;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r7 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        if r7 == null goto label1;

        $i0 = virtualinvoke r7.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()>();

        return $i0;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid region code: ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    public static java.lang.String getCountryMobileToken(int)
    {
        int i0;
        java.util.Map $r0, $r2;
        java.lang.Integer $r1, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        $r0 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map MOBILE_TOKEN_MAPPINGS>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1);

        if $z0 == 0 goto label1;

        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map MOBILE_TOKEN_MAPPINGS>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        $r5 = (java.lang.String) $r4;

        return $r5;

     label1:
        return "";
    }

    public static com.android.internal.telephony.phonenumbers.PhoneNumberUtil getInstance()
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil $r0, $r2, r4;
        com.android.internal.telephony.phonenumbers.MetadataLoader $r1;
        java.lang.Throwable $r3;

        entermonitor class "Lcom/android/internal/telephony/phonenumbers/PhoneNumberUtil;";

     label1:
        $r0 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil instance>;

        if $r0 != null goto label2;

        $r1 = <com.android.internal.telephony.phonenumbers.MetadataManager: com.android.internal.telephony.phonenumbers.MetadataLoader DEFAULT_METADATA_LOADER>;

        $r2 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil createInstance(com.android.internal.telephony.phonenumbers.MetadataLoader)>($r1);

        staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void setInstance(com.android.internal.telephony.phonenumbers.PhoneNumberUtil)>($r2);

     label2:
        r4 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil instance>;

     label3:
        exitmonitor class "Lcom/android/internal/telephony/phonenumbers/PhoneNumberUtil;";

        return r4;

     label4:
        $r3 := @caughtexception;

        exitmonitor class "Lcom/android/internal/telephony/phonenumbers/PhoneNumberUtil;";

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.lang.String $r1, r2;
        boolean $z0;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r3;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        r2 := @parameter1: java.lang.String;

        $r1 = "001";

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)>(i0);

        goto label2;

     label1:
        r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r2);

     label2:
        return r3;
    }

    private com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberTypeHelper(java.lang.String, com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r2;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r14, $r16;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r13, $r15, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata;

        $r3 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        $z0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r3);

        if $z0 != 0 goto label01;

        $r28 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        return $r28;

     label01:
        $r4 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate()>();

        $z1 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r4);

        if $z1 == 0 goto label02;

        $r27 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType PREMIUM_RATE>;

        return $r27;

     label02:
        $r5 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree()>();

        $z2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r5);

        if $z2 == 0 goto label03;

        $r26 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType TOLL_FREE>;

        return $r26;

     label03:
        $r6 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost()>();

        $z3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r6);

        if $z3 == 0 goto label04;

        $r25 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType SHARED_COST>;

        return $r25;

     label04:
        $r7 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip()>();

        $z4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r7);

        if $z4 == 0 goto label05;

        $r24 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType VOIP>;

        return $r24;

     label05:
        $r8 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getPersonalNumber()>();

        $z5 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r8);

        if $z5 == 0 goto label06;

        $r23 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType PERSONAL_NUMBER>;

        return $r23;

     label06:
        $r9 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getPager()>();

        $z6 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r9);

        if $z6 == 0 goto label07;

        $r22 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType PAGER>;

        return $r22;

     label07:
        $r10 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getUan()>();

        $z7 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r10);

        if $z7 == 0 goto label08;

        $r21 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType UAN>;

        return $r21;

     label08:
        $r11 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getVoicemail()>();

        $z8 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r11);

        if $z8 == 0 goto label09;

        $r20 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType VOICEMAIL>;

        return $r20;

     label09:
        $r12 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getFixedLine()>();

        $z9 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r12);

        if $z9 == 0 goto label12;

        $z12 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: boolean getSameMobileAndFixedLinePattern()>();

        if $z12 == 0 goto label10;

        $r19 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        return $r19;

     label10:
        $r16 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()>();

        $z13 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r16);

        if $z13 == 0 goto label11;

        $r18 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        return $r18;

     label11:
        $r17 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        return $r17;

     label12:
        $z10 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: boolean getSameMobileAndFixedLinePattern()>();

        if $z10 != 0 goto label13;

        $r14 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()>();

        $z11 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r1, $r14);

        if $z11 == 0 goto label13;

        $r15 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        return $r15;

     label13:
        $r13 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        return $r13;
    }

    private java.lang.String getRegionCodeForNumberFromRegionList(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, java.util.List)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r7, r12;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r4, $r5;
        com.android.internal.telephony.phonenumbers.internal.RegexCache $r6;
        java.util.regex.Pattern $r8;
        java.util.regex.Matcher $r9;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r10;
        java.util.List r11;
        java.util.Iterator r13;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r10 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r11 := @parameter1: java.util.List;

        r12 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r10);

        r13 = interfaceinvoke r11.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.lang.String) $r3;

        r2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        $z1 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasLeadingDigits()>();

        if $z1 == 0 goto label2;

        $r6 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.RegexCache regexCache>;

        $r7 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getLeadingDigits()>();

        $r8 = virtualinvoke $r6.<com.android.internal.telephony.phonenumbers.internal.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r12);

        $z2 = virtualinvoke $r9.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z2 == 0 goto label3;

        return r1;

     label2:
        $r4 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberTypeHelper(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)>(r12, r2);

        $r5 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if $r4 == $r5 goto label3;

        return r1;

     label3:
        goto label1;

     label4:
        return null;
    }

    private java.util.Set getSupportedTypesForMetadata(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType[] r3;
        int i0, i1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType r4, $r7, $r8;
        java.util.TreeSet $r5;
        java.util.Set $r6;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc $r9;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata;

        $r5 = new java.util.TreeSet;

        specialinvoke $r5.<java.util.TreeSet: void <init>()>();

        r3 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType[] values()>();

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r4 = r3[i1];

        $r7 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        if r4 == $r7 goto label3;

        $r8 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if r4 != $r8 goto label2;

        goto label3;

     label2:
        $r9 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r1, r4);

        $z0 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean descHasData(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>($r9);

        if $z0 == 0 goto label3;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r6 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r5);

        return $r6;
    }

    private boolean hasFormattingPatternForNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.util.List $r1;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat $r2;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r3;
        java.lang.String r4, r6;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r5;
        boolean z0;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r3 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        i0 = virtualinvoke r3.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r5 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r4);

        z0 = 0;

        if r5 != null goto label1;

        return 0;

     label1:
        r6 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r3);

        $r1 = virtualinvoke r5.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>();

        $r2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>($r1, r6);

        if $r2 == null goto label2;

        z0 = 1;

     label2:
        return z0;
    }

    private boolean hasValidCountryCallingCode(int)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        return $z0;
    }

    private boolean isNationalNumberSuffixOfTheOther(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        long $l0, $l1;
        boolean $z0, $z1, z2;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1, r2;
        java.lang.String r3, r4;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $l0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

        r3 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0);

        $l1 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

        r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1);

        $z0 = virtualinvoke r3.<java.lang.String: boolean endsWith(java.lang.String)>(r4);

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r4.<java.lang.String: boolean endsWith(java.lang.String)>(r3);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private boolean isValidRegionCode(java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        java.util.Set $r2;
        boolean $z0, z1;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        if r1 == null goto label1;

        $r2 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set supportedRegions>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    static boolean isViablePhoneNumber(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        int $i0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.CharSequence;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 >= 2 goto label1;

        return 0;

     label1:
        $r1 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_PHONE_NUMBER_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        return $z0;
    }

    private void maybeAppendFormattedExtension(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.StringBuilder)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r3, $r6;
        java.lang.StringBuilder r4;
        boolean $z0, $z1;
        java.lang.String $r5, $r8, $r10, $r12, $r15;
        int $i0;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata;

        r3 := @parameter2: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r4 := @parameter3: java.lang.StringBuilder;

        $z0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z0 == 0 goto label3;

        $r5 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $i0 = virtualinvoke $r5.<java.lang.String: int length()>();

        if $i0 <= 0 goto label3;

        $r6 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat RFC3966>;

        if r3 != $r6 goto label1;

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";ext=");

        $r15 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15);

        goto label3;

     label1:
        $z1 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasPreferredExtnPrefix()>();

        if $z1 == 0 goto label2;

        $r10 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredExtnPrefix()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        goto label3;

     label2:
        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ext. ");

        $r8 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

     label3:
        return;
    }

    static java.lang.StringBuilder normalize(java.lang.StringBuilder)
    {
        java.lang.StringBuilder r0;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher $r2;
        boolean $z0;
        int $i0, $i1;
        java.lang.String $r3, $r6;
        java.util.Map $r5;

        r0 := @parameter0: java.lang.StringBuilder;

        $r1 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_ALPHA_PHONE_PATTERN>;

        $r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        $z0 = virtualinvoke $r2.<java.util.regex.Matcher: boolean matches()>();

        if $z0 == 0 goto label1;

        $i1 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        $r5 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map ALPHA_PHONE_MAPPINGS>;

        $r6 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeHelper(java.lang.CharSequence,java.util.Map,boolean)>(r0, $r5, 1);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(0, $i1, $r6);

        goto label2;

     label1:
        $i0 = virtualinvoke r0.<java.lang.StringBuilder: int length()>();

        $r3 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.CharSequence)>(r0);

        virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(0, $i0, $r3);

     label2:
        return r0;
    }

    public static java.lang.String normalizeDiallableCharsOnly(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.util.Map $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map DIALLABLE_CHAR_MAPPINGS>;

        $r2 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeHelper(java.lang.CharSequence,java.util.Map,boolean)>(r0, $r1, 1);

        return $r2;
    }

    static java.lang.StringBuilder normalizeDigits(java.lang.CharSequence, boolean)
    {
        java.lang.CharSequence r0;
        boolean z0;
        char c0;
        int i1, $i2, $i3, i4;
        java.lang.StringBuilder $r2;

        r0 := @parameter0: java.lang.CharSequence;

        z0 := @parameter1: boolean;

        $r2 = new java.lang.StringBuilder;

        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i2);

        i4 = 0;

     label1:
        $i3 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i4 >= $i3 goto label4;

        c0 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        i1 = staticinvoke <java.lang.Character: int digit(char,int)>(c0, 10);

        if i1 == -1 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        goto label3;

     label2:
        if z0 == 0 goto label3;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        return $r2;
    }

    public static java.lang.String normalizeDigitsOnly(java.lang.CharSequence)
    {
        java.lang.CharSequence r0;
        java.lang.StringBuilder $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.CharSequence;

        $r1 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.StringBuilder normalizeDigits(java.lang.CharSequence,boolean)>(r0, 0);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r2;
    }

    private static java.lang.String normalizeHelper(java.lang.CharSequence, java.util.Map, boolean)
    {
        java.lang.CharSequence r0;
        java.util.Map r1;
        boolean z0;
        char c0, $c3;
        java.lang.Character r3, $r6;
        java.lang.StringBuilder $r4;
        int $i1, $i2, i4;
        java.lang.String $r5;
        java.lang.Object $r7;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.util.Map;

        z0 := @parameter2: boolean;

        $r4 = new java.lang.StringBuilder;

        $i1 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>($i1);

        i4 = 0;

     label1:
        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if i4 >= $i2 goto label4;

        c0 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i4);

        $c3 = staticinvoke <java.lang.Character: char toUpperCase(char)>(c0);

        $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3);

        $r7 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        r3 = (java.lang.Character) $r7;

        if r3 == null goto label2;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        goto label3;

     label2:
        if z0 != 0 goto label3;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0);

     label3:
        i4 = i4 + 1;

        goto label1;

     label4:
        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    private void parseHelper(java.lang.CharSequence, java.lang.String, boolean, boolean, com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber) throws com.android.internal.telephony.phonenumbers.NumberParseException
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        boolean z0, z1, $z2, $z4, $z5, $z6;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.internal.telephony.phonenumbers.NumberParseException $r4, $r6, $r9, $r14, $r16, $r18, $r33, $r35, $r39, $r43;
        com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType $r5, $r7, $r10, $r15, $r17, $r19, $r34, $r37, $r38, $r40, $r44;
        int $i0, $i1, $i3, $i4, $i5, i6, $i7, i8;
        java.lang.StringBuilder $r8, $r11, $r12, $r22, $r23, r54;
        java.lang.String $r20, $r27, $r41, $r42, r46, r48, r49, r52;
        long $l2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult $r24, $r25, $r26, r57;
        java.util.regex.Pattern $r36;
        java.lang.CharSequence r45;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r50, r53;
        java.util.regex.Matcher r51;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r45 := @parameter0: java.lang.CharSequence;

        r46 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r1 := @parameter4: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        if r45 == null goto label21;

        $i0 = interfaceinvoke r45.<java.lang.CharSequence: int length()>();

        if $i0 > 250 goto label20;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        r48 = interfaceinvoke r45.<java.lang.CharSequence: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void buildNationalNumberForParsing(java.lang.String,java.lang.StringBuilder)>(r48, $r8);

        $z2 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isViablePhoneNumber(java.lang.CharSequence)>($r8);

        if $z2 == 0 goto label19;

        if z1 == 0 goto label02;

        $z5 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean checkRegionForParsing(java.lang.CharSequence,java.lang.String)>($r8, r46);

        if $z5 == 0 goto label01;

        goto label02;

     label01:
        $r33 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r34 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        specialinvoke $r33.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r34, "Missing or invalid default region.");

        throw $r33;

     label02:
        if z0 == 0 goto label03;

        virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setRawInput(java.lang.String)>(r48);

     label03:
        r49 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String maybeStripExtension(java.lang.StringBuilder)>($r8);

        $i1 = virtualinvoke r49.<java.lang.String: int length()>();

        if $i1 <= 0 goto label04;

        virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setExtension(java.lang.String)>(r49);

     label04:
        r50 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r46);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

     label05:
        i6 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int maybeExtractCountryCode(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder,boolean,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>($r8, r50, $r11, z0, r1);

     label06:
        goto label08;

     label07:
        $r35 := @caughtexception;

        $r36 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern PLUS_CHARS_PATTERN>;

        r51 = virtualinvoke $r36.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r8);

        $r37 = virtualinvoke $r35.<com.android.internal.telephony.phonenumbers.NumberParseException: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType getErrorType()>();

        $r38 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        if $r37 != $r38 goto label18;

        $z6 = virtualinvoke r51.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z6 == 0 goto label18;

        $i5 = virtualinvoke r51.<java.util.regex.Matcher: int end()>();

        $r42 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String substring(int)>($i5);

        i6 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int maybeExtractCountryCode(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder,boolean,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>($r42, r50, $r11, z0, r1);

        if i6 == 0 goto label17;

     label08:
        if i6 == 0 goto label10;

        r52 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i6);

        $z4 = virtualinvoke r52.<java.lang.String: boolean equals(java.lang.Object)>(r46);

        if $z4 != 0 goto label09;

        r50 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i6, r52);

     label09:
        r53 = r50;

        goto label12;

     label10:
        $r12 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.StringBuilder normalize(java.lang.StringBuilder)>($r8);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r12);

        if r46 == null goto label11;

        $i4 = virtualinvoke r50.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()>();

        virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>($i4);

        r53 = r50;

        goto label12;

     label11:
        r53 = r50;

        if z0 == 0 goto label12;

        virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber clearCountryCodeSource()>();

        r53 = r50;

     label12:
        $i7 = virtualinvoke $r11.<java.lang.StringBuilder: int length()>();

        if $i7 < 2 goto label16;

        r54 = $r11;

        if r53 == null goto label13;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>($r11);

        virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean maybeStripNationalPrefixAndCarrierCode(java.lang.StringBuilder,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder)>($r23, r53, $r22);

        r57 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLength(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)>($r23, r53);

        r54 = $r11;

        $r24 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult TOO_SHORT>;

        if r57 == $r24 goto label13;

        r54 = $r11;

        $r25 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE_LOCAL_ONLY>;

        if r57 == $r25 goto label13;

        r54 = $r11;

        $r26 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult INVALID_LENGTH>;

        if r57 == $r26 goto label13;

        r54 = $r23;

        if z0 == 0 goto label13;

        r54 = $r23;

        $i3 = virtualinvoke $r22.<java.lang.StringBuilder: int length()>();

        if $i3 <= 0 goto label13;

        $r27 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setPreferredDomesticCarrierCode(java.lang.String)>($r27);

        r54 = $r23;

     label13:
        i8 = virtualinvoke r54.<java.lang.StringBuilder: int length()>();

        if i8 < 2 goto label15;

        if i8 > 17 goto label14;

        staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void setItalianLeadingZerosForPhoneNumber(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r54, r1);

        $r20 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.String toString()>();

        $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r20);

        virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setNationalNumber(long)>($l2);

        return;

     label14:
        $r18 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r19 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType TOO_LONG>;

        specialinvoke $r18.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r19, "The string supplied is too long to be a phone number.");

        throw $r18;

     label15:
        $r16 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r17 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType TOO_SHORT_NSN>;

        specialinvoke $r16.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r17, "The string supplied is too short to be a phone number.");

        throw $r16;

     label16:
        $r14 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r15 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType TOO_SHORT_NSN>;

        specialinvoke $r14.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r15, "The string supplied is too short to be a phone number.");

        throw $r14;

     label17:
        $r43 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r44 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        specialinvoke $r43.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r44, "Could not interpret numbers after plus-sign.");

        throw $r43;

     label18:
        $r39 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r40 = virtualinvoke $r35.<com.android.internal.telephony.phonenumbers.NumberParseException: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType getErrorType()>();

        $r41 = virtualinvoke $r35.<com.android.internal.telephony.phonenumbers.NumberParseException: java.lang.String getMessage()>();

        specialinvoke $r39.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r40, $r41);

        throw $r39;

     label19:
        $r9 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r10 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType NOT_A_NUMBER>;

        specialinvoke $r9.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r10, "The string supplied did not seem to be a phone number.");

        throw $r9;

     label20:
        $r6 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r7 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType TOO_LONG>;

        specialinvoke $r6.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r7, "The string supplied was too long to parse.");

        throw $r6;

     label21:
        $r4 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r5 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType NOT_A_NUMBER>;

        specialinvoke $r4.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r5, "The phone number supplied was null.");

        throw $r4;

        catch com.android.internal.telephony.phonenumbers.NumberParseException from label05 to label06 with label07;
    }

    private boolean parsePrefixAsIdd(java.util.regex.Pattern, java.lang.StringBuilder)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.StringBuilder r1;
        int i0;
        boolean $z0, $z1, $z2;
        java.util.regex.Pattern $r2, r7;
        java.lang.String $r3, $r5, $r6;
        java.util.regex.Matcher r8, r9;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r7 := @parameter0: java.util.regex.Pattern;

        r1 := @parameter1: java.lang.StringBuilder;

        r8 = virtualinvoke r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r8.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label2;

        i0 = virtualinvoke r8.<java.util.regex.Matcher: int end()>();

        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern CAPTURING_DIGIT_PATTERN>;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String substring(int)>(i0);

        r9 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r3);

        $z1 = virtualinvoke r9.<java.util.regex.Matcher: boolean find()>();

        if $z1 == 0 goto label1;

        $r5 = virtualinvoke r9.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        $r6 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.CharSequence)>($r5);

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("0");

        if $z2 == 0 goto label1;

        return 0;

     label1:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, i0);

        return 1;

     label2:
        return 0;
    }

    private void prefixNumberWithCountryCallingCode(int, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.StringBuilder)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0, i1, $i2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r1;
        java.lang.StringBuilder r2, $r4, $r6, $r7, $r9, $r10, $r11;
        int[] $r3;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r2 := @parameter2: java.lang.StringBuilder;

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$2: int[] $SwitchMap$com$google$i18n$phonenumbers$PhoneNumberUtil$PhoneNumberFormat>;

        $i2 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: int ordinal()>();

        i1 = $r3[$i2];

        if i1 == 1 goto label3;

        if i1 == 2 goto label2;

        if i1 == 3 goto label1;

        return;

     label1:
        $r9 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "-");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(0, i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 43);

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, "tel:");

        return;

     label2:
        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, " ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(0, i0);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 43);

        return;

     label3:
        $r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(0, i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,char)>(0, 43);

        return;
    }

    private boolean rawInputContainsNationalPrefix(java.lang.String, java.lang.String, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r2, $r3, r6, r7;
        boolean z0, $z1;
        int $i0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber $r4;
        com.android.internal.telephony.phonenumbers.NumberParseException $r5;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r6 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.String;

        r7 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.CharSequence)>(r6);

        $z1 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>(r1);

        if $z1 == 0 goto label4;

     label1:
        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        $r3 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int)>($i0);

        $r4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>($r3, r2);

        z0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>($r4);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        return 0;

     label4:
        return 0;

        catch com.android.internal.telephony.phonenumbers.NumberParseException from label1 to label2 with label3;
    }

    static void setInstance(com.android.internal.telephony.phonenumbers.PhoneNumberUtil)
    {
        java.lang.Throwable $r0;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r1;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        entermonitor class "Lcom/android/internal/telephony/phonenumbers/PhoneNumberUtil;";

     label1:
        <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil instance> = r1;

     label2:
        exitmonitor class "Lcom/android/internal/telephony/phonenumbers/PhoneNumberUtil;";

        return;

     label3:
        $r0 := @caughtexception;

        exitmonitor class "Lcom/android/internal/telephony/phonenumbers/PhoneNumberUtil;";

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    static void setItalianLeadingZerosForPhoneNumber(java.lang.CharSequence, com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        java.lang.CharSequence r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        int $i0, $i2, $i3, i5;
        char $c1, $c4;

        r0 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $i0 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        if $i0 <= 1 goto label3;

        $c1 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(0);

        if $c1 != 48 goto label3;

        virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setItalianLeadingZero(boolean)>(1);

        i5 = 1;

     label1:
        $i2 = interfaceinvoke r0.<java.lang.CharSequence: int length()>();

        $i3 = $i2 - 1;

        if i5 >= $i3 goto label2;

        $c4 = interfaceinvoke r0.<java.lang.CharSequence: char charAt(int)>(i5);

        if $c4 != 48 goto label2;

        i5 = i5 + 1;

        goto label1;

     label2:
        if i5 == 1 goto label3;

        virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setNumberOfLeadingZeros(int)>(i5);

     label3:
        return;
    }

    private com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLength(java.lang.CharSequence, com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r3;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult $r4;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata;

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        $r4 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLength(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r1, r2, $r3);

        return $r4;
    }

    private com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLength(java.lang.CharSequence, com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.util.List r1, $r2, $r9, $r20, $r22, r31, r35, r41, r42, r43, r44, r45, r46, r47, r48, r49, r50, r51;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean $z0, $z1, $z2, $z3, $z4, $z6;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r3, $r16, $r18, $r24, r29;
        java.lang.Integer $r4, $r6, $r8, $r10, $r37;
        java.lang.Object $r5, $r7, r32, r33, $r36;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult $r11, $r12, $r13, $r14, $r15, $r25, r38;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc $r17, $r23, $r26, r30, r34;
        java.lang.CharSequence r27;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r28;
        java.util.ArrayList r39, r40;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r27 := @parameter0: java.lang.CharSequence;

        r28 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata;

        r29 := @parameter2: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        r30 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r28, r29);

        $r2 = virtualinvoke r30.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthList()>();

        $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        $r26 = virtualinvoke r28.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        r31 = virtualinvoke $r26.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthList()>();

        goto label02;

     label01:
        r31 = virtualinvoke r30.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthList()>();

     label02:
        r1 = virtualinvoke r30.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthLocalOnlyList()>();

        r32 = r31;

        r33 = r1;

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        if r29 != $r3 goto label07;

        $r16 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        $r17 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r28, $r16);

        $z3 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean descHasPossibleNumberData(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>($r17);

        if $z3 != 0 goto label03;

        $r24 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        $r25 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLength(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r27, r28, $r24);

        return $r25;

     label03:
        $r18 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        r34 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r28, $r18);

        r32 = r31;

        r33 = r1;

        $z4 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean descHasPossibleNumberData(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>(r34);

        if $z4 == 0 goto label07;

        r39 = new java.util.ArrayList;

        specialinvoke r39.<java.util.ArrayList: void <init>(java.util.Collection)>(r31);

        r32 = r39;

        $r20 = virtualinvoke r34.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthList()>();

        $i6 = interfaceinvoke $r20.<java.util.List: int size()>();

        if $i6 != 0 goto label04;

        $r23 = virtualinvoke r28.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        r35 = virtualinvoke $r23.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthList()>();

        goto label05;

     label04:
        r35 = virtualinvoke r34.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthList()>();

     label05:
        r41 = (java.util.List) r39;

        interfaceinvoke r41.<java.util.List: boolean addAll(java.util.Collection)>(r35);

        r42 = (java.util.List) r39;

        staticinvoke <java.util.Collections: void sort(java.util.List)>(r42);

        $z6 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>();

        if $z6 == 0 goto label06;

        r33 = virtualinvoke r34.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthLocalOnlyList()>();

        goto label07;

     label06:
        r40 = new java.util.ArrayList;

        specialinvoke r40.<java.util.ArrayList: void <init>(java.util.Collection)>(r1);

        r33 = r40;

        $r22 = virtualinvoke r34.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthLocalOnlyList()>();

        r43 = (java.util.List) r40;

        interfaceinvoke r43.<java.util.List: boolean addAll(java.util.Collection)>($r22);

        r44 = (java.util.List) r40;

        staticinvoke <java.util.Collections: void sort(java.util.List)>(r44);

     label07:
        r45 = (java.util.List) r32;

        $r36 = interfaceinvoke r45.<java.util.List: java.lang.Object get(int)>(0);

        $r37 = (java.lang.Integer) $r36;

        $i7 = virtualinvoke $r37.<java.lang.Integer: int intValue()>();

        if $i7 != -1 goto label08;

        $r15 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult INVALID_LENGTH>;

        return $r15;

     label08:
        i0 = interfaceinvoke r27.<java.lang.CharSequence: int length()>();

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        r46 = (java.util.List) r33;

        $z1 = interfaceinvoke r46.<java.util.List: boolean contains(java.lang.Object)>($r4);

        if $z1 == 0 goto label09;

        $r14 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE_LOCAL_ONLY>;

        return $r14;

     label09:
        r47 = (java.util.List) r32;

        $r5 = interfaceinvoke r47.<java.util.List: java.lang.Object get(int)>(0);

        $r6 = (java.lang.Integer) $r5;

        i1 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        if i1 != i0 goto label10;

        $r13 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE>;

        return $r13;

     label10:
        if i1 <= i0 goto label11;

        $r12 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult TOO_SHORT>;

        return $r12;

     label11:
        r48 = (java.util.List) r32;

        $i2 = interfaceinvoke r48.<java.util.List: int size()>();

        $i3 = $i2 - 1;

        r49 = (java.util.List) r32;

        $r7 = interfaceinvoke r49.<java.util.List: java.lang.Object get(int)>($i3);

        $r8 = (java.lang.Integer) $r7;

        $i4 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if $i4 >= i0 goto label12;

        $r11 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult TOO_LONG>;

        return $r11;

     label12:
        r50 = (java.util.List) r32;

        $i5 = interfaceinvoke r50.<java.util.List: int size()>();

        r51 = (java.util.List) r32;

        $r9 = interfaceinvoke r51.<java.util.List: java.util.List subList(int,int)>(1, $i5);

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z2 = interfaceinvoke $r9.<java.util.List: boolean contains(java.lang.Object)>($r10);

        if $z2 == 0 goto label13;

        r38 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE>;

        goto label14;

     label13:
        r38 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult INVALID_LENGTH>;

     label14:
        return r38;
    }

    public boolean canBeInternationallyDialled(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r2;
        java.lang.String $r3, $r4;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc $r5;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        r2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>($r3);

        if r2 != null goto label1;

        return 1;

     label1:
        $r4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getNoInternationalDialling()>();

        $z0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberMatchingDesc(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)>($r4, $r5);

        $z1 = 1 ^ $z0;

        return $z1;
    }

    com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r5, $r9;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat r2;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3;
        com.android.internal.telephony.phonenumbers.internal.RegexCache $r4, $r8;
        java.util.regex.Pattern $r6, $r10;
        java.util.regex.Matcher $r7, $r11;
        java.util.List r12;
        java.util.Iterator r13;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r12 := @parameter0: java.util.List;

        r1 := @parameter1: java.lang.String;

        r13 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat) $r3;

        i0 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: int leadingDigitsPatternSize()>();

        if i0 == 0 goto label2;

        $r8 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.RegexCache regexCache>;

        $i1 = i0 - 1;

        $r9 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getLeadingDigitsPattern(int)>($i1);

        $r10 = virtualinvoke $r8.<com.android.internal.telephony.phonenumbers.internal.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z2 = virtualinvoke $r11.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z2 == 0 goto label3;

     label2:
        $r4 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.RegexCache regexCache>;

        $r5 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getPattern()>();

        $r6 = virtualinvoke $r4.<com.android.internal.telephony.phonenumbers.internal.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z1 = virtualinvoke $r7.<java.util.regex.Matcher: boolean matches()>();

        if $z1 == 0 goto label3;

        return r2;

     label3:
        goto label1;

     label4:
        return null;
    }

    int extractCountryCode(java.lang.StringBuilder, java.lang.StringBuilder)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.StringBuilder r1, r2;
        int i0, i1, $i2, i4;
        char $c3;
        java.lang.String $r3, $r6;
        java.util.Map $r4;
        java.lang.Integer $r5;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.StringBuilder;

        r2 := @parameter1: java.lang.StringBuilder;

        $i2 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        if $i2 == 0 goto label5;

        $c3 = virtualinvoke r1.<java.lang.StringBuilder: char charAt(int)>(0);

        if $c3 != 48 goto label1;

        goto label5;

     label1:
        i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        i4 = 1;

     label2:
        if i4 > 3 goto label4;

        if i4 > i0 goto label4;

        $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, i4);

        i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3);

        $r4 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r5);

        if $z0 == 0 goto label3;

        $r6 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String substring(int)>(i4);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        return i1;

     label3:
        i4 = i4 + 1;

        goto label2;

     label4:
        return 0;

     label5:
        return 0;
    }

    public java.lang.Iterable findNumbers(java.lang.CharSequence, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$Leniency $r3;
        java.lang.Iterable $r4;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$Leniency: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$Leniency VALID>;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.Iterable findNumbers(java.lang.CharSequence,java.lang.String,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$Leniency,long)>(r1, r2, $r3, 9223372036854775807L);

        return $r4;
    }

    public java.lang.Iterable findNumbers(java.lang.CharSequence, java.lang.String, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$Leniency, long)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$Leniency r3;
        long l0;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$1 $r4;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$Leniency;

        l0 := @parameter3: long;

        $r4 = new com.android.internal.telephony.phonenumbers.PhoneNumberUtil$1;

        specialinvoke $r4.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil$1: void <init>(com.android.internal.telephony.phonenumbers.PhoneNumberUtil,java.lang.CharSequence,java.lang.String,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$Leniency,long)>(r0, r1, r2, r3, l0);

        return $r4;
    }

    public java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r2;
        long $l0;
        byte $b1;
        boolean $z0;
        int $i2;
        java.lang.String r3, $r6;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        $l0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

        $b1 = $l0 cmp 0L;

        if $b1 != 0 goto label1;

        $z0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean hasRawInput()>();

        if $z0 == 0 goto label1;

        r3 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        $i2 = virtualinvoke r3.<java.lang.String: int length()>();

        if $i2 <= 0 goto label1;

        return r3;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(int)>(20);

        virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r2, $r4);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    public void format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.lang.StringBuilder)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r2, $r5, $r10;
        java.lang.StringBuilder r3;
        int i0;
        java.lang.String r4, $r6, r11;
        boolean $z0;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r12;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r3 := @parameter2: java.lang.StringBuilder;

        virtualinvoke r3.<java.lang.StringBuilder: void setLength(int)>(0);

        i0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat E164>;

        if r2 != $r5 goto label1;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r10 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat E164>;

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, $r10, r3);

        return;

     label1:
        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z0 != 0 goto label2;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        return;

     label2:
        r11 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r12 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r11);

        $r6 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNsn(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r4, r12, r2);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void maybeAppendFormattedExtension(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r12, r2, r3);

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, r2, r3);

        return;
    }

    public java.lang.String formatByPattern(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat, java.util.List)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r2;
        int i0, $i1, $i2;
        java.lang.String r3, r5, $r10, $r11, r15, r19, $r20, $r21;
        boolean $z0;
        java.lang.StringBuilder $r6;
        java.util.List r14;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r16;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat r17;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder r18;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        r14 := @parameter2: java.util.List;

        i0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z0 != 0 goto label1;

        return r3;

     label1:
        r15 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r16 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r15);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(int)>(20);

        r17 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>(r14, r3);

        if r17 != null goto label2;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        goto label5;

     label2:
        r18 = staticinvoke <com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder newBuilder()>();

        virtualinvoke r18.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder mergeFrom(com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat)>(r17);

        r19 = virtualinvoke r17.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()>();

        $i1 = virtualinvoke r19.<java.lang.String: int length()>();

        if $i1 <= 0 goto label4;

        r5 = virtualinvoke r16.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefix()>();

        $i2 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i2 <= 0 goto label3;

        $r10 = virtualinvoke r19.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$NP", r5);

        $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("$FG", "$1");

        virtualinvoke r18.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat setNationalPrefixFormattingRule(java.lang.String)>($r11);

        goto label4;

     label3:
        virtualinvoke r18.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat clearNationalPrefixFormattingRule()>();

     label4:
        $r20 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNsnUsingPattern(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r3, r18, r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

     label5:
        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void maybeAppendFormattedExtension(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r16, r2, $r6);

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, r2, $r6);

        $r21 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r21;
    }

    public java.lang.String formatInOriginalFormat(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        boolean $z0, $z1, $z2, $z3, $z5;
        int[] $r1;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource $r2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r3, $r6, $r8, $r16, $r17;
        java.lang.String $r4, $r5, $r7, $r9, $r11, $r12, $r18, $r19, r21, r22, r23, r24, r26, r28, r31, r32;
        java.util.List $r10;
        java.util.ArrayList $r15;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r20;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r25;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat r27;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder r29;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r20 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r21 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r20.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean hasRawInput()>();

        if $z0 == 0 goto label01;

        $z5 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean hasFormattingPatternForNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r20);

        if $z5 != 0 goto label01;

        $r19 = virtualinvoke r20.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        return $r19;

     label01:
        $z1 = virtualinvoke r20.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean hasCountryCodeSource()>();

        if $z1 != 0 goto label02;

        $r17 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r18 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r20, $r17);

        return $r18;

     label02:
        $r1 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$2: int[] $SwitchMap$com$google$i18n$phonenumbers$Phonenumber$PhoneNumber$CountryCodeSource>;

        $r2 = virtualinvoke r20.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource getCountryCodeSource()>();

        $i0 = virtualinvoke $r2.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: int ordinal()>();

        i5 = $r1[$i0];

        if i5 == 1 goto label11;

        if i5 == 2 goto label10;

        if i5 == 3 goto label09;

        $i2 = virtualinvoke r20.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r22 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>($i2);

        r23 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNddPrefixForRegion(java.lang.String,boolean)>(r22, 1);

        $r8 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r20, $r8);

        if r23 == null goto label08;

        $i3 = virtualinvoke r23.<java.lang.String: int length()>();

        if $i3 != 0 goto label03;

        goto label08;

     label03:
        $r9 = virtualinvoke r20.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        $z3 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean rawInputContainsNationalPrefix(java.lang.String,java.lang.String,java.lang.String)>($r9, r23, r22);

        if $z3 == 0 goto label04;

        goto label12;

     label04:
        r25 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r22);

        r26 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r20);

        $r10 = virtualinvoke r25.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>();

        r27 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>($r10, r26);

        if r27 != null goto label05;

        goto label12;

     label05:
        r28 = virtualinvoke r27.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getNationalPrefixFormattingRule()>();

        i6 = virtualinvoke r28.<java.lang.String: int indexOf(java.lang.String)>("$1");

        if i6 > 0 goto label06;

        goto label12;

     label06:
        $r11 = virtualinvoke r28.<java.lang.String: java.lang.String substring(int,int)>(0, i6);

        $r12 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDigitsOnly(java.lang.CharSequence)>($r11);

        $i4 = virtualinvoke $r12.<java.lang.String: int length()>();

        if $i4 != 0 goto label07;

        goto label12;

     label07:
        r29 = staticinvoke <com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder newBuilder()>();

        virtualinvoke r29.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder mergeFrom(com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat)>(r27);

        virtualinvoke r29.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat clearNationalPrefixFormattingRule()>();

        $r15 = new java.util.ArrayList;

        specialinvoke $r15.<java.util.ArrayList: void <init>(int)>(1);

        interfaceinvoke $r15.<java.util.List: boolean add(java.lang.Object)>(r29);

        $r16 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatByPattern(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.util.List)>(r20, $r16, $r15);

        goto label12;

     label08:
        goto label12;

     label09:
        $r6 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        $r7 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r20, $r6);

        r24 = virtualinvoke $r7.<java.lang.String: java.lang.String substring(int)>(1);

        goto label12;

     label10:
        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatOutOfCountryCallingNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r20, r21);

        goto label12;

     label11:
        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r20, $r3);

     label12:
        r31 = virtualinvoke r20.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        r32 = r24;

        if r24 == null goto label13;

        r32 = r24;

        $i1 = virtualinvoke r31.<java.lang.String: int length()>();

        if $i1 <= 0 goto label13;

        r32 = r24;

        $r4 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDiallableCharsOnly(java.lang.CharSequence)>(r24);

        $r5 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDiallableCharsOnly(java.lang.CharSequence)>(r31);

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z2 != 0 goto label13;

        r32 = r31;

     label13:
        return r32;
    }

    public java.lang.String formatNationalNumberWithCarrierCode(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, java.lang.CharSequence)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.CharSequence r2;
        int i0;
        java.lang.String r3, $r6, $r9, $r13;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r4;
        boolean $z0;
        java.lang.StringBuilder $r7;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r8, $r11, $r12;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.CharSequence;

        i0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z0 != 0 goto label1;

        return r3;

     label1:
        $r6 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r4 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, $r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(20);

        $r8 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r9 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNsn(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.CharSequence)>(r3, r4, $r8, r2);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void maybeAppendFormattedExtension(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r4, $r11, $r7);

        $r12 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, $r12, $r7);

        $r13 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r13;
    }

    public java.lang.String formatNationalNumberWithPreferredCarrierCode(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, java.lang.CharSequence)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String $r2, $r3;
        int $i0;
        java.lang.Object r4;
        java.lang.CharSequence r5;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r4 := @parameter1: java.lang.CharSequence;

        $r2 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getPreferredDomesticCarrierCode()>();

        $i0 = virtualinvoke $r2.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        r4 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getPreferredDomesticCarrierCode()>();

        goto label1;

     label1:
        r5 = (java.lang.CharSequence) r4;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNationalNumberWithCarrierCode(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,java.lang.CharSequence)>(r1, r5);

        return $r3;
    }

    java.lang.String formatNsnUsingPattern(java.lang.String, com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r4;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat r2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat r3;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat;

        r3 := @parameter2: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat;

        $r4 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNsnUsingPattern(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.CharSequence)>(r1, r2, r3, null);

        return $r4;
    }

    public java.lang.String formatNumberForMobileDialing(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, java.lang.String, boolean)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, r4, $r13, $r17, r22, r24, r27;
        boolean z0, z1, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z14, $z15;
        int i0, $i1;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r3, $r6, $r7, r21;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType r5, $r10, $r18, $r19, $r20, r23;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r8, $r9, $r11, $r12, $r16, $r26;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult $r14, $r15;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r25;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r21 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        i0 = virtualinvoke r21.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        z1 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        r22 = "";

        if z1 != 0 goto label02;

        $z12 = virtualinvoke r21.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean hasRawInput()>();

        if $z12 == 0 goto label01;

        r22 = virtualinvoke r21.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

     label01:
        return r22;

     label02:
        $r6 = new com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r6.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        $r7 = virtualinvoke $r6.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r21);

        r3 = virtualinvoke $r7.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber clearExtension()>();

        r4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r5 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r3);

        r23 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if r5 == r23 goto label03;

        z13 = 1;

        goto label04;

     label03:
        z13 = 0;

     label04:
        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r4);

        if $z3 == 0 goto label18;

        $r10 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        if r5 == $r10 goto label05;

        $r19 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        if r5 == $r19 goto label05;

        z14 = 0;

        $r20 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        if r5 != $r20 goto label06;

     label05:
        z14 = 1;

     label06:
        $z15 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("CO");

        if $z15 == 0 goto label07;

        $r18 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        if r5 != $r18 goto label07;

        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNationalNumberWithCarrierCode(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,java.lang.CharSequence)>(r3, "3");

        goto label17;

     label07:
        $z5 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("BR");

        if $z5 == 0 goto label10;

        if z14 == 0 goto label10;

        $r17 = virtualinvoke r3.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getPreferredDomesticCarrierCode()>();

        $i1 = virtualinvoke $r17.<java.lang.String: int length()>();

        if $i1 <= 0 goto label08;

        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNationalNumberWithPreferredCarrierCode(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,java.lang.CharSequence)>(r3, "");

        goto label09;

     label08:
        r24 = "";

     label09:
        goto label17;

     label10:
        if i0 != 1 goto label13;

        r25 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        $z11 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean canBeInternationallyDialled(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r3);

        if $z11 == 0 goto label11;

        $r13 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r3);

        $r14 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLength(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)>($r13, r25);

        $r15 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult TOO_SHORT>;

        if $r14 == $r15 goto label11;

        $r16 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r3, $r16);

        goto label12;

     label11:
        $r12 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r3, $r12);

     label12:
        goto label17;

     label13:
        $z6 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("001");

        if $z6 != 0 goto label15;

        $z8 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("MX");

        if $z8 != 0 goto label14;

        $z9 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("CL");

        if $z9 != 0 goto label14;

        $z10 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("UZ");

        if $z10 == 0 goto label16;

     label14:
        if z14 == 0 goto label16;

     label15:
        $z7 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean canBeInternationallyDialled(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r3);

        if $z7 == 0 goto label16;

        $r11 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r3, $r11);

        goto label17;

     label16:
        $r26 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r3, $r26);

     label17:
        goto label21;

     label18:
        r24 = "";

        if z13 == 0 goto label17;

        r24 = "";

        $z4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean canBeInternationallyDialled(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r3);

        if $z4 == 0 goto label17;

        if z0 == 0 goto label19;

        $r9 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        r27 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r3, $r9);

        goto label20;

     label19:
        $r8 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat E164>;

        r27 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r3, $r8);

     label20:
        return r27;

     label21:
        if z0 == 0 goto label22;

        goto label23;

     label22:
        r24 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeDiallableCharsOnly(java.lang.CharSequence)>(r24);

     label23:
        return r24;
    }

    public java.lang.String formatOutOfCountryCallingNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        int i0, $i1, $i2;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.util.regex.Pattern $r2;
        java.util.regex.Matcher $r3;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r4, $r10, $r15, $r24, $r38, $r41;
        java.lang.String $r5, $r11, $r16, $r18, $r23, $r25, r26, r30, r33, r34, r35, $r39;
        java.lang.StringBuilder $r6, $r7, $r8, $r12, $r19, $r37;
        java.util.logging.Logger r27;
        java.util.logging.Level r28;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r32, r36;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r26 := @parameter1: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r26);

        if $z0 != 0 goto label1;

        r27 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r28 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to format number from invalid region ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". International formatting applied.");

        $r23 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r27.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r28, $r23);

        $r24 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        $r25 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r24);

        return $r25;

     label1:
        i0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r30 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z1 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z1 != 0 goto label2;

        return r30;

     label2:
        if i0 != 1 goto label3;

        $z4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNANPACountry(java.lang.String)>(r26);

        if $z4 == 0 goto label4;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r15 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r16 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r15);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r18;

     label3:
        $i1 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int getCountryCodeForValidRegion(java.lang.String)>(r26);

        if i0 != $i1 goto label4;

        $r10 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r11 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r1, $r10);

        return $r11;

     label4:
        r32 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r26);

        r33 = virtualinvoke r32.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()>();

        r34 = "";

        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SINGLE_INTERNATIONAL_PREFIX>;

        $r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r33);

        $z2 = virtualinvoke $r3.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label5;

        r34 = r33;

        goto label6;

     label5:
        $z3 = virtualinvoke r32.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasPreferredInternationalPrefix()>();

        if $z3 == 0 goto label6;

        r34 = virtualinvoke r32.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredInternationalPrefix()>();

     label6:
        r35 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        r36 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r35);

        $r37 = new java.lang.StringBuilder;

        $r38 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        $r39 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNsn(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r30, r36, $r38);

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>($r39);

        $r41 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void maybeAppendFormattedExtension(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r1, r36, $r41, $r37);

        $i2 = virtualinvoke r34.<java.lang.String: int length()>();

        if $i2 <= 0 goto label7;

        $r6 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, " ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(0, i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, " ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, r34);

        goto label8;

     label7:
        $r4 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, $r4, $r37);

     label8:
        $r5 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    public java.lang.String formatOutOfCountryKeepingAlphaChars(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        java.lang.String r1, $r8, $r20, $r25, $r26, $r27, r29, r30, r31, r32, r37, $r40, $r46;
        boolean $z0, $z1, $z2, $z3;
        java.util.Map $r2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r3, $r19, $r42;
        java.lang.StringBuilder $r4, $r9, $r10, $r11, $r21, $r38;
        java.util.regex.Pattern $r13;
        java.util.regex.Matcher $r14;
        java.util.List $r15;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r28;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r33, $r41;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat r35;
        com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder r36;
        java.util.logging.Logger r43;
        java.util.logging.Level r44;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r28 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r29 := @parameter1: java.lang.String;

        r30 = virtualinvoke r28.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>();

        $i2 = virtualinvoke r30.<java.lang.String: int length()>();

        if $i2 != 0 goto label01;

        $r27 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatOutOfCountryCallingNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r28, r29);

        return $r27;

     label01:
        i0 = virtualinvoke r28.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z0 != 0 goto label02;

        return r30;

     label02:
        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map ALL_PLUS_NUMBER_GROUPING_SYMBOLS>;

        r31 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String normalizeHelper(java.lang.CharSequence,java.util.Map,boolean)>(r30, $r2, 1);

        r1 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r28);

        r32 = r31;

        $i3 = virtualinvoke r1.<java.lang.String: int length()>();

        if $i3 <= 3 goto label03;

        $r26 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, 3);

        i1 = virtualinvoke r31.<java.lang.String: int indexOf(java.lang.String)>($r26);

        r32 = r31;

        if i1 == -1 goto label03;

        r32 = virtualinvoke r31.<java.lang.String: java.lang.String substring(int)>(i1);

     label03:
        r33 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r29);

        if i0 != 1 goto label04;

        $z3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNANPACountry(java.lang.String)>(r29);

        if $z3 == 0 goto label06;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        $r25 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r25;

     label04:
        if r33 == null goto label06;

        $i4 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int getCountryCodeForValidRegion(java.lang.String)>(r29);

        if i0 != $i4 goto label06;

        $r15 = virtualinvoke r33.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>();

        r35 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat chooseFormattingPatternForNumber(java.util.List,java.lang.String)>($r15, r1);

        if r35 != null goto label05;

        return r32;

     label05:
        r36 = staticinvoke <com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder newBuilder()>();

        virtualinvoke r36.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder mergeFrom(com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat)>(r35);

        virtualinvoke r36.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat setPattern(java.lang.String)>("(\\d+)(.*)");

        virtualinvoke r36.<com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat$Builder: com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat setFormat(java.lang.String)>("$1$2");

        $r19 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat NATIONAL>;

        $r20 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String formatNsnUsingPattern(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$NumberFormat,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r32, r36, $r19);

        return $r20;

     label06:
        r37 = "";

        if r33 == null goto label08;

        r37 = virtualinvoke r33.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()>();

        $r13 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern SINGLE_INTERNATIONAL_PREFIX>;

        $r14 = virtualinvoke $r13.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r37);

        $z2 = virtualinvoke $r14.<java.util.regex.Matcher: boolean matches()>();

        if $z2 == 0 goto label07;

        goto label08;

     label07:
        r37 = virtualinvoke r33.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getPreferredInternationalPrefix()>();

     label08:
        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>(r32);

        $r40 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        $r41 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, $r40);

        $r42 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void maybeAppendFormattedExtension(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(r28, $r41, $r42, $r38);

        $i5 = virtualinvoke r37.<java.lang.String: int length()>();

        if $i5 <= 0 goto label09;

        $r9 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, " ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,int)>(0, i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, " ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, r37);

        goto label11;

     label09:
        $z1 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r29);

        if $z1 != 0 goto label10;

        r43 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r44 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to format number from invalid region ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". International formatting applied.");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r43.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r44, $r8);

     label10:
        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void prefixNumberWithCountryCallingCode(int,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat,java.lang.StringBuilder)>(i0, $r3, $r38);

     label11:
        $r46 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r46;
    }

    public com.android.internal.telephony.phonenumbers.AsYouTypeFormatter getAsYouTypeFormatter(java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        com.android.internal.telephony.phonenumbers.AsYouTypeFormatter $r2;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.android.internal.telephony.phonenumbers.AsYouTypeFormatter;

        specialinvoke $r2.<com.android.internal.telephony.phonenumbers.AsYouTypeFormatter: void <init>(java.lang.String)>(r1);

        return $r2;
    }

    public int getCountryCodeForRegion(java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.util.logging.Logger r1;
        java.util.logging.Level r2;
        boolean $z0;
        int $i0;
        java.lang.StringBuilder $r4;
        java.lang.String $r8, r9;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r9 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r9);

        if $z0 != 0 goto label2;

        r1 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or missing region code (");

        if r9 != null goto label1;

        r9 = "null";

        goto label1;

     label1:
        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") provided.");

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r2, $r8);

        return 0;

     label2:
        $i0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int getCountryCodeForValidRegion(java.lang.String)>(r9);

        return $i0;
    }

    public com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber getExampleNumber(java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r2;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber $r3;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(java.lang.String,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r1, $r2);

        return $r3;
    }

    public com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForNonGeoEntity(int)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.lang.StringBuilder $r1, r27;
        java.lang.String $r4, $r17, $r19, $r23;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc[] $r5;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc $r6, $r7, $r8, $r9, $r10, $r11, $r12, r26;
        java.util.List $r13;
        boolean $z0, $z1;
        java.lang.Object $r14;
        com.android.internal.telephony.phonenumbers.NumberParseException $r20;
        java.util.logging.Logger $r21, r30;
        java.util.logging.Level $r22, r31;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r24;
        java.util.Iterator r25;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r28;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        r24 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)>(i0);

        if r24 == null goto label7;

        $r5 = newarray (com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)[7];

        $r6 = virtualinvoke r24.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()>();

        $r5[0] = $r6;

        $r7 = virtualinvoke r24.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree()>();

        $r5[1] = $r7;

        $r8 = virtualinvoke r24.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost()>();

        $r5[2] = $r8;

        $r9 = virtualinvoke r24.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip()>();

        $r5[3] = $r9;

        $r10 = virtualinvoke r24.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getVoicemail()>();

        $r5[4] = $r10;

        $r11 = virtualinvoke r24.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getUan()>();

        $r5[5] = $r11;

        $r12 = virtualinvoke r24.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate()>();

        $r5[6] = $r12;

        $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5);

        r25 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r14 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>();

        r26 = (com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc) $r14;

        if r26 == null goto label5;

     label2:
        $z1 = virtualinvoke r26.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasExampleNumber()>();

        if $z1 == 0 goto label5;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke r26.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getExampleNumber()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        $r19 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        r28 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>($r19, "ZZ");

     label3:
        return r28;

     label4:
        $r20 := @caughtexception;

        $r21 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r22 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r23 = virtualinvoke $r20.<com.android.internal.telephony.phonenumbers.NumberParseException: java.lang.String toString()>();

        virtualinvoke $r21.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r22, $r23);

        goto label5;

     label5:
        goto label1;

     label6:
        goto label8;

     label7:
        r30 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r31 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or unknown country calling code provided: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r30.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r31, $r4);

     label8:
        return null;

        catch com.android.internal.telephony.phonenumbers.NumberParseException from label2 to label3 with label4;
    }

    public com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType r1;
        int i0;
        java.lang.StringBuilder r2;
        java.util.Set $r3, $r4;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r13;
        java.lang.Integer $r6;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata $r7;
        java.lang.String $r10, $r12, $r14, $r18;
        com.android.internal.telephony.phonenumbers.NumberParseException $r15;
        java.util.logging.Logger $r16;
        java.util.logging.Level $r17;
        java.util.Iterator r19, r21;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r20, r23;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc r22;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedRegions()>();

        r19 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label01:
        $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label03;

        $r13 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        $r14 = (java.lang.String) $r13;

        r20 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(java.lang.String,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>($r14, r1);

        if r20 == null goto label02;

        return r20;

     label02:
        goto label01;

     label03:
        $r4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedGlobalNetworkCallingCodes()>();

        r21 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label10;

        $r5 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (java.lang.Integer) $r5;

        i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>();

        $r7 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)>(i0);

        r22 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>($r7, r1);

     label05:
        $z2 = virtualinvoke r22.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasExampleNumber()>();

        if $z2 == 0 goto label07;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke r22.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getExampleNumber()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        r23 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>($r12, "ZZ");

     label06:
        return r23;

     label07:
        goto label09;

     label08:
        $r15 := @caughtexception;

        $r16 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r17 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r18 = virtualinvoke $r15.<com.android.internal.telephony.phonenumbers.NumberParseException: java.lang.String toString()>();

        virtualinvoke $r16.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r17, $r18);

     label09:
        goto label04;

     label10:
        return null;

        catch com.android.internal.telephony.phonenumbers.NumberParseException from label05 to label06 with label08;
    }

    public com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber getExampleNumberForType(java.lang.String, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.util.logging.Level r1, $r11;
        boolean $z0, $z1;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata $r3;
        java.lang.String $r4, $r8, $r12, r13;
        java.lang.StringBuilder $r5;
        com.android.internal.telephony.phonenumbers.NumberParseException $r9;
        java.util.logging.Logger $r10, r15;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType r14;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc r16;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r17;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r13 := @parameter0: java.lang.String;

        r14 := @parameter1: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r13);

        if $z0 != 0 goto label1;

        r15 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r1 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or unknown region code provided: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r1, $r8);

        return null;

     label1:
        $r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r13);

        r16 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>($r3, r14);

     label2:
        $z1 = virtualinvoke r16.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasExampleNumber()>();

        if $z1 == 0 goto label4;

        $r4 = virtualinvoke r16.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getExampleNumber()>();

        r17 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>($r4, r13);

     label3:
        return r17;

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        $r11 = <java.util.logging.Level: java.util.logging.Level SEVERE>;

        $r12 = virtualinvoke $r9.<com.android.internal.telephony.phonenumbers.NumberParseException: java.lang.String toString()>();

        virtualinvoke $r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>($r11, $r12);

     label6:
        return null;

        catch com.android.internal.telephony.phonenumbers.NumberParseException from label2 to label3 with label5;
    }

    public com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber getInvalidExampleNumber(java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r8, r13, r14;
        java.util.logging.Level r2;
        boolean z0, $z1, $z2;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata $r3;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r4;
        int $i0, i1;
        java.lang.StringBuilder $r5;
        com.android.internal.telephony.phonenumbers.NumberParseException $r9;
        java.util.logging.Logger r10;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc r12;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r15;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $z1 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r1);

        if $z1 != 0 goto label1;

        r10 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r2 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or unknown region code provided: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r10.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r2, $r8);

        return null;

     label1:
        $r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        $r4 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        r12 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>($r3, $r4);

        $z2 = virtualinvoke r12.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: boolean hasExampleNumber()>();

        if $z2 != 0 goto label2;

        return null;

     label2:
        r13 = virtualinvoke r12.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.lang.String getExampleNumber()>();

        $i0 = virtualinvoke r13.<java.lang.String: int length()>();

        i1 = $i0 - 1;

     label3:
        if i1 < 2 goto label9;

        r14 = virtualinvoke r13.<java.lang.String: java.lang.String substring(int,int)>(0, i1);

     label4:
        r15 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>(r14, r1);

        z0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r15);

     label5:
        if z0 != 0 goto label6;

        return r15;

     label6:
        goto label8;

     label7:
        $r9 := @caughtexception;

     label8:
        i1 = i1 + -1;

        goto label3;

     label9:
        return null;

        catch com.android.internal.telephony.phonenumbers.NumberParseException from label4 to label5 with label7;
    }

    public int getLengthOfGeographicalAreaCode(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        int i0, $i1;
        java.lang.String $r2;
        boolean $z0, $z1, $z2, $z3;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r3, r7;
        java.util.Set $r4;
        java.lang.Integer $r5;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r6;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        r6 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>($r2);

        if r6 != null goto label1;

        return 0;

     label1:
        $z0 = virtualinvoke r6.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasNationalPrefix()>();

        if $z0 != 0 goto label2;

        $z3 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean isItalianLeadingZero()>();

        if $z3 != 0 goto label2;

        return 0;

     label2:
        r7 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        i0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        if r7 != $r3 goto label3;

        $r4 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set GEO_MOBILE_COUNTRIES_WITHOUT_MOBILE_AREA_CODES>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z2 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z2 == 0 goto label3;

        return 0;

     label3:
        $z1 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberGeographical(com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType,int)>(r7, i0);

        if $z1 != 0 goto label4;

        return 0;

     label4:
        $i1 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int getLengthOfNationalDestinationCode(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        return $i1;
    }

    public int getLengthOfNationalDestinationCode(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1, $r10, r13;
        boolean $z0, $z1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat $r2;
        java.util.regex.Pattern $r3;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r4, $r5;
        java.lang.String $r6, $r7, $r8, $r9, r14;
        java.lang.String[] r15;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $z0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z0 == 0 goto label1;

        $r10 = new com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r10.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r13 = $r10;

        virtualinvoke $r10.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        virtualinvoke $r10.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber clearExtension()>();

        goto label2;

     label1:
        r13 = r1;

     label2:
        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat INTERNATIONAL>;

        r14 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String format(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberFormat)>(r13, $r2);

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern NON_DIGITS_PATTERN>;

        r15 = virtualinvoke $r3.<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence)>(r14);

        $i0 = lengthof r15;

        if $i0 > 3 goto label3;

        return 0;

     label3:
        $r4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r5 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        if $r4 != $r5 goto label4;

        $i2 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $r7 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getCountryMobileToken(int)>($i2);

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("");

        if $z1 != 0 goto label4;

        $r8 = r15[2];

        $i3 = virtualinvoke $r8.<java.lang.String: int length()>();

        $r9 = r15[3];

        $i4 = virtualinvoke $r9.<java.lang.String: int length()>();

        $i5 = $i3 + $i4;

        return $i5;

     label4:
        $r6 = r15[2];

        $i1 = virtualinvoke $r6.<java.lang.String: int length()>();

        return $i1;
    }

    com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        boolean $z0;
        com.android.internal.telephony.phonenumbers.MetadataSource $r3;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata $r4;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r3 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.MetadataSource metadataSource>;

        $r4 = interfaceinvoke $r3.<com.android.internal.telephony.phonenumbers.MetadataSource: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)>(i0);

        return $r4;
    }

    com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        boolean $z0;
        com.android.internal.telephony.phonenumbers.MetadataSource $r2;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata $r3;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.MetadataSource metadataSource>;

        $r3 = interfaceinvoke $r2.<com.android.internal.telephony.phonenumbers.MetadataSource: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        char[] r3;
        java.lang.StringBuilder $r4;
        boolean $z0;
        int $i0, $i1;
        java.lang.String $r6, $r8;
        long $l2;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $z0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean isItalianLeadingZero()>();

        if $z0 == 0 goto label1;

        $i0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getNumberOfLeadingZeros()>();

        if $i0 <= 0 goto label1;

        $i1 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getNumberOfLeadingZeros()>();

        r3 = newarray (char)[$i1];

        staticinvoke <java.util.Arrays: void fill(char[],char)>(r3, 48);

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(char[])>(r3);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label1:
        $l2 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    public java.lang.String getNddPrefixForRegion(java.lang.String, boolean)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        boolean z0;
        java.util.logging.Logger r1;
        int $i0;
        java.lang.StringBuilder $r3;
        java.lang.String $r7, r8, r11, r12;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r9;
        java.util.logging.Level r10;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r8 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r9 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r8);

        if r9 != null goto label2;

        r1 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r10 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or missing region code (");

        if r8 != null goto label1;

        r8 = "null";

        goto label1;

     label1:
        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") provided.");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r10, $r7);

        return null;

     label2:
        r11 = virtualinvoke r9.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefix()>();

        $i0 = virtualinvoke r11.<java.lang.String: int length()>();

        if $i0 != 0 goto label3;

        return null;

     label3:
        r12 = r11;

        if z0 == 0 goto label4;

        r12 = virtualinvoke r11.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("~", "");

     label4:
        return r12;
    }

    com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getNumberDescByType(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType r2;
        int[] $r3;
        int $i0, $i1;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$2: int[] $SwitchMap$com$google$i18n$phonenumbers$PhoneNumberUtil$PhoneNumberType>;

        $i0 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: int ordinal()>();

        $i1 = $r3[$i0];

        tableswitch($i1)
        {
            case 1: goto label11;
            case 2: goto label10;
            case 3: goto label09;
            case 4: goto label08;
            case 5: goto label08;
            case 6: goto label07;
            case 7: goto label06;
            case 8: goto label05;
            case 9: goto label04;
            case 10: goto label03;
            case 11: goto label02;
            default: goto label01;
        };

     label01:
        $r14 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        return $r14;

     label02:
        $r4 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getVoicemail()>();

        return $r4;

     label03:
        $r5 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getUan()>();

        return $r5;

     label04:
        $r6 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getPager()>();

        return $r6;

     label05:
        $r7 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getPersonalNumber()>();

        return $r7;

     label06:
        $r8 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getVoip()>();

        return $r8;

     label07:
        $r9 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getSharedCost()>();

        return $r9;

     label08:
        $r10 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getFixedLine()>();

        return $r10;

     label09:
        $r11 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getMobile()>();

        return $r11;

     label10:
        $r12 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getTollFree()>();

        return $r12;

     label11:
        $r13 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getPremiumRate()>();

        return $r13;
    }

    public com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        int $i0;
        java.lang.String $r2, r5;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r3, $r4;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r6;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r5 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $i0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r6 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>($i0, r5);

        if r6 != null goto label1;

        $r4 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        return $r4;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r3 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberTypeHelper(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)>($r2, r6);

        return $r3;
    }

    public java.lang.String getRegionCodeForCountryCode(int)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3, $r4;
        java.util.List r5;
        java.lang.String r6;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r5 = (java.util.List) $r3;

        if r5 != null goto label1;

        r6 = "ZZ";

        goto label2;

     label1:
        $r4 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(0);

        r6 = (java.lang.String) $r4;

     label2:
        return r6;
    }

    public java.lang.String getRegionCodeForNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0, $i1;
        java.util.logging.Level r1;
        java.util.Map $r2;
        java.lang.Integer $r3;
        java.lang.Object $r4, $r6;
        java.lang.String $r5, $r7, $r12;
        java.lang.StringBuilder $r8;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r13;
        java.util.List r14;
        java.util.logging.Logger r15;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r13 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        i0 = virtualinvoke r13.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $r2 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3);

        r14 = (java.util.List) $r4;

        if r14 != null goto label1;

        r15 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r1 = <java.util.logging.Level: java.util.logging.Level INFO>;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing/invalid country_code (");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r15.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r1, $r12);

        return null;

     label1:
        $i1 = interfaceinvoke r14.<java.util.List: int size()>();

        if $i1 != 1 goto label2;

        $r6 = interfaceinvoke r14.<java.util.List: java.lang.Object get(int)>(0);

        $r7 = (java.lang.String) $r6;

        return $r7;

     label2:
        $r5 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumberFromRegionList(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,java.util.List)>(r13, r14);

        return $r5;
    }

    public java.util.List getRegionCodesForCountryCode(int)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.util.Map $r1;
        java.lang.Integer $r2;
        java.lang.Object $r3, r6;
        java.util.List $r4, r8;
        java.util.ArrayList r7;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2);

        r6 = (java.util.List) $r3;

        if r6 != null goto label1;

        r7 = new java.util.ArrayList;

        specialinvoke r7.<java.util.ArrayList: void <init>(int)>(0);

        r6 = r7;

        goto label1;

     label1:
        r8 = (java.util.List) r6;

        $r4 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>(r8);

        return $r4;
    }

    public java.util.Set getSupportedCallingCodes()
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.util.Map $r1;
        java.util.Set $r2, $r3;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        $r1 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Map countryCallingCodeToRegionCodeMap>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        return $r3;
    }

    public java.util.Set getSupportedGlobalNetworkCallingCodes()
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.util.Set $r1, $r2;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        $r1 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set countryCodesForNonGeographicalRegion>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    public java.util.Set getSupportedRegions()
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.util.Set $r1, $r2;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        $r1 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set supportedRegions>;

        $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1);

        return $r2;
    }

    public java.util.Set getSupportedTypesForNonGeoEntity(int)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0;
        java.util.logging.Level r1;
        java.util.Set $r3, $r9;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        java.util.TreeSet $r8;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r10;
        java.util.logging.Logger r11;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        i0 := @parameter0: int;

        r10 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForNonGeographicalRegion(int)>(i0);

        if r10 != null goto label1;

        r11 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r1 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown country calling code for a non-geographical entity provided: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r11.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r1, $r7);

        $r8 = new java.util.TreeSet;

        specialinvoke $r8.<java.util.TreeSet: void <init>()>();

        $r9 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r8);

        return $r9;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedTypesForMetadata(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)>(r10);

        return $r3;
    }

    public java.util.Set getSupportedTypesForRegion(java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r10;
        java.util.logging.Logger r2;
        java.util.logging.Level r3;
        boolean $z0;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata $r5;
        java.util.Set $r6, $r12;
        java.lang.StringBuilder $r7;
        java.util.TreeSet $r11;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>(r1);

        if $z0 != 0 goto label1;

        r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or unknown region code provided: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r3, $r10);

        $r11 = new java.util.TreeSet;

        specialinvoke $r11.<java.util.TreeSet: void <init>()>();

        $r12 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r11);

        return $r12;

     label1:
        $r5 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        $r6 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set getSupportedTypesForMetadata(com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)>($r5);

        return $r6;
    }

    public boolean isAlphaNumber(java.lang.CharSequence)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r1;
        java.util.regex.Pattern $r3;
        java.util.regex.Matcher $r4;
        java.lang.CharSequence r5;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r5 := @parameter0: java.lang.CharSequence;

        $z0 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isViablePhoneNumber(java.lang.CharSequence)>(r5);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(r5);

        virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String maybeStripExtension(java.lang.StringBuilder)>($r1);

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern VALID_ALPHA_PHONE_PATTERN>;

        $r4 = virtualinvoke $r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r1);

        $z1 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>();

        return $z1;
    }

    public boolean isMobileNumberPortableRegion(java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1, $r7;
        java.util.logging.Logger r2;
        java.util.logging.Level r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r8;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r8 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>(r1);

        if r8 != null goto label1;

        r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.logging.Logger logger>;

        r3 = <java.util.logging.Level: java.util.logging.Level WARNING>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid or unknown region code provided: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>(r3, $r7);

        return 0;

     label1:
        $z0 = virtualinvoke r8.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: boolean isMobileNumberPortableRegion()>();

        return $z0;
    }

    public boolean isNANPACountry(java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set nanpaRegions>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    public boolean isNumberGeographical(com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType, int)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType r1, $r2, $r3, $r6;
        int i0;
        java.util.Set $r4;
        java.lang.Integer $r5;
        boolean $z0, z1;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        i0 := @parameter1: int;

        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE>;

        if r1 == $r2 goto label2;

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType FIXED_LINE_OR_MOBILE>;

        if r1 == $r3 goto label2;

        $r4 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.Set GEO_MOBILE_COUNTRIES>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z0 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>($r5);

        if $z0 == 0 goto label1;

        $r6 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType MOBILE>;

        if r1 != $r6 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    public boolean isNumberGeographical(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberType(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $i0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $z0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNumberGeographical(com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType,int)>($r2, $i0);

        return $z0;
    }

    public com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        int i0, i1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType $r2, $r3, $r4, $r5, $r6, $r7, $r10;
        java.lang.String $r8, $r9;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r11, r12, r13, r14;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r11 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r12 := @parameter1: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r13 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber copyCoreFieldsOnly(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r11);

        r14 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber copyCoreFieldsOnly(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r12);

        $z0 = virtualinvoke r13.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z0 == 0 goto label1;

        $z5 = virtualinvoke r14.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>();

        if $z5 == 0 goto label1;

        $r8 = virtualinvoke r13.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $r9 = virtualinvoke r14.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>();

        $z6 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9);

        if $z6 != 0 goto label1;

        $r10 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType NO_MATCH>;

        return $r10;

     label1:
        i0 = virtualinvoke r13.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        i1 = virtualinvoke r14.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        if i0 == 0 goto label4;

        if i1 == 0 goto label4;

        $z3 = virtualinvoke r13.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean exactlySameAs(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r14);

        if $z3 == 0 goto label2;

        $r7 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType EXACT_MATCH>;

        return $r7;

     label2:
        if i0 != i1 goto label3;

        $z4 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNationalNumberSuffixOfTheOther(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r13, r14);

        if $z4 == 0 goto label3;

        $r6 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType SHORT_NSN_MATCH>;

        return $r6;

     label3:
        $r5 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType NO_MATCH>;

        return $r5;

     label4:
        virtualinvoke r13.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>(i1);

        $z1 = virtualinvoke r13.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: boolean exactlySameAs(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r14);

        if $z1 == 0 goto label5;

        $r4 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType NSN_MATCH>;

        return $r4;

     label5:
        $z2 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isNationalNumberSuffixOfTheOther(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r13, r14);

        if $z2 == 0 goto label6;

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType SHORT_NSN_MATCH>;

        return $r3;

     label6:
        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType NO_MATCH>;

        return $r2;
    }

    public com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, java.lang.CharSequence)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber $r2, $r8, r11, r16;
        com.android.internal.telephony.phonenumbers.NumberParseException $r3, $r5;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType $r4, $r9, $r10, r12, r15, r17;
        com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType $r6, $r7;
        int $i0;
        boolean $z0;
        java.lang.String r14;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r11 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r1 := @parameter1: java.lang.CharSequence;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>(r1, "ZZ");

        r12 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r11, $r2);

     label2:
        return r12;

     label3:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<com.android.internal.telephony.phonenumbers.NumberParseException: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType getErrorType()>();

        $r7 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        if $r6 != $r7 goto label9;

        $i0 = virtualinvoke r11.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r14 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>($i0);

     label4:
        $z0 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>("ZZ");

        if $z0 != 0 goto label6;

        $r8 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>(r1, r14);

        r15 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r11, $r8);

        $r9 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType EXACT_MATCH>;

        if r15 != $r9 goto label5;

        $r10 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType NSN_MATCH>;

        return $r10;

     label5:
        return r15;

     label6:
        r16 = new com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke r16.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void parseHelper(java.lang.CharSequence,java.lang.String,boolean,boolean,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1, null, 0, 0, r16);

        r17 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r11, r16);

     label7:
        return r17;

     label8:
        $r3 := @caughtexception;

     label9:
        $r4 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType NOT_A_NUMBER>;

        return $r4;

        catch com.android.internal.telephony.phonenumbers.NumberParseException from label1 to label2 with label3;
        catch com.android.internal.telephony.phonenumbers.NumberParseException from label4 to label5 with label8;
        catch com.android.internal.telephony.phonenumbers.NumberParseException from label6 to label7 with label8;
    }

    public com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(java.lang.CharSequence, java.lang.CharSequence)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1, r12;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r2, $r3, $r8, r17;
        com.android.internal.telephony.phonenumbers.NumberParseException $r4, $r5, $r9;
        com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType $r6, $r7, $r10, $r11;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType r13, r15, r18, $r20;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r12 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.CharSequence;

     label01:
        $r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>(r12, "ZZ");

        r13 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,java.lang.CharSequence)>($r3, r1);

     label02:
        return r13;

     label03:
        $r5 := @caughtexception;

        $r6 = virtualinvoke $r5.<com.android.internal.telephony.phonenumbers.NumberParseException: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType getErrorType()>();

        $r7 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        if $r6 != $r7 goto label10;

     label04:
        $r8 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>(r1, "ZZ");

        r15 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,java.lang.CharSequence)>($r8, r12);

     label05:
        return r15;

     label06:
        $r9 := @caughtexception;

        $r10 = virtualinvoke $r9.<com.android.internal.telephony.phonenumbers.NumberParseException: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType getErrorType()>();

        $r11 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        if $r10 != $r11 goto label10;

     label07:
        r2 = new com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke r2.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        r17 = new com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke r17.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void parseHelper(java.lang.CharSequence,java.lang.String,boolean,boolean,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r12, null, 0, 0, r2);

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void parseHelper(java.lang.CharSequence,java.lang.String,boolean,boolean,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1, null, 0, 0, r17);

        r18 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType isNumberMatch(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r2, r17);

     label08:
        return r18;

     label09:
        $r4 := @caughtexception;

     label10:
        $r20 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$MatchType NOT_A_NUMBER>;

        return $r20;

        catch com.android.internal.telephony.phonenumbers.NumberParseException from label01 to label02 with label03;
        catch com.android.internal.telephony.phonenumbers.NumberParseException from label04 to label05 with label06;
        catch com.android.internal.telephony.phonenumbers.NumberParseException from label07 to label08 with label09;
    }

    boolean isNumberMatchingDesc(java.lang.String, com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc r2;
        int i0, $i1;
        java.util.List r3;
        com.android.internal.telephony.phonenumbers.internal.MatcherApi $r4;
        boolean $z0, $z1;
        java.lang.Integer $r5;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc;

        i0 = virtualinvoke r1.<java.lang.String: int length()>();

        r3 = virtualinvoke r2.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc: java.util.List getPossibleLengthList()>();

        $i1 = interfaceinvoke r3.<java.util.List: int size()>();

        if $i1 <= 0 goto label1;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = interfaceinvoke r3.<java.util.List: boolean contains(java.lang.Object)>($r5);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $r4 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.MatcherApi matcherApi>;

        $z0 = interfaceinvoke $r4.<com.android.internal.telephony.phonenumbers.internal.MatcherApi: boolean matchNationalNumber(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc,boolean)>(r1, r2, 0);

        return $z0;
    }

    public boolean isPossibleNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult $r1, $r2, r4;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r3;
        boolean z0;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r3 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult isPossibleNumberWithReason(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r3);

        $r1 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE>;

        if r4 == $r1 goto label2;

        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE_LOCAL_ONLY>;

        if r4 != $r2 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public boolean isPossibleNumber(java.lang.CharSequence, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.String r1;
        boolean z0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber $r2;
        com.android.internal.telephony.phonenumbers.NumberParseException $r3;
        java.lang.CharSequence r4;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r4 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence,java.lang.String)>(r4, r1);

        z0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isPossibleNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>($r2);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch com.android.internal.telephony.phonenumbers.NumberParseException from label1 to label2 with label3;
    }

    public boolean isPossibleNumberForType(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult $r2, $r3, r5;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r4;
        boolean z0;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r4 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r1 := @parameter1: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        r5 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult isPossibleNumberForTypeWithReason(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r4, r1);

        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE>;

        if r5 == $r2 goto label2;

        $r3 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult IS_POSSIBLE_LOCAL_ONLY>;

        if r5 != $r3 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult isPossibleNumberForTypeWithReason(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType r2;
        java.lang.String r3, $r4;
        int i0;
        boolean $z0;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata $r5;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult $r6, $r7;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType;

        r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        i0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        $z0 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean hasValidCountryCallingCode(int)>(i0);

        if $z0 != 0 goto label1;

        $r7 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult INVALID_COUNTRY_CODE>;

        return $r7;

     label1:
        $r4 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>(i0);

        $r5 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, $r4);

        $r6 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLength(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r3, $r5, r2);

        return $r6;
    }

    public com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult isPossibleNumberWithReason(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r2;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult $r3;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        $r3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult isPossibleNumberForTypeWithReason(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType)>(r1, $r2);

        return $r3;
    }

    public boolean isValidNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String $r2;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $r2 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $z0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidNumberForRegion(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber,java.lang.String)>(r1, $r2);

        return $z0;
    }

    public boolean isValidNumberForRegion(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1;
        java.lang.String r2, $r4, $r5;
        int i0, $i1;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r3;
        boolean $z0, z1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType $r6, $r7;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        r2 := @parameter1: java.lang.String;

        i0 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>();

        r3 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegionOrCallingCode(int,java.lang.String)>(i0, r2);

        z1 = 0;

        if r3 == null goto label3;

        $r4 = "001";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z0 != 0 goto label1;

        $i1 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int getCountryCodeForValidRegion(java.lang.String)>(r2);

        if i0 == $i1 goto label1;

        goto label3;

     label1:
        $r5 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.String getNationalSignificantNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        $r6 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType getNumberTypeHelper(java.lang.String,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)>($r5, r3);

        $r7 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$PhoneNumberType UNKNOWN>;

        if $r6 == $r7 goto label2;

        z1 = 1;

     label2:
        return z1;

     label3:
        return 0;
    }

    int maybeExtractCountryCode(java.lang.CharSequence, com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata, java.lang.StringBuilder, boolean, com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber) throws com.android.internal.telephony.phonenumbers.NumberParseException
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r1;
        java.lang.StringBuilder r2, $r5, $r8;
        boolean z0, $z1, $z3, $z4;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r3;
        int $i0, $i1, $i2, i3, i4;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource $r6, $r15, r26;
        java.lang.String $r9, r25, r27, r28;
        com.android.internal.telephony.phonenumbers.internal.MatcherApi $r10, $r17;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult $r11, $r12;
        com.android.internal.telephony.phonenumbers.NumberParseException $r18, $r20;
        com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType $r19, $r21;
        java.lang.CharSequence r24;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc r30;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r24 := @parameter0: java.lang.CharSequence;

        r1 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata;

        r2 := @parameter2: java.lang.StringBuilder;

        z0 := @parameter3: boolean;

        r3 := @parameter4: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $i0 = interfaceinvoke r24.<java.lang.CharSequence: int length()>();

        if $i0 != 0 goto label01;

        return 0;

     label01:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(r24);

        r25 = "NonMatch";

        if r1 == null goto label02;

        r25 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()>();

     label02:
        r26 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource maybeStripInternationalPrefixAndNormalize(java.lang.StringBuilder,java.lang.String)>($r5, r25);

        if z0 == 0 goto label03;

        virtualinvoke r3.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setCountryCodeSource(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource)>(r26);

     label03:
        $r6 = <com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_DEFAULT_COUNTRY>;

        if r26 == $r6 goto label06;

        $i2 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>();

        if $i2 <= 2 goto label05;

        i3 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: int extractCountryCode(java.lang.StringBuilder,java.lang.StringBuilder)>($r5, r2);

        if i3 == 0 goto label04;

        virtualinvoke r3.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>(i3);

        return i3;

     label04:
        $r20 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r21 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType INVALID_COUNTRY_CODE>;

        specialinvoke $r20.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r21, "Country calling code supplied was not recognised.");

        throw $r20;

     label05:
        $r18 = new com.android.internal.telephony.phonenumbers.NumberParseException;

        $r19 = <com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType: com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType TOO_SHORT_AFTER_IDD>;

        specialinvoke $r18.<com.android.internal.telephony.phonenumbers.NumberParseException: void <init>(com.android.internal.telephony.phonenumbers.NumberParseException$ErrorType,java.lang.String)>($r19, "Phone number had an IDD, but after this was not long enough to be a viable phone number.");

        throw $r18;

     label06:
        if r1 == null goto label10;

        i4 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()>();

        r27 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i4);

        r28 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        $z1 = virtualinvoke r28.<java.lang.String: boolean startsWith(java.lang.String)>(r27);

        if $z1 == 0 goto label10;

        $r8 = new java.lang.StringBuilder;

        $i1 = virtualinvoke r27.<java.lang.String: int length()>();

        $r9 = virtualinvoke r28.<java.lang.String: java.lang.String substring(int)>($i1);

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>($r9);

        r30 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean maybeStripNationalPrefixAndCarrierCode(java.lang.StringBuilder,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata,java.lang.StringBuilder)>($r8, r1, null);

        $r10 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.MatcherApi matcherApi>;

        $z3 = interfaceinvoke $r10.<com.android.internal.telephony.phonenumbers.internal.MatcherApi: boolean matchNationalNumber(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc,boolean)>($r5, r30, 0);

        if $z3 != 0 goto label07;

        $r17 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.MatcherApi matcherApi>;

        $z4 = interfaceinvoke $r17.<com.android.internal.telephony.phonenumbers.internal.MatcherApi: boolean matchNationalNumber(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc,boolean)>($r8, r30, 0);

        if $z4 != 0 goto label08;

     label07:
        $r11 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult testNumberLength(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata)>($r5, r1);

        $r12 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult TOO_LONG>;

        if $r11 != $r12 goto label10;

     label08:
        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r8);

        if z0 == 0 goto label09;

        $r15 = <com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_NUMBER_WITHOUT_PLUS_SIGN>;

        virtualinvoke r3.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setCountryCodeSource(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource)>($r15);

     label09:
        virtualinvoke r3.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>(i4);

        return i4;

     label10:
        virtualinvoke r3.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setCountryCode(int)>(0);

        return 0;
    }

    java.lang.String maybeStripExtension(java.lang.StringBuilder)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.StringBuilder r1;
        java.util.regex.Matcher r2;
        int i0, $i1, $i2, $i3, i4;
        java.lang.String r3, $r5, $r6;
        java.util.regex.Pattern $r4;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.StringBuilder;

        $r4 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern EXTN_PATTERN>;

        r2 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean find()>();

        if $z0 == 0 goto label3;

        $i1 = virtualinvoke r2.<java.util.regex.Matcher: int start()>();

        $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String substring(int,int)>(0, $i1);

        $z1 = staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isViablePhoneNumber(java.lang.CharSequence)>($r5);

        if $z1 == 0 goto label3;

        i4 = 1;

        i0 = virtualinvoke r2.<java.util.regex.Matcher: int groupCount()>();

     label1:
        if i4 > i0 goto label3;

        $r6 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(i4);

        if $r6 == null goto label2;

        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(i4);

        $i2 = virtualinvoke r2.<java.util.regex.Matcher: int start()>();

        $i3 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>($i2, $i3);

        return r3;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return "";
    }

    com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource maybeStripInternationalPrefixAndNormalize(java.lang.StringBuilder, java.lang.String)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.util.regex.Matcher r1;
        int $i0, $i1;
        java.util.regex.Pattern $r2, r11;
        boolean $z0, $z1;
        com.android.internal.telephony.phonenumbers.internal.RegexCache $r3;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource $r7, $r8, r12;
        java.lang.StringBuilder r9;
        java.lang.String r10;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r9 := @parameter0: java.lang.StringBuilder;

        r10 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r9.<java.lang.StringBuilder: int length()>();

        if $i0 != 0 goto label1;

        $r8 = <com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_DEFAULT_COUNTRY>;

        return $r8;

     label1:
        $r2 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.util.regex.Pattern PLUS_CHARS_PATTERN>;

        r1 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r9);

        $z0 = virtualinvoke r1.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z0 == 0 goto label2;

        $i1 = virtualinvoke r1.<java.util.regex.Matcher: int end()>();

        virtualinvoke r9.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $i1);

        staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.StringBuilder normalize(java.lang.StringBuilder)>(r9);

        $r7 = <com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_NUMBER_WITH_PLUS_SIGN>;

        return $r7;

     label2:
        $r3 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.RegexCache regexCache>;

        r11 = virtualinvoke $r3.<com.android.internal.telephony.phonenumbers.internal.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>(r10);

        staticinvoke <com.android.internal.telephony.phonenumbers.PhoneNumberUtil: java.lang.StringBuilder normalize(java.lang.StringBuilder)>(r9);

        $z1 = specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean parsePrefixAsIdd(java.util.regex.Pattern,java.lang.StringBuilder)>(r11, r9);

        if $z1 == 0 goto label3;

        r12 = <com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_NUMBER_WITH_IDD>;

        goto label4;

     label3:
        r12 = <com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource FROM_DEFAULT_COUNTRY>;

     label4:
        return r12;
    }

    boolean maybeStripNationalPrefixAndCarrierCode(java.lang.StringBuilder, com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata, java.lang.StringBuilder)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.StringBuilder r1, r2, $r15;
        int i0, i1, $i2, $i3, $i4, $i5, $i6;
        java.util.regex.Matcher r3;
        boolean z0, $z1, $z2, $z3;
        com.android.internal.telephony.phonenumbers.internal.RegexCache $r5;
        java.util.regex.Pattern $r6;
        com.android.internal.telephony.phonenumbers.internal.MatcherApi $r7, $r12, $r21;
        java.lang.String $r9, $r10, $r13, $r14, $r16, $r19, $r22, r24, r26, $r27;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata r23;
        com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc r25;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.StringBuilder;

        r23 := @parameter1: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata;

        r2 := @parameter2: java.lang.StringBuilder;

        i0 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        r24 = virtualinvoke r23.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixForParsing()>();

        if i0 == 0 goto label9;

        $i2 = virtualinvoke r24.<java.lang.String: int length()>();

        if $i2 != 0 goto label1;

        goto label9;

     label1:
        $r5 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.RegexCache regexCache>;

        $r6 = virtualinvoke $r5.<com.android.internal.telephony.phonenumbers.internal.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>(r24);

        r3 = virtualinvoke $r6.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1);

        $z1 = virtualinvoke r3.<java.util.regex.Matcher: boolean lookingAt()>();

        if $z1 == 0 goto label8;

        r25 = virtualinvoke r23.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc getGeneralDesc()>();

        $r7 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.MatcherApi matcherApi>;

        z0 = interfaceinvoke $r7.<com.android.internal.telephony.phonenumbers.internal.MatcherApi: boolean matchNationalNumber(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc,boolean)>(r1, r25, 0);

        i1 = virtualinvoke r3.<java.util.regex.Matcher: int groupCount()>();

        r26 = virtualinvoke r23.<com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixTransformRule()>();

        if r26 == null goto label5;

        $i4 = virtualinvoke r26.<java.lang.String: int length()>();

        if $i4 == 0 goto label5;

        $r14 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(i1);

        if $r14 != null goto label2;

        goto label5;

     label2:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.CharSequence)>(r1);

        $r16 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>(r26);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(0, i0, $r16);

        if z0 == 0 goto label3;

        $r21 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.MatcherApi matcherApi>;

        $r22 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = interfaceinvoke $r21.<com.android.internal.telephony.phonenumbers.internal.MatcherApi: boolean matchNationalNumber(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc,boolean)>($r22, r25, 0);

        if $z3 != 0 goto label3;

        return 0;

     label3:
        if r2 == null goto label4;

        if i1 <= 1 goto label4;

        $r19 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

     label4:
        $i5 = virtualinvoke r1.<java.lang.StringBuilder: int length()>();

        $r27 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>(0, $i5, $r27);

        return 1;

     label5:
        if z0 == 0 goto label6;

        $r12 = r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.internal.MatcherApi matcherApi>;

        $i3 = virtualinvoke r3.<java.util.regex.Matcher: int end()>();

        $r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String substring(int)>($i3);

        $z2 = interfaceinvoke $r12.<com.android.internal.telephony.phonenumbers.internal.MatcherApi: boolean matchNationalNumber(java.lang.CharSequence,com.android.internal.telephony.phonenumbers.Phonemetadata$PhoneNumberDesc,boolean)>($r13, r25, 0);

        if $z2 != 0 goto label6;

        return 0;

     label6:
        if r2 == null goto label7;

        if i1 <= 0 goto label7;

        $r9 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(i1);

        if $r9 == null goto label7;

        $r10 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

     label7:
        $i6 = virtualinvoke r3.<java.util.regex.Matcher: int end()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>(0, $i6);

        return 1;

     label8:
        return 0;

     label9:
        return 0;
    }

    public com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parse(java.lang.CharSequence, java.lang.String) throws com.android.internal.telephony.phonenumbers.NumberParseException
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber $r4;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        $r4 = new com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r4.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void parse(java.lang.CharSequence,java.lang.String,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1, r2, $r4);

        return $r4;
    }

    public void parse(java.lang.CharSequence, java.lang.String, com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber) throws com.android.internal.telephony.phonenumbers.NumberParseException
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r3;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void parseHelper(java.lang.CharSequence,java.lang.String,boolean,boolean,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1, r2, 0, 1, r3);

        return;
    }

    public com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber parseAndKeepRawInput(java.lang.CharSequence, java.lang.String) throws com.android.internal.telephony.phonenumbers.NumberParseException
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber $r4;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        $r4 = new com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r4.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void parseAndKeepRawInput(java.lang.CharSequence,java.lang.String,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1, r2, $r4);

        return $r4;
    }

    public void parseAndKeepRawInput(java.lang.CharSequence, java.lang.String, com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber) throws com.android.internal.telephony.phonenumbers.NumberParseException
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        java.lang.CharSequence r1;
        java.lang.String r2;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r3;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: java.lang.CharSequence;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: void parseHelper(java.lang.CharSequence,java.lang.String,boolean,boolean,com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1, r2, 1, 1, r3);

        return;
    }

    public boolean truncateTooLongNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)
    {
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil r0;
        com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber r1, $r3;
        long l0, l2;
        boolean $z0, $z1;
        com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult $r6, $r7;
        byte $b1;

        r0 := @this: com.android.internal.telephony.phonenumbers.PhoneNumberUtil;

        r1 := @parameter0: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        $z0 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = new com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber;

        specialinvoke $r3.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: void <init>()>();

        virtualinvoke $r3.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber mergeFrom(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>(r1);

        l2 = virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>();

     label2:
        l0 = l2 / 10L;

        virtualinvoke $r3.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setNationalNumber(long)>(l0);

        $r6 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult isPossibleNumberWithReason(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>($r3);

        $r7 = <com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult: com.android.internal.telephony.phonenumbers.PhoneNumberUtil$ValidationResult TOO_SHORT>;

        if $r6 == $r7 goto label4;

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label3;

        goto label4;

     label3:
        l2 = l0;

        $z1 = virtualinvoke r0.<com.android.internal.telephony.phonenumbers.PhoneNumberUtil: boolean isValidNumber(com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber)>($r3);

        if $z1 == 0 goto label2;

        virtualinvoke r1.<com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber: com.android.internal.telephony.phonenumbers.Phonenumber$PhoneNumber setNationalNumber(long)>(l0);

        return 1;

     label4:
        return 0;
    }
}
