class com.android.internal.telephony.sip.SipPhone$SipConnection extends com.android.internal.telephony.sip.SipConnectionBase
{
    private static final boolean SCN_DBG;
    private static final java.lang.String SCN_TAG;
    private com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter;
    private boolean mIncoming;
    private java.lang.String mOriginalNumber;
    private com.android.internal.telephony.sip.SipPhone$SipCall mOwner;
    private android.net.sip.SipProfile mPeer;
    private android.net.sip.SipAudioCall mSipAudioCall;
    private com.android.internal.telephony.Call$State mState;
    final com.android.internal.telephony.sip.SipPhone this$0;

    public void <init>(com.android.internal.telephony.sip.SipPhone, com.android.internal.telephony.sip.SipPhone$SipCall, android.net.sip.SipProfile)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone r1;
        com.android.internal.telephony.sip.SipPhone$SipCall r2;
        android.net.sip.SipProfile r3;
        java.lang.String $r4;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        r2 := @parameter1: com.android.internal.telephony.sip.SipPhone$SipCall;

        r3 := @parameter2: android.net.sip.SipProfile;

        $r4 = staticinvoke <com.android.internal.telephony.sip.SipPhone: java.lang.String access$1400(com.android.internal.telephony.sip.SipPhone,android.net.sip.SipProfile)>(r1, r3);

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void <init>(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.sip.SipPhone$SipCall,android.net.sip.SipProfile,java.lang.String)>(r1, r2, r3, $r4);

        return;
    }

    public void <init>(com.android.internal.telephony.sip.SipPhone, com.android.internal.telephony.sip.SipPhone$SipCall, android.net.sip.SipProfile, java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone r1;
        com.android.internal.telephony.sip.SipPhone$SipCall r2;
        android.net.sip.SipProfile r3;
        java.lang.String r4;
        com.android.internal.telephony.Call$State $r5;
        com.android.internal.telephony.sip.SipPhone$SipConnection$1 $r6;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: com.android.internal.telephony.sip.SipPhone;

        r2 := @parameter1: com.android.internal.telephony.sip.SipPhone$SipCall;

        r3 := @parameter2: android.net.sip.SipProfile;

        r4 := @parameter3: java.lang.String;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0> = r1;

        specialinvoke r0.<com.android.internal.telephony.sip.SipConnectionBase: void <init>(java.lang.String)>(r4);

        $r5 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState> = $r5;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean mIncoming> = 0;

        $r6 = new com.android.internal.telephony.sip.SipPhone$SipConnection$1;

        specialinvoke $r6.<com.android.internal.telephony.sip.SipPhone$SipConnection$1: void <init>(com.android.internal.telephony.sip.SipPhone$SipConnection)>(r0);

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter> = $r6;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner> = r2;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer> = r3;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String mOriginalNumber> = r4;

        return;
    }

    static com.android.internal.telephony.sip.SipPhone$SipCall access$1000(com.android.internal.telephony.sip.SipPhone$SipConnection)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner>;

        return $r1;
    }

    static com.android.internal.telephony.Call$State access$1100(com.android.internal.telephony.sip.SipPhone$SipConnection)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.Call$State $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        return $r1;
    }

    static android.net.sip.SipAudioCall access$700(com.android.internal.telephony.sip.SipPhone$SipConnection)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        return $r1;
    }

    static android.net.sip.SipAudioCall access$702(com.android.internal.telephony.sip.SipPhone$SipConnection, android.net.sip.SipAudioCall)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter1: android.net.sip.SipAudioCall;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall> = r1;

        return r1;
    }

    static android.net.sip.SipProfile access$800(com.android.internal.telephony.sip.SipPhone$SipConnection)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipProfile $r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer>;

        return $r1;
    }

    static void access$900(com.android.internal.telephony.sip.SipPhone$SipConnection, java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.String r1;

        r0 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void log(java.lang.String)>(r1);

        return;
    }

    private void log(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SipConnection", r1);

        return;
    }

    void acceptCall() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall $r3;
        android.net.sip.SipException $r4;
        java.lang.StringBuilder $r5;
        com.android.internal.telephony.CallStateException $r8;
        java.lang.String $r9;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

     label1:
        $r3 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r3.<android.net.sip.SipAudioCall: void answerCall(int)>(8);

     label2:
        return;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("acceptCall(): ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = new com.android.internal.telephony.CallStateException;

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch android.net.sip.SipException from label1 to label2 with label3;
    }

    void changeOwner(com.android.internal.telephony.sip.SipPhone$SipCall)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone$SipCall r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: com.android.internal.telephony.sip.SipPhone$SipCall;

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner> = r1;

        return;
    }

    public void consultativeTransfer(com.android.internal.telephony.Connection) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.Connection r1;
        com.android.internal.telephony.CallStateException $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        $r2 = new com.android.internal.telephony.CallStateException;

        specialinvoke $r2.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>("transfer is not supported for SipPhone");

        throw $r2;
    }

    public void deflect(java.lang.String) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.String r1;
        com.android.internal.telephony.CallStateException $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: java.lang.String;

        $r2 = new com.android.internal.telephony.CallStateException;

        specialinvoke $r2.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>("deflect is not supported for SipPhone");

        throw $r2;
    }

    void dial() throws android.net.sip.SipException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall r1;
        com.android.internal.telephony.Call$State $r2;
        com.android.internal.telephony.sip.SipPhone $r3, $r5;
        android.net.sip.SipManager $r4;
        android.net.sip.SipProfile $r6, $r7;
        com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter $r8;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r2 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State DIALING>;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void setState(com.android.internal.telephony.Call$State)>($r2);

        $r3 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        $r4 = staticinvoke <com.android.internal.telephony.sip.SipPhone: android.net.sip.SipManager access$1500(com.android.internal.telephony.sip.SipPhone)>($r3);

        $r5 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        $r6 = staticinvoke <com.android.internal.telephony.sip.SipPhone: android.net.sip.SipProfile access$100(com.android.internal.telephony.sip.SipPhone)>($r5);

        $r7 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer>;

        r1 = virtualinvoke $r4.<android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>($r6, $r7, null, 15);

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall> = r1;

        $r8 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter>;

        virtualinvoke r1.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>($r8);

        return;
    }

    public java.lang.String getAddress()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String mOriginalNumber>;

        return $r1;
    }

    android.net.rtp.AudioGroup getAudioGroup()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall r1;
        android.net.rtp.AudioGroup $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r1.<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>();

        return $r2;
    }

    public volatile com.android.internal.telephony.Call getCall()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall getCall()>();

        return $r1;
    }

    public com.android.internal.telephony.sip.SipPhone$SipCall getCall()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner>;

        return $r1;
    }

    public java.lang.String getCnapName()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipProfile $r1;
        boolean $z0;
        java.lang.String r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer>;

        r2 = virtualinvoke $r1.<android.net.sip.SipProfile: java.lang.String getDisplayName()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z0 == 0 goto label1;

        r2 = null;

        goto label1;

     label1:
        return r2;
    }

    boolean getMute()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall r1;
        boolean z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        if r1 != null goto label1;

        z0 = 0;

        goto label2;

     label1:
        z0 = virtualinvoke r1.<android.net.sip.SipAudioCall: boolean isMuted()>();

     label2:
        return z0;
    }

    public int getNumberPresentation()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        return 1;
    }

    protected com.android.internal.telephony.Phone getPhone()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.sip.SipPhone$SipCall $r1;
        com.android.internal.telephony.Phone $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner>;

        $r2 = virtualinvoke $r1.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()>();

        return $r2;
    }

    public com.android.internal.telephony.Call$State getState()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.Call$State $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        return $r1;
    }

    public void hangup() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.StringBuilder r1, r30;
        android.net.sip.SipProfile $r3;
        java.lang.String $r4, $r5, $r12, $r14, $r29;
        com.android.internal.telephony.Call$State $r8, $r15, $r16, $r17, $r18, $r19, $r22, $r23, $r24, $r25;
        com.android.internal.telephony.Phone $r11;
        boolean $z0;
        java.lang.Throwable $r20, $r21;
        android.net.sip.SipException $r26;
        byte b0;
        android.net.sip.SipAudioCall r31;
        com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter r32, r36;
        com.android.internal.telephony.CallStateException r35;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        entermonitor class "Lcom/android/internal/telephony/sip/SipPhone;";

     label01:
        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hangup: conn=");

        $r3 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer>;

        $r4 = virtualinvoke $r3.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        $r5 = staticinvoke <com.android.internal.telephony.sip.SipPhone: java.lang.String hidePii(java.lang.String)>($r4);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r8 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": on phone ");

        $r11 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>();

        $r12 = virtualinvoke $r11.<com.android.internal.telephony.Phone: java.lang.String getPhoneName()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void log(java.lang.String)>($r14);

        $r15 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $z0 = virtualinvoke $r15.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z0 != 0 goto label03;

        exitmonitor class "Lcom/android/internal/telephony/sip/SipPhone;";

     label02:
        return;

     label03:
        b0 = 3;

     label04:
        r31 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

     label05:
        if r31 == null goto label07;

     label06:
        virtualinvoke r31.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>(null);

        virtualinvoke r31.<android.net.sip.SipAudioCall: void endCall()>();

     label07:
        r32 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter>;

        $r17 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $r16 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State INCOMING>;

        if $r17 == $r16 goto label10;

        $r19 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $r18 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State WAITING>;

        if $r19 != $r18 goto label09;

     label08:
        goto label10;

     label09:
        goto label11;

     label10:
        b0 = 16;

     label11:
        virtualinvoke r32.<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallEnded(int)>(b0);

     label12:
        exitmonitor class "Lcom/android/internal/telephony/sip/SipPhone;";

     label13:
        return;

     label14:
        $r21 := @caughtexception;

        goto label17;

     label15:
        $r26 := @caughtexception;

     label16:
        r35 = new com.android.internal.telephony.CallStateException;

        r1 = new java.lang.StringBuilder;

        specialinvoke r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hangup(): ");

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r29 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r35.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r29);

        throw r35;

     label17:
        r36 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter>;

        $r23 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $r22 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State INCOMING>;

        if $r23 == $r22 goto label20;

        $r25 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        $r24 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State WAITING>;

        if $r25 != $r24 goto label19;

     label18:
        goto label20;

     label19:
        goto label21;

     label20:
        b0 = 16;

     label21:
        virtualinvoke r36.<com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter: void onCallEnded(int)>(b0);

     label22:
        throw $r21;

     label23:
        $r20 := @caughtexception;

     label24:
        exitmonitor class "Lcom/android/internal/telephony/sip/SipPhone;";

     label25:
        throw $r20;

        catch java.lang.Throwable from label01 to label02 with label23;
        catch android.net.sip.SipException from label04 to label05 with label15;
        catch java.lang.Throwable from label04 to label05 with label14;
        catch android.net.sip.SipException from label06 to label07 with label15;
        catch java.lang.Throwable from label06 to label07 with label14;
        catch java.lang.Throwable from label07 to label08 with label23;
        catch java.lang.Throwable from label11 to label12 with label23;
        catch java.lang.Throwable from label12 to label13 with label23;
        catch java.lang.Throwable from label16 to label17 with label14;
        catch java.lang.Throwable from label17 to label18 with label23;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label22 to label23 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    void hold() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.Call$State $r3;
        android.net.sip.SipAudioCall $r4;
        android.net.sip.SipException $r5;
        java.lang.StringBuilder $r6;
        com.android.internal.telephony.CallStateException $r9;
        java.lang.String $r10;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $r3 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State HOLDING>;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void setState(com.android.internal.telephony.Call$State)>($r3);

     label1:
        $r4 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r4.<android.net.sip.SipAudioCall: void holdCall(int)>(15);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("hold(): ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = new com.android.internal.telephony.CallStateException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch android.net.sip.SipException from label1 to label2 with label3;
    }

    void initIncomingCall(android.net.sip.SipAudioCall, com.android.internal.telephony.Call$State)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall r1;
        com.android.internal.telephony.Call$State r2;
        com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter $r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: android.net.sip.SipAudioCall;

        r2 := @parameter1: com.android.internal.telephony.Call$State;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void setState(com.android.internal.telephony.Call$State)>(r2);

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall> = r1;

        $r3 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipAudioCallAdapter mAdapter>;

        virtualinvoke r1.<android.net.sip.SipAudioCall: void setListener(android.net.sip.SipAudioCall$Listener)>($r3);

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean mIncoming> = 1;

        return;
    }

    public boolean isIncoming()
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        boolean $z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        $z0 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean mIncoming>;

        return $z0;
    }

    public void separate() throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.Phone $r1, r30;
        com.android.internal.telephony.sip.SipPhone $r2, $r3, $r22, $r25;
        com.android.internal.telephony.Call $r4, $r23, $r26;
        com.android.internal.telephony.Call$State $r5, $r6, $r8;
        java.lang.String $r10, $r13, $r20;
        android.net.sip.SipProfile $r12;
        com.android.internal.telephony.sip.SipPhone$SipCall $r16, r28, r32;
        android.net.sip.SipAudioCall $r21, $r24;
        java.lang.Throwable $r27;
        java.lang.StringBuilder r29, r34;
        android.net.rtp.AudioGroup r31;
        com.android.internal.telephony.CallStateException r33;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        entermonitor class "Lcom/android/internal/telephony/sip/SipPhone;";

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>();

        $r2 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        if $r1 != $r2 goto label3;

        $r25 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        $r26 = virtualinvoke $r25.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()>();

        r28 = (com.android.internal.telephony.sip.SipPhone$SipCall) $r26;

     label2:
        goto label4;

     label3:
        $r3 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        $r4 = virtualinvoke $r3.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>();

        r28 = (com.android.internal.telephony.sip.SipPhone$SipCall) $r4;

     label4:
        $r5 = virtualinvoke r28.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        $r6 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State IDLE>;

        if $r5 != $r6 goto label6;

        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("separate: conn=");

        $r12 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile mPeer>;

        $r13 = virtualinvoke $r12.<android.net.sip.SipProfile: java.lang.String getUriString()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from ");

        $r16 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall mOwner>;

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" back to ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r28);

        $r20 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void log(java.lang.String)>($r20);

        r30 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>();

        r31 = staticinvoke <com.android.internal.telephony.sip.SipPhone$SipCall: android.net.rtp.AudioGroup access$1600(com.android.internal.telephony.sip.SipPhone$SipCall)>(r28);

        staticinvoke <com.android.internal.telephony.sip.SipPhone$SipCall: void access$1700(com.android.internal.telephony.sip.SipPhone$SipCall,com.android.internal.telephony.sip.SipPhone$SipConnection)>(r28, r0);

        $r21 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r21.<android.net.sip.SipAudioCall: void setAudioGroup(android.net.rtp.AudioGroup)>(r31);

        virtualinvoke r30.<com.android.internal.telephony.Phone: void switchHoldingAndActive()>();

        $r22 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone this$0>;

        $r23 = virtualinvoke $r22.<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>();

        r32 = (com.android.internal.telephony.sip.SipPhone$SipCall) $r23;

        $r24 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r24.<android.net.sip.SipAudioCall: void startAudio()>();

        virtualinvoke r32.<com.android.internal.telephony.sip.SipPhone$SipCall: void onConnectionStateChanged(com.android.internal.telephony.sip.SipPhone$SipConnection)>(r0);

        exitmonitor class "Lcom/android/internal/telephony/sip/SipPhone;";

     label5:
        return;

     label6:
        r33 = new com.android.internal.telephony.CallStateException;

        r34 = new java.lang.StringBuilder;

        specialinvoke r34.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cannot put conn back to a call in non-idle state: ");

        $r8 = virtualinvoke r28.<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Call$State getState()>();

        virtualinvoke r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r33.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r10);

        throw r33;

     label7:
        $r27 := @caughtexception;

     label8:
        exitmonitor class "Lcom/android/internal/telephony/sip/SipPhone;";

     label9:
        throw $r27;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label4 to label5 with label7;
        catch java.lang.Throwable from label6 to label7 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void setMute(boolean)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        boolean z0, $z1, $z2;
        java.lang.StringBuilder $r1;
        java.lang.String $r6;
        android.net.sip.SipAudioCall $r7, r8;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        z0 := @parameter0: boolean;

        r8 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        if r8 == null goto label1;

        $z1 = virtualinvoke r8.<android.net.sip.SipAudioCall: boolean isMuted()>();

        if z0 == $z1 goto label1;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setState: prev muted=");

        $z2 = z0 ^ 1;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" new muted=");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void log(java.lang.String)>($r6);

        $r7 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r7.<android.net.sip.SipAudioCall: void toggleMute()>();

     label1:
        return;
    }

    protected void setState(com.android.internal.telephony.Call$State)
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        com.android.internal.telephony.Call$State r1, $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: com.android.internal.telephony.Call$State;

        $r2 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState>;

        if r1 != $r2 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.internal.telephony.sip.SipConnectionBase: void setState(com.android.internal.telephony.Call$State)>(r1);

        r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State mState> = r1;

        return;
    }

    public void transfer(java.lang.String, boolean) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        java.lang.String r1;
        boolean z0;
        com.android.internal.telephony.CallStateException $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r2 = new com.android.internal.telephony.CallStateException;

        specialinvoke $r2.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>("transfer is not supported for SipPhone");

        throw $r2;
    }

    void unhold(android.net.rtp.AudioGroup) throws com.android.internal.telephony.CallStateException
    {
        com.android.internal.telephony.sip.SipPhone$SipConnection r0;
        android.net.sip.SipAudioCall $r2, $r4;
        com.android.internal.telephony.Call$State $r3;
        android.net.sip.SipException $r5;
        java.lang.StringBuilder $r6;
        com.android.internal.telephony.CallStateException $r9;
        java.lang.String $r10;
        android.net.rtp.AudioGroup r11;

        r0 := @this: com.android.internal.telephony.sip.SipPhone$SipConnection;

        r11 := @parameter0: android.net.rtp.AudioGroup;

        $r2 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r2.<android.net.sip.SipAudioCall: void setAudioGroup(android.net.rtp.AudioGroup)>(r11);

        $r3 = <com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State ACTIVE>;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: void setState(com.android.internal.telephony.Call$State)>($r3);

     label1:
        $r4 = r0.<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall mSipAudioCall>;

        virtualinvoke $r4.<android.net.sip.SipAudioCall: void continueCall(int)>(15);

     label2:
        return;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unhold(): ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = new com.android.internal.telephony.CallStateException;

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r9.<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>($r10);

        throw $r9;

        catch android.net.sip.SipException from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String SCN_TAG> = "SipConnection";

        <com.android.internal.telephony.sip.SipPhone$SipConnection: boolean SCN_DBG> = 1;

        return;
    }
}
