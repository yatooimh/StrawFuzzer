abstract class com.android.internal.telephony.sip.SipPhoneBase extends com.android.internal.telephony.Phone
{
    private static final java.lang.String LOG_TAG;
    private com.android.internal.telephony.RegistrantList mRingbackRegistrants;
    private com.android.internal.telephony.PhoneConstants$State mState;

    public void <init>(java.lang.String, android.content.Context, com.android.internal.telephony.PhoneNotifier)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.lang.String r1;
        android.content.Context r2;
        com.android.internal.telephony.PhoneNotifier r3;
        com.android.internal.telephony.sip.SipCommandInterface $r4;
        com.android.internal.telephony.RegistrantList $r5;
        com.android.internal.telephony.PhoneConstants$State $r6;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.content.Context;

        r3 := @parameter2: com.android.internal.telephony.PhoneNotifier;

        $r4 = new com.android.internal.telephony.sip.SipCommandInterface;

        specialinvoke $r4.<com.android.internal.telephony.sip.SipCommandInterface: void <init>(android.content.Context)>(r2);

        specialinvoke r0.<com.android.internal.telephony.Phone: void <init>(java.lang.String,com.android.internal.telephony.PhoneNotifier,android.content.Context,com.android.internal.telephony.CommandsInterface,boolean)>(r1, r3, r2, $r4, 0);

        $r5 = new com.android.internal.telephony.RegistrantList;

        specialinvoke $r5.<com.android.internal.telephony.RegistrantList: void <init>()>();

        r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.RegistrantList mRingbackRegistrants> = $r5;

        $r6 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State IDLE>;

        r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State mState> = $r6;

        return;
    }

    public void activateCellBroadcastSms(int, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SipPhoneBase", "Error! This functionality is not implemented for SIP.");

        return;
    }

    public boolean canDial()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        int i0;
        boolean z0, $z1, $z2, $z3, z4;
        android.telephony.ServiceState $r1;
        java.lang.StringBuilder $r2, $r10, $r14, $r20, $r26;
        java.lang.String $r5, $r13, $r19, $r25, $r31;
        java.util.Optional $r6;
        java.lang.Boolean $r7, $r9;
        java.lang.Object $r8;
        com.android.internal.telephony.Call $r16, $r22, $r28, $r32, $r33, $r35;
        com.android.internal.telephony.Call$State $r17, $r23, $r29, $r34, $r36;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()>();

        i0 = virtualinvoke $r1.<android.telephony.ServiceState: int getState()>();

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("canDial(): serviceState = ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int v(java.lang.String,java.lang.String)>("SipPhoneBase", $r5);

        z4 = 0;

        if i0 != 3 goto label1;

        return 0;

     label1:
        $r6 = staticinvoke <android.internal.telephony.sysprop.TelephonyProperties: java.util.Optional disable_call()>();

        $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0);

        $r8 = virtualinvoke $r6.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>($r7);

        $r9 = (java.lang.Boolean) $r8;

        z0 = virtualinvoke $r9.<java.lang.Boolean: boolean booleanValue()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("canDial(): disableCall = ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int v(java.lang.String,java.lang.String)>("SipPhoneBase", $r13);

        if z0 == 0 goto label2;

        return 0;

     label2:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("canDial(): ringingCall: ");

        $r16 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getRingingCall()>();

        $r17 = virtualinvoke $r16.<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int v(java.lang.String,java.lang.String)>("SipPhoneBase", $r19);

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("canDial(): foregndCall: ");

        $r22 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getForegroundCall()>();

        $r23 = virtualinvoke $r22.<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23);

        $r25 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int v(java.lang.String,java.lang.String)>("SipPhoneBase", $r25);

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("canDial(): backgndCall: ");

        $r28 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getBackgroundCall()>();

        $r29 = virtualinvoke $r28.<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>();

        virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int v(java.lang.String,java.lang.String)>("SipPhoneBase", $r31);

        $r32 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getRingingCall()>();

        $z1 = virtualinvoke $r32.<com.android.internal.telephony.Call: boolean isRinging()>();

        if $z1 != 0 goto label4;

        $r33 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getForegroundCall()>();

        $r34 = virtualinvoke $r33.<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>();

        $z2 = virtualinvoke $r34.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z2 == 0 goto label3;

        $r35 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getBackgroundCall()>();

        $r36 = virtualinvoke $r35.<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>();

        $z3 = virtualinvoke $r36.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z3 != 0 goto label4;

     label3:
        z4 = 1;

        goto label4;

     label4:
        return z4;
    }

    public boolean disableDataConnectivity()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return 0;
    }

    public void disableLocationUpdates()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return;
    }

    public boolean enableDataConnectivity()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return 0;
    }

    public void enableLocationUpdates()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return;
    }

    public void getAvailableNetworks(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Message;

        return;
    }

    public abstract com.android.internal.telephony.Call getBackgroundCall();

    public void getCallBarring(java.lang.String, java.lang.String, android.os.Message, int)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.lang.String r1, r2;
        android.os.Message r3;
        int i0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        i0 := @parameter3: int;

        return;
    }

    public boolean getCallForwardingIndicator()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return 0;
    }

    public void getCallForwardingOption(int, int, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        int i0, i1;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.os.Message;

        return;
    }

    public void getCallForwardingOption(int, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        return;
    }

    public void getCallWaiting(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, null);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void getCellBroadcastSmsConfig(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Message;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SipPhoneBase", "Error! This functionality is not implemented for SIP.");

        return;
    }

    public com.android.internal.telephony.PhoneInternalInterface$DataActivityState getDataActivityState()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.PhoneInternalInterface$DataActivityState $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r1 = <com.android.internal.telephony.PhoneInternalInterface$DataActivityState: com.android.internal.telephony.PhoneInternalInterface$DataActivityState NONE>;

        return $r1;
    }

    public com.android.internal.telephony.PhoneConstants$DataState getDataConnectionState()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.PhoneConstants$DataState $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r1 = <com.android.internal.telephony.PhoneConstants$DataState: com.android.internal.telephony.PhoneConstants$DataState DISCONNECTED>;

        return $r1;
    }

    public boolean getDataRoamingEnabled()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return 0;
    }

    public java.lang.String getDeviceId()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public java.lang.String getDeviceSvn()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public java.lang.String getEsn()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SipPhoneBase", "[SipPhone] getEsn() is a CDMA method");

        return "0";
    }

    public abstract com.android.internal.telephony.Call getForegroundCall();

    public java.lang.String getGroupIdLevel1()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public java.lang.String getGroupIdLevel2()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public com.android.internal.telephony.IccCard getIccCard()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public com.android.internal.telephony.uicc.IccFileHandler getIccFileHandler()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public boolean getIccRecordsLoaded()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return 0;
    }

    public java.lang.String getIccSerialNumber()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public java.lang.String getImei()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public java.lang.String getLine1AlphaTag()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public java.lang.String getLine1Number()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public android.net.LinkProperties getLinkProperties(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: java.lang.String;

        return null;
    }

    public java.lang.String getMeid()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SipPhoneBase", "[SipPhone] getMeid() is a CDMA method");

        return "0";
    }

    public boolean getMessageWaitingIndicator()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return 0;
    }

    public void getOutgoingCallerIdDisplay(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Message;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, null);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public java.util.List getPendingMmiCodes()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.util.ArrayList $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(0);

        return $r1;
    }

    public int getPhoneType()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return 3;
    }

    public abstract com.android.internal.telephony.Call getRingingCall();

    public android.telephony.ServiceState getServiceState()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.telephony.ServiceState $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r2 = new android.telephony.ServiceState;

        specialinvoke $r2.<android.telephony.ServiceState: void <init>()>();

        virtualinvoke $r2.<android.telephony.ServiceState: void setVoiceRegState(int)>(0);

        return $r2;
    }

    public android.telephony.SignalStrength getSignalStrength()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.telephony.SignalStrength $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r1 = new android.telephony.SignalStrength;

        specialinvoke $r1.<android.telephony.SignalStrength: void <init>()>();

        return $r1;
    }

    public com.android.internal.telephony.PhoneConstants$State getState()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.PhoneConstants$State $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State mState>;

        return $r1;
    }

    public java.lang.String getSubscriberId()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public java.lang.String getVoiceMailAlphaTag()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public java.lang.String getVoiceMailNumber()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return null;
    }

    public boolean handleInCallMmiCommands(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean handlePinMmi(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: java.lang.String;

        return 0;
    }

    public boolean handleUssdRequest(java.lang.String, android.os.ResultReceiver)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.lang.String r1;
        android.os.ResultReceiver r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: android.os.ResultReceiver;

        return 0;
    }

    public boolean isDataAllowed(int)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        int i0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        i0 := @parameter0: int;

        return 0;
    }

    boolean isInCall()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.Call$State r1, r2, r3;
        com.android.internal.telephony.Call $r4, $r5, $r6;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r4 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getForegroundCall()>();

        r1 = virtualinvoke $r4.<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>();

        $r5 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getBackgroundCall()>();

        r2 = virtualinvoke $r5.<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>();

        $r6 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getRingingCall()>();

        r3 = virtualinvoke $r6.<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>();

        $z0 = virtualinvoke r1.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z0 != 0 goto label2;

        $z1 = virtualinvoke r2.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z1 != 0 goto label2;

        $z2 = virtualinvoke r3.<com.android.internal.telephony.Call$State: boolean isAlive()>();

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    public boolean isUserDataEnabled()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return 0;
    }

    public boolean isVideoEnabled()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return 0;
    }

    void migrateFrom(com.android.internal.telephony.sip.SipPhoneBase)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0, r1;
        com.android.internal.telephony.RegistrantList $r2, $r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: com.android.internal.telephony.sip.SipPhoneBase;

        specialinvoke r0.<com.android.internal.telephony.Phone: void migrateFrom(com.android.internal.telephony.Phone)>(r1);

        $r3 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.RegistrantList mRingbackRegistrants>;

        $r2 = r1.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.RegistrantList mRingbackRegistrants>;

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void migrate(com.android.internal.telephony.RegistrantList,com.android.internal.telephony.RegistrantList)>($r3, $r2);

        return;
    }

    public boolean needsOtaServiceProvisioning()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return 0;
    }

    public void notifyCallForwardingIndicator()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.PhoneNotifier $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneNotifier mNotifier>;

        interfaceinvoke $r1.<com.android.internal.telephony.PhoneNotifier: void notifyCallForwardingChanged(com.android.internal.telephony.Phone)>(r0);

        return;
    }

    void notifyDisconnect(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.Connection r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        $r2 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.RegistrantList mDisconnectRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void notifyResult(java.lang.Object)>(r1);

        return;
    }

    void notifyNewRingingConnection(com.android.internal.telephony.Connection)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.Connection r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: com.android.internal.telephony.Connection;

        specialinvoke r0.<com.android.internal.telephony.Phone: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)>(r1);

        return;
    }

    void notifyPhoneStateChanged()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return;
    }

    void notifyPreciseCallStateChanged()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        specialinvoke r0.<com.android.internal.telephony.Phone: void notifyPreciseCallStateChangedP()>();

        return;
    }

    void notifyServiceStateChanged(android.telephony.ServiceState)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.telephony.ServiceState r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.telephony.ServiceState;

        specialinvoke r0.<com.android.internal.telephony.Phone: void notifyServiceStateChangedP(android.telephony.ServiceState)>(r1);

        return;
    }

    void notifySuppServiceFailed(com.android.internal.telephony.PhoneInternalInterface$SuppService)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.PhoneInternalInterface$SuppService r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: com.android.internal.telephony.PhoneInternalInterface$SuppService;

        $r2 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.RegistrantList mSuppServiceFailedRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void notifyResult(java.lang.Object)>(r1);

        return;
    }

    void notifyUnknownConnection()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.RegistrantList $r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r1 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.RegistrantList mUnknownConnectionRegistrants>;

        virtualinvoke $r1.<com.android.internal.telephony.RegistrantList: void notifyResult(java.lang.Object)>(r0);

        return;
    }

    protected void onUpdateIccAvailability()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return;
    }

    public void registerForRingbackTone(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;
        com.android.internal.telephony.RegistrantList $r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        $r3 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.RegistrantList mRingbackRegistrants>;

        virtualinvoke $r3.<com.android.internal.telephony.RegistrantList: void addUnique(android.os.Handler,int,java.lang.Object)>(r1, i0, r2);

        return;
    }

    public void registerForSuppServiceNotification(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void saveClirSetting(int)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        int i0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        i0 := @parameter0: int;

        return;
    }

    public void selectNetworkManually(com.android.internal.telephony.OperatorInfo, boolean, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.OperatorInfo r1;
        boolean z0;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: com.android.internal.telephony.OperatorInfo;

        z0 := @parameter1: boolean;

        r2 := @parameter2: android.os.Message;

        return;
    }

    public void sendEmergencyCallStateChange(boolean)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        z0 := @parameter0: boolean;

        return;
    }

    public void sendUssdResponse(java.lang.String)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.lang.String r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: java.lang.String;

        return;
    }

    public void setBroadcastEmergencyCallStateChanges(boolean)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        z0 := @parameter0: boolean;

        return;
    }

    public void setCallBarring(java.lang.String, boolean, java.lang.String, android.os.Message, int)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.lang.String r1, r2;
        boolean z0;
        android.os.Message r3;
        int i0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: android.os.Message;

        i0 := @parameter4: int;

        return;
    }

    public void setCallForwardingOption(int, int, java.lang.String, int, int, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        int i0, i1, i2, i3;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        r2 := @parameter5: android.os.Message;

        return;
    }

    public void setCallForwardingOption(int, int, java.lang.String, int, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        int i0, i1, i2;
        java.lang.String r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        i2 := @parameter3: int;

        r2 := @parameter4: android.os.Message;

        return;
    }

    public void setCallWaiting(boolean, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        boolean z0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.os.Message;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SipPhoneBase", "call waiting not supported");

        return;
    }

    public void setCellBroadcastSmsConfig(int[], android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        int[] r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: int[];

        r2 := @parameter1: android.os.Message;

        staticinvoke <com.android.telephony.Rlog: int e(java.lang.String,java.lang.String)>("SipPhoneBase", "Error! This functionality is not implemented for SIP.");

        return;
    }

    public void setDataRoamingEnabled(boolean)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        z0 := @parameter0: boolean;

        return;
    }

    public boolean setLine1Number(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.lang.String r1, r2;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        return 0;
    }

    public void setNetworkSelectionModeAutomatic(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Message;

        return;
    }

    public void setOnPostDialCharacter(android.os.Handler, int, java.lang.Object)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Handler r1;
        int i0;
        java.lang.Object r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Handler;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.Object;

        return;
    }

    public void setOutgoingCallerIdDisplay(int, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        int i0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Message;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r1, null, null);

        virtualinvoke r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void setRadioPower(boolean)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        boolean z0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        z0 := @parameter0: boolean;

        return;
    }

    public void setVoiceMailNumber(java.lang.String, java.lang.String, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        java.lang.String r1, r2;
        android.os.Message r3;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: android.os.Message;

        staticinvoke <android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>(r3, null, null);

        virtualinvoke r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void startNetworkScan(android.telephony.NetworkScanRequest, android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.telephony.NetworkScanRequest r1;
        android.os.Message r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.telephony.NetworkScanRequest;

        r2 := @parameter1: android.os.Message;

        return;
    }

    public void startRingbackTone()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.AsyncResult $r2;
        java.lang.Boolean $r3;
        com.android.internal.telephony.RegistrantList $r4;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r2 = new android.os.AsyncResult;

        $r3 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, $r3, null);

        $r4 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.RegistrantList mRingbackRegistrants>;

        virtualinvoke $r4.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r2);

        return;
    }

    public void stopNetworkScan(android.os.Message)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Message r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Message;

        return;
    }

    public void stopRingbackTone()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.AsyncResult $r2;
        java.lang.Boolean $r3;
        com.android.internal.telephony.RegistrantList $r4;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        $r2 = new android.os.AsyncResult;

        $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>;

        specialinvoke $r2.<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>(null, $r3, null);

        $r4 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.RegistrantList mRingbackRegistrants>;

        virtualinvoke $r4.<com.android.internal.telephony.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>($r2);

        return;
    }

    public void unregisterForRingbackTone(android.os.Handler)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Handler r1;
        com.android.internal.telephony.RegistrantList $r2;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Handler;

        $r2 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.RegistrantList mRingbackRegistrants>;

        virtualinvoke $r2.<com.android.internal.telephony.RegistrantList: void remove(android.os.Handler)>(r1);

        return;
    }

    public void unregisterForSuppServiceNotification(android.os.Handler)
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        android.os.Handler r1;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r1 := @parameter0: android.os.Handler;

        return;
    }

    void updatePhoneState()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;
        com.android.internal.telephony.Call $r1, $r2, $r9;
        boolean $z0, $z1, $z2;
        com.android.internal.telephony.PhoneConstants$State $r3, $r6, $r10, $r11, r12, $r13;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        r12 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State mState>;

        $r1 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getRingingCall()>();

        $z0 = virtualinvoke $r1.<com.android.internal.telephony.Call: boolean isRinging()>();

        if $z0 == 0 goto label1;

        $r11 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State RINGING>;

        r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State mState> = $r11;

        goto label3;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getForegroundCall()>();

        $z1 = virtualinvoke $r2.<com.android.internal.telephony.Call: boolean isIdle()>();

        if $z1 == 0 goto label2;

        $r9 = virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Call getBackgroundCall()>();

        $z2 = virtualinvoke $r9.<com.android.internal.telephony.Call: boolean isIdle()>();

        if $z2 == 0 goto label2;

        $r10 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State IDLE>;

        r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State mState> = $r10;

        goto label3;

     label2:
        $r3 = <com.android.internal.telephony.PhoneConstants$State: com.android.internal.telephony.PhoneConstants$State OFFHOOK>;

        r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State mState> = $r3;

     label3:
        $r13 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State mState>;

        if $r13 == r12 goto label4;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ^^^ new phone state: ");

        $r6 = r0.<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneConstants$State mState>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.telephony.Rlog: int d(java.lang.String,java.lang.String)>("SipPhoneBase", $r8);

        virtualinvoke r0.<com.android.internal.telephony.sip.SipPhoneBase: void notifyPhoneStateChanged()>();

     label4:
        return;
    }

    public void updateServiceLocation()
    {
        com.android.internal.telephony.sip.SipPhoneBase r0;

        r0 := @this: com.android.internal.telephony.sip.SipPhoneBase;

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.sip.SipPhoneBase: java.lang.String LOG_TAG> = "SipPhoneBase";

        return;
    }
}
