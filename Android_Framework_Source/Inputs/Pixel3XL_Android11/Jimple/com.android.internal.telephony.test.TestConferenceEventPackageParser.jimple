public class com.android.internal.telephony.test.TestConferenceEventPackageParser extends java.lang.Object
{
    private static final java.lang.String LOG_TAG;
    private static final java.lang.String PARTICIPANT_TAG;
    private java.io.InputStream mInputStream;

    public void <init>(java.io.InputStream)
    {
        com.android.internal.telephony.test.TestConferenceEventPackageParser r0;
        java.io.InputStream r1;

        r0 := @this: com.android.internal.telephony.test.TestConferenceEventPackageParser;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.telephony.test.TestConferenceEventPackageParser: java.io.InputStream mInputStream> = r1;

        return;
    }

    private android.os.Bundle parseParticipant(org.xmlpull.v1.XmlPullParser) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException
    {
        com.android.internal.telephony.test.TestConferenceEventPackageParser r0;
        int i0;
        android.os.Bundle $r2;
        java.lang.StringBuilder $r3, $r7, $r11, $r15;
        java.lang.String $r6, $r10, $r14, $r18, $r19, $r20, $r21, $r22, r24, r25, r26, r27;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.xmlpull.v1.XmlPullParser r23;

        r0 := @this: com.android.internal.telephony.test.TestConferenceEventPackageParser;

        r23 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r2 = new android.os.Bundle;

        specialinvoke $r2.<android.os.Bundle: void <init>()>();

        r24 = "";

        r25 = "";

        r26 = "";

        r27 = "";

        i0 = interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label1:
        $z4 = staticinvoke <com.android.internal.telephony.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r23, i0);

        if $z4 == 0 goto label5;

        $r19 = interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r19.<java.lang.String: boolean equals(java.lang.Object)>("user");

        if $z0 == 0 goto label2;

        interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: int next()>();

        r24 = interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        goto label1;

     label2:
        $r20 = interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z1 = virtualinvoke $r20.<java.lang.String: boolean equals(java.lang.Object)>("display-text");

        if $z1 == 0 goto label3;

        interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: int next()>();

        r25 = interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        goto label1;

     label3:
        $r21 = interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z2 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>("endpoint");

        if $z2 == 0 goto label4;

        interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: int next()>();

        r26 = interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        goto label1;

     label4:
        $r22 = interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z3 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>("status");

        if $z3 == 0 goto label1;

        interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: int next()>();

        r27 = interfaceinvoke r23.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

        goto label1;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TestConferenceEventPackageParser", $r6);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DisplayText: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TestConferenceEventPackageParser", $r10);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Endpoint: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TestConferenceEventPackageParser", $r14);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Status: ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TestConferenceEventPackageParser", $r18);

        virtualinvoke $r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("user", r24);

        virtualinvoke $r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("display-text", r25);

        virtualinvoke $r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("endpoint", r26);

        virtualinvoke $r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("status", r27);

        return $r2;
    }

    public android.telephony.ims.ImsConferenceState parse()
    {
        com.android.internal.telephony.test.TestConferenceEventPackageParser r0;
        org.xmlpull.v1.XmlPullParser r1;
        int i0;
        android.os.Bundle r2;
        android.telephony.ims.ImsConferenceState $r3;
        java.io.InputStream $r4, $r5, $r11, $r16;
        java.lang.String $r6, $r8;
        boolean $z0, $z1;
        java.util.HashMap $r7;
        java.lang.Throwable $r10, $r12, $r13, $r14, $r15;

        r0 := @this: com.android.internal.telephony.test.TestConferenceEventPackageParser;

        $r3 = new android.telephony.ims.ImsConferenceState;

        specialinvoke $r3.<android.telephony.ims.ImsConferenceState: void <init>()>();

     label01:
        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r4 = r0.<com.android.internal.telephony.test.TestConferenceEventPackageParser: java.io.InputStream mInputStream>;

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>($r4, null);

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int nextTag()>();

        i0 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label02:
        $z1 = staticinvoke <com.android.internal.telephony.util.XmlUtils: boolean nextElementWithin(org.xmlpull.v1.XmlPullParser,int)>(r1, i0);

        if $z1 == 0 goto label04;

        $r6 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("participant");

        if $z0 == 0 goto label02;

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("TestConferenceEventPackageParser", "Found participant.");

        r2 = specialinvoke r0.<com.android.internal.telephony.test.TestConferenceEventPackageParser: android.os.Bundle parseParticipant(org.xmlpull.v1.XmlPullParser)>(r1);

        $r7 = $r3.<android.telephony.ims.ImsConferenceState: java.util.HashMap mParticipants>;

        $r8 = virtualinvoke r2.<android.os.Bundle: java.lang.String getString(java.lang.String)>("endpoint");

        virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r2);

     label03:
        goto label02;

     label04:
        $r5 = r0.<com.android.internal.telephony.test.TestConferenceEventPackageParser: java.io.InputStream mInputStream>;

        virtualinvoke $r5.<java.io.InputStream: void close()>();

     label05:
        return $r3;

     label06:
        $r12 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestConferenceEventPackageParser", "Failed to close test conference event package InputStream", $r12);

        return null;

     label07:
        $r10 := @caughtexception;

        goto label13;

     label08:
        $r15 := @caughtexception;

     label09:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestConferenceEventPackageParser", "Failed to read test conference event package from XML file", $r15);

     label10:
        $r16 = r0.<com.android.internal.telephony.test.TestConferenceEventPackageParser: java.io.InputStream mInputStream>;

        virtualinvoke $r16.<java.io.InputStream: void close()>();

     label11:
        return null;

     label12:
        $r14 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestConferenceEventPackageParser", "Failed to close test conference event package InputStream", $r14);

        return null;

     label13:
        $r11 = r0.<com.android.internal.telephony.test.TestConferenceEventPackageParser: java.io.InputStream mInputStream>;

        virtualinvoke $r11.<java.io.InputStream: void close()>();

     label14:
        throw $r10;

     label15:
        $r13 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("TestConferenceEventPackageParser", "Failed to close test conference event package InputStream", $r13);

        return null;

        catch java.io.IOException from label01 to label02 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label08;
        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.io.IOException from label02 to label03 with label08;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label08;
        catch java.lang.Throwable from label02 to label03 with label07;
        catch java.io.IOException from label04 to label05 with label06;
        catch java.lang.Throwable from label09 to label10 with label07;
        catch java.io.IOException from label10 to label11 with label12;
        catch java.io.IOException from label13 to label14 with label15;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.test.TestConferenceEventPackageParser: java.lang.String PARTICIPANT_TAG> = "participant";

        <com.android.internal.telephony.test.TestConferenceEventPackageParser: java.lang.String LOG_TAG> = "TestConferenceEventPackageParser";

        return;
    }
}
