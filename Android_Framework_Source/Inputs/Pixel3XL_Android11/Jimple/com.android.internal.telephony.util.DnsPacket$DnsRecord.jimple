public class com.android.internal.telephony.util.DnsPacket$DnsRecord extends java.lang.Object
{
    private static final int MAXLABELCOUNT;
    private static final int MAXLABELSIZE;
    private static final int MAXNAMESIZE;
    private static final int NAME_COMPRESSION;
    private static final int NAME_NORMAL;
    private static final java.lang.String TAG;
    public final java.lang.String dName;
    private final java.text.DecimalFormat mByteFormat;
    private final java.text.FieldPosition mPos;
    private final byte[] mRdata;
    public final int nsClass;
    public final int nsType;
    final com.android.internal.telephony.util.DnsPacket this$0;
    public final long ttl;

    void <init>(com.android.internal.telephony.util.DnsPacket, int, java.nio.ByteBuffer) throws java.nio.BufferUnderflowException, com.android.internal.telephony.util.DnsPacket$ParseException
    {
        com.android.internal.telephony.util.DnsPacket$DnsRecord r0;
        int i0, $i1, $i2, $i4, $i6, $i7, $i10;
        java.nio.ByteBuffer r1;
        java.text.DecimalFormat $r2;
        java.text.FieldPosition $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r9, r12;
        com.android.internal.telephony.util.DnsPacket$ParseException $r8;
        short $s3, $s5, $s9;
        long $l8;
        com.android.internal.telephony.util.DnsPacket r11;
        byte[] r13;

        r0 := @this: com.android.internal.telephony.util.DnsPacket$DnsRecord;

        r11 := @parameter0: com.android.internal.telephony.util.DnsPacket;

        i0 := @parameter1: int;

        r1 := @parameter2: java.nio.ByteBuffer;

        r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: com.android.internal.telephony.util.DnsPacket this$0> = r11;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.text.DecimalFormat;

        specialinvoke $r2.<java.text.DecimalFormat: void <init>()>();

        r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.text.DecimalFormat mByteFormat> = $r2;

        $r3 = new java.text.FieldPosition;

        specialinvoke $r3.<java.text.FieldPosition: void <init>(int)>(0);

        r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.text.FieldPosition mPos> = $r3;

        r12 = specialinvoke r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.lang.String parseName(java.nio.ByteBuffer,int)>(r1, 0);

        r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.lang.String dName> = r12;

        $i1 = virtualinvoke r12.<java.lang.String: int length()>();

        if $i1 > 255 goto label3;

        $s3 = virtualinvoke r1.<java.nio.ByteBuffer: short getShort()>();

        $i4 = staticinvoke <java.lang.Short: int toUnsignedInt(short)>($s3);

        r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: int nsType> = $i4;

        $s5 = virtualinvoke r1.<java.nio.ByteBuffer: short getShort()>();

        $i6 = staticinvoke <java.lang.Short: int toUnsignedInt(short)>($s5);

        r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: int nsClass> = $i6;

        if i0 == 0 goto label1;

        $i7 = virtualinvoke r1.<java.nio.ByteBuffer: int getInt()>();

        $l8 = staticinvoke <java.lang.Integer: long toUnsignedLong(int)>($i7);

        r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: long ttl> = $l8;

        $s9 = virtualinvoke r1.<java.nio.ByteBuffer: short getShort()>();

        $i10 = staticinvoke <java.lang.Short: int toUnsignedInt(short)>($s9);

        r13 = newarray (byte)[$i10];

        r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: byte[] mRdata> = r13;

        virtualinvoke r1.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r13);

        goto label2;

     label1:
        r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: long ttl> = 0L;

        r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: byte[] mRdata> = null;

     label2:
        return;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parse name fail, name size is too long: ");

        $r6 = r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.lang.String dName>;

        $i2 = virtualinvoke $r6.<java.lang.String: int length()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r8 = new com.android.internal.telephony.util.DnsPacket$ParseException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<com.android.internal.telephony.util.DnsPacket$ParseException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private java.lang.String labelToString(byte[])
    {
        com.android.internal.telephony.util.DnsPacket$DnsRecord r0;
        byte[] r1;
        int i0, $i1, i5;
        java.lang.StringBuffer $r3;
        java.lang.String $r4;
        byte $b2;
        java.text.FieldPosition $r6;
        long $l3;
        java.text.DecimalFormat $r7;
        char $c4, $c6;

        r0 := @this: com.android.internal.telephony.util.DnsPacket$DnsRecord;

        r1 := @parameter0: byte[];

        $r3 = new java.lang.StringBuffer;

        specialinvoke $r3.<java.lang.StringBuffer: void <init>()>();

        i5 = 0;

     label1:
        $i1 = lengthof r1;

        if i5 >= $i1 goto label7;

        $b2 = r1[i5];

        i0 = staticinvoke <java.lang.Byte: int toUnsignedInt(byte)>($b2);

        if i0 <= 32 goto label5;

        if i0 < 127 goto label2;

        goto label5;

     label2:
        if i0 == 34 goto label4;

        if i0 == 46 goto label4;

        if i0 == 59 goto label4;

        if i0 == 92 goto label4;

        if i0 == 40 goto label4;

        if i0 == 41 goto label4;

        if i0 == 64 goto label4;

        if i0 != 36 goto label3;

        goto label4;

     label3:
        $c4 = (char) i0;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c4);

        goto label6;

     label4:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        $c6 = (char) i0;

        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c6);

        goto label6;

     label5:
        virtualinvoke $r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(92);

        $r7 = r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.text.DecimalFormat mByteFormat>;

        $l3 = (long) i0;

        $r6 = r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.text.FieldPosition mPos>;

        virtualinvoke $r7.<java.text.DecimalFormat: java.lang.StringBuffer format(long,java.lang.StringBuffer,java.text.FieldPosition)>($l3, $r3, $r6);

     label6:
        i5 = i5 + 1;

        goto label1;

     label7:
        $r4 = virtualinvoke $r3.<java.lang.StringBuffer: java.lang.String toString()>();

        return $r4;
    }

    private java.lang.String parseName(java.nio.ByteBuffer, int) throws java.nio.BufferUnderflowException, com.android.internal.telephony.util.DnsPacket$ParseException
    {
        com.android.internal.telephony.util.DnsPacket$DnsRecord r0;
        int i0, $i2, $i3, $i4, $i5, $i7, $i8, $i9, i10, i11, i12, i13;
        com.android.internal.telephony.util.DnsPacket$ParseException $r2, $r4, $r9, $r12;
        byte $b1, $b6;
        boolean $z0;
        java.lang.StringBuilder $r5;
        java.nio.ByteBuffer r13;
        java.lang.String r14, r16, r17, r18;
        byte[] r15;

        r0 := @this: com.android.internal.telephony.util.DnsPacket$DnsRecord;

        r13 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        if i0 > 128 goto label9;

        $b1 = virtualinvoke r13.<java.nio.ByteBuffer: byte get()>();

        i10 = staticinvoke <java.lang.Byte: int toUnsignedInt(byte)>($b1);

        i11 = i10 & 192;

        if i10 != 0 goto label1;

        return "";

     label1:
        if i11 == 0 goto label3;

        if i11 != 192 goto label2;

        goto label3;

     label2:
        $r12 = new com.android.internal.telephony.util.DnsPacket$ParseException;

        specialinvoke $r12.<com.android.internal.telephony.util.DnsPacket$ParseException: void <init>(java.lang.String)>("Parse name fail, bad label type");

        throw $r12;

     label3:
        if i11 != 192 goto label5;

        $i4 = i10 & -193;

        $i5 = $i4 << 8;

        $b6 = virtualinvoke r13.<java.nio.ByteBuffer: byte get()>();

        $i7 = staticinvoke <java.lang.Byte: int toUnsignedInt(byte)>($b6);

        i12 = $i5 + $i7;

        i13 = virtualinvoke r13.<java.nio.ByteBuffer: int position()>();

        $i8 = i13 - 2;

        if i12 >= $i8 goto label4;

        virtualinvoke r13.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i12);

        $i9 = i0 + 1;

        r14 = specialinvoke r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.lang.String parseName(java.nio.ByteBuffer,int)>(r13, $i9);

        virtualinvoke r13.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i13);

        return r14;

     label4:
        $r9 = new com.android.internal.telephony.util.DnsPacket$ParseException;

        specialinvoke $r9.<com.android.internal.telephony.util.DnsPacket$ParseException: void <init>(java.lang.String)>("Parse compression name fail, invalid compression");

        throw $r9;

     label5:
        r15 = newarray (byte)[i10];

        virtualinvoke r13.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r15);

        r16 = specialinvoke r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.lang.String labelToString(byte[])>(r15);

        $i2 = virtualinvoke r16.<java.lang.String: int length()>();

        if $i2 > 63 goto label8;

        $i3 = i0 + 1;

        r17 = specialinvoke r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: java.lang.String parseName(java.nio.ByteBuffer,int)>(r13, $i3);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r17);

        if $z0 == 0 goto label6;

        r18 = r16;

        goto label7;

     label6:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        r18 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

     label7:
        return r18;

     label8:
        $r4 = new com.android.internal.telephony.util.DnsPacket$ParseException;

        specialinvoke $r4.<com.android.internal.telephony.util.DnsPacket$ParseException: void <init>(java.lang.String)>("Parse name fail, invalid label length");

        throw $r4;

     label9:
        $r2 = new com.android.internal.telephony.util.DnsPacket$ParseException;

        specialinvoke $r2.<com.android.internal.telephony.util.DnsPacket$ParseException: void <init>(java.lang.String)>("Failed to parse name, too many labels");

        throw $r2;
    }

    public byte[] getRR()
    {
        com.android.internal.telephony.util.DnsPacket$DnsRecord r0;
        java.lang.Object $r1;
        byte[] r2, r3;

        r0 := @this: com.android.internal.telephony.util.DnsPacket$DnsRecord;

        r2 = r0.<com.android.internal.telephony.util.DnsPacket$DnsRecord: byte[] mRdata>;

        if r2 != null goto label1;

        r3 = null;

        goto label2;

     label1:
        $r1 = virtualinvoke r2.<java.lang.Object: java.lang.Object clone()>();

        r3 = (byte[]) $r1;

     label2:
        return r3;
    }

    public static void <clinit>()
    {
        <com.android.internal.telephony.util.DnsPacket$DnsRecord: java.lang.String TAG> = "DnsRecord";

        <com.android.internal.telephony.util.DnsPacket$DnsRecord: int NAME_NORMAL> = 0;

        <com.android.internal.telephony.util.DnsPacket$DnsRecord: int NAME_COMPRESSION> = 192;

        <com.android.internal.telephony.util.DnsPacket$DnsRecord: int MAXNAMESIZE> = 255;

        <com.android.internal.telephony.util.DnsPacket$DnsRecord: int MAXLABELSIZE> = 63;

        <com.android.internal.telephony.util.DnsPacket$DnsRecord: int MAXLABELCOUNT> = 128;

        return;
    }
}
