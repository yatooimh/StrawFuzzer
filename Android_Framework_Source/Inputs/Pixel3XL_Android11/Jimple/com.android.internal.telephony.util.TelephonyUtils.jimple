public final class com.android.internal.telephony.util.TelephonyUtils extends java.lang.Object
{
    public static boolean IS_DEBUGGABLE;
    public static boolean IS_USER;

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        boolean $z0, z1;
        int $i0;

        $r1 = "user";

        $r0 = <android.os.Build: java.lang.String TYPE>;

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0);

        <com.android.internal.telephony.util.TelephonyUtils: boolean IS_USER> = $z0;

        z1 = 0;

        $i0 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.debuggable", 0);

        if $i0 != 1 goto label1;

        z1 = 1;

     label1:
        <com.android.internal.telephony.util.TelephonyUtils: boolean IS_DEBUGGABLE> = z1;

        return;
    }

    public void <init>()
    {
        com.android.internal.telephony.util.TelephonyUtils r0;

        r0 := @this: com.android.internal.telephony.util.TelephonyUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean checkDumpPermission(android.content.Context, java.lang.String, java.io.PrintWriter)
    {
        java.lang.String r0, $r10;
        java.io.PrintWriter r1;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r2;
        android.content.Context r11;

        r11 := @parameter0: android.content.Context;

        r0 := @parameter1: java.lang.String;

        r1 := @parameter2: java.io.PrintWriter;

        $i0 = virtualinvoke r11.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DUMP");

        if $i0 == 0 goto label1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Permission Denial: can\'t dump ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from from pid=");

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", uid=");

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" due to missing android.permission.DUMP permission");

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        return 0;

     label1:
        return 1;
    }

    public static java.lang.String emptyIfNull(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        r0 = "";

        goto label1;

     label1:
        return r0;
    }

    public static java.util.List emptyIfNull(java.util.List)
    {
        java.util.List r0;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        r0 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        goto label1;

     label1:
        return r0;
    }

    public static android.os.Bundle filterValues(android.os.Bundle)
    {
        android.os.Bundle r0, $r5, $r10, $r11;
        java.util.Iterator r2;
        java.lang.String r3, $r9;
        java.lang.Object r4, $r7;
        java.util.Set $r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        java.lang.Class $r8;

        r0 := @parameter0: android.os.Bundle;

        $r5 = new android.os.Bundle;

        specialinvoke $r5.<android.os.Bundle: void <init>(android.os.Bundle)>(r0);

        $r6 = virtualinvoke r0.<android.os.Bundle: java.util.Set keySet()>();

        r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z13 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z13 == 0 goto label5;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.String) $r7;

        r4 = virtualinvoke r0.<android.os.Bundle: java.lang.Object get(java.lang.String)>(r3);

        $z0 = r4 instanceof java.lang.Integer;

        if $z0 != 0 goto label1;

        $z1 = r4 instanceof java.lang.Long;

        if $z1 != 0 goto label1;

        $z2 = r4 instanceof java.lang.Double;

        if $z2 != 0 goto label1;

        $z3 = r4 instanceof java.lang.String;

        if $z3 != 0 goto label1;

        $z4 = r4 instanceof int[];

        if $z4 != 0 goto label1;

        $z5 = r4 instanceof long[];

        if $z5 != 0 goto label1;

        $z6 = r4 instanceof double[];

        if $z6 != 0 goto label1;

        $z7 = r4 instanceof java.lang.String[];

        if $z7 != 0 goto label1;

        $z8 = r4 instanceof android.os.PersistableBundle;

        if $z8 != 0 goto label1;

        if r4 == null goto label1;

        $z9 = r4 instanceof java.lang.Boolean;

        if $z9 != 0 goto label1;

        $z10 = r4 instanceof boolean[];

        if $z10 == 0 goto label2;

        goto label1;

     label2:
        $z11 = r4 instanceof android.os.Bundle;

        if $z11 == 0 goto label3;

        $r10 = (android.os.Bundle) r4;

        $r11 = staticinvoke <com.android.internal.telephony.util.TelephonyUtils: android.os.Bundle filterValues(android.os.Bundle)>($r10);

        virtualinvoke $r5.<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>(r3, $r11);

        goto label1;

     label3:
        $r8 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $z12 = virtualinvoke $r9.<java.lang.String: boolean startsWith(java.lang.String)>("android.");

        if $z12 == 0 goto label4;

        goto label1;

     label4:
        virtualinvoke $r5.<android.os.Bundle: void remove(java.lang.String)>(r3);

        goto label1;

     label5:
        return $r5;
    }

    public static android.content.pm.ComponentInfo getComponentInfo(android.content.pm.ResolveInfo)
    {
        android.content.pm.ResolveInfo r0;
        android.content.pm.ActivityInfo $r1, $r7;
        android.content.pm.ServiceInfo $r2, $r6;
        android.content.pm.ProviderInfo $r3, $r5;
        java.lang.IllegalStateException $r4;

        r0 := @parameter0: android.content.pm.ResolveInfo;

        $r1 = r0.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        if $r1 == null goto label1;

        $r7 = r0.<android.content.pm.ResolveInfo: android.content.pm.ActivityInfo activityInfo>;

        return $r7;

     label1:
        $r2 = r0.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        if $r2 == null goto label2;

        $r6 = r0.<android.content.pm.ResolveInfo: android.content.pm.ServiceInfo serviceInfo>;

        return $r6;

     label2:
        $r3 = r0.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        if $r3 == null goto label3;

        $r5 = r0.<android.content.pm.ResolveInfo: android.content.pm.ProviderInfo providerInfo>;

        return $r5;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing ComponentInfo!");

        throw $r4;
    }

    public static java.lang.RuntimeException rethrowAsRuntimeException(android.os.RemoteException)
    {
        android.os.RemoteException r0;
        java.lang.RuntimeException $r1;

        r0 := @parameter0: android.os.RemoteException;

        $r1 = new java.lang.RuntimeException;

        specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r0);

        throw $r1;
    }

    public static java.lang.Object runWithCleanCallingIdentity(java.util.function.Supplier)
    {
        long l0;
        java.lang.Throwable $r0;
        java.util.function.Supplier r1;
        java.lang.Object r2;

        r1 := @parameter0: java.util.function.Supplier;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        r2 = interfaceinvoke r1.<java.util.function.Supplier: java.lang.Object get()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return r2;

     label3:
        $r0 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void runWithCleanCallingIdentity(java.lang.Runnable)
    {
        long l0;
        java.lang.Throwable $r0;
        java.lang.Runnable r1;

        r1 := @parameter0: java.lang.Runnable;

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        interfaceinvoke r1.<java.lang.Runnable: void run()>();

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r0 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void waitUntilReady(java.util.concurrent.CountDownLatch, long)
    {
        long l0;
        java.util.concurrent.TimeUnit $r0;
        java.lang.Throwable $r1;
        java.util.concurrent.CountDownLatch r2;

        r2 := @parameter0: java.util.concurrent.CountDownLatch;

        l0 := @parameter1: long;

     label1:
        $r0 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        virtualinvoke r2.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(l0, $r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

     label4:
        return;

        catch java.lang.InterruptedException from label1 to label2 with label3;
    }
}
