public final class com.android.internal.util.BitUtils extends java.lang.Object
{

    private void <init>()
    {
        com.android.internal.util.BitUtils r0;

        r0 := @this: com.android.internal.util.BitUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static long bitAt(int)
    {
        int i0;
        long $l1;

        i0 := @parameter0: int;

        $l1 = 1L << i0;

        return $l1;
    }

    public static int bytesToBEInt(byte[])
    {
        byte[] r0;
        byte $b0, $b2, $b6, $b10;
        int $i1, $i3, $i4, $i5, $i7, $i8, $i9, $i11, $i12, $i13;

        r0 := @parameter0: byte[];

        $b0 = r0[0];

        $i1 = staticinvoke <com.android.internal.util.BitUtils: int uint8(byte)>($b0);

        $i3 = $i1 << 24;

        $b2 = r0[1];

        $i4 = staticinvoke <com.android.internal.util.BitUtils: int uint8(byte)>($b2);

        $i5 = $i4 << 16;

        $i7 = $i3 + $i5;

        $b6 = r0[2];

        $i8 = staticinvoke <com.android.internal.util.BitUtils: int uint8(byte)>($b6);

        $i9 = $i8 << 8;

        $i11 = $i7 + $i9;

        $b10 = r0[3];

        $i12 = staticinvoke <com.android.internal.util.BitUtils: int uint8(byte)>($b10);

        $i13 = $i11 + $i12;

        return $i13;
    }

    public static int bytesToLEInt(byte[])
    {
        byte[] r0;
        int $i0, $i1;

        r0 := @parameter0: byte[];

        $i0 = staticinvoke <com.android.internal.util.BitUtils: int bytesToBEInt(byte[])>(r0);

        $i1 = staticinvoke <java.lang.Integer: int reverseBytes(int)>($i0);

        return $i1;
    }

    public static java.lang.String flagsToString(int, java.util.function.IntFunction)
    {
        java.util.function.IntFunction r0;
        java.lang.StringBuilder $r2;
        java.lang.String $r3, $r5;
        int $i0, i1, i3, i4, i5;
        java.lang.Object $r4;

        i1 := @parameter0: int;

        r0 := @parameter1: java.util.function.IntFunction;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        i3 = i1;

        i4 = 0;

     label1:
        if i3 == 0 goto label3;

        $i0 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i3);

        i5 = 1 << $i0;

        i3 = i3 & i5;

        if i4 <= 0 goto label2;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

     label2:
        $r4 = interfaceinvoke r0.<java.util.function.IntFunction: java.lang.Object apply(int)>(i5);

        $r5 = (java.lang.String) $r4;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        i4 = i4 + 1;

        goto label1;

     label3:
        staticinvoke <android.text.TextUtils: void wrap(java.lang.StringBuilder,java.lang.String,java.lang.String)>($r2, "[", "]");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static int flagsUpTo(int)
    {
        int $i0, $i1, i2, i3;

        i2 := @parameter0: int;

        if i2 > 0 goto label1;

        i3 = 0;

        goto label2;

     label1:
        $i0 = i2 >> 1;

        $i1 = staticinvoke <com.android.internal.util.BitUtils: int flagsUpTo(int)>($i0);

        i3 = $i1 | i2;

     label2:
        return i3;
    }

    public static int flagsWithin(int, int)
    {
        int i0, i1, $i2, $i3, $i4, $i5;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = staticinvoke <com.android.internal.util.BitUtils: int flagsUpTo(int)>(i1);

        $i3 = staticinvoke <com.android.internal.util.BitUtils: int flagsUpTo(int)>(i0);

        $i4 = $i2 & $i3;

        $i5 = $i4 | i0;

        return $i5;
    }

    public static int getUint16(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i2;
        short $s1;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $s1 = virtualinvoke r0.<java.nio.ByteBuffer: short getShort(int)>(i0);

        $i2 = staticinvoke <com.android.internal.util.BitUtils: int uint16(short)>($s1);

        return $i2;
    }

    public static long getUint32(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i1;
        long $l2;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<java.nio.ByteBuffer: int getInt(int)>(i0);

        $l2 = staticinvoke <com.android.internal.util.BitUtils: long uint32(int)>($i1);

        return $l2;
    }

    public static int getUint8(java.nio.ByteBuffer, int)
    {
        java.nio.ByteBuffer r0;
        int i0, $i2;
        byte $b1;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        $b1 = virtualinvoke r0.<java.nio.ByteBuffer: byte get(int)>(i0);

        $i2 = staticinvoke <com.android.internal.util.BitUtils: int uint8(byte)>($b1);

        return $i2;
    }

    public static boolean isBitSet(long, int)
    {
        long l0, $l2, $l3;
        int i1;
        byte $b4;
        boolean z0;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $l2 = staticinvoke <com.android.internal.util.BitUtils: long bitAt(int)>(i1);

        $l3 = $l2 & l0;

        $b4 = $l3 cmp 0L;

        if $b4 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean maskedEquals(byte, byte, byte)
    {
        byte b0, b1, b2, $b3, $b4;
        boolean z0;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        b2 := @parameter2: byte;

        $b4 = b0 & b2;

        $b3 = b1 & b2;

        if $b4 != $b3 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean maskedEquals(long, long, long)
    {
        long l0, l1, l2, $l3, $l4;
        byte $b5;
        boolean z0;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $l4 = l0 & l2;

        $l3 = l1 & l2;

        $b5 = $l4 cmp $l3;

        if $b5 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean maskedEquals(java.util.UUID, java.util.UUID, java.util.UUID)
    {
        java.util.UUID r0, r1, r2;
        long $l0, $l1, $l2, $l3, $l4, $l5;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: java.util.UUID;

        r1 := @parameter1: java.util.UUID;

        r2 := @parameter2: java.util.UUID;

        if r2 != null goto label1;

        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r0, r1);

        return $z2;

     label1:
        $l0 = virtualinvoke r0.<java.util.UUID: long getLeastSignificantBits()>();

        $l1 = virtualinvoke r1.<java.util.UUID: long getLeastSignificantBits()>();

        $l2 = virtualinvoke r2.<java.util.UUID: long getLeastSignificantBits()>();

        $z0 = staticinvoke <com.android.internal.util.BitUtils: boolean maskedEquals(long,long,long)>($l0, $l1, $l2);

        if $z0 == 0 goto label2;

        $l3 = virtualinvoke r0.<java.util.UUID: long getMostSignificantBits()>();

        $l4 = virtualinvoke r1.<java.util.UUID: long getMostSignificantBits()>();

        $l5 = virtualinvoke r2.<java.util.UUID: long getMostSignificantBits()>();

        $z1 = staticinvoke <com.android.internal.util.BitUtils: boolean maskedEquals(long,long,long)>($l3, $l4, $l5);

        if $z1 == 0 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        return z3;
    }

    public static boolean maskedEquals(byte[], byte[], byte[])
    {
        byte[] r0, r1, r2;
        int $i0, $i1, $i2, $i3, i7, $i8;
        byte $b4, $b5, $b6;
        boolean $z0, $z1, z2, z3, z4;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        r2 := @parameter2: byte[];

        z2 = 0;

        if r0 == null goto label10;

        if r1 != null goto label01;

        goto label10;

     label01:
        $i1 = lengthof r0;

        $i0 = lengthof r1;

        if $i1 != $i0 goto label02;

        z3 = 1;

        goto label03;

     label02:
        z3 = 0;

     label03:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z3, "Inputs must be of same size");

        if r2 != null goto label04;

        $z1 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r0, r1);

        return $z1;

     label04:
        $i3 = lengthof r0;

        $i2 = lengthof r2;

        if $i3 != $i2 goto label05;

        z4 = 1;

        goto label06;

     label05:
        z4 = 0;

     label06:
        staticinvoke <com.android.internal.util.Preconditions: void checkArgument(boolean,java.lang.Object)>(z4, "Mask must be of same size as inputs");

        i7 = 0;

     label07:
        $i8 = lengthof r2;

        if i7 >= $i8 goto label09;

        $b6 = r0[i7];

        $b5 = r1[i7];

        $b4 = r2[i7];

        $z0 = staticinvoke <com.android.internal.util.BitUtils: boolean maskedEquals(byte,byte,byte)>($b6, $b5, $b4);

        if $z0 != 0 goto label08;

        return 0;

     label08:
        i7 = i7 + 1;

        goto label07;

     label09:
        return 1;

     label10:
        if r0 != r1 goto label11;

        z2 = 1;

     label11:
        return z2;
    }

    public static long packBits(int[])
    {
        int[] r0;
        int i0, $i1, i4;
        long $l2, l3;

        r0 := @parameter0: int[];

        l3 = 0L;

        i0 = lengthof r0;

        i4 = 0;

     label1:
        if i4 >= i0 goto label2;

        $i1 = r0[i4];

        $l2 = 1L << $i1;

        l3 = l3 | $l2;

        i4 = i4 + 1;

        goto label1;

     label2:
        return l3;
    }

    public static void put(java.nio.ByteBuffer, int, byte[])
    {
        java.nio.ByteBuffer r0;
        int i0, i1;
        byte[] r1;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        r1 := @parameter2: byte[];

        i1 = virtualinvoke r0.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[])>(r1);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.Buffer position(int)>(i1);

        return;
    }

    public static byte[] toBytes(long)
    {
        long l0;
        java.nio.ByteBuffer $r0, $r1;
        byte[] $r2;

        l0 := @parameter0: long;

        $r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(8);

        $r1 = virtualinvoke $r0.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l0);

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        return $r2;
    }

    public static int uint16(byte, byte)
    {
        byte b0, b1;
        short $s2, $s3;
        int $i4, $i5;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        $s2 = b0 & 255;

        $i4 = $s2 << 8;

        $s3 = b1 & 255;

        $i5 = $i4 | $s3;

        return $i5;
    }

    public static int uint16(short)
    {
        short s0;
        int $i1;

        s0 := @parameter0: short;

        $i1 = 65535 & s0;

        return $i1;
    }

    public static long uint32(int)
    {
        int i0;
        long $l1, $l2;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $l2 = $l1 & 4294967295L;

        return $l2;
    }

    public static int uint8(byte)
    {
        byte b0;
        short $s1;

        b0 := @parameter0: byte;

        $s1 = b0 & 255;

        return $s1;
    }

    public static int[] unpackBits(long)
    {
        int[] r0;
        int $i0, i5, i6, i7;
        byte $b1, $b3;
        long $l2, l4;

        l4 := @parameter0: long;

        $i0 = staticinvoke <java.lang.Long: int bitCount(long)>(l4);

        r0 = newarray (int)[$i0];

        i5 = 0;

        i6 = 0;

     label1:
        $b1 = l4 cmp 0L;

        if $b1 == 0 goto label3;

        i7 = i5;

        $l2 = l4 & 1L;

        $b3 = $l2 cmp 1L;

        if $b3 != 0 goto label2;

        r0[i5] = i6;

        i7 = i5 + 1;

     label2:
        l4 = l4 >>> 1;

        i6 = i6 + 1;

        i5 = i7;

        goto label1;

     label3:
        return r0;
    }
}
