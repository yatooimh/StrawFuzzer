public class com.android.internal.util.ConcurrentUtils extends java.lang.Object
{
    public static final java.util.concurrent.Executor DIRECT_EXECUTOR;

    static void <clinit>()
    {
        com.android.internal.util.ConcurrentUtils$DirectExecutor $r0;

        $r0 = new com.android.internal.util.ConcurrentUtils$DirectExecutor;

        specialinvoke $r0.<com.android.internal.util.ConcurrentUtils$DirectExecutor: void <init>(com.android.internal.util.ConcurrentUtils$1)>(null);

        <com.android.internal.util.ConcurrentUtils: java.util.concurrent.Executor DIRECT_EXECUTOR> = $r0;

        return;
    }

    private void <init>()
    {
        com.android.internal.util.ConcurrentUtils r0;

        r0 := @this: com.android.internal.util.ConcurrentUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.concurrent.ExecutorService newFixedThreadPool(int, java.lang.String, int)
    {
        int i0, i1;
        java.lang.String r0;
        com.android.internal.util.ConcurrentUtils$1 $r1;
        java.util.concurrent.ExecutorService $r2;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        $r1 = new com.android.internal.util.ConcurrentUtils$1;

        specialinvoke $r1.<com.android.internal.util.ConcurrentUtils$1: void <init>(java.lang.String,int)>(r0, i1);

        $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newFixedThreadPool(int,java.util.concurrent.ThreadFactory)>(i0, $r1);

        return $r2;
    }

    public static void waitForCountDownNoInterrupt(java.util.concurrent.CountDownLatch, long, java.lang.String)
    {
        long l0;
        java.lang.String r0, $r5, $r12;
        java.lang.IllegalStateException r1, $r11;
        java.util.concurrent.TimeUnit $r2;
        boolean $z0;
        java.lang.Throwable $r6;
        java.lang.Thread $r7;
        java.lang.StringBuilder $r8, r14;
        java.util.concurrent.CountDownLatch r13;

        r13 := @parameter0: java.util.concurrent.CountDownLatch;

        l0 := @parameter1: long;

        r0 := @parameter2: java.lang.String;

     label1:
        $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>;

        $z0 = virtualinvoke r13.<java.util.concurrent.CountDownLatch: boolean await(long,java.util.concurrent.TimeUnit)>(l0, $r2);

        if $z0 == 0 goto label3;

     label2:
        return;

     label3:
        r1 = new java.lang.IllegalStateException;

        r14 = new java.lang.StringBuilder;

        specialinvoke r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timed out.");

        $r5 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw r1;

     label4:
        $r6 := @caughtexception;

        $r7 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r7.<java.lang.Thread: void interrupt()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" interrupted.");

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.lang.InterruptedException from label3 to label4 with label4;
    }

    public static java.lang.Object waitForFutureNoInterrupt(java.util.concurrent.Future, java.lang.String)
    {
        java.lang.String r0, $r7, $r14;
        java.lang.Throwable $r2, $r8;
        java.lang.StringBuilder $r3, $r10;
        java.lang.RuntimeException $r6;
        java.lang.Thread $r9;
        java.lang.IllegalStateException $r13;
        java.util.concurrent.Future r15;
        java.lang.Object r16;

        r15 := @parameter0: java.util.concurrent.Future;

        r0 := @parameter1: java.lang.String;

     label1:
        r16 = interfaceinvoke r15.<java.util.concurrent.Future: java.lang.Object get()>();

     label2:
        return r16;

     label3:
        $r2 := @caughtexception;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" failed");

        $r6 = new java.lang.RuntimeException;

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>($r7, $r2);

        throw $r6;

     label4:
        $r8 := @caughtexception;

        $r9 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        virtualinvoke $r9.<java.lang.Thread: void interrupt()>();

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" interrupted");

        $r13 = new java.lang.IllegalStateException;

        $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r14);

        throw $r13;

        catch java.lang.InterruptedException from label1 to label2 with label4;
        catch java.util.concurrent.ExecutionException from label1 to label2 with label3;
    }

    public static void wtfIfLockHeld(java.lang.String, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r0, "Lock mustn\'t be held");

     label1:
        return;
    }

    public static void wtfIfLockNotHeld(java.lang.String, java.lang.Object)
    {
        java.lang.String r0;
        java.lang.Object r1;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Object;

        $z0 = staticinvoke <java.lang.Thread: boolean holdsLock(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r0, "Lock must be held");

     label1:
        return;
    }
}
