public class com.android.internal.util.ImageUtils extends java.lang.Object
{
    private static final int ALPHA_TOLERANCE;
    private static final int COMPACT_BITMAP_SIZE;
    private static final int TOLERANCE;
    private int[] mTempBuffer;
    private android.graphics.Bitmap mTempCompactBitmap;
    private android.graphics.Canvas mTempCompactBitmapCanvas;
    private android.graphics.Paint mTempCompactBitmapPaint;
    private final android.graphics.Matrix mTempMatrix;

    public void <init>()
    {
        com.android.internal.util.ImageUtils r0;
        android.graphics.Matrix $r1;

        r0 := @this: com.android.internal.util.ImageUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.graphics.Matrix;

        specialinvoke $r1.<android.graphics.Matrix: void <init>()>();

        r0.<com.android.internal.util.ImageUtils: android.graphics.Matrix mTempMatrix> = $r1;

        return;
    }

    public static android.graphics.Bitmap buildScaledBitmap(android.graphics.drawable.Drawable, int, int)
    {
        android.graphics.drawable.Drawable r0;
        int i0, i1, i2, i3, i4, i5;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11;
        android.graphics.Bitmap r1, $r6;
        android.graphics.Bitmap$Config $r3;
        android.graphics.Canvas $r4;
        boolean $z0;
        android.graphics.drawable.BitmapDrawable $r5;

        r0 := @parameter0: android.graphics.drawable.Drawable;

        i2 := @parameter1: int;

        i3 := @parameter2: int;

        if r0 != null goto label1;

        return null;

     label1:
        i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>();

        i1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        if i0 > i2 goto label2;

        if i1 > i3 goto label2;

        $z0 = r0 instanceof android.graphics.drawable.BitmapDrawable;

        if $z0 == 0 goto label2;

        $r5 = (android.graphics.drawable.BitmapDrawable) r0;

        $r6 = virtualinvoke $r5.<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>();

        return $r6;

     label2:
        if i1 <= 0 goto label4;

        if i0 > 0 goto label3;

        goto label4;

     label3:
        $f2 = (float) i2;

        $f1 = (float) i0;

        $f6 = $f2 / $f1;

        $f4 = (float) i3;

        $f3 = (float) i1;

        $f5 = $f4 / $f3;

        $f7 = staticinvoke <java.lang.Math: float min(float,float)>($f6, $f5);

        f0 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f7);

        $f8 = (float) i0;

        $f9 = $f8 * f0;

        i4 = (int) $f9;

        $f10 = (float) i1;

        $f11 = $f10 * f0;

        i5 = (int) $f11;

        $r3 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        r1 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(i4, i5, $r3);

        $r4 = new android.graphics.Canvas;

        specialinvoke $r4.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>(r1);

        virtualinvoke r0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, i4, i5);

        virtualinvoke r0.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r4);

        return r1;

     label4:
        return null;
    }

    public static int calculateSampleSize(android.util.Size, android.util.Size)
    {
        android.util.Size r0, r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i11, $i12, $i13;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.util.Size;

        i10 = 1;

        i11 = 1;

        $i2 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        $i3 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        if $i2 > $i3 goto label1;

        $i8 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        $i9 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        if $i8 <= $i9 goto label3;

     label1:
        $i4 = virtualinvoke r0.<android.util.Size: int getHeight()>();

        i0 = $i4 / 2;

        $i5 = virtualinvoke r0.<android.util.Size: int getWidth()>();

        i1 = $i5 / 2;

     label2:
        i10 = i11;

        $i12 = i0 / i11;

        $i13 = virtualinvoke r1.<android.util.Size: int getHeight()>();

        if $i12 < $i13 goto label3;

        i10 = i11;

        $i6 = i1 / i11;

        $i7 = virtualinvoke r1.<android.util.Size: int getWidth()>();

        if $i6 < $i7 goto label3;

        i11 = i11 * 2;

        goto label2;

     label3:
        return i10;
    }

    private void ensureBufferSize(int)
    {
        com.android.internal.util.ImageUtils r0;
        int i0, $i1;
        int[] r1, $r2;

        r0 := @this: com.android.internal.util.ImageUtils;

        i0 := @parameter0: int;

        r1 = r0.<com.android.internal.util.ImageUtils: int[] mTempBuffer>;

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 >= i0 goto label2;

     label1:
        $r2 = newarray (int)[i0];

        r0.<com.android.internal.util.ImageUtils: int[] mTempBuffer> = $r2;

     label2:
        return;
    }

    public static boolean isGrayscale(int)
    {
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13;
        boolean z0;

        i12 := @parameter0: int;

        z0 = 1;

        $i2 = i12 >> 24;

        $i3 = $i2 & 255;

        if $i3 >= 50 goto label1;

        return 1;

     label1:
        $i4 = i12 >> 16;

        i0 = $i4 & 255;

        $i5 = i12 >> 8;

        i1 = $i5 & 255;

        i13 = i12 & 255;

        $i6 = i0 - i1;

        $i7 = staticinvoke <java.lang.Math: int abs(int)>($i6);

        if $i7 >= 20 goto label2;

        $i8 = i0 - i13;

        $i9 = staticinvoke <java.lang.Math: int abs(int)>($i8);

        if $i9 >= 20 goto label2;

        $i10 = i1 - i13;

        $i11 = staticinvoke <java.lang.Math: int abs(int)>($i10);

        if $i11 >= 20 goto label2;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    static android.content.res.AssetFileDescriptor lambda$loadThumbnail$0(android.content.ContentProviderClient, android.net.Uri, android.os.Bundle) throws java.lang.Exception
    {
        android.content.ContentProviderClient r0;
        android.net.Uri r1;
        android.os.Bundle r2;
        android.content.res.AssetFileDescriptor $r3;

        r0 := @parameter0: android.content.ContentProviderClient;

        r1 := @parameter1: android.net.Uri;

        r2 := @parameter2: android.os.Bundle;

        $r3 = virtualinvoke r0.<android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle,android.os.CancellationSignal)>(r1, "image/*", r2, null);

        return $r3;
    }

    static void lambda$loadThumbnail$1(android.util.Size, android.graphics.ImageDecoder, android.graphics.ImageDecoder$ImageInfo, android.graphics.ImageDecoder$Source)
    {
        android.util.Size r0, $r4;
        android.graphics.ImageDecoder r1;
        android.graphics.ImageDecoder$ImageInfo r2;
        android.graphics.ImageDecoder$Source r3;
        int i0;

        r0 := @parameter0: android.util.Size;

        r1 := @parameter1: android.graphics.ImageDecoder;

        r2 := @parameter2: android.graphics.ImageDecoder$ImageInfo;

        r3 := @parameter3: android.graphics.ImageDecoder$Source;

        virtualinvoke r1.<android.graphics.ImageDecoder: void setAllocator(int)>(1);

        $r4 = virtualinvoke r2.<android.graphics.ImageDecoder$ImageInfo: android.util.Size getSize()>();

        i0 = staticinvoke <com.android.internal.util.ImageUtils: int calculateSampleSize(android.util.Size,android.util.Size)>($r4, r0);

        if i0 <= 1 goto label1;

        virtualinvoke r1.<android.graphics.ImageDecoder: void setTargetSampleSize(int)>(i0);

     label1:
        return;
    }

    public static android.graphics.Bitmap loadThumbnail(android.content.ContentResolver, android.net.Uri, android.util.Size) throws java.io.IOException
    {
        android.util.Size r0;
        com.android.internal.util._$$Lambda$ImageUtils$UJyN8OeHYbkY_xJzm1U3D7W4PNY r1;
        android.graphics.Point $r2;
        java.lang.Throwable $r3, $r4;
        android.content.ContentResolver r5;
        android.net.Uri r6;
        android.content.ContentProviderClient r7;
        android.os.Bundle r8;
        android.graphics.ImageDecoder$Source r9;
        com.android.internal.util._$$Lambda$ImageUtils$rnRZcgsdC1BtH9FpHTN2Kf_FXwE r10;
        android.graphics.Bitmap r11;

        r5 := @parameter0: android.content.ContentResolver;

        r6 := @parameter1: android.net.Uri;

        r0 := @parameter2: android.util.Size;

        r7 = virtualinvoke r5.<android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)>(r6);

     label1:
        r8 = new android.os.Bundle;

        specialinvoke r8.<android.os.Bundle: void <init>()>();

        $r2 = staticinvoke <android.graphics.Point: android.graphics.Point convert(android.util.Size)>(r0);

        virtualinvoke r8.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>("android.content.extra.SIZE", $r2);

        r1 = new com.android.internal.util._$$Lambda$ImageUtils$UJyN8OeHYbkY_xJzm1U3D7W4PNY;

        specialinvoke r1.<com.android.internal.util._$$Lambda$ImageUtils$UJyN8OeHYbkY_xJzm1U3D7W4PNY: void <init>(android.content.ContentProviderClient,android.net.Uri,android.os.Bundle)>(r7, r6, r8);

        r9 = staticinvoke <android.graphics.ImageDecoder: android.graphics.ImageDecoder$Source createSource(java.util.concurrent.Callable)>(r1);

        r10 = new com.android.internal.util._$$Lambda$ImageUtils$rnRZcgsdC1BtH9FpHTN2Kf_FXwE;

        specialinvoke r10.<com.android.internal.util._$$Lambda$ImageUtils$rnRZcgsdC1BtH9FpHTN2Kf_FXwE: void <init>(android.util.Size)>(r0);

        r11 = staticinvoke <android.graphics.ImageDecoder: android.graphics.Bitmap decodeBitmap(android.graphics.ImageDecoder$Source,android.graphics.ImageDecoder$OnHeaderDecodedListener)>(r9, r10);

     label2:
        if r7 == null goto label3;

        virtualinvoke r7.<android.content.ContentProviderClient: void close()>();

     label3:
        return r11;

     label4:
        $r4 := @caughtexception;

        if r7 == null goto label8;

     label5:
        virtualinvoke r7.<android.content.ContentProviderClient: void close()>();

     label6:
        goto label8;

     label7:
        $r3 := @caughtexception;

        virtualinvoke $r4.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r3);

     label8:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    public boolean isGrayscale(android.graphics.Bitmap)
    {
        com.android.internal.util.ImageUtils r0;
        android.graphics.Bitmap r1, $r2, $r12, $r14, r16;
        int i0, $i1, i2, i3, i4, i5, i6;
        android.graphics.Matrix $r3, $r4, $r8;
        float $f0, $f1, $f2, $f3;
        android.graphics.PorterDuff$Mode $r5;
        android.graphics.Canvas $r6, $r9, $r13;
        android.graphics.Paint $r7, $r15;
        int[] $r10, $r18;
        boolean $z0;
        android.graphics.Bitmap$Config $r11;

        r0 := @this: com.android.internal.util.ImageUtils;

        r1 := @parameter0: android.graphics.Bitmap;

        i0 = virtualinvoke r1.<android.graphics.Bitmap: int getHeight()>();

        i2 = virtualinvoke r1.<android.graphics.Bitmap: int getWidth()>();

        if i0 > 64 goto label1;

        i3 = i0;

        i4 = i2;

        r16 = r1;

        if i2 <= 64 goto label3;

     label1:
        $r2 = r0.<com.android.internal.util.ImageUtils: android.graphics.Bitmap mTempCompactBitmap>;

        if $r2 != null goto label2;

        $r11 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config ARGB_8888>;

        $r12 = staticinvoke <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>(64, 64, $r11);

        r0.<com.android.internal.util.ImageUtils: android.graphics.Bitmap mTempCompactBitmap> = $r12;

        $r13 = new android.graphics.Canvas;

        $r14 = r0.<com.android.internal.util.ImageUtils: android.graphics.Bitmap mTempCompactBitmap>;

        specialinvoke $r13.<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>($r14);

        r0.<com.android.internal.util.ImageUtils: android.graphics.Canvas mTempCompactBitmapCanvas> = $r13;

        $r15 = new android.graphics.Paint;

        specialinvoke $r15.<android.graphics.Paint: void <init>(int)>(1);

        r0.<com.android.internal.util.ImageUtils: android.graphics.Paint mTempCompactBitmapPaint> = $r15;

        virtualinvoke $r15.<android.graphics.Paint: void setFilterBitmap(boolean)>(1);

     label2:
        $r3 = r0.<com.android.internal.util.ImageUtils: android.graphics.Matrix mTempMatrix>;

        virtualinvoke $r3.<android.graphics.Matrix: void reset()>();

        $r4 = r0.<com.android.internal.util.ImageUtils: android.graphics.Matrix mTempMatrix>;

        $f0 = (float) i2;

        $f3 = 64.0F / $f0;

        $f1 = (float) i0;

        $f2 = 64.0F / $f1;

        virtualinvoke $r4.<android.graphics.Matrix: void setScale(float,float,float,float)>($f3, $f2, 0.0F, 0.0F);

        $r6 = r0.<com.android.internal.util.ImageUtils: android.graphics.Canvas mTempCompactBitmapCanvas>;

        $r5 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode SRC>;

        virtualinvoke $r6.<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>(0, $r5);

        $r9 = r0.<com.android.internal.util.ImageUtils: android.graphics.Canvas mTempCompactBitmapCanvas>;

        $r8 = r0.<com.android.internal.util.ImageUtils: android.graphics.Matrix mTempMatrix>;

        $r7 = r0.<com.android.internal.util.ImageUtils: android.graphics.Paint mTempCompactBitmapPaint>;

        virtualinvoke $r9.<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>(r1, $r8, $r7);

        r16 = r0.<com.android.internal.util.ImageUtils: android.graphics.Bitmap mTempCompactBitmap>;

        i3 = 64;

        i4 = 64;

     label3:
        i5 = i3 * i4;

        specialinvoke r0.<com.android.internal.util.ImageUtils: void ensureBufferSize(int)>(i5);

        $r18 = r0.<com.android.internal.util.ImageUtils: int[] mTempBuffer>;

        virtualinvoke r16.<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>($r18, 0, i4, 0, 0, i4, i3);

        i6 = 0;

     label4:
        if i6 >= i5 goto label6;

        $r10 = r0.<com.android.internal.util.ImageUtils: int[] mTempBuffer>;

        $i1 = $r10[i6];

        $z0 = staticinvoke <com.android.internal.util.ImageUtils: boolean isGrayscale(int)>($i1);

        if $z0 != 0 goto label5;

        return 0;

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        return 1;
    }

    public static void <clinit>()
    {
        <com.android.internal.util.ImageUtils: int TOLERANCE> = 20;

        <com.android.internal.util.ImageUtils: int COMPACT_BITMAP_SIZE> = 64;

        <com.android.internal.util.ImageUtils: int ALPHA_TOLERANCE> = 50;

        return;
    }
}
