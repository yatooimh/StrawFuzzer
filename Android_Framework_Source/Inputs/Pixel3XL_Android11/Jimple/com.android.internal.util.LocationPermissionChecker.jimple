public class com.android.internal.util.LocationPermissionChecker extends java.lang.Object
{
    public static final int ERROR_LOCATION_MODE_OFF;
    public static final int ERROR_LOCATION_PERMISSION_MISSING;
    public static final int SUCCEEDED;
    private static final java.lang.String TAG;
    private final android.app.AppOpsManager mAppOpsManager;
    private final android.content.Context mContext;

    public void <init>(android.content.Context)
    {
        com.android.internal.util.LocationPermissionChecker r0;
        android.content.Context r1;
        java.lang.Object $r2;
        android.app.AppOpsManager $r3;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.util.LocationPermissionChecker: android.content.Context mContext> = r1;

        $r2 = virtualinvoke r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r3 = (android.app.AppOpsManager) $r2;

        r0.<com.android.internal.util.LocationPermissionChecker: android.app.AppOpsManager mAppOpsManager> = $r3;

        return;
    }

    private int checkLocationPermissionInternal(java.lang.String, java.lang.String, int, java.lang.String)
    {
        com.android.internal.util.LocationPermissionChecker r0;
        java.lang.String r1, r2, r3;
        int i0;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.internal.util.LocationPermissionChecker: void checkPackage(int,java.lang.String)>(i0, r1);

        $z0 = virtualinvoke r0.<com.android.internal.util.LocationPermissionChecker: boolean isLocationModeEnabled()>();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $z1 = virtualinvoke r0.<com.android.internal.util.LocationPermissionChecker: boolean checkCallersLocationPermission(java.lang.String,java.lang.String,int,boolean,java.lang.String)>(r1, r2, i0, 1, r3);

        if $z1 != 0 goto label2;

        return 2;

     label2:
        return 0;
    }

    private void checkPackage(int, java.lang.String) throws java.lang.SecurityException
    {
        com.android.internal.util.LocationPermissionChecker r0;
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.SecurityException $r5;
        java.lang.String $r6, r8;
        android.app.AppOpsManager $r7;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        i0 := @parameter0: int;

        r8 := @parameter1: java.lang.String;

        if r8 == null goto label1;

        $r7 = r0.<com.android.internal.util.LocationPermissionChecker: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r7.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i0, r8);

        return;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Checking UID ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but Package Name is Null");

        $r5 = new java.lang.SecurityException;

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private int getUidPermission(java.lang.String, int)
    {
        com.android.internal.util.LocationPermissionChecker r0;
        java.lang.String r1;
        int i0, $i1;
        android.content.Context $r2;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.internal.util.LocationPermissionChecker: android.content.Context mContext>;

        $i1 = virtualinvoke $r2.<android.content.Context: int checkPermission(java.lang.String,int,int)>(r1, -1, i0);

        return $i1;
    }

    private boolean isTargetSdkLessThan(java.lang.String, int, int)
    {
        com.android.internal.util.LocationPermissionChecker r0;
        int i0, i2, i3;
        long l1;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        android.os.UserHandle $r3;
        android.content.pm.ApplicationInfo $r4;
        android.content.pm.PackageManager$NameNotFoundException $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        r7 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.internal.util.LocationPermissionChecker: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $r3 = staticinvoke <android.os.UserHandle: android.os.UserHandle getUserHandleForUid(int)>(i2);

        $r4 = virtualinvoke $r2.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,android.os.UserHandle)>(r7, 0, $r3);

        i3 = $r4.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label2:
        if i3 >= i0 goto label5;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 1;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r6;

     label4:
        $r5 := @caughtexception;

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return 0;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean noteAppOpAllowed(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String)
    {
        com.android.internal.util.LocationPermissionChecker r0;
        java.lang.String r1, r2, r3, r4;
        int i0, $i1;
        android.app.AppOpsManager $r5;
        boolean z0;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.String;

        $r5 = r0.<com.android.internal.util.LocationPermissionChecker: android.app.AppOpsManager mAppOpsManager>;

        $i1 = virtualinvoke $r5.<android.app.AppOpsManager: int noteOp(java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>(r1, i0, r2, r3, r4);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean checkCallersLocationPermission(java.lang.String, java.lang.String, int, boolean, java.lang.String)
    {
        com.android.internal.util.LocationPermissionChecker r0;
        java.lang.String r1, r2, r3, r4;
        int i0, $i1;
        boolean z0, z1, $z2, $z3;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        r3 := @parameter4: java.lang.String;

        z1 = specialinvoke r0.<com.android.internal.util.LocationPermissionChecker: boolean isTargetSdkLessThan(java.lang.String,int,int)>(r1, 29, i0);

        if z0 == 0 goto label1;

        if z1 == 0 goto label1;

        r4 = "android.permission.ACCESS_COARSE_LOCATION";

        goto label2;

     label1:
        r4 = "android.permission.ACCESS_FINE_LOCATION";

     label2:
        $i1 = specialinvoke r0.<com.android.internal.util.LocationPermissionChecker: int getUidPermission(java.lang.String,int)>(r4, i0);

        if $i1 != -1 goto label3;

        return 0;

     label3:
        $z2 = specialinvoke r0.<com.android.internal.util.LocationPermissionChecker: boolean noteAppOpAllowed(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>("android:fine_location", r1, r2, i0, r3);

        if $z2 == 0 goto label4;

        return 1;

     label4:
        if z0 == 0 goto label5;

        if z1 == 0 goto label5;

        $z3 = specialinvoke r0.<com.android.internal.util.LocationPermissionChecker: boolean noteAppOpAllowed(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)>("android:coarse_location", r1, r2, i0, r3);

        return $z3;

     label5:
        return 0;
    }

    public boolean checkLocationPermission(java.lang.String, java.lang.String, int, java.lang.String)
    {
        com.android.internal.util.LocationPermissionChecker r0;
        java.lang.String r1, r2, r3;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        $i1 = specialinvoke r0.<com.android.internal.util.LocationPermissionChecker: int checkLocationPermissionInternal(java.lang.String,java.lang.String,int,java.lang.String)>(r1, r2, i0, r3);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public int checkLocationPermissionWithDetailInfo(java.lang.String, java.lang.String, int, java.lang.String)
    {
        com.android.internal.util.LocationPermissionChecker r0;
        java.lang.String r1, r2, $r7, r8;
        int i0, i1;
        java.lang.StringBuilder $r3;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        r8 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        i1 = specialinvoke r0.<com.android.internal.util.LocationPermissionChecker: int checkLocationPermissionInternal(java.lang.String,java.lang.String,int,java.lang.String)>(r8, r1, i0, r2);

        if i1 == 1 goto label2;

        if i1 == 2 goto label1;

        goto label3;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UID ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no location permission");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocationPermissionChecker", $r7);

        goto label3;

     label2:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LocationPermissionChecker", "Location mode is disabled for the device");

     label3:
        return i1;
    }

    public void enforceLocationPermission(java.lang.String, java.lang.String, int, java.lang.String) throws java.lang.SecurityException
    {
        com.android.internal.util.LocationPermissionChecker r0;
        java.lang.String r1, r2, $r9, r10;
        int i0, i1;
        java.lang.SecurityException $r3, $r8;
        java.lang.StringBuilder $r4;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        r10 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        i1 = specialinvoke r0.<com.android.internal.util.LocationPermissionChecker: int checkLocationPermissionInternal(java.lang.String,java.lang.String,int,java.lang.String)>(r10, r1, i0, r2);

        if i1 == 1 goto label2;

        if i1 == 2 goto label1;

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UID ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no location permission");

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;

     label2:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Location mode is disabled for the device");

        throw $r3;
    }

    protected int getCurrentUser()
    {
        com.android.internal.util.LocationPermissionChecker r0;
        int $i0;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        $i0 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        return $i0;
    }

    public boolean isLocationModeEnabled()
    {
        com.android.internal.util.LocationPermissionChecker r0;
        boolean z0;
        android.content.Context $r1;
        java.lang.Object $r2;
        int $i0;
        android.os.UserHandle $r3;
        java.lang.Exception $r4;
        android.location.LocationManager r5;

        r0 := @this: com.android.internal.util.LocationPermissionChecker;

        $r1 = r0.<com.android.internal.util.LocationPermissionChecker: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("location");

        r5 = (android.location.LocationManager) $r2;

     label1:
        $i0 = virtualinvoke r0.<com.android.internal.util.LocationPermissionChecker: int getCurrentUser()>();

        $r3 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>($i0);

        z0 = virtualinvoke r5.<android.location.LocationManager: boolean isLocationEnabledForUser(android.os.UserHandle)>($r3);

     label2:
        return z0;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LocationPermissionChecker", "Failure to get location mode via API, falling back to settings", $r4);

        return 0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.internal.util.LocationPermissionChecker: java.lang.String TAG> = "LocationPermissionChecker";

        <com.android.internal.util.LocationPermissionChecker: int SUCCEEDED> = 0;

        <com.android.internal.util.LocationPermissionChecker: int ERROR_LOCATION_PERMISSION_MISSING> = 2;

        <com.android.internal.util.LocationPermissionChecker: int ERROR_LOCATION_MODE_OFF> = 1;

        return;
    }
}
