public final class com.android.internal.util.ParseUtils extends java.lang.Object
{

    private void <init>()
    {
        com.android.internal.util.ParseUtils r0;

        r0 := @this: com.android.internal.util.ParseUtils;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static boolean parseBoolean(java.lang.String, boolean)
    {
        java.lang.String r0, $r1, $r2;
        boolean z0, z1, $z2, z3;
        int $i0, i1;

        r0 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r1 = "true";

        z1 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        z3 = 1;

        if z1 == 0 goto label1;

        return 1;

     label1:
        $r2 = "false";

        $z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r0);

        if $z2 == 0 goto label2;

        return 0;

     label2:
        i1 = (int) z0;

        $i0 = staticinvoke <com.android.internal.util.ParseUtils: int parseInt(java.lang.String,int)>(r0, i1);

        if $i0 == 0 goto label3;

        goto label4;

     label3:
        z3 = 0;

     label4:
        return z3;
    }

    public static double parseDouble(java.lang.String, double)
    {
        double d0, d1;
        java.lang.Throwable $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        d0 := @parameter1: double;

        if r1 != null goto label1;

        return d0;

     label1:
        d1 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r1);

     label2:
        return d1;

     label3:
        $r0 := @caughtexception;

        return d0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static float parseFloat(java.lang.String, float)
    {
        float f0, f1;
        java.lang.Throwable $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        f0 := @parameter1: float;

        if r1 != null goto label1;

        return f0;

     label1:
        f1 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r1);

     label2:
        return f1;

     label3:
        $r0 := @caughtexception;

        return f0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static int parseInt(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i1;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = staticinvoke <com.android.internal.util.ParseUtils: int parseIntWithBase(java.lang.String,int,int)>(r0, 10, i0);

        return $i1;
    }

    public static int parseIntWithBase(java.lang.String, int, int)
    {
        int i0, i1, i2;
        java.lang.Throwable $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        if r1 != null goto label1;

        return i0;

     label1:
        i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r1, i1);

     label2:
        return i2;

     label3:
        $r0 := @caughtexception;

        return i0;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public static long parseLong(java.lang.String, long)
    {
        java.lang.String r0;
        long l0, $l1;

        r0 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        $l1 = staticinvoke <com.android.internal.util.ParseUtils: long parseLongWithBase(java.lang.String,int,long)>(r0, 10, l0);

        return $l1;
    }

    public static long parseLongWithBase(java.lang.String, int, long)
    {
        int i0;
        long l1, l2;
        java.lang.Throwable $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        if r1 != null goto label1;

        return l1;

     label1:
        l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String,int)>(r1, i0);

     label2:
        return l2;

     label3:
        $r0 := @caughtexception;

        return l1;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }
}
