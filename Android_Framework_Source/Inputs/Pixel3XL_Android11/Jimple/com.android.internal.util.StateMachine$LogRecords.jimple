class com.android.internal.util.StateMachine$LogRecords extends java.lang.Object
{
    private static final int DEFAULT_SIZE;
    private int mCount;
    private boolean mLogOnlyTransitions;
    private java.util.Vector mLogRecVector;
    private int mMaxSize;
    private int mOldestIndex;

    private void <init>()
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        java.util.Vector $r1;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.Vector;

        specialinvoke $r1.<java.util.Vector: void <init>()>();

        r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector> = $r1;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize> = 20;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex> = 0;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mCount> = 0;

        r0.<com.android.internal.util.StateMachine$LogRecords: boolean mLogOnlyTransitions> = 0;

        return;
    }

    void <init>(com.android.internal.util.StateMachine$1)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        com.android.internal.util.StateMachine$1 r1;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        r1 := @parameter0: com.android.internal.util.StateMachine$1;

        specialinvoke r0.<com.android.internal.util.StateMachine$LogRecords: void <init>()>();

        return;
    }

    static int access$1900(com.android.internal.util.StateMachine$LogRecords)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        int $i0;

        r0 := @parameter0: com.android.internal.util.StateMachine$LogRecords;

        $i0 = r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize>;

        return $i0;
    }

    static java.util.Vector access$2000(com.android.internal.util.StateMachine$LogRecords)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        java.util.Vector $r1;

        r0 := @parameter0: com.android.internal.util.StateMachine$LogRecords;

        $r1 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        return $r1;
    }

    void add(com.android.internal.util.StateMachine, android.os.Message, java.lang.String, com.android.internal.util.IState, com.android.internal.util.IState, com.android.internal.util.IState)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        android.os.Message r1;
        java.lang.String r2;
        com.android.internal.util.IState r3, r4, r5;
        java.util.Vector r6, $r7, $r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.lang.Object $r9;
        java.lang.Throwable $r10;
        com.android.internal.util.StateMachine r11;
        com.android.internal.util.StateMachine$LogRec r12, r13;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        r11 := @parameter0: com.android.internal.util.StateMachine;

        r1 := @parameter1: android.os.Message;

        r2 := @parameter2: java.lang.String;

        r3 := @parameter3: com.android.internal.util.IState;

        r4 := @parameter4: com.android.internal.util.IState;

        r5 := @parameter5: com.android.internal.util.IState;

        entermonitor r0;

     label1:
        $i1 = r0.<com.android.internal.util.StateMachine$LogRecords: int mCount>;

        $i2 = $i1 + 1;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mCount> = $i2;

        $r7 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        $i3 = virtualinvoke $r7.<java.util.Vector: int size()>();

        $i4 = r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize>;

        if $i3 >= $i4 goto label3;

        r6 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        r12 = new com.android.internal.util.StateMachine$LogRec;

        specialinvoke r12.<com.android.internal.util.StateMachine$LogRec: void <init>(com.android.internal.util.StateMachine,android.os.Message,java.lang.String,com.android.internal.util.IState,com.android.internal.util.IState,com.android.internal.util.IState)>(r11, r1, r2, r3, r4, r5);

        virtualinvoke r6.<java.util.Vector: boolean add(java.lang.Object)>(r12);

     label2:
        goto label5;

     label3:
        $r8 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        $i5 = r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex>;

        $r9 = virtualinvoke $r8.<java.util.Vector: java.lang.Object get(int)>($i5);

        r13 = (com.android.internal.util.StateMachine$LogRec) $r9;

        $i6 = r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex>;

        i0 = $i6 + 1;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex> = i0;

        $i7 = r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize>;

        if i0 < $i7 goto label4;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex> = 0;

     label4:
        virtualinvoke r13.<com.android.internal.util.StateMachine$LogRec: void update(com.android.internal.util.StateMachine,android.os.Message,java.lang.String,com.android.internal.util.IState,com.android.internal.util.IState,com.android.internal.util.IState)>(r11, r1, r2, r3, r4, r5);

     label5:
        exitmonitor r0;

        return;

     label6:
        $r10 := @caughtexception;

        exitmonitor r0;

        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
    }

    void cleanup()
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        java.util.Vector $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        virtualinvoke $r2.<java.util.Vector: void clear()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    int count()
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        int i0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        entermonitor r0;

     label1:
        i0 = r0.<com.android.internal.util.StateMachine$LogRecords: int mCount>;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    com.android.internal.util.StateMachine$LogRec get(int)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        java.util.Vector $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        com.android.internal.util.StateMachine$LogRec r4;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        i3 := @parameter0: int;

        entermonitor r0;

     label1:
        $i0 = r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex>;

        i4 = $i0 + i3;

     label2:
        i5 = i4;

     label3:
        $i1 = r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize>;

        if i4 < $i1 goto label4;

        $i2 = r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize>;

        i5 = i4 - $i2;

     label4:
        i6 = virtualinvoke r0.<com.android.internal.util.StateMachine$LogRecords: int size()>();

     label5:
        if i5 < i6 goto label6;

        exitmonitor r0;

        return null;

     label6:
        $r1 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        $r2 = virtualinvoke $r1.<java.util.Vector: java.lang.Object get(int)>(i5);

        r4 = (com.android.internal.util.StateMachine$LogRec) $r2;

     label7:
        exitmonitor r0;

        return r4;

     label8:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label8;
        catch java.lang.Throwable from label3 to label4 with label8;
        catch java.lang.Throwable from label4 to label5 with label8;
        catch java.lang.Throwable from label6 to label7 with label8;
    }

    boolean logOnlyTransitions()
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.internal.util.StateMachine$LogRecords: boolean mLogOnlyTransitions>;

     label2:
        exitmonitor r0;

        return z0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void setLogOnlyTransitions(boolean)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<com.android.internal.util.StateMachine$LogRecords: boolean mLogOnlyTransitions> = z0;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void setSize(int)
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        int i0;
        java.util.Vector $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        r0.<com.android.internal.util.StateMachine$LogRecords: int mMaxSize> = i0;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mOldestIndex> = 0;

        r0.<com.android.internal.util.StateMachine$LogRecords: int mCount> = 0;

        $r2 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        virtualinvoke $r2.<java.util.Vector: void clear()>();

     label2:
        exitmonitor r0;

        return;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    int size()
    {
        com.android.internal.util.StateMachine$LogRecords r0;
        int i0;
        java.util.Vector $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.internal.util.StateMachine$LogRecords;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.internal.util.StateMachine$LogRecords: java.util.Vector mLogRecVector>;

        i0 = virtualinvoke $r2.<java.util.Vector: int size()>();

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public static void <clinit>()
    {
        <com.android.internal.util.StateMachine$LogRecords: int DEFAULT_SIZE> = 20;

        return;
    }
}
