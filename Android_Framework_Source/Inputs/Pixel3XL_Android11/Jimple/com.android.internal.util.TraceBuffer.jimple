public class com.android.internal.util.TraceBuffer extends java.lang.Object
{
    private final java.util.Queue mBuffer;
    private int mBufferCapacity;
    private final java.lang.Object mBufferLock;
    private int mBufferUsedSize;
    private final java.util.function.Consumer mProtoDequeuedCallback;
    private final com.android.internal.util.TraceBuffer$ProtoProvider mProtoProvider;

    public void <init>(int)
    {
        com.android.internal.util.TraceBuffer r0;
        int i0;
        com.android.internal.util.TraceBuffer$ProtoOutputStreamProvider $r1;

        r0 := @this: com.android.internal.util.TraceBuffer;

        i0 := @parameter0: int;

        $r1 = new com.android.internal.util.TraceBuffer$ProtoOutputStreamProvider;

        specialinvoke $r1.<com.android.internal.util.TraceBuffer$ProtoOutputStreamProvider: void <init>(com.android.internal.util.TraceBuffer$1)>(null);

        specialinvoke r0.<com.android.internal.util.TraceBuffer: void <init>(int,com.android.internal.util.TraceBuffer$ProtoProvider,java.util.function.Consumer)>(i0, $r1, null);

        return;
    }

    public void <init>(int, com.android.internal.util.TraceBuffer$ProtoProvider, java.util.function.Consumer)
    {
        com.android.internal.util.TraceBuffer r0;
        int i0;
        com.android.internal.util.TraceBuffer$ProtoProvider r1;
        java.util.function.Consumer r2;
        java.lang.Object $r3;
        java.util.ArrayDeque $r4;

        r0 := @this: com.android.internal.util.TraceBuffer;

        i0 := @parameter0: int;

        r1 := @parameter1: com.android.internal.util.TraceBuffer$ProtoProvider;

        r2 := @parameter2: java.util.function.Consumer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.lang.Object;

        specialinvoke $r3.<java.lang.Object: void <init>()>();

        r0.<com.android.internal.util.TraceBuffer: java.lang.Object mBufferLock> = $r3;

        $r4 = new java.util.ArrayDeque;

        specialinvoke $r4.<java.util.ArrayDeque: void <init>()>();

        r0.<com.android.internal.util.TraceBuffer: java.util.Queue mBuffer> = $r4;

        r0.<com.android.internal.util.TraceBuffer: int mBufferCapacity> = i0;

        r0.<com.android.internal.util.TraceBuffer: com.android.internal.util.TraceBuffer$ProtoProvider mProtoProvider> = r1;

        r0.<com.android.internal.util.TraceBuffer: java.util.function.Consumer mProtoDequeuedCallback> = r2;

        virtualinvoke r0.<com.android.internal.util.TraceBuffer: void resetBuffer()>();

        return;
    }

    private void discardOldest(int)
    {
        com.android.internal.util.TraceBuffer r0;
        int i0, $i1, $i4, $i5, $i6, $i7;
        java.lang.Object r1;
        java.util.function.Consumer r2;
        long $l2, l8;
        byte $b3;
        java.util.Queue $r3;
        java.lang.IllegalStateException $r4;
        com.android.internal.util.TraceBuffer$ProtoProvider $r5;

        r0 := @this: com.android.internal.util.TraceBuffer;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.internal.util.TraceBuffer: int getAvailableSpace()>();

        l8 = (long) $i1;

     label1:
        $l2 = (long) i0;

        $b3 = l8 cmp $l2;

        if $b3 >= 0 goto label4;

        $r3 = r0.<com.android.internal.util.TraceBuffer: java.util.Queue mBuffer>;

        r1 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object poll()>();

        if r1 == null goto label3;

        $i4 = r0.<com.android.internal.util.TraceBuffer: int mBufferUsedSize>;

        $r5 = r0.<com.android.internal.util.TraceBuffer: com.android.internal.util.TraceBuffer$ProtoProvider mProtoProvider>;

        $i5 = interfaceinvoke $r5.<com.android.internal.util.TraceBuffer$ProtoProvider: int getItemSize(java.lang.Object)>(r1);

        $i6 = $i4 - $i5;

        r0.<com.android.internal.util.TraceBuffer: int mBufferUsedSize> = $i6;

        $i7 = virtualinvoke r0.<com.android.internal.util.TraceBuffer: int getAvailableSpace()>();

        l8 = (long) $i7;

        r2 = r0.<com.android.internal.util.TraceBuffer: java.util.function.Consumer mProtoDequeuedCallback>;

        if r2 == null goto label2;

        interfaceinvoke r2.<java.util.function.Consumer: void accept(java.lang.Object)>(r1);

     label2:
        goto label1;

     label3:
        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No element to discard from buffer");

        throw $r4;

     label4:
        return;
    }

    public void add(java.lang.Object)
    {
        com.android.internal.util.TraceBuffer r0;
        int i0, $i1, $i2, $i3, $i4;
        java.lang.Object r1, $r11, r13;
        com.android.internal.util.TraceBuffer$ProtoProvider $r2;
        java.lang.StringBuilder $r3;
        java.lang.IllegalStateException $r8;
        java.lang.String $r9;
        java.util.Queue $r10;
        java.lang.Throwable $r12;

        r0 := @this: com.android.internal.util.TraceBuffer;

        r13 := @parameter0: java.lang.Object;

        $r2 = r0.<com.android.internal.util.TraceBuffer: com.android.internal.util.TraceBuffer$ProtoProvider mProtoProvider>;

        i0 = interfaceinvoke $r2.<com.android.internal.util.TraceBuffer$ProtoProvider: int getItemSize(java.lang.Object)>(r13);

        $i1 = r0.<com.android.internal.util.TraceBuffer: int mBufferCapacity>;

        if i0 > $i1 goto label6;

        r1 = r0.<com.android.internal.util.TraceBuffer: java.lang.Object mBufferLock>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.internal.util.TraceBuffer: void discardOldest(int)>(i0);

        $r10 = r0.<com.android.internal.util.TraceBuffer: java.util.Queue mBuffer>;

        interfaceinvoke $r10.<java.util.Queue: boolean add(java.lang.Object)>(r13);

        $i3 = r0.<com.android.internal.util.TraceBuffer: int mBufferUsedSize>;

        $i4 = $i3 + i0;

        r0.<com.android.internal.util.TraceBuffer: int mBufferUsedSize> = $i4;

        $r11 = r0.<com.android.internal.util.TraceBuffer: java.lang.Object mBufferLock>;

        virtualinvoke $r11.<java.lang.Object: void notify()>();

        exitmonitor r1;

     label2:
        return;

     label3:
        $r12 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r12;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trace object too large for the buffer. Buffer size:");

        $i2 = r0.<com.android.internal.util.TraceBuffer: int mBufferCapacity>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Object size: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = new java.lang.IllegalStateException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9);

        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean contains(byte[])
    {
        com.android.internal.util.TraceBuffer r0;
        byte[] r1;
        java.util.Queue $r2;
        java.util.stream.Stream $r3;
        com.android.internal.util._$$Lambda$TraceBuffer$BDCkdpEKAlh5YuuB_2MOTxgQ3w4 $r4;
        boolean $z0;

        r0 := @this: com.android.internal.util.TraceBuffer;

        r1 := @parameter0: byte[];

        $r2 = r0.<com.android.internal.util.TraceBuffer: java.util.Queue mBuffer>;

        $r3 = interfaceinvoke $r2.<java.util.Queue: java.util.stream.Stream stream()>();

        $r4 = new com.android.internal.util._$$Lambda$TraceBuffer$BDCkdpEKAlh5YuuB_2MOTxgQ3w4;

        specialinvoke $r4.<com.android.internal.util._$$Lambda$TraceBuffer$BDCkdpEKAlh5YuuB_2MOTxgQ3w4: void <init>(com.android.internal.util.TraceBuffer,byte[])>(r0, r1);

        $z0 = interfaceinvoke $r3.<java.util.stream.Stream: boolean anyMatch(java.util.function.Predicate)>($r4);

        return $z0;
    }

    public int getAvailableSpace()
    {
        com.android.internal.util.TraceBuffer r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.internal.util.TraceBuffer;

        $i1 = r0.<com.android.internal.util.TraceBuffer: int mBufferCapacity>;

        $i0 = r0.<com.android.internal.util.TraceBuffer: int mBufferUsedSize>;

        $i2 = $i1 - $i0;

        return $i2;
    }

    public int getBufferSize()
    {
        com.android.internal.util.TraceBuffer r0;
        int $i0;

        r0 := @this: com.android.internal.util.TraceBuffer;

        $i0 = r0.<com.android.internal.util.TraceBuffer: int mBufferUsedSize>;

        return $i0;
    }

    public java.lang.String getStatus()
    {
        com.android.internal.util.TraceBuffer r0;
        java.lang.Object r1;
        int $i0, $i1, $i2;
        java.util.Queue $r7;
        java.lang.Throwable $r9;
        java.lang.StringBuilder r10;
        java.lang.String r11;

        r0 := @this: com.android.internal.util.TraceBuffer;

        r1 = r0.<com.android.internal.util.TraceBuffer: java.lang.Object mBufferLock>;

        entermonitor r1;

     label1:
        r10 = new java.lang.StringBuilder;

        specialinvoke r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Buffer size: ");

        $i0 = r0.<com.android.internal.util.TraceBuffer: int mBufferCapacity>;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes\nBuffer usage: ");

        $i1 = r0.<com.android.internal.util.TraceBuffer: int mBufferUsedSize>;

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes\nElements in the buffer: ");

        $r7 = r0.<com.android.internal.util.TraceBuffer: java.util.Queue mBuffer>;

        $i2 = interfaceinvoke $r7.<java.util.Queue: int size()>();

        virtualinvoke r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        r11 = virtualinvoke r10.<java.lang.StringBuilder: java.lang.String toString()>();

        exitmonitor r1;

     label2:
        return r11;

     label3:
        $r9 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean lambda$contains$0$TraceBuffer(byte[], java.lang.Object)
    {
        com.android.internal.util.TraceBuffer r0;
        byte[] r1, $r4;
        java.lang.Object r2;
        com.android.internal.util.TraceBuffer$ProtoProvider $r3;
        boolean $z0;

        r0 := @this: com.android.internal.util.TraceBuffer;

        r1 := @parameter0: byte[];

        r2 := @parameter1: java.lang.Object;

        $r3 = r0.<com.android.internal.util.TraceBuffer: com.android.internal.util.TraceBuffer$ProtoProvider mProtoProvider>;

        $r4 = interfaceinvoke $r3.<com.android.internal.util.TraceBuffer$ProtoProvider: byte[] getBytes(java.lang.Object)>(r2);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r4, r1);

        return $z0;
    }

    public void resetBuffer()
    {
        com.android.internal.util.TraceBuffer r0;
        java.lang.Object r1, r8;
        java.util.Iterator r2;
        java.util.function.Consumer $r3, $r6;
        java.util.Queue $r4, $r5;
        boolean $z0;
        java.lang.Throwable $r7;

        r0 := @this: com.android.internal.util.TraceBuffer;

        r1 = r0.<com.android.internal.util.TraceBuffer: java.lang.Object mBufferLock>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.internal.util.TraceBuffer: java.util.function.Consumer mProtoDequeuedCallback>;

        if $r3 == null goto label4;

        $r5 = r0.<com.android.internal.util.TraceBuffer: java.util.Queue mBuffer>;

        r2 = interfaceinvoke $r5.<java.util.Queue: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        $r6 = r0.<com.android.internal.util.TraceBuffer: java.util.function.Consumer mProtoDequeuedCallback>;

        interfaceinvoke $r6.<java.util.function.Consumer: void accept(java.lang.Object)>(r8);

     label3:
        goto label2;

     label4:
        $r4 = r0.<com.android.internal.util.TraceBuffer: java.util.Queue mBuffer>;

        interfaceinvoke $r4.<java.util.Queue: void clear()>();

        r0.<com.android.internal.util.TraceBuffer: int mBufferUsedSize> = 0;

        exitmonitor r1;

     label5:
        return;

     label6:
        $r7 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void setCapacity(int)
    {
        com.android.internal.util.TraceBuffer r0;
        int i0;

        r0 := @this: com.android.internal.util.TraceBuffer;

        i0 := @parameter0: int;

        r0.<com.android.internal.util.TraceBuffer: int mBufferCapacity> = i0;

        return;
    }

    public int size()
    {
        com.android.internal.util.TraceBuffer r0;
        java.util.Queue $r1;
        int $i0;

        r0 := @this: com.android.internal.util.TraceBuffer;

        $r1 = r0.<com.android.internal.util.TraceBuffer: java.util.Queue mBuffer>;

        $i0 = interfaceinvoke $r1.<java.util.Queue: int size()>();

        return $i0;
    }

    public void writeTraceToFile(java.io.File, java.lang.Object) throws java.io.IOException
    {
        com.android.internal.util.TraceBuffer r0;
        java.lang.Object r1, r9;
        java.io.FileOutputStream r2;
        java.util.Queue $r3;
        com.android.internal.util.TraceBuffer$ProtoProvider $r4;
        java.lang.Throwable $r5, $r6, $r7;
        java.io.File r8;

        r0 := @this: com.android.internal.util.TraceBuffer;

        r8 := @parameter0: java.io.File;

        r9 := @parameter1: java.lang.Object;

        r1 = r0.<com.android.internal.util.TraceBuffer: java.lang.Object mBufferLock>;

        entermonitor r1;

     label01:
        virtualinvoke r8.<java.io.File: boolean delete()>();

        r2 = new java.io.FileOutputStream;

        specialinvoke r2.<java.io.FileOutputStream: void <init>(java.io.File)>(r8);

     label02:
        virtualinvoke r8.<java.io.File: boolean setReadable(boolean,boolean)>(1, 0);

        $r4 = r0.<com.android.internal.util.TraceBuffer: com.android.internal.util.TraceBuffer$ProtoProvider mProtoProvider>;

        $r3 = r0.<com.android.internal.util.TraceBuffer: java.util.Queue mBuffer>;

        interfaceinvoke $r4.<com.android.internal.util.TraceBuffer$ProtoProvider: void write(java.lang.Object,java.util.Queue,java.io.OutputStream)>(r9, $r3, r2);

        virtualinvoke r2.<java.io.OutputStream: void flush()>();

     label03:
        virtualinvoke r2.<java.io.OutputStream: void close()>();

        exitmonitor r1;

     label04:
        return;

     label05:
        $r7 := @caughtexception;

     label06:
        virtualinvoke r2.<java.io.OutputStream: void close()>();

     label07:
        goto label10;

     label08:
        $r5 := @caughtexception;

     label09:
        virtualinvoke $r7.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r5);

     label10:
        throw $r7;

     label11:
        $r6 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label10 to label11 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }
}
