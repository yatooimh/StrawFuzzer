public class com.android.internal.widget.CachingIconView extends android.widget.ImageView
{
    private int mDesiredVisibility;
    private boolean mForceHidden;
    private int mIconColor;
    private boolean mInternalSetDrawable;
    private java.lang.String mLastPackage;
    private int mLastResId;
    private java.util.function.Consumer mOnForceHiddenChangedListener;
    private java.util.function.Consumer mOnVisibilityChangedListener;
    private boolean mWillBeForceHidden;

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.android.internal.widget.CachingIconView r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2);

        return;
    }

    private java.lang.String normalizeIconPackage(android.graphics.drawable.Icon)
    {
        com.android.internal.widget.CachingIconView r0;
        boolean $z0, $z1;
        android.content.Context $r1;
        java.lang.String $r2, r4;
        android.graphics.drawable.Icon r3;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r3 := @parameter0: android.graphics.drawable.Icon;

        if r3 != null goto label1;

        return null;

     label1:
        r4 = virtualinvoke r3.<android.graphics.drawable.Icon: java.lang.String getResPackage()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4);

        if $z0 == 0 goto label2;

        return null;

     label2:
        $r1 = r0.<com.android.internal.widget.CachingIconView: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getPackageName()>();

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        if $z1 == 0 goto label3;

        return null;

     label3:
        return r4;
    }

    private void resetCache()
    {
        com.android.internal.widget.CachingIconView r0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.internal.widget.CachingIconView;

        entermonitor r0;

     label1:
        r0.<com.android.internal.widget.CachingIconView: int mLastResId> = 0;

        r0.<com.android.internal.widget.CachingIconView: java.lang.String mLastPackage> = null;

     label2:
        exitmonitor r0;

        return;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private boolean testAndSetCache(int)
    {
        com.android.internal.widget.CachingIconView r0;
        int i0, $i1, $i2;
        java.lang.String $r2;
        java.lang.Throwable $r3;
        boolean z0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        i0 := @parameter0: int;

        entermonitor r0;

        if i0 == 0 goto label08;

     label01:
        $i1 = r0.<com.android.internal.widget.CachingIconView: int mLastResId>;

        if $i1 != 0 goto label03;

     label02:
        goto label08;

     label03:
        $i2 = r0.<com.android.internal.widget.CachingIconView: int mLastResId>;

        if i0 != $i2 goto label05;

        $r2 = r0.<com.android.internal.widget.CachingIconView: java.lang.String mLastPackage>;

        if $r2 != null goto label05;

     label04:
        z0 = 1;

        goto label06;

     label05:
        z0 = 0;

     label06:
        goto label09;

     label07:
        $r3 := @caughtexception;

        goto label11;

     label08:
        z0 = 0;

     label09:
        r0.<com.android.internal.widget.CachingIconView: java.lang.String mLastPackage> = null;

        r0.<com.android.internal.widget.CachingIconView: int mLastResId> = i0;

     label10:
        exitmonitor r0;

        return z0;

     label11:
        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label07;
        catch java.lang.Throwable from label03 to label04 with label07;
        catch java.lang.Throwable from label09 to label10 with label07;
    }

    private boolean testAndSetCache(android.graphics.drawable.Icon)
    {
        com.android.internal.widget.CachingIconView r0;
        java.lang.String r1, $r2;
        int $i0, $i1, $i2, $i3, $i4;
        boolean $z0, z1;
        java.lang.Throwable $r3;
        android.graphics.drawable.Icon r4;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r4 := @parameter0: android.graphics.drawable.Icon;

        entermonitor r0;

        z1 = 0;

        if r4 == null goto label5;

     label1:
        $i0 = virtualinvoke r4.<android.graphics.drawable.Icon: int getType()>();

        if $i0 != 2 goto label5;

        r1 = specialinvoke r0.<com.android.internal.widget.CachingIconView: java.lang.String normalizeIconPackage(android.graphics.drawable.Icon)>(r4);

        $i1 = r0.<com.android.internal.widget.CachingIconView: int mLastResId>;

        if $i1 == 0 goto label3;

        $i2 = virtualinvoke r4.<android.graphics.drawable.Icon: int getResId()>();

        $i3 = r0.<com.android.internal.widget.CachingIconView: int mLastResId>;

        if $i2 != $i3 goto label3;

        $r2 = r0.<com.android.internal.widget.CachingIconView: java.lang.String mLastPackage>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $z0 == 0 goto label3;

     label2:
        z1 = 1;

        goto label3;

     label3:
        r0.<com.android.internal.widget.CachingIconView: java.lang.String mLastPackage> = r1;

        $i4 = virtualinvoke r4.<android.graphics.drawable.Icon: int getResId()>();

        r0.<com.android.internal.widget.CachingIconView: int mLastResId> = $i4;

     label4:
        exitmonitor r0;

        return z1;

     label5:
        specialinvoke r0.<com.android.internal.widget.CachingIconView: void resetCache()>();

     label6:
        exitmonitor r0;

        return 0;

     label7:
        $r3 := @caughtexception;

        exitmonitor r0;

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
    }

    private void updateVisibility()
    {
        com.android.internal.widget.CachingIconView r0;
        java.util.function.Consumer r1;
        int $i0, i1;
        java.lang.Integer $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        $i0 = r0.<com.android.internal.widget.CachingIconView: int mDesiredVisibility>;

        if $i0 != 0 goto label1;

        $z0 = r0.<com.android.internal.widget.CachingIconView: boolean mForceHidden>;

        if $z0 == 0 goto label1;

        i1 = 4;

        goto label2;

     label1:
        i1 = r0.<com.android.internal.widget.CachingIconView: int mDesiredVisibility>;

     label2:
        r1 = r0.<com.android.internal.widget.CachingIconView: java.util.function.Consumer mOnVisibilityChangedListener>;

        if r1 == null goto label3;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r2);

     label3:
        specialinvoke r0.<android.widget.ImageView: void setVisibility(int)>(i1);

        return;
    }

    public int getOriginalIconColor()
    {
        com.android.internal.widget.CachingIconView r0;
        int $i0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        $i0 = r0.<com.android.internal.widget.CachingIconView: int mIconColor>;

        return $i0;
    }

    public boolean isForceHidden()
    {
        com.android.internal.widget.CachingIconView r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        $z0 = r0.<com.android.internal.widget.CachingIconView: boolean mForceHidden>;

        return $z0;
    }

    protected void onConfigurationChanged(android.content.res.Configuration)
    {
        com.android.internal.widget.CachingIconView r0;
        android.content.res.Configuration r1;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r1 := @parameter0: android.content.res.Configuration;

        specialinvoke r0.<android.widget.ImageView: void onConfigurationChanged(android.content.res.Configuration)>(r1);

        specialinvoke r0.<com.android.internal.widget.CachingIconView: void resetCache()>();

        return;
    }

    public void setForceHidden(boolean)
    {
        com.android.internal.widget.CachingIconView r0;
        boolean z0, $z1;
        java.util.function.Consumer r1;
        java.lang.Boolean $r2;

        r0 := @this: com.android.internal.widget.CachingIconView;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.internal.widget.CachingIconView: boolean mForceHidden>;

        if z0 == $z1 goto label1;

        r0.<com.android.internal.widget.CachingIconView: boolean mForceHidden> = z0;

        r0.<com.android.internal.widget.CachingIconView: boolean mWillBeForceHidden> = 0;

        specialinvoke r0.<com.android.internal.widget.CachingIconView: void updateVisibility()>();

        r1 = r0.<com.android.internal.widget.CachingIconView: java.util.function.Consumer mOnForceHiddenChangedListener>;

        if r1 == null goto label1;

        $r2 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0);

        interfaceinvoke r1.<java.util.function.Consumer: void accept(java.lang.Object)>($r2);

     label1:
        return;
    }

    public void setImageBitmap(android.graphics.Bitmap)
    {
        com.android.internal.widget.CachingIconView r0;
        android.graphics.Bitmap r1;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r1 := @parameter0: android.graphics.Bitmap;

        specialinvoke r0.<com.android.internal.widget.CachingIconView: void resetCache()>();

        specialinvoke r0.<android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)>(r1);

        return;
    }

    public void setImageDrawable(android.graphics.drawable.Drawable)
    {
        com.android.internal.widget.CachingIconView r0;
        android.graphics.drawable.Drawable r1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r1 := @parameter0: android.graphics.drawable.Drawable;

        $z0 = r0.<com.android.internal.widget.CachingIconView: boolean mInternalSetDrawable>;

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.internal.widget.CachingIconView: void resetCache()>();

     label1:
        specialinvoke r0.<android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)>(r1);

        return;
    }

    public void setImageIcon(android.graphics.drawable.Icon)
    {
        com.android.internal.widget.CachingIconView r0;
        android.graphics.drawable.Icon r1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r1 := @parameter0: android.graphics.drawable.Icon;

        $z0 = specialinvoke r0.<com.android.internal.widget.CachingIconView: boolean testAndSetCache(android.graphics.drawable.Icon)>(r1);

        if $z0 != 0 goto label1;

        r0.<com.android.internal.widget.CachingIconView: boolean mInternalSetDrawable> = 1;

        specialinvoke r0.<android.widget.ImageView: void setImageIcon(android.graphics.drawable.Icon)>(r1);

        r0.<com.android.internal.widget.CachingIconView: boolean mInternalSetDrawable> = 0;

     label1:
        return;
    }

    public java.lang.Runnable setImageIconAsync(android.graphics.drawable.Icon)
    {
        com.android.internal.widget.CachingIconView r0;
        android.graphics.drawable.Icon r1;
        java.lang.Runnable $r2;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r1 := @parameter0: android.graphics.drawable.Icon;

        specialinvoke r0.<com.android.internal.widget.CachingIconView: void resetCache()>();

        $r2 = specialinvoke r0.<android.widget.ImageView: java.lang.Runnable setImageIconAsync(android.graphics.drawable.Icon)>(r1);

        return $r2;
    }

    public void setImageResource(int)
    {
        com.android.internal.widget.CachingIconView r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.CachingIconView: boolean testAndSetCache(int)>(i0);

        if $z0 != 0 goto label1;

        r0.<com.android.internal.widget.CachingIconView: boolean mInternalSetDrawable> = 1;

        specialinvoke r0.<android.widget.ImageView: void setImageResource(int)>(i0);

        r0.<com.android.internal.widget.CachingIconView: boolean mInternalSetDrawable> = 0;

     label1:
        return;
    }

    public java.lang.Runnable setImageResourceAsync(int)
    {
        com.android.internal.widget.CachingIconView r0;
        int i0;
        java.lang.Runnable $r1;

        r0 := @this: com.android.internal.widget.CachingIconView;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.internal.widget.CachingIconView: void resetCache()>();

        $r1 = specialinvoke r0.<android.widget.ImageView: java.lang.Runnable setImageResourceAsync(int)>(i0);

        return $r1;
    }

    public void setImageURI(android.net.Uri)
    {
        com.android.internal.widget.CachingIconView r0;
        android.net.Uri r1;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r1 := @parameter0: android.net.Uri;

        specialinvoke r0.<com.android.internal.widget.CachingIconView: void resetCache()>();

        specialinvoke r0.<android.widget.ImageView: void setImageURI(android.net.Uri)>(r1);

        return;
    }

    public java.lang.Runnable setImageURIAsync(android.net.Uri)
    {
        com.android.internal.widget.CachingIconView r0;
        android.net.Uri r1;
        java.lang.Runnable $r2;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r1 := @parameter0: android.net.Uri;

        specialinvoke r0.<com.android.internal.widget.CachingIconView: void resetCache()>();

        $r2 = specialinvoke r0.<android.widget.ImageView: java.lang.Runnable setImageURIAsync(android.net.Uri)>(r1);

        return $r2;
    }

    public void setOnForceHiddenChangedListener(java.util.function.Consumer)
    {
        com.android.internal.widget.CachingIconView r0;
        java.util.function.Consumer r1;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r1 := @parameter0: java.util.function.Consumer;

        r0.<com.android.internal.widget.CachingIconView: java.util.function.Consumer mOnForceHiddenChangedListener> = r1;

        return;
    }

    public void setOnVisibilityChangedListener(java.util.function.Consumer)
    {
        com.android.internal.widget.CachingIconView r0;
        java.util.function.Consumer r1;

        r0 := @this: com.android.internal.widget.CachingIconView;

        r1 := @parameter0: java.util.function.Consumer;

        r0.<com.android.internal.widget.CachingIconView: java.util.function.Consumer mOnVisibilityChangedListener> = r1;

        return;
    }

    public void setOriginalIconColor(int)
    {
        com.android.internal.widget.CachingIconView r0;
        int i0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        i0 := @parameter0: int;

        r0.<com.android.internal.widget.CachingIconView: int mIconColor> = i0;

        return;
    }

    public void setVisibility(int)
    {
        com.android.internal.widget.CachingIconView r0;
        int i0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        i0 := @parameter0: int;

        r0.<com.android.internal.widget.CachingIconView: int mDesiredVisibility> = i0;

        specialinvoke r0.<com.android.internal.widget.CachingIconView: void updateVisibility()>();

        return;
    }

    public void setWillBeForceHidden(boolean)
    {
        com.android.internal.widget.CachingIconView r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.CachingIconView: boolean mWillBeForceHidden> = z0;

        return;
    }

    public boolean willBeForceHidden()
    {
        com.android.internal.widget.CachingIconView r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.CachingIconView;

        $z0 = r0.<com.android.internal.widget.CachingIconView: boolean mWillBeForceHidden>;

        return $z0;
    }
}
