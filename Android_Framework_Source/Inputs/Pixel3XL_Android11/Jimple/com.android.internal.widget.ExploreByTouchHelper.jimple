public abstract class com.android.internal.widget.ExploreByTouchHelper extends android.view.View$AccessibilityDelegate
{
    private static final java.lang.String DEFAULT_CLASS_NAME;
    public static final int HOST_ID;
    public static final int INVALID_ID;
    private static final android.graphics.Rect INVALID_PARENT_BOUNDS;
    private final android.content.Context mContext;
    private int mFocusedVirtualViewId;
    private int mHoveredVirtualViewId;
    private final android.view.accessibility.AccessibilityManager mManager;
    private com.android.internal.widget.ExploreByTouchHelper$ExploreByTouchNodeProvider mNodeProvider;
    private android.util.IntArray mTempArray;
    private int[] mTempGlobalRect;
    private android.graphics.Rect mTempParentRect;
    private android.graphics.Rect mTempScreenRect;
    private android.graphics.Rect mTempVisibleRect;
    private final android.view.View mView;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;
        android.graphics.Rect $r2;

        <com.android.internal.widget.ExploreByTouchHelper: int INVALID_ID> = -2147483648;

        <com.android.internal.widget.ExploreByTouchHelper: int HOST_ID> = -1;

        $r0 = class "Landroid/view/View;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getName()>();

        <com.android.internal.widget.ExploreByTouchHelper: java.lang.String DEFAULT_CLASS_NAME> = $r1;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>(int,int,int,int)>(2147483647, 2147483647, -2147483648, -2147483648);

        <com.android.internal.widget.ExploreByTouchHelper: android.graphics.Rect INVALID_PARENT_BOUNDS> = $r2;

        return;
    }

    public void <init>(android.view.View)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        java.lang.IllegalArgumentException $r1;
        java.lang.Object $r2;
        android.view.accessibility.AccessibilityManager $r3;
        android.view.View r4;
        android.content.Context r5;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        r4 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.View$AccessibilityDelegate: void <init>()>();

        r0.<com.android.internal.widget.ExploreByTouchHelper: int mFocusedVirtualViewId> = -2147483648;

        r0.<com.android.internal.widget.ExploreByTouchHelper: int mHoveredVirtualViewId> = -2147483648;

        if r4 == null goto label1;

        r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView> = r4;

        r5 = virtualinvoke r4.<android.view.View: android.content.Context getContext()>();

        r0.<com.android.internal.widget.ExploreByTouchHelper: android.content.Context mContext> = r5;

        $r2 = virtualinvoke r5.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility");

        $r3 = (android.view.accessibility.AccessibilityManager) $r2;

        r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityManager mManager> = $r3;

        return;

     label1:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("View may not be null");

        throw $r1;
    }

    static android.view.accessibility.AccessibilityNodeInfo access$100(com.android.internal.widget.ExploreByTouchHelper, int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0;
        android.view.accessibility.AccessibilityNodeInfo $r1;

        r0 := @parameter0: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityNodeInfo createNode(int)>(i0);

        return $r1;
    }

    static boolean access$200(com.android.internal.widget.ExploreByTouchHelper, int, int, android.os.Bundle)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, i1;
        android.os.Bundle r1;
        boolean $z0;

        r0 := @parameter0: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r1 := @parameter3: android.os.Bundle;

        $z0 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean performAction(int,int,android.os.Bundle)>(i0, i1, r1);

        return $z0;
    }

    private boolean clearAccessibilityFocus(int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0;
        boolean $z0;
        android.view.View $r1;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean isAccessibilityFocused(int)>(i0);

        if $z0 == 0 goto label1;

        r0.<com.android.internal.widget.ExploreByTouchHelper: int mFocusedVirtualViewId> = -2147483648;

        $r1 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        virtualinvoke $r1.<android.view.View: void invalidate()>();

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>(i0, 65536);

        return 1;

     label1:
        return 0;
    }

    private android.view.accessibility.AccessibilityEvent createEvent(int, int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, i1;
        android.view.accessibility.AccessibilityEvent $r1, $r2;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == -1 goto label1;

        $r2 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForChild(int,int)>(i0, i1);

        return $r2;

     label1:
        $r1 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEventForHost(int)>(i1);

        return $r1;
    }

    private android.view.accessibility.AccessibilityEvent createEventForChild(int, int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, i1;
        android.view.accessibility.AccessibilityEvent r1;
        java.lang.String $r2, $r6;
        java.util.List $r3;
        boolean $z0;
        android.view.View $r4, $r7;
        android.content.Context $r5;
        java.lang.CharSequence $r8;
        java.lang.RuntimeException $r9;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(i1);

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setEnabled(boolean)>(1);

        $r2 = <com.android.internal.widget.ExploreByTouchHelper: java.lang.String DEFAULT_CLASS_NAME>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setClassName(java.lang.CharSequence)>($r2);

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: void onPopulateEventForVirtualView(int,android.view.accessibility.AccessibilityEvent)>(i0, r1);

        $r3 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: java.util.List getText()>();

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        $r8 = virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getContentDescription()>();

        if $r8 == null goto label1;

        goto label2;

     label1:
        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Callbacks must add text or a content description in populateEventForVirtualViewId()");

        throw $r9;

     label2:
        $r4 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        $r5 = virtualinvoke $r4.<android.view.View: android.content.Context getContext()>();

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>($r6);

        $r7 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityEvent: void setSource(android.view.View,int)>($r7, i0);

        return r1;
    }

    private android.view.accessibility.AccessibilityEvent createEventForHost(int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0;
        android.view.accessibility.AccessibilityEvent r1;
        android.view.View $r2;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        r1 = staticinvoke <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>(i0);

        $r2 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        virtualinvoke $r2.<android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>(r1);

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: void onPopulateEventForHost(android.view.accessibility.AccessibilityEvent)>(r1);

        return r1;
    }

    private android.view.accessibility.AccessibilityNodeInfo createNode(int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0;
        android.view.accessibility.AccessibilityNodeInfo $r1, $r2;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        if i0 == -1 goto label1;

        $r2 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityNodeInfo createNodeForChild(int)>(i0);

        return $r2;

     label1:
        $r1 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityNodeInfo createNodeForHost()>();

        return $r1;
    }

    private android.view.accessibility.AccessibilityNodeInfo createNodeForChild(int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        android.graphics.Rect r1, r3, $r6, $r8;
        int[] r2;
        android.view.accessibility.AccessibilityNodeInfo r4;
        java.lang.String $r5, $r14;
        java.lang.CharSequence $r7, $r20;
        boolean $z0, $z1;
        java.lang.RuntimeException $r9, $r10, $r11, $r21;
        int $i0, $i1, $i2, i3, i4, i5, i6;
        android.view.View $r12, $r15, $r16, $r18;
        android.content.Context $r13;
        android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction $r17, $r19;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i3 := @parameter0: int;

        specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: void ensureTempRects()>();

        r1 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.graphics.Rect mTempParentRect>;

        r2 = r0.<com.android.internal.widget.ExploreByTouchHelper: int[] mTempGlobalRect>;

        r3 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.graphics.Rect mTempScreenRect>;

        r4 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>();

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>(1);

        $r5 = <com.android.internal.widget.ExploreByTouchHelper: java.lang.String DEFAULT_CLASS_NAME>;

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>($r5);

        $r6 = <com.android.internal.widget.ExploreByTouchHelper: android.graphics.Rect INVALID_PARENT_BOUNDS>;

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>($r6);

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: void onPopulateNodeForVirtualView(int,android.view.accessibility.AccessibilityNodeInfo)>(i3, r4);

        $r7 = virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>();

        if $r7 != null goto label2;

        $r20 = virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>();

        if $r20 == null goto label1;

        goto label2;

     label1:
        $r21 = new java.lang.RuntimeException;

        specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>("Callbacks must add text or a content description in populateNodeForVirtualViewId()");

        throw $r21;

     label2:
        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>(r1);

        $r8 = <com.android.internal.widget.ExploreByTouchHelper: android.graphics.Rect INVALID_PARENT_BOUNDS>;

        $z0 = virtualinvoke r1.<android.graphics.Rect: boolean equals(java.lang.Object)>($r8);

        if $z0 != 0 goto label8;

        i4 = virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: int getActions()>();

        $i0 = i4 & 64;

        if $i0 != 0 goto label7;

        $i1 = i4 & 128;

        if $i1 != 0 goto label6;

        $r12 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        $r13 = virtualinvoke $r12.<android.view.View: android.content.Context getContext()>();

        $r14 = virtualinvoke $r13.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>($r14);

        $r15 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View,int)>($r15, i3);

        $r16 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>($r16);

        $i2 = r0.<com.android.internal.widget.ExploreByTouchHelper: int mFocusedVirtualViewId>;

        if $i2 != i3 goto label3;

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>(1);

        $r19 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_CLEAR_ACCESSIBILITY_FOCUS>;

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r19);

        goto label4;

     label3:
        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setAccessibilityFocused(boolean)>(0);

        $r17 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_ACCESSIBILITY_FOCUS>;

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r17);

     label4:
        $z1 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean intersectVisibleToUser(android.graphics.Rect)>(r1);

        if $z1 == 0 goto label5;

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setVisibleToUser(boolean)>(1);

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>(r1);

     label5:
        $r18 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        virtualinvoke $r18.<android.view.View: void getLocationOnScreen(int[])>(r2);

        i5 = r2[0];

        i6 = r2[1];

        virtualinvoke r3.<android.graphics.Rect: void set(android.graphics.Rect)>(r1);

        virtualinvoke r3.<android.graphics.Rect: void offset(int,int)>(i5, i6);

        virtualinvoke r4.<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>(r3);

        return r4;

     label6:
        $r11 = new java.lang.RuntimeException;

        specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.String)>("Callbacks must not add ACTION_CLEAR_ACCESSIBILITY_FOCUS in populateNodeForVirtualViewId()");

        throw $r11;

     label7:
        $r10 = new java.lang.RuntimeException;

        specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Callbacks must not add ACTION_ACCESSIBILITY_FOCUS in populateNodeForVirtualViewId()");

        throw $r10;

     label8:
        $r9 = new java.lang.RuntimeException;

        specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Callbacks must set parent bounds in populateNodeForVirtualViewId()");

        throw $r9;
    }

    private android.view.accessibility.AccessibilityNodeInfo createNodeForHost()
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        int i0, $i1, $i2, i3, i4;
        android.view.View $r2, $r3, $r4;
        java.lang.RuntimeException $r5;
        android.util.IntArray $r6, r7, r8;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        $r2 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        r1 = staticinvoke <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>($r2);

        $r3 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        virtualinvoke $r3.<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        i3 = virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>();

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: void onPopulateNodeForHost(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        r7 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.util.IntArray mTempArray>;

        if r7 != null goto label1;

        $r6 = new android.util.IntArray;

        specialinvoke $r6.<android.util.IntArray: void <init>()>();

        r0.<com.android.internal.widget.ExploreByTouchHelper: android.util.IntArray mTempArray> = $r6;

        goto label2;

     label1:
        virtualinvoke r7.<android.util.IntArray: void clear()>();

     label2:
        r8 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.util.IntArray mTempArray>;

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: void getVisibleVirtualViews(android.util.IntArray)>(r8);

        if i3 <= 0 goto label4;

        $i2 = virtualinvoke r8.<android.util.IntArray: int size()>();

        if $i2 > 0 goto label3;

        goto label4;

     label3:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>("Views cannot have both real and virtual children");

        throw $r5;

     label4:
        i0 = virtualinvoke r8.<android.util.IntArray: int size()>();

        i4 = 0;

     label5:
        if i4 >= i0 goto label6;

        $r4 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        $i1 = virtualinvoke r8.<android.util.IntArray: int get(int)>(i4);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View,int)>($r4, $i1);

        i4 = i4 + 1;

        goto label5;

     label6:
        return r1;
    }

    private void ensureTempRects()
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int[] $r1;
        android.graphics.Rect $r2, $r3;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        $r1 = newarray (int)[2];

        r0.<com.android.internal.widget.ExploreByTouchHelper: int[] mTempGlobalRect> = $r1;

        $r2 = new android.graphics.Rect;

        specialinvoke $r2.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.ExploreByTouchHelper: android.graphics.Rect mTempParentRect> = $r2;

        $r3 = new android.graphics.Rect;

        specialinvoke $r3.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.ExploreByTouchHelper: android.graphics.Rect mTempScreenRect> = $r3;

        return;
    }

    private boolean intersectVisibleToUser(android.graphics.Rect)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        android.graphics.Rect r1, $r4, $r6, r9;
        boolean $z0, $z1, $z2, $z3;
        android.view.View $r2, $r3, $r5, r8;
        int $i0, $i2;
        float $f0;
        byte $b1;
        android.view.ViewParent r7;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        r1 := @parameter0: android.graphics.Rect;

        if r1 == null goto label10;

        $z0 = virtualinvoke r1.<android.graphics.Rect: boolean isEmpty()>();

        if $z0 == 0 goto label01;

        goto label10;

     label01:
        $r2 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        $i0 = virtualinvoke $r2.<android.view.View: int getWindowVisibility()>();

        if $i0 == 0 goto label02;

        return 0;

     label02:
        $r3 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        r7 = virtualinvoke $r3.<android.view.View: android.view.ViewParent getParent()>();

     label03:
        $z1 = r7 instanceof android.view.View;

        if $z1 == 0 goto label06;

        r8 = (android.view.View) r7;

        $f0 = virtualinvoke r8.<android.view.View: float getAlpha()>();

        $b1 = $f0 cmpg 0.0F;

        if $b1 <= 0 goto label05;

        $i2 = virtualinvoke r8.<android.view.View: int getVisibility()>();

        if $i2 == 0 goto label04;

        goto label05;

     label04:
        r7 = virtualinvoke r8.<android.view.View: android.view.ViewParent getParent()>();

        goto label03;

     label05:
        return 0;

     label06:
        if r7 != null goto label07;

        return 0;

     label07:
        $r4 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.graphics.Rect mTempVisibleRect>;

        if $r4 != null goto label08;

        $r6 = new android.graphics.Rect;

        specialinvoke $r6.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.ExploreByTouchHelper: android.graphics.Rect mTempVisibleRect> = $r6;

     label08:
        r9 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.graphics.Rect mTempVisibleRect>;

        $r5 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        $z2 = virtualinvoke $r5.<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>(r9);

        if $z2 != 0 goto label09;

        return 0;

     label09:
        $z3 = virtualinvoke r1.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r9);

        return $z3;

     label10:
        return 0;
    }

    private boolean isAccessibilityFocused(int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.widget.ExploreByTouchHelper: int mFocusedVirtualViewId>;

        if $i1 != i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean manageFocusForChild(int, int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, i1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 == 64 goto label2;

        if i1 == 128 goto label1;

        return 0;

     label1:
        $z1 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean clearAccessibilityFocus(int)>(i0);

        return $z1;

     label2:
        $z0 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean requestAccessibilityFocus(int)>(i0);

        return $z0;
    }

    private boolean performAction(int, int, android.os.Bundle)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, i1;
        android.os.Bundle r1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.os.Bundle;

        if i0 == -1 goto label1;

        $z1 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean performActionForChild(int,int,android.os.Bundle)>(i0, i1, r1);

        return $z1;

     label1:
        $z0 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean performActionForHost(int,android.os.Bundle)>(i1, r1);

        return $z0;
    }

    private boolean performActionForChild(int, int, android.os.Bundle)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, i1;
        android.os.Bundle r1;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: android.os.Bundle;

        if i1 == 64 goto label1;

        if i1 == 128 goto label1;

        $z1 = virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean onPerformActionForVirtualView(int,int,android.os.Bundle)>(i0, i1, r1);

        return $z1;

     label1:
        $z0 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean manageFocusForChild(int,int)>(i0, i1);

        return $z0;
    }

    private boolean performActionForHost(int, android.os.Bundle)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0;
        android.os.Bundle r1;
        android.view.View $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $r2 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        $z0 = virtualinvoke $r2.<android.view.View: boolean performAccessibilityAction(int,android.os.Bundle)>(i0, r1);

        return $z0;
    }

    private boolean requestAccessibilityFocus(int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, i1;
        android.view.accessibility.AccessibilityManager r1, $r4;
        android.content.Context $r2;
        java.lang.Object $r3;
        boolean $z0, $z1, $z2;
        android.view.View $r5;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility");

        r1 = (android.view.accessibility.AccessibilityManager) $r3;

        $r4 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityManager mManager>;

        $z0 = virtualinvoke $r4.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r1.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z1 != 0 goto label1;

        goto label4;

     label1:
        $z2 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean isAccessibilityFocused(int)>(i0);

        if $z2 != 0 goto label3;

        i1 = r0.<com.android.internal.widget.ExploreByTouchHelper: int mFocusedVirtualViewId>;

        if i1 == -2147483648 goto label2;

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>(i1, 65536);

     label2:
        r0.<com.android.internal.widget.ExploreByTouchHelper: int mFocusedVirtualViewId> = i0;

        $r5 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        virtualinvoke $r5.<android.view.View: void invalidate()>();

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>(i0, 32768);

        return 1;

     label3:
        return 0;

     label4:
        return 0;
    }

    private void updateHoveredVirtualView(int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, i1, $i2;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        $i2 = r0.<com.android.internal.widget.ExploreByTouchHelper: int mHoveredVirtualViewId>;

        if $i2 != i0 goto label1;

        return;

     label1:
        i1 = r0.<com.android.internal.widget.ExploreByTouchHelper: int mHoveredVirtualViewId>;

        r0.<com.android.internal.widget.ExploreByTouchHelper: int mHoveredVirtualViewId> = i0;

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>(i0, 128);

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: boolean sendEventForVirtualView(int,int)>(i1, 256);

        return;
    }

    public boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        android.view.MotionEvent r1;
        boolean z0, $z1, z2;
        android.view.accessibility.AccessibilityManager $r2, $r3;
        float $f0, $f1;
        int $i0, i1, i2;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityManager mManager>;

        z0 = virtualinvoke $r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        z2 = 0;

        if z0 == 0 goto label6;

        $r3 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityManager mManager>;

        $z1 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z1 != 0 goto label1;

        goto label6;

     label1:
        i1 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if i1 == 7 goto label4;

        if i1 == 9 goto label4;

        if i1 == 10 goto label2;

        return 0;

     label2:
        $i0 = r0.<com.android.internal.widget.ExploreByTouchHelper: int mHoveredVirtualViewId>;

        if $i0 == -2147483648 goto label3;

        specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: void updateHoveredVirtualView(int)>(-2147483648);

        return 1;

     label3:
        return 0;

     label4:
        $f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        i2 = virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: int getVirtualViewAt(float,float)>($f0, $f1);

        specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: void updateHoveredVirtualView(int)>(i2);

        if i2 == -2147483648 goto label5;

        z2 = 1;

     label5:
        return z2;

     label6:
        return 0;
    }

    public android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        android.view.View r1;
        com.android.internal.widget.ExploreByTouchHelper$ExploreByTouchNodeProvider $r2, $r3, $r4;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        r1 := @parameter0: android.view.View;

        $r2 = r0.<com.android.internal.widget.ExploreByTouchHelper: com.android.internal.widget.ExploreByTouchHelper$ExploreByTouchNodeProvider mNodeProvider>;

        if $r2 != null goto label1;

        $r4 = new com.android.internal.widget.ExploreByTouchHelper$ExploreByTouchNodeProvider;

        specialinvoke $r4.<com.android.internal.widget.ExploreByTouchHelper$ExploreByTouchNodeProvider: void <init>(com.android.internal.widget.ExploreByTouchHelper,com.android.internal.widget.ExploreByTouchHelper$1)>(r0, null);

        r0.<com.android.internal.widget.ExploreByTouchHelper: com.android.internal.widget.ExploreByTouchHelper$ExploreByTouchNodeProvider mNodeProvider> = $r4;

     label1:
        $r3 = r0.<com.android.internal.widget.ExploreByTouchHelper: com.android.internal.widget.ExploreByTouchHelper$ExploreByTouchNodeProvider mNodeProvider>;

        return $r3;
    }

    public int getFocusedVirtualView()
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int $i0;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        $i0 = r0.<com.android.internal.widget.ExploreByTouchHelper: int mFocusedVirtualViewId>;

        return $i0;
    }

    protected abstract int getVirtualViewAt(float, float);

    protected abstract void getVisibleVirtualViews(android.util.IntArray);

    public void invalidateRoot()
    {
        com.android.internal.widget.ExploreByTouchHelper r0;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: void invalidateVirtualView(int,int)>(-1, 1);

        return;
    }

    public void invalidateVirtualView(int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: void invalidateVirtualView(int,int)>(i0, 0);

        return;
    }

    public void invalidateVirtualView(int, int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, i1;
        android.view.ViewParent r1;
        android.view.accessibility.AccessibilityEvent r2;
        android.view.accessibility.AccessibilityManager $r3;
        boolean $z0;
        android.view.View $r4, $r5;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == -2147483648 goto label1;

        $r3 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityManager mManager>;

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        r1 = virtualinvoke $r4.<android.view.View: android.view.ViewParent getParent()>();

        if r1 == null goto label1;

        r2 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>(i0, 2048);

        virtualinvoke r2.<android.view.accessibility.AccessibilityEvent: void setContentChangeTypes(int)>(i1);

        $r5 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        interfaceinvoke r1.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>($r5, r2);

     label1:
        return;
    }

    protected abstract boolean onPerformActionForVirtualView(int, int, android.os.Bundle);

    protected void onPopulateEventForHost(android.view.accessibility.AccessibilityEvent)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        android.view.accessibility.AccessibilityEvent r1;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        r1 := @parameter0: android.view.accessibility.AccessibilityEvent;

        return;
    }

    protected abstract void onPopulateEventForVirtualView(int, android.view.accessibility.AccessibilityEvent);

    protected void onPopulateNodeForHost(android.view.accessibility.AccessibilityNodeInfo)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        android.view.accessibility.AccessibilityNodeInfo r1;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        return;
    }

    protected abstract void onPopulateNodeForVirtualView(int, android.view.accessibility.AccessibilityNodeInfo);

    public boolean sendEventForVirtualView(int, int)
    {
        com.android.internal.widget.ExploreByTouchHelper r0;
        int i0, i1;
        android.view.ViewParent r1;
        android.view.accessibility.AccessibilityEvent r2;
        android.view.accessibility.AccessibilityManager $r3;
        boolean $z0, $z1;
        android.view.View $r4, $r5;

        r0 := @this: com.android.internal.widget.ExploreByTouchHelper;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == -2147483648 goto label3;

        $r3 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityManager mManager>;

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>();

        if $z0 != 0 goto label1;

        goto label3;

     label1:
        $r4 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        r1 = virtualinvoke $r4.<android.view.View: android.view.ViewParent getParent()>();

        if r1 != null goto label2;

        return 0;

     label2:
        r2 = specialinvoke r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.accessibility.AccessibilityEvent createEvent(int,int)>(i0, i1);

        $r5 = r0.<com.android.internal.widget.ExploreByTouchHelper: android.view.View mView>;

        $z1 = interfaceinvoke r1.<android.view.ViewParent: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>($r5, r2);

        return $z1;

     label3:
        return 0;
    }
}
