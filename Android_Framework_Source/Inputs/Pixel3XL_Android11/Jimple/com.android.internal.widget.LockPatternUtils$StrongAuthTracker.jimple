public class com.android.internal.widget.LockPatternUtils$StrongAuthTracker extends java.lang.Object
{
    private static final int ALLOWING_BIOMETRIC;
    public static final int SOME_AUTH_REQUIRED_AFTER_USER_REQUEST;
    public static final int STRONG_AUTH_NOT_REQUIRED;
    public static final int STRONG_AUTH_REQUIRED_AFTER_BOOT;
    public static final int STRONG_AUTH_REQUIRED_AFTER_DPM_LOCK_NOW;
    public static final int STRONG_AUTH_REQUIRED_AFTER_LOCKOUT;
    public static final int STRONG_AUTH_REQUIRED_AFTER_NON_STRONG_BIOMETRICS_TIMEOUT;
    public static final int STRONG_AUTH_REQUIRED_AFTER_TIMEOUT;
    public static final int STRONG_AUTH_REQUIRED_AFTER_USER_LOCKDOWN;
    public static final int STRONG_AUTH_REQUIRED_FOR_UNATTENDED_UPDATE;
    private final boolean mDefaultIsNonStrongBiometricAllowed;
    private final int mDefaultStrongAuthFlags;
    private final com.android.internal.widget.LockPatternUtils$StrongAuthTracker$H mHandler;
    private final android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser;
    private final android.util.SparseIntArray mStrongAuthRequiredForUser;
    private final android.app.trust.IStrongAuthTracker$Stub mStub;

    public void <init>(android.content.Context)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        android.content.Context r1;
        android.os.Looper $r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        r1 := @parameter0: android.content.Context;

        $r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: void <init>(android.content.Context,android.os.Looper)>(r1, $r2);

        return;
    }

    public void <init>(android.content.Context, android.os.Looper)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        android.content.Context r1;
        android.os.Looper r2;
        android.util.SparseIntArray $r3;
        android.util.SparseBooleanArray $r4;
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker$1 $r5;
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker$H $r6;
        int $i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new android.util.SparseIntArray;

        specialinvoke $r3.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.util.SparseIntArray mStrongAuthRequiredForUser> = $r3;

        $r4 = new android.util.SparseBooleanArray;

        specialinvoke $r4.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser> = $r4;

        r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: boolean mDefaultIsNonStrongBiometricAllowed> = 1;

        $r5 = new com.android.internal.widget.LockPatternUtils$StrongAuthTracker$1;

        specialinvoke $r5.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker$1: void <init>(com.android.internal.widget.LockPatternUtils$StrongAuthTracker)>(r0);

        r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.app.trust.IStrongAuthTracker$Stub mStub> = $r5;

        $r6 = new com.android.internal.widget.LockPatternUtils$StrongAuthTracker$H;

        specialinvoke $r6.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker$H: void <init>(com.android.internal.widget.LockPatternUtils$StrongAuthTracker,android.os.Looper)>(r0, r2);

        r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: com.android.internal.widget.LockPatternUtils$StrongAuthTracker$H mHandler> = $r6;

        $i0 = staticinvoke <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int getDefaultFlags(android.content.Context)>(r1);

        r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int mDefaultStrongAuthFlags> = $i0;

        return;
    }

    static com.android.internal.widget.LockPatternUtils$StrongAuthTracker$H access$000(com.android.internal.widget.LockPatternUtils$StrongAuthTracker)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker$H $r1;

        r0 := @parameter0: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: com.android.internal.widget.LockPatternUtils$StrongAuthTracker$H mHandler>;

        return $r1;
    }

    public static int getDefaultFlags(android.content.Context)
    {
        android.content.Context r0;
        android.content.res.Resources $r1;
        boolean $z0;
        int i0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(17891539);

        i0 = (int) $z0;

        return i0;
    }

    public int getStrongAuthForUser(int)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        int i0, $i1, $i2;
        android.util.SparseIntArray $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.util.SparseIntArray mStrongAuthRequiredForUser>;

        $i1 = r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int mDefaultStrongAuthFlags>;

        $i2 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, $i1);

        return $i2;
    }

    public android.app.trust.IStrongAuthTracker$Stub getStub()
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        android.app.trust.IStrongAuthTracker$Stub $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.app.trust.IStrongAuthTracker$Stub mStub>;

        return $r1;
    }

    protected void handleIsNonStrongBiometricAllowedChanged(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        boolean z0, $z1;
        int i0;
        android.util.SparseBooleanArray $r1, $r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $z1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: boolean isNonStrongBiometricAllowedAfterIdleTimeout(int)>(i0);

        if z0 == $z1 goto label3;

        if z0 != 1 goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        virtualinvoke $r2.<android.util.SparseBooleanArray: void delete(int)>(i0);

        goto label2;

     label1:
        $r1 = r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        virtualinvoke $r1.<android.util.SparseBooleanArray: void put(int,boolean)>(i0, z0);

     label2:
        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: void onIsNonStrongBiometricAllowedChanged(int)>(i0);

     label3:
        return;
    }

    protected void handleStrongAuthRequiredChanged(int, int)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        int i0, i1, $i2, $i3;
        android.util.SparseIntArray $r1, $r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int getStrongAuthForUser(int)>(i1);

        if i0 == $i2 goto label3;

        $i3 = r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int mDefaultStrongAuthFlags>;

        if i0 != $i3 goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.util.SparseIntArray mStrongAuthRequiredForUser>;

        virtualinvoke $r2.<android.util.SparseIntArray: void delete(int)>(i1);

        goto label2;

     label1:
        $r1 = r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.util.SparseIntArray mStrongAuthRequiredForUser>;

        virtualinvoke $r1.<android.util.SparseIntArray: void put(int,int)>(i1, i0);

     label2:
        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: void onStrongAuthRequiredChanged(int)>(i1);

     label3:
        return;
    }

    public boolean isBiometricAllowedForUser(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        boolean z0, $z1, z2, z3;
        int i0, $i1, $i2;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int getStrongAuthForUser(int)>(i0);

        $i2 = $i1 & -5;

        if $i2 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        z3 = z2;

        if z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: boolean isNonStrongBiometricAllowedAfterIdleTimeout(int)>(i0);

        z3 = z2 & $z1;

     label3:
        return z3;
    }

    public boolean isNonStrongBiometricAllowedAfterIdleTimeout(int)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        int i0;
        android.util.SparseBooleanArray $r1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.util.SparseBooleanArray mIsNonStrongBiometricAllowedForUser>;

        $z0 = virtualinvoke $r1.<android.util.SparseBooleanArray: boolean get(int,boolean)>(i0, 1);

        return $z0;
    }

    public boolean isTrustAllowedForUser(int)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int getStrongAuthForUser(int)>(i0);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void onIsNonStrongBiometricAllowedChanged(int)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        i0 := @parameter0: int;

        return;
    }

    public void onStrongAuthRequiredChanged(int)
    {
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

        i0 := @parameter0: int;

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int STRONG_AUTH_REQUIRED_FOR_UNATTENDED_UPDATE> = 64;

        <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int STRONG_AUTH_REQUIRED_AFTER_USER_LOCKDOWN> = 32;

        <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int STRONG_AUTH_REQUIRED_AFTER_TIMEOUT> = 16;

        <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int STRONG_AUTH_REQUIRED_AFTER_NON_STRONG_BIOMETRICS_TIMEOUT> = 128;

        <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int STRONG_AUTH_REQUIRED_AFTER_LOCKOUT> = 8;

        <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int STRONG_AUTH_REQUIRED_AFTER_DPM_LOCK_NOW> = 2;

        <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int STRONG_AUTH_REQUIRED_AFTER_BOOT> = 1;

        <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int STRONG_AUTH_NOT_REQUIRED> = 0;

        <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int SOME_AUTH_REQUIRED_AFTER_USER_REQUEST> = 4;

        <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int ALLOWING_BIOMETRIC> = 4;

        return;
    }
}
