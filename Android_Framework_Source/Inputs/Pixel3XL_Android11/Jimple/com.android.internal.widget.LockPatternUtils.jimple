public class com.android.internal.widget.LockPatternUtils extends java.lang.Object
{
    public static final java.lang.String BIOMETRIC_WEAK_EVER_CHOSEN_KEY;
    public static final int CREDENTIAL_TYPE_NONE;
    public static final int CREDENTIAL_TYPE_PASSWORD;
    public static final int CREDENTIAL_TYPE_PASSWORD_OR_PIN;
    public static final int CREDENTIAL_TYPE_PATTERN;
    public static final int CREDENTIAL_TYPE_PIN;
    public static final java.lang.String DISABLE_LOCKSCREEN_KEY;
    private static final java.lang.String ENABLED_TRUST_AGENTS;
    public static final int FAILED_ATTEMPTS_BEFORE_WIPE_GRACE;
    public static final long FAILED_ATTEMPT_COUNTDOWN_INTERVAL_MS;
    private static final boolean FRP_CREDENTIAL_ENABLED;
    private static final java.lang.String HISTORY_DELIMITER;
    private static final java.lang.String IS_TRUST_USUALLY_MANAGED;
    public static final java.lang.String LEGACY_LOCK_PATTERN_ENABLED;
    public static final java.lang.String LOCKOUT_PERMANENT_KEY;
    public static final java.lang.String LOCKSCREEN_BIOMETRIC_WEAK_FALLBACK;
    public static final java.lang.String LOCKSCREEN_OPTIONS;
    public static final java.lang.String LOCKSCREEN_POWER_BUTTON_INSTANTLY_LOCKS;
    public static final java.lang.String LOCKSCREEN_WIDGETS_ENABLED;
    public static final java.lang.String LOCK_PASSWORD_SALT_KEY;
    private static final java.lang.String LOCK_SCREEN_DEVICE_OWNER_INFO;
    private static final java.lang.String LOCK_SCREEN_OWNER_INFO;
    private static final java.lang.String LOCK_SCREEN_OWNER_INFO_ENABLED;
    public static final int MIN_LOCK_PASSWORD_SIZE;
    public static final int MIN_LOCK_PATTERN_SIZE;
    public static final int MIN_PATTERN_REGISTER_FAIL;
    public static final java.lang.String PASSWORD_HISTORY_KEY;
    public static final java.lang.String PASSWORD_TYPE_ALTERNATE_KEY;
    public static final java.lang.String PASSWORD_TYPE_KEY;
    public static final java.lang.String PATTERN_EVER_CHOSEN_KEY;
    public static final java.lang.String PROFILE_KEY_NAME_DECRYPT;
    public static final java.lang.String PROFILE_KEY_NAME_ENCRYPT;
    public static final int SYNTHETIC_PASSWORD_ENABLED_BY_DEFAULT;
    public static final java.lang.String SYNTHETIC_PASSWORD_ENABLED_KEY;
    public static final java.lang.String SYNTHETIC_PASSWORD_HANDLE_KEY;
    public static final java.lang.String SYNTHETIC_PASSWORD_KEY_PREFIX;
    private static final java.lang.String TAG;
    public static final int USER_FRP;
    private final android.content.ContentResolver mContentResolver;
    private final android.content.Context mContext;
    private android.app.admin.DevicePolicyManager mDevicePolicyManager;
    private final android.os.Handler mHandler;
    private java.lang.Boolean mHasSecureLockScreen;
    private com.android.internal.widget.ILockSettings mLockSettingsService;
    private final android.util.SparseLongArray mLockoutDeadlines;
    private android.os.UserManager mUserManager;

    public void <init>(android.content.Context)
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.util.SparseLongArray $r1;
        android.content.ContentResolver $r2;
        android.os.Handler $r3, r6;
        android.content.Context r4;
        android.os.Looper r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r4 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new android.util.SparseLongArray;

        specialinvoke $r1.<android.util.SparseLongArray: void <init>()>();

        r0.<com.android.internal.widget.LockPatternUtils: android.util.SparseLongArray mLockoutDeadlines> = $r1;

        r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext> = r4;

        $r2 = virtualinvoke r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver> = $r2;

        r5 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>();

        if r5 == null goto label1;

        $r3 = new android.os.Handler;

        specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>(r5);

        r6 = $r3;

        goto label2;

     label1:
        r6 = null;

     label2:
        r0.<com.android.internal.widget.LockPatternUtils: android.os.Handler mHandler> = r6;

        return;
    }

    public static java.util.List byteArrayToPattern(byte[])
    {
        byte[] r0;
        java.util.ArrayList r1;
        byte b0, $b2;
        int $i1, $i3, $i4, $i5, i6;
        com.android.internal.widget.LockPatternView$Cell $r2;

        r0 := @parameter0: byte[];

        if r0 != null goto label1;

        return null;

     label1:
        r1 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        i6 = 0;

     label2:
        $i1 = lengthof r0;

        if i6 >= $i1 goto label3;

        $b2 = r0[i6];

        $i3 = $b2 - 49;

        b0 = (byte) $i3;

        $i5 = b0 / 3;

        $i4 = b0 % 3;

        $r2 = staticinvoke <com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>($i5, $i4);

        interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2);

        i6 = i6 + 1;

        goto label2;

     label3:
        return r1;
    }

    public static int credentialTypeToPasswordQuality(int)
    {
        int i0;
        java.lang.StringBuilder $r1;
        java.lang.IllegalStateException $r4;
        java.lang.String $r5;

        i0 := @parameter0: int;

        if i0 == -1 goto label4;

        if i0 == 1 goto label3;

        if i0 == 3 goto label2;

        if i0 != 4 goto label1;

        return 262144;

     label1:
        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown type: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = new java.lang.IllegalStateException;

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5);

        throw $r4;

     label2:
        return 131072;

     label3:
        return 65536;

     label4:
        return 0;
    }

    public static boolean frpCredentialEnabled(android.content.Context)
    {
        android.content.Context r0;
        android.content.res.Resources $r1;
        boolean $z0;

        r0 := @parameter0: android.content.Context;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r1.<android.content.res.Resources: boolean getBoolean(int)>(17891439);

        return $z0;
    }

    private boolean getBoolean(java.lang.String, boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0, z1;
        int i0;
        com.android.internal.widget.ILockSettings $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        z1 = interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: boolean getBoolean(java.lang.String,boolean,int)>(r3, z0, i0);

     label2:
        return z1;

     label3:
        $r2 := @caughtexception;

        return z0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private com.android.internal.widget.LockSettingsInternal getLockSettingsInternal()
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.LockSettingsInternal r1;
        java.lang.Object $r2;
        java.lang.SecurityException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/internal/widget/LockSettingsInternal;");

        r1 = (com.android.internal.widget.LockSettingsInternal) $r2;

        if r1 == null goto label1;

        return r1;

     label1:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Only available to system server itself");

        throw $r3;
    }

    private long getLong(java.lang.String, long, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0, l2;
        int i1;
        com.android.internal.widget.ILockSettings $r1;
        android.os.RemoteException $r2;
        java.lang.String r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r3 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        l2 = interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: long getLong(java.lang.String,long,int)>(r3, l0, i1);

     label2:
        return l2;

     label3:
        $r2 := @caughtexception;

        return l0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private int getRequestedPasswordHistoryLength(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordHistoryLength(android.content.ComponentName,int)>(null, i0);

        return $i1;
    }

    private java.lang.String getSalt(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        long l1, l4;
        byte $b2;
        java.lang.String $r1, $r5;
        java.security.SecureRandom $r2;
        java.lang.Throwable $r6;
        java.lang.IllegalStateException $r7;
        java.lang.StringBuilder r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        l1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long,int)>("lockscreen.password_salt", 0L, i0);

        l4 = l1;

        $b2 = l1 cmp 0L;

        if $b2 != 0 goto label4;

     label1:
        $r2 = staticinvoke <java.security.SecureRandom: java.security.SecureRandom getInstance(java.lang.String)>("SHA1PRNG");

        l4 = virtualinvoke $r2.<java.security.SecureRandom: long nextLong()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>("lockscreen.password_salt", l4, i0);

        r8 = new java.lang.StringBuilder;

        specialinvoke r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Initialized lock password salt for user: ");

        virtualinvoke r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>("LockPatternUtils", $r5);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.IllegalStateException;

        specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Couldn\'t get SecureRandom number", $r6);

        throw $r7;

     label4:
        $r1 = staticinvoke <java.lang.Long: java.lang.String toHexString(long)>(l4);

        return $r1;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    private java.lang.String getString(java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        com.android.internal.widget.ILockSettings $r1;
        android.os.RemoteException $r2;
        java.lang.String r3, r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        r4 = interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: java.lang.String getString(java.lang.String,java.lang.String,int)>(r3, null, i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private android.app.trust.TrustManager getTrustManager()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.trust.TrustManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        java.lang.IllegalStateException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("trust");

        r1 = (android.app.trust.TrustManager) $r3;

        if r1 != null goto label1;

        $r4 = new java.lang.IllegalStateException;

        specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Stack trace:");

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Can\'t get TrustManagerService: is it running?", $r4);

     label1:
        return r1;
    }

    private android.os.UserManager getUserManager()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.os.UserManager $r1, $r2, $r4;
        android.content.Context $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.os.UserManager mUserManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r4 = staticinvoke <android.os.UserManager: android.os.UserManager get(android.content.Context)>($r3);

        r0.<com.android.internal.widget.LockPatternUtils: android.os.UserManager mUserManager> = $r4;

     label1:
        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.os.UserManager mUserManager>;

        return $r2;
    }

    private boolean hasSeparateChallenge(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean z0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        z0 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: boolean getSeparateProfileChallengeEnabled(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Couldn\'t get separate profile challenge enabled");

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public static boolean isDeviceEncryptionEnabled()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isEncrypted()>();

        return $z0;
    }

    private boolean isDoNotAskCredentialsOnBootSet()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager $r1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $z0 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: boolean getDoNotAskCredentialsOnBoot()>();

        return $z0;
    }

    public static boolean isFileEncryptionEnabled()
    {
        boolean $z0;

        $z0 = staticinvoke <android.os.storage.StorageManager: boolean isFileEncryptedNativeOrEmulated()>();

        return $z0;
    }

    private boolean isManagedProfile(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.content.pm.UserInfo r1;
        android.os.UserManager $r2;
        boolean $z0, z1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.os.UserManager getUserManager()>();

        r1 = virtualinvoke $r2.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.content.pm.UserInfo: boolean isManagedProfile()>();

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public static boolean isQualityAlphabeticPassword(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 < 262144 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isQualityNumericPin(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 == 131072 goto label2;

        if i0 != 196608 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private void onPostPasswordChanged(com.android.internal.widget.LockscreenCredential, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.LockscreenCredential r1;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateEncryptionPasswordIfNeeded(com.android.internal.widget.LockscreenCredential,int)>(r1, i0);

        $z0 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: boolean isPattern()>();

        if $z0 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void reportPatternWasChosen(int)>(i0);

     label1:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updatePasswordHistory(com.android.internal.widget.LockscreenCredential,int)>(r1, i0);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void reportEnabledTrustAgentsChanged(int)>(i0);

        return;
    }

    private java.lang.String passwordToHistoryHash(byte[], byte[], int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.security.MessageDigest r1;
        byte[] r2, $r5, r9, r10, r11;
        java.lang.String $r3, $r4;
        char[] $r6;
        java.lang.Throwable $r7;
        java.lang.AssertionError $r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r9 := @parameter0: byte[];

        r10 := @parameter1: byte[];

        i0 := @parameter2: int;

        if r9 == null goto label4;

        $i1 = lengthof r9;

        if $i1 == 0 goto label4;

        if r10 != null goto label1;

        goto label4;

     label1:
        r1 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-256");

        virtualinvoke r1.<java.security.MessageDigest: void update(byte[])>(r10);

        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getSalt(int)>(i0);

        r2 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        $i3 = lengthof r9;

        $i2 = lengthof r2;

        $i4 = $i3 + $i2;

        r11 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r9, $i4);

        $i6 = lengthof r9;

        $i5 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r11, $i6, $i5);

        virtualinvoke r1.<java.security.MessageDigest: void update(byte[])>(r11);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r11, 0);

        $r4 = new java.lang.String;

        $r5 = virtualinvoke r1.<java.security.MessageDigest: byte[] digest()>();

        $r6 = staticinvoke <libcore.util.HexEncoding: char[] encode(byte[])>($r5);

        specialinvoke $r4.<java.lang.String: void <init>(char[])>($r6);

     label2:
        return $r4;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>("Missing digest algorithm: ", $r7);

        throw $r8;

     label4:
        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public static byte[] patternToByteArray(java.util.List)
    {
        java.util.List r0;
        int i0, $i1, $i2, $i3, $i4, $i5, i8;
        byte[] r1, $r4;
        com.android.internal.widget.LockPatternView$Cell r2;
        java.lang.Object $r3;
        byte $b6, $b7;

        r0 := @parameter0: java.util.List;

        if r0 != null goto label1;

        $r4 = newarray (byte)[0];

        return $r4;

     label1:
        i0 = interfaceinvoke r0.<java.util.List: int size()>();

        r1 = newarray (byte)[i0];

        i8 = 0;

     label2:
        if i8 >= i0 goto label3;

        $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i8);

        r2 = (com.android.internal.widget.LockPatternView$Cell) $r3;

        $i1 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $i2 = $i1 * 3;

        $i3 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $i4 = $i2 + $i3;

        $i5 = $i4 + 49;

        $b6 = (byte) $i5;

        $b7 = (byte) $b6;

        r1[i8] = $b7;

        i8 = i8 + 1;

        goto label2;

     label3:
        return r1;
    }

    private void reportEnabledTrustAgentsChanged(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.app.trust.TrustManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        virtualinvoke $r1.<android.app.trust.TrustManager: void reportEnabledTrustAgentsChanged(int)>(i0);

        return;
    }

    private void setBoolean(java.lang.String, boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r10;
        boolean z0;
        int i0;
        com.android.internal.widget.ILockSettings $r4;
        android.os.RemoteException $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

     label1:
        $r4 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r4.<com.android.internal.widget.ILockSettings: void setBoolean(java.lang.String,boolean,int)>(r1, z0, i0);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t write boolean ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r10);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setLong(java.lang.String, long, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r10;
        long l0;
        int i1;
        com.android.internal.widget.ILockSettings $r4;
        android.os.RemoteException $r5;
        java.lang.StringBuilder $r6;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

     label1:
        $r4 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r4.<com.android.internal.widget.ILockSettings: void setLong(java.lang.String,long,int)>(r1, l0, i1);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t write long ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r10);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void setString(java.lang.String, java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, $r9, r10;
        int i0;
        com.android.internal.widget.ILockSettings $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

     label1:
        $r3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: void setString(java.lang.String,java.lang.String,int)>(r1, r10, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t write string ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r9);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private boolean shouldEncryptWithCredentials(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean $z0, $z1, z2, z3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z2 := @parameter0: boolean;

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isCredentialRequiredToDecrypt(boolean)>(z2);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isDoNotAskCredentialsOnBootSet()>();

        if $z1 != 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    private void throwIfCalledOnMainThread()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.os.Looper $r1;
        boolean $z0;
        java.lang.IllegalStateException $r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>();

        $z0 = virtualinvoke $r1.<android.os.Looper: boolean isCurrentThread()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalStateException;

        specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("should not be called from the main thread.");

        throw $r2;
    }

    private void updateCryptoUserInfo(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0;
        android.os.RemoteException $r1;
        java.lang.String r2;
        android.os.IBinder r3;
        android.os.storage.IStorageManager r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        return;

     label1:
        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isOwnerInfoEnabled(int)>(i0);

        if $z0 == 0 goto label2;

        r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getOwnerInfo(int)>(i0);

        goto label3;

     label2:
        r2 = "";

     label3:
        r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r3 != null goto label4;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Could not find the mount service to update the user info");

        return;

     label4:
        r4 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>(r3);

     label5:
        staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("LockPatternUtils", "Setting owner info");

        interfaceinvoke r4.<android.os.storage.IStorageManager: void setField(java.lang.String,java.lang.String)>("OwnerInfo", r2);

     label6:
        goto label8;

     label7:
        $r1 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Error changing user info", $r1);

     label8:
        return;

        catch android.os.RemoteException from label5 to label6 with label7;
    }

    private void updateEncryptionPassword(int, byte[])
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.os.IBinder r1;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r2;
        com.android.internal.widget.LockPatternUtils$1 $r3;
        java.lang.Void[] $r4;
        java.lang.String $r6, r8;
        byte[] r7;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        r7 := @parameter1: byte[];

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z0 == 0 goto label5;

        $z1 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean isDeviceEncryptionEnabled()>();

        if $z1 != 0 goto label1;

        return;

     label1:
        r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r1 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Could not find the mount service to update the encryption password");

        return;

     label2:
        if r7 == null goto label3;

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(byte[])>(r7);

        r8 = $r6;

        goto label4;

     label3:
        r8 = null;

     label4:
        $r3 = new com.android.internal.widget.LockPatternUtils$1;

        specialinvoke $r3.<com.android.internal.widget.LockPatternUtils$1: void <init>(com.android.internal.widget.LockPatternUtils,android.os.IBinder,int,java.lang.String)>(r0, r1, i0, r8);

        $r4 = newarray (java.lang.Void)[0];

        virtualinvoke $r3.<com.android.internal.widget.LockPatternUtils$1: android.os.AsyncTask execute(java.lang.Object[])>($r4);

        return;

     label5:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation requires the lock screen feature.");

        throw $r2;
    }

    private void updateEncryptionPasswordIfNeeded(com.android.internal.widget.LockscreenCredential, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.LockscreenCredential r1;
        int i0, $i1;
        boolean $z0, $z1, $z2;
        byte[] $r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter1: int;

        if i0 != 0 goto label4;

        $z0 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean isDeviceEncryptionEnabled()>();

        if $z0 != 0 goto label1;

        goto label4;

     label1:
        $z1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean shouldEncryptWithCredentials(boolean)>(1);

        if $z1 != 0 goto label2;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateEncryptionPassword(int,byte[])>(1, null);

        return;

     label2:
        $z2 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z2 == 0 goto label3;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void setCredentialRequiredToDecrypt(boolean)>(0);

     label3:
        $i1 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: int getStorageCryptType()>();

        $r2 = virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateEncryptionPassword(int,byte[])>($i1, $r2);

        return;

     label4:
        return;
    }

    private void updatePasswordHistory(com.android.internal.widget.LockscreenCredential, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1, $i2, $i3, i5;
        java.lang.String r1, $r5, r9, r10, r11, r13;
        boolean $z0, $z1, $z2;
        byte[] $r2, $r7, r12;
        java.util.StringJoiner $r3;
        com.android.internal.widget.LockscreenCredential r8;
        java.lang.String[] r14;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r8 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r8.<com.android.internal.widget.LockscreenCredential: boolean isNone()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r8.<com.android.internal.widget.LockscreenCredential: boolean isPattern()>();

        if $z1 == 0 goto label2;

        return;

     label2:
        r9 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>("lockscreen.passwordhistory", i0);

        r10 = r9;

        if r9 != null goto label3;

        r10 = "";

     label3:
        i1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength(int)>(i0);

        if i1 != 0 goto label4;

        r11 = "";

        goto label9;

     label4:
        r12 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: byte[] getPasswordHistoryHashFactor(com.android.internal.widget.LockscreenCredential,int)>(r8, i0);

        $r2 = virtualinvoke r8.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

        r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String passwordToHistoryHash(byte[],byte[],int)>($r2, r12, i0);

        r13 = r1;

        if r1 != null goto label5;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Compute new style password hash failed, fallback to legacy style");

        $r7 = virtualinvoke r8.<com.android.internal.widget.LockscreenCredential: byte[] getCredential()>();

        r13 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String legacyPasswordToHash(byte[],int)>($r7, i0);

     label5:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r10);

        if $z2 == 0 goto label6;

        r11 = r13;

        goto label9;

     label6:
        r14 = virtualinvoke r10.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r3 = new java.util.StringJoiner;

        specialinvoke $r3.<java.util.StringJoiner: void <init>(java.lang.CharSequence)>(",");

        virtualinvoke $r3.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>(r13);

        i5 = 0;

     label7:
        $i2 = i1 - 1;

        if i5 >= $i2 goto label8;

        $i3 = lengthof r14;

        if i5 >= $i3 goto label8;

        $r5 = r14[i5];

        virtualinvoke $r3.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r5);

        i5 = i5 + 1;

        goto label7;

     label8:
        r11 = virtualinvoke $r3.<java.util.StringJoiner: java.lang.String toString()>();

     label9:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setString(java.lang.String,java.lang.String,int)>("lockscreen.passwordhistory", r11, i0);

        return;
    }

    public static boolean userOwnsFrpCredential(android.content.Context, android.content.pm.UserInfo)
    {
        android.content.Context r0;
        android.content.pm.UserInfo r1;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: android.content.Context;

        r1 := @parameter1: android.content.pm.UserInfo;

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.content.pm.UserInfo: boolean isPrimary()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r1.<android.content.pm.UserInfo: boolean isAdmin()>();

        if $z1 == 0 goto label1;

        $z2 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean frpCredentialEnabled(android.content.Context)>(r0);

        if $z2 == 0 goto label1;

        z3 = 1;

        goto label2;

     label1:
        z3 = 0;

     label2:
        return z3;
    }

    private com.android.internal.widget.ICheckCredentialProgressCallback wrapCallback(com.android.internal.widget.LockPatternUtils$CheckCredentialProgressCallback)
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.LockPatternUtils$CheckCredentialProgressCallback r1;
        android.os.Handler $r2, $r5;
        java.lang.IllegalStateException $r3;
        com.android.internal.widget.LockPatternUtils$WrappedCallback $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: com.android.internal.widget.LockPatternUtils$CheckCredentialProgressCallback;

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.os.Handler mHandler>;

        if $r2 == null goto label2;

        $r4 = new com.android.internal.widget.LockPatternUtils$WrappedCallback;

        $r5 = r0.<com.android.internal.widget.LockPatternUtils: android.os.Handler mHandler>;

        specialinvoke $r4.<com.android.internal.widget.LockPatternUtils$WrappedCallback: void <init>(android.os.Handler,com.android.internal.widget.LockPatternUtils$CheckCredentialProgressCallback)>($r5, r1);

        return $r4;

     label2:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Must construct LockPatternUtils on a looper thread to use progress callbacks.");

        throw $r3;
    }

    public long addEscrowToken(byte[], int, com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback)
    {
        com.android.internal.widget.LockPatternUtils r0;
        byte[] r1;
        int i0;
        com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback r2;
        com.android.internal.widget.LockSettingsInternal $r3;
        long $l1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r2 := @parameter2: com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback;

        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.LockSettingsInternal getLockSettingsInternal()>();

        $l1 = virtualinvoke $r3.<com.android.internal.widget.LockSettingsInternal: long addEscrowToken(byte[],int,com.android.internal.widget.LockPatternUtils$EscrowTokenStateChangeCallback)>(r1, i0, r2);

        return $l1;
    }

    public boolean checkCredential(com.android.internal.widget.LockscreenCredential, int, com.android.internal.widget.LockPatternUtils$CheckCredentialProgressCallback) throws com.android.internal.widget.LockPatternUtils$RequestThrottledException
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1, $i2, $i3;
        com.android.internal.widget.ILockSettings $r1;
        com.android.internal.widget.ICheckCredentialProgressCallback $r2;
        android.os.RemoteException $r3;
        com.android.internal.widget.LockscreenCredential r4;
        com.android.internal.widget.LockPatternUtils$CheckCredentialProgressCallback r5;
        com.android.internal.widget.VerifyCredentialResponse r6;
        com.android.internal.widget.LockPatternUtils$RequestThrottledException r7;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r4 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter1: int;

        r5 := @parameter2: com.android.internal.widget.LockPatternUtils$CheckCredentialProgressCallback;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void throwIfCalledOnMainThread()>();

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ICheckCredentialProgressCallback wrapCallback(com.android.internal.widget.LockPatternUtils$CheckCredentialProgressCallback)>(r5);

        r6 = interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: com.android.internal.widget.VerifyCredentialResponse checkCredential(com.android.internal.widget.LockscreenCredential,int,com.android.internal.widget.ICheckCredentialProgressCallback)>(r4, i0, $r2);

        $i1 = virtualinvoke r6.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i1 != 0 goto label3;

     label2:
        return 1;

     label3:
        $i2 = virtualinvoke r6.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i2 == 1 goto label5;

     label4:
        return 0;

     label5:
        r7 = new com.android.internal.widget.LockPatternUtils$RequestThrottledException;

        $i3 = virtualinvoke r6.<com.android.internal.widget.VerifyCredentialResponse: int getTimeout()>();

        specialinvoke r7.<com.android.internal.widget.LockPatternUtils$RequestThrottledException: void <init>(int)>($i3);

        throw r7;

     label6:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "failed to check credential", $r3);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label6;
        catch android.os.RemoteException from label3 to label4 with label6;
        catch android.os.RemoteException from label5 to label6 with label6;
    }

    public boolean checkPasswordHistory(byte[], byte[], int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, r2, $r3, $r4, r7;
        int i0, $i2, $i3, $i4, i5, i6;
        boolean $z0, $z1, $z2;
        byte[] r5, r6;
        java.lang.String[] r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r5 := @parameter0: byte[];

        r6 := @parameter1: byte[];

        i5 := @parameter2: int;

        if r5 == null goto label8;

        $i2 = lengthof r5;

        if $i2 != 0 goto label1;

        goto label8;

     label1:
        r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>("lockscreen.passwordhistory", i5);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 == 0 goto label2;

        return 0;

     label2:
        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: int getRequestedPasswordHistoryLength(int)>(i5);

        if i0 != 0 goto label3;

        return 0;

     label3:
        r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String legacyPasswordToHash(byte[],int)>(r5, i5);

        r7 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String passwordToHistoryHash(byte[],byte[],int)>(r5, r6, i5);

        r8 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i6 = 0;

     label4:
        $i3 = lengthof r8;

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i0, $i3);

        if i6 >= $i4 goto label7;

        $r3 = r8[i6];

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 != 0 goto label6;

        $r4 = r8[i6];

        $z2 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r7);

        if $z2 == 0 goto label5;

        goto label6;

     label5:
        i6 = i6 + 1;

        goto label4;

     label6:
        return 1;

     label7:
        return 0;

     label8:
        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "checkPasswordHistory: empty password");

        return 0;
    }

    public boolean checkVoldPassword(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean z0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        z0 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: boolean checkVoldPassword(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "failed to check vold password", $r3);

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void clearEncryptionPassword()
    {
        com.android.internal.widget.LockPatternUtils r0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateEncryptionPassword(int,byte[])>(1, null);

        return;
    }

    public void disableSyntheticPassword()
    {
        com.android.internal.widget.LockPatternUtils r0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>("enable-sp", 0L, 0);

        return;
    }

    public void enableSyntheticPassword()
    {
        com.android.internal.widget.LockPatternUtils r0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setLong(java.lang.String,long,int)>("enable-sp", 1L, 0);

        return;
    }

    public int getActivePasswordQuality(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getKeyguardStoredPasswordQuality(int)>(i0);

        return $i1;
    }

    public int getCredentialTypeForUser(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;
        int i1, i2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i1 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        i2 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: int getCredentialType(int)>(i1);

     label2:
        return i2;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "failed to get credential type", $r3);

        return -1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public int getCurrentFailedPasswordAttempts(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;
        android.content.Context $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        if i0 != -9999 goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean frpCredentialEnabled(android.content.Context)>($r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getCurrentFailedPasswordAttempts(int)>(i0);

        return $i1;
    }

    public java.lang.String getDeviceOwnerInfo()
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>("lockscreen.device_owner_info", 0);

        return $r1;
    }

    public android.app.admin.DevicePolicyManager getDevicePolicyManager()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.app.admin.DevicePolicyManager r1, $r2, $r6;
        android.content.Context $r3;
        java.lang.Object $r4;
        java.lang.IllegalStateException $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager>;

        if $r2 != null goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("device_policy");

        r1 = (android.app.admin.DevicePolicyManager) $r4;

        r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager> = r1;

        if r1 != null goto label1;

        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Stack trace:");

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Can\'t get DevicePolicyManagerService: is it running?", $r5);

     label1:
        $r6 = r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager mDevicePolicyManager>;

        return $r6;
    }

    public java.util.List getEnabledTrustAgents(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String[] r1;
        int i0, $i1, i2, i3;
        boolean $z0, $z1;
        java.util.ArrayList $r3;
        android.content.ComponentName $r4;
        java.lang.String r5, r6;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i2 := @parameter0: int;

        r5 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>("lockscreen.enabledtrustagents", i2);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z0 == 0 goto label1;

        return null;

     label1:
        r1 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        $r3 = new java.util.ArrayList;

        $i1 = lengthof r1;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i1);

        i0 = lengthof r1;

        i3 = 0;

     label2:
        if i3 >= i0 goto label4;

        r6 = r1[i3];

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z1 != 0 goto label3;

        $r4 = staticinvoke <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>(r6);

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4);

     label3:
        i3 = i3 + 1;

        goto label2;

     label4:
        return $r3;
    }

    public int getKeyguardStoredPasswordQuality(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1, $i2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCredentialTypeForUser(int)>(i0);

        $i2 = staticinvoke <com.android.internal.widget.LockPatternUtils: int credentialTypeToPasswordQuality(int)>($i1);

        return $i2;
    }

    public com.android.internal.widget.ILockSettings getLockSettings()
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.ILockSettings $r1, $r2, $r4;
        android.os.IBinder $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings mLockSettingsService>;

        if $r1 != null goto label1;

        $r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("lock_settings");

        $r4 = staticinvoke <com.android.internal.widget.ILockSettings$Stub: com.android.internal.widget.ILockSettings asInterface(android.os.IBinder)>($r3);

        r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings mLockSettingsService> = $r4;

     label1:
        $r2 = r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings mLockSettingsService>;

        return $r2;
    }

    public long getLockoutAttemptDeadline(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        long l1, $l2;
        android.util.SparseLongArray $r1, $r2;
        byte $b3, $b4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.util.SparseLongArray mLockoutDeadlines>;

        l1 = virtualinvoke $r1.<android.util.SparseLongArray: long get(int,long)>(i0, 0L);

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $b3 = l1 cmp $l2;

        if $b3 >= 0 goto label1;

        $b4 = l1 cmp 0L;

        if $b4 == 0 goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.util.SparseLongArray mLockoutDeadlines>;

        virtualinvoke $r2.<android.util.SparseLongArray: void put(int,long)>(i0, 0L);

        return 0L;

     label1:
        return l1;
    }

    public int getMaximumFailedPasswordsForWipe(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;
        android.content.Context $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        if i0 != -9999 goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean frpCredentialEnabled(android.content.Context)>($r2);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getMaximumFailedPasswordsForWipe(android.content.ComponentName,int)>(null, i0);

        return $i1;
    }

    public int getMaximumPasswordLength(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMaximumLength(int)>(i0);

        return $i1;
    }

    public java.lang.String getOwnerInfo(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>("lock_screen_owner_info", i0);

        return $r1;
    }

    public byte[] getPasswordHistoryHashFactor(com.android.internal.widget.LockscreenCredential, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        com.android.internal.widget.ILockSettings $r1;
        android.os.RemoteException $r2;
        com.android.internal.widget.LockscreenCredential r3;
        byte[] r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r3 := @parameter0: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter1: int;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        r4 = interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: byte[] getHashFactor(com.android.internal.widget.LockscreenCredential,int)>(r3, i0);

     label2:
        return r4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "failed to get hash factor", $r2);

        return null;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean getPowerButtonInstantlyLocks(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)>("lockscreen.power_button_instantly_locks", 1, i0);

        return $z0;
    }

    public int getRequestedMinimumPasswordLength(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLength(android.content.ComponentName,int)>(null, i0);

        return $i1;
    }

    public android.app.admin.PasswordMetrics getRequestedPasswordMetrics(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.app.admin.DevicePolicyManager $r1;
        android.app.admin.PasswordMetrics $r2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $r2 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int)>(i0);

        return $r2;
    }

    public int getRequestedPasswordMinimumLetters(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLetters(android.content.ComponentName,int)>(null, i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumLowerCase(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumLowerCase(android.content.ComponentName,int)>(null, i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumNonLetter(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNonLetter(android.content.ComponentName,int)>(null, i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumNumeric(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumNumeric(android.content.ComponentName,int)>(null, i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumSymbols(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumSymbols(android.content.ComponentName,int)>(null, i0);

        return $i1;
    }

    public int getRequestedPasswordMinimumUpperCase(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordMinimumUpperCase(android.content.ComponentName,int)>(null, i0);

        return $i1;
    }

    public int getRequestedPasswordQuality(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $i1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: int getPasswordQuality(android.content.ComponentName,int)>(null, i0);

        return $i1;
    }

    public int getStrongAuthForUser(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;
        android.content.Context $r4;
        int $i1, i2, i3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i2 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        i3 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: int getStrongAuthForUser(int)>(i2);

     label2:
        return i3;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Could not get StrongAuth", $r3);

        $r4 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $i1 = staticinvoke <com.android.internal.widget.LockPatternUtils$StrongAuthTracker: int getDefaultFlags(android.content.Context)>($r4);

        return $i1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasPendingEscrowToken(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean z0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        z0 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: boolean hasPendingEscrowToken(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean hasSecureLockScreen()
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.Boolean $r2, $r4, $r7;
        com.android.internal.widget.ILockSettings $r3;
        boolean $z0, $z1;
        android.os.RemoteException $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: java.lang.Boolean mHasSecureLockScreen>;

        if $r2 != null goto label4;

     label1:
        $r3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $z0 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: boolean hasSecureLockScreen()>();

        $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0);

        r0.<com.android.internal.widget.LockPatternUtils: java.lang.Boolean mHasSecureLockScreen> = $r4;

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r5.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        $r7 = r0.<com.android.internal.widget.LockPatternUtils: java.lang.Boolean mHasSecureLockScreen>;

        $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>();

        return $z1;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isBiometricAllowedForUser(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getStrongAuthForUser(int)>(i0);

        $i2 = $i1 & -5;

        if $i2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isCredentialRequiredToDecrypt(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.content.ContentResolver $r1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r1, "require_password_to_decrypt", -1);

        if i0 != -1 goto label1;

        goto label3;

     label1:
        if i0 == 0 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        return z0;
    }

    public boolean isDeviceOwnerInfoEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String $r1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getDeviceOwnerInfo()>();

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isEscrowTokenActive(long, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0;
        int i1;
        com.android.internal.widget.LockSettingsInternal $r1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.LockSettingsInternal getLockSettingsInternal()>();

        $z0 = virtualinvoke $r1.<com.android.internal.widget.LockSettingsInternal: boolean isEscrowTokenActive(long,int)>(l0, i1);

        return $z0;
    }

    public boolean isLegacyLockPatternEnabled(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)>("legacy_lock_pattern_enabled", 1, i0);

        return $z0;
    }

    public boolean isLockPasswordEnabled(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCredentialTypeForUser(int)>(i0);

        if i1 == 4 goto label2;

        if i1 != 3 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    public boolean isLockPatternEnabled(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCredentialTypeForUser(int)>(i0);

        z0 = 1;

        if i1 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isLockScreenDisabled(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.content.pm.UserInfo r1;
        android.content.Context $r2, $r5;
        android.content.res.Resources $r3;
        boolean $z0, $z1, z2, z3, z4, z5, $z6, z7, $z8;
        android.os.UserManager $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        z2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isSecure(int)>(i0);

        z3 = 0;

        if z2 == 0 goto label1;

        return 0;

     label1:
        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        z4 = virtualinvoke $r3.<android.content.res.Resources: boolean getBoolean(int)>(17891411);

        $z0 = staticinvoke <android.os.UserManager: boolean isSplitSystemUser()>();

        if $z0 == 0 goto label2;

        if i0 != 0 goto label2;

        z5 = 1;

        goto label3;

     label2:
        z5 = 0;

     label3:
        $r4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.os.UserManager getUserManager()>();

        r1 = virtualinvoke $r4.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $r5 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $z6 = staticinvoke <android.os.UserManager: boolean isDeviceInDemoMode(android.content.Context)>($r5);

        if $z6 == 0 goto label4;

        if r1 == null goto label4;

        $z1 = virtualinvoke r1.<android.content.pm.UserInfo: boolean isDemo()>();

        if $z1 == 0 goto label4;

        z7 = 1;

        goto label5;

     label4:
        z7 = 0;

     label5:
        $z8 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)>("lockscreen.disabled", 0, i0);

        if $z8 != 0 goto label7;

        if z4 == 0 goto label6;

        if z5 == 0 goto label7;

     label6:
        if z7 == 0 goto label8;

     label7:
        z3 = 1;

     label8:
        return z3;
    }

    public boolean isManagedProfileWithUnifiedChallenge(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isManagedProfile(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean hasSeparateChallenge(int)>(i0);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean isOwnerInfoEnabled(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)>("lock_screen_owner_info_enabled", 0, i0);

        return $z0;
    }

    public boolean isPatternEverChosen(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)>("lockscreen.patterneverchosen", 0, i0);

        return $z0;
    }

    public boolean isPowerButtonInstantlyLocksEverChosen(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        java.lang.String $r1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>("lockscreen.power_button_instantly_locks", i0);

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isSecure(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getCredentialTypeForUser(int)>(i0);

        if $i1 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isSeparateProfileChallengeAllowed(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0, $z1, z2;
        android.app.admin.DevicePolicyManager $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isManagedProfile(int)>(i0);

        if $z0 == 0 goto label1;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $z1 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: boolean isSeparateProfileChallengeAllowed(int)>(i0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean isSeparateProfileChallengeAllowedToUnify(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.app.admin.DevicePolicyManager $r1;
        boolean $z0, $z1, z2;
        android.os.UserManager $r2;
        android.os.UserHandle $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        $z0 = virtualinvoke $r1.<android.app.admin.DevicePolicyManager: boolean isProfileActivePasswordSufficientForParent(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.os.UserManager getUserManager()>();

        $r3 = staticinvoke <android.os.UserHandle: android.os.UserHandle of(int)>(i0);

        $z1 = virtualinvoke $r2.<android.os.UserManager: boolean hasUserRestriction(java.lang.String,android.os.UserHandle)>("no_unified_password", $r3);

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean isSeparateProfileChallengeEnabled(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isManagedProfile(int)>(i0);

        if $z0 == 0 goto label1;

        $z1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean hasSeparateChallenge(int)>(i0);

        if $z1 == 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean isSyntheticPasswordEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        long $l0;
        byte $b1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 = 0;

        $l0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: long getLong(java.lang.String,long,int)>("enable-sp", 1L, 0);

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public boolean isTactileFeedbackEnabled()
    {
        com.android.internal.widget.LockPatternUtils r0;
        android.content.ContentResolver r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 = r0.<com.android.internal.widget.LockPatternUtils: android.content.ContentResolver mContentResolver>;

        z0 = 1;

        $i0 = staticinvoke <android.provider.Settings$System: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>(r1, "haptic_feedback_enabled", 1, -2);

        if $i0 == 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isTrustAllowedForUser(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getStrongAuthForUser(int)>(i0);

        if $i1 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isTrustUsuallyManaged(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean z0, $z1;
        com.android.internal.widget.ILockSettings $r2, $r4;
        java.lang.IllegalStateException $r3;
        android.os.RemoteException $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings mLockSettingsService>;

        $z1 = $r2 instanceof com.android.internal.widget.ILockSettings$Stub;

        if $z1 == 0 goto label4;

     label1:
        $r4 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        z0 = interfaceinvoke $r4.<com.android.internal.widget.ILockSettings: boolean getBoolean(java.lang.String,boolean,int)>("lockscreen.istrustusuallymanaged", 0, i0);

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

        return 0;

     label4:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("May only be called by TrustManagerService. Use TrustManager.isTrustUsuallyManaged()");

        throw $r3;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean isUserInLockdown(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $i1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: int getStrongAuthForUser(int)>(i0);

        if $i1 != 32 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isVisiblePatternEnabled(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $z0 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean getBoolean(java.lang.String,boolean,int)>("lock_pattern_visible_pattern", 0, i0);

        return $z0;
    }

    public boolean isVisiblePatternEverChosen(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        java.lang.String $r1;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getString(java.lang.String,int)>("lock_pattern_visible_pattern", i0);

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public java.lang.String legacyPasswordToHash(byte[], int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        byte[] r1, r2, r9, r10, r11, r12;
        java.lang.String $r3, $r6;
        java.security.MessageDigest $r4, $r5;
        java.lang.Throwable $r7;
        java.lang.AssertionError $r8;
        char[] r13;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r9 := @parameter0: byte[];

        i0 := @parameter1: int;

        if r9 == null goto label4;

        $i1 = lengthof r9;

        if $i1 != 0 goto label1;

        goto label4;

     label1:
        $r3 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: java.lang.String getSalt(int)>(i0);

        r10 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        $i3 = lengthof r9;

        $i2 = lengthof r10;

        $i4 = $i3 + $i2;

        r1 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r9, $i4);

        $i6 = lengthof r9;

        $i5 = lengthof r10;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r10, 0, r1, $i6, $i5);

        $r4 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1");

        r11 = virtualinvoke $r4.<java.security.MessageDigest: byte[] digest(byte[])>(r1);

        $r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5");

        r2 = virtualinvoke $r5.<java.security.MessageDigest: byte[] digest(byte[])>(r1);

        $i8 = lengthof r11;

        $i7 = lengthof r2;

        $i9 = $i8 + $i7;

        r12 = newarray (byte)[$i9];

        $i10 = lengthof r11;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r12, 0, $i10);

        $i12 = lengthof r11;

        $i11 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r12, $i12, $i11);

        r13 = staticinvoke <libcore.util.HexEncoding: char[] encode(byte[])>(r12);

        staticinvoke <java.util.Arrays: void fill(byte[],byte)>(r1, 0);

        $r6 = new java.lang.String;

        specialinvoke $r6.<java.lang.String: void <init>(char[])>(r13);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.AssertionError;

        specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.String,java.lang.Throwable)>("Missing digest algorithm: ", $r7);

        throw $r8;

     label4:
        return null;

        catch java.security.NoSuchAlgorithmException from label1 to label2 with label3;
    }

    public void registerStrongAuthTracker(com.android.internal.widget.LockPatternUtils$StrongAuthTracker)
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.ILockSettings $r1;
        android.app.trust.IStrongAuthTracker$Stub $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r5 := @parameter0: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $r2 = virtualinvoke r5.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.app.trust.IStrongAuthTracker$Stub getStub()>();

        interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)>($r2);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.RuntimeException;

        specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>("Could not register StrongAuthTracker");

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void removeCachedUnifiedChallenge(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: void removeCachedUnifiedChallenge(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean removeEscrowToken(long, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0;
        int i1;
        com.android.internal.widget.LockSettingsInternal $r1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.LockSettingsInternal getLockSettingsInternal()>();

        $z0 = virtualinvoke $r1.<com.android.internal.widget.LockSettingsInternal: boolean removeEscrowToken(long,int)>(l0, i1);

        return $z0;
    }

    public void reportFailedPasswordAttempt(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.app.admin.DevicePolicyManager $r1;
        android.app.trust.TrustManager $r2;
        android.content.Context $r3;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        if i0 != -9999 goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean frpCredentialEnabled(android.content.Context)>($r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        virtualinvoke $r1.<android.app.admin.DevicePolicyManager: void reportFailedPasswordAttempt(int)>(i0);

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        virtualinvoke $r2.<android.app.trust.TrustManager: void reportUnlockAttempt(boolean,int)>(0, i0);

        return;
    }

    public void reportPasswordLockout(int, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1;
        android.app.trust.TrustManager $r1;
        android.content.Context $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i1 != -9999 goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean frpCredentialEnabled(android.content.Context)>($r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        virtualinvoke $r1.<android.app.trust.TrustManager: void reportUnlockLockout(int,int)>(i0, i1);

        return;
    }

    public void reportPatternWasChosen(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean,int)>("lockscreen.patterneverchosen", 1, i0);

        return;
    }

    public void reportSuccessfulBiometricUnlock(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int i0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: void reportSuccessfulBiometricUnlock(boolean,int)>(z0, i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Could not report successful biometric unlock", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void reportSuccessfulPasswordAttempt(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        android.app.admin.DevicePolicyManager $r1;
        android.app.trust.TrustManager $r2;
        android.content.Context $r3;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        if i0 != -9999 goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean frpCredentialEnabled(android.content.Context)>($r3);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>();

        virtualinvoke $r1.<android.app.admin.DevicePolicyManager: void reportSuccessfulPasswordAttempt(int)>(i0);

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        virtualinvoke $r2.<android.app.trust.TrustManager: void reportUnlockAttempt(boolean,int)>(1, i0);

        return;
    }

    public void requireCredentialEntry(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: void requireStrongAuth(int,int)>(4, i0);

        return;
    }

    public void requireStrongAuth(int, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1;
        com.android.internal.widget.ILockSettings $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

     label1:
        $r3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: void requireStrongAuth(int,int)>(i0, i1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error while requesting strong auth: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r8);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void resetKeyStore(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        com.android.internal.widget.ILockSettings $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

     label1:
        $r3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: void resetKeyStore(int)>(i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Couldn\'t reset keystore ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", $r8);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void scheduleNonStrongBiometricIdleTimeout(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: void scheduleNonStrongBiometricIdleTimeout(int)>(i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Could not schedule non-strong biometric idle timeout", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setCredentialRequiredToDecrypt(boolean)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0, $z1, $z2, $z4;
        android.content.ContentResolver r1;
        android.os.UserManager $r2, $r4;
        android.content.Context $r3;
        java.lang.IllegalStateException $r5;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.os.UserManager getUserManager()>();

        $z1 = virtualinvoke $r2.<android.os.UserManager: boolean isSystemUser()>();

        if $z1 != 0 goto label2;

        $r4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.os.UserManager getUserManager()>();

        $z4 = virtualinvoke $r4.<android.os.UserManager: boolean isPrimaryUser()>();

        if $z4 == 0 goto label1;

        goto label2;

     label1:
        $r5 = new java.lang.IllegalStateException;

        specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Only the system or primary user may call setCredentialRequiredForDecrypt()");

        throw $r5;

     label2:
        $z2 = staticinvoke <com.android.internal.widget.LockPatternUtils: boolean isDeviceEncryptionEnabled()>();

        if $z2 == 0 goto label3;

        $r3 = r0.<com.android.internal.widget.LockPatternUtils: android.content.Context mContext>;

        r1 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = (int) z0;

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>(r1, "require_password_to_decrypt", i0);

     label3:
        return;
    }

    public void setDeviceOwnerInfo(java.lang.String)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        r2 = r1;

        if r1 == null goto label1;

        r2 = r1;

        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        r2 = null;

     label1:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setString(java.lang.String,java.lang.String,int)>("lockscreen.device_owner_info", r2, 0);

        return;
    }

    public void setEnabledTrustAgents(java.util.Collection, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, $i1;
        android.content.ComponentName r2;
        java.lang.StringBuilder $r3;
        boolean $z0;
        java.lang.String $r4, $r7;
        android.app.trust.TrustManager $r5;
        java.lang.Object $r6;
        java.util.Collection r10;
        java.util.Iterator r11;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r10 := @parameter0: java.util.Collection;

        i0 := @parameter1: int;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        r11 = interfaceinvoke r10.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>();

        r2 = (android.content.ComponentName) $r6;

        $i1 = virtualinvoke $r3.<java.lang.StringBuilder: int length()>();

        if $i1 <= 0 goto label2;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44);

     label2:
        $r7 = virtualinvoke r2.<android.content.ComponentName: java.lang.String flattenToShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        goto label1;

     label3:
        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setString(java.lang.String,java.lang.String,int)>("lockscreen.enabledtrustagents", $r4, i0);

        $r5 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: android.app.trust.TrustManager getTrustManager()>();

        virtualinvoke $r5.<android.app.trust.TrustManager: void reportEnabledTrustAgentsChanged(int)>(i0);

        return;
    }

    public void setLegacyLockPatternEnabled(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean,int)>("lock_pattern_autolock", 1, i0);

        return;
    }

    public boolean setLockCredential(com.android.internal.widget.LockscreenCredential, com.android.internal.widget.LockscreenCredential, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.LockscreenCredential r1, r6;
        int i0;
        boolean z0, $z1;
        java.lang.UnsupportedOperationException $r2;
        com.android.internal.widget.ILockSettings $r3;
        android.os.RemoteException $r4;
        java.lang.RuntimeException $r5;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r6 := @parameter0: com.android.internal.widget.LockscreenCredential;

        r1 := @parameter1: com.android.internal.widget.LockscreenCredential;

        i0 := @parameter2: int;

        $z1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z1 == 0 goto label5;

        virtualinvoke r6.<com.android.internal.widget.LockscreenCredential: void checkLength()>();

     label1:
        $r3 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        z0 = interfaceinvoke $r3.<com.android.internal.widget.ILockSettings: boolean setLockCredential(com.android.internal.widget.LockscreenCredential,com.android.internal.widget.LockscreenCredential,int)>(r6, r1, i0);

     label2:
        if z0 != 0 goto label3;

        return 0;

     label3:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void onPostPasswordChanged(com.android.internal.widget.LockscreenCredential,int)>(r6, i0);

        return 1;

     label4:
        $r4 := @caughtexception;

        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to save lock password", $r4);

        throw $r5;

     label5:
        $r2 = new java.lang.UnsupportedOperationException;

        specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation requires the lock screen feature.");

        throw $r2;

        catch android.os.RemoteException from label1 to label2 with label4;
    }

    public boolean setLockCredentialWithToken(com.android.internal.widget.LockscreenCredential, long, byte[], int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.LockscreenCredential r1;
        long l0;
        byte[] r2;
        int i1;
        boolean $z0, $z1;
        java.lang.UnsupportedOperationException $r3;
        com.android.internal.widget.LockSettingsInternal $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: com.android.internal.widget.LockscreenCredential;

        l0 := @parameter1: long;

        r2 := @parameter2: byte[];

        i1 := @parameter3: int;

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean hasSecureLockScreen()>();

        if $z0 == 0 goto label2;

        virtualinvoke r1.<com.android.internal.widget.LockscreenCredential: void checkLength()>();

        $r4 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.LockSettingsInternal getLockSettingsInternal()>();

        $z1 = virtualinvoke $r4.<com.android.internal.widget.LockSettingsInternal: boolean setLockCredentialWithToken(com.android.internal.widget.LockscreenCredential,long,byte[],int)>(r1, l0, r2, i1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void onPostPasswordChanged(com.android.internal.widget.LockscreenCredential,int)>(r1, i1);

        return 1;

     label2:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("This operation requires the lock screen feature.");

        throw $r3;
    }

    public void setLockScreenDisabled(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean,int)>("lockscreen.disabled", z0, i0);

        return;
    }

    public long setLockoutAttemptDeadline(int, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0, i1;
        long l2, $l3, $l4;
        android.util.SparseLongArray $r1;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l4 = (long) i1;

        l2 = $l3 + $l4;

        if i0 != -9999 goto label1;

        return l2;

     label1:
        $r1 = r0.<com.android.internal.widget.LockPatternUtils: android.util.SparseLongArray mLockoutDeadlines>;

        virtualinvoke $r1.<android.util.SparseLongArray: void put(int,long)>(i0, l2);

        return l2;
    }

    public void setOwnerInfo(java.lang.String, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        java.lang.String r1;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setString(java.lang.String,java.lang.String,int)>("lock_screen_owner_info", r1, i0);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateCryptoUserInfo(int)>(i0);

        return;
    }

    public void setOwnerInfoEnabled(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean,int)>("lock_screen_owner_info_enabled", z0, i0);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void updateCryptoUserInfo(int)>(i0);

        return;
    }

    public void setPowerButtonInstantlyLocks(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int i0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean,int)>("lockscreen.power_button_instantly_locks", z0, i0);

        return;
    }

    public void setSeparateProfileChallengeEnabled(int, boolean, com.android.internal.widget.LockscreenCredential)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean z0, $z1;
        com.android.internal.widget.ILockSettings $r1;
        android.os.RemoteException $r2;
        com.android.internal.widget.LockscreenCredential r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r3 := @parameter2: com.android.internal.widget.LockscreenCredential;

        $z1 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: boolean isManagedProfile(int)>(i0);

        if $z1 != 0 goto label1;

        return;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: void setSeparateProfileChallengeEnabled(int,boolean,com.android.internal.widget.LockscreenCredential)>(i0, z0, r3);

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void reportEnabledTrustAgentsChanged(int)>(i0);

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Couldn\'t update work profile challenge enabled");

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setTrustUsuallyManaged(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int i0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: void setBoolean(java.lang.String,boolean,int)>("lockscreen.istrustusuallymanaged", z0, i0);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void setVisiblePasswordEnabled(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int i0;
        android.os.storage.IStorageManager r1;
        android.os.RemoteException $r2;
        android.os.IBinder r3;
        java.lang.String r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        if i0 == 0 goto label1;

        return;

     label1:
        r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r3 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Could not find the mount service to update the user info");

        return;

     label2:
        r1 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>(r3);

        if z0 == 0 goto label3;

        r4 = "1";

        goto label4;

     label3:
        r4 = "0";

     label4:
        interfaceinvoke r1.<android.os.storage.IStorageManager: void setField(java.lang.String,java.lang.String)>("PasswordVisible", r4);

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Error changing password visible state", $r2);

     label7:
        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public void setVisiblePatternEnabled(boolean, int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        boolean z0;
        int i0;
        android.os.storage.IStorageManager r1;
        android.os.RemoteException $r2;
        android.os.IBinder r3;
        java.lang.String r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void setBoolean(java.lang.String,boolean,int)>("lock_pattern_visible_pattern", z0, i0);

        if i0 == 0 goto label1;

        return;

     label1:
        r3 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("mount");

        if r3 != null goto label2;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("LockPatternUtils", "Could not find the mount service to update the user info");

        return;

     label2:
        r1 = staticinvoke <android.os.storage.IStorageManager$Stub: android.os.storage.IStorageManager asInterface(android.os.IBinder)>(r3);

        if z0 == 0 goto label3;

        r4 = "1";

        goto label4;

     label3:
        r4 = "0";

     label4:
        interfaceinvoke r1.<android.os.storage.IStorageManager: void setField(java.lang.String,java.lang.String)>("PatternVisible", r4);

     label5:
        goto label7;

     label6:
        $r2 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Error changing pattern visible state", $r2);

     label7:
        return;

        catch android.os.RemoteException from label4 to label5 with label6;
    }

    public boolean tryUnlockWithCachedUnifiedChallenge(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        boolean z0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        z0 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: boolean tryUnlockWithCachedUnifiedChallenge(int)>(i0);

     label2:
        return z0;

     label3:
        $r3 := @caughtexception;

        return 0;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public boolean unlockUserWithToken(long, byte[], int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0;
        byte[] r1;
        int i1;
        com.android.internal.widget.LockSettingsInternal $r2;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        l0 := @parameter0: long;

        r1 := @parameter1: byte[];

        i1 := @parameter2: int;

        $r2 = specialinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.LockSettingsInternal getLockSettingsInternal()>();

        $z0 = virtualinvoke $r2.<com.android.internal.widget.LockSettingsInternal: boolean unlockUserWithToken(long,byte[],int)>(l0, r1, i1);

        return $z0;
    }

    public void unregisterStrongAuthTracker(com.android.internal.widget.LockPatternUtils$StrongAuthTracker)
    {
        com.android.internal.widget.LockPatternUtils r0;
        com.android.internal.widget.ILockSettings $r1;
        android.app.trust.IStrongAuthTracker$Stub $r2;
        android.os.RemoteException $r3;
        com.android.internal.widget.LockPatternUtils$StrongAuthTracker r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r4 := @parameter0: com.android.internal.widget.LockPatternUtils$StrongAuthTracker;

     label1:
        $r1 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        $r2 = virtualinvoke r4.<com.android.internal.widget.LockPatternUtils$StrongAuthTracker: android.app.trust.IStrongAuthTracker$Stub getStub()>();

        interfaceinvoke $r1.<com.android.internal.widget.ILockSettings: void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)>($r2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "Could not unregister StrongAuthTracker", $r3);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public void userPresent(int)
    {
        com.android.internal.widget.LockPatternUtils r0;
        int i0;
        com.android.internal.widget.ILockSettings $r2;
        android.os.RemoteException $r3;
        java.lang.RuntimeException $r4;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        i0 := @parameter0: int;

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: void userPresent(int)>(i0);

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = virtualinvoke $r3.<android.os.RemoteException: java.lang.RuntimeException rethrowFromSystemServer()>();

        throw $r4;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    public byte[] verifyCredential(com.android.internal.widget.LockscreenCredential, long, int) throws com.android.internal.widget.LockPatternUtils$RequestThrottledException
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0;
        int i1, $i2, $i3, $i4;
        com.android.internal.widget.LockPatternUtils$RequestThrottledException r1;
        com.android.internal.widget.ILockSettings $r2;
        byte[] $r3;
        android.os.RemoteException $r4;
        com.android.internal.widget.LockscreenCredential r5;
        com.android.internal.widget.VerifyCredentialResponse r6;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r5 := @parameter0: com.android.internal.widget.LockscreenCredential;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void throwIfCalledOnMainThread()>();

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        r6 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: com.android.internal.widget.VerifyCredentialResponse verifyCredential(com.android.internal.widget.LockscreenCredential,long,int)>(r5, l0, i1);

        $i2 = virtualinvoke r6.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i2 != 0 goto label2;

        $r3 = virtualinvoke r6.<com.android.internal.widget.VerifyCredentialResponse: byte[] getPayload()>();

        return $r3;

     label2:
        $i3 = virtualinvoke r6.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i3 == 1 goto label4;

     label3:
        return null;

     label4:
        r1 = new com.android.internal.widget.LockPatternUtils$RequestThrottledException;

        $i4 = virtualinvoke r6.<com.android.internal.widget.VerifyCredentialResponse: int getTimeout()>();

        specialinvoke r1.<com.android.internal.widget.LockPatternUtils$RequestThrottledException: void <init>(int)>($i4);

        throw r1;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "failed to verify credential", $r4);

        return null;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label2 to label3 with label5;
        catch android.os.RemoteException from label4 to label5 with label5;
    }

    public byte[] verifyTiedProfileChallenge(com.android.internal.widget.LockscreenCredential, long, int) throws com.android.internal.widget.LockPatternUtils$RequestThrottledException
    {
        com.android.internal.widget.LockPatternUtils r0;
        long l0;
        int i1, $i2, $i3, $i4;
        com.android.internal.widget.VerifyCredentialResponse r1;
        com.android.internal.widget.ILockSettings $r2;
        byte[] $r3;
        android.os.RemoteException $r4;
        com.android.internal.widget.LockscreenCredential r5;
        com.android.internal.widget.LockPatternUtils$RequestThrottledException r6;

        r0 := @this: com.android.internal.widget.LockPatternUtils;

        r5 := @parameter0: com.android.internal.widget.LockscreenCredential;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.internal.widget.LockPatternUtils: void throwIfCalledOnMainThread()>();

     label1:
        $r2 = virtualinvoke r0.<com.android.internal.widget.LockPatternUtils: com.android.internal.widget.ILockSettings getLockSettings()>();

        r1 = interfaceinvoke $r2.<com.android.internal.widget.ILockSettings: com.android.internal.widget.VerifyCredentialResponse verifyTiedProfileChallenge(com.android.internal.widget.LockscreenCredential,long,int)>(r5, l0, i1);

        $i2 = virtualinvoke r1.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i2 != 0 goto label2;

        $r3 = virtualinvoke r1.<com.android.internal.widget.VerifyCredentialResponse: byte[] getPayload()>();

        return $r3;

     label2:
        $i3 = virtualinvoke r1.<com.android.internal.widget.VerifyCredentialResponse: int getResponseCode()>();

        if $i3 == 1 goto label4;

     label3:
        return null;

     label4:
        r6 = new com.android.internal.widget.LockPatternUtils$RequestThrottledException;

        $i4 = virtualinvoke r1.<com.android.internal.widget.VerifyCredentialResponse: int getTimeout()>();

        specialinvoke r6.<com.android.internal.widget.LockPatternUtils$RequestThrottledException: void <init>(int)>($i4);

        throw r6;

     label5:
        $r4 := @caughtexception;

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("LockPatternUtils", "failed to verify tied profile credential", $r4);

        return null;

        catch android.os.RemoteException from label1 to label2 with label5;
        catch android.os.RemoteException from label2 to label3 with label5;
        catch android.os.RemoteException from label4 to label5 with label5;
    }

    public static void <clinit>()
    {
        <com.android.internal.widget.LockPatternUtils: int USER_FRP> = -9999;

        <com.android.internal.widget.LockPatternUtils: java.lang.String TAG> = "LockPatternUtils";

        <com.android.internal.widget.LockPatternUtils: java.lang.String SYNTHETIC_PASSWORD_KEY_PREFIX> = "synthetic_password_";

        <com.android.internal.widget.LockPatternUtils: java.lang.String SYNTHETIC_PASSWORD_HANDLE_KEY> = "sp-handle";

        <com.android.internal.widget.LockPatternUtils: java.lang.String SYNTHETIC_PASSWORD_ENABLED_KEY> = "enable-sp";

        <com.android.internal.widget.LockPatternUtils: int SYNTHETIC_PASSWORD_ENABLED_BY_DEFAULT> = 1;

        <com.android.internal.widget.LockPatternUtils: java.lang.String PROFILE_KEY_NAME_ENCRYPT> = "profile_key_name_encrypt_";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PROFILE_KEY_NAME_DECRYPT> = "profile_key_name_decrypt_";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PATTERN_EVER_CHOSEN_KEY> = "lockscreen.patterneverchosen";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PASSWORD_TYPE_KEY> = "lockscreen.password_type";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PASSWORD_TYPE_ALTERNATE_KEY> = "lockscreen.password_type_alternate";

        <com.android.internal.widget.LockPatternUtils: java.lang.String PASSWORD_HISTORY_KEY> = "lockscreen.passwordhistory";

        <com.android.internal.widget.LockPatternUtils: int MIN_PATTERN_REGISTER_FAIL> = 4;

        <com.android.internal.widget.LockPatternUtils: int MIN_LOCK_PATTERN_SIZE> = 4;

        <com.android.internal.widget.LockPatternUtils: int MIN_LOCK_PASSWORD_SIZE> = 4;

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_SCREEN_OWNER_INFO_ENABLED> = "lock_screen_owner_info_enabled";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_SCREEN_OWNER_INFO> = "lock_screen_owner_info";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_SCREEN_DEVICE_OWNER_INFO> = "lockscreen.device_owner_info";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCK_PASSWORD_SALT_KEY> = "lockscreen.password_salt";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_WIDGETS_ENABLED> = "lockscreen.widgets_enabled";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_POWER_BUTTON_INSTANTLY_LOCKS> = "lockscreen.power_button_instantly_locks";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_OPTIONS> = "lockscreen.options";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKSCREEN_BIOMETRIC_WEAK_FALLBACK> = "lockscreen.biometric_weak_fallback";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LOCKOUT_PERMANENT_KEY> = "lockscreen.lockedoutpermanently";

        <com.android.internal.widget.LockPatternUtils: java.lang.String LEGACY_LOCK_PATTERN_ENABLED> = "legacy_lock_pattern_enabled";

        <com.android.internal.widget.LockPatternUtils: java.lang.String IS_TRUST_USUALLY_MANAGED> = "lockscreen.istrustusuallymanaged";

        <com.android.internal.widget.LockPatternUtils: java.lang.String HISTORY_DELIMITER> = ",";

        <com.android.internal.widget.LockPatternUtils: boolean FRP_CREDENTIAL_ENABLED> = 1;

        <com.android.internal.widget.LockPatternUtils: long FAILED_ATTEMPT_COUNTDOWN_INTERVAL_MS> = 1000L;

        <com.android.internal.widget.LockPatternUtils: int FAILED_ATTEMPTS_BEFORE_WIPE_GRACE> = 5;

        <com.android.internal.widget.LockPatternUtils: java.lang.String ENABLED_TRUST_AGENTS> = "lockscreen.enabledtrustagents";

        <com.android.internal.widget.LockPatternUtils: java.lang.String DISABLE_LOCKSCREEN_KEY> = "lockscreen.disabled";

        <com.android.internal.widget.LockPatternUtils: int CREDENTIAL_TYPE_PIN> = 3;

        <com.android.internal.widget.LockPatternUtils: int CREDENTIAL_TYPE_PATTERN> = 1;

        <com.android.internal.widget.LockPatternUtils: int CREDENTIAL_TYPE_PASSWORD_OR_PIN> = 2;

        <com.android.internal.widget.LockPatternUtils: int CREDENTIAL_TYPE_PASSWORD> = 4;

        <com.android.internal.widget.LockPatternUtils: int CREDENTIAL_TYPE_NONE> = -1;

        <com.android.internal.widget.LockPatternUtils: java.lang.String BIOMETRIC_WEAK_EVER_CHOSEN_KEY> = "lockscreen.biometricweakeverchosen";

        return;
    }
}
