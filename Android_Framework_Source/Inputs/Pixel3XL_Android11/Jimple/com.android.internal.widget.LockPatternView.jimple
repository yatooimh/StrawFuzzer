public class com.android.internal.widget.LockPatternView extends android.view.View
{
    private static final int ASPECT_LOCK_HEIGHT;
    private static final int ASPECT_LOCK_WIDTH;
    private static final int ASPECT_SQUARE;
    public static final boolean DEBUG_A11Y;
    private static final float DRAG_THRESHHOLD;
    private static final float LINE_FADE_ALPHA_MULTIPLIER;
    private static final int MILLIS_PER_CIRCLE_ANIMATING;
    private static final boolean PROFILE_DRAWING;
    private static final java.lang.String TAG;
    public static final int VIRTUAL_BASE_VIEW_ID;
    private long mAnimatingPeriodStart;
    private int mAspect;
    private android.media.AudioManager mAudioManager;
    private final com.android.internal.widget.LockPatternView$CellState[][] mCellStates;
    private final android.graphics.Path mCurrentPath;
    private final int mDotSize;
    private final int mDotSizeActivated;
    private boolean mDrawingProfilingStarted;
    private boolean mEnableHapticFeedback;
    private int mErrorColor;
    private com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper mExploreByTouchHelper;
    private boolean mFadePattern;
    private final android.view.animation.Interpolator mFastOutSlowInInterpolator;
    private float mHitFactor;
    private float mInProgressX;
    private float mInProgressY;
    private boolean mInStealthMode;
    private boolean mInputEnabled;
    private final android.graphics.Rect mInvalidate;
    private long[] mLineFadeStart;
    private final android.view.animation.Interpolator mLinearOutSlowInInterpolator;
    private android.graphics.drawable.Drawable mNotSelectedDrawable;
    private com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener;
    private final android.graphics.Paint mPaint;
    private final android.graphics.Paint mPathPaint;
    private final int mPathWidth;
    private final java.util.ArrayList mPattern;
    private com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode;
    private final boolean[][] mPatternDrawLookup;
    private boolean mPatternInProgress;
    private int mRegularColor;
    private android.graphics.drawable.Drawable mSelectedDrawable;
    private float mSquareHeight;
    private float mSquareWidth;
    private int mSuccessColor;
    private final android.graphics.Rect mTmpInvalidateRect;
    private boolean mUseLockPatternDrawable;

    public void <init>(android.content.Context)
    {
        com.android.internal.widget.LockPatternView r0;
        android.content.Context r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.android.internal.widget.LockPatternView r0;
        java.lang.String r1, $r12, $r13, $r14;
        boolean z0, $z1, $z2, $z3;
        android.graphics.Paint $r2, $r3, $r15, $r16, $r43, $r44, $r45, $r46, $r48, $r50, $r53;
        java.util.ArrayList $r4;
        boolean[][] $r5;
        long[] $r6;
        com.android.internal.widget.LockPatternView$DisplayMode $r7;
        android.graphics.Path $r8;
        android.graphics.Rect $r9, $r10;
        int[] $r11;
        com.android.internal.widget.LockPatternView$CellState[][] $r17, $r24, $r27, $r30, $r33;
        android.view.animation.Interpolator $r18, $r19;
        com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper $r20;
        android.content.Context $r21, r40;
        java.lang.Object $r22;
        android.media.AudioManager $r23;
        com.android.internal.widget.LockPatternView$CellState $r25, $r29, $r32, $r35;
        com.android.internal.widget.LockPatternView$CellState[] $r26, $r28, $r31, $r34;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, i7, $i8, $i9, i10, i11;
        float $f0, $f1;
        android.content.res.Resources $r36, $r38, $r52, $r54, $r55, $r56;
        android.graphics.drawable.Drawable $r37, $r39;
        android.util.AttributeSet r41;
        android.content.res.TypedArray r42;
        android.graphics.Paint$Style $r47;
        android.graphics.Paint$Join $r49;
        android.graphics.Paint$Cap $r51;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r40 := @parameter0: android.content.Context;

        r41 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet)>(r40, r41);

        r0.<com.android.internal.widget.LockPatternView: boolean mDrawingProfilingStarted> = 0;

        $r2 = new android.graphics.Paint;

        specialinvoke $r2.<android.graphics.Paint: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint> = $r2;

        $r3 = new android.graphics.Paint;

        specialinvoke $r3.<android.graphics.Paint: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint> = $r3;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(9);

        r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern> = $r4;

        $r5 = newmultiarray (boolean)[3][3];

        r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup> = $r5;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = -1.0F;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = -1.0F;

        $r6 = newarray (long)[9];

        r0.<com.android.internal.widget.LockPatternView: long[] mLineFadeStart> = $r6;

        $r7 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r7;

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = 1;

        r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode> = 0;

        r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback> = 1;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = 0;

        r0.<com.android.internal.widget.LockPatternView: boolean mFadePattern> = 1;

        r0.<com.android.internal.widget.LockPatternView: float mHitFactor> = 0.6F;

        $r8 = new android.graphics.Path;

        specialinvoke $r8.<android.graphics.Path: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Path mCurrentPath> = $r8;

        $r9 = new android.graphics.Rect;

        specialinvoke $r9.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate> = $r9;

        $r10 = new android.graphics.Rect;

        specialinvoke $r10.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect> = $r10;

        $r11 = <com.android.internal.R$styleable: int[] LockPatternView>;

        r42 = virtualinvoke r40.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r41, $r11, 17956979, 16975050);

        r1 = virtualinvoke r42.<android.content.res.TypedArray: java.lang.String getString(int)>(0);

        $r12 = "square";

        $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label1;

        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 0;

        goto label4;

     label1:
        $r13 = "lock_width";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 1;

        goto label4;

     label2:
        $r14 = "lock_height";

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r1);

        if $z3 == 0 goto label3;

        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 2;

        goto label4;

     label3:
        r0.<com.android.internal.widget.LockPatternView: int mAspect> = 0;

     label4:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setClickable(boolean)>(1);

        $r43 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r43.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r44 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r44.<android.graphics.Paint: void setDither(boolean)>(1);

        $i2 = virtualinvoke r42.<android.content.res.TypedArray: int getColor(int,int)>(3, 0);

        r0.<com.android.internal.widget.LockPatternView: int mRegularColor> = $i2;

        $i3 = virtualinvoke r42.<android.content.res.TypedArray: int getColor(int,int)>(1, 0);

        r0.<com.android.internal.widget.LockPatternView: int mErrorColor> = $i3;

        $i4 = virtualinvoke r42.<android.content.res.TypedArray: int getColor(int,int)>(4, 0);

        r0.<com.android.internal.widget.LockPatternView: int mSuccessColor> = $i4;

        $i5 = r0.<com.android.internal.widget.LockPatternView: int mRegularColor>;

        i6 = virtualinvoke r42.<android.content.res.TypedArray: int getColor(int,int)>(2, $i5);

        $r45 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r45.<android.graphics.Paint: void setColor(int)>(i6);

        $r46 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $r47 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE>;

        virtualinvoke $r46.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r47);

        $r48 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $r49 = <android.graphics.Paint$Join: android.graphics.Paint$Join ROUND>;

        virtualinvoke $r48.<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>($r49);

        $r50 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $r51 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap ROUND>;

        virtualinvoke $r50.<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>($r51);

        $r52 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        i7 = virtualinvoke $r52.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105306);

        r0.<com.android.internal.widget.LockPatternView: int mPathWidth> = i7;

        $r53 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $f1 = (float) i7;

        virtualinvoke $r53.<android.graphics.Paint: void setStrokeWidth(float)>($f1);

        $r54 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        $i8 = virtualinvoke $r54.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105307);

        r0.<com.android.internal.widget.LockPatternView: int mDotSize> = $i8;

        $r55 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        $i9 = virtualinvoke $r55.<android.content.res.Resources: int getDimensionPixelSize(int)>(17105308);

        r0.<com.android.internal.widget.LockPatternView: int mDotSizeActivated> = $i9;

        $r56 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        z0 = virtualinvoke $r56.<android.content.res.Resources: boolean getBoolean(int)>(17891615);

        r0.<com.android.internal.widget.LockPatternView: boolean mUseLockPatternDrawable> = z0;

        if z0 == 0 goto label5;

        $r36 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        $r37 = virtualinvoke $r36.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(17303024);

        r0.<com.android.internal.widget.LockPatternView: android.graphics.drawable.Drawable mSelectedDrawable> = $r37;

        $r38 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: android.content.res.Resources getResources()>();

        $r39 = virtualinvoke $r38.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(17303022);

        r0.<com.android.internal.widget.LockPatternView: android.graphics.drawable.Drawable mNotSelectedDrawable> = $r39;

     label5:
        $r15 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke $r15.<android.graphics.Paint: void setAntiAlias(boolean)>(1);

        $r16 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke $r16.<android.graphics.Paint: void setDither(boolean)>(1);

        $r17 = newmultiarray (com.android.internal.widget.LockPatternView$CellState)[3][3];

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates> = $r17;

        i10 = 0;

     label6:
        if i10 >= 3 goto label9;

        i11 = 0;

     label7:
        if i11 >= 3 goto label8;

        $r24 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $r26 = $r24[i10];

        $r25 = new com.android.internal.widget.LockPatternView$CellState;

        specialinvoke $r25.<com.android.internal.widget.LockPatternView$CellState: void <init>()>();

        $r26[i11] = $r25;

        $r27 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $r28 = $r27[i10];

        $r29 = $r28[i11];

        $i0 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        $i1 = $i0 / 2;

        $f0 = (float) $i1;

        $r29.<com.android.internal.widget.LockPatternView$CellState: float radius> = $f0;

        $r30 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $r31 = $r30[i10];

        $r32 = $r31[i11];

        $r32.<com.android.internal.widget.LockPatternView$CellState: int row> = i10;

        $r33 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $r34 = $r33[i10];

        $r35 = $r34[i11];

        $r35.<com.android.internal.widget.LockPatternView$CellState: int col> = i11;

        i11 = i11 + 1;

        goto label7;

     label8:
        i10 = i10 + 1;

        goto label6;

     label9:
        $r18 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r40, 17563661);

        r0.<com.android.internal.widget.LockPatternView: android.view.animation.Interpolator mFastOutSlowInInterpolator> = $r18;

        $r19 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r40, 17563662);

        r0.<com.android.internal.widget.LockPatternView: android.view.animation.Interpolator mLinearOutSlowInInterpolator> = $r19;

        $r20 = new com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper;

        specialinvoke $r20.<com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper: void <init>(com.android.internal.widget.LockPatternView,android.view.View)>(r0, r0);

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper mExploreByTouchHelper> = $r20;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>($r20);

        $r21 = r0.<com.android.internal.widget.LockPatternView: android.content.Context mContext>;

        $r22 = virtualinvoke $r21.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("audio");

        $r23 = (android.media.AudioManager) $r22;

        r0.<com.android.internal.widget.LockPatternView: android.media.AudioManager mAudioManager> = $r23;

        virtualinvoke r42.<android.content.res.TypedArray: void recycle()>();

        return;
    }

    static int access$000(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        int $i0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $i0 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        return $i0;
    }

    static int access$100(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        int $i0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $i0 = r0.<com.android.internal.widget.LockPatternView: int mDotSizeActivated>;

        return $i0;
    }

    static float access$1000(com.android.internal.widget.LockPatternView, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0;
        float $f0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        i0 := @parameter1: int;

        $f0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>(i0);

        return $f0;
    }

    static float access$1100(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        float $f0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $f0 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        return $f0;
    }

    static float access$1200(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        float $f0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $f0 = r0.<com.android.internal.widget.LockPatternView: float mHitFactor>;

        return $f0;
    }

    static float access$1300(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        float $f0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $f0 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        return $f0;
    }

    static int access$1400(com.android.internal.widget.LockPatternView, float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0;
        int $i0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        f0 := @parameter1: float;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getRowHit(float)>(f0);

        return $i0;
    }

    static int access$1500(com.android.internal.widget.LockPatternView, float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0;
        int $i0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        f0 := @parameter1: float;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getColumnHit(float)>(f0);

        return $i0;
    }

    static android.view.animation.Interpolator access$200(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.animation.Interpolator $r1;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: android.view.animation.Interpolator mFastOutSlowInInterpolator>;

        return $r1;
    }

    static void access$300(com.android.internal.widget.LockPatternView, float, float, long, android.view.animation.Interpolator, com.android.internal.widget.LockPatternView$CellState, java.lang.Runnable)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1;
        long l0;
        android.view.animation.Interpolator r1;
        com.android.internal.widget.LockPatternView$CellState r2;
        java.lang.Runnable r3;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        l0 := @parameter3: long;

        r1 := @parameter4: android.view.animation.Interpolator;

        r2 := @parameter5: com.android.internal.widget.LockPatternView$CellState;

        r3 := @parameter6: java.lang.Runnable;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startRadiusAnimation(float,float,long,android.view.animation.Interpolator,com.android.internal.widget.LockPatternView$CellState,java.lang.Runnable)>(f0, f1, l0, r1, r2, r3);

        return;
    }

    static boolean access$600(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean $z0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        return $z0;
    }

    static boolean[][] access$700(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean[][] $r1;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        return $r1;
    }

    static com.android.internal.widget.LockPatternView$CellState[][] access$800(com.android.internal.widget.LockPatternView)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$CellState[][] $r1;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        return $r1;
    }

    static float access$900(com.android.internal.widget.LockPatternView, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0;
        float $f0;

        r0 := @parameter0: com.android.internal.widget.LockPatternView;

        i0 := @parameter1: int;

        $f0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>(i0);

        return $f0;
    }

    private void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$Cell r1;
        boolean[][] $r2;
        int $i0, $i1;
        boolean[] $r3;
        java.util.ArrayList $r4;
        boolean $z1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$Cell;

        $r2 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $i0 = virtualinvoke r1.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $r3 = $r2[$i0];

        $i1 = virtualinvoke r1.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $r3[$i1] = 1;

        $r4 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        if $z1 != 0 goto label1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startCellActivatedAnimation(com.android.internal.widget.LockPatternView$Cell)>(r1);

     label1:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyCellAdded()>();

        return;
    }

    private float calculateLastSegmentAlpha(float, float, float, float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, f14, f15;
        double $d0, $d1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f12 := @parameter0: float;

        f13 := @parameter1: float;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        f14 = f12 - f0;

        f15 = f13 - f1;

        $f3 = f14 * f14;

        $f2 = f15 * f15;

        $f4 = $f3 + $f2;

        $d0 = (double) $f4;

        $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0);

        $f6 = (float) $d1;

        $f5 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f7 = $f6 / $f5;

        $f8 = $f7 - 0.3F;

        $f9 = $f8 * 4.0F;

        $f10 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f9);

        $f11 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f10);

        return $f11;
    }

    private void cancelLineAnimations()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$CellState r1;
        com.android.internal.widget.LockPatternView$CellState[][] $r2;
        com.android.internal.widget.LockPatternView$CellState[] $r3;
        android.animation.ValueAnimator $r4, $r5;
        int i0, i1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 = 0;

     label1:
        if i0 >= 3 goto label5;

        i1 = 0;

     label2:
        if i1 >= 3 goto label4;

        $r2 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $r3 = $r2[i0];

        r1 = $r3[i1];

        $r4 = r1.<com.android.internal.widget.LockPatternView$CellState: android.animation.ValueAnimator lineAnimator>;

        if $r4 == null goto label3;

        $r5 = r1.<com.android.internal.widget.LockPatternView$CellState: android.animation.ValueAnimator lineAnimator>;

        virtualinvoke $r5.<android.animation.ValueAnimator: void cancel()>();

        r1.<com.android.internal.widget.LockPatternView$CellState: float lineEndX> = 1.4E-45F;

        r1.<com.android.internal.widget.LockPatternView$CellState: float lineEndY> = 1.4E-45F;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        i0 = i0 + 1;

        goto label1;

     label5:
        return;
    }

    private com.android.internal.widget.LockPatternView$Cell checkForNewHit(float, float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1;
        int i0, i1;
        boolean[][] $r1;
        boolean[] $r2;
        boolean $z0;
        com.android.internal.widget.LockPatternView$Cell $r3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        i0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getRowHit(float)>(f1);

        if i0 >= 0 goto label1;

        return null;

     label1:
        i1 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getColumnHit(float)>(f0);

        if i1 >= 0 goto label2;

        return null;

     label2:
        $r1 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $r2 = $r1[i0];

        $z0 = $r2[i1];

        if $z0 == 0 goto label3;

        return null;

     label3:
        $r3 = staticinvoke <com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>(i0, i1);

        return $r3;
    }

    private void clearPatternDrawLookup()
    {
        com.android.internal.widget.LockPatternView r0;
        boolean[][] $r1;
        boolean[] $r2;
        int $i0, $i1, i2, i3;
        long[] $r3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i2 = 0;

     label1:
        if i2 >= 3 goto label4;

        i3 = 0;

     label2:
        if i3 >= 3 goto label3;

        $r1 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $r2 = $r1[i2];

        $r2[i3] = 0;

        $r3 = r0.<com.android.internal.widget.LockPatternView: long[] mLineFadeStart>;

        $i0 = i3 * 3;

        $i1 = $i0 + i2;

        $r3[$i1] = 0L;

        i3 = i3 + 1;

        goto label2;

     label3:
        i2 = i2 + 1;

        goto label1;

     label4:
        return;
    }

    private com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float, float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1;
        com.android.internal.widget.LockPatternView$Cell r1, r6, r7;
        java.util.ArrayList r2;
        int i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, i14, i15, i16, i17, i19, $i20, i21;
        boolean $z0, $z2, $z3;
        boolean[][] $r3;
        boolean[] $r4;
        java.lang.Object $r5;
        byte b18, b22;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 = specialinvoke r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell checkForNewHit(float,float)>(f0, f1);

        if r1 == null goto label9;

        r6 = null;

        r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $z0 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label6;

        $i6 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        $i7 = $i6 - 1;

        $r5 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>($i7);

        r7 = (com.android.internal.widget.LockPatternView$Cell) $r5;

        $i9 = r1.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $i8 = r7.<com.android.internal.widget.LockPatternView$Cell: int row>;

        i0 = $i9 - $i8;

        $i11 = r1.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $i10 = r7.<com.android.internal.widget.LockPatternView$Cell: int column>;

        i1 = $i11 - $i10;

        i14 = r7.<com.android.internal.widget.LockPatternView$Cell: int row>;

        i15 = r7.<com.android.internal.widget.LockPatternView$Cell: int column>;

        i2 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        i16 = i14;

        if i2 != 2 goto label3;

        i16 = i14;

        $i13 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i13 == 1 goto label3;

        i17 = r7.<com.android.internal.widget.LockPatternView$Cell: int row>;

        if i0 <= 0 goto label1;

        b18 = 1;

        goto label2;

     label1:
        b18 = -1;

     label2:
        i16 = i17 + b18;

     label3:
        i19 = i15;

        $i20 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        if $i20 != 2 goto label5;

        i19 = i15;

        $i12 = staticinvoke <java.lang.Math: int abs(int)>(i0);

        if $i12 == 1 goto label5;

        i21 = r7.<com.android.internal.widget.LockPatternView$Cell: int column>;

        b22 = -1;

        if i1 <= 0 goto label4;

        b22 = 1;

     label4:
        i19 = i21 + b22;

     label5:
        r6 = staticinvoke <com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>(i16, i19);

     label6:
        if r6 == null goto label7;

        $r3 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $i4 = r6.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r4 = $r3[$i4];

        $i5 = r6.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $z2 = $r4[$i5];

        if $z2 != 0 goto label7;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)>(r6);

     label7:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void addCellToPattern(com.android.internal.widget.LockPatternView$Cell)>(r1);

        $z3 = r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback>;

        if $z3 == 0 goto label8;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean performHapticFeedback(int,int)>(1, 3);

     label8:
        return r1;

     label9:
        return null;
    }

    private void drawCellDrawable(android.graphics.Canvas, int, int, float, boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        android.graphics.Canvas r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i15, $i16;
        boolean z0;
        android.graphics.Rect $r3;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, f23, f24;
        android.graphics.drawable.Drawable $r4, $r5;
        byte $b17;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.graphics.Canvas;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        f23 := @parameter3: float;

        z0 := @parameter4: boolean;

        $r3 = new android.graphics.Rect;

        $i2 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $f3 = (float) $i2;

        $f1 = (float) i1;

        $f0 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f2 = $f1 * $f0;

        $f4 = $f3 + $f2;

        $i11 = (int) $f4;

        $i3 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        $f8 = (float) $i3;

        $f6 = (float) i0;

        $f5 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f7 = $f6 * $f5;

        $f9 = $f8 + $f7;

        $i10 = (int) $f9;

        $i4 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $f13 = (float) $i4;

        $i5 = i1 + 1;

        $f11 = (float) $i5;

        $f10 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f12 = $f11 * $f10;

        $f14 = $f13 + $f12;

        $i9 = (int) $f14;

        $i6 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        $f18 = (float) $i6;

        $i7 = i0 + 1;

        $f16 = (float) $i7;

        $f15 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f17 = $f16 * $f15;

        $f19 = $f18 + $f17;

        $i8 = (int) $f19;

        specialinvoke $r3.<android.graphics.Rect: void <init>(int,int,int,int)>($i11, $i10, $i9, $i8);

        $i12 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        $i13 = $i12 / 2;

        $f20 = (float) $i13;

        f24 = f23 / $f20;

        virtualinvoke r1.<android.graphics.Canvas: int save()>();

        virtualinvoke r1.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>($r3);

        $i15 = virtualinvoke $r3.<android.graphics.Rect: int centerX()>();

        $f21 = (float) $i15;

        $i16 = virtualinvoke $r3.<android.graphics.Rect: int centerY()>();

        $f22 = (float) $i16;

        virtualinvoke r1.<android.graphics.Canvas: void scale(float,float,float,float)>(f24, f24, $f21, $f22);

        if z0 == 0 goto label2;

        $b17 = f24 cmpl 1.0F;

        if $b17 <= 0 goto label1;

        goto label2;

     label1:
        $r5 = r0.<com.android.internal.widget.LockPatternView: android.graphics.drawable.Drawable mSelectedDrawable>;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

        goto label3;

     label2:
        $r4 = r0.<com.android.internal.widget.LockPatternView: android.graphics.drawable.Drawable mNotSelectedDrawable>;

        virtualinvoke $r4.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label3:
        virtualinvoke r1.<android.graphics.Canvas: void restore()>();

        return;
    }

    private void drawCircle(android.graphics.Canvas, float, float, float, boolean, float)
    {
        com.android.internal.widget.LockPatternView r0;
        android.graphics.Canvas r1;
        float f0, f1, f2, f3, $f4;
        boolean z0;
        android.graphics.Paint $r2, $r3, $r4;
        int $i0, $i1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.graphics.Canvas;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        z0 := @parameter4: boolean;

        f3 := @parameter5: float;

        $r2 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        $i0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getCurrentColor(boolean)>(z0);

        virtualinvoke $r2.<android.graphics.Paint: void setColor(int)>($i0);

        $r3 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        $f4 = 255.0F * f3;

        $i1 = (int) $f4;

        virtualinvoke $r3.<android.graphics.Paint: void setAlpha(int)>($i1);

        $r4 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>(f0, f1, f2, $r4);

        return;
    }

    private float getCenterXForColumn(int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, $i1;
        float f0, f1, f2, $f3, $f4, $f5, $f6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        f0 = (float) $i1;

        f1 = (float) i0;

        f2 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f3 = f1 * f2;

        $f5 = f0 + $f3;

        $f4 = f2 / 2.0F;

        $f6 = $f5 + $f4;

        return $f6;
    }

    private float getCenterYForRow(int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, $i1;
        float f0, f1, f2, $f3, $f4, $f5, $f6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        f0 = (float) $i1;

        f1 = (float) i0;

        f2 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f3 = f1 * f2;

        $f5 = f0 + $f3;

        $f4 = f2 / 2.0F;

        $f6 = $f5 + $f4;

        return $f6;
    }

    private int getColumnHit(float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11;
        int $i0, i3;
        byte $b1, $b2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        $f6 = r0.<com.android.internal.widget.LockPatternView: float mHitFactor>;

        f2 = $f6 * f1;

        $i0 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        f3 = (float) $i0;

        $f7 = f1 - f2;

        f4 = $f7 / 2.0F;

        i3 = 0;

     label1:
        if i3 >= 3 goto label3;

        $f8 = (float) i3;

        $f10 = $f8 * f1;

        $f9 = f3 + f4;

        f5 = $f10 + $f9;

        $b1 = f0 cmpl f5;

        if $b1 < 0 goto label2;

        $f11 = f5 + f2;

        $b2 = f0 cmpg $f11;

        if $b2 > 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return -1;
    }

    private int getCurrentColor(boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean z0, $z1, $z2;
        com.android.internal.widget.LockPatternView$DisplayMode $r2, $r3, $r4, $r5, $r6, $r7, $r10;
        int $i0, $i1, $i2;
        java.lang.StringBuilder $r8;
        java.lang.IllegalStateException $r12;
        java.lang.String $r13;

        r0 := @this: com.android.internal.widget.LockPatternView;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label5;

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        if $z1 != 0 goto label5;

        $z2 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z2 == 0 goto label1;

        goto label5;

     label1:
        $r3 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r2 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Wrong>;

        if $r3 != $r2 goto label2;

        $i1 = r0.<com.android.internal.widget.LockPatternView: int mErrorColor>;

        return $i1;

     label2:
        $r5 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r4 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        if $r5 == $r4 goto label4;

        $r7 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r6 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if $r7 != $r6 goto label3;

        goto label4;

     label3:
        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unknown display mode ");

        $r10 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = new java.lang.IllegalStateException;

        $r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r13);

        throw $r12;

     label4:
        $i0 = r0.<com.android.internal.widget.LockPatternView: int mSuccessColor>;

        return $i0;

     label5:
        $i2 = r0.<com.android.internal.widget.LockPatternView: int mRegularColor>;

        return $i2;
    }

    private int getRowHit(float)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11;
        int $i0, i3;
        byte $b1, $b2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        $f6 = r0.<com.android.internal.widget.LockPatternView: float mHitFactor>;

        f2 = $f6 * f1;

        $i0 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        f3 = (float) $i0;

        $f7 = f1 - f2;

        f4 = $f7 / 2.0F;

        i3 = 0;

     label1:
        if i3 >= 3 goto label3;

        $f8 = (float) i3;

        $f10 = $f8 * f1;

        $f9 = f3 + f4;

        f5 = $f10 + $f9;

        $b1 = f0 cmpl f5;

        if $b1 < 0 goto label2;

        $f11 = f5 + f2;

        $b2 = f0 cmpg $f11;

        if $b2 > 0 goto label2;

        return i3;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return -1;
    }

    private void handleActionDown(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        com.android.internal.widget.LockPatternView$DisplayMode $r1;
        android.view.MotionEvent r2;
        com.android.internal.widget.LockPatternView$Cell r3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r2 := @parameter0: android.view.MotionEvent;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void resetPattern()>();

        f0 = virtualinvoke r2.<android.view.MotionEvent: float getX()>();

        f1 = virtualinvoke r2.<android.view.MotionEvent: float getY()>();

        r3 = specialinvoke r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)>(f0, f1);

        if r3 == null goto label1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void setPatternInProgress(boolean)>(1);

        $r1 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternStarted()>();

        goto label2;

     label1:
        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void setPatternInProgress(boolean)>(0);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternCleared()>();

     label2:
        if r3 == null goto label3;

        $i0 = r3.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f2 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i0);

        $i1 = r3.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f3 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i1);

        $f6 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        f4 = $f6 / 2.0F;

        $f7 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        f5 = $f7 / 2.0F;

        $f8 = f2 - f4;

        $i5 = (int) $f8;

        $f9 = f3 - f5;

        $i4 = (int) $f9;

        $f10 = f2 + f4;

        $i3 = (int) $f10;

        $f11 = f3 + f5;

        $i2 = (int) $f11;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate(int,int,int,int)>($i5, $i4, $i3, $i2);

     label3:
        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = f0;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = f1;

        return;
    }

    private void handleActionMove(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        float f0, f1, f2, f3, f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, f17, f18, $f19, $f20, f21, $f22, $f23, f24, f25, f26, f27, f28, f29, f30, f31;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i14;
        com.android.internal.widget.LockPatternView$Cell r2, r14;
        android.graphics.Rect $r3, $r4, $r5, $r6, $r7, $r8, $r12;
        java.util.ArrayList $r9, $r10;
        java.lang.Object $r11;
        byte $b13, $b15;
        boolean z0, $z1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $i2 = r0.<com.android.internal.widget.LockPatternView: int mPathWidth>;

        f0 = (float) $i2;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getHistorySize()>();

        $r3 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        virtualinvoke $r3.<android.graphics.Rect: void setEmpty()>();

        z0 = 0;

        i14 = 0;

     label01:
        $i3 = i0 + 1;

        if i14 >= $i3 goto label12;

        if i14 >= i0 goto label02;

        f17 = virtualinvoke r1.<android.view.MotionEvent: float getHistoricalX(int)>(i14);

        goto label03;

     label02:
        f17 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

     label03:
        if i14 >= i0 goto label04;

        f18 = virtualinvoke r1.<android.view.MotionEvent: float getHistoricalY(int)>(i14);

        goto label05;

     label04:
        f18 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

     label05:
        r2 = specialinvoke r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell detectAndAddHit(float,float)>(f17, f18);

        $r9 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        i1 = virtualinvoke $r9.<java.util.ArrayList: int size()>();

        if r2 == null goto label06;

        if i1 != 1 goto label06;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void setPatternInProgress(boolean)>(1);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternStarted()>();

     label06:
        $f19 = r0.<com.android.internal.widget.LockPatternView: float mInProgressX>;

        $f20 = f17 - $f19;

        f21 = staticinvoke <java.lang.Math: float abs(float)>($f20);

        $f22 = r0.<com.android.internal.widget.LockPatternView: float mInProgressY>;

        $f23 = f18 - $f22;

        f24 = staticinvoke <java.lang.Math: float abs(float)>($f23);

        $b15 = f21 cmpl 0.0F;

        if $b15 > 0 goto label07;

        $b13 = f24 cmpl 0.0F;

        if $b13 <= 0 goto label08;

     label07:
        z0 = 1;

     label08:
        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z1 == 0 goto label11;

        if i1 <= 0 goto label11;

        $r10 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $i4 = i1 - 1;

        $r11 = virtualinvoke $r10.<java.util.ArrayList: java.lang.Object get(int)>($i4);

        r14 = (com.android.internal.widget.LockPatternView$Cell) $r11;

        $i5 = r14.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f25 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i5);

        $i6 = r14.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f26 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i6);

        $f7 = staticinvoke <java.lang.Math: float min(float,float)>(f25, f17);

        f1 = $f7 - f0;

        $f8 = staticinvoke <java.lang.Math: float max(float,float)>(f25, f17);

        f27 = $f8 + f0;

        $f9 = staticinvoke <java.lang.Math: float min(float,float)>(f26, f18);

        f28 = $f9 - f0;

        $f10 = staticinvoke <java.lang.Math: float max(float,float)>(f26, f18);

        f29 = $f10 + f0;

        if r2 == null goto label09;

        $f11 = r0.<com.android.internal.widget.LockPatternView: float mSquareWidth>;

        f2 = $f11 * 0.5F;

        $f12 = r0.<com.android.internal.widget.LockPatternView: float mSquareHeight>;

        f30 = $f12 * 0.5F;

        $i11 = r2.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f3 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i11);

        $i12 = r2.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f4 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i12);

        $f13 = f3 - f2;

        f31 = staticinvoke <java.lang.Math: float min(float,float)>($f13, f1);

        $f14 = f3 + f2;

        f27 = staticinvoke <java.lang.Math: float max(float,float)>($f14, f27);

        $f15 = f4 - f30;

        f28 = staticinvoke <java.lang.Math: float min(float,float)>($f15, f28);

        $f16 = f4 + f30;

        f29 = staticinvoke <java.lang.Math: float max(float,float)>($f16, f29);

        goto label10;

     label09:
        f31 = f1;

     label10:
        $r12 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        $i7 = staticinvoke <java.lang.Math: int round(float)>(f31);

        $i8 = staticinvoke <java.lang.Math: int round(float)>(f28);

        $i9 = staticinvoke <java.lang.Math: int round(float)>(f27);

        $i10 = staticinvoke <java.lang.Math: int round(float)>(f29);

        virtualinvoke $r12.<android.graphics.Rect: void union(int,int,int,int)>($i7, $i8, $i9, $i10);

        goto label11;

     label11:
        i14 = i14 + 1;

        goto label01;

     label12:
        $f5 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = $f5;

        $f6 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = $f6;

        if z0 == 0 goto label13;

        $r5 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate>;

        $r4 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        virtualinvoke $r5.<android.graphics.Rect: void union(android.graphics.Rect)>($r4);

        $r6 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate>;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate(android.graphics.Rect)>($r6);

        $r8 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mInvalidate>;

        $r7 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Rect mTmpInvalidateRect>;

        virtualinvoke $r8.<android.graphics.Rect: void set(android.graphics.Rect)>($r7);

     label13:
        return;
    }

    private void handleActionUp()
    {
        com.android.internal.widget.LockPatternView r0;
        java.util.ArrayList $r1;
        boolean $z0, $z1;
        com.android.internal.widget.LockPatternView$DisplayMode $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void setPatternInProgress(boolean)>(0);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void cancelLineAnimations()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternDetected()>();

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mFadePattern>;

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        $r2 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r2;

     label1:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

     label2:
        return;
    }

    private void notifyCellAdded()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener r1;
        com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper $r2;
        java.util.ArrayList $r3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if r1 == null goto label1;

        $r3 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        interfaceinvoke r1.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCellAdded(java.util.List)>($r3);

     label1:
        $r2 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper mExploreByTouchHelper>;

        virtualinvoke $r2.<com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper: void invalidateRoot()>();

        return;
    }

    private void notifyPatternCleared()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040439);

        r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternCleared()>();

     label1:
        return;
    }

    private void notifyPatternDetected()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener r1;
        java.util.ArrayList $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040440);

        r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if r1 == null goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        interfaceinvoke r1.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternDetected(java.util.List)>($r2);

     label1:
        return;
    }

    private void notifyPatternStarted()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void sendAccessEvent(int)>(17040441);

        r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener>;

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.internal.widget.LockPatternView$OnPatternListener: void onPatternStart()>();

     label1:
        return;
    }

    private void resetPattern()
    {
        com.android.internal.widget.LockPatternView r0;
        java.util.ArrayList $r1;
        com.android.internal.widget.LockPatternView$DisplayMode $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r1.<java.util.ArrayList: void clear()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        $r2 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r2;

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

        return;
    }

    private int resolveMeasured(int, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1, i2, i3, i4;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i2 := @parameter0: int;

        i0 := @parameter1: int;

        i1 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i2);

        i3 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i2);

        if i3 == -2147483648 goto label2;

        if i3 == 0 goto label1;

        i4 = i1;

        goto label3;

     label1:
        i4 = i0;

        goto label3;

     label2:
        i4 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i0);

     label3:
        return i4;
    }

    private void sendAccessEvent(int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0;
        android.content.Context $r1;
        java.lang.String $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.internal.widget.LockPatternView: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.String getString(int)>(i0);

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void announceForAccessibility(java.lang.CharSequence)>($r2);

        return;
    }

    private void setPatternInProgress(boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean z0;
        com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper $r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress> = z0;

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper mExploreByTouchHelper>;

        virtualinvoke $r1.<com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper: void invalidateRoot()>();

        return;
    }

    private void startCellActivatedAnimation(com.android.internal.widget.LockPatternView$Cell)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$Cell r1;
        com.android.internal.widget.LockPatternView$CellState r2;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        com.android.internal.widget.LockPatternView$CellState[][] $r3;
        com.android.internal.widget.LockPatternView$CellState[] $r4;
        com.android.internal.widget.LockPatternView$4 $r5;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        android.view.animation.Interpolator $r6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$Cell;

        $r3 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $i0 = r1.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r4 = $r3[$i0];

        $i1 = r1.<com.android.internal.widget.LockPatternView$Cell: int column>;

        r2 = $r4[$i1];

        $i2 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        $i3 = $i2 / 2;

        $f0 = (float) $i3;

        $i4 = r0.<com.android.internal.widget.LockPatternView: int mDotSizeActivated>;

        $i5 = $i4 / 2;

        $f1 = (float) $i5;

        $r6 = r0.<com.android.internal.widget.LockPatternView: android.view.animation.Interpolator mLinearOutSlowInInterpolator>;

        $r5 = new com.android.internal.widget.LockPatternView$4;

        specialinvoke $r5.<com.android.internal.widget.LockPatternView$4: void <init>(com.android.internal.widget.LockPatternView,com.android.internal.widget.LockPatternView$CellState)>(r0, r2);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startRadiusAnimation(float,float,long,android.view.animation.Interpolator,com.android.internal.widget.LockPatternView$CellState,java.lang.Runnable)>($f0, $f1, 96L, $r6, r2, $r5);

        $f2 = r0.<com.android.internal.widget.LockPatternView: float mInProgressX>;

        $f3 = r0.<com.android.internal.widget.LockPatternView: float mInProgressY>;

        $i6 = r1.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $f4 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i6);

        $i7 = r1.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $f5 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i7);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startLineEndAnimation(com.android.internal.widget.LockPatternView$CellState,float,float,float,float)>(r2, $f2, $f3, $f4, $f5);

        return;
    }

    private void startCellStateAnimationHw(com.android.internal.widget.LockPatternView$CellState, float, float, float, float, float, float, long, long, android.view.animation.Interpolator, java.lang.Runnable)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$CellState r1;
        float f0, f1, f2, f3, f4, f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17;
        long l0, l1;
        android.view.animation.Interpolator r2;
        java.lang.Runnable r3;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12;
        android.graphics.CanvasProperty $r4, $r5, $r6, $r11, $r12, $r13;
        android.graphics.Paint $r7, $r8, $r9, $r10;
        com.android.internal.widget.LockPatternView$3 $r14;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$CellState;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        f4 := @parameter5: float;

        f5 := @parameter6: float;

        l0 := @parameter7: long;

        l1 := @parameter8: long;

        r2 := @parameter9: android.view.animation.Interpolator;

        r3 := @parameter10: java.lang.Runnable;

        r1.<com.android.internal.widget.LockPatternView$CellState: float alpha> = f1;

        r1.<com.android.internal.widget.LockPatternView$CellState: float translationY> = f3;

        $i2 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        $i3 = $i2 / 2;

        $f6 = (float) $i3;

        $f7 = $f6 * f5;

        r1.<com.android.internal.widget.LockPatternView$CellState: float radius> = $f7;

        r1.<com.android.internal.widget.LockPatternView$CellState: boolean hwAnimating> = 1;

        $i4 = r1.<com.android.internal.widget.LockPatternView$CellState: int row>;

        $f8 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i4);

        $f9 = $f8 + f2;

        $r4 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createFloat(float)>($f9);

        r1.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwCenterY> = $r4;

        $i5 = r1.<com.android.internal.widget.LockPatternView$CellState: int col>;

        $f10 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i5);

        $r5 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createFloat(float)>($f10);

        r1.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwCenterX> = $r5;

        $i6 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        $i7 = $i6 / 2;

        $f11 = (float) $i7;

        $f12 = $f11 * f4;

        $r6 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createFloat(float)>($f12);

        r1.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwRadius> = $r6;

        $r7 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        $i8 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getCurrentColor(boolean)>(0);

        virtualinvoke $r7.<android.graphics.Paint: void setColor(int)>($i8);

        $r8 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        $f13 = 255.0F * f0;

        $i9 = (int) $f13;

        virtualinvoke $r8.<android.graphics.Paint: void setAlpha(int)>($i9);

        $r9 = new android.graphics.Paint;

        $r10 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPaint>;

        specialinvoke $r9.<android.graphics.Paint: void <init>(android.graphics.Paint)>($r10);

        $r11 = staticinvoke <android.graphics.CanvasProperty: android.graphics.CanvasProperty createPaint(android.graphics.Paint)>($r9);

        r1.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwPaint> = $r11;

        $r12 = r1.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwCenterY>;

        $i10 = r1.<com.android.internal.widget.LockPatternView$CellState: int row>;

        $f14 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i10);

        $f15 = $f14 + f3;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startRtFloatAnimation(android.graphics.CanvasProperty,float,long,long,android.view.animation.Interpolator)>($r12, $f15, l0, l1, r2);

        $r13 = r1.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwRadius>;

        $i11 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        $i12 = $i11 / 2;

        $f16 = (float) $i12;

        $f17 = $f16 * f5;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startRtFloatAnimation(android.graphics.CanvasProperty,float,long,long,android.view.animation.Interpolator)>($r13, $f17, l0, l1, r2);

        $r14 = new com.android.internal.widget.LockPatternView$3;

        specialinvoke $r14.<com.android.internal.widget.LockPatternView$3: void <init>(com.android.internal.widget.LockPatternView,com.android.internal.widget.LockPatternView$CellState,java.lang.Runnable)>(r0, r1, r3);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startRtAlphaAnimation(com.android.internal.widget.LockPatternView$CellState,float,long,long,android.view.animation.Interpolator,android.animation.Animator$AnimatorListener)>(r1, f1, l0, l1, r2, $r14);

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

        return;
    }

    private void startCellStateAnimationSw(com.android.internal.widget.LockPatternView$CellState, float, float, float, float, float, float, long, long, android.view.animation.Interpolator, java.lang.Runnable)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$CellState r1;
        float f0, f1, f2, f3, f4, f5, $f6, $f7;
        long l0, l1;
        android.view.animation.Interpolator r2;
        java.lang.Runnable r3;
        android.animation.ValueAnimator r4;
        int $i2, $i3;
        float[] $r5;
        com.android.internal.widget.LockPatternView$1 $r7;
        com.android.internal.widget.LockPatternView$2 $r8;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$CellState;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        f4 := @parameter5: float;

        f5 := @parameter6: float;

        l0 := @parameter7: long;

        l1 := @parameter8: long;

        r2 := @parameter9: android.view.animation.Interpolator;

        r3 := @parameter10: java.lang.Runnable;

        r1.<com.android.internal.widget.LockPatternView$CellState: float alpha> = f0;

        r1.<com.android.internal.widget.LockPatternView$CellState: float translationY> = f2;

        $i2 = r0.<com.android.internal.widget.LockPatternView: int mDotSize>;

        $i3 = $i2 / 2;

        $f6 = (float) $i3;

        $f7 = $f6 * f4;

        r1.<com.android.internal.widget.LockPatternView$CellState: float radius> = $f7;

        $r5 = newarray (float)[2];

        $r5[0] = 0.0F;

        $r5[1] = 1.0F;

        r4 = staticinvoke <android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>($r5);

        virtualinvoke r4.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>(l1);

        virtualinvoke r4.<android.animation.ValueAnimator: void setStartDelay(long)>(l0);

        virtualinvoke r4.<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>(r2);

        $r7 = new com.android.internal.widget.LockPatternView$1;

        specialinvoke $r7.<com.android.internal.widget.LockPatternView$1: void <init>(com.android.internal.widget.LockPatternView,com.android.internal.widget.LockPatternView$CellState,float,float,float,float,float,float)>(r0, r1, f0, f1, f2, f3, f4, f5);

        virtualinvoke r4.<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>($r7);

        $r8 = new com.android.internal.widget.LockPatternView$2;

        specialinvoke $r8.<com.android.internal.widget.LockPatternView$2: void <init>(com.android.internal.widget.LockPatternView,java.lang.Runnable)>(r0, r3);

        virtualinvoke r4.<android.animation.ValueAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r8);

        virtualinvoke r4.<android.animation.ValueAnimator: void start()>();

        return;
    }

    private void startLineEndAnimation(com.android.internal.widget.LockPatternView$CellState, float, float, float, float)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$CellState r1;
        float f0, f1, f2, f3;
        android.animation.ValueAnimator r2;
        float[] $r3;
        com.android.internal.widget.LockPatternView$5 $r4;
        com.android.internal.widget.LockPatternView$6 $r5;
        android.view.animation.Interpolator $r6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$CellState;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        $r3 = newarray (float)[2];

        $r3[0] = 0.0F;

        $r3[1] = 1.0F;

        r2 = staticinvoke <android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>($r3);

        $r4 = new com.android.internal.widget.LockPatternView$5;

        specialinvoke $r4.<com.android.internal.widget.LockPatternView$5: void <init>(com.android.internal.widget.LockPatternView,com.android.internal.widget.LockPatternView$CellState,float,float,float,float)>(r0, r1, f0, f2, f1, f3);

        virtualinvoke r2.<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>($r4);

        $r5 = new com.android.internal.widget.LockPatternView$6;

        specialinvoke $r5.<com.android.internal.widget.LockPatternView$6: void <init>(com.android.internal.widget.LockPatternView,com.android.internal.widget.LockPatternView$CellState)>(r0, r1);

        virtualinvoke r2.<android.animation.ValueAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r5);

        $r6 = r0.<com.android.internal.widget.LockPatternView: android.view.animation.Interpolator mFastOutSlowInInterpolator>;

        virtualinvoke r2.<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>($r6);

        virtualinvoke r2.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>(100L);

        virtualinvoke r2.<android.animation.ValueAnimator: void start()>();

        r1.<com.android.internal.widget.LockPatternView$CellState: android.animation.ValueAnimator lineAnimator> = r2;

        return;
    }

    private void startRadiusAnimation(float, float, long, android.view.animation.Interpolator, com.android.internal.widget.LockPatternView$CellState, java.lang.Runnable)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, f1;
        long l0;
        android.view.animation.Interpolator r1;
        com.android.internal.widget.LockPatternView$CellState r2;
        java.lang.Runnable r3;
        android.animation.ValueAnimator r4;
        float[] $r5;
        com.android.internal.widget.LockPatternView$7 $r6;
        com.android.internal.widget.LockPatternView$8 $r8;

        r0 := @this: com.android.internal.widget.LockPatternView;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        l0 := @parameter2: long;

        r1 := @parameter3: android.view.animation.Interpolator;

        r2 := @parameter4: com.android.internal.widget.LockPatternView$CellState;

        r3 := @parameter5: java.lang.Runnable;

        $r5 = newarray (float)[2];

        $r5[0] = f0;

        $r5[1] = f1;

        r4 = staticinvoke <android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>($r5);

        $r6 = new com.android.internal.widget.LockPatternView$7;

        specialinvoke $r6.<com.android.internal.widget.LockPatternView$7: void <init>(com.android.internal.widget.LockPatternView,com.android.internal.widget.LockPatternView$CellState)>(r0, r2);

        virtualinvoke r4.<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>($r6);

        if r3 == null goto label1;

        $r8 = new com.android.internal.widget.LockPatternView$8;

        specialinvoke $r8.<com.android.internal.widget.LockPatternView$8: void <init>(com.android.internal.widget.LockPatternView,java.lang.Runnable)>(r0, r3);

        virtualinvoke r4.<android.animation.ValueAnimator: void addListener(android.animation.Animator$AnimatorListener)>($r8);

     label1:
        virtualinvoke r4.<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>(r1);

        virtualinvoke r4.<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>(l0);

        virtualinvoke r4.<android.animation.ValueAnimator: void start()>();

        return;
    }

    private void startRtAlphaAnimation(com.android.internal.widget.LockPatternView$CellState, float, long, long, android.view.animation.Interpolator, android.animation.Animator$AnimatorListener)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0, $f1, $f2;
        long l0, l1;
        android.view.animation.Interpolator r1;
        android.animation.Animator$AnimatorListener r2;
        android.view.RenderNodeAnimator $r3;
        int $i2;
        android.graphics.CanvasProperty $r4;
        com.android.internal.widget.LockPatternView$CellState r6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r6 := @parameter0: com.android.internal.widget.LockPatternView$CellState;

        f0 := @parameter1: float;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        r1 := @parameter4: android.view.animation.Interpolator;

        r2 := @parameter5: android.animation.Animator$AnimatorListener;

        $r3 = new android.view.RenderNodeAnimator;

        $r4 = r6.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwPaint>;

        $f1 = 255.0F * f0;

        $i2 = (int) $f1;

        $f2 = (float) $i2;

        specialinvoke $r3.<android.view.RenderNodeAnimator: void <init>(android.graphics.CanvasProperty,int,float)>($r4, 1, $f2);

        virtualinvoke $r3.<android.view.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator setDuration(long)>(l1);

        virtualinvoke $r3.<android.view.RenderNodeAnimator: void setStartDelay(long)>(l0);

        virtualinvoke $r3.<android.view.RenderNodeAnimator: void setInterpolator(android.animation.TimeInterpolator)>(r1);

        virtualinvoke $r3.<android.view.RenderNodeAnimator: void setTarget(android.view.View)>(r0);

        virtualinvoke $r3.<android.view.RenderNodeAnimator: void addListener(android.animation.Animator$AnimatorListener)>(r2);

        virtualinvoke $r3.<android.view.RenderNodeAnimator: void start()>();

        return;
    }

    private void startRtFloatAnimation(android.graphics.CanvasProperty, float, long, long, android.view.animation.Interpolator)
    {
        com.android.internal.widget.LockPatternView r0;
        float f0;
        long l0, l1;
        android.view.animation.Interpolator r1;
        android.view.RenderNodeAnimator $r2;
        android.graphics.CanvasProperty r4;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r4 := @parameter0: android.graphics.CanvasProperty;

        f0 := @parameter1: float;

        l0 := @parameter2: long;

        l1 := @parameter3: long;

        r1 := @parameter4: android.view.animation.Interpolator;

        $r2 = new android.view.RenderNodeAnimator;

        specialinvoke $r2.<android.view.RenderNodeAnimator: void <init>(android.graphics.CanvasProperty,float)>(r4, f0);

        virtualinvoke $r2.<android.view.RenderNodeAnimator: android.graphics.animation.RenderNodeAnimator setDuration(long)>(l1);

        virtualinvoke $r2.<android.view.RenderNodeAnimator: void setStartDelay(long)>(l0);

        virtualinvoke $r2.<android.view.RenderNodeAnimator: void setInterpolator(android.animation.TimeInterpolator)>(r1);

        virtualinvoke $r2.<android.view.RenderNodeAnimator: void setTarget(android.view.View)>(r0);

        virtualinvoke $r2.<android.view.RenderNodeAnimator: void start()>();

        return;
    }

    public void clearPattern()
    {
        com.android.internal.widget.LockPatternView r0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void resetPattern()>();

        return;
    }

    public void disableInput()
    {
        com.android.internal.widget.LockPatternView r0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = 0;

        return;
    }

    protected boolean dispatchHoverEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        boolean $z0, $z1, $z2;
        com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper $r2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = specialinvoke r0.<android.view.View: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        $r2 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper mExploreByTouchHelper>;

        $z1 = virtualinvoke $r2.<com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper: boolean dispatchHoverEvent(android.view.MotionEvent)>(r1);

        $z2 = $z0 | $z1;

        return $z2;
    }

    public void enableInput()
    {
        com.android.internal.widget.LockPatternView r0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = 1;

        return;
    }

    public com.android.internal.widget.LockPatternView$CellState[][] getCellStates()
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$CellState[][] $r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        return $r1;
    }

    public boolean isEmpty()
    {
        com.android.internal.widget.LockPatternView r0;
        java.util.ArrayList $r1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $r1 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>();

        return $z0;
    }

    public boolean isInStealthMode()
    {
        com.android.internal.widget.LockPatternView r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        return $z0;
    }

    public boolean isTactileFeedbackEnabled()
    {
        com.android.internal.widget.LockPatternView r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback>;

        return $z0;
    }

    protected void onDraw(android.graphics.Canvas)
    {
        com.android.internal.widget.LockPatternView r0;
        android.graphics.Canvas r1;
        java.util.ArrayList r2;
        int i0, $i2, $i3, $i4, $i5, $i8, $i9, $i12, $i13, $i15, $i17, $i19, $i20, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i35, i36, i37, i38, i39, i40, i41;
        boolean[][] r3;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f19, $f20, $f21, $f22, $f23, $f24, $f25, $f26, f27, f28, f29, f30, f31, f32, f33, f34, f35, f36, f37;
        long l1, $l6, $l10, $l11, $l18, $l21, $l22, $l23;
        com.android.internal.widget.LockPatternView$DisplayMode $r4, $r5, $r9, $r10;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, z12;
        android.graphics.Paint $r6, $r7, $r8, $r16, $r17, $r18, $r19, $r42;
        java.lang.Object $r11, $r29, $r30, $r31;
        boolean[] $r12, $r22, $r28, $r32;
        byte $b7, $b14, $b16;
        long[] $r13, r39;
        com.android.internal.widget.LockPatternView$CellState[][] $r14, $r20;
        com.android.internal.widget.LockPatternView$CellState[] $r15, $r21;
        android.graphics.CanvasProperty $r23, $r24, $r25, $r26;
        android.graphics.RecordingCanvas $r27;
        com.android.internal.widget.LockPatternView$Cell r33, r34, r35, r38;
        android.graphics.Path r36;
        com.android.internal.widget.LockPatternView$CellState r37, r40;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        i0 = virtualinvoke r2.<java.util.ArrayList: int size()>();

        r3 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $r5 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r4 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if $r5 != $r4 goto label06;

        $l21 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l22 = r0.<com.android.internal.widget.LockPatternView: long mAnimatingPeriodStart>;

        $l23 = $l21 - $l22;

        $i26 = (int) $l23;

        $i24 = i0 + 1;

        $i25 = $i24 * 700;

        i35 = $i26 % $i25;

        i36 = i35 / 700;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        i37 = 0;

     label01:
        if i37 >= i36 goto label02;

        $r31 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i37);

        r33 = (com.android.internal.widget.LockPatternView$Cell) $r31;

        $i33 = virtualinvoke r33.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $r32 = r3[$i33];

        $i34 = virtualinvoke r33.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $r32[$i34] = 1;

        i37 = i37 + 1;

        goto label01;

     label02:
        if i36 <= 0 goto label03;

        if i36 >= i0 goto label03;

        z10 = 1;

        goto label04;

     label03:
        z10 = 0;

     label04:
        if z10 == 0 goto label05;

        $i27 = i35 % 700;

        $f20 = (float) $i27;

        f27 = $f20 / 700.0F;

        $i28 = i36 - 1;

        $r29 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>($i28);

        r34 = (com.android.internal.widget.LockPatternView$Cell) $r29;

        $i29 = r34.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f28 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i29);

        $i30 = r34.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f29 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i30);

        $r30 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i36);

        r35 = (com.android.internal.widget.LockPatternView$Cell) $r30;

        $i31 = r35.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i31);

        $i32 = r35.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f30 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i32);

        $f21 = f0 - f28;

        $f22 = $f21 * f27;

        $f23 = f28 + $f22;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = $f23;

        $f24 = f30 - f29;

        $f25 = $f24 * f27;

        $f26 = f29 + $f25;

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = $f26;

        goto label05;

     label05:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

     label06:
        r36 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Path mCurrentPath>;

        virtualinvoke r36.<android.graphics.Path: void rewind()>();

        i38 = 0;

     label07:
        if i38 >= 3 goto label13;

        f31 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>(i38);

        i39 = 0;

     label08:
        if i39 >= 3 goto label12;

        $r20 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $r21 = $r20[i38];

        r37 = $r21[i39];

        f32 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>(i39);

        f33 = r37.<com.android.internal.widget.LockPatternView$CellState: float translationY>;

        $z5 = r0.<com.android.internal.widget.LockPatternView: boolean mUseLockPatternDrawable>;

        if $z5 == 0 goto label09;

        $f19 = r37.<com.android.internal.widget.LockPatternView$CellState: float radius>;

        $r28 = r3[i38];

        $z9 = $r28[i39];

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void drawCellDrawable(android.graphics.Canvas,int,int,float,boolean)>(r1, i38, i39, $f19, $z9);

        goto label11;

     label09:
        $z6 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean isHardwareAccelerated()>();

        if $z6 == 0 goto label10;

        $z8 = r37.<com.android.internal.widget.LockPatternView$CellState: boolean hwAnimating>;

        if $z8 == 0 goto label10;

        $r27 = (android.graphics.RecordingCanvas) r1;

        $r26 = r37.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwCenterX>;

        $r25 = r37.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwCenterY>;

        $r24 = r37.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwRadius>;

        $r23 = r37.<com.android.internal.widget.LockPatternView$CellState: android.graphics.CanvasProperty hwPaint>;

        virtualinvoke $r27.<android.graphics.RecordingCanvas: void drawCircle(android.graphics.CanvasProperty,android.graphics.CanvasProperty,android.graphics.CanvasProperty,android.graphics.CanvasProperty)>($r26, $r25, $r24, $r23);

        goto label11;

     label10:
        $i19 = (int) f32;

        $f18 = (float) $i19;

        $i20 = (int) f31;

        $f14 = (float) $i20;

        $f17 = $f14 + f33;

        $f16 = r37.<com.android.internal.widget.LockPatternView$CellState: float radius>;

        $r22 = r3[i38];

        $z7 = $r22[i39];

        $f15 = r37.<com.android.internal.widget.LockPatternView$CellState: float alpha>;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void drawCircle(android.graphics.Canvas,float,float,float,boolean,float)>(r1, $f18, $f17, $f16, $z7, $f15);

     label11:
        i39 = i39 + 1;

        goto label08;

     label12:
        i38 = i38 + 1;

        goto label07;

     label13:
        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        z11 = $z0 ^ 1;

        if z11 == 0 goto label24;

        $r6 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $i2 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int getCurrentColor(boolean)>(1);

        virtualinvoke $r6.<android.graphics.Paint: void setColor(int)>($i2);

        z12 = 0;

        f34 = 0.0F;

        f35 = 0.0F;

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        i40 = 0;

     label14:
        if i40 >= i0 goto label22;

        $r11 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i40);

        r38 = (com.android.internal.widget.LockPatternView$Cell) $r11;

        $i4 = r38.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r12 = r3[$i4];

        $i5 = r38.<com.android.internal.widget.LockPatternView$Cell: int column>;

        $z2 = $r12[$i5];

        if $z2 != 0 goto label15;

        goto label22;

     label15:
        r39 = r0.<com.android.internal.widget.LockPatternView: long[] mLineFadeStart>;

        $l6 = r39[i40];

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label16;

        $l18 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r39[i40] = $l18;

     label16:
        $i8 = r38.<com.android.internal.widget.LockPatternView$Cell: int column>;

        f36 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i8);

        $i9 = r38.<com.android.internal.widget.LockPatternView$Cell: int row>;

        f37 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i9);

        if i40 == 0 goto label21;

        $r13 = r0.<com.android.internal.widget.LockPatternView: long[] mLineFadeStart>;

        $l10 = $r13[i40];

        $l11 = l1 - $l10;

        $f7 = (float) $l11;

        $f8 = $f7 * 1.5F;

        $f9 = staticinvoke <java.lang.Math: float min(float,float)>($f8, 255.0F);

        i41 = (int) $f9;

        $r14 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$CellState[][] mCellStates>;

        $i12 = r38.<com.android.internal.widget.LockPatternView$Cell: int row>;

        $r15 = $r14[$i12];

        $i13 = r38.<com.android.internal.widget.LockPatternView$Cell: int column>;

        r40 = $r15[$i13];

        virtualinvoke r36.<android.graphics.Path: void rewind()>();

        virtualinvoke r36.<android.graphics.Path: void moveTo(float,float)>(f34, f35);

        $f10 = r40.<com.android.internal.widget.LockPatternView$CellState: float lineEndX>;

        $b14 = $f10 cmpl 1.4E-45F;

        if $b14 == 0 goto label18;

        $f11 = r40.<com.android.internal.widget.LockPatternView$CellState: float lineEndY>;

        $b16 = $f11 cmpl 1.4E-45F;

        if $b16 == 0 goto label18;

        $f13 = r40.<com.android.internal.widget.LockPatternView$CellState: float lineEndX>;

        $f12 = r40.<com.android.internal.widget.LockPatternView$CellState: float lineEndY>;

        virtualinvoke r36.<android.graphics.Path: void lineTo(float,float)>($f13, $f12);

        $z4 = r0.<com.android.internal.widget.LockPatternView: boolean mFadePattern>;

        if $z4 == 0 goto label17;

        $r19 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $i17 = 255 - i41;

        virtualinvoke $r19.<android.graphics.Paint: void setAlpha(int)>($i17);

        goto label20;

     label17:
        $r18 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r18.<android.graphics.Paint: void setAlpha(int)>(255);

        goto label20;

     label18:
        virtualinvoke r36.<android.graphics.Path: void lineTo(float,float)>(f36, f37);

        $z3 = r0.<com.android.internal.widget.LockPatternView: boolean mFadePattern>;

        if $z3 == 0 goto label19;

        $r17 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $i15 = 255 - i41;

        virtualinvoke $r17.<android.graphics.Paint: void setAlpha(int)>($i15);

        goto label20;

     label19:
        $r16 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke $r16.<android.graphics.Paint: void setAlpha(int)>(255);

     label20:
        $r42 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>(r36, $r42);

        goto label21;

     label21:
        f34 = f36;

        f35 = f37;

        i40 = i40 + 1;

        z12 = 1;

        goto label14;

     label22:
        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z1 != 0 goto label23;

        $r10 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $r9 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if $r10 != $r9 goto label24;

     label23:
        if z12 == 0 goto label24;

        virtualinvoke r36.<android.graphics.Path: void rewind()>();

        virtualinvoke r36.<android.graphics.Path: void moveTo(float,float)>(f34, f35);

        $f2 = r0.<com.android.internal.widget.LockPatternView: float mInProgressX>;

        $f1 = r0.<com.android.internal.widget.LockPatternView: float mInProgressY>;

        virtualinvoke r36.<android.graphics.Path: void lineTo(float,float)>($f2, $f1);

        $r7 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        $f4 = r0.<com.android.internal.widget.LockPatternView: float mInProgressX>;

        $f3 = r0.<com.android.internal.widget.LockPatternView: float mInProgressY>;

        $f5 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float calculateLastSegmentAlpha(float,float,float,float)>($f4, $f3, f34, f35);

        $f6 = $f5 * 255.0F;

        $i3 = (int) $f6;

        virtualinvoke $r7.<android.graphics.Paint: void setAlpha(int)>($i3);

        $r8 = r0.<com.android.internal.widget.LockPatternView: android.graphics.Paint mPathPaint>;

        virtualinvoke r1.<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>(r36, $r8);

        goto label24;

     label24:
        return;
    }

    public boolean onHoverEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        int i0;
        android.content.Context $r2;
        android.view.accessibility.AccessibilityManager $r3;
        boolean $z0, $z2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $r2 = r0.<com.android.internal.widget.LockPatternView: android.content.Context mContext>;

        $r3 = staticinvoke <android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>($r2);

        $z0 = virtualinvoke $r3.<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>();

        if $z0 == 0 goto label5;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if i0 == 7 goto label3;

        if i0 == 9 goto label2;

        if i0 == 10 goto label1;

        goto label4;

     label1:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(1);

        goto label4;

     label2:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(0);

        goto label4;

     label3:
        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(2);

     label4:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean onTouchEvent(android.view.MotionEvent)>(r1);

        virtualinvoke r1.<android.view.MotionEvent: void setAction(int)>(i0);

     label5:
        $z2 = specialinvoke r0.<android.view.View: boolean onHoverEvent(android.view.MotionEvent)>(r1);

        return $z2;
    }

    protected void onMeasure(int, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1, i2, i3, i4, i5, i6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i0 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: int getSuggestedMinimumWidth()>();

        i3 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: int getSuggestedMinimumHeight()>();

        i4 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int resolveMeasured(int,int)>(i1, i0);

        i5 = specialinvoke r0.<com.android.internal.widget.LockPatternView: int resolveMeasured(int,int)>(i2, i3);

        i6 = r0.<com.android.internal.widget.LockPatternView: int mAspect>;

        if i6 == 0 goto label3;

        if i6 == 1 goto label2;

        if i6 == 2 goto label1;

        goto label4;

     label1:
        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i5);

        goto label4;

     label2:
        i5 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i5);

        goto label4;

     label3:
        i4 = staticinvoke <java.lang.Math: int min(int,int)>(i4, i5);

        i5 = i4;

     label4:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setMeasuredDimension(int,int)>(i4, i5);

        return;
    }

    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        com.android.internal.widget.LockPatternView r0;
        android.os.Parcelable $r1, r8;
        com.android.internal.widget.LockPatternView$DisplayMode $r2, $r7;
        java.lang.String $r3;
        byte[] $r4;
        java.util.List $r5;
        com.android.internal.widget.LockPatternView$DisplayMode[] $r6;
        int $i0;
        boolean $z0, $z1, $z2;
        com.android.internal.widget.LockPatternView$SavedState r9;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r8 := @parameter0: android.os.Parcelable;

        r9 = (com.android.internal.widget.LockPatternView$SavedState) r8;

        $r1 = virtualinvoke r9.<com.android.internal.widget.LockPatternView$SavedState: android.os.Parcelable getSuperState()>();

        specialinvoke r0.<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>($r1);

        $r2 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Correct>;

        $r3 = virtualinvoke r9.<com.android.internal.widget.LockPatternView$SavedState: java.lang.String getSerializedPattern()>();

        $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>();

        $r5 = staticinvoke <com.android.internal.widget.LockPatternUtils: java.util.List byteArrayToPattern(byte[])>($r4);

        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setPattern(com.android.internal.widget.LockPatternView$DisplayMode,java.util.List)>($r2, $r5);

        $r6 = staticinvoke <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode[] values()>();

        $i0 = virtualinvoke r9.<com.android.internal.widget.LockPatternView$SavedState: int getDisplayMode()>();

        $r7 = $r6[$i0];

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = $r7;

        $z0 = virtualinvoke r9.<com.android.internal.widget.LockPatternView$SavedState: boolean isInputEnabled()>();

        r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled> = $z0;

        $z1 = virtualinvoke r9.<com.android.internal.widget.LockPatternView$SavedState: boolean isInStealthMode()>();

        r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode> = $z1;

        $z2 = virtualinvoke r9.<com.android.internal.widget.LockPatternView$SavedState: boolean isTactileFeedbackEnabled()>();

        r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback> = $z2;

        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        com.android.internal.widget.LockPatternView r0;
        android.os.Parcelable r1;
        java.util.ArrayList $r2;
        com.android.internal.widget.LockPatternView$SavedState $r3;
        com.android.internal.widget.LockPatternView$DisplayMode $r4;
        int $i0;
        boolean $z0, $z1, $z2;
        java.lang.String $r5, r7;
        byte[] r6;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 = specialinvoke r0.<android.view.View: android.os.Parcelable onSaveInstanceState()>();

        $r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        r6 = staticinvoke <com.android.internal.widget.LockPatternUtils: byte[] patternToByteArray(java.util.List)>($r2);

        if r6 == null goto label1;

        $r5 = new java.lang.String;

        specialinvoke $r5.<java.lang.String: void <init>(byte[])>(r6);

        r7 = $r5;

        goto label2;

     label1:
        r7 = null;

     label2:
        $r3 = new com.android.internal.widget.LockPatternView$SavedState;

        $r4 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode>;

        $i0 = virtualinvoke $r4.<com.android.internal.widget.LockPatternView$DisplayMode: int ordinal()>();

        $z2 = r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled>;

        $z1 = r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode>;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback>;

        specialinvoke $r3.<com.android.internal.widget.LockPatternView$SavedState: void <init>(android.os.Parcelable,java.lang.String,int,boolean,boolean,boolean,com.android.internal.widget.LockPatternView$1)>(r1, r7, $i0, $z2, $z1, $z0, null);

        return $r3;
    }

    protected void onSizeChanged(int, int, int, int)
    {
        com.android.internal.widget.LockPatternView r0;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, i13, i14, i15;
        float $f0, $f1, $f2, $f3;
        com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper $r1;
        boolean $z0;
        android.graphics.drawable.Drawable $r2, $r3;

        r0 := @this: com.android.internal.widget.LockPatternView;

        i12 := @parameter0: int;

        i13 := @parameter1: int;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $i2 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $i4 = i12 - $i2;

        $i3 = r0.<com.android.internal.widget.LockPatternView: int mPaddingRight>;

        i14 = $i4 - $i3;

        $f0 = (float) i14;

        $f1 = $f0 / 3.0F;

        r0.<com.android.internal.widget.LockPatternView: float mSquareWidth> = $f1;

        $i5 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        $i7 = i13 - $i5;

        $i6 = r0.<com.android.internal.widget.LockPatternView: int mPaddingBottom>;

        i15 = $i7 - $i6;

        $f2 = (float) i15;

        $f3 = $f2 / 3.0F;

        r0.<com.android.internal.widget.LockPatternView: float mSquareHeight> = $f3;

        $r1 = r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper mExploreByTouchHelper>;

        virtualinvoke $r1.<com.android.internal.widget.LockPatternView$PatternExploreByTouchHelper: void invalidateRoot()>();

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mUseLockPatternDrawable>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.internal.widget.LockPatternView: android.graphics.drawable.Drawable mNotSelectedDrawable>;

        $i9 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $i8 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        virtualinvoke $r2.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i9, $i8, i14, i15);

        $r3 = r0.<com.android.internal.widget.LockPatternView: android.graphics.drawable.Drawable mSelectedDrawable>;

        $i11 = r0.<com.android.internal.widget.LockPatternView: int mPaddingLeft>;

        $i10 = r0.<com.android.internal.widget.LockPatternView: int mPaddingTop>;

        virtualinvoke $r3.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>($i11, $i10, i14, i15);

     label1:
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.LockPatternView r0;
        android.view.MotionEvent r1;
        int i0;
        boolean $z0, $z1, $z2;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: android.view.MotionEvent;

        $z0 = r0.<com.android.internal.widget.LockPatternView: boolean mInputEnabled>;

        if $z0 == 0 goto label7;

        $z1 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean isEnabled()>();

        if $z1 != 0 goto label1;

        goto label7;

     label1:
        i0 = virtualinvoke r1.<android.view.MotionEvent: int getAction()>();

        if i0 == 0 goto label6;

        if i0 == 1 goto label5;

        if i0 == 2 goto label4;

        if i0 == 3 goto label2;

        return 0;

     label2:
        $z2 = r0.<com.android.internal.widget.LockPatternView: boolean mPatternInProgress>;

        if $z2 == 0 goto label3;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void setPatternInProgress(boolean)>(0);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void resetPattern()>();

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void notifyPatternCleared()>();

     label3:
        return 1;

     label4:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void handleActionMove(android.view.MotionEvent)>(r1);

        return 1;

     label5:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void handleActionUp()>();

        return 1;

     label6:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void handleActionDown(android.view.MotionEvent)>(r1);

        return 1;

     label7:
        return 0;
    }

    public void setDisplayMode(com.android.internal.widget.LockPatternView$DisplayMode)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$DisplayMode $r1, r6;
        java.util.ArrayList $r2, $r4;
        int $i0, $i2, $i3;
        java.lang.IllegalStateException $r3;
        long $l1;
        java.lang.Object $r5;
        float $f0, $f1;
        com.android.internal.widget.LockPatternView$Cell r7;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r6 := @parameter0: com.android.internal.widget.LockPatternView$DisplayMode;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$DisplayMode mPatternDisplayMode> = r6;

        $r1 = <com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode Animate>;

        if r6 != $r1 goto label2;

        $r2 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>();

        if $i0 == 0 goto label1;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.internal.widget.LockPatternView: long mAnimatingPeriodStart> = $l1;

        $r4 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object get(int)>(0);

        r7 = (com.android.internal.widget.LockPatternView$Cell) $r5;

        $i2 = virtualinvoke r7.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $f0 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>($i2);

        r0.<com.android.internal.widget.LockPatternView: float mInProgressX> = $f0;

        $i3 = virtualinvoke r7.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $f1 = specialinvoke r0.<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>($i3);

        r0.<com.android.internal.widget.LockPatternView: float mInProgressY> = $f1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        goto label2;

     label1:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("you must have a pattern to animate if you want to set the display mode to animate");

        throw $r3;

     label2:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void invalidate()>();

        return;
    }

    public void setFadePattern(boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.LockPatternView: boolean mFadePattern> = z0;

        return;
    }

    public void setInStealthMode(boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.LockPatternView: boolean mInStealthMode> = z0;

        return;
    }

    public void setOnPatternListener(com.android.internal.widget.LockPatternView$OnPatternListener)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$OnPatternListener r1;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$OnPatternListener;

        r0.<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$OnPatternListener mOnPatternListener> = r1;

        return;
    }

    public void setPattern(com.android.internal.widget.LockPatternView$DisplayMode, java.util.List)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$DisplayMode r1;
        com.android.internal.widget.LockPatternView$Cell r2;
        java.util.ArrayList $r3, $r4;
        boolean $z1;
        java.lang.Object $r5;
        boolean[][] $r6;
        int $i0, $i1;
        boolean[] $r7;
        java.util.List r8;
        java.util.Iterator r9;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$DisplayMode;

        r8 := @parameter1: java.util.List;

        $r3 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r3.<java.util.ArrayList: void clear()>();

        $r4 = r0.<com.android.internal.widget.LockPatternView: java.util.ArrayList mPattern>;

        virtualinvoke $r4.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r8);

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>();

        r9 = interfaceinvoke r8.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r5 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.internal.widget.LockPatternView$Cell) $r5;

        $r6 = r0.<com.android.internal.widget.LockPatternView: boolean[][] mPatternDrawLookup>;

        $i0 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getRow()>();

        $r7 = $r6[$i0];

        $i1 = virtualinvoke r2.<com.android.internal.widget.LockPatternView$Cell: int getColumn()>();

        $r7[$i1] = 1;

        goto label1;

     label2:
        virtualinvoke r0.<com.android.internal.widget.LockPatternView: void setDisplayMode(com.android.internal.widget.LockPatternView$DisplayMode)>(r1);

        return;
    }

    public void setTactileFeedbackEnabled(boolean)
    {
        com.android.internal.widget.LockPatternView r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.LockPatternView: boolean mEnableHapticFeedback> = z0;

        return;
    }

    public void startCellStateAnimation(com.android.internal.widget.LockPatternView$CellState, float, float, float, float, float, float, long, long, android.view.animation.Interpolator, java.lang.Runnable)
    {
        com.android.internal.widget.LockPatternView r0;
        com.android.internal.widget.LockPatternView$CellState r1;
        float f0, f1, f2, f3, f4, f5;
        long l0, l1;
        android.view.animation.Interpolator r2;
        java.lang.Runnable r3;
        boolean $z0;

        r0 := @this: com.android.internal.widget.LockPatternView;

        r1 := @parameter0: com.android.internal.widget.LockPatternView$CellState;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 := @parameter3: float;

        f3 := @parameter4: float;

        f4 := @parameter5: float;

        f5 := @parameter6: float;

        l0 := @parameter7: long;

        l1 := @parameter8: long;

        r2 := @parameter9: android.view.animation.Interpolator;

        r3 := @parameter10: java.lang.Runnable;

        $z0 = virtualinvoke r0.<com.android.internal.widget.LockPatternView: boolean isHardwareAccelerated()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startCellStateAnimationHw(com.android.internal.widget.LockPatternView$CellState,float,float,float,float,float,float,long,long,android.view.animation.Interpolator,java.lang.Runnable)>(r1, f0, f1, f2, f3, f4, f5, l0, l1, r2, r3);

        goto label2;

     label1:
        specialinvoke r0.<com.android.internal.widget.LockPatternView: void startCellStateAnimationSw(com.android.internal.widget.LockPatternView$CellState,float,float,float,float,float,float,long,long,android.view.animation.Interpolator,java.lang.Runnable)>(r1, f0, f1, f2, f3, f4, f5, l0, l1, r2, r3);

     label2:
        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.widget.LockPatternView: int VIRTUAL_BASE_VIEW_ID> = 1;

        <com.android.internal.widget.LockPatternView: java.lang.String TAG> = "LockPatternView";

        <com.android.internal.widget.LockPatternView: boolean PROFILE_DRAWING> = 0;

        <com.android.internal.widget.LockPatternView: int MILLIS_PER_CIRCLE_ANIMATING> = 700;

        <com.android.internal.widget.LockPatternView: float LINE_FADE_ALPHA_MULTIPLIER> = 1.5F;

        <com.android.internal.widget.LockPatternView: float DRAG_THRESHHOLD> = 0.0F;

        <com.android.internal.widget.LockPatternView: boolean DEBUG_A11Y> = 0;

        <com.android.internal.widget.LockPatternView: int ASPECT_SQUARE> = 0;

        <com.android.internal.widget.LockPatternView: int ASPECT_LOCK_WIDTH> = 1;

        <com.android.internal.widget.LockPatternView: int ASPECT_LOCK_HEIGHT> = 2;

        return;
    }
}
