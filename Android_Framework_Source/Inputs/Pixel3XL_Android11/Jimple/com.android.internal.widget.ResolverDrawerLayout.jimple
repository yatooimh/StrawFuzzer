public class com.android.internal.widget.ResolverDrawerLayout extends android.view.ViewGroup
{
    private static final java.lang.String TAG;
    private int mActivePointerId;
    private int mAlwaysShowHeight;
    private float mCollapseOffset;
    private int mCollapsibleHeight;
    private int mCollapsibleHeightReserved;
    private boolean mDismissLocked;
    private boolean mDismissOnScrollerFinished;
    private float mDragRemainder;
    private float mInitialTouchX;
    private float mInitialTouchY;
    private boolean mIsDragging;
    private final boolean mIsMaxCollapsedHeightSmallExplicit;
    private float mLastTouchY;
    private int mMaxCollapsedHeight;
    private int mMaxCollapsedHeightSmall;
    private int mMaxWidth;
    private com.android.internal.logging.MetricsLogger mMetricsLogger;
    private final float mMinFlingVelocity;
    private android.widget.AbsListView mNestedListChild;
    private com.android.internal.widget.RecyclerView mNestedRecyclerChild;
    private com.android.internal.widget.ResolverDrawerLayout$OnCollapsedChangedListener mOnCollapsedChangedListener;
    private com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener mOnDismissedListener;
    private boolean mOpenOnClick;
    private boolean mOpenOnLayout;
    private com.android.internal.widget.ResolverDrawerLayout$RunOnDismissedListener mRunOnDismissedListener;
    private android.graphics.drawable.Drawable mScrollIndicatorDrawable;
    private final android.widget.OverScroller mScroller;
    private boolean mShowAtTop;
    private boolean mSmallCollapsed;
    private final android.graphics.Rect mTempRect;
    private int mTopOffset;
    private final android.view.ViewTreeObserver$OnTouchModeChangeListener mTouchModeChangeListener;
    private final int mTouchSlop;
    private int mUncollapsibleHeight;
    private final android.view.VelocityTracker mVelocityTracker;

    public void <init>(android.content.Context)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.content.Context r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.content.Context r1;
        android.util.AttributeSet r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.util.AttributeSet;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void <init>(android.content.Context,android.util.AttributeSet,int)>(r1, r2, 0);

        return;
    }

    public void <init>(android.content.Context, android.util.AttributeSet, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.graphics.Rect $r1;
        com.android.internal.widget.ResolverDrawerLayout$1 $r2;
        int[] $r3;
        int $i0, $i1, $i2, $i3, i4, i5;
        boolean $z0, $z1;
        android.content.Context $r4, r9;
        android.graphics.drawable.Drawable $r5;
        android.widget.OverScroller $r6;
        android.view.animation.Interpolator $r7;
        android.view.VelocityTracker $r8;
        float $f0;
        android.util.AttributeSet r10;
        android.content.res.TypedArray r11;
        android.view.ViewConfiguration r12;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r9 := @parameter0: android.content.Context;

        r10 := @parameter1: android.util.AttributeSet;

        i4 := @parameter2: int;

        specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)>(r9, r10, i4);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mDragRemainder> = 0.0F;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = -1;

        $r1 = new android.graphics.Rect;

        specialinvoke $r1.<android.graphics.Rect: void <init>()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.Rect mTempRect> = $r1;

        $r2 = new com.android.internal.widget.ResolverDrawerLayout$1;

        specialinvoke $r2.<com.android.internal.widget.ResolverDrawerLayout$1: void <init>(com.android.internal.widget.ResolverDrawerLayout)>(r0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.ViewTreeObserver$OnTouchModeChangeListener mTouchModeChangeListener> = $r2;

        $r3 = <com.android.internal.R$styleable: int[] ResolverDrawerLayout>;

        r11 = virtualinvoke r9.<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(r10, $r3, i4, 0);

        $i0 = virtualinvoke r11.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(0, -1);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxWidth> = $i0;

        i5 = virtualinvoke r11.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(1, 0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeight> = i5;

        $i1 = virtualinvoke r11.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(2, i5);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeightSmall> = $i1;

        $z0 = virtualinvoke r11.<android.content.res.TypedArray: boolean hasValue(int)>(2);

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsMaxCollapsedHeightSmallExplicit> = $z0;

        $z1 = virtualinvoke r11.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(3, 0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mShowAtTop> = $z1;

        virtualinvoke r11.<android.content.res.TypedArray: void recycle()>();

        $r4 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.graphics.drawable.Drawable getDrawable(int)>(17303417);

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.drawable.Drawable mScrollIndicatorDrawable> = $r5;

        $r6 = new android.widget.OverScroller;

        $r7 = staticinvoke <android.view.animation.AnimationUtils: android.view.animation.Interpolator loadInterpolator(android.content.Context,int)>(r9, 17563653);

        specialinvoke $r6.<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator)>(r9, $r7);

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller> = $r6;

        $r8 = staticinvoke <android.view.VelocityTracker: android.view.VelocityTracker obtain()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker> = $r8;

        r12 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>(r9);

        $i2 = virtualinvoke r12.<android.view.ViewConfiguration: int getScaledTouchSlop()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop> = $i2;

        $i3 = virtualinvoke r12.<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>();

        $f0 = (float) $i3;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mMinFlingVelocity> = $f0;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void setImportantForAccessibility(int)>(1);

        return;
    }

    private void abortAnimation()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.widget.OverScroller $r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        virtualinvoke $r1.<android.widget.OverScroller: void abortAnimation()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.ResolverDrawerLayout$RunOnDismissedListener mRunOnDismissedListener> = null;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mDismissOnScrollerFinished> = 0;

        return;
    }

    static boolean access$000(com.android.internal.widget.ResolverDrawerLayout, android.view.View)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        boolean $z0;

        r0 := @parameter0: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter1: android.view.View;

        $z0 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDescendantClipped(android.view.View)>(r1);

        return $z0;
    }

    static void access$100(com.android.internal.widget.ResolverDrawerLayout, int, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0;
        float f0;

        r0 := @parameter0: com.android.internal.widget.ResolverDrawerLayout;

        i0 := @parameter1: int;

        f0 := @parameter2: float;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i0, f0);

        return;
    }

    private void dismiss()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        com.android.internal.widget.ResolverDrawerLayout$RunOnDismissedListener $r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $r2 = new com.android.internal.widget.ResolverDrawerLayout$RunOnDismissedListener;

        specialinvoke $r2.<com.android.internal.widget.ResolverDrawerLayout$RunOnDismissedListener: void <init>(com.android.internal.widget.ResolverDrawerLayout,com.android.internal.widget.ResolverDrawerLayout$1)>(r0, null);

        r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.ResolverDrawerLayout$RunOnDismissedListener mRunOnDismissedListener> = $r2;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    private float distanceInfluenceForSnapDuration(float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float f0, $f1, $f2, $f3;
        double $d0, $d1, $d2, $d3;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        f0 := @parameter0: float;

        $f1 = f0 - 0.5F;

        $d0 = (double) $f1;

        $d1 = $d0 * 0.4712389167638204;

        $f2 = (float) $d1;

        $d2 = (double) $f2;

        $d3 = staticinvoke <java.lang.Math: double sin(double)>($d2);

        $f3 = (float) $d3;

        return $f3;
    }

    private android.view.View findChildUnder(float, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float f0, f1;
        android.view.View $r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        $r1 = staticinvoke <com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(android.view.ViewGroup,float,float)>(r0, f0, f1);

        return $r1;
    }

    private static android.view.View findChildUnder(android.view.ViewGroup, float, float)
    {
        android.view.ViewGroup r0;
        float f0, f1;
        android.view.View r1;
        int $i0, i1;
        boolean $z0;

        r0 := @parameter0: android.view.ViewGroup;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $i0 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>();

        i1 = $i0 - 1;

     label1:
        if i1 < 0 goto label3;

        r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i1);

        $z0 = staticinvoke <com.android.internal.widget.ResolverDrawerLayout: boolean isChildUnder(android.view.View,float,float)>(r1, f0, f1);

        if $z0 == 0 goto label2;

        return r1;

     label2:
        i1 = i1 + -1;

        goto label1;

     label3:
        return null;
    }

    private android.view.View findListChildUnder(float, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float $f0, $f1, f2, f3;
        boolean $z0, $z1;
        android.view.ViewGroup $r1, $r2;
        android.view.View $r3, r4;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        f2 := @parameter0: float;

        f3 := @parameter1: float;

        r4 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>(f2, f3);

     label1:
        if r4 == null goto label5;

        $f0 = virtualinvoke r4.<android.view.View: float getX()>();

        f2 = f2 - $f0;

        $f1 = virtualinvoke r4.<android.view.View: float getY()>();

        f3 = f3 - $f1;

        $z0 = r4 instanceof android.widget.AbsListView;

        if $z0 == 0 goto label2;

        $r2 = (android.view.ViewGroup) r4;

        $r3 = staticinvoke <com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(android.view.ViewGroup,float,float)>($r2, f2, f3);

        return $r3;

     label2:
        $z1 = r4 instanceof android.view.ViewGroup;

        if $z1 == 0 goto label3;

        $r1 = (android.view.ViewGroup) r4;

        r4 = staticinvoke <com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(android.view.ViewGroup,float,float)>($r1, f2, f3);

        goto label4;

     label3:
        r4 = null;

     label4:
        goto label1;

     label5:
        return r4;
    }

    private int getMaxCollapsedHeight()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean $z0;
        int $i0, $i1, i2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $z0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isSmallCollapsed()>();

        if $z0 == 0 goto label1;

        i2 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeightSmall>;

        goto label2;

     label1:
        i2 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeight>;

     label2:
        $i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeightReserved>;

        $i1 = i2 + $i0;

        return $i1;
    }

    private com.android.internal.logging.MetricsLogger getMetricsLogger()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        com.android.internal.logging.MetricsLogger $r1, $r2, $r3;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        if $r1 != null goto label1;

        $r3 = new com.android.internal.logging.MetricsLogger;

        specialinvoke $r3.<com.android.internal.logging.MetricsLogger: void <init>()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.logging.MetricsLogger mMetricsLogger> = $r3;

     label1:
        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        return $r2;
    }

    private static boolean isChildUnder(android.view.View, float, float)
    {
        android.view.View r0;
        float f0, f1, f2, f3, f4, f5, $f6, $f7;
        int $i0, $i1;
        byte $b2, $b3, $b4, $b5;
        boolean z0;

        r0 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        f2 = virtualinvoke r0.<android.view.View: float getX()>();

        f3 = virtualinvoke r0.<android.view.View: float getY()>();

        $i0 = virtualinvoke r0.<android.view.View: int getWidth()>();

        f4 = (float) $i0;

        $i1 = virtualinvoke r0.<android.view.View: int getHeight()>();

        f5 = (float) $i1;

        $b2 = f0 cmpl f2;

        if $b2 < 0 goto label1;

        $b3 = f1 cmpl f3;

        if $b3 < 0 goto label1;

        $f6 = f4 + f2;

        $b4 = f0 cmpg $f6;

        if $b4 >= 0 goto label1;

        $f7 = f5 + f3;

        $b5 = f1 cmpg $f7;

        if $b5 >= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isDescendantClipped(android.view.View)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9, i10;
        android.graphics.Rect $r1, $r3, r5;
        android.view.ViewParent $r2, r7;
        android.view.View r4, r8;
        boolean z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r4 := @parameter0: android.view.View;

        r5 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.Rect mTempRect>;

        i7 = virtualinvoke r4.<android.view.View: int getWidth()>();

        i8 = virtualinvoke r4.<android.view.View: int getHeight()>();

        z0 = 0;

        virtualinvoke r5.<android.graphics.Rect: void set(int,int,int,int)>(0, 0, i7, i8);

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.Rect mTempRect>;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>(r4, $r1);

        $r2 = virtualinvoke r4.<android.view.View: android.view.ViewParent getParent()>();

        if $r2 != r0 goto label1;

        goto label3;

     label1:
        r7 = virtualinvoke r4.<android.view.View: android.view.ViewParent getParent()>();

     label2:
        if r7 == r0 goto label3;

        r4 = (android.view.View) r7;

        r7 = virtualinvoke r4.<android.view.View: android.view.ViewParent getParent()>();

        goto label2;

     label3:
        $i1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getHeight()>();

        $i2 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getPaddingBottom()>();

        i9 = $i1 - $i2;

        i0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getChildCount()>();

        $i3 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int indexOfChild(android.view.View)>(r4);

        i10 = $i3 + 1;

     label4:
        if i10 >= i0 goto label7;

        r8 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View getChildAt(int)>(i10);

        $i5 = virtualinvoke r8.<android.view.View: int getVisibility()>();

        if $i5 != 8 goto label5;

        goto label6;

     label5:
        $i6 = virtualinvoke r8.<android.view.View: int getTop()>();

        i9 = staticinvoke <java.lang.Math: int min(int,int)>(i9, $i6);

     label6:
        i10 = i10 + 1;

        goto label4;

     label7:
        $r3 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.Rect mTempRect>;

        $i4 = $r3.<android.graphics.Rect: int bottom>;

        if $i4 <= i9 goto label8;

        z0 = 1;

     label8:
        return z0;
    }

    private boolean isDismissable()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener $r1;
        boolean $z0, z1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener mOnDismissedListener>;

        if $r1 == null goto label1;

        $z0 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mDismissLocked>;

        if $z0 != 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isDragging()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean $z0, z1;
        int $i0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $z0 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z0 != 0 goto label2;

        $i0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getNestedScrollAxes()>();

        if $i0 != 2 goto label1;

        goto label2;

     label1:
        z1 = 0;

        goto label3;

     label2:
        z1 = 1;

     label3:
        return z1;
    }

    private boolean isListChildUnderClipped(float, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float f0, f1;
        android.view.View r1;
        boolean $z0, z1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        f0 := @parameter0: float;

        f1 := @parameter1: float;

        r1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findListChildUnder(float,float)>(f0, f1);

        if r1 == null goto label1;

        $z0 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDescendantClipped(android.view.View)>(r1);

        if $z0 == 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isMoving()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean $z0, $z1, z2;
        android.widget.OverScroller $r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $z0 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z0 != 0 goto label2;

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        $z1 = virtualinvoke $r1.<android.widget.OverScroller: boolean isFinished()>();

        if $z1 != 0 goto label1;

        goto label2;

     label1:
        z2 = 0;

        goto label3;

     label2:
        z2 = 1;

     label3:
        return z2;
    }

    private boolean isNestedListChildScrolled()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.widget.AbsListView r1, $r2, $r3;
        int $i0, $i1, $i2;
        android.view.View $r4;
        boolean z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.AbsListView mNestedListChild>;

        z0 = 0;

        if r1 == null goto label2;

        $i0 = virtualinvoke r1.<android.widget.AbsListView: int getChildCount()>();

        if $i0 <= 0 goto label2;

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.AbsListView mNestedListChild>;

        $i1 = virtualinvoke $r2.<android.widget.AbsListView: int getFirstVisiblePosition()>();

        if $i1 > 0 goto label1;

        $r3 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.AbsListView mNestedListChild>;

        $r4 = virtualinvoke $r3.<android.widget.AbsListView: android.view.View getChildAt(int)>(0);

        $i2 = virtualinvoke $r4.<android.view.View: int getTop()>();

        if $i2 >= 0 goto label2;

     label1:
        z0 = 1;

        goto label2;

     label2:
        return z0;
    }

    private boolean isNestedRecyclerChildScrolled()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int $i0, $i1;
        com.android.internal.widget.RecyclerView $r1, r3;
        android.view.View $r2;
        boolean z0;
        com.android.internal.widget.RecyclerView$ViewHolder r4;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r3 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.RecyclerView mNestedRecyclerChild>;

        z0 = 0;

        if r3 == null goto label3;

        $i0 = virtualinvoke r3.<com.android.internal.widget.RecyclerView: int getChildCount()>();

        if $i0 <= 0 goto label3;

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.RecyclerView mNestedRecyclerChild>;

        r4 = virtualinvoke $r1.<com.android.internal.widget.RecyclerView: com.android.internal.widget.RecyclerView$ViewHolder findViewHolderForAdapterPosition(int)>(0);

        if r4 == null goto label1;

        $r2 = r4.<com.android.internal.widget.RecyclerView$ViewHolder: android.view.View itemView>;

        $i1 = virtualinvoke $r2.<android.view.View: int getTop()>();

        if $i1 >= 0 goto label2;

     label1:
        z0 = 1;

     label2:
        return z0;

     label3:
        return 0;
    }

    private void onCollapsedChanged(boolean)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean z0, $z1;
        com.android.internal.widget.ResolverDrawerLayout$OnCollapsedChangedListener r1;
        android.graphics.drawable.Drawable $r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        z0 := @parameter0: boolean;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void notifyViewAccessibilityStateChangedIfNeeded(int)>(0);

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.drawable.Drawable mScrollIndicatorDrawable>;

        if $r2 == null goto label1;

        $z1 = z0 ^ 1;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void setWillNotDraw(boolean)>($z1);

     label1:
        r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.ResolverDrawerLayout$OnCollapsedChangedListener mOnCollapsedChangedListener>;

        if r1 == null goto label2;

        interfaceinvoke r1.<com.android.internal.widget.ResolverDrawerLayout$OnCollapsedChangedListener: void onCollapsedChanged(boolean)>(z0);

     label2:
        return;
    }

    private void onSecondaryPointerUp(android.view.MotionEvent)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.MotionEvent r1;
        float f0, $f1;
        int $i0, $i1, $i2, i3;
        byte b4;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.MotionEvent;

        i3 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        $i0 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(i3);

        $i1 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId>;

        if $i0 != $i1 goto label3;

        if i3 != 0 goto label1;

        b4 = 1;

        goto label2;

     label1:
        b4 = 0;

     label2:
        $f1 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(b4);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = $f1;

        f0 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(b4);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = f0;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = f0;

        $i2 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(b4);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = $i2;

     label3:
        return;
    }

    private boolean performAccessibilityActionCommon(int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float f0, $f1, $f2, $f3, $f4;
        byte $b0, $b4, $b10;
        int $i1, $i2, $i3, $i5, $i6, $i7, i8, i9;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        i8 := @parameter0: int;

        if i8 == 4096 goto label3;

        if i8 == 262144 goto label3;

        if i8 == 524288 goto label2;

        if i8 == 1048576 goto label1;

        if i8 == 16908346 goto label3;

        goto label4;

     label1:
        $f3 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $i2 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i1 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mUncollapsibleHeight>;

        $i3 = $i2 + $i1;

        $f2 = (float) $i3;

        $b4 = $f3 cmpg $f2;

        if $b4 >= 0 goto label4;

        $z0 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDismissable()>();

        if $z0 == 0 goto label4;

        $i6 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i5 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mUncollapsibleHeight>;

        $i7 = $i6 + $i5;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>($i7, 0.0F);

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mDismissOnScrollerFinished> = 1;

        return 1;

     label2:
        f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        i9 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $f1 = (float) i9;

        $b0 = f0 cmpg $f1;

        if $b0 >= 0 goto label4;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i9, 0.0F);

        return 1;

     label3:
        $f4 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b10 = $f4 cmpl 0.0F;

        if $b10 == 0 goto label4;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(0, 0.0F);

        return 1;

     label4:
        return 0;
    }

    private float performDrag(float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, f13, f14, f15, f16, f17, $f18;
        int i0, $i1, $i2, $i3, $i5, $i9, $i10, $i12, i13, $i15, $i16;
        boolean $z0, $z1, z2, z3;
        byte $b4, $b6, $b7, $b8, $b11, b14;
        android.metrics.LogMaker $r2, $r3;
        android.view.ViewGroup$LayoutParams $r4;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams $r5;
        android.view.View r6;
        com.android.internal.logging.MetricsLogger r7;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        f13 := @parameter0: float;

        $z0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean getShowAtTop()>();

        if $z0 == 0 goto label01;

        return 0.0F;

     label01:
        $f2 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $f4 = $f2 + f13;

        $i2 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i1 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mUncollapsibleHeight>;

        $i3 = $i2 + $i1;

        $f3 = (float) $i3;

        $f5 = staticinvoke <java.lang.Math: float min(float,float)>($f4, $f3);

        f0 = staticinvoke <java.lang.Math: float max(float,float)>(0.0F, $f5);

        f14 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b4 = f0 cmpl f14;

        if $b4 == 0 goto label14;

        f15 = f0 - f14;

        $f8 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mDragRemainder>;

        $i5 = (int) f15;

        $f6 = (float) $i5;

        $f7 = f15 - $f6;

        f1 = $f8 + $f7;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mDragRemainder> = f1;

        $b6 = f1 cmpl 1.0F;

        if $b6 < 0 goto label02;

        $f12 = f1 - 1.0F;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mDragRemainder> = $f12;

        f16 = f15 + 1.0F;

        goto label03;

     label02:
        f16 = f15;

        $b7 = f1 cmpg -1.0F;

        if $b7 > 0 goto label03;

        $f11 = f1 + 1.0F;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mDragRemainder> = $f11;

        f16 = f15 - 1.0F;

     label03:
        i0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getChildCount()>();

        i13 = 0;

     label04:
        if i13 >= i0 goto label06;

        r6 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View getChildAt(int)>(i13);

        $r4 = virtualinvoke r6.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        $r5 = (com.android.internal.widget.ResolverDrawerLayout$LayoutParams) $r4;

        $z1 = $r5.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: boolean ignoreOffset>;

        if $z1 != 0 goto label05;

        $i12 = (int) f16;

        virtualinvoke r6.<android.view.View: void offsetTopAndBottom(int)>($i12);

     label05:
        i13 = i13 + 1;

        goto label04;

     label06:
        f17 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        b14 = 1;

        $b8 = f17 cmpl 0.0F;

        if $b8 == 0 goto label07;

        z2 = 1;

        goto label08;

     label07:
        z2 = 0;

     label08:
        r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset> = f0;

        $i9 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTopOffset>;

        $f9 = (float) $i9;

        $f10 = $f9 + f16;

        $i10 = (int) $f10;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mTopOffset> = $i10;

        $b11 = f0 cmpl 0.0F;

        if $b11 == 0 goto label09;

        z3 = 1;

        goto label10;

     label09:
        z3 = 0;

     label10:
        if z2 == z3 goto label13;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void onCollapsedChanged(boolean)>(z3);

        r7 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.logging.MetricsLogger getMetricsLogger()>();

        $r2 = new android.metrics.LogMaker;

        specialinvoke $r2.<android.metrics.LogMaker: void <init>(int)>(1651);

        if z3 == 0 goto label11;

        goto label12;

     label11:
        b14 = 0;

     label12:
        $r3 = virtualinvoke $r2.<android.metrics.LogMaker: android.metrics.LogMaker setSubtype(int)>(b14);

        virtualinvoke r7.<com.android.internal.logging.MetricsLogger: void write(android.metrics.LogMaker)>($r3);

     label13:
        $i15 = (int) f0;

        $f18 = f0 - f16;

        $i16 = (int) $f18;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void onScrollChanged(int,int,int,int)>(0, $i15, 0, $i16);

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void postInvalidateOnAnimation()>();

        return f16;

     label14:
        return 0.0F;
    }

    private void resetTouch()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.VelocityTracker $r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = -1;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging> = 0;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnClick> = 0;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = 0.0F;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = 0.0F;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = 0.0F;

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r1.<android.view.VelocityTracker: void clear()>();

        return;
    }

    private void smoothScrollTo(int, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0, i1, i2, $i3, $i5, $i6, i7, i8, i9, i10;
        float f0, f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, f17, f18, f19, f20;
        byte $b4;
        android.widget.OverScroller $r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        i7 := @parameter0: int;

        f17 := @parameter1: float;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void abortAnimation()>();

        $f2 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        i0 = (int) $f2;

        i1 = i7 - i0;

        if i1 != 0 goto label1;

        return;

     label1:
        i8 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getHeight()>();

        i2 = i8 / 2;

        $i3 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        $f3 = (float) $i3;

        $f5 = $f3 * 1.0F;

        $f4 = (float) i8;

        $f6 = $f5 / $f4;

        f18 = staticinvoke <java.lang.Math: float min(float,float)>(1.0F, $f6);

        f0 = (float) i2;

        f1 = (float) i2;

        f19 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: float distanceInfluenceForSnapDuration(float)>(f18);

        f20 = staticinvoke <java.lang.Math: float abs(float)>(f17);

        $b4 = f20 cmpl 0.0F;

        if $b4 <= 0 goto label2;

        $f12 = f1 * f19;

        $f13 = f0 + $f12;

        $f14 = $f13 / f20;

        $f15 = staticinvoke <java.lang.Math: float abs(float)>($f14);

        $f16 = $f15 * 1000.0F;

        $i6 = staticinvoke <java.lang.Math: int round(float)>($f16);

        i9 = $i6 * 4;

        goto label3;

     label2:
        $i5 = staticinvoke <java.lang.Math: int abs(int)>(i1);

        $f8 = (float) $i5;

        $f7 = (float) i8;

        $f9 = $f8 / $f7;

        $f10 = 1.0F + $f9;

        $f11 = $f10 * 100.0F;

        i9 = (int) $f11;

     label3:
        i10 = staticinvoke <java.lang.Math: int min(int,int)>(i9, 300);

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        virtualinvoke $r1.<android.widget.OverScroller: void startScroll(int,int,int,int,int)>(0, i0, 0, i1, i10);

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void postInvalidateOnAnimation()>();

        return;
    }

    private boolean updateCollapseOffset(int, boolean)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0, $i1, i4, i5, $i6;
        boolean $z1, $z2, z3, z4, z5, z6;
        float $f0, $f1, $f2, $f3, f4, $f5, $f6, $f7, $f8;
        byte $b2, $b3, $b7;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        i0 := @parameter0: int;

        z3 := @parameter1: boolean;

        i4 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        if i0 != i4 goto label01;

        return 0;

     label01:
        z4 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean getShowAtTop()>();

        f4 = 0.0F;

        if z4 == 0 goto label02;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset> = 0.0F;

        return 0;

     label02:
        $z1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isLaidOut()>();

        if $z1 == 0 goto label09;

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b2 = $f0 cmpl 0.0F;

        if $b2 == 0 goto label03;

        z5 = 1;

        goto label04;

     label03:
        z5 = 0;

     label04:
        if z3 == 0 goto label05;

        i5 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        if i0 >= i5 goto label05;

        $f2 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $f1 = (float) i0;

        $b3 = $f2 cmpl $f1;

        if $b3 != 0 goto label05;

        $f3 = (float) i5;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset> = $f3;

        goto label06;

     label05:
        $f5 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $i6 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $f6 = (float) $i6;

        $f7 = staticinvoke <java.lang.Math: float min(float,float)>($f5, $f6);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset> = $f7;

     label06:
        z6 = 0;

        $f8 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b7 = $f8 cmpl 0.0F;

        if $b7 == 0 goto label07;

        z6 = 1;

     label07:
        if z5 == z6 goto label08;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void onCollapsedChanged(boolean)>(z6);

     label08:
        goto label12;

     label09:
        $z2 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnLayout>;

        if $z2 == 0 goto label10;

        goto label11;

     label10:
        $i1 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        f4 = (float) $i1;

     label11:
        r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset> = f4;

     label12:
        return 1;
    }

    public void computeScroll()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean z0, $z1, $z2, $z3;
        android.widget.OverScroller $r1, $r2, $r3;
        int $i0;
        float $f0, $f1, $f2;
        com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener $r4;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        specialinvoke r0.<android.view.ViewGroup: void computeScroll()>();

        $r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        $z1 = virtualinvoke $r1.<android.widget.OverScroller: boolean computeScrollOffset()>();

        if $z1 == 0 goto label2;

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        z0 = virtualinvoke $r2.<android.widget.OverScroller: boolean isFinished()>();

        $r3 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        $i0 = virtualinvoke $r3.<android.widget.OverScroller: int getCurrY()>();

        $f1 = (float) $i0;

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $f2 = $f1 - $f0;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: float performDrag(float)>($f2);

        $z2 = z0 ^ 1;

        if $z2 == 0 goto label1;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void postInvalidateOnAnimation()>();

        goto label2;

     label1:
        $z3 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mDismissOnScrollerFinished>;

        if $z3 == 0 goto label2;

        $r4 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener mOnDismissedListener>;

        if $r4 == null goto label2;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void dismiss()>();

     label2:
        return;
    }

    void dispatchOnDismissed()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener r1;
        com.android.internal.widget.ResolverDrawerLayout$RunOnDismissedListener r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener mOnDismissedListener>;

        if r1 == null goto label1;

        interfaceinvoke r1.<com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener: void onDismissed()>();

     label1:
        r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.ResolverDrawerLayout$RunOnDismissedListener mRunOnDismissedListener>;

        if r2 == null goto label2;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean removeCallbacks(java.lang.Runnable)>(r2);

        r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.ResolverDrawerLayout$RunOnDismissedListener mRunOnDismissedListener> = null;

     label2:
        return;
    }

    protected android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams $r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $r1 = new com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        specialinvoke $r1.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: void <init>(int,int)>(-1, -2);

        return $r1;
    }

    public android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.util.AttributeSet r1;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams $r2;
        android.content.Context $r3;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.util.AttributeSet;

        $r2 = new com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        $r3 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.content.Context getContext()>();

        specialinvoke $r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>($r3, r1);

        return $r2;
    }

    protected android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.ViewGroup$LayoutParams r1;
        boolean $z0, $z1;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams $r2, $r3, $r5, $r6;
        android.view.ViewGroup$MarginLayoutParams $r4;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.ViewGroup$LayoutParams;

        $z0 = r1 instanceof com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        if $z0 == 0 goto label1;

        $r5 = new com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        $r6 = (com.android.internal.widget.ResolverDrawerLayout$LayoutParams) r1;

        specialinvoke $r5.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: void <init>(com.android.internal.widget.ResolverDrawerLayout$LayoutParams)>($r6);

        return $r5;

     label1:
        $z1 = r1 instanceof android.view.ViewGroup$MarginLayoutParams;

        if $z1 == 0 goto label2;

        $r3 = new com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        $r4 = (android.view.ViewGroup$MarginLayoutParams) r1;

        specialinvoke $r3.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>($r4);

        return $r3;

     label2:
        $r2 = new com.android.internal.widget.ResolverDrawerLayout$LayoutParams;

        specialinvoke $r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>(r1);

        return $r2;
    }

    public java.lang.CharSequence getAccessibilityClassName()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        java.lang.Class $r1;
        java.lang.String $r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $r1 = class "Landroid/widget/ScrollView;";

        $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>();

        return $r2;
    }

    public int getAlwaysShowHeight()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int $i0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mAlwaysShowHeight>;

        return $i0;
    }

    public boolean getShowAtTop()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $z0 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mShowAtTop>;

        return $z0;
    }

    public boolean isCollapsed()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        float $f0;
        byte $b0;
        boolean z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b0 = $f0 cmpl 0.0F;

        if $b0 <= 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isSmallCollapsed()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $z0 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mSmallCollapsed>;

        return $z0;
    }

    protected void onAttachedToWindow()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.ViewTreeObserver $r1;
        android.view.ViewTreeObserver$OnTouchModeChangeListener $r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        specialinvoke r0.<android.view.ViewGroup: void onAttachedToWindow()>();

        $r1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.ViewTreeObserver$OnTouchModeChangeListener mTouchModeChangeListener>;

        virtualinvoke $r1.<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>($r2);

        return;
    }

    protected void onDetachedFromWindow()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.ViewTreeObserver $r1;
        android.view.ViewTreeObserver$OnTouchModeChangeListener $r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        specialinvoke r0.<android.view.ViewGroup: void onDetachedFromWindow()>();

        $r1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.ViewTreeObserver getViewTreeObserver()>();

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.ViewTreeObserver$OnTouchModeChangeListener mTouchModeChangeListener>;

        virtualinvoke $r1.<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>($r2);

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void abortAnimation()>();

        return;
    }

    public void onDrawForeground(android.graphics.Canvas)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.graphics.Canvas r1;
        android.graphics.drawable.Drawable r2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.graphics.Canvas;

        r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.drawable.Drawable mScrollIndicatorDrawable>;

        if r2 == null goto label1;

        virtualinvoke r2.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r1);

     label1:
        specialinvoke r0.<android.view.ViewGroup: void onDrawForeground(android.graphics.Canvas)>(r1);

        return;
    }

    public void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.accessibility.AccessibilityNodeInfo r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7;
        int i0, $i2, $i3, $i5, $i6, $i7, $i10;
        boolean $z0, $z2, $z3;
        byte $b1, $b4, $b8, $b9, $b11;
        android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.accessibility.AccessibilityNodeInfo;

        specialinvoke r0.<android.view.ViewGroup: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>(r1);

        $z0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isEnabled()>();

        if $z0 == 0 goto label5;

        $f1 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b1 = $f1 cmpl 0.0F;

        if $b1 == 0 goto label1;

        $r5 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_FORWARD>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r5);

        $r6 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_EXPAND>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r6);

        $r7 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_DOWN>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r7);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>(1);

     label1:
        f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i2 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mUncollapsibleHeight>;

        $i3 = $i2 + i0;

        $f2 = (float) $i3;

        $b4 = f0 cmpg $f2;

        if $b4 >= 0 goto label3;

        $f5 = (float) i0;

        $b9 = f0 cmpg $f5;

        if $b9 < 0 goto label2;

        $z3 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDismissable()>();

        if $z3 == 0 goto label3;

     label2:
        $r4 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_SCROLL_UP>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r4);

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>(1);

     label3:
        $f6 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $i10 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $f7 = (float) $i10;

        $b11 = $f6 cmpg $f7;

        if $b11 >= 0 goto label4;

        $r3 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_COLLAPSE>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r3);

     label4:
        $f4 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $i6 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i5 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mUncollapsibleHeight>;

        $i7 = $i6 + $i5;

        $f3 = (float) $i7;

        $b8 = $f4 cmpg $f3;

        if $b8 >= 0 goto label5;

        $z2 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDismissable()>();

        if $z2 == 0 goto label5;

        $r2 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_DISMISS>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: void addAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r2);

     label5:
        $r8 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_ACCESSIBILITY_FOCUS>;

        virtualinvoke r1.<android.view.accessibility.AccessibilityNodeInfo: boolean removeAction(android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction)>($r8);

        return;
    }

    public boolean onInterceptTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.MotionEvent r1;
        float f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, f12, f13, f14, f15, f16;
        android.view.VelocityTracker $r2, $r4;
        boolean $z1, $z2, $z3, z4, $z5, z6;
        byte $b0, $b2;
        int $i1, $i3, $i4, $i5, i6, i7;
        android.view.View $r3;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.MotionEvent;

        i6 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        if i6 != 0 goto label01;

        $r4 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r4.<android.view.VelocityTracker: void clear()>();

     label01:
        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r2.<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>(r1);

        if i6 == 0 goto label06;

        if i6 == 1 goto label05;

        if i6 == 2 goto label03;

        if i6 == 3 goto label05;

        if i6 == 6 goto label02;

        goto label09;

     label02:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void onSecondaryPointerUp(android.view.MotionEvent)>(r1);

        goto label09;

     label03:
        f0 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f12 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $f2 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY>;

        f13 = f12 - $f2;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>(f13);

        $i1 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f4 = (float) $i1;

        $b2 = $f3 cmpl $f4;

        if $b2 <= 0 goto label04;

        $r3 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>(f0, f12);

        if $r3 == null goto label04;

        $i3 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getNestedScrollAxes()>();

        $i4 = 2 & $i3;

        if $i4 != 0 goto label04;

        $i5 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = $i5;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging> = 1;

        f14 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        i7 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f5 = (float) i7;

        $f9 = f14 - $f5;

        $f8 = f14 + f13;

        $f6 = (float) i7;

        $f7 = f14 + $f6;

        $f10 = staticinvoke <java.lang.Math: float min(float,float)>($f8, $f7);

        $f11 = staticinvoke <java.lang.Math: float max(float,float)>($f9, $f10);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = $f11;

     label04:
        goto label09;

     label05:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void resetTouch()>();

        goto label09;

     label06:
        f15 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f16 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = f15;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = f16;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = f16;

        $z1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isListChildUnderClipped(float,float)>(f15, f16);

        if $z1 == 0 goto label07;

        $f1 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b0 = $f1 cmpl 0.0F;

        if $b0 <= 0 goto label07;

        z4 = 1;

        goto label08;

     label07:
        z4 = 0;

     label08:
        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnClick> = z4;

     label09:
        $z5 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z5 == 0 goto label10;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void abortAnimation()>();

     label10:
        $z2 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z2 != 0 goto label11;

        z6 = 0;

        $z3 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnClick>;

        if $z3 == 0 goto label12;

     label11:
        z6 = 1;

     label12:
        return z6;
    }

    protected void onLayout(boolean, int, int, int, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, i16, i17, i18, i19, i20, i21, i23, i24, i25, i26, i27, i28, i29;
        android.view.View r1, r7;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams r2;
        android.graphics.drawable.Drawable $r3, $r4, $r5;
        android.view.ViewGroup$LayoutParams $r6;
        float $f0, $f1, $f2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        z0 := @parameter0: boolean;

        i15 := @parameter1: int;

        i16 := @parameter2: int;

        i17 := @parameter3: int;

        i18 := @parameter4: int;

        i19 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getWidth()>();

        r7 = null;

        i20 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTopOffset>;

        i0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getPaddingLeft()>();

        i1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getPaddingRight()>();

        i2 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getChildCount()>();

        i21 = 0;

     label1:
        if i21 >= i2 goto label6;

        r1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View getChildAt(int)>(i21);

        $r6 = virtualinvoke r1.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r2 = (com.android.internal.widget.ResolverDrawerLayout$LayoutParams) $r6;

        $z3 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: boolean hasNestedScrollIndicator>;

        if $z3 == 0 goto label2;

        r7 = r1;

     label2:
        $i6 = virtualinvoke r1.<android.view.View: int getVisibility()>();

        if $i6 != 8 goto label3;

        goto label5;

     label3:
        $i7 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int topMargin>;

        i23 = $i7 + i20;

        i24 = i23;

        $z4 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: boolean ignoreOffset>;

        if $z4 == 0 goto label4;

        $f1 = (float) i23;

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $f2 = $f1 - $f0;

        i24 = (int) $f2;

     label4:
        $i8 = virtualinvoke r1.<android.view.View: int getMeasuredHeight()>();

        i3 = $i8 + i24;

        i25 = virtualinvoke r1.<android.view.View: int getMeasuredWidth()>();

        $i9 = i19 - i1;

        $i10 = $i9 - i0;

        $i11 = $i10 - i25;

        $i12 = $i11 / 2;

        i4 = $i12 + i0;

        $i13 = i4 + i25;

        virtualinvoke r1.<android.view.View: void layout(int,int,int,int)>(i4, i24, $i13, i3);

        $i14 = r2.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int bottomMargin>;

        i20 = $i14 + i3;

     label5:
        i21 = i21 + 1;

        goto label1;

     label6:
        $r3 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.drawable.Drawable mScrollIndicatorDrawable>;

        if $r3 == null goto label8;

        if r7 == null goto label7;

        i26 = virtualinvoke r7.<android.view.View: int getLeft()>();

        i27 = virtualinvoke r7.<android.view.View: int getRight()>();

        i28 = virtualinvoke r7.<android.view.View: int getTop()>();

        $r4 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.drawable.Drawable mScrollIndicatorDrawable>;

        i29 = virtualinvoke $r4.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>();

        $r5 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.drawable.Drawable mScrollIndicatorDrawable>;

        $i5 = i28 - i29;

        virtualinvoke $r5.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i26, $i5, i27, i28);

        $z1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isCollapsed()>();

        $z2 = 1 ^ $z1;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void setWillNotDraw(boolean)>($z2);

        goto label8;

     label7:
        r0.<com.android.internal.widget.ResolverDrawerLayout: android.graphics.drawable.Drawable mScrollIndicatorDrawable> = null;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void setWillNotDraw(boolean)>(1);

     label8:
        return;
    }

    protected void onMeasure(int, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0, i1, i2, i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, i26, i27, i28, i29, i30, i31, i35, i36, i37, i38, i39, i42, i43, i44, i45, i46;
        boolean $z0, $z1, $z3, $z4, $z5;
        float $f0;
        android.view.ViewGroup$LayoutParams $r1, $r2;
        android.view.View r3, r5;
        com.android.internal.widget.ResolverDrawerLayout$LayoutParams r4, r6;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        i26 := @parameter0: int;

        i27 := @parameter1: int;

        i0 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i26);

        i1 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i27);

        i28 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxWidth>;

        if i28 < 0 goto label01;

        i29 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i28);

        goto label02;

     label01:
        i29 = i0;

     label02:
        i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i29, 1073741824);

        i3 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i1, 1073741824);

        i4 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getChildCount()>();

        i30 = 0;

        i31 = 0;

     label03:
        if i31 >= i4 goto label09;

        r3 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View getChildAt(int)>(i31);

        $r2 = virtualinvoke r3.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r4 = (com.android.internal.widget.ResolverDrawerLayout$LayoutParams) $r2;

        $z5 = r4.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: boolean alwaysShow>;

        if $z5 == 0 goto label08;

        $i20 = virtualinvoke r3.<android.view.View: int getVisibility()>();

        if $i20 == 8 goto label08;

        $i21 = r4.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int maxHeight>;

        if $i21 == -1 goto label06;

        i35 = i1 - i30;

        $i23 = r4.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int maxHeight>;

        i36 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i23, -2147483648);

        $i24 = r4.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int maxHeight>;

        if $i24 <= i35 goto label04;

        $i25 = r4.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int maxHeight>;

        i37 = $i25 - i35;

        goto label05;

     label04:
        i37 = 0;

     label05:
        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void measureChildWithMargins(android.view.View,int,int,int,int)>(r3, i2, 0, i36, i37);

        goto label07;

     label06:
        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void measureChildWithMargins(android.view.View,int,int,int,int)>(r3, i2, 0, i3, i30);

     label07:
        $i22 = virtualinvoke r3.<android.view.View: int getMeasuredHeight()>();

        i30 = i30 + $i22;

        goto label08;

     label08:
        i31 = i31 + 1;

        goto label03;

     label09:
        r0.<com.android.internal.widget.ResolverDrawerLayout: int mAlwaysShowHeight> = i30;

        i38 = 0;

        i39 = i30;

     label10:
        if i38 >= i4 goto label16;

        r5 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View getChildAt(int)>(i38);

        $r1 = virtualinvoke r5.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>();

        r6 = (com.android.internal.widget.ResolverDrawerLayout$LayoutParams) $r1;

        $z4 = r6.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: boolean alwaysShow>;

        if $z4 != 0 goto label15;

        $i14 = virtualinvoke r5.<android.view.View: int getVisibility()>();

        if $i14 == 8 goto label15;

        $i15 = r6.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int maxHeight>;

        if $i15 == -1 goto label13;

        i42 = i1 - i39;

        $i17 = r6.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int maxHeight>;

        i43 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i17, -2147483648);

        $i18 = r6.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int maxHeight>;

        if $i18 <= i42 goto label11;

        $i19 = r6.<com.android.internal.widget.ResolverDrawerLayout$LayoutParams: int maxHeight>;

        i44 = $i19 - i42;

        goto label12;

     label11:
        i44 = 0;

     label12:
        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void measureChildWithMargins(android.view.View,int,int,int,int)>(r5, i2, 0, i43, i44);

        goto label14;

     label13:
        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void measureChildWithMargins(android.view.View,int,int,int,int)>(r5, i2, 0, i3, i39);

     label14:
        $i16 = virtualinvoke r5.<android.view.View: int getMeasuredHeight()>();

        i39 = i39 + $i16;

        goto label15;

     label15:
        i38 = i38 + 1;

        goto label10;

     label16:
        i45 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i5 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mAlwaysShowHeight>;

        $i6 = i39 - $i5;

        $i7 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getMaxCollapsedHeight()>();

        $i8 = $i6 - $i7;

        i46 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i8);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight> = i46;

        $i9 = i39 - i46;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mUncollapsibleHeight> = $i9;

        $z0 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDragging()>();

        $z1 = $z0 ^ 1;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean updateCollapseOffset(int,boolean)>(i45, $z1);

        $z3 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean getShowAtTop()>();

        if $z3 == 0 goto label17;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mTopOffset> = 0;

        goto label18;

     label17:
        $i10 = i1 - i39;

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i10);

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $i12 = (int) $f0;

        $i13 = $i11 + $i12;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mTopOffset> = $i13;

     label18:
        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void setMeasuredDimension(int,int)>(i0, i1);

        return;
    }

    public boolean onNestedFling(android.view.View, float, float, boolean)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        float f0, $f1, $f2, $f3, f4, f5;
        boolean z0, $z1, $z2, $z3;
        byte $b0, $b1, $b2, $b5, $b6, $b11;
        int $i3, $i4, i7, i9, i10;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        f4 := @parameter1: float;

        f0 := @parameter2: float;

        z0 := @parameter3: boolean;

        i7 = 0;

        if z0 != 0 goto label8;

        $f1 = staticinvoke <java.lang.Math: float abs(float)>(f0);

        $f2 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mMinFlingVelocity>;

        $b0 = $f1 cmpl $f2;

        if $b0 <= 0 goto label8;

        $z1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean getShowAtTop()>();

        if $z1 == 0 goto label3;

        $z3 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDismissable()>();

        if $z3 == 0 goto label1;

        $b6 = f0 cmpl 0.0F;

        if $b6 <= 0 goto label1;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void abortAnimation()>();

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void dismiss()>();

        goto label7;

     label1:
        i9 = 0;

        $b5 = f0 cmpg 0.0F;

        if $b5 >= 0 goto label2;

        i9 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

     label2:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i9, f0);

        goto label7;

     label3:
        $z2 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDismissable()>();

        if $z2 == 0 goto label4;

        $b1 = f0 cmpg 0.0F;

        if $b1 >= 0 goto label4;

        f5 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        i10 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $f3 = (float) i10;

        $b2 = f5 cmpl $f3;

        if $b2 <= 0 goto label4;

        $i3 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mUncollapsibleHeight>;

        $i4 = i10 + $i3;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>($i4, f0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mDismissOnScrollerFinished> = 1;

        goto label7;

     label4:
        $b11 = f0 cmpl 0.0F;

        if $b11 <= 0 goto label5;

        goto label6;

     label5:
        i7 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

     label6:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i7, f0);

     label7:
        return 1;

     label8:
        return 0;
    }

    public boolean onNestedPreFling(android.view.View, float, float)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        float f0, f1, $f2, $f3;
        boolean $z0;
        byte $b0, $b1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        f0 := @parameter1: float;

        f1 := @parameter2: float;

        $z0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean getShowAtTop()>();

        if $z0 != 0 goto label1;

        $f2 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mMinFlingVelocity>;

        $b0 = f1 cmpl $f2;

        if $b0 <= 0 goto label1;

        $f3 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b1 = $f3 cmpl 0.0F;

        if $b1 == 0 goto label1;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(0, f1);

        return 1;

     label1:
        return 0;
    }

    public boolean onNestedPrePerformAccessibilityAction(android.view.View, int, android.os.Bundle)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        int i0;
        android.os.Bundle r2;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        r2 := @parameter2: android.os.Bundle;

        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean onNestedPrePerformAccessibilityAction(android.view.View,int,android.os.Bundle)>(r1, i0, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $z1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean performAccessibilityActionCommon(int)>(i0);

        return $z1;
    }

    public void onNestedPreScroll(android.view.View, int, int, int[])
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        int i0, i1, $i2, $i3;
        int[] r2;
        float $f0, $f1, $f2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: int[];

        if i1 <= 0 goto label1;

        $i2 = neg i1;

        $f0 = (float) $i2;

        $f1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: float performDrag(float)>($f0);

        $f2 = neg $f1;

        $i3 = (int) $f2;

        r2[1] = $i3;

     label1:
        return;
    }

    public void onNestedScroll(android.view.View, int, int, int, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        int i0, i1, i2, i3, $i4;
        float $f0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        i3 := @parameter4: int;

        if i3 >= 0 goto label1;

        $i4 = neg i3;

        $f0 = (float) $i4;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: float performDrag(float)>($f0);

     label1:
        return;
    }

    public void onNestedScrollAccepted(android.view.View, android.view.View, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1, r2;
        int i0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        specialinvoke r0.<android.view.ViewGroup: void onNestedScrollAccepted(android.view.View,android.view.View,int)>(r1, r2, i0);

        return;
    }

    protected void onRestoreInstanceState(android.os.Parcelable)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.os.Parcelable $r1, r2;
        boolean $z0;
        int $i0;
        com.android.internal.widget.ResolverDrawerLayout$SavedState r3;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r2 := @parameter0: android.os.Parcelable;

        r3 = (com.android.internal.widget.ResolverDrawerLayout$SavedState) r2;

        $r1 = virtualinvoke r3.<com.android.internal.widget.ResolverDrawerLayout$SavedState: android.os.Parcelable getSuperState()>();

        specialinvoke r0.<android.view.ViewGroup: void onRestoreInstanceState(android.os.Parcelable)>($r1);

        $z0 = r3.<com.android.internal.widget.ResolverDrawerLayout$SavedState: boolean open>;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnLayout> = $z0;

        $i0 = staticinvoke <com.android.internal.widget.ResolverDrawerLayout$SavedState: int access$300(com.android.internal.widget.ResolverDrawerLayout$SavedState)>(r3);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeightReserved> = $i0;

        return;
    }

    protected android.os.Parcelable onSaveInstanceState()
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        com.android.internal.widget.ResolverDrawerLayout$SavedState $r2;
        android.os.Parcelable $r3;
        int $i0, $i3;
        float $f0;
        byte $b2;
        boolean z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        $r2 = new com.android.internal.widget.ResolverDrawerLayout$SavedState;

        $r3 = specialinvoke r0.<android.view.ViewGroup: android.os.Parcelable onSaveInstanceState()>();

        specialinvoke $r2.<com.android.internal.widget.ResolverDrawerLayout$SavedState: void <init>(android.os.Parcelable)>($r3);

        $i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        if $i0 <= 0 goto label1;

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        $b2 = $f0 cmpl 0.0F;

        if $b2 != 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        $r2.<com.android.internal.widget.ResolverDrawerLayout$SavedState: boolean open> = z0;

        $i3 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeightReserved>;

        staticinvoke <com.android.internal.widget.ResolverDrawerLayout$SavedState: int access$302(com.android.internal.widget.ResolverDrawerLayout$SavedState,int)>($r2, $i3);

        return $r2;
    }

    public boolean onStartNestedScroll(android.view.View, android.view.View, int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1, r2;
        int i0, $i1;
        boolean $z0, $z1;
        com.android.internal.widget.RecyclerView $r3;
        android.widget.AbsListView $r4;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        i0 := @parameter2: int;

        $i1 = i0 & 2;

        if $i1 == 0 goto label3;

        $z0 = r2 instanceof android.widget.AbsListView;

        if $z0 == 0 goto label1;

        $r4 = (android.widget.AbsListView) r2;

        r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.AbsListView mNestedListChild> = $r4;

     label1:
        $z1 = r2 instanceof com.android.internal.widget.RecyclerView;

        if $z1 == 0 goto label2;

        $r3 = (com.android.internal.widget.RecyclerView) r2;

        r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.RecyclerView mNestedRecyclerChild> = $r3;

     label2:
        return 1;

     label3:
        return 0;
    }

    public void onStopNestedScroll(android.view.View)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1;
        float f0, $f1;
        int i0, $i1, i3;
        android.widget.OverScroller $r2;
        boolean $z0;
        byte $b2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: void onStopNestedScroll(android.view.View)>(r1);

        $r2 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.OverScroller mScroller>;

        $z0 = virtualinvoke $r2.<android.widget.OverScroller: boolean isFinished()>();

        if $z0 == 0 goto label2;

        f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        i3 = i0;

        $i1 = i0 / 2;

        $f1 = (float) $i1;

        $b2 = f0 cmpg $f1;

        if $b2 >= 0 goto label1;

        i3 = 0;

     label1:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i3, 0.0F);

     label2:
        return;
    }

    public boolean onTouchEvent(android.view.MotionEvent)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.MotionEvent r1;
        int i0, $i3, $i4, $i5, $i9, $i10, $i13, $i15, $i17, $i20, $i21, $i22, $i24, $i26, $i27, $i29, i31, i32, i33, i34, i35, i36, $i37, i39, i40, i42, i43;
        android.view.VelocityTracker $r3, $r17, $r18;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8, $f9, $f10, $f11, $f12, $f13, $f14, $f15, $f16, $f17, $f18, $f20, $f21, $f22, $f23, $f24, $f25, $f26, $f27, $f28, $f29, $f30, $f31, $f32, $f33, $f34, f35, f36, f37, f38, f39, f40, f41, f42, f43, $f44, $f45, f46, f47, f48, f49;
        android.view.View $r4, $r7, $r8, $r11;
        boolean $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, z11, z12, $z13, z14, $z15, $z16, z17;
        byte $b6, $b7, $b8, $b11, $b12, $b14, $b16, $b18, $b19, $b23, $b28, $b38, $b41;
        com.android.internal.widget.RecyclerView $r5, $r9;
        android.widget.AbsListView $r6, $r10;
        java.lang.StringBuilder $r12;
        java.lang.String $r16;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.MotionEvent;

        i0 = virtualinvoke r1.<android.view.MotionEvent: int getActionMasked()>();

        $r3 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r3.<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>(r1);

        z11 = 0;

        z12 = 1;

        i31 = 0;

        if i0 == 0 goto label28;

        if i0 == 1 goto label13;

        if i0 == 2 goto label07;

        if i0 == 3 goto label03;

        if i0 == 5 goto label02;

        if i0 == 6 goto label01;

        goto label36;

     label01:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void onSecondaryPointerUp(android.view.MotionEvent)>(r1);

        goto label36;

     label02:
        i32 = virtualinvoke r1.<android.view.MotionEvent: int getActionIndex()>();

        $i29 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(i32);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = $i29;

        $f34 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(i32);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = $f34;

        f35 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(i32);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = f35;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = f35;

        goto label36;

     label03:
        $z10 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z10 == 0 goto label06;

        f36 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        i33 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i27 = i33 / 2;

        $f33 = (float) $i27;

        $b28 = f36 cmpg $f33;

        if $b28 >= 0 goto label04;

        goto label05;

     label04:
        i31 = i33;

     label05:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i31, 0.0F);

     label06:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void resetTouch()>();

        return 1;

     label07:
        $i17 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId>;

        i34 = virtualinvoke r1.<android.view.MotionEvent: int findPointerIndex(int)>($i17);

        i35 = i34;

        if i34 >= 0 goto label08;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad pointer id ");

        $i24 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i24);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", resetting");

        $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("ResolverDrawerLayout", $r16);

        i35 = 0;

        $i26 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = $i26;

        $f32 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = $f32;

        f37 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = f37;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = f37;

     label08:
        f38 = virtualinvoke r1.<android.view.MotionEvent: float getX(int)>(i35);

        f39 = virtualinvoke r1.<android.view.MotionEvent: float getY(int)>(i35);

        z11 = 0;

        $z7 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z7 != 0 goto label09;

        $f22 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY>;

        f40 = f39 - $f22;

        z11 = 0;

        $f23 = staticinvoke <java.lang.Math: float abs(float)>(f40);

        $i22 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f24 = (float) $i22;

        $b23 = $f23 cmpl $f24;

        if $b23 <= 0 goto label09;

        z11 = 0;

        $r11 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>(f38, f39);

        if $r11 == null goto label09;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging> = 1;

        z11 = 1;

        f41 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        i36 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f25 = (float) i36;

        $f29 = f41 - $f25;

        $f28 = f41 + f40;

        $f26 = (float) i36;

        $f27 = f41 + $f26;

        $f30 = staticinvoke <java.lang.Math: float min(float,float)>($f28, $f27);

        $f31 = staticinvoke <java.lang.Math: float max(float,float)>($f29, $f30);

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = $f31;

     label09:
        $z13 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z13 == 0 goto label12;

        $f18 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        f42 = f39 - $f18;

        $b18 = f42 cmpl 0.0F;

        if $b18 <= 0 goto label10;

        $z9 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isNestedListChildScrolled()>();

        if $z9 == 0 goto label10;

        $r10 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.AbsListView mNestedListChild>;

        $f21 = neg f42;

        $i21 = (int) $f21;

        virtualinvoke $r10.<android.widget.AbsListView: void smoothScrollBy(int,int)>($i21, 0);

        goto label12;

     label10:
        $b19 = f42 cmpl 0.0F;

        if $b19 <= 0 goto label11;

        $z8 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isNestedRecyclerChildScrolled()>();

        if $z8 == 0 goto label11;

        $r9 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.RecyclerView mNestedRecyclerChild>;

        $f20 = neg f42;

        $i20 = (int) $f20;

        virtualinvoke $r9.<com.android.internal.widget.RecyclerView: void scrollBy(int,int)>(0, $i20);

        goto label12;

     label11:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: float performDrag(float)>(f42);

     label12:
        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = f39;

        goto label36;

     label13:
        z14 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging> = 0;

        if z14 != 0 goto label14;

        $f15 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX>;

        $f14 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY>;

        $r7 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>($f15, $f14);

        if $r7 != null goto label14;

        $f16 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f17 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $r8 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>($f16, $f17);

        if $r8 != null goto label14;

        $z6 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDismissable()>();

        if $z6 == 0 goto label14;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void dispatchOnDismissed()>();

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void resetTouch()>();

        return 1;

     label14:
        $z15 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnClick>;

        if $z15 == 0 goto label15;

        $f4 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        $f5 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX>;

        $f6 = $f4 - $f5;

        $f7 = staticinvoke <java.lang.Math: float abs(float)>($f6);

        $i13 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f8 = (float) $i13;

        $b14 = $f7 cmpg $f8;

        if $b14 >= 0 goto label15;

        $f9 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        $f10 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY>;

        $f11 = $f9 - $f10;

        $f12 = staticinvoke <java.lang.Math: float abs(float)>($f11);

        $i15 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mTouchSlop>;

        $f13 = (float) $i15;

        $b16 = $f12 cmpg $f13;

        if $b16 >= 0 goto label15;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(0, 0.0F);

        return 1;

     label15:
        $r17 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        virtualinvoke $r17.<android.view.VelocityTracker: void computeCurrentVelocity(int)>(1000);

        $r18 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.VelocityTracker mVelocityTracker>;

        $i37 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId>;

        f43 = virtualinvoke $r18.<android.view.VelocityTracker: float getYVelocity(int)>($i37);

        $f44 = staticinvoke <java.lang.Math: float abs(float)>(f43);

        $f45 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mMinFlingVelocity>;

        $b38 = $f44 cmpl $f45;

        if $b38 <= 0 goto label25;

        $z2 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean getShowAtTop()>();

        if $z2 == 0 goto label19;

        $z5 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDismissable()>();

        if $z5 == 0 goto label16;

        $b12 = f43 cmpg 0.0F;

        if $b12 >= 0 goto label16;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void abortAnimation()>();

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void dismiss()>();

        goto label27;

     label16:
        $b11 = f43 cmpg 0.0F;

        if $b11 >= 0 goto label17;

        i39 = 0;

        goto label18;

     label17:
        i39 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

     label18:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i39, f43);

        goto label27;

     label19:
        $z3 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDismissable()>();

        if $z3 == 0 goto label20;

        $b7 = f43 cmpl 0.0F;

        if $b7 <= 0 goto label20;

        f46 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        i40 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $f3 = (float) i40;

        $b8 = f46 cmpl $f3;

        if $b8 <= 0 goto label20;

        $i9 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mUncollapsibleHeight>;

        $i10 = i40 + $i9;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>($i10, f43);

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mDismissOnScrollerFinished> = 1;

        goto label27;

     label20:
        $z16 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isNestedListChildScrolled()>();

        if $z16 == 0 goto label21;

        $r6 = r0.<com.android.internal.widget.ResolverDrawerLayout: android.widget.AbsListView mNestedListChild>;

        virtualinvoke $r6.<android.widget.AbsListView: void smoothScrollToPosition(int)>(0);

        goto label22;

     label21:
        $z4 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isNestedRecyclerChildScrolled()>();

        if $z4 == 0 goto label22;

        $r5 = r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.RecyclerView mNestedRecyclerChild>;

        virtualinvoke $r5.<com.android.internal.widget.RecyclerView: void smoothScrollToPosition(int)>(0);

     label22:
        $b41 = f43 cmpg 0.0F;

        if $b41 >= 0 goto label23;

        i42 = 0;

        goto label24;

     label23:
        i42 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

     label24:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i42, f43);

        goto label27;

     label25:
        f47 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mCollapseOffset>;

        i43 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i5 = i43 / 2;

        $f2 = (float) $i5;

        $b6 = f47 cmpg $f2;

        if $b6 >= 0 goto label26;

        i43 = 0;

        goto label26;

     label26:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i43, 0.0F);

     label27:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void resetTouch()>();

        goto label36;

     label28:
        f48 = virtualinvoke r1.<android.view.MotionEvent: float getX()>();

        f49 = virtualinvoke r1.<android.view.MotionEvent: float getY()>();

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX> = f48;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = f49;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY> = f49;

        $i3 = virtualinvoke r1.<android.view.MotionEvent: int getPointerId(int)>(0);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mActivePointerId> = $i3;

        $f1 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchX>;

        $f0 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mInitialTouchY>;

        $r4 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: android.view.View findChildUnder(float,float)>($f1, $f0);

        if $r4 == null goto label29;

        z17 = 1;

        goto label30;

     label29:
        z17 = 0;

     label30:
        $z1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDismissable()>();

        if $z1 != 0 goto label32;

        $i4 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        if $i4 <= 0 goto label31;

        goto label32;

     label31:
        z11 = 0;

        goto label33;

     label32:
        z11 = 1;

     label33:
        if z17 == 0 goto label34;

        if z11 == 0 goto label34;

        goto label35;

     label34:
        z12 = 0;

     label35:
        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging> = z12;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void abortAnimation()>();

     label36:
        return z11;
    }

    public boolean performAccessibilityActionInternal(int, android.os.Bundle)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0, $i1;
        android.os.Bundle r1;
        android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        i0 := @parameter0: int;

        r1 := @parameter1: android.os.Bundle;

        $r2 = <android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction ACTION_ACCESSIBILITY_FOCUS>;

        $i1 = virtualinvoke $r2.<android.view.accessibility.AccessibilityNodeInfo$AccessibilityAction: int getId()>();

        if i0 != $i1 goto label1;

        return 0;

     label1:
        $z0 = specialinvoke r0.<android.view.ViewGroup: boolean performAccessibilityActionInternal(int,android.os.Bundle)>(i0, r1);

        if $z0 == 0 goto label2;

        return 1;

     label2:
        $z1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean performAccessibilityActionCommon(int)>(i0);

        return $z1;
    }

    public void requestChildFocus(android.view.View, android.view.View)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        android.view.View r1, r2;
        boolean $z0, $z1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: android.view.View;

        r2 := @parameter1: android.view.View;

        specialinvoke r0.<android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)>(r1, r2);

        $z0 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isInTouchMode()>();

        if $z0 != 0 goto label1;

        $z1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDescendantClipped(android.view.View)>(r2);

        if $z1 == 0 goto label1;

        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(0, 0.0F);

     label1:
        return;
    }

    public void setCollapsed(boolean)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean z0, $z1, $z2;
        int i0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        z0 := @parameter0: boolean;

        $z1 = virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isLaidOut()>();

        if $z1 != 0 goto label1;

        $z2 = z0 ^ 1;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mOpenOnLayout> = $z2;

        goto label4;

     label1:
        if z0 == 0 goto label2;

        i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        goto label3;

     label2:
        i0 = 0;

     label3:
        specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void smoothScrollTo(int,float)>(i0, 0.0F);

     label4:
        return;
    }

    public void setCollapsibleHeightReserved(int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0, i1, i2, i3, $i4, $i5, $i6;
        boolean $z0, $z1, $z2, $z3;
        float $f0, $f1, $f2;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        i1 := @parameter0: int;

        i0 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeightReserved>;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeightReserved> = i1;

        i2 = i1 - i0;

        if i2 == 0 goto label1;

        $z0 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsDragging>;

        if $z0 == 0 goto label1;

        $f1 = r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY>;

        $f0 = (float) i2;

        $f2 = $f1 - $f0;

        r0.<com.android.internal.widget.ResolverDrawerLayout: float mLastTouchY> = $f2;

     label1:
        i3 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i4 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight>;

        $i5 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: int getMaxCollapsedHeight()>();

        $i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5);

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mCollapsibleHeight> = $i6;

        $z1 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean isDragging()>();

        $z2 = $z1 ^ 1;

        $z3 = specialinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: boolean updateCollapseOffset(int,boolean)>(i3, $z2);

        if $z3 == 0 goto label2;

        return;

     label2:
        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void invalidate()>();

        return;
    }

    public void setDismissLocked(boolean)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mDismissLocked> = z0;

        return;
    }

    public void setMaxCollapsedHeight(int)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        int i0, $i1;
        boolean $z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        i0 := @parameter0: int;

        $i1 = r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeight>;

        if i0 != $i1 goto label1;

        return;

     label1:
        r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeight> = i0;

        $z0 = r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mIsMaxCollapsedHeightSmallExplicit>;

        if $z0 != 0 goto label2;

        r0.<com.android.internal.widget.ResolverDrawerLayout: int mMaxCollapsedHeightSmall> = i0;

     label2:
        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void requestLayout()>();

        return;
    }

    public void setOnCollapsedChangedListener(com.android.internal.widget.ResolverDrawerLayout$OnCollapsedChangedListener)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        com.android.internal.widget.ResolverDrawerLayout$OnCollapsedChangedListener r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: com.android.internal.widget.ResolverDrawerLayout$OnCollapsedChangedListener;

        r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.ResolverDrawerLayout$OnCollapsedChangedListener mOnCollapsedChangedListener> = r1;

        return;
    }

    public void setOnDismissedListener(com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener r1;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        r1 := @parameter0: com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener;

        r0.<com.android.internal.widget.ResolverDrawerLayout: com.android.internal.widget.ResolverDrawerLayout$OnDismissedListener mOnDismissedListener> = r1;

        return;
    }

    public void setShowAtTop(boolean)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mShowAtTop> = z0;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void invalidate()>();

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void requestLayout()>();

        return;
    }

    public void setSmallCollapsed(boolean)
    {
        com.android.internal.widget.ResolverDrawerLayout r0;
        boolean z0;

        r0 := @this: com.android.internal.widget.ResolverDrawerLayout;

        z0 := @parameter0: boolean;

        r0.<com.android.internal.widget.ResolverDrawerLayout: boolean mSmallCollapsed> = z0;

        virtualinvoke r0.<com.android.internal.widget.ResolverDrawerLayout: void requestLayout()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.internal.widget.ResolverDrawerLayout: java.lang.String TAG> = "ResolverDrawerLayout";

        return;
    }
}
