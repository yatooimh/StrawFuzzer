public abstract class com.android.net.module.util.DnsPacket extends java.lang.Object
{
    public static final int ANSECTION;
    public static final int ARSECTION;
    public static final int NSSECTION;
    private static final int NUM_SECTIONS;
    public static final int QDSECTION;
    private static final java.lang.String TAG;
    protected final com.android.net.module.util.DnsPacket$DnsHeader mHeader;
    protected final java.util.List[] mRecords;

    static void <clinit>()
    {
        java.lang.Class $r0;
        java.lang.String $r1;

        <com.android.net.module.util.DnsPacket: int QDSECTION> = 0;

        <com.android.net.module.util.DnsPacket: int NUM_SECTIONS> = 4;

        <com.android.net.module.util.DnsPacket: int NSSECTION> = 2;

        <com.android.net.module.util.DnsPacket: int ARSECTION> = 3;

        <com.android.net.module.util.DnsPacket: int ANSECTION> = 1;

        $r0 = class "Lcom/android/net/module/util/DnsPacket;";

        $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.net.module.util.DnsPacket: java.lang.String TAG> = $r1;

        return;
    }

    protected void <init>(byte[]) throws com.android.net.module.util.DnsPacket$ParseException
    {
        com.android.net.module.util.DnsPacket r0;
        int i0, i1, i2;
        com.android.net.module.util.DnsPacket$DnsRecord r1;
        com.android.net.module.util.DnsPacket$ParseException $r2, $r9, $r11;
        java.util.ArrayList[] $r3;
        com.android.net.module.util.DnsPacket$DnsHeader $r4, r14;
        java.util.List[] $r5;
        java.util.ArrayList $r6;
        java.lang.Object[] $r7;
        java.lang.Throwable $r8, $r10;
        byte[] r12;
        java.nio.ByteBuffer r13;
        java.util.List r15;

        r0 := @this: com.android.net.module.util.DnsPacket;

        r12 := @parameter0: byte[];

        specialinvoke r0.<java.lang.Object: void <init>()>();

        if r12 == null goto label12;

     label01:
        r13 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r12);

        r14 = new com.android.net.module.util.DnsPacket$DnsHeader;

        specialinvoke r14.<com.android.net.module.util.DnsPacket$DnsHeader: void <init>(com.android.net.module.util.DnsPacket,java.nio.ByteBuffer)>(r0, r13);

        r0.<com.android.net.module.util.DnsPacket: com.android.net.module.util.DnsPacket$DnsHeader mHeader> = r14;

     label02:
        $r3 = newarray (java.util.ArrayList)[4];

        r0.<com.android.net.module.util.DnsPacket: java.util.List[] mRecords> = $r3;

        i1 = 0;

     label03:
        if i1 >= 4 goto label10;

        $r4 = r0.<com.android.net.module.util.DnsPacket: com.android.net.module.util.DnsPacket$DnsHeader mHeader>;

        i0 = virtualinvoke $r4.<com.android.net.module.util.DnsPacket$DnsHeader: int getRecordCount(int)>(i1);

        if i0 <= 0 goto label04;

        $r7 = r0.<com.android.net.module.util.DnsPacket: java.util.List[] mRecords>;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>(int)>(i0);

        $r7[i1] = $r6;

     label04:
        i2 = 0;

     label05:
        if i2 >= i0 goto label09;

     label06:
        $r5 = r0.<com.android.net.module.util.DnsPacket: java.util.List[] mRecords>;

        r15 = $r5[i1];

        r1 = new com.android.net.module.util.DnsPacket$DnsRecord;

        specialinvoke r1.<com.android.net.module.util.DnsPacket$DnsRecord: void <init>(com.android.net.module.util.DnsPacket,int,java.nio.ByteBuffer)>(r0, i1, r13);

        interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>(r1);

     label07:
        i2 = i2 + 1;

        goto label05;

     label08:
        $r8 := @caughtexception;

        $r9 = new com.android.net.module.util.DnsPacket$ParseException;

        specialinvoke $r9.<com.android.net.module.util.DnsPacket$ParseException: void <init>(java.lang.String,java.lang.Throwable)>("Parse record fail", $r8);

        throw $r9;

     label09:
        i1 = i1 + 1;

        goto label03;

     label10:
        return;

     label11:
        $r10 := @caughtexception;

        $r11 = new com.android.net.module.util.DnsPacket$ParseException;

        specialinvoke $r11.<com.android.net.module.util.DnsPacket$ParseException: void <init>(java.lang.String,java.lang.Throwable)>("Parse Header fail, bad input data", $r10);

        throw $r11;

     label12:
        $r2 = new com.android.net.module.util.DnsPacket$ParseException;

        specialinvoke $r2.<com.android.net.module.util.DnsPacket$ParseException: void <init>(java.lang.String)>("Parse header failed, null input data");

        throw $r2;

        catch java.nio.BufferUnderflowException from label01 to label02 with label11;
        catch java.nio.BufferUnderflowException from label06 to label07 with label08;
    }
}
