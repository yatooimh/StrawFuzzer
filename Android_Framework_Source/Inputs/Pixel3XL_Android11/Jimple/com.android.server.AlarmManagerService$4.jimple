class com.android.server.AlarmManagerService$4 extends android.app.IAlarmManager$Stub
{
    final com.android.server.AlarmManagerService this$0;

    void <init>(com.android.server.AlarmManagerService)
    {
        com.android.server.AlarmManagerService$4 r0;
        com.android.server.AlarmManagerService r1;

        r0 := @this: com.android.server.AlarmManagerService$4;

        r1 := @parameter0: com.android.server.AlarmManagerService;

        r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0> = r1;

        specialinvoke r0.<android.app.IAlarmManager$Stub: void <init>()>();

        return;
    }

    public long currentNetworkTimeMillis()
    {
        com.android.server.AlarmManagerService$4 r0;
        android.util.NtpTrustedTime$TimeResult r1;
        com.android.server.AlarmManagerService $r2;
        android.content.Context $r3;
        android.util.NtpTrustedTime $r4;
        android.os.ParcelableException $r5;
        java.time.DateTimeException $r6;
        long $l0;

        r0 := @this: com.android.server.AlarmManagerService$4;

        $r2 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $r3 = virtualinvoke $r2.<com.android.server.AlarmManagerService: android.content.Context getContext()>();

        $r4 = staticinvoke <android.util.NtpTrustedTime: android.util.NtpTrustedTime getInstance(android.content.Context)>($r3);

        r1 = virtualinvoke $r4.<android.util.NtpTrustedTime: android.util.NtpTrustedTime$TimeResult getCachedTimeResult()>();

        if r1 == null goto label1;

        $l0 = virtualinvoke r1.<android.util.NtpTrustedTime$TimeResult: long currentTimeMillis()>();

        return $l0;

     label1:
        $r5 = new android.os.ParcelableException;

        $r6 = new java.time.DateTimeException;

        specialinvoke $r6.<java.time.DateTimeException: void <init>(java.lang.String)>("Missing NTP fix");

        specialinvoke $r5.<android.os.ParcelableException: void <init>(java.lang.Throwable)>($r6);

        throw $r5;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.AlarmManagerService$4 r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        com.android.server.AlarmManagerService $r4, $r6, $r9;
        android.content.Context $r5;
        boolean $z0, $z1;
        int $i0;
        java.lang.String $r7, $r8;

        r0 := @this: com.android.server.AlarmManagerService$4;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r4 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $r5 = virtualinvoke $r4.<com.android.server.AlarmManagerService: android.content.Context getContext()>();

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpAndUsageStatsPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r5, "AlarmManager", r2);

        if $z0 != 0 goto label1;

        return;

     label1:
        $i0 = lengthof r3;

        if $i0 <= 0 goto label2;

        $r8 = "--proto";

        $r7 = r3[0];

        $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r7);

        if $z1 == 0 goto label2;

        $r9 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        virtualinvoke $r9.<com.android.server.AlarmManagerService: void dumpProto(java.io.FileDescriptor)>(r1);

        goto label3;

     label2:
        $r6 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        virtualinvoke $r6.<com.android.server.AlarmManagerService: void dumpImpl(java.io.PrintWriter)>(r2);

     label3:
        return;
    }

    public android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)
    {
        com.android.server.AlarmManagerService$4 r0;
        int $i0, $i1, i2, i3;
        com.android.server.AlarmManagerService $r1;
        android.app.AlarmManager$AlarmClockInfo $r2;

        r0 := @this: com.android.server.AlarmManagerService$4;

        i2 := @parameter0: int;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i3 = staticinvoke <android.app.ActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i0, $i1, i2, 0, 0, "getNextAlarmClock", null);

        $r1 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $r2 = virtualinvoke $r1.<com.android.server.AlarmManagerService: android.app.AlarmManager$AlarmClockInfo getNextAlarmClockImpl(int)>(i3);

        return $r2;
    }

    public long getNextWakeFromIdleTime()
    {
        com.android.server.AlarmManagerService$4 r0;
        com.android.server.AlarmManagerService $r1;
        long $l0;

        r0 := @this: com.android.server.AlarmManagerService$4;

        $r1 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $l0 = virtualinvoke $r1.<com.android.server.AlarmManagerService: long getNextWakeFromIdleTimeImpl()>();

        return $l0;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.AlarmManagerService$4 r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.AlarmManagerService$ShellCmd $r7;
        com.android.server.AlarmManagerService $r8;

        r0 := @this: com.android.server.AlarmManagerService$4;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.AlarmManagerService$ShellCmd;

        $r8 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        specialinvoke $r7.<com.android.server.AlarmManagerService$ShellCmd: void <init>(com.android.server.AlarmManagerService,com.android.server.AlarmManagerService$1)>($r8, null);

        virtualinvoke $r7.<com.android.server.AlarmManagerService$ShellCmd: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public void remove(android.app.PendingIntent, android.app.IAlarmListener)
    {
        com.android.server.AlarmManagerService$4 r0;
        android.app.IAlarmListener r1;
        java.lang.Object r2;
        com.android.server.AlarmManagerService $r3, $r4;
        java.lang.Throwable $r5;
        android.app.PendingIntent r6;

        r0 := @this: com.android.server.AlarmManagerService$4;

        r6 := @parameter0: android.app.PendingIntent;

        r1 := @parameter1: android.app.IAlarmListener;

        if r6 != null goto label1;

        if r1 != null goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AlarmManager", "remove() with no intent or listener");

        return;

     label1:
        $r3 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        r2 = $r3.<com.android.server.AlarmManagerService: java.lang.Object mLock>;

        entermonitor r2;

     label2:
        $r4 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        virtualinvoke $r4.<com.android.server.AlarmManagerService: void removeLocked(android.app.PendingIntent,android.app.IAlarmListener)>(r6, r1);

        exitmonitor r2;

     label3:
        return;

     label4:
        $r5 := @caughtexception;

     label5:
        exitmonitor r2;

     label6:
        throw $r5;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void set(java.lang.String, int, long, long, long, int, android.app.PendingIntent, android.app.IAlarmListener, java.lang.String, android.os.WorkSource, android.app.AlarmManager$AlarmClockInfo)
    {
        com.android.server.AlarmManagerService$4 r0;
        java.lang.String r1, r4;
        int i0, i4, $i7, $i8, i9, i10, i11, i12, i13, $i14;
        long l1, l2, l3;
        android.app.PendingIntent r2;
        android.app.IAlarmListener r3;
        android.os.WorkSource r5;
        android.app.AlarmManager$AlarmClockInfo r6;
        com.android.server.AlarmManagerService $r7, $r9, $r10, $r12, $r14, $r17;
        android.app.AppOpsManager $r8;
        byte $b5, $b6;
        boolean $z0, $z1;
        com.android.server.AppStateTracker $r11, $r13;
        android.content.Context $r15;
        java.lang.IllegalArgumentException $r16;

        r0 := @this: com.android.server.AlarmManagerService$4;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        l3 := @parameter4: long;

        i9 := @parameter5: int;

        r2 := @parameter6: android.app.PendingIntent;

        r3 := @parameter7: android.app.IAlarmListener;

        r4 := @parameter8: java.lang.String;

        r5 := @parameter9: android.os.WorkSource;

        r6 := @parameter10: android.app.AlarmManager$AlarmClockInfo;

        i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r7 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $r8 = $r7.<com.android.server.AlarmManagerService: android.app.AppOpsManager mAppOps>;

        virtualinvoke $r8.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i4, r1);

        $b5 = l3 cmp 0L;

        if $b5 == 0 goto label2;

        if r3 != null goto label1;

        goto label2;

     label1:
        $r16 = new java.lang.IllegalArgumentException;

        specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Repeating alarms cannot use AlarmReceivers");

        throw $r16;

     label2:
        if r5 == null goto label3;

        $r14 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $r15 = virtualinvoke $r14.<com.android.server.AlarmManagerService: android.content.Context getContext()>();

        $i8 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r15.<android.content.Context: void enforcePermission(java.lang.String,int,int,java.lang.String)>("android.permission.UPDATE_DEVICE_STATS", $i8, i4, "AlarmManager.set");

     label3:
        i10 = i9 & -11;

        i11 = i10;

        if i4 == 1000 goto label4;

        i11 = i10 & -17;

     label4:
        i12 = i11;

        $b6 = l2 cmp 0L;

        if $b6 != 0 goto label5;

        i12 = i11 | 1;

     label5:
        if r6 == null goto label6;

        i13 = i12 | 3;

        goto label9;

     label6:
        if r5 != null goto label8;

        if i4 < 10000 goto label7;

        $r9 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $i7 = $r9.<com.android.server.AlarmManagerService: int mSystemUiUid>;

        $z0 = staticinvoke <android.os.UserHandle: boolean isSameApp(int,int)>(i4, $i7);

        if $z0 != 0 goto label7;

        $r10 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $r11 = staticinvoke <com.android.server.AlarmManagerService: com.android.server.AppStateTracker access$1200(com.android.server.AlarmManagerService)>($r10);

        if $r11 == null goto label8;

        $r12 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $r13 = staticinvoke <com.android.server.AlarmManagerService: com.android.server.AppStateTracker access$1200(com.android.server.AlarmManagerService)>($r12);

        $z1 = virtualinvoke $r13.<com.android.server.AppStateTracker: boolean isUidPowerSaveUserWhitelisted(int)>(i4);

        if $z1 == 0 goto label8;

     label7:
        $i14 = i12 | 8;

        i13 = $i14 & -5;

        goto label9;

     label8:
        i13 = i12;

     label9:
        $r17 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        virtualinvoke $r17.<com.android.server.AlarmManagerService: void setImpl(int,long,long,long,android.app.PendingIntent,android.app.IAlarmListener,java.lang.String,int,android.os.WorkSource,android.app.AlarmManager$AlarmClockInfo,int,java.lang.String)>(i0, l1, l2, l3, r2, r3, r4, i13, r5, r6, i4, r1);

        return;
    }

    public boolean setTime(long)
    {
        com.android.server.AlarmManagerService$4 r0;
        long l0;
        com.android.server.AlarmManagerService $r1, $r3;
        android.content.Context $r2;
        boolean $z0;

        r0 := @this: com.android.server.AlarmManagerService$4;

        l0 := @parameter0: long;

        $r1 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $r2 = virtualinvoke $r1.<com.android.server.AlarmManagerService: android.content.Context getContext()>();

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_TIME", "setTime");

        $r3 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $z0 = virtualinvoke $r3.<com.android.server.AlarmManagerService: boolean setTimeImpl(long)>(l0);

        return $z0;
    }

    public void setTimeZone(java.lang.String)
    {
        com.android.server.AlarmManagerService$4 r0;
        long l0;
        com.android.server.AlarmManagerService $r1, $r3;
        android.content.Context $r2;
        java.lang.Throwable $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.AlarmManagerService$4;

        r5 := @parameter0: java.lang.String;

        $r1 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        $r2 = virtualinvoke $r1.<com.android.server.AlarmManagerService: android.content.Context getContext()>();

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.SET_TIME_ZONE", "setTimeZone");

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r3 = r0.<com.android.server.AlarmManagerService$4: com.android.server.AlarmManagerService this$0>;

        virtualinvoke $r3.<com.android.server.AlarmManagerService: void setTimeZoneImpl(java.lang.String)>(r5);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
