final class com.android.server.AlarmManagerService$Constants extends android.database.ContentObserver
{
    private static final long DEFAULT_ALLOW_WHILE_IDLE_LONG_TIME;
    private static final long DEFAULT_ALLOW_WHILE_IDLE_SHORT_TIME;
    private static final long DEFAULT_ALLOW_WHILE_IDLE_WHITELIST_DURATION;
    private static final int DEFAULT_APP_STANDBY_RESTRICTED_QUOTA;
    private static final long DEFAULT_APP_STANDBY_RESTRICTED_WINDOW;
    private static final long DEFAULT_APP_STANDBY_WINDOW;
    private static final long DEFAULT_LISTENER_TIMEOUT;
    private static final int DEFAULT_MAX_ALARMS_PER_UID;
    private static final long DEFAULT_MAX_INTERVAL;
    private static final long DEFAULT_MIN_FUTURITY;
    private static final long DEFAULT_MIN_INTERVAL;
    static final java.lang.String KEY_ALLOW_WHILE_IDLE_LONG_TIME;
    static final java.lang.String KEY_ALLOW_WHILE_IDLE_SHORT_TIME;
    static final java.lang.String KEY_ALLOW_WHILE_IDLE_WHITELIST_DURATION;
    private static final java.lang.String KEY_APP_STANDBY_RESTRICTED_QUOTA;
    private static final java.lang.String KEY_APP_STANDBY_RESTRICTED_WINDOW;
    private static final java.lang.String KEY_APP_STANDBY_WINDOW;
    static final java.lang.String KEY_LISTENER_TIMEOUT;
    static final java.lang.String KEY_MAX_ALARMS_PER_UID;
    static final java.lang.String KEY_MAX_INTERVAL;
    static final java.lang.String KEY_MIN_FUTURITY;
    static final java.lang.String KEY_MIN_INTERVAL;
    public long ALLOW_WHILE_IDLE_LONG_TIME;
    public long ALLOW_WHILE_IDLE_SHORT_TIME;
    public long ALLOW_WHILE_IDLE_WHITELIST_DURATION;
    public int[] APP_STANDBY_QUOTAS;
    public int APP_STANDBY_RESTRICTED_QUOTA;
    public long APP_STANDBY_RESTRICTED_WINDOW;
    public long APP_STANDBY_WINDOW;
    private final int[] DEFAULT_APP_STANDBY_QUOTAS;
    final java.lang.String[] KEYS_APP_STANDBY_QUOTAS;
    public long LISTENER_TIMEOUT;
    public int MAX_ALARMS_PER_UID;
    public long MAX_INTERVAL;
    public long MIN_FUTURITY;
    public long MIN_INTERVAL;
    private long mLastAllowWhileIdleWhitelistDuration;
    private final android.util.KeyValueListParser mParser;
    private android.content.ContentResolver mResolver;
    final com.android.server.AlarmManagerService this$0;

    public void <init>(com.android.server.AlarmManagerService, android.os.Handler)
    {
        com.android.server.AlarmManagerService$Constants r0;
        android.os.Handler r1;
        java.lang.String[] $r2;
        int $i0;
        int[] $r3, r6;
        android.util.KeyValueListParser $r4;
        com.android.server.AlarmManagerService r5;

        r0 := @this: com.android.server.AlarmManagerService$Constants;

        r5 := @parameter0: com.android.server.AlarmManagerService;

        r1 := @parameter1: android.os.Handler;

        r0.<com.android.server.AlarmManagerService$Constants: com.android.server.AlarmManagerService this$0> = r5;

        specialinvoke r0.<android.database.ContentObserver: void <init>(android.os.Handler)>(r1);

        $r2 = newarray (java.lang.String)[5];

        $r2[0] = "standby_active_quota";

        $r2[1] = "standby_working_quota";

        $r2[2] = "standby_frequent_quota";

        $r2[3] = "standby_rare_quota";

        $r2[4] = "standby_never_quota";

        r0.<com.android.server.AlarmManagerService$Constants: java.lang.String[] KEYS_APP_STANDBY_QUOTAS> = $r2;

        r6 = newarray (int)[5];

        r6[0] = 720;

        r6[1] = 10;

        r6[2] = 2;

        r6[3] = 1;

        r6[4] = 0;

        r0.<com.android.server.AlarmManagerService$Constants: int[] DEFAULT_APP_STANDBY_QUOTAS> = r6;

        r0.<com.android.server.AlarmManagerService$Constants: long MIN_FUTURITY> = 5000L;

        r0.<com.android.server.AlarmManagerService$Constants: long MIN_INTERVAL> = 60000L;

        r0.<com.android.server.AlarmManagerService$Constants: long MAX_INTERVAL> = 31536000000L;

        r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_SHORT_TIME> = 5000L;

        r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_LONG_TIME> = 540000L;

        r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_WHITELIST_DURATION> = 10000L;

        r0.<com.android.server.AlarmManagerService$Constants: long LISTENER_TIMEOUT> = 5000L;

        r0.<com.android.server.AlarmManagerService$Constants: int MAX_ALARMS_PER_UID> = 500;

        r0.<com.android.server.AlarmManagerService$Constants: long APP_STANDBY_WINDOW> = 3600000L;

        $i0 = lengthof r6;

        $r3 = newarray (int)[$i0];

        r0.<com.android.server.AlarmManagerService$Constants: int[] APP_STANDBY_QUOTAS> = $r3;

        r0.<com.android.server.AlarmManagerService$Constants: int APP_STANDBY_RESTRICTED_QUOTA> = 1;

        r0.<com.android.server.AlarmManagerService$Constants: long APP_STANDBY_RESTRICTED_WINDOW> = 86400000L;

        $r4 = new android.util.KeyValueListParser;

        specialinvoke $r4.<android.util.KeyValueListParser: void <init>(char)>(44);

        r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser> = $r4;

        r0.<com.android.server.AlarmManagerService$Constants: long mLastAllowWhileIdleWhitelistDuration> = -1L;

        virtualinvoke r0.<com.android.server.AlarmManagerService$Constants: void updateAllowWhileIdleWhitelistDurationLocked()>();

        return;
    }

    private void updateConstants()
    {
        com.android.server.AlarmManagerService$Constants r0;
        java.lang.Object r1;
        long l0, $l1, $l2, $l3, $l4, $l5, $l6, $l7, $l12, $l13, $l14, $l21;
        com.android.server.AlarmManagerService $r2;
        android.content.ContentResolver $r3;
        android.util.KeyValueListParser $r4, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r21, $r32;
        java.lang.String $r5, $r22, $r25, $r34;
        byte $b8, $b9;
        int $i10, $i11, $i16, $i17, $i18, $i19, $i20, $i25, $i26, i27, $i28, i29;
        java.lang.String[] $r17, $r33, $r36;
        int[] $r18, $r19, $r20, $r31, $r35;
        java.lang.Throwable $r26, $r27;
        java.lang.StringBuilder r30;

        r0 := @this: com.android.server.AlarmManagerService$Constants;

        $r2 = r0.<com.android.server.AlarmManagerService$Constants: com.android.server.AlarmManagerService this$0>;

        r1 = $r2.<com.android.server.AlarmManagerService: java.lang.Object mLock>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $r3 = r0.<com.android.server.AlarmManagerService$Constants: android.content.ContentResolver mResolver>;

        $r5 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r3, "alarm_manager_constants");

        virtualinvoke $r4.<android.util.KeyValueListParser: void setString(java.lang.String)>($r5);

     label02:
        goto label06;

     label03:
        $r27 := @caughtexception;

        goto label21;

     label04:
        $r26 := @caughtexception;

     label05:
        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("AlarmManager", "Bad alarm manager settings", $r26);

     label06:
        $r6 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $l1 = virtualinvoke $r6.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("min_futurity", 5000L);

        r0.<com.android.server.AlarmManagerService$Constants: long MIN_FUTURITY> = $l1;

        $r7 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $l2 = virtualinvoke $r7.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("min_interval", 60000L);

        r0.<com.android.server.AlarmManagerService$Constants: long MIN_INTERVAL> = $l2;

        $r8 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $l3 = virtualinvoke $r8.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("max_interval", 31536000000L);

        r0.<com.android.server.AlarmManagerService$Constants: long MAX_INTERVAL> = $l3;

        $r9 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $l4 = virtualinvoke $r9.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("allow_while_idle_short_time", 5000L);

        r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_SHORT_TIME> = $l4;

        $r10 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $l5 = virtualinvoke $r10.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("allow_while_idle_long_time", 540000L);

        r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_LONG_TIME> = $l5;

        $r11 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $l6 = virtualinvoke $r11.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("allow_while_idle_whitelist_duration", 10000L);

        r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_WHITELIST_DURATION> = $l6;

        $r12 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $l7 = virtualinvoke $r12.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("listener_timeout", 5000L);

        r0.<com.android.server.AlarmManagerService$Constants: long LISTENER_TIMEOUT> = $l7;

        $r13 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        l0 = virtualinvoke $r13.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("app_standby_window", 3600000L);

        r0.<com.android.server.AlarmManagerService$Constants: long APP_STANDBY_WINDOW> = l0;

     label07:
        $b8 = l0 cmp 3600000L;

        if $b8 <= 0 goto label10;

     label08:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AlarmManager", "Cannot exceed the app_standby_window size of 3600000");

        r0.<com.android.server.AlarmManagerService$Constants: long APP_STANDBY_WINDOW> = 3600000L;

     label09:
        goto label12;

     label10:
        $b9 = l0 cmp 3600000L;

        if $b9 >= 0 goto label12;

     label11:
        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using a non-default app_standby_window of ");

        $l21 = r0.<com.android.server.AlarmManagerService$Constants: long APP_STANDBY_WINDOW>;

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l21);

        $r25 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AlarmManager", $r25);

     label12:
        $r31 = r0.<com.android.server.AlarmManagerService$Constants: int[] APP_STANDBY_QUOTAS>;

        $r32 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $r33 = r0.<com.android.server.AlarmManagerService$Constants: java.lang.String[] KEYS_APP_STANDBY_QUOTAS>;

        $r34 = $r33[0];

        $r35 = r0.<com.android.server.AlarmManagerService$Constants: int[] DEFAULT_APP_STANDBY_QUOTAS>;

        $i25 = $r35[0];

        $i26 = virtualinvoke $r32.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>($r34, $i25);

        $r31[0] = $i26;

     label13:
        i27 = 1;

     label14:
        $r36 = r0.<com.android.server.AlarmManagerService$Constants: java.lang.String[] KEYS_APP_STANDBY_QUOTAS>;

        $i28 = lengthof $r36;

        if i27 >= $i28 goto label16;

        $r20 = r0.<com.android.server.AlarmManagerService$Constants: int[] APP_STANDBY_QUOTAS>;

        $r21 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $r17 = r0.<com.android.server.AlarmManagerService$Constants: java.lang.String[] KEYS_APP_STANDBY_QUOTAS>;

        $r22 = $r17[i27];

        $r18 = r0.<com.android.server.AlarmManagerService$Constants: int[] APP_STANDBY_QUOTAS>;

        $i16 = i27 - 1;

        $i18 = $r18[$i16];

        $r19 = r0.<com.android.server.AlarmManagerService$Constants: int[] DEFAULT_APP_STANDBY_QUOTAS>;

        $i17 = $r19[i27];

        $i19 = staticinvoke <java.lang.Math: int min(int,int)>($i18, $i17);

        $i20 = virtualinvoke $r21.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>($r22, $i19);

        $r20[i27] = $i20;

     label15:
        i27 = i27 + 1;

        goto label14;

     label16:
        $r14 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $i10 = virtualinvoke $r14.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("standby_restricted_quota", 1);

        $i11 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i10);

        r0.<com.android.server.AlarmManagerService$Constants: int APP_STANDBY_RESTRICTED_QUOTA> = $i11;

        $l12 = r0.<com.android.server.AlarmManagerService$Constants: long APP_STANDBY_WINDOW>;

        $r15 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        $l13 = virtualinvoke $r15.<android.util.KeyValueListParser: long getLong(java.lang.String,long)>("app_standby_restricted_window", 86400000L);

        $l14 = staticinvoke <java.lang.Math: long max(long,long)>($l12, $l13);

        r0.<com.android.server.AlarmManagerService$Constants: long APP_STANDBY_RESTRICTED_WINDOW> = $l14;

        $r16 = r0.<com.android.server.AlarmManagerService$Constants: android.util.KeyValueListParser mParser>;

        i29 = virtualinvoke $r16.<android.util.KeyValueListParser: int getInt(java.lang.String,int)>("max_alarms_per_uid", 500);

        r0.<com.android.server.AlarmManagerService$Constants: int MAX_ALARMS_PER_UID> = i29;

     label17:
        if i29 >= 500 goto label19;

     label18:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AlarmManager", "Cannot set max_alarms_per_uid lower than 500");

        r0.<com.android.server.AlarmManagerService$Constants: int MAX_ALARMS_PER_UID> = 500;

     label19:
        virtualinvoke r0.<com.android.server.AlarmManagerService$Constants: void updateAllowWhileIdleWhitelistDurationLocked()>();

        exitmonitor r1;

     label20:
        return;

     label21:
        exitmonitor r1;

     label22:
        throw $r27;

        catch java.lang.IllegalArgumentException from label01 to label02 with label04;
        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label05 to label06 with label03;
        catch java.lang.Throwable from label06 to label07 with label03;
        catch java.lang.Throwable from label08 to label09 with label03;
        catch java.lang.Throwable from label11 to label12 with label03;
        catch java.lang.Throwable from label12 to label13 with label03;
        catch java.lang.Throwable from label14 to label15 with label03;
        catch java.lang.Throwable from label16 to label17 with label03;
        catch java.lang.Throwable from label18 to label19 with label03;
        catch java.lang.Throwable from label19 to label20 with label03;
        catch java.lang.Throwable from label21 to label22 with label03;
    }

    void dump(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.AlarmManagerService$Constants r0;
        com.android.internal.util.IndentingPrintWriter r1;
        java.lang.String[] r2;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, $l8, $l11;
        int $i7, $i9, $i10, $i12, i13;
        java.lang.String $r5;
        int[] $r6;

        r0 := @this: com.android.server.AlarmManagerService$Constants;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Settings:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("min_futurity");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $l0 = r0.<com.android.server.AlarmManagerService$Constants: long MIN_FUTURITY>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l0, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("min_interval");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $l1 = r0.<com.android.server.AlarmManagerService$Constants: long MIN_INTERVAL>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l1, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("max_interval");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $l2 = r0.<com.android.server.AlarmManagerService$Constants: long MAX_INTERVAL>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l2, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("listener_timeout");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $l3 = r0.<com.android.server.AlarmManagerService$Constants: long LISTENER_TIMEOUT>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l3, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("allow_while_idle_short_time");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $l4 = r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_SHORT_TIME>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l4, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("allow_while_idle_long_time");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $l5 = r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_LONG_TIME>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l5, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("allow_while_idle_whitelist_duration");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $l6 = r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_WHITELIST_DURATION>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l6, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("max_alarms_per_uid");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $i7 = r0.<com.android.server.AlarmManagerService$Constants: int MAX_ALARMS_PER_UID>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i7);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("app_standby_window");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $l8 = r0.<com.android.server.AlarmManagerService$Constants: long APP_STANDBY_WINDOW>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l8, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        i13 = 0;

     label1:
        r2 = r0.<com.android.server.AlarmManagerService$Constants: java.lang.String[] KEYS_APP_STANDBY_QUOTAS>;

        $i9 = lengthof r2;

        if i13 >= $i9 goto label2;

        $r5 = r2[i13];

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r5);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $r6 = r0.<com.android.server.AlarmManagerService$Constants: int[] APP_STANDBY_QUOTAS>;

        $i12 = $r6[i13];

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i12);

        i13 = i13 + 1;

        goto label1;

     label2:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("standby_restricted_quota");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $i10 = r0.<com.android.server.AlarmManagerService$Constants: int APP_STANDBY_RESTRICTED_QUOTA>;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i10);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("app_standby_restricted_window");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("=");

        $l11 = r0.<com.android.server.AlarmManagerService$Constants: long APP_STANDBY_RESTRICTED_WINDOW>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l11, r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    void dump(java.io.PrintWriter, java.lang.String)
    {
        com.android.server.AlarmManagerService$Constants r0;
        java.io.PrintWriter r1;
        java.lang.String r2;
        com.android.internal.util.IndentingPrintWriter $r3, $r4;

        r0 := @this: com.android.server.AlarmManagerService$Constants;

        r1 := @parameter0: java.io.PrintWriter;

        r2 := @parameter1: java.lang.String;

        $r3 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r1, "  ");

        $r4 = virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter setIndent(java.lang.String)>(r2);

        virtualinvoke r0.<com.android.server.AlarmManagerService$Constants: void dump(com.android.internal.util.IndentingPrintWriter)>($r4);

        return;
    }

    void dumpProto(android.util.proto.ProtoOutputStream, long)
    {
        com.android.server.AlarmManagerService$Constants r0;
        android.util.proto.ProtoOutputStream r1;
        long $l0, $l1, $l2, $l3, $l4, $l5, $l6, l7, l8;

        r0 := @this: com.android.server.AlarmManagerService$Constants;

        r1 := @parameter0: android.util.proto.ProtoOutputStream;

        l7 := @parameter1: long;

        l8 = virtualinvoke r1.<android.util.proto.ProtoOutputStream: long start(long)>(l7);

        $l0 = r0.<com.android.server.AlarmManagerService$Constants: long MIN_FUTURITY>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529665L, $l0);

        $l1 = r0.<com.android.server.AlarmManagerService$Constants: long MIN_INTERVAL>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529666L, $l1);

        $l2 = r0.<com.android.server.AlarmManagerService$Constants: long MAX_INTERVAL>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529671L, $l2);

        $l3 = r0.<com.android.server.AlarmManagerService$Constants: long LISTENER_TIMEOUT>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529667L, $l3);

        $l4 = r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_SHORT_TIME>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529668L, $l4);

        $l5 = r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_LONG_TIME>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529669L, $l5);

        $l6 = r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_WHITELIST_DURATION>;

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void write(long,long)>(1112396529670L, $l6);

        virtualinvoke r1.<android.util.proto.ProtoOutputStream: void end(long)>(l8);

        return;
    }

    public void onChange(boolean, android.net.Uri)
    {
        com.android.server.AlarmManagerService$Constants r0;
        boolean z0;
        android.net.Uri r1;

        r0 := @this: com.android.server.AlarmManagerService$Constants;

        z0 := @parameter0: boolean;

        r1 := @parameter1: android.net.Uri;

        specialinvoke r0.<com.android.server.AlarmManagerService$Constants: void updateConstants()>();

        return;
    }

    public void start(android.content.ContentResolver)
    {
        com.android.server.AlarmManagerService$Constants r0;
        android.content.ContentResolver r1;
        android.net.Uri $r2;

        r0 := @this: com.android.server.AlarmManagerService$Constants;

        r1 := @parameter0: android.content.ContentResolver;

        r0.<com.android.server.AlarmManagerService$Constants: android.content.ContentResolver mResolver> = r1;

        $r2 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("alarm_manager_constants");

        virtualinvoke r1.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r2, 0, r0);

        specialinvoke r0.<com.android.server.AlarmManagerService$Constants: void updateConstants()>();

        return;
    }

    public void updateAllowWhileIdleWhitelistDurationLocked()
    {
        com.android.server.AlarmManagerService$Constants r0;
        long l0, l1, $l3;
        android.app.BroadcastOptions r1;
        byte $b2;
        com.android.server.AlarmManagerService $r2;
        android.os.Bundle $r3;

        r0 := @this: com.android.server.AlarmManagerService$Constants;

        l0 = r0.<com.android.server.AlarmManagerService$Constants: long mLastAllowWhileIdleWhitelistDuration>;

        l1 = r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_WHITELIST_DURATION>;

        $b2 = l0 cmp l1;

        if $b2 == 0 goto label1;

        r0.<com.android.server.AlarmManagerService$Constants: long mLastAllowWhileIdleWhitelistDuration> = l1;

        r1 = staticinvoke <android.app.BroadcastOptions: android.app.BroadcastOptions makeBasic()>();

        $l3 = r0.<com.android.server.AlarmManagerService$Constants: long ALLOW_WHILE_IDLE_WHITELIST_DURATION>;

        virtualinvoke r1.<android.app.BroadcastOptions: void setTemporaryAppWhitelistDuration(long)>($l3);

        $r2 = r0.<com.android.server.AlarmManagerService$Constants: com.android.server.AlarmManagerService this$0>;

        $r3 = virtualinvoke r1.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

        $r2.<com.android.server.AlarmManagerService: android.os.Bundle mIdleOptions> = $r3;

     label1:
        return;
    }

    public static void <clinit>()
    {
        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_MIN_INTERVAL> = "min_interval";

        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_MIN_FUTURITY> = "min_futurity";

        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_MAX_INTERVAL> = "max_interval";

        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_MAX_ALARMS_PER_UID> = "max_alarms_per_uid";

        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_LISTENER_TIMEOUT> = "listener_timeout";

        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_APP_STANDBY_WINDOW> = "app_standby_window";

        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_APP_STANDBY_RESTRICTED_WINDOW> = "app_standby_restricted_window";

        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_APP_STANDBY_RESTRICTED_QUOTA> = "standby_restricted_quota";

        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_ALLOW_WHILE_IDLE_WHITELIST_DURATION> = "allow_while_idle_whitelist_duration";

        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_ALLOW_WHILE_IDLE_SHORT_TIME> = "allow_while_idle_short_time";

        <com.android.server.AlarmManagerService$Constants: java.lang.String KEY_ALLOW_WHILE_IDLE_LONG_TIME> = "allow_while_idle_long_time";

        <com.android.server.AlarmManagerService$Constants: long DEFAULT_MIN_INTERVAL> = 60000L;

        <com.android.server.AlarmManagerService$Constants: long DEFAULT_MIN_FUTURITY> = 5000L;

        <com.android.server.AlarmManagerService$Constants: long DEFAULT_MAX_INTERVAL> = 31536000000L;

        <com.android.server.AlarmManagerService$Constants: int DEFAULT_MAX_ALARMS_PER_UID> = 500;

        <com.android.server.AlarmManagerService$Constants: long DEFAULT_LISTENER_TIMEOUT> = 5000L;

        <com.android.server.AlarmManagerService$Constants: long DEFAULT_APP_STANDBY_WINDOW> = 3600000L;

        <com.android.server.AlarmManagerService$Constants: long DEFAULT_APP_STANDBY_RESTRICTED_WINDOW> = 86400000L;

        <com.android.server.AlarmManagerService$Constants: int DEFAULT_APP_STANDBY_RESTRICTED_QUOTA> = 1;

        <com.android.server.AlarmManagerService$Constants: long DEFAULT_ALLOW_WHILE_IDLE_WHITELIST_DURATION> = 10000L;

        <com.android.server.AlarmManagerService$Constants: long DEFAULT_ALLOW_WHILE_IDLE_SHORT_TIME> = 5000L;

        <com.android.server.AlarmManagerService$Constants: long DEFAULT_ALLOW_WHILE_IDLE_LONG_TIME> = 540000L;

        return;
    }
}
