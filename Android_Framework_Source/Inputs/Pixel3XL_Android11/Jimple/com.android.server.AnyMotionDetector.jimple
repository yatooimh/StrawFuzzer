public class com.android.server.AnyMotionDetector extends java.lang.Object
{
    private static final long ACCELEROMETER_DATA_TIMEOUT_MILLIS;
    private static final boolean DEBUG;
    private static final long ORIENTATION_MEASUREMENT_DURATION_MILLIS;
    private static final long ORIENTATION_MEASUREMENT_INTERVAL_MILLIS;
    public static final int RESULT_MOVED;
    public static final int RESULT_STATIONARY;
    public static final int RESULT_UNKNOWN;
    private static final int SAMPLING_INTERVAL_MILLIS;
    private static final int STALE_MEASUREMENT_TIMEOUT_MILLIS;
    private static final int STATE_ACTIVE;
    private static final int STATE_INACTIVE;
    private static final java.lang.String TAG;
    private static final long WAKELOCK_TIMEOUT_MILLIS;
    private final float THRESHOLD_ENERGY;
    private android.hardware.Sensor mAccelSensor;
    private com.android.server.AnyMotionDetector$DeviceIdleCallback mCallback;
    private com.android.server.AnyMotionDetector$Vector3 mCurrentGravityVector;
    private final android.os.Handler mHandler;
    private final android.hardware.SensorEventListener mListener;
    private final java.lang.Object mLock;
    private boolean mMeasurementInProgress;
    private final java.lang.Runnable mMeasurementTimeout;
    private boolean mMeasurementTimeoutIsActive;
    private int mNumSufficientSamples;
    private com.android.server.AnyMotionDetector$Vector3 mPreviousGravityVector;
    private com.android.server.AnyMotionDetector$RunningSignalStats mRunningStats;
    private android.hardware.SensorManager mSensorManager;
    private final java.lang.Runnable mSensorRestart;
    private boolean mSensorRestartIsActive;
    private int mState;
    private final float mThresholdAngle;
    private android.os.PowerManager$WakeLock mWakeLock;
    private final java.lang.Runnable mWakelockTimeout;
    private boolean mWakelockTimeoutIsActive;

    public void <init>(android.os.PowerManager, android.os.Handler, android.hardware.SensorManager, com.android.server.AnyMotionDetector$DeviceIdleCallback, float)
    {
        com.android.server.AnyMotionDetector r0;
        android.os.Handler r1;
        android.hardware.SensorManager r2;
        com.android.server.AnyMotionDetector$DeviceIdleCallback r3;
        float f0;
        java.lang.Object r4, $r5;
        com.android.server.AnyMotionDetector$1 $r6;
        com.android.server.AnyMotionDetector$2 $r7;
        com.android.server.AnyMotionDetector$3 $r8;
        com.android.server.AnyMotionDetector$4 $r9;
        android.hardware.Sensor $r10;
        double $d0;
        int $i0;
        java.lang.Throwable $r11;
        android.os.PowerManager r12;
        android.os.PowerManager$WakeLock r13;
        com.android.server.AnyMotionDetector$RunningSignalStats r14;

        r0 := @this: com.android.server.AnyMotionDetector;

        r12 := @parameter0: android.os.PowerManager;

        r1 := @parameter1: android.os.Handler;

        r2 := @parameter2: android.hardware.SensorManager;

        r3 := @parameter3: com.android.server.AnyMotionDetector$DeviceIdleCallback;

        f0 := @parameter4: float;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.AnyMotionDetector: float THRESHOLD_ENERGY> = 5.0F;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.AnyMotionDetector: java.lang.Object mLock> = $r5;

        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mCurrentGravityVector> = null;

        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mPreviousGravityVector> = null;

        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$DeviceIdleCallback mCallback> = null;

        $r6 = new com.android.server.AnyMotionDetector$1;

        specialinvoke $r6.<com.android.server.AnyMotionDetector$1: void <init>(com.android.server.AnyMotionDetector)>(r0);

        r0.<com.android.server.AnyMotionDetector: android.hardware.SensorEventListener mListener> = $r6;

        $r7 = new com.android.server.AnyMotionDetector$2;

        specialinvoke $r7.<com.android.server.AnyMotionDetector$2: void <init>(com.android.server.AnyMotionDetector)>(r0);

        r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mSensorRestart> = $r7;

        $r8 = new com.android.server.AnyMotionDetector$3;

        specialinvoke $r8.<com.android.server.AnyMotionDetector$3: void <init>(com.android.server.AnyMotionDetector)>(r0);

        r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mMeasurementTimeout> = $r8;

        $r9 = new com.android.server.AnyMotionDetector$4;

        specialinvoke $r9.<com.android.server.AnyMotionDetector$4: void <init>(com.android.server.AnyMotionDetector)>(r0);

        r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mWakelockTimeout> = $r9;

        r4 = r0.<com.android.server.AnyMotionDetector: java.lang.Object mLock>;

        entermonitor r4;

     label1:
        r13 = virtualinvoke r12.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "AnyMotionDetector");

        r0.<com.android.server.AnyMotionDetector: android.os.PowerManager$WakeLock mWakeLock> = r13;

        virtualinvoke r13.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler> = r1;

        r0.<com.android.server.AnyMotionDetector: android.hardware.SensorManager mSensorManager> = r2;

        $r10 = virtualinvoke r2.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>(1);

        r0.<com.android.server.AnyMotionDetector: android.hardware.Sensor mAccelSensor> = $r10;

        r0.<com.android.server.AnyMotionDetector: boolean mMeasurementInProgress> = 0;

        r0.<com.android.server.AnyMotionDetector: boolean mMeasurementTimeoutIsActive> = 0;

        r0.<com.android.server.AnyMotionDetector: boolean mWakelockTimeoutIsActive> = 0;

        r0.<com.android.server.AnyMotionDetector: boolean mSensorRestartIsActive> = 0;

        r0.<com.android.server.AnyMotionDetector: int mState> = 0;

        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$DeviceIdleCallback mCallback> = r3;

        r0.<com.android.server.AnyMotionDetector: float mThresholdAngle> = f0;

        r14 = new com.android.server.AnyMotionDetector$RunningSignalStats;

        specialinvoke r14.<com.android.server.AnyMotionDetector$RunningSignalStats: void <init>()>();

        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$RunningSignalStats mRunningStats> = r14;

        $d0 = staticinvoke <java.lang.Math: double ceil(double)>(62.5);

        $i0 = (int) $d0;

        r0.<com.android.server.AnyMotionDetector: int mNumSufficientSamples> = $i0;

        exitmonitor r4;

     label2:
        return;

     label3:
        $r11 := @caughtexception;

     label4:
        exitmonitor r4;

     label5:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    static java.lang.Object access$000(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;
        java.lang.Object $r1;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        $r1 = r0.<com.android.server.AnyMotionDetector: java.lang.Object mLock>;

        return $r1;
    }

    static com.android.server.AnyMotionDetector$RunningSignalStats access$100(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;
        com.android.server.AnyMotionDetector$RunningSignalStats $r1;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        $r1 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$RunningSignalStats mRunningStats>;

        return $r1;
    }

    static boolean access$1000(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        $z0 = r0.<com.android.server.AnyMotionDetector: boolean mMeasurementTimeoutIsActive>;

        return $z0;
    }

    static boolean access$1002(com.android.server.AnyMotionDetector, boolean)
    {
        com.android.server.AnyMotionDetector r0;
        boolean z0;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        z0 := @parameter1: boolean;

        r0.<com.android.server.AnyMotionDetector: boolean mMeasurementTimeoutIsActive> = z0;

        return z0;
    }

    static int access$200(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;
        int $i0;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        $i0 = r0.<com.android.server.AnyMotionDetector: int mNumSufficientSamples>;

        return $i0;
    }

    static int access$300(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;
        int $i0;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        $i0 = specialinvoke r0.<com.android.server.AnyMotionDetector: int stopOrientationMeasurementLocked()>();

        return $i0;
    }

    static java.lang.Runnable access$400(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;
        java.lang.Runnable $r1;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        $r1 = r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mWakelockTimeout>;

        return $r1;
    }

    static android.os.Handler access$500(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;
        android.os.Handler $r1;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        $r1 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        return $r1;
    }

    static boolean access$600(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        $z0 = r0.<com.android.server.AnyMotionDetector: boolean mWakelockTimeoutIsActive>;

        return $z0;
    }

    static boolean access$602(com.android.server.AnyMotionDetector, boolean)
    {
        com.android.server.AnyMotionDetector r0;
        boolean z0;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        z0 := @parameter1: boolean;

        r0.<com.android.server.AnyMotionDetector: boolean mWakelockTimeoutIsActive> = z0;

        return z0;
    }

    static com.android.server.AnyMotionDetector$DeviceIdleCallback access$700(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;
        com.android.server.AnyMotionDetector$DeviceIdleCallback $r1;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        $r1 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$DeviceIdleCallback mCallback>;

        return $r1;
    }

    static boolean access$800(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        $z0 = r0.<com.android.server.AnyMotionDetector: boolean mSensorRestartIsActive>;

        return $z0;
    }

    static boolean access$802(com.android.server.AnyMotionDetector, boolean)
    {
        com.android.server.AnyMotionDetector r0;
        boolean z0;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        z0 := @parameter1: boolean;

        r0.<com.android.server.AnyMotionDetector: boolean mSensorRestartIsActive> = z0;

        return z0;
    }

    static void access$900(com.android.server.AnyMotionDetector)
    {
        com.android.server.AnyMotionDetector r0;

        r0 := @parameter0: com.android.server.AnyMotionDetector;

        specialinvoke r0.<com.android.server.AnyMotionDetector: void startOrientationMeasurementLocked()>();

        return;
    }

    private void startOrientationMeasurementLocked()
    {
        com.android.server.AnyMotionDetector r0;
        boolean $z0, $z1;
        android.hardware.SensorEventListener $r1;
        android.hardware.SensorManager $r2;
        java.lang.Runnable $r3;
        android.os.Handler $r4, $r5;
        com.android.server.AnyMotionDetector$RunningSignalStats $r6;
        android.hardware.Sensor r7;
        android.os.Message r8;

        r0 := @this: com.android.server.AnyMotionDetector;

        $z0 = r0.<com.android.server.AnyMotionDetector: boolean mMeasurementInProgress>;

        if $z0 != 0 goto label2;

        r7 = r0.<com.android.server.AnyMotionDetector: android.hardware.Sensor mAccelSensor>;

        if r7 == null goto label2;

        $r2 = r0.<com.android.server.AnyMotionDetector: android.hardware.SensorManager mSensorManager>;

        $r1 = r0.<com.android.server.AnyMotionDetector: android.hardware.SensorEventListener mListener>;

        $z1 = virtualinvoke $r2.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>($r1, r7, 40000);

        if $z1 == 0 goto label1;

        r0.<com.android.server.AnyMotionDetector: boolean mMeasurementInProgress> = 1;

        $r6 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$RunningSignalStats mRunningStats>;

        virtualinvoke $r6.<com.android.server.AnyMotionDetector$RunningSignalStats: void reset()>();

     label1:
        $r4 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        $r3 = r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mMeasurementTimeout>;

        r8 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($r4, $r3);

        $r5 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r8, 3000L);

        r0.<com.android.server.AnyMotionDetector: boolean mMeasurementTimeoutIsActive> = 1;

     label2:
        return;
    }

    private int stopOrientationMeasurementLocked()
    {
        com.android.server.AnyMotionDetector r0;
        android.os.Message r1;
        boolean $z0, $z2;
        java.lang.Runnable $r2, $r11, $r15;
        android.os.Handler $r3, $r12, $r13, $r16;
        android.hardware.SensorEventListener $r4;
        android.hardware.SensorManager $r5;
        com.android.server.AnyMotionDetector$Vector3 $r6, $r8;
        com.android.server.AnyMotionDetector$RunningSignalStats $r7, $r9, $r10;
        int $i0, i2;
        android.os.PowerManager$WakeLock $r14, $r17;

        r0 := @this: com.android.server.AnyMotionDetector;

        i2 = -1;

        $z0 = r0.<com.android.server.AnyMotionDetector: boolean mMeasurementInProgress>;

        if $z0 == 0 goto label4;

        $r3 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        $r2 = r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mMeasurementTimeout>;

        virtualinvoke $r3.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r2);

        r0.<com.android.server.AnyMotionDetector: boolean mMeasurementTimeoutIsActive> = 0;

        $r5 = r0.<com.android.server.AnyMotionDetector: android.hardware.SensorManager mSensorManager>;

        $r4 = r0.<com.android.server.AnyMotionDetector: android.hardware.SensorEventListener mListener>;

        virtualinvoke $r5.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r4);

        r0.<com.android.server.AnyMotionDetector: boolean mMeasurementInProgress> = 0;

        $r6 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mCurrentGravityVector>;

        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mPreviousGravityVector> = $r6;

        $r7 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$RunningSignalStats mRunningStats>;

        $r8 = virtualinvoke $r7.<com.android.server.AnyMotionDetector$RunningSignalStats: com.android.server.AnyMotionDetector$Vector3 getRunningAverage()>();

        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mCurrentGravityVector> = $r8;

        $r9 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$RunningSignalStats mRunningStats>;

        $i0 = virtualinvoke $r9.<com.android.server.AnyMotionDetector$RunningSignalStats: int getSampleCount()>();

        if $i0 != 0 goto label1;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AnyMotionDetector", "No accelerometer data acquired for orientation measurement.");

     label1:
        i2 = virtualinvoke r0.<com.android.server.AnyMotionDetector: int getStationaryStatus()>();

        $r10 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$RunningSignalStats mRunningStats>;

        virtualinvoke $r10.<com.android.server.AnyMotionDetector$RunningSignalStats: void reset()>();

        if i2 == -1 goto label3;

        $r14 = r0.<com.android.server.AnyMotionDetector: android.os.PowerManager$WakeLock mWakeLock>;

        $z2 = virtualinvoke $r14.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z2 == 0 goto label2;

        $r16 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        $r15 = r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mWakelockTimeout>;

        virtualinvoke $r16.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r15);

        r0.<com.android.server.AnyMotionDetector: boolean mWakelockTimeoutIsActive> = 0;

        $r17 = r0.<com.android.server.AnyMotionDetector: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r17.<android.os.PowerManager$WakeLock: void release()>();

     label2:
        r0.<com.android.server.AnyMotionDetector: int mState> = 0;

        goto label4;

     label3:
        $r12 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        $r11 = r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mSensorRestart>;

        r1 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($r12, $r11);

        $r13 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        virtualinvoke $r13.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r1, 5000L);

        r0.<com.android.server.AnyMotionDetector: boolean mSensorRestartIsActive> = 1;

     label4:
        return i2;
    }

    public void checkForAnyMotion()
    {
        com.android.server.AnyMotionDetector r0;
        java.lang.Object r1;
        int $i0;
        android.os.PowerManager$WakeLock $r2;
        java.lang.Runnable $r3;
        android.os.Handler $r4, $r5;
        java.lang.Throwable $r6;
        android.os.Message r7;

        r0 := @this: com.android.server.AnyMotionDetector;

        $i0 = r0.<com.android.server.AnyMotionDetector: int mState>;

        if $i0 == 1 goto label6;

        r1 = r0.<com.android.server.AnyMotionDetector: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        r0.<com.android.server.AnyMotionDetector: int mState> = 1;

        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mCurrentGravityVector> = null;

        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mPreviousGravityVector> = null;

        $r2 = r0.<com.android.server.AnyMotionDetector: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void acquire()>();

        $r4 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        $r3 = r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mWakelockTimeout>;

        r7 = staticinvoke <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>($r4, $r3);

        $r5 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        virtualinvoke $r5.<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>(r7, 30000L);

        r0.<com.android.server.AnyMotionDetector: boolean mWakelockTimeoutIsActive> = 1;

        specialinvoke r0.<com.android.server.AnyMotionDetector: void startOrientationMeasurementLocked()>();

        exitmonitor r1;

     label2:
        goto label6;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

     label6:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int getStationaryStatus()
    {
        com.android.server.AnyMotionDetector r0;
        com.android.server.AnyMotionDetector$Vector3 r1, $r2, $r3, $r4, $r5, $r6, $r7;
        float f0, $f1, $f2;
        byte $b0, $b4, $b5;
        boolean $z0;
        long $l1, $l2, $l3;
        com.android.server.AnyMotionDetector$RunningSignalStats $r8;

        r0 := @this: com.android.server.AnyMotionDetector;

        r1 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mPreviousGravityVector>;

        if r1 == null goto label5;

        $r2 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mCurrentGravityVector>;

        if $r2 != null goto label1;

        goto label5;

     label1:
        $r3 = virtualinvoke r1.<com.android.server.AnyMotionDetector$Vector3: com.android.server.AnyMotionDetector$Vector3 normalized()>();

        $r4 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mCurrentGravityVector>;

        $r5 = virtualinvoke $r4.<com.android.server.AnyMotionDetector$Vector3: com.android.server.AnyMotionDetector$Vector3 normalized()>();

        f0 = virtualinvoke $r3.<com.android.server.AnyMotionDetector$Vector3: float angleBetween(com.android.server.AnyMotionDetector$Vector3)>($r5);

        $f1 = r0.<com.android.server.AnyMotionDetector: float mThresholdAngle>;

        $b0 = f0 cmpg $f1;

        if $b0 >= 0 goto label2;

        $r8 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$RunningSignalStats mRunningStats>;

        $f2 = virtualinvoke $r8.<com.android.server.AnyMotionDetector$RunningSignalStats: float getEnergy()>();

        $b5 = $f2 cmpg 5.0F;

        if $b5 >= 0 goto label2;

        return 0;

     label2:
        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0);

        if $z0 == 0 goto label3;

        return 1;

     label3:
        $r6 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mCurrentGravityVector>;

        $l2 = $r6.<com.android.server.AnyMotionDetector$Vector3: long timeMillisSinceBoot>;

        $r7 = r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mPreviousGravityVector>;

        $l1 = $r7.<com.android.server.AnyMotionDetector$Vector3: long timeMillisSinceBoot>;

        $l3 = $l2 - $l1;

        $b4 = $l3 cmp 120000L;

        if $b4 <= 0 goto label4;

        return -1;

     label4:
        return 1;

     label5:
        return -1;
    }

    public boolean hasSensor()
    {
        com.android.server.AnyMotionDetector r0;
        android.hardware.Sensor $r1;
        boolean z0;

        r0 := @this: com.android.server.AnyMotionDetector;

        $r1 = r0.<com.android.server.AnyMotionDetector: android.hardware.Sensor mAccelSensor>;

        if $r1 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public void stop()
    {
        com.android.server.AnyMotionDetector r0;
        java.lang.Object r1;
        int $i0;
        java.lang.Runnable $r3, $r5, $r8;
        android.os.Handler $r4, $r6, $r9;
        boolean $z0, $z1;
        android.os.PowerManager$WakeLock $r7, $r10;
        android.hardware.SensorEventListener $r11;
        android.hardware.SensorManager $r12;
        java.lang.Throwable $r13;

        r0 := @this: com.android.server.AnyMotionDetector;

        r1 = r0.<com.android.server.AnyMotionDetector: java.lang.Object mLock>;

        entermonitor r1;

     label1:
        $i0 = r0.<com.android.server.AnyMotionDetector: int mState>;

        if $i0 != 1 goto label2;

        r0.<com.android.server.AnyMotionDetector: int mState> = 0;

     label2:
        $r4 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        $r3 = r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mMeasurementTimeout>;

        virtualinvoke $r4.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3);

        $r6 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        $r5 = r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mSensorRestart>;

        virtualinvoke $r6.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r5);

        r0.<com.android.server.AnyMotionDetector: boolean mMeasurementTimeoutIsActive> = 0;

        r0.<com.android.server.AnyMotionDetector: boolean mSensorRestartIsActive> = 0;

        $z0 = r0.<com.android.server.AnyMotionDetector: boolean mMeasurementInProgress>;

        if $z0 == 0 goto label3;

        r0.<com.android.server.AnyMotionDetector: boolean mMeasurementInProgress> = 0;

        $r12 = r0.<com.android.server.AnyMotionDetector: android.hardware.SensorManager mSensorManager>;

        $r11 = r0.<com.android.server.AnyMotionDetector: android.hardware.SensorEventListener mListener>;

        virtualinvoke $r12.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r11);

     label3:
        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mCurrentGravityVector> = null;

        r0.<com.android.server.AnyMotionDetector: com.android.server.AnyMotionDetector$Vector3 mPreviousGravityVector> = null;

        $r7 = r0.<com.android.server.AnyMotionDetector: android.os.PowerManager$WakeLock mWakeLock>;

        $z1 = virtualinvoke $r7.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z1 == 0 goto label4;

        $r9 = r0.<com.android.server.AnyMotionDetector: android.os.Handler mHandler>;

        $r8 = r0.<com.android.server.AnyMotionDetector: java.lang.Runnable mWakelockTimeout>;

        virtualinvoke $r9.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r8);

        r0.<com.android.server.AnyMotionDetector: boolean mWakelockTimeoutIsActive> = 0;

        $r10 = r0.<com.android.server.AnyMotionDetector: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r10.<android.os.PowerManager$WakeLock: void release()>();

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r13 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public static void <clinit>()
    {
        <com.android.server.AnyMotionDetector: long WAKELOCK_TIMEOUT_MILLIS> = 30000L;

        <com.android.server.AnyMotionDetector: java.lang.String TAG> = "AnyMotionDetector";

        <com.android.server.AnyMotionDetector: int STATE_INACTIVE> = 0;

        <com.android.server.AnyMotionDetector: int STATE_ACTIVE> = 1;

        <com.android.server.AnyMotionDetector: int STALE_MEASUREMENT_TIMEOUT_MILLIS> = 120000;

        <com.android.server.AnyMotionDetector: int SAMPLING_INTERVAL_MILLIS> = 40;

        <com.android.server.AnyMotionDetector: int RESULT_UNKNOWN> = -1;

        <com.android.server.AnyMotionDetector: int RESULT_STATIONARY> = 0;

        <com.android.server.AnyMotionDetector: int RESULT_MOVED> = 1;

        <com.android.server.AnyMotionDetector: long ORIENTATION_MEASUREMENT_INTERVAL_MILLIS> = 5000L;

        <com.android.server.AnyMotionDetector: long ORIENTATION_MEASUREMENT_DURATION_MILLIS> = 2500L;

        <com.android.server.AnyMotionDetector: boolean DEBUG> = 0;

        <com.android.server.AnyMotionDetector: long ACCELEROMETER_DATA_TIMEOUT_MILLIS> = 3000L;

        return;
    }
}
