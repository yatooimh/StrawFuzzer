class com.android.server.AppStateTracker$FeatureFlagsObserver extends android.database.ContentObserver
{
    final com.android.server.AppStateTracker this$0;

    void <init>(com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$FeatureFlagsObserver r0;
        com.android.server.AppStateTracker r1;

        r0 := @this: com.android.server.AppStateTracker$FeatureFlagsObserver;

        r1 := @parameter0: com.android.server.AppStateTracker;

        r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0> = r1;

        specialinvoke r0.<android.database.ContentObserver: void <init>(android.os.Handler)>(null);

        return;
    }

    boolean isForcedAppStandbyEnabled()
    {
        com.android.server.AppStateTracker$FeatureFlagsObserver r0;
        com.android.server.AppStateTracker r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.AppStateTracker$FeatureFlagsObserver;

        r1 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        z0 = 1;

        $i0 = virtualinvoke r1.<com.android.server.AppStateTracker: int injectGetGlobalSettingInt(java.lang.String,int)>("forced_app_standby_enabled", 1);

        if $i0 != 1 goto label1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    boolean isForcedAppStandbyForSmallBatteryEnabled()
    {
        com.android.server.AppStateTracker$FeatureFlagsObserver r0;
        com.android.server.AppStateTracker r1;
        int $i0;
        boolean z0;

        r0 := @this: com.android.server.AppStateTracker$FeatureFlagsObserver;

        r1 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        z0 = 0;

        $i0 = virtualinvoke r1.<com.android.server.AppStateTracker: int injectGetGlobalSettingInt(java.lang.String,int)>("forced_app_standby_for_small_battery_enabled", 0);

        if $i0 != 1 goto label1;

        z0 = 1;

     label1:
        return z0;
    }

    public void onChange(boolean, android.net.Uri)
    {
        com.android.server.AppStateTracker$FeatureFlagsObserver r0;
        android.net.Uri $r1, $r2, r18;
        boolean $z0, $z1, $z2, $z3, z4, z5, z6;
        java.lang.StringBuilder $r3;
        java.lang.String $r6;
        com.android.server.AppStateTracker $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14;
        com.android.server.AppStateTracker$MyHandler $r15;
        java.lang.Throwable $r16, $r17;
        java.lang.Object r19, r21;

        r0 := @this: com.android.server.AppStateTracker$FeatureFlagsObserver;

        z4 := @parameter0: boolean;

        r18 := @parameter1: android.net.Uri;

        $r1 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("forced_app_standby_enabled");

        $z0 = virtualinvoke $r1.<android.net.Uri: boolean equals(java.lang.Object)>(r18);

        if $z0 == 0 goto label08;

        z5 = virtualinvoke r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: boolean isForcedAppStandbyEnabled()>();

        $r11 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        r19 = staticinvoke <com.android.server.AppStateTracker: java.lang.Object access$100(com.android.server.AppStateTracker)>($r11);

        entermonitor r19;

     label01:
        $r12 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        $z3 = $r12.<com.android.server.AppStateTracker: boolean mForcedAppStandbyEnabled>;

        if $z3 != z5 goto label03;

        exitmonitor r19;

     label02:
        return;

     label03:
        $r13 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        $r13.<com.android.server.AppStateTracker: boolean mForcedAppStandbyEnabled> = z5;

        exitmonitor r19;

     label04:
        $r14 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        $r15 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$MyHandler access$200(com.android.server.AppStateTracker)>($r14);

        virtualinvoke $r15.<com.android.server.AppStateTracker$MyHandler: void notifyForcedAppStandbyFeatureFlagChanged()>();

        goto label17;

     label05:
        $r17 := @caughtexception;

     label06:
        exitmonitor r19;

     label07:
        throw $r17;

     label08:
        $r2 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("forced_app_standby_for_small_battery_enabled");

        $z1 = virtualinvoke $r2.<android.net.Uri: boolean equals(java.lang.Object)>(r18);

        if $z1 == 0 goto label16;

        z6 = virtualinvoke r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: boolean isForcedAppStandbyForSmallBatteryEnabled()>();

        $r7 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        r21 = staticinvoke <com.android.server.AppStateTracker: java.lang.Object access$100(com.android.server.AppStateTracker)>($r7);

        entermonitor r21;

     label09:
        $r8 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        $z2 = $r8.<com.android.server.AppStateTracker: boolean mForceAllAppStandbyForSmallBattery>;

        if $z2 != z6 goto label11;

        exitmonitor r21;

     label10:
        return;

     label11:
        $r9 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        $r9.<com.android.server.AppStateTracker: boolean mForceAllAppStandbyForSmallBattery> = z6;

        $r10 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        staticinvoke <com.android.server.AppStateTracker: void access$300(com.android.server.AppStateTracker)>($r10);

        exitmonitor r21;

     label12:
        goto label17;

     label13:
        $r16 := @caughtexception;

     label14:
        exitmonitor r21;

     label15:
        throw $r16;

     label16:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected feature flag uri encountered: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r18);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("AppStateTracker", $r6);

     label17:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label06 to label07 with label05;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    void register()
    {
        com.android.server.AppStateTracker$FeatureFlagsObserver r0;
        com.android.server.AppStateTracker $r1, $r5;
        android.content.Context $r2, $r6;
        android.content.ContentResolver $r3, $r7;
        android.net.Uri $r4, $r8;

        r0 := @this: com.android.server.AppStateTracker$FeatureFlagsObserver;

        $r1 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        $r2 = staticinvoke <com.android.server.AppStateTracker: android.content.Context access$000(com.android.server.AppStateTracker)>($r1);

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r4 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("forced_app_standby_enabled");

        virtualinvoke $r3.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r4, 0, r0);

        $r5 = r0.<com.android.server.AppStateTracker$FeatureFlagsObserver: com.android.server.AppStateTracker this$0>;

        $r6 = staticinvoke <com.android.server.AppStateTracker: android.content.Context access$000(com.android.server.AppStateTracker)>($r5);

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("forced_app_standby_for_small_battery_enabled");

        virtualinvoke $r7.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)>($r8, 0, r0);

        return;
    }
}
