public abstract class com.android.server.AppStateTracker$Listener extends java.lang.Object
{

    public void <init>()
    {
        com.android.server.AppStateTracker$Listener r0;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static void access$1000(com.android.server.AppStateTracker$Listener, com.android.server.AppStateTracker, int)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;
        int i0;

        r0 := @parameter0: com.android.server.AppStateTracker$Listener;

        r1 := @parameter1: com.android.server.AppStateTracker;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.AppStateTracker$Listener: void onUidActiveStateChanged(com.android.server.AppStateTracker,int)>(r1, i0);

        return;
    }

    static void access$1100(com.android.server.AppStateTracker$Listener, com.android.server.AppStateTracker, int)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;
        int i0;

        r0 := @parameter0: com.android.server.AppStateTracker$Listener;

        r1 := @parameter1: com.android.server.AppStateTracker;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.AppStateTracker$Listener: void onUidForegroundStateChanged(com.android.server.AppStateTracker,int)>(r1, i0);

        return;
    }

    static void access$1200(com.android.server.AppStateTracker$Listener, com.android.server.AppStateTracker, int, java.lang.String)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;
        int i0;
        java.lang.String r2;

        r0 := @parameter0: com.android.server.AppStateTracker$Listener;

        r1 := @parameter1: com.android.server.AppStateTracker;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.AppStateTracker$Listener: void onRunAnyAppOpsChanged(com.android.server.AppStateTracker,int,java.lang.String)>(r1, i0, r2);

        return;
    }

    static void access$1300(com.android.server.AppStateTracker$Listener, com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;

        r0 := @parameter0: com.android.server.AppStateTracker$Listener;

        r1 := @parameter1: com.android.server.AppStateTracker;

        specialinvoke r0.<com.android.server.AppStateTracker$Listener: void onPowerSaveUnwhitelisted(com.android.server.AppStateTracker)>(r1);

        return;
    }

    static void access$1400(com.android.server.AppStateTracker$Listener, com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;

        r0 := @parameter0: com.android.server.AppStateTracker$Listener;

        r1 := @parameter1: com.android.server.AppStateTracker;

        specialinvoke r0.<com.android.server.AppStateTracker$Listener: void onPowerSaveWhitelistedChanged(com.android.server.AppStateTracker)>(r1);

        return;
    }

    static void access$1500(com.android.server.AppStateTracker$Listener, com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;

        r0 := @parameter0: com.android.server.AppStateTracker$Listener;

        r1 := @parameter1: com.android.server.AppStateTracker;

        specialinvoke r0.<com.android.server.AppStateTracker$Listener: void onTempPowerSaveWhitelistChanged(com.android.server.AppStateTracker)>(r1);

        return;
    }

    static void access$1600(com.android.server.AppStateTracker$Listener, com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;

        r0 := @parameter0: com.android.server.AppStateTracker$Listener;

        r1 := @parameter1: com.android.server.AppStateTracker;

        specialinvoke r0.<com.android.server.AppStateTracker$Listener: void onExemptChanged(com.android.server.AppStateTracker)>(r1);

        return;
    }

    static void access$1700(com.android.server.AppStateTracker$Listener, com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;

        r0 := @parameter0: com.android.server.AppStateTracker$Listener;

        r1 := @parameter1: com.android.server.AppStateTracker;

        specialinvoke r0.<com.android.server.AppStateTracker$Listener: void onForceAllAppsStandbyChanged(com.android.server.AppStateTracker)>(r1);

        return;
    }

    private void onExemptChanged(com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        r1 := @parameter0: com.android.server.AppStateTracker;

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void updateAllJobs()>();

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void unblockAllUnrestrictedAlarms()>();

        return;
    }

    private void onForceAllAppsStandbyChanged(com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;
        boolean $z0;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        r1 := @parameter0: com.android.server.AppStateTracker;

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void updateAllJobs()>();

        $z0 = virtualinvoke r1.<com.android.server.AppStateTracker: boolean isForceAllAppsStandbyEnabled()>();

        if $z0 != 0 goto label1;

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void unblockAllUnrestrictedAlarms()>();

     label1:
        return;
    }

    private void onPowerSaveUnwhitelisted(com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        r1 := @parameter0: com.android.server.AppStateTracker;

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void updateAllJobs()>();

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void unblockAllUnrestrictedAlarms()>();

        return;
    }

    private void onPowerSaveWhitelistedChanged(com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        r1 := @parameter0: com.android.server.AppStateTracker;

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void updateAllJobs()>();

        return;
    }

    private void onRunAnyAppOpsChanged(com.android.server.AppStateTracker, int, java.lang.String)
    {
        com.android.server.AppStateTracker$Listener r0;
        int i0;
        java.lang.String r1, $r8;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2;
        com.android.server.AppStateTracker r9;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        r9 := @parameter0: com.android.server.AppStateTracker;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $z0 = virtualinvoke r9.<com.android.server.AppStateTracker: boolean isUidActive(int)>(i0);

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void updateJobsForUidPackage(int,java.lang.String,boolean)>(i0, r1, $z0);

        $z1 = virtualinvoke r9.<com.android.server.AppStateTracker: boolean areAlarmsRestricted(int,java.lang.String,boolean)>(i0, r1, 0);

        if $z1 != 0 goto label1;

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void unblockAlarmsForUidPackage(int,java.lang.String)>(i0, r1);

        goto label2;

     label1:
        $z2 = virtualinvoke r9.<com.android.server.AppStateTracker: boolean areAlarmsRestricted(int,java.lang.String,boolean)>(i0, r1, 1);

        if $z2 != 0 goto label2;

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void unblockAllUnrestrictedAlarms()>();

     label2:
        $z3 = virtualinvoke r9.<com.android.server.AppStateTracker: boolean isRunAnyInBackgroundAppOpsAllowed(int,java.lang.String)>(i0, r1);

        if $z3 != 0 goto label3;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" toggled into fg service restriction");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int v(java.lang.String,java.lang.String)>("AppStateTracker", $r8);

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void stopForegroundServicesForUidPackage(int,java.lang.String)>(i0, r1);

     label3:
        return;
    }

    private void onTempPowerSaveWhitelistChanged(com.android.server.AppStateTracker)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        r1 := @parameter0: com.android.server.AppStateTracker;

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void updateAllJobs()>();

        return;
    }

    private void onUidActiveStateChanged(com.android.server.AppStateTracker, int)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        r1 := @parameter0: com.android.server.AppStateTracker;

        i0 := @parameter1: int;

        z0 = virtualinvoke r1.<com.android.server.AppStateTracker: boolean isUidActive(int)>(i0);

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void updateJobsForUid(int,boolean)>(i0, z0);

        if z0 == 0 goto label1;

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void unblockAlarmsForUid(int)>(i0);

     label1:
        return;
    }

    private void onUidForegroundStateChanged(com.android.server.AppStateTracker, int)
    {
        com.android.server.AppStateTracker$Listener r0;
        com.android.server.AppStateTracker r1;
        int i0;
        boolean $z0;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        r1 := @parameter0: com.android.server.AppStateTracker;

        i0 := @parameter1: int;

        $z0 = virtualinvoke r1.<com.android.server.AppStateTracker: boolean isUidInForeground(int)>(i0);

        virtualinvoke r0.<com.android.server.AppStateTracker$Listener: void onUidForeground(int,boolean)>(i0, $z0);

        return;
    }

    public void onUidForeground(int, boolean)
    {
        com.android.server.AppStateTracker$Listener r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void stopForegroundServicesForUidPackage(int, java.lang.String)
    {
        com.android.server.AppStateTracker$Listener r0;
        int i0;
        java.lang.String r1;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return;
    }

    public void unblockAlarmsForUid(int)
    {
        com.android.server.AppStateTracker$Listener r0;
        int i0;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        i0 := @parameter0: int;

        return;
    }

    public void unblockAlarmsForUidPackage(int, java.lang.String)
    {
        com.android.server.AppStateTracker$Listener r0;
        int i0;
        java.lang.String r1;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        return;
    }

    public void unblockAllUnrestrictedAlarms()
    {
        com.android.server.AppStateTracker$Listener r0;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        return;
    }

    public void updateAllJobs()
    {
        com.android.server.AppStateTracker$Listener r0;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        return;
    }

    public void updateJobsForUid(int, boolean)
    {
        com.android.server.AppStateTracker$Listener r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        return;
    }

    public void updateJobsForUidPackage(int, java.lang.String, boolean)
    {
        com.android.server.AppStateTracker$Listener r0;
        int i0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: com.android.server.AppStateTracker$Listener;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        return;
    }
}
