class com.android.server.AppStateTracker$MyHandler extends android.os.Handler
{
    private static final int MSG_ALL_UNWHITELISTED;
    private static final int MSG_ALL_WHITELIST_CHANGED;
    private static final int MSG_EXEMPT_CHANGED;
    private static final int MSG_FORCE_ALL_CHANGED;
    private static final int MSG_FORCE_APP_STANDBY_FEATURE_FLAG_CHANGED;
    private static final int MSG_ON_UID_ACTIVE;
    private static final int MSG_ON_UID_GONE;
    private static final int MSG_ON_UID_IDLE;
    private static final int MSG_ON_UID_STATE_CHANGED;
    private static final int MSG_RUN_ANY_CHANGED;
    private static final int MSG_TEMP_WHITELIST_CHANGED;
    private static final int MSG_UID_ACTIVE_STATE_CHANGED;
    private static final int MSG_UID_FG_STATE_CHANGED;
    private static final int MSG_USER_REMOVED;
    final com.android.server.AppStateTracker this$0;

    public void <init>(com.android.server.AppStateTracker, android.os.Looper)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        com.android.server.AppStateTracker r1;
        android.os.Looper r2;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        r1 := @parameter0: com.android.server.AppStateTracker;

        r2 := @parameter1: android.os.Looper;

        r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0> = r1;

        specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r2);

        return;
    }

    private void removeUid(int, boolean)
    {
        com.android.server.AppStateTracker$MyHandler r0, $r9, $r11;
        int i0;
        boolean z0, $z1, $z2;
        java.lang.Object r1;
        com.android.server.AppStateTracker $r3, $r4, $r6, $r8, $r10;
        android.util.SparseBooleanArray $r5, $r7;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r1 = staticinvoke <com.android.server.AppStateTracker: java.lang.Object access$100(com.android.server.AppStateTracker)>($r3);

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r5 = $r4.<com.android.server.AppStateTracker: android.util.SparseBooleanArray mActiveUids>;

        $z1 = staticinvoke <com.android.server.AppStateTracker: boolean access$1800(android.util.SparseBooleanArray,int,boolean)>($r5, i0, z0);

        if $z1 == 0 goto label2;

        $r10 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r11 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$MyHandler access$200(com.android.server.AppStateTracker)>($r10);

        virtualinvoke $r11.<com.android.server.AppStateTracker$MyHandler: void notifyUidActiveStateChanged(int)>(i0);

     label2:
        $r6 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r7 = $r6.<com.android.server.AppStateTracker: android.util.SparseBooleanArray mForegroundUids>;

        $z2 = staticinvoke <com.android.server.AppStateTracker: boolean access$1800(android.util.SparseBooleanArray,int,boolean)>($r7, i0, z0);

        if $z2 == 0 goto label3;

        $r8 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r9 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$MyHandler access$200(com.android.server.AppStateTracker)>($r8);

        virtualinvoke $r9.<com.android.server.AppStateTracker$MyHandler: void notifyUidForegroundStateChanged(int)>(i0);

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r12 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void doUserRemoved(int)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        int i0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int,int,int)>(8, i0, 0);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void handleMessage(android.os.Message)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        long l0;
        int i1, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i16, $i22, $i24, $i26, i27, i29, i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, i44, i45, i46, i47;
        com.android.server.AppStateTracker $r1, $r2, $r3, $r4, $r6, $r7, $r10, $r11, $r12, $r14, $r15, $r16, $r17, $r20, $r21, $r24, $r25, $r28, $r29, $r32, $r33, $r38, $r39, $r42, $r43, r50, $r53;
        boolean $z2, $z3, $z4, z5, z6, z7;
        com.android.internal.util.StatLogger $r5, $r8, $r13, $r18, $r22, $r26, $r30, $r34, $r40, $r44;
        com.android.server.AppStateTracker$Listener $r9, $r19, $r23, $r27, $r31, $r37, $r41, $r45, r55;
        java.lang.Object $r35, r49, r52;
        java.lang.String $r36;
        java.lang.Throwable $r46, $r47;
        android.os.Message r48;
        com.android.server.AppStateTracker$Listener[] r51, r54, r57, r58, r59, r60, r61, r62, r63;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        r48 := @parameter0: android.os.Message;

        $i7 = r48.<android.os.Message: int what>;

        if $i7 == 8 goto label54;

        $r2 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r49 = staticinvoke <com.android.server.AppStateTracker: java.lang.Object access$100(com.android.server.AppStateTracker)>($r2);

        entermonitor r49;

     label01:
        $r3 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $z2 = $r3.<com.android.server.AppStateTracker: boolean mStarted>;

        if $z2 != 0 goto label03;

        exitmonitor r49;

     label02:
        return;

     label03:
        exitmonitor r49;

     label04:
        r50 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r4 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r5 = staticinvoke <com.android.server.AppStateTracker: com.android.internal.util.StatLogger access$800(com.android.server.AppStateTracker)>($r4);

        l0 = virtualinvoke $r5.<com.android.internal.util.StatLogger: long getTime()>();

        i1 = r48.<android.os.Message: int what>;

        z5 = 1;

        i27 = 0;

        i29 = 0;

        tableswitch(i1)
        {
            case 0: goto label48;
            case 1: goto label45;
            case 2: goto label05;
            case 3: goto label42;
            case 4: goto label39;
            case 5: goto label36;
            case 6: goto label33;
            case 7: goto label30;
            case 8: goto label29;
            case 9: goto label17;
            case 10: goto label14;
            case 11: goto label13;
            case 12: goto label12;
            case 13: goto label09;
            case 14: goto label06;
            default: goto label05;
        };

     label05:
        return;

     label06:
        i30 = r48.<android.os.Message: int arg1>;

        $i9 = r48.<android.os.Message: int arg1>;

        if $i9 == 0 goto label07;

        goto label08;

     label07:
        z5 = 0;

     label08:
        virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: void handleUidIdle(int,boolean)>(i30, z5);

        return;

     label09:
        i31 = r48.<android.os.Message: int arg1>;

        $i10 = r48.<android.os.Message: int arg1>;

        if $i10 == 0 goto label10;

        z6 = 1;

        goto label11;

     label10:
        z6 = 0;

     label11:
        virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: void handleUidGone(int,boolean)>(i31, z6);

        return;

     label12:
        $i11 = r48.<android.os.Message: int arg1>;

        virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: void handleUidActive(int)>($i11);

        return;

     label13:
        $i13 = r48.<android.os.Message: int arg1>;

        $i12 = r48.<android.os.Message: int arg2>;

        virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: void handleUidStateChanged(int,int)>($i13, $i12);

        return;

     label14:
        $r6 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r51 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$Listener[] access$900(com.android.server.AppStateTracker)>($r6);

        i32 = lengthof r51;

     label15:
        if i29 >= i32 goto label16;

        $r9 = r51[i29];

        staticinvoke <com.android.server.AppStateTracker$Listener: void access$1600(com.android.server.AppStateTracker$Listener,com.android.server.AppStateTracker)>($r9, r50);

        i29 = i29 + 1;

        goto label15;

     label16:
        $r7 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r8 = staticinvoke <com.android.server.AppStateTracker: com.android.internal.util.StatLogger access$800(com.android.server.AppStateTracker)>($r7);

        virtualinvoke $r8.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(6, l0);

        return;

     label17:
        $r10 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r52 = staticinvoke <com.android.server.AppStateTracker: java.lang.Object access$100(com.android.server.AppStateTracker)>($r10);

        entermonitor r52;

     label18:
        $r11 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $z3 = $r11.<com.android.server.AppStateTracker: boolean mForcedAppStandbyEnabled>;

        if $z3 != 0 goto label20;

        $r14 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $z4 = $r14.<com.android.server.AppStateTracker: boolean mForceAllAppsStandby>;

        if $z4 != 0 goto label20;

     label19:
        z7 = 1;

        goto label21;

     label20:
        z7 = 0;

     label21:
        exitmonitor r52;

     label22:
        $r53 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r54 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$Listener[] access$900(com.android.server.AppStateTracker)>($r53);

        i33 = lengthof r54;

     label23:
        if i27 >= i33 goto label25;

        r55 = r54[i27];

        virtualinvoke r55.<com.android.server.AppStateTracker$Listener: void updateAllJobs()>();

        if z7 == 0 goto label24;

        virtualinvoke r55.<com.android.server.AppStateTracker$Listener: void unblockAllUnrestrictedAlarms()>();

     label24:
        i27 = i27 + 1;

        goto label23;

     label25:
        $r12 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r13 = staticinvoke <com.android.server.AppStateTracker: com.android.internal.util.StatLogger access$800(com.android.server.AppStateTracker)>($r12);

        virtualinvoke $r13.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(8, l0);

        return;

     label26:
        $r47 := @caughtexception;

     label27:
        exitmonitor r52;

     label28:
        throw $r47;

     label29:
        $r15 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $i16 = r48.<android.os.Message: int arg1>;

        virtualinvoke $r15.<com.android.server.AppStateTracker: void handleUserRemoved(int)>($i16);

        return;

     label30:
        $r16 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r57 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$Listener[] access$900(com.android.server.AppStateTracker)>($r16);

        i34 = lengthof r57;

        i35 = 0;

     label31:
        if i35 >= i34 goto label32;

        $r19 = r57[i35];

        staticinvoke <com.android.server.AppStateTracker$Listener: void access$1700(com.android.server.AppStateTracker$Listener,com.android.server.AppStateTracker)>($r19, r50);

        i35 = i35 + 1;

        goto label31;

     label32:
        $r17 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r18 = staticinvoke <com.android.server.AppStateTracker: com.android.internal.util.StatLogger access$800(com.android.server.AppStateTracker)>($r17);

        virtualinvoke $r18.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(7, l0);

        return;

     label33:
        $r20 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r58 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$Listener[] access$900(com.android.server.AppStateTracker)>($r20);

        i36 = lengthof r58;

        i37 = 0;

     label34:
        if i37 >= i36 goto label35;

        $r23 = r58[i37];

        staticinvoke <com.android.server.AppStateTracker$Listener: void access$1500(com.android.server.AppStateTracker$Listener,com.android.server.AppStateTracker)>($r23, r50);

        i37 = i37 + 1;

        goto label34;

     label35:
        $r21 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r22 = staticinvoke <com.android.server.AppStateTracker: com.android.internal.util.StatLogger access$800(com.android.server.AppStateTracker)>($r21);

        virtualinvoke $r22.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(5, l0);

        return;

     label36:
        $r24 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r59 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$Listener[] access$900(com.android.server.AppStateTracker)>($r24);

        i38 = lengthof r59;

        i39 = 0;

     label37:
        if i39 >= i38 goto label38;

        $r27 = r59[i39];

        staticinvoke <com.android.server.AppStateTracker$Listener: void access$1400(com.android.server.AppStateTracker$Listener,com.android.server.AppStateTracker)>($r27, r50);

        i39 = i39 + 1;

        goto label37;

     label38:
        $r25 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r26 = staticinvoke <com.android.server.AppStateTracker: com.android.internal.util.StatLogger access$800(com.android.server.AppStateTracker)>($r25);

        virtualinvoke $r26.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(4, l0);

        return;

     label39:
        $r28 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r60 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$Listener[] access$900(com.android.server.AppStateTracker)>($r28);

        i40 = lengthof r60;

        i41 = 0;

     label40:
        if i41 >= i40 goto label41;

        $r31 = r60[i41];

        staticinvoke <com.android.server.AppStateTracker$Listener: void access$1300(com.android.server.AppStateTracker$Listener,com.android.server.AppStateTracker)>($r31, r50);

        i41 = i41 + 1;

        goto label40;

     label41:
        $r29 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r30 = staticinvoke <com.android.server.AppStateTracker: com.android.internal.util.StatLogger access$800(com.android.server.AppStateTracker)>($r29);

        virtualinvoke $r30.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(3, l0);

        return;

     label42:
        $r32 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r61 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$Listener[] access$900(com.android.server.AppStateTracker)>($r32);

        i42 = lengthof r61;

        i43 = 0;

     label43:
        if i43 >= i42 goto label44;

        $r37 = r61[i43];

        $i22 = r48.<android.os.Message: int arg1>;

        $r35 = r48.<android.os.Message: java.lang.Object obj>;

        $r36 = (java.lang.String) $r35;

        staticinvoke <com.android.server.AppStateTracker$Listener: void access$1200(com.android.server.AppStateTracker$Listener,com.android.server.AppStateTracker,int,java.lang.String)>($r37, r50, $i22, $r36);

        i43 = i43 + 1;

        goto label43;

     label44:
        $r33 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r34 = staticinvoke <com.android.server.AppStateTracker: com.android.internal.util.StatLogger access$800(com.android.server.AppStateTracker)>($r33);

        virtualinvoke $r34.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(2, l0);

        return;

     label45:
        $r38 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r62 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$Listener[] access$900(com.android.server.AppStateTracker)>($r38);

        i44 = lengthof r62;

        i45 = 0;

     label46:
        if i45 >= i44 goto label47;

        $r41 = r62[i45];

        $i24 = r48.<android.os.Message: int arg1>;

        staticinvoke <com.android.server.AppStateTracker$Listener: void access$1100(com.android.server.AppStateTracker$Listener,com.android.server.AppStateTracker,int)>($r41, r50, $i24);

        i45 = i45 + 1;

        goto label46;

     label47:
        $r39 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r40 = staticinvoke <com.android.server.AppStateTracker: com.android.internal.util.StatLogger access$800(com.android.server.AppStateTracker)>($r39);

        virtualinvoke $r40.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(0, l0);

        return;

     label48:
        $r42 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r63 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$Listener[] access$900(com.android.server.AppStateTracker)>($r42);

        i46 = lengthof r63;

        i47 = 0;

     label49:
        if i47 >= i46 goto label50;

        $r45 = r63[i47];

        $i26 = r48.<android.os.Message: int arg1>;

        staticinvoke <com.android.server.AppStateTracker$Listener: void access$1000(com.android.server.AppStateTracker$Listener,com.android.server.AppStateTracker,int)>($r45, r50, $i26);

        i47 = i47 + 1;

        goto label49;

     label50:
        $r43 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r44 = staticinvoke <com.android.server.AppStateTracker: com.android.internal.util.StatLogger access$800(com.android.server.AppStateTracker)>($r43);

        virtualinvoke $r44.<com.android.internal.util.StatLogger: long logDurationStat(int,long)>(1, l0);

        return;

     label51:
        $r46 := @caughtexception;

     label52:
        exitmonitor r49;

     label53:
        throw $r46;

     label54:
        $r1 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $i8 = r48.<android.os.Message: int arg1>;

        virtualinvoke $r1.<com.android.server.AppStateTracker: void handleUserRemoved(int)>($i8);

        return;

        catch java.lang.Throwable from label01 to label02 with label51;
        catch java.lang.Throwable from label03 to label04 with label51;
        catch java.lang.Throwable from label18 to label19 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.lang.Throwable from label27 to label28 with label26;
        catch java.lang.Throwable from label52 to label53 with label51;
    }

    public void handleUidActive(int)
    {
        com.android.server.AppStateTracker$MyHandler r0, $r7;
        int i0;
        java.lang.Object r1;
        com.android.server.AppStateTracker $r3, $r4, $r6;
        android.util.SparseBooleanArray $r5;
        boolean $z0;
        java.lang.Throwable $r8;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r1 = staticinvoke <com.android.server.AppStateTracker: java.lang.Object access$100(com.android.server.AppStateTracker)>($r3);

        entermonitor r1;

     label1:
        $r4 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r5 = $r4.<com.android.server.AppStateTracker: android.util.SparseBooleanArray mActiveUids>;

        $z0 = staticinvoke <com.android.server.AppStateTracker: boolean access$1900(android.util.SparseBooleanArray,int)>($r5, i0);

        if $z0 == 0 goto label2;

        $r6 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r7 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$MyHandler access$200(com.android.server.AppStateTracker)>($r6);

        virtualinvoke $r7.<com.android.server.AppStateTracker$MyHandler: void notifyUidActiveStateChanged(int)>(i0);

     label2:
        exitmonitor r1;

     label3:
        return;

     label4:
        $r8 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void handleUidGone(int, boolean)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.AppStateTracker$MyHandler: void removeUid(int,boolean)>(i0, 1);

        return;
    }

    public void handleUidIdle(int, boolean)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.AppStateTracker$MyHandler: void removeUid(int,boolean)>(i0, 0);

        return;
    }

    public void handleUidStateChanged(int, int)
    {
        com.android.server.AppStateTracker$MyHandler r0, $r7, $r11;
        int i0, i1;
        java.lang.Object r1;
        com.android.server.AppStateTracker $r3, $r4, $r6, $r8, $r10;
        android.util.SparseBooleanArray $r5, $r9;
        boolean $z0, $z1;
        java.lang.Throwable $r12;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r3 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        r1 = staticinvoke <com.android.server.AppStateTracker: java.lang.Object access$100(com.android.server.AppStateTracker)>($r3);

        entermonitor r1;

        if i1 <= 6 goto label3;

     label1:
        $r8 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r9 = $r8.<com.android.server.AppStateTracker: android.util.SparseBooleanArray mForegroundUids>;

        $z1 = staticinvoke <com.android.server.AppStateTracker: boolean access$1800(android.util.SparseBooleanArray,int,boolean)>($r9, i0, 0);

        if $z1 == 0 goto label4;

        $r10 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r11 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$MyHandler access$200(com.android.server.AppStateTracker)>($r10);

        virtualinvoke $r11.<com.android.server.AppStateTracker$MyHandler: void notifyUidForegroundStateChanged(int)>(i0);

     label2:
        goto label4;

     label3:
        $r4 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r5 = $r4.<com.android.server.AppStateTracker: android.util.SparseBooleanArray mForegroundUids>;

        $z0 = staticinvoke <com.android.server.AppStateTracker: boolean access$1900(android.util.SparseBooleanArray,int)>($r5, i0);

        if $z0 == 0 goto label4;

        $r6 = r0.<com.android.server.AppStateTracker$MyHandler: com.android.server.AppStateTracker this$0>;

        $r7 = staticinvoke <com.android.server.AppStateTracker: com.android.server.AppStateTracker$MyHandler access$200(com.android.server.AppStateTracker)>($r6);

        virtualinvoke $r7.<com.android.server.AppStateTracker$MyHandler: void notifyUidForegroundStateChanged(int)>(i0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r12 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r12;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public void notifyAllUnwhitelisted()
    {
        com.android.server.AppStateTracker$MyHandler r0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: void removeMessages(int)>(4);

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int)>(4);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void notifyAllWhitelistChanged()
    {
        com.android.server.AppStateTracker$MyHandler r0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: void removeMessages(int)>(5);

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int)>(5);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void notifyExemptChanged()
    {
        com.android.server.AppStateTracker$MyHandler r0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: void removeMessages(int)>(10);

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int)>(10);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void notifyForceAllAppsStandbyChanged()
    {
        com.android.server.AppStateTracker$MyHandler r0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: void removeMessages(int)>(7);

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int)>(7);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void notifyForcedAppStandbyFeatureFlagChanged()
    {
        com.android.server.AppStateTracker$MyHandler r0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: void removeMessages(int)>(9);

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int)>(9);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void notifyRunAnyAppOpsChanged(int, java.lang.String)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        int i0;
        java.lang.String r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(3, i0, 0, r1);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void notifyTempWhitelistChanged()
    {
        com.android.server.AppStateTracker$MyHandler r0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: void removeMessages(int)>(6);

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int)>(6);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void notifyUidActiveStateChanged(int)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        int i0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int,int,int)>(0, i0, 0);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void notifyUidForegroundStateChanged(int)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        int i0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int,int,int)>(1, i0, 0);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onUidActive(int)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        int i0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int,int,int)>(12, i0, 0);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onUidGone(int, boolean)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        int i0, i1;
        boolean z0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 = (int) z0;

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int,int,int)>(13, i0, i1);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onUidIdle(int, boolean)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        int i0, i1;
        boolean z0;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i1 = (int) z0;

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int,int,int)>(14, i0, i1);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public void onUidStateChanged(int, int)
    {
        com.android.server.AppStateTracker$MyHandler r0;
        int i0, i1;
        android.os.Message $r1;

        r0 := @this: com.android.server.AppStateTracker$MyHandler;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.AppStateTracker$MyHandler: android.os.Message obtainMessage(int,int,int)>(11, i0, i1);

        virtualinvoke $r1.<android.os.Message: void sendToTarget()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.AppStateTracker$MyHandler: int MSG_USER_REMOVED> = 8;

        <com.android.server.AppStateTracker$MyHandler: int MSG_UID_FG_STATE_CHANGED> = 1;

        <com.android.server.AppStateTracker$MyHandler: int MSG_UID_ACTIVE_STATE_CHANGED> = 0;

        <com.android.server.AppStateTracker$MyHandler: int MSG_TEMP_WHITELIST_CHANGED> = 6;

        <com.android.server.AppStateTracker$MyHandler: int MSG_RUN_ANY_CHANGED> = 3;

        <com.android.server.AppStateTracker$MyHandler: int MSG_ON_UID_STATE_CHANGED> = 11;

        <com.android.server.AppStateTracker$MyHandler: int MSG_ON_UID_IDLE> = 14;

        <com.android.server.AppStateTracker$MyHandler: int MSG_ON_UID_GONE> = 13;

        <com.android.server.AppStateTracker$MyHandler: int MSG_ON_UID_ACTIVE> = 12;

        <com.android.server.AppStateTracker$MyHandler: int MSG_FORCE_APP_STANDBY_FEATURE_FLAG_CHANGED> = 9;

        <com.android.server.AppStateTracker$MyHandler: int MSG_FORCE_ALL_CHANGED> = 7;

        <com.android.server.AppStateTracker$MyHandler: int MSG_EXEMPT_CHANGED> = 10;

        <com.android.server.AppStateTracker$MyHandler: int MSG_ALL_WHITELIST_CHANGED> = 5;

        <com.android.server.AppStateTracker$MyHandler: int MSG_ALL_UNWHITELISTED> = 4;

        return;
    }
}
