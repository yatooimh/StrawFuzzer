class com.android.server.ConnectivityService$CaptivePortalImpl extends android.net.ICaptivePortal$Stub
{
    private final android.net.Network mNetwork;
    final com.android.server.ConnectivityService this$0;

    private void <init>(com.android.server.ConnectivityService, android.net.Network)
    {
        com.android.server.ConnectivityService$CaptivePortalImpl r0;
        com.android.server.ConnectivityService r1;
        android.net.Network r2;

        r0 := @this: com.android.server.ConnectivityService$CaptivePortalImpl;

        r1 := @parameter0: com.android.server.ConnectivityService;

        r2 := @parameter1: android.net.Network;

        r0.<com.android.server.ConnectivityService$CaptivePortalImpl: com.android.server.ConnectivityService this$0> = r1;

        specialinvoke r0.<android.net.ICaptivePortal$Stub: void <init>()>();

        r0.<com.android.server.ConnectivityService$CaptivePortalImpl: android.net.Network mNetwork> = r2;

        return;
    }

    void <init>(com.android.server.ConnectivityService, android.net.Network, com.android.server.ConnectivityService$1)
    {
        com.android.server.ConnectivityService$CaptivePortalImpl r0;
        com.android.server.ConnectivityService r1;
        android.net.Network r2;
        com.android.server.ConnectivityService$1 r3;

        r0 := @this: com.android.server.ConnectivityService$CaptivePortalImpl;

        r1 := @parameter0: com.android.server.ConnectivityService;

        r2 := @parameter1: android.net.Network;

        r3 := @parameter2: com.android.server.ConnectivityService$1;

        specialinvoke r0.<com.android.server.ConnectivityService$CaptivePortalImpl: void <init>(com.android.server.ConnectivityService,android.net.Network)>(r1, r2);

        return;
    }

    private android.net.NetworkMonitorManager getNetworkMonitorManager(android.net.Network)
    {
        com.android.server.ConnectivityService$CaptivePortalImpl r0;
        com.android.server.ConnectivityService $r1;
        android.net.NetworkMonitorManager $r2;
        android.net.Network r3;
        com.android.server.connectivity.NetworkAgentInfo r4;

        r0 := @this: com.android.server.ConnectivityService$CaptivePortalImpl;

        r3 := @parameter0: android.net.Network;

        $r1 = r0.<com.android.server.ConnectivityService$CaptivePortalImpl: com.android.server.ConnectivityService this$0>;

        r4 = virtualinvoke $r1.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r3);

        if r4 != null goto label1;

        return null;

     label1:
        $r2 = virtualinvoke r4.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMonitorManager networkMonitor()>();

        return $r2;
    }

    public void appRequest(int)
    {
        com.android.server.ConnectivityService$CaptivePortalImpl r0;
        int i0, $i1;
        android.net.NetworkMonitorManager r1;
        android.net.Network $r2;
        com.android.server.ConnectivityService $r3;

        r0 := @this: com.android.server.ConnectivityService$CaptivePortalImpl;

        i0 := @parameter0: int;

        $r2 = r0.<com.android.server.ConnectivityService$CaptivePortalImpl: android.net.Network mNetwork>;

        r1 = specialinvoke r0.<com.android.server.ConnectivityService$CaptivePortalImpl: android.net.NetworkMonitorManager getNetworkMonitorManager(android.net.Network)>($r2);

        if r1 != null goto label1;

        return;

     label1:
        if i0 != 100 goto label2;

        $r3 = r0.<com.android.server.ConnectivityService$CaptivePortalImpl: com.android.server.ConnectivityService this$0>;

        staticinvoke <com.android.server.ConnectivityService: boolean access$4400(com.android.server.ConnectivityService)>($r3);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r1.<android.net.NetworkMonitorManager: boolean forceReevaluation(int)>($i1);

     label2:
        return;
    }

    public void appResponse(int)
    {
        com.android.server.ConnectivityService$CaptivePortalImpl r0;
        int i0;
        android.net.NetworkMonitorManager r1;
        android.net.Network $r2;
        com.android.server.ConnectivityService $r3;

        r0 := @this: com.android.server.ConnectivityService$CaptivePortalImpl;

        i0 := @parameter0: int;

        if i0 != 2 goto label1;

        $r3 = r0.<com.android.server.ConnectivityService$CaptivePortalImpl: com.android.server.ConnectivityService this$0>;

        staticinvoke <com.android.server.ConnectivityService: void access$4300(com.android.server.ConnectivityService)>($r3);

     label1:
        $r2 = r0.<com.android.server.ConnectivityService$CaptivePortalImpl: android.net.Network mNetwork>;

        r1 = specialinvoke r0.<com.android.server.ConnectivityService$CaptivePortalImpl: android.net.NetworkMonitorManager getNetworkMonitorManager(android.net.Network)>($r2);

        if r1 != null goto label2;

        return;

     label2:
        virtualinvoke r1.<android.net.NetworkMonitorManager: boolean notifyCaptivePortalAppFinished(int)>(i0);

        return;
    }

    public void logEvent(int, java.lang.String)
    {
        com.android.server.ConnectivityService$CaptivePortalImpl r0;
        int i0;
        java.lang.String r1;
        com.android.server.ConnectivityService $r2;
        com.android.internal.logging.MetricsLogger $r3;

        r0 := @this: com.android.server.ConnectivityService$CaptivePortalImpl;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.ConnectivityService$CaptivePortalImpl: com.android.server.ConnectivityService this$0>;

        staticinvoke <com.android.server.ConnectivityService: void access$4300(com.android.server.ConnectivityService)>($r2);

        $r3 = new com.android.internal.logging.MetricsLogger;

        specialinvoke $r3.<com.android.internal.logging.MetricsLogger: void <init>()>();

        virtualinvoke $r3.<com.android.internal.logging.MetricsLogger: void action(int,java.lang.String)>(i0, r1);

        return;
    }
}
