public class com.android.server.ConnectivityService$Dependencies extends java.lang.Object
{

    public void <init>()
    {
        com.android.server.ConnectivityService$Dependencies r0;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public com.android.internal.app.IBatteryStats getBatteryStatsService()
    {
        com.android.server.ConnectivityService$Dependencies r0;
        com.android.internal.app.IBatteryStats $r1;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        $r1 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        return $r1;
    }

    public android.net.IIpConnectivityMetrics getIpConnectivityMetrics()
    {
        com.android.server.ConnectivityService$Dependencies r0;
        android.os.IBinder $r1;
        android.net.IIpConnectivityMetrics $r2;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        $r1 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("connmetrics");

        $r2 = staticinvoke <android.net.IIpConnectivityMetrics$Stub: android.net.IIpConnectivityMetrics asInterface(android.os.IBinder)>($r1);

        return $r2;
    }

    public com.android.server.connectivity.IpConnectivityMetrics$Logger getMetricsLogger()
    {
        com.android.server.ConnectivityService$Dependencies r0;
        com.android.server.connectivity.IpConnectivityMetrics$Logger r1, $r4;
        java.lang.Object $r2;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        $r2 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/connectivity/IpConnectivityMetrics$Logger;");

        r1 = (com.android.server.connectivity.IpConnectivityMetrics$Logger) $r2;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "no IpConnectivityMetrics service");

        $r4 = (com.android.server.connectivity.IpConnectivityMetrics$Logger) r1;

        return $r4;
    }

    public android.net.NetworkStackClient getNetworkStack()
    {
        com.android.server.ConnectivityService$Dependencies r0;
        android.net.NetworkStackClient $r1;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        $r1 = staticinvoke <android.net.NetworkStackClient: android.net.NetworkStackClient getInstance()>();

        return $r1;
    }

    public com.android.server.connectivity.MockableSystemProperties getSystemProperties()
    {
        com.android.server.ConnectivityService$Dependencies r0;
        com.android.server.connectivity.MockableSystemProperties $r1;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        $r1 = new com.android.server.connectivity.MockableSystemProperties;

        specialinvoke $r1.<com.android.server.connectivity.MockableSystemProperties: void <init>()>();

        return $r1;
    }

    public boolean hasService(java.lang.String)
    {
        com.android.server.ConnectivityService$Dependencies r0;
        java.lang.String r1;
        android.os.IBinder $r2;
        boolean z0;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        r1 := @parameter0: java.lang.String;

        $r2 = staticinvoke <android.os.ServiceManager: android.os.IBinder checkService(java.lang.String)>(r1);

        if $r2 == null goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public android.os.HandlerThread makeHandlerThread()
    {
        com.android.server.ConnectivityService$Dependencies r0;
        android.os.HandlerThread $r1;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        $r1 = new android.os.HandlerThread;

        specialinvoke $r1.<android.os.HandlerThread: void <init>(java.lang.String)>("ConnectivityServiceThread");

        return $r1;
    }

    public android.net.util.MultinetworkPolicyTracker makeMultinetworkPolicyTracker(android.content.Context, android.os.Handler, java.lang.Runnable)
    {
        com.android.server.ConnectivityService$Dependencies r0;
        android.content.Context r1;
        android.os.Handler r2;
        java.lang.Runnable r3;
        android.net.util.MultinetworkPolicyTracker $r4;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        r3 := @parameter2: java.lang.Runnable;

        $r4 = new android.net.util.MultinetworkPolicyTracker;

        specialinvoke $r4.<android.net.util.MultinetworkPolicyTracker: void <init>(android.content.Context,android.os.Handler,java.lang.Runnable)>(r1, r2, r3);

        return $r4;
    }

    public com.android.server.NetIdManager makeNetIdManager()
    {
        com.android.server.ConnectivityService$Dependencies r0;
        com.android.server.NetIdManager $r1;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        $r1 = new com.android.server.NetIdManager;

        specialinvoke $r1.<com.android.server.NetIdManager: void <init>()>();

        return $r1;
    }

    public com.android.server.connectivity.ProxyTracker makeProxyTracker(android.content.Context, android.os.Handler)
    {
        com.android.server.ConnectivityService$Dependencies r0;
        android.content.Context r1;
        android.os.Handler r2;
        com.android.server.connectivity.ProxyTracker $r3;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Handler;

        $r3 = new com.android.server.connectivity.ProxyTracker;

        specialinvoke $r3.<com.android.server.connectivity.ProxyTracker: void <init>(android.content.Context,android.os.Handler,int)>(r1, r2, 16);

        return $r3;
    }

    public boolean queryUserAccess(int, int)
    {
        com.android.server.ConnectivityService$Dependencies r0;
        int i0, i1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService$Dependencies;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = staticinvoke <android.net.NetworkUtils: boolean queryUserAccess(int,int)>(i0, i1);

        return $z0;
    }
}
