public class com.android.server.ConnectivityService extends android.net.IConnectivityManager$Stub implements android.app.PendingIntent$OnFinished
{
    private static final java.lang.String ATTR_MCC;
    private static final java.lang.String ATTR_MNC;
    private static final boolean DBG;
    private static final boolean DDBG;
    private static final java.lang.String DEFAULT_CAPTIVE_PORTAL_HTTP_URL;
    private static final int DEFAULT_LINGER_DELAY_MS;
    protected static final java.lang.String DEFAULT_TCP_BUFFER_SIZES;
    private static final java.lang.String DIAG_ARG;
    private static final int EVENT_APPLY_GLOBAL_HTTP_PROXY;
    private static final int EVENT_CAPPORT_DATA_CHANGED;
    private static final int EVENT_CLEAR_NET_TRANSITION_WAKELOCK;
    private static final int EVENT_CONFIGURE_ALWAYS_ON_NETWORKS;
    private static final int EVENT_DATA_SAVER_CHANGED;
    private static final int EVENT_EXPIRE_NET_TRANSITION_WAKELOCK;
    private static final int EVENT_NETWORK_TESTED;
    private static final int EVENT_PRIVATE_DNS_CONFIG_RESOLVED;
    private static final int EVENT_PRIVATE_DNS_SETTINGS_CHANGED;
    private static final int EVENT_PRIVATE_DNS_VALIDATION_UPDATE;
    public static final int EVENT_PROBE_STATUS_CHANGED;
    private static final int EVENT_PROMPT_UNVALIDATED;
    private static final int EVENT_PROVISIONING_NOTIFICATION;
    private static final int EVENT_PROXY_HAS_CHANGED;
    private static final int EVENT_REGISTER_NETWORK_AGENT;
    private static final int EVENT_REGISTER_NETWORK_LISTENER;
    private static final int EVENT_REGISTER_NETWORK_LISTENER_WITH_INTENT;
    private static final int EVENT_REGISTER_NETWORK_PROVIDER;
    private static final int EVENT_REGISTER_NETWORK_REQUEST;
    private static final int EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT;
    private static final int EVENT_RELEASE_NETWORK_REQUEST;
    private static final int EVENT_RELEASE_NETWORK_REQUEST_WITH_INTENT;
    private static final int EVENT_REVALIDATE_NETWORK;
    private static final int EVENT_SET_ACCEPT_PARTIAL_CONNECTIVITY;
    private static final int EVENT_SET_ACCEPT_UNVALIDATED;
    private static final int EVENT_SET_AVOID_UNVALIDATED;
    private static final int EVENT_SYSTEM_READY;
    private static final int EVENT_TIMEOUT_NETWORK_REQUEST;
    private static final int EVENT_UID_RULES_CHANGED;
    private static final int EVENT_UNREGISTER_NETWORK_PROVIDER;
    private static final java.lang.String LINGER_DELAY_PROPERTY;
    private static final boolean LOGD_BLOCKED_NETWORKINFO;
    private static final int MAX_NETWORK_INFO_LOGS;
    private static final int MAX_NETWORK_REQUESTS_PER_UID;
    private static final int MAX_NETWORK_REQUEST_LOGS;
    private static final int MAX_WAKELOCK_LOGS;
    private static final java.lang.String NETWORK_ARG;
    private static final java.lang.String NETWORK_RESTORE_DELAY_PROP_NAME;
    private static final int PROMPT_UNVALIDATED_DELAY_MS;
    private static final int PROVISIONING_NOTIFICATION_HIDE;
    private static final int PROVISIONING_NOTIFICATION_SHOW;
    private static final java.lang.String PROVISIONING_URL_PATH;
    private static final java.lang.String REQUEST_ARG;
    private static final int RESTORE_DEFAULT_NETWORK_DELAY;
    public static final java.lang.String SHORT_ARG;
    private static final java.lang.String TAG;
    private static final java.lang.String TAG_PROVISIONING_URL;
    private static final java.lang.String TAG_PROVISIONING_URLS;
    private static final boolean VDBG;
    private static final android.util.SparseArray sMagicDecoderRing;
    private final android.app.AppOpsManager mAppOpsManager;
    private final android.util.SparseArray mBandwidthRequests;
    private final java.util.HashSet mBlockedAppUids;
    final java.util.Map mConnectivityDiagnosticsCallbacks;
    final com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler mConnectivityDiagnosticsHandler;
    private final android.content.Context mContext;
    private java.lang.String mCurrentTcpBufferSizes;
    private android.net.INetworkManagementEventObserver mDataActivityObserver;
    private int mDefaultInetConditionPublished;
    private final android.net.NetworkRequest mDefaultMobileDataRequest;
    private volatile com.android.server.connectivity.NetworkAgentInfo mDefaultNetworkNai;
    private final android.net.NetworkRequest mDefaultRequest;
    private final android.net.NetworkRequest mDefaultWifiRequest;
    private final com.android.server.ConnectivityService$Dependencies mDeps;
    private final com.android.server.connectivity.DnsManager mDnsManager;
    protected android.net.IDnsResolver mDnsResolver;
    private final com.android.server.ConnectivityService$InternalHandler mHandler;
    protected final android.os.HandlerThread mHandlerThread;
    private android.content.Intent mInitialBroadcast;
    private android.content.BroadcastReceiver mIntentReceiver;
    private com.android.server.connectivity.KeepaliveTracker mKeepaliveTracker;
    private android.security.KeyStore mKeyStore;
    private long mLastWakeLockAcquireTimestamp;
    private final com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker;
    protected int mLingerDelayMs;
    private com.android.server.connectivity.LingerMonitor mLingerMonitor;
    private final com.android.internal.util.LocationPermissionChecker mLocationPermissionChecker;
    private boolean mLockdownEnabled;
    private com.android.server.net.LockdownVpnTracker mLockdownTracker;
    private long mMaxWakelockDurationMs;
    private final android.net.metrics.IpConnectivityLog mMetricsLog;
    final android.net.util.MultinetworkPolicyTracker mMultinetworkPolicyTracker;
    final com.android.server.connectivity.MultipathPolicyTracker mMultipathPolicyTracker;
    private android.os.INetworkManagementService mNMS;
    private android.net.NetworkConfig[] mNetConfigs;
    private final com.android.server.NetIdManager mNetIdManager;
    private android.os.PowerManager$WakeLock mNetTransitionWakeLock;
    private int mNetTransitionWakeLockTimeout;
    protected android.net.INetd mNetd;
    protected final android.net.INetdEventCallback mNetdEventCallback;
    private final java.util.HashMap mNetworkAgentInfos;
    private final android.util.SparseArray mNetworkForNetId;
    private final android.util.LocalLog mNetworkInfoBlockingLogs;
    private final java.util.HashMap mNetworkProviderInfos;
    private final com.android.server.connectivity.NetworkRanker mNetworkRanker;
    private final android.util.LocalLog mNetworkRequestInfoLogs;
    private final java.util.HashMap mNetworkRequests;
    private int mNetworksDefined;
    private final java.util.concurrent.atomic.AtomicInteger mNextNetworkProviderId;
    private int mNextNetworkRequestId;
    private com.android.server.connectivity.NetworkNotificationManager mNotifier;
    private final android.os.PowerManager$WakeLock mPendingIntentWakeLock;
    protected final com.android.server.connectivity.PermissionMonitor mPermissionMonitor;
    private final android.net.INetworkPolicyListener mPolicyListener;
    private android.net.INetworkPolicyManager mPolicyManager;
    private com.android.server.net.NetworkPolicyManagerInternal mPolicyManagerInternal;
    private final com.android.server.utils.PriorityDump$PriorityDumper mPriorityDumper;
    private java.util.List mProtectedNetworks;
    private final java.io.File mProvisioningUrlFile;
    protected final com.android.server.connectivity.ProxyTracker mProxyTracker;
    private final int mReleasePendingIntentDelayMs;
    private boolean mRestrictBackground;
    private final com.android.server.ConnectivityService$SettingsObserver mSettingsObserver;
    private android.net.INetworkStatsService mStatsService;
    private com.android.server.connectivity.MockableSystemProperties mSystemProperties;
    private boolean mSystemReady;
    private com.android.server.TestNetworkService mTNS;
    private final java.lang.Object mTNSLock;
    private final android.telephony.TelephonyManager mTelephonyManager;
    private int mTotalWakelockAcquisitions;
    private long mTotalWakelockDurationMs;
    private int mTotalWakelockReleases;
    private final com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler;
    private android.util.SparseIntArray mUidRules;
    private final android.util.SparseIntArray mUidToNetworkRequestCount;
    private android.os.UserManager mUserManager;
    private android.content.BroadcastReceiver mUserPresentReceiver;
    protected final android.util.SparseArray mVpns;
    private final android.util.LocalLog mWakelockLogs;
    private java.util.Set mWolSupportedInterfaces;

    static void <clinit>()
    {
        java.lang.String r0, $r2;
        java.lang.Class $r1;
        boolean $z0, $z1;
        java.lang.Class[] $r3;
        android.util.SparseArray $r4;

        <com.android.server.ConnectivityService: java.lang.String TAG_PROVISIONING_URLS> = "provisioningUrls";

        <com.android.server.ConnectivityService: java.lang.String TAG_PROVISIONING_URL> = "provisioningUrl";

        <com.android.server.ConnectivityService: java.lang.String SHORT_ARG> = "--short";

        <com.android.server.ConnectivityService: int RESTORE_DEFAULT_NETWORK_DELAY> = 60000;

        <com.android.server.ConnectivityService: java.lang.String REQUEST_ARG> = "requests";

        <com.android.server.ConnectivityService: java.lang.String PROVISIONING_URL_PATH> = "/data/misc/radio/provisioning_urls.xml";

        <com.android.server.ConnectivityService: int PROVISIONING_NOTIFICATION_SHOW> = 1;

        <com.android.server.ConnectivityService: int PROVISIONING_NOTIFICATION_HIDE> = 0;

        <com.android.server.ConnectivityService: int PROMPT_UNVALIDATED_DELAY_MS> = 8000;

        <com.android.server.ConnectivityService: java.lang.String NETWORK_RESTORE_DELAY_PROP_NAME> = "android.telephony.apn-restore";

        <com.android.server.ConnectivityService: java.lang.String NETWORK_ARG> = "networks";

        <com.android.server.ConnectivityService: int MAX_WAKELOCK_LOGS> = 20;

        <com.android.server.ConnectivityService: int MAX_NETWORK_REQUEST_LOGS> = 20;

        <com.android.server.ConnectivityService: int MAX_NETWORK_REQUESTS_PER_UID> = 100;

        <com.android.server.ConnectivityService: int MAX_NETWORK_INFO_LOGS> = 40;

        <com.android.server.ConnectivityService: boolean LOGD_BLOCKED_NETWORKINFO> = 1;

        <com.android.server.ConnectivityService: java.lang.String LINGER_DELAY_PROPERTY> = "persist.netmon.linger";

        <com.android.server.ConnectivityService: int EVENT_UNREGISTER_NETWORK_PROVIDER> = 23;

        <com.android.server.ConnectivityService: int EVENT_UID_RULES_CHANGED> = 39;

        <com.android.server.ConnectivityService: int EVENT_TIMEOUT_NETWORK_REQUEST> = 20;

        <com.android.server.ConnectivityService: int EVENT_SYSTEM_READY> = 25;

        <com.android.server.ConnectivityService: int EVENT_SET_AVOID_UNVALIDATED> = 35;

        <com.android.server.ConnectivityService: int EVENT_SET_ACCEPT_UNVALIDATED> = 28;

        <com.android.server.ConnectivityService: int EVENT_SET_ACCEPT_PARTIAL_CONNECTIVITY> = 44;

        <com.android.server.ConnectivityService: int EVENT_REVALIDATE_NETWORK> = 36;

        <com.android.server.ConnectivityService: int EVENT_RELEASE_NETWORK_REQUEST_WITH_INTENT> = 27;

        <com.android.server.ConnectivityService: int EVENT_RELEASE_NETWORK_REQUEST> = 22;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_REQUEST_WITH_INTENT> = 26;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_REQUEST> = 19;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_PROVIDER> = 17;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_LISTENER_WITH_INTENT> = 31;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_LISTENER> = 21;

        <com.android.server.ConnectivityService: int EVENT_REGISTER_NETWORK_AGENT> = 18;

        <com.android.server.ConnectivityService: int EVENT_PROXY_HAS_CHANGED> = 16;

        <com.android.server.ConnectivityService: int EVENT_PROVISIONING_NOTIFICATION> = 43;

        <com.android.server.ConnectivityService: int EVENT_PROMPT_UNVALIDATED> = 29;

        <com.android.server.ConnectivityService: int EVENT_PROBE_STATUS_CHANGED> = 45;

        <com.android.server.ConnectivityService: int EVENT_PRIVATE_DNS_VALIDATION_UPDATE> = 38;

        <com.android.server.ConnectivityService: int EVENT_PRIVATE_DNS_SETTINGS_CHANGED> = 37;

        <com.android.server.ConnectivityService: int EVENT_PRIVATE_DNS_CONFIG_RESOLVED> = 42;

        <com.android.server.ConnectivityService: int EVENT_NETWORK_TESTED> = 41;

        <com.android.server.ConnectivityService: int EVENT_EXPIRE_NET_TRANSITION_WAKELOCK> = 24;

        <com.android.server.ConnectivityService: int EVENT_DATA_SAVER_CHANGED> = 40;

        <com.android.server.ConnectivityService: int EVENT_CONFIGURE_ALWAYS_ON_NETWORKS> = 30;

        <com.android.server.ConnectivityService: int EVENT_CLEAR_NET_TRANSITION_WAKELOCK> = 8;

        <com.android.server.ConnectivityService: int EVENT_CAPPORT_DATA_CHANGED> = 46;

        <com.android.server.ConnectivityService: int EVENT_APPLY_GLOBAL_HTTP_PROXY> = 9;

        <com.android.server.ConnectivityService: java.lang.String DIAG_ARG> = "--diag";

        <com.android.server.ConnectivityService: java.lang.String DEFAULT_TCP_BUFFER_SIZES> = "4096,87380,110208,4096,16384,110208";

        <com.android.server.ConnectivityService: int DEFAULT_LINGER_DELAY_MS> = 30000;

        <com.android.server.ConnectivityService: java.lang.String DEFAULT_CAPTIVE_PORTAL_HTTP_URL> = "http://connectivitycheck.gstatic.com/generate_204";

        <com.android.server.ConnectivityService: boolean DBG> = 1;

        <com.android.server.ConnectivityService: java.lang.String ATTR_MNC> = "mnc";

        <com.android.server.ConnectivityService: java.lang.String ATTR_MCC> = "mcc";

        $r1 = class "Lcom/android/server/ConnectivityService;";

        r0 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>();

        <com.android.server.ConnectivityService: java.lang.String TAG> = r0;

        $z0 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>(r0, 3);

        <com.android.server.ConnectivityService: boolean DDBG> = $z0;

        $r2 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $z1 = staticinvoke <android.util.Log: boolean isLoggable(java.lang.String,int)>($r2, 2);

        <com.android.server.ConnectivityService: boolean VDBG> = $z1;

        $r3 = newarray (java.lang.Class)[4];

        $r3[0] = class "Lcom/android/internal/util/AsyncChannel;";

        $r3[1] = class "Lcom/android/server/ConnectivityService;";

        $r3[2] = class "Landroid/net/NetworkAgent;";

        $r3[3] = class "Lcom/android/server/connectivity/NetworkAgentInfo;";

        $r4 = staticinvoke <com.android.internal.util.MessageUtils: android.util.SparseArray findMessageNames(java.lang.Class[])>($r3);

        <com.android.server.ConnectivityService: android.util.SparseArray sMagicDecoderRing> = $r4;

        return;
    }

    public void <init>(android.content.Context, android.os.INetworkManagementService, android.net.INetworkStatsService, android.net.INetworkPolicyManager)
    {
        com.android.server.ConnectivityService r0;
        android.content.Context r1;
        android.os.INetworkManagementService r2;
        android.net.INetworkStatsService r3;
        android.net.INetworkPolicyManager r4;
        android.net.IDnsResolver $r5;
        android.net.metrics.IpConnectivityLog $r6;
        android.net.INetd $r7;
        com.android.server.ConnectivityService$Dependencies $r8;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.INetworkManagementService;

        r3 := @parameter2: android.net.INetworkStatsService;

        r4 := @parameter3: android.net.INetworkPolicyManager;

        $r5 = staticinvoke <com.android.server.ConnectivityService: android.net.IDnsResolver getDnsResolver()>();

        $r6 = new android.net.metrics.IpConnectivityLog;

        specialinvoke $r6.<android.net.metrics.IpConnectivityLog: void <init>()>();

        $r7 = staticinvoke <android.net.util.NetdService: android.net.INetd getInstance()>();

        $r8 = new com.android.server.ConnectivityService$Dependencies;

        specialinvoke $r8.<com.android.server.ConnectivityService$Dependencies: void <init>()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void <init>(android.content.Context,android.os.INetworkManagementService,android.net.INetworkStatsService,android.net.INetworkPolicyManager,android.net.IDnsResolver,android.net.metrics.IpConnectivityLog,android.net.INetd,com.android.server.ConnectivityService$Dependencies)>(r1, r2, r3, r4, $r5, $r6, $r7, $r8);

        return;
    }

    protected void <init>(android.content.Context, android.os.INetworkManagementService, android.net.INetworkStatsService, android.net.INetworkPolicyManager, android.net.IDnsResolver, android.net.metrics.IpConnectivityLog, android.net.INetd, com.android.server.ConnectivityService$Dependencies)
    {
        com.android.server.ConnectivityService r0;
        android.net.INetd r1, $r114;
        boolean z0, $z1, $z3, $z4, $z5, $z6;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, i20, i21, i22, i23, i24;
        long l1;
        android.util.SparseArray $r3, $r10, $r23;
        android.util.SparseIntArray $r4, $r22;
        java.lang.Object $r5, $r67, $r78, $r81, $r87, $r111, $r146;
        java.util.concurrent.atomic.AtomicInteger $r6;
        android.util.LocalLog $r7, $r8, $r9, r221;
        java.util.HashMap $r11, $r20, $r21, $r24, $r39;
        com.android.server.ConnectivityService$LegacyTypeTracker $r12, $r181, $r182, $r185;
        com.android.server.ConnectivityService$1 $r13;
        com.android.server.ConnectivityService$2 $r14;
        com.android.server.ConnectivityService$3 $r15;
        com.android.server.ConnectivityService$4 $r16;
        java.io.File $r17;
        com.android.server.ConnectivityService$5 $r18;
        com.android.server.ConnectivityService$6 $r19;
        java.util.HashSet $r25;
        com.android.server.connectivity.MockableSystemProperties $r27, $r60, $r95, $r163;
        com.android.server.ConnectivityService$Dependencies $r28, $r49, $r74, $r156, $r180, r218, r219;
        com.android.server.NetIdManager $r29;
        android.content.Context $r31, $r73, $r77, $r80, $r84, $r90, $r108, $r115, $r120, $r123, $r131, $r137, $r140, $r143, $r148, $r150, $r154, $r157, $r161, $r165, r212, r243;
        android.net.NetworkRequest$Type $r32, $r45, $r47;
        android.net.NetworkRequest $r33, $r37, $r38, $r46, $r48;
        com.android.server.connectivity.NetworkRanker $r34;
        com.android.server.ConnectivityService$NetworkRequestInfo $r35;
        android.os.Binder $r36;
        java.lang.StringBuilder $r41, $r96, $r168, $r176, $r202, $r208, r231, r232, r233, r234;
        java.lang.String $r44, $r88, $r92, $r99, $r171, $r179, $r189, $r192, $r195, $r200, $r205, $r211, r229;
        com.android.server.ConnectivityService$InternalHandler $r50, $r72, $r117, $r128, $r136, $r139, $r142, $r158, $r160;
        android.os.HandlerThread $r51, $r54, $r57, r222;
        android.os.Looper $r52, $r55, $r58;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler $r53;
        com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler $r56;
        android.content.ContentResolver $r59, $r149, $r151;
        android.os.INetworkManagementService $r62, $r134, r213;
        android.net.INetworkStatsService $r64, r214;
        android.net.INetworkPolicyManager $r66, $r86, r215;
        com.android.server.net.NetworkPolicyManagerInternal $r69, r223;
        android.net.IDnsResolver $r71, $r164, r216;
        com.android.server.connectivity.ProxyTracker $r75;
        android.security.KeyStore $r76;
        android.telephony.TelephonyManager $r79, $r145;
        android.app.AppOpsManager $r82;
        com.android.internal.util.LocationPermissionChecker $r83;
        android.net.INetworkPolicyListener $r85;
        android.os.PowerManager$WakeLock $r89, $r93;
        android.content.res.Resources $r91, $r100, $r106, $r109;
        android.net.NetworkConfig[] $r94, $r101, $r103, $r166, $r183, $r186;
        android.net.NetworkConfig $r102, $r104, $r167, $r184, r230;
        java.util.ArrayList $r105;
        android.util.ArraySet $r107;
        java.lang.String[] $r110, r228;
        android.os.UserManager $r112;
        com.android.server.connectivity.PermissionMonitor $r113;
        android.content.IntentFilter $r116, $r122, $r127;
        android.os.UserHandle $r118, $r125, $r129;
        android.content.BroadcastReceiver $r119, $r124, $r130;
        android.net.INetworkManagementEventObserver $r133;
        com.android.server.ConnectivityService$SettingsObserver $r135;
        com.android.server.connectivity.DataConnectionStats $r138;
        com.android.server.connectivity.KeepaliveTracker $r141;
        com.android.server.connectivity.NetworkNotificationManager $r144, $r153;
        android.app.NotificationManager $r147;
        com.android.server.connectivity.LingerMonitor $r152;
        com.android.server._$$Lambda$ConnectivityService$SFqiR4Pfksb1C7csMC3uNxCllR8 $r155;
        com.android.server.connectivity.MultipathPolicyTracker $r159;
        com.android.server.connectivity.DnsManager $r162;
        java.util.List $r172, $r174;
        java.lang.Integer $r173, $r175;
        android.os.RemoteException $r201, $r207;
        java.lang.Exception $r206;
        android.net.metrics.IpConnectivityLog r217;
        android.os.PowerManager r226;
        int[] r237;
        android.net.util.MultinetworkPolicyTracker r244;

        r0 := @this: com.android.server.ConnectivityService;

        r212 := @parameter0: android.content.Context;

        r213 := @parameter1: android.os.INetworkManagementService;

        r214 := @parameter2: android.net.INetworkStatsService;

        r215 := @parameter3: android.net.INetworkPolicyManager;

        r216 := @parameter4: android.net.IDnsResolver;

        r217 := @parameter5: android.net.metrics.IpConnectivityLog;

        r1 := @parameter6: android.net.INetd;

        r218 := @parameter7: com.android.server.ConnectivityService$Dependencies;

        specialinvoke r0.<android.net.IConnectivityManager$Stub: void <init>()>();

        $r3 = new android.util.SparseArray;

        specialinvoke $r3.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns> = $r3;

        $r4 = new android.util.SparseIntArray;

        specialinvoke $r4.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules> = $r4;

        r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = 0;

        $r5 = new java.lang.Object;

        specialinvoke $r5.<java.lang.Object: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.lang.Object mTNSLock> = $r5;

        r0.<com.android.server.ConnectivityService: int mNextNetworkRequestId> = 1;

        $r6 = new java.util.concurrent.atomic.AtomicInteger;

        specialinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1);

        r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicInteger mNextNetworkProviderId> = $r6;

        $r7 = new android.util.LocalLog;

        specialinvoke $r7.<android.util.LocalLog: void <init>(int)>(20);

        r0.<com.android.server.ConnectivityService: android.util.LocalLog mNetworkRequestInfoLogs> = $r7;

        $r8 = new android.util.LocalLog;

        specialinvoke $r8.<android.util.LocalLog: void <init>(int)>(40);

        r0.<com.android.server.ConnectivityService: android.util.LocalLog mNetworkInfoBlockingLogs> = $r8;

        $r9 = new android.util.LocalLog;

        specialinvoke $r9.<android.util.LocalLog: void <init>(int)>(20);

        r0.<com.android.server.ConnectivityService: android.util.LocalLog mWakelockLogs> = $r9;

        r0.<com.android.server.ConnectivityService: int mTotalWakelockAcquisitions> = 0;

        r0.<com.android.server.ConnectivityService: int mTotalWakelockReleases> = 0;

        r0.<com.android.server.ConnectivityService: long mTotalWakelockDurationMs> = 0L;

        r0.<com.android.server.ConnectivityService: long mMaxWakelockDurationMs> = 0L;

        r0.<com.android.server.ConnectivityService: long mLastWakeLockAcquireTimestamp> = 0L;

        $r10 = new android.util.SparseArray;

        specialinvoke $r10.<android.util.SparseArray: void <init>(int)>(10);

        r0.<com.android.server.ConnectivityService: android.util.SparseArray mBandwidthRequests> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.Map mConnectivityDiagnosticsCallbacks> = $r11;

        $r12 = new com.android.server.ConnectivityService$LegacyTypeTracker;

        specialinvoke $r12.<com.android.server.ConnectivityService$LegacyTypeTracker: void <init>(com.android.server.ConnectivityService)>(r0);

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker> = $r12;

        $r13 = new com.android.server.ConnectivityService$1;

        specialinvoke $r13.<com.android.server.ConnectivityService$1: void <init>(com.android.server.ConnectivityService)>(r0);

        r0.<com.android.server.ConnectivityService: com.android.server.utils.PriorityDump$PriorityDumper mPriorityDumper> = $r13;

        $r14 = new com.android.server.ConnectivityService$2;

        specialinvoke $r14.<com.android.server.ConnectivityService$2: void <init>(com.android.server.ConnectivityService)>(r0);

        r0.<com.android.server.ConnectivityService: android.net.INetworkManagementEventObserver mDataActivityObserver> = $r14;

        $r15 = new com.android.server.ConnectivityService$3;

        specialinvoke $r15.<com.android.server.ConnectivityService$3: void <init>(com.android.server.ConnectivityService)>(r0);

        r0.<com.android.server.ConnectivityService: android.net.INetdEventCallback mNetdEventCallback> = $r15;

        $r16 = new com.android.server.ConnectivityService$4;

        specialinvoke $r16.<com.android.server.ConnectivityService$4: void <init>(com.android.server.ConnectivityService)>(r0);

        r0.<com.android.server.ConnectivityService: android.net.INetworkPolicyListener mPolicyListener> = $r16;

        $r17 = new java.io.File;

        specialinvoke $r17.<java.io.File: void <init>(java.lang.String)>("/data/misc/radio/provisioning_urls.xml");

        r0.<com.android.server.ConnectivityService: java.io.File mProvisioningUrlFile> = $r17;

        $r18 = new com.android.server.ConnectivityService$5;

        specialinvoke $r18.<com.android.server.ConnectivityService$5: void <init>(com.android.server.ConnectivityService)>(r0);

        r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mIntentReceiver> = $r18;

        $r19 = new com.android.server.ConnectivityService$6;

        specialinvoke $r19.<com.android.server.ConnectivityService$6: void <init>(com.android.server.ConnectivityService)>(r0);

        r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mUserPresentReceiver> = $r19;

        $r20 = new java.util.HashMap;

        specialinvoke $r20.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos> = $r20;

        $r21 = new java.util.HashMap;

        specialinvoke $r21.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests> = $r21;

        $r22 = new android.util.SparseIntArray;

        specialinvoke $r22.<android.util.SparseIntArray: void <init>()>();

        r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidToNetworkRequestCount> = $r22;

        $r23 = new android.util.SparseArray;

        specialinvoke $r23.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId> = $r23;

        $r24 = new java.util.HashMap;

        specialinvoke $r24.<java.util.HashMap: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos> = $r24;

        $r25 = new java.util.HashSet;

        specialinvoke $r25.<java.util.HashSet: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.HashSet mBlockedAppUids> = $r25;

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo mDefaultNetworkNai> = null;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("ConnectivityService starting up");

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r218, "missing Dependencies");

        r219 = (com.android.server.ConnectivityService$Dependencies) r218;

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps> = r219;

        $r27 = virtualinvoke r219.<com.android.server.ConnectivityService$Dependencies: com.android.server.connectivity.MockableSystemProperties getSystemProperties()>();

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.MockableSystemProperties mSystemProperties> = $r27;

        $r28 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        $r29 = virtualinvoke $r28.<com.android.server.ConnectivityService$Dependencies: com.android.server.NetIdManager makeNetIdManager()>();

        r0.<com.android.server.ConnectivityService: com.android.server.NetIdManager mNetIdManager> = $r29;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r212, "missing Context");

        $r31 = (android.content.Context) r212;

        r0.<com.android.server.ConnectivityService: android.content.Context mContext> = $r31;

        r0.<com.android.server.ConnectivityService: android.net.metrics.IpConnectivityLog mMetricsLog> = r217;

        $r32 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type REQUEST>;

        $r33 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkRequest createDefaultInternetRequestForTransport(int,android.net.NetworkRequest$Type)>(-1, $r32);

        r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest> = $r33;

        $r34 = new com.android.server.connectivity.NetworkRanker;

        specialinvoke $r34.<com.android.server.connectivity.NetworkRanker: void <init>()>();

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkRanker mNetworkRanker> = $r34;

        $r35 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        $r37 = r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $r36 = new android.os.Binder;

        specialinvoke $r36.<android.os.Binder: void <init>()>();

        specialinvoke $r35.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder)>(r0, null, $r37, $r36);

        $r39 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r38 = r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        virtualinvoke $r39.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r35);

        r221 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mNetworkRequestInfoLogs>;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REGISTER ");

        virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35);

        $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r221.<android.util.LocalLog: void log(java.lang.String)>($r44);

        $r45 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type BACKGROUND_REQUEST>;

        $r46 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkRequest createDefaultInternetRequestForTransport(int,android.net.NetworkRequest$Type)>(0, $r45);

        r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultMobileDataRequest> = $r46;

        $r47 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type BACKGROUND_REQUEST>;

        $r48 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkRequest createDefaultInternetRequestForTransport(int,android.net.NetworkRequest$Type)>(1, $r47);

        r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultWifiRequest> = $r48;

        $r49 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        r222 = virtualinvoke $r49.<com.android.server.ConnectivityService$Dependencies: android.os.HandlerThread makeHandlerThread()>();

        r0.<com.android.server.ConnectivityService: android.os.HandlerThread mHandlerThread> = r222;

        virtualinvoke r222.<android.os.HandlerThread: void start()>();

        $r50 = new com.android.server.ConnectivityService$InternalHandler;

        $r51 = r0.<com.android.server.ConnectivityService: android.os.HandlerThread mHandlerThread>;

        $r52 = virtualinvoke $r51.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r50.<com.android.server.ConnectivityService$InternalHandler: void <init>(com.android.server.ConnectivityService,android.os.Looper)>(r0, $r52);

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler> = $r50;

        $r53 = new com.android.server.ConnectivityService$NetworkStateTrackerHandler;

        $r54 = r0.<com.android.server.ConnectivityService: android.os.HandlerThread mHandlerThread>;

        $r55 = virtualinvoke $r54.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r53.<com.android.server.ConnectivityService$NetworkStateTrackerHandler: void <init>(com.android.server.ConnectivityService,android.os.Looper)>(r0, $r55);

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler> = $r53;

        $r56 = new com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler;

        $r57 = r0.<com.android.server.ConnectivityService: android.os.HandlerThread mHandlerThread>;

        $r58 = virtualinvoke $r57.<android.os.HandlerThread: android.os.Looper getLooper()>();

        specialinvoke $r56.<com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler: void <init>(com.android.server.ConnectivityService,android.os.Looper,com.android.server.ConnectivityService$1)>(r0, $r58, null);

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler mConnectivityDiagnosticsHandler> = $r56;

        $r59 = virtualinvoke r212.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i2 = staticinvoke <android.provider.Settings$Secure: int getInt(android.content.ContentResolver,java.lang.String,int)>($r59, "connectivity_release_pending_intent_delay_ms", 5000);

        r0.<com.android.server.ConnectivityService: int mReleasePendingIntentDelayMs> = $i2;

        $r60 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.MockableSystemProperties mSystemProperties>;

        $i3 = virtualinvoke $r60.<com.android.server.connectivity.MockableSystemProperties: int getInt(java.lang.String,int)>("persist.netmon.linger", 30000);

        r0.<com.android.server.ConnectivityService: int mLingerDelayMs> = $i3;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r213, "missing INetworkManagementService");

        $r62 = (android.os.INetworkManagementService) r213;

        r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS> = $r62;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r214, "missing INetworkStatsService");

        $r64 = (android.net.INetworkStatsService) r214;

        r0.<com.android.server.ConnectivityService: android.net.INetworkStatsService mStatsService> = $r64;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r215, "missing INetworkPolicyManager");

        $r66 = (android.net.INetworkPolicyManager) r215;

        r0.<com.android.server.ConnectivityService: android.net.INetworkPolicyManager mPolicyManager> = $r66;

        $r67 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/net/NetworkPolicyManagerInternal;");

        r223 = (com.android.server.net.NetworkPolicyManagerInternal) $r67;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r223, "missing NetworkPolicyManagerInternal");

        $r69 = (com.android.server.net.NetworkPolicyManagerInternal) r223;

        r0.<com.android.server.ConnectivityService: com.android.server.net.NetworkPolicyManagerInternal mPolicyManagerInternal> = $r69;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r216, "missing IDnsResolver");

        $r71 = (android.net.IDnsResolver) r216;

        r0.<com.android.server.ConnectivityService: android.net.IDnsResolver mDnsResolver> = $r71;

        $r74 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        $r73 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r72 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r75 = virtualinvoke $r74.<com.android.server.ConnectivityService$Dependencies: com.android.server.connectivity.ProxyTracker makeProxyTracker(android.content.Context,android.os.Handler)>($r73, $r72);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.ProxyTracker mProxyTracker> = $r75;

        r0.<com.android.server.ConnectivityService: android.net.INetd mNetd> = r1;

        $r76 = staticinvoke <android.security.KeyStore: android.security.KeyStore getInstance()>();

        r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore> = $r76;

        $r77 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r78 = virtualinvoke $r77.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r79 = (android.telephony.TelephonyManager) $r78;

        r0.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager> = $r79;

        $r80 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r81 = virtualinvoke $r80.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r82 = (android.app.AppOpsManager) $r81;

        r0.<com.android.server.ConnectivityService: android.app.AppOpsManager mAppOpsManager> = $r82;

        $r83 = new com.android.internal.util.LocationPermissionChecker;

        $r84 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        specialinvoke $r83.<com.android.internal.util.LocationPermissionChecker: void <init>(android.content.Context)>($r84);

        r0.<com.android.server.ConnectivityService: com.android.internal.util.LocationPermissionChecker mLocationPermissionChecker> = $r83;

     label01:
        $r86 = r0.<com.android.server.ConnectivityService: android.net.INetworkPolicyManager mPolicyManager>;

        $r85 = r0.<com.android.server.ConnectivityService: android.net.INetworkPolicyListener mPolicyListener>;

        interfaceinvoke $r86.<android.net.INetworkPolicyManager: void registerListener(android.net.INetworkPolicyListener)>($r85);

     label02:
        goto label04;

     label03:
        $r201 := @caughtexception;

        $r202 = new java.lang.StringBuilder;

        specialinvoke $r202.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unable to register INetworkPolicyListener");

        virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r201);

        $r205 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r205);

     label04:
        $r87 = virtualinvoke r212.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r226 = (android.os.PowerManager) $r87;

        $r88 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r89 = virtualinvoke r226.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, $r88);

        r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock> = $r89;

        $r90 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r91 = virtualinvoke $r90.<android.content.Context: android.content.res.Resources getResources()>();

        $i4 = virtualinvoke $r91.<android.content.res.Resources: int getInteger(int)>(17694857);

        r0.<com.android.server.ConnectivityService: int mNetTransitionWakeLockTimeout> = $i4;

        $r92 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r93 = virtualinvoke r226.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, $r92);

        r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mPendingIntentWakeLock> = $r93;

        $r94 = newarray (android.net.NetworkConfig)[19];

        r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs> = $r94;

        $r95 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.MockableSystemProperties mSystemProperties>;

        z0 = virtualinvoke $r95.<com.android.server.connectivity.MockableSystemProperties: boolean getBoolean(java.lang.String,boolean)>("ro.radio.noril", 0);

        $r96 = new java.lang.StringBuilder;

        specialinvoke $r96.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("wifiOnly=");

        virtualinvoke $r96.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r99 = virtualinvoke $r96.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r99);

        $r100 = virtualinvoke r212.<android.content.Context: android.content.res.Resources getResources()>();

        r228 = virtualinvoke $r100.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236108);

        i20 = lengthof r228;

        i21 = 0;

     label05:
        if i21 >= i20 goto label18;

        r229 = r228[i21];

     label06:
        r230 = new android.net.NetworkConfig;

        specialinvoke r230.<android.net.NetworkConfig: void <init>(java.lang.String)>(r229);

        $z4 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z4 == 0 goto label07;

        r231 = new java.lang.StringBuilder;

        specialinvoke r231.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("naString=");

        virtualinvoke r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r229);

        virtualinvoke r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" config=");

        virtualinvoke r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r230);

        $r200 = virtualinvoke r231.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r200);

     label07:
        $i10 = r230.<android.net.NetworkConfig: int type>;

        if $i10 <= 18 goto label09;

        r232 = new java.lang.StringBuilder;

        specialinvoke r232.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r232.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in networkAttributes - ignoring attempt to define type ");

        $i19 = r230.<android.net.NetworkConfig: int type>;

        virtualinvoke r232.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19);

        $r195 = virtualinvoke r232.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r195);

     label08:
        goto label17;

     label09:
        if z0 == 0 goto label12;

     label10:
        $i17 = r230.<android.net.NetworkConfig: int type>;

        $z5 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>($i17);

        if $z5 == 0 goto label12;

        r233 = new java.lang.StringBuilder;

        specialinvoke r233.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r233.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("networkAttributes - ignoring mobile as this dev is wifiOnly ");

        $i18 = r230.<android.net.NetworkConfig: int type>;

        virtualinvoke r233.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i18);

        $r192 = virtualinvoke r233.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r192);

     label11:
        goto label17;

     label12:
        $r183 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $i11 = r230.<android.net.NetworkConfig: int type>;

        $r184 = $r183[$i11];

        if $r184 == null goto label14;

        r234 = new java.lang.StringBuilder;

        specialinvoke r234.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r234.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error in networkAttributes - ignoring attempt to redefine type ");

        $i16 = r230.<android.net.NetworkConfig: int type>;

        virtualinvoke r234.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16);

        $r189 = virtualinvoke r234.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r189);

     label13:
        goto label17;

     label14:
        $r185 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $i12 = r230.<android.net.NetworkConfig: int type>;

        virtualinvoke $r185.<com.android.server.ConnectivityService$LegacyTypeTracker: void addSupportedType(int)>($i12);

        $r186 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $i13 = r230.<android.net.NetworkConfig: int type>;

        $r186[$i13] = r230;

        $i14 = r0.<com.android.server.ConnectivityService: int mNetworksDefined>;

        $i15 = $i14 + 1;

        r0.<com.android.server.ConnectivityService: int mNetworksDefined> = $i15;

     label15:
        goto label17;

     label16:
        $r206 := @caughtexception;

     label17:
        i21 = i21 + 1;

        goto label05;

     label18:
        $r101 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r102 = $r101[17];

        if $r102 != null goto label19;

        $r182 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r182.<com.android.server.ConnectivityService$LegacyTypeTracker: void addSupportedType(int)>(17);

        $i8 = r0.<com.android.server.ConnectivityService: int mNetworksDefined>;

        $i9 = $i8 + 1;

        r0.<com.android.server.ConnectivityService: int mNetworksDefined> = $i9;

     label19:
        $r103 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r104 = $r103[9];

        if $r104 != null goto label20;

        $r180 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        $z3 = virtualinvoke $r180.<com.android.server.ConnectivityService$Dependencies: boolean hasService(java.lang.String)>("ethernet");

        if $z3 == 0 goto label20;

        $r181 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r181.<com.android.server.ConnectivityService$LegacyTypeTracker: void addSupportedType(int)>(9);

        $i6 = r0.<com.android.server.ConnectivityService: int mNetworksDefined>;

        $i7 = $i6 + 1;

        r0.<com.android.server.ConnectivityService: int mNetworksDefined> = $i7;

     label20:
        $z6 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z6 == 0 goto label21;

        $r176 = new java.lang.StringBuilder;

        specialinvoke $r176.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mNetworksDefined=");

        $i5 = r0.<com.android.server.ConnectivityService: int mNetworksDefined>;

        virtualinvoke $r176.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r179 = virtualinvoke $r176.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r179);

     label21:
        $r105 = new java.util.ArrayList;

        specialinvoke $r105.<java.util.ArrayList: void <init>()>();

        r0.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks> = $r105;

        $r106 = virtualinvoke r212.<android.content.Context: android.content.res.Resources getResources()>();

        r237 = virtualinvoke $r106.<android.content.res.Resources: int[] getIntArray(int)>(17236066);

        i22 = lengthof r237;

        i23 = 0;

     label22:
        if i23 >= i22 goto label25;

        i0 = r237[i23];

        $r166 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        $r167 = $r166[i0];

        if $r167 == null goto label23;

        $r172 = r0.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks>;

        $r173 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = interfaceinvoke $r172.<java.util.List: boolean contains(java.lang.Object)>($r173);

        if $z1 != 0 goto label23;

        $r174 = r0.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks>;

        $r175 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r174.<java.util.List: boolean add(java.lang.Object)>($r175);

        goto label24;

     label23:
        $r168 = new java.lang.StringBuilder;

        specialinvoke $r168.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring protectedNetwork ");

        virtualinvoke $r168.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r171 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r171);

     label24:
        i23 = i23 + 1;

        goto label22;

     label25:
        $r107 = new android.util.ArraySet;

        $r108 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r109 = virtualinvoke $r108.<android.content.Context: android.content.res.Resources getResources()>();

        $r110 = virtualinvoke $r109.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(17236094);

        specialinvoke $r107.<android.util.ArraySet: void <init>(java.lang.Object[])>($r110);

        r0.<com.android.server.ConnectivityService: java.util.Set mWolSupportedInterfaces> = $r107;

        $r111 = virtualinvoke r212.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("user");

        $r112 = (android.os.UserManager) $r111;

        r0.<com.android.server.ConnectivityService: android.os.UserManager mUserManager> = $r112;

        $r113 = new com.android.server.connectivity.PermissionMonitor;

        $r115 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r114 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        specialinvoke $r113.<com.android.server.connectivity.PermissionMonitor: void <init>(android.content.Context,android.net.INetd)>($r115, $r114);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor> = $r113;

        $r116 = new android.content.IntentFilter;

        specialinvoke $r116.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r116.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STARTED");

        virtualinvoke $r116.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_STOPPED");

        virtualinvoke $r116.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_ADDED");

        virtualinvoke $r116.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_REMOVED");

        virtualinvoke $r116.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.USER_UNLOCKED");

        $r120 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r119 = r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mIntentReceiver>;

        $r118 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r117 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        virtualinvoke $r120.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r119, $r118, $r116, null, $r117);

        $r123 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r124 = r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mUserPresentReceiver>;

        $r125 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        $r122 = new android.content.IntentFilter;

        specialinvoke $r122.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_PRESENT");

        virtualinvoke $r123.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r124, $r125, $r122, null, null);

        $r127 = new android.content.IntentFilter;

        specialinvoke $r127.<android.content.IntentFilter: void <init>()>();

        virtualinvoke $r127.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_ADDED");

        virtualinvoke $r127.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REPLACED");

        virtualinvoke $r127.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke $r127.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r131 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r130 = r0.<com.android.server.ConnectivityService: android.content.BroadcastReceiver mIntentReceiver>;

        $r129 = <android.os.UserHandle: android.os.UserHandle ALL>;

        $r128 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        virtualinvoke $r131.<android.content.Context: android.content.Intent registerReceiverAsUser(android.content.BroadcastReceiver,android.os.UserHandle,android.content.IntentFilter,java.lang.String,android.os.Handler)>($r130, $r129, $r127, null, $r128);

     label26:
        $r134 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        $r133 = r0.<com.android.server.ConnectivityService: android.net.INetworkManagementEventObserver mDataActivityObserver>;

        interfaceinvoke $r134.<android.os.INetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>($r133);

     label27:
        goto label29;

     label28:
        $r207 := @caughtexception;

        $r208 = new java.lang.StringBuilder;

        specialinvoke $r208.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r208.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error registering observer :");

        virtualinvoke $r208.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r207);

        $r211 = virtualinvoke $r208.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r211);

     label29:
        $r135 = new com.android.server.ConnectivityService$SettingsObserver;

        $r137 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r136 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        specialinvoke $r135.<com.android.server.ConnectivityService$SettingsObserver: void <init>(android.content.Context,android.os.Handler)>($r137, $r136);

        r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$SettingsObserver mSettingsObserver> = $r135;

        specialinvoke r0.<com.android.server.ConnectivityService: void registerSettingsCallbacks()>();

        $r138 = new com.android.server.connectivity.DataConnectionStats;

        $r140 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r139 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        specialinvoke $r138.<com.android.server.connectivity.DataConnectionStats: void <init>(android.content.Context,android.os.Handler)>($r140, $r139);

        virtualinvoke $r138.<com.android.server.connectivity.DataConnectionStats: void startMonitoring()>();

        $r141 = new com.android.server.connectivity.KeepaliveTracker;

        $r143 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r142 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        specialinvoke $r141.<com.android.server.connectivity.KeepaliveTracker: void <init>(android.content.Context,android.os.Handler)>($r143, $r142);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.KeepaliveTracker mKeepaliveTracker> = $r141;

        r243 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r144 = new com.android.server.connectivity.NetworkNotificationManager;

        $r145 = r0.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        $r146 = virtualinvoke r243.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/NotificationManager;");

        $r147 = (android.app.NotificationManager) $r146;

        specialinvoke $r144.<com.android.server.connectivity.NetworkNotificationManager: void <init>(android.content.Context,android.telephony.TelephonyManager,android.app.NotificationManager)>(r243, $r145, $r147);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkNotificationManager mNotifier> = $r144;

        $r148 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r149 = virtualinvoke $r148.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i24 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r149, "network_switch_notification_daily_limit", 3);

        $r150 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r151 = virtualinvoke $r150.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        l1 = staticinvoke <android.provider.Settings$Global: long getLong(android.content.ContentResolver,java.lang.String,long)>($r151, "network_switch_notification_rate_limit_millis", 60000L);

        $r152 = new com.android.server.connectivity.LingerMonitor;

        $r154 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r153 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkNotificationManager mNotifier>;

        specialinvoke $r152.<com.android.server.connectivity.LingerMonitor: void <init>(android.content.Context,com.android.server.connectivity.NetworkNotificationManager,int,long)>($r154, $r153, i24, l1);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.LingerMonitor mLingerMonitor> = $r152;

        $r156 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        $r157 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r158 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r155 = new com.android.server._$$Lambda$ConnectivityService$SFqiR4Pfksb1C7csMC3uNxCllR8;

        specialinvoke $r155.<com.android.server._$$Lambda$ConnectivityService$SFqiR4Pfksb1C7csMC3uNxCllR8: void <init>(com.android.server.ConnectivityService)>(r0);

        r244 = virtualinvoke $r156.<com.android.server.ConnectivityService$Dependencies: android.net.util.MultinetworkPolicyTracker makeMultinetworkPolicyTracker(android.content.Context,android.os.Handler,java.lang.Runnable)>($r157, $r158, $r155);

        r0.<com.android.server.ConnectivityService: android.net.util.MultinetworkPolicyTracker mMultinetworkPolicyTracker> = r244;

        virtualinvoke r244.<android.net.util.MultinetworkPolicyTracker: void start()>();

        $r159 = new com.android.server.connectivity.MultipathPolicyTracker;

        $r161 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r160 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        specialinvoke $r159.<com.android.server.connectivity.MultipathPolicyTracker: void <init>(android.content.Context,android.os.Handler)>($r161, $r160);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.MultipathPolicyTracker mMultipathPolicyTracker> = $r159;

        $r162 = new com.android.server.connectivity.DnsManager;

        $r165 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r164 = r0.<com.android.server.ConnectivityService: android.net.IDnsResolver mDnsResolver>;

        $r163 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.MockableSystemProperties mSystemProperties>;

        specialinvoke $r162.<com.android.server.connectivity.DnsManager: void <init>(android.content.Context,android.net.IDnsResolver,com.android.server.connectivity.MockableSystemProperties)>($r165, $r164, $r163);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager> = $r162;

        specialinvoke r0.<com.android.server.ConnectivityService: void registerPrivateDnsSettingsCallbacks()>();

        return;

        catch android.os.RemoteException from label01 to label02 with label03;
        catch java.lang.Exception from label06 to label07 with label16;
        catch java.lang.Exception from label07 to label08 with label16;
        catch java.lang.Exception from label10 to label11 with label16;
        catch java.lang.Exception from label12 to label13 with label16;
        catch java.lang.Exception from label14 to label15 with label16;
        catch android.os.RemoteException from label26 to label27 with label28;
    }

    static void access$000(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>(r0);

        return;
    }

    static void access$100(com.android.server.ConnectivityService, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], boolean)
    {
        com.android.server.ConnectivityService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: java.io.FileDescriptor;

        r2 := @parameter2: java.io.PrintWriter;

        r3 := @parameter3: java.lang.String[];

        z0 := @parameter4: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)>(r1, r2, r3, z0);

        return;
    }

    static java.util.HashMap access$1000(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        java.util.HashMap $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        return $r1;
    }

    static void access$1100(com.android.server.ConnectivityService, android.os.Message)
    {
        com.android.server.ConnectivityService r0;
        android.os.Message r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleAsyncChannelDisconnected(android.os.Message)>(r1);

        return;
    }

    static boolean access$1200()
    {
        boolean $z0;

        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        return $z0;
    }

    static java.lang.String access$1300(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        $r0 = staticinvoke <com.android.server.ConnectivityService: java.lang.String eventName(int)>(i0);

        return $r0;
    }

    static java.lang.String access$1400()
    {
        java.lang.String $r0;

        $r0 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        return $r0;
    }

    static void access$1500(com.android.server.ConnectivityService, int, com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkCapabilities r2;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        r1 := @parameter2: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter3: android.net.NetworkCapabilities;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateCapabilities(int,com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities)>(i0, r1, r2);

        return;
    }

    static void access$1600(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, android.net.LinkProperties)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.LinkProperties r2;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter2: android.net.LinkProperties;

        specialinvoke r0.<com.android.server.ConnectivityService: void processLinkPropertiesFromAgent(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)>(r1, r2);

        return;
    }

    static void access$1700(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkInfo r2;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter2: android.net.NetworkInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateNetworkInfo(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkInfo)>(r1, r2);

        return;
    }

    static void access$1800(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateNetworkScore(com.android.server.connectivity.NetworkAgentInfo,int)>(r1, i0);

        return;
    }

    static boolean access$1900(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        $z0 = staticinvoke <com.android.server.ConnectivityService: boolean toBool(int)>(i0);

        return $z0;
    }

    static com.android.server.connectivity.KeepaliveTracker access$2000(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.KeepaliveTracker $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.KeepaliveTracker mKeepaliveTracker>;

        return $r1;
    }

    static void access$2100(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, com.android.server.connectivity.NetworkNotificationManager$NotificationType)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        com.android.server.connectivity.NetworkNotificationManager$NotificationType r2;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter2: com.android.server.connectivity.NetworkNotificationManager$NotificationType;

        specialinvoke r0.<com.android.server.ConnectivityService: void showNetworkNotification(com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkNotificationManager$NotificationType)>(r1, r2);

        return;
    }

    static void access$2500(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        return;
    }

    static com.android.server.connectivity.NetworkNotificationManager access$2600(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkNotificationManager $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkNotificationManager mNotifier>;

        return $r1;
    }

    static void access$2700(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, android.net.shared.PrivateDnsConfig)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.shared.PrivateDnsConfig r2;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter2: android.net.shared.PrivateDnsConfig;

        specialinvoke r0.<com.android.server.ConnectivityService: void updatePrivateDns(com.android.server.connectivity.NetworkAgentInfo,android.net.shared.PrivateDnsConfig)>(r1, r2);

        return;
    }

    static void access$2800(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, android.net.CaptivePortalData)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.CaptivePortalData r2;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter2: android.net.CaptivePortalData;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleCaptivePortalDataUpdate(com.android.server.connectivity.NetworkAgentInfo,android.net.CaptivePortalData)>(r1, r2);

        return;
    }

    static com.android.server.ConnectivityService$Dependencies access$2900(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$Dependencies $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        return $r1;
    }

    static void access$300(com.android.server.ConnectivityService, int, boolean, long)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;
        long l1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        l1 := @parameter3: long;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendDataActivityBroadcast(int,boolean,long)>(i0, z0, l1);

        return;
    }

    static void access$3000(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        return;
    }

    static void access$3100(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleFreshlyValidatedNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        return;
    }

    static void access$3200(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateInetCondition(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        return;
    }

    static void access$3300(com.android.server.ConnectivityService, android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.Network;

        specialinvoke r0.<com.android.server.ConnectivityService: void handlePromptUnvalidated(android.net.Network)>(r1);

        return;
    }

    static void access$3400(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleNetworkUnvalidated(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        return;
    }

    static android.content.Context access$3500(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        return $r1;
    }

    static boolean access$3600(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        int i0;
        boolean $z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        i0 := @parameter2: int;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isLiveNetworkAgent(com.android.server.connectivity.NetworkAgentInfo,int)>(r1, i0);

        return $z0;
    }

    static void access$3700(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleLingerComplete(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        return;
    }

    static com.android.server.ConnectivityService$NetworkStateTrackerHandler access$3900(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        return $r1;
    }

    static com.android.server.ConnectivityService$InternalHandler access$400(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$InternalHandler $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        return $r1;
    }

    static void access$4100(com.android.server.ConnectivityService, android.net.DataStallReportParcelable, int)
    {
        com.android.server.ConnectivityService r0;
        android.net.DataStallReportParcelable r1;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.DataStallReportParcelable;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void notifyDataStallSuspected(android.net.DataStallReportParcelable,int)>(r1, i0);

        return;
    }

    static void access$4300(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceSettingsPermission()>();

        return;
    }

    static boolean access$4400(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkNetworkStackPermission()>();

        return $z0;
    }

    static void access$4500(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleReleaseNetworkTransitionWakelock(int)>(i0);

        return;
    }

    static void access$4600(com.android.server.ConnectivityService, android.net.ProxyInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.ProxyInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleApplyDefaultProxy(android.net.ProxyInfo)>(r1);

        return;
    }

    static void access$4700(com.android.server.ConnectivityService, com.android.server.ConnectivityService$NetworkProviderInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkProviderInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.ConnectivityService$NetworkProviderInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleRegisterNetworkProvider(com.android.server.ConnectivityService$NetworkProviderInfo)>(r1);

        return;
    }

    static void access$4800(com.android.server.ConnectivityService, android.os.Messenger)
    {
        com.android.server.ConnectivityService r0;
        android.os.Messenger r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.os.Messenger;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleUnregisterNetworkProvider(android.os.Messenger)>(r1);

        return;
    }

    static void access$4900(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, android.net.INetworkMonitor)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.INetworkMonitor r2;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter2: android.net.INetworkMonitor;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleRegisterNetworkAgent(com.android.server.connectivity.NetworkAgentInfo,android.net.INetworkMonitor)>(r1, r2);

        return;
    }

    static void access$500(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>(r0);

        return;
    }

    static void access$5000(com.android.server.ConnectivityService, com.android.server.ConnectivityService$NetworkRequestInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleRegisterNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo)>(r1);

        return;
    }

    static void access$5100(com.android.server.ConnectivityService, android.os.Message)
    {
        com.android.server.ConnectivityService r0;
        android.os.Message r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleRegisterNetworkRequestWithIntent(android.os.Message)>(r1);

        return;
    }

    static void access$5200(com.android.server.ConnectivityService, com.android.server.ConnectivityService$NetworkRequestInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleTimedOutNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo)>(r1);

        return;
    }

    static void access$5300(com.android.server.ConnectivityService, android.app.PendingIntent, int)
    {
        com.android.server.ConnectivityService r0;
        android.app.PendingIntent r1;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.app.PendingIntent;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleReleaseNetworkRequestWithIntent(android.app.PendingIntent,int)>(r1, i0);

        return;
    }

    static void access$5400(com.android.server.ConnectivityService, android.net.NetworkRequest, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest r1;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.NetworkRequest;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleReleaseNetworkRequest(android.net.NetworkRequest,int,boolean)>(r1, i0, z0);

        return;
    }

    static void access$5500(com.android.server.ConnectivityService, android.net.Network, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        boolean z0, z1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.Network;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleSetAcceptUnvalidated(android.net.Network,boolean,boolean)>(r1, z0, z1);

        return;
    }

    static void access$5600(com.android.server.ConnectivityService, android.net.Network, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        boolean z0, z1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.Network;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleSetAcceptPartialConnectivity(android.net.Network,boolean,boolean)>(r1, z0, z1);

        return;
    }

    static void access$5700(com.android.server.ConnectivityService, android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.Network;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleSetAvoidUnvalidated(android.net.Network)>(r1);

        return;
    }

    static void access$5800(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleConfigureAlwaysOnNetworks()>();

        return;
    }

    static void access$5900(com.android.server.ConnectivityService, android.net.Network, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.Network;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleReportNetworkConnectivity(android.net.Network,int,boolean)>(r1, i0, z0);

        return;
    }

    static com.android.server.connectivity.NetworkAgentInfo access$600(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        com.android.server.connectivity.NetworkAgentInfo $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        $r1 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetId(int)>(i0);

        return $r1;
    }

    static void access$6000(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void handlePrivateDnsSettingsChanged()>();

        return;
    }

    static void access$6100(com.android.server.ConnectivityService, com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate;

        specialinvoke r0.<com.android.server.ConnectivityService: void handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate)>(r1);

        return;
    }

    static void access$6200(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        return;
    }

    static void access$6300(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void onUserStart(int)>(i0);

        return;
    }

    static void access$6400(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void onUserStop(int)>(i0);

        return;
    }

    static void access$6500(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void onUserAdded(int)>(i0);

        return;
    }

    static void access$6600(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void onUserRemoved(int)>(i0);

        return;
    }

    static void access$6700(com.android.server.ConnectivityService, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void onUserUnlocked(int)>(i0);

        return;
    }

    static void access$6800(com.android.server.ConnectivityService, java.lang.String, int)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void onPackageAdded(java.lang.String,int)>(r1, i0);

        return;
    }

    static void access$6900(com.android.server.ConnectivityService, java.lang.String, int)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void onPackageReplaced(java.lang.String,int)>(r1, i0);

        return;
    }

    static android.net.NetworkRequest access$700(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        return $r1;
    }

    static void access$7000(com.android.server.ConnectivityService, java.lang.String, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        int i0;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        z0 := @parameter3: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void onPackageRemoved(java.lang.String,int,boolean)>(r1, i0, z0);

        return;
    }

    static void access$7100(com.android.server.ConnectivityService, android.net.NetworkRequest)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.NetworkRequest;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureNetworkRequestHasType(android.net.NetworkRequest)>(r1);

        return;
    }

    static android.util.SparseIntArray access$7200(com.android.server.ConnectivityService)
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseIntArray $r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidToNetworkRequestCount>;

        return $r1;
    }

    static void access$7700(com.android.server.ConnectivityService, com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleRegisterConnectivityDiagnosticsCallback(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)>(r1);

        return;
    }

    static void access$7800(com.android.server.ConnectivityService, android.net.IConnectivityDiagnosticsCallback, int)
    {
        com.android.server.ConnectivityService r0;
        android.net.IConnectivityDiagnosticsCallback r1;
        int i0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.net.IConnectivityDiagnosticsCallback;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleUnregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback,int)>(r1, i0);

        return;
    }

    static void access$7900(com.android.server.ConnectivityService, com.android.server.ConnectivityService$ConnectivityReportEvent, android.os.PersistableBundle)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$ConnectivityReportEvent r1;
        android.os.PersistableBundle r2;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.ConnectivityService$ConnectivityReportEvent;

        r2 := @parameter2: android.os.PersistableBundle;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleNetworkTestedWithExtras(com.android.server.ConnectivityService$ConnectivityReportEvent,android.os.PersistableBundle)>(r1, r2);

        return;
    }

    static void access$800(com.android.server.ConnectivityService, int, boolean, java.lang.String, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        boolean z0;
        java.lang.String r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleNat64PrefixEvent(int,boolean,java.lang.String,int)>(i0, z0, r1, i1);

        return;
    }

    static void access$8000(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, long, int, android.os.PersistableBundle)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        long l0;
        int i1;
        android.os.PersistableBundle r2;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        l0 := @parameter2: long;

        i1 := @parameter3: int;

        r2 := @parameter4: android.os.PersistableBundle;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleDataStallSuspected(com.android.server.connectivity.NetworkAgentInfo,long,int,android.os.PersistableBundle)>(r1, l0, i1, r2);

        return;
    }

    static void access$8100(com.android.server.ConnectivityService, com.android.server.connectivity.NetworkAgentInfo, boolean)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        boolean z0;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleNetworkConnectivityReported(com.android.server.connectivity.NetworkAgentInfo,boolean)>(r1, z0);

        return;
    }

    static void access$900(com.android.server.ConnectivityService, android.os.Message)
    {
        com.android.server.ConnectivityService r0;
        android.os.Message r1;

        r0 := @parameter0: com.android.server.ConnectivityService;

        r1 := @parameter1: android.os.Message;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleAsyncChannelHalfConnect(android.os.Message)>(r1);

        return;
    }

    private boolean addLegacyRouteToHost(android.net.LinkProperties, java.net.InetAddress, int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2;
        android.net.RouteInfo r1, r19;
        java.util.List $r2;
        java.net.InetAddress $r3, $r4, r18;
        boolean $z0;
        java.lang.String $r11, $r16, r20, $r23;
        java.lang.Exception $r12;
        java.lang.StringBuilder $r13, $r21;
        android.net.LinkProperties r17;
        android.os.INetworkManagementService $r24;

        r0 := @this: com.android.server.ConnectivityService;

        r17 := @parameter0: android.net.LinkProperties;

        r18 := @parameter1: java.net.InetAddress;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r2 = virtualinvoke r17.<android.net.LinkProperties: java.util.List getAllRoutes()>();

        r1 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo selectBestRoute(java.util.Collection,java.net.InetAddress)>($r2, r18);

        if r1 != null goto label1;

        $r11 = virtualinvoke r17.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        r19 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.lang.String)>(r18, $r11);

        goto label3;

     label1:
        r20 = virtualinvoke r1.<android.net.RouteInfo: java.lang.String getInterface()>();

        $r3 = virtualinvoke r1.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $z0 = virtualinvoke $r3.<java.net.InetAddress: boolean equals(java.lang.Object)>(r18);

        if $z0 == 0 goto label2;

        r19 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.lang.String)>(r18, r20);

        goto label3;

     label2:
        $r4 = virtualinvoke r1.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        r19 = staticinvoke <android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.net.InetAddress,java.lang.String)>(r18, $r4, r20);

     label3:
        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding legacy route ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for UID/PID ");

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r23);

     label4:
        $r24 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        interfaceinvoke $r24.<android.os.INetworkManagementService: void addLegacyRouteForNetId(int,android.net.RouteInfo,int)>(i0, r19, i1);

     label5:
        return 1;

     label6:
        $r12 := @caughtexception;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception trying to add a route: ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r16);

        return 0;

        catch java.lang.Exception from label4 to label5 with label6;
    }

    private void addNetworkToLegacyTypeTracker(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkRequest r2;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1;
        com.android.server.ConnectivityService$LegacyTypeTracker $r3, $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        i3 = 0;

     label1:
        $i0 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        if i3 >= $i0 goto label3;

        r2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkRequest requestAt(int)>(i3);

        $i1 = r2.<android.net.NetworkRequest: int legacyType>;

        if $i1 == -1 goto label2;

        $z1 = virtualinvoke r2.<android.net.NetworkRequest: boolean isRequest()>();

        if $z1 == 0 goto label2;

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $i2 = r2.<android.net.NetworkRequest: int legacyType>;

        virtualinvoke $r4.<com.android.server.ConnectivityService$LegacyTypeTracker: void add(int,com.android.server.connectivity.NetworkAgentInfo)>($i2, r1);

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        $z0 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z0 == 0 goto label4;

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r3.<com.android.server.ConnectivityService$LegacyTypeTracker: void add(int,com.android.server.connectivity.NetworkAgentInfo)>(17, r1);

     label4:
        return;
    }

    private void applyBackgroundChangeForRematch(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkCapabilities r2, $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        r2 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities mixInCapabilities(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities)>(r1, $r3);

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, r2);

        if $z0 == 0 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void updateNetworkPermissions(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities)>(r1, r2);

        virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities getAndSetNetworkCapabilities(android.net.NetworkCapabilities)>(r2);

        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(r1, 524294);

        return;
    }

    private void applyNetworkReassignment(com.android.server.ConnectivityService$NetworkReassignment, long)
    {
        com.android.server.ConnectivityService r0;
        long l0, $l1;
        java.util.Collection r1, $r11;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z12, $z14, $z15;
        java.util.HashMap $r3, $r7, $r10;
        android.util.ArraySet $r4;
        java.lang.Iterable $r5, $r50;
        android.net.NetworkRequest $r6, $r26;
        java.lang.Object $r8, $r12, $r19, $r21, $r22, $r23, $r36, $r40;
        java.util.ArrayList $r9;
        com.android.server.ConnectivityService$UnneededFor $r13;
        byte $b2;
        java.lang.StringBuilder $r14;
        java.lang.String $r16, $r18;
        com.android.server.connectivity.NetworkAgentInfo $r20, $r25, $r27, $r28, $r31, $r37, $r38, r43, r46, r49, r55, r57, r60;
        com.android.server.ConnectivityService$NetworkRequestInfo $r24, $r29, $r30, $r39, r47;
        com.android.server.ConnectivityService$Dependencies $r32;
        com.android.server.connectivity.IpConnectivityMetrics$Logger $r33;
        com.android.server.connectivity.DefaultNetworkMetrics $r34;
        com.android.server.connectivity.LingerMonitor $r35;
        com.android.server.ConnectivityService$NetworkReassignment r41;
        java.util.Iterator r42, r44, r51, r54, r56, r58, r59;
        com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment r45, r48, r52;

        r0 := @this: com.android.server.ConnectivityService;

        r41 := @parameter0: com.android.server.ConnectivityService$NetworkReassignment;

        l0 := @parameter1: long;

        $r3 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        r1 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        r42 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z1 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label03;

        $r40 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r43 = (com.android.server.connectivity.NetworkAgentInfo) $r40;

        $z12 = virtualinvoke r43.<com.android.server.connectivity.NetworkAgentInfo: boolean isBackgroundNetwork()>();

        if $z12 == 0 goto label02;

        virtualinvoke $r4.<android.util.ArraySet: boolean add(java.lang.Object)>(r43);

     label02:
        goto label01;

     label03:
        $r5 = virtualinvoke r41.<com.android.server.ConnectivityService$NetworkReassignment: java.lang.Iterable getRequestReassignments()>();

        r44 = interfaceinvoke $r5.<java.lang.Iterable: java.util.Iterator iterator()>();

     label04:
        $z2 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label05;

        $r36 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>();

        r45 = (com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment) $r36;

        $r39 = r45.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.ConnectivityService$NetworkRequestInfo mRequest>;

        $r38 = r45.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.connectivity.NetworkAgentInfo mOldNetwork>;

        $r37 = r45.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.connectivity.NetworkAgentInfo mNewNetwork>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateSatisfiersForRematchRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkAgentInfo,long)>($r39, $r38, $r37, l0);

        goto label04;

     label05:
        r46 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        $r7 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r6 = r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        r47 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r8;

        r48 = staticinvoke <com.android.server.ConnectivityService$NetworkReassignment: com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment access$7500(com.android.server.ConnectivityService$NetworkReassignment,com.android.server.ConnectivityService$NetworkRequestInfo)>(r41, r47);

        if r48 == null goto label06;

        r49 = r48.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.connectivity.NetworkAgentInfo mNewNetwork>;

        goto label07;

     label06:
        r49 = r46;

     label07:
        if r46 == r49 goto label09;

        if r46 == null goto label08;

        $r35 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.LingerMonitor mLingerMonitor>;

        virtualinvoke $r35.<com.android.server.connectivity.LingerMonitor: void noteLingerDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkAgentInfo)>(r46, r49);

     label08:
        specialinvoke r0.<com.android.server.ConnectivityService: void updateDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkAgentInfo)>(r49, r46);

        specialinvoke r0.<com.android.server.ConnectivityService: void makeDefault(com.android.server.connectivity.NetworkAgentInfo)>(r49);

        $r32 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        $r33 = virtualinvoke $r32.<com.android.server.ConnectivityService$Dependencies: com.android.server.connectivity.IpConnectivityMetrics$Logger getMetricsLogger()>();

        $r34 = interfaceinvoke $r33.<com.android.server.connectivity.IpConnectivityMetrics$Logger: com.android.server.connectivity.DefaultNetworkMetrics defaultNetworkMetrics()>();

        virtualinvoke $r34.<com.android.server.connectivity.DefaultNetworkMetrics: void logDefaultNetworkEvent(long,com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkAgentInfo)>(l0, r49, r46);

        specialinvoke r0.<com.android.server.ConnectivityService: void scheduleReleaseNetworkTransitionWakelock()>();

     label09:
        $r50 = virtualinvoke r41.<com.android.server.ConnectivityService$NetworkReassignment: java.lang.Iterable getRequestReassignments()>();

        r51 = interfaceinvoke $r50.<java.lang.Iterable: java.util.Iterator iterator()>();

     label10:
        $z14 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label13;

        $r23 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        r52 = (com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment) $r23;

        $r24 = r52.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.ConnectivityService$NetworkRequestInfo mRequest>;

        $r26 = $r24.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r25 = r52.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.connectivity.NetworkAgentInfo mNewNetwork>;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(android.net.NetworkRequest,com.android.server.connectivity.NetworkAgentInfo)>($r26, $r25);

        $r27 = r52.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.connectivity.NetworkAgentInfo mNewNetwork>;

        if $r27 == null goto label11;

        $r31 = r52.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.connectivity.NetworkAgentInfo mNewNetwork>;

        $r30 = r52.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.ConnectivityService$NetworkRequestInfo mRequest>;

        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkAvailable(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$NetworkRequestInfo)>($r31, $r30);

        goto label12;

     label11:
        $r29 = r52.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.ConnectivityService$NetworkRequestInfo mRequest>;

        $r28 = r52.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: com.android.server.connectivity.NetworkAgentInfo mOldNetwork>;

        specialinvoke r0.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)>($r29, $r28, 524292, 0);

     label12:
        goto label10;

     label13:
        $r9 = new java.util.ArrayList;

        specialinvoke $r9.<java.util.ArrayList: void <init>()>();

        r54 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label14:
        $z3 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label16;

        $r22 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (com.android.server.connectivity.NetworkAgentInfo) $r22;

        $z10 = specialinvoke r0.<com.android.server.ConnectivityService: boolean updateLingerState(com.android.server.connectivity.NetworkAgentInfo,long)>(r55, l0);

        if $z10 == 0 goto label15;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r55);

     label15:
        goto label14;

     label16:
        r56 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label17:
        $z15 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>();

        if $z15 == 0 goto label20;

        $r21 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>();

        r57 = (com.android.server.connectivity.NetworkAgentInfo) $r21;

        $z8 = r57.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        if $z8 != 0 goto label18;

        goto label17;

     label18:
        z0 = virtualinvoke $r4.<android.util.ArraySet: boolean contains(java.lang.Object)>(r57);

        specialinvoke r0.<com.android.server.ConnectivityService: void processNewlyLostListenRequests(com.android.server.connectivity.NetworkAgentInfo)>(r57);

        $z9 = virtualinvoke r57.<com.android.server.connectivity.NetworkAgentInfo: boolean isBackgroundNetwork()>();

        if z0 == $z9 goto label19;

        specialinvoke r0.<com.android.server.ConnectivityService: void applyBackgroundChangeForRematch(com.android.server.connectivity.NetworkAgentInfo)>(r57);

     label19:
        specialinvoke r0.<com.android.server.ConnectivityService: void processNewlySatisfiedListenRequests(com.android.server.connectivity.NetworkAgentInfo)>(r57);

        goto label17;

     label20:
        r58 = virtualinvoke $r9.<java.util.ArrayList: java.util.Iterator iterator()>();

     label21:
        $z4 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label22;

        $r19 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (com.android.server.connectivity.NetworkAgentInfo) $r19;

        specialinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkLosing(com.android.server.connectivity.NetworkAgentInfo,long)>($r20, l0);

        goto label21;

     label22:
        specialinvoke r0.<com.android.server.ConnectivityService: void updateLegacyTypeTrackerAndVpnLockdownForRematch(com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkAgentInfo,java.util.Collection)>(r46, r49, r1);

        $r10 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.util.Collection values()>();

        r59 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label23:
        $z5 = interfaceinvoke r59.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label26;

        $r12 = interfaceinvoke r59.<java.util.Iterator: java.lang.Object next()>();

        r60 = (com.android.server.connectivity.NetworkAgentInfo) $r12;

        $r13 = <com.android.server.ConnectivityService$UnneededFor: com.android.server.ConnectivityService$UnneededFor TEARDOWN>;

        $z6 = specialinvoke r0.<com.android.server.ConnectivityService: boolean unneeded(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$UnneededFor)>(r60, $r13);

        if $z6 == 0 goto label25;

        $l1 = virtualinvoke r60.<com.android.server.connectivity.NetworkAgentInfo: long getLingerExpiry()>();

        $b2 = $l1 cmp 0L;

        if $b2 <= 0 goto label24;

        $z7 = specialinvoke r0.<com.android.server.ConnectivityService: boolean updateLingerState(com.android.server.connectivity.NetworkAgentInfo,long)>(r60, l0);

        if $z7 == 0 goto label25;

        specialinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkLosing(com.android.server.connectivity.NetworkAgentInfo,long)>(r60, l0);

        goto label25;

     label24:
        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Reaping ");

        $r16 = virtualinvoke r60.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r18);

        specialinvoke r0.<com.android.server.ConnectivityService: void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r60);

     label25:
        goto label23;

     label26:
        return;
    }

    private void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo, com.android.server.connectivity.NetworkAgentInfo, int, int)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11;
        android.os.Message r2;
        android.os.Messenger $r3, $r7;
        android.os.Bundle $r4;
        android.net.NetworkRequest $r5, $r6, $r11, $r18, $r23, $r32;
        java.lang.String $r13, $r19, $r24, $r34, r38;
        android.net.LinkProperties $r14, $r15, $r26, $r27;
        android.net.NetworkCapabilities $r16, $r17, $r20, $r21, $r22, $r25;
        android.net.Network $r28, r37;
        android.os.RemoteException $r29;
        java.lang.StringBuilder $r30, r39;
        com.android.server.connectivity.NetworkAgentInfo r35;
        boolean z0, $z1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        r35 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        $r3 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.os.Messenger messenger>;

        if $r3 != null goto label01;

        return;

     label01:
        $r4 = new android.os.Bundle;

        specialinvoke $r4.<android.os.Bundle: void <init>()>();

        $r5 = new android.net.NetworkRequest;

        $r6 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        specialinvoke $r5.<android.net.NetworkRequest: void <init>(android.net.NetworkRequest)>($r6);

        staticinvoke <com.android.server.ConnectivityService: void putParcelable(android.os.Bundle,android.os.Parcelable)>($r4, $r5);

        r2 = staticinvoke <android.os.Message: android.os.Message obtain()>();

        if i0 == 524293 goto label02;

        $r28 = r35.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        staticinvoke <com.android.server.ConnectivityService: void putParcelable(android.os.Bundle,android.os.Parcelable)>($r4, $r28);

     label02:
        lookupswitch(i0)
        {
            case 524290: goto label10;
            case 524291: goto label09;
            case 524294: goto label08;
            case 524295: goto label07;
            case 524299: goto label04;
            default: goto label03;
        };

     label03:
        goto label11;

     label04:
        r37 = r35.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        if i1 == 0 goto label05;

        z0 = 1;

        goto label06;

     label05:
        z0 = 0;

     label06:
        specialinvoke r0.<com.android.server.ConnectivityService: void maybeLogBlockedStatusChanged(com.android.server.ConnectivityService$NetworkRequestInfo,android.net.Network,boolean)>(r1, r37, z0);

        r2.<android.os.Message: int arg1> = i1;

        goto label11;

     label07:
        $r14 = r35.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $i3 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mPid>;

        $i2 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $r15 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties linkPropertiesRestrictedForCallerPermissions(android.net.LinkProperties,int,int)>($r14, $i3, $i2);

        staticinvoke <com.android.server.ConnectivityService: void putParcelable(android.os.Bundle,android.os.Parcelable)>($r4, $r15);

        goto label11;

     label08:
        $r16 = r35.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $i5 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mPid>;

        $i4 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $r17 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities networkCapabilitiesRestrictedForCallerPermissions(android.net.NetworkCapabilities,int,int)>($r16, $i5, $i4);

        $i6 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $r18 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r19 = virtualinvoke $r18.<android.net.NetworkRequest: java.lang.String getRequestorPackageName()>();

        $r20 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities maybeSanitizeLocationInfoForCaller(android.net.NetworkCapabilities,int,java.lang.String)>($r17, $i6, $r19);

        staticinvoke <com.android.server.ConnectivityService: void putParcelable(android.os.Bundle,android.os.Parcelable)>($r4, $r20);

        goto label11;

     label09:
        r2.<android.os.Message: int arg1> = i1;

        goto label11;

     label10:
        $r21 = r35.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $i8 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mPid>;

        $i7 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $r22 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities networkCapabilitiesRestrictedForCallerPermissions(android.net.NetworkCapabilities,int,int)>($r21, $i8, $i7);

        $i9 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $r23 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r24 = virtualinvoke $r23.<android.net.NetworkRequest: java.lang.String getRequestorPackageName()>();

        $r25 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities maybeSanitizeLocationInfoForCaller(android.net.NetworkCapabilities,int,java.lang.String)>($r22, $i9, $r24);

        staticinvoke <com.android.server.ConnectivityService: void putParcelable(android.os.Bundle,android.os.Parcelable)>($r4, $r25);

        $r26 = r35.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $i11 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mPid>;

        $i10 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $r27 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties linkPropertiesRestrictedForCallerPermissions(android.net.LinkProperties,int,int)>($r26, $i11, $i10);

        staticinvoke <com.android.server.ConnectivityService: void putParcelable(android.os.Bundle,android.os.Parcelable)>($r4, $r27);

        r2.<android.os.Message: int arg1> = i1;

     label11:
        r2.<android.os.Message: int what> = i0;

        virtualinvoke r2.<android.os.Message: void setData(android.os.Bundle)>($r4);

     label12:
        $z1 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z1 == 0 goto label13;

        r38 = staticinvoke <android.net.ConnectivityManager: java.lang.String getCallbackName(int)>(i0);

        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sending notification ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r11 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r13);

     label13:
        $r7 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.os.Messenger messenger>;

        virtualinvoke $r7.<android.os.Messenger: void send(android.os.Message)>(r2);

     label14:
        goto label16;

     label15:
        $r29 := @caughtexception;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RemoteException caught trying to send a callback msg for ");

        $r32 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r34);

     label16:
        return;

        catch android.os.RemoteException from label12 to label13 with label15;
        catch android.os.RemoteException from label13 to label14 with label15;
    }

    private transient boolean checkAnyPermissionOf(int, int, java.lang.String[])
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2, $i3, i4;
        java.lang.String[] r1;
        java.lang.String r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: java.lang.String[];

        i2 = lengthof r1;

        i4 = 0;

     label1:
        if i4 >= i2 goto label3;

        r2 = r1[i4];

        $r3 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $i3 = virtualinvoke $r3.<android.content.Context: int checkPermission(java.lang.String,int,int)>(r2, i0, i1);

        if $i3 != 0 goto label2;

        return 1;

     label2:
        i4 = i4 + 1;

        goto label1;

     label3:
        return 0;
    }

    private transient boolean checkAnyPermissionOf(java.lang.String[])
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] r1;
        int i0, $i1, i2;
        java.lang.String r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String[];

        i0 = lengthof r1;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        r2 = r1[i2];

        $r3 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $i1 = virtualinvoke $r3.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>(r2);

        if $i1 != 0 goto label2;

        return 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return 0;
    }

    private boolean checkNetworkSignalStrengthWakeupPermission(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        java.lang.String[] $r1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "android.permission.NETWORK_SIGNAL_STRENGTH_WAKEUP";

        $r1[1] = "android.permission.MAINLINE_NETWORK_STACK";

        $r1[2] = "android.permission.NETWORK_SETTINGS";

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkAnyPermissionOf(int,int,java.lang.String[])>(i0, i1, $r1);

        return $z0;
    }

    private boolean checkNetworkStackPermission()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] $r1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "android.permission.NETWORK_STACK";

        $r1[1] = "android.permission.MAINLINE_NETWORK_STACK";

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkAnyPermissionOf(java.lang.String[])>($r1);

        return $z0;
    }

    private boolean checkNetworkStackPermission(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        java.lang.String[] $r1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "android.permission.NETWORK_STACK";

        $r1[1] = "android.permission.MAINLINE_NETWORK_STACK";

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkAnyPermissionOf(int,int,java.lang.String[])>(i0, i1, $r1);

        return $z0;
    }

    private boolean checkSettingsPermission()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] $r1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "android.permission.NETWORK_SETTINGS";

        $r1[1] = "android.permission.MAINLINE_NETWORK_STACK";

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkAnyPermissionOf(java.lang.String[])>($r1);

        return $z0;
    }

    private boolean checkSettingsPermission(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2, $i3;
        android.content.Context $r1, $r2;
        boolean z0;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.NETWORK_SETTINGS", i0, i1);

        if $i2 == 0 goto label2;

        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $i3 = virtualinvoke $r2.<android.content.Context: int checkPermission(java.lang.String,int,int)>("android.permission.MAINLINE_NETWORK_STACK", i0, i1);

        if $i3 != 0 goto label1;

        goto label2;

     label1:
        z0 = 0;

        goto label3;

     label2:
        z0 = 1;

     label3:
        return z0;
    }

    private boolean checkUnsupportedStartingFrom(int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2;
        android.content.pm.PackageManager r1;
        android.content.Context $r2;
        android.content.pm.ApplicationInfo $r3;
        android.content.pm.PackageManager$NameNotFoundException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

     label1:
        $r3 = virtualinvoke r1.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfoAsUser(java.lang.String,int,int)>(r5, 0, i1);

        i2 = $r3.<android.content.pm.ApplicationInfo: int targetSdkVersion>;

     label2:
        if i2 >= i0 goto label3;

        return 0;

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        return 1;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label4;
    }

    private com.android.server.ConnectivityService$NetworkReassignment computeNetworkReassignment()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r3, $r14, $r16, r19;
        com.android.server.ConnectivityService$NetworkReassignment $r4;
        java.util.ArrayList $r5;
        java.util.HashMap $r6, $r8;
        java.util.Collection $r7, $r9;
        java.lang.Object $r10, $r17;
        android.net.NetworkRequest $r11, $r12;
        boolean $z0, $z1, $z3, $z4;
        com.android.server.connectivity.NetworkRanker $r13;
        com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment $r15;
        java.util.Iterator r18, r20;
        com.android.server.ConnectivityService$NetworkRequestInfo r21;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        $r4 = new com.android.server.ConnectivityService$NetworkReassignment;

        specialinvoke $r4.<com.android.server.ConnectivityService$NetworkReassignment: void <init>(com.android.server.ConnectivityService$1)>(null);

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        $r6 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();

        r18 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r17 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r19 = (com.android.server.connectivity.NetworkAgentInfo) $r17;

        $z1 = r19.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        if $z1 != 0 goto label2;

        goto label1;

     label2:
        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>(r19);

        goto label1;

     label3:
        $r8 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.util.Collection values()>();

        r20 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>();

     label4:
        $z4 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label7;

        $r10 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>();

        r21 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r10;

        $r11 = r21.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z0 = virtualinvoke $r11.<android.net.NetworkRequest: boolean isListen()>();

        if $z0 == 0 goto label5;

        goto label4;

     label5:
        $r13 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkRanker mNetworkRanker>;

        $r12 = r21.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        r3 = virtualinvoke $r13.<com.android.server.connectivity.NetworkRanker: com.android.server.connectivity.NetworkAgentInfo getBestNetwork(android.net.NetworkRequest,java.util.Collection)>($r12, $r5);

        $r14 = r21.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier>;

        if r3 == $r14 goto label6;

        $r15 = new com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment;

        $r16 = r21.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier>;

        specialinvoke $r15.<com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment: void <init>(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkAgentInfo)>(r21, $r16, r3);

        virtualinvoke $r4.<com.android.server.ConnectivityService$NetworkReassignment: void addRequestReassignment(com.android.server.ConnectivityService$NetworkReassignment$RequestReassignment)>($r15);

     label6:
        goto label4;

     label7:
        return $r4;
    }

    private android.net.RouteInfoParcel convertRouteInfo(android.net.RouteInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.RouteInfo r1;
        int i0, $i1;
        boolean $z0;
        java.net.InetAddress $r3;
        java.lang.String r4, $r6, $r8;
        android.net.RouteInfoParcel $r5;
        android.net.IpPrefix $r7;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.RouteInfo;

        i0 = virtualinvoke r1.<android.net.RouteInfo: int getType()>();

        if i0 == 1 goto label3;

        if i0 == 7 goto label2;

        if i0 == 9 goto label1;

        r4 = "";

        goto label5;

     label1:
        r4 = "throw";

        goto label5;

     label2:
        r4 = "unreachable";

        goto label5;

     label3:
        $z0 = virtualinvoke r1.<android.net.RouteInfo: boolean hasGateway()>();

        if $z0 == 0 goto label4;

        $r3 = virtualinvoke r1.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        r4 = virtualinvoke $r3.<java.net.InetAddress: java.lang.String getHostAddress()>();

        goto label5;

     label4:
        r4 = "";

     label5:
        $r5 = new android.net.RouteInfoParcel;

        specialinvoke $r5.<android.net.RouteInfoParcel: void <init>()>();

        $r6 = virtualinvoke r1.<android.net.RouteInfo: java.lang.String getInterface()>();

        $r5.<android.net.RouteInfoParcel: java.lang.String ifName> = $r6;

        $r7 = virtualinvoke r1.<android.net.RouteInfo: android.net.IpPrefix getDestination()>();

        $r8 = virtualinvoke $r7.<android.net.IpPrefix: java.lang.String toString()>();

        $r5.<android.net.RouteInfoParcel: java.lang.String destination> = $r8;

        $r5.<android.net.RouteInfoParcel: java.lang.String nextHop> = r4;

        $i1 = virtualinvoke r1.<android.net.RouteInfo: int getMtu()>();

        $r5.<android.net.RouteInfoParcel: int mtu> = $i1;

        return $r5;
    }

    private android.net.NetworkRequest createDefaultInternetRequestForTransport(int, android.net.NetworkRequest$Type)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1, $i2;
        android.net.NetworkRequest$Type r1;
        android.net.NetworkCapabilities $r3;
        android.content.Context $r5;
        java.lang.String $r6;
        android.net.NetworkRequest $r8;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 := @parameter1: android.net.NetworkRequest$Type;

        $r3 = new android.net.NetworkCapabilities;

        specialinvoke $r3.<android.net.NetworkCapabilities: void <init>()>();

        virtualinvoke $r3.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(12);

        $i1 = staticinvoke <android.os.Process: int myUid()>();

        $r5 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.String getPackageName()>();

        virtualinvoke $r3.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setRequestorUidAndPackageName(int,java.lang.String)>($i1, $r6);

        if i0 <= -1 goto label1;

        virtualinvoke $r3.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addTransportType(int)>(i0);

     label1:
        $r8 = new android.net.NetworkRequest;

        $i2 = specialinvoke r0.<com.android.server.ConnectivityService: int nextNetworkRequestId()>();

        specialinvoke $r8.<android.net.NetworkRequest: void <init>(android.net.NetworkCapabilities,int,int,android.net.NetworkRequest$Type)>($r3, -1, $i2, r1);

        return $r8;
    }

    private static android.net.NetworkCapabilities createDefaultNetworkCapabilitiesForUid(int)
    {
        int i0;
        android.net.NetworkCapabilities $r1;

        i0 := @parameter0: int;

        $r1 = new android.net.NetworkCapabilities;

        specialinvoke $r1.<android.net.NetworkCapabilities: void <init>()>();

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(12);

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(15);

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setSingleUid(int)>(i0);

        return $r1;
    }

    private boolean createNativeNetwork(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        int i0, $i1, $i2, $i3, $i4, $i5;
        boolean $z0, $z1, z2;
        android.net.Network $r3, $r6, $r8, $r12, $r18;
        android.net.NetworkCapabilities $r4, $r9;
        android.net.INetd $r5, r24;
        android.net.IDnsResolver $r7;
        com.android.server.connectivity.DnsManager $r10;
        int[] $r11;
        android.net.NetworkAgentConfig $r13, $r14;
        java.lang.Exception $r15;
        java.lang.StringBuilder $r16;
        java.lang.String $r21, $r23;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

     label01:
        $z0 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z0 == 0 goto label07;

        r24 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        $r12 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        i0 = $r12.<android.net.Network: int netId>;

        $r13 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        if $r13 == null goto label04;

        $r14 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $z1 = $r14.<android.net.NetworkAgentConfig: boolean allowBypass>;

        if $z1 != 0 goto label03;

     label02:
        goto label04;

     label03:
        z2 = 0;

        goto label05;

     label04:
        z2 = 1;

     label05:
        interfaceinvoke r24.<android.net.INetd: void networkCreateVpn(int,boolean)>(i0, z2);

     label06:
        goto label08;

     label07:
        $r5 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        $r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i1 = $r3.<android.net.Network: int netId>;

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $i2 = specialinvoke r0.<com.android.server.ConnectivityService: int getNetworkPermission(android.net.NetworkCapabilities)>($r4);

        interfaceinvoke $r5.<android.net.INetd: void networkCreatePhysical(int,int)>($i1, $i2);

     label08:
        $r7 = r0.<com.android.server.ConnectivityService: android.net.IDnsResolver mDnsResolver>;

        $r6 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i3 = $r6.<android.net.Network: int netId>;

        interfaceinvoke $r7.<android.net.IDnsResolver: void createNetworkCache(int)>($i3);

        $r10 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        $r8 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i4 = $r8.<android.net.Network: int netId>;

        $r9 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $r11 = virtualinvoke $r9.<android.net.NetworkCapabilities: int[] getTransportTypes()>();

        virtualinvoke $r10.<com.android.server.connectivity.DnsManager: void updateTransportsForNetwork(int,int[])>($i4, $r11);

     label09:
        return 1;

     label10:
        $r15 := @caughtexception;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error creating network ");

        $r18 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i5 = $r18.<android.net.Network: int netId>;

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r21 = virtualinvoke $r15.<java.lang.Exception: java.lang.String getMessage()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r23);

        return 0;

        catch android.os.RemoteException from label01 to label02 with label10;
        catch android.os.ServiceSpecificException from label01 to label02 with label10;
        catch android.os.RemoteException from label05 to label06 with label10;
        catch android.os.ServiceSpecificException from label05 to label06 with label10;
        catch android.os.RemoteException from label07 to label08 with label10;
        catch android.os.ServiceSpecificException from label07 to label08 with label10;
        catch android.os.RemoteException from label08 to label09 with label10;
        catch android.os.ServiceSpecificException from label08 to label09 with label10;
    }

    private com.android.internal.net.VpnInfo createVpnInfo(com.android.server.connectivity.Vpn)
    {
        com.android.server.ConnectivityService r0;
        com.android.internal.net.VpnInfo r1, r20;
        int i0, $i1, $i2, i3;
        java.lang.String r2;
        java.util.ArrayList $r3;
        boolean $z0, $z1, $z2;
        java.lang.String[] $r4, $r6, $r19;
        java.lang.Object[] $r5;
        android.net.Network $r7, $r11;
        java.util.List $r8;
        java.lang.Object $r9;
        android.net.Network[] $r10, r13, r14;
        com.android.server.connectivity.Vpn r12;
        com.android.server.connectivity.NetworkAgentInfo r15;
        android.net.LinkProperties r17;
        java.util.Iterator r18;

        r0 := @this: com.android.server.ConnectivityService;

        r12 := @parameter0: com.android.server.connectivity.Vpn;

        r1 = virtualinvoke r12.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnInfo getVpnInfo()>();

        if r1 != null goto label01;

        return null;

     label01:
        r13 = virtualinvoke r12.<com.android.server.connectivity.Vpn: android.net.Network[] getUnderlyingNetworks()>();

        i3 = 0;

        r14 = r13;

        if r13 != null goto label02;

        r15 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        r14 = r13;

        if r15 == null goto label02;

        $r10 = newarray (android.net.Network)[1];

        $r11 = r15.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $r10[0] = $r11;

        r14 = $r10;

     label02:
        if r14 == null goto label08;

        $i1 = lengthof r14;

        if $i1 <= 0 goto label08;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        i0 = lengthof r14;

     label03:
        if i3 >= i0 goto label07;

        $r7 = r14[i3];

        r17 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(android.net.Network)>($r7);

        if r17 == null goto label06;

        $r8 = virtualinvoke r17.<android.net.LinkProperties: java.util.List getAllInterfaceNames()>();

        r18 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label06;

        $r9 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.lang.String) $r9;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z2 != 0 goto label05;

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2);

     label05:
        goto label04;

     label06:
        i3 = i3 + 1;

        goto label03;

     label07:
        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label08;

        $i2 = interfaceinvoke $r3.<java.util.List: int size()>();

        $r4 = newarray (java.lang.String)[$i2];

        $r5 = interfaceinvoke $r3.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        $r6 = (java.lang.String[]) $r5;

        r1.<com.android.internal.net.VpnInfo: java.lang.String[] underlyingIfaces> = $r6;

     label08:
        $r19 = r1.<com.android.internal.net.VpnInfo: java.lang.String[] underlyingIfaces>;

        if $r19 != null goto label09;

        r20 = null;

        goto label10;

     label09:
        r20 = r1;

     label10:
        return r20;
    }

    private void decrementNetworkRequestPerUidCount(com.android.server.ConnectivityService$NetworkRequestInfo)
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseIntArray r1, $r4, $r5, $r6, $r7;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.String r2, $r12;
        java.lang.StringBuilder r3;
        java.lang.Throwable $r13;
        com.android.server.ConnectivityService$NetworkRequestInfo r14;

        r0 := @this: com.android.server.ConnectivityService;

        r14 := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidToNetworkRequestCount>;

        entermonitor r1;

     label01:
        $r4 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidToNetworkRequestCount>;

        $i1 = r14.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        i0 = virtualinvoke $r4.<android.util.SparseIntArray: int get(int,int)>($i1, 0);

     label02:
        if i0 >= 1 goto label05;

     label03:
        r2 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r3 = new java.lang.StringBuilder;

        specialinvoke r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BUG: too small request count ");

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for UID ");

        $i6 = r14.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r12 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r2, $r12);

     label04:
        goto label09;

     label05:
        if i0 != 1 goto label08;

     label06:
        $r7 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidToNetworkRequestCount>;

        $r6 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidToNetworkRequestCount>;

        $i4 = r14.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $i5 = virtualinvoke $r6.<android.util.SparseIntArray: int indexOfKey(int)>($i4);

        virtualinvoke $r7.<android.util.SparseIntArray: void removeAt(int)>($i5);

     label07:
        goto label09;

     label08:
        $r5 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidToNetworkRequestCount>;

        $i3 = r14.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $i2 = i0 - 1;

        virtualinvoke $r5.<android.util.SparseIntArray: void put(int,int)>($i3, $i2);

     label09:
        exitmonitor r1;

     label10:
        return;

     label11:
        $r13 := @caughtexception;

     label12:
        exitmonitor r1;

     label13:
        throw $r13;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void destroyNativeNetwork(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network $r2, $r4;
        int $i0, $i1;
        android.net.INetd $r3;
        android.net.IDnsResolver $r5;
        java.lang.Exception $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r10;
        com.android.server.connectivity.NetworkAgentInfo r11;

        r0 := @this: com.android.server.ConnectivityService;

        r11 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        $r2 = r11.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i0 = $r2.<android.net.Network: int netId>;

        interfaceinvoke $r3.<android.net.INetd: void networkDestroy(int)>($i0);

        $r5 = r0.<com.android.server.ConnectivityService: android.net.IDnsResolver mDnsResolver>;

        $r4 = r11.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i1 = $r4.<android.net.Network: int netId>;

        interfaceinvoke $r5.<android.net.IDnsResolver: void destroyNetworkCache(int)>($i1);

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception destroying network: ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r10);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
        catch android.os.ServiceSpecificException from label1 to label2 with label3;
    }

    private boolean disallowedBecauseSystemCaller()
    {
        com.android.server.ConnectivityService r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isSystem(int)>($i0);

        if $z0 == 0 goto label1;

        $i1 = staticinvoke <android.os.SystemProperties: int getInt(java.lang.String,int)>("ro.product.first_api_level", 0);

        if $i1 <= 28 goto label1;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("This method exists only for app backwards compatibility and must not be called by system services.");

        return 1;

     label1:
        return 0;
    }

    private void disconnectAndDestroyNetwork(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, $z1, $z3, $z4, $z5, $z6;
        long l0;
        android.net.NetworkRequest r1, $r22;
        com.android.server.ConnectivityService$NetworkRequestInfo r2;
        java.lang.StringBuilder $r3;
        java.lang.String $r4, $r8, $r30, $r37;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, i9;
        android.net.Network $r9, $r20, $r26, $r28, $r33, $r34;
        com.android.server.connectivity.NetworkNotificationManager $r10;
        android.net.NetworkInfo $r11, $r42;
        com.android.server.connectivity.KeepaliveTracker $r12;
        android.net.LinkProperties $r13;
        java.util.List $r14;
        android.net.NetworkMonitorManager $r15;
        android.os.Messenger $r16;
        java.util.HashMap $r17, $r31;
        com.android.server.connectivity.Nat464Xlat $r19;
        android.util.SparseArray $r21, r47;
        com.android.server.ConnectivityService$LegacyTypeTracker $r23;
        android.net.NetworkCapabilities $r24, $r36;
        com.android.server.connectivity.LingerMonitor $r25;
        com.android.server.NetIdManager $r27;
        com.android.server.connectivity.DnsManager $r29;
        java.lang.Object $r32, $r35;
        com.android.server.ConnectivityService$Dependencies $r38;
        com.android.server.connectivity.IpConnectivityMetrics$Logger $r39;
        com.android.server.connectivity.DefaultNetworkMetrics $r40;
        android.net.NetworkInfo$DetailedState $r41;
        java.lang.Throwable $r43;
        com.android.server.connectivity.NetworkAgentInfo r44, r48;
        java.util.Iterator r46;

        r0 := @this: com.android.server.ConnectivityService;

        r44 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke r44.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" disconnected, was satisfying ");

        $i1 = virtualinvoke r44.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r8);

        $r10 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkNotificationManager mNotifier>;

        $r9 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i2 = $r9.<android.net.Network: int netId>;

        virtualinvoke $r10.<com.android.server.connectivity.NetworkNotificationManager: void clearNotification(int)>($i2);

        $r11 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $z1 = virtualinvoke $r11.<android.net.NetworkInfo: boolean isConnected()>();

        if $z1 == 0 goto label01;

        $r42 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $r41 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        virtualinvoke $r42.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r41, null, null);

     label01:
        z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r44);

        if z0 == 0 goto label02;

        r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = 0;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r38 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        $r39 = virtualinvoke $r38.<com.android.server.ConnectivityService$Dependencies: com.android.server.connectivity.IpConnectivityMetrics$Logger getMetricsLogger()>();

        $r40 = interfaceinvoke $r39.<com.android.server.connectivity.IpConnectivityMetrics$Logger: com.android.server.connectivity.DefaultNetworkMetrics defaultNetworkMetrics()>();

        virtualinvoke $r40.<com.android.server.connectivity.DefaultNetworkMetrics: void logDefaultNetworkEvent(long,com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkAgentInfo)>(l0, null, r44);

     label02:
        specialinvoke r0.<com.android.server.ConnectivityService: void notifyIfacesChangedForNetworkStats()>();

        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(r44, 524292);

        $r12 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.KeepaliveTracker mKeepaliveTracker>;

        virtualinvoke $r12.<com.android.server.connectivity.KeepaliveTracker: void handleStopAllKeepalives(com.android.server.connectivity.NetworkAgentInfo,int)>(r44, -20);

        $r13 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r14 = virtualinvoke $r13.<android.net.LinkProperties: java.util.List getAllInterfaceNames()>();

        r46 = interfaceinvoke $r14.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label04;

        $r35 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>();

        $r37 = (java.lang.String) $r35;

        $r36 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke r0.<com.android.server.ConnectivityService: void wakeupModifyInterface(java.lang.String,android.net.NetworkCapabilities,boolean)>($r37, $r36, 0);

        goto label03;

     label04:
        $r15 = virtualinvoke r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMonitorManager networkMonitor()>();

        virtualinvoke $r15.<android.net.NetworkMonitorManager: boolean notifyNetworkDisconnected()>();

        $r17 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r16 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.os.Messenger messenger>;

        virtualinvoke $r17.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r16);

        $r19 = r44.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        virtualinvoke $r19.<com.android.server.connectivity.Nat464Xlat: void update()>();

        r47 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        entermonitor r47;

     label05:
        $r21 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r20 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i3 = $r20.<android.net.Network: int netId>;

        virtualinvoke $r21.<android.util.SparseArray: void remove(int)>($i3);

        exitmonitor r47;

     label06:
        i9 = 0;

     label07:
        $i4 = virtualinvoke r44.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        if i9 >= $i4 goto label09;

        r1 = virtualinvoke r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkRequest requestAt(int)>(i9);

        $r31 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r32 = virtualinvoke $r31.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r32;

        r48 = r2.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier>;

        if r48 == null goto label08;

        $r33 = r48.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i8 = $r33.<android.net.Network: int netId>;

        $r34 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i7 = $r34.<android.net.Network: int netId>;

        if $i8 != $i7 goto label08;

        r2.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier> = null;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(android.net.NetworkRequest,com.android.server.connectivity.NetworkAgentInfo)>(r1, null);

     label08:
        i9 = i9 + 1;

        goto label07;

     label09:
        virtualinvoke r44.<com.android.server.connectivity.NetworkAgentInfo: void clearLingerState()>();

        $r22 = r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i5 = $r22.<android.net.NetworkRequest: int requestId>;

        $z3 = virtualinvoke r44.<com.android.server.connectivity.NetworkAgentInfo: boolean isSatisfyingRequest(int)>($i5);

        if $z3 == 0 goto label10;

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo mDefaultNetworkNai> = null;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkAgentInfo)>(null, r44);

        specialinvoke r0.<com.android.server.ConnectivityService: void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)>(r44);

        $r30 = virtualinvoke r44.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureNetworkTransitionWakelock(java.lang.String)>($r30);

     label10:
        $r23 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r23.<com.android.server.ConnectivityService$LegacyTypeTracker: void remove(com.android.server.connectivity.NetworkAgentInfo,boolean)>(r44, z0);

        $r24 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z4 = virtualinvoke $r24.<android.net.NetworkCapabilities: boolean hasTransport(int)>(4);

        if $z4 != 0 goto label11;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateAllVpnsCapabilities()>();

     label11:
        specialinvoke r0.<com.android.server.ConnectivityService: void rematchAllNetworksAndRequests()>();

        $r25 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.LingerMonitor mLingerMonitor>;

        virtualinvoke $r25.<com.android.server.connectivity.LingerMonitor: void noteDisconnect(com.android.server.connectivity.NetworkAgentInfo)>(r44);

        $z5 = r44.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        if $z5 == 0 goto label12;

        specialinvoke r0.<com.android.server.ConnectivityService: void destroyNativeNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r44);

        $r29 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        $r28 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        virtualinvoke $r29.<com.android.server.connectivity.DnsManager: void removeNetwork(android.net.Network)>($r28);

     label12:
        $r27 = r0.<com.android.server.ConnectivityService: com.android.server.NetIdManager mNetIdManager>;

        $r26 = r44.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i6 = $r26.<android.net.Network: int netId>;

        virtualinvoke $r27.<com.android.server.NetIdManager: void releaseNetId(int)>($i6);

        return;

     label13:
        $r43 := @caughtexception;

     label14:
        exitmonitor r47;

     label15:
        throw $r43;

        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    private void doDump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.Iterator r1;
        int i0, i1, i2, $i5, $i6, $i7, $i12, $i13, $i14, i17, i18, $i19;
        long l3, l4, $l8, $l9, $l10, $l11, $l15, $l16;
        com.android.internal.util.IndentingPrintWriter $r3;
        java.lang.String $r4, $r35, $r39, $r44, $r49, $r61, $r66, $r72, $r74, $r78, $r80;
        android.content.Context $r5;
        java.util.HashMap $r6;
        java.util.Collection $r7;
        android.net.Network $r8;
        android.util.SparseIntArray $r12, $r67, $r68;
        com.android.server.ConnectivityService$LegacyTypeTracker $r16;
        com.android.server.connectivity.KeepaliveTracker $r17;
        com.android.server.connectivity.MultipathPolicyTracker $r18;
        android.net.NetworkStackClient $r20;
        com.android.server.connectivity.PermissionMonitor $r23;
        android.util.LocalLog $r26, $r29, $r50;
        java.lang.StringBuilder $r32, $r36, $r40, $r45, $r62, $r76, r90, r100;
        android.util.SparseArray $r55, $r58, r98, $r99;
        java.lang.Object $r59, $r75;
        java.lang.Throwable $r81, $r83;
        java.lang.ArrayIndexOutOfBoundsException $r82;
        java.io.FileDescriptor r84;
        java.io.PrintWriter r85;
        java.lang.String[] r86;
        com.android.server.ConnectivityService$NetworkProviderInfo r88;
        com.android.server.connectivity.NetworkAgentInfo r89;

        r0 := @this: com.android.server.ConnectivityService;

        r84 := @parameter0: java.io.FileDescriptor;

        r85 := @parameter1: java.io.PrintWriter;

        r86 := @parameter2: java.lang.String[];

        z0 := @parameter3: boolean;

        $r3 = new com.android.internal.util.IndentingPrintWriter;

        specialinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void <init>(java.io.Writer,java.lang.String)>(r85, "  ");

        $r5 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r4 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $z1 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r5, $r4, $r3);

        if $z1 != 0 goto label01;

        return;

     label01:
        if z0 == 0 goto label02;

        return;

     label02:
        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r86, "--diag");

        if $z2 == 0 goto label03;

        specialinvoke r0.<com.android.server.ConnectivityService: void dumpNetworkDiagnostics(com.android.internal.util.IndentingPrintWriter)>($r3);

        return;

     label03:
        $z3 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r86, "networks");

        if $z3 == 0 goto label04;

        specialinvoke r0.<com.android.server.ConnectivityService: void dumpNetworks(com.android.internal.util.IndentingPrintWriter)>($r3);

        return;

     label04:
        $z4 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r86, "requests");

        if $z4 == 0 goto label05;

        specialinvoke r0.<com.android.server.ConnectivityService: void dumpNetworkRequests(com.android.internal.util.IndentingPrintWriter)>($r3);

        return;

     label05:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("NetworkProviders for:");

        $r6 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label06:
        $z5 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label07;

        $r75 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r88 = (com.android.server.ConnectivityService$NetworkProviderInfo) $r75;

        $r76 = new java.lang.StringBuilder;

        specialinvoke $r76.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r78 = r88.<com.android.server.ConnectivityService$NetworkProviderInfo: java.lang.String name>;

        virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78);

        $r80 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>($r80);

        goto label06;

     label07:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        r89 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Active default network: ");

        if r89 != null goto label08;

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("none");

        goto label09;

     label08:
        $r8 = r89.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i5 = $r8.<android.net.Network: int netId>;

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(int)>($i5);

     label09:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Current Networks:");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void dumpNetworks(com.android.internal.util.IndentingPrintWriter)>($r3);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void print(java.lang.String)>("Restrict background: ");

        $z6 = r0.<com.android.server.ConnectivityService: boolean mRestrictBackground>;

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(boolean)>($z6);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Status for known UIDs:");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r12 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        i0 = virtualinvoke $r12.<android.util.SparseIntArray: int size()>();

        i17 = 0;

     label10:
        if i17 >= i0 goto label16;

     label11:
        $r67 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        i1 = virtualinvoke $r67.<android.util.SparseIntArray: int keyAt(int)>(i17);

        $r68 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        i2 = virtualinvoke $r68.<android.util.SparseIntArray: int get(int,int)>(i1, 0);

        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UID=");

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rules=");

        $r72 = staticinvoke <android.net.NetworkPolicyManager: java.lang.String uidRulesToString(int)>(i2);

        virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r72);

        $r74 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r74);

     label12:
        goto label15;

     label13:
        $r83 := @caughtexception;

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  ConcurrentModificationException");

        goto label15;

     label14:
        $r82 := @caughtexception;

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("  ArrayIndexOutOfBoundsException");

     label15:
        i17 = i17 + 1;

        goto label10;

     label16:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Network Requests:");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void dumpNetworkRequests(com.android.internal.util.IndentingPrintWriter)>($r3);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r16 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r16.<com.android.server.ConnectivityService$LegacyTypeTracker: void dump(com.android.internal.util.IndentingPrintWriter)>($r3);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r17 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.KeepaliveTracker mKeepaliveTracker>;

        virtualinvoke $r17.<com.android.server.connectivity.KeepaliveTracker: void dump(com.android.internal.util.IndentingPrintWriter)>($r3);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void dumpAvoidBadWifiSettings(com.android.internal.util.IndentingPrintWriter)>($r3);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        $r18 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.MultipathPolicyTracker mMultipathPolicyTracker>;

        virtualinvoke $r18.<com.android.server.connectivity.MultipathPolicyTracker: void dump(com.android.internal.util.IndentingPrintWriter)>($r3);

        $z7 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r86, "--short");

        if $z7 != 0 goto label25;

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mNetworkRequestInfoLogs (most recent first):");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r26 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mNetworkRequestInfoLogs>;

        virtualinvoke $r26.<android.util.LocalLog: void reverseDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r84, $r3, r86);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("mNetworkInfoBlockingLogs (most recent first):");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r29 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mNetworkInfoBlockingLogs>;

        virtualinvoke $r29.<android.util.LocalLog: void reverseDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r84, $r3, r86);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("NetTransition WakeLock activity (most recent first):");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("total acquisitions: ");

        $i6 = r0.<com.android.server.ConnectivityService: int mTotalWakelockAcquisitions>;

        virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r35);

        $r36 = new java.lang.StringBuilder;

        specialinvoke $r36.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("total releases: ");

        $i7 = r0.<com.android.server.ConnectivityService: int mTotalWakelockReleases>;

        virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        $r39 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r39);

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("cumulative duration: ");

        $l8 = r0.<com.android.server.ConnectivityService: long mTotalWakelockDurationMs>;

        $l9 = $l8 / 1000L;

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l9);

        virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s");

        $r44 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r44);

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("longest duration: ");

        $l10 = r0.<com.android.server.ConnectivityService: long mMaxWakelockDurationMs>;

        $l11 = $l10 / 1000L;

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l11);

        virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s");

        $r49 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r49);

        $i13 = r0.<com.android.server.ConnectivityService: int mTotalWakelockAcquisitions>;

        $i12 = r0.<com.android.server.ConnectivityService: int mTotalWakelockReleases>;

        if $i13 <= $i12 goto label17;

        l3 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l4 = r0.<com.android.server.ConnectivityService: long mLastWakeLockAcquireTimestamp>;

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("currently holding WakeLock for: ");

        $l15 = l3 - l4;

        $l16 = $l15 / 1000L;

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l16);

        virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s");

        $r66 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r66);

     label17:
        $r50 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mWakelockLogs>;

        virtualinvoke $r50.<android.util.LocalLog: void reverseDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>(r84, $r3, r86);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("bandwidth update requests (by uid):");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        r98 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mBandwidthRequests>;

        entermonitor r98;

        i18 = 0;

     label18:
        $r99 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mBandwidthRequests>;

        $i19 = virtualinvoke $r99.<android.util.SparseArray: int size()>();

        if i18 >= $i19 goto label20;

        r100 = new java.lang.StringBuilder;

        specialinvoke r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[");

        $r55 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mBandwidthRequests>;

        $i14 = virtualinvoke $r55.<android.util.SparseArray: int keyAt(int)>(i18);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i14);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]: ");

        $r58 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mBandwidthRequests>;

        $r59 = virtualinvoke $r58.<android.util.SparseArray: java.lang.Object valueAt(int)>(i18);

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r59);

        $r61 = virtualinvoke r100.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r61);

     label19:
        i18 = i18 + 1;

        goto label18;

     label20:
        exitmonitor r98;

     label21:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        goto label25;

     label22:
        $r81 := @caughtexception;

     label23:
        exitmonitor r98;

     label24:
        throw $r81;

     label25:
        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("NetworkStackClient logs:");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r20 = staticinvoke <android.net.NetworkStackClient: android.net.NetworkStackClient getInstance()>();

        virtualinvoke $r20.<android.net.NetworkStackClient: void dump(java.io.PrintWriter)>($r3);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Permission Monitor:");

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r23 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        virtualinvoke $r23.<com.android.server.connectivity.PermissionMonitor: void dump(com.android.internal.util.IndentingPrintWriter)>($r3);

        virtualinvoke $r3.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;

        catch java.lang.ArrayIndexOutOfBoundsException from label11 to label12 with label14;
        catch java.util.ConcurrentModificationException from label11 to label12 with label13;
        catch java.lang.Throwable from label18 to label19 with label22;
        catch java.lang.Throwable from label20 to label21 with label22;
        catch java.lang.Throwable from label23 to label24 with label22;
    }

    private void dumpAvoidBadWifiSettings(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.ConnectivityService r0;
        com.android.internal.util.IndentingPrintWriter r1;
        boolean z0, $z1, $z2, $z3, $z4;
        int i0, i1;
        android.net.util.MultinetworkPolicyTracker $r2, $r12;
        java.lang.StringBuilder $r3, $r8, $r15, $r29;
        java.lang.String $r6, $r11, $r13, $r14, $r23, r26, r27, $r31;
        com.android.server.connectivity.NetworkAgentInfo[] r32;
        com.android.server.connectivity.NetworkAgentInfo r33;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r2 = r0.<com.android.server.ConnectivityService: android.net.util.MultinetworkPolicyTracker mMultinetworkPolicyTracker>;

        z0 = virtualinvoke $r2.<android.net.util.MultinetworkPolicyTracker: boolean configRestrictsAvoidBadWifi()>();

        if z0 != 0 goto label1;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Bad Wi-Fi avoidance: unrestricted");

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad Wi-Fi avoidance: ");

        $z1 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean avoidBadWifi()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r6);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config restrict:   ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r11);

        $r12 = r0.<com.android.server.ConnectivityService: android.net.util.MultinetworkPolicyTracker mMultinetworkPolicyTracker>;

        r26 = virtualinvoke $r12.<android.net.util.MultinetworkPolicyTracker: java.lang.String getAvoidBadWifiSetting()>();

        $r13 = "0";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r26);

        if $z2 == 0 goto label2;

        r27 = "get stuck";

        goto label5;

     label2:
        if r26 != null goto label3;

        r27 = "prompt";

        goto label5;

     label3:
        $r14 = "1";

        $z3 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r26);

        if $z3 == 0 goto label4;

        r27 = "avoid";

        goto label5;

     label4:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (?)");

        r27 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User setting:      ");

        virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r27);

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r31);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Network overrides:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        r32 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo[] networksSortedById()>();

        i0 = lengthof r32;

        i1 = 0;

     label6:
        if i1 >= i0 goto label8;

        r33 = r32[i1];

        $z4 = r33.<com.android.server.connectivity.NetworkAgentInfo: boolean avoidUnvalidated>;

        if $z4 == 0 goto label7;

        $r23 = virtualinvoke r33.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r23);

     label7:
        i1 = i1 + 1;

        goto label6;

     label8:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        return;
    }

    private void dumpNetworkDiagnostics(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.ConnectivityService r0;
        com.android.internal.util.IndentingPrintWriter r1;
        com.android.server.connectivity.NetworkAgentInfo[] r3;
        int i0, i1;
        java.util.ArrayList $r4;
        boolean $z0;
        java.lang.Object $r5;
        android.net.Network $r6, $r11;
        com.android.server.connectivity.DnsManager $r7;
        com.android.server.connectivity.NetworkDiagnostics $r8, r15;
        android.net.LinkProperties $r9, $r10;
        com.android.server.connectivity.NetworkAgentInfo r12;
        android.net.shared.PrivateDnsConfig r13;
        java.util.Iterator r14;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<java.util.ArrayList: void <init>()>();

        r3 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo[] networksSortedById()>();

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r12 = r3[i1];

        $r7 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        $r6 = r12.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        r13 = virtualinvoke $r7.<com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig getPrivateDnsConfig(android.net.Network)>($r6);

        $r8 = new com.android.server.connectivity.NetworkDiagnostics;

        $r11 = r12.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $r9 = new android.net.LinkProperties;

        $r10 = r12.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r9.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r10);

        specialinvoke $r8.<com.android.server.connectivity.NetworkDiagnostics: void <init>(android.net.Network,android.net.LinkProperties,android.net.shared.PrivateDnsConfig,long)>($r11, $r9, r13, 5000L);

        interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8);

        i1 = i1 + 1;

        goto label1;

     label2:
        r14 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label3:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r5 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (com.android.server.connectivity.NetworkDiagnostics) $r5;

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println()>();

        virtualinvoke r15.<com.android.server.connectivity.NetworkDiagnostics: void waitForMeasurements()>();

        virtualinvoke r15.<com.android.server.connectivity.NetworkDiagnostics: void dump(com.android.internal.util.IndentingPrintWriter)>(r1);

        goto label3;

     label4:
        return;
    }

    private void dumpNetworkRequests(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.ConnectivityService r0;
        com.android.internal.util.IndentingPrintWriter r1;
        com.android.server.ConnectivityService$NetworkRequestInfo[] r2;
        int i0, i1;
        com.android.server.ConnectivityService$NetworkRequestInfo $r3;
        java.lang.String $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r2 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkRequestInfo[] requestsSortedById()>();

        i0 = lengthof r2;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r3 = r2[i1];

        $r4 = virtualinvoke $r3.<com.android.server.ConnectivityService$NetworkRequestInfo: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r4);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void dumpNetworks(com.android.internal.util.IndentingPrintWriter)
    {
        com.android.server.ConnectivityService r0;
        com.android.internal.util.IndentingPrintWriter r1;
        com.android.server.connectivity.NetworkAgentInfo[] r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9;
        com.android.server.connectivity.NetworkAgentInfo r3;
        java.lang.String $r4, $r11, $r18;
        java.lang.Object[] $r6;
        java.lang.Integer $r7, $r8, $r9, $r10;
        android.net.NetworkRequest $r17;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.internal.util.IndentingPrintWriter;

        r2 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo[] networksSortedById()>();

        i0 = lengthof r2;

        i8 = 0;

     label1:
        if i8 >= i0 goto label4;

        r3 = r2[i8];

        $r4 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r4);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        $r6 = newarray (java.lang.Object)[4];

        $i1 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: int numForegroundNetworkRequests()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6[0] = $r7;

        $i2 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        $i3 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: int numRequestNetworkRequests()>();

        $i4 = $i2 - $i3;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        $r6[1] = $r8;

        $i5 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: int numBackgroundNetworkRequests()>();

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5);

        $r6[2] = $r9;

        $i6 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6);

        $r6[3] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Requests: REQUEST:%d LISTEN:%d BACKGROUND_REQUEST:%d total:%d", $r6);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r11);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        i9 = 0;

     label2:
        $i7 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        if i9 >= $i7 goto label3;

        $r17 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkRequest requestAt(int)>(i9);

        $r18 = virtualinvoke $r17.<android.net.NetworkRequest: java.lang.String toString()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>($r18);

        i9 = i9 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: void println(java.lang.String)>("Lingered:");

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter increaseIndent()>();

        virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: void dumpLingerTimers(java.io.PrintWriter)>(r1);

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        virtualinvoke r1.<com.android.internal.util.IndentingPrintWriter: com.android.internal.util.IndentingPrintWriter decreaseIndent()>();

        i8 = i8 + 1;

        goto label1;

     label4:
        return;
    }

    private static int encodeBool(boolean)
    {
        boolean z0;
        int i0;

        z0 := @parameter0: boolean;

        i0 = (int) z0;

        return i0;
    }

    private void enforceAccessPermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_NETWORK_STATE", "ConnectivityService");

        return;
    }

    private com.android.server.connectivity.Vpn enforceActiveVpnOrNetworkStackPermission()
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseArray r1;
        boolean $z0;
        java.lang.SecurityException $r2;
        java.lang.Throwable $r3;
        com.android.server.connectivity.Vpn r4;

        r0 := @this: com.android.server.ConnectivityService;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkNetworkStackPermission()>();

        if $z0 == 0 goto label01;

        return null;

     label01:
        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label02:
        r4 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Vpn getVpnIfOwner()>();

     label03:
        if r4 == null goto label06;

     label04:
        exitmonitor r1;

     label05:
        return r4;

     label06:
        exitmonitor r1;

     label07:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("App must either be an active VPN or have the NETWORK_STACK permission");

        throw $r2;

     label08:
        $r3 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r3;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void enforceAirplaneModePermission()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = newarray (java.lang.String)[5];

        $r1[0] = "android.permission.NETWORK_AIRPLANE_MODE";

        $r1[1] = "android.permission.NETWORK_SETTINGS";

        $r1[2] = "android.permission.NETWORK_SETUP_WIZARD";

        $r1[3] = "android.permission.NETWORK_STACK";

        $r1[4] = "android.permission.MAINLINE_NETWORK_STACK";

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAnyPermissionOf(java.lang.String[])>($r1);

        return;
    }

    private transient void enforceAnyPermissionOf(java.lang.String[])
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] r1;
        boolean $z0;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r9;
        java.lang.SecurityException $r8;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String[];

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkAnyPermissionOf(java.lang.String[])>(r1);

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Requires one of the following permissions: ");

        $r5 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(", ", r1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = new java.lang.SecurityException;

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.SecurityException: void <init>(java.lang.String)>($r9);

        throw $r8;
    }

    private void enforceChangePermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        staticinvoke <android.net.ConnectivityManager: void enforceChangePermission(android.content.Context)>($r1);

        return;
    }

    private void enforceConnectivityRestrictedNetworksPermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r2, $r4;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.ConnectivityService;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r2.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_USE_RESTRICTED_NETWORKS", "ConnectivityService");

     label2:
        return;

     label3:
        $r3 := @caughtexception;

        $r4 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONNECTIVITY_INTERNAL", "ConnectivityService");

        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    private void enforceControlAlwaysOnVpnPermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.CONTROL_ALWAYS_ON_VPN", "ConnectivityService");

        return;
    }

    private void enforceCrossUserPermission(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $i1 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        if i0 != $i1 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERACT_ACROSS_USERS_FULL", "ConnectivityService");

        return;
    }

    private void enforceInternetPermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.INTERNET", "ConnectivityService");

        return;
    }

    private void enforceKeepalivePermission()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.PACKET_KEEPALIVE_OFFLOAD", "ConnectivityService");

        return;
    }

    private void enforceMeteredApnPolicy(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1;
        int i0;
        boolean $z0, $z1, $z2;
        com.android.server.net.NetworkPolicyManagerInternal $r2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkCapabilities;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isSystem(int)>(i0);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(11);

        if $z1 == 0 goto label2;

        return;

     label2:
        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.net.NetworkPolicyManagerInternal mPolicyManagerInternal>;

        $z2 = virtualinvoke $r2.<com.android.server.net.NetworkPolicyManagerInternal: boolean isUidRestrictedOnMeteredNetworks(int)>(i0);

        if $z2 == 0 goto label3;

        virtualinvoke r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(11);

     label3:
        return;
    }

    private void enforceNetworkFactoryOrSettingsPermission()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "android.permission.NETWORK_SETTINGS";

        $r1[1] = "android.permission.NETWORK_FACTORY";

        $r1[2] = "android.permission.MAINLINE_NETWORK_STACK";

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAnyPermissionOf(java.lang.String[])>($r1);

        return;
    }

    private void enforceNetworkFactoryOrTestNetworksPermission()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "android.permission.MANAGE_TEST_NETWORKS";

        $r1[1] = "android.permission.NETWORK_FACTORY";

        $r1[2] = "android.permission.MAINLINE_NETWORK_STACK";

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAnyPermissionOf(java.lang.String[])>($r1);

        return;
    }

    private void enforceNetworkFactoryPermission()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "android.permission.NETWORK_FACTORY";

        $r1[1] = "android.permission.MAINLINE_NETWORK_STACK";

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAnyPermissionOf(java.lang.String[])>($r1);

        return;
    }

    private void enforceNetworkRequestPermissions(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $z0 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(13);

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityRestrictedNetworksPermission()>();

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void enforceChangePermission()>();

     label2:
        return;
    }

    private void enforceNetworkStackOrSettingsPermission()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = newarray (java.lang.String)[3];

        $r1[0] = "android.permission.NETWORK_SETTINGS";

        $r1[1] = "android.permission.NETWORK_STACK";

        $r1[2] = "android.permission.MAINLINE_NETWORK_STACK";

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAnyPermissionOf(java.lang.String[])>($r1);

        return;
    }

    private void enforceNetworkStackSettingsOrSetup()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = newarray (java.lang.String)[4];

        $r1[0] = "android.permission.NETWORK_SETTINGS";

        $r1[1] = "android.permission.NETWORK_SETUP_WIZARD";

        $r1[2] = "android.permission.NETWORK_STACK";

        $r1[3] = "android.permission.MAINLINE_NETWORK_STACK";

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAnyPermissionOf(java.lang.String[])>($r1);

        return;
    }

    private void enforceSettingsPermission()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String[] $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "android.permission.NETWORK_SETTINGS";

        $r1[1] = "android.permission.MAINLINE_NETWORK_STACK";

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAnyPermissionOf(java.lang.String[])>($r1);

        return;
    }

    private void ensureNetworkRequestHasType(android.net.NetworkRequest)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest r1;
        android.net.NetworkRequest$Type $r2, $r3;
        java.lang.IllegalArgumentException $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkRequest;

        $r3 = r1.<android.net.NetworkRequest: android.net.NetworkRequest$Type type>;

        $r2 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type NONE>;

        if $r3 == $r2 goto label1;

        return;

     label1:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("All NetworkRequests in ConnectivityService must have a type");

        throw $r4;
    }

    private void ensureNetworkTransitionWakelock(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.util.LocalLog r1;
        android.os.PowerManager$WakeLock $r3, $r4;
        boolean $z0;
        long $l0, $l4;
        int $i1, $i2, $i3;
        java.lang.StringBuilder $r5;
        java.lang.String $r8, r12;
        com.android.server.ConnectivityService$InternalHandler $r9, $r10;
        java.lang.Throwable $r11;
        android.os.Message r13;

        r0 := @this: com.android.server.ConnectivityService;

        r12 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        $z0 = virtualinvoke $r3.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 == 0 goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r4 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void acquire()>();

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.ConnectivityService: long mLastWakeLockAcquireTimestamp> = $l0;

        $i1 = r0.<com.android.server.ConnectivityService: int mTotalWakelockAcquisitions>;

        $i2 = $i1 + 1;

        r0.<com.android.server.ConnectivityService: int mTotalWakelockAcquisitions> = $i2;

        exitmonitor r0;

     label4:
        r1 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mWakelockLogs>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ACQUIRE for ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.util.LocalLog: void log(java.lang.String)>($r8);

        $r9 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        r13 = virtualinvoke $r9.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int)>(24);

        $r10 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i3 = r0.<com.android.server.ConnectivityService: int mNetTransitionWakeLockTimeout>;

        $l4 = (long) $i3;

        virtualinvoke $r10.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>(r13, $l4);

        return;

     label5:
        $r11 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r11;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void ensureRequestableCapabilities(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        java.lang.StringBuilder $r2;
        java.lang.IllegalArgumentException $r5;
        java.lang.String $r6, r8;
        android.net.NetworkCapabilities r7;

        r0 := @this: com.android.server.ConnectivityService;

        r7 := @parameter0: android.net.NetworkCapabilities;

        r8 = virtualinvoke r7.<android.net.NetworkCapabilities: java.lang.String describeFirstNonRequestableCapability()>();

        if r8 != null goto label1;

        return;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot request network with ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r5 = new java.lang.IllegalArgumentException;

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r5;
    }

    private void ensureRunningOnConnectivityServiceThread()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$InternalHandler $r2;
        android.os.Looper $r3;
        java.lang.Thread $r4, $r5, $r8;
        java.lang.StringBuilder $r6;
        java.lang.String $r9, $r12;
        java.lang.IllegalStateException $r11;

        r0 := @this: com.android.server.ConnectivityService;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = virtualinvoke $r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Looper getLooper()>();

        $r4 = virtualinvoke $r3.<android.os.Looper: java.lang.Thread getThread()>();

        $r5 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        if $r4 != $r5 goto label1;

        return;

     label1:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not running on ConnectivityService thread: ");

        $r8 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $r9 = virtualinvoke $r8.<java.lang.Thread: java.lang.String getName()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = new java.lang.IllegalStateException;

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r12);

        throw $r11;
    }

    private void ensureSufficientPermissionsForRequest(android.net.NetworkCapabilities, int, int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1;
        int i0, i1;
        java.lang.String r2, $r3;
        boolean $z0, $z1, $z2;
        android.app.AppOpsManager $r4;
        java.lang.SecurityException $r5, $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        $r3 = virtualinvoke r1.<android.net.NetworkCapabilities: java.lang.String getSsid()>();

        if $r3 == null goto label2;

        $z2 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkSettingsPermission(int,int)>(i0, i1);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Insufficient permissions to request a specific SSID");

        throw $r6;

     label2:
        $z0 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasSignalStrength()>();

        if $z0 == 0 goto label4;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkNetworkSignalStrengthWakeupPermission(int,int)>(i0, i1);

        if $z1 == 0 goto label3;

        goto label4;

     label3:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Insufficient permissions to request a specific signal strength");

        throw $r5;

     label4:
        $r4 = r0.<com.android.server.ConnectivityService: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r4.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i1, r2);

        return;
    }

    private void ensureValid(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1;
        boolean $z0;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkCapabilities;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureValidNetworkSpecifier(android.net.NetworkCapabilities)>(r1);

        $z0 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean isPrivateDnsBroken()>();

        if $z0 != 0 goto label1;

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Can\'t request broken private DNS");

        throw $r2;
    }

    private void ensureValidNetworkSpecifier(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1;
        android.net.NetworkSpecifier r2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkCapabilities;

        if r1 != null goto label1;

        return;

     label1:
        r2 = virtualinvoke r1.<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()>();

        if r2 != null goto label2;

        return;

     label2:
        staticinvoke <android.net.MatchAllNetworkSpecifier: void checkNotMatchAllNetworkSpecifier(android.net.NetworkSpecifier)>(r2);

        return;
    }

    private static java.lang.String eventName(int)
    {
        int i0;
        android.util.SparseArray $r0;
        java.lang.String $r1, $r3;
        java.lang.Object $r2;

        i0 := @parameter0: int;

        $r0 = <com.android.server.ConnectivityService: android.util.SparseArray sMagicDecoderRing>;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        $r2 = virtualinvoke $r0.<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>(i0, $r1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    private void filterNetworkStateForUid(android.net.NetworkState, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0, $z1;
        android.util.SparseArray r1;
        android.net.NetworkInfo $r2, $r6, $r9;
        android.net.LinkProperties $r3, $r4;
        com.android.server.net.LockdownVpnTracker $r5, $r7;
        android.net.NetworkInfo$DetailedState $r8;
        java.lang.Throwable $r10;
        android.net.NetworkState r11;

        r0 := @this: com.android.server.ConnectivityService;

        r11 := @parameter0: android.net.NetworkState;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if r11 == null goto label9;

        $r2 = r11.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        if $r2 == null goto label9;

        $r3 = r11.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        if $r3 != null goto label1;

        goto label9;

     label1:
        $r4 = r11.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isNetworkWithLinkPropertiesBlocked(android.net.LinkProperties,int,boolean)>($r4, i0, z0);

        if $z1 == 0 goto label2;

        $r9 = r11.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $r8 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState BLOCKED>;

        virtualinvoke $r9.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r8, null, null);

     label2:
        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label3:
        $r5 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        if $r5 == null goto label4;

        $r7 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        $r6 = r11.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        virtualinvoke $r7.<com.android.server.net.LockdownVpnTracker: void augmentNetworkInfo(android.net.NetworkInfo)>($r6);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r10 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r10;

     label9:
        return;

        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private com.android.server.ConnectivityService$NetworkRequestInfo findExistingNetworkRequestInfo(android.app.PendingIntent)
    {
        com.android.server.ConnectivityService r0;
        java.util.Iterator r1;
        java.util.Map$Entry r2;
        android.app.PendingIntent r3, r12;
        java.util.HashMap $r4;
        java.util.Set $r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r7, $r10;
        com.android.server.ConnectivityService$NetworkRequestInfo $r8, $r11;
        android.content.Intent $r9, r13;

        r0 := @this: com.android.server.ConnectivityService;

        r12 := @parameter0: android.app.PendingIntent;

        r13 = virtualinvoke r12.<android.app.PendingIntent: android.content.Intent getIntent()>();

        $r4 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.util.Set entrySet()>();

        r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (java.util.Map$Entry) $r6;

        $r7 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r8 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r7;

        r3 = $r8.<com.android.server.ConnectivityService$NetworkRequestInfo: android.app.PendingIntent mPendingIntent>;

        if r3 == null goto label2;

        $r9 = virtualinvoke r3.<android.app.PendingIntent: android.content.Intent getIntent()>();

        $z1 = virtualinvoke $r9.<android.content.Intent: boolean filterEquals(android.content.Intent)>(r13);

        if $z1 == 0 goto label2;

        $r10 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r10;

        return $r11;

     label2:
        goto label1;

     label3:
        return null;
    }

    private android.net.Network getActiveNetworkForUidInternal(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0, i2, i3;
        boolean z0, $z1, $z2, $z3;
        android.util.SparseArray $r1, r8;
        java.lang.Object $r2;
        android.net.LinkProperties $r3;
        android.net.NetworkCapabilities $r4, $r5;
        android.net.Network $r6, r13;
        java.lang.Throwable $r7;
        com.android.server.connectivity.Vpn r9;
        com.android.server.connectivity.NetworkAgentInfo r10, r11, r12;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        r8 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r8;

     label01:
        $r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r9 = (com.android.server.connectivity.Vpn) $r2;

     label02:
        i3 = 0;

        if r9 == null goto label04;

        i3 = 0;

     label03:
        $z3 = virtualinvoke r9.<com.android.server.connectivity.Vpn: boolean appliesToUid(int)>(i0);

        if $z3 == 0 goto label04;

        i3 = virtualinvoke r9.<com.android.server.connectivity.Vpn: int getNetId()>();

     label04:
        exitmonitor r8;

     label05:
        if i3 == 0 goto label06;

        r10 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetId(int)>(i3);

        if r10 == null goto label06;

        $r4 = staticinvoke <com.android.server.ConnectivityService: android.net.NetworkCapabilities createDefaultNetworkCapabilitiesForUid(int)>(i0);

        $r5 = r10.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z2 = virtualinvoke $r4.<android.net.NetworkCapabilities: boolean satisfiedByNetworkCapabilities(android.net.NetworkCapabilities)>($r5);

        if $z2 == 0 goto label06;

        $r6 = r10.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        return $r6;

     label06:
        r11 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        r12 = r11;

        if r11 == null goto label07;

        r12 = r11;

        $r3 = r11.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isNetworkWithLinkPropertiesBlocked(android.net.LinkProperties,int,boolean)>($r3, i0, z0);

        if $z1 == 0 goto label07;

        r12 = null;

     label07:
        if r12 == null goto label08;

        r13 = r12.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        goto label09;

     label08:
        r13 = null;

     label09:
        return r13;

     label10:
        $r7 := @caughtexception;

     label11:
        exitmonitor r8;

     label12:
        throw $r7;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private com.android.internal.net.VpnInfo[] getAllVpnInfo()
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseArray r1, $r3, $r6;
        com.android.internal.net.VpnInfo r2;
        boolean $z0;
        int $i0, $i1, i2;
        com.android.internal.net.VpnInfo[] $r4, $r9, r12;
        java.lang.Object[] $r5;
        java.lang.Object $r7;
        com.android.server.connectivity.Vpn $r8;
        java.lang.Throwable $r10;
        java.util.ArrayList r11;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label01:
        $z0 = r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z0 == 0 goto label02;

        exitmonitor r1;

        $r9 = newarray (com.android.internal.net.VpnInfo)[0];

        return $r9;

     label02:
        r11 = new java.util.ArrayList;

        specialinvoke r11.<java.util.ArrayList: void <init>()>();

     label03:
        i2 = 0;

     label04:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i2 >= $i0 goto label08;

        $r6 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r8 = (com.android.server.connectivity.Vpn) $r7;

        r2 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.internal.net.VpnInfo createVpnInfo(com.android.server.connectivity.Vpn)>($r8);

     label05:
        if r2 == null goto label07;

     label06:
        interfaceinvoke r11.<java.util.List: boolean add(java.lang.Object)>(r2);

     label07:
        i2 = i2 + 1;

        goto label04;

     label08:
        $i1 = interfaceinvoke r11.<java.util.List: int size()>();

        $r4 = newarray (com.android.internal.net.VpnInfo)[$i1];

        $r5 = interfaceinvoke r11.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        r12 = (com.android.internal.net.VpnInfo[]) $r5;

        exitmonitor r1;

     label09:
        return r12;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo mDefaultNetworkNai>;

        return $r1;
    }

    private android.net.Network[] getDefaultNetworks()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r2, r4;
        java.util.Iterator r3;
        java.util.ArrayList $r5;
        java.util.HashMap $r6;
        java.util.Collection $r7;
        boolean $z0, $z1, $z3;
        android.net.Network[] $r8, $r10;
        java.lang.Object[] $r9;
        java.lang.Object $r11;
        android.net.Network $r12;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r2 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        $r6 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();

        r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.connectivity.NetworkAgentInfo) $r11;

        $z1 = r4.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        if $z1 == 0 goto label3;

        if r4 == r2 goto label2;

        $z3 = virtualinvoke r4.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z3 == 0 goto label3;

     label2:
        $r12 = r4.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        virtualinvoke $r5.<java.util.ArrayList: boolean add(java.lang.Object)>($r12);

     label3:
        goto label1;

     label4:
        $r8 = newarray (android.net.Network)[0];

        $r9 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r8);

        $r10 = (android.net.Network[]) $r9;

        return $r10;
    }

    private static android.net.IDnsResolver getDnsResolver()
    {
        android.os.IBinder $r0;
        android.net.IDnsResolver $r1;

        $r0 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("dnsresolver");

        $r1 = staticinvoke <android.net.IDnsResolver$Stub: android.net.IDnsResolver asInterface(android.os.IBinder)>($r0);

        return $r1;
    }

    private android.net.NetworkState getFilteredNetworkState(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        com.android.server.ConnectivityService$LegacyTypeTracker $r2, $r4;
        boolean $z0, $z1, $z2;
        android.net.NetworkState $r3, $r10, r14;
        android.net.NetworkInfo $r5, $r12;
        java.lang.String $r6;
        android.net.NetworkInfo$DetailedState $r7;
        android.net.NetworkCapabilities $r8;
        android.net.LinkProperties $r11;
        com.android.server.connectivity.NetworkAgentInfo r13;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $z0 = virtualinvoke $r2.<com.android.server.ConnectivityService$LegacyTypeTracker: boolean isTypeSupported(int)>(i0);

        if $z0 == 0 goto label3;

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        r13 = virtualinvoke $r4.<com.android.server.ConnectivityService$LegacyTypeTracker: com.android.server.connectivity.NetworkAgentInfo getNetworkForType(int)>(i0);

        if r13 == null goto label1;

        r14 = virtualinvoke r13.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkState getNetworkState()>();

        $r12 = r14.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        virtualinvoke $r12.<android.net.NetworkInfo: void setType(int)>(i0);

        goto label2;

     label1:
        $r5 = new android.net.NetworkInfo;

        $r6 = staticinvoke <android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)>(i0);

        specialinvoke $r5.<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>(i0, 0, $r6, "");

        $r7 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        virtualinvoke $r5.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r7, null, null);

        virtualinvoke $r5.<android.net.NetworkInfo: void setIsAvailable(boolean)>(1);

        $r8 = new android.net.NetworkCapabilities;

        specialinvoke $r8.<android.net.NetworkCapabilities: void <init>()>();

        $z1 = virtualinvoke $r5.<android.net.NetworkInfo: boolean isRoaming()>();

        $z2 = 1 ^ $z1;

        virtualinvoke $r8.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setCapability(int,boolean)>(18, $z2);

        $r10 = new android.net.NetworkState;

        $r11 = new android.net.LinkProperties;

        specialinvoke $r11.<android.net.LinkProperties: void <init>()>();

        specialinvoke $r10.<android.net.NetworkState: void <init>(android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,android.net.Network,java.lang.String,java.lang.String)>($r5, $r11, $r8, null, null, null);

        r14 = $r10;

     label2:
        specialinvoke r0.<com.android.server.ConnectivityService: void filterNetworkStateForUid(android.net.NetworkState,int,boolean)>(r14, i1, 0);

        return r14;

     label3:
        $r3 = <android.net.NetworkState: android.net.NetworkState EMPTY>;

        return $r3;
    }

    private android.net.LinkProperties getLinkProperties(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        java.lang.Throwable $r2;
        android.net.LinkProperties r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        if r1 != null goto label1;

        return null;

     label1:
        entermonitor r1;

     label2:
        r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        exitmonitor r1;

     label3:
        return r3;

     label4:
        $r2 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private android.net.ProxyInfo getLinkPropertiesProxyInfo(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.ProxyInfo r2, $r4, r7;
        android.net.LinkProperties $r3;
        java.lang.Throwable $r5;
        android.net.Network r6;

        r0 := @this: com.android.server.ConnectivityService;

        r6 := @parameter0: android.net.Network;

        r1 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r6);

        r7 = null;

        if r1 != null goto label01;

        return null;

     label01:
        entermonitor r1;

     label02:
        $r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        r2 = virtualinvoke $r3.<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>();

     label03:
        if r2 != null goto label05;

     label04:
        goto label07;

     label05:
        $r4 = new android.net.ProxyInfo;

        specialinvoke $r4.<android.net.ProxyInfo: void <init>(android.net.ProxyInfo)>(r2);

        r7 = $r4;

     label06:
        goto label04;

     label07:
        exitmonitor r1;

     label08:
        return r7;

     label09:
        $r5 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r5;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label05 to label06 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private java.util.List getMatchingPermissionedCallbacks(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        java.util.Iterator r3;
        java.util.Map$Entry r4;
        com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo r5, $r15;
        com.android.server.ConnectivityService$NetworkRequestInfo r6;
        java.util.ArrayList $r7;
        java.util.Map $r8;
        java.util.Set $r9;
        boolean $z0, $z1, $z2;
        java.lang.Object $r10, $r11, $r14;
        android.net.NetworkRequest $r12;
        int $i0, $i1;
        java.lang.String $r13;
        android.net.IConnectivityDiagnosticsCallback $r16;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>()>();

        $r8 = r0.<com.android.server.ConnectivityService: java.util.Map mConnectivityDiagnosticsCallbacks>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r10;

        $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        r5 = (com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo) $r11;

        r6 = staticinvoke <com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo: com.android.server.ConnectivityService$NetworkRequestInfo access$8300(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)>(r5);

        $r12 = r6.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z1 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfies(android.net.NetworkRequest)>($r12);

        if $z1 == 0 goto label2;

        $i0 = r6.<com.android.server.ConnectivityService$NetworkRequestInfo: int mPid>;

        $i1 = r6.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $r13 = staticinvoke <com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo: java.lang.String access$8400(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)>(r5);

        $z2 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean checkConnectivityDiagnosticsPermissions(int,int,com.android.server.connectivity.NetworkAgentInfo,java.lang.String)>($i0, $i1, r1, $r13);

        if $z2 == 0 goto label2;

        $r14 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r15 = (com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo) $r14;

        $r16 = staticinvoke <com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo: android.net.IConnectivityDiagnosticsCallback access$8200(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)>($r15);

        interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>($r16);

     label2:
        goto label1;

     label3:
        return $r7;
    }

    private android.net.Network getNetwork(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.Network r2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        if r1 == null goto label1;

        r2 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        goto label2;

     label1:
        r2 = null;

     label2:
        return r2;
    }

    private com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetId(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.connectivity.NetworkAgentInfo r5;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.connectivity.NetworkAgentInfo) $r3;

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        com.android.server.connectivity.NetworkAgentInfo $r2;
        android.net.NetworkCapabilities $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        $r2 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r1);

        $r3 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo)>($r2);

        return $r3;
    }

    private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkCapabilities $r2, $r3, r5;
        int $i0, $i1;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        if r1 != null goto label1;

        return null;

     label1:
        entermonitor r1;

     label2:
        $r2 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        if $r2 != null goto label4;

        exitmonitor r1;

     label3:
        return null;

     label4:
        $r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r5 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities networkCapabilitiesRestrictedForCallerPermissions(android.net.NetworkCapabilities,int,int)>($r3, $i0, $i1);

        exitmonitor r1;

     label5:
        return r5;

     label6:
        $r4 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r4;

        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private android.net.NetworkCapabilities getNetworkCapabilitiesWithoutUids(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities $r1, r6;
        int[] $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r6 := @parameter0: android.net.NetworkCapabilities;

        $r1 = new android.net.NetworkCapabilities;

        specialinvoke $r1.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r6);

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setUids(java.util.Set)>(null);

        $r3 = newarray (int)[0];

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setAdministratorUids(int[])>($r3);

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setOwnerUid(int)>(-1);

        return $r1;
    }

    private int getNetworkPermission(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $z0 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(13);

        if $z0 != 0 goto label1;

        return 2;

     label1:
        $z1 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(19);

        if $z1 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    private com.android.server.ConnectivityService$NetworkRequestInfo getNriForAppRequest(android.net.NetworkRequest, int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        java.lang.String r1, $r6;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.Object[] $r4;
        java.lang.Integer $r5;
        android.net.NetworkRequest r7;
        com.android.server.ConnectivityService$NetworkRequestInfo r8;

        r0 := @this: com.android.server.ConnectivityService;

        r7 := @parameter0: android.net.NetworkRequest;

        i0 := @parameter1: int;

        r1 := @parameter2: java.lang.String;

        $r2 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r3;

        if r8 == null goto label1;

        if 1000 == i0 goto label1;

        if 1073 == i0 goto label1;

        $i1 = r8.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        if $i1 == i0 goto label1;

        $r4 = newarray (java.lang.Object)[3];

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r4[0] = $r5;

        $r4[1] = r1;

        $r4[2] = r8;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("UID %d attempted to %s for unowned request %s", $r4);

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

        return null;

     label1:
        return r8;
    }

    private java.lang.String getProvisioningUrlBaseFromFile()
    {
        com.android.server.ConnectivityService r0;
        org.xmlpull.v1.XmlPullParser r1;
        android.content.Context $r3;
        android.content.res.Resources $r4;
        java.io.File $r5;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i5;
        java.lang.Throwable $r6, $r7, $r8, $r9, $r13, $r18;
        java.lang.String $r12, $r17, $r22, r25, r26, r27, r28;
        java.lang.StringBuilder $r14, $r19, r29;
        android.content.res.Configuration r23;
        java.io.FileReader r24;

        r0 := @this: com.android.server.ConnectivityService;

        $r3 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        r23 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>();

     label01:
        r24 = new java.io.FileReader;

        $r5 = r0.<com.android.server.ConnectivityService: java.io.File mProvisioningUrlFile>;

        specialinvoke r24.<java.io.FileReader: void <init>(java.io.File)>($r5);

     label02:
        r1 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r24);

        staticinvoke <com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>(r1, "provisioningUrls");

     label03:
        staticinvoke <com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>(r1);

        r25 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label04:
        if r25 != null goto label07;

     label05:
        virtualinvoke r24.<java.io.FileReader: void close()>();

     label06:
        return null;

     label07:
        $z0 = virtualinvoke r25.<java.lang.String: boolean equals(java.lang.Object)>("provisioningUrl");

        if $z0 == 0 goto label16;

        r26 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "mcc");

     label08:
        if r26 == null goto label16;

     label09:
        $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r26);

        $i1 = r23.<android.content.res.Configuration: int mcc>;

        if $i0 != $i1 goto label16;

        r27 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "mnc");

     label10:
        if r27 == null goto label16;

     label11:
        $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r27);

        $i3 = r23.<android.content.res.Configuration: int mnc>;

        if $i2 != $i3 goto label16;

        interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int next()>();

        $i5 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: int getEventType()>();

        if $i5 != 4 goto label16;

        r28 = interfaceinvoke r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>();

     label12:
        virtualinvoke r24.<java.io.FileReader: void close()>();

     label13:
        return r28;

     label14:
        $r9 := @caughtexception;

     label15:
        r29 = new java.lang.StringBuilder;

        specialinvoke r29.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NumberFormatException in getProvisioningUrlBaseFromFile: ");

        virtualinvoke r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r12 = virtualinvoke r29.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r12);

     label16:
        goto label03;

     label17:
        $r7 := @caughtexception;

     label18:
        virtualinvoke r24.<java.io.FileReader: void close()>();

     label19:
        goto label22;

     label20:
        $r6 := @caughtexception;

     label21:
        virtualinvoke $r7.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r6);

     label22:
        throw $r7;

     label23:
        $r18 := @caughtexception;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("I/O exception reading Carrier Provisioning Urls file: ");

        virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r22);

        goto label26;

     label24:
        $r13 := @caughtexception;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Xml parser exception reading Carrier Provisioning Urls file: ");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r17);

        goto label26;

     label25:
        $r8 := @caughtexception;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Carrier Provisioning Urls file not found");

     label26:
        return null;

        catch java.io.FileNotFoundException from label01 to label02 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label24;
        catch java.io.IOException from label01 to label02 with label23;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch java.io.FileNotFoundException from label05 to label06 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label24;
        catch java.io.IOException from label05 to label06 with label23;
        catch java.lang.Throwable from label07 to label08 with label17;
        catch java.lang.NumberFormatException from label09 to label10 with label14;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.NumberFormatException from label11 to label12 with label14;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.io.FileNotFoundException from label12 to label13 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label12 to label13 with label24;
        catch java.io.IOException from label12 to label13 with label23;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label20;
        catch java.io.FileNotFoundException from label21 to label22 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label24;
        catch java.io.IOException from label21 to label22 with label23;
        catch java.io.FileNotFoundException from label22 to label23 with label25;
        catch org.xmlpull.v1.XmlPullParserException from label22 to label23 with label24;
        catch java.io.IOException from label22 to label23 with label23;
    }

    private static java.lang.String getSettingsPackageName(android.content.pm.PackageManager)
    {
        android.content.Intent $r0;
        android.content.pm.PackageManager r1;
        android.content.ComponentName r2;
        java.lang.String r3;

        r1 := @parameter0: android.content.pm.PackageManager;

        $r0 = new android.content.Intent;

        specialinvoke $r0.<android.content.Intent: void <init>(java.lang.String)>("android.settings.SETTINGS");

        r2 = virtualinvoke $r0.<android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)>(r1);

        if r2 == null goto label1;

        r3 = virtualinvoke r2.<android.content.ComponentName: java.lang.String getPackageName()>();

        goto label2;

     label1:
        r3 = "com.android.settings";

     label2:
        return r3;
    }

    private java.util.ArrayList getSignalStrengthThresholds(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        java.util.Iterator r2;
        com.android.server.ConnectivityService$NetworkRequestInfo r3;
        java.util.TreeSet $r4;
        java.util.HashMap $r5;
        java.util.Collection $r6;
        boolean $z0, $z1, $z2;
        java.util.ArrayList $r7;
        java.lang.Object $r8;
        android.net.NetworkRequest $r9, $r11, $r12;
        android.net.NetworkCapabilities $r10, $r13;
        int $i0;
        java.lang.Integer $r14;
        java.lang.Throwable $r15;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r4 = new java.util.TreeSet;

        specialinvoke $r4.<java.util.TreeSet: void <init>()>();

        entermonitor r1;

     label1:
        $r5 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r8;

        $r9 = r3.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r10 = $r9.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $z1 = virtualinvoke $r10.<android.net.NetworkCapabilities: boolean hasSignalStrength()>();

        if $z1 == 0 goto label3;

        $r11 = r3.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfiesImmutableCapabilitiesOf(android.net.NetworkRequest)>($r11);

        if $z2 == 0 goto label3;

        $r12 = r3.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r13 = $r12.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $i0 = virtualinvoke $r13.<android.net.NetworkCapabilities: int getSignalStrength()>();

        $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        interfaceinvoke $r4.<java.util.SortedSet: boolean add(java.lang.Object)>($r14);

     label3:
        goto label2;

     label4:
        exitmonitor r1;

     label5:
        $r7 = new java.util.ArrayList;

        specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r4);

        return $r7;

     label6:
        $r15 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r15;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label2 to label3 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private android.net.NetworkState getUnfilteredActiveNetworkState(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.net.Network[] r1;
        android.net.NetworkState $r2, $r3;
        android.net.Network $r4;
        com.android.server.connectivity.NetworkAgentInfo r5;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r5 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.Network[] getVpnUnderlyingNetworks(int)>(i0);

        if r1 == null goto label2;

        $i1 = lengthof r1;

        if $i1 <= 0 goto label1;

        $r4 = r1[0];

        r5 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>($r4);

        goto label2;

     label1:
        r5 = null;

     label2:
        if r5 == null goto label3;

        $r3 = virtualinvoke r5.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkState getNetworkState()>();

        return $r3;

     label3:
        $r2 = <android.net.NetworkState: android.net.NetworkState EMPTY>;

        return $r2;
    }

    private com.android.server.connectivity.Vpn getVpnIfOwner()
    {
        com.android.server.ConnectivityService r0;
        int $i0;
        com.android.server.connectivity.Vpn $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Vpn getVpnIfOwner(int)>($i0);

        return $r1;
    }

    private com.android.server.connectivity.Vpn getVpnIfOwner(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2;
        com.android.server.connectivity.Vpn r1, r5;
        com.android.internal.net.VpnInfo r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r1 = (com.android.server.connectivity.Vpn) $r4;

        if r1 != null goto label1;

        return null;

     label1:
        r2 = virtualinvoke r1.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnInfo getVpnInfo()>();

        r5 = null;

        if r2 == null goto label3;

        $i2 = r2.<com.android.internal.net.VpnInfo: int ownerUid>;

        if $i2 == i0 goto label2;

        r5 = null;

        goto label3;

     label2:
        r5 = r1;

     label3:
        return r5;
    }

    private android.net.Network[] getVpnUnderlyingNetworks(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        android.util.SparseArray r1, $r2;
        boolean $z0, $z1;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.connectivity.Vpn r5;
        android.net.Network[] r6;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $z0 = r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z0 != 0 goto label5;

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        r5 = (com.android.server.connectivity.Vpn) $r3;

     label2:
        if r5 == null goto label5;

     label3:
        $z1 = virtualinvoke r5.<com.android.server.connectivity.Vpn: boolean appliesToUid(int)>(i0);

        if $z1 == 0 goto label5;

        r6 = virtualinvoke r5.<com.android.server.connectivity.Vpn: android.net.Network[] getUnderlyingNetworks()>();

        exitmonitor r1;

     label4:
        return r6;

     label5:
        exitmonitor r1;

     label6:
        return null;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void handleAlwaysOnNetworkRequest(android.net.NetworkRequest, java.lang.String, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest r1;
        java.lang.String r2;
        boolean z0, z1, z2;
        android.content.Context $r3;
        android.content.ContentResolver $r4;
        int $i0, $i1;
        java.util.HashMap $r5;
        java.lang.Object $r6;
        com.android.server.ConnectivityService$NetworkRequestInfo $r7;
        android.os.Binder $r8;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkRequest;

        r2 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        $r3 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i0 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z1);

        $i1 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r4, r2, $i0);

        z0 = staticinvoke <com.android.server.ConnectivityService: boolean toBool(int)>($i1);

        $r5 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        if $r6 == null goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z0 != z2 goto label3;

        return;

     label3:
        if z0 == 0 goto label4;

        $r7 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        $r8 = new android.os.Binder;

        specialinvoke $r8.<android.os.Binder: void <init>()>();

        specialinvoke $r7.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder)>(r0, null, r1, $r8);

        specialinvoke r0.<com.android.server.ConnectivityService: void handleRegisterNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo)>($r7);

        goto label5;

     label4:
        specialinvoke r0.<com.android.server.ConnectivityService: void handleReleaseNetworkRequest(android.net.NetworkRequest,int,boolean)>(r1, 1000, 0);

     label5:
        return;
    }

    private void handleApplyDefaultProxy(android.net.ProxyInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyInfo r1, r5;
        java.lang.String $r2;
        boolean $z0, $z1;
        android.net.Uri $r3, $r4;
        com.android.server.connectivity.ProxyTracker $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.ProxyInfo;

        r5 = r1;

        if r1 == null goto label1;

        r5 = r1;

        $r2 = virtualinvoke r1.<android.net.ProxyInfo: java.lang.String getHost()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r2);

        if $z0 == 0 goto label1;

        r5 = r1;

        $r3 = <android.net.Uri: android.net.Uri EMPTY>;

        $r4 = virtualinvoke r1.<android.net.ProxyInfo: android.net.Uri getPacFileUrl()>();

        $z1 = virtualinvoke $r3.<android.net.Uri: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label1;

        r5 = null;

     label1:
        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.ProxyTracker mProxyTracker>;

        virtualinvoke $r6.<com.android.server.connectivity.ProxyTracker: void setDefaultProxy(android.net.ProxyInfo)>(r5);

        return;
    }

    private void handleAsyncChannelDisconnected(android.os.Message)
    {
        com.android.server.ConnectivityService r0;
        android.os.Messenger $r1, $r4;
        java.util.HashMap $r2, $r5;
        java.lang.Object $r3, $r6;
        java.lang.StringBuilder $r7;
        java.lang.String $r9, $r11;
        android.os.Message r12;
        com.android.server.connectivity.NetworkAgentInfo r13;
        com.android.server.ConnectivityService$NetworkProviderInfo r14;

        r0 := @this: com.android.server.ConnectivityService;

        r12 := @parameter0: android.os.Message;

        $r2 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r1 = r12.<android.os.Message: android.os.Messenger replyTo>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r1);

        r13 = (com.android.server.connectivity.NetworkAgentInfo) $r3;

        if r13 == null goto label1;

        specialinvoke r0.<com.android.server.ConnectivityService: void disconnectAndDestroyNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r13);

        goto label2;

     label1:
        $r5 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r4 = r12.<android.os.Message: android.os.Messenger replyTo>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r4);

        r14 = (com.android.server.ConnectivityService$NetworkProviderInfo) $r6;

        if r14 == null goto label2;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unregisterNetworkFactory for ");

        $r9 = r14.<com.android.server.ConnectivityService$NetworkProviderInfo: java.lang.String name>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r11);

     label2:
        return;
    }

    private void handleAsyncChannelHalfConnect(android.os.Message)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r1, $r8, $r16, $r19, $r24;
        android.os.Messenger $r2, $r4, $r6, $r14, $r22;
        java.util.HashMap $r3, $r5, $r7, $r15, $r20, $r23;
        int $i0, $i1, $i2, $i3;
        android.net.Network $r9, $r11;
        android.util.SparseArray $r10, r30;
        com.android.server.NetIdManager $r12;
        com.android.server.ConnectivityService$LegacyTypeTracker $r13;
        com.android.server.connectivity.NetworkAgentInfo $r17, r29;
        com.android.internal.util.AsyncChannel $r18, r27;
        java.lang.Throwable $r25;
        android.os.Message r26;
        com.android.server.ConnectivityService$NetworkProviderInfo r28;

        r0 := @this: com.android.server.ConnectivityService;

        r26 := @parameter0: android.os.Message;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        $r1 = r26.<android.os.Message: java.lang.Object obj>;

        r27 = (com.android.internal.util.AsyncChannel) $r1;

        $r3 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r2 = r26.<android.os.Message: android.os.Messenger replyTo>;

        $z1 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r2);

        if $z1 == 0 goto label03;

        $i3 = r26.<android.os.Message: int arg1>;

        if $i3 != 0 goto label02;

        $z4 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z4 == 0 goto label01;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("NetworkFactory connected");

     label01:
        $r23 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r22 = r26.<android.os.Message: android.os.Messenger replyTo>;

        $r24 = virtualinvoke $r23.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r22);

        r28 = (com.android.server.ConnectivityService$NetworkProviderInfo) $r24;

        virtualinvoke r28.<com.android.server.ConnectivityService$NetworkProviderInfo: void completeConnection()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void sendAllRequestsToProvider(com.android.server.ConnectivityService$NetworkProviderInfo)>(r28);

        goto label11;

     label02:
        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Error connecting NetworkFactory");

        $r20 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r19 = r26.<android.os.Message: java.lang.Object obj>;

        virtualinvoke $r20.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r19);

        goto label11;

     label03:
        $r5 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r4 = r26.<android.os.Message: android.os.Messenger replyTo>;

        $z2 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r4);

        if $z2 == 0 goto label11;

        $i0 = r26.<android.os.Message: int arg1>;

        if $i0 != 0 goto label05;

        $z3 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z3 == 0 goto label04;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("NetworkAgent connected");

     label04:
        $r15 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r14 = r26.<android.os.Message: android.os.Messenger replyTo>;

        $r16 = virtualinvoke $r15.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14);

        $r17 = (com.android.server.connectivity.NetworkAgentInfo) $r16;

        $r18 = $r17.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r18.<com.android.internal.util.AsyncChannel: void sendMessage(int)>(69633);

        goto label11;

     label05:
        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Error connecting NetworkAgent");

        $r7 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r6 = r26.<android.os.Message: android.os.Messenger replyTo>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r6);

        r29 = (com.android.server.connectivity.NetworkAgentInfo) $r8;

        if r29 == null goto label11;

        z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r29);

        r30 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        entermonitor r30;

     label06:
        $r10 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r9 = r29.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i1 = $r9.<android.net.Network: int netId>;

        virtualinvoke $r10.<android.util.SparseArray: void remove(int)>($i1);

        exitmonitor r30;

     label07:
        $r12 = r0.<com.android.server.ConnectivityService: com.android.server.NetIdManager mNetIdManager>;

        $r11 = r29.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i2 = $r11.<android.net.Network: int netId>;

        virtualinvoke $r12.<com.android.server.NetIdManager: void releaseNetId(int)>($i2);

        $r13 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r13.<com.android.server.ConnectivityService$LegacyTypeTracker: void remove(com.android.server.connectivity.NetworkAgentInfo,boolean)>(r29, z0);

        goto label11;

     label08:
        $r25 := @caughtexception;

     label09:
        exitmonitor r30;

     label10:
        throw $r25;

     label11:
        return;

        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void handleCaptivePortalDataUpdate(com.android.server.connectivity.NetworkAgentInfo, android.net.CaptivePortalData)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.CaptivePortalData r2;
        android.net.LinkProperties $r3, $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter1: android.net.CaptivePortalData;

        r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.CaptivePortalData captivePortalData> = r2;

        $r3 = new android.net.LinkProperties;

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r3.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r4);

        virtualinvoke r0.<com.android.server.ConnectivityService: void handleUpdateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)>(r1, $r3);

        return;
    }

    private void handleConfigureAlwaysOnNetworks()
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest $r1, $r2;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultMobileDataRequest>;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleAlwaysOnNetworkRequest(android.net.NetworkRequest,java.lang.String,boolean)>($r1, "mobile_data_always_on", 1);

        $r2 = r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultWifiRequest>;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleAlwaysOnNetworkRequest(android.net.NetworkRequest,java.lang.String,boolean)>($r2, "wifi_always_requested", 0);

        return;
    }

    private void handleDataStallSuspected(com.android.server.connectivity.NetworkAgentInfo, long, int, android.os.PersistableBundle)
    {
        com.android.server.ConnectivityService r0;
        long l0;
        int i1;
        android.net.NetworkCapabilities $r1, r10;
        android.net.ConnectivityDiagnosticsManager$DataStallReport $r2;
        android.net.LinkProperties $r3;
        android.net.Network $r4;
        java.util.List $r5;
        boolean $z0;
        java.lang.Object $r6;
        android.os.RemoteException $r7;
        com.android.server.connectivity.NetworkAgentInfo r8;
        android.os.PersistableBundle r9;
        java.util.Iterator r12;
        android.net.IConnectivityDiagnosticsCallback r13;

        r0 := @this: com.android.server.ConnectivityService;

        r8 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        r9 := @parameter3: android.os.PersistableBundle;

        $r1 = r8.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        r10 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilitiesWithoutUids(android.net.NetworkCapabilities)>($r1);

        $r2 = new android.net.ConnectivityDiagnosticsManager$DataStallReport;

        $r4 = r8.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $r3 = r8.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r2.<android.net.ConnectivityDiagnosticsManager$DataStallReport: void <init>(android.net.Network,long,int,android.net.LinkProperties,android.net.NetworkCapabilities,android.os.PersistableBundle)>($r4, l0, i1, $r3, r10, r9);

        $r5 = specialinvoke r0.<com.android.server.ConnectivityService: java.util.List getMatchingPermissionedCallbacks(com.android.server.connectivity.NetworkAgentInfo)>(r8);

        r12 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r6 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r13 = (android.net.IConnectivityDiagnosticsCallback) $r6;

     label2:
        interfaceinvoke r13.<android.net.IConnectivityDiagnosticsCallback: void onDataStallSuspected(android.net.ConnectivityDiagnosticsManager$DataStallReport)>($r2);

     label3:
        goto label5;

     label4:
        $r7 := @caughtexception;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String,java.lang.Throwable)>("Error invoking onDataStallSuspected", $r7);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void handleFreshlyValidatedNetwork(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.shared.PrivateDnsConfig r2;
        com.android.server.connectivity.DnsManager $r3;
        boolean $z0, $z1;
        java.lang.String $r4;
        android.net.Network $r5;
        int $i0;
        android.net.LinkProperties $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        if r1 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        r2 = virtualinvoke $r3.<com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig getPrivateDnsConfig()>();

        $z0 = r2.<android.net.shared.PrivateDnsConfig: boolean useTls>;

        if $z0 == 0 goto label2;

        $r4 = r2.<android.net.shared.PrivateDnsConfig: java.lang.String hostname>;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r4);

        if $z1 == 0 goto label2;

        $r6 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r5 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i0 = $r5.<android.net.Network: int netId>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateDnses(android.net.LinkProperties,android.net.LinkProperties,int)>($r6, null, $i0);

     label2:
        return;
    }

    private void handleLingerComplete(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r7;
        com.android.server.ConnectivityService$UnneededFor $r8;
        boolean $z0;
        int $i0;
        android.net.NetworkCapabilities $r9;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        if r1 != null goto label1;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Unknown NetworkAgentInfo in handleLingerComplete");

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleLingerComplete for ");

        $r5 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r7);

        virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: void clearLingerState()>();

        $r8 = <com.android.server.ConnectivityService$UnneededFor: com.android.server.ConnectivityService$UnneededFor TEARDOWN>;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean unneeded(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$UnneededFor)>(r1, $r8);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.ConnectivityService: void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        goto label3;

     label2:
        $i0 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        $r9 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateCapabilities(int,com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities)>($i0, r1, $r9);

     label3:
        return;
    }

    private void handleNat64PrefixEvent(int, boolean, java.lang.String, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        boolean z0;
        java.lang.String r1, $r8, $r20, r21;
        com.android.server.connectivity.NetworkAgentInfo r2;
        android.util.SparseArray $r3;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        java.lang.Integer $r6, $r7;
        com.android.server.connectivity.Nat464Xlat $r9;
        android.net.LinkProperties $r10, $r11;
        android.net.IpPrefix $r12, r22;
        java.net.InetAddress $r13;
        java.lang.Throwable $r14;
        java.lang.StringBuilder $r15;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        r1 := @parameter2: java.lang.String;

        i1 := @parameter3: int;

        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.connectivity.NetworkAgentInfo) $r4;

        if r2 != null goto label1;

        return;

     label1:
        if z0 == 0 goto label2;

        r21 = "added";

        goto label3;

     label2:
        r21 = "removed";

     label3:
        $r5 = newarray (java.lang.Object)[4];

        $r5[0] = r21;

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r5[1] = $r6;

        $r5[2] = r1;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r5[3] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("NAT64 prefix %s on netId %d: %s/%d", $r5);

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r8);

        r22 = null;

        if z0 == 0 goto label7;

     label4:
        $r12 = new android.net.IpPrefix;

        $r13 = staticinvoke <android.net.InetAddresses: java.net.InetAddress parseNumericAddress(java.lang.String)>(r1);

        specialinvoke $r12.<android.net.IpPrefix: void <init>(java.net.InetAddress,int)>($r13, i1);

        r22 = $r12;

     label5:
        goto label7;

     label6:
        $r14 := @caughtexception;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid NAT64 prefix ");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r20);

        return;

     label7:
        $r9 = r2.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        virtualinvoke $r9.<com.android.server.connectivity.Nat464Xlat: void setNat64PrefixFromDns(android.net.IpPrefix)>(r22);

        $r10 = new android.net.LinkProperties;

        $r11 = r2.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r10.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r11);

        virtualinvoke r0.<com.android.server.ConnectivityService: void handleUpdateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)>(r2, $r10);

        return;

        catch java.lang.IllegalArgumentException from label4 to label5 with label6;
    }

    private void handleNetworkConnectivityReported(com.android.server.connectivity.NetworkAgentInfo, boolean)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        boolean z0, $z1;
        java.util.Iterator r2;
        java.util.List $r3;
        java.lang.Object $r4;
        android.net.Network $r5;
        android.os.RemoteException $r6;
        android.net.IConnectivityDiagnosticsCallback r7;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        z0 := @parameter1: boolean;

        $r3 = specialinvoke r0.<com.android.server.ConnectivityService: java.util.List getMatchingPermissionedCallbacks(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        r2 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label6;

        $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r7 = (android.net.IConnectivityDiagnosticsCallback) $r4;

     label2:
        $r5 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        interfaceinvoke r7.<android.net.IConnectivityDiagnosticsCallback: void onNetworkConnectivityReported(android.net.Network,boolean)>($r5, z0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String,java.lang.Throwable)>("Error invoking onNetworkConnectivityReported", $r6);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void handleNetworkTestedWithExtras(com.android.server.ConnectivityService$ConnectivityReportEvent, android.os.PersistableBundle)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1, $r2;
        android.net.ConnectivityDiagnosticsManager$ConnectivityReport $r3;
        com.android.server.connectivity.NetworkAgentInfo $r4, r12;
        android.net.Network $r5;
        long $l0;
        android.net.LinkProperties $r6;
        java.util.List $r7;
        boolean $z0;
        java.lang.Object $r8;
        android.os.RemoteException $r9;
        com.android.server.ConnectivityService$ConnectivityReportEvent r10;
        android.os.PersistableBundle r11;
        java.util.Iterator r14;
        android.net.IConnectivityDiagnosticsCallback r15;

        r0 := @this: com.android.server.ConnectivityService;

        r10 := @parameter0: com.android.server.ConnectivityService$ConnectivityReportEvent;

        r11 := @parameter1: android.os.PersistableBundle;

        r12 = staticinvoke <com.android.server.ConnectivityService$ConnectivityReportEvent: com.android.server.connectivity.NetworkAgentInfo access$8500(com.android.server.ConnectivityService$ConnectivityReportEvent)>(r10);

        $r2 = r12.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilitiesWithoutUids(android.net.NetworkCapabilities)>($r2);

        $r3 = new android.net.ConnectivityDiagnosticsManager$ConnectivityReport;

        $r4 = staticinvoke <com.android.server.ConnectivityService$ConnectivityReportEvent: com.android.server.connectivity.NetworkAgentInfo access$8500(com.android.server.ConnectivityService$ConnectivityReportEvent)>(r10);

        $r5 = $r4.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $l0 = staticinvoke <com.android.server.ConnectivityService$ConnectivityReportEvent: long access$8600(com.android.server.ConnectivityService$ConnectivityReportEvent)>(r10);

        $r6 = r12.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r3.<android.net.ConnectivityDiagnosticsManager$ConnectivityReport: void <init>(android.net.Network,long,android.net.LinkProperties,android.net.NetworkCapabilities,android.os.PersistableBundle)>($r5, $l0, $r6, r1, r11);

        virtualinvoke r12.<com.android.server.connectivity.NetworkAgentInfo: void setConnectivityReport(android.net.ConnectivityDiagnosticsManager$ConnectivityReport)>($r3);

        $r7 = specialinvoke r0.<com.android.server.ConnectivityService: java.util.List getMatchingPermissionedCallbacks(com.android.server.connectivity.NetworkAgentInfo)>(r12);

        r14 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r8 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r15 = (android.net.IConnectivityDiagnosticsCallback) $r8;

     label2:
        interfaceinvoke r15.<android.net.IConnectivityDiagnosticsCallback: void onConnectivityReportAvailable(android.net.ConnectivityDiagnosticsManager$ConnectivityReport)>($r3);

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String,java.lang.Throwable)>("Error invoking onConnectivityReport", $r9);

     label5:
        goto label1;

     label6:
        return;

        catch android.os.RemoteException from label2 to label3 with label4;
    }

    private void handleNetworkUnvalidated(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkCapabilities r2;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r10;
        boolean $z0, $z1;
        android.net.util.MultinetworkPolicyTracker $r11;
        com.android.server.connectivity.NetworkNotificationManager$NotificationType $r12;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleNetworkUnvalidated ");

        $r6 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cap=");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r10);

        $z0 = virtualinvoke r2.<android.net.NetworkCapabilities: boolean hasTransport(int)>(1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r11 = r0.<com.android.server.ConnectivityService: android.net.util.MultinetworkPolicyTracker mMultinetworkPolicyTracker>;

        $z1 = virtualinvoke $r11.<android.net.util.MultinetworkPolicyTracker: boolean shouldNotifyWifiUnvalidated()>();

        if $z1 == 0 goto label2;

        $r12 = <com.android.server.connectivity.NetworkNotificationManager$NotificationType: com.android.server.connectivity.NetworkNotificationManager$NotificationType LOST_INTERNET>;

        specialinvoke r0.<com.android.server.ConnectivityService: void showNetworkNotification(com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkNotificationManager$NotificationType)>(r1, $r12);

     label2:
        return;
    }

    private void handlePerNetworkPrivateDnsConfig(com.android.server.connectivity.NetworkAgentInfo, android.net.shared.PrivateDnsConfig)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.shared.PrivateDnsConfig r2;
        boolean $z0;
        android.net.NetworkMonitorManager $r3;
        android.net.PrivateDnsConfigParcel $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter1: android.net.shared.PrivateDnsConfig;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean networkRequiresPrivateDnsValidation(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r3 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMonitorManager networkMonitor()>();

        $r4 = virtualinvoke r2.<android.net.shared.PrivateDnsConfig: android.net.PrivateDnsConfigParcel toParcel()>();

        virtualinvoke $r3.<android.net.NetworkMonitorManager: boolean notifyPrivateDnsChanged(android.net.PrivateDnsConfigParcel)>($r4);

        specialinvoke r0.<com.android.server.ConnectivityService: void updatePrivateDns(com.android.server.connectivity.NetworkAgentInfo,android.net.shared.PrivateDnsConfig)>(r1, r2);

        return;
    }

    private void handlePrivateDnsSettingsChanged()
    {
        com.android.server.ConnectivityService r0;
        android.net.shared.PrivateDnsConfig r1;
        java.util.Iterator r2;
        com.android.server.connectivity.NetworkAgentInfo r3;
        com.android.server.connectivity.DnsManager $r4;
        java.util.HashMap $r5;
        java.util.Collection $r6;
        boolean $z0, $z1;
        java.lang.Object $r7;
        android.net.LinkProperties $r8, $r9;

        r0 := @this: com.android.server.ConnectivityService;

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        r1 = virtualinvoke $r4.<com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig getPrivateDnsConfig()>();

        $r5 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.connectivity.NetworkAgentInfo) $r7;

        specialinvoke r0.<com.android.server.ConnectivityService: void handlePerNetworkPrivateDnsConfig(com.android.server.connectivity.NetworkAgentInfo,android.net.shared.PrivateDnsConfig)>(r3, r1);

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean networkRequiresPrivateDnsValidation(com.android.server.connectivity.NetworkAgentInfo)>(r3);

        if $z1 == 0 goto label2;

        $r8 = new android.net.LinkProperties;

        $r9 = r3.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r8.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r9);

        virtualinvoke r0.<com.android.server.ConnectivityService: void handleUpdateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)>(r3, $r8);

     label2:
        goto label1;

     label3:
        return;
    }

    private void handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate r1;
        com.android.server.connectivity.NetworkAgentInfo r2;
        int $i0;
        com.android.server.connectivity.DnsManager $r3;
        android.net.LinkProperties $r4, $r5;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate;

        $i0 = r1.<com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate: int netId>;

        r2 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetId(int)>($i0);

        if r2 != null goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        virtualinvoke $r3.<com.android.server.connectivity.DnsManager: void updatePrivateDnsValidation(com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate)>(r1);

        $r4 = new android.net.LinkProperties;

        $r5 = r2.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r4.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r5);

        virtualinvoke r0.<com.android.server.ConnectivityService: void handleUpdateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)>(r2, $r4);

        return;
    }

    private void handlePromptUnvalidated(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2;
        java.lang.String $r5;
        com.android.internal.util.AsyncChannel $r6;
        com.android.server.connectivity.NetworkNotificationManager$NotificationType $r7, $r8;
        android.net.Network r9;
        com.android.server.connectivity.NetworkAgentInfo r10;

        r0 := @this: com.android.server.ConnectivityService;

        r9 := @parameter0: android.net.Network;

        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 != 0 goto label1;

        $z3 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z3 == 0 goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handlePromptUnvalidated ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

     label2:
        r10 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r9);

        if r10 == null goto label6;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean shouldPromptUnvalidated(com.android.server.connectivity.NetworkAgentInfo)>(r10);

        if $z1 != 0 goto label3;

        goto label6;

     label3:
        $r6 = r10.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r6.<com.android.internal.util.AsyncChannel: void sendMessage(int)>(528399);

        $z2 = r10.<com.android.server.connectivity.NetworkAgentInfo: boolean partialConnectivity>;

        if $z2 == 0 goto label4;

        $r8 = <com.android.server.connectivity.NetworkNotificationManager$NotificationType: com.android.server.connectivity.NetworkNotificationManager$NotificationType PARTIAL_CONNECTIVITY>;

        specialinvoke r0.<com.android.server.ConnectivityService: void showNetworkNotification(com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkNotificationManager$NotificationType)>(r10, $r8);

        goto label5;

     label4:
        $r7 = <com.android.server.connectivity.NetworkNotificationManager$NotificationType: com.android.server.connectivity.NetworkNotificationManager$NotificationType NO_INTERNET>;

        specialinvoke r0.<com.android.server.ConnectivityService: void showNetworkNotification(com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkNotificationManager$NotificationType)>(r10, $r7);

     label5:
        return;

     label6:
        return;
    }

    private void handleRegisterConnectivityDiagnosticsCallback(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.IConnectivityDiagnosticsCallback r1;
        java.util.Map $r2, $r3;
        boolean $z0, $z1, $z2, $z4, $z5;
        java.util.ArrayList $r5;
        android.util.SparseArray $r6, $r9, r19;
        int $i0, $i1, $i2, i3;
        java.lang.Object $r7, $r10;
        java.lang.String $r8;
        android.net.NetworkRequest $r11;
        android.os.RemoteException $r12, $r14;
        java.lang.Throwable $r13;
        com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo r15;
        android.os.IBinder r16;
        com.android.server.ConnectivityService$NetworkRequestInfo r17;
        com.android.server.connectivity.NetworkAgentInfo r20, r22;
        java.util.Iterator r21;
        android.net.ConnectivityDiagnosticsManager$ConnectivityReport r23;

        r0 := @this: com.android.server.ConnectivityService;

        r15 := @parameter0: com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        r1 = staticinvoke <com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo: android.net.IConnectivityDiagnosticsCallback access$8200(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)>(r15);

        r16 = interfaceinvoke r1.<android.net.IConnectivityDiagnosticsCallback: android.os.IBinder asBinder()>();

        r17 = staticinvoke <com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo: com.android.server.ConnectivityService$NetworkRequestInfo access$8300(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)>(r15);

        $r2 = r0.<com.android.server.ConnectivityService: java.util.Map mConnectivityDiagnosticsCallbacks>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r16);

        if $z0 == 0 goto label02;

        $z4 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z4 == 0 goto label01;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("Diagnostics callback is already registered");

     label01:
        specialinvoke r0.<com.android.server.ConnectivityService: void decrementNetworkRequestPerUidCount(com.android.server.ConnectivityService$NetworkRequestInfo)>(r17);

        return;

     label02:
        $r3 = r0.<com.android.server.ConnectivityService: java.util.Map mConnectivityDiagnosticsCallbacks>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r16, r15);

     label03:
        interfaceinvoke r16.<android.os.IBinder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>(r15, 0);

     label04:
        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<java.util.ArrayList: void <init>()>();

        r19 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        entermonitor r19;

        i3 = 0;

     label05:
        $r6 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $i0 = virtualinvoke $r6.<android.util.SparseArray: int size()>();

        if i3 >= $i0 goto label07;

        $r9 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object valueAt(int)>(i3);

        r20 = (com.android.server.connectivity.NetworkAgentInfo) $r10;

        $r11 = r17.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z2 = virtualinvoke r20.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfies(android.net.NetworkRequest)>($r11);

        if $z2 == 0 goto label06;

        interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r20);

     label06:
        i3 = i3 + 1;

        goto label05;

     label07:
        exitmonitor r19;

     label08:
        r21 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z5 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label15;

        $r7 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>();

        r22 = (com.android.server.connectivity.NetworkAgentInfo) $r7;

        r23 = virtualinvoke r22.<com.android.server.connectivity.NetworkAgentInfo: android.net.ConnectivityDiagnosticsManager$ConnectivityReport getConnectivityReport()>();

        if r23 != null goto label10;

        goto label09;

     label10:
        $i1 = r17.<com.android.server.ConnectivityService$NetworkRequestInfo: int mPid>;

        $i2 = r17.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $r8 = staticinvoke <com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo: java.lang.String access$8400(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)>(r15);

        $z1 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean checkConnectivityDiagnosticsPermissions(int,int,com.android.server.connectivity.NetworkAgentInfo,java.lang.String)>($i1, $i2, r22, $r8);

        if $z1 != 0 goto label11;

        goto label09;

     label11:
        interfaceinvoke r1.<android.net.IConnectivityDiagnosticsCallback: void onConnectivityReportAvailable(android.net.ConnectivityDiagnosticsManager$ConnectivityReport)>(r23);

     label12:
        goto label14;

     label13:
        $r12 := @caughtexception;

     label14:
        goto label09;

     label15:
        return;

     label16:
        $r13 := @caughtexception;

     label17:
        exitmonitor r19;

     label18:
        throw $r13;

     label19:
        $r14 := @caughtexception;

        virtualinvoke r15.<com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo: void binderDied()>();

        return;

        catch android.os.RemoteException from label03 to label04 with label19;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label07 to label08 with label16;
        catch android.os.RemoteException from label11 to label12 with label13;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private void handleRegisterNetworkAgent(com.android.server.connectivity.NetworkAgentInfo, android.net.INetworkMonitor)
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseArray r1, $r6;
        boolean $z0;
        android.os.Messenger $r2, $r7;
        java.util.HashMap $r3;
        android.net.Network $r5;
        int $i0;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler $r8;
        android.content.Context $r9;
        com.android.internal.util.AsyncChannel $r10;
        android.net.NetworkInfo $r11;
        android.net.NetworkCapabilities $r12;
        android.os.RemoteException $r13;
        java.lang.Throwable $r15;
        com.android.server.connectivity.NetworkAgentInfo r16;
        android.net.INetworkMonitor r17;

        r0 := @this: com.android.server.ConnectivityService;

        r16 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r17 := @parameter1: android.net.INetworkMonitor;

        virtualinvoke r16.<com.android.server.connectivity.NetworkAgentInfo: void onNetworkMonitorCreated(android.net.INetworkMonitor)>(r17);

        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 == 0 goto label1;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("Got NetworkAgent Messenger");

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r2 = r16.<com.android.server.connectivity.NetworkAgentInfo: android.os.Messenger messenger>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r16);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        entermonitor r1;

     label2:
        $r6 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r5 = r16.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i0 = $r5.<android.net.Network: int netId>;

        virtualinvoke $r6.<android.util.SparseArray: void put(int,java.lang.Object)>($i0, r16);

        exitmonitor r1;

     label3:
        interfaceinvoke r17.<android.net.INetworkMonitor: void start()>();

     label4:
        goto label6;

     label5:
        $r13 := @caughtexception;

        virtualinvoke $r13.<android.os.RemoteException: java.lang.RuntimeException rethrowAsRuntimeException()>();

     label6:
        $r10 = r16.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        $r9 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r8 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        $r7 = r16.<com.android.server.connectivity.NetworkAgentInfo: android.os.Messenger messenger>;

        virtualinvoke $r10.<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,android.os.Messenger)>($r9, $r8, $r7);

        $r11 = r16.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateNetworkInfo(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkInfo)>(r16, $r11);

        $r12 = r16.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateUids(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities,android.net.NetworkCapabilities)>(r16, null, $r12);

        return;

     label7:
        $r15 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r15;

        catch java.lang.Throwable from label2 to label3 with label7;
        catch android.os.RemoteException from label3 to label4 with label5;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void handleRegisterNetworkProvider(com.android.server.ConnectivityService$NetworkProviderInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkProviderInfo r1, $r20;
        android.os.Messenger $r3, $r10, $r17;
        java.util.HashMap $r4, $r11, $r18;
        boolean $z0, $z1;
        java.lang.StringBuilder $r5, $r15;
        java.lang.String $r7, $r9, $r21, $r23, r24;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler $r13;
        android.content.Context $r14;
        java.lang.Object $r19;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$NetworkProviderInfo;

        $r4 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r3 = r1.<com.android.server.ConnectivityService$NetworkProviderInfo: android.os.Messenger messenger>;

        $z0 = virtualinvoke $r4.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label1;

        r24 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to register existing NetworkProviderInfo ");

        $r18 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r17 = r1.<com.android.server.ConnectivityService$NetworkProviderInfo: android.os.Messenger messenger>;

        $r19 = virtualinvoke $r18.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r17);

        $r20 = (com.android.server.ConnectivityService$NetworkProviderInfo) $r19;

        $r21 = $r20.<com.android.server.ConnectivityService$NetworkProviderInfo: java.lang.String name>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        $r23 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r24, $r23);

        return;

     label1:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got NetworkProvider Messenger for ");

        $r7 = r1.<com.android.server.ConnectivityService$NetworkProviderInfo: java.lang.String name>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

        $r11 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r10 = r1.<com.android.server.ConnectivityService$NetworkProviderInfo: android.os.Messenger messenger>;

        virtualinvoke $r11.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r1);

        $r14 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r13 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        virtualinvoke r1.<com.android.server.ConnectivityService$NetworkProviderInfo: void connect(android.content.Context,android.os.Handler)>($r14, $r13);

        $z1 = virtualinvoke r1.<com.android.server.ConnectivityService$NetworkProviderInfo: boolean isLegacyNetworkFactory()>();

        if $z1 != 0 goto label2;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendAllRequestsToProvider(com.android.server.ConnectivityService$NetworkProviderInfo)>(r1);

     label2:
        return;
    }

    private void handleRegisterNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;
        android.net.NetworkRequest $r2, $r9, $r10, $r12, $r16, $r18, $r19;
        java.util.HashMap $r3, $r13;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        boolean $z0, $z1, $z2, $z3, $z4;
        com.android.server.connectivity.NetworkAgentInfo $r11, r23;
        java.util.Collection $r14;
        java.lang.Object $r15;
        android.net.NetworkCapabilities $r17;
        android.util.LocalLog r20;
        java.util.Iterator r22;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        $r3 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r2 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1);

        r20 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mNetworkRequestInfoLogs>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("REGISTER ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r20.<android.util.LocalLog: void log(java.lang.String)>($r8);

        $r9 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z0 = virtualinvoke $r9.<android.net.NetworkRequest: boolean isListen()>();

        if $z0 == 0 goto label3;

        $r13 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r14 = virtualinvoke $r13.<java.util.HashMap: java.util.Collection values()>();

        r22 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z2 = interfaceinvoke r22.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r15 = interfaceinvoke r22.<java.util.Iterator: java.lang.Object next()>();

        r23 = (com.android.server.connectivity.NetworkAgentInfo) $r15;

        $r16 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r17 = $r16.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $z3 = virtualinvoke $r17.<android.net.NetworkCapabilities: boolean hasSignalStrength()>();

        if $z3 == 0 goto label2;

        $r18 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z4 = virtualinvoke r23.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfiesImmutableCapabilitiesOf(android.net.NetworkRequest)>($r18);

        if $z4 == 0 goto label2;

        $r19 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateSignalStrengthThresholds(com.android.server.connectivity.NetworkAgentInfo,java.lang.String,android.net.NetworkRequest)>(r23, "REGISTER", $r19);

     label2:
        goto label1;

     label3:
        specialinvoke r0.<com.android.server.ConnectivityService: void rematchAllNetworksAndRequests()>();

        $r10 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z1 = virtualinvoke $r10.<android.net.NetworkRequest: boolean isRequest()>();

        if $z1 == 0 goto label4;

        $r11 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier>;

        if $r11 != null goto label4;

        $r12 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(android.net.NetworkRequest,com.android.server.connectivity.NetworkAgentInfo)>($r12, null);

     label4:
        return;
    }

    private void handleRegisterNetworkRequestWithIntent(android.os.Message)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1, r2;
        java.lang.Object $r3;
        android.app.PendingIntent $r4;
        java.lang.StringBuilder $r5;
        android.net.NetworkRequest $r7, $r10, $r14;
        java.lang.String $r13;
        int $i0;
        android.os.Message r15;

        r0 := @this: com.android.server.ConnectivityService;

        r15 := @parameter0: android.os.Message;

        $r3 = r15.<android.os.Message: java.lang.Object obj>;

        r1 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r3;

        $r4 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.app.PendingIntent mPendingIntent>;

        r2 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkRequestInfo findExistingNetworkRequestInfo(android.app.PendingIntent)>($r4);

        if r2 == null goto label1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Replacing ");

        $r7 = r2.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ");

        $r10 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because their intents matched.");

        $r13 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r13);

        $r14 = r2.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int getCallingUid()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void handleReleaseNetworkRequest(android.net.NetworkRequest,int,boolean)>($r14, $i0, 0);

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void handleRegisterNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo)>(r1);

        return;
    }

    private void handleReleaseNetworkRequest(android.net.NetworkRequest, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0, $z1, $z2;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;
        java.lang.StringBuilder $r2;
        android.net.NetworkRequest $r4, $r8, r9;
        java.lang.String $r7;

        r0 := @this: com.android.server.ConnectivityService;

        r9 := @parameter0: android.net.NetworkRequest;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkRequestInfo getNriForAppRequest(android.net.NetworkRequest,int,java.lang.String)>(r9, i0, "release NetworkRequest");

        if r1 != null goto label1;

        return;

     label1:
        $z1 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z1 != 0 goto label2;

        $r8 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z2 = virtualinvoke $r8.<android.net.NetworkRequest: boolean isRequest()>();

        if $z2 == 0 goto label3;

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("releasing ");

        $r4 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (release request)");

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r7);

     label3:
        specialinvoke r0.<com.android.server.ConnectivityService: void handleRemoveNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo)>(r1);

        if z0 == 0 goto label4;

        specialinvoke r0.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)>(r1, null, 524293, 0);

     label4:
        return;
    }

    private void handleReleaseNetworkRequestWithIntent(android.app.PendingIntent, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.net.NetworkRequest $r1;
        android.app.PendingIntent r2;
        com.android.server.ConnectivityService$NetworkRequestInfo r3;

        r0 := @this: com.android.server.ConnectivityService;

        r2 := @parameter0: android.app.PendingIntent;

        i0 := @parameter1: int;

        r3 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkRequestInfo findExistingNetworkRequestInfo(android.app.PendingIntent)>(r2);

        if r3 == null goto label1;

        $r1 = r3.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        specialinvoke r0.<com.android.server.ConnectivityService: void handleReleaseNetworkRequest(android.net.NetworkRequest,int,boolean)>($r1, i0, 0);

     label1:
        return;
    }

    private void handleReleaseNetworkTransitionWakelock(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i8, $i9;
        long l1, $l2, $l3, $l4, $l5, $l6, $l7;
        android.os.PowerManager$WakeLock $r1, $r2;
        boolean $z0;
        java.lang.Object[] $r3, $r6;
        android.util.LocalLog $r4, $r7;
        java.lang.String $r5, $r8, $r9, r11;
        java.lang.Throwable $r10;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r11 = staticinvoke <com.android.server.ConnectivityService: java.lang.String eventName(int)>(i0);

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 != 0 goto label3;

        $r7 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mWakelockLogs>;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r11;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("RELEASE: already released (%s)", $r6);

        virtualinvoke $r7.<android.util.LocalLog: void log(java.lang.String)>($r8);

        $r9 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r9, "expected Net Transition WakeLock to be held");

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l3 = r0.<com.android.server.ConnectivityService: long mLastWakeLockAcquireTimestamp>;

        l1 = $l2 - $l3;

        $l4 = r0.<com.android.server.ConnectivityService: long mTotalWakelockDurationMs>;

        $l5 = $l4 + l1;

        r0.<com.android.server.ConnectivityService: long mTotalWakelockDurationMs> = $l5;

        $l6 = r0.<com.android.server.ConnectivityService: long mMaxWakelockDurationMs>;

        $l7 = staticinvoke <java.lang.Math: long max(long,long)>($l6, l1);

        r0.<com.android.server.ConnectivityService: long mMaxWakelockDurationMs> = $l7;

        $i8 = r0.<com.android.server.ConnectivityService: int mTotalWakelockReleases>;

        $i9 = $i8 + 1;

        r0.<com.android.server.ConnectivityService: int mTotalWakelockReleases> = $i9;

        exitmonitor r0;

     label4:
        $r4 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mWakelockLogs>;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = r11;

        $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("RELEASE (%s)", $r3);

        virtualinvoke $r4.<android.util.LocalLog: void log(java.lang.String)>($r5);

        return;

     label5:
        $r10 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void handleRemoveNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, $z12, z13, z14, z15, $z16;
        long l0;
        android.net.NetworkRequest $r2, $r9, $r13, $r14, $r16, $r17, $r19, $r21, $r23, $r24, $r46, r47;
        java.util.HashMap $r3, $r10, $r48;
        java.lang.StringBuilder $r5, $r25, $r35;
        java.lang.String $r8, $r27, $r32, $r37, $r40;
        java.util.Collection $r11, $r49;
        java.lang.Object $r12, $r18;
        int $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10;
        android.net.NetworkCapabilities $r15, $r34;
        com.android.server.ConnectivityService$NetworkProviderInfo $r20;
        com.android.server.ConnectivityService$LegacyTypeTracker $r22;
        com.android.server.ConnectivityService$UnneededFor $r33;
        android.util.LocalLog r41;
        com.android.server.connectivity.NetworkAgentInfo r43, r52;
        java.util.Iterator r50, r51;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        virtualinvoke r1.<com.android.server.ConnectivityService$NetworkRequestInfo: void unlinkDeathRecipient()>();

        $r3 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r2 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r3.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>($r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void decrementNetworkRequestPerUidCount(com.android.server.ConnectivityService$NetworkRequestInfo)>(r1);

        r41 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mNetworkRequestInfoLogs>;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("RELEASE ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r41.<android.util.LocalLog: void log(java.lang.String)>($r8);

        $r9 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z1 = virtualinvoke $r9.<android.net.NetworkRequest: boolean isRequest()>();

        if $z1 == 0 goto label13;

        z10 = 0;

        z11 = 0;

        r43 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier>;

        if r43 == null goto label06;

        z0 = virtualinvoke r43.<com.android.server.connectivity.NetworkAgentInfo: boolean isBackgroundNetwork()>();

        $r24 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i6 = $r24.<android.net.NetworkRequest: int requestId>;

        virtualinvoke r43.<com.android.server.connectivity.NetworkAgentInfo: void removeRequest(int)>($i6);

        $z6 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z6 != 0 goto label01;

        $z9 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z9 == 0 goto label02;

     label01:
        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Removing from current network ");

        $r27 = virtualinvoke r43.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", leaving ");

        $i7 = virtualinvoke r43.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i7);

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requests.");

        $r32 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r32);

     label02:
        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $z12 = specialinvoke r0.<com.android.server.ConnectivityService: boolean updateLingerState(com.android.server.connectivity.NetworkAgentInfo,long)>(r43, l0);

        if $z12 == 0 goto label03;

        specialinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkLosing(com.android.server.connectivity.NetworkAgentInfo,long)>(r43, l0);

     label03:
        $r33 = <com.android.server.ConnectivityService$UnneededFor: com.android.server.ConnectivityService$UnneededFor TEARDOWN>;

        $z7 = specialinvoke r0.<com.android.server.ConnectivityService: boolean unneeded(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$UnneededFor)>(r43, $r33);

        if $z7 == 0 goto label04;

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("no live requests for ");

        $r37 = virtualinvoke r43.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; disconnecting");

        $r40 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r40);

        specialinvoke r0.<com.android.server.ConnectivityService: void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r43);

        goto label05;

     label04:
        z11 = 1;

     label05:
        r1.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier> = null;

        z10 = z11;

        if z0 != 0 goto label06;

        z10 = z11;

        $z8 = virtualinvoke r43.<com.android.server.connectivity.NetworkAgentInfo: boolean isBackgroundNetwork()>();

        if $z8 == 0 goto label06;

        $i8 = virtualinvoke r43.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        $r34 = r43.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateCapabilities(int,com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities)>($i8, r43, $r34);

        z10 = z11;

     label06:
        $r46 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i9 = $r46.<android.net.NetworkRequest: int legacyType>;

        if $i9 == -1 goto label10;

        if r43 == null goto label10;

        z13 = 1;

        z14 = 1;

        if z10 == 0 goto label09;

        i10 = 0;

     label07:
        z13 = z14;

        $i3 = virtualinvoke r43.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        if i10 >= $i3 goto label09;

        r47 = virtualinvoke r43.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkRequest requestAt(int)>(i10);

        z15 = z14;

        $i5 = r47.<android.net.NetworkRequest: int legacyType>;

        $r23 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i4 = $r23.<android.net.NetworkRequest: int legacyType>;

        if $i5 != $i4 goto label08;

        z15 = z14;

        $z5 = virtualinvoke r47.<android.net.NetworkRequest: boolean isRequest()>();

        if $z5 == 0 goto label08;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>(" still have other legacy request - leaving");

        z15 = 0;

     label08:
        i10 = i10 + 1;

        z14 = z15;

        goto label07;

     label09:
        if z13 == 0 goto label10;

        $r22 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $r21 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i2 = $r21.<android.net.NetworkRequest: int legacyType>;

        virtualinvoke $r22.<com.android.server.ConnectivityService$LegacyTypeTracker: void remove(int,com.android.server.connectivity.NetworkAgentInfo,boolean)>($i2, r43, 0);

     label10:
        $r48 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r49 = virtualinvoke $r48.<java.util.HashMap: java.util.Collection values()>();

        r50 = interfaceinvoke $r49.<java.util.Collection: java.util.Iterator iterator()>();

     label11:
        $z16 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>();

        if $z16 == 0 goto label12;

        $r18 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (com.android.server.ConnectivityService$NetworkProviderInfo) $r18;

        $r19 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r20.<com.android.server.ConnectivityService$NetworkProviderInfo: void cancelRequest(android.net.NetworkRequest)>($r19);

        goto label11;

     label12:
        goto label16;

     label13:
        $r10 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.util.Collection values()>();

        r51 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>();

     label14:
        $z2 = interfaceinvoke r51.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label16;

        $r12 = interfaceinvoke r51.<java.util.Iterator: java.lang.Object next()>();

        r52 = (com.android.server.connectivity.NetworkAgentInfo) $r12;

        $r13 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i1 = $r13.<android.net.NetworkRequest: int requestId>;

        virtualinvoke r52.<com.android.server.connectivity.NetworkAgentInfo: void removeRequest(int)>($i1);

        $r14 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r15 = $r14.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $z3 = virtualinvoke $r15.<android.net.NetworkCapabilities: boolean hasSignalStrength()>();

        if $z3 == 0 goto label15;

        $r16 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z4 = virtualinvoke r52.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfiesImmutableCapabilitiesOf(android.net.NetworkRequest)>($r16);

        if $z4 == 0 goto label15;

        $r17 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateSignalStrengthThresholds(com.android.server.connectivity.NetworkAgentInfo,java.lang.String,android.net.NetworkRequest)>(r52, "RELEASE", $r17);

     label15:
        goto label14;

     label16:
        return;
    }

    private void handleReportNetworkConnectivity(android.net.Network, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        boolean z0, $z1, $z2, $z3;
        android.net.NetworkInfo $r2, $r5;
        android.net.NetworkInfo$State $r3, $r4, $r6, $r7;
        android.net.Network $r8, r19;
        java.lang.StringBuilder $r9;
        java.lang.String $r16;
        android.net.LinkProperties $r17;
        android.net.NetworkMonitorManager $r18;
        com.android.server.connectivity.NetworkAgentInfo r20;

        r0 := @this: com.android.server.ConnectivityService;

        r19 := @parameter0: android.net.Network;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if r19 != null goto label1;

        r20 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        goto label2;

     label1:
        r20 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r19);

     label2:
        if r20 == null goto label7;

        $r2 = r20.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $r3 = virtualinvoke $r2.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        $r4 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State DISCONNECTING>;

        if $r3 == $r4 goto label7;

        $r5 = r20.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $r6 = virtualinvoke $r5.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        $r7 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State DISCONNECTED>;

        if $r6 != $r7 goto label3;

        goto label7;

     label3:
        $z1 = r20.<com.android.server.connectivity.NetworkAgentInfo: boolean lastValidated>;

        if z0 != $z1 goto label4;

        return;

     label4:
        $r8 = r20.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        i1 = $r8.<android.net.Network: int netId>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("reportNetworkConnectivity(");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") by ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r16);

        $z2 = r20.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        if $z2 != 0 goto label5;

        return;

     label5:
        $r17 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(com.android.server.connectivity.NetworkAgentInfo)>(r20);

        $z3 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isNetworkWithLinkPropertiesBlocked(android.net.LinkProperties,int,boolean)>($r17, i0, 0);

        if $z3 == 0 goto label6;

        return;

     label6:
        $r18 = virtualinvoke r20.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMonitorManager networkMonitor()>();

        virtualinvoke $r18.<android.net.NetworkMonitorManager: boolean forceReevaluation(int)>(i0);

        return;

     label7:
        return;
    }

    private void handleSetAcceptPartialConnectivity(android.net.Network, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, z1, $z2, $z3;
        java.lang.StringBuilder $r2;
        java.lang.String $r9;
        android.net.NetworkAgentConfig $r10, $r14;
        android.net.NetworkMonitorManager $r11;
        com.android.internal.util.AsyncChannel $r12, $r13;
        int $i0;
        android.net.Network r15;
        com.android.server.connectivity.NetworkAgentInfo r16;

        r0 := @this: com.android.server.ConnectivityService;

        r15 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleSetAcceptPartialConnectivity network=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" accept=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" always=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

        r16 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r15);

        if r16 != null goto label1;

        return;

     label1:
        $z2 = r16.<com.android.server.connectivity.NetworkAgentInfo: boolean lastValidated>;

        if $z2 == 0 goto label2;

        return;

     label2:
        $r10 = r16.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $z3 = $r10.<android.net.NetworkAgentConfig: boolean acceptPartialConnectivity>;

        if z0 == $z3 goto label3;

        $r14 = r16.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $r14.<android.net.NetworkAgentConfig: boolean acceptPartialConnectivity> = z0;

     label3:
        if z1 == 0 goto label4;

        $r13 = r16.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z0);

        virtualinvoke $r13.<com.android.internal.util.AsyncChannel: void sendMessage(int,int)>(528393, $i0);

     label4:
        if z0 != 0 goto label5;

        $r12 = r16.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r12.<com.android.internal.util.AsyncChannel: void sendMessage(int)>(528399);

        specialinvoke r0.<com.android.server.ConnectivityService: void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r16);

        goto label6;

     label5:
        $r11 = virtualinvoke r16.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMonitorManager networkMonitor()>();

        virtualinvoke $r11.<android.net.NetworkMonitorManager: boolean setAcceptPartialConnectivity()>();

     label6:
        return;
    }

    private void handleSetAcceptUnvalidated(android.net.Network, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, z1, $z2, $z3, $z4;
        java.lang.StringBuilder $r2;
        java.lang.String $r9, $r16;
        android.net.NetworkAgentConfig $r10, $r11, $r14, $r15;
        com.android.internal.util.AsyncChannel $r12, $r13;
        int $i0;
        android.net.Network r17;
        com.android.server.connectivity.NetworkAgentInfo r18;

        r0 := @this: com.android.server.ConnectivityService;

        r17 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handleSetAcceptUnvalidated network=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r17);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" accept=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" always=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

        r18 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r17);

        if r18 != null goto label1;

        return;

     label1:
        $z2 = r18.<com.android.server.connectivity.NetworkAgentInfo: boolean everValidated>;

        if $z2 == 0 goto label2;

        return;

     label2:
        $r10 = r18.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $z3 = $r10.<android.net.NetworkAgentConfig: boolean explicitlySelected>;

        if $z3 != 0 goto label3;

        $r16 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>($r16, "BUG: setAcceptUnvalidated non non-explicitly selected network");

     label3:
        $r11 = r18.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $z4 = $r11.<android.net.NetworkAgentConfig: boolean acceptUnvalidated>;

        if z0 == $z4 goto label4;

        $r14 = r18.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $r14.<android.net.NetworkAgentConfig: boolean acceptUnvalidated> = z0;

        $r15 = r18.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $r15.<android.net.NetworkAgentConfig: boolean acceptPartialConnectivity> = z0;

        specialinvoke r0.<com.android.server.ConnectivityService: void rematchAllNetworksAndRequests()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(com.android.server.connectivity.NetworkAgentInfo)>(r18);

     label4:
        if z1 == 0 goto label5;

        $r13 = r18.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z0);

        virtualinvoke $r13.<com.android.internal.util.AsyncChannel: void sendMessage(int,int)>(528393, $i0);

     label5:
        if z0 != 0 goto label6;

        $r12 = r18.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r12.<com.android.internal.util.AsyncChannel: void sendMessage(int)>(528399);

        specialinvoke r0.<com.android.server.ConnectivityService: void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r18);

     label6:
        return;
    }

    private void handleSetAvoidUnvalidated(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        boolean $z0, $z1;
        android.net.Network r1;
        com.android.server.connectivity.NetworkAgentInfo r2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        r2 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r1);

        if r2 == null goto label3;

        $z0 = r2.<com.android.server.connectivity.NetworkAgentInfo: boolean lastValidated>;

        if $z0 == 0 goto label1;

        goto label3;

     label1:
        $z1 = r2.<com.android.server.connectivity.NetworkAgentInfo: boolean avoidUnvalidated>;

        if $z1 != 0 goto label2;

        r2.<com.android.server.connectivity.NetworkAgentInfo: boolean avoidUnvalidated> = 1;

        specialinvoke r0.<com.android.server.ConnectivityService: void rematchAllNetworksAndRequests()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(com.android.server.connectivity.NetworkAgentInfo)>(r2);

     label2:
        return;

     label3:
        return;
    }

    private void handleTimedOutNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;
        android.net.NetworkRequest $r3, $r9, $r13;
        java.util.HashMap $r4;
        java.lang.Object $r5;
        com.android.server.connectivity.NetworkAgentInfo $r6;
        boolean $z0, $z1;
        java.lang.StringBuilder $r7;
        java.lang.String $r12;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        $r4 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r3 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3);

        if $r5 != null goto label1;

        return;

     label1:
        $r6 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier>;

        if $r6 == null goto label2;

        return;

     label2:
        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 != 0 goto label3;

        $r13 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z1 = virtualinvoke $r13.<android.net.NetworkRequest: boolean isRequest()>();

        if $z1 == 0 goto label4;

     label3:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("releasing ");

        $r9 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (timeout)");

        $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r12);

     label4:
        specialinvoke r0.<com.android.server.ConnectivityService: void handleRemoveNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo)>(r1);

        specialinvoke r0.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)>(r1, null, 524293, 0);

        return;
    }

    private void handleUnregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.os.IBinder r1;
        com.android.server.ConnectivityService$NetworkRequestInfo r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        boolean $z1, $z2;
        android.net.IConnectivityDiagnosticsCallback r5;
        com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo r6;

        r0 := @this: com.android.server.ConnectivityService;

        r5 := @parameter0: android.net.IConnectivityDiagnosticsCallback;

        i0 := @parameter1: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        r1 = interfaceinvoke r5.<android.net.IConnectivityDiagnosticsCallback: android.os.IBinder asBinder()>();

        $r3 = r0.<com.android.server.ConnectivityService: java.util.Map mConnectivityDiagnosticsCallbacks>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        r6 = (com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo) $r4;

        if r6 != null goto label2;

        $z2 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z2 == 0 goto label1;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("Removing diagnostics callback that is not currently registered");

     label1:
        return;

     label2:
        r2 = staticinvoke <com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo: com.android.server.ConnectivityService$NetworkRequestInfo access$8300(com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo)>(r6);

        $i1 = r2.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        if i0 == $i1 goto label4;

        $z1 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z1 == 0 goto label3;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Different uid than registrant attempting to unregister cb");

     label3:
        return;

     label4:
        specialinvoke r0.<com.android.server.ConnectivityService: void decrementNetworkRequestPerUidCount(com.android.server.ConnectivityService$NetworkRequestInfo)>(r2);

        interfaceinvoke r1.<android.os.IBinder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>(r6, 0);

        return;
    }

    private void handleUnregisterNetworkProvider(android.os.Messenger)
    {
        com.android.server.ConnectivityService r0;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r6, $r8;
        android.os.Messenger r9;
        com.android.server.ConnectivityService$NetworkProviderInfo r10;

        r0 := @this: com.android.server.ConnectivityService;

        r9 := @parameter0: android.os.Messenger;

        $r2 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r9);

        r10 = (com.android.server.ConnectivityService$NetworkProviderInfo) $r3;

        if r10 != null goto label1;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Failed to find Messenger in unregisterNetworkProvider");

        return;

     label1:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("unregisterNetworkProvider for ");

        $r6 = r10.<com.android.server.ConnectivityService$NetworkProviderInfo: java.lang.String name>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r8);

        return;
    }

    private boolean hasDataStallDetectionMethod(android.net.DataStallReportParcelable, int)
    {
        com.android.server.ConnectivityService r0;
        android.net.DataStallReportParcelable r1;
        int i0, $i1, $i2;
        boolean z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.DataStallReportParcelable;

        i0 := @parameter1: int;

        $i1 = r1.<android.net.DataStallReportParcelable: int detectionMethod>;

        $i2 = $i1 & i0;

        if $i2 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean hasWifiNetworkListenPermission(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        int $i0, $i1;
        android.content.Context $r1;
        java.lang.Throwable $r2;
        android.net.NetworkCapabilities r3;
        int[] r4;

        r0 := @this: com.android.server.ConnectivityService;

        r3 := @parameter0: android.net.NetworkCapabilities;

        if r3 != null goto label1;

        return 0;

     label1:
        r4 = virtualinvoke r3.<android.net.NetworkCapabilities: int[] getTransportTypes()>();

        $i0 = lengthof r4;

        if $i0 != 1 goto label5;

        $i1 = r4[0];

        if $i1 == 1 goto label2;

        goto label5;

     label2:
        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r1.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.ACCESS_WIFI_STATE", "ConnectivityService");

     label3:
        return 1;

     label4:
        $r2 := @caughtexception;

        return 0;

     label5:
        return 0;

        catch java.lang.SecurityException from label2 to label3 with label4;
    }

    private boolean isDefaultRequest(com.android.server.ConnectivityService$NetworkRequestInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;
        android.net.NetworkRequest $r2, $r3;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        $r2 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i1 = $r2.<android.net.NetworkRequest: int requestId>;

        $r3 = r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i0 = $r3.<android.net.NetworkRequest: int requestId>;

        if $i1 != $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isLiveNetworkAgent(com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1, r2;
        int i0;
        android.net.Network $r4, $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r7, $r13;
        boolean $z0, $z1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        i0 := @parameter1: int;

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        if $r4 != null goto label1;

        return 0;

     label1:
        $r5 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        r2 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>($r5);

        if r2 == null goto label2;

        $z1 = virtualinvoke r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        if r2 != null goto label3;

        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 == 0 goto label4;

     label3:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = staticinvoke <com.android.server.ConnectivityService: java.lang.String eventName(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - isLiveNetworkAgent found mismatched netId: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r13);

     label4:
        return 0;
    }

    private boolean isNetworkWithLinkPropertiesBlocked(android.net.LinkProperties, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        boolean z0, $z1, $z2, $z3;
        android.util.SparseArray r1, $r3;
        com.android.server.connectivity.Vpn r2;
        java.lang.Object $r4;
        com.android.server.net.NetworkPolicyManagerInternal $r5;
        java.lang.Throwable $r6;
        android.net.LinkProperties r7;
        java.lang.String r8;

        r0 := @this: com.android.server.ConnectivityService;

        r7 := @parameter0: android.net.LinkProperties;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label01;

        return 0;

     label01:
        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label02:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r2 = (com.android.server.connectivity.Vpn) $r4;

     label03:
        if r2 == null goto label06;

     label04:
        $z2 = virtualinvoke r2.<com.android.server.connectivity.Vpn: boolean getLockdown()>();

        if $z2 == 0 goto label06;

        $z3 = virtualinvoke r2.<com.android.server.connectivity.Vpn: boolean isBlockingUid(int)>(i0);

        if $z3 == 0 goto label06;

        exitmonitor r1;

     label05:
        return 1;

     label06:
        exitmonitor r1;

     label07:
        if r7 != null goto label08;

        r8 = "";

        goto label09;

     label08:
        r8 = virtualinvoke r7.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

     label09:
        $r5 = r0.<com.android.server.ConnectivityService: com.android.server.net.NetworkPolicyManagerInternal mPolicyManagerInternal>;

        $z1 = virtualinvoke $r5.<com.android.server.net.NetworkPolicyManagerInternal: boolean isUidNetworkingBlocked(int,java.lang.String)>(i0, r8);

        return $z1;

     label10:
        $r6 := @caughtexception;

     label11:
        exitmonitor r1;

     label12:
        throw $r6;

        catch java.lang.Throwable from label02 to label03 with label10;
        catch java.lang.Throwable from label04 to label05 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    private boolean isSystem(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        if i0 >= 10000 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean isUidNetworkingWithVpnBlocked(int, int, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2;
        boolean z0, z1, $z2, $z3, $z4;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.connectivity.Vpn r5;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $i2 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i0);

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>($i2);

        r5 = (com.android.server.connectivity.Vpn) $r3;

     label2:
        if r5 == null goto label5;

     label3:
        $z2 = virtualinvoke r5.<com.android.server.connectivity.Vpn: boolean getLockdown()>();

        if $z2 == 0 goto label5;

        $z3 = virtualinvoke r5.<com.android.server.connectivity.Vpn: boolean isBlockingUid(int)>(i0);

        if $z3 == 0 goto label5;

        exitmonitor r1;

     label4:
        return 1;

     label5:
        exitmonitor r1;

     label6:
        $z4 = staticinvoke <com.android.server.net.NetworkPolicyManagerInternal: boolean isUidNetworkingBlocked(int,int,boolean,boolean)>(i0, i1, z0, z1);

        return $z4;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    static int lambda$networksSortedById$2(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.connectivity.NetworkAgentInfo r0;
        android.net.Network $r1;
        int $i0;

        r0 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r1 = r0.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i0 = $r1.<android.net.Network: int netId>;

        return $i0;
    }

    static int lambda$requestsSortedById$3(com.android.server.ConnectivityService$NetworkRequestInfo)
    {
        com.android.server.ConnectivityService$NetworkRequestInfo r0;
        android.net.NetworkRequest $r1;
        int $i0;

        r0 := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        $r1 = r0.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i0 = $r1.<android.net.NetworkRequest: int requestId>;

        return $i0;
    }

    static android.net.RouteInfo$RouteKey lambda$updateRoutes$8(android.net.RouteInfo)
    {
        android.net.RouteInfo r0;
        android.net.RouteInfo$RouteKey $r1;

        r0 := @parameter0: android.net.RouteInfo;

        $r1 = virtualinvoke r0.<android.net.RouteInfo: android.net.RouteInfo$RouteKey getRouteKey()>();

        return $r1;
    }

    private android.net.LinkProperties linkPropertiesRestrictedForCallerPermissions(android.net.LinkProperties, int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        android.net.Uri $r1;
        boolean $z0, z1;
        android.net.LinkProperties $r2, $r3, $r4, $r6, r7;
        android.net.CaptivePortalData $r5;

        r0 := @this: com.android.server.ConnectivityService;

        r7 := @parameter0: android.net.LinkProperties;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        if r7 != null goto label1;

        $r6 = new android.net.LinkProperties;

        specialinvoke $r6.<android.net.LinkProperties: void <init>()>();

        return $r6;

     label1:
        $r1 = virtualinvoke r7.<android.net.LinkProperties: android.net.Uri getCaptivePortalApiUrl()>();

        if $r1 != null goto label3;

        $r5 = virtualinvoke r7.<android.net.LinkProperties: android.net.CaptivePortalData getCaptivePortalData()>();

        if $r5 == null goto label2;

        goto label3;

     label2:
        z1 = 0;

        goto label4;

     label3:
        z1 = 1;

     label4:
        if z1 != 0 goto label5;

        $r4 = new android.net.LinkProperties;

        specialinvoke $r4.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>(r7);

        return $r4;

     label5:
        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkSettingsPermission(int,int)>(i0, i1);

        if $z0 == 0 goto label6;

        $r3 = new android.net.LinkProperties;

        specialinvoke $r3.<android.net.LinkProperties: void <init>(android.net.LinkProperties,boolean)>(r7, 1);

        return $r3;

     label6:
        $r2 = new android.net.LinkProperties;

        specialinvoke $r2.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>(r7);

        virtualinvoke $r2.<android.net.LinkProperties: void setCaptivePortalApiUrl(android.net.Uri)>(null);

        virtualinvoke $r2.<android.net.LinkProperties: void setCaptivePortalData(android.net.CaptivePortalData)>(null);

        return $r2;
    }

    private static void log(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>($r1, r0);

        return;
    }

    private void logNetworkEvent(com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        int i0, $i1;
        int[] r2;
        android.net.NetworkCapabilities $r3;
        android.net.Network $r4;
        android.net.metrics.NetworkEvent $r5;
        android.net.metrics.IpConnectivityLog $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        i0 := @parameter1: int;

        $r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        r2 = virtualinvoke $r3.<android.net.NetworkCapabilities: int[] getTransportTypes()>();

        $r6 = r0.<com.android.server.ConnectivityService: android.net.metrics.IpConnectivityLog mMetricsLog>;

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i1 = $r4.<android.net.Network: int netId>;

        $r5 = new android.net.metrics.NetworkEvent;

        specialinvoke $r5.<android.net.metrics.NetworkEvent: void <init>(int)>(i0);

        virtualinvoke $r6.<android.net.metrics.IpConnectivityLog: boolean log(int,int[],android.net.metrics.IpConnectivityLog$Event)>($i1, r2, $r5);

        return;
    }

    private static void loge(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r1, r0);

        return;
    }

    private static void loge(java.lang.String, java.lang.Throwable)
    {
        java.lang.String r0, $r2;
        java.lang.Throwable r1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Throwable;

        $r2 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r2, r0, r1);

        return;
    }

    private void makeDefault(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        java.lang.StringBuilder $r1, $r10;
        java.lang.String $r2, $r11, r17;
        android.os.INetworkManagementService $r3, $r8;
        android.net.LinkProperties $r4, $r5, $r6;
        android.net.Network $r7;
        int $i0;
        java.lang.Exception $r9;
        com.android.server.connectivity.NetworkAgentInfo r12;
        android.net.ProxyInfo r16;
        com.android.server.connectivity.DnsManager r18;
        java.util.List r19;

        r0 := @this: com.android.server.ConnectivityService;

        r12 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Switching to new default network: ");

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r2);

        r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo mDefaultNetworkNai> = r12;

        if r12 == null goto label03;

     label01:
        $r8 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        $r7 = r12.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i0 = $r7.<android.net.Network: int netId>;

        interfaceinvoke $r8.<android.os.INetworkManagementService: void setDefaultNetId(int)>($i0);

     label02:
        goto label04;

     label03:
        $r3 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        interfaceinvoke $r3.<android.os.INetworkManagementService: void clearDefaultNetId()>();

     label04:
        goto label06;

     label05:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception setting default network :");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r11);

     label06:
        specialinvoke r0.<com.android.server.ConnectivityService: void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)>(r12);

        if r12 == null goto label07;

        $r6 = r12.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        r16 = virtualinvoke $r6.<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>();

        goto label08;

     label07:
        r16 = null;

     label08:
        specialinvoke r0.<com.android.server.ConnectivityService: void handleApplyDefaultProxy(android.net.ProxyInfo)>(r16);

        if r12 == null goto label09;

        $r5 = r12.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        r17 = virtualinvoke $r5.<android.net.LinkProperties: java.lang.String getTcpBufferSizes()>();

        goto label10;

     label09:
        r17 = null;

     label10:
        specialinvoke r0.<com.android.server.ConnectivityService: void updateTcpBufferSizes(java.lang.String)>(r17);

        r18 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        if r12 == null goto label11;

        $r4 = r12.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        r19 = virtualinvoke $r4.<android.net.LinkProperties: java.util.List getDnsServers()>();

        goto label12;

     label11:
        r19 = <java.util.Collections: java.util.List EMPTY_LIST>;

     label12:
        virtualinvoke r18.<com.android.server.connectivity.DnsManager: void setDefaultDnsSystemProperties(java.util.Collection)>(r19);

        specialinvoke r0.<com.android.server.ConnectivityService: void notifyIfacesChangedForNetworkStats()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void updateAllVpnsCapabilities()>();

        return;

        catch java.lang.Exception from label01 to label02 with label05;
        catch java.lang.Exception from label03 to label04 with label05;
    }

    private android.content.Intent makeGeneralIntent(android.net.NetworkInfo, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r8, $r9, $r11, $r13;
        android.util.SparseArray r2;
        com.android.server.net.LockdownVpnTracker $r3, $r16;
        android.content.Intent $r4;
        android.net.NetworkInfo $r5, r18, r19;
        int $i0, $i1;
        boolean $z0;
        java.lang.Throwable $r17;

        r0 := @this: com.android.server.ConnectivityService;

        r18 := @parameter0: android.net.NetworkInfo;

        r1 := @parameter1: java.lang.String;

        r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r2;

        r19 = r18;

     label01:
        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        if $r3 == null goto label03;

        r19 = new android.net.NetworkInfo;

        specialinvoke r19.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(r18);

     label02:
        $r16 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        virtualinvoke $r16.<com.android.server.net.LockdownVpnTracker: void augmentNetworkInfo(android.net.NetworkInfo)>(r19);

     label03:
        exitmonitor r2;

     label04:
        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>(java.lang.String)>(r1);

        $r5 = new android.net.NetworkInfo;

        specialinvoke $r5.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(r19);

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("networkInfo", $r5);

        $i0 = virtualinvoke r19.<android.net.NetworkInfo: int getType()>();

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("networkType", $i0);

        $z0 = virtualinvoke r19.<android.net.NetworkInfo: boolean isFailover()>();

        if $z0 == 0 goto label05;

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("isFailover", 1);

        virtualinvoke r19.<android.net.NetworkInfo: void setFailover(boolean)>(0);

     label05:
        $r8 = virtualinvoke r19.<android.net.NetworkInfo: java.lang.String getReason()>();

        if $r8 == null goto label06;

        $r13 = virtualinvoke r19.<android.net.NetworkInfo: java.lang.String getReason()>();

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("reason", $r13);

     label06:
        $r9 = virtualinvoke r19.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        if $r9 == null goto label07;

        $r11 = virtualinvoke r19.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("extraInfo", $r11);

     label07:
        $i1 = r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished>;

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("inetCondition", $i1);

        return $r4;

     label08:
        $r17 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r17;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void maybeLogBlockedNetworkInfo(android.net.NetworkInfo, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.LocalLog r1;
        android.net.NetworkInfo$DetailedState $r2, $r3;
        boolean $z0, $z1, $z2, z3;
        java.util.HashSet $r4, $r14, r18;
        java.lang.Integer $r5, $r7, $r15;
        java.lang.Object[] $r6;
        java.lang.String $r8, $r13, r19;
        java.lang.StringBuilder $r9;
        java.lang.Throwable $r16;
        android.net.NetworkInfo r17;

        r0 := @this: com.android.server.ConnectivityService;

        r17 := @parameter0: android.net.NetworkInfo;

        i0 := @parameter1: int;

        if r17 == null goto label14;

        r18 = r0.<com.android.server.ConnectivityService: java.util.HashSet mBlockedAppUids>;

        entermonitor r18;

     label01:
        $r2 = virtualinvoke r17.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        $r3 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState BLOCKED>;

        if $r2 != $r3 goto label03;

        $r14 = r0.<com.android.server.ConnectivityService: java.util.HashSet mBlockedAppUids>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z2 = virtualinvoke $r14.<java.util.HashSet: boolean add(java.lang.Object)>($r15);

        if $z2 == 0 goto label03;

     label02:
        z3 = 1;

        goto label05;

     label03:
        $z0 = virtualinvoke r17.<android.net.NetworkInfo: boolean isConnected()>();

        if $z0 == 0 goto label09;

        $r4 = r0.<com.android.server.ConnectivityService: java.util.HashSet mBlockedAppUids>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $z1 = virtualinvoke $r4.<java.util.HashSet: boolean remove(java.lang.Object)>($r5);

        if $z1 == 0 goto label09;

     label04:
        z3 = 0;

     label05:
        exitmonitor r18;

     label06:
        if z3 == 0 goto label07;

        r19 = "BLOCKED";

        goto label08;

     label07:
        r19 = "UNBLOCKED";

     label08:
        $r6 = newarray (java.lang.Object)[2];

        $r6[0] = r19;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r6[1] = $r7;

        $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Returning %s NetworkInfo to uid=%d", $r6);

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r8);

        r1 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mNetworkInfoBlockingLogs>;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<android.util.LocalLog: void log(java.lang.String)>($r13);

        return;

     label09:
        exitmonitor r18;

     label10:
        return;

     label11:
        $r16 := @caughtexception;

     label12:
        exitmonitor r18;

     label13:
        throw $r16;

     label14:
        return;

        catch java.lang.Throwable from label01 to label02 with label11;
        catch java.lang.Throwable from label03 to label04 with label11;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void maybeLogBlockedStatusChanged(com.android.server.ConnectivityService$NetworkRequestInfo, android.net.Network, boolean)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;
        android.net.Network r2;
        boolean z0;
        java.lang.Object[] $r3;
        int $i0, $i1, $i2;
        android.util.LocalLog $r4;
        java.lang.Integer $r5, $r7, $r8;
        android.net.NetworkRequest $r6;
        java.lang.String $r9, r10;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        r2 := @parameter1: android.net.Network;

        z0 := @parameter2: boolean;

        if r1 == null goto label3;

        if r2 == null goto label3;

        if z0 == 0 goto label1;

        r10 = "BLOCKED";

        goto label2;

     label1:
        r10 = "UNBLOCKED";

     label2:
        $r4 = r0.<com.android.server.ConnectivityService: android.util.LocalLog mNetworkInfoBlockingLogs>;

        $r3 = newarray (java.lang.Object)[4];

        $r3[0] = r10;

        $i0 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r3[1] = $r5;

        $r6 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i1 = $r6.<android.net.NetworkRequest: int requestId>;

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r3[2] = $r7;

        $i2 = r2.<android.net.Network: int netId>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $r3[3] = $r8;

        $r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %d(%d) on netId %d", $r3);

        virtualinvoke $r4.<android.util.LocalLog: void log(java.lang.String)>($r9);

        return;

     label3:
        return;
    }

    private void maybeNotifyNetworkBlocked(com.android.server.connectivity.NetworkAgentInfo, boolean, boolean, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, z1, z2, z3, z4, z5;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        android.util.SparseIntArray $r4;
        java.lang.Throwable $r5;
        com.android.server.connectivity.NetworkAgentInfo r6;
        android.net.NetworkRequest r7;
        android.util.SparseArray r8;

        r0 := @this: com.android.server.ConnectivityService;

        r6 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        z2 := @parameter3: boolean;

        z3 := @parameter4: boolean;

        i6 = 0;

     label1:
        $i1 = virtualinvoke r6.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        if i6 >= $i1 goto label8;

        r7 = virtualinvoke r6.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkRequest requestAt(int)>(i6);

        $r2 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r7);

        r1 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r3;

        $r4 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        $i2 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        i0 = virtualinvoke $r4.<android.util.SparseIntArray: int get(int)>($i2);

        r8 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r8;

     label2:
        $i3 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        z4 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isUidNetworkingWithVpnBlocked(int,int,boolean,boolean)>($i3, i0, z0, z2);

        $i4 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        z5 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isUidNetworkingWithVpnBlocked(int,int,boolean,boolean)>($i4, i0, z1, z3);

        exitmonitor r8;

     label3:
        if z4 == z5 goto label4;

        $i5 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z5);

        specialinvoke r0.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)>(r1, r6, 524299, $i5);

     label4:
        i6 = i6 + 1;

        goto label1;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r8;

     label7:
        throw $r5;

     label8:
        return;

        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void maybeNotifyNetworkBlockedForNewUidRules(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2, $i3, $i4, $i5, i6;
        java.util.Iterator r1;
        boolean z0, $z1, $z2, $z3, z4, z5;
        java.util.HashMap $r2, $r7;
        java.util.Collection $r3;
        java.lang.Object $r4, $r8;
        android.net.NetworkCapabilities $r5;
        android.util.SparseIntArray $r6;
        java.lang.Throwable $r9;
        com.android.server.connectivity.NetworkAgentInfo r10;
        android.util.SparseArray r11;
        android.net.NetworkRequest r12;
        com.android.server.ConnectivityService$NetworkRequestInfo r13;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r2 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>();

     label01:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label11;

        $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.android.server.connectivity.NetworkAgentInfo) $r4;

        $r5 = r10.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        z4 = virtualinvoke $r5.<android.net.NetworkCapabilities: boolean isMetered()>();

        r11 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r11;

     label02:
        $r6 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        $i3 = virtualinvoke $r6.<android.util.SparseIntArray: int get(int)>(i0);

        $z1 = r0.<com.android.server.ConnectivityService: boolean mRestrictBackground>;

        z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isUidNetworkingWithVpnBlocked(int,int,boolean,boolean)>(i0, $i3, z4, $z1);

        $z2 = r0.<com.android.server.ConnectivityService: boolean mRestrictBackground>;

        z5 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isUidNetworkingWithVpnBlocked(int,int,boolean,boolean)>(i0, i1, z4, $z2);

        exitmonitor r11;

     label03:
        if z0 != z5 goto label04;

        goto label01;

     label04:
        i2 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z5);

        i6 = 0;

     label05:
        $i4 = virtualinvoke r10.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        if i6 >= $i4 goto label07;

        r12 = virtualinvoke r10.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkRequest requestAt(int)>(i6);

        $r7 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r8 = virtualinvoke $r7.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r12);

        r13 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r8;

        if r13 == null goto label06;

        $i5 = r13.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        if $i5 != i0 goto label06;

        specialinvoke r0.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)>(r13, r10, 524299, i2);

     label06:
        i6 = i6 + 1;

        goto label05;

     label07:
        goto label01;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r11;

     label10:
        throw $r9;

     label11:
        return;

        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private android.net.NetworkCapabilities mixInCapabilities(com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        java.lang.String r2, r3, $r23;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        android.net.NetworkCapabilities $r9, $r16, $r17, r24, $r25;
        java.lang.StringBuilder $r18;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r24 := @parameter1: android.net.NetworkCapabilities;

        $z0 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        if $z0 == 0 goto label01;

        $z6 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z6 != 0 goto label01;

        $r16 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z7 = virtualinvoke $r16.<android.net.NetworkCapabilities: boolean satisfiedByImmutableNetworkCapabilities(android.net.NetworkCapabilities)>(r24);

        if $z7 != 0 goto label01;

        $r17 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        r2 = virtualinvoke $r17.<android.net.NetworkCapabilities: java.lang.String describeImmutableDifferences(android.net.NetworkCapabilities)>(r24);

        $z8 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r2);

        if $z8 != 0 goto label01;

        r3 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BUG: ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" lost immutable capabilities:");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r23 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r3, $r23);

     label01:
        $r25 = new android.net.NetworkCapabilities;

        specialinvoke $r25.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r24);

        $z9 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean lastValidated>;

        if $z9 == 0 goto label02;

        virtualinvoke $r25.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(16);

        goto label03;

     label02:
        virtualinvoke $r25.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(16);

     label03:
        $z1 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean lastCaptivePortalDetected>;

        if $z1 == 0 goto label04;

        virtualinvoke $r25.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(17);

        goto label05;

     label04:
        virtualinvoke $r25.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(17);

     label05:
        $z2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isBackgroundNetwork()>();

        if $z2 == 0 goto label06;

        virtualinvoke $r25.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(19);

        goto label07;

     label06:
        virtualinvoke $r25.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(19);

     label07:
        $z3 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean partialConnectivity>;

        if $z3 == 0 goto label08;

        virtualinvoke $r25.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(24);

        goto label09;

     label08:
        virtualinvoke $r25.<android.net.NetworkCapabilities: android.net.NetworkCapabilities removeCapability(int)>(24);

     label09:
        $r9 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z4 = virtualinvoke $r9.<android.net.NetworkCapabilities: boolean isPrivateDnsBroken()>();

        virtualinvoke $r25.<android.net.NetworkCapabilities: void setPrivateDnsBroken(boolean)>($z4);

        $z5 = virtualinvoke $r25.<android.net.NetworkCapabilities: boolean hasTransport(int)>(0);

        if $z5 != 0 goto label10;

        virtualinvoke $r25.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(21);

        virtualinvoke $r25.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(18);

     label10:
        return $r25;
    }

    private android.net.NetworkInfo mixInInfo(com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkInfo r2, $r4;
        boolean z0, $z1, $z2, $z3, $z4;
        android.net.NetworkCapabilities $r5, $r16;
        android.net.NetworkInfo$DetailedState $r6, $r7, $r10, $r11, $r12, r15;
        java.lang.String $r8, $r9, $r13, $r14;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter1: android.net.NetworkInfo;

        $r4 = new android.net.NetworkInfo;

        specialinvoke $r4.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(r2);

        $r5 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z1 = virtualinvoke $r5.<android.net.NetworkCapabilities: boolean hasCapability(int)>(21);

        z0 = $z1 ^ 1;

        if z0 == 0 goto label1;

        $r10 = virtualinvoke r2.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        $r11 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if $r10 != $r11 goto label1;

        $r12 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState SUSPENDED>;

        $r13 = virtualinvoke r2.<android.net.NetworkInfo: java.lang.String getReason()>();

        $r14 = virtualinvoke r2.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke $r4.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>($r12, $r13, $r14);

        goto label4;

     label1:
        if z0 != 0 goto label4;

        $r6 = virtualinvoke r2.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        $r7 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState SUSPENDED>;

        if $r6 != $r7 goto label4;

        $z2 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        if $z2 == 0 goto label2;

        r15 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        goto label3;

     label2:
        r15 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTING>;

     label3:
        $r8 = virtualinvoke r2.<android.net.NetworkInfo: java.lang.String getReason()>();

        $r9 = virtualinvoke r2.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke $r4.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>(r15, $r8, $r9);

     label4:
        $r16 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z3 = virtualinvoke $r16.<android.net.NetworkCapabilities: boolean hasCapability(int)>(18);

        $z4 = $z3 ^ 1;

        virtualinvoke $r4.<android.net.NetworkInfo: void setRoaming(boolean)>($z4);

        return $r4;
    }

    private boolean networkRequiresPrivateDnsValidation(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkCapabilities $r2;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r2 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z0 = staticinvoke <android.net.shared.NetworkMonitorUtils: boolean isPrivateDnsValidationRequired(android.net.NetworkCapabilities)>($r2);

        return $z0;
    }

    private com.android.server.connectivity.NetworkAgentInfo[] networksSortedById()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo[] r1, $r4;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        java.lang.Object[] $r5;
        com.android.server.'-$$Lambda$ConnectivityService$H7LYLEpmjJnE6rkiTAMKiNF7tsA' $r6;
        java.util.Comparator $r7;
        java.util.function.ToIntFunction r8;

        r0 := @this: com.android.server.ConnectivityService;

        $r2 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        $r4 = newarray (com.android.server.connectivity.NetworkAgentInfo)[0];

        $r5 = interfaceinvoke $r3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        r1 = (com.android.server.connectivity.NetworkAgentInfo[]) $r5;

        $r6 = <com.android.server._$$Lambda$ConnectivityService$H7LYLEpmjJnE6rkiTAMKiNF7tsA: com.android.server.'-$$Lambda$ConnectivityService$H7LYLEpmjJnE6rkiTAMKiNF7tsA' INSTANCE>;

        r8 = (java.util.function.ToIntFunction) $r6;

        $r7 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>(r8);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r1, $r7);

        return r1;
    }

    private int nextNetworkRequestId()
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.ConnectivityService;

        entermonitor r0;

     label1:
        i0 = r0.<com.android.server.ConnectivityService: int mNextNetworkRequestId>;

        $i1 = i0 + 1;

        r0.<com.android.server.ConnectivityService: int mNextNetworkRequestId> = $i1;

     label2:
        exitmonitor r0;

        return i0;

     label3:
        $r2 := @caughtexception;

        exitmonitor r0;

        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void notifyDataStallSuspected(android.net.DataStallReportParcelable, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1, $i3, $i4, $i5;
        java.lang.StringBuilder $r1;
        java.lang.String $r4;
        android.os.PersistableBundle $r5;
        boolean $z0, $z1;
        long $l2;
        com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler $r6, $r9;
        java.lang.Long $r7;
        android.os.Bundle $r8;
        android.net.DataStallReportParcelable r10;
        byte b6, b7;
        android.os.Message r13;

        r0 := @this: com.android.server.ConnectivityService;

        r10 := @parameter0: android.net.DataStallReportParcelable;

        i0 := @parameter1: int;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data stall detected with methods: ");

        $i1 = r10.<android.net.DataStallReportParcelable: int detectionMethod>;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r4);

        $r5 = new android.os.PersistableBundle;

        specialinvoke $r5.<android.os.PersistableBundle: void <init>()>();

        b6 = 0;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean hasDataStallDetectionMethod(android.net.DataStallReportParcelable,int)>(r10, 1);

        if $z0 == 0 goto label1;

        $i5 = r10.<android.net.DataStallReportParcelable: int dnsConsecutiveTimeouts>;

        virtualinvoke $r5.<android.os.PersistableBundle: void putInt(java.lang.String,int)>("dnsConsecutiveTimeouts", $i5);

        b6 = 0 | 1;

     label1:
        b7 = b6;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean hasDataStallDetectionMethod(android.net.DataStallReportParcelable,int)>(r10, 2);

        if $z1 == 0 goto label2;

        $i3 = r10.<android.net.DataStallReportParcelable: int tcpPacketFailRate>;

        virtualinvoke $r5.<android.os.PersistableBundle: void putInt(java.lang.String,int)>("tcpPacketFailRate", $i3);

        $i4 = r10.<android.net.DataStallReportParcelable: int tcpMetricsCollectionPeriodMillis>;

        virtualinvoke $r5.<android.os.PersistableBundle: void putInt(java.lang.String,int)>("tcpMetricsCollectionPeriodMillis", $i4);

        b7 = b6 | 2;

     label2:
        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler mConnectivityDiagnosticsHandler>;

        $l2 = r10.<android.net.DataStallReportParcelable: long timestampMillis>;

        $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2);

        r13 = virtualinvoke $r6.<com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(4, b7, i0, $r7);

        $r8 = new android.os.Bundle;

        specialinvoke $r8.<android.os.Bundle: void <init>(android.os.PersistableBundle)>($r5);

        virtualinvoke r13.<android.os.Message: void setData(android.os.Bundle)>($r8);

        $r9 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler mConnectivityDiagnosticsHandler>;

        virtualinvoke $r9.<com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler: boolean sendMessage(android.os.Message)>(r13);

        return;
    }

    private void notifyIfacesChangedForNetworkStats()
    {
        com.android.server.ConnectivityService r0;
        android.net.INetworkStatsService $r1;
        android.net.Network[] $r2;
        android.net.NetworkState[] $r3;
        java.lang.Exception $r4;
        java.lang.String r5;
        android.net.LinkProperties r6;
        com.android.internal.net.VpnInfo[] r7;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        r5 = null;

        r6 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>();

        if r6 == null goto label1;

        r5 = virtualinvoke r6.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

     label1:
        r7 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.internal.net.VpnInfo[] getAllVpnInfo()>();

     label2:
        $r1 = r0.<com.android.server.ConnectivityService: android.net.INetworkStatsService mStatsService>;

        $r2 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.Network[] getDefaultNetworks()>();

        $r3 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkState[] getAllNetworkState()>();

        interfaceinvoke $r1.<android.net.INetworkStatsService: void forceUpdateIfaces(android.net.Network[],android.net.NetworkState[],java.lang.String,com.android.internal.net.VpnInfo[])>($r2, $r3, r5, r7);

     label3:
        goto label5;

     label4:
        $r4 := @caughtexception;

     label5:
        return;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    private void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseArray r1;
        com.android.server.net.LockdownVpnTracker $r2, $r3, $r5;
        boolean $z0;
        android.net.NetworkInfo $r4;
        java.lang.Throwable $r6;
        com.android.server.connectivity.NetworkAgentInfo r7;

        r0 := @this: com.android.server.ConnectivityService;

        r7 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label01:
        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        if $r2 == null goto label06;

     label02:
        if r7 == null goto label05;

     label03:
        $z0 = virtualinvoke r7.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z0 == 0 goto label05;

        $r5 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        $r4 = r7.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        virtualinvoke $r5.<com.android.server.net.LockdownVpnTracker: void onVpnStateChanged(android.net.NetworkInfo)>($r4);

     label04:
        goto label06;

     label05:
        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        virtualinvoke $r3.<com.android.server.net.LockdownVpnTracker: void onNetworkInfoChanged()>();

     label06:
        exitmonitor r1;

     label07:
        return;

     label08:
        $r6 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r6;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void notifyNetworkLosing(com.android.server.connectivity.NetworkAgentInfo, long)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        long l0, $l1, $l2;
        int $i3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        l0 := @parameter1: long;

        $l1 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: long getLingerExpiry()>();

        $l2 = $l1 - l0;

        $i3 = (int) $l2;

        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int,int)>(r1, 524291, $i3);

        return;
    }

    private void onPackageAdded(java.lang.String, int)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, r2, $r9;
        int i0;
        boolean $z0;
        java.lang.StringBuilder $r4;
        com.android.server.connectivity.PermissionMonitor $r10;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z0 != 0 goto label2;

        if i0 >= 0 goto label1;

        goto label2;

     label1:
        $r10 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        virtualinvoke $r10.<com.android.server.connectivity.PermissionMonitor: void onPackageAdded(java.lang.String,int)>(r1, i0);

        return;

     label2:
        r2 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid package in onPackageAdded: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" | ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r2, $r9);

        return;
    }

    private void onPackageRemoved(java.lang.String, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, $z1, $z2;
        com.android.server.connectivity.Vpn r1;
        java.lang.String r2, $r8, $r12, $r17, r20, r24;
        java.lang.StringBuilder $r3, r22;
        com.android.server.connectivity.PermissionMonitor $r9;
        android.util.SparseArray $r10, r21;
        java.lang.Object $r11;
        android.security.KeyStore $r18;
        java.lang.Throwable $r19;
        int i2, i3;

        r0 := @this: com.android.server.ConnectivityService;

        r20 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        z0 := @parameter2: boolean;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r20);

        if $z1 != 0 goto label14;

        if i2 >= 0 goto label01;

        goto label14;

     label01:
        $r9 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        virtualinvoke $r9.<com.android.server.connectivity.PermissionMonitor: void onPackageRemoved(int)>(i2);

        i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        r21 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r21;

     label02:
        $r10 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r11 = virtualinvoke $r10.<android.util.SparseArray: java.lang.Object get(int)>(i3);

        r1 = (com.android.server.connectivity.Vpn) $r11;

     label03:
        if r1 != null goto label06;

     label04:
        exitmonitor r21;

     label05:
        return;

     label06:
        $r12 = virtualinvoke r1.<com.android.server.connectivity.Vpn: java.lang.String getAlwaysOnPackage()>();

        $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r12, r20);

        if $z2 == 0 goto label09;

     label07:
        if z0 != 0 goto label09;

     label08:
        r2 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r22 = new java.lang.StringBuilder;

        specialinvoke r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing always-on VPN package ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        virtualinvoke r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r17 = virtualinvoke r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r2, $r17);

        $r18 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        virtualinvoke r1.<com.android.server.connectivity.Vpn: boolean setAlwaysOnPackage(java.lang.String,boolean,java.util.List,android.security.KeyStore)>(null, 0, null, $r18);

     label09:
        exitmonitor r21;

     label10:
        return;

     label11:
        $r19 := @caughtexception;

     label12:
        exitmonitor r21;

     label13:
        throw $r19;

     label14:
        r24 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid package in onPackageRemoved: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" | ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r24, $r8);

        return;

        catch java.lang.Throwable from label02 to label03 with label11;
        catch java.lang.Throwable from label04 to label05 with label11;
        catch java.lang.Throwable from label06 to label07 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    private void onPackageReplaced(java.lang.String, int)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r8, $r11, $r16, r19, r23;
        java.lang.StringBuilder r2, $r3;
        boolean $z0, $z1;
        android.util.SparseArray $r9, r20;
        java.lang.Object $r10;
        android.security.KeyStore $r17;
        java.lang.Throwable $r18;
        int i2, i3;
        com.android.server.connectivity.Vpn r21;

        r0 := @this: com.android.server.ConnectivityService;

        r19 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r19);

        if $z0 != 0 goto label12;

        if i2 >= 0 goto label01;

        goto label12;

     label01:
        i3 = staticinvoke <android.os.UserHandle: int getUserId(int)>(i2);

        r20 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r20;

     label02:
        $r9 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r10 = virtualinvoke $r9.<android.util.SparseArray: java.lang.Object get(int)>(i3);

        r21 = (com.android.server.connectivity.Vpn) $r10;

     label03:
        if r21 != null goto label06;

     label04:
        exitmonitor r20;

     label05:
        return;

     label06:
        $r11 = virtualinvoke r21.<com.android.server.connectivity.Vpn: java.lang.String getAlwaysOnPackage()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r11, r19);

        if $z1 == 0 goto label07;

        r1 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Restarting always-on VPN package ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for user ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r16 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r1, $r16);

        $r17 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        virtualinvoke r21.<com.android.server.connectivity.Vpn: boolean startAlwaysOnVpn(android.security.KeyStore)>($r17);

     label07:
        exitmonitor r20;

     label08:
        return;

     label09:
        $r18 := @caughtexception;

     label10:
        exitmonitor r20;

     label11:
        throw $r18;

     label12:
        r23 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid package in onPackageReplaced: ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" | ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r23, $r8);

        return;

        catch java.lang.Throwable from label02 to label03 with label09;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    private void onUserAdded(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2;
        android.net.Network r1;
        android.util.SparseArray r2, $r5, $r6;
        com.android.server.connectivity.PermissionMonitor $r3;
        com.android.server.connectivity.NetworkAgentInfo $r4;
        java.lang.Object $r7;
        android.net.NetworkCapabilities $r8;
        java.lang.Throwable $r9;
        com.android.server.connectivity.Vpn r10;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        virtualinvoke $r3.<com.android.server.connectivity.PermissionMonitor: void onUserAdded(int)>(i0);

        $r4 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.Network getNetwork(com.android.server.connectivity.NetworkAgentInfo)>($r4);

        r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r2;

     label01:
        $r5 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        i1 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label06;

     label04:
        $r6 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r10 = (com.android.server.connectivity.Vpn) $r7;

        virtualinvoke r10.<com.android.server.connectivity.Vpn: void onUserAdded(int)>(i0);

        $r8 = virtualinvoke r10.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities updateCapabilities(android.net.Network)>(r1);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateVpnCapabilities(com.android.server.connectivity.Vpn,android.net.NetworkCapabilities)>(r10, $r8);

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        exitmonitor r2;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void onUserRemoved(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2;
        android.net.Network r1;
        android.util.SparseArray r2, $r5, $r6;
        com.android.server.connectivity.PermissionMonitor $r3;
        com.android.server.connectivity.NetworkAgentInfo $r4;
        java.lang.Object $r7;
        android.net.NetworkCapabilities $r8;
        java.lang.Throwable $r9;
        com.android.server.connectivity.Vpn r10;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        virtualinvoke $r3.<com.android.server.connectivity.PermissionMonitor: void onUserRemoved(int)>(i0);

        $r4 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.Network getNetwork(com.android.server.connectivity.NetworkAgentInfo)>($r4);

        r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r2;

     label01:
        $r5 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        i1 = virtualinvoke $r5.<android.util.SparseArray: int size()>();

     label02:
        i2 = 0;

     label03:
        if i2 >= i1 goto label06;

     label04:
        $r6 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r7 = virtualinvoke $r6.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        r10 = (com.android.server.connectivity.Vpn) $r7;

        virtualinvoke r10.<com.android.server.connectivity.Vpn: void onUserRemoved(int)>(i0);

        $r8 = virtualinvoke r10.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities updateCapabilities(android.net.Network)>(r1);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateVpnCapabilities(com.android.server.connectivity.Vpn,android.net.NetworkCapabilities)>(r10, $r8);

     label05:
        i2 = i2 + 1;

        goto label03;

     label06:
        exitmonitor r2;

     label07:
        return;

     label08:
        $r9 := @caughtexception;

     label09:
        exitmonitor r2;

     label10:
        throw $r9;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void onUserStart(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r2, $r10;
        java.lang.Object $r3;
        com.android.server.connectivity.Vpn $r4, r14;
        com.android.server.ConnectivityService$InternalHandler $r5;
        android.os.Looper $r6;
        android.security.KeyStore $r7;
        android.os.INetworkManagementService $r8;
        android.content.Context $r9;
        android.os.UserManager $r11;
        android.content.pm.UserInfo $r12;
        boolean $z0, $z1;
        java.lang.Throwable $r13;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r4 = (com.android.server.connectivity.Vpn) $r3;

        if $r4 == null goto label3;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Starting user already has a VPN");

        exitmonitor r1;

     label2:
        return;

     label3:
        r14 = new com.android.server.connectivity.Vpn;

        $r5 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r6 = virtualinvoke $r5.<com.android.server.ConnectivityService$InternalHandler: android.os.Looper getLooper()>();

        $r9 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r8 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        $r7 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        specialinvoke r14.<com.android.server.connectivity.Vpn: void <init>(android.os.Looper,android.content.Context,android.os.INetworkManagementService,int,android.security.KeyStore)>($r6, $r9, $r8, i0, $r7);

        $r10 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, r14);

        $r11 = r0.<com.android.server.ConnectivityService: android.os.UserManager mUserManager>;

        $r12 = virtualinvoke $r11.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke $r12.<android.content.pm.UserInfo: boolean isPrimary()>();

        if $z0 == 0 goto label4;

        $z1 = staticinvoke <com.android.server.net.LockdownVpnTracker: boolean isEnabled()>();

        if $z1 == 0 goto label4;

        virtualinvoke r0.<com.android.server.ConnectivityService: boolean updateLockdownVpn()>();

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r13 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r13;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void onUserStop(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r2, $r4;
        java.lang.Object $r3;
        java.lang.Throwable $r5;
        com.android.server.connectivity.Vpn r6;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r6 = (com.android.server.connectivity.Vpn) $r3;

     label2:
        if r6 != null goto label5;

     label3:
        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Stopped user has no VPN");

        exitmonitor r1;

     label4:
        return;

     label5:
        virtualinvoke r6.<com.android.server.connectivity.Vpn: void onUserStopped()>();

        $r4 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        virtualinvoke $r4.<android.util.SparseArray: void delete(int)>(i0);

        exitmonitor r1;

     label6:
        return;

     label7:
        $r5 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void onUserUnlocked(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1;
        android.os.UserManager $r3;
        android.content.pm.UserInfo $r4;
        boolean $z0, $z2;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.os.UserManager mUserManager>;

        $r4 = virtualinvoke $r3.<android.os.UserManager: android.content.pm.UserInfo getUserInfo(int)>(i0);

        $z0 = virtualinvoke $r4.<android.content.pm.UserInfo: boolean isPrimary()>();

        if $z0 == 0 goto label3;

        $z2 = staticinvoke <com.android.server.net.LockdownVpnTracker: boolean isEnabled()>();

        if $z2 == 0 goto label3;

        virtualinvoke r0.<com.android.server.ConnectivityService: boolean updateLockdownVpn()>();

     label2:
        goto label4;

     label3:
        specialinvoke r0.<com.android.server.ConnectivityService: boolean startAlwaysOnVpn(int)>(i0);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void processLinkPropertiesFromAgent(com.android.server.connectivity.NetworkAgentInfo, android.net.LinkProperties)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.LinkProperties r2;
        com.android.server.connectivity.Nat464Xlat $r3;
        android.net.IpPrefix $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter1: android.net.LinkProperties;

        virtualinvoke r2.<android.net.LinkProperties: void ensureDirectlyConnectedRoutes()>();

        $r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        $r4 = virtualinvoke r2.<android.net.LinkProperties: android.net.IpPrefix getNat64Prefix()>();

        virtualinvoke $r3.<com.android.server.connectivity.Nat464Xlat: void setNat64PrefixFromRa(android.net.IpPrefix)>($r4);

        return;
    }

    private void processListenRequests(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void processNewlyLostListenRequests(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(r1, 524294);

        specialinvoke r0.<com.android.server.ConnectivityService: void processNewlySatisfiedListenRequests(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        return;
    }

    private void processNewlyLostListenRequests(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        java.util.Iterator r2;
        com.android.server.ConnectivityService$NetworkRequestInfo r3;
        android.net.NetworkRequest r4, $r8;
        java.util.HashMap $r5;
        java.util.Collection $r6;
        java.lang.Object $r7;
        boolean $z0, $z1, $z2, $z3;
        int $i0, $i1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r5 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z3 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r7;

        r4 = r3.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z0 = virtualinvoke r4.<android.net.NetworkRequest: boolean isListen()>();

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $i0 = r4.<android.net.NetworkRequest: int requestId>;

        $z1 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isSatisfyingRequest(int)>($i0);

        if $z1 == 0 goto label3;

        $z2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfies(android.net.NetworkRequest)>(r4);

        if $z2 != 0 goto label3;

        $r8 = r3.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i1 = $r8.<android.net.NetworkRequest: int requestId>;

        virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: void removeRequest(int)>($i1);

        specialinvoke r0.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)>(r3, r1, 524292, 0);

     label3:
        goto label1;

     label4:
        return;
    }

    private void processNewlySatisfiedListenRequests(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        java.util.Iterator r2;
        com.android.server.ConnectivityService$NetworkRequestInfo r3;
        android.net.NetworkRequest r4;
        java.util.HashMap $r5;
        java.util.Collection $r6;
        java.lang.Object $r7;
        boolean $z0, $z1, $z2, $z4;
        int $i0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r5 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z4 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r7;

        r4 = r3.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z0 = virtualinvoke r4.<android.net.NetworkRequest: boolean isListen()>();

        if $z0 != 0 goto label2;

        goto label1;

     label2:
        $z1 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfies(android.net.NetworkRequest)>(r4);

        if $z1 == 0 goto label3;

        $i0 = r4.<android.net.NetworkRequest: int requestId>;

        $z2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isSatisfyingRequest(int)>($i0);

        if $z2 != 0 goto label3;

        virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean addRequest(android.net.NetworkRequest)>(r4);

        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkAvailable(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$NetworkRequestInfo)>(r1, r3);

     label3:
        goto label1;

     label4:
        return;
    }

    private static void putParcelable(android.os.Bundle, android.os.Parcelable)
    {
        android.os.Bundle r0;
        android.os.Parcelable r1;
        java.lang.Class $r2;
        java.lang.String $r3;

        r0 := @parameter0: android.os.Bundle;

        r1 := @parameter1: android.os.Parcelable;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>();

        virtualinvoke r0.<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>($r3, r1);

        return;
    }

    private void registerNetdEventCallback()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$Dependencies $r2;
        android.net.INetdEventCallback $r3;
        java.lang.String $r4, $r9;
        java.lang.Exception $r5;
        java.lang.StringBuilder $r6;
        android.net.IIpConnectivityMetrics r10;

        r0 := @this: com.android.server.ConnectivityService;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        r10 = virtualinvoke $r2.<com.android.server.ConnectivityService$Dependencies: android.net.IIpConnectivityMetrics getIpConnectivityMetrics()>();

        if r10 != null goto label1;

        $r4 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>($r4, "Missing IIpConnectivityMetrics");

        return;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.net.INetdEventCallback mNetdEventCallback>;

        interfaceinvoke r10.<android.net.IIpConnectivityMetrics: boolean addNetdEventCallback(int,android.net.INetdEventCallback)>(0, $r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error registering netd callback: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r9);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private void registerPrivateDnsSettingsCallbacks()
    {
        com.android.server.ConnectivityService r0;
        android.net.Uri[] r1;
        int i0, i1;
        android.net.Uri r2;
        com.android.server.ConnectivityService$SettingsObserver $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 = staticinvoke <com.android.server.connectivity.DnsManager: android.net.Uri[] getPrivateDnsSettingsUris()>();

        i0 = lengthof r1;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r2 = r1[i1];

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$SettingsObserver mSettingsObserver>;

        virtualinvoke $r3.<com.android.server.ConnectivityService$SettingsObserver: void observe(android.net.Uri,int)>(r2, 37);

        i1 = i1 + 1;

        goto label1;

     label2:
        return;
    }

    private void registerSettingsCallbacks()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$SettingsObserver $r1, $r3, $r5;
        android.net.Uri $r2, $r4, $r6;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$SettingsObserver mSettingsObserver>;

        $r2 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("http_proxy");

        virtualinvoke $r1.<com.android.server.ConnectivityService$SettingsObserver: void observe(android.net.Uri,int)>($r2, 9);

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$SettingsObserver mSettingsObserver>;

        $r4 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("mobile_data_always_on");

        virtualinvoke $r3.<com.android.server.ConnectivityService$SettingsObserver: void observe(android.net.Uri,int)>($r4, 30);

        $r5 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$SettingsObserver mSettingsObserver>;

        $r6 = staticinvoke <android.provider.Settings$Global: android.net.Uri getUriFor(java.lang.String)>("wifi_always_requested");

        virtualinvoke $r5.<com.android.server.ConnectivityService$SettingsObserver: void observe(android.net.Uri,int)>($r6, 30);

        return;
    }

    private void releasePendingNetworkRequestWithDelay(android.app.PendingIntent)
    {
        com.android.server.ConnectivityService r0;
        android.app.PendingIntent r1;
        com.android.server.ConnectivityService$InternalHandler r2;
        int $i0, $i1;
        android.os.Message $r3;
        long $l2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.app.PendingIntent;

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int getCallingUid()>();

        $r3 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(27, $i0, 0, r1);

        $i1 = r0.<com.android.server.ConnectivityService: int mReleasePendingIntentDelayMs>;

        $l2 = (long) $i1;

        virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r3, $l2);

        return;
    }

    private void rematchAllNetworksAndRequests()
    {
        com.android.server.ConnectivityService r0;
        long l0;
        com.android.server.ConnectivityService$NetworkReassignment r1;
        boolean $z0, $z1;
        java.lang.String $r2, $r3;

        r0 := @this: com.android.server.ConnectivityService;

        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkReassignment computeNetworkReassignment()>();

        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 != 0 goto label2;

        $z1 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r3 = virtualinvoke r1.<com.android.server.ConnectivityService$NetworkReassignment: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r3);

        goto label3;

     label2:
        $r2 = virtualinvoke r1.<com.android.server.ConnectivityService$NetworkReassignment: java.lang.String debugString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r2);

     label3:
        specialinvoke r0.<com.android.server.ConnectivityService: void applyNetworkReassignment(com.android.server.ConnectivityService$NetworkReassignment,long)>(r1, l0);

        return;
    }

    private void rematchForAvoidBadWifiUpdate()
    {
        com.android.server.ConnectivityService r0;
        java.util.Iterator r1;
        com.android.server.connectivity.NetworkAgentInfo r2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;
        android.net.NetworkCapabilities $r6;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void rematchAllNetworksAndRequests()>();

        $r3 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.connectivity.NetworkAgentInfo) $r5;

        $r6 = r2.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z1 = virtualinvoke $r6.<android.net.NetworkCapabilities: boolean hasTransport(int)>(1);

        if $z1 == 0 goto label2;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(com.android.server.connectivity.NetworkAgentInfo)>(r2);

     label2:
        goto label1;

     label3:
        return;
    }

    private void removeDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties $r1;
        boolean $z0, $z1;
        android.os.INetworkManagementService $r2;
        java.lang.Exception $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r7, r9;
        com.android.server.connectivity.NetworkAgentInfo r8;
        android.net.NetworkCapabilities r10;

        r0 := @this: com.android.server.ConnectivityService;

        r8 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r1 = r8.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        r9 = virtualinvoke $r1.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        r10 = r8.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        if r9 == null goto label4;

        $z0 = virtualinvoke r10.<android.net.NetworkCapabilities: boolean hasTransport(int)>(0);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r10.<android.net.NetworkCapabilities: boolean hasTransport(int)>(1);

        if $z1 == 0 goto label4;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        interfaceinvoke $r2.<android.os.INetworkManagementService: void removeIdleTimer(java.lang.String)>(r9);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in removeDataActivityTracking ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r7);

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    private com.android.server.ConnectivityService$NetworkRequestInfo[] requestsSortedById()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo[] r1, $r4;
        java.util.HashMap $r2;
        java.util.Collection $r3;
        java.lang.Object[] $r5;
        com.android.server.'-$$Lambda$ConnectivityService$GX97FVWNZr22L2SZWTK3UYHOOe0' $r6;
        java.util.Comparator $r7;
        java.util.function.ToIntFunction r8;

        r0 := @this: com.android.server.ConnectivityService;

        $r2 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.util.Collection values()>();

        $r4 = newarray (com.android.server.ConnectivityService$NetworkRequestInfo)[0];

        $r5 = interfaceinvoke $r3.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        r1 = (com.android.server.ConnectivityService$NetworkRequestInfo[]) $r5;

        $r6 = <com.android.server._$$Lambda$ConnectivityService$GX97FVWNZr22L2SZWTK3UYHOOe0: com.android.server.'-$$Lambda$ConnectivityService$GX97FVWNZr22L2SZWTK3UYHOOe0' INSTANCE>;

        r8 = (java.util.function.ToIntFunction) $r6;

        $r7 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>(r8);

        staticinvoke <java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>(r1, $r7);

        return r1;
    }

    private boolean requiresVpnIsolation(com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkCapabilities, android.net.LinkProperties)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkCapabilities r2;
        android.net.LinkProperties r3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, z6;
        android.net.NetworkAgentConfig $r4;
        int $i0;
        java.lang.String $r5;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter1: android.net.NetworkCapabilities;

        r3 := @parameter2: android.net.LinkProperties;

        z6 = 0;

        if r2 == null goto label5;

        if r3 != null goto label1;

        goto label5;

     label1:
        $z0 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z0 == 0 goto label4;

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $z1 = $r4.<android.net.NetworkAgentConfig: boolean allowBypass>;

        if $z1 != 0 goto label4;

        $i0 = virtualinvoke r2.<android.net.NetworkCapabilities: int getOwnerUid()>();

        if $i0 == 1000 goto label4;

        $r5 = virtualinvoke r3.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        if $r5 == null goto label4;

        $z2 = virtualinvoke r3.<android.net.LinkProperties: boolean hasIPv4DefaultRoute()>();

        if $z2 != 0 goto label2;

        $z5 = virtualinvoke r3.<android.net.LinkProperties: boolean hasIpv4UnreachableDefaultRoute()>();

        if $z5 == 0 goto label4;

     label2:
        $z3 = virtualinvoke r3.<android.net.LinkProperties: boolean hasIPv6DefaultRoute()>();

        if $z3 != 0 goto label3;

        $z4 = virtualinvoke r3.<android.net.LinkProperties: boolean hasIpv6UnreachableDefaultRoute()>();

        if $z4 == 0 goto label4;

     label3:
        z6 = 1;

        goto label4;

     label4:
        return z6;

     label5:
        return 0;
    }

    private void restrictBackgroundRequestForCaller(android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1;
        com.android.server.connectivity.PermissionMonitor $r2;
        int $i0;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkCapabilities;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = virtualinvoke $r2.<com.android.server.connectivity.PermissionMonitor: boolean hasUseBackgroundNetworksPermission(int)>($i0);

        if $z0 != 0 goto label1;

        virtualinvoke r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(19);

     label1:
        return;
    }

    private void restrictRequestUidsForCallerAndSetRequestorInfo(android.net.NetworkCapabilities, int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1;
        int i0;
        java.lang.String r2;
        boolean $z0;
        int[] $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkSettingsPermission()>();

        if $z0 != 0 goto label1;

        virtualinvoke r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setSingleUid(int)>(i0);

     label1:
        virtualinvoke r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setRequestorUidAndPackageName(int,java.lang.String)>(i0, r2);

        $r4 = newarray (int)[0];

        virtualinvoke r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setAdministratorUids(int[])>($r4);

        virtualinvoke r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setOwnerUid(int)>(-1);

        return;
    }

    private void scheduleReleaseNetworkTransitionWakelock()
    {
        com.android.server.ConnectivityService r0;
        android.os.PowerManager$WakeLock $r1;
        boolean $z0;
        com.android.server.ConnectivityService$InternalHandler $r2, $r3, $r4;
        java.lang.Throwable $r5;
        android.os.Message r6;

        r0 := @this: com.android.server.ConnectivityService;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mNetTransitionWakeLock>;

        $z0 = virtualinvoke $r1.<android.os.PowerManager$WakeLock: boolean isHeld()>();

        if $z0 != 0 goto label3;

        exitmonitor r0;

     label2:
        return;

     label3:
        exitmonitor r0;

     label4:
        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        virtualinvoke $r2.<com.android.server.ConnectivityService$InternalHandler: void removeMessages(int)>(24);

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        r6 = virtualinvoke $r3.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int)>(8);

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        virtualinvoke $r4.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>(r6, 1000L);

        return;

     label5:
        $r5 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void scheduleUnvalidatedPrompt(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        boolean $z0;
        android.net.Network $r2, $r6;
        android.os.Message $r3;
        java.lang.StringBuilder $r4;
        java.lang.String $r8;
        com.android.server.ConnectivityService$InternalHandler r10;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 == 0 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("scheduleUnvalidatedPrompt ");

        $r6 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r8);

     label1:
        r10 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r2 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $r3 = virtualinvoke r10.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(29, $r2);

        virtualinvoke r10.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r3, 8000L);

        return;
    }

    private void sendAllRequestsToProvider(com.android.server.ConnectivityService$NetworkProviderInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkProviderInfo r1;
        java.util.Iterator r2;
        com.android.server.ConnectivityService$NetworkRequestInfo r3;
        com.android.server.connectivity.NetworkAgentInfo r4;
        java.util.HashMap $r5;
        java.util.Collection $r6;
        java.lang.Object $r7;
        android.net.NetworkRequest $r8, $r9;
        boolean $z0, $z1;
        int i0, i1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$NetworkProviderInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        $r5 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r6 = virtualinvoke $r5.<java.util.HashMap: java.util.Collection values()>();

        r2 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r3 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r7;

        $r8 = r3.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z0 = virtualinvoke $r8.<android.net.NetworkRequest: boolean isListen()>();

        if $z0 == 0 goto label2;

        goto label1;

     label2:
        r4 = r3.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier>;

        if r4 == null goto label3;

        i0 = virtualinvoke r4.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        i1 = r4.<com.android.server.connectivity.NetworkAgentInfo: int factorySerialNumber>;

        goto label4;

     label3:
        i0 = 0;

        i1 = -1;

     label4:
        $r9 = r3.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke r1.<com.android.server.ConnectivityService$NetworkProviderInfo: void requestNetwork(android.net.NetworkRequest,int,int)>($r9, i0, i1);

        goto label1;

     label5:
        return;
    }

    private void sendDataActivityBroadcast(int, boolean, long)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;
        android.content.Intent $r1;
        android.os.UserHandle $r5;
        android.content.Context $r6;
        java.lang.Throwable $r7;
        long l1, l2;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        l1 := @parameter2: long;

        $r1 = new android.content.Intent;

        specialinvoke $r1.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.DATA_ACTIVITY_CHANGE");

        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("deviceType", i0);

        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("isActive", z0);

        virtualinvoke $r1.<android.content.Intent: android.content.Intent putExtra(java.lang.String,long)>("tsNanos", l1);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r6 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r6.<android.content.Context: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>($r1, $r5, "android.permission.RECEIVE_DATA_ACTIVITY_CHANGE", null, null, 0, null, null);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r7 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void sendGeneralBroadcast(android.net.NetworkInfo, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;
        java.lang.String r2;
        android.content.Intent $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        r2 := @parameter1: java.lang.String;

        $r3 = specialinvoke r0.<com.android.server.ConnectivityService: android.content.Intent makeGeneralIntent(android.net.NetworkInfo,java.lang.String)>(r1, r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>($r3);

        return;
    }

    private void sendInetConditionBroadcast(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendGeneralBroadcast(android.net.NetworkInfo,java.lang.String)>(r1, "android.net.conn.INET_CONDITION_ACTION");

        return;
    }

    private void sendIntent(android.app.PendingIntent, android.content.Intent)
    {
        com.android.server.ConnectivityService r0;
        android.app.PendingIntent r1;
        java.lang.StringBuilder r2, $r9;
        android.os.PowerManager$WakeLock $r3, $r13;
        java.lang.String $r6, $r12;
        android.content.Context $r7;
        android.app.PendingIntent$CanceledException $r8;
        android.content.Intent r14;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.app.PendingIntent;

        r14 := @parameter1: android.content.Intent;

        $r3 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mPendingIntentWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void acquire()>();

     label1:
        r2 = new java.lang.StringBuilder;

        specialinvoke r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sending ");

        virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r6);

        $r7 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke r1.<android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)>($r7, 0, r14, r0, null);

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not sent, it had been canceled.");

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r12);

        $r13 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mPendingIntentWakeLock>;

        virtualinvoke $r13.<android.os.PowerManager$WakeLock: void release()>();

        virtualinvoke r0.<com.android.server.ConnectivityService: void releasePendingNetworkRequest(android.app.PendingIntent)>(r1);

     label4:
        return;

        catch android.app.PendingIntent$CanceledException from label1 to label2 with label3;
    }

    private void sendPendingIntentForRequest(com.android.server.ConnectivityService$NetworkRequestInfo, com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;
        com.android.server.connectivity.NetworkAgentInfo r2;
        int i0;
        boolean $z0;
        android.content.Intent $r4;
        android.net.Network $r5;
        android.net.NetworkRequest $r7;
        android.app.PendingIntent $r9;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        r2 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        i0 := @parameter2: int;

        if i0 != 524290 goto label1;

        $z0 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean mPendingIntentSent>;

        if $z0 != 0 goto label1;

        $r4 = new android.content.Intent;

        specialinvoke $r4.<android.content.Intent: void <init>()>();

        $r5 = r2.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.extra.NETWORK", $r5);

        $r7 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r4.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.extra.NETWORK_REQUEST", $r7);

        r1.<com.android.server.ConnectivityService$NetworkRequestInfo: boolean mPendingIntentSent> = 1;

        $r9 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.app.PendingIntent mPendingIntent>;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendIntent(android.app.PendingIntent,android.content.Intent)>($r9, $r4);

     label1:
        return;
    }

    private void sendStickyBroadcast(android.content.Intent)
    {
        com.android.server.ConnectivityService r0;
        long l0;
        com.android.internal.app.IBatteryStats r1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r4, $r8, $r11, $r13, $r14;
        android.os.Parcelable $r5;
        com.android.server.ConnectivityService$Dependencies $r6;
        int $i1;
        android.net.NetworkInfo$State $r7;
        java.lang.Throwable $r15, $r17;
        android.os.RemoteException $r16;
        android.content.Intent r18, r19;
        java.lang.StringBuilder r20;
        android.os.Bundle r21;
        android.net.NetworkInfo r22;
        android.app.BroadcastOptions r23;
        android.content.Context $r25;
        android.os.UserHandle $r26;

        r0 := @this: com.android.server.ConnectivityService;

        r18 := @parameter0: android.content.Intent;

        entermonitor r0;

     label01:
        $z0 = r0.<com.android.server.ConnectivityService: boolean mSystemReady>;

        if $z0 != 0 goto label02;

        $r14 = virtualinvoke r18.<android.content.Intent: java.lang.String getAction()>();

        $z2 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>("android.net.conn.CONNECTIVITY_CHANGE");

        if $z2 == 0 goto label02;

        r19 = new android.content.Intent;

        specialinvoke r19.<android.content.Intent: void <init>(android.content.Intent)>(r18);

        r0.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast> = r19;

     label02:
        virtualinvoke r18.<android.content.Intent: android.content.Intent addFlags(int)>(67108864);

        $z3 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z3 == 0 goto label03;

        r20 = new java.lang.StringBuilder;

        specialinvoke r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sendStickyBroadcast: action=");

        $r11 = virtualinvoke r18.<android.content.Intent: java.lang.String getAction()>();

        virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r13);

     label03:
        r21 = null;

     label04:
        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label05:
        $r3 = "android.net.conn.CONNECTIVITY_CHANGE";

        $r4 = virtualinvoke r18.<android.content.Intent: java.lang.String getAction()>();

        $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z1 == 0 goto label10;

        $r5 = virtualinvoke r18.<android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)>("networkInfo");

        r22 = (android.net.NetworkInfo) $r5;

        r23 = staticinvoke <android.app.BroadcastOptions: android.app.BroadcastOptions makeBasic()>();

        virtualinvoke r23.<android.app.BroadcastOptions: void setMaxManifestReceiverApiLevel(int)>(23);

        r21 = virtualinvoke r23.<android.app.BroadcastOptions: android.os.Bundle toBundle()>();

        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        r1 = virtualinvoke $r6.<com.android.server.ConnectivityService$Dependencies: com.android.internal.app.IBatteryStats getBatteryStatsService()>();

     label06:
        $i1 = virtualinvoke r18.<android.content.Intent: int getIntExtra(java.lang.String,int)>("networkType", -1);

        $r7 = virtualinvoke r22.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        $r8 = virtualinvoke $r7.<android.net.NetworkInfo$State: java.lang.String toString()>();

        interfaceinvoke r1.<com.android.internal.app.IBatteryStats: void noteConnectivityChanged(int,java.lang.String)>($i1, $r8);

     label07:
        goto label09;

     label08:
        $r16 := @caughtexception;

     label09:
        virtualinvoke r18.<android.content.Intent: android.content.Intent addFlags(int)>(2097152);

     label10:
        $r25 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r26 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r25.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.os.Bundle)>(r18, $r26, r21);

     label11:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label12:
        exitmonitor r0;

     label13:
        return;

     label14:
        $r17 := @caughtexception;

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

     label16:
        throw $r17;

     label17:
        $r15 := @caughtexception;

     label18:
        exitmonitor r0;

     label19:
        throw $r15;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label02 to label03 with label17;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label05 to label06 with label17;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch java.lang.Throwable from label06 to label07 with label17;
        catch java.lang.Throwable from label09 to label10 with label17;
        catch java.lang.Throwable from label10 to label11 with label14;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label12 to label13 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label16 to label17 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    private void sendUpdatedScoreToFactories(android.net.NetworkRequest, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest r1;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2;
        java.lang.String $r6, $r8;
        java.lang.Object $r9;
        com.android.server.ConnectivityService$NetworkProviderInfo $r10;
        com.android.server.connectivity.NetworkAgentInfo r11;
        int i0, i1;
        java.util.HashMap $r13;
        java.util.Collection $r14;
        java.util.Iterator r15;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkRequest;

        r11 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        if r11 == null goto label1;

        i0 = virtualinvoke r11.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        i1 = r11.<com.android.server.connectivity.NetworkAgentInfo: int factorySerialNumber>;

        goto label2;

     label1:
        i0 = 0;

        i1 = 0;

     label2:
        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 != 0 goto label3;

        $z1 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z1 == 0 goto label4;

     label3:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("sending new Min Network Score(");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("): ");

        $r6 = virtualinvoke r1.<android.net.NetworkRequest: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r8);

     label4:
        $r13 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkProviderInfos>;

        $r14 = virtualinvoke $r13.<java.util.HashMap: java.util.Collection values()>();

        r15 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label6;

        $r9 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>();

        $r10 = (com.android.server.ConnectivityService$NetworkProviderInfo) $r9;

        virtualinvoke $r10.<com.android.server.ConnectivityService$NetworkProviderInfo: void requestNetwork(android.net.NetworkRequest,int,int)>(r1, i0, i1);

        goto label5;

     label6:
        return;
    }

    private void sendUpdatedScoreToFactories(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkRequest r2;
        int $i0, i1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        i1 = 0;

     label1:
        $i0 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        if i1 >= $i0 goto label4;

        r2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkRequest requestAt(int)>(i1);

        $z0 = virtualinvoke r2.<android.net.NetworkRequest: boolean isListen()>();

        if $z0 == 0 goto label2;

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(android.net.NetworkRequest,com.android.server.connectivity.NetworkAgentInfo)>(r2, r1);

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        return;
    }

    private void setLockdownTracker(com.android.server.net.LockdownVpnTracker)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.net.LockdownVpnTracker r1, r2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.net.LockdownVpnTracker;

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker>;

        r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker> = null;

        if r2 == null goto label1;

        virtualinvoke r2.<com.android.server.net.LockdownVpnTracker: void shutdown()>();

     label1:
        if r1 == null goto label2;

        r0.<com.android.server.ConnectivityService: com.android.server.net.LockdownVpnTracker mLockdownTracker> = r1;

        virtualinvoke r1.<com.android.server.net.LockdownVpnTracker: void init()>();

     label2:
        return;
    }

    private void setupDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties $r1;
        android.net.NetworkCapabilities $r2, $r3;
        boolean $z0, $z1;
        android.content.Context $r4, $r7;
        android.content.ContentResolver $r5, $r8;
        android.os.INetworkManagementService $r6;
        java.lang.Exception $r9;
        java.lang.StringBuilder $r10;
        java.lang.String $r13, r15;
        com.android.server.connectivity.NetworkAgentInfo r14;
        int i0;
        byte b1;

        r0 := @this: com.android.server.ConnectivityService;

        r14 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r1 = r14.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        r15 = virtualinvoke $r1.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $r2 = r14.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z0 = virtualinvoke $r2.<android.net.NetworkCapabilities: boolean hasTransport(int)>(0);

        if $z0 == 0 goto label1;

        $r7 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r8 = virtualinvoke $r7.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r8, "data_activity_timeout_mobile", 10);

        b1 = 0;

        goto label2;

     label1:
        $r3 = r14.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z1 = virtualinvoke $r3.<android.net.NetworkCapabilities: boolean hasTransport(int)>(1);

        if $z1 == 0 goto label7;

        $r4 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i0 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r5, "data_activity_timeout_wifi", 15);

        b1 = 1;

     label2:
        if i0 <= 0 goto label6;

        if r15 == null goto label6;

     label3:
        $r6 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        interfaceinvoke $r6.<android.os.INetworkManagementService: void addIdleTimer(java.lang.String,int,int)>(r15, i0, b1);

     label4:
        goto label6;

     label5:
        $r9 := @caughtexception;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in setupDataActivityTracking ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r13);

     label6:
        return;

     label7:
        return;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    private boolean shouldPromptUnvalidated(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        android.net.NetworkAgentConfig $r2, $r3, $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $z0 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean everValidated>;

        if $z0 != 0 goto label4;

        $z1 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean everCaptivePortalDetected>;

        if $z1 == 0 goto label1;

        goto label4;

     label1:
        $z2 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean partialConnectivity>;

        if $z2 == 0 goto label2;

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $z5 = $r4.<android.net.NetworkAgentConfig: boolean acceptPartialConnectivity>;

        if $z5 != 0 goto label2;

        return 1;

     label2:
        $r2 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $z3 = $r2.<android.net.NetworkAgentConfig: boolean explicitlySelected>;

        if $z3 == 0 goto label3;

        $r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $z4 = $r3.<android.net.NetworkAgentConfig: boolean acceptUnvalidated>;

        if $z4 != 0 goto label3;

        return 1;

     label3:
        return 0;

     label4:
        return 0;
    }

    private void showNetworkNotification(com.android.server.connectivity.NetworkAgentInfo, com.android.server.connectivity.NetworkNotificationManager$NotificationType)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkNotificationManager$NotificationType r1, $r31;
        int i0, $i1, $i2, $i3;
        int[] $r4;
        android.os.UserHandle $r5;
        android.content.Context $r6, $r14;
        android.net.Network $r7, $r9;
        com.android.server.connectivity.NetworkNotificationManager $r8;
        java.lang.String $r10, $r19, $r25, r27, r29, r32;
        android.net.Uri $r11;
        android.content.pm.PackageManager $r15;
        java.lang.StringBuilder $r16, $r22;
        android.net.NetworkAgentConfig $r21;
        com.android.server.connectivity.NetworkAgentInfo r26;
        boolean z0;
        android.content.Intent $r30;
        android.app.PendingIntent r33;

        r0 := @this: com.android.server.ConnectivityService;

        r26 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r1 := @parameter1: com.android.server.connectivity.NetworkNotificationManager$NotificationType;

        $r4 = <com.android.server.ConnectivityService$7: int[] $SwitchMap$com$android$server$connectivity$NetworkNotificationManager$NotificationType>;

        $i1 = virtualinvoke r1.<com.android.server.connectivity.NetworkNotificationManager$NotificationType: int ordinal()>();

        i0 = $r4[$i1];

        if i0 == 1 goto label4;

        if i0 == 2 goto label3;

        if i0 == 3 goto label2;

        if i0 == 4 goto label1;

        r27 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown notification type ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r27, $r25);

        return;

     label1:
        r29 = "android.net.conn.PROMPT_PARTIAL_CONNECTIVITY";

        $r21 = r26.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        z0 = $r21.<android.net.NetworkAgentConfig: boolean explicitlySelected>;

        goto label5;

     label2:
        r29 = "android.net.conn.PROMPT_LOST_VALIDATION";

        z0 = 1;

        goto label5;

     label3:
        r29 = "android.settings.WIRELESS_SETTINGS";

        z0 = 1;

        goto label5;

     label4:
        r29 = "android.net.conn.PROMPT_UNVALIDATED";

        z0 = 1;

     label5:
        $r30 = new android.content.Intent;

        specialinvoke $r30.<android.content.Intent: void <init>(java.lang.String)>(r29);

        $r31 = <com.android.server.connectivity.NetworkNotificationManager$NotificationType: com.android.server.connectivity.NetworkNotificationManager$NotificationType PRIVATE_DNS_BROKEN>;

        if r1 == $r31 goto label6;

        $r9 = r26.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i3 = $r9.<android.net.Network: int netId>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3);

        $r11 = staticinvoke <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>("netId", $r10, null);

        virtualinvoke $r30.<android.content.Intent: android.content.Intent setData(android.net.Uri)>($r11);

        virtualinvoke $r30.<android.content.Intent: android.content.Intent addFlags(int)>(268435456);

        $r14 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r15 = virtualinvoke $r14.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r32 = staticinvoke <com.android.server.ConnectivityService: java.lang.String getSettingsPackageName(android.content.pm.PackageManager)>($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r32);

        virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".wifi.WifiNoInternetDialog");

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r30.<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>(r32, $r19);

     label6:
        $r6 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r5 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        r33 = staticinvoke <android.app.PendingIntent: android.app.PendingIntent getActivityAsUser(android.content.Context,int,android.content.Intent,int,android.os.Bundle,android.os.UserHandle)>($r6, 0, $r30, 335544320, null, $r5);

        $r8 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkNotificationManager mNotifier>;

        $r7 = r26.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i2 = $r7.<android.net.Network: int netId>;

        virtualinvoke $r8.<com.android.server.connectivity.NetworkNotificationManager: void showNotification(int,com.android.server.connectivity.NetworkNotificationManager$NotificationType,com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkAgentInfo,android.app.PendingIntent,boolean)>($i2, r1, r26, null, r33, z0);

        return;
    }

    private boolean startAlwaysOnVpn(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r3;
        java.lang.String r2, $r9;
        boolean z0;
        java.lang.Object $r4;
        android.security.KeyStore $r5;
        java.lang.Throwable $r10;
        com.android.server.connectivity.Vpn r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r11 = (com.android.server.connectivity.Vpn) $r4;

     label2:
        if r11 != null goto label5;

     label3:
        r2 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no Vpn configuration");

        $r9 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r2, $r9);

        exitmonitor r1;

     label4:
        return 0;

     label5:
        $r5 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        z0 = virtualinvoke r11.<com.android.server.connectivity.Vpn: boolean startAlwaysOnVpn(android.security.KeyStore)>($r5);

        exitmonitor r1;

     label6:
        return z0;

     label7:
        $r10 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r10;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void teardownUnneededNetwork(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkRequest r2;
        int $i0, $i1, i2;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;
        com.android.internal.util.AsyncChannel $r8;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $i0 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int numRequestNetworkRequests()>();

        if $i0 == 0 goto label3;

        i2 = 0;

     label1:
        $i1 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        if i2 >= $i1 goto label3;

        r2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkRequest requestAt(int)>(i2);

        $z0 = virtualinvoke r2.<android.net.NetworkRequest: boolean isListen()>();

        if $z0 == 0 goto label2;

        i2 = i2 + 1;

        goto label1;

     label2:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dead network still had at least ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r7);

     label3:
        $r8 = r1.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r8.<com.android.internal.util.AsyncChannel: void disconnect()>();

        return;
    }

    private void throwIfLockdownEnabled()
    {
        com.android.server.ConnectivityService r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $z0 = r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unavailable in lockdown mode");

        throw $r1;
    }

    private static boolean toBool(int)
    {
        int i0;
        boolean z0;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private boolean unneeded(com.android.server.connectivity.NetworkAgentInfo, com.android.server.ConnectivityService$UnneededFor)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1, $r13;
        com.android.server.ConnectivityService$UnneededFor r2, $r9;
        java.util.Iterator r3;
        com.android.server.ConnectivityService$NetworkRequestInfo r4;
        int[] $r5;
        int $i0, $i1, $i2, $i3, i5, i6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        java.util.HashMap $r6;
        java.util.Collection $r7;
        java.lang.Object $r8;
        android.net.NetworkRequest $r10, $r11, $r12, $r14;
        java.lang.String $r15;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter1: com.android.server.ConnectivityService$UnneededFor;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        $r5 = <com.android.server.ConnectivityService$7: int[] $SwitchMap$com$android$server$ConnectivityService$UnneededFor>;

        $i0 = virtualinvoke r2.<com.android.server.ConnectivityService$UnneededFor: int ordinal()>();

        i5 = $r5[$i0];

        if i5 == 1 goto label02;

        if i5 == 2 goto label01;

        $r15 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>($r15, "Invalid reason. Cannot happen.");

        return 1;

     label01:
        i6 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int numForegroundNetworkRequests()>();

        goto label03;

     label02:
        i6 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int numRequestNetworkRequests()>();

     label03:
        $z0 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        if $z0 == 0 goto label10;

        $z1 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z1 != 0 goto label10;

        $z2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isLingering()>();

        if $z2 != 0 goto label10;

        if i6 <= 0 goto label04;

        goto label10;

     label04:
        $r6 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.util.Collection values()>();

        r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>();

     label05:
        $z7 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z7 == 0 goto label09;

        $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r4 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r8;

        $r9 = <com.android.server.ConnectivityService$UnneededFor: com.android.server.ConnectivityService$UnneededFor LINGER>;

        if r2 != $r9 goto label06;

        $r14 = r4.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z6 = virtualinvoke $r14.<android.net.NetworkRequest: boolean isBackgroundRequest()>();

        if $z6 == 0 goto label06;

        goto label05;

     label06:
        $r10 = r4.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z3 = virtualinvoke $r10.<android.net.NetworkRequest: boolean isRequest()>();

        if $z3 == 0 goto label08;

        $r11 = r4.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z4 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean satisfies(android.net.NetworkRequest)>($r11);

        if $z4 == 0 goto label08;

        $r12 = r4.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i1 = $r12.<android.net.NetworkRequest: int requestId>;

        $z5 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isSatisfyingRequest(int)>($i1);

        if $z5 != 0 goto label07;

        $r13 = r4.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier>;

        $i2 = virtualinvoke $r13.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        $i3 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScoreAsValidated()>();

        if $i2 >= $i3 goto label08;

     label07:
        return 0;

     label08:
        goto label05;

     label09:
        return 1;

     label10:
        return 0;
    }

    private void updateAllVpnsCapabilities()
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseArray r1, $r4, $r5;
        com.android.server.connectivity.Vpn r2;
        com.android.server.connectivity.NetworkAgentInfo $r3;
        int $i0, i1;
        java.lang.Object $r6;
        android.net.NetworkCapabilities $r7;
        java.lang.Throwable $r8;
        android.net.Network r9;

        r0 := @this: com.android.server.ConnectivityService;

        $r3 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        r9 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.Network getNetwork(com.android.server.connectivity.NetworkAgentInfo)>($r3);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

        i1 = 0;

     label1:
        $r4 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $i0 = virtualinvoke $r4.<android.util.SparseArray: int size()>();

        if i1 >= $i0 goto label3;

        $r5 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        r2 = (com.android.server.connectivity.Vpn) $r6;

        $r7 = virtualinvoke r2.<com.android.server.connectivity.Vpn: android.net.NetworkCapabilities updateCapabilities(android.net.Network)>(r9);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateVpnCapabilities(com.android.server.connectivity.Vpn,android.net.NetworkCapabilities)>(r2, $r7);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        exitmonitor r1;

     label4:
        return;

     label5:
        $r8 := @caughtexception;

     label6:
        exitmonitor r1;

     label7:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void updateCapabilities(int, com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkCapabilities r2, $r3, r8, r9;
        int i0, $i1, i2, i3;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z10, z11, z12, z13, z14, z15, z16, z17, $z18;
        android.net.Network $r4;
        com.android.server.connectivity.DnsManager $r5;
        int[] $r6;
        android.net.NetworkInfo $r7;

        r0 := @this: com.android.server.ConnectivityService;

        i2 := @parameter0: int;

        r1 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        r8 := @parameter2: android.net.NetworkCapabilities;

        r9 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities mixInCapabilities(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities)>(r1, r8);

        $r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r3, r9);

        if $z0 == 0 goto label01;

        return;

     label01:
        specialinvoke r0.<com.android.server.ConnectivityService: void updateNetworkPermissions(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities)>(r1, r9);

        r2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities getAndSetNetworkCapabilities(android.net.NetworkCapabilities)>(r9);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateUids(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities,android.net.NetworkCapabilities)>(r1, r2, r9);

        i0 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        z9 = 1;

        if i0 != i2 goto label06;

        $z4 = virtualinvoke r9.<android.net.NetworkCapabilities: boolean equalRequestableCapabilities(android.net.NetworkCapabilities)>(r2);

        if $z4 == 0 goto label06;

        specialinvoke r0.<com.android.server.ConnectivityService: void processListenRequests(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        z10 = virtualinvoke r2.<android.net.NetworkCapabilities: boolean hasCapability(int)>(21);

        $z5 = virtualinvoke r9.<android.net.NetworkCapabilities: boolean hasCapability(int)>(21);

        z11 = $z5 ^ 1;

        z12 = virtualinvoke r2.<android.net.NetworkCapabilities: boolean hasCapability(int)>(18);

        z13 = virtualinvoke r9.<android.net.NetworkCapabilities: boolean hasCapability(int)>(18);

        $z6 = z10 ^ 1;

        if $z6 != z11 goto label02;

        $z8 = z12 ^ 1;

        $z7 = z13 ^ 1;

        if $z8 == $z7 goto label05;

     label02:
        if z11 == 0 goto label03;

        i3 = 524297;

        goto label04;

     label03:
        i3 = 524298;

     label04:
        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(r1, i3);

        $r7 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateNetworkInfo(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkInfo)>(r1, $r7);

     label05:
        goto label07;

     label06:
        specialinvoke r0.<com.android.server.ConnectivityService: void rematchAllNetworksAndRequests()>();

        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(r1, 524294);

     label07:
        if r2 == null goto label14;

        z14 = virtualinvoke r2.<android.net.NetworkCapabilities: boolean isMetered()>();

        z15 = virtualinvoke r9.<android.net.NetworkCapabilities: boolean isMetered()>();

        if z14 == z15 goto label08;

        z16 = 1;

        goto label09;

     label08:
        z16 = 0;

     label09:
        if z16 == 0 goto label10;

        z17 = r0.<com.android.server.ConnectivityService: boolean mRestrictBackground>;

        specialinvoke r0.<com.android.server.ConnectivityService: void maybeNotifyNetworkBlocked(com.android.server.connectivity.NetworkAgentInfo,boolean,boolean,boolean,boolean)>(r1, z14, z15, z17, z17);

     label10:
        $z2 = virtualinvoke r2.<android.net.NetworkCapabilities: boolean hasCapability(int)>(18);

        $z3 = virtualinvoke r9.<android.net.NetworkCapabilities: boolean hasCapability(int)>(18);

        if $z2 == $z3 goto label11;

        goto label12;

     label11:
        z9 = 0;

     label12:
        if z16 != 0 goto label13;

        if z9 == 0 goto label14;

     label13:
        specialinvoke r0.<com.android.server.ConnectivityService: void notifyIfacesChangedForNetworkStats()>();

     label14:
        $z18 = virtualinvoke r9.<android.net.NetworkCapabilities: boolean hasTransport(int)>(4);

        if $z18 != 0 goto label15;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateAllVpnsCapabilities()>();

     label15:
        $z1 = virtualinvoke r9.<android.net.NetworkCapabilities: boolean equalsTransportTypes(android.net.NetworkCapabilities)>(r2);

        if $z1 != 0 goto label16;

        $r5 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i1 = $r4.<android.net.Network: int netId>;

        $r6 = virtualinvoke r9.<android.net.NetworkCapabilities: int[] getTransportTypes()>();

        virtualinvoke $r5.<com.android.server.connectivity.DnsManager: void updateTransportsForNetwork(int,int[])>($i1, $r6);

     label16:
        return;
    }

    private void updateDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1, r2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        if r1 == null goto label1;

        specialinvoke r0.<com.android.server.ConnectivityService: void setupDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo)>(r1);

     label1:
        if r2 == null goto label2;

        specialinvoke r0.<com.android.server.ConnectivityService: void removeDataActivityTracking(com.android.server.connectivity.NetworkAgentInfo)>(r2);

     label2:
        return;
    }

    private void updateDnses(android.net.LinkProperties, android.net.LinkProperties, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        java.util.List r1, $r8;
        com.android.server.connectivity.DnsManager $r6, $r7, $r21;
        android.net.Network $r9;
        boolean $z0, z1;
        java.lang.Exception $r10;
        java.lang.StringBuilder $r11, $r18;
        java.lang.String $r14, $r20;
        android.net.LinkProperties r15, r16;
        com.android.server.connectivity.NetworkAgentInfo r17;

        r0 := @this: com.android.server.ConnectivityService;

        r15 := @parameter0: android.net.LinkProperties;

        r16 := @parameter1: android.net.LinkProperties;

        i0 := @parameter2: int;

        if r16 == null goto label01;

        $z0 = virtualinvoke r15.<android.net.LinkProperties: boolean isIdenticalDnses(android.net.LinkProperties)>(r16);

        if $z0 == 0 goto label01;

        return;

     label01:
        r17 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        if r17 == null goto label02;

        $r9 = r17.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i1 = $r9.<android.net.Network: int netId>;

        if $i1 != i0 goto label02;

        z1 = 1;

        goto label03;

     label02:
        z1 = 0;

     label03:
        r1 = virtualinvoke r15.<android.net.LinkProperties: java.util.List getDnsServers()>();

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting DNS servers for network ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r20);

     label04:
        $r21 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        virtualinvoke $r21.<com.android.server.connectivity.DnsManager: void noteDnsServersForNetwork(int,android.net.LinkProperties)>(i0, r15);

     label05:
        if z1 == 0 goto label07;

     label06:
        $r7 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        $r8 = virtualinvoke r15.<android.net.LinkProperties: java.util.List getDnsServers()>();

        virtualinvoke $r7.<com.android.server.connectivity.DnsManager: void setDefaultDnsSystemProperties(java.util.Collection)>($r8);

     label07:
        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        virtualinvoke $r6.<com.android.server.connectivity.DnsManager: void flushVmDnsCache()>();

     label08:
        goto label10;

     label09:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in setDnsConfigurationForNetwork: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r14);

     label10:
        return;

        catch java.lang.Exception from label04 to label05 with label09;
        catch java.lang.Exception from label06 to label07 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
    }

    private void updateInetCondition(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        boolean $z0, $z1, $z2;
        int $i0;
        android.net.NetworkInfo $r2;
        byte b1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $z0 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean everValidated>;

        if $z0 != 0 goto label1;

        return;

     label1:
        $z1 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        if $z1 != 0 goto label2;

        return;

     label2:
        $z2 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean lastValidated>;

        if $z2 == 0 goto label3;

        b1 = 100;

        goto label4;

     label3:
        b1 = 0;

     label4:
        $i0 = r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished>;

        if b1 != $i0 goto label5;

        return;

     label5:
        r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = b1;

        $r2 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendInetConditionBroadcast(android.net.NetworkInfo)>($r2);

        return;
    }

    private void updateInterfaces(android.net.LinkProperties, android.net.LinkProperties, int, android.net.NetworkCapabilities, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        android.net.NetworkCapabilities r1;
        android.net.util.LinkPropertiesUtils$CompareResult $r2;
        java.util.List $r3, $r4, $r13, r33, r34;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r14;
        java.lang.String $r10, $r19, $r25, $r30, r38, r43;
        android.os.INetworkManagementService $r11, $r20;
        com.android.server.ConnectivityService$Dependencies $r12;
        java.lang.Exception $r21, $r26;
        java.lang.StringBuilder $r22, $r27, r39, r44;
        android.net.LinkProperties r31, r32;
        com.android.internal.app.IBatteryStats r36;
        java.util.Iterator r37, r42;

        r0 := @this: com.android.server.ConnectivityService;

        r31 := @parameter0: android.net.LinkProperties;

        r32 := @parameter1: android.net.LinkProperties;

        i0 := @parameter2: int;

        r1 := @parameter3: android.net.NetworkCapabilities;

        i1 := @parameter4: int;

        r33 = null;

        if r32 == null goto label01;

        r34 = virtualinvoke r32.<android.net.LinkProperties: java.util.List getAllInterfaceNames()>();

        goto label02;

     label01:
        r34 = null;

     label02:
        if r31 == null goto label03;

        r33 = virtualinvoke r31.<android.net.LinkProperties: java.util.List getAllInterfaceNames()>();

     label03:
        $r2 = new android.net.util.LinkPropertiesUtils$CompareResult;

        specialinvoke $r2.<android.net.util.LinkPropertiesUtils$CompareResult: void <init>(java.util.Collection,java.util.Collection)>(r34, r33);

        $r3 = $r2.<android.net.util.LinkPropertiesUtils$CompareResult: java.util.List added>;

        $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>();

        if $z0 != 0 goto label09;

        $r12 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        r36 = virtualinvoke $r12.<com.android.server.ConnectivityService$Dependencies: com.android.internal.app.IBatteryStats getBatteryStatsService()>();

        $r13 = $r2.<android.net.util.LinkPropertiesUtils$CompareResult: java.util.List added>;

        r37 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label09;

        $r14 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>();

        r38 = (java.lang.String) $r14;

     label05:
        r39 = new java.lang.StringBuilder;

        specialinvoke r39.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding iface ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r38);

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to network ");

        virtualinvoke r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r19 = virtualinvoke r39.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r19);

        $r20 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        interfaceinvoke $r20.<android.os.INetworkManagementService: void addInterfaceToNetwork(java.lang.String,int)>(r38, i0);

        specialinvoke r0.<com.android.server.ConnectivityService: void wakeupModifyInterface(java.lang.String,android.net.NetworkCapabilities,boolean)>(r38, r1, 1);

        interfaceinvoke r36.<com.android.internal.app.IBatteryStats: void noteNetworkInterfaceType(java.lang.String,int)>(r38, i1);

     label06:
        goto label08;

     label07:
        $r26 := @caughtexception;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception adding interface: ");

        virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r30);

     label08:
        goto label04;

     label09:
        $r4 = $r2.<android.net.util.LinkPropertiesUtils$CompareResult: java.util.List removed>;

        r42 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label10:
        $z2 = interfaceinvoke r42.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label15;

        $r5 = interfaceinvoke r42.<java.util.Iterator: java.lang.Object next()>();

        r43 = (java.lang.String) $r5;

     label11:
        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing iface ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from network ");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r10 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r10);

        specialinvoke r0.<com.android.server.ConnectivityService: void wakeupModifyInterface(java.lang.String,android.net.NetworkCapabilities,boolean)>(r43, r1, 0);

        $r11 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        interfaceinvoke $r11.<android.os.INetworkManagementService: void removeInterfaceFromNetwork(java.lang.String,int)>(r43, i0);

     label12:
        goto label14;

     label13:
        $r21 := @caughtexception;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception removing interface: ");

        virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21);

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r25);

     label14:
        goto label10;

     label15:
        return;

        catch java.lang.Exception from label05 to label06 with label07;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    private void updateLegacyTypeTrackerAndVpnLockdownForRematch(com.android.server.connectivity.NetworkAgentInfo, com.android.server.connectivity.NetworkAgentInfo, java.util.Collection)
    {
        com.android.server.ConnectivityService r0;
        java.util.Collection r1;
        java.lang.Object $r2;
        boolean $z0, $z1, $z2;
        android.net.NetworkInfo $r3, $r5;
        com.android.server.ConnectivityService$LegacyTypeTracker $r4, $r6;
        int $i0, $i1;
        com.android.server.connectivity.NetworkAgentInfo r7, r8, r10;
        byte b2;
        java.util.Iterator r9;

        r0 := @this: com.android.server.ConnectivityService;

        r7 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r8 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        r1 := @parameter2: java.util.Collection;

        if r7 == r8 goto label4;

        if r7 == null goto label1;

        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $r5 = r7.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $i1 = virtualinvoke $r5.<android.net.NetworkInfo: int getType()>();

        virtualinvoke $r6.<com.android.server.ConnectivityService$LegacyTypeTracker: void remove(int,com.android.server.connectivity.NetworkAgentInfo,boolean)>($i1, r7, 1);

     label1:
        if r8 == null goto label4;

        $z1 = r8.<com.android.server.connectivity.NetworkAgentInfo: boolean lastValidated>;

        if $z1 == 0 goto label2;

        b2 = 100;

        goto label3;

     label2:
        b2 = 0;

     label3:
        r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished> = b2;

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $r3 = r8.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $i0 = virtualinvoke $r3.<android.net.NetworkInfo: int getType()>();

        virtualinvoke $r4.<com.android.server.ConnectivityService$LegacyTypeTracker: void add(int,com.android.server.connectivity.NetworkAgentInfo)>($i0, r8);

        specialinvoke r0.<com.android.server.ConnectivityService: void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)>(r8);

     label4:
        r9 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>();

     label5:
        $z2 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label7;

        $r2 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>();

        r10 = (com.android.server.connectivity.NetworkAgentInfo) $r2;

        $z0 = r10.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        if $z0 == 0 goto label6;

        specialinvoke r0.<com.android.server.ConnectivityService: void addNetworkToLegacyTypeTracker(com.android.server.connectivity.NetworkAgentInfo)>(r10);

     label6:
        goto label5;

     label7:
        return;
    }

    private boolean updateLingerState(com.android.server.connectivity.NetworkAgentInfo, long)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        long l0, $l2, $l4, $l5;
        int i1, $i6;
        boolean $z0, $z1;
        com.android.server.ConnectivityService$UnneededFor $r2;
        byte $b3;
        java.lang.StringBuilder $r3, $r11;
        java.lang.String $r5, $r10, $r13, $r15;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        l0 := @parameter1: long;

        virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: void updateLingerTimer()>();

        $z0 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isLingering()>();

        if $z0 == 0 goto label1;

        $i6 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int numForegroundNetworkRequests()>();

        if $i6 <= 0 goto label1;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unlingering ");

        $r13 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r15);

        virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: void unlinger()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void logNetworkEvent(com.android.server.connectivity.NetworkAgentInfo,int)>(r1, 6);

        goto label2;

     label1:
        $r2 = <com.android.server.ConnectivityService$UnneededFor: com.android.server.ConnectivityService$UnneededFor LINGER>;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean unneeded(com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$UnneededFor)>(r1, $r2);

        if $z1 == 0 goto label2;

        $l2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: long getLingerExpiry()>();

        $b3 = $l2 cmp 0L;

        if $b3 <= 0 goto label2;

        $l4 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: long getLingerExpiry()>();

        $l5 = $l4 - l0;

        i1 = (int) $l5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lingering ");

        $r5 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r10);

        virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: void linger()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void logNetworkEvent(com.android.server.connectivity.NetworkAgentInfo,int)>(r1, 5);

        return 1;

     label2:
        return 0;
    }

    private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo, android.net.LinkProperties, android.net.LinkProperties)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.LinkProperties r2, $r11, r15;
        int i0, $i1;
        android.net.Network $r3;
        com.android.server.connectivity.Nat464Xlat $r4, $r9;
        android.net.NetworkInfo $r5;
        android.net.NetworkCapabilities $r6;
        boolean $z0, $z2, $z3, $z5;
        com.android.server.connectivity.DnsManager $r7;
        android.net.CaptivePortalData $r8;
        android.net.NetworkMonitorManager $r10;
        android.net.ProxyInfo $r12;
        java.lang.String $r13;
        java.lang.Throwable $r14;
        com.android.server.connectivity.KeepaliveTracker $r17;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r15 := @parameter1: android.net.LinkProperties;

        r2 := @parameter2: android.net.LinkProperties;

        $r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        i0 = $r3.<android.net.Network: int netId>;

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        virtualinvoke $r4.<com.android.server.connectivity.Nat464Xlat: void fixupLinkProperties(android.net.LinkProperties,android.net.LinkProperties)>(r2, r15);

        $r6 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $r5 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        $i1 = virtualinvoke $r5.<android.net.NetworkInfo: int getType()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void updateInterfaces(android.net.LinkProperties,android.net.LinkProperties,int,android.net.NetworkCapabilities,int)>(r15, r2, i0, $r6, $i1);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateVpnFiltering(android.net.LinkProperties,android.net.LinkProperties,com.android.server.connectivity.NetworkAgentInfo)>(r15, r2, r1);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateMtu(android.net.LinkProperties,android.net.LinkProperties)>(r15, r2);

        $z0 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        if $z0 == 0 goto label1;

        $r13 = virtualinvoke r15.<android.net.LinkProperties: java.lang.String getTcpBufferSizes()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void updateTcpBufferSizes(java.lang.String)>($r13);

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: boolean updateRoutes(android.net.LinkProperties,android.net.LinkProperties,int)>(r15, r2, i0);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateDnses(android.net.LinkProperties,android.net.LinkProperties,int)>(r15, r2, i0);

        $r7 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        virtualinvoke $r7.<com.android.server.connectivity.DnsManager: void updatePrivateDnsStatus(int,android.net.LinkProperties)>(i0, r15);

        $z2 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        if $z2 == 0 goto label2;

        $r12 = virtualinvoke r15.<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void handleApplyDefaultProxy(android.net.ProxyInfo)>($r12);

        goto label3;

     label2:
        specialinvoke r0.<com.android.server.ConnectivityService: void updateProxy(android.net.LinkProperties,android.net.LinkProperties)>(r15, r2);

     label3:
        specialinvoke r0.<com.android.server.ConnectivityService: void updateWakeOnLan(android.net.LinkProperties)>(r15);

        $r8 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.CaptivePortalData captivePortalData>;

        virtualinvoke r15.<android.net.LinkProperties: void setCaptivePortalData(android.net.CaptivePortalData)>($r8);

        $z3 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r15, r2);

        if $z3 != 0 goto label9;

        entermonitor r1;

     label4:
        r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties> = r15;

        exitmonitor r1;

     label5:
        $r9 = r1.<com.android.server.connectivity.NetworkAgentInfo: com.android.server.connectivity.Nat464Xlat clatd>;

        virtualinvoke $r9.<com.android.server.connectivity.Nat464Xlat: void update()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void notifyIfacesChangedForNetworkStats()>();

        $r10 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMonitorManager networkMonitor()>();

        $r11 = new android.net.LinkProperties;

        specialinvoke $r11.<android.net.LinkProperties: void <init>(android.net.LinkProperties,boolean)>(r15, 1);

        virtualinvoke $r10.<android.net.NetworkMonitorManager: boolean notifyLinkPropertiesChanged(android.net.LinkProperties)>($r11);

        $z5 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        if $z5 == 0 goto label9;

        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(r1, 524295);

        goto label9;

     label6:
        $r14 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r14;

     label9:
        $r17 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.KeepaliveTracker mKeepaliveTracker>;

        virtualinvoke $r17.<com.android.server.connectivity.KeepaliveTracker: void handleCheckKeepalivesStillValid(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        return;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    private void updateMtu(android.net.LinkProperties, android.net.LinkProperties)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.lang.String $r5, $r11, $r16, r19, r24;
        java.lang.StringBuilder $r6, $r13, r21;
        java.lang.Exception $r12;
        android.net.LinkProperties r17, r18;
        android.os.INetworkManagementService $r22;

        r0 := @this: com.android.server.ConnectivityService;

        r17 := @parameter0: android.net.LinkProperties;

        r18 := @parameter1: android.net.LinkProperties;

        r19 = virtualinvoke r17.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        i0 = virtualinvoke r17.<android.net.LinkProperties: int getMtu()>();

        if r18 != null goto label01;

        if i0 != 0 goto label01;

        return;

     label01:
        if r18 == null goto label03;

        $z5 = virtualinvoke r17.<android.net.LinkProperties: boolean isIdenticalMtu(android.net.LinkProperties)>(r18);

        if $z5 == 0 goto label03;

        $z6 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z6 == 0 goto label02;

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("identical MTU - not setting");

     label02:
        return;

     label03:
        $z0 = virtualinvoke r17.<android.net.LinkProperties: boolean hasGlobalIpv6Address()>();

        $z1 = staticinvoke <android.net.LinkProperties: boolean isValidMtu(int,boolean)>(i0, $z0);

        if $z1 != 0 goto label05;

        if i0 == 0 goto label04;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected mtu value: ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r11);

     label04:
        return;

     label05:
        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r19);

        if $z2 == 0 goto label06;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Setting MTU size with null iface.");

        return;

     label06:
        $z3 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z3 != 0 goto label07;

        $z4 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z4 == 0 goto label08;

     label07:
        r21 = new java.lang.StringBuilder;

        specialinvoke r21.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting MTU size: ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19);

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        virtualinvoke r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r5 = virtualinvoke r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

     label08:
        $r22 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        interfaceinvoke $r22.<android.os.INetworkManagementService: void setMtu(java.lang.String,int)>(r19, i0);

     label09:
        goto label11;

     label10:
        $r12 := @caughtexception;

        r24 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("exception in setMtu()");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r24, $r16);

     label11:
        return;

        catch java.lang.Exception from label06 to label07 with label10;
        catch java.lang.Exception from label07 to label08 with label10;
        catch java.lang.Exception from label08 to label09 with label10;
    }

    private void updateNetworkInfo(com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        java.lang.StringBuilder $r2, $r33;
        java.lang.String $r3, $r10, $r34, $r37, r48;
        android.net.NetworkInfo$State $r6, $r11, $r12, $r13, $r15, $r19, $r38, $r41, r45;
        boolean $z0, $z1, $z2, $z3, $z4, $z6, $z8, $z9, $z10, $z11;
        com.android.server.ConnectivityService$LegacyTypeTracker $r14;
        com.android.internal.util.AsyncChannel $r16;
        com.android.server.connectivity.ProxyTracker $r17;
        android.net.NetworkCapabilities $r18, $r21, $r31, $r39;
        android.net.LinkProperties $r20, $r25, $r26, $r29, $r30;
        com.android.server.connectivity.DnsManager $r23;
        android.net.shared.PrivateDnsConfig $r24;
        android.net.NetworkAgentConfig $r27;
        android.net.NetworkMonitorManager $r28, $r32;
        java.lang.Throwable $r42;
        android.net.NetworkInfo r43, r44, r46;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r43 := @parameter1: android.net.NetworkInfo;

        r44 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo mixInInfo(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkInfo)>(r1, r43);

        r45 = virtualinvoke r44.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        entermonitor r1;

     label01:
        r46 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo> = r44;

        exitmonitor r1;

     label02:
        specialinvoke r0.<com.android.server.ConnectivityService: void notifyLockdownVpn(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" EVENT_NETWORK_INFO_CHANGED, going from ");

        $r6 = virtualinvoke r46.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r45);

        $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r10);

        $z0 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        if $z0 != 0 goto label06;

        $r38 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State CONNECTED>;

        if r45 == $r38 goto label03;

        $r41 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State CONNECTING>;

        if r45 != $r41 goto label06;

        $z10 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z10 == 0 goto label06;

     label03:
        $r39 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        virtualinvoke $r39.<android.net.NetworkCapabilities: android.net.NetworkCapabilities addCapability(int)>(19);

        $z8 = specialinvoke r0.<com.android.server.ConnectivityService: boolean createNativeNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        if $z8 != 0 goto label04;

        return;

     label04:
        $z9 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z9 == 0 goto label05;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateAllVpnsCapabilities()>();

     label05:
        r1.<com.android.server.connectivity.NetworkAgentInfo: boolean created> = 1;

     label06:
        $z11 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        if $z11 != 0 goto label10;

        $r19 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State CONNECTED>;

        if r45 != $r19 goto label10;

        r1.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected> = 1;

        $r20 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        if $r20 != null goto label07;

        r48 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        $r34 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" connected with null LinkProperties");

        $r37 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r48, $r37);

     label07:
        $r21 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities getAndSetNetworkCapabilities(android.net.NetworkCapabilities)>($r21);

        $r23 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        $r24 = virtualinvoke $r23.<com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig getPrivateDnsConfig()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void handlePerNetworkPrivateDnsConfig(com.android.server.connectivity.NetworkAgentInfo,android.net.shared.PrivateDnsConfig)>(r1, $r24);

        $r25 = new android.net.LinkProperties;

        $r26 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r25.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r26);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties,android.net.LinkProperties)>(r1, $r25, null);

        $r27 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkAgentConfig networkAgentConfig>;

        $z4 = $r27.<android.net.NetworkAgentConfig: boolean acceptPartialConnectivity>;

        if $z4 == 0 goto label08;

        $r32 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMonitorManager networkMonitor()>();

        virtualinvoke $r32.<android.net.NetworkMonitorManager: boolean setAcceptPartialConnectivity()>();

     label08:
        $r28 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMonitorManager networkMonitor()>();

        $r29 = new android.net.LinkProperties;

        $r30 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r29.<android.net.LinkProperties: void <init>(android.net.LinkProperties,boolean)>($r30, 1);

        $r31 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        virtualinvoke $r28.<android.net.NetworkMonitorManager: boolean notifyNetworkConnected(android.net.LinkProperties,android.net.NetworkCapabilities)>($r29, $r31);

        specialinvoke r0.<com.android.server.ConnectivityService: void scheduleUnvalidatedPrompt(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateSignalStrengthThresholds(com.android.server.connectivity.NetworkAgentInfo,java.lang.String,android.net.NetworkRequest)>(r1, "CONNECT", null);

        $z6 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z6 == 0 goto label09;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateAllVpnsCapabilities()>();

     label09:
        specialinvoke r0.<com.android.server.ConnectivityService: void rematchAllNetworksAndRequests()>();

        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int)>(r1, 524289);

        goto label14;

     label10:
        $r11 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State DISCONNECTED>;

        if r45 != $r11 goto label12;

        $r16 = r1.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r16.<com.android.internal.util.AsyncChannel: void disconnect()>();

        $z2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z2 == 0 goto label11;

        $r18 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateUids(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities,android.net.NetworkCapabilities)>(r1, $r18, null);

     label11:
        specialinvoke r0.<com.android.server.ConnectivityService: void disconnectAndDestroyNetwork(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        $z3 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z3 == 0 goto label14;

        $r17 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.ProxyTracker mProxyTracker>;

        virtualinvoke $r17.<com.android.server.connectivity.ProxyTracker: void sendProxyBroadcast()>();

        goto label14;

     label12:
        $z1 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        if $z1 == 0 goto label14;

        $r12 = virtualinvoke r46.<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>();

        $r13 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State SUSPENDED>;

        if $r12 == $r13 goto label13;

        $r15 = <android.net.NetworkInfo$State: android.net.NetworkInfo$State SUSPENDED>;

        if r45 != $r15 goto label14;

     label13:
        $r14 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        virtualinvoke $r14.<com.android.server.ConnectivityService$LegacyTypeTracker: void update(com.android.server.connectivity.NetworkAgentInfo)>(r1);

     label14:
        return;

     label15:
        $r42 := @caughtexception;

     label16:
        exitmonitor r1;

     label17:
        throw $r42;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private void updateNetworkPermissions(com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2;
        android.net.NetworkCapabilities $r1, r10;
        boolean $z0, $z1;
        android.net.Network $r2;
        android.os.INetworkManagementService $r3;
        android.os.RemoteException $r4;
        java.lang.StringBuilder $r5;
        java.lang.String $r8;
        com.android.server.connectivity.NetworkAgentInfo r9;

        r0 := @this: com.android.server.ConnectivityService;

        r9 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r10 := @parameter1: android.net.NetworkCapabilities;

        $r1 = r9.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        i0 = specialinvoke r0.<com.android.server.ConnectivityService: int getNetworkPermission(android.net.NetworkCapabilities)>($r1);

        i1 = specialinvoke r0.<com.android.server.ConnectivityService: int getNetworkPermission(android.net.NetworkCapabilities)>(r10);

        if i0 == i1 goto label4;

        $z0 = r9.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        if $z0 == 0 goto label4;

        $z1 = virtualinvoke r9.<com.android.server.connectivity.NetworkAgentInfo: boolean isVPN()>();

        if $z1 != 0 goto label4;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        $r2 = r9.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i2 = $r2.<android.net.Network: int netId>;

        interfaceinvoke $r3.<android.os.INetworkManagementService: void setNetworkPermission(int,int)>($i2, i1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in setNetworkPermission: ");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r8);

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void updateNetworkScore(com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        int i0;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3;
        java.lang.String $r5, $r9;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        i0 := @parameter1: int;

        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 != 0 goto label1;

        $z1 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z1 == 0 goto label2;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateNetworkScore for ");

        $r5 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

     label2:
        virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: void setScore(int)>(i0);

        specialinvoke r0.<com.android.server.ConnectivityService: void rematchAllNetworksAndRequests()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void sendUpdatedScoreToFactories(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        return;
    }

    private void updatePrivateDns(com.android.server.connectivity.NetworkAgentInfo, android.net.shared.PrivateDnsConfig)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.shared.PrivateDnsConfig r2;
        android.net.Network $r3, $r6;
        com.android.server.connectivity.DnsManager $r4;
        int $i0;
        android.net.LinkProperties $r7;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter1: android.net.shared.PrivateDnsConfig;

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.DnsManager mDnsManager>;

        $r3 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        virtualinvoke $r4.<com.android.server.connectivity.DnsManager: android.net.shared.PrivateDnsConfig updatePrivateDns(android.net.Network,android.net.shared.PrivateDnsConfig)>($r3, r2);

        $r7 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r6 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i0 = $r6.<android.net.Network: int netId>;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateDnses(android.net.LinkProperties,android.net.LinkProperties,int)>($r7, null, $i0);

        return;
    }

    private void updateProxy(android.net.LinkProperties, android.net.LinkProperties)
    {
        com.android.server.ConnectivityService r0;
        boolean $z0;
        com.android.server.connectivity.ProxyTracker $r1;
        android.net.LinkProperties r2, r3;
        android.net.ProxyInfo r4, r5;

        r0 := @this: com.android.server.ConnectivityService;

        r2 := @parameter0: android.net.LinkProperties;

        r3 := @parameter1: android.net.LinkProperties;

        if r2 != null goto label1;

        r4 = null;

        goto label2;

     label1:
        r4 = virtualinvoke r2.<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>();

     label2:
        if r3 != null goto label3;

        r5 = null;

        goto label4;

     label3:
        r5 = virtualinvoke r3.<android.net.LinkProperties: android.net.ProxyInfo getHttpProxy()>();

     label4:
        $z0 = staticinvoke <com.android.server.connectivity.ProxyTracker: boolean proxyInfoEqual(android.net.ProxyInfo,android.net.ProxyInfo)>(r4, r5);

        if $z0 != 0 goto label5;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.ProxyTracker mProxyTracker>;

        virtualinvoke $r1.<com.android.server.connectivity.ProxyTracker: void sendProxyBroadcast()>();

     label5:
        return;
    }

    private boolean updateRoutes(android.net.LinkProperties, android.net.LinkProperties, int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        com.android.server.'-$$Lambda$ConnectivityService$XT2zS9HW9HrYR9HM0MhxU58wtIo' $r2;
        java.util.List $r3, $r4, $r5, $r6, $r7, $r8, $r9, r63, r64;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, z21;
        java.lang.Object $r10, $r17, $r24, $r31;
        java.lang.String $r16, $r23, $r30, $r37, $r44, $r50, $r55, $r60;
        java.lang.Exception $r38, $r45, $r51, $r56;
        android.net.IpPrefix $r39;
        java.net.InetAddress $r40, $r46;
        android.net.LinkProperties r61, r62;
        java.util.Iterator r66, r73, r80, r87;
        android.net.RouteInfo r67, r74, r81, r88;
        android.net.INetd $r69, $r76, $r83, $r90;
        android.net.RouteInfoParcel $r70, $r77, $r84, $r91;
        android.net.util.LinkPropertiesUtils$CompareOrUpdateResult r94;
        java.lang.StringBuilder r95, r96, r97, r98, r99, r100, r101, r102;
        java.util.function.Function r103;

        r0 := @this: com.android.server.ConnectivityService;

        r61 := @parameter0: android.net.LinkProperties;

        r62 := @parameter1: android.net.LinkProperties;

        i0 := @parameter2: int;

        r63 = null;

        if r62 == null goto label01;

        r64 = virtualinvoke r62.<android.net.LinkProperties: java.util.List getAllRoutes()>();

        goto label02;

     label01:
        r64 = null;

     label02:
        if r61 == null goto label03;

        r63 = virtualinvoke r61.<android.net.LinkProperties: java.util.List getAllRoutes()>();

     label03:
        r94 = new android.net.util.LinkPropertiesUtils$CompareOrUpdateResult;

        $r2 = <com.android.server._$$Lambda$ConnectivityService$XT2zS9HW9HrYR9HM0MhxU58wtIo: com.android.server.'-$$Lambda$ConnectivityService$XT2zS9HW9HrYR9HM0MhxU58wtIo' INSTANCE>;

        r103 = (java.util.function.Function) $r2;

        specialinvoke r94.<android.net.util.LinkPropertiesUtils$CompareOrUpdateResult: void <init>(java.util.Collection,java.util.Collection,java.util.function.Function)>(r64, r63, r103);

        $r3 = r94.<android.net.util.LinkPropertiesUtils$CompareOrUpdateResult: java.util.List added>;

        r66 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>();

     label04:
        $z19 = interfaceinvoke r66.<java.util.Iterator: boolean hasNext()>();

        if $z19 == 0 goto label12;

        $r31 = interfaceinvoke r66.<java.util.Iterator: java.lang.Object next()>();

        r67 = (android.net.RouteInfo) $r31;

        $z12 = virtualinvoke r67.<android.net.RouteInfo: boolean hasGateway()>();

        if $z12 == 0 goto label05;

        goto label04;

     label05:
        $z13 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z13 != 0 goto label06;

        $z14 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z14 == 0 goto label07;

     label06:
        r95 = new java.lang.StringBuilder;

        specialinvoke r95.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding Route [");

        virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to network ");

        virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r37 = virtualinvoke r95.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r37);

     label07:
        $r69 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        $r70 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.RouteInfoParcel convertRouteInfo(android.net.RouteInfo)>(r67);

        interfaceinvoke $r69.<android.net.INetd: void networkAddRouteParcel(int,android.net.RouteInfoParcel)>(i0, $r70);

     label08:
        goto label11;

     label09:
        $r38 := @caughtexception;

        $r39 = virtualinvoke r67.<android.net.RouteInfo: android.net.IpPrefix getDestination()>();

        $r40 = virtualinvoke $r39.<android.net.IpPrefix: java.net.InetAddress getAddress()>();

        $z15 = $r40 instanceof java.net.Inet4Address;

        if $z15 != 0 goto label10;

        $z16 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z16 == 0 goto label11;

     label10:
        r96 = new java.lang.StringBuilder;

        specialinvoke r96.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in networkAddRouteParcel for non-gateway: ");

        virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r38);

        $r44 = virtualinvoke r96.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r44);

     label11:
        goto label04;

     label12:
        $r4 = r94.<android.net.util.LinkPropertiesUtils$CompareOrUpdateResult: java.util.List added>;

        r73 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>();

     label13:
        $z20 = interfaceinvoke r73.<java.util.Iterator: boolean hasNext()>();

        if $z20 == 0 goto label21;

        $r24 = interfaceinvoke r73.<java.util.Iterator: java.lang.Object next()>();

        r74 = (android.net.RouteInfo) $r24;

        $z9 = virtualinvoke r74.<android.net.RouteInfo: boolean hasGateway()>();

        if $z9 != 0 goto label14;

        goto label13;

     label14:
        $z10 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z10 != 0 goto label15;

        $z11 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z11 == 0 goto label16;

     label15:
        r97 = new java.lang.StringBuilder;

        specialinvoke r97.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adding Route [");

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r74);

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] to network ");

        virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r30 = virtualinvoke r97.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r30);

     label16:
        $r76 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        $r77 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.RouteInfoParcel convertRouteInfo(android.net.RouteInfo)>(r74);

        interfaceinvoke $r76.<android.net.INetd: void networkAddRouteParcel(int,android.net.RouteInfoParcel)>(i0, $r77);

     label17:
        goto label20;

     label18:
        $r45 := @caughtexception;

        $r46 = virtualinvoke r74.<android.net.RouteInfo: java.net.InetAddress getGateway()>();

        $z17 = $r46 instanceof java.net.Inet4Address;

        if $z17 != 0 goto label19;

        $z18 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z18 == 0 goto label20;

     label19:
        r98 = new java.lang.StringBuilder;

        specialinvoke r98.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in networkAddRouteParcel for gateway: ");

        virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        $r50 = virtualinvoke r98.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r50);

     label20:
        goto label13;

     label21:
        $r5 = r94.<android.net.util.LinkPropertiesUtils$CompareOrUpdateResult: java.util.List removed>;

        r80 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>();

     label22:
        $z0 = interfaceinvoke r80.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label28;

        $r17 = interfaceinvoke r80.<java.util.Iterator: java.lang.Object next()>();

        r81 = (android.net.RouteInfo) $r17;

        $z7 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z7 != 0 goto label23;

        $z8 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z8 == 0 goto label24;

     label23:
        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removing Route [");

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r81);

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] from network ");

        virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r23 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r23);

     label24:
        $r83 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        $r84 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.RouteInfoParcel convertRouteInfo(android.net.RouteInfo)>(r81);

        interfaceinvoke $r83.<android.net.INetd: void networkRemoveRouteParcel(int,android.net.RouteInfoParcel)>(i0, $r84);

     label25:
        goto label27;

     label26:
        $r56 := @caughtexception;

        r100 = new java.lang.StringBuilder;

        specialinvoke r100.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in networkRemoveRouteParcel: ");

        virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r56);

        $r60 = virtualinvoke r100.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r60);

     label27:
        goto label22;

     label28:
        $r6 = r94.<android.net.util.LinkPropertiesUtils$CompareOrUpdateResult: java.util.List updated>;

        r87 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>();

     label29:
        $z1 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label35;

        $r10 = interfaceinvoke r87.<java.util.Iterator: java.lang.Object next()>();

        r88 = (android.net.RouteInfo) $r10;

        $z5 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z5 != 0 goto label30;

        $z6 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z6 == 0 goto label31;

     label30:
        r101 = new java.lang.StringBuilder;

        specialinvoke r101.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating Route [");

        virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r88);

        virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] from network ");

        virtualinvoke r101.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke r101.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r16);

     label31:
        $r90 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        $r91 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.RouteInfoParcel convertRouteInfo(android.net.RouteInfo)>(r88);

        interfaceinvoke $r90.<android.net.INetd: void networkUpdateRouteParcel(int,android.net.RouteInfoParcel)>(i0, $r91);

     label32:
        goto label34;

     label33:
        $r51 := @caughtexception;

        r102 = new java.lang.StringBuilder;

        specialinvoke r102.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception in networkUpdateRouteParcel: ");

        virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r51);

        $r55 = virtualinvoke r102.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r55);

     label34:
        goto label29;

     label35:
        $r7 = r94.<android.net.util.LinkPropertiesUtils$CompareOrUpdateResult: java.util.List added>;

        $z2 = interfaceinvoke $r7.<java.util.List: boolean isEmpty()>();

        if $z2 == 0 goto label37;

        $r8 = r94.<android.net.util.LinkPropertiesUtils$CompareOrUpdateResult: java.util.List removed>;

        $z3 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label37;

        $r9 = r94.<android.net.util.LinkPropertiesUtils$CompareOrUpdateResult: java.util.List updated>;

        $z4 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>();

        if $z4 != 0 goto label36;

        goto label37;

     label36:
        z21 = 0;

        goto label38;

     label37:
        z21 = 1;

     label38:
        return z21;

        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label16 to label17 with label18;
        catch java.lang.Exception from label24 to label25 with label26;
        catch java.lang.Exception from label31 to label32 with label33;
    }

    private void updateSatisfiersForRematchRequest(com.android.server.ConnectivityService$NetworkRequestInfo, com.android.server.connectivity.NetworkAgentInfo, com.android.server.connectivity.NetworkAgentInfo, long)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkRequestInfo r1;
        com.android.server.connectivity.NetworkAgentInfo r2, r30;
        long l0, $l6;
        java.lang.StringBuilder $r3, $r12, $r20, $r25;
        java.lang.String $r5, $r10, $r14, $r19, $r22, $r24, $r27, $r29, r37;
        android.net.NetworkRequest $r8, $r11, $r17, $r33, $r34, $r35, $r36;
        int $i1, $i2, $i4, $i5;
        boolean $z0, $z1, $z3, $z4, $z5, $z6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.ConnectivityService$NetworkRequestInfo;

        r30 := @parameter1: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter2: com.android.server.connectivity.NetworkAgentInfo;

        l0 := @parameter3: long;

        if r2 == null goto label7;

        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 == 0 goto label1;

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rematch for ");

        $r27 = virtualinvoke r2.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r29);

     label1:
        if r30 == null goto label4;

        $z4 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z4 != 0 goto label2;

        $z5 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z5 == 0 goto label3;

     label2:
        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("   accepting network in place of ");

        $r22 = virtualinvoke r30.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22);

        $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r24);

     label3:
        $r33 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i4 = $r33.<android.net.NetworkRequest: int requestId>;

        virtualinvoke r30.<com.android.server.connectivity.NetworkAgentInfo: void removeRequest(int)>($i4);

        $r34 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i5 = r0.<com.android.server.ConnectivityService: int mLingerDelayMs>;

        $l6 = (long) $i5;

        virtualinvoke r30.<com.android.server.connectivity.NetworkAgentInfo: void lingerRequest(android.net.NetworkRequest,long,long)>($r34, l0, $l6);

        goto label6;

     label4:
        $z1 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z1 != 0 goto label5;

        $z3 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z3 == 0 goto label6;

     label5:
        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>("   accepting network in place of null");

     label6:
        $r35 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke r2.<com.android.server.connectivity.NetworkAgentInfo: boolean unlingerRequest(android.net.NetworkRequest)>($r35);

        $r36 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $z6 = virtualinvoke r2.<com.android.server.connectivity.NetworkAgentInfo: boolean addRequest(android.net.NetworkRequest)>($r36);

        if $z6 != 0 goto label8;

        r37 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BUG: ");

        $r14 = virtualinvoke r2.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" already has ");

        $r17 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>(r37, $r19);

        goto label8;

     label7:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Network ");

        $r5 = virtualinvoke r30.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" stopped satisfying request ");

        $r8 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i1 = $r8.<android.net.NetworkRequest: int requestId>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r10);

        $r11 = r1.<com.android.server.ConnectivityService$NetworkRequestInfo: android.net.NetworkRequest request>;

        $i2 = $r11.<android.net.NetworkRequest: int requestId>;

        virtualinvoke r30.<com.android.server.connectivity.NetworkAgentInfo: void removeRequest(int)>($i2);

     label8:
        r1.<com.android.server.ConnectivityService$NetworkRequestInfo: com.android.server.connectivity.NetworkAgentInfo mSatisfier> = r2;

        return;
    }

    private void updateSignalStrengthThresholds(com.android.server.connectivity.NetworkAgentInfo, java.lang.String, android.net.NetworkRequest)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        android.net.NetworkRequest r2;
        java.util.ArrayList r3;
        android.os.Bundle $r6;
        boolean $z0, $z1, $z2;
        android.net.NetworkCapabilities $r7, $r11;
        java.lang.StringBuilder $r8;
        int $i0;
        java.lang.String $r13, r14, $r17, $r18, $r19;
        java.lang.Object[] $r15, $r16;
        com.android.internal.util.AsyncChannel $r20;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r14 := @parameter1: java.lang.String;

        r2 := @parameter2: android.net.NetworkRequest;

        r3 = specialinvoke r0.<com.android.server.ConnectivityService: java.util.ArrayList getSignalStrengthThresholds(com.android.server.connectivity.NetworkAgentInfo)>(r1);

        $r6 = new android.os.Bundle;

        specialinvoke $r6.<android.os.Bundle: void <init>()>();

        virtualinvoke $r6.<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>("thresholds", r3);

        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 != 0 goto label1;

        $r13 = "CONNECT";

        $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z2 != 0 goto label3;

     label1:
        if r2 == null goto label2;

        $r7 = r2.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $z1 = virtualinvoke $r7.<android.net.NetworkCapabilities: boolean hasSignalStrength()>();

        if $z1 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r11 = r2.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        $i0 = virtualinvoke $r11.<android.net.NetworkCapabilities: int getSignalStrength()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label2;

     label2:
        $r15 = newarray (java.lang.Object)[3];

        $r15[0] = r14;

        $r16 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object[] toArray()>();

        $r17 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r16);

        $r15[1] = $r17;

        $r18 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        $r15[2] = $r18;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("updateSignalStrengthThresholds: %s, sending %s to %s", $r15);

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r19);

     label3:
        $r20 = r1.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r20.<com.android.internal.util.AsyncChannel: void sendMessage(int,int,int,java.lang.Object)>(528398, 0, 0, $r6);

        return;
    }

    private void updateTcpBufferSizes(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String $r5, $r6, $r9, $r14, $r19, r20, r23, $r25, r26, $r29, $r30, $r31, r32, $r34, $r35, $r36, r37;
        boolean $z0, $z1, $z2;
        android.content.Context $r10;
        android.content.ContentResolver $r11;
        com.android.server.connectivity.MockableSystemProperties $r12, $r13;
        int $i1, $i2, $i3, $i4;
        java.lang.Exception $r15;
        java.lang.String[] r21, r22;
        java.lang.Object[] $r28, $r33;
        android.net.INetd $r38;
        java.lang.Integer r41;
        java.lang.StringBuilder r42, r43, r44;
        java.lang.CharSequence[] r45, r46;

        r0 := @this: com.android.server.ConnectivityService;

        r20 := @parameter0: java.lang.String;

        r21 = null;

        if r20 == null goto label01;

        r21 = virtualinvoke r20.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

     label01:
        if r21 == null goto label02;

        r22 = r21;

        r23 = r20;

        $i4 = lengthof r21;

        if $i4 == 6 goto label03;

     label02:
        r42 = new java.lang.StringBuilder;

        specialinvoke r42.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid tcpBufferSizes string: ");

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20);

        virtualinvoke r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", using defaults");

        $r5 = virtualinvoke r42.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

        r23 = "4096,87380,110208,4096,16384,110208";

        $r6 = "4096,87380,110208,4096,16384,110208";

        r22 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

     label03:
        $r25 = r0.<com.android.server.ConnectivityService: java.lang.String mCurrentTcpBufferSizes>;

        $z2 = virtualinvoke r23.<java.lang.String: boolean equals(java.lang.Object)>($r25);

        if $z2 == 0 goto label04;

        return;

     label04:
        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 != 0 goto label05;

        $z1 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z1 == 0 goto label06;

     label05:
        r26 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r43 = new java.lang.StringBuilder;

        specialinvoke r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Setting tx/rx TCP buffers to ");

        virtualinvoke r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r23);

        $r9 = virtualinvoke r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int d(java.lang.String,java.lang.String)>(r26, $r9);

     label06:
        $r28 = newarray (java.lang.CharSequence)[3];

        $r29 = r22[0];

        $r28[0] = $r29;

        $r30 = r22[1];

        $r28[1] = $r30;

        $r31 = r22[2];

        $r28[2] = $r31;

        r45 = (java.lang.CharSequence[]) $r28;

        r32 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(" ", r45);

        $r33 = newarray (java.lang.CharSequence)[3];

        $r34 = r22[3];

        $r33[0] = $r34;

        $r35 = r22[4];

        $r33[1] = $r35;

        $r36 = r22[5];

        $r33[2] = $r36;

        r46 = (java.lang.CharSequence[]) $r33;

        r37 = staticinvoke <java.lang.String: java.lang.String join(java.lang.CharSequence,java.lang.CharSequence[])>(" ", r46);

        $r38 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        interfaceinvoke $r38.<android.net.INetd: void setTcpRWmemorySize(java.lang.String,java.lang.String)>(r32, r37);

        r0.<com.android.server.ConnectivityService: java.lang.String mCurrentTcpBufferSizes> = r23;

     label07:
        goto label09;

     label08:
        $r15 := @caughtexception;

        r44 = new java.lang.StringBuilder;

        specialinvoke r44.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t set TCP buffer sizes:");

        virtualinvoke r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r19 = virtualinvoke r44.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r19);

     label09:
        $r10 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r11 = virtualinvoke $r10.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r12 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.MockableSystemProperties mSystemProperties>;

        $i1 = virtualinvoke $r12.<com.android.server.connectivity.MockableSystemProperties: int getInt(java.lang.String,int)>("net.tcp.default_init_rwnd", 0);

        $i2 = staticinvoke <android.provider.Settings$Global: int getInt(android.content.ContentResolver,java.lang.String,int)>($r11, "tcp_default_init_rwnd", $i1);

        r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        $i3 = virtualinvoke r41.<java.lang.Integer: int intValue()>();

        if $i3 == 0 goto label10;

        $r13 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.MockableSystemProperties mSystemProperties>;

        $r14 = virtualinvoke r41.<java.lang.Integer: java.lang.String toString()>();

        virtualinvoke $r13.<com.android.server.connectivity.MockableSystemProperties: void set(java.lang.String,java.lang.String)>("sys.sysctl.tcp_def_init_rwnd", $r14);

     label10:
        return;

        catch android.os.RemoteException from label04 to label05 with label08;
        catch android.os.ServiceSpecificException from label04 to label05 with label08;
        catch android.os.RemoteException from label05 to label06 with label08;
        catch android.os.ServiceSpecificException from label05 to label06 with label08;
        catch android.os.RemoteException from label06 to label07 with label08;
        catch android.os.ServiceSpecificException from label06 to label07 with label08;
    }

    private void updateUids(com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkCapabilities, android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1, r2;
        boolean z0, z1, $z4, $z5, $z6, $z7;
        android.net.LinkProperties $r4, $r5, $r6;
        com.android.server.connectivity.PermissionMonitor $r7, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        android.net.Network $r10, $r13;
        android.os.INetworkManagementService $r11, $r14;
        java.lang.Exception $r17;
        com.android.server.connectivity.NetworkAgentInfo r18;
        java.util.Set r19, r20, r32, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44;
        java.lang.Object r21, r22;
        android.net.UidRange[] r24, r25;
        java.lang.String r26;
        android.util.ArraySet r28, r29, r30;
        java.util.Collection r31, r33;

        r0 := @this: com.android.server.ConnectivityService;

        r18 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r1 := @parameter1: android.net.NetworkCapabilities;

        r2 := @parameter2: android.net.NetworkCapabilities;

        r19 = null;

        if r1 != null goto label01;

        r20 = null;

        goto label02;

     label01:
        r20 = virtualinvoke r1.<android.net.NetworkCapabilities: java.util.Set getUids()>();

     label02:
        if r2 != null goto label03;

        goto label04;

     label03:
        r19 = virtualinvoke r2.<android.net.NetworkCapabilities: java.util.Set getUids()>();

     label04:
        r21 = r20;

        if r20 != null goto label05;

        r28 = new android.util.ArraySet;

        specialinvoke r28.<android.util.ArraySet: void <init>()>();

        r21 = r28;

     label05:
        r22 = r19;

        if r19 != null goto label06;

        r29 = new android.util.ArraySet;

        specialinvoke r29.<android.util.ArraySet: void <init>()>();

        r22 = r29;

     label06:
        r30 = new android.util.ArraySet;

        r31 = (java.util.Collection) r21;

        specialinvoke r30.<android.util.ArraySet: void <init>(java.util.Collection)>(r31);

        r32 = (java.util.Set) r21;

        r33 = (java.util.Collection) r22;

        interfaceinvoke r32.<java.util.Set: boolean removeAll(java.util.Collection)>(r33);

        r34 = (java.util.Set) r22;

        interfaceinvoke r34.<java.util.Set: boolean removeAll(java.util.Collection)>(r30);

     label07:
        r35 = (java.util.Set) r22;

        $z4 = interfaceinvoke r35.<java.util.Set: boolean isEmpty()>();

        if $z4 != 0 goto label08;

        r36 = (java.util.Set) r22;

        $i4 = interfaceinvoke r36.<java.util.Set: int size()>();

        r24 = newarray (android.net.UidRange)[$i4];

        r37 = (java.util.Set) r22;

        interfaceinvoke r37.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r24);

        $r14 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        $r13 = r18.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i5 = $r13.<android.net.Network: int netId>;

        interfaceinvoke $r14.<android.os.INetworkManagementService: void addVpnUidRanges(int,android.net.UidRange[])>($i5, r24);

     label08:
        r38 = (java.util.Set) r21;

        $z5 = interfaceinvoke r38.<java.util.Set: boolean isEmpty()>();

        if $z5 != 0 goto label09;

        r39 = (java.util.Set) r21;

        $i2 = interfaceinvoke r39.<java.util.Set: int size()>();

        r25 = newarray (android.net.UidRange)[$i2];

        r40 = (java.util.Set) r21;

        interfaceinvoke r40.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>(r25);

        $r11 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        $r10 = r18.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i3 = $r10.<android.net.Network: int netId>;

        interfaceinvoke $r11.<android.os.INetworkManagementService: void removeVpnUidRanges(int,android.net.UidRange[])>($i3, r25);

     label09:
        $r4 = r18.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean requiresVpnIsolation(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities,android.net.LinkProperties)>(r18, r1, $r4);

        $r5 = r18.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean requiresVpnIsolation(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities,android.net.LinkProperties)>(r18, r2, $r5);

        $r6 = r18.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        r26 = virtualinvoke $r6.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

     label10:
        if z0 == 0 goto label12;

     label11:
        r41 = (java.util.Set) r21;

        $z7 = interfaceinvoke r41.<java.util.Set: boolean isEmpty()>();

        if $z7 != 0 goto label12;

        $r8 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        $i1 = virtualinvoke r1.<android.net.NetworkCapabilities: int getOwnerUid()>();

        r42 = (java.util.Set) r21;

        virtualinvoke $r8.<com.android.server.connectivity.PermissionMonitor: void onVpnUidRangesRemoved(java.lang.String,java.util.Set,int)>(r26, r42, $i1);

     label12:
        if z1 == 0 goto label14;

     label13:
        r43 = (java.util.Set) r22;

        $z6 = interfaceinvoke r43.<java.util.Set: boolean isEmpty()>();

        if $z6 != 0 goto label14;

        $r7 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        $i0 = virtualinvoke r2.<android.net.NetworkCapabilities: int getOwnerUid()>();

        r44 = (java.util.Set) r22;

        virtualinvoke $r7.<com.android.server.connectivity.PermissionMonitor: void onVpnUidRangesAdded(java.lang.String,java.util.Set,int)>(r26, r44, $i0);

     label14:
        goto label16;

     label15:
        $r17 := @caughtexception;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String,java.lang.Throwable)>("Exception in updateUids: ", $r17);

     label16:
        return;

        catch java.lang.Exception from label07 to label08 with label15;
        catch java.lang.Exception from label08 to label09 with label15;
        catch java.lang.Exception from label09 to label10 with label15;
        catch java.lang.Exception from label11 to label12 with label15;
        catch java.lang.Exception from label13 to label14 with label15;
    }

    private void updateVpnCapabilities(com.android.server.connectivity.Vpn, android.net.NetworkCapabilities)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1;
        int $i0, $i1;
        com.android.server.connectivity.Vpn r2;
        com.android.server.connectivity.NetworkAgentInfo r3;

        r0 := @this: com.android.server.ConnectivityService;

        r2 := @parameter0: com.android.server.connectivity.Vpn;

        r1 := @parameter1: android.net.NetworkCapabilities;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        $i0 = virtualinvoke r2.<com.android.server.connectivity.Vpn: int getNetId()>();

        r3 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetId(int)>($i0);

        if r3 == null goto label2;

        if r1 != null goto label1;

        goto label2;

     label1:
        $i1 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: int getCurrentScore()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void updateCapabilities(int,com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities)>($i1, r3, r1);

        return;

     label2:
        return;
    }

    private void updateVpnFiltering(android.net.LinkProperties, android.net.LinkProperties, com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties r1, r9;
        com.android.server.connectivity.NetworkAgentInfo r2;
        boolean z0, z1, $z2;
        int i0;
        android.net.NetworkCapabilities $r3, $r4, $r5, $r6;
        com.android.server.connectivity.PermissionMonitor $r7, $r8;
        java.lang.String r10, r11;
        java.util.Set r12;

        r0 := @this: com.android.server.ConnectivityService;

        r9 := @parameter0: android.net.LinkProperties;

        r1 := @parameter1: android.net.LinkProperties;

        r2 := @parameter2: com.android.server.connectivity.NetworkAgentInfo;

        r10 = null;

        if r1 == null goto label1;

        r11 = virtualinvoke r1.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        goto label2;

     label1:
        r11 = null;

     label2:
        if r9 == null goto label3;

        r10 = virtualinvoke r9.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

     label3:
        $r3 = r2.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean requiresVpnIsolation(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities,android.net.LinkProperties)>(r2, $r3, r1);

        $r4 = r2.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean requiresVpnIsolation(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities,android.net.LinkProperties)>(r2, $r4, r9);

        if z0 != 0 goto label4;

        if z1 != 0 goto label4;

        return;

     label4:
        $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>(r11, r10);

        if $z2 == 0 goto label5;

        if z0 != z1 goto label5;

        return;

     label5:
        $r5 = r2.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        r12 = virtualinvoke $r5.<android.net.NetworkCapabilities: java.util.Set getUids()>();

        $r6 = r2.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        i0 = virtualinvoke $r6.<android.net.NetworkCapabilities: int getOwnerUid()>();

        if z0 == 0 goto label6;

        $r8 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        virtualinvoke $r8.<com.android.server.connectivity.PermissionMonitor: void onVpnUidRangesRemoved(java.lang.String,java.util.Set,int)>(r11, r12, i0);

     label6:
        if z1 == 0 goto label7;

        $r7 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        virtualinvoke $r7.<com.android.server.connectivity.PermissionMonitor: void onVpnUidRangesAdded(java.lang.String,java.util.Set,int)>(r10, r12, i0);

     label7:
        return;
    }

    private void updateWakeOnLan(android.net.LinkProperties)
    {
        com.android.server.ConnectivityService r0;
        android.net.LinkProperties r1;
        java.util.Set $r2;
        java.lang.String $r3;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.LinkProperties;

        $r2 = r0.<com.android.server.ConnectivityService: java.util.Set mWolSupportedInterfaces>;

        $r3 = virtualinvoke r1.<android.net.LinkProperties: java.lang.String getInterfaceName()>();

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>($r3);

        virtualinvoke r1.<android.net.LinkProperties: void setWakeOnLanSupported(boolean)>($z0);

        return;
    }

    private void wakeupModifyInterface(java.lang.String, android.net.NetworkCapabilities, boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, $z1;
        int i0, i1;
        android.content.Context $r1, $r3;
        android.content.res.Resources $r2, $r4;
        java.lang.StringBuilder $r5, $r11;
        android.net.INetd $r8, $r9;
        java.lang.Exception $r10;
        java.lang.String $r14, r15, r18;
        android.net.NetworkCapabilities r16;

        r0 := @this: com.android.server.ConnectivityService;

        r15 := @parameter0: java.lang.String;

        r16 := @parameter1: android.net.NetworkCapabilities;

        z0 := @parameter2: boolean;

        $z1 = virtualinvoke r16.<android.net.NetworkCapabilities: boolean hasTransport(int)>(1);

        if $z1 != 0 goto label1;

        return;

     label1:
        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke $r2.<android.content.res.Resources: int getInteger(int)>(17694858);

        $r3 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.res.Resources getResources()>();

        i1 = virtualinvoke $r4.<android.content.res.Resources: int getInteger(int)>(17694859);

        if i0 == 0 goto label9;

        if i1 != 0 goto label2;

        goto label9;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iface:");

        virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        r18 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        if z0 == 0 goto label5;

     label3:
        $r9 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        interfaceinvoke $r9.<android.net.INetd: void wakeupAddInterface(java.lang.String,java.lang.String,int,int)>(r15, r18, i0, i1);

     label4:
        goto label6;

     label5:
        $r8 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        interfaceinvoke $r8.<android.net.INetd: void wakeupDelInterface(java.lang.String,java.lang.String,int,int)>(r15, r18, i0, i1);

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exception modifying wakeup packet monitoring: ");

        virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>($r14);

     label8:
        return;

     label9:
        return;

        catch java.lang.Exception from label3 to label4 with label7;
        catch java.lang.Exception from label5 to label6 with label7;
    }

    public boolean addVpnAddress(java.lang.String, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2;
        android.util.SparseArray r1, $r2;
        boolean z0;
        java.lang.Object $r3;
        com.android.server.connectivity.Vpn $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.ConnectivityService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.connectivity.Vpn) $r3;

        z0 = virtualinvoke $r4.<com.android.server.connectivity.Vpn: boolean addAddress(java.lang.String,int)>(r6, i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean avoidBadWifi()
    {
        com.android.server.ConnectivityService r0;
        android.net.util.MultinetworkPolicyTracker $r1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.util.MultinetworkPolicyTracker mMultinetworkPolicyTracker>;

        $z0 = virtualinvoke $r1.<android.net.util.MultinetworkPolicyTracker: boolean getAvoidBadWifi()>();

        return $z0;
    }

    boolean checkConnectivityDiagnosticsPermissions(int, int, com.android.server.connectivity.NetworkAgentInfo, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        boolean z0, $z1, $z2, $z3;
        android.net.NetworkCapabilities $r1;
        int[] $r2;
        java.util.List $r3;
        android.net.Network $r4;
        java.lang.Throwable $r5, $r6;
        com.android.server.connectivity.NetworkAgentInfo r7;
        java.lang.String r8;
        com.android.internal.util.LocationPermissionChecker r9;
        android.util.SparseArray r10;
        com.android.server.connectivity.Vpn r11;
        android.net.Network[] r12;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r7 := @parameter2: com.android.server.connectivity.NetworkAgentInfo;

        r8 := @parameter3: java.lang.String;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkNetworkStackPermission(int,int)>(i0, i1);

        if $z1 == 0 goto label01;

        return 1;

     label01:
        r9 = r0.<com.android.server.ConnectivityService: com.android.internal.util.LocationPermissionChecker mLocationPermissionChecker>;

     label02:
        z0 = virtualinvoke r9.<com.android.internal.util.LocationPermissionChecker: boolean checkLocationPermission(java.lang.String,java.lang.String,int,java.lang.String)>(r8, null, i1, null);

     label03:
        if z0 != 0 goto label04;

        return 0;

     label04:
        r10 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r10;

     label05:
        r11 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Vpn getVpnIfOwner(int)>(i1);

     label06:
        if r11 != null goto label07;

        r12 = null;

        goto label08;

     label07:
        r12 = virtualinvoke r11.<com.android.server.connectivity.Vpn: android.net.Network[] getUnderlyingNetworks()>();

     label08:
        exitmonitor r10;

     label09:
        if r12 == null goto label10;

        $r3 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r12);

        $r4 = r7.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $z3 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>($r4);

        if $z3 == 0 goto label10;

        return 1;

     label10:
        $r1 = r7.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $r2 = virtualinvoke $r1.<android.net.NetworkCapabilities: int[] getAdministratorUids()>();

        $z2 = staticinvoke <com.android.internal.util.ArrayUtils: boolean contains(int[],int)>($r2, i1);

        return $z2;

     label11:
        $r5 := @caughtexception;

     label12:
        exitmonitor r10;

     label13:
        throw $r5;

     label14:
        $r6 := @caughtexception;

        return 0;

        catch java.lang.SecurityException from label01 to label02 with label14;
        catch java.lang.SecurityException from label02 to label03 with label14;
        catch java.lang.Throwable from label05 to label06 with label11;
        catch java.lang.Throwable from label07 to label08 with label11;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label12 to label13 with label11;
    }

    public int checkMobileProvisioning(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        return -1;
    }

    public void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest r1;
        boolean $z0;
        com.android.server._$$Lambda$ConnectivityService$SS5YUaesQHufWj1T0I5sKoDFFWY $r2;
        com.android.server.ConnectivityService$InternalHandler $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkRequest;

        $z0 = virtualinvoke r1.<android.net.NetworkRequest: boolean hasTransport(int)>(7);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkFactoryOrTestNetworksPermission()>();

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkFactoryPermission()>();

     label2:
        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r2 = new com.android.server._$$Lambda$ConnectivityService$SS5YUaesQHufWj1T0I5sKoDFFWY;

        specialinvoke $r2.<com.android.server._$$Lambda$ConnectivityService$SS5YUaesQHufWj1T0I5sKoDFFWY: void <init>(com.android.server.ConnectivityService,android.net.NetworkRequest)>(r0, r1);

        virtualinvoke $r3.<com.android.server.ConnectivityService$InternalHandler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public void deleteVpnProfile(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        android.security.KeyStore $r4;
        com.android.server.connectivity.Vpn $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.ConnectivityService;

        r7 := @parameter0: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r5 = (com.android.server.connectivity.Vpn) $r3;

        $r4 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        virtualinvoke $r5.<com.android.server.connectivity.Vpn: void deleteVpnProfile(java.lang.String,android.security.KeyStore)>(r7, $r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.ConnectivityService r0;
        java.io.FileDescriptor r1;
        java.io.PrintWriter r2;
        java.lang.String[] r3;
        com.android.server.utils.PriorityDump$PriorityDumper $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.PrintWriter;

        r3 := @parameter2: java.lang.String[];

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.utils.PriorityDump$PriorityDumper mPriorityDumper>;

        staticinvoke <com.android.server.utils.PriorityDump: void dump(com.android.server.utils.PriorityDump$PriorityDumper,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>($r4, r1, r2, r3);

        return;
    }

    public android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        com.android.server.connectivity.Vpn $r4;
        java.lang.Throwable $r5;
        com.android.internal.net.VpnConfig r6;
        android.os.ParcelFileDescriptor r7;

        r0 := @this: com.android.server.ConnectivityService;

        r6 := @parameter0: com.android.internal.net.VpnConfig;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r4 = (com.android.server.connectivity.Vpn) $r3;

        r7 = virtualinvoke $r4.<com.android.server.connectivity.Vpn: android.os.ParcelFileDescriptor establish(com.android.internal.net.VpnConfig)>(r6);

        exitmonitor r1;

     label2:
        return r7;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void factoryReset()
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1;
        long l1;
        android.os.UserManager $r2, $r4, $r5;
        boolean $z0, $z1, $z2, $z5, $z6;
        com.android.server._$$Lambda$ConnectivityService$zKYeCXPns6N_1Autc_TtgY0oBKw $r3;
        android.content.Context $r6, $r8;
        android.content.ContentResolver $r7, $r9;
        java.lang.String $r10, r14;
        android.security.KeyStore $r11;
        java.lang.Throwable $r12, $r13;
        com.android.internal.net.VpnConfig r16;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceSettingsPermission()>();

        $r2 = r0.<com.android.server.ConnectivityService: android.os.UserManager mUserManager>;

        $z0 = virtualinvoke $r2.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_network_reset");

        if $z0 == 0 goto label01;

        return;

     label01:
        i0 = staticinvoke <android.os.UserHandle: int getCallingUserId()>();

        $r3 = new com.android.server._$$Lambda$ConnectivityService$zKYeCXPns6N_1Autc_TtgY0oBKw;

        specialinvoke $r3.<com.android.server._$$Lambda$ConnectivityService$zKYeCXPns6N_1Autc_TtgY0oBKw: void <init>(com.android.server.ConnectivityService)>(r0);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r3);

        virtualinvoke r0.<com.android.server.ConnectivityService: void setAirplaneMode(boolean)>(0);

        $r4 = r0.<com.android.server.ConnectivityService: android.os.UserManager mUserManager>;

        $z1 = virtualinvoke $r4.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("no_config_vpn");

        if $z1 != 0 goto label24;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label02:
        r14 = virtualinvoke r0.<com.android.server.ConnectivityService: java.lang.String getAlwaysOnVpnPackage(int)>(i0);

     label03:
        if r14 == null goto label05;

     label04:
        virtualinvoke r0.<com.android.server.ConnectivityService: boolean setAlwaysOnVpnPackage(int,java.lang.String,boolean,java.util.List)>(i0, null, 0, null);

        virtualinvoke r0.<com.android.server.ConnectivityService: void setVpnPackageAuthorization(java.lang.String,int,int)>(r14, i0, -1);

     label05:
        $z5 = r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z5 == 0 goto label14;

     label06:
        if i0 != 0 goto label14;

     label07:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label08:
        $r11 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        virtualinvoke $r11.<android.security.KeyStore: boolean delete(java.lang.String)>("LOCKDOWN_VPN");

        r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled> = 0;

        specialinvoke r0.<com.android.server.ConnectivityService: void setLockdownTracker(com.android.server.net.LockdownVpnTracker)>(null);

     label09:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label10:
        goto label14;

     label11:
        $r12 := @caughtexception;

     label12:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

     label13:
        throw $r12;

     label14:
        r16 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.internal.net.VpnConfig getVpnConfig(int)>(i0);

     label15:
        if r16 == null goto label19;

     label16:
        $z6 = r16.<com.android.internal.net.VpnConfig: boolean legacy>;

        if $z6 == 0 goto label18;

        virtualinvoke r0.<com.android.server.ConnectivityService: boolean prepareVpn(java.lang.String,java.lang.String,int)>("[Legacy VPN]", "[Legacy VPN]", i0);

     label17:
        goto label19;

     label18:
        $r10 = r16.<com.android.internal.net.VpnConfig: java.lang.String user>;

        virtualinvoke r0.<com.android.server.ConnectivityService: void setVpnPackageAuthorization(java.lang.String,int,int)>($r10, i0, -1);

        virtualinvoke r0.<com.android.server.ConnectivityService: boolean prepareVpn(java.lang.String,java.lang.String,int)>(null, "[Legacy VPN]", i0);

     label19:
        exitmonitor r1;

     label20:
        goto label24;

     label21:
        $r13 := @caughtexception;

     label22:
        exitmonitor r1;

     label23:
        throw $r13;

     label24:
        $r5 = r0.<com.android.server.ConnectivityService: android.os.UserManager mUserManager>;

        $z2 = virtualinvoke $r5.<android.os.UserManager: boolean hasUserRestriction(java.lang.String)>("disallow_config_private_dns");

        if $z2 != 0 goto label25;

        $r8 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r9 = virtualinvoke $r8.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r9, "private_dns_mode", "opportunistic");

     label25:
        $r6 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        staticinvoke <android.provider.Settings$Global: boolean putString(android.content.ContentResolver,java.lang.String,java.lang.String)>($r7, "network_avoid_bad_wifi", null);

        return;

        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label05 to label06 with label21;
        catch java.lang.Throwable from label07 to label08 with label21;
        catch java.lang.Throwable from label08 to label09 with label11;
        catch java.lang.Throwable from label09 to label10 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label13 to label14 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    public android.net.LinkProperties getActiveLinkProperties()
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.net.NetworkState r1;
        android.net.LinkProperties $r2, $r3, $r4;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(i0);

        $r2 = r1.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        if $r2 != null goto label1;

        return null;

     label1:
        $r3 = r1.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $r4 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties linkPropertiesRestrictedForCallerPermissions(android.net.LinkProperties,int,int)>($r3, $i1, i0);

        return $r4;
    }

    public android.net.Network getActiveNetwork()
    {
        com.android.server.ConnectivityService r0;
        int $i0;
        android.net.Network $r1;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.Network getActiveNetworkForUidInternal(int,boolean)>($i0, 0);

        return $r1;
    }

    public android.net.Network getActiveNetworkForUid(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;
        android.content.Context $r1;
        android.net.Network $r2;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r1);

        $r2 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.Network getActiveNetworkForUidInternal(int,boolean)>(i0, z0);

        return $r2;
    }

    public android.net.NetworkInfo getActiveNetworkInfo()
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.net.NetworkState r1;
        android.net.NetworkInfo $r2, $r3;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(i0);

        specialinvoke r0.<com.android.server.ConnectivityService: void filterNetworkStateForUid(android.net.NetworkState,int,boolean)>(r1, i0, 0);

        $r2 = r1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        specialinvoke r0.<com.android.server.ConnectivityService: void maybeLogBlockedNetworkInfo(android.net.NetworkInfo,int)>($r2, i0);

        $r3 = r1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        return $r3;
    }

    public android.net.NetworkInfo getActiveNetworkInfoForUid(int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;
        android.net.NetworkState r1;
        android.content.Context $r2;
        android.net.NetworkInfo $r3;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(i0);

        specialinvoke r0.<com.android.server.ConnectivityService: void filterNetworkStateForUid(android.net.NetworkState,int,boolean)>(r1, i0, z0);

        $r3 = r1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        return $r3;
    }

    public android.net.NetworkInfo getActiveNetworkInfoUnfiltered()
    {
        com.android.server.ConnectivityService r0;
        int $i0;
        android.net.NetworkState $r1;
        android.net.NetworkInfo $r2;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>($i0);

        $r2 = $r1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        return $r2;
    }

    public android.net.NetworkQuotaInfo getActiveNetworkQuotaInfo()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r7;
        java.lang.StringBuilder $r3;
        int $i0;
        android.net.NetworkQuotaInfo $r8;

        r0 := @this: com.android.server.ConnectivityService;

        r1 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Shame on UID ");

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for calling the hidden API getNetworkQuotaInfo(). Shame!");

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>(r1, $r7);

        $r8 = new android.net.NetworkQuotaInfo;

        specialinvoke $r8.<android.net.NetworkQuotaInfo: void <init>()>();

        return $r8;
    }

    public android.net.NetworkInfo[] getAllNetworkInfo()
    {
        com.android.server.ConnectivityService r0;
        java.util.ArrayList r1;
        android.net.NetworkInfo r2;
        int $i0, i1;
        android.net.NetworkInfo[] $r3, $r5;
        java.lang.Object[] $r4;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        r1 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        i1 = 0;

     label1:
        if i1 > 18 goto label3;

        r2 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int)>(i1);

        if r2 == null goto label2;

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2);

     label2:
        i1 = i1 + 1;

        goto label1;

     label3:
        $i0 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r3 = newarray (android.net.NetworkInfo)[$i0];

        $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r5 = (android.net.NetworkInfo[]) $r4;

        return $r5;
    }

    public android.net.NetworkState[] getAllNetworkState()
    {
        com.android.server.ConnectivityService r0;
        java.util.ArrayList r1;
        android.net.Network[] r2;
        int i0, $i1, i2;
        com.android.server.connectivity.NetworkAgentInfo r3;
        android.content.Context $r4;
        android.net.NetworkState[] $r5, $r7;
        java.lang.Object[] $r6;
        android.net.Network $r8;
        android.net.NetworkState $r9;

        r0 := @this: com.android.server.ConnectivityService;

        $r4 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r4);

        r1 = staticinvoke <com.google.android.collect.Lists: java.util.ArrayList newArrayList()>();

        r2 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.Network[] getAllNetworks()>();

        i0 = lengthof r2;

        i2 = 0;

     label1:
        if i2 >= i0 goto label3;

        $r8 = r2[i2];

        r3 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>($r8);

        if r3 == null goto label2;

        $r9 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkState getNetworkState()>();

        virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r9);

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $r5 = newarray (android.net.NetworkState)[$i1];

        $r6 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r5);

        $r7 = (android.net.NetworkState[]) $r6;

        return $r7;
    }

    public android.net.Network[] getAllNetworks()
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseArray r1, $r2, $r3, $r4;
        int $i0, $i1, i2;
        java.lang.Object $r5;
        com.android.server.connectivity.NetworkAgentInfo $r6;
        android.net.Network $r7;
        java.lang.Throwable $r8;
        android.net.Network[] r9;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $i0 = virtualinvoke $r2.<android.util.SparseArray: int size()>();

        r9 = newarray (android.net.Network)[$i0];

     label2:
        i2 = 0;

     label3:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $i1 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i2 >= $i1 goto label5;

        $r4 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2);

        $r6 = (com.android.server.connectivity.NetworkAgentInfo) $r5;

        $r7 = $r6.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        r9[i2] = $r7;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        exitmonitor r1;

     label6:
        return r9;

     label7:
        $r8 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r8;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.String getAlwaysOnVpnPackage(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r3;
        java.lang.String r2, $r8, r12;
        java.lang.Object $r4;
        java.lang.Throwable $r9;
        com.android.server.connectivity.Vpn r10;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceControlAlwaysOnVpnPermission()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r10 = (com.android.server.connectivity.Vpn) $r4;

     label2:
        if r10 != null goto label5;

     label3:
        r2 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no Vpn configuration");

        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r2, $r8);

        exitmonitor r1;

     label4:
        return null;

     label5:
        r12 = virtualinvoke r10.<com.android.server.connectivity.Vpn: java.lang.String getAlwaysOnPackage()>();

        exitmonitor r1;

     label6:
        return r12;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.lang.String getCaptivePortalServerUrl()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1, $r3;
        android.content.res.Resources $r2;
        boolean $z0, $z1;
        android.content.ContentResolver $r4;
        java.lang.String r5, r6;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkStackOrSettingsPermission()>();

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        r5 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int)>(17039920);

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r5);

        if $z0 != 0 goto label1;

        return r5;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        r6 = staticinvoke <android.provider.Settings$Global: java.lang.String getString(android.content.ContentResolver,java.lang.String)>($r4, "captive_portal_http_url");

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r6);

        if $z1 != 0 goto label2;

        return r6;

     label2:
        return "http://connectivitycheck.gstatic.com/generate_204";
    }

    public int getConnectionOwnerUid(android.net.ConnectionInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.ConnectionInfo r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        java.net.InetSocketAddress $r2, $r3;
        boolean $z0;
        java.lang.StringBuilder $r4;
        java.lang.IllegalArgumentException $r7;
        java.lang.String $r8;
        java.lang.SecurityException $r9;
        com.android.server.connectivity.Vpn r10;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.ConnectionInfo;

        r10 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Vpn enforceActiveVpnOrNetworkStackPermission()>();

        if r10 == null goto label2;

        $i7 = virtualinvoke r10.<com.android.server.connectivity.Vpn: int getActiveAppVpnType()>();

        if $i7 != 1 goto label1;

        goto label2;

     label1:
        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("getConnectionOwnerUid() not allowed for non-VpnService VPNs");

        throw $r9;

     label2:
        $i2 = r1.<android.net.ConnectionInfo: int protocol>;

        $i1 = <android.system.OsConstants: int IPPROTO_TCP>;

        if $i2 == $i1 goto label4;

        $i5 = r1.<android.net.ConnectionInfo: int protocol>;

        $i4 = <android.system.OsConstants: int IPPROTO_UDP>;

        if $i5 != $i4 goto label3;

        goto label4;

     label3:
        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported protocol ");

        $i6 = r1.<android.net.ConnectionInfo: int protocol>;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r7 = new java.lang.IllegalArgumentException;

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8);

        throw $r7;

     label4:
        $i3 = r1.<android.net.ConnectionInfo: int protocol>;

        $r3 = r1.<android.net.ConnectionInfo: java.net.InetSocketAddress local>;

        $r2 = r1.<android.net.ConnectionInfo: java.net.InetSocketAddress remote>;

        i0 = staticinvoke <android.net.netlink.InetDiagMessage: int getConnectionOwnerUid(int,java.net.InetSocketAddress,java.net.InetSocketAddress)>($i3, $r3, $r2);

        if r10 == null goto label5;

        $z0 = virtualinvoke r10.<com.android.server.connectivity.Vpn: boolean appliesToUid(int)>(i0);

        if $z0 != 0 goto label5;

        return -1;

     label5:
        return i0;
    }

    public android.net.NetworkCapabilities[] getDefaultNetworkCapabilitiesForUser(int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network[] r2;
        int i0, $i1, $i2, i3, i4, $i5;
        android.net.Network r3, $r9;
        java.util.HashMap $r4;
        boolean $z0;
        android.util.SparseArray $r5, r16;
        java.lang.Object $r6;
        android.net.NetworkCapabilities $r7, $r10, r15, r18;
        java.lang.Throwable $r12;
        java.lang.String r13;
        com.android.server.connectivity.NetworkAgentInfo r14;
        com.android.server.connectivity.Vpn r17;
        android.net.NetworkCapabilities[] r19, $r22;
        java.util.Collection $r20;
        java.lang.Object[] $r21;

        r0 := @this: com.android.server.ConnectivityService;

        i3 := @parameter0: int;

        r13 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r14 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        r15 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo)>(r14);

        if r15 == null goto label01;

        $r9 = r14.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r10 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities maybeSanitizeLocationInfoForCaller(android.net.NetworkCapabilities,int,java.lang.String)>(r15, $i2, r13);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r10);

     label01:
        r16 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r16;

     label02:
        $z0 = r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled>;

        if $z0 != 0 goto label13;

        $r5 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i3);

        r17 = (com.android.server.connectivity.Vpn) $r6;

     label03:
        if r17 == null goto label13;

     label04:
        r2 = virtualinvoke r17.<com.android.server.connectivity.Vpn: android.net.Network[] getUnderlyingNetworks()>();

     label05:
        if r2 == null goto label13;

     label06:
        i0 = lengthof r2;

     label07:
        i4 = 0;

     label08:
        if i4 >= i0 goto label13;

        r3 = r2[i4];

     label09:
        r18 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilitiesInternal(android.net.Network)>(r3);

     label10:
        if r18 == null goto label12;

     label11:
        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r7 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities maybeSanitizeLocationInfoForCaller(android.net.NetworkCapabilities,int,java.lang.String)>(r18, $i1, r13);

        virtualinvoke $r4.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r7);

     label12:
        i4 = i4 + 1;

        goto label08;

     label13:
        exitmonitor r16;

     label14:
        $i5 = virtualinvoke $r4.<java.util.HashMap: int size()>();

        r19 = newarray (android.net.NetworkCapabilities)[$i5];

        $r20 = virtualinvoke $r4.<java.util.HashMap: java.util.Collection values()>();

        $r21 = interfaceinvoke $r20.<java.util.Collection: java.lang.Object[] toArray(java.lang.Object[])>(r19);

        $r22 = (android.net.NetworkCapabilities[]) $r21;

        return $r22;

     label15:
        $r12 := @caughtexception;

     label16:
        exitmonitor r16;

     label17:
        throw $r12;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public android.net.NetworkRequest getDefaultRequest()
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        return $r1;
    }

    public android.net.ProxyInfo getGlobalProxy()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.ProxyTracker $r1;
        android.net.ProxyInfo $r2;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.ProxyTracker mProxyTracker>;

        $r2 = virtualinvoke $r1.<com.android.server.connectivity.ProxyTracker: android.net.ProxyInfo getGlobalProxy()>();

        return $r2;
    }

    public int getLastTetherError(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        android.net.TetheringManager $r4;
        int $i0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tethering");

        $r4 = (android.net.TetheringManager) $r3;

        $i0 = virtualinvoke $r4.<android.net.TetheringManager: int getLastTetherError(java.lang.String)>(r1);

        return $i0;
    }

    public com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        com.android.server.connectivity.Vpn $r4;
        java.lang.Throwable $r5;
        com.android.internal.net.LegacyVpnInfo r6;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r4 = (com.android.server.connectivity.Vpn) $r3;

        r6 = virtualinvoke $r4.<com.android.server.connectivity.Vpn: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>();

        exitmonitor r1;

     label2:
        return r6;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public android.net.LinkProperties getLinkProperties(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo $r1;
        int $i0, $i1;
        android.net.LinkProperties $r2, r4;
        android.net.Network r3;

        r0 := @this: com.android.server.ConnectivityService;

        r3 := @parameter0: android.net.Network;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r1 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r3);

        r4 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(com.android.server.connectivity.NetworkAgentInfo)>($r1);

        if r4 != null goto label1;

        return null;

     label1:
        $i0 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties linkPropertiesRestrictedForCallerPermissions(android.net.LinkProperties,int,int)>(r4, $i0, $i1);

        return $r2;
    }

    public android.net.LinkProperties getLinkPropertiesForType(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1, $i2;
        android.net.LinkProperties r1, $r4;
        com.android.server.ConnectivityService$LegacyTypeTracker $r2;
        com.android.server.connectivity.NetworkAgentInfo $r3;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $r3 = virtualinvoke $r2.<com.android.server.ConnectivityService$LegacyTypeTracker: com.android.server.connectivity.NetworkAgentInfo getNetworkForType(int)>(i0);

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties getLinkProperties(com.android.server.connectivity.NetworkAgentInfo)>($r3);

        if r1 != null goto label1;

        return null;

     label1:
        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r4 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties linkPropertiesRestrictedForCallerPermissions(android.net.LinkProperties,int,int)>(r1, $i1, $i2);

        return $r4;
    }

    public java.lang.String getMobileProvisioningUrl()
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r5, $r9, $r11, $r17, r18, r21, r22;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r2, $r14;
        android.telephony.TelephonyManager $r6, $r8, $r10;
        java.lang.Object[] $r7;
        android.content.Context $r12;
        android.content.res.Resources $r13;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceSettingsPermission()>();

        r18 = specialinvoke r0.<com.android.server.ConnectivityService: java.lang.String getProvisioningUrlBaseFromFile()>();

        $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r18);

        if $z0 == 0 goto label1;

        $r12 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r13 = virtualinvoke $r12.<android.content.Context: android.content.res.Resources getResources()>();

        r18 = virtualinvoke $r13.<android.content.res.Resources: java.lang.String getString(int)>(17040643);

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMobileProvisioningUrl: mobile_provisioining_url from resource =");

        virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r17);

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getMobileProvisioningUrl: mobile_provisioning_url from File =");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r5);

     label2:
        r21 = r18;

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r18);

        if $z1 != 0 goto label4;

        $r6 = r0.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        r1 = virtualinvoke $r6.<android.telephony.TelephonyManager: java.lang.String getLine1Number()>();

        r22 = r1;

        $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1);

        if $z2 == 0 goto label3;

        r22 = "0000000000";

     label3:
        $r7 = newarray (java.lang.Object)[3];

        $r8 = r0.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        $r9 = virtualinvoke $r8.<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()>();

        $r7[0] = $r9;

        $r10 = r0.<com.android.server.ConnectivityService: android.telephony.TelephonyManager mTelephonyManager>;

        $r11 = virtualinvoke $r10.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>();

        $r7[1] = $r11;

        $r7[2] = r22;

        r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r18, $r7);

     label4:
        return r21;
    }

    public int getMultipathPreference(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        com.android.server.connectivity.MultipathPolicyTracker $r2;
        android.net.util.MultinetworkPolicyTracker $r3;
        int $i0, $i1;
        android.net.NetworkCapabilities $r4;
        boolean $z0;
        android.net.Network r5;
        java.lang.Integer r6;

        r0 := @this: com.android.server.ConnectivityService;

        r5 := @parameter0: android.net.Network;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        r1 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r5);

        if r1 == null goto label1;

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z0 = virtualinvoke $r4.<android.net.NetworkCapabilities: boolean hasCapability(int)>(11);

        if $z0 == 0 goto label1;

        return 7;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.MultipathPolicyTracker mMultipathPolicyTracker>;

        r6 = virtualinvoke $r2.<com.android.server.connectivity.MultipathPolicyTracker: java.lang.Integer getMultipathPreference(android.net.Network)>(r5);

        if r6 == null goto label2;

        $i1 = virtualinvoke r6.<java.lang.Integer: int intValue()>();

        return $i1;

     label2:
        $r3 = r0.<com.android.server.ConnectivityService: android.net.util.MultinetworkPolicyTracker mMultinetworkPolicyTracker>;

        $i0 = virtualinvoke $r3.<android.net.util.MultinetworkPolicyTracker: int getMeteredMultipathPreference()>();

        return $i0;
    }

    protected com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        int $i0;
        com.android.server.connectivity.NetworkAgentInfo $r2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        if r1 != null goto label1;

        return null;

     label1:
        $i0 = r1.<android.net.Network: int netId>;

        $r2 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetId(int)>($i0);

        return $r2;
    }

    public android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        java.lang.String r2;
        android.app.AppOpsManager $r3;
        int $i0, $i1;
        android.net.NetworkCapabilities $r4, $r5;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<com.android.server.ConnectivityService: android.app.AppOpsManager mAppOpsManager>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i0, r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r4 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilitiesInternal(android.net.Network)>(r1);

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities maybeSanitizeLocationInfoForCaller(android.net.NetworkCapabilities,int,java.lang.String)>($r4, $i1, r2);

        return $r5;
    }

    public android.net.Network getNetworkForType(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        android.net.NetworkState r1;
        android.net.LinkProperties $r2;
        boolean $z0;
        android.net.Network $r3;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkState getFilteredNetworkState(int,int)>(i0, i1);

        $r2 = r1.<android.net.NetworkState: android.net.LinkProperties linkProperties>;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isNetworkWithLinkPropertiesBlocked(android.net.LinkProperties,int,boolean)>($r2, i1, 0);

        if $z0 != 0 goto label1;

        $r3 = r1.<android.net.NetworkState: android.net.Network network>;

        return $r3;

     label1:
        return null;
    }

    public android.net.NetworkInfo getNetworkInfo(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2;
        android.net.NetworkState r1, $r6;
        android.net.Network[] $r2;
        android.net.NetworkInfo $r3, $r4, $r5, $r7;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.Network[] getVpnUnderlyingNetworks(int)>(i1);

        if $r2 == null goto label1;

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkState getUnfilteredActiveNetworkState(int)>(i1);

        $r3 = r1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        if $r3 == null goto label1;

        $r4 = r1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        $i2 = virtualinvoke $r4.<android.net.NetworkInfo: int getType()>();

        if $i2 != i0 goto label1;

        specialinvoke r0.<com.android.server.ConnectivityService: void filterNetworkStateForUid(android.net.NetworkState,int,boolean)>(r1, i1, 0);

        $r5 = r1.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        return $r5;

     label1:
        $r6 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkState getFilteredNetworkState(int,int)>(i0, i1);

        $r7 = $r6.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        return $r7;
    }

    public android.net.NetworkInfo getNetworkInfoForUid(android.net.Network, int, boolean)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0;
        android.net.NetworkInfo $r1;
        android.net.Network r2;
        com.android.server.connectivity.NetworkAgentInfo r3;
        android.net.NetworkState r4;

        r0 := @this: com.android.server.ConnectivityService;

        r2 := @parameter0: android.net.Network;

        i0 := @parameter1: int;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        r3 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r2);

        if r3 == null goto label1;

        r4 = virtualinvoke r3.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkState getNetworkState()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void filterNetworkStateForUid(android.net.NetworkState,int,boolean)>(r4, i0, z0);

        $r1 = r4.<android.net.NetworkState: android.net.NetworkInfo networkInfo>;

        return $r1;

     label1:
        return null;
    }

    public byte[] getNetworkWatchlistConfigHash()
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkWatchlistManager r1;
        android.content.Context $r2;
        java.lang.Object $r3;
        byte[] $r4;

        r0 := @this: com.android.server.ConnectivityService;

        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/NetworkWatchlistManager;");

        r1 = (android.net.NetworkWatchlistManager) $r3;

        if r1 != null goto label1;

        staticinvoke <com.android.server.ConnectivityService: void loge(java.lang.String)>("Unable to get NetworkWatchlistManager");

        return null;

     label1:
        $r4 = virtualinvoke r1.<android.net.NetworkWatchlistManager: byte[] getWatchlistConfigHash()>();

        return $r4;
    }

    public android.net.ProxyInfo getProxyForNetwork(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyInfo r1, $r4, $r5;
        com.android.server.connectivity.ProxyTracker $r2;
        com.android.server.ConnectivityService$Dependencies $r3;
        int $i0, $i1, $i2;
        boolean $z0;
        android.net.Network r6, r7;

        r0 := @this: com.android.server.ConnectivityService;

        r6 := @parameter0: android.net.Network;

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.ProxyTracker mProxyTracker>;

        r1 = virtualinvoke $r2.<com.android.server.connectivity.ProxyTracker: android.net.ProxyInfo getGlobalProxy()>();

        if r1 == null goto label1;

        return r1;

     label1:
        if r6 != null goto label3;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r7 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.Network getActiveNetworkForUidInternal(int,boolean)>($i2, 1);

        if r7 != null goto label2;

        return null;

     label2:
        $r5 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.ProxyInfo getLinkPropertiesProxyInfo(android.net.Network)>(r7);

        return $r5;

     label3:
        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $i1 = r6.<android.net.Network: int netId>;

        $z0 = virtualinvoke $r3.<com.android.server.ConnectivityService$Dependencies: boolean queryUserAccess(int,int)>($i0, $i1);

        if $z0 == 0 goto label4;

        $r4 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.ProxyInfo getLinkPropertiesProxyInfo(android.net.Network)>(r6);

        return $r4;

     label4:
        return null;
    }

    public int getRestoreDefaultNetworkDelay(int)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i2, i3, i4;
        com.android.server.connectivity.MockableSystemProperties $r1;
        android.net.NetworkConfig $r2, $r3;
        java.lang.Throwable $r4;
        java.lang.String r5;
        android.net.NetworkConfig[] r7;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.MockableSystemProperties mSystemProperties>;

        r5 = virtualinvoke $r1.<com.android.server.connectivity.MockableSystemProperties: java.lang.String get(java.lang.String)>("android.telephony.apn-restore");

        if r5 == null goto label4;

        $i2 = virtualinvoke r5.<java.lang.String: int length()>();

        if $i2 == 0 goto label4;

     label1:
        i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r5);

     label2:
        return i3;

     label3:
        $r4 := @caughtexception;

     label4:
        i4 = 60000;

        if i0 > 18 goto label5;

        r7 = r0.<com.android.server.ConnectivityService: android.net.NetworkConfig[] mNetConfigs>;

        i4 = 60000;

        $r2 = r7[i0];

        if $r2 == null goto label5;

        $r3 = r7[i0];

        i4 = $r3.<android.net.NetworkConfig: int restoreTime>;

     label5:
        return i4;

        catch java.lang.NumberFormatException from label1 to label2 with label3;
    }

    public java.lang.String[] getTetherableIfaces()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.TetheringManager $r3;
        java.lang.String[] $r4;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tethering");

        $r3 = (android.net.TetheringManager) $r2;

        $r4 = virtualinvoke $r3.<android.net.TetheringManager: java.lang.String[] getTetherableIfaces()>();

        return $r4;
    }

    public java.lang.String[] getTetherableUsbRegexs()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.TetheringManager $r3;
        java.lang.String[] $r4;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tethering");

        $r3 = (android.net.TetheringManager) $r2;

        $r4 = virtualinvoke $r3.<android.net.TetheringManager: java.lang.String[] getTetherableUsbRegexs()>();

        return $r4;
    }

    public java.lang.String[] getTetherableWifiRegexs()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.TetheringManager $r3;
        java.lang.String[] $r4;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tethering");

        $r3 = (android.net.TetheringManager) $r2;

        $r4 = virtualinvoke $r3.<android.net.TetheringManager: java.lang.String[] getTetherableWifiRegexs()>();

        return $r4;
    }

    public java.lang.String[] getTetheredIfaces()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.TetheringManager $r3;
        java.lang.String[] $r4;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tethering");

        $r3 = (android.net.TetheringManager) $r2;

        $r4 = virtualinvoke $r3.<android.net.TetheringManager: java.lang.String[] getTetheredIfaces()>();

        return $r4;
    }

    public java.lang.String[] getTetheringErroredIfaces()
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.net.TetheringManager $r3;
        java.lang.String[] $r4;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("tethering");

        $r3 = (android.net.TetheringManager) $r2;

        $r4 = virtualinvoke $r3.<android.net.TetheringManager: java.lang.String[] getTetheringErroredIfaces()>();

        return $r4;
    }

    public com.android.internal.net.VpnConfig getVpnConfig(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        java.lang.Throwable $r4;
        com.android.server.connectivity.Vpn r5;
        com.android.internal.net.VpnConfig r6;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r5 = (com.android.server.connectivity.Vpn) $r3;

     label2:
        if r5 == null goto label5;

     label3:
        r6 = virtualinvoke r5.<com.android.server.connectivity.Vpn: com.android.internal.net.VpnConfig getVpnConfig()>();

        exitmonitor r1;

     label4:
        return r6;

     label5:
        exitmonitor r1;

     label6:
        return null;

     label7:
        $r4 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public java.util.List getVpnLockdownWhitelist(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r3;
        java.lang.String r2, $r8;
        java.lang.Object $r4;
        java.lang.Throwable $r9;
        com.android.server.connectivity.Vpn r10;
        java.lang.StringBuilder r11;
        java.util.List r12;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceControlAlwaysOnVpnPermission()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r10 = (com.android.server.connectivity.Vpn) $r4;

     label2:
        if r10 != null goto label5;

     label3:
        r2 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no Vpn configuration");

        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r2, $r8);

        exitmonitor r1;

     label4:
        return null;

     label5:
        r12 = virtualinvoke r10.<com.android.server.connectivity.Vpn: java.util.List getLockdownWhitelist()>();

        exitmonitor r1;

     label6:
        return r12;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void handleRestrictBackgroundChanged(boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, z1, $z2, $z3, $z4;
        java.util.Iterator r1;
        com.android.server.connectivity.NetworkAgentInfo r2;
        java.util.HashMap $r3;
        java.util.Collection $r4;
        java.lang.Object $r5;
        android.net.NetworkCapabilities $r6;

        r0 := @this: com.android.server.ConnectivityService;

        z0 := @parameter0: boolean;

        $z2 = r0.<com.android.server.ConnectivityService: boolean mRestrictBackground>;

        if $z2 != z0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkAgentInfos>;

        $r4 = virtualinvoke $r3.<java.util.HashMap: java.util.Collection values()>();

        r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>();

     label2:
        $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label3;

        $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r2 = (com.android.server.connectivity.NetworkAgentInfo) $r5;

        $r6 = r2.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        z1 = virtualinvoke $r6.<android.net.NetworkCapabilities: boolean isMetered()>();

        $z4 = r0.<com.android.server.ConnectivityService: boolean mRestrictBackground>;

        specialinvoke r0.<com.android.server.ConnectivityService: void maybeNotifyNetworkBlocked(com.android.server.connectivity.NetworkAgentInfo,boolean,boolean,boolean,boolean)>(r2, z1, z1, $z4, z0);

        goto label2;

     label3:
        r0.<com.android.server.ConnectivityService: boolean mRestrictBackground> = z0;

        return;
    }

    void handleUidRulesChanged(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2;
        android.util.SparseIntArray $r1, $r2, $r3;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        $i2 = virtualinvoke $r1.<android.util.SparseIntArray: int get(int,int)>(i0, 0);

        if $i2 != i1 goto label1;

        return;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void maybeNotifyNetworkBlockedForNewUidRules(int,int)>(i0, i1);

        if i1 != 0 goto label2;

        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r3.<android.util.SparseIntArray: void delete(int)>(i0);

        goto label3;

     label2:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        virtualinvoke $r2.<android.util.SparseIntArray: void put(int,int)>(i0, i1);

     label3:
        return;
    }

    public void handleUpdateLinkProperties(com.android.server.connectivity.NetworkAgentInfo, android.net.LinkProperties)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1, $r5;
        android.net.LinkProperties r2, $r15, $r16;
        android.net.Network $r4;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r6;
        java.lang.String $r8, $r14;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter1: android.net.LinkProperties;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRunningOnConnectivityServiceThread()>();

        $r4 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        $i0 = $r4.<android.net.Network: int netId>;

        $r5 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetId(int)>($i0);

        if $r5 == r1 goto label1;

        return;

     label1:
        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 != 0 goto label2;

        $z3 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z3 == 0 goto label3;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Update of LinkProperties for ");

        $r8 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; created=");

        $z1 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean created>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; everConnected=");

        $z2 = r1.<com.android.server.connectivity.NetworkAgentInfo: boolean everConnected>;

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r14 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r14);

     label3:
        $r15 = new android.net.LinkProperties;

        $r16 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke $r15.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>($r16);

        specialinvoke r0.<com.android.server.ConnectivityService: void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties,android.net.LinkProperties)>(r1, r2, $r15);

        return;
    }

    public boolean isActiveNetworkMetered()
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1;
        android.net.Network $r2;
        boolean $z0, $z1;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r2 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.Network getActiveNetwork()>();

        r1 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilitiesInternal(android.net.Network)>($r2);

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(11);

        $z1 = 1 ^ $z0;

        return $z1;

     label1:
        return 1;
    }

    public boolean isAlwaysOnVpnPackageSupported(int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r2;
        boolean z0;
        java.lang.Object $r3;
        android.security.KeyStore $r4;
        java.lang.String $r8, r10, r12;
        java.lang.Throwable $r9;
        com.android.server.connectivity.Vpn r11;
        java.lang.StringBuilder r13;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r10 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceSettingsPermission()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r11 = (com.android.server.connectivity.Vpn) $r3;

     label2:
        if r11 != null goto label5;

     label3:
        r12 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r13 = new java.lang.StringBuilder;

        specialinvoke r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no Vpn configuration");

        $r8 = virtualinvoke r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r12, $r8);

        exitmonitor r1;

     label4:
        return 0;

     label5:
        $r4 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        z0 = virtualinvoke r11.<com.android.server.connectivity.Vpn: boolean isAlwaysOnPackageSupported(java.lang.String,android.security.KeyStore)>(r10, $r4);

        exitmonitor r1;

     label6:
        return z0;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isCallerCurrentAlwaysOnVpnApp()
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseArray r1;
        boolean $z0, z1;
        java.lang.Throwable $r2;
        com.android.server.connectivity.Vpn r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label01:
        r3 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Vpn getVpnIfOwner()>();

     label02:
        if r3 == null goto label05;

     label03:
        $z0 = virtualinvoke r3.<com.android.server.connectivity.Vpn: boolean getAlwaysOn()>();

        if $z0 == 0 goto label05;

     label04:
        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z1;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public boolean isCallerCurrentAlwaysOnVpnLockdownApp()
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseArray r1;
        boolean $z0, z1;
        java.lang.Throwable $r2;
        com.android.server.connectivity.Vpn r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label01:
        r3 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.Vpn getVpnIfOwner()>();

     label02:
        if r3 == null goto label05;

     label03:
        $z0 = virtualinvoke r3.<com.android.server.connectivity.Vpn: boolean getLockdown()>();

        if $z0 == 0 goto label05;

     label04:
        z1 = 1;

        goto label06;

     label05:
        z1 = 0;

     label06:
        exitmonitor r1;

     label07:
        return z1;

     label08:
        $r2 := @caughtexception;

     label09:
        exitmonitor r1;

     label10:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    protected boolean isDefaultNetwork(com.android.server.connectivity.NetworkAgentInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1, $r2;
        boolean z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        $r2 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        if r1 != $r2 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public boolean isNetworkSupported(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        com.android.server.ConnectivityService$LegacyTypeTracker $r1;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $z0 = virtualinvoke $r1.<com.android.server.ConnectivityService$LegacyTypeTracker: boolean isTypeSupported(int)>(i0);

        return $z0;
    }

    public boolean isVpnLockdownEnabled(int)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        android.util.SparseArray r1, $r3;
        java.lang.String r2, $r8;
        boolean z0;
        java.lang.Object $r4;
        java.lang.Throwable $r9;
        com.android.server.connectivity.Vpn r10;
        java.lang.StringBuilder r11;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceControlAlwaysOnVpnPermission()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r10 = (com.android.server.connectivity.Vpn) $r4;

     label2:
        if r10 != null goto label5;

     label3:
        r2 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r11 = new java.lang.StringBuilder;

        specialinvoke r11.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no Vpn configuration");

        $r8 = virtualinvoke r11.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r2, $r8);

        exitmonitor r1;

     label4:
        return 0;

     label5:
        z0 = virtualinvoke r10.<com.android.server.connectivity.Vpn: boolean getLockdown()>();

        exitmonitor r1;

     label6:
        return z0;

     label7:
        $r9 := @caughtexception;

     label8:
        exitmonitor r1;

     label9:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public void lambda$declareNetworkRequestUnfulfillable$7$ConnectivityService(android.net.NetworkRequest)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest r1;
        int $i0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkRequest;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void handleReleaseNetworkRequest(android.net.NetworkRequest,int,boolean)>(r1, $i0, 1);

        return;
    }

    public void lambda$factoryReset$10$ConnectivityService() throws java.lang.Exception
    {
        com.android.server.ConnectivityService r0;
        android.content.Context $r1;
        android.net.IpMemoryStore $r2;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = staticinvoke <android.net.IpMemoryStore: android.net.IpMemoryStore getMemoryStore(android.content.Context)>($r1);

        virtualinvoke $r2.<android.net.IpMemoryStore: void factoryReset()>();

        return;
    }

    public void lambda$maybeSanitizeLocationInfoForCaller$1$ConnectivityService(java.lang.String, int, android.net.NetworkCapabilities) throws java.lang.Exception
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        int i0;
        android.net.NetworkCapabilities r2;
        com.android.internal.util.LocationPermissionChecker $r3;
        boolean $z0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        r2 := @parameter2: android.net.NetworkCapabilities;

        $r3 = r0.<com.android.server.ConnectivityService: com.android.internal.util.LocationPermissionChecker mLocationPermissionChecker>;

        $z0 = virtualinvoke $r3.<com.android.internal.util.LocationPermissionChecker: boolean checkLocationPermission(java.lang.String,java.lang.String,int,java.lang.String)>(r1, null, i0, null);

        if $z0 != 0 goto label1;

        virtualinvoke r2.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setOwnerUid(int)>(-1);

     label1:
        return;
    }

    public void lambda$new$0$ConnectivityService()
    {
        com.android.server.ConnectivityService r0;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void rematchForAvoidBadWifiUpdate()>();

        return;
    }

    public void lambda$registerNetworkProvider$6$ConnectivityService(android.os.Messenger)
    {
        com.android.server.ConnectivityService r0;
        android.os.Messenger r1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.os.Messenger;

        virtualinvoke r0.<com.android.server.ConnectivityService: void unregisterNetworkProvider(android.os.Messenger)>(r1);

        return;
    }

    public void lambda$setUnderlyingNetworksForVpn$9$ConnectivityService()
    {
        com.android.server.ConnectivityService r0;

        r0 := @this: com.android.server.ConnectivityService;

        specialinvoke r0.<com.android.server.ConnectivityService: void updateAllVpnsCapabilities()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void notifyIfacesChangedForNetworkStats()>();

        return;
    }

    public void lambda$startCaptivePortalApp$4$ConnectivityService(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities $r1;
        boolean $z0;
        android.net.NetworkMonitorManager $r2;
        android.net.Network r3;
        com.android.server.connectivity.NetworkAgentInfo r4;

        r0 := @this: com.android.server.ConnectivityService;

        r3 := @parameter0: android.net.Network;

        r4 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r3);

        if r4 != null goto label1;

        return;

     label1:
        $r1 = r4.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        $z0 = virtualinvoke $r1.<android.net.NetworkCapabilities: boolean hasCapability(int)>(17);

        if $z0 != 0 goto label2;

        return;

     label2:
        $r2 = virtualinvoke r4.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkMonitorManager networkMonitor()>();

        virtualinvoke $r2.<android.net.NetworkMonitorManager: boolean launchCaptivePortalApp()>();

        return;
    }

    public void lambda$startCaptivePortalAppInternal$5$ConnectivityService(android.content.Intent) throws java.lang.Exception
    {
        com.android.server.ConnectivityService r0;
        android.content.Intent r1;
        android.os.UserHandle $r2;
        android.content.Context $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.content.Intent;

        $r3 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = <android.os.UserHandle: android.os.UserHandle CURRENT>;

        virtualinvoke $r3.<android.content.Context: void startActivityAsUser(android.content.Intent,android.os.UserHandle)>(r1, $r2);

        return;
    }

    public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities, android.os.Messenger, android.os.IBinder, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r11;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        android.net.NetworkCapabilities $r3, r12;
        android.net.NetworkRequest $r4;
        android.net.NetworkRequest$Type $r5;
        com.android.server.ConnectivityService$NetworkRequestInfo $r6;
        android.os.Message $r7;
        java.lang.StringBuilder $r8;
        android.os.Messenger r13;
        android.os.IBinder r14;
        com.android.server.ConnectivityService$InternalHandler r18;

        r0 := @this: com.android.server.ConnectivityService;

        r12 := @parameter0: android.net.NetworkCapabilities;

        r13 := @parameter1: android.os.Messenger;

        r14 := @parameter2: android.os.IBinder;

        r1 := @parameter3: java.lang.String;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean hasWifiNetworkListenPermission(android.net.NetworkCapabilities)>(r12);

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

     label1:
        $r3 = new android.net.NetworkCapabilities;

        specialinvoke $r3.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r12);

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureSufficientPermissionsForRequest(android.net.NetworkCapabilities,int,int,java.lang.String)>(r12, $i1, i0, r1);

        specialinvoke r0.<com.android.server.ConnectivityService: void restrictRequestUidsForCallerAndSetRequestorInfo(android.net.NetworkCapabilities,int,java.lang.String)>($r3, i0, r1);

        specialinvoke r0.<com.android.server.ConnectivityService: void restrictBackgroundRequestForCaller(android.net.NetworkCapabilities)>($r3);

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureValid(android.net.NetworkCapabilities)>($r3);

        $r4 = new android.net.NetworkRequest;

        $i2 = specialinvoke r0.<com.android.server.ConnectivityService: int nextNetworkRequestId()>();

        $r5 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type LISTEN>;

        specialinvoke $r4.<android.net.NetworkRequest: void <init>(android.net.NetworkCapabilities,int,int,android.net.NetworkRequest$Type)>($r3, -1, $i2, $r5);

        $r6 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke $r6.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder)>(r0, r13, $r4, r14);

        $z1 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z1 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listenForNetwork for ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r11);

     label2:
        r18 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r7 = virtualinvoke r18.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(21, $r6);

        virtualinvoke r18.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r7);

        return $r4;
    }

    android.net.NetworkCapabilities maybeSanitizeLocationInfoForCaller(android.net.NetworkCapabilities, int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkCapabilities r1, $r4;
        int i0, $i1;
        java.lang.String r2;
        boolean $z0;
        com.android.server._$$Lambda$ConnectivityService$ONlkcNIY7zZyZhG_msTp1qIA_cQ $r5;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        r2 := @parameter2: java.lang.String;

        if r1 != null goto label1;

        return null;

     label1:
        $r4 = new android.net.NetworkCapabilities;

        specialinvoke $r4.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r1);

        $i1 = virtualinvoke $r4.<android.net.NetworkCapabilities: int getOwnerUid()>();

        if i0 == $i1 goto label2;

        virtualinvoke $r4.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setOwnerUid(int)>(-1);

        return $r4;

     label2:
        $z0 = virtualinvoke r1.<android.net.NetworkCapabilities: boolean hasTransport(int)>(4);

        if $z0 == 0 goto label3;

        return $r4;

     label3:
        $r5 = new com.android.server._$$Lambda$ConnectivityService$ONlkcNIY7zZyZhG_msTp1qIA_cQ;

        specialinvoke $r5.<com.android.server._$$Lambda$ConnectivityService$ONlkcNIY7zZyZhG_msTp1qIA_cQ: void <init>(com.android.server.ConnectivityService,java.lang.String,int,android.net.NetworkCapabilities)>(r0, r2, i0, $r4);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r5);

        return $r4;
    }

    android.net.NetworkCapabilities networkCapabilitiesRestrictedForCallerPermissions(android.net.NetworkCapabilities, int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        android.net.NetworkCapabilities $r1, r10;
        boolean $z0;
        android.net.NetworkSpecifier $r2, $r5, $r6;
        int[] $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r10 := @parameter0: android.net.NetworkCapabilities;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = new android.net.NetworkCapabilities;

        specialinvoke $r1.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r10);

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkSettingsPermission(int,int)>(i0, i1);

        if $z0 != 0 goto label1;

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setUids(java.util.Set)>(null);

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setSSID(java.lang.String)>(null);

     label1:
        $r2 = virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()>();

        if $r2 == null goto label2;

        $r5 = virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkSpecifier getNetworkSpecifier()>();

        $r6 = virtualinvoke $r5.<android.net.NetworkSpecifier: android.net.NetworkSpecifier redact()>();

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setNetworkSpecifier(android.net.NetworkSpecifier)>($r6);

     label2:
        $r3 = newarray (int)[0];

        virtualinvoke $r1.<android.net.NetworkCapabilities: android.net.NetworkCapabilities setAdministratorUids(int[])>($r3);

        return $r1;
    }

    public final int nextNetworkProviderId()
    {
        com.android.server.ConnectivityService r0;
        java.util.concurrent.atomic.AtomicInteger $r1;
        int $i0;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: java.util.concurrent.atomic.AtomicInteger mNextNetworkProviderId>;

        $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>();

        return $i0;
    }

    protected void notifyNetworkAvailable(com.android.server.connectivity.NetworkAgentInfo, com.android.server.ConnectivityService$NetworkRequestInfo)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        com.android.server.ConnectivityService$NetworkRequestInfo r2;
        boolean z0, $z1, $z2;
        com.android.server.ConnectivityService$InternalHandler $r3;
        android.app.PendingIntent $r4;
        android.net.NetworkCapabilities $r5;
        int $i0, $i1, $i2, i3;
        android.util.SparseIntArray $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r2 := @parameter1: com.android.server.ConnectivityService$NetworkRequestInfo;

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        virtualinvoke $r3.<com.android.server.ConnectivityService$InternalHandler: void removeMessages(int,java.lang.Object)>(20, r2);

        $r4 = r2.<com.android.server.ConnectivityService$NetworkRequestInfo: android.app.PendingIntent mPendingIntent>;

        if $r4 == null goto label1;

        specialinvoke r0.<com.android.server.ConnectivityService: void sendPendingIntentForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int)>(r2, r1, 524290);

        return;

     label1:
        $r5 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        z0 = virtualinvoke $r5.<android.net.NetworkCapabilities: boolean isMetered()>();

        $i1 = r2.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $r6 = r0.<com.android.server.ConnectivityService: android.util.SparseIntArray mUidRules>;

        $i0 = r2.<com.android.server.ConnectivityService$NetworkRequestInfo: int mUid>;

        $i2 = virtualinvoke $r6.<android.util.SparseIntArray: int get(int)>($i0);

        $z1 = r0.<com.android.server.ConnectivityService: boolean mRestrictBackground>;

        $z2 = specialinvoke r0.<com.android.server.ConnectivityService: boolean isUidNetworkingWithVpnBlocked(int,int,boolean,boolean)>($i1, $i2, z0, $z1);

        i3 = (int) $z2;

        specialinvoke r0.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)>(r2, r1, 524290, i3);

        return;
    }

    protected void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo, int)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        int i0;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        i0 := @parameter1: int;

        virtualinvoke r0.<com.android.server.ConnectivityService: void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo,int,int)>(r1, i0, 0);

        return;
    }

    protected void notifyNetworkCallbacks(com.android.server.connectivity.NetworkAgentInfo, int, int)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1;
        int i0, i1, i2, $i3;
        android.net.NetworkRequest r2;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r3, $r13;
        java.lang.String $r7, $r9, $r16, r17;
        java.util.HashMap $r10;
        java.lang.Object $r11;
        android.app.PendingIntent $r12;
        com.android.server.ConnectivityService$NetworkRequestInfo r19;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $z0 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z0 != 0 goto label1;

        $z2 = <com.android.server.ConnectivityService: boolean DDBG>;

        if $z2 == 0 goto label2;

     label1:
        r17 = staticinvoke <android.net.ConnectivityManager: java.lang.String getCallbackName(int)>(i0);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("notifyType ");

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ");

        $r7 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: java.lang.String toShortString()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

     label2:
        i2 = 0;

     label3:
        $i3 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: int numNetworkRequests()>();

        if i2 >= $i3 goto label7;

        r2 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkRequest requestAt(int)>(i2);

        $r10 = r0.<com.android.server.ConnectivityService: java.util.HashMap mNetworkRequests>;

        $r11 = virtualinvoke $r10.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2);

        r19 = (com.android.server.ConnectivityService$NetworkRequestInfo) $r11;

        $z1 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z1 == 0 goto label4;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sending notification for ");

        virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r16);

     label4:
        $r12 = r19.<com.android.server.ConnectivityService$NetworkRequestInfo: android.app.PendingIntent mPendingIntent>;

        if $r12 != null goto label5;

        specialinvoke r0.<com.android.server.ConnectivityService: void callCallbackForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int,int)>(r19, r1, i0, i1);

        goto label6;

     label5:
        specialinvoke r0.<com.android.server.ConnectivityService: void sendPendingIntentForRequest(com.android.server.ConnectivityService$NetworkRequestInfo,com.android.server.connectivity.NetworkAgentInfo,int)>(r19, r1, i0);

     label6:
        i2 = i2 + 1;

        goto label3;

     label7:
        return;
    }

    public void onSendFinished(android.app.PendingIntent, android.content.Intent, int, java.lang.String, android.os.Bundle)
    {
        com.android.server.ConnectivityService r0;
        android.app.PendingIntent r1;
        int i0;
        java.lang.String r2, $r7;
        android.os.Bundle r3;
        java.lang.StringBuilder $r4;
        android.os.PowerManager$WakeLock $r8;
        android.content.Intent r9;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.app.PendingIntent;

        r9 := @parameter1: android.content.Intent;

        i0 := @parameter2: int;

        r2 := @parameter3: java.lang.String;

        r3 := @parameter4: android.os.Bundle;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finished sending ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r7);

        $r8 = r0.<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock mPendingIntentWakeLock>;

        virtualinvoke $r8.<android.os.PowerManager$WakeLock: void release()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void releasePendingNetworkRequestWithDelay(android.app.PendingIntent)>(r1);

        return;
    }

    public void onShellCommand(java.io.FileDescriptor, java.io.FileDescriptor, java.io.FileDescriptor, java.lang.String[], android.os.ShellCallback, android.os.ResultReceiver)
    {
        com.android.server.ConnectivityService r0;
        java.io.FileDescriptor r1, r2, r3;
        java.lang.String[] r4;
        android.os.ShellCallback r5;
        android.os.ResultReceiver r6;
        com.android.server.ConnectivityService$ShellCmd $r7;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: java.io.FileDescriptor;

        r2 := @parameter1: java.io.FileDescriptor;

        r3 := @parameter2: java.io.FileDescriptor;

        r4 := @parameter3: java.lang.String[];

        r5 := @parameter4: android.os.ShellCallback;

        r6 := @parameter5: android.os.ResultReceiver;

        $r7 = new com.android.server.ConnectivityService$ShellCmd;

        specialinvoke $r7.<com.android.server.ConnectivityService$ShellCmd: void <init>(com.android.server.ConnectivityService,com.android.server.ConnectivityService$1)>(r0, null);

        virtualinvoke $r7.<com.android.server.ConnectivityService$ShellCmd: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>(r0, r1, r2, r3, r4, r5, r6);

        return;
    }

    public void pendingListenForNetwork(android.net.NetworkCapabilities, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, $r11;
        int i0, $i1, $i2;
        boolean $z0, $z1;
        android.net.NetworkCapabilities $r3, r12;
        com.android.server.ConnectivityService$NetworkRequestInfo $r4;
        android.net.NetworkRequest $r5;
        android.net.NetworkRequest$Type $r6;
        android.os.Message $r7;
        java.lang.StringBuilder $r8;
        android.app.PendingIntent r13;
        com.android.server.ConnectivityService$InternalHandler r17;

        r0 := @this: com.android.server.ConnectivityService;

        r12 := @parameter0: android.net.NetworkCapabilities;

        r13 := @parameter1: android.app.PendingIntent;

        r1 := @parameter2: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r13, "PendingIntent cannot be null.");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean hasWifiNetworkListenPermission(android.net.NetworkCapabilities)>(r12);

        if $z0 != 0 goto label1;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void ensureValid(android.net.NetworkCapabilities)>(r12);

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureSufficientPermissionsForRequest(android.net.NetworkCapabilities,int,int,java.lang.String)>(r12, $i1, i0, r1);

        $r3 = new android.net.NetworkCapabilities;

        specialinvoke $r3.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r12);

        specialinvoke r0.<com.android.server.ConnectivityService: void restrictRequestUidsForCallerAndSetRequestorInfo(android.net.NetworkCapabilities,int,java.lang.String)>($r3, i0, r1);

        $r4 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        $r5 = new android.net.NetworkRequest;

        $i2 = specialinvoke r0.<com.android.server.ConnectivityService: int nextNetworkRequestId()>();

        $r6 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type LISTEN>;

        specialinvoke $r5.<android.net.NetworkRequest: void <init>(android.net.NetworkCapabilities,int,int,android.net.NetworkRequest$Type)>($r3, -1, $i2, $r6);

        specialinvoke $r4.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.net.NetworkRequest,android.app.PendingIntent)>(r0, $r5, r13);

        $z1 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z1 == 0 goto label2;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pendingListenForNetwork for ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4);

        $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r11);

     label2:
        r17 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r7 = virtualinvoke r17.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(21, $r4);

        virtualinvoke r17.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r7);

        return;
    }

    public android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities, android.app.PendingIntent, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1, $i2;
        android.net.NetworkCapabilities $r2, r11;
        android.net.NetworkRequest $r3;
        android.net.NetworkRequest$Type $r4;
        com.android.server.ConnectivityService$NetworkRequestInfo $r5;
        java.lang.StringBuilder $r6;
        java.lang.String $r9, r13;
        android.os.Message $r10;
        android.app.PendingIntent r12;
        com.android.server.ConnectivityService$InternalHandler r18;

        r0 := @this: com.android.server.ConnectivityService;

        r11 := @parameter0: android.net.NetworkCapabilities;

        r12 := @parameter1: android.app.PendingIntent;

        r13 := @parameter2: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r12, "PendingIntent cannot be null.");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = new android.net.NetworkCapabilities;

        specialinvoke $r2.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r11);

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkRequestPermissions(android.net.NetworkCapabilities)>($r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceMeteredApnPolicy(android.net.NetworkCapabilities)>($r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRequestableCapabilities(android.net.NetworkCapabilities)>($r2);

        $i1 = staticinvoke <android.os.Binder: int getCallingPid()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureSufficientPermissionsForRequest(android.net.NetworkCapabilities,int,int,java.lang.String)>($r2, $i1, i0, r13);

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureValidNetworkSpecifier(android.net.NetworkCapabilities)>($r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void restrictRequestUidsForCallerAndSetRequestorInfo(android.net.NetworkCapabilities,int,java.lang.String)>($r2, i0, r13);

        $r3 = new android.net.NetworkRequest;

        $i2 = specialinvoke r0.<com.android.server.ConnectivityService: int nextNetworkRequestId()>();

        $r4 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type REQUEST>;

        specialinvoke $r3.<android.net.NetworkRequest: void <init>(android.net.NetworkCapabilities,int,int,android.net.NetworkRequest$Type)>($r2, -1, $i2, $r4);

        $r5 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke $r5.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.net.NetworkRequest,android.app.PendingIntent)>(r0, $r3, r12);

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pendingRequest for ");

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5);

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

        r18 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r10 = virtualinvoke r18.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(26, $r5);

        virtualinvoke r18.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r10);

        return $r3;
    }

    public boolean prepareVpn(java.lang.String, java.lang.String, int)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1, r7;
        int i0;
        android.util.SparseArray r2, $r4;
        com.android.server.connectivity.Vpn r3;
        boolean z0;
        java.lang.Object $r5;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r7 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i0 := @parameter2: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceCrossUserPermission(int)>(i0);

        r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r2;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $r4 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r3 = (com.android.server.connectivity.Vpn) $r5;

     label2:
        if r3 == null goto label5;

     label3:
        z0 = virtualinvoke r3.<com.android.server.connectivity.Vpn: boolean prepare(java.lang.String,java.lang.String,int)>(r7, r1, 1);

        exitmonitor r2;

     label4:
        return z0;

     label5:
        exitmonitor r2;

     label6:
        return 0;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r2;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean provisionVpnProfile(com.android.internal.net.VpnProfile, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        int i0, $i1;
        android.util.SparseArray r2, $r3;
        boolean z0;
        java.lang.Object $r4;
        android.security.KeyStore $r5;
        com.android.server.connectivity.Vpn $r6;
        java.lang.Throwable $r7;
        com.android.internal.net.VpnProfile r8;

        r0 := @this: com.android.server.ConnectivityService;

        r8 := @parameter0: com.android.internal.net.VpnProfile;

        r1 := @parameter1: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r2;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r6 = (com.android.server.connectivity.Vpn) $r4;

        $r5 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        z0 = virtualinvoke $r6.<com.android.server.connectivity.Vpn: boolean provisionVpnProfile(java.lang.String,com.android.internal.net.VpnProfile,android.security.KeyStore)>(r1, r8, $r5);

        exitmonitor r2;

     label2:
        return z0;

     label3:
        $r7 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback, android.net.NetworkRequest, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        java.lang.String r1;
        int i0, $i1, $i2;
        java.lang.IllegalArgumentException $r2;
        android.app.AppOpsManager $r3;
        android.net.NetworkCapabilities $r4, $r5;
        com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo $r6;
        com.android.server.ConnectivityService$NetworkRequestInfo $r7;
        android.net.NetworkRequest $r8, r12;
        android.net.NetworkRequest$Type $r9;
        android.os.Message $r10;
        android.net.IConnectivityDiagnosticsCallback r11;
        com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler r15;

        r0 := @this: com.android.server.ConnectivityService;

        r11 := @parameter0: android.net.IConnectivityDiagnosticsCallback;

        r12 := @parameter1: android.net.NetworkRequest;

        r1 := @parameter2: java.lang.String;

        $i1 = r12.<android.net.NetworkRequest: int legacyType>;

        if $i1 != -1 goto label1;

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = r0.<com.android.server.ConnectivityService: android.app.AppOpsManager mAppOpsManager>;

        virtualinvoke $r3.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>(i0, r1);

        $r4 = new android.net.NetworkCapabilities;

        $r5 = r12.<android.net.NetworkRequest: android.net.NetworkCapabilities networkCapabilities>;

        specialinvoke $r4.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>($r5);

        specialinvoke r0.<com.android.server.ConnectivityService: void restrictRequestUidsForCallerAndSetRequestorInfo(android.net.NetworkCapabilities,int,java.lang.String)>($r4, i0, r1);

        $r6 = new com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo;

        $r7 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        $r8 = new android.net.NetworkRequest;

        $i2 = specialinvoke r0.<com.android.server.ConnectivityService: int nextNetworkRequestId()>();

        $r9 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type LISTEN>;

        specialinvoke $r8.<android.net.NetworkRequest: void <init>(android.net.NetworkCapabilities,int,int,android.net.NetworkRequest$Type)>($r4, -1, $i2, $r9);

        specialinvoke $r7.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.net.NetworkRequest)>(r0, $r8);

        specialinvoke $r6.<com.android.server.ConnectivityService$ConnectivityDiagnosticsCallbackInfo: void <init>(com.android.server.ConnectivityService,android.net.IConnectivityDiagnosticsCallback,com.android.server.ConnectivityService$NetworkRequestInfo,java.lang.String)>(r0, r11, $r7, r1);

        r15 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler mConnectivityDiagnosticsHandler>;

        $r10 = virtualinvoke r15.<com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler: android.os.Message obtainMessage(int,java.lang.Object)>(1, $r6);

        virtualinvoke r15.<com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler: boolean sendMessage(android.os.Message)>($r10);

        return;

     label1:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ConnectivityManager.TYPE_* are deprecated. Please use NetworkCapabilities instead.");

        throw $r2;
    }

    public android.net.Network registerNetworkAgent(android.os.Messenger, android.net.NetworkInfo, android.net.LinkProperties, android.net.NetworkCapabilities, int, android.net.NetworkAgentConfig)
    {
        com.android.server.ConnectivityService r0;
        android.os.Messenger r1;
        android.net.NetworkInfo r2;
        android.net.LinkProperties r3;
        android.net.NetworkCapabilities r4;
        int i0;
        android.net.NetworkAgentConfig r5;
        android.net.Network $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.os.Messenger;

        r2 := @parameter1: android.net.NetworkInfo;

        r3 := @parameter2: android.net.LinkProperties;

        r4 := @parameter3: android.net.NetworkCapabilities;

        i0 := @parameter4: int;

        r5 := @parameter5: android.net.NetworkAgentConfig;

        $r6 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.Network registerNetworkAgent(android.os.Messenger,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.net.NetworkAgentConfig,int)>(r1, r2, r3, r4, i0, r5, -1);

        return $r6;
    }

    public android.net.Network registerNetworkAgent(android.os.Messenger, android.net.NetworkInfo, android.net.LinkProperties, android.net.NetworkCapabilities, int, android.net.NetworkAgentConfig, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i3, $i4, $i5;
        long l2;
        boolean $z0, $z1;
        android.net.LinkProperties $r1, $r16, r29;
        android.net.NetworkCapabilities $r2, $r14, $r23, $r25, r30;
        com.android.server.connectivity.NetworkAgentInfo $r3;
        com.android.internal.util.AsyncChannel $r4;
        android.net.Network $r5, $r22, r38;
        com.android.server.NetIdManager $r6;
        android.net.NetworkInfo $r7, r28;
        android.net.NetworkAgentConfig $r8, r31;
        android.content.Context $r9;
        com.android.server.ConnectivityService$NetworkStateTrackerHandler $r10;
        android.net.INetd $r11;
        android.net.IDnsResolver $r12;
        android.os.INetworkManagementService $r13;
        java.lang.StringBuilder $r17;
        java.lang.String $r20, r35;
        com.android.server.ConnectivityService$Dependencies $r21;
        java.lang.String[] $r24;
        java.lang.Throwable $r26;
        android.os.Messenger r27;
        android.net.NetworkStackClient r37;
        com.android.server.ConnectivityService$NetworkMonitorCallbacks r39;

        r0 := @this: com.android.server.ConnectivityService;

        r27 := @parameter0: android.os.Messenger;

        r28 := @parameter1: android.net.NetworkInfo;

        r29 := @parameter2: android.net.LinkProperties;

        r30 := @parameter3: android.net.NetworkCapabilities;

        i0 := @parameter4: int;

        r31 := @parameter5: android.net.NetworkAgentConfig;

        i1 := @parameter6: int;

        $z0 = virtualinvoke r30.<android.net.NetworkCapabilities: boolean hasTransport(int)>(7);

        if $z0 == 0 goto label1;

        $r24 = newarray (java.lang.String)[1];

        $r24[0] = "android.permission.MANAGE_TEST_NETWORKS";

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAnyPermissionOf(java.lang.String[])>($r24);

        $r25 = new android.net.NetworkCapabilities;

        specialinvoke $r25.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r30);

        r30 = $r25;

        $i5 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r25.<android.net.NetworkCapabilities: void restrictCapabilitesForTestNetwork(int)>($i5);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkFactoryPermission()>();

     label2:
        $r1 = new android.net.LinkProperties;

        specialinvoke $r1.<android.net.LinkProperties: void <init>(android.net.LinkProperties)>(r29);

        $r2 = new android.net.NetworkCapabilities;

        specialinvoke $r2.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r30);

        $r3 = new com.android.server.connectivity.NetworkAgentInfo;

        $r4 = new com.android.internal.util.AsyncChannel;

        specialinvoke $r4.<com.android.internal.util.AsyncChannel: void <init>()>();

        $r5 = new android.net.Network;

        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.NetIdManager mNetIdManager>;

        $i3 = virtualinvoke $r6.<com.android.server.NetIdManager: int reserveNetId()>();

        specialinvoke $r5.<android.net.Network: void <init>(int)>($i3);

        $r7 = new android.net.NetworkInfo;

        specialinvoke $r7.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>(r28);

        $r9 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r10 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$NetworkStateTrackerHandler mTrackerHandler>;

        $r8 = new android.net.NetworkAgentConfig;

        specialinvoke $r8.<android.net.NetworkAgentConfig: void <init>(android.net.NetworkAgentConfig)>(r31);

        $r11 = r0.<com.android.server.ConnectivityService: android.net.INetd mNetd>;

        $r12 = r0.<com.android.server.ConnectivityService: android.net.IDnsResolver mDnsResolver>;

        $r13 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        $i4 = staticinvoke <android.os.Binder: int getCallingUid()>();

        specialinvoke $r3.<com.android.server.connectivity.NetworkAgentInfo: void <init>(android.os.Messenger,com.android.internal.util.AsyncChannel,android.net.Network,android.net.NetworkInfo,android.net.LinkProperties,android.net.NetworkCapabilities,int,android.content.Context,android.os.Handler,android.net.NetworkAgentConfig,com.android.server.ConnectivityService,android.net.INetd,android.net.IDnsResolver,android.os.INetworkManagementService,int,int)>(r27, $r4, $r5, $r7, $r1, $r2, i0, $r9, $r10, $r8, r0, $r11, $r12, $r13, i1, $i4);

        $r14 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities mixInCapabilities(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities)>($r3, $r2);

        virtualinvoke $r3.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities getAndSetNetworkCapabilities(android.net.NetworkCapabilities)>($r14);

        $r16 = $r3.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        specialinvoke r0.<com.android.server.ConnectivityService: void processLinkPropertiesFromAgent(com.android.server.connectivity.NetworkAgentInfo,android.net.LinkProperties)>($r3, $r16);

        r35 = virtualinvoke r28.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r35);

        if $z1 == 0 goto label3;

        $r23 = $r3.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkCapabilities networkCapabilities>;

        r35 = virtualinvoke $r23.<android.net.NetworkCapabilities: java.lang.String getSsid()>();

        goto label3;

     label3:
        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("registerNetworkAgent ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r20);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label4:
        $r21 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$Dependencies mDeps>;

        r37 = virtualinvoke $r21.<com.android.server.ConnectivityService$Dependencies: android.net.NetworkStackClient getNetworkStack()>();

        r38 = $r3.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        r39 = new com.android.server.ConnectivityService$NetworkMonitorCallbacks;

        specialinvoke r39.<com.android.server.ConnectivityService$NetworkMonitorCallbacks: void <init>(com.android.server.ConnectivityService,com.android.server.connectivity.NetworkAgentInfo,com.android.server.ConnectivityService$1)>(r0, $r3, null);

        virtualinvoke r37.<android.net.NetworkStackClient: void makeNetworkMonitor(android.net.Network,java.lang.String,android.net.INetworkMonitorCallbacks)>(r38, r35, r39);

     label5:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        $r22 = $r3.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        return $r22;

     label6:
        $r26 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r26;

        catch java.lang.Throwable from label4 to label5 with label6;
    }

    public int registerNetworkFactory(android.os.Messenger, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkProviderInfo $r1;
        com.android.internal.util.AsyncChannel $r2;
        int $i0, $i1;
        android.os.Message $r3;
        android.os.Messenger r4;
        java.lang.String r5;
        com.android.server.ConnectivityService$InternalHandler r7;

        r0 := @this: com.android.server.ConnectivityService;

        r4 := @parameter0: android.os.Messenger;

        r5 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkFactoryPermission()>();

        $r1 = new com.android.server.ConnectivityService$NetworkProviderInfo;

        $r2 = new com.android.internal.util.AsyncChannel;

        specialinvoke $r2.<com.android.internal.util.AsyncChannel: void <init>()>();

        $i0 = virtualinvoke r0.<com.android.server.ConnectivityService: int nextNetworkProviderId()>();

        specialinvoke $r1.<com.android.server.ConnectivityService$NetworkProviderInfo: void <init>(java.lang.String,android.os.Messenger,com.android.internal.util.AsyncChannel,int,android.os.IBinder$DeathRecipient)>(r5, r4, $r2, $i0, null);

        r7 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = virtualinvoke r7.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(17, $r1);

        virtualinvoke r7.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        $i1 = $r1.<com.android.server.ConnectivityService$NetworkProviderInfo: int providerId>;

        return $i1;
    }

    public int registerNetworkProvider(android.os.Messenger, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$NetworkProviderInfo $r1;
        int $i0, $i1;
        com.android.server._$$Lambda$ConnectivityService$4mdI2BrJnxGXPEiesjVbm4BY2so $r2;
        android.os.Message $r3;
        android.os.Messenger r4;
        java.lang.String r5;
        com.android.server.ConnectivityService$InternalHandler r7;

        r0 := @this: com.android.server.ConnectivityService;

        r4 := @parameter0: android.os.Messenger;

        r5 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkFactoryOrSettingsPermission()>();

        $r1 = new com.android.server.ConnectivityService$NetworkProviderInfo;

        $i0 = virtualinvoke r0.<com.android.server.ConnectivityService: int nextNetworkProviderId()>();

        $r2 = new com.android.server._$$Lambda$ConnectivityService$4mdI2BrJnxGXPEiesjVbm4BY2so;

        specialinvoke $r2.<com.android.server._$$Lambda$ConnectivityService$4mdI2BrJnxGXPEiesjVbm4BY2so: void <init>(com.android.server.ConnectivityService,android.os.Messenger)>(r0, r4);

        specialinvoke $r1.<com.android.server.ConnectivityService$NetworkProviderInfo: void <init>(java.lang.String,android.os.Messenger,com.android.internal.util.AsyncChannel,int,android.os.IBinder$DeathRecipient)>(r5, r4, null, $i0, $r2);

        r7 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = virtualinvoke r7.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(17, $r1);

        virtualinvoke r7.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        $i1 = $r1.<com.android.server.ConnectivityService$NetworkProviderInfo: int providerId>;

        return $i1;
    }

    public void releaseNetworkRequest(android.net.NetworkRequest)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkRequest r1;
        com.android.server.ConnectivityService$InternalHandler r2;
        int $i0;
        android.os.Message $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkRequest;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureNetworkRequestHasType(android.net.NetworkRequest)>(r1);

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int getCallingUid()>();

        $r3 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(22, $i0, 0, r1);

        virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void releasePendingNetworkRequest(android.app.PendingIntent)
    {
        com.android.server.ConnectivityService r0;
        android.app.PendingIntent r1;
        com.android.server.ConnectivityService$InternalHandler r2;
        int $i0;
        android.os.Message $r4;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.app.PendingIntent;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)>(r1, "PendingIntent cannot be null.");

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int getCallingUid()>();

        $r4 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(27, $i0, 0, r1);

        virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r4);

        return;
    }

    public boolean removeVpnAddress(java.lang.String, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, $i2;
        android.util.SparseArray r1, $r2;
        boolean z0;
        java.lang.Object $r3;
        com.android.server.connectivity.Vpn $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.ConnectivityService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i1);

        $r4 = (com.android.server.connectivity.Vpn) $r3;

        z0 = virtualinvoke $r4.<com.android.server.connectivity.Vpn: boolean removeAddress(java.lang.String,int)>(r6, i0);

        exitmonitor r1;

     label2:
        return z0;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void reportInetCondition(int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        com.android.server.ConnectivityService$LegacyTypeTracker $r1;
        com.android.server.connectivity.NetworkAgentInfo r2;
        android.net.Network r3;
        boolean z0;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        r2 = virtualinvoke $r1.<com.android.server.ConnectivityService$LegacyTypeTracker: com.android.server.connectivity.NetworkAgentInfo getNetworkForType(int)>(i0);

        if r2 != null goto label1;

        return;

     label1:
        r3 = r2.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        if i1 <= 50 goto label2;

        z0 = 1;

        goto label3;

     label2:
        z0 = 0;

     label3:
        virtualinvoke r0.<com.android.server.ConnectivityService: void reportNetworkConnectivity(android.net.Network,boolean)>(r3, z0);

        return;
    }

    public void reportNetworkConnectivity(android.net.Network, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        boolean z0;
        int i0, i1;
        com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler r2;
        android.os.Message $r3, $r4;
        com.android.server.connectivity.NetworkAgentInfo r5;
        com.android.server.ConnectivityService$InternalHandler r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceInternetPermission()>();

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i1 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z0);

        if r1 != null goto label1;

        r5 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        goto label2;

     label1:
        r5 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r1);

     label2:
        if r5 == null goto label3;

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler mConnectivityDiagnosticsHandler>;

        $r4 = virtualinvoke r2.<com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(5, i1, 0, r5);

        virtualinvoke r2.<com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler: boolean sendMessage(android.os.Message)>($r4);

     label3:
        r6 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = virtualinvoke r6.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(36, i0, i1, r1);

        virtualinvoke r6.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public boolean requestBandwidthUpdate(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseArray r1, $r2, $r5, $r7, r12;
        int i0, $i1, $i2, $i3;
        java.lang.Object $r3, $r6;
        com.android.internal.util.AsyncChannel $r4;
        java.lang.Integer $r8, r14, r15;
        java.lang.Throwable $r9, $r10;
        android.net.Network r11;
        com.android.server.connectivity.NetworkAgentInfo r13;

        r0 := @this: com.android.server.ConnectivityService;

        r11 := @parameter0: android.net.Network;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        if r11 != null goto label01;

        return 0;

     label01:
        r12 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        entermonitor r12;

     label02:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mNetworkForNetId>;

        $i1 = r11.<android.net.Network: int netId>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>($i1);

        r13 = (com.android.server.connectivity.NetworkAgentInfo) $r3;

        exitmonitor r12;

     label03:
        if r13 == null goto label12;

        $r4 = r13.<com.android.server.connectivity.NetworkAgentInfo: com.android.internal.util.AsyncChannel asyncChannel>;

        virtualinvoke $r4.<com.android.internal.util.AsyncChannel: void sendMessage(int)>(528394);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mBandwidthRequests>;

        entermonitor r1;

     label04:
        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r5 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mBandwidthRequests>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r14 = (java.lang.Integer) $r6;

     label05:
        r15 = r14;

        if r14 != null goto label07;

     label06:
        r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

     label07:
        $r7 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mBandwidthRequests>;

        $i2 = virtualinvoke r15.<java.lang.Integer: int intValue()>();

        $i3 = $i2 + 1;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r7.<android.util.SparseArray: void put(int,java.lang.Object)>(i0, $r8);

        exitmonitor r1;

     label08:
        return 1;

     label09:
        $r9 := @caughtexception;

     label10:
        exitmonitor r1;

     label11:
        throw $r9;

     label12:
        return 0;

     label13:
        $r10 := @caughtexception;

     label14:
        exitmonitor r12;

     label15:
        throw $r10;

        catch java.lang.Throwable from label02 to label03 with label13;
        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities, android.os.Messenger, int, android.os.IBinder, int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1, i2, $i3, $i4;
        java.lang.String r1, $r10;
        android.net.NetworkRequest$Type $r2, r17;
        android.net.NetworkCapabilities $r3, r14, r18;
        java.lang.IllegalArgumentException $r4;
        android.net.NetworkRequest $r5;
        com.android.server.ConnectivityService$NetworkRequestInfo $r6;
        java.lang.StringBuilder $r7;
        android.os.Message $r11, $r12;
        long $l5;
        boolean $z2, $z3;
        java.lang.SecurityException $r13;
        android.os.Messenger r15;
        android.os.IBinder r16;
        com.android.server.ConnectivityService$InternalHandler r22, r23;

        r0 := @this: com.android.server.ConnectivityService;

        r14 := @parameter0: android.net.NetworkCapabilities;

        r15 := @parameter1: android.os.Messenger;

        i0 := @parameter2: int;

        r16 := @parameter3: android.os.IBinder;

        i1 := @parameter4: int;

        r1 := @parameter5: java.lang.String;

        if i1 == -1 goto label2;

        $z2 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkNetworkStackPermission()>();

        if $z2 != 0 goto label2;

        $z3 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkUnsupportedStartingFrom(int,java.lang.String)>(23, r1);

        if $z3 != 0 goto label1;

        goto label2;

     label1:
        $r13 = new java.lang.SecurityException;

        specialinvoke $r13.<java.lang.SecurityException: void <init>(java.lang.String)>("Insufficient permissions to specify legacy type");

        throw $r13;

     label2:
        i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if r14 != null goto label3;

        r17 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type TRACK_DEFAULT>;

        goto label4;

     label3:
        r17 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type REQUEST>;

     label4:
        $r2 = <android.net.NetworkRequest$Type: android.net.NetworkRequest$Type TRACK_DEFAULT>;

        if r17 != $r2 goto label5;

        r18 = staticinvoke <com.android.server.ConnectivityService: android.net.NetworkCapabilities createDefaultNetworkCapabilitiesForUid(int)>(i2);

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAccessPermission()>();

        goto label6;

     label5:
        $r3 = new android.net.NetworkCapabilities;

        specialinvoke $r3.<android.net.NetworkCapabilities: void <init>(android.net.NetworkCapabilities)>(r14);

        r18 = $r3;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkRequestPermissions(android.net.NetworkCapabilities)>($r3);

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceMeteredApnPolicy(android.net.NetworkCapabilities)>($r3);

     label6:
        specialinvoke r0.<com.android.server.ConnectivityService: void ensureRequestableCapabilities(android.net.NetworkCapabilities)>(r18);

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureSufficientPermissionsForRequest(android.net.NetworkCapabilities,int,int,java.lang.String)>(r18, $i3, i2, r1);

        specialinvoke r0.<com.android.server.ConnectivityService: void restrictRequestUidsForCallerAndSetRequestorInfo(android.net.NetworkCapabilities,int,java.lang.String)>(r18, i2, r1);

        if i0 < 0 goto label8;

        specialinvoke r0.<com.android.server.ConnectivityService: void ensureValid(android.net.NetworkCapabilities)>(r18);

        $r5 = new android.net.NetworkRequest;

        $i4 = specialinvoke r0.<com.android.server.ConnectivityService: int nextNetworkRequestId()>();

        specialinvoke $r5.<android.net.NetworkRequest: void <init>(android.net.NetworkCapabilities,int,int,android.net.NetworkRequest$Type)>(r18, i1, $i4, r17);

        $r6 = new com.android.server.ConnectivityService$NetworkRequestInfo;

        specialinvoke $r6.<com.android.server.ConnectivityService$NetworkRequestInfo: void <init>(com.android.server.ConnectivityService,android.os.Messenger,android.net.NetworkRequest,android.os.IBinder)>(r0, r15, $r5, r16);

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestNetwork for ");

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r10);

        r22 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r11 = virtualinvoke r22.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(19, $r6);

        virtualinvoke r22.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r11);

        if i0 <= 0 goto label7;

        r23 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r12 = virtualinvoke r23.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(20, $r6);

        $l5 = (long) i0;

        virtualinvoke r23.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessageDelayed(android.os.Message,long)>($r12, $l5);

     label7:
        return $r5;

     label8:
        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Bad timeout specified");

        throw $r4;
    }

    public boolean requestRouteToHostAddress(int, byte[])
    {
        com.android.server.ConnectivityService r0;
        long l0;
        int i1, i2, i3;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        java.util.List $r1;
        java.lang.Integer $r2;
        com.android.server.ConnectivityService$LegacyTypeTracker $r3, $r17;
        android.net.NetworkInfo $r4;
        android.net.NetworkInfo$DetailedState $r5, $r10, r45;
        android.net.Network $r6;
        java.lang.String $r9, $r16, $r21, $r25, $r29, $r33, $r35;
        java.lang.Throwable $r30, $r36, $r37, $r38;
        byte[] r39;
        java.net.InetAddress r40;
        com.android.server.connectivity.NetworkAgentInfo r42;
        android.net.LinkProperties r47;
        java.lang.StringBuilder r54, r55, r56, r57, r58, r59;
        java.net.UnknownHostException r60;

        r0 := @this: com.android.server.ConnectivityService;

        i2 := @parameter0: int;

        r39 := @parameter1: byte[];

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean disallowedBecauseSystemCaller()>();

        if $z1 == 0 goto label01;

        return 0;

     label01:
        specialinvoke r0.<com.android.server.ConnectivityService: void enforceChangePermission()>();

        $r1 = r0.<com.android.server.ConnectivityService: java.util.List mProtectedNetworks>;

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $z2 = interfaceinvoke $r1.<java.util.List: boolean contains(java.lang.Object)>($r2);

        if $z2 == 0 goto label02;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceConnectivityRestrictedNetworksPermission()>();

     label02:
        r40 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r39);

     label03:
        $z3 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i2);

        if $z3 != 0 goto label04;

        r54 = new java.lang.StringBuilder;

        specialinvoke r54.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress on invalid network: ");

        virtualinvoke r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r29 = virtualinvoke r54.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r29);

        return 0;

     label04:
        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        r42 = virtualinvoke $r3.<com.android.server.ConnectivityService$LegacyTypeTracker: com.android.server.connectivity.NetworkAgentInfo getNetworkForType(int)>(i2);

        if r42 != null goto label07;

        $r17 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$LegacyTypeTracker mLegacyTypeTracker>;

        $z5 = virtualinvoke $r17.<com.android.server.ConnectivityService$LegacyTypeTracker: boolean isTypeSupported(int)>(i2);

        if $z5 != 0 goto label05;

        r55 = new java.lang.StringBuilder;

        specialinvoke r55.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress on unsupported network: ");

        virtualinvoke r55.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r25 = virtualinvoke r55.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r25);

        goto label06;

     label05:
        r56 = new java.lang.StringBuilder;

        specialinvoke r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress on down network: ");

        virtualinvoke r56.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r21 = virtualinvoke r56.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r21);

     label06:
        return 0;

     label07:
        entermonitor r42;

     label08:
        $r4 = r42.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        r45 = virtualinvoke $r4.<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>();

        exitmonitor r42;

     label09:
        $r5 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CONNECTED>;

        if r45 == $r5 goto label11;

        $r10 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState CAPTIVE_PORTAL_CHECK>;

        if r45 == $r10 goto label11;

        $z4 = <com.android.server.ConnectivityService: boolean VDBG>;

        if $z4 == 0 goto label10;

        r57 = new java.lang.StringBuilder;

        specialinvoke r57.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress on down network (");

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") - dropped netState=");

        virtualinvoke r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r45);

        $r16 = virtualinvoke r57.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r16);

     label10:
        return 0;

     label11:
        i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label12:
        entermonitor r42;

     label13:
        r47 = r42.<com.android.server.connectivity.NetworkAgentInfo: android.net.LinkProperties linkProperties>;

        $r6 = r42.<com.android.server.connectivity.NetworkAgentInfo: android.net.Network network>;

        i1 = $r6.<android.net.Network: int netId>;

        exitmonitor r42;

     label14:
        z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean addLegacyRouteToHost(android.net.LinkProperties,java.net.InetAddress,int,int)>(r47, r40, i1, i3);

        r58 = new java.lang.StringBuilder;

        specialinvoke r58.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress ok=");

        virtualinvoke r58.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r9 = virtualinvoke r58.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r9);

     label15:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return z0;

     label16:
        $r37 := @caughtexception;

     label17:
        exitmonitor r42;

     label18:
        throw $r37;

     label19:
        $r38 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r38;

     label20:
        $r36 := @caughtexception;

     label21:
        exitmonitor r42;

     label22:
        throw $r36;

     label23:
        $r30 := @caughtexception;

        r59 = new java.lang.StringBuilder;

        specialinvoke r59.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("requestRouteToHostAddress got ");

        r60 = (java.net.UnknownHostException) $r30;

        $r33 = virtualinvoke r60.<java.net.UnknownHostException: java.lang.String toString()>();

        virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33);

        $r35 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <com.android.server.ConnectivityService: void log(java.lang.String)>($r35);

        return 0;

        catch java.net.UnknownHostException from label02 to label03 with label23;
        catch java.lang.Throwable from label08 to label09 with label20;
        catch java.lang.Throwable from label12 to label13 with label19;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.lang.Throwable from label17 to label18 with label16;
        catch java.lang.Throwable from label18 to label19 with label19;
        catch java.lang.Throwable from label21 to label22 with label20;
    }

    public void sendConnectedBroadcast(android.net.NetworkInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.NetworkInfo r1;
        android.content.Context $r2;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.NetworkInfo;

        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        specialinvoke r0.<com.android.server.ConnectivityService: void sendGeneralBroadcast(android.net.NetworkInfo,java.lang.String)>(r1, "android.net.conn.CONNECTIVITY_CHANGE");

        return;
    }

    protected void sendLegacyNetworkBroadcast(com.android.server.connectivity.NetworkAgentInfo, android.net.NetworkInfo$DetailedState, int)
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.NetworkAgentInfo r1, r28;
        int i0, $i1, $i2, $i3;
        android.net.NetworkInfo $r4, $r5, $r16, $r18, $r25;
        android.net.NetworkInfo$DetailedState $r6, r27;
        java.lang.String $r7, $r8, $r12, $r13, $r20, $r22, $r26;
        android.content.Intent $r9;
        boolean $z0, $z1;
        android.net.NetworkRequest $r14;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: com.android.server.connectivity.NetworkAgentInfo;

        r27 := @parameter1: android.net.NetworkInfo$DetailedState;

        i0 := @parameter2: int;

        $r4 = new android.net.NetworkInfo;

        $r5 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        specialinvoke $r4.<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>($r5);

        virtualinvoke $r4.<android.net.NetworkInfo: void setType(int)>(i0);

        $r6 = <android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState DISCONNECTED>;

        if r27 == $r6 goto label1;

        $r26 = virtualinvoke $r4.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke $r4.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>(r27, null, $r26);

        virtualinvoke r0.<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)>($r4);

        goto label7;

     label1:
        $r7 = virtualinvoke $r4.<android.net.NetworkInfo: java.lang.String getReason()>();

        $r8 = virtualinvoke $r4.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke $r4.<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>(r27, $r7, $r8);

        $r9 = new android.content.Intent;

        specialinvoke $r9.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("networkInfo", $r4);

        $i1 = virtualinvoke $r4.<android.net.NetworkInfo: int getType()>();

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("networkType", $i1);

        $z0 = virtualinvoke $r4.<android.net.NetworkInfo: boolean isFailover()>();

        if $z0 == 0 goto label2;

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("isFailover", 1);

        $r25 = r1.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        virtualinvoke $r25.<android.net.NetworkInfo: void setFailover(boolean)>(0);

     label2:
        $r12 = virtualinvoke $r4.<android.net.NetworkInfo: java.lang.String getReason()>();

        if $r12 == null goto label3;

        $r22 = virtualinvoke $r4.<android.net.NetworkInfo: java.lang.String getReason()>();

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("reason", $r22);

     label3:
        $r13 = virtualinvoke $r4.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        if $r13 == null goto label4;

        $r20 = virtualinvoke $r4.<android.net.NetworkInfo: java.lang.String getExtraInfo()>();

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)>("extraInfo", $r20);

     label4:
        r28 = null;

        $r14 = r0.<com.android.server.ConnectivityService: android.net.NetworkRequest mDefaultRequest>;

        $i2 = $r14.<android.net.NetworkRequest: int requestId>;

        $z1 = virtualinvoke r1.<com.android.server.connectivity.NetworkAgentInfo: boolean isSatisfyingRequest(int)>($i2);

        if $z1 == 0 goto label6;

        r28 = specialinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getDefaultNetwork()>();

        if r28 == null goto label5;

        $r18 = r28.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("otherNetwork", $r18);

        goto label6;

     label5:
        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("noConnectivity", 1);

     label6:
        $i3 = r0.<com.android.server.ConnectivityService: int mDefaultInetConditionPublished>;

        virtualinvoke $r9.<android.content.Intent: android.content.Intent putExtra(java.lang.String,int)>("inetCondition", $i3);

        specialinvoke r0.<com.android.server.ConnectivityService: void sendStickyBroadcast(android.content.Intent)>($r9);

        if r28 == null goto label7;

        $r16 = r28.<com.android.server.connectivity.NetworkAgentInfo: android.net.NetworkInfo networkInfo>;

        virtualinvoke r0.<com.android.server.ConnectivityService: void sendConnectedBroadcast(android.net.NetworkInfo)>($r16);

     label7:
        return;
    }

    public void setAcceptPartialConnectivity(android.net.Network, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        boolean z0, z1;
        com.android.server.ConnectivityService$InternalHandler r2;
        int $i0, $i1;
        android.os.Message $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkStackSettingsOrSetup()>();

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z0);

        $i1 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z1);

        $r3 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(44, $i0, $i1, r1);

        virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void setAcceptUnvalidated(android.net.Network, boolean, boolean)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        boolean z0, z1;
        com.android.server.ConnectivityService$InternalHandler r2;
        int $i0, $i1;
        android.os.Message $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        z0 := @parameter1: boolean;

        z1 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkStackSettingsOrSetup()>();

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $i0 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z0);

        $i1 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z1);

        $r3 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(28, $i0, $i1, r1);

        virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void setAirplaneMode(boolean)
    {
        com.android.server.ConnectivityService r0;
        boolean z0;
        long l0;
        android.content.Context $r1, $r5;
        android.content.ContentResolver $r2;
        int $i1;
        android.os.UserHandle $r4;
        java.lang.Throwable $r6;
        android.content.Intent r7;

        r0 := @this: com.android.server.ConnectivityService;

        z0 := @parameter0: boolean;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAirplaneModePermission()>();

        l0 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        $r1 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <com.android.server.ConnectivityService: int encodeBool(boolean)>(z0);

        staticinvoke <android.provider.Settings$Global: boolean putInt(android.content.ContentResolver,java.lang.String,int)>($r2, "airplane_mode_on", $i1);

        r7 = new android.content.Intent;

        specialinvoke r7.<android.content.Intent: void <init>(java.lang.String)>("android.intent.action.AIRPLANE_MODE");

        virtualinvoke r7.<android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)>("state", z0);

        $r5 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r4 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r5.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>(r7, $r4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        return;

     label3:
        $r6 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l0);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean setAlwaysOnVpnPackage(int, java.lang.String, boolean, java.util.List)
    {
        com.android.server.ConnectivityService r0;
        int i0;
        boolean z0, $z1, $z2, $z3;
        android.util.SparseArray r1, $r3;
        com.android.server.connectivity.Vpn r2;
        java.lang.Object $r4;
        android.security.KeyStore $r5, $r6;
        java.lang.String $r10, r12, r14;
        java.lang.Throwable $r11;
        java.util.List r13;
        java.lang.StringBuilder r15;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        r12 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r13 := @parameter3: java.util.List;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceControlAlwaysOnVpnPermission()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label01:
        $z1 = staticinvoke <com.android.server.net.LockdownVpnTracker: boolean isEnabled()>();

        if $z1 == 0 goto label03;

        exitmonitor r1;

     label02:
        return 0;

     label03:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.connectivity.Vpn) $r4;

     label04:
        if r2 != null goto label07;

     label05:
        r14 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r15 = new java.lang.StringBuilder;

        specialinvoke r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("User ");

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has no Vpn configuration");

        $r10 = virtualinvoke r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r14, $r10);

        exitmonitor r1;

     label06:
        return 0;

     label07:
        $r5 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        $z2 = virtualinvoke r2.<com.android.server.connectivity.Vpn: boolean setAlwaysOnPackage(java.lang.String,boolean,java.util.List,android.security.KeyStore)>(r12, z0, r13, $r5);

        if $z2 != 0 goto label09;

        exitmonitor r1;

     label08:
        return 0;

     label09:
        $z3 = specialinvoke r0.<com.android.server.ConnectivityService: boolean startAlwaysOnVpn(int)>(i0);

        if $z3 != 0 goto label11;

        $r6 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        virtualinvoke r2.<com.android.server.connectivity.Vpn: boolean setAlwaysOnPackage(java.lang.String,boolean,java.util.List,android.security.KeyStore)>(null, 0, null, $r6);

        exitmonitor r1;

     label10:
        return 0;

     label11:
        exitmonitor r1;

     label12:
        return 1;

     label13:
        $r11 := @caughtexception;

     label14:
        exitmonitor r1;

     label15:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label13;
        catch java.lang.Throwable from label03 to label04 with label13;
        catch java.lang.Throwable from label05 to label06 with label13;
        catch java.lang.Throwable from label07 to label08 with label13;
        catch java.lang.Throwable from label09 to label10 with label13;
        catch java.lang.Throwable from label11 to label12 with label13;
        catch java.lang.Throwable from label14 to label15 with label13;
    }

    public void setAvoidUnvalidated(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        com.android.server.ConnectivityService$InternalHandler r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkStackSettingsOrSetup()>();

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(35, r1);

        virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void setGlobalProxy(android.net.ProxyInfo)
    {
        com.android.server.ConnectivityService r0;
        android.net.ProxyInfo r1;
        android.content.Context $r2;
        com.android.server.connectivity.ProxyTracker $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.ProxyInfo;

        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        staticinvoke <android.net.NetworkStack: void checkNetworkStackPermission(android.content.Context)>($r2);

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.ProxyTracker mProxyTracker>;

        virtualinvoke $r3.<com.android.server.connectivity.ProxyTracker: void setGlobalProxy(android.net.ProxyInfo)>(r1);

        return;
    }

    public void setProvisioningNotificationVisible(boolean, int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        boolean z0, $z1;
        int i0, $i2, $i3;
        long l1;
        com.android.server.connectivity.NetworkNotificationManager $r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.ConnectivityService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        r3 := @parameter2: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceSettingsPermission()>();

        $z1 = staticinvoke <android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>(i0);

        if $z1 != 0 goto label1;

        return;

     label1:
        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label2:
        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkNotificationManager mNotifier>;

        $i2 = i0 + 1;

        $i3 = $i2 + 64512;

        virtualinvoke $r1.<com.android.server.connectivity.NetworkNotificationManager: void setProvNotificationVisible(boolean,int,java.lang.String)>(z0, $i3, r3);

     label3:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label4:
        $r2 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r2;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    public boolean setUnderlyingNetworksForVpn(android.net.Network[])
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.util.SparseArray r1, $r2;
        boolean z0;
        java.lang.Object $r3;
        com.android.server.connectivity.Vpn $r4;
        com.android.server._$$Lambda$ConnectivityService$6bEB7WFnOunsH4qwhZ_F6bf0Lb8 $r5;
        com.android.server.ConnectivityService$InternalHandler $r6;
        java.lang.Throwable $r7;
        android.net.Network[] r8;

        r0 := @this: com.android.server.ConnectivityService;

        r8 := @parameter0: android.net.Network[];

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r4 = (com.android.server.connectivity.Vpn) $r3;

        z0 = virtualinvoke $r4.<com.android.server.connectivity.Vpn: boolean setUnderlyingNetworks(android.net.Network[])>(r8);

        exitmonitor r1;

     label2:
        if z0 == 0 goto label3;

        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r5 = new com.android.server._$$Lambda$ConnectivityService$6bEB7WFnOunsH4qwhZ_F6bf0Lb8;

        specialinvoke $r5.<com.android.server._$$Lambda$ConnectivityService$6bEB7WFnOunsH4qwhZ_F6bf0Lb8: void <init>(com.android.server.ConnectivityService)>(r0);

        virtualinvoke $r6.<com.android.server.ConnectivityService$InternalHandler: boolean post(java.lang.Runnable)>($r5);

     label3:
        return z0;

     label4:
        $r7 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void setVpnPackageAuthorization(java.lang.String, int, int)
    {
        com.android.server.ConnectivityService r0;
        int i0, i1;
        android.util.SparseArray r1, $r3;
        com.android.server.connectivity.Vpn r2;
        java.lang.Object $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.ConnectivityService;

        r6 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceCrossUserPermission(int)>(i0);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r3 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r2 = (com.android.server.connectivity.Vpn) $r4;

     label2:
        if r2 == null goto label4;

     label3:
        virtualinvoke r2.<com.android.server.connectivity.Vpn: boolean setPackageAuthorization(java.lang.String,int)>(r6, i1);

     label4:
        exitmonitor r1;

     label5:
        return;

     label6:
        $r5 := @caughtexception;

     label7:
        exitmonitor r1;

     label8:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    public boolean shouldAvoidBadWifi()
    {
        com.android.server.ConnectivityService r0;
        boolean $z0, $z1;
        java.lang.SecurityException $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $z0 = specialinvoke r0.<com.android.server.ConnectivityService: boolean checkNetworkStackPermission()>();

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<com.android.server.ConnectivityService: boolean avoidBadWifi()>();

        return $z1;

     label1:
        $r1 = new java.lang.SecurityException;

        specialinvoke $r1.<java.lang.SecurityException: void <init>(java.lang.String)>("avoidBadWifi requires NETWORK_STACK permission");

        throw $r1;
    }

    public void simulateDataStall(int, long, android.net.Network, android.os.PersistableBundle)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7;
        long l1;
        android.net.Network r1;
        android.os.PersistableBundle r2;
        java.lang.String[] $r3;
        android.net.NetworkCapabilities $r4;
        boolean $z0, $z1, $z2;
        java.lang.SecurityException $r5, $r6;
        android.net.DataStallReportParcelable $r7;
        com.android.server.connectivity.NetworkAgentInfo r8;

        r0 := @this: com.android.server.ConnectivityService;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 := @parameter2: android.net.Network;

        r2 := @parameter3: android.os.PersistableBundle;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "android.permission.MANAGE_TEST_NETWORKS";

        $r3[1] = "android.permission.NETWORK_STACK";

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceAnyPermissionOf(java.lang.String[])>($r3);

        $r4 = specialinvoke r0.<com.android.server.ConnectivityService: android.net.NetworkCapabilities getNetworkCapabilitiesInternal(android.net.Network)>(r1);

        $z0 = virtualinvoke $r4.<android.net.NetworkCapabilities: boolean hasTransport(int)>(7);

        if $z0 == 0 goto label4;

        r8 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r1);

        if r8 == null goto label3;

        $i2 = r8.<com.android.server.connectivity.NetworkAgentInfo: int creatorUid>;

        $i3 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i2 != $i3 goto label3;

        $r7 = new android.net.DataStallReportParcelable;

        specialinvoke $r7.<android.net.DataStallReportParcelable: void <init>()>();

        $r7.<android.net.DataStallReportParcelable: long timestampMillis> = l1;

        $r7.<android.net.DataStallReportParcelable: int detectionMethod> = i0;

        $z1 = specialinvoke r0.<com.android.server.ConnectivityService: boolean hasDataStallDetectionMethod(android.net.DataStallReportParcelable,int)>($r7, 1);

        if $z1 == 0 goto label1;

        $i7 = virtualinvoke r2.<android.os.PersistableBundle: int getInt(java.lang.String)>("dnsConsecutiveTimeouts");

        $r7.<android.net.DataStallReportParcelable: int dnsConsecutiveTimeouts> = $i7;

     label1:
        $z2 = specialinvoke r0.<com.android.server.ConnectivityService: boolean hasDataStallDetectionMethod(android.net.DataStallReportParcelable,int)>($r7, 2);

        if $z2 == 0 goto label2;

        $i5 = virtualinvoke r2.<android.os.PersistableBundle: int getInt(java.lang.String)>("tcpPacketFailRate");

        $r7.<android.net.DataStallReportParcelable: int tcpPacketFailRate> = $i5;

        $i6 = virtualinvoke r2.<android.os.PersistableBundle: int getInt(java.lang.String)>("tcpMetricsCollectionPeriodMillis");

        $r7.<android.net.DataStallReportParcelable: int tcpMetricsCollectionPeriodMillis> = $i6;

     label2:
        $i4 = r1.<android.net.Network: int netId>;

        specialinvoke r0.<com.android.server.ConnectivityService: void notifyDataStallSuspected(android.net.DataStallReportParcelable,int)>($r7, $i4);

        return;

     label3:
        $r6 = new java.lang.SecurityException;

        specialinvoke $r6.<java.lang.SecurityException: void <init>(java.lang.String)>("Data Stall simulation is only possible for network creators");

        throw $r6;

     label4:
        $r5 = new java.lang.SecurityException;

        specialinvoke $r5.<java.lang.SecurityException: void <init>(java.lang.String)>("Data Stall simluation is only possible for test networks");

        throw $r5;
    }

    public void startCaptivePortalApp(android.net.Network)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        com.android.server._$$Lambda$ConnectivityService$nuaE_gOVb4npt3obpt7AoWH3OBo $r2;
        com.android.server.ConnectivityService$InternalHandler $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkStackOrSettingsPermission()>();

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r2 = new com.android.server._$$Lambda$ConnectivityService$nuaE_gOVb4npt3obpt7AoWH3OBo;

        specialinvoke $r2.<com.android.server._$$Lambda$ConnectivityService$nuaE_gOVb4npt3obpt7AoWH3OBo: void <init>(com.android.server.ConnectivityService,android.net.Network)>(r0, r1);

        virtualinvoke $r3.<com.android.server.ConnectivityService$InternalHandler: boolean post(java.lang.Runnable)>($r2);

        return;
    }

    public void startCaptivePortalAppInternal(android.net.Network, android.os.Bundle)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        android.os.Bundle r2;
        android.content.Context $r4;
        android.content.Intent $r5;
        android.net.CaptivePortal $r7;
        com.android.server.ConnectivityService$CaptivePortalImpl $r8;
        android.os.IBinder $r9;
        com.android.server._$$Lambda$ConnectivityService$fBQzRY85gy75jpL8zm68U3BxgdA $r12;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: android.os.Bundle;

        $r4 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        virtualinvoke $r4.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.MAINLINE_NETWORK_STACK", "ConnectivityService");

        $r5 = new android.content.Intent;

        specialinvoke $r5.<android.content.Intent: void <init>(java.lang.String)>("android.net.conn.CAPTIVE_PORTAL");

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtras(android.os.Bundle)>(r2);

        $r7 = new android.net.CaptivePortal;

        $r8 = new com.android.server.ConnectivityService$CaptivePortalImpl;

        specialinvoke $r8.<com.android.server.ConnectivityService$CaptivePortalImpl: void <init>(com.android.server.ConnectivityService,android.net.Network,com.android.server.ConnectivityService$1)>(r0, r1, null);

        $r9 = virtualinvoke $r8.<com.android.server.ConnectivityService$CaptivePortalImpl: android.os.IBinder asBinder()>();

        specialinvoke $r7.<android.net.CaptivePortal: void <init>(android.os.IBinder)>($r9);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)>("android.net.extra.CAPTIVE_PORTAL", $r7);

        virtualinvoke $r5.<android.content.Intent: android.content.Intent setFlags(int)>(272629760);

        $r12 = new com.android.server._$$Lambda$ConnectivityService$fBQzRY85gy75jpL8zm68U3BxgdA;

        specialinvoke $r12.<com.android.server._$$Lambda$ConnectivityService$fBQzRY85gy75jpL8zm68U3BxgdA: void <init>(com.android.server.ConnectivityService,android.content.Intent)>(r0, $r5);

        staticinvoke <android.os.Binder: void withCleanCallingIdentity(com.android.internal.util.FunctionalUtils$ThrowingRunnable)>($r12);

        return;
    }

    public void startLegacyVpn(com.android.internal.net.VpnProfile)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.net.LinkProperties r1;
        android.util.SparseArray r2, $r4;
        java.lang.IllegalStateException $r3;
        java.lang.Object $r5;
        android.security.KeyStore $r6;
        com.android.server.connectivity.Vpn $r7;
        java.lang.Throwable $r8;
        com.android.internal.net.VpnProfile r9;

        r0 := @this: com.android.server.ConnectivityService;

        r9 := @parameter0: com.android.internal.net.VpnProfile;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r1 = virtualinvoke r0.<com.android.server.ConnectivityService: android.net.LinkProperties getActiveLinkProperties()>();

        if r1 == null goto label6;

        r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r2;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $r4 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r5 = virtualinvoke $r4.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r7 = (com.android.server.connectivity.Vpn) $r5;

        $r6 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        virtualinvoke $r7.<com.android.server.connectivity.Vpn: void startLegacyVpn(com.android.internal.net.VpnProfile,android.security.KeyStore,android.net.LinkProperties)>(r9, $r6, r1);

        exitmonitor r2;

     label2:
        return;

     label3:
        $r8 := @caughtexception;

     label4:
        exitmonitor r2;

     label5:
        throw $r8;

     label6:
        $r3 = new java.lang.IllegalStateException;

        specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Missing active network connection");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void startNattKeepalive(android.net.Network, int, android.net.ISocketKeepaliveCallback, java.lang.String, int, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        int i0, i1;
        android.net.ISocketKeepaliveCallback r2;
        java.lang.String r3, r4;
        com.android.server.connectivity.KeepaliveTracker $r5;
        com.android.server.connectivity.NetworkAgentInfo $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        i0 := @parameter1: int;

        r2 := @parameter2: android.net.ISocketKeepaliveCallback;

        r3 := @parameter3: java.lang.String;

        i1 := @parameter4: int;

        r4 := @parameter5: java.lang.String;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceKeepalivePermission()>();

        $r5 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.KeepaliveTracker mKeepaliveTracker>;

        $r6 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r1);

        virtualinvoke $r5.<com.android.server.connectivity.KeepaliveTracker: void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback,java.lang.String,int,java.lang.String,int)>($r6, null, i0, r2, r3, i1, r4, 4500);

        return;
    }

    public void startNattKeepaliveWithFd(android.net.Network, java.io.FileDescriptor, int, int, android.net.ISocketKeepaliveCallback, java.lang.String, java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        java.io.FileDescriptor r2;
        int i0, i1;
        android.net.ISocketKeepaliveCallback r3;
        java.lang.String r4, r5;
        com.android.server.connectivity.KeepaliveTracker $r6;
        com.android.server.connectivity.NetworkAgentInfo $r7;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: java.io.FileDescriptor;

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        r3 := @parameter4: android.net.ISocketKeepaliveCallback;

        r4 := @parameter5: java.lang.String;

        r5 := @parameter6: java.lang.String;

        $r6 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.KeepaliveTracker mKeepaliveTracker>;

        $r7 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r1);

        virtualinvoke $r6.<com.android.server.connectivity.KeepaliveTracker: void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo,java.io.FileDescriptor,int,int,android.net.ISocketKeepaliveCallback,java.lang.String,java.lang.String,int)>($r7, r2, i0, i1, r3, r4, r5, 4500);

        return;
    }

    public android.os.IBinder startOrGetTestNetworkService()
    {
        com.android.server.ConnectivityService r0;
        java.lang.Object r1;
        android.content.Context $r2, $r5;
        com.android.server.TestNetworkService $r3, r7, r8;
        android.os.INetworkManagementService $r4;
        java.lang.Throwable $r6;

        r0 := @this: com.android.server.ConnectivityService;

        r1 = r0.<com.android.server.ConnectivityService: java.lang.Object mTNSLock>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        staticinvoke <com.android.server.TestNetworkService: void enforceTestNetworkPermissions(android.content.Context)>($r2);

        $r3 = r0.<com.android.server.ConnectivityService: com.android.server.TestNetworkService mTNS>;

        if $r3 != null goto label2;

        r7 = new com.android.server.TestNetworkService;

        $r5 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r4 = r0.<com.android.server.ConnectivityService: android.os.INetworkManagementService mNMS>;

        specialinvoke r7.<com.android.server.TestNetworkService: void <init>(android.content.Context,android.os.INetworkManagementService)>($r5, $r4);

        r0.<com.android.server.ConnectivityService: com.android.server.TestNetworkService mTNS> = r7;

     label2:
        r8 = r0.<com.android.server.ConnectivityService: com.android.server.TestNetworkService mTNS>;

        exitmonitor r1;

     label3:
        return r8;

     label4:
        $r6 := @caughtexception;

     label5:
        exitmonitor r1;

     label6:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void startTcpKeepalive(android.net.Network, java.io.FileDescriptor, int, android.net.ISocketKeepaliveCallback)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        java.io.FileDescriptor r2;
        int i0;
        android.net.ISocketKeepaliveCallback r3;
        com.android.server.connectivity.KeepaliveTracker $r4;
        com.android.server.connectivity.NetworkAgentInfo $r5;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        r2 := @parameter1: java.io.FileDescriptor;

        i0 := @parameter2: int;

        r3 := @parameter3: android.net.ISocketKeepaliveCallback;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceKeepalivePermission()>();

        $r4 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.KeepaliveTracker mKeepaliveTracker>;

        $r5 = virtualinvoke r0.<com.android.server.ConnectivityService: com.android.server.connectivity.NetworkAgentInfo getNetworkAgentInfoForNetwork(android.net.Network)>(r1);

        virtualinvoke $r4.<com.android.server.connectivity.KeepaliveTracker: void startTcpKeepalive(com.android.server.connectivity.NetworkAgentInfo,java.io.FileDescriptor,int,android.net.ISocketKeepaliveCallback)>($r5, r2, i0, r3);

        return;
    }

    public void startVpnProfile(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        android.security.KeyStore $r4;
        com.android.server.connectivity.Vpn $r5;
        java.lang.Throwable $r6;
        java.lang.String r7;

        r0 := @this: com.android.server.ConnectivityService;

        r7 := @parameter0: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        specialinvoke r0.<com.android.server.ConnectivityService: void throwIfLockdownEnabled()>();

        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r5 = (com.android.server.connectivity.Vpn) $r3;

        $r4 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        virtualinvoke $r5.<com.android.server.connectivity.Vpn: void startVpnProfile(java.lang.String,android.security.KeyStore)>(r7, $r4);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r6 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void stopKeepalive(android.net.Network, int)
    {
        com.android.server.ConnectivityService r0;
        android.net.Network r1;
        int i0;
        com.android.server.ConnectivityService$InternalHandler r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.Network;

        i0 := @parameter1: int;

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(528396, i0, 0, r1);

        virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void stopVpnProfile(java.lang.String)
    {
        com.android.server.ConnectivityService r0;
        int i0, $i1;
        android.util.SparseArray r1, $r2;
        java.lang.Object $r3;
        com.android.server.connectivity.Vpn $r4;
        java.lang.Throwable $r5;
        java.lang.String r6;

        r0 := @this: com.android.server.ConnectivityService;

        r6 := @parameter0: java.lang.String;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i1);

        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label1:
        $r2 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        $r4 = (com.android.server.connectivity.Vpn) $r3;

        virtualinvoke $r4.<com.android.server.connectivity.Vpn: void stopVpnProfile(java.lang.String)>(r6);

        exitmonitor r1;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public void systemReady()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.connectivity.PermissionMonitor $r1;
        com.android.server.connectivity.ProxyTracker $r2;
        android.content.Intent $r3, $r7;
        android.os.Message $r4, $r5;
        android.os.UserHandle $r6;
        android.content.Context $r8;
        java.lang.Throwable $r9;
        com.android.server.ConnectivityService$InternalHandler r10, r11;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.PermissionMonitor mPermissionMonitor>;

        virtualinvoke $r1.<com.android.server.connectivity.PermissionMonitor: void startMonitoring()>();

        $r2 = r0.<com.android.server.ConnectivityService: com.android.server.connectivity.ProxyTracker mProxyTracker>;

        virtualinvoke $r2.<com.android.server.connectivity.ProxyTracker: void loadGlobalProxy()>();

        specialinvoke r0.<com.android.server.ConnectivityService: void registerNetdEventCallback()>();

        entermonitor r0;

     label1:
        r0.<com.android.server.ConnectivityService: boolean mSystemReady> = 1;

        $r3 = r0.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast>;

        if $r3 == null goto label2;

        $r8 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r7 = r0.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast>;

        $r6 = <android.os.UserHandle: android.os.UserHandle ALL>;

        virtualinvoke $r8.<android.content.Context: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r7, $r6);

        r0.<com.android.server.ConnectivityService: android.content.Intent mInitialBroadcast> = null;

     label2:
        exitmonitor r0;

     label3:
        virtualinvoke r0.<com.android.server.ConnectivityService: boolean updateLockdownVpn()>();

        r10 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r4 = virtualinvoke r10.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int)>(30);

        virtualinvoke r10.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r4);

        r11 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r5 = virtualinvoke r11.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int)>(25);

        virtualinvoke r11.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r5);

        return;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)
    {
        com.android.server.ConnectivityService r0;
        android.net.IConnectivityDiagnosticsCallback r1;
        com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler r2;
        int $i0;
        android.os.Message $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.net.IConnectivityDiagnosticsCallback;

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler mConnectivityDiagnosticsHandler>;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = virtualinvoke r2.<com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(2, $i0, 0, r1);

        virtualinvoke r2.<com.android.server.ConnectivityService$ConnectivityDiagnosticsHandler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    public void unregisterNetworkFactory(android.os.Messenger)
    {
        com.android.server.ConnectivityService r0;
        android.os.Messenger r1;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.os.Messenger;

        virtualinvoke r0.<com.android.server.ConnectivityService: void unregisterNetworkProvider(android.os.Messenger)>(r1);

        return;
    }

    public void unregisterNetworkProvider(android.os.Messenger)
    {
        com.android.server.ConnectivityService r0;
        android.os.Messenger r1;
        com.android.server.ConnectivityService$InternalHandler r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.ConnectivityService;

        r1 := @parameter0: android.os.Messenger;

        specialinvoke r0.<com.android.server.ConnectivityService: void enforceNetworkFactoryOrSettingsPermission()>();

        r2 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        $r3 = virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: android.os.Message obtainMessage(int,java.lang.Object)>(23, r1);

        virtualinvoke r2.<com.android.server.ConnectivityService$InternalHandler: boolean sendMessage(android.os.Message)>($r3);

        return;
    }

    void updateAlwaysOnNetworks()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$InternalHandler $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        virtualinvoke $r1.<com.android.server.ConnectivityService$InternalHandler: boolean sendEmptyMessage(int)>(30);

        return;
    }

    public boolean updateLockdownVpn()
    {
        com.android.server.ConnectivityService r0;
        android.util.SparseArray r1, $r7;
        boolean z0;
        int i0, $i1, $i2;
        android.security.KeyStore $r2, r23;
        java.lang.String $r5, $r14, $r17, $r18, $r19, r22, r26, r29;
        byte[] $r6, r21;
        java.lang.Object $r8;
        com.android.server.ConnectivityService$InternalHandler $r9;
        android.content.Context $r10;
        java.lang.Throwable $r20;
        java.lang.StringBuilder r24, r27, r30;
        com.android.internal.net.VpnProfile r25;
        com.android.server.connectivity.Vpn r28;
        com.android.server.net.LockdownVpnTracker r31;

        r0 := @this: com.android.server.ConnectivityService;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        if $i1 == 1000 goto label01;

        $r19 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>($r19, "Lockdown VPN only available to AID_SYSTEM");

        return 0;

     label01:
        r1 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        entermonitor r1;

     label02:
        z0 = staticinvoke <com.android.server.net.LockdownVpnTracker: boolean isEnabled()>();

        r0.<com.android.server.ConnectivityService: boolean mLockdownEnabled> = z0;

     label03:
        if z0 == 0 goto label18;

     label04:
        $r2 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        r21 = virtualinvoke $r2.<android.security.KeyStore: byte[] get(java.lang.String)>("LOCKDOWN_VPN");

     label05:
        if r21 != null goto label08;

     label06:
        $r18 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>($r18, "Lockdown VPN configured but cannot be read from keystore");

        exitmonitor r1;

     label07:
        return 0;

     label08:
        r22 = new java.lang.String;

        specialinvoke r22.<java.lang.String: void <init>(byte[])>(r21);

        r23 = r0.<com.android.server.ConnectivityService: android.security.KeyStore mKeyStore>;

        r24 = new java.lang.StringBuilder;

        specialinvoke r24.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VPN_");

        virtualinvoke r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r5 = virtualinvoke r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6 = virtualinvoke r23.<android.security.KeyStore: byte[] get(java.lang.String)>($r5);

        r25 = staticinvoke <com.android.internal.net.VpnProfile: com.android.internal.net.VpnProfile decode(java.lang.String,byte[])>(r22, $r6);

     label09:
        if r25 != null goto label12;

     label10:
        r26 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r27 = new java.lang.StringBuilder;

        specialinvoke r27.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Lockdown VPN configured invalid profile ");

        virtualinvoke r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22);

        $r17 = virtualinvoke r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>(r26, $r17);

        specialinvoke r0.<com.android.server.ConnectivityService: void setLockdownTracker(com.android.server.net.LockdownVpnTracker)>(null);

        exitmonitor r1;

     label11:
        return 1;

     label12:
        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        $r7 = r0.<com.android.server.ConnectivityService: android.util.SparseArray mVpns>;

        $r8 = virtualinvoke $r7.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r28 = (com.android.server.connectivity.Vpn) $r8;

     label13:
        if r28 != null goto label16;

     label14:
        r29 = <com.android.server.ConnectivityService: java.lang.String TAG>;

        r30 = new java.lang.StringBuilder;

        specialinvoke r30.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("VPN for user ");

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        virtualinvoke r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not ready yet. Skipping lockdown");

        $r14 = virtualinvoke r30.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>(r29, $r14);

        exitmonitor r1;

     label15:
        return 0;

     label16:
        r31 = new com.android.server.net.LockdownVpnTracker;

        $r10 = r0.<com.android.server.ConnectivityService: android.content.Context mContext>;

        $r9 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        specialinvoke r31.<com.android.server.net.LockdownVpnTracker: void <init>(android.content.Context,com.android.server.ConnectivityService,android.os.Handler,com.android.server.connectivity.Vpn,com.android.internal.net.VpnProfile)>($r10, r0, $r9, r28, r25);

        specialinvoke r0.<com.android.server.ConnectivityService: void setLockdownTracker(com.android.server.net.LockdownVpnTracker)>(r31);

     label17:
        goto label19;

     label18:
        specialinvoke r0.<com.android.server.ConnectivityService: void setLockdownTracker(com.android.server.net.LockdownVpnTracker)>(null);

     label19:
        exitmonitor r1;

     label20:
        return 1;

     label21:
        $r20 := @caughtexception;

     label22:
        exitmonitor r1;

     label23:
        throw $r20;

        catch java.lang.Throwable from label02 to label03 with label21;
        catch java.lang.Throwable from label04 to label05 with label21;
        catch java.lang.Throwable from label06 to label07 with label21;
        catch java.lang.Throwable from label08 to label09 with label21;
        catch java.lang.Throwable from label10 to label11 with label21;
        catch java.lang.Throwable from label12 to label13 with label21;
        catch java.lang.Throwable from label14 to label15 with label21;
        catch java.lang.Throwable from label16 to label17 with label21;
        catch java.lang.Throwable from label18 to label19 with label21;
        catch java.lang.Throwable from label19 to label20 with label21;
        catch java.lang.Throwable from label22 to label23 with label21;
    }

    void updatePrivateDnsSettings()
    {
        com.android.server.ConnectivityService r0;
        com.android.server.ConnectivityService$InternalHandler $r1;

        r0 := @this: com.android.server.ConnectivityService;

        $r1 = r0.<com.android.server.ConnectivityService: com.android.server.ConnectivityService$InternalHandler mHandler>;

        virtualinvoke $r1.<com.android.server.ConnectivityService$InternalHandler: boolean sendEmptyMessage(int)>(37);

        return;
    }
}
