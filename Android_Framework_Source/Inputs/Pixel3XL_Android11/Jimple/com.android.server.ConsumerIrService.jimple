public class com.android.server.ConsumerIrService extends android.hardware.IConsumerIrService$Stub
{
    private static final int MAX_XMIT_TIME;
    private static final java.lang.String TAG;
    private final android.content.Context mContext;
    private final java.lang.Object mHalLock;
    private final boolean mHasNativeHal;
    private final android.os.PowerManager$WakeLock mWakeLock;

    void <init>(android.content.Context)
    {
        com.android.server.ConsumerIrService r0;
        java.lang.Object $r1, $r2;
        android.os.PowerManager $r3;
        boolean $z0, $z1, $z2, $z3;
        android.content.Context $r4, r8;
        android.content.pm.PackageManager $r5;
        java.lang.RuntimeException $r6, $r7;
        android.os.PowerManager$WakeLock r9;

        r0 := @this: com.android.server.ConsumerIrService;

        r8 := @parameter0: android.content.Context;

        specialinvoke r0.<android.hardware.IConsumerIrService$Stub: void <init>()>();

        $r1 = new java.lang.Object;

        specialinvoke $r1.<java.lang.Object: void <init>()>();

        r0.<com.android.server.ConsumerIrService: java.lang.Object mHalLock> = $r1;

        r0.<com.android.server.ConsumerIrService: android.content.Context mContext> = r8;

        $r2 = virtualinvoke r8.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        $r3 = (android.os.PowerManager) $r2;

        r9 = virtualinvoke $r3.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "ConsumerIrService");

        r0.<com.android.server.ConsumerIrService: android.os.PowerManager$WakeLock mWakeLock> = r9;

        virtualinvoke r9.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(1);

        $z0 = staticinvoke <com.android.server.ConsumerIrService: boolean halOpen()>();

        r0.<com.android.server.ConsumerIrService: boolean mHasNativeHal> = $z0;

        $r4 = r0.<com.android.server.ConsumerIrService: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z1 = virtualinvoke $r5.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.hardware.consumerir");

        if $z1 == 0 goto label2;

        $z3 = r0.<com.android.server.ConsumerIrService: boolean mHasNativeHal>;

        if $z3 == 0 goto label1;

        goto label3;

     label1:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("FEATURE_CONSUMER_IR present, but no IR HAL loaded!");

        throw $r7;

     label2:
        $z2 = r0.<com.android.server.ConsumerIrService: boolean mHasNativeHal>;

        if $z2 != 0 goto label4;

     label3:
        return;

     label4:
        $r6 = new java.lang.RuntimeException;

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("IR HAL present, but FEATURE_CONSUMER_IR is not set!");

        throw $r6;
    }

    private static native int[] halGetCarrierFrequencies();

    private static native boolean halOpen();

    private static native int halTransmit(int, int[]);

    private void throwIfNoIrEmitter()
    {
        com.android.server.ConsumerIrService r0;
        boolean $z0;
        java.lang.UnsupportedOperationException $r1;

        r0 := @this: com.android.server.ConsumerIrService;

        $z0 = r0.<com.android.server.ConsumerIrService: boolean mHasNativeHal>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("IR emitter not available");

        throw $r1;
    }

    public int[] getCarrierFrequencies()
    {
        com.android.server.ConsumerIrService r0;
        java.lang.Object r1;
        android.content.Context $r2;
        int $i0;
        java.lang.SecurityException $r3;
        java.lang.Throwable $r4;
        int[] r5;

        r0 := @this: com.android.server.ConsumerIrService;

        $r2 = r0.<com.android.server.ConsumerIrService: android.content.Context mContext>;

        $i0 = virtualinvoke $r2.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.TRANSMIT_IR");

        if $i0 != 0 goto label6;

        specialinvoke r0.<com.android.server.ConsumerIrService: void throwIfNoIrEmitter()>();

        r1 = r0.<com.android.server.ConsumerIrService: java.lang.Object mHalLock>;

        entermonitor r1;

     label1:
        r5 = staticinvoke <com.android.server.ConsumerIrService: int[] halGetCarrierFrequencies()>();

        exitmonitor r1;

     label2:
        return r5;

     label3:
        $r4 := @caughtexception;

     label4:
        exitmonitor r1;

     label5:
        throw $r4;

     label6:
        $r3 = new java.lang.SecurityException;

        specialinvoke $r3.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires TRANSMIT_IR permission");

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean hasIrEmitter()
    {
        com.android.server.ConsumerIrService r0;
        boolean $z0;

        r0 := @this: com.android.server.ConsumerIrService;

        $z0 = r0.<com.android.server.ConsumerIrService: boolean mHasNativeHal>;

        return $z0;
    }

    public void transmit(java.lang.String, int, int[])
    {
        com.android.server.ConsumerIrService r0;
        int i0, i1, $i2, i6, i8, i9;
        android.content.Context $r1;
        java.lang.SecurityException $r2;
        byte $b3;
        java.lang.IllegalArgumentException $r3, $r7;
        java.lang.String $r6, r9;
        long $l5, l7;
        java.lang.Throwable $r8;
        int[] r10;
        java.lang.Object r11;
        java.lang.StringBuilder r12;

        r0 := @this: com.android.server.ConsumerIrService;

        r9 := @parameter0: java.lang.String;

        i6 := @parameter1: int;

        r10 := @parameter2: int[];

        $r1 = r0.<com.android.server.ConsumerIrService: android.content.Context mContext>;

        $i2 = virtualinvoke $r1.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.TRANSMIT_IR");

        if $i2 != 0 goto label13;

        l7 = 0L;

        i0 = lengthof r10;

        i8 = 0;

     label01:
        if i8 >= i0 goto label03;

        i1 = r10[i8];

        if i1 <= 0 goto label02;

        $l5 = (long) i1;

        l7 = l7 + $l5;

        i8 = i8 + 1;

        goto label01;

     label02:
        $r7 = new java.lang.IllegalArgumentException;

        specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Non-positive IR slice");

        throw $r7;

     label03:
        $b3 = l7 cmp 2000000L;

        if $b3 > 0 goto label12;

        specialinvoke r0.<com.android.server.ConsumerIrService: void throwIfNoIrEmitter()>();

        r11 = r0.<com.android.server.ConsumerIrService: java.lang.Object mHalLock>;

        entermonitor r11;

     label04:
        i9 = staticinvoke <com.android.server.ConsumerIrService: int halTransmit(int,int[])>(i6, r10);

     label05:
        if i9 >= 0 goto label07;

     label06:
        r12 = new java.lang.StringBuilder;

        specialinvoke r12.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Error transmitting: ");

        virtualinvoke r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9);

        $r6 = virtualinvoke r12.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("ConsumerIrService", $r6);

     label07:
        exitmonitor r11;

     label08:
        return;

     label09:
        $r8 := @caughtexception;

     label10:
        exitmonitor r11;

     label11:
        throw $r8;

     label12:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("IR pattern too long");

        throw $r3;

     label13:
        $r2 = new java.lang.SecurityException;

        specialinvoke $r2.<java.lang.SecurityException: void <init>(java.lang.String)>("Requires TRANSMIT_IR permission");

        throw $r2;

        catch java.lang.Throwable from label04 to label05 with label09;
        catch java.lang.Throwable from label06 to label07 with label09;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.lang.Throwable from label10 to label11 with label09;
    }

    public static void <clinit>()
    {
        <com.android.server.ConsumerIrService: java.lang.String TAG> = "ConsumerIrService";

        <com.android.server.ConsumerIrService: int MAX_XMIT_TIME> = 2000000;

        return;
    }
}
