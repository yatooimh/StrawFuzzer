class com.android.server.DeviceIdleController$Injector extends java.lang.Object
{
    private android.net.ConnectivityManager mConnectivityManager;
    private com.android.server.DeviceIdleController$Constants mConstants;
    private final android.content.Context mContext;
    private android.location.LocationManager mLocationManager;

    void <init>(android.content.Context)
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.content.Context r1;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        r1 := @parameter0: android.content.Context;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext> = r1;

        return;
    }

    android.app.AlarmManager getAlarmManager()
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.app.AlarmManager $r3;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        $r1 = r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/AlarmManager;");

        $r3 = (android.app.AlarmManager) $r2;

        return $r3;
    }

    com.android.server.AnyMotionDetector getAnyMotionDetector(android.os.Handler, android.hardware.SensorManager, com.android.server.AnyMotionDetector$DeviceIdleCallback, float)
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.os.Handler r1;
        android.hardware.SensorManager r2;
        com.android.server.AnyMotionDetector$DeviceIdleCallback r3;
        float f0;
        com.android.server.AnyMotionDetector $r4;
        android.os.PowerManager $r5;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: android.hardware.SensorManager;

        r3 := @parameter2: com.android.server.AnyMotionDetector$DeviceIdleCallback;

        f0 := @parameter3: float;

        $r4 = new com.android.server.AnyMotionDetector;

        $r5 = virtualinvoke r0.<com.android.server.DeviceIdleController$Injector: android.os.PowerManager getPowerManager()>();

        specialinvoke $r4.<com.android.server.AnyMotionDetector: void <init>(android.os.PowerManager,android.os.Handler,android.hardware.SensorManager,com.android.server.AnyMotionDetector$DeviceIdleCallback,float)>($r5, r1, r2, r3, f0);

        return $r4;
    }

    com.android.server.AppStateTracker getAppStateTracker(android.content.Context, android.os.Looper)
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.content.Context r1;
        android.os.Looper r2;
        com.android.server.AppStateTracker $r3;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: android.os.Looper;

        $r3 = new com.android.server.AppStateTracker;

        specialinvoke $r3.<com.android.server.AppStateTracker: void <init>(android.content.Context,android.os.Looper)>(r1, r2);

        return $r3;
    }

    android.net.ConnectivityManager getConnectivityManager()
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.net.ConnectivityManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        $r1 = r0.<com.android.server.DeviceIdleController$Injector: android.net.ConnectivityManager mConnectivityManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/net/ConnectivityManager;");

        $r5 = (android.net.ConnectivityManager) $r4;

        r0.<com.android.server.DeviceIdleController$Injector: android.net.ConnectivityManager mConnectivityManager> = $r5;

     label1:
        $r2 = r0.<com.android.server.DeviceIdleController$Injector: android.net.ConnectivityManager mConnectivityManager>;

        return $r2;
    }

    com.android.server.DeviceIdleController$Constants getConstants(com.android.server.DeviceIdleController, android.os.Handler, android.content.ContentResolver)
    {
        com.android.server.DeviceIdleController$Injector r0;
        com.android.server.DeviceIdleController r1;
        android.os.Handler r2;
        android.content.ContentResolver r3;
        com.android.server.DeviceIdleController$Constants $r4, $r5, $r7;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        r1 := @parameter0: com.android.server.DeviceIdleController;

        r2 := @parameter1: android.os.Handler;

        r3 := @parameter2: android.content.ContentResolver;

        $r4 = r0.<com.android.server.DeviceIdleController$Injector: com.android.server.DeviceIdleController$Constants mConstants>;

        if $r4 != null goto label1;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r7 = new com.android.server.DeviceIdleController$Constants;

        specialinvoke $r7.<com.android.server.DeviceIdleController$Constants: void <init>(com.android.server.DeviceIdleController,android.os.Handler,android.content.ContentResolver)>(r1, r2, r3);

        r0.<com.android.server.DeviceIdleController$Injector: com.android.server.DeviceIdleController$Constants mConstants> = $r7;

     label1:
        $r5 = r0.<com.android.server.DeviceIdleController$Injector: com.android.server.DeviceIdleController$Constants mConstants>;

        return $r5;
    }

    com.android.server.deviceidle.ConstraintController getConstraintController(android.os.Handler, com.android.server.DeviceIdleInternal)
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.os.Handler r1;
        com.android.server.DeviceIdleInternal r2;
        android.content.Context $r3, $r6;
        android.content.pm.PackageManager $r4;
        boolean $z0;
        com.android.server.deviceidle.TvConstraintController $r5;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        r1 := @parameter0: android.os.Handler;

        r2 := @parameter1: com.android.server.DeviceIdleInternal;

        $r3 = r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $z0 = virtualinvoke $r4.<android.content.pm.PackageManager: boolean hasSystemFeature(java.lang.String)>("android.software.leanback_only");

        if $z0 == 0 goto label1;

        $r5 = new com.android.server.deviceidle.TvConstraintController;

        $r6 = r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext>;

        specialinvoke $r5.<com.android.server.deviceidle.TvConstraintController: void <init>(android.content.Context,android.os.Handler)>($r6, r1);

        return $r5;

     label1:
        return null;
    }

    long getElapsedRealtime()
    {
        com.android.server.DeviceIdleController$Injector r0;
        long $l0;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        return $l0;
    }

    com.android.server.DeviceIdleController$MyHandler getHandler(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController$Injector r0;
        com.android.server.DeviceIdleController r1;
        com.android.server.DeviceIdleController$MyHandler $r3;
        android.os.Handler $r4;
        android.os.Looper $r5;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        r1 := @parameter0: com.android.server.DeviceIdleController;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = new com.android.server.DeviceIdleController$MyHandler;

        $r4 = staticinvoke <com.android.internal.os.BackgroundThread: android.os.Handler getHandler()>();

        $r5 = virtualinvoke $r4.<android.os.Handler: android.os.Looper getLooper()>();

        specialinvoke $r3.<com.android.server.DeviceIdleController$MyHandler: void <init>(com.android.server.DeviceIdleController,android.os.Looper)>(r1, $r5);

        return $r3;
    }

    android.location.LocationManager getLocationManager()
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.location.LocationManager $r1, $r2, $r5;
        android.content.Context $r3;
        java.lang.Object $r4;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        $r1 = r0.<com.android.server.DeviceIdleController$Injector: android.location.LocationManager mLocationManager>;

        if $r1 != null goto label1;

        $r3 = r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/location/LocationManager;");

        $r5 = (android.location.LocationManager) $r4;

        r0.<com.android.server.DeviceIdleController$Injector: android.location.LocationManager mLocationManager> = $r5;

     label1:
        $r2 = r0.<com.android.server.DeviceIdleController$Injector: android.location.LocationManager mLocationManager>;

        return $r2;
    }

    android.hardware.Sensor getMotionSensor()
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.hardware.SensorManager r1;
        int i0;
        android.content.Context $r2, $r4;
        android.content.res.Resources $r3, $r5;
        boolean $z0;
        android.hardware.Sensor r6, r7, r8;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        r1 = virtualinvoke r0.<com.android.server.DeviceIdleController$Injector: android.hardware.SensorManager getSensorManager()>();

        r6 = null;

        $r2 = r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        i0 = virtualinvoke $r3.<android.content.res.Resources: int getInteger(int)>(17694744);

        if i0 <= 0 goto label1;

        r6 = virtualinvoke r1.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>(i0, 1);

     label1:
        r7 = r6;

        if r6 != null goto label2;

        r7 = r6;

        $r4 = r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext>;

        $r5 = virtualinvoke $r4.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r5.<android.content.res.Resources: boolean getBoolean(int)>(17891365);

        if $z0 == 0 goto label2;

        r7 = virtualinvoke r1.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>(26, 1);

     label2:
        r8 = r7;

        if r7 != null goto label3;

        r8 = virtualinvoke r1.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>(17, 1);

     label3:
        return r8;
    }

    android.os.PowerManager getPowerManager()
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.os.PowerManager $r3;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        $r1 = r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/os/PowerManager;");

        $r3 = (android.os.PowerManager) $r2;

        return $r3;
    }

    android.hardware.SensorManager getSensorManager()
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.hardware.SensorManager $r3;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        $r1 = r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/hardware/SensorManager;");

        $r3 = (android.hardware.SensorManager) $r2;

        return $r3;
    }

    boolean useMotionSensor()
    {
        com.android.server.DeviceIdleController$Injector r0;
        android.content.Context $r1;
        android.content.res.Resources $r2;
        boolean $z0;

        r0 := @this: com.android.server.DeviceIdleController$Injector;

        $r1 = r0.<com.android.server.DeviceIdleController$Injector: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = virtualinvoke $r2.<android.content.res.Resources: boolean getBoolean(int)>(17891367);

        return $z0;
    }
}
