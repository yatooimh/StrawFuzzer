public class com.android.server.DeviceIdleController extends com.android.server.SystemService implements com.android.server.AnyMotionDetector$DeviceIdleCallback
{
    private static final int ACTIVE_REASON_ALARM;
    private static final int ACTIVE_REASON_CHARGING;
    private static final int ACTIVE_REASON_FORCED;
    private static final int ACTIVE_REASON_FROM_BINDER_CALL;
    private static final int ACTIVE_REASON_MOTION;
    private static final int ACTIVE_REASON_SCREEN;
    private static final int ACTIVE_REASON_UNKNOWN;
    private static final int ACTIVE_REASON_UNLOCKED;
    private static final boolean COMPRESS_TIME;
    private static final boolean DEBUG;
    private static final int EVENT_BUFFER_SIZE;
    private static final int EVENT_DEEP_IDLE;
    private static final int EVENT_DEEP_MAINTENANCE;
    private static final int EVENT_LIGHT_IDLE;
    private static final int EVENT_LIGHT_MAINTENANCE;
    private static final int EVENT_NORMAL;
    private static final int EVENT_NULL;
    static final int LIGHT_STATE_ACTIVE;
    static final int LIGHT_STATE_IDLE;
    static final int LIGHT_STATE_IDLE_MAINTENANCE;
    static final int LIGHT_STATE_INACTIVE;
    static final int LIGHT_STATE_OVERRIDE;
    static final int LIGHT_STATE_PRE_IDLE;
    static final int LIGHT_STATE_WAITING_FOR_NETWORK;
    static final float MIN_PRE_IDLE_FACTOR_CHANGE;
    static final long MIN_STATE_STEP_ALARM_CHANGE;
    private static final int MSG_FINISH_IDLE_OP;
    private static final int MSG_REPORT_ACTIVE;
    private static final int MSG_REPORT_IDLE_OFF;
    private static final int MSG_REPORT_IDLE_ON;
    private static final int MSG_REPORT_IDLE_ON_LIGHT;
    static final int MSG_REPORT_STATIONARY_STATUS;
    private static final int MSG_REPORT_TEMP_APP_WHITELIST_CHANGED;
    static final int MSG_RESET_PRE_IDLE_TIMEOUT_FACTOR;
    private static final int MSG_SEND_CONSTRAINT_MONITORING;
    private static final int MSG_TEMP_APP_WHITELIST_TIMEOUT;
    static final int MSG_UPDATE_PRE_IDLE_TIMEOUT_FACTOR;
    private static final int MSG_WRITE_CONFIG;
    static final int SET_IDLE_FACTOR_RESULT_IGNORED;
    static final int SET_IDLE_FACTOR_RESULT_INVALID;
    static final int SET_IDLE_FACTOR_RESULT_NOT_SUPPORT;
    static final int SET_IDLE_FACTOR_RESULT_OK;
    static final int SET_IDLE_FACTOR_RESULT_UNINIT;
    static final int STATE_ACTIVE;
    static final int STATE_IDLE;
    static final int STATE_IDLE_MAINTENANCE;
    static final int STATE_IDLE_PENDING;
    static final int STATE_INACTIVE;
    static final int STATE_LOCATING;
    static final int STATE_QUICK_DOZE_DELAY;
    static final int STATE_SENSING;
    private static final java.lang.String TAG;
    private int mActiveIdleOpCount;
    private android.os.PowerManager$WakeLock mActiveIdleWakeLock;
    private int mActiveReason;
    private android.app.AlarmManager mAlarmManager;
    private boolean mAlarmsActive;
    private com.android.server.AnyMotionDetector mAnyMotionDetector;
    private final com.android.server.AppStateTracker mAppStateTracker;
    private com.android.internal.app.IBatteryStats mBatteryStats;
    com.android.server.DeviceIdleController$BinderService mBinderService;
    private boolean mCharging;
    public final android.util.AtomicFile mConfigFile;
    private com.android.server.DeviceIdleController$Constants mConstants;
    private com.android.server.deviceidle.ConstraintController mConstraintController;
    private final android.util.ArrayMap mConstraints;
    private long mCurLightIdleBudget;
    final android.app.AlarmManager$OnAlarmListener mDeepAlarmListener;
    private boolean mDeepEnabled;
    private final int[] mEventCmds;
    private final java.lang.String[] mEventReasons;
    private final long[] mEventTimes;
    private boolean mForceIdle;
    private final android.location.LocationListener mGenericLocationListener;
    private android.os.PowerManager$WakeLock mGoingIdleWakeLock;
    private final android.location.LocationListener mGpsLocationListener;
    final com.android.server.DeviceIdleController$MyHandler mHandler;
    private boolean mHasGps;
    private boolean mHasNetworkLocation;
    private android.content.Intent mIdleIntent;
    private long mIdleStartTime;
    private final android.content.BroadcastReceiver mIdleStartedDoneReceiver;
    private long mInactiveTimeout;
    private final com.android.server.DeviceIdleController$Injector mInjector;
    private final android.content.BroadcastReceiver mInteractivityReceiver;
    private boolean mJobsActive;
    private android.location.Location mLastGenericLocation;
    private android.location.Location mLastGpsLocation;
    private long mLastMotionEventElapsed;
    private float mLastPreIdleFactor;
    private final android.app.AlarmManager$OnAlarmListener mLightAlarmListener;
    private boolean mLightEnabled;
    private android.content.Intent mLightIdleIntent;
    private int mLightState;
    private android.app.ActivityManagerInternal mLocalActivityManager;
    private com.android.server.wm.ActivityTaskManagerInternal mLocalActivityTaskManager;
    private com.android.server.AlarmManagerInternal mLocalAlarmManager;
    private android.os.PowerManagerInternal mLocalPowerManager;
    private com.android.server.DeviceIdleInternal mLocalService;
    private boolean mLocated;
    private boolean mLocating;
    private android.location.LocationRequest mLocationRequest;
    private long mMaintenanceStartTime;
    final com.android.server.DeviceIdleController$MotionListener mMotionListener;
    private final android.app.AlarmManager$OnAlarmListener mMotionRegistrationAlarmListener;
    private android.hardware.Sensor mMotionSensor;
    private final android.app.AlarmManager$OnAlarmListener mMotionTimeoutAlarmListener;
    private boolean mNetworkConnected;
    private android.net.INetworkPolicyManager mNetworkPolicyManager;
    private com.android.server.net.NetworkPolicyManagerInternal mNetworkPolicyManagerInternal;
    private long mNextAlarmTime;
    private long mNextIdleDelay;
    private long mNextIdlePendingDelay;
    private long mNextLightAlarmTime;
    private long mNextLightIdleDelay;
    private long mNextSensingTimeoutAlarmTime;
    private boolean mNotMoving;
    private int mNumBlockingConstraints;
    private android.os.PowerManager mPowerManager;
    private int[] mPowerSaveWhitelistAllAppIdArray;
    private final android.util.SparseBooleanArray mPowerSaveWhitelistAllAppIds;
    private final android.util.ArrayMap mPowerSaveWhitelistApps;
    private final android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle;
    private int[] mPowerSaveWhitelistExceptIdleAppIdArray;
    private final android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds;
    private final android.util.SparseBooleanArray mPowerSaveWhitelistSystemAppIds;
    private final android.util.SparseBooleanArray mPowerSaveWhitelistSystemAppIdsExceptIdle;
    private int[] mPowerSaveWhitelistUserAppIdArray;
    private final android.util.SparseBooleanArray mPowerSaveWhitelistUserAppIds;
    private final android.util.ArrayMap mPowerSaveWhitelistUserApps;
    private final android.util.ArraySet mPowerSaveWhitelistUserAppsExceptIdle;
    private float mPreIdleFactor;
    private boolean mQuickDozeActivated;
    private boolean mQuickDozeActivatedWhileIdling;
    private final android.content.BroadcastReceiver mReceiver;
    private android.util.ArrayMap mRemovedFromSystemWhitelistApps;
    private boolean mScreenLocked;
    private com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver mScreenObserver;
    private boolean mScreenOn;
    private final android.app.AlarmManager$OnAlarmListener mSensingTimeoutAlarmListener;
    private android.hardware.SensorManager mSensorManager;
    private int mState;
    private final android.util.ArraySet mStationaryListeners;
    private int[] mTempWhitelistAppIdArray;
    private final android.util.SparseArray mTempWhitelistAppIdEndTimes;
    private final boolean mUseMotionSensor;

    public void <init>(android.content.Context)
    {
        com.android.server.DeviceIdleController r0;
        android.content.Context r1;
        com.android.server.DeviceIdleController$Injector $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: android.content.Context;

        $r2 = new com.android.server.DeviceIdleController$Injector;

        specialinvoke $r2.<com.android.server.DeviceIdleController$Injector: void <init>(android.content.Context)>(r1);

        specialinvoke r0.<com.android.server.DeviceIdleController: void <init>(android.content.Context,com.android.server.DeviceIdleController$Injector)>(r1, $r2);

        return;
    }

    void <init>(android.content.Context, com.android.server.DeviceIdleController$Injector)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleController$Injector r1, $r37, $r39, $r42;
        android.util.ArrayMap $r2, $r3, $r5, $r6, $r17;
        android.util.ArraySet $r4, $r18;
        android.util.SparseBooleanArray $r7, $r8, $r9, $r11, $r13;
        int[] $r10, $r12, $r14, $r16, $r19;
        android.util.SparseArray $r15;
        long[] $r20;
        java.lang.String[] $r21;
        com.android.server.DeviceIdleController$1 $r22;
        com.android.server.DeviceIdleController$2 $r23;
        com.android.server._$$Lambda$DeviceIdleController$pUAsoxLVwpJ9Ac_b6Wbul1k9bIw $r24;
        com.android.server._$$Lambda$DeviceIdleController$t0VfPABg4g5djO2_js6H17nAdXk $r25;
        com.android.server.DeviceIdleController$3 $r26;
        com.android.server.DeviceIdleController$4 $r27;
        com.android.server.DeviceIdleController$5 $r28;
        com.android.server.DeviceIdleController$6 $r29;
        com.android.server.DeviceIdleController$MotionListener $r30;
        com.android.server.DeviceIdleController$7 $r31;
        com.android.server.DeviceIdleController$8 $r32;
        com.android.server.DeviceIdleController$9 $r33;
        android.util.AtomicFile $r34;
        java.io.File $r35, $r36;
        com.android.server.DeviceIdleController$MyHandler $r38;
        com.android.server.FgThread $r40;
        android.os.Looper $r41;
        boolean $z0;
        android.content.Context r43;
        com.android.server.AppStateTracker r44;

        r0 := @this: com.android.server.DeviceIdleController;

        r43 := @parameter0: android.content.Context;

        r1 := @parameter1: com.android.server.DeviceIdleController$Injector;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r43);

        r0.<com.android.server.DeviceIdleController: int mNumBlockingConstraints> = 0;

        $r2 = new android.util.ArrayMap;

        specialinvoke $r2.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints> = $r2;

        $r3 = new android.util.ArrayMap;

        specialinvoke $r3.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle> = $r3;

        $r4 = new android.util.ArraySet;

        specialinvoke $r4.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.ArraySet mPowerSaveWhitelistUserAppsExceptIdle> = $r4;

        $r5 = new android.util.ArrayMap;

        specialinvoke $r5.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps> = $r5;

        $r6 = new android.util.ArrayMap;

        specialinvoke $r6.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps> = $r6;

        $r7 = new android.util.SparseBooleanArray;

        specialinvoke $r7.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistSystemAppIdsExceptIdle> = $r7;

        $r8 = new android.util.SparseBooleanArray;

        specialinvoke $r8.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistSystemAppIds> = $r8;

        $r9 = new android.util.SparseBooleanArray;

        specialinvoke $r9.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds> = $r9;

        $r10 = newarray (int)[0];

        r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistExceptIdleAppIdArray> = $r10;

        $r11 = new android.util.SparseBooleanArray;

        specialinvoke $r11.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistAllAppIds> = $r11;

        $r12 = newarray (int)[0];

        r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistAllAppIdArray> = $r12;

        $r13 = new android.util.SparseBooleanArray;

        specialinvoke $r13.<android.util.SparseBooleanArray: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistUserAppIds> = $r13;

        $r14 = newarray (int)[0];

        r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistUserAppIdArray> = $r14;

        $r15 = new android.util.SparseArray;

        specialinvoke $r15.<android.util.SparseArray: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes> = $r15;

        $r16 = newarray (int)[0];

        r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray> = $r16;

        $r17 = new android.util.ArrayMap;

        specialinvoke $r17.<android.util.ArrayMap: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps> = $r17;

        $r18 = new android.util.ArraySet;

        specialinvoke $r18.<android.util.ArraySet: void <init>()>();

        r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners> = $r18;

        $r19 = newarray (int)[100];

        r0.<com.android.server.DeviceIdleController: int[] mEventCmds> = $r19;

        $r20 = newarray (long)[100];

        r0.<com.android.server.DeviceIdleController: long[] mEventTimes> = $r20;

        $r21 = newarray (java.lang.String)[100];

        r0.<com.android.server.DeviceIdleController: java.lang.String[] mEventReasons> = $r21;

        $r22 = new com.android.server.DeviceIdleController$1;

        specialinvoke $r22.<com.android.server.DeviceIdleController$1: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: android.content.BroadcastReceiver mReceiver> = $r22;

        $r23 = new com.android.server.DeviceIdleController$2;

        specialinvoke $r23.<com.android.server.DeviceIdleController$2: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mLightAlarmListener> = $r23;

        $r24 = new com.android.server._$$Lambda$DeviceIdleController$pUAsoxLVwpJ9Ac_b6Wbul1k9bIw;

        specialinvoke $r24.<com.android.server._$$Lambda$DeviceIdleController$pUAsoxLVwpJ9Ac_b6Wbul1k9bIw: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mMotionRegistrationAlarmListener> = $r24;

        $r25 = new com.android.server._$$Lambda$DeviceIdleController$t0VfPABg4g5djO2_js6H17nAdXk;

        specialinvoke $r25.<com.android.server._$$Lambda$DeviceIdleController$t0VfPABg4g5djO2_js6H17nAdXk: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mMotionTimeoutAlarmListener> = $r25;

        $r26 = new com.android.server.DeviceIdleController$3;

        specialinvoke $r26.<com.android.server.DeviceIdleController$3: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mSensingTimeoutAlarmListener> = $r26;

        $r27 = new com.android.server.DeviceIdleController$4;

        specialinvoke $r27.<com.android.server.DeviceIdleController$4: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mDeepAlarmListener> = $r27;

        $r28 = new com.android.server.DeviceIdleController$5;

        specialinvoke $r28.<com.android.server.DeviceIdleController$5: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: android.content.BroadcastReceiver mIdleStartedDoneReceiver> = $r28;

        $r29 = new com.android.server.DeviceIdleController$6;

        specialinvoke $r29.<com.android.server.DeviceIdleController$6: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: android.content.BroadcastReceiver mInteractivityReceiver> = $r29;

        $r30 = new com.android.server.DeviceIdleController$MotionListener;

        specialinvoke $r30.<com.android.server.DeviceIdleController$MotionListener: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MotionListener mMotionListener> = $r30;

        $r31 = new com.android.server.DeviceIdleController$7;

        specialinvoke $r31.<com.android.server.DeviceIdleController$7: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: android.location.LocationListener mGenericLocationListener> = $r31;

        $r32 = new com.android.server.DeviceIdleController$8;

        specialinvoke $r32.<com.android.server.DeviceIdleController$8: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: android.location.LocationListener mGpsLocationListener> = $r32;

        $r33 = new com.android.server.DeviceIdleController$9;

        specialinvoke $r33.<com.android.server.DeviceIdleController$9: void <init>(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver mScreenObserver> = $r33;

        r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector> = r1;

        $r34 = new android.util.AtomicFile;

        $r35 = new java.io.File;

        $r36 = staticinvoke <com.android.server.DeviceIdleController: java.io.File getSystemDir()>();

        specialinvoke $r35.<java.io.File: void <init>(java.io.File,java.lang.String)>($r36, "deviceidle.xml");

        specialinvoke $r34.<android.util.AtomicFile: void <init>(java.io.File)>($r35);

        r0.<com.android.server.DeviceIdleController: android.util.AtomicFile mConfigFile> = $r34;

        $r37 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $r38 = virtualinvoke $r37.<com.android.server.DeviceIdleController$Injector: com.android.server.DeviceIdleController$MyHandler getHandler(com.android.server.DeviceIdleController)>(r0);

        r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler> = $r38;

        $r39 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $r40 = staticinvoke <com.android.server.FgThread: com.android.server.FgThread get()>();

        $r41 = virtualinvoke $r40.<com.android.server.FgThread: android.os.Looper getLooper()>();

        r44 = virtualinvoke $r39.<com.android.server.DeviceIdleController$Injector: com.android.server.AppStateTracker getAppStateTracker(android.content.Context,android.os.Looper)>(r43, $r41);

        r0.<com.android.server.DeviceIdleController: com.android.server.AppStateTracker mAppStateTracker> = r44;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/AppStateTracker;", r44);

        $r42 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $z0 = virtualinvoke $r42.<com.android.server.DeviceIdleController$Injector: boolean useMotionSensor()>();

        r0.<com.android.server.DeviceIdleController: boolean mUseMotionSensor> = $z0;

        return;
    }

    static int access$000(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        int $i0;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $i0 = r0.<com.android.server.DeviceIdleController: int mState>;

        return $i0;
    }

    static com.android.server.DeviceIdleController$Constants access$100(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleController$Constants $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        return $r1;
    }

    static android.os.PowerManager$WakeLock access$1000(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        android.os.PowerManager$WakeLock $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.os.PowerManager$WakeLock mGoingIdleWakeLock>;

        return $r1;
    }

    static android.content.BroadcastReceiver access$1100(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        android.content.BroadcastReceiver $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.content.BroadcastReceiver mIdleStartedDoneReceiver>;

        return $r1;
    }

    static com.android.server.net.NetworkPolicyManagerInternal access$1200(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.net.NetworkPolicyManagerInternal $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.net.NetworkPolicyManagerInternal mNetworkPolicyManagerInternal>;

        return $r1;
    }

    static void access$1300(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        specialinvoke r0.<com.android.server.DeviceIdleController: void updatePreIdleFactor()>();

        return;
    }

    static void access$1400(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        specialinvoke r0.<com.android.server.DeviceIdleController: void maybeDoImmediateMaintenance()>();

        return;
    }

    static boolean access$1500(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $z0 = specialinvoke r0.<com.android.server.DeviceIdleController: boolean isStationaryLocked()>();

        return $z0;
    }

    static android.util.ArraySet access$1600(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArraySet $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners>;

        return $r1;
    }

    static int access$1700(com.android.server.DeviceIdleController, java.util.List)
    {
        com.android.server.DeviceIdleController r0;
        java.util.List r1;
        int $i0;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        r1 := @parameter1: java.util.List;

        $i0 = specialinvoke r0.<com.android.server.DeviceIdleController: int addPowerSaveWhitelistAppsInternal(java.util.List)>(r1);

        return $i0;
    }

    static void access$1800(com.android.server.DeviceIdleController, com.android.server.deviceidle.IDeviceIdleConstraint, boolean)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.deviceidle.IDeviceIdleConstraint r1;
        boolean z0;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        r1 := @parameter1: com.android.server.deviceidle.IDeviceIdleConstraint;

        z0 := @parameter2: boolean;

        specialinvoke r0.<com.android.server.DeviceIdleController: void onConstraintStateChangedLocked(com.android.server.deviceidle.IDeviceIdleConstraint,boolean)>(r1, z0);

        return;
    }

    static void access$1900(com.android.server.DeviceIdleController, com.android.server.deviceidle.IDeviceIdleConstraint, java.lang.String, int)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.deviceidle.IDeviceIdleConstraint r1;
        java.lang.String r2;
        int i0;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        r1 := @parameter1: com.android.server.deviceidle.IDeviceIdleConstraint;

        r2 := @parameter2: java.lang.String;

        i0 := @parameter3: int;

        specialinvoke r0.<com.android.server.DeviceIdleController: void registerDeviceIdleConstraintInternal(com.android.server.deviceidle.IDeviceIdleConstraint,java.lang.String,int)>(r1, r2, i0);

        return;
    }

    static android.hardware.Sensor access$200(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        android.hardware.Sensor $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.hardware.Sensor mMotionSensor>;

        return $r1;
    }

    static void access$2000(com.android.server.DeviceIdleController, com.android.server.deviceidle.IDeviceIdleConstraint)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.deviceidle.IDeviceIdleConstraint r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        r1 := @parameter1: com.android.server.deviceidle.IDeviceIdleConstraint;

        specialinvoke r0.<com.android.server.DeviceIdleController: void unregisterDeviceIdleConstraintInternal(com.android.server.deviceidle.IDeviceIdleConstraint)>(r1);

        return;
    }

    static void access$2100(com.android.server.DeviceIdleController, com.android.server.DeviceIdleInternal$StationaryListener)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleInternal$StationaryListener r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        r1 := @parameter1: com.android.server.DeviceIdleInternal$StationaryListener;

        specialinvoke r0.<com.android.server.DeviceIdleController: void unregisterStationaryListener(com.android.server.DeviceIdleInternal$StationaryListener)>(r1);

        return;
    }

    static android.hardware.SensorManager access$300(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        android.hardware.SensorManager $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.hardware.SensorManager mSensorManager>;

        return $r1;
    }

    static com.android.server.DeviceIdleController$Injector access$400(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleController$Injector $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        return $r1;
    }

    static android.os.PowerManagerInternal access$500(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        android.os.PowerManagerInternal $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.os.PowerManagerInternal mLocalPowerManager>;

        return $r1;
    }

    static android.net.INetworkPolicyManager access$600(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        android.net.INetworkPolicyManager $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.net.INetworkPolicyManager mNetworkPolicyManager>;

        return $r1;
    }

    static com.android.internal.app.IBatteryStats access$700(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        com.android.internal.app.IBatteryStats $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.internal.app.IBatteryStats mBatteryStats>;

        return $r1;
    }

    static android.content.Intent access$800(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        android.content.Intent $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.content.Intent mIdleIntent>;

        return $r1;
    }

    static android.content.Intent access$900(com.android.server.DeviceIdleController)
    {
        com.android.server.DeviceIdleController r0;
        android.content.Intent $r1;

        r0 := @parameter0: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.content.Intent mLightIdleIntent>;

        return $r1;
    }

    private void addEvent(int, java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        int i0, $i1;
        java.lang.String r1;
        int[] $r2, r5;
        long[] $r3, r6;
        long $l2;
        java.lang.String[] $r4, r7;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r5 = r0.<com.android.server.DeviceIdleController: int[] mEventCmds>;

        $i1 = r5[0];

        if $i1 == i0 goto label1;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r5, 0, r5, 1, 99);

        r6 = r0.<com.android.server.DeviceIdleController: long[] mEventTimes>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r6, 0, r6, 1, 99);

        r7 = r0.<com.android.server.DeviceIdleController: java.lang.String[] mEventReasons>;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r7, 0, r7, 1, 99);

        $r2 = r0.<com.android.server.DeviceIdleController: int[] mEventCmds>;

        $r2[0] = i0;

        $r3 = r0.<com.android.server.DeviceIdleController: long[] mEventTimes>;

        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $r3[0] = $l2;

        $r4 = r0.<com.android.server.DeviceIdleController: java.lang.String[] mEventReasons>;

        $r4[0] = r1;

     label1:
        return;
    }

    private int addPowerSaveWhitelistAppsInternal(java.util.List)
    {
        com.android.server.DeviceIdleController r0;
        java.lang.String r1, $r10;
        int $i0, $i1, $i2, $i3, $i4, i6, i7, i8, i9, i10;
        java.lang.Object $r2, r14;
        android.content.Context $r3;
        android.content.pm.PackageManager $r4;
        android.util.ArrayMap $r5;
        java.lang.Integer $r6;
        android.content.pm.PackageManager$NameNotFoundException $r7;
        java.lang.Throwable $r11;
        java.util.List r12;
        android.content.pm.ApplicationInfo r13;
        java.lang.StringBuilder r16;

        r0 := @this: com.android.server.DeviceIdleController;

        r12 := @parameter0: java.util.List;

        i6 = 0;

        i7 = 0;

        entermonitor r0;

     label01:
        $i0 = interfaceinvoke r12.<java.util.List: int size()>();

        i8 = $i0 - 1;

     label02:
        if i8 < 0 goto label12;

     label03:
        $r2 = interfaceinvoke r12.<java.util.List: java.lang.Object get(int)>(i8);

        r1 = (java.lang.String) $r2;

     label04:
        if r1 != null goto label05;

        i9 = i7 + 1;

        goto label11;

     label05:
        $r3 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r4 = virtualinvoke $r3.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r13 = virtualinvoke $r4.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r1, 4194304);

        $r5 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $i3 = r13.<android.content.pm.ApplicationInfo: int uid>;

        $i4 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        r14 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r6);

     label06:
        i10 = i6;

        if r14 != null goto label07;

        i10 = i6 + 1;

     label07:
        i6 = i10;

        i9 = i7;

        goto label11;

     label08:
        $r7 := @caughtexception;

     label09:
        r16 = new java.lang.StringBuilder;

        specialinvoke r16.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to add unknown package to power save whitelist: ");

        virtualinvoke r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke r16.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DeviceIdleController", $r10);

     label10:
        i9 = i7 + 1;

     label11:
        i8 = i8 + -1;

        i7 = i9;

        goto label02;

     label12:
        if i6 <= 0 goto label14;

     label13:
        specialinvoke r0.<com.android.server.DeviceIdleController: void reportPowerSaveWhitelistChangedLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateWhitelistAppIdsLocked()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void writeConfigFileLocked()>();

     label14:
        exitmonitor r0;

     label15:
        $i1 = interfaceinvoke r12.<java.util.List: int size()>();

        $i2 = $i1 - i7;

        return $i2;

     label16:
        $r11 := @caughtexception;

     label17:
        exitmonitor r0;

     label18:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label16;
        catch java.lang.Throwable from label03 to label04 with label16;
        catch android.content.pm.PackageManager$NameNotFoundException from label05 to label06 with label08;
        catch java.lang.Throwable from label05 to label06 with label16;
        catch java.lang.Throwable from label09 to label10 with label16;
        catch java.lang.Throwable from label13 to label14 with label16;
        catch java.lang.Throwable from label14 to label15 with label16;
        catch java.lang.Throwable from label17 to label18 with label16;
    }

    private void becomeActiveLocked(java.lang.String, int, long, boolean)
    {
        com.android.server.DeviceIdleController r0;
        java.lang.String r1;
        int i0, $i2, $i3, $i4;
        long l1;
        boolean z0;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        $i2 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i2 != 0 goto label1;

        $i4 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i4 == 0 goto label3;

     label1:
        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdle(int,java.lang.String)>(0, r1);

        r0.<com.android.server.DeviceIdleController: int mState> = 0;

        r0.<com.android.server.DeviceIdleController: long mInactiveTimeout> = l1;

        specialinvoke r0.<com.android.server.DeviceIdleController: void resetIdleManagementLocked()>();

        $i3 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i3 == 6 goto label2;

        r0.<com.android.server.DeviceIdleController: long mMaintenanceStartTime> = 0L;

     label2:
        if z0 == 0 goto label3;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleLight(int,java.lang.String)>(0, r1);

        r0.<com.android.server.DeviceIdleController: int mLightState> = 0;

        specialinvoke r0.<com.android.server.DeviceIdleController: void resetLightIdleManagementLocked()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleReportActiveLocked(java.lang.String,int)>(r1, i0);

        specialinvoke r0.<com.android.server.DeviceIdleController: void addEvent(int,java.lang.String)>(1, r1);

     label3:
        return;
    }

    private static int[] buildAppIdArray(android.util.ArrayMap, android.util.ArrayMap, android.util.SparseBooleanArray)
    {
        android.util.ArrayMap r0, r6;
        android.util.SparseBooleanArray r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.Object $r2, $r4;
        java.lang.Integer $r3, $r5;
        int[] r7;

        r6 := @parameter0: android.util.ArrayMap;

        r0 := @parameter1: android.util.ArrayMap;

        r1 := @parameter2: android.util.SparseBooleanArray;

        virtualinvoke r1.<android.util.SparseBooleanArray: void clear()>();

        if r6 == null goto label2;

        i6 = 0;

     label1:
        $i4 = virtualinvoke r6.<android.util.ArrayMap: int size()>();

        if i6 >= $i4 goto label2;

        $r4 = virtualinvoke r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i6);

        $r5 = (java.lang.Integer) $r4;

        $i5 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.util.SparseBooleanArray: void put(int,boolean)>($i5, 1);

        i6 = i6 + 1;

        goto label1;

     label2:
        if r0 == null goto label4;

        i7 = 0;

     label3:
        $i2 = virtualinvoke r0.<android.util.ArrayMap: int size()>();

        if i7 >= $i2 goto label4;

        $r2 = virtualinvoke r0.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i7);

        $r3 = (java.lang.Integer) $r2;

        $i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>();

        virtualinvoke r1.<android.util.SparseBooleanArray: void put(int,boolean)>($i3, 1);

        i7 = i7 + 1;

        goto label3;

     label4:
        i0 = virtualinvoke r1.<android.util.SparseBooleanArray: int size()>();

        r7 = newarray (int)[i0];

        i8 = 0;

     label5:
        if i8 >= i0 goto label6;

        $i1 = virtualinvoke r1.<android.util.SparseBooleanArray: int keyAt(int)>(i8);

        r7[i8] = $i1;

        i8 = i8 + 1;

        goto label5;

     label6:
        return r7;
    }

    private void cancelMotionRegistrationAlarmLocked()
    {
        com.android.server.DeviceIdleController r0;
        android.app.AlarmManager$OnAlarmListener $r1;
        android.app.AlarmManager $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        $r2 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $r1 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mMotionRegistrationAlarmListener>;

        virtualinvoke $r2.<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>($r1);

        return;
    }

    private void cancelMotionTimeoutAlarmLocked()
    {
        com.android.server.DeviceIdleController r0;
        android.app.AlarmManager$OnAlarmListener $r1;
        android.app.AlarmManager $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        $r2 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $r1 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mMotionTimeoutAlarmListener>;

        virtualinvoke $r2.<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>($r1);

        return;
    }

    static void dumpHelp(java.io.PrintWriter)
    {
        java.io.PrintWriter r0;

        r0 := @parameter0: java.io.PrintWriter;

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("Device idle controller (deviceidle) commands:");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  help");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Print this help text.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  step [light|deep]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Immediately step to next state, without waiting for alarm.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  force-idle [light|deep]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Force directly into idle mode, regardless of other device state.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  force-inactive");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Force to be inactive, ready to freely step idle states.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  unforce");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Resume normal functioning after force-idle or force-inactive.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  get [light|deep|force|screen|charging|network]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Retrieve the current given state.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  disable [light|deep|all]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Completely disable device idle mode.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  enable [light|deep|all]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Re-enable device idle mode after it had previously been disabled.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  enabled [light|deep|all]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Print 1 if device idle mode is currently enabled, else 0.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  whitelist");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Print currently whitelisted apps.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  whitelist [package ...]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Add (prefix with +) or remove (prefix with -) packages.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  sys-whitelist [package ...|reset]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Prefix the package with \'-\' to remove it from the system whitelist or \'+\' to put it back in the system whitelist.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Note that only packages that were earlier removed from the system whitelist can be added back.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    reset will reset the whitelist to the original state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Prints the system whitelist if no arguments are specified");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  except-idle-whitelist [package ...|reset]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Prefix the package with \'+\' to add it to whitelist or \'=\' to check if it is already whitelisted");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    [reset] will reset the whitelist to it\'s original state");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Note that unlike <whitelist> cmd, changes made using this won\'t be persisted across boots");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  tempwhitelist");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Print packages that are temporarily whitelisted.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  tempwhitelist [-u USER] [-d DURATION] [-r] [package]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Temporarily place package in whitelist for DURATION milliseconds.");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    If no DURATION is specified, 10 seconds is used");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    If [-r] option is used, then the package is removed from temp whitelist and any [-d] is ignored");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  motion");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Simulate a motion event to bring the device out of deep doze");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  pre-idle-factor [0|1|2]");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Set a new factor to idle time before step to idle(inactive_to and idle_after_inactive_to)");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("  reset-pre-idle-factor");

        virtualinvoke r0.<java.io.PrintWriter: void println(java.lang.String)>("    Reset factor to idle time to default");

        return;
    }

    private static java.io.File getSystemDir()
    {
        java.io.File $r0, $r1;

        $r0 = new java.io.File;

        $r1 = staticinvoke <android.os.Environment: java.io.File getDataDirectory()>();

        specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r1, "system");

        return $r0;
    }

    private boolean isStationaryLocked()
    {
        com.android.server.DeviceIdleController r0;
        long l0, $l1, $l2, $l3, $l4, $l5;
        com.android.server.DeviceIdleController$Injector $r1;
        com.android.server.DeviceIdleController$MotionListener $r2, $r3;
        boolean $z0, z1;
        com.android.server.DeviceIdleController$Constants $r4;
        byte $b6;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        l0 = virtualinvoke $r1.<com.android.server.DeviceIdleController$Injector: long getElapsedRealtime()>();

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MotionListener mMotionListener>;

        $z0 = $r2.<com.android.server.DeviceIdleController$MotionListener: boolean active>;

        if $z0 == 0 goto label1;

        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MotionListener mMotionListener>;

        $l2 = $r3.<com.android.server.DeviceIdleController$MotionListener: long activatedTimeElapsed>;

        $l1 = r0.<com.android.server.DeviceIdleController: long mLastMotionEventElapsed>;

        $l3 = staticinvoke <java.lang.Math: long max(long,long)>($l2, $l1);

        $l5 = l0 - $l3;

        $r4 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l4 = $r4.<com.android.server.DeviceIdleController$Constants: long MOTION_INACTIVE_TIMEOUT>;

        $b6 = $l5 cmp $l4;

        if $b6 < 0 goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    private boolean isUpcomingAlarmClock()
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleController$Injector $r1;
        long $l0, $l1, $l2, $l3;
        com.android.server.DeviceIdleController$Constants $r2;
        android.app.AlarmManager $r3;
        byte $b4;
        boolean z0;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $l0 = virtualinvoke $r1.<com.android.server.DeviceIdleController$Injector: long getElapsedRealtime()>();

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l1 = $r2.<com.android.server.DeviceIdleController$Constants: long MIN_TIME_TO_ALARM>;

        $l2 = $l0 + $l1;

        $r3 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $l3 = virtualinvoke $r3.<android.app.AlarmManager: long getNextWakeFromIdleTime()>();

        $b4 = $l2 cmp $l3;

        if $b4 < 0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    private static boolean lambda$stepIdleStateLocked$3(com.android.server.deviceidle.DeviceIdleConstraintTracker)
    {
        com.android.server.deviceidle.DeviceIdleConstraintTracker r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.deviceidle.DeviceIdleConstraintTracker;

        $z0 = r0.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean active>;

        return $z0;
    }

    private static java.lang.String lambda$stepIdleStateLocked$4(com.android.server.deviceidle.DeviceIdleConstraintTracker)
    {
        com.android.server.deviceidle.DeviceIdleConstraintTracker r0;
        java.lang.String $r1;

        r0 := @parameter0: com.android.server.deviceidle.DeviceIdleConstraintTracker;

        $r1 = r0.<com.android.server.deviceidle.DeviceIdleConstraintTracker: java.lang.String name>;

        return $r1;
    }

    static java.lang.String lightStateToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        if i0 == 0 goto label7;

        if i0 == 1 goto label6;

        if i0 == 3 goto label5;

        if i0 == 4 goto label4;

        if i0 == 5 goto label3;

        if i0 == 6 goto label2;

        if i0 == 7 goto label1;

        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label1:
        return "OVERRIDE";

     label2:
        return "IDLE_MAINTENANCE";

     label3:
        return "WAITING_FOR_NETWORK";

     label4:
        return "IDLE";

     label5:
        return "PRE_IDLE";

     label6:
        return "INACTIVE";

     label7:
        return "ACTIVE";
    }

    private void maybeDoImmediateMaintenance()
    {
        com.android.server.DeviceIdleController r0;
        int $i0;
        long $l1, $l2, $l3, $l4;
        com.android.server.DeviceIdleController$Constants $r2;
        byte $b5;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        $i0 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i0 != 5 goto label2;

        $l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l2 = r0.<com.android.server.DeviceIdleController: long mIdleStartTime>;

        $l4 = $l1 - $l2;

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l3 = $r2.<com.android.server.DeviceIdleController$Constants: long IDLE_TIMEOUT>;

        $b5 = $l4 cmp $l3;

        if $b5 <= 0 goto label2;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleAlarmLocked(long,boolean)>(0L, 0);

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    private void maybeStopMonitoringMotionLocked()
    {
        com.android.server.DeviceIdleController r0;
        android.hardware.Sensor $r1;
        android.util.ArraySet $r2;
        int $i0;
        com.android.server.DeviceIdleController$MotionListener $r3, $r4;
        boolean $z0;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.hardware.Sensor mMotionSensor>;

        if $r1 == null goto label2;

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners>;

        $i0 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        if $i0 != 0 goto label2;

        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MotionListener mMotionListener>;

        $z0 = $r3.<com.android.server.DeviceIdleController$MotionListener: boolean active>;

        if $z0 == 0 goto label1;

        $r4 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MotionListener mMotionListener>;

        virtualinvoke $r4.<com.android.server.DeviceIdleController$MotionListener: void unregisterLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void cancelMotionTimeoutAlarmLocked()>();

     label1:
        specialinvoke r0.<com.android.server.DeviceIdleController: void cancelMotionRegistrationAlarmLocked()>();

     label2:
        return;
    }

    private void moveToStateLocked(int, java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        int i0;
        java.lang.String r1;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        r0.<com.android.server.DeviceIdleController: int mState> = i0;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdle(int,java.lang.String)>(i0, r1);

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateActiveConstraintsLocked()>();

        return;
    }

    private void onAppRemovedFromTempWhitelistLocked(int, java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        int i0;
        com.android.server.DeviceIdleController$MyHandler $r1;
        android.os.Message $r2;
        com.android.internal.app.IBatteryStats $r3;
        android.os.RemoteException $r4;
        java.lang.String r5;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateTempWhitelistAppIdsLocked(int,boolean)>(i0, 0);

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        $r2 = virtualinvoke $r1.<com.android.server.DeviceIdleController$MyHandler: android.os.Message obtainMessage(int,int,int)>(9, i0, 0);

        virtualinvoke $r2.<android.os.Message: void sendToTarget()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void reportTempWhitelistChangedLocked()>();

     label1:
        $r3 = r0.<com.android.server.DeviceIdleController: com.android.internal.app.IBatteryStats mBatteryStats>;

        interfaceinvoke $r3.<com.android.internal.app.IBatteryStats: void noteEvent(int,java.lang.String,int)>(16401, r5, i0);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.os.RemoteException from label1 to label2 with label3;
    }

    private void onConstraintStateChangedLocked(com.android.server.deviceidle.IDeviceIdleConstraint, boolean)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0, $z1, $z2, $z3;
        int i0, $i2, i8;
        long l1, $l4;
        android.util.ArrayMap $r1;
        java.lang.Object $r2;
        byte $b3, $b5, b7;
        java.lang.StringBuilder $r3, $r8;
        java.lang.String $r5, $r7, $r12;
        com.android.server.deviceidle.IDeviceIdleConstraint r13;
        com.android.server.deviceidle.DeviceIdleConstraintTracker r14;

        r0 := @this: com.android.server.DeviceIdleController;

        r13 := @parameter0: com.android.server.deviceidle.IDeviceIdleConstraint;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r13);

        r14 = (com.android.server.deviceidle.DeviceIdleConstraintTracker) $r2;

        if r14 != null goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("device-idle constraint ");

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has not been registered.");

        $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DeviceIdleController", $r12);

        return;

     label1:
        $z1 = r14.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean active>;

        if z0 == $z1 goto label6;

        $z2 = r14.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean monitoring>;

        if $z2 == 0 goto label6;

        r14.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean active> = z0;

        i0 = r0.<com.android.server.DeviceIdleController: int mNumBlockingConstraints>;

        $z3 = r14.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean active>;

        if $z3 == 0 goto label2;

        b7 = 1;

        goto label3;

     label2:
        b7 = -1;

     label3:
        i8 = i0 + b7;

        r0.<com.android.server.DeviceIdleController: int mNumBlockingConstraints> = i8;

        if i8 != 0 goto label6;

        $i2 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i2 != 0 goto label4;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeInactiveIfAppropriateLocked()>();

        goto label6;

     label4:
        l1 = r0.<com.android.server.DeviceIdleController: long mNextAlarmTime>;

        $b3 = l1 cmp 0L;

        if $b3 == 0 goto label5;

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $b5 = l1 cmp $l4;

        if $b5 >= 0 goto label6;

     label5:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s:");

        $r5 = r14.<com.android.server.deviceidle.DeviceIdleConstraintTracker: java.lang.String name>;

        virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepIdleStateLocked(java.lang.String)>($r7);

     label6:
        return;
    }

    private void passWhiteListsToForceAppStandbyTrackerLocked()
    {
        com.android.server.DeviceIdleController r0;
        int[] $r1, $r2, $r3;
        com.android.server.AppStateTracker $r4;

        r0 := @this: com.android.server.DeviceIdleController;

        $r4 = r0.<com.android.server.DeviceIdleController: com.android.server.AppStateTracker mAppStateTracker>;

        $r3 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistExceptIdleAppIdArray>;

        $r2 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistUserAppIdArray>;

        $r1 = r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray>;

        virtualinvoke $r4.<com.android.server.AppStateTracker: void setPowerSaveWhitelistAppIds(int[],int[],int[])>($r3, $r2, $r1);

        return;
    }

    private void postResetPreIdleTimeoutFactor()
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleController$MyHandler $r1;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r1.<com.android.server.DeviceIdleController$MyHandler: boolean sendEmptyMessage(int)>(12);

        return;
    }

    private void postStationaryStatus(com.android.server.DeviceIdleInternal$StationaryListener)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleInternal$StationaryListener r1;
        com.android.server.DeviceIdleController$MyHandler $r2;
        android.os.Message $r3;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: com.android.server.DeviceIdleInternal$StationaryListener;

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        $r3 = virtualinvoke $r2.<com.android.server.DeviceIdleController$MyHandler: android.os.Message obtainMessage(int,java.lang.Object)>(7, r1);

        virtualinvoke $r3.<android.os.Message: void sendToTarget()>();

        return;
    }

    private void postStationaryStatusUpdated()
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleController$MyHandler $r1;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r1.<com.android.server.DeviceIdleController$MyHandler: boolean sendEmptyMessage(int)>(7);

        return;
    }

    private void postTempActiveTimeoutMessage(int, long)
    {
        com.android.server.DeviceIdleController r0;
        int i0;
        long l1;
        com.android.server.DeviceIdleController$MyHandler r1;
        android.os.Message $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        l1 := @parameter1: long;

        r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        $r2 = virtualinvoke r1.<com.android.server.DeviceIdleController$MyHandler: android.os.Message obtainMessage(int,int,int)>(6, i0, 0);

        virtualinvoke r1.<com.android.server.DeviceIdleController$MyHandler: boolean sendMessageDelayed(android.os.Message,long)>($r2, l1);

        return;
    }

    private void postUpdatePreIdleFactor()
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleController$MyHandler $r1;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r1.<com.android.server.DeviceIdleController$MyHandler: boolean sendEmptyMessage(int)>(11);

        return;
    }

    private void readConfigFileLocked(org.xmlpull.v1.XmlPullParser)
    {
        com.android.server.DeviceIdleController r0;
        int i0, i1, $i2, $i3, $i5, i12, i13;
        boolean z0, $z1, $z2;
        android.content.Context $r1;
        android.util.ArrayMap $r2, $r6, $r7, $r8;
        java.lang.String $r3, $r13, $r15, $r20, $r26, $r31, $r36, $r41, $r46, r49, r51, r52;
        java.lang.Integer $r4, $r10;
        java.lang.Object $r9;
        java.lang.Throwable $r16, $r22, $r27, $r42;
        java.lang.StringBuilder $r17, $r23, $r28, $r33, $r38, $r43, r50;
        android.content.pm.PackageManager$NameNotFoundException $r21;
        java.lang.IndexOutOfBoundsException $r32;
        java.lang.NullPointerException $r37;
        org.xmlpull.v1.XmlPullParser r47;
        android.content.pm.PackageManager r48;
        byte b14;
        android.content.pm.ApplicationInfo r53;
        java.lang.IllegalStateException r55;

        r0 := @this: com.android.server.DeviceIdleController;

        r47 := @parameter0: org.xmlpull.v1.XmlPullParser;

        $r1 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        r48 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

     label01:
        i12 = interfaceinvoke r47.<org.xmlpull.v1.XmlPullParser: int next()>();

     label02:
        if i12 == 2 goto label03;

        if i12 == 1 goto label03;

        goto label01;

     label03:
        if i12 != 2 goto label29;

     label04:
        i0 = interfaceinvoke r47.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

     label05:
        i13 = interfaceinvoke r47.<org.xmlpull.v1.XmlPullParser: int next()>();

     label06:
        if i13 == 1 goto label36;

        if i13 != 3 goto label08;

     label07:
        $i5 = interfaceinvoke r47.<org.xmlpull.v1.XmlPullParser: int getDepth()>();

        if $i5 <= i0 goto label36;

     label08:
        if i13 == 3 goto label05;

        if i13 != 4 goto label09;

        goto label05;

     label09:
        r49 = interfaceinvoke r47.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

     label10:
        b14 = -1;

     label11:
        i1 = virtualinvoke r49.<java.lang.String: int hashCode()>();

     label12:
        if i1 == 3797 goto label16;

        if i1 == 111376009 goto label14;

     label13:
        goto label18;

     label14:
        $z2 = virtualinvoke r49.<java.lang.String: boolean equals(java.lang.Object)>("un-wl");

        if $z2 == 0 goto label13;

     label15:
        b14 = 1;

        goto label18;

     label16:
        z0 = virtualinvoke r49.<java.lang.String: boolean equals(java.lang.Object)>("wl");

     label17:
        if z0 == 0 goto label13;

        b14 = 0;

     label18:
        if b14 == 0 goto label23;

        if b14 == 1 goto label21;

     label19:
        r50 = new java.lang.StringBuilder;

        specialinvoke r50.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown element under <config>: ");

        $r13 = interfaceinvoke r47.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>();

        virtualinvoke r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        $r15 = virtualinvoke r50.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DeviceIdleController", $r15);

        staticinvoke <com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>(r47);

     label20:
        goto label28;

     label21:
        r51 = interfaceinvoke r47.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "n");

        $r6 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $z1 = virtualinvoke $r6.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r51);

        if $z1 == 0 goto label28;

        $r8 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        $r7 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r9 = virtualinvoke $r7.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r51);

        $r10 = (java.lang.Integer) $r9;

        virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r51, $r10);

     label22:
        goto label28;

     label23:
        r52 = interfaceinvoke r47.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, "n");

     label24:
        if r52 == null goto label28;

     label25:
        r53 = virtualinvoke r48.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r52, 4194304);

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r3 = r53.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $i2 = r53.<android.content.pm.ApplicationInfo: int uid>;

        $i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i2);

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4);

     label26:
        goto label28;

     label27:
        $r21 := @caughtexception;

     label28:
        goto label05;

     label29:
        r55 = new java.lang.IllegalStateException;

        specialinvoke r55.<java.lang.IllegalStateException: void <init>(java.lang.String)>("no start tag found");

        throw r55;

     label30:
        $r32 := @caughtexception;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing config ");

        virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r36 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DeviceIdleController", $r36);

        goto label36;

     label31:
        $r42 := @caughtexception;

        $r43 = new java.lang.StringBuilder;

        specialinvoke $r43.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing config ");

        virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42);

        $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DeviceIdleController", $r46);

        goto label36;

     label32:
        $r22 := @caughtexception;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing config ");

        virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DeviceIdleController", $r26);

        goto label36;

     label33:
        $r27 := @caughtexception;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing config ");

        virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r27);

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DeviceIdleController", $r31);

        goto label36;

     label34:
        $r37 := @caughtexception;

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing config ");

        virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r41 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DeviceIdleController", $r41);

        goto label36;

     label35:
        $r16 := @caughtexception;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed parsing config ");

        virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DeviceIdleController", $r20);

     label36:
        return;

        catch java.lang.IllegalStateException from label01 to label02 with label35;
        catch java.lang.NullPointerException from label01 to label02 with label34;
        catch java.lang.NumberFormatException from label01 to label02 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label01 to label02 with label32;
        catch java.io.IOException from label01 to label02 with label31;
        catch java.lang.IndexOutOfBoundsException from label01 to label02 with label30;
        catch java.lang.IllegalStateException from label04 to label05 with label35;
        catch java.lang.NullPointerException from label04 to label05 with label34;
        catch java.lang.NumberFormatException from label04 to label05 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label04 to label05 with label32;
        catch java.io.IOException from label04 to label05 with label31;
        catch java.lang.IndexOutOfBoundsException from label04 to label05 with label30;
        catch java.lang.IllegalStateException from label05 to label06 with label35;
        catch java.lang.NullPointerException from label05 to label06 with label34;
        catch java.lang.NumberFormatException from label05 to label06 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label05 to label06 with label32;
        catch java.io.IOException from label05 to label06 with label31;
        catch java.lang.IndexOutOfBoundsException from label05 to label06 with label30;
        catch java.lang.IllegalStateException from label07 to label08 with label35;
        catch java.lang.NullPointerException from label07 to label08 with label34;
        catch java.lang.NumberFormatException from label07 to label08 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label07 to label08 with label32;
        catch java.io.IOException from label07 to label08 with label31;
        catch java.lang.IndexOutOfBoundsException from label07 to label08 with label30;
        catch java.lang.IllegalStateException from label09 to label10 with label35;
        catch java.lang.NullPointerException from label09 to label10 with label34;
        catch java.lang.NumberFormatException from label09 to label10 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label09 to label10 with label32;
        catch java.io.IOException from label09 to label10 with label31;
        catch java.lang.IndexOutOfBoundsException from label09 to label10 with label30;
        catch java.lang.IllegalStateException from label11 to label12 with label35;
        catch java.lang.NullPointerException from label11 to label12 with label34;
        catch java.lang.NumberFormatException from label11 to label12 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label11 to label12 with label32;
        catch java.io.IOException from label11 to label12 with label31;
        catch java.lang.IndexOutOfBoundsException from label11 to label12 with label30;
        catch java.lang.IllegalStateException from label14 to label15 with label35;
        catch java.lang.NullPointerException from label14 to label15 with label34;
        catch java.lang.NumberFormatException from label14 to label15 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label14 to label15 with label32;
        catch java.io.IOException from label14 to label15 with label31;
        catch java.lang.IndexOutOfBoundsException from label14 to label15 with label30;
        catch java.lang.IllegalStateException from label16 to label17 with label35;
        catch java.lang.NullPointerException from label16 to label17 with label34;
        catch java.lang.NumberFormatException from label16 to label17 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label16 to label17 with label32;
        catch java.io.IOException from label16 to label17 with label31;
        catch java.lang.IndexOutOfBoundsException from label16 to label17 with label30;
        catch java.lang.IllegalStateException from label19 to label20 with label35;
        catch java.lang.NullPointerException from label19 to label20 with label34;
        catch java.lang.NumberFormatException from label19 to label20 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label19 to label20 with label32;
        catch java.io.IOException from label19 to label20 with label31;
        catch java.lang.IndexOutOfBoundsException from label19 to label20 with label30;
        catch java.lang.IllegalStateException from label21 to label22 with label35;
        catch java.lang.NullPointerException from label21 to label22 with label34;
        catch java.lang.NumberFormatException from label21 to label22 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label21 to label22 with label32;
        catch java.io.IOException from label21 to label22 with label31;
        catch java.lang.IndexOutOfBoundsException from label21 to label22 with label30;
        catch java.lang.IllegalStateException from label23 to label24 with label35;
        catch java.lang.NullPointerException from label23 to label24 with label34;
        catch java.lang.NumberFormatException from label23 to label24 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label23 to label24 with label32;
        catch java.io.IOException from label23 to label24 with label31;
        catch java.lang.IndexOutOfBoundsException from label23 to label24 with label30;
        catch android.content.pm.PackageManager$NameNotFoundException from label25 to label26 with label27;
        catch java.lang.IllegalStateException from label25 to label26 with label35;
        catch java.lang.NullPointerException from label25 to label26 with label34;
        catch java.lang.NumberFormatException from label25 to label26 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label25 to label26 with label32;
        catch java.io.IOException from label25 to label26 with label31;
        catch java.lang.IndexOutOfBoundsException from label25 to label26 with label30;
        catch java.lang.IllegalStateException from label29 to label30 with label35;
        catch java.lang.NullPointerException from label29 to label30 with label34;
        catch java.lang.NumberFormatException from label29 to label30 with label33;
        catch org.xmlpull.v1.XmlPullParserException from label29 to label30 with label32;
        catch java.io.IOException from label29 to label30 with label31;
        catch java.lang.IndexOutOfBoundsException from label29 to label30 with label30;
    }

    private void registerDeviceIdleConstraintInternal(com.android.server.deviceidle.IDeviceIdleConstraint, java.lang.String, int)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.deviceidle.DeviceIdleConstraintTracker r1;
        android.util.ArrayMap $r2, $r3;
        boolean $z0;
        java.lang.String $r8, $r12, r15;
        java.lang.StringBuilder $r9, r17;
        java.lang.Throwable $r13;
        com.android.server.deviceidle.IDeviceIdleConstraint r14;
        int i2;
        byte b3;

        r0 := @this: com.android.server.DeviceIdleController;

        r14 := @parameter0: com.android.server.deviceidle.IDeviceIdleConstraint;

        r15 := @parameter1: java.lang.String;

        i2 := @parameter2: int;

        if i2 == 0 goto label02;

        if i2 == 1 goto label01;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Registering device-idle constraint with invalid type: ");

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DeviceIdleController", $r12);

        return;

     label01:
        b3 = 3;

        goto label03;

     label02:
        b3 = 0;

     label03:
        entermonitor r0;

     label04:
        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        $z0 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r14);

        if $z0 == 0 goto label06;

        r17 = new java.lang.StringBuilder;

        specialinvoke r17.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Re-registering device-idle constraint: ");

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        virtualinvoke r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r8 = virtualinvoke r17.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int e(java.lang.String,java.lang.String)>("DeviceIdleController", $r8);

        exitmonitor r0;

     label05:
        return;

     label06:
        r1 = new com.android.server.deviceidle.DeviceIdleConstraintTracker;

        specialinvoke r1.<com.android.server.deviceidle.DeviceIdleConstraintTracker: void <init>(java.lang.String,int)>(r15, b3);

        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r1);

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateActiveConstraintsLocked()>();

        exitmonitor r0;

     label07:
        return;

     label08:
        $r13 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r13;

        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    private void removePowerSaveTempWhitelistAppDirectInternal(int)
    {
        com.android.server.DeviceIdleController r0;
        int i0, i1;
        android.util.SparseArray $r1, $r2, $r6;
        java.lang.Object $r3, $r5;
        android.util.Pair $r4;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        i1 = virtualinvoke $r1.<android.util.SparseArray: int indexOfKey(int)>(i0);

     label2:
        if i1 >= 0 goto label5;

     label3:
        exitmonitor r0;

     label4:
        return;

     label5:
        $r2 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        $r3 = virtualinvoke $r2.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1);

        $r4 = (android.util.Pair) $r3;

        $r5 = $r4.<android.util.Pair: java.lang.Object second>;

        r8 = (java.lang.String) $r5;

        $r6 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        virtualinvoke $r6.<android.util.SparseArray: void removeAt(int)>(i1);

        specialinvoke r0.<com.android.server.DeviceIdleController: void onAppRemovedFromTempWhitelistLocked(int,java.lang.String)>(i0, r8);

        exitmonitor r0;

     label6:
        return;

     label7:
        $r7 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    private void removePowerSaveTempWhitelistAppInternal(java.lang.String, int)
    {
        com.android.server.DeviceIdleController r0;
        int i0, $i1, $i2;
        android.content.Context $r1;
        android.content.pm.PackageManager $r2;
        android.content.pm.PackageManager$NameNotFoundException $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.DeviceIdleController;

        r4 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

     label1:
        $r1 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i1 = virtualinvoke $r2.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r4, i0);

        $i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i1);

        specialinvoke r0.<com.android.server.DeviceIdleController: void removePowerSaveTempWhitelistAppDirectInternal(int)>($i2);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

     label4:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    private void reportPowerSaveWhitelistChangedLocked()
    {
        com.android.server.DeviceIdleController r0;
        android.content.Intent $r2;
        android.content.Context $r4;
        android.os.UserHandle $r5;

        r0 := @this: com.android.server.DeviceIdleController;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.os.action.POWER_SAVE_WHITELIST_CHANGED");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        $r4 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r5 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r2, $r5);

        return;
    }

    private void reportTempWhitelistChangedLocked()
    {
        com.android.server.DeviceIdleController r0;
        android.content.Intent $r2;
        android.content.Context $r4;
        android.os.UserHandle $r5;

        r0 := @this: com.android.server.DeviceIdleController;

        $r2 = new android.content.Intent;

        specialinvoke $r2.<android.content.Intent: void <init>(java.lang.String)>("android.os.action.POWER_SAVE_TEMP_WHITELIST_CHANGED");

        virtualinvoke $r2.<android.content.Intent: android.content.Intent addFlags(int)>(1073741824);

        $r4 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r5 = <android.os.UserHandle: android.os.UserHandle SYSTEM>;

        virtualinvoke $r4.<android.content.Context: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>($r2, $r5);

        return;
    }

    private void resetIdleManagementLocked()
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.AnyMotionDetector $r1;

        r0 := @this: com.android.server.DeviceIdleController;

        r0.<com.android.server.DeviceIdleController: long mNextIdlePendingDelay> = 0L;

        r0.<com.android.server.DeviceIdleController: long mNextIdleDelay> = 0L;

        r0.<com.android.server.DeviceIdleController: long mIdleStartTime> = 0L;

        r0.<com.android.server.DeviceIdleController: boolean mQuickDozeActivatedWhileIdling> = 0;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelAlarmLocked()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelSensingTimeoutAlarmLocked()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelLocatingLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void maybeStopMonitoringMotionLocked()>();

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.AnyMotionDetector mAnyMotionDetector>;

        virtualinvoke $r1.<com.android.server.AnyMotionDetector: void stop()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateActiveConstraintsLocked()>();

        return;
    }

    private void resetLightIdleManagementLocked()
    {
        com.android.server.DeviceIdleController r0;

        r0 := @this: com.android.server.DeviceIdleController;

        r0.<com.android.server.DeviceIdleController: long mNextLightIdleDelay> = 0L;

        r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget> = 0L;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelLightAlarmLocked()>();

        return;
    }

    private void scheduleMotionRegistrationAlarmLocked()
    {
        com.android.server.DeviceIdleController r0;
        long l0, l1, $l2, $l3;
        com.android.server.DeviceIdleController$Injector $r1;
        com.android.server.DeviceIdleController$Constants $r2;
        com.android.server.DeviceIdleController$MyHandler $r3;
        android.app.AlarmManager$OnAlarmListener $r4;
        android.app.AlarmManager $r5;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        l0 = virtualinvoke $r1.<com.android.server.DeviceIdleController$Injector: long getElapsedRealtime()>();

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l2 = $r2.<com.android.server.DeviceIdleController$Constants: long MOTION_INACTIVE_TIMEOUT>;

        l1 = $l2 / 2L;

        $r5 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $l3 = l0 + l1;

        $r4 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mMotionRegistrationAlarmListener>;

        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r5.<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>(2, $l3, "DeviceIdleController.motion_registration", $r4, $r3);

        return;
    }

    private void scheduleMotionTimeoutAlarmLocked()
    {
        com.android.server.DeviceIdleController r0;
        long l0, l1, $l2;
        com.android.server.DeviceIdleController$Injector $r1;
        com.android.server.DeviceIdleController$Constants $r2;
        com.android.server.DeviceIdleController$MyHandler $r3;
        android.app.AlarmManager$OnAlarmListener $r4;
        android.app.AlarmManager $r5;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        l0 = virtualinvoke $r1.<com.android.server.DeviceIdleController$Injector: long getElapsedRealtime()>();

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        l1 = $r2.<com.android.server.DeviceIdleController$Constants: long MOTION_INACTIVE_TIMEOUT>;

        $r5 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $l2 = l0 + l1;

        $r4 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mMotionTimeoutAlarmListener>;

        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r5.<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>(2, $l2, "DeviceIdleController.motion", $r4, $r3);

        return;
    }

    private void setConstraintMonitoringLocked(com.android.server.deviceidle.IDeviceIdleConstraint, boolean)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.deviceidle.IDeviceIdleConstraint r1;
        boolean z0, $z1;
        com.android.server.deviceidle.DeviceIdleConstraintTracker r2;
        android.util.ArrayMap $r3;
        java.lang.Object $r4;
        com.android.server.DeviceIdleController$MyHandler $r5;
        android.os.Message $r6;
        int i0;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: com.android.server.deviceidle.IDeviceIdleConstraint;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.android.server.deviceidle.DeviceIdleConstraintTracker) $r4;

        $z1 = r2.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean monitoring>;

        if $z1 == z0 goto label1;

        r2.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean monitoring> = z0;

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateActiveConstraintsLocked()>();

        $r5 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        i0 = (int) z0;

        $r6 = virtualinvoke $r5.<com.android.server.DeviceIdleController$MyHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(10, i0, -1, r1);

        virtualinvoke $r6.<android.os.Message: void sendToTarget()>();

     label1:
        return;
    }

    private boolean shouldUseIdleTimeoutFactorLocked()
    {
        com.android.server.DeviceIdleController r0;
        int $i0;

        r0 := @this: com.android.server.DeviceIdleController;

        $i0 = r0.<com.android.server.DeviceIdleController: int mActiveReason>;

        if $i0 != 1 goto label1;

        return 0;

     label1:
        return 1;
    }

    static java.lang.String stateToString(int)
    {
        int i0;
        java.lang.String $r0;

        i0 := @parameter0: int;

        tableswitch(i0)
        {
            case 0: goto label9;
            case 1: goto label8;
            case 2: goto label7;
            case 3: goto label6;
            case 4: goto label5;
            case 5: goto label4;
            case 6: goto label3;
            case 7: goto label2;
            default: goto label1;
        };

     label1:
        $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        return $r0;

     label2:
        return "QUICK_DOZE_DELAY";

     label3:
        return "IDLE_MAINTENANCE";

     label4:
        return "IDLE";

     label5:
        return "LOCATING";

     label6:
        return "SENSING";

     label7:
        return "IDLE_PENDING";

     label8:
        return "INACTIVE";

     label9:
        return "ACTIVE";
    }

    private void unregisterDeviceIdleConstraintInternal(com.android.server.deviceidle.IDeviceIdleConstraint)
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r1;
        java.lang.Throwable $r3;
        com.android.server.deviceidle.IDeviceIdleConstraint r4;

        r0 := @this: com.android.server.DeviceIdleController;

        r4 := @parameter0: com.android.server.deviceidle.IDeviceIdleConstraint;

        entermonitor r0;

     label1:
        specialinvoke r0.<com.android.server.DeviceIdleController: void onConstraintStateChangedLocked(com.android.server.deviceidle.IDeviceIdleConstraint,boolean)>(r4, 0);

        specialinvoke r0.<com.android.server.DeviceIdleController: void setConstraintMonitoringLocked(com.android.server.deviceidle.IDeviceIdleConstraint,boolean)>(r4, 0);

        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r4);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void unregisterStationaryListener(com.android.server.DeviceIdleInternal$StationaryListener)
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArraySet $r1, $r2;
        boolean $z0, $z1;
        int $i0, $i1, $i2;
        java.lang.Throwable $r3;
        com.android.server.DeviceIdleInternal$StationaryListener r4;

        r0 := @this: com.android.server.DeviceIdleController;

        r4 := @parameter0: com.android.server.DeviceIdleInternal$StationaryListener;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners>;

        $z0 = virtualinvoke $r1.<android.util.ArraySet: boolean remove(java.lang.Object)>(r4);

        if $z0 == 0 goto label3;

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners>;

        $i0 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        if $i0 != 0 goto label3;

        $i1 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i1 == 0 goto label2;

        $i2 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i2 == 1 goto label2;

        $z1 = r0.<com.android.server.DeviceIdleController: boolean mQuickDozeActivated>;

        if $z1 == 0 goto label3;

     label2:
        specialinvoke r0.<com.android.server.DeviceIdleController: void maybeStopMonitoringMotionLocked()>();

     label3:
        exitmonitor r0;

     label4:
        return;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label2 to label3 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    private void updateActiveConstraintsLocked()
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.deviceidle.IDeviceIdleConstraint r1;
        com.android.server.deviceidle.DeviceIdleConstraintTracker r2;
        android.util.ArrayMap $r3, $r4, $r6;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.lang.Object $r5, $r7;
        boolean $z0, $z1, $z2, z3;

        r0 := @this: com.android.server.DeviceIdleController;

        r0.<com.android.server.DeviceIdleController: int mNumBlockingConstraints> = 0;

        i5 = 0;

     label1:
        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        $i0 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        if i5 >= $i0 goto label6;

        $r4 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        $r5 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i5);

        r1 = (com.android.server.deviceidle.IDeviceIdleConstraint) $r5;

        $r6 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        $r7 = virtualinvoke $r6.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i5);

        r2 = (com.android.server.deviceidle.DeviceIdleConstraintTracker) $r7;

        $i2 = r2.<com.android.server.deviceidle.DeviceIdleConstraintTracker: int minState>;

        $i1 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i2 != $i1 goto label2;

        z3 = 1;

        goto label3;

     label2:
        z3 = 0;

     label3:
        $z0 = r2.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean monitoring>;

        if z3 == $z0 goto label4;

        specialinvoke r0.<com.android.server.DeviceIdleController: void setConstraintMonitoringLocked(com.android.server.deviceidle.IDeviceIdleConstraint,boolean)>(r1, z3);

        r2.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean active> = z3;

     label4:
        $z1 = r2.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean monitoring>;

        if $z1 == 0 goto label5;

        $z2 = r2.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean active>;

        if $z2 == 0 goto label5;

        $i3 = r0.<com.android.server.DeviceIdleController: int mNumBlockingConstraints>;

        $i4 = $i3 + 1;

        r0.<com.android.server.DeviceIdleController: int mNumBlockingConstraints> = $i4;

     label5:
        i5 = i5 + 1;

        goto label1;

     label6:
        return;
    }

    private void updatePreIdleFactor()
    {
        com.android.server.DeviceIdleController r0;
        long l0, l1, $l3, $l5, $l6, $l8, $l9;
        boolean $z0;
        int $i2, $i11;
        byte $b4, $b7, $b10;
        float $f0, $f1, $f2, $f3, $f4;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label01:
        $z0 = specialinvoke r0.<com.android.server.DeviceIdleController: boolean shouldUseIdleTimeoutFactorLocked()>();

        if $z0 != 0 goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        $i2 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i2 == 1 goto label04;

        $i11 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i11 != 2 goto label13;

     label04:
        $l3 = r0.<com.android.server.DeviceIdleController: long mNextAlarmTime>;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label06;

        exitmonitor r0;

     label05:
        return;

     label06:
        $l5 = r0.<com.android.server.DeviceIdleController: long mNextAlarmTime>;

        $l6 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l0 = $l5 - $l6;

     label07:
        $b7 = l0 cmp 60000L;

        if $b7 >= 0 goto label10;

     label08:
        exitmonitor r0;

     label09:
        return;

     label10:
        $f1 = (float) l0;

        $f0 = r0.<com.android.server.DeviceIdleController: float mLastPreIdleFactor>;

        $f3 = $f1 / $f0;

        $f2 = r0.<com.android.server.DeviceIdleController: float mPreIdleFactor>;

        $f4 = $f3 * $f2;

        l1 = (long) $f4;

        $l8 = l0 - l1;

        $l9 = staticinvoke <java.lang.Math: long abs(long)>($l8);

        $b10 = $l9 cmp 60000L;

        if $b10 >= 0 goto label12;

        exitmonitor r0;

     label11:
        return;

     label12:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleAlarmLocked(long,boolean)>(l1, 0);

     label13:
        exitmonitor r0;

     label14:
        return;

     label15:
        $r2 := @caughtexception;

     label16:
        exitmonitor r0;

     label17:
        throw $r2;

        catch java.lang.Throwable from label01 to label02 with label15;
        catch java.lang.Throwable from label03 to label04 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label06 to label07 with label15;
        catch java.lang.Throwable from label08 to label09 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    private void updateTempWhitelistAppIdsLocked(int, boolean)
    {
        com.android.server.DeviceIdleController r0;
        int i0, i1, $i2, $i3, i4;
        boolean z0;
        android.util.SparseArray $r1, $r5;
        int[] $r2, $r3, $r4, $r6, $r7;
        android.app.ActivityManagerInternal r8;
        android.os.PowerManagerInternal r9;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        z0 := @parameter1: boolean;

        $r1 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        i1 = virtualinvoke $r1.<android.util.SparseArray: int size()>();

        $r2 = r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray>;

        $i2 = lengthof $r2;

        if $i2 == i1 goto label1;

        $r7 = newarray (int)[i1];

        r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray> = $r7;

     label1:
        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        $r6 = r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray>;

        $r5 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        $i3 = virtualinvoke $r5.<android.util.SparseArray: int keyAt(int)>(i4);

        $r6[i4] = $i3;

        i4 = i4 + 1;

        goto label2;

     label3:
        r8 = r0.<com.android.server.DeviceIdleController: android.app.ActivityManagerInternal mLocalActivityManager>;

        if r8 == null goto label4;

        $r4 = r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray>;

        virtualinvoke r8.<android.app.ActivityManagerInternal: void updateDeviceIdleTempWhitelist(int[],int,boolean)>($r4, i0, z0);

     label4:
        r9 = r0.<com.android.server.DeviceIdleController: android.os.PowerManagerInternal mLocalPowerManager>;

        if r9 == null goto label5;

        $r3 = r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray>;

        virtualinvoke r9.<android.os.PowerManagerInternal: void setDeviceIdleTempWhitelist(int[])>($r3);

     label5:
        specialinvoke r0.<com.android.server.DeviceIdleController: void passWhiteListsToForceAppStandbyTrackerLocked()>();

        return;
    }

    private void updateWhitelistAppIdsLocked()
    {
        com.android.server.DeviceIdleController r0;
        android.util.SparseBooleanArray $r1, $r5, $r9;
        android.util.ArrayMap $r2, $r3, $r6, $r7, $r10;
        int[] $r4, $r8, $r11, $r12, $r13, $r14;
        android.app.ActivityManagerInternal r15;
        android.os.PowerManagerInternal r16;

        r0 := @this: com.android.server.DeviceIdleController;

        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r1 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        $r4 = staticinvoke <com.android.server.DeviceIdleController: int[] buildAppIdArray(android.util.ArrayMap,android.util.ArrayMap,android.util.SparseBooleanArray)>($r3, $r2, $r1);

        r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistExceptIdleAppIdArray> = $r4;

        $r7 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r6 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r5 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistAllAppIds>;

        $r8 = staticinvoke <com.android.server.DeviceIdleController: int[] buildAppIdArray(android.util.ArrayMap,android.util.ArrayMap,android.util.SparseBooleanArray)>($r7, $r6, $r5);

        r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistAllAppIdArray> = $r8;

        $r10 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r9 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistUserAppIds>;

        $r11 = staticinvoke <com.android.server.DeviceIdleController: int[] buildAppIdArray(android.util.ArrayMap,android.util.ArrayMap,android.util.SparseBooleanArray)>(null, $r10, $r9);

        r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistUserAppIdArray> = $r11;

        r15 = r0.<com.android.server.DeviceIdleController: android.app.ActivityManagerInternal mLocalActivityManager>;

        if r15 == null goto label1;

        $r14 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistAllAppIdArray>;

        $r13 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistExceptIdleAppIdArray>;

        virtualinvoke r15.<android.app.ActivityManagerInternal: void setDeviceIdleWhitelist(int[],int[])>($r14, $r13);

     label1:
        r16 = r0.<com.android.server.DeviceIdleController: android.os.PowerManagerInternal mLocalPowerManager>;

        if r16 == null goto label2;

        $r12 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistAllAppIdArray>;

        virtualinvoke r16.<android.os.PowerManagerInternal: void setDeviceIdleWhitelist(int[])>($r12);

     label2:
        specialinvoke r0.<com.android.server.DeviceIdleController: void passWhiteListsToForceAppStandbyTrackerLocked()>();

        return;
    }

    private void verifyAlarmStateLocked()
    {
        com.android.server.DeviceIdleController r0;
        int $i0, $i8, $i14, $i15, $i16;
        long $l1, $l3, $l4, $l5, $l10, $l12;
        byte $b2, $b11;
        java.lang.StringBuilder $r1, $r9, $r15;
        java.lang.String $r3, $r6, $r11, $r14, $r18;
        com.android.server.AlarmManagerInternal $r7, $r8;
        boolean $z0, $z1;

        r0 := @this: com.android.server.DeviceIdleController;

        $i0 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i0 != 0 goto label1;

        $l10 = r0.<com.android.server.DeviceIdleController: long mNextAlarmTime>;

        $b11 = $l10 cmp 0L;

        if $b11 == 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mState=ACTIVE but mNextAlarmTime=");

        $l12 = r0.<com.android.server.DeviceIdleController: long mNextAlarmTime>;

        virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l12);

        $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DeviceIdleController", $r18);

     label1:
        $i14 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i14 == 5 goto label2;

        $r8 = r0.<com.android.server.DeviceIdleController: com.android.server.AlarmManagerInternal mLocalAlarmManager>;

        $z1 = interfaceinvoke $r8.<com.android.server.AlarmManagerInternal: boolean isIdling()>();

        if $z1 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mState=");

        $i8 = r0.<com.android.server.DeviceIdleController: int mState>;

        $r11 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String stateToString(int)>($i8);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but AlarmManager is idling");

        $r14 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DeviceIdleController", $r14);

     label2:
        $i15 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i15 != 5 goto label3;

        $r7 = r0.<com.android.server.DeviceIdleController: com.android.server.AlarmManagerInternal mLocalAlarmManager>;

        $z0 = interfaceinvoke $r7.<com.android.server.AlarmManagerInternal: boolean isIdling()>();

        if $z0 != 0 goto label3;

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DeviceIdleController", "mState=IDLE but AlarmManager is not idling");

     label3:
        $i16 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i16 != 0 goto label4;

        $l1 = r0.<com.android.server.DeviceIdleController: long mNextLightAlarmTime>;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label4;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("mLightState=ACTIVE but mNextLightAlarmTime is ");

        $l3 = r0.<com.android.server.DeviceIdleController: long mNextLightAlarmTime>;

        $l4 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l5 = $l3 - $l4;

        $r3 = staticinvoke <android.util.TimeUtils: java.lang.String formatDuration(long)>($l5);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" from now");

        $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int wtf(java.lang.String,java.lang.String)>("DeviceIdleController", $r6);

     label4:
        return;
    }

    void addPowerSaveTempWhitelistAppChecked(java.lang.String, long, int, java.lang.String) throws android.os.RemoteException
    {
        com.android.server.DeviceIdleController r0;
        long l0, l2;
        java.lang.String r1, r5;
        int i1, $i3, i4, i5;
        android.content.Context $r2;
        android.app.IActivityManager $r3;
        java.lang.Throwable $r4;

        r0 := @this: com.android.server.DeviceIdleController;

        r5 := @parameter0: java.lang.String;

        l0 := @parameter1: long;

        i4 := @parameter2: int;

        r1 := @parameter3: java.lang.String;

        $r2 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r2.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", "No permission to change device idle whitelist");

        i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r3 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $i3 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i5 = interfaceinvoke $r3.<android.app.IActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i3, i1, i4, 0, 0, "addPowerSaveTempWhitelistApp", null);

        l2 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void addPowerSaveTempWhitelistAppInternal(int,java.lang.String,long,int,boolean,java.lang.String)>(i1, r5, l0, i5, 1, r1);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        return;

     label3:
        $r4 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l2);

        throw $r4;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    void addPowerSaveTempWhitelistAppDirectInternal(int, int, long, boolean, java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        int i0, i2, i3, i6;
        boolean z0, $z3, z4, z5;
        long l1, l4, $l5, l7, l8;
        android.util.MutableLong r1, $r6;
        com.android.server.DeviceIdleController$Constants $r2;
        android.util.SparseArray $r3, $r10;
        java.lang.Object $r4, $r5;
        com.android.server.net.NetworkPolicyManagerInternal $r7;
        com.android.server.DeviceIdleController$MyHandler $r8;
        android.os.Message $r9;
        android.util.SparseBooleanArray $r11;
        java.lang.String $r13, $r16, r24;
        java.lang.Throwable $r17, $r18, $r20, $r22, $r23, r27;
        android.os.RemoteException $r19, $r21;
        java.lang.SecurityException r25;
        java.lang.StringBuilder r26;
        android.util.Pair r28;
        com.android.internal.app.IBatteryStats r29;

        r0 := @this: com.android.server.DeviceIdleController;

        i6 := @parameter0: int;

        i0 := @parameter1: int;

        l7 := @parameter2: long;

        z0 := @parameter3: boolean;

        r24 := @parameter4: java.lang.String;

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        i2 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i0);

        entermonitor r0;

     label01:
        i3 = staticinvoke <android.os.UserHandle: int getAppId(int)>(i6);

     label02:
        if i3 < 10000 goto label07;

     label03:
        $r11 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistSystemAppIds>;

        $z3 = virtualinvoke $r11.<android.util.SparseBooleanArray: boolean get(int)>(i3);

        if $z3 == 0 goto label05;

     label04:
        goto label07;

     label05:
        r25 = new java.lang.SecurityException;

        r26 = new java.lang.StringBuilder;

        specialinvoke r26.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Calling app ");

        $r13 = staticinvoke <android.os.UserHandle: java.lang.String formatUid(int)>(i6);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not on whitelist");

        $r16 = virtualinvoke r26.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke r25.<java.lang.SecurityException: void <init>(java.lang.String)>($r16);

        throw r25;

     label06:
        $r22 := @caughtexception;

        r27 = $r22;

        goto label35;

     label07:
        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        l4 = $r2.<com.android.server.DeviceIdleController$Constants: long MAX_TEMP_APP_WHITELIST_DURATION>;

     label08:
        l8 = staticinvoke <java.lang.Math: long min(long,long)>(l7, l4);

     label09:
        $r3 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        $r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i2);

        r28 = (android.util.Pair) $r4;

     label10:
        if r28 != null goto label11;

        z4 = 1;

        goto label12;

     label11:
        z4 = 0;

     label12:
        if z4 == 0 goto label15;

     label13:
        r28 = new android.util.Pair;

        r1 = new android.util.MutableLong;

        specialinvoke r1.<android.util.MutableLong: void <init>(long)>(0L);

        specialinvoke r28.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r1, r24);

        $r10 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        virtualinvoke $r10.<android.util.SparseArray: void put(int,java.lang.Object)>(i2, r28);

     label14:
        goto label15;

     label15:
        $r5 = r28.<android.util.Pair: java.lang.Object first>;

        $r6 = (android.util.MutableLong) $r5;

        $l5 = l1 + l8;

        $r6.<android.util.MutableLong: long value> = $l5;

     label16:
        if z4 == 0 goto label28;

     label17:
        r29 = r0.<com.android.server.DeviceIdleController: com.android.internal.app.IBatteryStats mBatteryStats>;

     label18:
        interfaceinvoke r29.<com.android.internal.app.IBatteryStats: void noteEvent(int,java.lang.String,int)>(32785, r24, i0);

     label19:
        goto label22;

     label20:
        $r19 := @caughtexception;

        goto label22;

     label21:
        $r21 := @caughtexception;

     label22:
        specialinvoke r0.<com.android.server.DeviceIdleController: void postTempActiveTimeoutMessage(int,long)>(i2, l8);

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateTempWhitelistAppIdsLocked(int,boolean)>(i2, 1);

     label23:
        if z0 == 0 goto label24;

        z5 = 1;

        goto label26;

     label24:
        $r8 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        $r9 = virtualinvoke $r8.<com.android.server.DeviceIdleController$MyHandler: android.os.Message obtainMessage(int,int,int)>(9, i2, 1);

        virtualinvoke $r9.<android.os.Message: void sendToTarget()>();

     label25:
        z5 = 0;

     label26:
        specialinvoke r0.<com.android.server.DeviceIdleController: void reportTempWhitelistChangedLocked()>();

     label27:
        goto label29;

     label28:
        z5 = 0;

     label29:
        exitmonitor r0;

     label30:
        if z5 == 0 goto label31;

        $r7 = r0.<com.android.server.DeviceIdleController: com.android.server.net.NetworkPolicyManagerInternal mNetworkPolicyManagerInternal>;

        virtualinvoke $r7.<com.android.server.net.NetworkPolicyManagerInternal: void onTempPowerSaveWhitelistChange(int,boolean)>(i2, 1);

     label31:
        return;

     label32:
        $r20 := @caughtexception;

        r27 = $r20;

        goto label35;

     label33:
        $r17 := @caughtexception;

        r27 = $r17;

        goto label35;

     label34:
        $r23 := @caughtexception;

        r27 = $r23;

     label35:
        exitmonitor r0;

     label36:
        throw r27;

     label37:
        $r18 := @caughtexception;

        r27 = $r18;

        goto label35;

        catch java.lang.Throwable from label01 to label02 with label34;
        catch java.lang.Throwable from label03 to label04 with label06;
        catch java.lang.Throwable from label05 to label06 with label06;
        catch java.lang.Throwable from label07 to label08 with label34;
        catch java.lang.Throwable from label08 to label09 with label33;
        catch java.lang.Throwable from label09 to label10 with label32;
        catch java.lang.Throwable from label13 to label14 with label32;
        catch java.lang.Throwable from label15 to label16 with label32;
        catch android.os.RemoteException from label17 to label18 with label21;
        catch java.lang.Throwable from label17 to label18 with label32;
        catch android.os.RemoteException from label18 to label19 with label20;
        catch java.lang.Throwable from label18 to label19 with label37;
        catch java.lang.Throwable from label22 to label23 with label37;
        catch java.lang.Throwable from label24 to label25 with label37;
        catch java.lang.Throwable from label26 to label27 with label37;
        catch java.lang.Throwable from label29 to label30 with label37;
        catch java.lang.Throwable from label35 to label36 with label37;
    }

    void addPowerSaveTempWhitelistAppInternal(int, java.lang.String, long, int, boolean, java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        int i0, i2, $i3;
        long l1;
        boolean z0;
        java.lang.String r1, r5;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        android.content.pm.PackageManager$NameNotFoundException $r4;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        r5 := @parameter1: java.lang.String;

        l1 := @parameter2: long;

        i2 := @parameter3: int;

        z0 := @parameter4: boolean;

        r1 := @parameter5: java.lang.String;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i3 = virtualinvoke $r3.<android.content.pm.PackageManager: int getPackageUidAsUser(java.lang.String,int)>(r5, i2);

        virtualinvoke r0.<com.android.server.DeviceIdleController: void addPowerSaveTempWhitelistAppDirectInternal(int,int,long,boolean,java.lang.String)>(i0, $i3, l1, z0, r1);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

     label4:
        return;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label3;
    }

    public boolean addPowerSaveWhitelistExceptIdleInternal(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        android.content.pm.ApplicationInfo r1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        int $i0, $i1;
        android.util.ArrayMap $r4, $r9, $r10;
        java.lang.Integer $r5;
        java.lang.Object $r6;
        android.util.ArraySet $r7;
        android.util.SparseBooleanArray $r8;
        int[] $r11;
        android.content.pm.PackageManager$NameNotFoundException $r12;
        java.lang.Throwable $r13;
        java.lang.String r14;

        r0 := @this: com.android.server.DeviceIdleController;

        r14 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r2 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        r1 = virtualinvoke $r3.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r14, 4194304);

        $r4 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $i0 = r1.<android.content.pm.ApplicationInfo: int uid>;

        $i1 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i0);

        $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r6 = virtualinvoke $r4.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, $r5);

        if $r6 != null goto label2;

        $r7 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mPowerSaveWhitelistUserAppsExceptIdle>;

        virtualinvoke $r7.<android.util.ArraySet: boolean add(java.lang.Object)>(r14);

        specialinvoke r0.<com.android.server.DeviceIdleController: void reportPowerSaveWhitelistChangedLocked()>();

        $r10 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r9 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r8 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        $r11 = staticinvoke <com.android.server.DeviceIdleController: int[] buildAppIdArray(android.util.ArrayMap,android.util.ArrayMap,android.util.SparseBooleanArray)>($r10, $r9, $r8);

        r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistExceptIdleAppIdArray> = $r11;

        specialinvoke r0.<com.android.server.DeviceIdleController: void passWhiteListsToForceAppStandbyTrackerLocked()>();

     label2:
        exitmonitor r0;

     label3:
        return 1;

     label4:
        $r13 := @caughtexception;

        goto label8;

     label5:
        $r12 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        return 0;

     label8:
        exitmonitor r0;

     label9:
        throw $r13;

        catch android.content.pm.PackageManager$NameNotFoundException from label1 to label2 with label5;
        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label6 to label7 with label4;
        catch java.lang.Throwable from label8 to label9 with label4;
    }

    void becomeActiveLocked(java.lang.String, int)
    {
        com.android.server.DeviceIdleController r0;
        java.lang.String r1;
        int i0;
        com.android.server.DeviceIdleController$Constants $r2;
        long $l1;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l1 = $r2.<com.android.server.DeviceIdleController$Constants: long INACTIVE_TIMEOUT>;

        specialinvoke r0.<com.android.server.DeviceIdleController: void becomeActiveLocked(java.lang.String,int,long,boolean)>(r1, i0, $l1, 1);

        return;
    }

    void becomeInactiveIfAppropriateLocked()
    {
        com.android.server.DeviceIdleController r0;
        long l0, $l1, $l5, $l6, $l7, $l8, $l9, $l11, $l12, $l13, $l14, $l15, l17;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, $z11;
        com.android.server.DeviceIdleController$Constants $r1, $r4, $r7, $r8;
        int $i2, $i3, $i4, $i10, i16, $i18;
        android.app.AlarmManager $r2, $r5;
        com.android.server.DeviceIdleController$Injector $r3, $r6;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.DeviceIdleController;

        specialinvoke r0.<com.android.server.DeviceIdleController: void verifyAlarmStateLocked()>();

        $z0 = r0.<com.android.server.DeviceIdleController: boolean mScreenOn>;

        if $z0 == 0 goto label02;

        $r8 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $z8 = $r8.<com.android.server.DeviceIdleController$Constants: boolean WAIT_FOR_UNLOCK>;

        if $z8 == 0 goto label01;

        $z9 = r0.<com.android.server.DeviceIdleController: boolean mScreenLocked>;

        if $z9 != 0 goto label02;

     label01:
        z10 = 1;

        goto label03;

     label02:
        z10 = 0;

     label03:
        $z11 = r0.<com.android.server.DeviceIdleController: boolean mForceIdle>;

        if $z11 != 0 goto label05;

        $z7 = r0.<com.android.server.DeviceIdleController: boolean mCharging>;

        if $z7 != 0 goto label04;

        if z10 == 0 goto label05;

     label04:
        return;

     label05:
        $z1 = r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled>;

        if $z1 == 0 goto label14;

        $z3 = r0.<com.android.server.DeviceIdleController: boolean mQuickDozeActivated>;

        if $z3 == 0 goto label10;

        i16 = r0.<com.android.server.DeviceIdleController: int mState>;

        if i16 == 7 goto label09;

        if i16 == 5 goto label09;

        if i16 != 6 goto label06;

        goto label09;

     label06:
        r0.<com.android.server.DeviceIdleController: int mState> = 7;

        specialinvoke r0.<com.android.server.DeviceIdleController: void resetIdleManagementLocked()>();

        $z6 = specialinvoke r0.<com.android.server.DeviceIdleController: boolean isUpcomingAlarmClock()>();

        if $z6 == 0 goto label07;

        $r5 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $l11 = virtualinvoke $r5.<android.app.AlarmManager: long getNextWakeFromIdleTime()>();

        $r6 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $l12 = virtualinvoke $r6.<com.android.server.DeviceIdleController$Injector: long getElapsedRealtime()>();

        $l14 = $l11 - $l12;

        $r7 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l13 = $r7.<com.android.server.DeviceIdleController$Constants: long QUICK_DOZE_DELAY_TIMEOUT>;

        $l15 = $l14 + $l13;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleAlarmLocked(long,boolean)>($l15, 0);

        goto label08;

     label07:
        $r4 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l9 = $r4.<com.android.server.DeviceIdleController$Constants: long QUICK_DOZE_DELAY_TIMEOUT>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleAlarmLocked(long,boolean)>($l9, 0);

     label08:
        $i10 = r0.<com.android.server.DeviceIdleController: int mState>;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdle(int,java.lang.String)>($i10, "no activity");

        goto label14;

     label09:
        return;

     label10:
        $i3 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i3 != 0 goto label14;

        r0.<com.android.server.DeviceIdleController: int mState> = 1;

        specialinvoke r0.<com.android.server.DeviceIdleController: void resetIdleManagementLocked()>();

        l0 = r0.<com.android.server.DeviceIdleController: long mInactiveTimeout>;

        l17 = l0;

        $z4 = specialinvoke r0.<com.android.server.DeviceIdleController: boolean shouldUseIdleTimeoutFactorLocked()>();

        if $z4 == 0 goto label11;

        $f1 = r0.<com.android.server.DeviceIdleController: float mPreIdleFactor>;

        $f0 = (float) l0;

        $f2 = $f1 * $f0;

        l17 = (long) $f2;

     label11:
        $z5 = specialinvoke r0.<com.android.server.DeviceIdleController: boolean isUpcomingAlarmClock()>();

        if $z5 == 0 goto label12;

        $r2 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $l5 = virtualinvoke $r2.<android.app.AlarmManager: long getNextWakeFromIdleTime()>();

        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $l6 = virtualinvoke $r3.<com.android.server.DeviceIdleController$Injector: long getElapsedRealtime()>();

        $l7 = $l5 - $l6;

        $l8 = $l7 + l17;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleAlarmLocked(long,boolean)>($l8, 0);

        goto label13;

     label12:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleAlarmLocked(long,boolean)>(l17, 0);

     label13:
        $i4 = r0.<com.android.server.DeviceIdleController: int mState>;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdle(int,java.lang.String)>($i4, "no activity");

     label14:
        $i18 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i18 != 0 goto label15;

        $z2 = r0.<com.android.server.DeviceIdleController: boolean mLightEnabled>;

        if $z2 == 0 goto label15;

        r0.<com.android.server.DeviceIdleController: int mLightState> = 1;

        specialinvoke r0.<com.android.server.DeviceIdleController: void resetLightIdleManagementLocked()>();

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l1 = $r1.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_AFTER_INACTIVE_TIMEOUT>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleLightAlarmLocked(long)>($l1);

        $i2 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleLight(int,java.lang.String)>($i2, "no activity");

     label15:
        return;
    }

    void cancelAlarmLocked()
    {
        com.android.server.DeviceIdleController r0;
        long $l0;
        byte $b1;
        android.app.AlarmManager$OnAlarmListener $r1;
        android.app.AlarmManager $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        $l0 = r0.<com.android.server.DeviceIdleController: long mNextAlarmTime>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        r0.<com.android.server.DeviceIdleController: long mNextAlarmTime> = 0L;

        $r2 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $r1 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mDeepAlarmListener>;

        virtualinvoke $r2.<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>($r1);

     label1:
        return;
    }

    void cancelLightAlarmLocked()
    {
        com.android.server.DeviceIdleController r0;
        long $l0;
        byte $b1;
        android.app.AlarmManager$OnAlarmListener $r1;
        android.app.AlarmManager $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        $l0 = r0.<com.android.server.DeviceIdleController: long mNextLightAlarmTime>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        r0.<com.android.server.DeviceIdleController: long mNextLightAlarmTime> = 0L;

        $r2 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $r1 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mLightAlarmListener>;

        virtualinvoke $r2.<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>($r1);

     label1:
        return;
    }

    void cancelLocatingLocked()
    {
        com.android.server.DeviceIdleController r0;
        android.location.LocationManager r1;
        boolean $z0;
        com.android.server.DeviceIdleController$Injector $r2;
        android.location.LocationListener $r3, $r4;

        r0 := @this: com.android.server.DeviceIdleController;

        $z0 = r0.<com.android.server.DeviceIdleController: boolean mLocating>;

        if $z0 == 0 goto label1;

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        r1 = virtualinvoke $r2.<com.android.server.DeviceIdleController$Injector: android.location.LocationManager getLocationManager()>();

        $r3 = r0.<com.android.server.DeviceIdleController: android.location.LocationListener mGenericLocationListener>;

        virtualinvoke r1.<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>($r3);

        $r4 = r0.<com.android.server.DeviceIdleController: android.location.LocationListener mGpsLocationListener>;

        virtualinvoke r1.<android.location.LocationManager: void removeUpdates(android.location.LocationListener)>($r4);

        r0.<com.android.server.DeviceIdleController: boolean mLocating> = 0;

     label1:
        return;
    }

    void cancelSensingTimeoutAlarmLocked()
    {
        com.android.server.DeviceIdleController r0;
        long $l0;
        byte $b1;
        android.app.AlarmManager$OnAlarmListener $r1;
        android.app.AlarmManager $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        $l0 = r0.<com.android.server.DeviceIdleController: long mNextSensingTimeoutAlarmTime>;

        $b1 = $l0 cmp 0L;

        if $b1 == 0 goto label1;

        r0.<com.android.server.DeviceIdleController: long mNextSensingTimeoutAlarmTime> = 0L;

        $r2 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $r1 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mSensingTimeoutAlarmListener>;

        virtualinvoke $r2.<android.app.AlarmManager: void cancel(android.app.AlarmManager$OnAlarmListener)>($r1);

     label1:
        return;
    }

    void checkTempAppWhitelistTimeout(int)
    {
        com.android.server.DeviceIdleController r0;
        int i0;
        long l1, $l2, $l4, $l5;
        android.util.SparseArray $r1, $r7;
        java.lang.Object $r2, $r3, $r5, $r8;
        android.util.MutableLong $r4, $r6;
        byte $b3;
        java.lang.String $r9;
        java.lang.Throwable $r10;
        android.util.Pair r11;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        $r2 = virtualinvoke $r1.<android.util.SparseArray: java.lang.Object get(int)>(i0);

        r11 = (android.util.Pair) $r2;

     label02:
        if r11 != null goto label05;

     label03:
        exitmonitor r0;

     label04:
        return;

     label05:
        $r3 = r11.<android.util.Pair: java.lang.Object first>;

        $r4 = (android.util.MutableLong) $r3;

        $l2 = $r4.<android.util.MutableLong: long value>;

        $b3 = l1 cmp $l2;

        if $b3 < 0 goto label07;

        $r7 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        virtualinvoke $r7.<android.util.SparseArray: void delete(int)>(i0);

        $r8 = r11.<android.util.Pair: java.lang.Object second>;

        $r9 = (java.lang.String) $r8;

        specialinvoke r0.<com.android.server.DeviceIdleController: void onAppRemovedFromTempWhitelistLocked(int,java.lang.String)>(i0, $r9);

     label06:
        goto label08;

     label07:
        $r5 = r11.<android.util.Pair: java.lang.Object first>;

        $r6 = (android.util.MutableLong) $r5;

        $l4 = $r6.<android.util.MutableLong: long value>;

        $l5 = $l4 - l1;

        specialinvoke r0.<com.android.server.DeviceIdleController: void postTempActiveTimeoutMessage(int,long)>(i0, $l5);

     label08:
        exitmonitor r0;

     label09:
        return;

     label10:
        $r10 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r10;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label05 to label06 with label10;
        catch java.lang.Throwable from label07 to label08 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    void decActiveIdleOps()
    {
        com.android.server.DeviceIdleController r0;
        int i0, $i1;
        android.os.PowerManager$WakeLock $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        $i1 = r0.<com.android.server.DeviceIdleController: int mActiveIdleOpCount>;

        i0 = $i1 - 1;

        r0.<com.android.server.DeviceIdleController: int mActiveIdleOpCount> = i0;

     label2:
        if i0 > 0 goto label4;

     label3:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void exitMaintenanceEarlyIfNeededLocked()>();

        $r2 = r0.<com.android.server.DeviceIdleController: android.os.PowerManager$WakeLock mActiveIdleWakeLock>;

        virtualinvoke $r2.<android.os.PowerManager$WakeLock: void release()>();

     label4:
        exitmonitor r0;

     label5:
        return;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.DeviceIdleController r0;
        java.lang.String[] r1, $r48, r67, $r70;
        int i1, $i3, $i4, $i7, $i8, $i9, $i11, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i56, i57, i58, i59, i60, i62, i63, i64, i65, i66, i67, i68, i69, i70, i71, i72, i73, i74, i75, i76, i77, i78;
        long l2, $l5, $l6, $l10, $l12, $l14, $l16, $l18, $l20, $l22, $l24, $l27, $l28, $l29, $l30, $l31, $l32, $l33, $l34, $l35, $l36, $l61;
        android.content.Context $r2;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24;
        com.android.server.DeviceIdleController$Constants $r3;
        int[] $r4, $r12, $r29, $r30, $r46, $r47;
        android.util.ArrayMap $r5, $r6, $r7, $r8, $r13, $r23, $r24, $r34, $r37, $r40, $r43;
        android.util.SparseBooleanArray $r9, $r10, $r11, $r31, $r32, $r33;
        com.android.server.DeviceIdleController$MotionListener $r14, $r15;
        android.util.ArraySet $r16, $r22;
        android.location.Location $r17, $r20, $r21, $r73;
        java.lang.String $r18, $r19, $r26, $r27, $r36, $r39, $r42, $r45, $r49, $r50, $r51, $r52, $r59, $r60, r64, r68, $r71;
        byte $b13, $b15, $b17, $b19, $b21, $b23, $b25, $b26;
        float $f0, $f1, $f2, $f3;
        java.lang.Object $r25, $r35, $r38, $r41, $r44;
        android.hardware.Sensor $r28;
        com.android.server.DeviceIdleController$Shell $r53;
        android.os.ResultReceiver $r54;
        com.android.server.DeviceIdleController$BinderService $r55;
        char $c55;
        java.lang.StringBuilder $r56;
        java.lang.Throwable $r61;
        java.io.FileDescriptor r62;
        java.io.PrintWriter r63;
        long[] $r69;
        com.android.server.deviceidle.DeviceIdleConstraintTracker r72;

        r0 := @this: com.android.server.DeviceIdleController;

        r62 := @parameter0: java.io.FileDescriptor;

        r63 := @parameter1: java.io.PrintWriter;

        r1 := @parameter2: java.lang.String[];

        $r2 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r2, "DeviceIdleController", r63);

        if $z0 != 0 goto label001;

        return;

     label001:
        if r1 == null goto label008;

        i57 = 0;

        i58 = 0;

     label002:
        $i48 = lengthof r1;

        if i58 >= $i48 goto label008;

        r64 = r1[i58];

        $r50 = "-h";

        $z18 = virtualinvoke $r50.<java.lang.String: boolean equals(java.lang.Object)>(r64);

        if $z18 == 0 goto label003;

        staticinvoke <com.android.server.DeviceIdleController: void dumpHelp(java.io.PrintWriter)>(r63);

        return;

     label003:
        $r51 = "-u";

        $z19 = virtualinvoke $r51.<java.lang.String: boolean equals(java.lang.Object)>(r64);

        if $z19 == 0 goto label004;

        i1 = i58 + 1;

        i58 = i1;

        $i56 = lengthof r1;

        if i1 >= $i56 goto label005;

        $r60 = r1[i1];

        i57 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r60);

        i58 = i1;

        goto label005;

     label004:
        $r52 = "-a";

        $z20 = virtualinvoke $r52.<java.lang.String: boolean equals(java.lang.Object)>(r64);

        if $z20 == 0 goto label006;

     label005:
        i58 = i58 + 1;

        goto label002;

     label006:
        $i49 = virtualinvoke r64.<java.lang.String: int length()>();

        if $i49 <= 0 goto label007;

        $c55 = virtualinvoke r64.<java.lang.String: char charAt(int)>(0);

        if $c55 != 45 goto label007;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown option: ");

        virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r64);

        $r59 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>($r59);

        return;

     label007:
        $r53 = new com.android.server.DeviceIdleController$Shell;

        specialinvoke $r53.<com.android.server.DeviceIdleController$Shell: void <init>(com.android.server.DeviceIdleController)>(r0);

        $r53.<com.android.server.DeviceIdleController$Shell: int userId> = i57;

        $i50 = lengthof r1;

        $i51 = $i50 - i58;

        r67 = newarray (java.lang.String)[$i51];

        $i52 = lengthof r1;

        $i53 = $i52 - i58;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i58, r67, 0, $i53);

        $r55 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$BinderService mBinderService>;

        $r54 = new android.os.ResultReceiver;

        specialinvoke $r54.<android.os.ResultReceiver: void <init>(android.os.Handler)>(null);

        virtualinvoke $r53.<com.android.server.DeviceIdleController$Shell: int exec(android.os.Binder,java.io.FileDescriptor,java.io.FileDescriptor,java.io.FileDescriptor,java.lang.String[],android.os.ShellCallback,android.os.ResultReceiver)>($r55, null, r62, null, r67, null, $r54);

        return;

     label008:
        entermonitor r0;

     label009:
        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        virtualinvoke $r3.<com.android.server.DeviceIdleController$Constants: void dump(java.io.PrintWriter)>(r63);

        $r4 = r0.<com.android.server.DeviceIdleController: int[] mEventCmds>;

        $i3 = $r4[0];

        if $i3 == 0 goto label024;

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  Idling history:");

        l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

     label010:
        i59 = 99;

     label011:
        if i59 < 0 goto label024;

     label012:
        $r46 = r0.<com.android.server.DeviceIdleController: int[] mEventCmds>;

        $i47 = $r46[i59];

        if $i47 != 0 goto label014;

     label013:
        goto label023;

     label014:
        $r47 = r0.<com.android.server.DeviceIdleController: int[] mEventCmds>;

        i60 = $r47[i59];

     label015:
        if i60 == 1 goto label020;

        if i60 == 2 goto label019;

        if i60 == 3 goto label018;

        if i60 == 4 goto label017;

        if i60 == 5 goto label016;

        r68 = "         ??";

        goto label021;

     label016:
        r68 = " deep-maint";

        goto label021;

     label017:
        r68 = "  deep-idle";

        goto label021;

     label018:
        r68 = "light-maint";

        goto label021;

     label019:
        r68 = " light-idle";

        goto label021;

     label020:
        r68 = "     normal";

     label021:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>(r68);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        $r69 = r0.<com.android.server.DeviceIdleController: long[] mEventTimes>;

        $l61 = $r69[i59];

        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l61, l2, r63);

        $r70 = r0.<com.android.server.DeviceIdleController: java.lang.String[] mEventReasons>;

        $r71 = $r70[i59];

        if $r71 == null goto label022;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>(" (");

        $r48 = r0.<com.android.server.DeviceIdleController: java.lang.String[] mEventReasons>;

        $r49 = $r48[i59];

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>($r49);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>(")");

     label022:
        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label023:
        i59 = i59 + -1;

        goto label011;

     label024:
        $r5 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        i62 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

     label025:
        if i62 <= 0 goto label031;

     label026:
        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  Whitelist (except idle) system apps:");

     label027:
        i63 = 0;

     label028:
        if i63 >= i62 goto label031;

     label029:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r43 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r44 = virtualinvoke $r43.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i63);

        $r45 = (java.lang.String) $r44;

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>($r45);

     label030:
        i63 = i63 + 1;

        goto label028;

     label031:
        $r6 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        i64 = virtualinvoke $r6.<android.util.ArrayMap: int size()>();

     label032:
        if i64 <= 0 goto label038;

     label033:
        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  Whitelist system apps:");

     label034:
        i65 = 0;

     label035:
        if i65 >= i64 goto label038;

     label036:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r40 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r41 = virtualinvoke $r40.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i65);

        $r42 = (java.lang.String) $r41;

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>($r42);

     label037:
        i65 = i65 + 1;

        goto label035;

     label038:
        $r7 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        i66 = virtualinvoke $r7.<android.util.ArrayMap: int size()>();

     label039:
        if i66 <= 0 goto label045;

     label040:
        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  Removed from whitelist system apps:");

     label041:
        i67 = 0;

     label042:
        if i67 >= i66 goto label045;

     label043:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r37 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        $r38 = virtualinvoke $r37.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i67);

        $r39 = (java.lang.String) $r38;

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>($r39);

     label044:
        i67 = i67 + 1;

        goto label042;

     label045:
        $r8 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        i68 = virtualinvoke $r8.<android.util.ArrayMap: int size()>();

     label046:
        if i68 <= 0 goto label052;

     label047:
        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  Whitelist user apps:");

     label048:
        i69 = 0;

     label049:
        if i69 >= i68 goto label052;

     label050:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r34 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r35 = virtualinvoke $r34.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i69);

        $r36 = (java.lang.String) $r35;

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>($r36);

     label051:
        i69 = i69 + 1;

        goto label049;

     label052:
        $r9 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        i70 = virtualinvoke $r9.<android.util.SparseBooleanArray: int size()>();

     label053:
        if i70 <= 0 goto label059;

     label054:
        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  Whitelist (except idle) all app ids:");

     label055:
        i71 = 0;

     label056:
        if i71 >= i70 goto label059;

     label057:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r33 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        $i46 = virtualinvoke $r33.<android.util.SparseBooleanArray: int keyAt(int)>(i71);

        virtualinvoke r63.<java.io.PrintWriter: void print(int)>($i46);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label058:
        i71 = i71 + 1;

        goto label056;

     label059:
        $r10 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistUserAppIds>;

        i72 = virtualinvoke $r10.<android.util.SparseBooleanArray: int size()>();

     label060:
        if i72 <= 0 goto label066;

     label061:
        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  Whitelist user app ids:");

     label062:
        i73 = 0;

     label063:
        if i73 >= i72 goto label066;

     label064:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r32 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistUserAppIds>;

        $i45 = virtualinvoke $r32.<android.util.SparseBooleanArray: int keyAt(int)>(i73);

        virtualinvoke r63.<java.io.PrintWriter: void print(int)>($i45);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label065:
        i73 = i73 + 1;

        goto label063;

     label066:
        $r11 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistAllAppIds>;

        i74 = virtualinvoke $r11.<android.util.SparseBooleanArray: int size()>();

     label067:
        if i74 <= 0 goto label073;

     label068:
        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  Whitelist all app ids:");

     label069:
        i75 = 0;

     label070:
        if i75 >= i74 goto label073;

     label071:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r31 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistAllAppIds>;

        $i44 = virtualinvoke $r31.<android.util.SparseBooleanArray: int keyAt(int)>(i75);

        virtualinvoke r63.<java.io.PrintWriter: void print(int)>($i44);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label072:
        i75 = i75 + 1;

        goto label070;

     label073:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void dumpTempWhitelistSchedule(java.io.PrintWriter,boolean)>(r63, 1);

     label074:
        i76 = 0;

     label075:
        $r12 = r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray>;

        if $r12 == null goto label076;

        $r30 = r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray>;

        i76 = lengthof $r30;

     label076:
        if i76 <= 0 goto label082;

     label077:
        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  Temp whitelist app ids:");

     label078:
        i77 = 0;

     label079:
        if i77 >= i76 goto label082;

     label080:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("    ");

        $r29 = r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray>;

        $i43 = $r29[i77];

        virtualinvoke r63.<java.io.PrintWriter: void print(int)>($i43);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label081:
        i77 = i77 + 1;

        goto label079;

     label082:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mLightEnabled=");

        $z1 = r0.<com.android.server.DeviceIdleController: boolean mLightEnabled>;

        virtualinvoke r63.<java.io.PrintWriter: void print(boolean)>($z1);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mDeepEnabled=");

        $z2 = r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z2);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mForceIdle=");

        $z3 = r0.<com.android.server.DeviceIdleController: boolean mForceIdle>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z3);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mUseMotionSensor=");

        $z4 = r0.<com.android.server.DeviceIdleController: boolean mUseMotionSensor>;

        virtualinvoke r63.<java.io.PrintWriter: void print(boolean)>($z4);

        $z5 = r0.<com.android.server.DeviceIdleController: boolean mUseMotionSensor>;

        if $z5 == 0 goto label084;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>(" mMotionSensor=");

        $r28 = r0.<com.android.server.DeviceIdleController: android.hardware.Sensor mMotionSensor>;

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.Object)>($r28);

     label083:
        goto label085;

     label084:
        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label085:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mScreenOn=");

        $z6 = r0.<com.android.server.DeviceIdleController: boolean mScreenOn>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z6);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mScreenLocked=");

        $z7 = r0.<com.android.server.DeviceIdleController: boolean mScreenLocked>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z7);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mNetworkConnected=");

        $z8 = r0.<com.android.server.DeviceIdleController: boolean mNetworkConnected>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z8);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mCharging=");

        $z9 = r0.<com.android.server.DeviceIdleController: boolean mCharging>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z9);

        $r13 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        $i4 = virtualinvoke $r13.<android.util.ArrayMap: int size()>();

        if $i4 == 0 goto label092;

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  mConstraints={");

     label086:
        i78 = 0;

     label087:
        $r23 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        $i39 = virtualinvoke $r23.<android.util.ArrayMap: int size()>();

        if i78 >= $i39 goto label091;

        $r24 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mConstraints>;

        $r25 = virtualinvoke $r24.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i78);

        r72 = (com.android.server.deviceidle.DeviceIdleConstraintTracker) $r25;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("    \"");

        $r26 = r72.<com.android.server.deviceidle.DeviceIdleConstraintTracker: java.lang.String name>;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>($r26);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("\"=");

        $i41 = r72.<com.android.server.deviceidle.DeviceIdleConstraintTracker: int minState>;

        $i40 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i41 != $i40 goto label089;

        $z17 = r72.<com.android.server.deviceidle.DeviceIdleConstraintTracker: boolean active>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z17);

     label088:
        goto label090;

     label089:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("ignored <mMinState=");

        $i42 = r72.<com.android.server.deviceidle.DeviceIdleConstraintTracker: int minState>;

        $r27 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String stateToString(int)>($i42);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>($r27);

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>(">");

     label090:
        i78 = i78 + 1;

        goto label087;

     label091:
        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>("  }");

     label092:
        $z10 = r0.<com.android.server.DeviceIdleController: boolean mUseMotionSensor>;

        if $z10 != 0 goto label093;

        $r22 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners>;

        $i38 = virtualinvoke $r22.<android.util.ArraySet: int size()>();

        if $i38 <= 0 goto label094;

     label093:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mMotionActive=");

        $r14 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MotionListener mMotionListener>;

        $z11 = $r14.<com.android.server.DeviceIdleController$MotionListener: boolean active>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z11);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mNotMoving=");

        $z12 = r0.<com.android.server.DeviceIdleController: boolean mNotMoving>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z12);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mMotionListener.activatedTimeElapsed=");

        $r15 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MotionListener mMotionListener>;

        $l5 = $r15.<com.android.server.DeviceIdleController$MotionListener: long activatedTimeElapsed>;

        virtualinvoke r63.<java.io.PrintWriter: void println(long)>($l5);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mLastMotionEventElapsed=");

        $l6 = r0.<com.android.server.DeviceIdleController: long mLastMotionEventElapsed>;

        virtualinvoke r63.<java.io.PrintWriter: void println(long)>($l6);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  ");

        $r16 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners>;

        $i7 = virtualinvoke $r16.<android.util.ArraySet: int size()>();

        virtualinvoke r63.<java.io.PrintWriter: void print(int)>($i7);

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>(" stationary listeners registered");

     label094:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mLocating=");

        $z21 = r0.<com.android.server.DeviceIdleController: boolean mLocating>;

        virtualinvoke r63.<java.io.PrintWriter: void print(boolean)>($z21);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>(" mHasGps=");

        $z22 = r0.<com.android.server.DeviceIdleController: boolean mHasGps>;

        virtualinvoke r63.<java.io.PrintWriter: void print(boolean)>($z22);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>(" mHasNetwork=");

        $z23 = r0.<com.android.server.DeviceIdleController: boolean mHasNetworkLocation>;

        virtualinvoke r63.<java.io.PrintWriter: void print(boolean)>($z23);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>(" mLocated=");

        $z24 = r0.<com.android.server.DeviceIdleController: boolean mLocated>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z24);

        $r73 = r0.<com.android.server.DeviceIdleController: android.location.Location mLastGenericLocation>;

        if $r73 == null goto label095;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mLastGenericLocation=");

        $r21 = r0.<com.android.server.DeviceIdleController: android.location.Location mLastGenericLocation>;

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.Object)>($r21);

     label095:
        $r17 = r0.<com.android.server.DeviceIdleController: android.location.Location mLastGpsLocation>;

        if $r17 == null goto label096;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mLastGpsLocation=");

        $r20 = r0.<com.android.server.DeviceIdleController: android.location.Location mLastGpsLocation>;

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.Object)>($r20);

     label096:
        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mState=");

        $i8 = r0.<com.android.server.DeviceIdleController: int mState>;

        $r18 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String stateToString(int)>($i8);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>($r18);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>(" mLightState=");

        $i9 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        $r19 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String lightStateToString(int)>($i9);

        virtualinvoke r63.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mInactiveTimeout=");

        $l10 = r0.<com.android.server.DeviceIdleController: long mInactiveTimeout>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l10, r63);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

        $i11 = r0.<com.android.server.DeviceIdleController: int mActiveIdleOpCount>;

        if $i11 == 0 goto label097;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mActiveIdleOpCount=");

        $i37 = r0.<com.android.server.DeviceIdleController: int mActiveIdleOpCount>;

        virtualinvoke r63.<java.io.PrintWriter: void println(int)>($i37);

     label097:
        $l12 = r0.<com.android.server.DeviceIdleController: long mNextAlarmTime>;

        $b13 = $l12 cmp 0L;

        if $b13 == 0 goto label098;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mNextAlarmTime=");

        $l35 = r0.<com.android.server.DeviceIdleController: long mNextAlarmTime>;

        $l36 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l35, $l36, r63);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label098:
        $l14 = r0.<com.android.server.DeviceIdleController: long mNextIdlePendingDelay>;

        $b15 = $l14 cmp 0L;

        if $b15 == 0 goto label099;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mNextIdlePendingDelay=");

        $l34 = r0.<com.android.server.DeviceIdleController: long mNextIdlePendingDelay>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l34, r63);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label099:
        $l16 = r0.<com.android.server.DeviceIdleController: long mNextIdleDelay>;

        $b17 = $l16 cmp 0L;

        if $b17 == 0 goto label100;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mNextIdleDelay=");

        $l33 = r0.<com.android.server.DeviceIdleController: long mNextIdleDelay>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l33, r63);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label100:
        $l18 = r0.<com.android.server.DeviceIdleController: long mNextLightIdleDelay>;

        $b19 = $l18 cmp 0L;

        if $b19 == 0 goto label101;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mNextIdleDelay=");

        $l32 = r0.<com.android.server.DeviceIdleController: long mNextLightIdleDelay>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l32, r63);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label101:
        $l20 = r0.<com.android.server.DeviceIdleController: long mNextLightAlarmTime>;

        $b21 = $l20 cmp 0L;

        if $b21 == 0 goto label102;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mNextLightAlarmTime=");

        $l30 = r0.<com.android.server.DeviceIdleController: long mNextLightAlarmTime>;

        $l31 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l30, $l31, r63);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label102:
        $l22 = r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget>;

        $b23 = $l22 cmp 0L;

        if $b23 == 0 goto label103;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mCurLightIdleBudget=");

        $l29 = r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>($l29, r63);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label103:
        $l24 = r0.<com.android.server.DeviceIdleController: long mMaintenanceStartTime>;

        $b25 = $l24 cmp 0L;

        if $b25 == 0 goto label104;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mMaintenanceStartTime=");

        $l27 = r0.<com.android.server.DeviceIdleController: long mMaintenanceStartTime>;

        $l28 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l27, $l28, r63);

        virtualinvoke r63.<java.io.PrintWriter: void println()>();

     label104:
        $z13 = r0.<com.android.server.DeviceIdleController: boolean mJobsActive>;

        if $z13 == 0 goto label105;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mJobsActive=");

        $z16 = r0.<com.android.server.DeviceIdleController: boolean mJobsActive>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z16);

     label105:
        $z14 = r0.<com.android.server.DeviceIdleController: boolean mAlarmsActive>;

        if $z14 == 0 goto label106;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mAlarmsActive=");

        $z15 = r0.<com.android.server.DeviceIdleController: boolean mAlarmsActive>;

        virtualinvoke r63.<java.io.PrintWriter: void println(boolean)>($z15);

     label106:
        $f0 = r0.<com.android.server.DeviceIdleController: float mPreIdleFactor>;

        $f1 = $f0 - 1.0F;

        $f2 = staticinvoke <java.lang.Math: float abs(float)>($f1);

        $b26 = $f2 cmpl 0.05F;

        if $b26 <= 0 goto label107;

        virtualinvoke r63.<java.io.PrintWriter: void print(java.lang.String)>("  mPreIdleFactor=");

        $f3 = r0.<com.android.server.DeviceIdleController: float mPreIdleFactor>;

        virtualinvoke r63.<java.io.PrintWriter: void println(float)>($f3);

     label107:
        exitmonitor r0;

     label108:
        return;

     label109:
        $r61 := @caughtexception;

     label110:
        exitmonitor r0;

     label111:
        throw $r61;

        catch java.lang.Throwable from label009 to label010 with label109;
        catch java.lang.Throwable from label012 to label013 with label109;
        catch java.lang.Throwable from label014 to label015 with label109;
        catch java.lang.Throwable from label021 to label022 with label109;
        catch java.lang.Throwable from label022 to label023 with label109;
        catch java.lang.Throwable from label024 to label025 with label109;
        catch java.lang.Throwable from label026 to label027 with label109;
        catch java.lang.Throwable from label029 to label030 with label109;
        catch java.lang.Throwable from label031 to label032 with label109;
        catch java.lang.Throwable from label033 to label034 with label109;
        catch java.lang.Throwable from label036 to label037 with label109;
        catch java.lang.Throwable from label038 to label039 with label109;
        catch java.lang.Throwable from label040 to label041 with label109;
        catch java.lang.Throwable from label043 to label044 with label109;
        catch java.lang.Throwable from label045 to label046 with label109;
        catch java.lang.Throwable from label047 to label048 with label109;
        catch java.lang.Throwable from label050 to label051 with label109;
        catch java.lang.Throwable from label052 to label053 with label109;
        catch java.lang.Throwable from label054 to label055 with label109;
        catch java.lang.Throwable from label057 to label058 with label109;
        catch java.lang.Throwable from label059 to label060 with label109;
        catch java.lang.Throwable from label061 to label062 with label109;
        catch java.lang.Throwable from label064 to label065 with label109;
        catch java.lang.Throwable from label066 to label067 with label109;
        catch java.lang.Throwable from label068 to label069 with label109;
        catch java.lang.Throwable from label071 to label072 with label109;
        catch java.lang.Throwable from label073 to label074 with label109;
        catch java.lang.Throwable from label075 to label076 with label109;
        catch java.lang.Throwable from label077 to label078 with label109;
        catch java.lang.Throwable from label080 to label081 with label109;
        catch java.lang.Throwable from label082 to label083 with label109;
        catch java.lang.Throwable from label084 to label085 with label109;
        catch java.lang.Throwable from label085 to label086 with label109;
        catch java.lang.Throwable from label087 to label088 with label109;
        catch java.lang.Throwable from label089 to label090 with label109;
        catch java.lang.Throwable from label091 to label092 with label109;
        catch java.lang.Throwable from label092 to label093 with label109;
        catch java.lang.Throwable from label093 to label094 with label109;
        catch java.lang.Throwable from label094 to label095 with label109;
        catch java.lang.Throwable from label095 to label096 with label109;
        catch java.lang.Throwable from label096 to label097 with label109;
        catch java.lang.Throwable from label097 to label098 with label109;
        catch java.lang.Throwable from label098 to label099 with label109;
        catch java.lang.Throwable from label099 to label100 with label109;
        catch java.lang.Throwable from label100 to label101 with label109;
        catch java.lang.Throwable from label101 to label102 with label109;
        catch java.lang.Throwable from label102 to label103 with label109;
        catch java.lang.Throwable from label103 to label104 with label109;
        catch java.lang.Throwable from label104 to label105 with label109;
        catch java.lang.Throwable from label105 to label106 with label109;
        catch java.lang.Throwable from label106 to label107 with label109;
        catch java.lang.Throwable from label107 to label108 with label109;
        catch java.lang.Throwable from label110 to label111 with label109;
    }

    void dumpTempWhitelistSchedule(java.io.PrintWriter, boolean)
    {
        com.android.server.DeviceIdleController r0;
        java.io.PrintWriter r1;
        boolean z0;
        int i0, $i2, i4;
        long l1, $l3;
        android.util.Pair r2;
        android.util.SparseArray $r3, $r4, $r5;
        java.lang.Object $r6, $r7, $r9;
        android.util.MutableLong $r8;
        java.lang.String $r10, r11;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: java.io.PrintWriter;

        z0 := @parameter1: boolean;

        $r3 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        i0 = virtualinvoke $r3.<android.util.SparseArray: int size()>();

        if i0 <= 0 goto label3;

        r11 = "";

        if z0 == 0 goto label1;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("  Temp whitelist schedule:");

        r11 = "    ";

     label1:
        l1 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        i4 = 0;

     label2:
        if i4 >= i0 goto label3;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(r11);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("UID=");

        $r4 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        $i2 = virtualinvoke $r4.<android.util.SparseArray: int keyAt(int)>(i4);

        virtualinvoke r1.<java.io.PrintWriter: void print(int)>($i2);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(": ");

        $r5 = r0.<com.android.server.DeviceIdleController: android.util.SparseArray mTempWhitelistAppIdEndTimes>;

        $r6 = virtualinvoke $r5.<android.util.SparseArray: java.lang.Object valueAt(int)>(i4);

        r2 = (android.util.Pair) $r6;

        $r7 = r2.<android.util.Pair: java.lang.Object first>;

        $r8 = (android.util.MutableLong) $r7;

        $l3 = $r8.<android.util.MutableLong: long value>;

        staticinvoke <android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>($l3, l1, r1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(" - ");

        $r9 = r2.<android.util.Pair: java.lang.Object second>;

        $r10 = (java.lang.String) $r9;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r10);

        i4 = i4 + 1;

        goto label2;

     label3:
        return;
    }

    void exitForceIdleLocked()
    {
        com.android.server.DeviceIdleController r0;
        boolean $z0, $z1, $z2;
        int $i0;

        r0 := @this: com.android.server.DeviceIdleController;

        $z0 = r0.<com.android.server.DeviceIdleController: boolean mForceIdle>;

        if $z0 == 0 goto label2;

        r0.<com.android.server.DeviceIdleController: boolean mForceIdle> = 0;

        $z1 = r0.<com.android.server.DeviceIdleController: boolean mScreenOn>;

        if $z1 != 0 goto label1;

        $z2 = r0.<com.android.server.DeviceIdleController: boolean mCharging>;

        if $z2 == 0 goto label2;

     label1:
        r0.<com.android.server.DeviceIdleController: int mActiveReason> = 6;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeActiveLocked(java.lang.String,int)>("exit-force", $i0);

     label2:
        return;
    }

    public void exitIdleInternal(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        int $i0;
        java.lang.Throwable $r1;
        java.lang.String r2;

        r0 := @this: com.android.server.DeviceIdleController;

        r2 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        r0.<com.android.server.DeviceIdleController: int mActiveReason> = 5;

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeActiveLocked(java.lang.String,int)>(r2, $i0);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void exitMaintenanceEarlyIfNeededLocked()
    {
        com.android.server.DeviceIdleController r0;
        int i0, $i1, $i3, $i4;
        boolean $z0;

        r0 := @this: com.android.server.DeviceIdleController;

        $i1 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i1 == 6 goto label1;

        i0 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if i0 == 6 goto label1;

        if i0 != 3 goto label4;

     label1:
        $z0 = virtualinvoke r0.<com.android.server.DeviceIdleController: boolean isOpsInactiveLocked()>();

        if $z0 == 0 goto label4;

        staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $i3 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i3 != 6 goto label2;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepIdleStateLocked(java.lang.String)>("s:early");

        goto label4;

     label2:
        $i4 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i4 != 3 goto label3;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepLightIdleStateLocked(java.lang.String)>("s:predone");

        goto label4;

     label3:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepLightIdleStateLocked(java.lang.String)>("s:early");

     label4:
        return;
    }

    public int[] getAppIdTempWhitelistInternal()
    {
        com.android.server.DeviceIdleController r0;
        java.lang.Throwable $r1;
        int[] r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        r2 = r0.<com.android.server.DeviceIdleController: int[] mTempWhitelistAppIdArray>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int[] getAppIdUserWhitelistInternal()
    {
        com.android.server.DeviceIdleController r0;
        java.lang.Throwable $r1;
        int[] r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        r2 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistUserAppIdArray>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int[] getAppIdWhitelistExceptIdleInternal()
    {
        com.android.server.DeviceIdleController r0;
        java.lang.Throwable $r1;
        int[] r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        r2 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistExceptIdleAppIdArray>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public int[] getAppIdWhitelistInternal()
    {
        com.android.server.DeviceIdleController r0;
        java.lang.Throwable $r1;
        int[] r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        r2 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistAllAppIdArray>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public java.lang.String[] getFullPowerWhitelistExceptIdleInternal()
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r1, $r2, $r3, $r4, $r5, $r8;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.lang.Object $r6, $r9;
        java.lang.String $r7, $r10;
        java.lang.Throwable $r11;
        java.lang.String[] r12;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $i1 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        $i2 = $i0 + $i1;

        r12 = newarray (java.lang.String)[$i2];

     label02:
        i5 = 0;

        i6 = 0;

     label03:
        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $i3 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        if i6 >= $i3 goto label05;

        $r8 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i6);

        $r10 = (java.lang.String) $r9;

        r12[i5] = $r10;

     label04:
        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label03;

     label05:
        i7 = 0;

     label06:
        $r4 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $i4 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        if i7 >= $i4 goto label08;

        $r5 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i7);

        $r7 = (java.lang.String) $r6;

        r12[i5] = $r7;

     label07:
        i5 = i5 + 1;

        i7 = i7 + 1;

        goto label06;

     label08:
        exitmonitor r0;

     label09:
        return r12;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    public java.lang.String[] getFullPowerWhitelistInternal()
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r1, $r2, $r3, $r4, $r5, $r8;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i7;
        java.lang.Object $r6, $r9;
        java.lang.String $r7, $r10;
        java.lang.Throwable $r11;
        java.lang.String[] r12;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $i1 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        $i2 = $i0 + $i1;

        r12 = newarray (java.lang.String)[$i2];

     label02:
        i5 = 0;

        i6 = 0;

     label03:
        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $i3 = virtualinvoke $r3.<android.util.ArrayMap: int size()>();

        if i6 >= $i3 goto label05;

        $r8 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r9 = virtualinvoke $r8.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i6);

        $r10 = (java.lang.String) $r9;

        r12[i5] = $r10;

     label04:
        i5 = i5 + 1;

        i6 = i6 + 1;

        goto label03;

     label05:
        i7 = 0;

     label06:
        $r4 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $i4 = virtualinvoke $r4.<android.util.ArrayMap: int size()>();

        if i7 >= $i4 goto label08;

        $r5 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r6 = virtualinvoke $r5.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i7);

        $r7 = (java.lang.String) $r6;

        r12[i5] = $r7;

     label07:
        i5 = i5 + 1;

        i7 = i7 + 1;

        goto label06;

     label08:
        exitmonitor r0;

     label09:
        return r12;

     label10:
        $r11 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r11;

        catch java.lang.Throwable from label01 to label02 with label10;
        catch java.lang.Throwable from label03 to label04 with label10;
        catch java.lang.Throwable from label06 to label07 with label10;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
    }

    int getLightState()
    {
        com.android.server.DeviceIdleController r0;
        int $i0;

        r0 := @this: com.android.server.DeviceIdleController;

        $i0 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        return $i0;
    }

    long getNextAlarmTime()
    {
        com.android.server.DeviceIdleController r0;
        long $l0;

        r0 := @this: com.android.server.DeviceIdleController;

        $l0 = r0.<com.android.server.DeviceIdleController: long mNextAlarmTime>;

        return $l0;
    }

    public boolean getPowerSaveWhitelistAppInternal(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        android.util.ArrayMap $r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.DeviceIdleController;

        r3 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        z0 = virtualinvoke $r1.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r3);

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean getPowerSaveWhitelistExceptIdleInternal(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        android.util.ArrayMap $r1;
        java.lang.Throwable $r2;
        java.lang.String r3;

        r0 := @this: com.android.server.DeviceIdleController;

        r3 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        z0 = virtualinvoke $r1.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r3);

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int[] getPowerSaveWhitelistUserAppIds()
    {
        com.android.server.DeviceIdleController r0;
        java.lang.Throwable $r1;
        int[] r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        r2 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistUserAppIdArray>;

        exitmonitor r0;

     label2:
        return r2;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    float getPreIdleTimeoutByMode(int)
    {
        com.android.server.DeviceIdleController r0;
        int i0;
        com.android.server.DeviceIdleController$Constants $r2, $r3;
        float $f0, $f1;
        java.lang.StringBuilder $r4;
        java.lang.String $r7;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        if i0 == 0 goto label3;

        if i0 == 1 goto label2;

        if i0 == 2 goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid time out factor mode: ");

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DeviceIdleController", $r7);

        return 1.0F;

     label1:
        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $f1 = $r3.<com.android.server.DeviceIdleController$Constants: float PRE_IDLE_FACTOR_SHORT>;

        return $f1;

     label2:
        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $f0 = $r2.<com.android.server.DeviceIdleController$Constants: float PRE_IDLE_FACTOR_LONG>;

        return $f0;

     label3:
        return 1.0F;
    }

    float getPreIdleTimeoutFactor()
    {
        com.android.server.DeviceIdleController r0;
        float $f0;

        r0 := @this: com.android.server.DeviceIdleController;

        $f0 = r0.<com.android.server.DeviceIdleController: float mPreIdleFactor>;

        return $f0;
    }

    public java.lang.String[] getRemovedSystemPowerWhitelistAppsInternal()
    {
        com.android.server.DeviceIdleController r0;
        int i0, i1;
        android.util.ArrayMap $r1, $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        java.lang.String[] r6;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        r6 = newarray (java.lang.String)[i0];

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        $r4 = (java.lang.String) $r3;

        r6[i1] = $r4;

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r0;

     label07:
        return r6;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    int getState()
    {
        com.android.server.DeviceIdleController r0;
        int $i0;

        r0 := @this: com.android.server.DeviceIdleController;

        $i0 = r0.<com.android.server.DeviceIdleController: int mState>;

        return $i0;
    }

    public java.lang.String[] getSystemPowerWhitelistExceptIdleInternal()
    {
        com.android.server.DeviceIdleController r0;
        int i0, i1;
        android.util.ArrayMap $r1, $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        java.lang.String[] r6;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        r6 = newarray (java.lang.String)[i0];

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        $r4 = (java.lang.String) $r3;

        r6[i1] = $r4;

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r0;

     label07:
        return r6;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.lang.String[] getSystemPowerWhitelistInternal()
    {
        com.android.server.DeviceIdleController r0;
        int i0, i1;
        android.util.ArrayMap $r1, $r2;
        java.lang.Object $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5;
        java.lang.String[] r6;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        r6 = newarray (java.lang.String)[i0];

     label02:
        i1 = 0;

     label03:
        if i1 >= i0 goto label06;

     label04:
        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r3 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i1);

        $r4 = (java.lang.String) $r3;

        r6[i1] = $r4;

     label05:
        i1 = i1 + 1;

        goto label03;

     label06:
        exitmonitor r0;

     label07:
        return r6;

     label08:
        $r5 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r5;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label04 to label05 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    public java.lang.String[] getUserPowerWhitelistInternal()
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r1, $r2, $r3;
        int $i0, $i1, i2;
        java.lang.Object $r4;
        java.lang.String $r5;
        java.lang.Throwable $r6;
        java.lang.String[] r7;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $i0 = virtualinvoke $r1.<android.util.ArrayMap: int size()>();

        r7 = newarray (java.lang.String)[$i0];

     label2:
        i2 = 0;

     label3:
        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $i1 = virtualinvoke $r2.<android.util.ArrayMap: int size()>();

        if i2 >= $i1 goto label5;

        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r4 = virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        $r5 = (java.lang.String) $r4;

        r7[i2] = $r5;

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        exitmonitor r0;

     label6:
        return r7;

     label7:
        $r6 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label3 to label4 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    void handleMotionDetectedLocked(long, java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        long l0;
        java.lang.String r1;
        int i1, $i2, $i3, $i4, $i5;
        android.util.ArraySet $r2;
        boolean $z0, $z1, z2, z3;

        r0 := @this: com.android.server.DeviceIdleController;

        l0 := @parameter0: long;

        r1 := @parameter1: java.lang.String;

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners>;

        $i2 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        if $i2 <= 0 goto label1;

        specialinvoke r0.<com.android.server.DeviceIdleController: void postStationaryStatusUpdated()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void scheduleMotionTimeoutAlarmLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void scheduleMotionRegistrationAlarmLocked()>();

     label1:
        $z0 = r0.<com.android.server.DeviceIdleController: boolean mQuickDozeActivated>;

        if $z0 == 0 goto label2;

        $z1 = r0.<com.android.server.DeviceIdleController: boolean mQuickDozeActivatedWhileIdling>;

        if $z1 != 0 goto label2;

        return;

     label2:
        specialinvoke r0.<com.android.server.DeviceIdleController: void maybeStopMonitoringMotionLocked()>();

        $i3 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i3 != 0 goto label4;

        $i4 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i4 != 7 goto label3;

        goto label4;

     label3:
        z2 = 0;

        goto label5;

     label4:
        z2 = 1;

     label5:
        i1 = staticinvoke <android.os.Process: int myUid()>();

        $i5 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i5 != 7 goto label6;

        z3 = 1;

        goto label7;

     label6:
        z3 = 0;

     label7:
        specialinvoke r0.<com.android.server.DeviceIdleController: void becomeActiveLocked(java.lang.String,int,long,boolean)>(r1, i1, l0, z3);

        if z2 == 0 goto label8;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeInactiveIfAppropriateLocked()>();

     label8:
        return;
    }

    void handleWriteConfigFile()
    {
        com.android.server.DeviceIdleController r0;
        android.util.AtomicFile r2, $r6, $r7, $r11;
        java.io.ByteArrayOutputStream $r3;
        java.nio.charset.Charset $r4;
        java.lang.String $r5;
        java.lang.Throwable $r8, $r9, $r10, $r12;
        com.android.internal.util.FastXmlSerializer r13;
        java.io.FileOutputStream r16, r17;

        r0 := @this: com.android.server.DeviceIdleController;

        $r3 = new java.io.ByteArrayOutputStream;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>();

     label01:
        entermonitor r0;

     label02:
        r13 = new com.android.internal.util.FastXmlSerializer;

        specialinvoke r13.<com.android.internal.util.FastXmlSerializer: void <init>()>();

        $r4 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r5 = virtualinvoke $r4.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r13.<org.xmlpull.v1.XmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>($r3, $r5);

        virtualinvoke r0.<com.android.server.DeviceIdleController: void writeConfigFileLocked(org.xmlpull.v1.XmlSerializer)>(r13);

        exitmonitor r0;

     label03:
        goto label08;

     label04:
        $r9 := @caughtexception;

     label05:
        exitmonitor r0;

     label06:
        throw $r9;

     label07:
        $r12 := @caughtexception;

     label08:
        r2 = r0.<com.android.server.DeviceIdleController: android.util.AtomicFile mConfigFile>;

        entermonitor r2;

        r16 = null;

     label09:
        $r6 = r0.<com.android.server.DeviceIdleController: android.util.AtomicFile mConfigFile>;

        r17 = virtualinvoke $r6.<android.util.AtomicFile: java.io.FileOutputStream startWrite()>();

     label10:
        r16 = r17;

     label11:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>(r17);

     label12:
        r16 = r17;

     label13:
        $r7 = r0.<com.android.server.DeviceIdleController: android.util.AtomicFile mConfigFile>;

        virtualinvoke $r7.<android.util.AtomicFile: void finishWrite(java.io.FileOutputStream)>(r17);

     label14:
        goto label18;

     label15:
        $r8 := @caughtexception;

        goto label20;

     label16:
        $r10 := @caughtexception;

     label17:
        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("DeviceIdleController", "Error writing config file", $r10);

        $r11 = r0.<com.android.server.DeviceIdleController: android.util.AtomicFile mConfigFile>;

        virtualinvoke $r11.<android.util.AtomicFile: void failWrite(java.io.FileOutputStream)>(r16);

     label18:
        exitmonitor r2;

     label19:
        return;

     label20:
        exitmonitor r2;

     label21:
        throw $r8;

        catch java.io.IOException from label01 to label02 with label07;
        catch java.lang.Throwable from label02 to label03 with label04;
        catch java.lang.Throwable from label05 to label06 with label04;
        catch java.io.IOException from label06 to label07 with label07;
        catch java.io.IOException from label09 to label10 with label16;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.io.IOException from label11 to label12 with label16;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.io.IOException from label13 to label14 with label16;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label17 to label18 with label15;
        catch java.lang.Throwable from label18 to label19 with label15;
        catch java.lang.Throwable from label20 to label21 with label15;
    }

    boolean hasMotionSensor()
    {
        com.android.server.DeviceIdleController r0;
        boolean $z0, z1;
        android.hardware.Sensor $r1;

        r0 := @this: com.android.server.DeviceIdleController;

        $z0 = r0.<com.android.server.DeviceIdleController: boolean mUseMotionSensor>;

        if $z0 == 0 goto label1;

        $r1 = r0.<com.android.server.DeviceIdleController: android.hardware.Sensor mMotionSensor>;

        if $r1 == null goto label1;

        z1 = 1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    void incActiveIdleOps()
    {
        com.android.server.DeviceIdleController r0;
        int $i0, $i1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        $i0 = r0.<com.android.server.DeviceIdleController: int mActiveIdleOpCount>;

        $i1 = $i0 + 1;

        r0.<com.android.server.DeviceIdleController: int mActiveIdleOpCount> = $i1;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isAppOnWhitelistInternal(int)
    {
        com.android.server.DeviceIdleController r0;
        int i0, $i1;
        int[] $r2;
        java.lang.Throwable $r3;
        boolean z0;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistAllAppIdArray>;

        $i1 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>($r2, i0);

        if $i1 < 0 goto label3;

     label2:
        z0 = 1;

        goto label4;

     label3:
        z0 = 0;

     label4:
        exitmonitor r0;

     label5:
        return z0;

     label6:
        $r3 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    boolean isCharging()
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.server.DeviceIdleController: boolean mCharging>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isKeyguardShowing()
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.server.DeviceIdleController: boolean mScreenLocked>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isNetworkConnected()
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.server.DeviceIdleController: boolean mNetworkConnected>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isOpsInactiveLocked()
    {
        com.android.server.DeviceIdleController r0;
        int $i0;
        boolean $z0, $z1, z2;

        r0 := @this: com.android.server.DeviceIdleController;

        $i0 = r0.<com.android.server.DeviceIdleController: int mActiveIdleOpCount>;

        if $i0 > 0 goto label1;

        $z0 = r0.<com.android.server.DeviceIdleController: boolean mJobsActive>;

        if $z0 != 0 goto label1;

        $z1 = r0.<com.android.server.DeviceIdleController: boolean mAlarmsActive>;

        if $z1 != 0 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        return z2;
    }

    public boolean isPowerSaveWhitelistAppInternal(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r1, $r2;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.DeviceIdleController;

        r4 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $z0 = virtualinvoke $r1.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r4);

        if $z0 != 0 goto label4;

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $z1 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

     label2:
        goto label4;

     label3:
        z2 = 0;

        goto label5;

     label4:
        z2 = 1;

     label5:
        exitmonitor r0;

     label6:
        return z2;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    public boolean isPowerSaveWhitelistExceptIdleAppInternal(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r1, $r2;
        boolean $z0, $z1, z2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.DeviceIdleController;

        r4 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $z0 = virtualinvoke $r1.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r4);

        if $z0 != 0 goto label4;

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $z1 = virtualinvoke $r2.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label3;

     label2:
        goto label4;

     label3:
        z2 = 0;

        goto label5;

     label4:
        z2 = 1;

     label5:
        exitmonitor r0;

     label6:
        return z2;

     label7:
        $r3 := @caughtexception;

     label8:
        exitmonitor r0;

     label9:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label7;
        catch java.lang.Throwable from label5 to label6 with label7;
        catch java.lang.Throwable from label8 to label9 with label7;
    }

    boolean isQuickDozeEnabled()
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.server.DeviceIdleController: boolean mQuickDozeActivated>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    boolean isScreenOn()
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        z0 = r0.<com.android.server.DeviceIdleController: boolean mScreenOn>;

        exitmonitor r0;

     label2:
        return z0;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void keyguardShowingLocked(boolean)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0, $z1, $z2, $z3;
        int $i0;

        r0 := @this: com.android.server.DeviceIdleController;

        z0 := @parameter0: boolean;

        $z1 = r0.<com.android.server.DeviceIdleController: boolean mScreenLocked>;

        if $z1 == z0 goto label1;

        r0.<com.android.server.DeviceIdleController: boolean mScreenLocked> = z0;

        $z2 = r0.<com.android.server.DeviceIdleController: boolean mScreenOn>;

        if $z2 == 0 goto label1;

        $z3 = r0.<com.android.server.DeviceIdleController: boolean mForceIdle>;

        if $z3 != 0 goto label1;

        if z0 != 0 goto label1;

        r0.<com.android.server.DeviceIdleController: int mActiveReason> = 4;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeActiveLocked(java.lang.String,int)>("unlocked", $i0);

     label1:
        return;
    }

    public void lambda$new$0$DeviceIdleController()
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArraySet $r2;
        int $i0;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners>;

        $i0 = virtualinvoke $r2.<android.util.ArraySet: int size()>();

        if $i0 <= 0 goto label2;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void startMonitoringMotionLocked()>();

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r3 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    public void lambda$new$1$DeviceIdleController()
    {
        com.android.server.DeviceIdleController r0;
        boolean $z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        $z0 = specialinvoke r0.<com.android.server.DeviceIdleController: boolean isStationaryLocked()>();

        if $z0 != 0 goto label3;

        staticinvoke <android.util.Slog: int w(java.lang.String,java.lang.String)>("DeviceIdleController", "motion timeout went off and device isn\'t stationary");

        exitmonitor r0;

     label2:
        return;

     label3:
        exitmonitor r0;

     label4:
        specialinvoke r0.<com.android.server.DeviceIdleController: void postStationaryStatusUpdated()>();

        return;

     label5:
        $r2 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void lambda$onBootPhase$2$DeviceIdleController(android.os.PowerSaveState)
    {
        com.android.server.DeviceIdleController r0;
        boolean $z0;
        java.lang.Throwable $r1;
        android.os.PowerSaveState r2;

        r0 := @this: com.android.server.DeviceIdleController;

        r2 := @parameter0: android.os.PowerSaveState;

        entermonitor r0;

     label1:
        $z0 = r2.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void updateQuickDozeFlagLocked(boolean)>($z0);

        exitmonitor r0;

     label2:
        return;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void motionLocked()
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleController$Injector $r1;
        long $l0, $l1;
        com.android.server.DeviceIdleController$Constants $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $l0 = virtualinvoke $r1.<com.android.server.DeviceIdleController$Injector: long getElapsedRealtime()>();

        r0.<com.android.server.DeviceIdleController: long mLastMotionEventElapsed> = $l0;

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l1 = $r2.<com.android.server.DeviceIdleController$Constants: long MOTION_INACTIVE_TIMEOUT>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void handleMotionDetectedLocked(long,java.lang.String)>($l1, "motion");

        return;
    }

    public void onAnyMotionResult(int)
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleController$Constants $r1;
        long $l0;
        boolean $z0;
        java.lang.Throwable $r2, $r3, $r4, $r5;
        int i1, i2;

        r0 := @this: com.android.server.DeviceIdleController;

        i1 := @parameter0: int;

        if i1 == -1 goto label06;

        entermonitor r0;

     label01:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelSensingTimeoutAlarmLocked()>();

        exitmonitor r0;

     label02:
        goto label06;

     label03:
        $r2 := @caughtexception;

     label04:
        exitmonitor r0;

     label05:
        throw $r2;

     label06:
        if i1 == 1 goto label20;

        if i1 != -1 goto label07;

        goto label20;

     label07:
        if i1 != 0 goto label22;

        i2 = r0.<com.android.server.DeviceIdleController: int mState>;

        if i2 != 3 goto label13;

        entermonitor r0;

     label08:
        r0.<com.android.server.DeviceIdleController: boolean mNotMoving> = 1;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepIdleStateLocked(java.lang.String)>("s:stationary");

        exitmonitor r0;

     label09:
        goto label22;

     label10:
        $r5 := @caughtexception;

     label11:
        exitmonitor r0;

     label12:
        throw $r5;

     label13:
        if i2 != 4 goto label22;

        entermonitor r0;

     label14:
        r0.<com.android.server.DeviceIdleController: boolean mNotMoving> = 1;

        $z0 = r0.<com.android.server.DeviceIdleController: boolean mLocated>;

        if $z0 == 0 goto label15;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepIdleStateLocked(java.lang.String)>("s:stationary");

     label15:
        exitmonitor r0;

     label16:
        goto label22;

     label17:
        $r3 := @caughtexception;

     label18:
        exitmonitor r0;

     label19:
        throw $r3;

     label20:
        entermonitor r0;

     label21:
        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l0 = $r1.<com.android.server.DeviceIdleController$Constants: long INACTIVE_TIMEOUT>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void handleMotionDetectedLocked(long,java.lang.String)>($l0, "non_stationary");

        exitmonitor r0;

     label22:
        return;

     label23:
        $r4 := @caughtexception;

     label24:
        exitmonitor r0;

     label25:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label03;
        catch java.lang.Throwable from label04 to label05 with label03;
        catch java.lang.Throwable from label08 to label09 with label10;
        catch java.lang.Throwable from label11 to label12 with label10;
        catch java.lang.Throwable from label14 to label15 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
        catch java.lang.Throwable from label21 to label22 with label23;
        catch java.lang.Throwable from label24 to label25 with label23;
    }

    public void onBootPhase(int)
    {
        com.android.server.DeviceIdleController r0;
        int i0, $i1;
        float f0, $f1;
        android.os.PowerManagerInternal r1, $r12, $r52, $r53;
        com.android.server.DeviceIdleController$Injector $r2, $r13, $r19, $r23, $r31, $r62;
        android.app.AlarmManager $r3;
        java.lang.Object $r4, $r7, $r9, $r11, $r17, $r25;
        com.android.server.AlarmManagerInternal $r5;
        com.android.internal.app.IBatteryStats $r6;
        android.app.ActivityManagerInternal $r8, $r50;
        com.android.server.wm.ActivityTaskManagerInternal $r10, $r56;
        android.os.PowerManager $r14, r65;
        android.os.IBinder $r15;
        android.net.INetworkPolicyManager $r16;
        com.android.server.net.NetworkPolicyManagerInternal $r18;
        android.hardware.SensorManager $r20, $r29;
        boolean $z0, $z1, $z2;
        android.content.Context $r21, $r27, $r36, $r39, $r42, $r45;
        android.content.res.Resources $r22, $r28;
        com.android.server.DeviceIdleController$MyHandler $r24, $r30;
        com.android.server.DeviceIdleInternal $r26;
        com.android.server.AnyMotionDetector $r32;
        com.android.server.AppStateTracker $r33;
        android.content.BroadcastReceiver $r37, $r40, $r43, $r46;
        int[] $r48, $r49, $r51;
        android.os.PowerSaveState $r54;
        com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver $r55;
        android.location.LocationRequest $r57, $r58, $r59, $r60, $r61;
        android.hardware.Sensor $r63;
        java.lang.Throwable $r64;
        android.os.PowerManager$WakeLock r66, r67;
        com.android.server.deviceidle.ConstraintController r68;
        android.content.Intent r69, r70;
        android.content.IntentFilter r71, r72, r73, r74;
        com.android.server._$$Lambda$DeviceIdleController$XHtDp82oR6rwjHDEkXhoJ_Wo3AQ r75;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        if i0 != 500 goto label11;

        entermonitor r0;

     label01:
        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $r3 = virtualinvoke $r2.<com.android.server.DeviceIdleController$Injector: android.app.AlarmManager getAlarmManager()>();

        r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager> = $r3;

        $r4 = virtualinvoke r0.<com.android.server.DeviceIdleController: java.lang.Object getLocalService(java.lang.Class)>(class "Lcom/android/server/AlarmManagerInternal;");

        $r5 = (com.android.server.AlarmManagerInternal) $r4;

        r0.<com.android.server.DeviceIdleController: com.android.server.AlarmManagerInternal mLocalAlarmManager> = $r5;

        $r6 = staticinvoke <com.android.server.am.BatteryStatsService: com.android.internal.app.IBatteryStats getService()>();

        r0.<com.android.server.DeviceIdleController: com.android.internal.app.IBatteryStats mBatteryStats> = $r6;

        $r7 = virtualinvoke r0.<com.android.server.DeviceIdleController: java.lang.Object getLocalService(java.lang.Class)>(class "Landroid/app/ActivityManagerInternal;");

        $r8 = (android.app.ActivityManagerInternal) $r7;

        r0.<com.android.server.DeviceIdleController: android.app.ActivityManagerInternal mLocalActivityManager> = $r8;

        $r9 = virtualinvoke r0.<com.android.server.DeviceIdleController: java.lang.Object getLocalService(java.lang.Class)>(class "Lcom/android/server/wm/ActivityTaskManagerInternal;");

        $r10 = (com.android.server.wm.ActivityTaskManagerInternal) $r9;

        r0.<com.android.server.DeviceIdleController: com.android.server.wm.ActivityTaskManagerInternal mLocalActivityTaskManager> = $r10;

        $r11 = virtualinvoke r0.<com.android.server.DeviceIdleController: java.lang.Object getLocalService(java.lang.Class)>(class "Landroid/os/PowerManagerInternal;");

        $r12 = (android.os.PowerManagerInternal) $r11;

        r0.<com.android.server.DeviceIdleController: android.os.PowerManagerInternal mLocalPowerManager> = $r12;

        $r13 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        r65 = virtualinvoke $r13.<com.android.server.DeviceIdleController$Injector: android.os.PowerManager getPowerManager()>();

        r0.<com.android.server.DeviceIdleController: android.os.PowerManager mPowerManager> = r65;

        r66 = virtualinvoke r65.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "deviceidle_maint");

        r0.<com.android.server.DeviceIdleController: android.os.PowerManager$WakeLock mActiveIdleWakeLock> = r66;

        virtualinvoke r66.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(0);

        $r14 = r0.<com.android.server.DeviceIdleController: android.os.PowerManager mPowerManager>;

        r67 = virtualinvoke $r14.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "deviceidle_going_idle");

        r0.<com.android.server.DeviceIdleController: android.os.PowerManager$WakeLock mGoingIdleWakeLock> = r67;

        virtualinvoke r67.<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>(1);

        $r15 = staticinvoke <android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>("netpolicy");

        $r16 = staticinvoke <android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager asInterface(android.os.IBinder)>($r15);

        r0.<com.android.server.DeviceIdleController: android.net.INetworkPolicyManager mNetworkPolicyManager> = $r16;

        $r17 = virtualinvoke r0.<com.android.server.DeviceIdleController: java.lang.Object getLocalService(java.lang.Class)>(class "Lcom/android/server/net/NetworkPolicyManagerInternal;");

        $r18 = (com.android.server.net.NetworkPolicyManagerInternal) $r17;

        r0.<com.android.server.DeviceIdleController: com.android.server.net.NetworkPolicyManagerInternal mNetworkPolicyManagerInternal> = $r18;

        $r19 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $r20 = virtualinvoke $r19.<com.android.server.DeviceIdleController$Injector: android.hardware.SensorManager getSensorManager()>();

        r0.<com.android.server.DeviceIdleController: android.hardware.SensorManager mSensorManager> = $r20;

        $z0 = r0.<com.android.server.DeviceIdleController: boolean mUseMotionSensor>;

        if $z0 == 0 goto label02;

        $r62 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $r63 = virtualinvoke $r62.<com.android.server.DeviceIdleController$Injector: android.hardware.Sensor getMotionSensor()>();

        r0.<com.android.server.DeviceIdleController: android.hardware.Sensor mMotionSensor> = $r63;

     label02:
        $r21 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r22 = virtualinvoke $r21.<android.content.Context: android.content.res.Resources getResources()>();

        $z1 = virtualinvoke $r22.<android.content.res.Resources: boolean getBoolean(int)>(17891366);

        if $z1 == 0 goto label03;

        $r57 = staticinvoke <android.location.LocationRequest: android.location.LocationRequest create()>();

        $r58 = virtualinvoke $r57.<android.location.LocationRequest: android.location.LocationRequest setQuality(int)>(100);

        $r59 = virtualinvoke $r58.<android.location.LocationRequest: android.location.LocationRequest setInterval(long)>(0L);

        $r60 = virtualinvoke $r59.<android.location.LocationRequest: android.location.LocationRequest setFastestInterval(long)>(0L);

        $r61 = virtualinvoke $r60.<android.location.LocationRequest: android.location.LocationRequest setNumUpdates(int)>(1);

        r0.<com.android.server.DeviceIdleController: android.location.LocationRequest mLocationRequest> = $r61;

     label03:
        $r23 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $r24 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        $r25 = virtualinvoke r0.<com.android.server.DeviceIdleController: java.lang.Object getLocalService(java.lang.Class)>(class "Lcom/android/server/DeviceIdleController$LocalService;");

        $r26 = (com.android.server.DeviceIdleInternal) $r25;

        r68 = virtualinvoke $r23.<com.android.server.DeviceIdleController$Injector: com.android.server.deviceidle.ConstraintController getConstraintController(android.os.Handler,com.android.server.DeviceIdleInternal)>($r24, $r26);

        r0.<com.android.server.DeviceIdleController: com.android.server.deviceidle.ConstraintController mConstraintController> = r68;

     label04:
        if r68 == null goto label06;

     label05:
        interfaceinvoke r68.<com.android.server.deviceidle.ConstraintController: void start()>();

     label06:
        $r27 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r28 = virtualinvoke $r27.<android.content.Context: android.content.res.Resources getResources()>();

        $i1 = virtualinvoke $r28.<android.content.res.Resources: int getInteger(int)>(17694745);

        $f1 = (float) $i1;

        f0 = $f1 / 100.0F;

        $r31 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $r30 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        $r29 = r0.<com.android.server.DeviceIdleController: android.hardware.SensorManager mSensorManager>;

        $r32 = virtualinvoke $r31.<com.android.server.DeviceIdleController$Injector: com.android.server.AnyMotionDetector getAnyMotionDetector(android.os.Handler,android.hardware.SensorManager,com.android.server.AnyMotionDetector$DeviceIdleCallback,float)>($r30, $r29, r0, f0);

        r0.<com.android.server.DeviceIdleController: com.android.server.AnyMotionDetector mAnyMotionDetector> = $r32;

        $r33 = r0.<com.android.server.DeviceIdleController: com.android.server.AppStateTracker mAppStateTracker>;

        virtualinvoke $r33.<com.android.server.AppStateTracker: void onSystemServicesReady()>();

        r69 = new android.content.Intent;

        specialinvoke r69.<android.content.Intent: void <init>(java.lang.String)>("android.os.action.DEVICE_IDLE_MODE_CHANGED");

        r0.<com.android.server.DeviceIdleController: android.content.Intent mIdleIntent> = r69;

        virtualinvoke r69.<android.content.Intent: android.content.Intent addFlags(int)>(1342177280);

        r70 = new android.content.Intent;

        specialinvoke r70.<android.content.Intent: void <init>(java.lang.String)>("android.os.action.LIGHT_DEVICE_IDLE_MODE_CHANGED");

        r0.<com.android.server.DeviceIdleController: android.content.Intent mLightIdleIntent> = r70;

        virtualinvoke r70.<android.content.Intent: android.content.Intent addFlags(int)>(1342177280);

        r71 = new android.content.IntentFilter;

        specialinvoke r71.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r71.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.BATTERY_CHANGED");

        $r36 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r37 = r0.<com.android.server.DeviceIdleController: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke $r36.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r37, r71);

        r72 = new android.content.IntentFilter;

        specialinvoke r72.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r72.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.PACKAGE_REMOVED");

        virtualinvoke r72.<android.content.IntentFilter: void addDataScheme(java.lang.String)>("package");

        $r39 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r40 = r0.<com.android.server.DeviceIdleController: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke $r39.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r40, r72);

        r73 = new android.content.IntentFilter;

        specialinvoke r73.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r73.<android.content.IntentFilter: void addAction(java.lang.String)>("android.net.conn.CONNECTIVITY_CHANGE");

        $r42 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r43 = r0.<com.android.server.DeviceIdleController: android.content.BroadcastReceiver mReceiver>;

        virtualinvoke $r42.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r43, r73);

        r74 = new android.content.IntentFilter;

        specialinvoke r74.<android.content.IntentFilter: void <init>()>();

        virtualinvoke r74.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_OFF");

        virtualinvoke r74.<android.content.IntentFilter: void addAction(java.lang.String)>("android.intent.action.SCREEN_ON");

        $r45 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r46 = r0.<com.android.server.DeviceIdleController: android.content.BroadcastReceiver mInteractivityReceiver>;

        virtualinvoke $r45.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r46, r74);

        $r50 = r0.<com.android.server.DeviceIdleController: android.app.ActivityManagerInternal mLocalActivityManager>;

        $r49 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistAllAppIdArray>;

        $r48 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistExceptIdleAppIdArray>;

        virtualinvoke $r50.<android.app.ActivityManagerInternal: void setDeviceIdleWhitelist(int[],int[])>($r49, $r48);

        $r52 = r0.<com.android.server.DeviceIdleController: android.os.PowerManagerInternal mLocalPowerManager>;

        $r51 = r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistAllAppIdArray>;

        virtualinvoke $r52.<android.os.PowerManagerInternal: void setDeviceIdleWhitelist(int[])>($r51);

        r1 = r0.<com.android.server.DeviceIdleController: android.os.PowerManagerInternal mLocalPowerManager>;

        r75 = new com.android.server._$$Lambda$DeviceIdleController$XHtDp82oR6rwjHDEkXhoJ_Wo3AQ;

        specialinvoke r75.<com.android.server._$$Lambda$DeviceIdleController$XHtDp82oR6rwjHDEkXhoJ_Wo3AQ: void <init>(com.android.server.DeviceIdleController)>(r0);

        virtualinvoke r1.<android.os.PowerManagerInternal: void registerLowPowerModeObserver(int,java.util.function.Consumer)>(15, r75);

        $r53 = r0.<com.android.server.DeviceIdleController: android.os.PowerManagerInternal mLocalPowerManager>;

        $r54 = virtualinvoke $r53.<android.os.PowerManagerInternal: android.os.PowerSaveState getLowPowerState(int)>(15);

        $z2 = $r54.<android.os.PowerSaveState: boolean batterySaverEnabled>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void updateQuickDozeFlagLocked(boolean)>($z2);

        $r56 = r0.<com.android.server.DeviceIdleController: com.android.server.wm.ActivityTaskManagerInternal mLocalActivityTaskManager>;

        $r55 = r0.<com.android.server.DeviceIdleController: com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver mScreenObserver>;

        virtualinvoke $r56.<com.android.server.wm.ActivityTaskManagerInternal: void registerScreenObserver(com.android.server.wm.ActivityTaskManagerInternal$ScreenObserver)>($r55);

        specialinvoke r0.<com.android.server.DeviceIdleController: void passWhiteListsToForceAppStandbyTrackerLocked()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void updateInteractivityLocked()>();

        exitmonitor r0;

     label07:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void updateConnectivityState(android.content.Intent)>(null);

        goto label11;

     label08:
        $r64 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r64;

     label11:
        return;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label02 to label03 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    int onShellCommand(com.android.server.DeviceIdleController$Shell, java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        java.io.PrintWriter r1;
        java.lang.String $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r24, $r27, $r29, $r30, $r34, $r38, $r41, $r44, $r47, $r49, $r52, $r55, $r58, $r61, $r62, $r63, $r64, $r70, $r75, $r80, $r86, $r89, $r93, $r96, $r97, $r98, $r99, $r102, $r106, $r107, $r108, $r109, $r110, $r114, $r117, $r118, $r119, $r120, $r121, $r123, $r124, $r127, $r129, $r130, $r132, $r133, $r135, $r136, $r137, $r140, $r141, $r143, $r144, $r145, $r148, $r149, $r184, r187, r189, r193, r201, r205, r207, r211, r215, r219, r220, r224, r228, r229, r230, r231, $r235, r236, r237, r238, r241, r245, r246, r247, r250, r256;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, $z24, $z25, $z26, $z27, $z28, $z29, $z30, $z31, $z32, $z33, $z34, $z35, $z36, $z37, $z38, $z39, $z40, $z41, $z42, $z43, $z44, $z45, $z46, $z47, $z48, $z49, $z50, $z51, $z52, $z53, $z54, $z55, z56, z57, z59, z60, $z62, z63, $z65, z67, z68, $z70, z71, $z73, z74, z76;
        int $i0, $i1, $i2, $i3, $i4, $i7, $i11, $i12, $i13, $i14, $i15, $i16, $i18, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i34, i38, i39, i47, i48, i49, i51, i56, i60, i61, i62, i63;
        android.content.Context $r17, $r18, $r28, $r37, $r48, $r83, $r103, $r111, $r122, $r128, $r131, $r134, $r142;
        android.util.ArrayMap $r31, $r32, $r35, $r65, $r66, $r67, $r68, $r71, $r73, $r76, $r78, $r81;
        java.lang.Object $r33, $r36, $r69, $r72, $r74, $r77, $r79, $r82;
        char $c5, $c6, $c8, $c9, $c10, $c17, $c19, $c20, c46, c53, c55;
        java.util.List $r90;
        java.lang.Throwable $r150, $r151, $r152, $r153, $r154, $r155, $r156, $r157, $r158, $r159, $r160, $r161, $r162, $r163, $r164, $r168, $r169, $r170, $r171, $r172, $r173, $r174, $r175, $r177, $r178, $r179, $r180;
        java.lang.Exception $r165, $r176, $r185, r232;
        com.android.server.DeviceIdleController$Shell r186;
        java.io.Serializable r188, r217;
        long l35, l37, l40, l41, l42, l43, l44, l45, l50, l52, l54, l57, l58, l64;
        java.lang.StringBuilder r190, r194, r202, r206, r208, r212, r216, r221, r222, r223, r225, $r233, r239, r240, r242, r243, r248, r249, r251, r257, r258, r261;
        byte b36;

        r0 := @this: com.android.server.DeviceIdleController;

        r186 := @parameter0: com.android.server.DeviceIdleController$Shell;

        r187 := @parameter1: java.lang.String;

        r1 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.io.PrintWriter getOutPrintWriter()>();

        $r2 = "step";

        z56 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        r188 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        if z56 == 0 goto label019;

        $r142 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r142.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        entermonitor r0;

     label001:
        l35 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r189 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label002:
        if r189 == null goto label009;

     label003:
        $r144 = "deep";

        $z54 = virtualinvoke $r144.<java.lang.String: boolean equals(java.lang.Object)>(r189);

        if $z54 == 0 goto label005;

     label004:
        goto label009;

     label005:
        $r145 = "light";

        $z55 = virtualinvoke $r145.<java.lang.String: boolean equals(java.lang.Object)>(r189);

        if $z55 == 0 goto label007;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepLightIdleStateLocked(java.lang.String)>("s:shell");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Stepped to light: ");

        $i34 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        $r149 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String lightStateToString(int)>($i34);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r149);

     label006:
        goto label010;

     label007:
        r190 = new java.lang.StringBuilder;

        specialinvoke r190.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r190.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown idle mode: ");

        virtualinvoke r190.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r189);

        $r148 = virtualinvoke r190.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r148);

     label008:
        goto label010;

     label009:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepIdleStateLocked(java.lang.String)>("s:shell");

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Stepped to deep: ");

        $i33 = r0.<com.android.server.DeviceIdleController: int mState>;

        $r143 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String stateToString(int)>($i33);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r143);

     label010:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l35);

     label011:
        exitmonitor r0;

     label012:
        goto label401;

     label013:
        $r154 := @caughtexception;

     label014:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l35);

     label015:
        throw $r154;

     label016:
        $r155 := @caughtexception;

     label017:
        exitmonitor r0;

     label018:
        throw $r155;

     label019:
        $r3 = "force-idle";

        z57 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        b36 = 4;

        if z57 == 0 goto label055;

        $r134 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r134.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        entermonitor r0;

     label020:
        l37 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r193 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label021:
        if r193 == null goto label035;

     label022:
        $r136 = "deep";

        $z52 = virtualinvoke $r136.<java.lang.String: boolean equals(java.lang.Object)>(r193);

        if $z52 == 0 goto label024;

     label023:
        goto label035;

     label024:
        $r137 = "light";

        $z53 = virtualinvoke $r137.<java.lang.String: boolean equals(java.lang.Object)>(r193);

        if $z53 == 0 goto label033;

        r0.<com.android.server.DeviceIdleController: boolean mForceIdle> = 1;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeInactiveIfAppropriateLocked()>();

        i38 = r0.<com.android.server.DeviceIdleController: int mLightState>;

     label025:
        if i38 == 4 goto label031;

     label026:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepLightIdleStateLocked(java.lang.String)>("s:shell");

        $i31 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if i38 != $i31 goto label029;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Unable to go light idle; stopped at ");

        $i32 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        $r141 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String lightStateToString(int)>($i32);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r141);

        virtualinvoke r0.<com.android.server.DeviceIdleController: void exitForceIdleLocked()>();

     label027:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l37);

        exitmonitor r0;

     label028:
        return -1;

     label029:
        i38 = r0.<com.android.server.DeviceIdleController: int mLightState>;

     label030:
        goto label025;

     label031:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Now forced in to light idle mode");

     label032:
        goto label046;

     label033:
        r194 = new java.lang.StringBuilder;

        specialinvoke r194.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r194.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown idle mode: ");

        virtualinvoke r194.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r193);

        $r140 = virtualinvoke r194.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r140);

     label034:
        goto label046;

     label035:
        $z51 = r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled>;

        if $z51 != 0 goto label038;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Unable to go deep idle; not enabled");

     label036:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l37);

        exitmonitor r0;

     label037:
        return -1;

     label038:
        r0.<com.android.server.DeviceIdleController: boolean mForceIdle> = 1;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeInactiveIfAppropriateLocked()>();

        i39 = r0.<com.android.server.DeviceIdleController: int mState>;

     label039:
        if i39 == 5 goto label045;

     label040:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepIdleStateLocked(java.lang.String)>("s:shell");

        $i29 = r0.<com.android.server.DeviceIdleController: int mState>;

        if i39 != $i29 goto label043;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Unable to go deep idle; stopped at ");

        $i30 = r0.<com.android.server.DeviceIdleController: int mState>;

        $r135 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String stateToString(int)>($i30);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r135);

        virtualinvoke r0.<com.android.server.DeviceIdleController: void exitForceIdleLocked()>();

     label041:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l37);

        exitmonitor r0;

     label042:
        return -1;

     label043:
        i39 = r0.<com.android.server.DeviceIdleController: int mState>;

     label044:
        goto label039;

     label045:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Now forced in to deep idle mode");

     label046:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l37);

     label047:
        exitmonitor r0;

     label048:
        goto label401;

     label049:
        $r152 := @caughtexception;

     label050:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l37);

     label051:
        throw $r152;

     label052:
        $r151 := @caughtexception;

     label053:
        exitmonitor r0;

     label054:
        throw $r151;

     label055:
        $r4 = "force-inactive";

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z0 == 0 goto label067;

        $r131 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r131.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        entermonitor r0;

     label056:
        l40 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label057:
        r0.<com.android.server.DeviceIdleController: boolean mForceIdle> = 1;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeInactiveIfAppropriateLocked()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Light state: ");

        $i27 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        $r132 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String lightStateToString(int)>($i27);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r132);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(", deep state: ");

        $i28 = r0.<com.android.server.DeviceIdleController: int mState>;

        $r133 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String stateToString(int)>($i28);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r133);

     label058:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l40);

     label059:
        exitmonitor r0;

     label060:
        goto label401;

     label061:
        $r162 := @caughtexception;

     label062:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l40);

     label063:
        throw $r162;

     label064:
        $r171 := @caughtexception;

     label065:
        exitmonitor r0;

     label066:
        throw $r171;

     label067:
        $r5 = "unforce";

        $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z1 == 0 goto label079;

        $r128 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r128.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        entermonitor r0;

     label068:
        l41 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label069:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void exitForceIdleLocked()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Light state: ");

        $i25 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        $r129 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String lightStateToString(int)>($i25);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r129);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(", deep state: ");

        $i26 = r0.<com.android.server.DeviceIdleController: int mState>;

        $r130 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String stateToString(int)>($i26);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r130);

     label070:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l41);

     label071:
        exitmonitor r0;

     label072:
        goto label401;

     label073:
        $r174 := @caughtexception;

     label074:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l41);

     label075:
        throw $r174;

     label076:
        $r170 := @caughtexception;

     label077:
        exitmonitor r0;

     label078:
        throw $r170;

     label079:
        $r6 = "get";

        $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z2 == 0 goto label129;

        $r122 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r122.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        entermonitor r0;

     label080:
        r201 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label081:
        if r201 == null goto label123;

     label082:
        l42 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label083:
        $i22 = virtualinvoke r201.<java.lang.String: int hashCode()>();

        lookupswitch($i22)
        {
            case -907689876: goto label097;
            case 3079404: goto label095;
            case 97618667: goto label093;
            case 102970646: goto label091;
            case 107947501: goto label089;
            case 1436115569: goto label087;
            case 1843485230: goto label085;
            default: goto label084;
        };

     label084:
        goto label099;

     label085:
        $z39 = virtualinvoke r201.<java.lang.String: boolean equals(java.lang.Object)>("network");

        if $z39 == 0 goto label084;

     label086:
        b36 = 6;

        goto label100;

     label087:
        $z45 = virtualinvoke r201.<java.lang.String: boolean equals(java.lang.Object)>("charging");

        if $z45 == 0 goto label084;

     label088:
        b36 = 5;

        goto label100;

     label089:
        $z46 = virtualinvoke r201.<java.lang.String: boolean equals(java.lang.Object)>("quick");

        if $z46 == 0 goto label084;

     label090:
        b36 = 3;

        goto label100;

     label091:
        $z47 = virtualinvoke r201.<java.lang.String: boolean equals(java.lang.Object)>("light");

        if $z47 == 0 goto label084;

     label092:
        b36 = 0;

        goto label100;

     label093:
        $z48 = virtualinvoke r201.<java.lang.String: boolean equals(java.lang.Object)>("force");

        if $z48 == 0 goto label084;

     label094:
        b36 = 2;

        goto label100;

     label095:
        $z49 = virtualinvoke r201.<java.lang.String: boolean equals(java.lang.Object)>("deep");

        if $z49 == 0 goto label084;

     label096:
        b36 = 1;

        goto label100;

     label097:
        $z50 = virtualinvoke r201.<java.lang.String: boolean equals(java.lang.Object)>("screen");

        if $z50 == 0 goto label084;

     label098:
        goto label100;

     label099:
        b36 = -1;

     label100:
        tableswitch(b36)
        {
            case 0: goto label115;
            case 1: goto label113;
            case 2: goto label111;
            case 3: goto label109;
            case 4: goto label107;
            case 5: goto label105;
            case 6: goto label103;
            default: goto label101;
        };

     label101:
        r202 = new java.lang.StringBuilder;

     label102:
        goto label117;

     label103:
        $z40 = r0.<com.android.server.DeviceIdleController: boolean mNetworkConnected>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z40);

     label104:
        goto label118;

     label105:
        $z41 = r0.<com.android.server.DeviceIdleController: boolean mCharging>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z41);

     label106:
        goto label118;

     label107:
        $z42 = r0.<com.android.server.DeviceIdleController: boolean mScreenOn>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z42);

     label108:
        goto label118;

     label109:
        $z43 = r0.<com.android.server.DeviceIdleController: boolean mQuickDozeActivated>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z43);

     label110:
        goto label118;

     label111:
        $z44 = r0.<com.android.server.DeviceIdleController: boolean mForceIdle>;

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z44);

     label112:
        goto label118;

     label113:
        $i23 = r0.<com.android.server.DeviceIdleController: int mState>;

        $r123 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String stateToString(int)>($i23);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r123);

     label114:
        goto label118;

     label115:
        $i24 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        $r124 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String lightStateToString(int)>($i24);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r124);

     label116:
        goto label118;

     label117:
        specialinvoke r202.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown get option: ");

        virtualinvoke r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r201);

        $r127 = virtualinvoke r202.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r127);

     label118:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l42);

     label119:
        goto label124;

     label120:
        $r150 := @caughtexception;

     label121:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l42);

     label122:
        throw $r150;

     label123:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Argument required");

     label124:
        exitmonitor r0;

     label125:
        goto label401;

     label126:
        $r158 := @caughtexception;

     label127:
        exitmonitor r0;

     label128:
        throw $r158;

     label129:
        $r7 = "disable";

        $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z3 == 0 goto label165;

        $r111 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r111.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        entermonitor r0;

     label130:
        l43 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r205 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label131:
        z59 = 0;

        if r205 == null goto label135;

     label132:
        $r120 = "deep";

        $z37 = virtualinvoke $r120.<java.lang.String: boolean equals(java.lang.Object)>(r205);

        if $z37 != 0 goto label135;

     label133:
        z60 = 0;

     label134:
        $r121 = "all";

        $z38 = virtualinvoke $r121.<java.lang.String: boolean equals(java.lang.Object)>(r205);

        if $z38 == 0 goto label140;

     label135:
        z60 = 0;

        z59 = 1;

     label136:
        $z62 = r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled>;

        if $z62 == 0 goto label140;

        r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled> = 0;

     label137:
        z60 = 1;

     label138:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Deep idle mode disabled");

     label139:
        z59 = 1;

     label140:
        if r205 == null goto label144;

     label141:
        $r118 = "light";

        $z35 = virtualinvoke $r118.<java.lang.String: boolean equals(java.lang.Object)>(r205);

        if $z35 != 0 goto label144;

     label142:
        z63 = z60;

     label143:
        $r119 = "all";

        $z36 = virtualinvoke $r119.<java.lang.String: boolean equals(java.lang.Object)>(r205);

        if $z36 == 0 goto label149;

     label144:
        z63 = z60;

        z59 = 1;

     label145:
        $z65 = r0.<com.android.server.DeviceIdleController: boolean mLightEnabled>;

        if $z65 == 0 goto label149;

        r0.<com.android.server.DeviceIdleController: boolean mLightEnabled> = 0;

     label146:
        z63 = 1;

     label147:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Light idle mode disabled");

     label148:
        z59 = 1;

     label149:
        if z63 == 0 goto label154;

     label150:
        r0.<com.android.server.DeviceIdleController: int mActiveReason> = 6;

        r206 = new java.lang.StringBuilder;

        specialinvoke r206.<java.lang.StringBuilder: void <init>()>();

     label151:
        if r205 != null goto label152;

        r207 = "all";

        goto label153;

     label152:
        r207 = r205;

     label153:
        virtualinvoke r206.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r207);

        virtualinvoke r206.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-disabled");

        $r117 = virtualinvoke r206.<java.lang.StringBuilder: java.lang.String toString()>();

        $i21 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeActiveLocked(java.lang.String,int)>($r117, $i21);

     label154:
        if z59 != 0 goto label156;

     label155:
        r208 = new java.lang.StringBuilder;

        specialinvoke r208.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r208.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown idle mode: ");

        virtualinvoke r208.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r205);

        $r114 = virtualinvoke r208.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r114);

     label156:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l43);

     label157:
        exitmonitor r0;

     label158:
        goto label401;

     label159:
        $r160 := @caughtexception;

     label160:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l43);

     label161:
        throw $r160;

     label162:
        $r169 := @caughtexception;

     label163:
        exitmonitor r0;

     label164:
        throw $r169;

     label165:
        $r8 = "enable";

        $z4 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z4 == 0 goto label198;

        $r103 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r103.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        entermonitor r0;

     label166:
        l44 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r211 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label167:
        z67 = 0;

        if r211 == null goto label171;

     label168:
        $r109 = "deep";

        $z33 = virtualinvoke $r109.<java.lang.String: boolean equals(java.lang.Object)>(r211);

        if $z33 != 0 goto label171;

     label169:
        z68 = 0;

     label170:
        $r110 = "all";

        $z34 = virtualinvoke $r110.<java.lang.String: boolean equals(java.lang.Object)>(r211);

        if $z34 == 0 goto label176;

     label171:
        z68 = 0;

        z67 = 1;

     label172:
        $z70 = r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled>;

        if $z70 != 0 goto label176;

        r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled> = 1;

     label173:
        z68 = 1;

     label174:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Deep idle mode enabled");

     label175:
        z67 = 1;

     label176:
        if r211 == null goto label180;

     label177:
        $r107 = "light";

        $z31 = virtualinvoke $r107.<java.lang.String: boolean equals(java.lang.Object)>(r211);

        if $z31 != 0 goto label180;

     label178:
        z71 = z68;

     label179:
        $r108 = "all";

        $z32 = virtualinvoke $r108.<java.lang.String: boolean equals(java.lang.Object)>(r211);

        if $z32 == 0 goto label185;

     label180:
        z71 = z68;

        z67 = 1;

     label181:
        $z73 = r0.<com.android.server.DeviceIdleController: boolean mLightEnabled>;

        if $z73 != 0 goto label185;

        r0.<com.android.server.DeviceIdleController: boolean mLightEnabled> = 1;

     label182:
        z71 = 1;

     label183:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Light idle mode enable");

     label184:
        z67 = 1;

     label185:
        if z71 == 0 goto label187;

     label186:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeInactiveIfAppropriateLocked()>();

     label187:
        if z67 != 0 goto label189;

     label188:
        r212 = new java.lang.StringBuilder;

        specialinvoke r212.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown idle mode: ");

        virtualinvoke r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r211);

        $r106 = virtualinvoke r212.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r106);

     label189:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l44);

     label190:
        exitmonitor r0;

     label191:
        goto label401;

     label192:
        $r179 := @caughtexception;

     label193:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l44);

     label194:
        throw $r179;

     label195:
        $r163 := @caughtexception;

     label196:
        exitmonitor r0;

     label197:
        throw $r163;

     label198:
        $r9 = "enabled";

        $z5 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z5 == 0 goto label226;

        entermonitor r0;

     label199:
        r215 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label200:
        if r215 == null goto label215;

     label201:
        $r97 = "all";

        $z26 = virtualinvoke $r97.<java.lang.String: boolean equals(java.lang.Object)>(r215);

        if $z26 == 0 goto label203;

     label202:
        goto label215;

     label203:
        $r98 = "deep";

        $z27 = virtualinvoke $r98.<java.lang.String: boolean equals(java.lang.Object)>(r215);

        if $z27 == 0 goto label208;

     label204:
        $z30 = r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled>;

        if $z30 == 0 goto label206;

     label205:
        r188 = "1";

     label206:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>(r188);

     label207:
        goto label221;

     label208:
        $r99 = "light";

        $z28 = virtualinvoke $r99.<java.lang.String: boolean equals(java.lang.Object)>(r215);

        if $z28 == 0 goto label213;

     label209:
        $z29 = r0.<com.android.server.DeviceIdleController: boolean mLightEnabled>;

        if $z29 == 0 goto label211;

     label210:
        r188 = "1";

     label211:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>(r188);

     label212:
        goto label221;

     label213:
        r216 = new java.lang.StringBuilder;

        specialinvoke r216.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r216.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown idle mode: ");

        virtualinvoke r216.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r215);

        $r102 = virtualinvoke r216.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r102);

     label214:
        goto label221;

     label215:
        r217 = r188;

     label216:
        $z24 = r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled>;

        if $z24 == 0 goto label220;

     label217:
        r217 = r188;

     label218:
        $z25 = r0.<com.android.server.DeviceIdleController: boolean mLightEnabled>;

        if $z25 == 0 goto label220;

     label219:
        r217 = "1";

     label220:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>(r217);

     label221:
        exitmonitor r0;

     label222:
        goto label401;

     label223:
        $r175 := @caughtexception;

     label224:
        exitmonitor r0;

     label225:
        throw $r175;

     label226:
        $r10 = "whitelist";

        $z6 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z6 == 0 goto label259;

        r219 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

        if r219 == null goto label245;

        $r83 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r83.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l45 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label227:
        $i16 = virtualinvoke r219.<java.lang.String: int length()>();

        if $i16 < 1 goto label242;

        $c17 = virtualinvoke r219.<java.lang.String: char charAt(int)>(0);

        if $c17 == 45 goto label229;

        $c19 = virtualinvoke r219.<java.lang.String: char charAt(int)>(0);

        if $c19 == 43 goto label229;

        $c20 = virtualinvoke r219.<java.lang.String: char charAt(int)>(0);

        if $c20 == 61 goto label229;

     label228:
        goto label242;

     label229:
        c46 = virtualinvoke r219.<java.lang.String: char charAt(int)>(0);

        r220 = virtualinvoke r219.<java.lang.String: java.lang.String substring(int)>(1);

     label230:
        if c46 != 43 goto label235;

     label231:
        $r90 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r220);

        $i18 = specialinvoke r0.<com.android.server.DeviceIdleController: int addPowerSaveWhitelistAppsInternal(java.util.List)>($r90);

        if $i18 != 1 goto label233;

        r221 = new java.lang.StringBuilder;

        specialinvoke r221.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r221.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added: ");

        virtualinvoke r221.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r220);

        $r96 = virtualinvoke r221.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r96);

     label232:
        goto label239;

     label233:
        r222 = new java.lang.StringBuilder;

        specialinvoke r222.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r222.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r222.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r220);

        $r93 = virtualinvoke r222.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r93);

     label234:
        goto label239;

     label235:
        if c46 != 45 goto label238;

     label236:
        $z23 = virtualinvoke r0.<com.android.server.DeviceIdleController: boolean removePowerSaveWhitelistAppInternal(java.lang.String)>(r220);

        if $z23 == 0 goto label239;

        r223 = new java.lang.StringBuilder;

        specialinvoke r223.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r223.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed: ");

        virtualinvoke r223.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r220);

        $r89 = virtualinvoke r223.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r89);

     label237:
        goto label239;

     label238:
        $z22 = virtualinvoke r0.<com.android.server.DeviceIdleController: boolean getPowerSaveWhitelistAppInternal(java.lang.String)>(r220);

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z22);

     label239:
        r224 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label240:
        r219 = r224;

        if r224 != null goto label241;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l45);

        goto label255;

     label241:
        goto label227;

     label242:
        r225 = new java.lang.StringBuilder;

        specialinvoke r225.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r225.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package must be prefixed with +, -, or =: ");

        virtualinvoke r225.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r219);

        $r86 = virtualinvoke r225.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r86);

     label243:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l45);

        return -1;

     label244:
        $r159 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l45);

        throw $r159;

     label245:
        entermonitor r0;

        i47 = 0;

     label246:
        $r65 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $i13 = virtualinvoke $r65.<android.util.ArrayMap: int size()>();

        if i47 >= $i13 goto label248;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("system-excidle,");

        $r78 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r79 = virtualinvoke $r78.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i47);

        $r80 = (java.lang.String) $r79;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r80);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $r81 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r82 = virtualinvoke $r81.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i47);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r82);

     label247:
        i47 = i47 + 1;

        goto label246;

     label248:
        i48 = 0;

     label249:
        $r66 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $i14 = virtualinvoke $r66.<android.util.ArrayMap: int size()>();

        if i48 >= $i14 goto label251;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("system,");

        $r73 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r74 = virtualinvoke $r73.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i48);

        $r75 = (java.lang.String) $r74;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r75);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $r76 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r77 = virtualinvoke $r76.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i48);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r77);

     label250:
        i48 = i48 + 1;

        goto label249;

     label251:
        i49 = 0;

     label252:
        $r67 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $i15 = virtualinvoke $r67.<android.util.ArrayMap: int size()>();

        if i49 >= $i15 goto label254;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("user,");

        $r68 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r69 = virtualinvoke $r68.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i49);

        $r70 = (java.lang.String) $r69;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r70);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $r71 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r72 = virtualinvoke $r71.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i49);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r72);

     label253:
        i49 = i49 + 1;

        goto label252;

     label254:
        exitmonitor r0;

     label255:
        goto label401;

     label256:
        $r172 := @caughtexception;

     label257:
        exitmonitor r0;

     label258:
        throw $r172;

     label259:
        $r11 = "tempwhitelist";

        $z7 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z7 == 0 goto label278;

        l50 = 10000L;

        z74 = 0;

     label260:
        r228 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextOption()>();

        if r228 == null goto label265;

        $r62 = "-u";

        $z19 = virtualinvoke $r62.<java.lang.String: boolean equals(java.lang.Object)>(r228);

        if $z19 == 0 goto label262;

        r229 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

        if r229 != null goto label261;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("-u requires a user number");

        return -1;

     label261:
        $i12 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r229);

        r186.<com.android.server.DeviceIdleController$Shell: int userId> = $i12;

        goto label260;

     label262:
        $r63 = "-d";

        $z20 = virtualinvoke $r63.<java.lang.String: boolean equals(java.lang.Object)>(r228);

        if $z20 == 0 goto label264;

        r230 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

        if r230 != null goto label263;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("-d requires a duration");

        return -1;

     label263:
        l50 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r230);

        goto label260;

     label264:
        $r64 = "-r";

        $z21 = virtualinvoke $r64.<java.lang.String: boolean equals(java.lang.Object)>(r228);

        if $z21 == 0 goto label260;

        z74 = 1;

        goto label260;

     label265:
        r231 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

        if r231 == null goto label275;

        if z74 == 0 goto label269;

     label266:
        $i11 = r186.<com.android.server.DeviceIdleController$Shell: int userId>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void removePowerSaveTempWhitelistAppChecked(java.lang.String,int)>(r231, $i11);

     label267:
        goto label271;

     label268:
        $r185 := @caughtexception;

        r232 = $r185;

        goto label274;

     label269:
        i51 = r186.<com.android.server.DeviceIdleController$Shell: int userId>;

     label270:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void addPowerSaveTempWhitelistAppChecked(java.lang.String,long,int,java.lang.String)>(r231, l50, i51, "shell");

     label271:
        goto label277;

     label272:
        $r176 := @caughtexception;

        r232 = $r176;

        goto label274;

     label273:
        $r165 := @caughtexception;

        r232 = $r165;

     label274:
        $r233 = new java.lang.StringBuilder;

        specialinvoke $r233.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r233.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed: ");

        virtualinvoke $r233.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r232);

        $r235 = virtualinvoke $r233.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r235);

        return -1;

     label275:
        if z74 == 0 goto label276;

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("[-r] requires a package name");

        return -1;

     label276:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void dumpTempWhitelistSchedule(java.io.PrintWriter,boolean)>(r1, 0);

     label277:
        goto label401;

     label278:
        $r12 = "except-idle-whitelist";

        $z8 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z8 == 0 goto label304;

        $r48 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r48.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l52 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label279:
        r236 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label280:
        if r236 != null goto label283;

     label281:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("No arguments given");

     label282:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l52);

        return -1;

     label283:
        r237 = r236;

     label284:
        $r49 = "reset";

        $z16 = virtualinvoke $r49.<java.lang.String: boolean equals(java.lang.Object)>(r236);

        if $z16 == 0 goto label286;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void resetPowerSaveWhitelistExceptIdleInternal()>();

     label285:
        goto label298;

     label286:
        $i7 = virtualinvoke r237.<java.lang.String: int length()>();

        if $i7 < 1 goto label301;

        $c8 = virtualinvoke r237.<java.lang.String: char charAt(int)>(0);

        if $c8 == 45 goto label288;

        $c9 = virtualinvoke r237.<java.lang.String: char charAt(int)>(0);

        if $c9 == 43 goto label288;

        $c10 = virtualinvoke r237.<java.lang.String: char charAt(int)>(0);

        if $c10 == 61 goto label288;

     label287:
        goto label301;

     label288:
        c53 = virtualinvoke r237.<java.lang.String: char charAt(int)>(0);

        r238 = virtualinvoke r237.<java.lang.String: java.lang.String substring(int)>(1);

     label289:
        if c53 != 43 goto label294;

     label290:
        $z18 = virtualinvoke r0.<com.android.server.DeviceIdleController: boolean addPowerSaveWhitelistExceptIdleInternal(java.lang.String)>(r238);

        if $z18 == 0 goto label292;

        r239 = new java.lang.StringBuilder;

        specialinvoke r239.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r239.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Added: ");

        virtualinvoke r239.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r238);

        $r61 = virtualinvoke r239.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r61);

     label291:
        goto label296;

     label292:
        r240 = new java.lang.StringBuilder;

        specialinvoke r240.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r240.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown package: ");

        virtualinvoke r240.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r238);

        $r58 = virtualinvoke r240.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r58);

     label293:
        goto label296;

     label294:
        if c53 != 61 goto label299;

     label295:
        $z17 = virtualinvoke r0.<com.android.server.DeviceIdleController: boolean getPowerSaveWhitelistExceptIdleInternal(java.lang.String)>(r238);

        virtualinvoke r1.<java.io.PrintWriter: void println(boolean)>($z17);

     label296:
        r241 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label297:
        r237 = r241;

        if r241 != null goto label286;

     label298:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l52);

        goto label401;

     label299:
        r242 = new java.lang.StringBuilder;

        specialinvoke r242.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r242.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown argument: ");

        virtualinvoke r242.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r237);

        $r55 = virtualinvoke r242.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r55);

     label300:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l52);

        return -1;

     label301:
        r243 = new java.lang.StringBuilder;

        specialinvoke r243.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r243.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package must be prefixed with +, -, or =: ");

        virtualinvoke r243.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r237);

        $r52 = virtualinvoke r243.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r52);

     label302:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l52);

        return -1;

     label303:
        $r178 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l52);

        throw $r178;

     label304:
        $r13 = "sys-whitelist";

        $z9 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z9 == 0 goto label329;

        r245 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

        if r245 == null goto label321;

        $r37 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r37.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        l54 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

        r246 = r245;

     label305:
        $r38 = "reset";

        $z13 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>(r245);

        if $z13 == 0 goto label307;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void resetSystemPowerWhitelistInternal()>();

     label306:
        goto label316;

     label307:
        $i4 = virtualinvoke r246.<java.lang.String: int length()>();

        if $i4 < 1 goto label318;

        $c5 = virtualinvoke r246.<java.lang.String: char charAt(int)>(0);

        if $c5 == 45 goto label309;

        $c6 = virtualinvoke r246.<java.lang.String: char charAt(int)>(0);

        if $c6 == 43 goto label309;

     label308:
        goto label318;

     label309:
        c55 = virtualinvoke r246.<java.lang.String: char charAt(int)>(0);

        r247 = virtualinvoke r246.<java.lang.String: java.lang.String substring(int)>(1);

     label310:
        if c55 == 43 goto label313;

        if c55 == 45 goto label311;

        goto label314;

     label311:
        $z15 = virtualinvoke r0.<com.android.server.DeviceIdleController: boolean removeSystemPowerWhitelistAppInternal(java.lang.String)>(r247);

        if $z15 == 0 goto label314;

        r248 = new java.lang.StringBuilder;

        specialinvoke r248.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Removed ");

        virtualinvoke r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r247);

        $r47 = virtualinvoke r248.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r47);

     label312:
        goto label314;

     label313:
        $z14 = virtualinvoke r0.<com.android.server.DeviceIdleController: boolean restoreSystemPowerWhitelistAppInternal(java.lang.String)>(r247);

        if $z14 == 0 goto label314;

        r249 = new java.lang.StringBuilder;

        specialinvoke r249.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r249.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Restored ");

        virtualinvoke r249.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r247);

        $r44 = virtualinvoke r249.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r44);

     label314:
        r250 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label315:
        r246 = r250;

        if r250 != null goto label317;

     label316:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l54);

        goto label325;

     label317:
        goto label307;

     label318:
        r251 = new java.lang.StringBuilder;

        specialinvoke r251.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r251.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package must be prefixed with + or - ");

        virtualinvoke r251.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r246);

        $r41 = virtualinvoke r251.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r41);

     label319:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l54);

        return -1;

     label320:
        $r161 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l54);

        throw $r161;

     label321:
        entermonitor r0;

        i56 = 0;

     label322:
        $r31 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $i3 = virtualinvoke $r31.<android.util.ArrayMap: int size()>();

        if i56 >= $i3 goto label324;

        $r32 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r33 = virtualinvoke $r32.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i56);

        $r34 = (java.lang.String) $r33;

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r34);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(",");

        $r35 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r36 = virtualinvoke $r35.<android.util.ArrayMap: java.lang.Object valueAt(int)>(i56);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.Object)>($r36);

     label323:
        i56 = i56 + 1;

        goto label322;

     label324:
        exitmonitor r0;

     label325:
        goto label401;

     label326:
        $r164 := @caughtexception;

     label327:
        exitmonitor r0;

     label328:
        throw $r164;

     label329:
        $r14 = "motion";

        $z10 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z10 == 0 goto label341;

        $r28 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r28.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        entermonitor r0;

     label330:
        l57 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label331:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void motionLocked()>();

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>("Light state: ");

        $i1 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        $r29 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String lightStateToString(int)>($i1);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>($r29);

        virtualinvoke r1.<java.io.PrintWriter: void print(java.lang.String)>(", deep state: ");

        $i2 = r0.<com.android.server.DeviceIdleController: int mState>;

        $r30 = staticinvoke <com.android.server.DeviceIdleController: java.lang.String stateToString(int)>($i2);

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r30);

     label332:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l57);

     label333:
        exitmonitor r0;

     label334:
        goto label401;

     label335:
        $r156 := @caughtexception;

     label336:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l57);

     label337:
        throw $r156;

     label338:
        $r168 := @caughtexception;

     label339:
        exitmonitor r0;

     label340:
        throw $r168;

     label341:
        $r15 = "pre-idle-factor";

        $z11 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z11 == 0 goto label396;

        $r18 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r18.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        entermonitor r0;

     label342:
        l58 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label343:
        i60 = -1;

     label344:
        r256 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: java.lang.String getNextArg()>();

     label345:
        i61 = -1;

        z76 = 0;

        if r256 == null goto label366;

        i60 = -1;

     label346:
        i62 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r256);

     label347:
        i60 = -1;

     label348:
        i63 = virtualinvoke r0.<com.android.server.DeviceIdleController: int setPreIdleTimeoutMode(int)>(i62);

     label349:
        if i63 != 1 goto label360;

        i60 = i63;

     label350:
        r257 = new java.lang.StringBuilder;

     label351:
        i60 = i63;

     label352:
        specialinvoke r257.<java.lang.StringBuilder: void <init>()>();

     label353:
        i60 = i63;

     label354:
        virtualinvoke r257.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pre-idle-factor: ");

     label355:
        i60 = i63;

     label356:
        virtualinvoke r257.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i62);

     label357:
        i60 = i63;

     label358:
        $r27 = virtualinvoke r257.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r27);

     label359:
        z76 = 1;

        i61 = i63;

        goto label366;

     label360:
        if i63 != 2 goto label363;

        i60 = i63;

     label361:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Deep idle not supported");

     label362:
        i61 = i63;

        z76 = 1;

        goto label366;

     label363:
        i61 = i63;

        z76 = 0;

        if i63 != 0 goto label366;

        i60 = i63;

     label364:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("Idle timeout factor not changed");

     label365:
        z76 = 1;

        i61 = i63;

     label366:
        if z76 != 0 goto label382;

        i60 = i61;

     label367:
        r258 = new java.lang.StringBuilder;

     label368:
        i60 = i61;

     label369:
        specialinvoke r258.<java.lang.StringBuilder: void <init>()>();

     label370:
        i60 = i61;

     label371:
        virtualinvoke r258.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown idle timeout factor: ");

     label372:
        i60 = i61;

     label373:
        virtualinvoke r258.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r256);

     label374:
        i60 = i61;

     label375:
        virtualinvoke r258.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",(error code: ");

     label376:
        i60 = i61;

     label377:
        virtualinvoke r258.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i61);

     label378:
        i60 = i61;

     label379:
        virtualinvoke r258.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

     label380:
        i60 = i61;

     label381:
        $r24 = virtualinvoke r258.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r24);

     label382:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l58);

     label383:
        goto label389;

     label384:
        $r157 := @caughtexception;

        goto label391;

     label385:
        $r180 := @caughtexception;

     label386:
        r261 = new java.lang.StringBuilder;

        specialinvoke r261.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke r261.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown idle timeout factor,(error code: ");

        virtualinvoke r261.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i60);

        virtualinvoke r261.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r184 = virtualinvoke r261.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r184);

     label387:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l58);

     label388:
        goto label383;

     label389:
        exitmonitor r0;

     label390:
        goto label401;

     label391:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l58);

     label392:
        throw $r157;

     label393:
        $r153 := @caughtexception;

     label394:
        exitmonitor r0;

     label395:
        throw $r153;

     label396:
        $r16 = "reset-pre-idle-factor";

        $z12 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>(r187);

        if $z12 == 0 goto label408;

        $r17 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r17.<android.content.Context: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)>("android.permission.DEVICE_POWER", null);

        entermonitor r0;

     label397:
        l64 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label398:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void resetPreIdleTimeoutMode()>();

     label399:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l64);

     label400:
        exitmonitor r0;

     label401:
        return 0;

     label402:
        $r177 := @caughtexception;

     label403:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l64);

     label404:
        throw $r177;

     label405:
        $r173 := @caughtexception;

     label406:
        exitmonitor r0;

     label407:
        throw $r173;

     label408:
        $i0 = virtualinvoke r186.<com.android.server.DeviceIdleController$Shell: int handleDefaultCommands(java.lang.String)>(r187);

        return $i0;

        catch java.lang.Throwable from label001 to label002 with label016;
        catch java.lang.Throwable from label003 to label004 with label013;
        catch java.lang.Throwable from label005 to label006 with label013;
        catch java.lang.Throwable from label007 to label008 with label013;
        catch java.lang.Throwable from label009 to label010 with label013;
        catch java.lang.Throwable from label010 to label011 with label016;
        catch java.lang.Throwable from label011 to label012 with label016;
        catch java.lang.Throwable from label014 to label015 with label016;
        catch java.lang.Throwable from label015 to label016 with label016;
        catch java.lang.Throwable from label017 to label018 with label016;
        catch java.lang.Throwable from label020 to label021 with label052;
        catch java.lang.Throwable from label022 to label023 with label049;
        catch java.lang.Throwable from label024 to label025 with label049;
        catch java.lang.Throwable from label026 to label027 with label049;
        catch java.lang.Throwable from label027 to label028 with label052;
        catch java.lang.Throwable from label029 to label030 with label049;
        catch java.lang.Throwable from label031 to label032 with label049;
        catch java.lang.Throwable from label033 to label034 with label049;
        catch java.lang.Throwable from label035 to label036 with label049;
        catch java.lang.Throwable from label036 to label037 with label052;
        catch java.lang.Throwable from label038 to label039 with label049;
        catch java.lang.Throwable from label040 to label041 with label049;
        catch java.lang.Throwable from label041 to label042 with label052;
        catch java.lang.Throwable from label043 to label044 with label049;
        catch java.lang.Throwable from label045 to label046 with label049;
        catch java.lang.Throwable from label046 to label047 with label052;
        catch java.lang.Throwable from label047 to label048 with label052;
        catch java.lang.Throwable from label050 to label051 with label052;
        catch java.lang.Throwable from label051 to label052 with label052;
        catch java.lang.Throwable from label053 to label054 with label052;
        catch java.lang.Throwable from label056 to label057 with label064;
        catch java.lang.Throwable from label057 to label058 with label061;
        catch java.lang.Throwable from label058 to label059 with label064;
        catch java.lang.Throwable from label059 to label060 with label064;
        catch java.lang.Throwable from label062 to label063 with label064;
        catch java.lang.Throwable from label063 to label064 with label064;
        catch java.lang.Throwable from label065 to label066 with label064;
        catch java.lang.Throwable from label068 to label069 with label076;
        catch java.lang.Throwable from label069 to label070 with label073;
        catch java.lang.Throwable from label070 to label071 with label076;
        catch java.lang.Throwable from label071 to label072 with label076;
        catch java.lang.Throwable from label074 to label075 with label076;
        catch java.lang.Throwable from label075 to label076 with label076;
        catch java.lang.Throwable from label077 to label078 with label076;
        catch java.lang.Throwable from label080 to label081 with label126;
        catch java.lang.Throwable from label082 to label083 with label126;
        catch java.lang.Throwable from label083 to label084 with label120;
        catch java.lang.Throwable from label085 to label086 with label120;
        catch java.lang.Throwable from label087 to label088 with label120;
        catch java.lang.Throwable from label089 to label090 with label120;
        catch java.lang.Throwable from label091 to label092 with label120;
        catch java.lang.Throwable from label093 to label094 with label120;
        catch java.lang.Throwable from label095 to label096 with label120;
        catch java.lang.Throwable from label097 to label098 with label120;
        catch java.lang.Throwable from label101 to label102 with label120;
        catch java.lang.Throwable from label103 to label104 with label120;
        catch java.lang.Throwable from label105 to label106 with label120;
        catch java.lang.Throwable from label107 to label108 with label120;
        catch java.lang.Throwable from label109 to label110 with label120;
        catch java.lang.Throwable from label111 to label112 with label120;
        catch java.lang.Throwable from label113 to label114 with label120;
        catch java.lang.Throwable from label115 to label116 with label120;
        catch java.lang.Throwable from label117 to label118 with label120;
        catch java.lang.Throwable from label118 to label119 with label126;
        catch java.lang.Throwable from label121 to label122 with label126;
        catch java.lang.Throwable from label122 to label123 with label126;
        catch java.lang.Throwable from label123 to label124 with label126;
        catch java.lang.Throwable from label124 to label125 with label126;
        catch java.lang.Throwable from label127 to label128 with label126;
        catch java.lang.Throwable from label130 to label131 with label162;
        catch java.lang.Throwable from label132 to label133 with label159;
        catch java.lang.Throwable from label134 to label135 with label159;
        catch java.lang.Throwable from label136 to label137 with label159;
        catch java.lang.Throwable from label138 to label139 with label159;
        catch java.lang.Throwable from label141 to label142 with label159;
        catch java.lang.Throwable from label143 to label144 with label159;
        catch java.lang.Throwable from label145 to label146 with label159;
        catch java.lang.Throwable from label147 to label148 with label159;
        catch java.lang.Throwable from label150 to label151 with label159;
        catch java.lang.Throwable from label153 to label154 with label159;
        catch java.lang.Throwable from label155 to label156 with label159;
        catch java.lang.Throwable from label156 to label157 with label162;
        catch java.lang.Throwable from label157 to label158 with label162;
        catch java.lang.Throwable from label160 to label161 with label162;
        catch java.lang.Throwable from label161 to label162 with label162;
        catch java.lang.Throwable from label163 to label164 with label162;
        catch java.lang.Throwable from label166 to label167 with label195;
        catch java.lang.Throwable from label168 to label169 with label192;
        catch java.lang.Throwable from label170 to label171 with label192;
        catch java.lang.Throwable from label172 to label173 with label192;
        catch java.lang.Throwable from label174 to label175 with label192;
        catch java.lang.Throwable from label177 to label178 with label192;
        catch java.lang.Throwable from label179 to label180 with label192;
        catch java.lang.Throwable from label181 to label182 with label192;
        catch java.lang.Throwable from label183 to label184 with label192;
        catch java.lang.Throwable from label186 to label187 with label192;
        catch java.lang.Throwable from label188 to label189 with label192;
        catch java.lang.Throwable from label189 to label190 with label195;
        catch java.lang.Throwable from label190 to label191 with label195;
        catch java.lang.Throwable from label193 to label194 with label195;
        catch java.lang.Throwable from label194 to label195 with label195;
        catch java.lang.Throwable from label196 to label197 with label195;
        catch java.lang.Throwable from label199 to label200 with label223;
        catch java.lang.Throwable from label201 to label202 with label223;
        catch java.lang.Throwable from label203 to label204 with label223;
        catch java.lang.Throwable from label204 to label205 with label223;
        catch java.lang.Throwable from label206 to label207 with label223;
        catch java.lang.Throwable from label208 to label209 with label223;
        catch java.lang.Throwable from label209 to label210 with label223;
        catch java.lang.Throwable from label211 to label212 with label223;
        catch java.lang.Throwable from label213 to label214 with label223;
        catch java.lang.Throwable from label216 to label217 with label223;
        catch java.lang.Throwable from label218 to label219 with label223;
        catch java.lang.Throwable from label220 to label221 with label223;
        catch java.lang.Throwable from label221 to label222 with label223;
        catch java.lang.Throwable from label224 to label225 with label223;
        catch java.lang.Throwable from label227 to label228 with label244;
        catch java.lang.Throwable from label229 to label230 with label244;
        catch java.lang.Throwable from label231 to label232 with label244;
        catch java.lang.Throwable from label233 to label234 with label244;
        catch java.lang.Throwable from label236 to label237 with label244;
        catch java.lang.Throwable from label238 to label239 with label244;
        catch java.lang.Throwable from label239 to label240 with label244;
        catch java.lang.Throwable from label242 to label243 with label244;
        catch java.lang.Throwable from label246 to label247 with label256;
        catch java.lang.Throwable from label249 to label250 with label256;
        catch java.lang.Throwable from label252 to label253 with label256;
        catch java.lang.Throwable from label254 to label255 with label256;
        catch java.lang.Throwable from label257 to label258 with label256;
        catch java.lang.Exception from label266 to label267 with label268;
        catch java.lang.Exception from label269 to label270 with label273;
        catch java.lang.Exception from label270 to label271 with label272;
        catch java.lang.Throwable from label279 to label280 with label303;
        catch java.lang.Throwable from label281 to label282 with label303;
        catch java.lang.Throwable from label284 to label285 with label303;
        catch java.lang.Throwable from label286 to label287 with label303;
        catch java.lang.Throwable from label288 to label289 with label303;
        catch java.lang.Throwable from label290 to label291 with label303;
        catch java.lang.Throwable from label292 to label293 with label303;
        catch java.lang.Throwable from label295 to label296 with label303;
        catch java.lang.Throwable from label296 to label297 with label303;
        catch java.lang.Throwable from label299 to label300 with label303;
        catch java.lang.Throwable from label301 to label302 with label303;
        catch java.lang.Throwable from label305 to label306 with label320;
        catch java.lang.Throwable from label307 to label308 with label320;
        catch java.lang.Throwable from label309 to label310 with label320;
        catch java.lang.Throwable from label311 to label312 with label320;
        catch java.lang.Throwable from label313 to label314 with label320;
        catch java.lang.Throwable from label314 to label315 with label320;
        catch java.lang.Throwable from label318 to label319 with label320;
        catch java.lang.Throwable from label322 to label323 with label326;
        catch java.lang.Throwable from label324 to label325 with label326;
        catch java.lang.Throwable from label327 to label328 with label326;
        catch java.lang.Throwable from label330 to label331 with label338;
        catch java.lang.Throwable from label331 to label332 with label335;
        catch java.lang.Throwable from label332 to label333 with label338;
        catch java.lang.Throwable from label333 to label334 with label338;
        catch java.lang.Throwable from label336 to label337 with label338;
        catch java.lang.Throwable from label337 to label338 with label338;
        catch java.lang.Throwable from label339 to label340 with label338;
        catch java.lang.Throwable from label342 to label343 with label393;
        catch java.lang.NumberFormatException from label344 to label345 with label385;
        catch java.lang.Throwable from label344 to label345 with label384;
        catch java.lang.NumberFormatException from label346 to label347 with label385;
        catch java.lang.Throwable from label346 to label347 with label384;
        catch java.lang.NumberFormatException from label348 to label349 with label385;
        catch java.lang.Throwable from label348 to label349 with label384;
        catch java.lang.NumberFormatException from label350 to label351 with label385;
        catch java.lang.Throwable from label350 to label351 with label384;
        catch java.lang.NumberFormatException from label352 to label353 with label385;
        catch java.lang.Throwable from label352 to label353 with label384;
        catch java.lang.NumberFormatException from label354 to label355 with label385;
        catch java.lang.Throwable from label354 to label355 with label384;
        catch java.lang.NumberFormatException from label356 to label357 with label385;
        catch java.lang.Throwable from label356 to label357 with label384;
        catch java.lang.NumberFormatException from label358 to label359 with label385;
        catch java.lang.Throwable from label358 to label359 with label384;
        catch java.lang.NumberFormatException from label361 to label362 with label385;
        catch java.lang.Throwable from label361 to label362 with label384;
        catch java.lang.NumberFormatException from label364 to label365 with label385;
        catch java.lang.Throwable from label364 to label365 with label384;
        catch java.lang.NumberFormatException from label367 to label368 with label385;
        catch java.lang.Throwable from label367 to label368 with label384;
        catch java.lang.NumberFormatException from label369 to label370 with label385;
        catch java.lang.Throwable from label369 to label370 with label384;
        catch java.lang.NumberFormatException from label371 to label372 with label385;
        catch java.lang.Throwable from label371 to label372 with label384;
        catch java.lang.NumberFormatException from label373 to label374 with label385;
        catch java.lang.Throwable from label373 to label374 with label384;
        catch java.lang.NumberFormatException from label375 to label376 with label385;
        catch java.lang.Throwable from label375 to label376 with label384;
        catch java.lang.NumberFormatException from label377 to label378 with label385;
        catch java.lang.Throwable from label377 to label378 with label384;
        catch java.lang.NumberFormatException from label379 to label380 with label385;
        catch java.lang.Throwable from label379 to label380 with label384;
        catch java.lang.NumberFormatException from label381 to label382 with label385;
        catch java.lang.Throwable from label381 to label382 with label384;
        catch java.lang.Throwable from label382 to label383 with label393;
        catch java.lang.Throwable from label386 to label387 with label384;
        catch java.lang.Throwable from label387 to label388 with label393;
        catch java.lang.Throwable from label389 to label390 with label393;
        catch java.lang.Throwable from label391 to label392 with label393;
        catch java.lang.Throwable from label392 to label393 with label393;
        catch java.lang.Throwable from label394 to label395 with label393;
        catch java.lang.Throwable from label397 to label398 with label405;
        catch java.lang.Throwable from label398 to label399 with label402;
        catch java.lang.Throwable from label399 to label400 with label405;
        catch java.lang.Throwable from label400 to label401 with label405;
        catch java.lang.Throwable from label403 to label404 with label405;
        catch java.lang.Throwable from label404 to label405 with label405;
        catch java.lang.Throwable from label406 to label407 with label405;
    }

    public void onStart()
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        android.content.Context $r1, $r2, $r6;
        android.content.res.Resources $r3;
        int $i0, $i1, $i3, $i4, i5, i6, i7, i8;
        com.android.server.DeviceIdleController$Injector $r4;
        com.android.server.DeviceIdleController$MyHandler $r5;
        android.content.ContentResolver $r7;
        com.android.server.DeviceIdleController$Constants $r8, $r9;
        long $l2;
        com.android.server.DeviceIdleController$BinderService $r10;
        com.android.server.DeviceIdleController$LocalService $r11;
        java.lang.Object $r12, $r23;
        android.util.ArrayMap $r13, $r18, $r24;
        java.lang.String $r14, $r19, $r25, r35, r39;
        java.lang.Integer $r15, $r20, $r26;
        android.util.SparseBooleanArray $r17, $r22, $r28;
        android.content.pm.PackageManager$NameNotFoundException $r29, $r30;
        java.lang.Throwable $r31;
        android.content.pm.PackageManager r32;
        com.android.server.SystemConfig r33;
        android.util.ArraySet r34, r38;
        android.content.pm.ApplicationInfo r36, r40;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        r32 = virtualinvoke $r1.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        entermonitor r0;

     label01:
        $r2 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = virtualinvoke $r3.<android.content.res.Resources: boolean getBoolean(int)>(17891436);

        r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled> = z0;

        r0.<com.android.server.DeviceIdleController: boolean mLightEnabled> = z0;

        r33 = staticinvoke <com.android.server.SystemConfig: com.android.server.SystemConfig getInstance()>();

        r34 = virtualinvoke r33.<com.android.server.SystemConfig: android.util.ArraySet getAllowInPowerSaveExceptIdle()>();

     label02:
        i5 = 0;

     label03:
        $i0 = virtualinvoke r34.<android.util.ArraySet: int size()>();

        if i5 >= $i0 goto label08;

        $r23 = virtualinvoke r34.<android.util.ArraySet: java.lang.Object valueAt(int)>(i5);

        r35 = (java.lang.String) $r23;

     label04:
        r36 = virtualinvoke r32.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r35, 1048576);

        $i4 = r36.<android.content.pm.ApplicationInfo: int uid>;

        i6 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i4);

        $r24 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r25 = r36.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6);

        virtualinvoke $r24.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r25, $r26);

        $r28 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistSystemAppIdsExceptIdle>;

        virtualinvoke $r28.<android.util.SparseBooleanArray: void put(int,boolean)>(i6, 1);

     label05:
        goto label07;

     label06:
        $r30 := @caughtexception;

     label07:
        i5 = i5 + 1;

        goto label03;

     label08:
        r38 = virtualinvoke r33.<com.android.server.SystemConfig: android.util.ArraySet getAllowInPowerSave()>();

     label09:
        i7 = 0;

     label10:
        $i1 = virtualinvoke r38.<android.util.ArraySet: int size()>();

        if i7 >= $i1 goto label15;

        $r12 = virtualinvoke r38.<android.util.ArraySet: java.lang.Object valueAt(int)>(i7);

        r39 = (java.lang.String) $r12;

     label11:
        r40 = virtualinvoke r32.<android.content.pm.PackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>(r39, 1048576);

        $i3 = r40.<android.content.pm.ApplicationInfo: int uid>;

        i8 = staticinvoke <android.os.UserHandle: int getAppId(int)>($i3);

        $r13 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r14 = r40.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        virtualinvoke $r13.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r15);

        $r17 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistSystemAppIdsExceptIdle>;

        virtualinvoke $r17.<android.util.SparseBooleanArray: void put(int,boolean)>(i8, 1);

        $r18 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r19 = r40.<android.content.pm.ApplicationInfo: java.lang.String packageName>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8);

        virtualinvoke $r18.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20);

        $r22 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistSystemAppIds>;

        virtualinvoke $r22.<android.util.SparseBooleanArray: void put(int,boolean)>(i8, 1);

     label12:
        goto label14;

     label13:
        $r29 := @caughtexception;

     label14:
        i7 = i7 + 1;

        goto label10;

     label15:
        $r4 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        $r5 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        $r6 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        $r7 = virtualinvoke $r6.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r8 = virtualinvoke $r4.<com.android.server.DeviceIdleController$Injector: com.android.server.DeviceIdleController$Constants getConstants(com.android.server.DeviceIdleController,android.os.Handler,android.content.ContentResolver)>(r0, $r5, $r7);

        r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants> = $r8;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void readConfigFileLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateWhitelistAppIdsLocked()>();

        r0.<com.android.server.DeviceIdleController: boolean mNetworkConnected> = 1;

        r0.<com.android.server.DeviceIdleController: boolean mScreenOn> = 1;

        r0.<com.android.server.DeviceIdleController: boolean mScreenLocked> = 0;

        r0.<com.android.server.DeviceIdleController: boolean mCharging> = 1;

        r0.<com.android.server.DeviceIdleController: int mActiveReason> = 0;

        r0.<com.android.server.DeviceIdleController: int mState> = 0;

        r0.<com.android.server.DeviceIdleController: int mLightState> = 0;

        $r9 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l2 = $r9.<com.android.server.DeviceIdleController$Constants: long INACTIVE_TIMEOUT>;

        r0.<com.android.server.DeviceIdleController: long mInactiveTimeout> = $l2;

        r0.<com.android.server.DeviceIdleController: float mPreIdleFactor> = 1.0F;

        r0.<com.android.server.DeviceIdleController: float mLastPreIdleFactor> = 1.0F;

        exitmonitor r0;

     label16:
        $r10 = new com.android.server.DeviceIdleController$BinderService;

        specialinvoke $r10.<com.android.server.DeviceIdleController$BinderService: void <init>(com.android.server.DeviceIdleController,com.android.server.DeviceIdleController$1)>(r0, null);

        r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$BinderService mBinderService> = $r10;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void publishBinderService(java.lang.String,android.os.IBinder)>("deviceidle", $r10);

        $r11 = new com.android.server.DeviceIdleController$LocalService;

        specialinvoke $r11.<com.android.server.DeviceIdleController$LocalService: void <init>(com.android.server.DeviceIdleController,com.android.server.DeviceIdleController$1)>(r0, null);

        r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleInternal mLocalService> = $r11;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void publishLocalService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/DeviceIdleInternal;", $r11);

        return;

     label17:
        $r31 := @caughtexception;

     label18:
        exitmonitor r0;

     label19:
        throw $r31;

        catch java.lang.Throwable from label01 to label02 with label17;
        catch java.lang.Throwable from label03 to label04 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label04 to label05 with label06;
        catch java.lang.Throwable from label04 to label05 with label17;
        catch java.lang.Throwable from label08 to label09 with label17;
        catch java.lang.Throwable from label10 to label11 with label17;
        catch android.content.pm.PackageManager$NameNotFoundException from label11 to label12 with label13;
        catch java.lang.Throwable from label11 to label12 with label17;
        catch java.lang.Throwable from label15 to label16 with label17;
        catch java.lang.Throwable from label18 to label19 with label17;
    }

    void readConfigFileLocked()
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r1;
        android.util.AtomicFile $r2;
        java.nio.charset.Charset $r3;
        java.lang.String $r4;
        java.lang.Throwable $r5, $r6, $r7, $r8, $r9;
        java.io.FileInputStream r10;
        org.xmlpull.v1.XmlPullParser r11;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        virtualinvoke $r1.<android.util.ArrayMap: void clear()>();

     label01:
        $r2 = r0.<com.android.server.DeviceIdleController: android.util.AtomicFile mConfigFile>;

        r10 = virtualinvoke $r2.<android.util.AtomicFile: java.io.FileInputStream openRead()>();

     label02:
        r11 = staticinvoke <android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>();

        $r3 = <java.nio.charset.StandardCharsets: java.nio.charset.Charset UTF_8>;

        $r4 = virtualinvoke $r3.<java.nio.charset.Charset: java.lang.String name()>();

        interfaceinvoke r11.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.InputStream,java.lang.String)>(r10, $r4);

        specialinvoke r0.<com.android.server.DeviceIdleController: void readConfigFileLocked(org.xmlpull.v1.XmlPullParser)>(r11);

     label03:
        virtualinvoke r10.<java.io.FileInputStream: void close()>();

     label04:
        goto label12;

     label05:
        $r8 := @caughtexception;

     label06:
        virtualinvoke r10.<java.io.FileInputStream: void close()>();

     label07:
        goto label09;

     label08:
        $r5 := @caughtexception;

     label09:
        throw $r8;

     label10:
        $r7 := @caughtexception;

     label11:
        virtualinvoke r10.<java.io.FileInputStream: void close()>();

     label12:
        goto label14;

     label13:
        $r6 := @caughtexception;

     label14:
        return;

     label15:
        $r9 := @caughtexception;

        return;

        catch java.io.FileNotFoundException from label01 to label02 with label15;
        catch org.xmlpull.v1.XmlPullParserException from label02 to label03 with label10;
        catch java.lang.Throwable from label02 to label03 with label05;
        catch java.io.IOException from label03 to label04 with label13;
        catch java.io.IOException from label06 to label07 with label08;
        catch java.io.IOException from label11 to label12 with label13;
    }

    void receivedGenericLocationLocked(android.location.Location)
    {
        com.android.server.DeviceIdleController r0;
        android.location.Location r1, $r2;
        int $i0;
        float $f0, $f1;
        com.android.server.DeviceIdleController$Constants $r3;
        byte $b1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: android.location.Location;

        $i0 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i0 == 4 goto label1;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelLocatingLocked()>();

        return;

     label1:
        $r2 = new android.location.Location;

        specialinvoke $r2.<android.location.Location: void <init>(android.location.Location)>(r1);

        r0.<com.android.server.DeviceIdleController: android.location.Location mLastGenericLocation> = $r2;

        $f0 = virtualinvoke r1.<android.location.Location: float getAccuracy()>();

        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $f1 = $r3.<com.android.server.DeviceIdleController$Constants: float LOCATION_ACCURACY>;

        $b1 = $f0 cmpl $f1;

        if $b1 <= 0 goto label2;

        $z1 = r0.<com.android.server.DeviceIdleController: boolean mHasGps>;

        if $z1 == 0 goto label2;

        return;

     label2:
        r0.<com.android.server.DeviceIdleController: boolean mLocated> = 1;

        $z0 = r0.<com.android.server.DeviceIdleController: boolean mNotMoving>;

        if $z0 == 0 goto label3;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepIdleStateLocked(java.lang.String)>("s:location");

     label3:
        return;
    }

    void receivedGpsLocationLocked(android.location.Location)
    {
        com.android.server.DeviceIdleController r0;
        android.location.Location r1, $r2;
        int $i0;
        float $f0, $f1;
        com.android.server.DeviceIdleController$Constants $r3;
        byte $b1;
        boolean $z0;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: android.location.Location;

        $i0 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i0 == 4 goto label1;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelLocatingLocked()>();

        return;

     label1:
        $r2 = new android.location.Location;

        specialinvoke $r2.<android.location.Location: void <init>(android.location.Location)>(r1);

        r0.<com.android.server.DeviceIdleController: android.location.Location mLastGpsLocation> = $r2;

        $f0 = virtualinvoke r1.<android.location.Location: float getAccuracy()>();

        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $f1 = $r3.<com.android.server.DeviceIdleController$Constants: float LOCATION_ACCURACY>;

        $b1 = $f0 cmpl $f1;

        if $b1 <= 0 goto label2;

        return;

     label2:
        r0.<com.android.server.DeviceIdleController: boolean mLocated> = 1;

        $z0 = r0.<com.android.server.DeviceIdleController: boolean mNotMoving>;

        if $z0 == 0 goto label3;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepIdleStateLocked(java.lang.String)>("s:gps");

     label3:
        return;
    }

    void registerStationaryListener(com.android.server.DeviceIdleInternal$StationaryListener)
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArraySet $r1, $r3;
        boolean $z0, $z1, $z2;
        com.android.server.DeviceIdleController$MotionListener $r2;
        int $i0;
        java.lang.Throwable $r4;
        com.android.server.DeviceIdleInternal$StationaryListener r5;

        r0 := @this: com.android.server.DeviceIdleController;

        r5 := @parameter0: com.android.server.DeviceIdleInternal$StationaryListener;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners>;

        $z0 = virtualinvoke $r1.<android.util.ArraySet: boolean add(java.lang.Object)>(r5);

        if $z0 != 0 goto label03;

        exitmonitor r0;

     label02:
        return;

     label03:
        specialinvoke r0.<com.android.server.DeviceIdleController: void postStationaryStatus(com.android.server.DeviceIdleInternal$StationaryListener)>(r5);

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MotionListener mMotionListener>;

        $z1 = $r2.<com.android.server.DeviceIdleController$MotionListener: boolean active>;

        if $z1 == 0 goto label05;

        $z2 = specialinvoke r0.<com.android.server.DeviceIdleController: boolean isStationaryLocked()>();

        if $z2 != 0 goto label06;

        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mStationaryListeners>;

        $i0 = virtualinvoke $r3.<android.util.ArraySet: int size()>();

        if $i0 != 1 goto label06;

        specialinvoke r0.<com.android.server.DeviceIdleController: void scheduleMotionTimeoutAlarmLocked()>();

     label04:
        goto label06;

     label05:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void startMonitoringMotionLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void scheduleMotionTimeoutAlarmLocked()>();

     label06:
        exitmonitor r0;

     label07:
        return;

     label08:
        $r4 := @caughtexception;

     label09:
        exitmonitor r0;

     label10:
        throw $r4;

        catch java.lang.Throwable from label01 to label02 with label08;
        catch java.lang.Throwable from label03 to label04 with label08;
        catch java.lang.Throwable from label05 to label06 with label08;
        catch java.lang.Throwable from label06 to label07 with label08;
        catch java.lang.Throwable from label09 to label10 with label08;
    }

    void removePowerSaveTempWhitelistAppChecked(java.lang.String, int) throws android.os.RemoteException
    {
        com.android.server.DeviceIdleController r0;
        int i0, $i2, i3, i4;
        long l1;
        android.content.Context $r1;
        android.app.IActivityManager $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.DeviceIdleController;

        r4 := @parameter0: java.lang.String;

        i3 := @parameter1: int;

        $r1 = virtualinvoke r0.<com.android.server.DeviceIdleController: android.content.Context getContext()>();

        virtualinvoke $r1.<android.content.Context: void enforceCallingPermission(java.lang.String,java.lang.String)>("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", "No permission to change device idle whitelist");

        i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        $r2 = staticinvoke <android.app.ActivityManager: android.app.IActivityManager getService()>();

        $i2 = staticinvoke <android.os.Binder: int getCallingPid()>();

        i4 = interfaceinvoke $r2.<android.app.IActivityManager: int handleIncomingUser(int,int,int,boolean,boolean,java.lang.String,java.lang.String)>($i2, i0, i3, 0, 0, "removePowerSaveTempWhitelistApp", null);

        l1 = staticinvoke <android.os.Binder: long clearCallingIdentity()>();

     label1:
        specialinvoke r0.<com.android.server.DeviceIdleController: void removePowerSaveTempWhitelistAppInternal(java.lang.String,int)>(r4, i4);

     label2:
        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        return;

     label3:
        $r3 := @caughtexception;

        staticinvoke <android.os.Binder: void restoreCallingIdentity(long)>(l1);

        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    public boolean removePowerSaveWhitelistAppInternal(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r1;
        java.lang.Object $r2;
        java.lang.Throwable $r3;
        java.lang.String r4;

        r0 := @this: com.android.server.DeviceIdleController;

        r4 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r2 = virtualinvoke $r1.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r4);

        if $r2 == null goto label3;

        specialinvoke r0.<com.android.server.DeviceIdleController: void reportPowerSaveWhitelistChangedLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateWhitelistAppIdsLocked()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void writeConfigFileLocked()>();

        exitmonitor r0;

     label2:
        return 1;

     label3:
        exitmonitor r0;

     label4:
        return 0;

     label5:
        $r3 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public boolean removeSystemPowerWhitelistAppInternal(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r1, $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.DeviceIdleController;

        r8 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $z0 = virtualinvoke $r1.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r8);

        if $z0 != 0 goto label3;

        exitmonitor r0;

     label2:
        return 0;

     label3:
        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

        $r5 = (java.lang.Integer) $r4;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5);

        specialinvoke r0.<com.android.server.DeviceIdleController: void reportPowerSaveWhitelistChangedLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateWhitelistAppIdsLocked()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void writeConfigFileLocked()>();

        exitmonitor r0;

     label4:
        return 1;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    public void resetPowerSaveWhitelistExceptIdleInternal()
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArraySet $r2, $r8;
        android.util.ArrayMap $r3, $r5, $r6;
        boolean $z0;
        android.util.SparseBooleanArray $r4;
        int[] $r7;
        java.lang.Throwable $r9;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mPowerSaveWhitelistUserAppsExceptIdle>;

        $z0 = virtualinvoke $r3.<android.util.ArrayMap: boolean removeAll(java.util.Collection)>($r2);

        if $z0 == 0 goto label2;

        specialinvoke r0.<com.android.server.DeviceIdleController: void reportPowerSaveWhitelistChangedLocked()>();

        $r6 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistAppsExceptIdle>;

        $r5 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r4 = r0.<com.android.server.DeviceIdleController: android.util.SparseBooleanArray mPowerSaveWhitelistExceptIdleAppIds>;

        $r7 = staticinvoke <com.android.server.DeviceIdleController: int[] buildAppIdArray(android.util.ArrayMap,android.util.ArrayMap,android.util.SparseBooleanArray)>($r6, $r5, $r4);

        r0.<com.android.server.DeviceIdleController: int[] mPowerSaveWhitelistExceptIdleAppIdArray> = $r7;

        $r8 = r0.<com.android.server.DeviceIdleController: android.util.ArraySet mPowerSaveWhitelistUserAppsExceptIdle>;

        virtualinvoke $r8.<android.util.ArraySet: void clear()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void passWhiteListsToForceAppStandbyTrackerLocked()>();

     label2:
        exitmonitor r0;

     label3:
        return;

     label4:
        $r9 := @caughtexception;

     label5:
        exitmonitor r0;

     label6:
        throw $r9;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label2 to label3 with label4;
        catch java.lang.Throwable from label5 to label6 with label4;
    }

    void resetPreIdleTimeoutMode()
    {
        com.android.server.DeviceIdleController r0;
        float $f0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        $f0 = r0.<com.android.server.DeviceIdleController: float mPreIdleFactor>;

        r0.<com.android.server.DeviceIdleController: float mLastPreIdleFactor> = $f0;

        r0.<com.android.server.DeviceIdleController: float mPreIdleFactor> = 1.0F;

        exitmonitor r0;

     label2:
        specialinvoke r0.<com.android.server.DeviceIdleController: void postResetPreIdleTimeoutFactor()>();

        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void resetSystemPowerWhitelistInternal()
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r2, $r3, $r4;
        java.lang.Throwable $r5;

        r0 := @this: com.android.server.DeviceIdleController;

        entermonitor r0;

     label1:
        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        virtualinvoke $r3.<android.util.ArrayMap: void putAll(android.util.ArrayMap)>($r2);

        $r4 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        virtualinvoke $r4.<android.util.ArrayMap: void clear()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void reportPowerSaveWhitelistChangedLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateWhitelistAppIdsLocked()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void writeConfigFileLocked()>();

        exitmonitor r0;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public boolean restoreSystemPowerWhitelistAppInternal(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        android.util.ArrayMap $r1, $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        java.lang.Throwable $r7;
        java.lang.String r8;

        r0 := @this: com.android.server.DeviceIdleController;

        r8 := @parameter0: java.lang.String;

        entermonitor r0;

     label1:
        $r1 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        $z0 = virtualinvoke $r1.<android.util.ArrayMap: boolean containsKey(java.lang.Object)>(r8);

        if $z0 != 0 goto label3;

        exitmonitor r0;

     label2:
        return 0;

     label3:
        $r3 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistApps>;

        $r2 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        $r4 = virtualinvoke $r2.<android.util.ArrayMap: java.lang.Object remove(java.lang.Object)>(r8);

        $r5 = (java.lang.Integer) $r4;

        virtualinvoke $r3.<android.util.ArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r5);

        specialinvoke r0.<com.android.server.DeviceIdleController: void reportPowerSaveWhitelistChangedLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateWhitelistAppIdsLocked()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void writeConfigFileLocked()>();

        exitmonitor r0;

     label4:
        return 1;

     label5:
        $r7 := @caughtexception;

     label6:
        exitmonitor r0;

     label7:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label5;
        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label6 to label7 with label5;
    }

    void scheduleAlarmLocked(long, boolean)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0, $z1;
        int i0;
        com.android.server.DeviceIdleController$MyHandler $r1, $r4;
        android.app.AlarmManager$OnAlarmListener $r2, $r5;
        android.app.AlarmManager $r3, $r6;
        android.hardware.Sensor $r7;
        long l1, $l2, l3;

        r0 := @this: com.android.server.DeviceIdleController;

        l1 := @parameter0: long;

        z0 := @parameter1: boolean;

        $z1 = r0.<com.android.server.DeviceIdleController: boolean mUseMotionSensor>;

        if $z1 == 0 goto label1;

        $r7 = r0.<com.android.server.DeviceIdleController: android.hardware.Sensor mMotionSensor>;

        if $r7 != null goto label1;

        i0 = r0.<com.android.server.DeviceIdleController: int mState>;

        if i0 == 7 goto label1;

        if i0 == 5 goto label1;

        if i0 == 6 goto label1;

        return;

     label1:
        $l2 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l3 = $l2 + l1;

        r0.<com.android.server.DeviceIdleController: long mNextAlarmTime> = l3;

        if z0 == 0 goto label2;

        $r6 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $r5 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mDeepAlarmListener>;

        $r4 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r6.<android.app.AlarmManager: void setIdleUntil(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>(2, l3, "DeviceIdleController.deep", $r5, $r4);

        goto label3;

     label2:
        $r3 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $r2 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mDeepAlarmListener>;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r3.<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>(2, l3, "DeviceIdleController.deep", $r2, $r1);

     label3:
        return;
    }

    void scheduleLightAlarmLocked(long)
    {
        com.android.server.DeviceIdleController r0;
        long $l0, l1, l2;
        com.android.server.DeviceIdleController$MyHandler $r1;
        android.app.AlarmManager$OnAlarmListener $r2;
        android.app.AlarmManager $r3;

        r0 := @this: com.android.server.DeviceIdleController;

        l1 := @parameter0: long;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l2 = $l0 + l1;

        r0.<com.android.server.DeviceIdleController: long mNextLightAlarmTime> = l2;

        $r3 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $r2 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mLightAlarmListener>;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r3.<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>(2, l2, "DeviceIdleController.light", $r2, $r1);

        return;
    }

    void scheduleReportActiveLocked(java.lang.String, int)
    {
        com.android.server.DeviceIdleController r0;
        int i0;
        com.android.server.DeviceIdleController$MyHandler $r1, $r2;
        java.lang.String r3;
        android.os.Message r4;

        r0 := @this: com.android.server.DeviceIdleController;

        r3 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        r4 = virtualinvoke $r1.<com.android.server.DeviceIdleController$MyHandler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>(5, i0, 0, r3);

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r2.<com.android.server.DeviceIdleController$MyHandler: boolean sendMessage(android.os.Message)>(r4);

        return;
    }

    void scheduleSensingTimeoutAlarmLocked(long)
    {
        com.android.server.DeviceIdleController r0;
        long $l0, l1, l2;
        com.android.server.DeviceIdleController$MyHandler $r1;
        android.app.AlarmManager$OnAlarmListener $r2;
        android.app.AlarmManager $r3;

        r0 := @this: com.android.server.DeviceIdleController;

        l1 := @parameter0: long;

        $l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        l2 = $l0 + l1;

        r0.<com.android.server.DeviceIdleController: long mNextSensingTimeoutAlarmTime> = l2;

        $r3 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager mAlarmManager>;

        $r2 = r0.<com.android.server.DeviceIdleController: android.app.AlarmManager$OnAlarmListener mSensingTimeoutAlarmListener>;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r3.<android.app.AlarmManager: void set(int,long,java.lang.String,android.app.AlarmManager$OnAlarmListener,android.os.Handler)>(2, l2, "DeviceIdleController.sensing", $r2, $r1);

        return;
    }

    void setActiveIdleOpsForTest(int)
    {
        com.android.server.DeviceIdleController r0;
        int i0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        r0.<com.android.server.DeviceIdleController: int mActiveIdleOpCount> = i0;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setAlarmsActive(boolean)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<com.android.server.DeviceIdleController: boolean mAlarmsActive> = z0;

     label2:
        if z0 != 0 goto label4;

     label3:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void exitMaintenanceEarlyIfNeededLocked()>();

     label4:
        exitmonitor r0;

     label5:
        return;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void setDeepEnabledForTest(boolean)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled> = z0;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setIdleStartTimeForTest(long)
    {
        com.android.server.DeviceIdleController r0;
        long l0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        l0 := @parameter0: long;

        entermonitor r0;

     label1:
        r0.<com.android.server.DeviceIdleController: long mIdleStartTime> = l0;

        specialinvoke r0.<com.android.server.DeviceIdleController: void maybeDoImmediateMaintenance()>();

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setJobsActive(boolean)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<com.android.server.DeviceIdleController: boolean mJobsActive> = z0;

     label2:
        if z0 != 0 goto label4;

     label3:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void exitMaintenanceEarlyIfNeededLocked()>();

     label4:
        exitmonitor r0;

     label5:
        return;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label6;
        catch java.lang.Throwable from label3 to label4 with label6;
        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    void setLightEnabledForTest(boolean)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        z0 := @parameter0: boolean;

        entermonitor r0;

     label1:
        r0.<com.android.server.DeviceIdleController: boolean mLightEnabled> = z0;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    void setLightStateForTest(int)
    {
        com.android.server.DeviceIdleController r0;
        int i0;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        entermonitor r0;

     label1:
        r0.<com.android.server.DeviceIdleController: int mLightState> = i0;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r2 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r2;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    int setPreIdleTimeoutFactor(float)
    {
        com.android.server.DeviceIdleController r0;
        float f0, $f1, $f2, $f3, $f4;
        boolean $z0;
        byte $b0, $b1;
        java.lang.Throwable $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        f0 := @parameter0: float;

        $z0 = r0.<com.android.server.DeviceIdleController: boolean mDeepEnabled>;

        if $z0 != 0 goto label1;

        return 2;

     label1:
        $b0 = f0 cmpg 0.05F;

        if $b0 > 0 goto label2;

        return 3;

     label2:
        $f1 = r0.<com.android.server.DeviceIdleController: float mPreIdleFactor>;

        $f2 = f0 - $f1;

        $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2);

        $b1 = $f3 cmpg 0.05F;

        if $b1 >= 0 goto label3;

        return 0;

     label3:
        entermonitor r0;

     label4:
        $f4 = r0.<com.android.server.DeviceIdleController: float mPreIdleFactor>;

        r0.<com.android.server.DeviceIdleController: float mLastPreIdleFactor> = $f4;

        r0.<com.android.server.DeviceIdleController: float mPreIdleFactor> = f0;

        exitmonitor r0;

     label5:
        specialinvoke r0.<com.android.server.DeviceIdleController: void postUpdatePreIdleFactor()>();

        return 1;

     label6:
        $r2 := @caughtexception;

     label7:
        exitmonitor r0;

     label8:
        throw $r2;

        catch java.lang.Throwable from label4 to label5 with label6;
        catch java.lang.Throwable from label7 to label8 with label6;
    }

    int setPreIdleTimeoutMode(int)
    {
        com.android.server.DeviceIdleController r0;
        int i0, $i1;
        float $f0;

        r0 := @this: com.android.server.DeviceIdleController;

        i0 := @parameter0: int;

        $f0 = virtualinvoke r0.<com.android.server.DeviceIdleController: float getPreIdleTimeoutByMode(int)>(i0);

        $i1 = virtualinvoke r0.<com.android.server.DeviceIdleController: int setPreIdleTimeoutFactor(float)>($f0);

        return $i1;
    }

    void startMonitoringMotionLocked()
    {
        com.android.server.DeviceIdleController r0;
        android.hardware.Sensor $r1;
        com.android.server.DeviceIdleController$MotionListener $r2, $r3;
        boolean $z0;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.hardware.Sensor mMotionSensor>;

        if $r1 == null goto label1;

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MotionListener mMotionListener>;

        $z0 = $r2.<com.android.server.DeviceIdleController$MotionListener: boolean active>;

        if $z0 != 0 goto label1;

        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MotionListener mMotionListener>;

        virtualinvoke $r3.<com.android.server.DeviceIdleController$MotionListener: boolean registerLocked()>();

     label1:
        return;
    }

    void stepIdleStateLocked(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        java.lang.String r1;
        android.location.LocationManager r2;
        long l0, $l4, $l5, $l6, $l7, $l8, $l9, $l10, $l12, $l13, $l15, l18, $l19, $l20, $l21, $l22, $l23, $l24, $l25, $l26, l27, $l28, l30;
        boolean $z0, $z3, $z4, $z5, $z6, $z7;
        int $i1, $i2, $i3, $i14, $i16, $i17;
        android.os.PowerManager$WakeLock $r3, $r6;
        com.android.server.DeviceIdleController$MyHandler $r4, $r10, $r16, $r20;
        com.android.server.DeviceIdleController$Constants $r5, $r7, $r8, $r9, $r11, $r13, $r25, $r27, $r28, $r29, $r30, $r31, $r32;
        float $f0, $f1, $f2, $f3, $f4, $f5, $f6, $f7, $f8;
        byte $b11, $b29;
        com.android.server.AnyMotionDetector $r12, $r24, $r26;
        com.android.server.DeviceIdleController$Injector $r14;
        android.location.LocationProvider $r15, $r19;
        android.location.LocationListener $r17, $r22;
        android.os.Looper $r18, $r23;
        android.location.LocationRequest $r21;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: java.lang.String;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleStep()>();

        $z0 = specialinvoke r0.<com.android.server.DeviceIdleController: boolean isUpcomingAlarmClock()>();

        if $z0 == 0 goto label02;

        $i16 = r0.<com.android.server.DeviceIdleController: int mState>;

        if $i16 == 0 goto label01;

        r0.<com.android.server.DeviceIdleController: int mActiveReason> = 7;

        $i17 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeActiveLocked(java.lang.String,int)>("alarm", $i17);

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeInactiveIfAppropriateLocked()>();

     label01:
        return;

     label02:
        $i1 = r0.<com.android.server.DeviceIdleController: int mNumBlockingConstraints>;

        if $i1 == 0 goto label03;

        $z6 = r0.<com.android.server.DeviceIdleController: boolean mForceIdle>;

        if $z6 != 0 goto label03;

        return;

     label03:
        $i2 = r0.<com.android.server.DeviceIdleController: int mState>;

        tableswitch($i2)
        {
            case 1: goto label20;
            case 2: goto label07;
            case 3: goto label10;
            case 4: goto label15;
            case 5: goto label05;
            case 6: goto label17;
            case 7: goto label16;
            default: goto label04;
        };

     label04:
        goto label22;

     label05:
        r0.<com.android.server.DeviceIdleController: int mActiveIdleOpCount> = 1;

        $r6 = r0.<com.android.server.DeviceIdleController: android.os.PowerManager$WakeLock mActiveIdleWakeLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void acquire()>();

        $l5 = r0.<com.android.server.DeviceIdleController: long mNextIdlePendingDelay>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleAlarmLocked(long,boolean)>($l5, 0);

        $l6 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.DeviceIdleController: long mMaintenanceStartTime> = $l6;

        $r7 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l9 = $r7.<com.android.server.DeviceIdleController$Constants: long MAX_IDLE_PENDING_TIMEOUT>;

        $l7 = r0.<com.android.server.DeviceIdleController: long mNextIdlePendingDelay>;

        $f1 = (float) $l7;

        $r8 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $f0 = $r8.<com.android.server.DeviceIdleController$Constants: float IDLE_PENDING_FACTOR>;

        $f2 = $f1 * $f0;

        $l8 = (long) $f2;

        l18 = staticinvoke <java.lang.Math: long min(long,long)>($l9, $l8);

        r0.<com.android.server.DeviceIdleController: long mNextIdlePendingDelay> = l18;

        $r9 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l10 = $r9.<com.android.server.DeviceIdleController$Constants: long IDLE_PENDING_TIMEOUT>;

        $b11 = l18 cmp $l10;

        if $b11 >= 0 goto label06;

        $r11 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l12 = $r11.<com.android.server.DeviceIdleController$Constants: long IDLE_PENDING_TIMEOUT>;

        r0.<com.android.server.DeviceIdleController: long mNextIdlePendingDelay> = $l12;

     label06:
        specialinvoke r0.<com.android.server.DeviceIdleController: void moveToStateLocked(int,java.lang.String)>(6, r1);

        specialinvoke r0.<com.android.server.DeviceIdleController: void addEvent(int,java.lang.String)>(5, null);

        $r10 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r10.<com.android.server.DeviceIdleController$MyHandler: boolean sendEmptyMessage(int)>(4);

        goto label22;

     label07:
        specialinvoke r0.<com.android.server.DeviceIdleController: void moveToStateLocked(int,java.lang.String)>(3, r1);

        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelLocatingLocked()>();

        r0.<com.android.server.DeviceIdleController: boolean mLocated> = 0;

        r0.<com.android.server.DeviceIdleController: android.location.Location mLastGenericLocation> = null;

        r0.<com.android.server.DeviceIdleController: android.location.Location mLastGpsLocation> = null;

        specialinvoke r0.<com.android.server.DeviceIdleController: void updateActiveConstraintsLocked()>();

        $z3 = r0.<com.android.server.DeviceIdleController: boolean mUseMotionSensor>;

        if $z3 == 0 goto label08;

        $r24 = r0.<com.android.server.DeviceIdleController: com.android.server.AnyMotionDetector mAnyMotionDetector>;

        $z4 = virtualinvoke $r24.<com.android.server.AnyMotionDetector: boolean hasSensor()>();

        if $z4 == 0 goto label08;

        $r25 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l15 = $r25.<com.android.server.DeviceIdleController$Constants: long SENSING_TIMEOUT>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleSensingTimeoutAlarmLocked(long)>($l15);

        r0.<com.android.server.DeviceIdleController: boolean mNotMoving> = 0;

        $r26 = r0.<com.android.server.DeviceIdleController: com.android.server.AnyMotionDetector mAnyMotionDetector>;

        virtualinvoke $r26.<com.android.server.AnyMotionDetector: void checkForAnyMotion()>();

        goto label22;

     label08:
        $i14 = r0.<com.android.server.DeviceIdleController: int mNumBlockingConstraints>;

        if $i14 == 0 goto label09;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelAlarmLocked()>();

        goto label22;

     label09:
        r0.<com.android.server.DeviceIdleController: boolean mNotMoving> = 1;

     label10:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelSensingTimeoutAlarmLocked()>();

        specialinvoke r0.<com.android.server.DeviceIdleController: void moveToStateLocked(int,java.lang.String)>(4, r1);

        $r13 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l13 = $r13.<com.android.server.DeviceIdleController$Constants: long LOCATING_TIMEOUT>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleAlarmLocked(long,boolean)>($l13, 0);

        $r14 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        r2 = virtualinvoke $r14.<com.android.server.DeviceIdleController$Injector: android.location.LocationManager getLocationManager()>();

        if r2 == null goto label11;

        $r19 = virtualinvoke r2.<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>("network");

        if $r19 == null goto label11;

        $r21 = r0.<com.android.server.DeviceIdleController: android.location.LocationRequest mLocationRequest>;

        $r22 = r0.<com.android.server.DeviceIdleController: android.location.LocationListener mGenericLocationListener>;

        $r20 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        $r23 = virtualinvoke $r20.<com.android.server.DeviceIdleController$MyHandler: android.os.Looper getLooper()>();

        virtualinvoke r2.<android.location.LocationManager: void requestLocationUpdates(android.location.LocationRequest,android.location.LocationListener,android.os.Looper)>($r21, $r22, $r23);

        r0.<com.android.server.DeviceIdleController: boolean mLocating> = 1;

        goto label12;

     label11:
        r0.<com.android.server.DeviceIdleController: boolean mHasNetworkLocation> = 0;

     label12:
        if r2 == null goto label13;

        $r15 = virtualinvoke r2.<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>("gps");

        if $r15 == null goto label13;

        r0.<com.android.server.DeviceIdleController: boolean mHasGps> = 1;

        $r17 = r0.<com.android.server.DeviceIdleController: android.location.LocationListener mGpsLocationListener>;

        $r16 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        $r18 = virtualinvoke $r16.<com.android.server.DeviceIdleController$MyHandler: android.os.Looper getLooper()>();

        virtualinvoke r2.<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>("gps", 1000L, 5.0F, $r17, $r18);

        r0.<com.android.server.DeviceIdleController: boolean mLocating> = 1;

        goto label14;

     label13:
        r0.<com.android.server.DeviceIdleController: boolean mHasGps> = 0;

     label14:
        $z7 = r0.<com.android.server.DeviceIdleController: boolean mLocating>;

        if $z7 == 0 goto label15;

        goto label22;

     label15:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelAlarmLocked()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelLocatingLocked()>();

        $r12 = r0.<com.android.server.DeviceIdleController: com.android.server.AnyMotionDetector mAnyMotionDetector>;

        virtualinvoke $r12.<com.android.server.AnyMotionDetector: void stop()>();

     label16:
        $r28 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l19 = $r28.<com.android.server.DeviceIdleController$Constants: long IDLE_PENDING_TIMEOUT>;

        r0.<com.android.server.DeviceIdleController: long mNextIdlePendingDelay> = $l19;

        $r29 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l20 = $r29.<com.android.server.DeviceIdleController$Constants: long IDLE_TIMEOUT>;

        r0.<com.android.server.DeviceIdleController: long mNextIdleDelay> = $l20;

     label17:
        $l21 = r0.<com.android.server.DeviceIdleController: long mNextIdleDelay>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleAlarmLocked(long,boolean)>($l21, 1);

        $l22 = r0.<com.android.server.DeviceIdleController: long mNextIdleDelay>;

        $f6 = (float) $l22;

        $r30 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $f7 = $r30.<com.android.server.DeviceIdleController$Constants: float IDLE_FACTOR>;

        $f8 = $f6 * $f7;

        $l23 = (long) $f8;

        r0.<com.android.server.DeviceIdleController: long mNextIdleDelay> = $l23;

        $l24 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.DeviceIdleController: long mIdleStartTime> = $l24;

        $l25 = r0.<com.android.server.DeviceIdleController: long mNextIdleDelay>;

        $r31 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l26 = $r31.<com.android.server.DeviceIdleController$Constants: long MAX_IDLE_TIMEOUT>;

        l27 = staticinvoke <java.lang.Math: long min(long,long)>($l25, $l26);

        r0.<com.android.server.DeviceIdleController: long mNextIdleDelay> = l27;

        $r32 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l28 = $r32.<com.android.server.DeviceIdleController$Constants: long IDLE_TIMEOUT>;

        $b29 = l27 cmp $l28;

        if $b29 >= 0 goto label18;

        $r5 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l4 = $r5.<com.android.server.DeviceIdleController$Constants: long IDLE_TIMEOUT>;

        r0.<com.android.server.DeviceIdleController: long mNextIdleDelay> = $l4;

     label18:
        specialinvoke r0.<com.android.server.DeviceIdleController: void moveToStateLocked(int,java.lang.String)>(5, r1);

        $i3 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i3 == 7 goto label19;

        r0.<com.android.server.DeviceIdleController: int mLightState> = 7;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void cancelLightAlarmLocked()>();

     label19:
        specialinvoke r0.<com.android.server.DeviceIdleController: void addEvent(int,java.lang.String)>(4, null);

        $r3 = r0.<com.android.server.DeviceIdleController: android.os.PowerManager$WakeLock mGoingIdleWakeLock>;

        virtualinvoke $r3.<android.os.PowerManager$WakeLock: void acquire()>();

        $r4 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r4.<com.android.server.DeviceIdleController$MyHandler: boolean sendEmptyMessage(int)>(2);

        goto label22;

     label20:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void startMonitoringMotionLocked()>();

        $r27 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        l0 = $r27.<com.android.server.DeviceIdleController$Constants: long IDLE_AFTER_INACTIVE_TIMEOUT>;

        l30 = l0;

        $z5 = specialinvoke r0.<com.android.server.DeviceIdleController: boolean shouldUseIdleTimeoutFactorLocked()>();

        if $z5 == 0 goto label21;

        $f4 = r0.<com.android.server.DeviceIdleController: float mPreIdleFactor>;

        $f3 = (float) l0;

        $f5 = $f4 * $f3;

        l30 = (long) $f5;

     label21:
        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleAlarmLocked(long,boolean)>(l30, 0);

        specialinvoke r0.<com.android.server.DeviceIdleController: void moveToStateLocked(int,java.lang.String)>(2, r1);

     label22:
        return;
    }

    void stepLightIdleStateLocked(java.lang.String)
    {
        com.android.server.DeviceIdleController r0;
        java.lang.String r1;
        int i0, $i1, $i27;
        com.android.server.DeviceIdleController$Constants $r2, $r3, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r17, $r18, $r19;
        long $l2, $l3, $l4, $l5, $l6, $l7, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17, $l18, $l19, $l20, $l22, $l23, $l25, $l26, $l28, $l29, $l30, l32, $l33, $l34, $l35, $l36, l37, $l38;
        boolean $z0, $z2;
        android.os.PowerManager$WakeLock $r4, $r11;
        com.android.server.DeviceIdleController$MyHandler $r5, $r16;
        byte $b8, $b21, $b24, $b31, $b39;
        float $f0, $f1, $f2;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: java.lang.String;

        $i1 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i1 != 7 goto label01;

        return;

     label01:
        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleLightStep()>();

        i0 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if i0 == 1 goto label07;

        if i0 == 3 goto label08;

        if i0 == 4 goto label02;

        if i0 == 5 goto label02;

        if i0 == 6 goto label08;

        goto label12;

     label02:
        $z2 = r0.<com.android.server.DeviceIdleController: boolean mNetworkConnected>;

        if $z2 != 0 goto label04;

        $i27 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i27 != 5 goto label03;

        goto label04;

     label03:
        $l28 = r0.<com.android.server.DeviceIdleController: long mNextLightIdleDelay>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleLightAlarmLocked(long)>($l28);

        r0.<com.android.server.DeviceIdleController: int mLightState> = 5;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleLight(int,java.lang.String)>(5, r1);

        goto label12;

     label04:
        r0.<com.android.server.DeviceIdleController: int mActiveIdleOpCount> = 1;

        $r11 = r0.<com.android.server.DeviceIdleController: android.os.PowerManager$WakeLock mActiveIdleWakeLock>;

        virtualinvoke $r11.<android.os.PowerManager$WakeLock: void acquire()>();

        $l18 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.DeviceIdleController: long mMaintenanceStartTime> = $l18;

        $l20 = r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget>;

        $r12 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l19 = $r12.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_MAINTENANCE_MIN_BUDGET>;

        $b21 = $l20 cmp $l19;

        if $b21 >= 0 goto label05;

        $r15 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l26 = $r15.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_MAINTENANCE_MIN_BUDGET>;

        r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget> = $l26;

        goto label06;

     label05:
        $l23 = r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget>;

        $r13 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l22 = $r13.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_MAINTENANCE_MAX_BUDGET>;

        $b24 = $l23 cmp $l22;

        if $b24 <= 0 goto label06;

        $r14 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l25 = $r14.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_MAINTENANCE_MAX_BUDGET>;

        r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget> = $l25;

     label06:
        $l29 = r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleLightAlarmLocked(long)>($l29);

        r0.<com.android.server.DeviceIdleController: int mLightState> = 6;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleLight(int,java.lang.String)>(6, r1);

        specialinvoke r0.<com.android.server.DeviceIdleController: void addEvent(int,java.lang.String)>(3, null);

        $r16 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r16.<com.android.server.DeviceIdleController$MyHandler: boolean sendEmptyMessage(int)>(4);

        goto label12;

     label07:
        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l2 = $r2.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_MAINTENANCE_MIN_BUDGET>;

        r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget> = $l2;

        $r3 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l3 = $r3.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_TIMEOUT>;

        r0.<com.android.server.DeviceIdleController: long mNextLightIdleDelay> = $l3;

        r0.<com.android.server.DeviceIdleController: long mMaintenanceStartTime> = 0L;

        $z0 = virtualinvoke r0.<com.android.server.DeviceIdleController: boolean isOpsInactiveLocked()>();

        if $z0 != 0 goto label08;

        r0.<com.android.server.DeviceIdleController: int mLightState> = 3;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleLight(int,java.lang.String)>(3, r1);

        $r10 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l17 = $r10.<com.android.server.DeviceIdleController$Constants: long LIGHT_PRE_IDLE_TIMEOUT>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleLightAlarmLocked(long)>($l17);

        goto label12;

     label08:
        $l30 = r0.<com.android.server.DeviceIdleController: long mMaintenanceStartTime>;

        $b31 = $l30 cmp 0L;

        if $b31 == 0 goto label10;

        $l5 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        $l6 = r0.<com.android.server.DeviceIdleController: long mMaintenanceStartTime>;

        l32 = $l5 - $l6;

        $r7 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l7 = $r7.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_MAINTENANCE_MIN_BUDGET>;

        $b8 = l32 cmp $l7;

        if $b8 >= 0 goto label09;

        $l15 = r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget>;

        $r9 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l13 = $r9.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_MAINTENANCE_MIN_BUDGET>;

        $l14 = $l13 - l32;

        $l16 = $l15 + $l14;

        r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget> = $l16;

        goto label10;

     label09:
        $l11 = r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget>;

        $r8 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l9 = $r8.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_MAINTENANCE_MIN_BUDGET>;

        $l10 = l32 - $l9;

        $l12 = $l11 - $l10;

        r0.<com.android.server.DeviceIdleController: long mCurLightIdleBudget> = $l12;

     label10:
        r0.<com.android.server.DeviceIdleController: long mMaintenanceStartTime> = 0L;

        $l33 = r0.<com.android.server.DeviceIdleController: long mNextLightIdleDelay>;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void scheduleLightAlarmLocked(long)>($l33);

        $r17 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l34 = $r17.<com.android.server.DeviceIdleController$Constants: long LIGHT_MAX_IDLE_TIMEOUT>;

        $l35 = r0.<com.android.server.DeviceIdleController: long mNextLightIdleDelay>;

        $f0 = (float) $l35;

        $r18 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $f1 = $r18.<com.android.server.DeviceIdleController$Constants: float LIGHT_IDLE_FACTOR>;

        $f2 = $f0 * $f1;

        $l36 = (long) $f2;

        l37 = staticinvoke <java.lang.Math: long min(long,long)>($l34, $l36);

        r0.<com.android.server.DeviceIdleController: long mNextLightIdleDelay> = l37;

        $r19 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l38 = $r19.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_TIMEOUT>;

        $b39 = l37 cmp $l38;

        if $b39 >= 0 goto label11;

        $r6 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $l4 = $r6.<com.android.server.DeviceIdleController$Constants: long LIGHT_IDLE_TIMEOUT>;

        r0.<com.android.server.DeviceIdleController: long mNextLightIdleDelay> = $l4;

     label11:
        r0.<com.android.server.DeviceIdleController: int mLightState> = 4;

        staticinvoke <com.android.server.EventLogTags: void writeDeviceIdleLight(int,java.lang.String)>(4, r1);

        specialinvoke r0.<com.android.server.DeviceIdleController: void addEvent(int,java.lang.String)>(2, null);

        $r4 = r0.<com.android.server.DeviceIdleController: android.os.PowerManager$WakeLock mGoingIdleWakeLock>;

        virtualinvoke $r4.<android.os.PowerManager$WakeLock: void acquire()>();

        $r5 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r5.<com.android.server.DeviceIdleController$MyHandler: boolean sendEmptyMessage(int)>(3);

     label12:
        return;
    }

    void updateChargingLocked(boolean)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0, $z1, $z2, $z3;
        int $i0;

        r0 := @this: com.android.server.DeviceIdleController;

        z0 := @parameter0: boolean;

        if z0 != 0 goto label1;

        $z2 = r0.<com.android.server.DeviceIdleController: boolean mCharging>;

        if $z2 == 0 goto label1;

        r0.<com.android.server.DeviceIdleController: boolean mCharging> = 0;

        $z3 = r0.<com.android.server.DeviceIdleController: boolean mForceIdle>;

        if $z3 != 0 goto label2;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeInactiveIfAppropriateLocked()>();

        goto label2;

     label1:
        if z0 == 0 goto label2;

        r0.<com.android.server.DeviceIdleController: boolean mCharging> = z0;

        $z1 = r0.<com.android.server.DeviceIdleController: boolean mForceIdle>;

        if $z1 != 0 goto label2;

        r0.<com.android.server.DeviceIdleController: int mActiveReason> = 3;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeActiveLocked(java.lang.String,int)>("charging", $i0);

     label2:
        return;
    }

    void updateConnectivityState(android.content.Intent)
    {
        com.android.server.DeviceIdleController r0;
        int i0, $i1, $i2;
        com.android.server.DeviceIdleController$Injector $r1;
        boolean $z0, z1, $z2;
        java.lang.Throwable $r2, $r3;
        android.content.Intent r4;
        android.net.ConnectivityManager r5;
        android.net.NetworkInfo r6;

        r0 := @this: com.android.server.DeviceIdleController;

        r4 := @parameter0: android.content.Intent;

        entermonitor r0;

     label01:
        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Injector mInjector>;

        r5 = virtualinvoke $r1.<com.android.server.DeviceIdleController$Injector: android.net.ConnectivityManager getConnectivityManager()>();

        exitmonitor r0;

     label02:
        if r5 != null goto label03;

        return;

     label03:
        r6 = virtualinvoke r5.<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>();

        entermonitor r0;

        if r6 != null goto label04;

        z1 = 0;

        goto label10;

     label04:
        if r4 != null goto label07;

     label05:
        z1 = virtualinvoke r6.<android.net.NetworkInfo: boolean isConnected()>();

     label06:
        goto label10;

     label07:
        i0 = virtualinvoke r4.<android.content.Intent: int getIntExtra(java.lang.String,int)>("networkType", -1);

        $i1 = virtualinvoke r6.<android.net.NetworkInfo: int getType()>();

        if $i1 == i0 goto label09;

        exitmonitor r0;

     label08:
        return;

     label09:
        $z0 = virtualinvoke r4.<android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)>("noConnectivity", 0);

        z1 = $z0 ^ 1;

     label10:
        $z2 = r0.<com.android.server.DeviceIdleController: boolean mNetworkConnected>;

        if z1 == $z2 goto label13;

        r0.<com.android.server.DeviceIdleController: boolean mNetworkConnected> = z1;

     label11:
        if z1 == 0 goto label13;

     label12:
        $i2 = r0.<com.android.server.DeviceIdleController: int mLightState>;

        if $i2 != 5 goto label13;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void stepLightIdleStateLocked(java.lang.String)>("network");

     label13:
        exitmonitor r0;

     label14:
        return;

     label15:
        $r2 := @caughtexception;

     label16:
        exitmonitor r0;

     label17:
        throw $r2;

     label18:
        $r3 := @caughtexception;

     label19:
        exitmonitor r0;

     label20:
        throw $r3;

        catch java.lang.Throwable from label01 to label02 with label18;
        catch java.lang.Throwable from label05 to label06 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label10 to label11 with label15;
        catch java.lang.Throwable from label12 to label13 with label15;
        catch java.lang.Throwable from label13 to label14 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
        catch java.lang.Throwable from label19 to label20 with label18;
    }

    void updateInteractivityLocked()
    {
        com.android.server.DeviceIdleController r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        android.os.PowerManager $r1;
        int $i0;
        com.android.server.DeviceIdleController$Constants $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: android.os.PowerManager mPowerManager>;

        z0 = virtualinvoke $r1.<android.os.PowerManager: boolean isInteractive()>();

        if z0 != 0 goto label1;

        $z4 = r0.<com.android.server.DeviceIdleController: boolean mScreenOn>;

        if $z4 == 0 goto label1;

        r0.<com.android.server.DeviceIdleController: boolean mScreenOn> = 0;

        $z5 = r0.<com.android.server.DeviceIdleController: boolean mForceIdle>;

        if $z5 != 0 goto label3;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeInactiveIfAppropriateLocked()>();

        goto label3;

     label1:
        if z0 == 0 goto label3;

        r0.<com.android.server.DeviceIdleController: boolean mScreenOn> = 1;

        $z1 = r0.<com.android.server.DeviceIdleController: boolean mForceIdle>;

        if $z1 != 0 goto label3;

        $z2 = r0.<com.android.server.DeviceIdleController: boolean mScreenLocked>;

        if $z2 == 0 goto label2;

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$Constants mConstants>;

        $z3 = $r2.<com.android.server.DeviceIdleController$Constants: boolean WAIT_FOR_UNLOCK>;

        if $z3 != 0 goto label3;

     label2:
        r0.<com.android.server.DeviceIdleController: int mActiveReason> = 2;

        $i0 = staticinvoke <android.os.Process: int myUid()>();

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeActiveLocked(java.lang.String,int)>("screen", $i0);

     label3:
        return;
    }

    void updateQuickDozeFlagLocked(boolean)
    {
        com.android.server.DeviceIdleController r0;
        boolean z0, z1;
        int i0;

        r0 := @this: com.android.server.DeviceIdleController;

        z0 := @parameter0: boolean;

        r0.<com.android.server.DeviceIdleController: boolean mQuickDozeActivated> = z0;

        if z0 == 0 goto label2;

        i0 = r0.<com.android.server.DeviceIdleController: int mState>;

        if i0 == 5 goto label1;

        if i0 != 6 goto label2;

     label1:
        z1 = 1;

        goto label3;

     label2:
        z1 = 0;

     label3:
        r0.<com.android.server.DeviceIdleController: boolean mQuickDozeActivatedWhileIdling> = z1;

        if z0 == 0 goto label4;

        virtualinvoke r0.<com.android.server.DeviceIdleController: void becomeInactiveIfAppropriateLocked()>();

     label4:
        return;
    }

    void writeConfigFileLocked()
    {
        com.android.server.DeviceIdleController r0;
        com.android.server.DeviceIdleController$MyHandler $r1, $r2;

        r0 := @this: com.android.server.DeviceIdleController;

        $r1 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r1.<com.android.server.DeviceIdleController$MyHandler: void removeMessages(int)>(1);

        $r2 = r0.<com.android.server.DeviceIdleController: com.android.server.DeviceIdleController$MyHandler mHandler>;

        virtualinvoke $r2.<com.android.server.DeviceIdleController$MyHandler: boolean sendEmptyMessageDelayed(int,long)>(1, 5000L);

        return;
    }

    void writeConfigFileLocked(org.xmlpull.v1.XmlSerializer) throws java.io.IOException
    {
        com.android.server.DeviceIdleController r0;
        org.xmlpull.v1.XmlSerializer r1;
        java.lang.String r2, $r11;
        java.lang.Boolean $r3;
        android.util.ArrayMap $r5, $r6, $r9, $r14;
        int $i0, $i1, i2, i3;
        java.lang.Object $r10, $r15;

        r0 := @this: com.android.server.DeviceIdleController;

        r1 := @parameter0: org.xmlpull.v1.XmlSerializer;

        $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>(null, $r3);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "config");

        i2 = 0;

     label1:
        $r5 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $i0 = virtualinvoke $r5.<android.util.ArrayMap: int size()>();

        if i2 >= $i0 goto label2;

        $r14 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mPowerSaveWhitelistUserApps>;

        $r15 = virtualinvoke $r14.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i2);

        r2 = (java.lang.String) $r15;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "wl");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "n", r2);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "wl");

        i2 = i2 + 1;

        goto label1;

     label2:
        i3 = 0;

     label3:
        $r6 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        $i1 = virtualinvoke $r6.<android.util.ArrayMap: int size()>();

        if i3 >= $i1 goto label4;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>(null, "un-wl");

        $r9 = r0.<com.android.server.DeviceIdleController: android.util.ArrayMap mRemovedFromSystemWhitelistApps>;

        $r10 = virtualinvoke $r9.<android.util.ArrayMap: java.lang.Object keyAt(int)>(i3);

        $r11 = (java.lang.String) $r10;

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>(null, "n", $r11);

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "un-wl");

        i3 = i3 + 1;

        goto label3;

     label4:
        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>(null, "config");

        interfaceinvoke r1.<org.xmlpull.v1.XmlSerializer: void endDocument()>();

        return;
    }

    public static void <clinit>()
    {
        <com.android.server.DeviceIdleController: java.lang.String TAG> = "DeviceIdleController";

        <com.android.server.DeviceIdleController: int STATE_SENSING> = 3;

        <com.android.server.DeviceIdleController: int STATE_QUICK_DOZE_DELAY> = 7;

        <com.android.server.DeviceIdleController: int STATE_LOCATING> = 4;

        <com.android.server.DeviceIdleController: int STATE_INACTIVE> = 1;

        <com.android.server.DeviceIdleController: int STATE_IDLE_PENDING> = 2;

        <com.android.server.DeviceIdleController: int STATE_IDLE_MAINTENANCE> = 6;

        <com.android.server.DeviceIdleController: int STATE_IDLE> = 5;

        <com.android.server.DeviceIdleController: int STATE_ACTIVE> = 0;

        <com.android.server.DeviceIdleController: int SET_IDLE_FACTOR_RESULT_UNINIT> = -1;

        <com.android.server.DeviceIdleController: int SET_IDLE_FACTOR_RESULT_OK> = 1;

        <com.android.server.DeviceIdleController: int SET_IDLE_FACTOR_RESULT_NOT_SUPPORT> = 2;

        <com.android.server.DeviceIdleController: int SET_IDLE_FACTOR_RESULT_INVALID> = 3;

        <com.android.server.DeviceIdleController: int SET_IDLE_FACTOR_RESULT_IGNORED> = 0;

        <com.android.server.DeviceIdleController: int MSG_WRITE_CONFIG> = 1;

        <com.android.server.DeviceIdleController: int MSG_UPDATE_PRE_IDLE_TIMEOUT_FACTOR> = 11;

        <com.android.server.DeviceIdleController: int MSG_TEMP_APP_WHITELIST_TIMEOUT> = 6;

        <com.android.server.DeviceIdleController: int MSG_SEND_CONSTRAINT_MONITORING> = 10;

        <com.android.server.DeviceIdleController: int MSG_RESET_PRE_IDLE_TIMEOUT_FACTOR> = 12;

        <com.android.server.DeviceIdleController: int MSG_REPORT_TEMP_APP_WHITELIST_CHANGED> = 9;

        <com.android.server.DeviceIdleController: int MSG_REPORT_STATIONARY_STATUS> = 7;

        <com.android.server.DeviceIdleController: int MSG_REPORT_IDLE_ON_LIGHT> = 3;

        <com.android.server.DeviceIdleController: int MSG_REPORT_IDLE_ON> = 2;

        <com.android.server.DeviceIdleController: int MSG_REPORT_IDLE_OFF> = 4;

        <com.android.server.DeviceIdleController: int MSG_REPORT_ACTIVE> = 5;

        <com.android.server.DeviceIdleController: int MSG_FINISH_IDLE_OP> = 8;

        <com.android.server.DeviceIdleController: long MIN_STATE_STEP_ALARM_CHANGE> = 60000L;

        <com.android.server.DeviceIdleController: float MIN_PRE_IDLE_FACTOR_CHANGE> = 0.05F;

        <com.android.server.DeviceIdleController: int LIGHT_STATE_WAITING_FOR_NETWORK> = 5;

        <com.android.server.DeviceIdleController: int LIGHT_STATE_PRE_IDLE> = 3;

        <com.android.server.DeviceIdleController: int LIGHT_STATE_OVERRIDE> = 7;

        <com.android.server.DeviceIdleController: int LIGHT_STATE_INACTIVE> = 1;

        <com.android.server.DeviceIdleController: int LIGHT_STATE_IDLE_MAINTENANCE> = 6;

        <com.android.server.DeviceIdleController: int LIGHT_STATE_IDLE> = 4;

        <com.android.server.DeviceIdleController: int LIGHT_STATE_ACTIVE> = 0;

        <com.android.server.DeviceIdleController: int EVENT_NULL> = 0;

        <com.android.server.DeviceIdleController: int EVENT_NORMAL> = 1;

        <com.android.server.DeviceIdleController: int EVENT_LIGHT_MAINTENANCE> = 3;

        <com.android.server.DeviceIdleController: int EVENT_LIGHT_IDLE> = 2;

        <com.android.server.DeviceIdleController: int EVENT_DEEP_MAINTENANCE> = 5;

        <com.android.server.DeviceIdleController: int EVENT_DEEP_IDLE> = 4;

        <com.android.server.DeviceIdleController: int EVENT_BUFFER_SIZE> = 100;

        <com.android.server.DeviceIdleController: boolean DEBUG> = 0;

        <com.android.server.DeviceIdleController: boolean COMPRESS_TIME> = 0;

        <com.android.server.DeviceIdleController: int ACTIVE_REASON_UNLOCKED> = 4;

        <com.android.server.DeviceIdleController: int ACTIVE_REASON_UNKNOWN> = 0;

        <com.android.server.DeviceIdleController: int ACTIVE_REASON_SCREEN> = 2;

        <com.android.server.DeviceIdleController: int ACTIVE_REASON_MOTION> = 1;

        <com.android.server.DeviceIdleController: int ACTIVE_REASON_FROM_BINDER_CALL> = 5;

        <com.android.server.DeviceIdleController: int ACTIVE_REASON_FORCED> = 6;

        <com.android.server.DeviceIdleController: int ACTIVE_REASON_CHARGING> = 3;

        <com.android.server.DeviceIdleController: int ACTIVE_REASON_ALARM> = 7;

        return;
    }
}
