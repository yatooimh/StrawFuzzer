public class com.android.server.GestureLauncherService extends com.android.server.SystemService
{
    static final long CAMERA_POWER_DOUBLE_TAP_MAX_TIME_MS;
    private static final boolean DBG;
    private static final boolean DBG_CAMERA_LIFT;
    static final long POWER_SHORT_TAP_SEQUENCE_MAX_INTERVAL_MS;
    private static final java.lang.String TAG;
    private boolean mCameraDoubleTapPowerEnabled;
    private long mCameraGestureLastEventTime;
    private long mCameraGestureOnTimeMs;
    private long mCameraGestureSensor1LastOnTimeMs;
    private long mCameraGestureSensor2LastOnTimeMs;
    private int mCameraLaunchLastEventExtra;
    private boolean mCameraLaunchRegistered;
    private android.hardware.Sensor mCameraLaunchSensor;
    private boolean mCameraLiftRegistered;
    private final com.android.server.GestureLauncherService$CameraLiftTriggerEventListener mCameraLiftTriggerListener;
    private android.hardware.Sensor mCameraLiftTriggerSensor;
    private android.content.Context mContext;
    private final com.android.server.GestureLauncherService$GestureEventListener mGestureListener;
    private long mLastPowerDown;
    private final com.android.internal.logging.MetricsLogger mMetricsLogger;
    private int mPowerButtonConsecutiveTaps;
    private android.os.PowerManager mPowerManager;
    private final android.database.ContentObserver mSettingObserver;
    private int mUserId;
    private final android.content.BroadcastReceiver mUserReceiver;
    private android.os.PowerManager$WakeLock mWakeLock;
    private com.android.server.wm.WindowManagerInternal mWindowManagerInternal;

    public void <init>(android.content.Context)
    {
        com.android.server.GestureLauncherService r0;
        android.content.Context r1;
        com.android.internal.logging.MetricsLogger $r2;

        r0 := @this: com.android.server.GestureLauncherService;

        r1 := @parameter0: android.content.Context;

        $r2 = new com.android.internal.logging.MetricsLogger;

        specialinvoke $r2.<com.android.internal.logging.MetricsLogger: void <init>()>();

        specialinvoke r0.<com.android.server.GestureLauncherService: void <init>(android.content.Context,com.android.internal.logging.MetricsLogger)>(r1, $r2);

        return;
    }

    void <init>(android.content.Context, com.android.internal.logging.MetricsLogger)
    {
        com.android.server.GestureLauncherService r0;
        android.content.Context r1;
        com.android.internal.logging.MetricsLogger r2;
        com.android.server.GestureLauncherService$GestureEventListener $r3;
        com.android.server.GestureLauncherService$CameraLiftTriggerEventListener $r4;
        com.android.server.GestureLauncherService$1 $r5;
        com.android.server.GestureLauncherService$2 $r6;
        android.os.Handler $r7;

        r0 := @this: com.android.server.GestureLauncherService;

        r1 := @parameter0: android.content.Context;

        r2 := @parameter1: com.android.internal.logging.MetricsLogger;

        specialinvoke r0.<com.android.server.SystemService: void <init>(android.content.Context)>(r1);

        $r3 = new com.android.server.GestureLauncherService$GestureEventListener;

        specialinvoke $r3.<com.android.server.GestureLauncherService$GestureEventListener: void <init>(com.android.server.GestureLauncherService,com.android.server.GestureLauncherService$1)>(r0, null);

        r0.<com.android.server.GestureLauncherService: com.android.server.GestureLauncherService$GestureEventListener mGestureListener> = $r3;

        $r4 = new com.android.server.GestureLauncherService$CameraLiftTriggerEventListener;

        specialinvoke $r4.<com.android.server.GestureLauncherService$CameraLiftTriggerEventListener: void <init>(com.android.server.GestureLauncherService,com.android.server.GestureLauncherService$1)>(r0, null);

        r0.<com.android.server.GestureLauncherService: com.android.server.GestureLauncherService$CameraLiftTriggerEventListener mCameraLiftTriggerListener> = $r4;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureOnTimeMs> = 0L;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureLastEventTime> = 0L;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureSensor1LastOnTimeMs> = 0L;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureSensor2LastOnTimeMs> = 0L;

        r0.<com.android.server.GestureLauncherService: int mCameraLaunchLastEventExtra> = 0;

        $r5 = new com.android.server.GestureLauncherService$1;

        specialinvoke $r5.<com.android.server.GestureLauncherService$1: void <init>(com.android.server.GestureLauncherService)>(r0);

        r0.<com.android.server.GestureLauncherService: android.content.BroadcastReceiver mUserReceiver> = $r5;

        $r6 = new com.android.server.GestureLauncherService$2;

        $r7 = new android.os.Handler;

        specialinvoke $r7.<android.os.Handler: void <init>()>();

        specialinvoke $r6.<com.android.server.GestureLauncherService$2: void <init>(com.android.server.GestureLauncherService,android.os.Handler)>(r0, $r7);

        r0.<com.android.server.GestureLauncherService: android.database.ContentObserver mSettingObserver> = $r6;

        r0.<com.android.server.GestureLauncherService: android.content.Context mContext> = r1;

        r0.<com.android.server.GestureLauncherService: com.android.internal.logging.MetricsLogger mMetricsLogger> = r2;

        return;
    }

    static long access$1000(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        long $l0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $l0 = r0.<com.android.server.GestureLauncherService: long mCameraGestureOnTimeMs>;

        return $l0;
    }

    static long access$1100(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        long $l0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $l0 = r0.<com.android.server.GestureLauncherService: long mCameraGestureLastEventTime>;

        return $l0;
    }

    static long access$1102(com.android.server.GestureLauncherService, long)
    {
        com.android.server.GestureLauncherService r0;
        long l0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        l0 := @parameter1: long;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureLastEventTime> = l0;

        return l0;
    }

    static long access$1200(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        long $l0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $l0 = r0.<com.android.server.GestureLauncherService: long mCameraGestureSensor1LastOnTimeMs>;

        return $l0;
    }

    static long access$1202(com.android.server.GestureLauncherService, long)
    {
        com.android.server.GestureLauncherService r0;
        long l0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        l0 := @parameter1: long;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureSensor1LastOnTimeMs> = l0;

        return l0;
    }

    static long access$1300(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        long $l0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $l0 = r0.<com.android.server.GestureLauncherService: long mCameraGestureSensor2LastOnTimeMs>;

        return $l0;
    }

    static long access$1302(com.android.server.GestureLauncherService, long)
    {
        com.android.server.GestureLauncherService r0;
        long l0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        l0 := @parameter1: long;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureSensor2LastOnTimeMs> = l0;

        return l0;
    }

    static int access$1400(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        int $i0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $i0 = r0.<com.android.server.GestureLauncherService: int mCameraLaunchLastEventExtra>;

        return $i0;
    }

    static int access$1402(com.android.server.GestureLauncherService, int)
    {
        com.android.server.GestureLauncherService r0;
        int i0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        i0 := @parameter1: int;

        r0.<com.android.server.GestureLauncherService: int mCameraLaunchLastEventExtra> = i0;

        return i0;
    }

    static boolean access$1500(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $z0 = r0.<com.android.server.GestureLauncherService: boolean mCameraLiftRegistered>;

        return $z0;
    }

    static boolean access$1502(com.android.server.GestureLauncherService, boolean)
    {
        com.android.server.GestureLauncherService r0;
        boolean z0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        z0 := @parameter1: boolean;

        r0.<com.android.server.GestureLauncherService: boolean mCameraLiftRegistered> = z0;

        return z0;
    }

    static android.hardware.Sensor access$1600(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        android.hardware.Sensor $r1;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $r1 = r0.<com.android.server.GestureLauncherService: android.hardware.Sensor mCameraLiftTriggerSensor>;

        return $r1;
    }

    static com.android.server.wm.WindowManagerInternal access$1700(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        com.android.server.wm.WindowManagerInternal $r1;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $r1 = r0.<com.android.server.GestureLauncherService: com.android.server.wm.WindowManagerInternal mWindowManagerInternal>;

        return $r1;
    }

    static android.os.PowerManager access$1800(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        android.os.PowerManager $r1;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $r1 = r0.<com.android.server.GestureLauncherService: android.os.PowerManager mPowerManager>;

        return $r1;
    }

    static com.android.server.GestureLauncherService$CameraLiftTriggerEventListener access$1900(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        com.android.server.GestureLauncherService$CameraLiftTriggerEventListener $r1;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $r1 = r0.<com.android.server.GestureLauncherService: com.android.server.GestureLauncherService$CameraLiftTriggerEventListener mCameraLiftTriggerListener>;

        return $r1;
    }

    static int access$200(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        int $i0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $i0 = r0.<com.android.server.GestureLauncherService: int mUserId>;

        return $i0;
    }

    static int access$202(com.android.server.GestureLauncherService, int)
    {
        com.android.server.GestureLauncherService r0;
        int i0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        i0 := @parameter1: int;

        r0.<com.android.server.GestureLauncherService: int mUserId> = i0;

        return i0;
    }

    static android.database.ContentObserver access$300(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        android.database.ContentObserver $r1;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $r1 = r0.<com.android.server.GestureLauncherService: android.database.ContentObserver mSettingObserver>;

        return $r1;
    }

    static android.content.Context access$400(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        android.content.Context $r1;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $r1 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        return $r1;
    }

    static void access$500(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        specialinvoke r0.<com.android.server.GestureLauncherService: void registerContentObservers()>();

        return;
    }

    static void access$600(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        specialinvoke r0.<com.android.server.GestureLauncherService: void updateCameraRegistered()>();

        return;
    }

    static boolean access$700(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        boolean $z0;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $z0 = r0.<com.android.server.GestureLauncherService: boolean mCameraLaunchRegistered>;

        return $z0;
    }

    static android.hardware.Sensor access$800(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        android.hardware.Sensor $r1;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $r1 = r0.<com.android.server.GestureLauncherService: android.hardware.Sensor mCameraLaunchSensor>;

        return $r1;
    }

    static com.android.internal.logging.MetricsLogger access$900(com.android.server.GestureLauncherService)
    {
        com.android.server.GestureLauncherService r0;
        com.android.internal.logging.MetricsLogger $r1;

        r0 := @parameter0: com.android.server.GestureLauncherService;

        $r1 = r0.<com.android.server.GestureLauncherService: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        return $r1;
    }

    public static boolean isCameraDoubleTapPowerEnabled(android.content.res.Resources)
    {
        android.content.res.Resources r0;
        boolean $z0;

        r0 := @parameter0: android.content.res.Resources;

        $z0 = virtualinvoke r0.<android.content.res.Resources: boolean getBoolean(int)>(17891388);

        return $z0;
    }

    public static boolean isCameraDoubleTapPowerSettingEnabled(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, $i1;
        boolean z0, z1;
        android.content.res.Resources $r1;
        android.content.ContentResolver $r2;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = staticinvoke <com.android.server.GestureLauncherService: boolean isCameraDoubleTapPowerEnabled(android.content.res.Resources)>($r1);

        z1 = 0;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "camera_double_tap_power_gesture_disabled", 0, i0);

        if $i1 != 0 goto label1;

        z1 = 1;

        goto label1;

     label1:
        return z1;
    }

    public static boolean isCameraLaunchEnabled(android.content.res.Resources)
    {
        android.content.res.Resources r0;
        boolean $z0, z1, z2;
        int i0;

        r0 := @parameter0: android.content.res.Resources;

        i0 = virtualinvoke r0.<android.content.res.Resources: int getInteger(int)>(17694760);

        z1 = 1;

        if i0 == -1 goto label1;

        z2 = 1;

        goto label2;

     label1:
        z2 = 0;

     label2:
        if z2 == 0 goto label3;

        $z0 = staticinvoke <android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>("gesture.disable_camera_launch", 0);

        if $z0 != 0 goto label3;

        goto label4;

     label3:
        z1 = 0;

     label4:
        return z1;
    }

    public static boolean isCameraLaunchSettingEnabled(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, $i1;
        boolean z0, z1;
        android.content.res.Resources $r1;
        android.content.ContentResolver $r2;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = staticinvoke <com.android.server.GestureLauncherService: boolean isCameraLaunchEnabled(android.content.res.Resources)>($r1);

        z1 = 0;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "camera_gesture_disabled", 0, i0);

        if $i1 != 0 goto label1;

        z1 = 1;

        goto label1;

     label1:
        return z1;
    }

    public static boolean isCameraLiftTriggerEnabled(android.content.res.Resources)
    {
        android.content.res.Resources r0;
        int $i0;
        boolean z0;

        r0 := @parameter0: android.content.res.Resources;

        $i0 = virtualinvoke r0.<android.content.res.Resources: int getInteger(int)>(17694761);

        if $i0 == -1 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    public static boolean isCameraLiftTriggerSettingEnabled(android.content.Context, int)
    {
        android.content.Context r0;
        int i0, $i1;
        boolean z0, z1;
        android.content.res.Resources $r1;
        android.content.ContentResolver $r2;

        r0 := @parameter0: android.content.Context;

        i0 := @parameter1: int;

        $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>();

        z0 = staticinvoke <com.android.server.GestureLauncherService: boolean isCameraLiftTriggerEnabled(android.content.res.Resources)>($r1);

        z1 = 1;

        if z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r2, "camera_lift_trigger_enabled", 1, i0);

        if $i1 == 0 goto label1;

        goto label2;

     label1:
        z1 = 0;

     label2:
        return z1;
    }

    public static boolean isGestureLauncherEnabled(android.content.res.Resources)
    {
        android.content.res.Resources r0;
        boolean $z0, $z1, $z2, z3;

        r0 := @parameter0: android.content.res.Resources;

        $z0 = staticinvoke <com.android.server.GestureLauncherService: boolean isCameraLaunchEnabled(android.content.res.Resources)>(r0);

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <com.android.server.GestureLauncherService: boolean isCameraDoubleTapPowerEnabled(android.content.res.Resources)>(r0);

        if $z1 != 0 goto label2;

        $z2 = staticinvoke <com.android.server.GestureLauncherService: boolean isCameraLiftTriggerEnabled(android.content.res.Resources)>(r0);

        if $z2 == 0 goto label1;

        goto label2;

     label1:
        z3 = 0;

        goto label3;

     label2:
        z3 = 1;

     label3:
        return z3;
    }

    private void registerCameraLaunchGesture(android.content.res.Resources)
    {
        com.android.server.GestureLauncherService r0;
        long l0;
        android.hardware.SensorManager r1;
        int i1;
        android.hardware.Sensor r2, $r8, $r11;
        boolean $z0, $z1, $z2;
        android.content.Context $r3;
        java.lang.Object $r4;
        java.lang.String $r5, $r9, $r10, r14;
        java.lang.RuntimeException $r6;
        java.lang.Object[] $r7;
        com.android.server.GestureLauncherService$GestureEventListener $r12;
        android.content.res.Resources r13;

        r0 := @this: com.android.server.GestureLauncherService;

        r13 := @parameter0: android.content.res.Resources;

        $z0 = r0.<com.android.server.GestureLauncherService: boolean mCameraLaunchRegistered>;

        if $z0 == 0 goto label1;

        return;

     label1:
        l0 = staticinvoke <android.os.SystemClock: long elapsedRealtime()>();

        r0.<com.android.server.GestureLauncherService: long mCameraGestureOnTimeMs> = l0;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureLastEventTime> = l0;

        $r3 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        r1 = (android.hardware.SensorManager) $r4;

        i1 = virtualinvoke r13.<android.content.res.Resources: int getInteger(int)>(17694760);

        if i1 == -1 goto label3;

        r0.<com.android.server.GestureLauncherService: boolean mCameraLaunchRegistered> = 0;

        r14 = virtualinvoke r13.<android.content.res.Resources: java.lang.String getString(int)>(17039834);

        r2 = virtualinvoke r1.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>(i1, 1);

        r0.<com.android.server.GestureLauncherService: android.hardware.Sensor mCameraLaunchSensor> = r2;

        if r2 == null goto label3;

        $r5 = virtualinvoke r2.<android.hardware.Sensor: java.lang.String getStringType()>();

        $z1 = virtualinvoke r14.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        $r12 = r0.<com.android.server.GestureLauncherService: com.android.server.GestureLauncherService$GestureEventListener mGestureListener>;

        $r11 = r0.<com.android.server.GestureLauncherService: android.hardware.Sensor mCameraLaunchSensor>;

        $z2 = virtualinvoke r1.<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>($r12, $r11, 0);

        r0.<com.android.server.GestureLauncherService: boolean mCameraLaunchRegistered> = $z2;

        goto label3;

     label2:
        $r6 = new java.lang.RuntimeException;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r14;

        $r8 = r0.<com.android.server.GestureLauncherService: android.hardware.Sensor mCameraLaunchSensor>;

        $r9 = virtualinvoke $r8.<android.hardware.Sensor: java.lang.String getStringType()>();

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Wrong configuration. Sensor type and sensor string type don\'t match: %s in resources, %s in the sensor.", $r7);

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        return;
    }

    private void registerCameraLiftTrigger(android.content.res.Resources)
    {
        com.android.server.GestureLauncherService r0;
        android.hardware.SensorManager r1;
        int i0;
        java.lang.String r2, $r5, $r9, $r10;
        boolean $z0, $z1, $z2;
        android.content.Context $r3;
        java.lang.Object $r4;
        java.lang.RuntimeException $r6;
        java.lang.Object[] $r7;
        android.hardware.Sensor $r8, $r11, r14;
        com.android.server.GestureLauncherService$CameraLiftTriggerEventListener $r12;
        android.content.res.Resources r13;

        r0 := @this: com.android.server.GestureLauncherService;

        r13 := @parameter0: android.content.res.Resources;

        $z0 = r0.<com.android.server.GestureLauncherService: boolean mCameraLiftRegistered>;

        if $z0 == 0 goto label1;

        return;

     label1:
        $r3 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r4 = virtualinvoke $r3.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        r1 = (android.hardware.SensorManager) $r4;

        i0 = virtualinvoke r13.<android.content.res.Resources: int getInteger(int)>(17694761);

        if i0 == -1 goto label3;

        r0.<com.android.server.GestureLauncherService: boolean mCameraLiftRegistered> = 0;

        r2 = virtualinvoke r13.<android.content.res.Resources: java.lang.String getString(int)>(17039835);

        r14 = virtualinvoke r1.<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int,boolean)>(i0, 1);

        r0.<com.android.server.GestureLauncherService: android.hardware.Sensor mCameraLiftTriggerSensor> = r14;

        if r14 == null goto label3;

        $r5 = virtualinvoke r14.<android.hardware.Sensor: java.lang.String getStringType()>();

        $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r5);

        if $z1 == 0 goto label2;

        $r12 = r0.<com.android.server.GestureLauncherService: com.android.server.GestureLauncherService$CameraLiftTriggerEventListener mCameraLiftTriggerListener>;

        $r11 = r0.<com.android.server.GestureLauncherService: android.hardware.Sensor mCameraLiftTriggerSensor>;

        $z2 = virtualinvoke r1.<android.hardware.SensorManager: boolean requestTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>($r12, $r11);

        r0.<com.android.server.GestureLauncherService: boolean mCameraLiftRegistered> = $z2;

        goto label3;

     label2:
        $r6 = new java.lang.RuntimeException;

        $r7 = newarray (java.lang.Object)[2];

        $r7[0] = r2;

        $r8 = r0.<com.android.server.GestureLauncherService: android.hardware.Sensor mCameraLiftTriggerSensor>;

        $r9 = virtualinvoke $r8.<android.hardware.Sensor: java.lang.String getStringType()>();

        $r7[1] = $r9;

        $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Wrong configuration. Sensor type and sensor string type don\'t match: %s in resources, %s in the sensor.", $r7);

        specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label3:
        return;
    }

    private void registerContentObservers()
    {
        com.android.server.GestureLauncherService r0;
        android.content.Context $r1, $r5, $r9;
        android.content.ContentResolver $r2, $r6, $r10;
        android.net.Uri $r3, $r7, $r11;
        int $i0, $i1, $i2;
        android.database.ContentObserver $r4, $r8, $r12;

        r0 := @this: com.android.server.GestureLauncherService;

        $r1 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r3 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("camera_gesture_disabled");

        $r4 = r0.<com.android.server.GestureLauncherService: android.database.ContentObserver mSettingObserver>;

        $i0 = r0.<com.android.server.GestureLauncherService: int mUserId>;

        virtualinvoke $r2.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r3, 0, $r4, $i0);

        $r5 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r7 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("camera_double_tap_power_gesture_disabled");

        $r8 = r0.<com.android.server.GestureLauncherService: android.database.ContentObserver mSettingObserver>;

        $i1 = r0.<com.android.server.GestureLauncherService: int mUserId>;

        virtualinvoke $r6.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r7, 0, $r8, $i1);

        $r9 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r10 = virtualinvoke $r9.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        $r11 = staticinvoke <android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>("camera_lift_trigger_enabled");

        $r12 = r0.<com.android.server.GestureLauncherService: android.database.ContentObserver mSettingObserver>;

        $i2 = r0.<com.android.server.GestureLauncherService: int mUserId>;

        virtualinvoke $r10.<android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver,int)>($r11, 0, $r12, $i2);

        return;
    }

    private void unregisterCameraLaunchGesture()
    {
        com.android.server.GestureLauncherService r0;
        boolean $z0;
        android.content.Context $r1;
        java.lang.Object $r2;
        com.android.server.GestureLauncherService$GestureEventListener $r3;
        android.hardware.SensorManager $r4;

        r0 := @this: com.android.server.GestureLauncherService;

        $z0 = r0.<com.android.server.GestureLauncherService: boolean mCameraLaunchRegistered>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.GestureLauncherService: boolean mCameraLaunchRegistered> = 0;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureOnTimeMs> = 0L;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureLastEventTime> = 0L;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureSensor1LastOnTimeMs> = 0L;

        r0.<com.android.server.GestureLauncherService: long mCameraGestureSensor2LastOnTimeMs> = 0L;

        r0.<com.android.server.GestureLauncherService: int mCameraLaunchLastEventExtra> = 0;

        $r1 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r4 = (android.hardware.SensorManager) $r2;

        $r3 = r0.<com.android.server.GestureLauncherService: com.android.server.GestureLauncherService$GestureEventListener mGestureListener>;

        virtualinvoke $r4.<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>($r3);

     label1:
        return;
    }

    private void unregisterCameraLiftTrigger()
    {
        com.android.server.GestureLauncherService r0;
        boolean $z0;
        android.content.Context $r1;
        java.lang.Object $r2;
        android.hardware.Sensor $r3;
        com.android.server.GestureLauncherService$CameraLiftTriggerEventListener $r4;
        android.hardware.SensorManager $r5;

        r0 := @this: com.android.server.GestureLauncherService;

        $z0 = r0.<com.android.server.GestureLauncherService: boolean mCameraLiftRegistered>;

        if $z0 == 0 goto label1;

        r0.<com.android.server.GestureLauncherService: boolean mCameraLiftRegistered> = 0;

        $r1 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r2 = virtualinvoke $r1.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("sensor");

        $r5 = (android.hardware.SensorManager) $r2;

        $r4 = r0.<com.android.server.GestureLauncherService: com.android.server.GestureLauncherService$CameraLiftTriggerEventListener mCameraLiftTriggerListener>;

        $r3 = r0.<com.android.server.GestureLauncherService: android.hardware.Sensor mCameraLiftTriggerSensor>;

        virtualinvoke $r5.<android.hardware.SensorManager: boolean cancelTriggerSensor(android.hardware.TriggerEventListener,android.hardware.Sensor)>($r4, $r3);

     label1:
        return;
    }

    private void updateCameraRegistered()
    {
        com.android.server.GestureLauncherService r0;
        android.content.res.Resources r1;
        android.content.Context $r2, $r3, $r4;
        int $i0, $i1;
        boolean $z0, $z1;

        r0 := @this: com.android.server.GestureLauncherService;

        $r2 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        r1 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $r3 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $i0 = r0.<com.android.server.GestureLauncherService: int mUserId>;

        $z0 = staticinvoke <com.android.server.GestureLauncherService: boolean isCameraLaunchSettingEnabled(android.content.Context,int)>($r3, $i0);

        if $z0 == 0 goto label1;

        specialinvoke r0.<com.android.server.GestureLauncherService: void registerCameraLaunchGesture(android.content.res.Resources)>(r1);

        goto label2;

     label1:
        specialinvoke r0.<com.android.server.GestureLauncherService: void unregisterCameraLaunchGesture()>();

     label2:
        $r4 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $i1 = r0.<com.android.server.GestureLauncherService: int mUserId>;

        $z1 = staticinvoke <com.android.server.GestureLauncherService: boolean isCameraLiftTriggerSettingEnabled(android.content.Context,int)>($r4, $i1);

        if $z1 == 0 goto label3;

        specialinvoke r0.<com.android.server.GestureLauncherService: void registerCameraLiftTrigger(android.content.res.Resources)>(r1);

        goto label4;

     label3:
        specialinvoke r0.<com.android.server.GestureLauncherService: void unregisterCameraLiftTrigger()>();

     label4:
        return;
    }

    boolean handleCameraGesture(boolean, int)
    {
        com.android.server.GestureLauncherService r0;
        boolean z0, z1;
        int i0, i1;
        android.content.Context $r2;
        android.content.ContentResolver $r3;
        java.lang.Object $r4;
        com.android.server.statusbar.StatusBarManagerInternal $r5;
        android.os.PowerManager$WakeLock $r6;
        java.lang.Throwable $r7;

        r0 := @this: com.android.server.GestureLauncherService;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        staticinvoke <android.os.Trace: void traceBegin(long,java.lang.String)>(64L, "GestureLauncher:handleCameraGesture");

     label1:
        $r2 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.ContentResolver getContentResolver()>();

        i1 = staticinvoke <android.provider.Settings$Secure: int getIntForUser(android.content.ContentResolver,java.lang.String,int,int)>($r3, "user_setup_complete", 0, -2);

     label2:
        if i1 == 0 goto label3;

        z1 = 1;

        goto label4;

     label3:
        z1 = 0;

     label4:
        if z1 != 0 goto label5;

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return 0;

     label5:
        if z0 == 0 goto label7;

     label6:
        $r6 = r0.<com.android.server.GestureLauncherService: android.os.PowerManager$WakeLock mWakeLock>;

        virtualinvoke $r6.<android.os.PowerManager$WakeLock: void acquire(long)>(500L);

     label7:
        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/statusbar/StatusBarManagerInternal;");

        $r5 = (com.android.server.statusbar.StatusBarManagerInternal) $r4;

        interfaceinvoke $r5.<com.android.server.statusbar.StatusBarManagerInternal: void onCameraLaunchGestureDetected(int)>(i0);

     label8:
        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        return 1;

     label9:
        $r7 := @caughtexception;

        staticinvoke <android.os.Trace: void traceEnd(long)>(64L);

        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label9;
        catch java.lang.Throwable from label6 to label7 with label9;
        catch java.lang.Throwable from label7 to label8 with label9;
    }

    public boolean interceptPowerKeyDown(android.view.KeyEvent, boolean, android.util.MutableBoolean)
    {
        com.android.server.GestureLauncherService r0;
        android.util.MutableBoolean r1;
        long l0, $l1, $l2, $l11;
        boolean $z1, z2, z3, z5, z7, z8, z9, z10;
        byte $b3, $b8;
        java.lang.StringBuilder $r2;
        java.lang.String $r6;
        int $i5, $i6, $i7, $i9, $i10, $i12, $i13;
        com.android.internal.logging.MetricsLogger $r7, $r11, $r12;
        java.lang.Throwable $r8;
        android.view.KeyEvent r9;

        r0 := @this: com.android.server.GestureLauncherService;

        r9 := @parameter0: android.view.KeyEvent;

        z2 := @parameter1: boolean;

        r1 := @parameter2: android.util.MutableBoolean;

        z3 = virtualinvoke r9.<android.view.KeyEvent: boolean isLongPress()>();

        if z3 == 0 goto label01;

        return 0;

     label01:
        z5 = 0;

        entermonitor r0;

     label02:
        $l1 = virtualinvoke r9.<android.view.KeyEvent: long getEventTime()>();

        $l2 = r0.<com.android.server.GestureLauncherService: long mLastPowerDown>;

        l0 = $l1 - $l2;

        $z1 = r0.<com.android.server.GestureLauncherService: boolean mCameraDoubleTapPowerEnabled>;

        if $z1 == 0 goto label06;

     label03:
        $b8 = l0 cmp 300L;

        if $b8 >= 0 goto label06;

        z5 = z2;

     label04:
        $i9 = r0.<com.android.server.GestureLauncherService: int mPowerButtonConsecutiveTaps>;

        $i10 = $i9 + 1;

        r0.<com.android.server.GestureLauncherService: int mPowerButtonConsecutiveTaps> = $i10;

     label05:
        z7 = 1;

        goto label11;

     label06:
        $b3 = l0 cmp 500L;

        if $b3 >= 0 goto label09;

     label07:
        $i6 = r0.<com.android.server.GestureLauncherService: int mPowerButtonConsecutiveTaps>;

        $i7 = $i6 + 1;

        r0.<com.android.server.GestureLauncherService: int mPowerButtonConsecutiveTaps> = $i7;

     label08:
        z7 = 0;

        goto label11;

     label09:
        r0.<com.android.server.GestureLauncherService: int mPowerButtonConsecutiveTaps> = 1;

     label10:
        z7 = 0;

     label11:
        $l11 = virtualinvoke r9.<android.view.KeyEvent: long getEventTime()>();

        r0.<com.android.server.GestureLauncherService: long mLastPowerDown> = $l11;

        exitmonitor r0;

     label12:
        z8 = z7;

        if z7 == 0 goto label13;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Power button double tap gesture detected, launching camera. Interval=");

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms");

        $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <android.util.Slog: int i(java.lang.String,java.lang.String)>("GestureLauncherService", $r6);

        z9 = virtualinvoke r0.<com.android.server.GestureLauncherService: boolean handleCameraGesture(boolean,int)>(0, 1);

        z8 = z9;

        if z9 == 0 goto label13;

        $r7 = r0.<com.android.server.GestureLauncherService: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        $i5 = (int) l0;

        virtualinvoke $r7.<com.android.internal.logging.MetricsLogger: void action(int,int)>(255, $i5);

        z8 = z9;

     label13:
        $r11 = r0.<com.android.server.GestureLauncherService: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        $i12 = r0.<com.android.server.GestureLauncherService: int mPowerButtonConsecutiveTaps>;

        virtualinvoke $r11.<com.android.internal.logging.MetricsLogger: void histogram(java.lang.String,int)>("power_consecutive_short_tap_count", $i12);

        $r12 = r0.<com.android.server.GestureLauncherService: com.android.internal.logging.MetricsLogger mMetricsLogger>;

        $i13 = (int) l0;

        virtualinvoke $r12.<com.android.internal.logging.MetricsLogger: void histogram(java.lang.String,int)>("power_double_tap_interval", $i13);

        r1.<android.util.MutableBoolean: boolean value> = z8;

        z10 = 0;

        if z5 == 0 goto label14;

        z10 = 0;

        if z8 == 0 goto label14;

        z10 = 1;

     label14:
        return z10;

     label15:
        $r8 := @caughtexception;

     label16:
        exitmonitor r0;

     label17:
        throw $r8;

        catch java.lang.Throwable from label02 to label03 with label15;
        catch java.lang.Throwable from label04 to label05 with label15;
        catch java.lang.Throwable from label07 to label08 with label15;
        catch java.lang.Throwable from label09 to label10 with label15;
        catch java.lang.Throwable from label11 to label12 with label15;
        catch java.lang.Throwable from label16 to label17 with label15;
    }

    public void onBootPhase(int)
    {
        com.android.server.GestureLauncherService r0;
        int i0, $i1;
        android.os.PowerManager r1;
        android.content.Context $r2, $r6, $r10;
        android.content.res.Resources $r3;
        boolean $z0;
        java.lang.Object $r4, $r7;
        com.android.server.wm.WindowManagerInternal $r5;
        android.os.PowerManager$WakeLock $r8;
        android.content.IntentFilter $r9;
        android.content.BroadcastReceiver $r11;

        r0 := @this: com.android.server.GestureLauncherService;

        i0 := @parameter0: int;

        if i0 != 600 goto label2;

        $r2 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.res.Resources getResources()>();

        $z0 = staticinvoke <com.android.server.GestureLauncherService: boolean isGestureLauncherEnabled(android.content.res.Resources)>($r3);

        if $z0 != 0 goto label1;

        return;

     label1:
        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/wm/WindowManagerInternal;");

        $r5 = (com.android.server.wm.WindowManagerInternal) $r4;

        r0.<com.android.server.GestureLauncherService: com.android.server.wm.WindowManagerInternal mWindowManagerInternal> = $r5;

        $r6 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r7 = virtualinvoke $r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("power");

        r1 = (android.os.PowerManager) $r7;

        r0.<com.android.server.GestureLauncherService: android.os.PowerManager mPowerManager> = r1;

        $r8 = virtualinvoke r1.<android.os.PowerManager: android.os.PowerManager$WakeLock newWakeLock(int,java.lang.String)>(1, "GestureLauncherService");

        r0.<com.android.server.GestureLauncherService: android.os.PowerManager$WakeLock mWakeLock> = $r8;

        specialinvoke r0.<com.android.server.GestureLauncherService: void updateCameraRegistered()>();

        virtualinvoke r0.<com.android.server.GestureLauncherService: void updateCameraDoubleTapPowerEnabled()>();

        $i1 = staticinvoke <android.app.ActivityManager: int getCurrentUser()>();

        r0.<com.android.server.GestureLauncherService: int mUserId> = $i1;

        $r10 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $r11 = r0.<com.android.server.GestureLauncherService: android.content.BroadcastReceiver mUserReceiver>;

        $r9 = new android.content.IntentFilter;

        specialinvoke $r9.<android.content.IntentFilter: void <init>(java.lang.String)>("android.intent.action.USER_SWITCHED");

        virtualinvoke $r10.<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>($r11, $r9);

        specialinvoke r0.<com.android.server.GestureLauncherService: void registerContentObservers()>();

     label2:
        return;
    }

    public void onStart()
    {
        com.android.server.GestureLauncherService r0;

        r0 := @this: com.android.server.GestureLauncherService;

        staticinvoke <com.android.server.LocalServices: void addService(java.lang.Class,java.lang.Object)>(class "Lcom/android/server/GestureLauncherService;", r0);

        return;
    }

    void updateCameraDoubleTapPowerEnabled()
    {
        com.android.server.GestureLauncherService r0;
        boolean z0;
        int $i0;
        android.content.Context $r2;
        java.lang.Throwable $r3;

        r0 := @this: com.android.server.GestureLauncherService;

        $r2 = r0.<com.android.server.GestureLauncherService: android.content.Context mContext>;

        $i0 = r0.<com.android.server.GestureLauncherService: int mUserId>;

        z0 = staticinvoke <com.android.server.GestureLauncherService: boolean isCameraDoubleTapPowerSettingEnabled(android.content.Context,int)>($r2, $i0);

        entermonitor r0;

     label1:
        r0.<com.android.server.GestureLauncherService: boolean mCameraDoubleTapPowerEnabled> = z0;

        exitmonitor r0;

     label2:
        return;

     label3:
        $r3 := @caughtexception;

     label4:
        exitmonitor r0;

     label5:
        throw $r3;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.GestureLauncherService: java.lang.String TAG> = "GestureLauncherService";

        <com.android.server.GestureLauncherService: long POWER_SHORT_TAP_SEQUENCE_MAX_INTERVAL_MS> = 500L;

        <com.android.server.GestureLauncherService: boolean DBG_CAMERA_LIFT> = 0;

        <com.android.server.GestureLauncherService: boolean DBG> = 0;

        <com.android.server.GestureLauncherService: long CAMERA_POWER_DOUBLE_TAP_MAX_TIME_MS> = 300L;

        return;
    }
}
