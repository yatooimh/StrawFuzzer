public class com.android.server.HardwarePropertiesManagerService extends android.os.IHardwarePropertiesManager$Stub
{
    private static final java.lang.String TAG;
    private final android.app.AppOpsManager mAppOps;
    private final android.content.Context mContext;
    private final java.lang.Object mLock;

    public void <init>(android.content.Context)
    {
        com.android.server.HardwarePropertiesManagerService r0;
        java.lang.Object $r2, $r3, r7;
        android.app.AppOpsManager $r4;
        java.lang.Throwable $r5;
        android.content.Context r6;

        r0 := @this: com.android.server.HardwarePropertiesManagerService;

        r6 := @parameter0: android.content.Context;

        specialinvoke r0.<android.os.IHardwarePropertiesManager$Stub: void <init>()>();

        $r2 = new java.lang.Object;

        specialinvoke $r2.<java.lang.Object: void <init>()>();

        r0.<com.android.server.HardwarePropertiesManagerService: java.lang.Object mLock> = $r2;

        r0.<com.android.server.HardwarePropertiesManagerService: android.content.Context mContext> = r6;

        $r3 = virtualinvoke r6.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("appops");

        $r4 = (android.app.AppOpsManager) $r3;

        r0.<com.android.server.HardwarePropertiesManagerService: android.app.AppOpsManager mAppOps> = $r4;

        r7 = r0.<com.android.server.HardwarePropertiesManagerService: java.lang.Object mLock>;

        entermonitor r7;

     label1:
        staticinvoke <com.android.server.HardwarePropertiesManagerService: void nativeInit()>();

        exitmonitor r7;

     label2:
        return;

     label3:
        $r5 := @caughtexception;

     label4:
        exitmonitor r7;

     label5:
        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    private void dumpTempValues(java.lang.String, java.io.PrintWriter, int, java.lang.String)
    {
        com.android.server.HardwarePropertiesManagerService r0;
        java.lang.String r1, r3;
        java.io.PrintWriter r2;
        int i0;

        r0 := @this: com.android.server.HardwarePropertiesManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.PrintWriter;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void dumpTempValues(java.lang.String,java.io.PrintWriter,int,java.lang.String,java.lang.String,int)>(r1, r2, i0, r3, "temperatures: ", 0);

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void dumpTempValues(java.lang.String,java.io.PrintWriter,int,java.lang.String,java.lang.String,int)>(r1, r2, i0, r3, "throttling temperatures: ", 1);

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void dumpTempValues(java.lang.String,java.io.PrintWriter,int,java.lang.String,java.lang.String,int)>(r1, r2, i0, r3, "shutdown temperatures: ", 2);

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void dumpTempValues(java.lang.String,java.io.PrintWriter,int,java.lang.String,java.lang.String,int)>(r1, r2, i0, r3, "vr throttling temperatures: ", 3);

        return;
    }

    private void dumpTempValues(java.lang.String, java.io.PrintWriter, int, java.lang.String, java.lang.String, int)
    {
        com.android.server.HardwarePropertiesManagerService r0;
        java.lang.String r1, r3, r4, $r10, $r12;
        java.io.PrintWriter r2;
        int i0, i1;
        java.lang.StringBuilder $r6;
        float[] $r9;

        r0 := @this: com.android.server.HardwarePropertiesManagerService;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.io.PrintWriter;

        i0 := @parameter2: int;

        r3 := @parameter3: java.lang.String;

        r4 := @parameter4: java.lang.String;

        i1 := @parameter5: int;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r9 = virtualinvoke r0.<com.android.server.HardwarePropertiesManagerService: float[] getDeviceTemperatures(java.lang.String,int,int)>(r1, i0, i1);

        $r10 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>($r9);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r2.<java.io.PrintWriter: void println(java.lang.String)>($r12);

        return;
    }

    private void enforceHardwarePropertiesRetrievalAllowed(java.lang.String) throws java.lang.SecurityException
    {
        com.android.server.HardwarePropertiesManagerService r0;
        java.lang.String r1;
        int i0, $i1, $i2, $i3;
        com.android.server.vr.VrManagerInternal r2;
        android.app.AppOpsManager $r3;
        java.lang.Object $r4, $r6;
        android.content.Context $r5, $r8;
        android.app.admin.DevicePolicyManager $r7;
        boolean $z0, $z1;
        java.lang.SecurityException $r9;

        r0 := @this: com.android.server.HardwarePropertiesManagerService;

        r1 := @parameter0: java.lang.String;

        $r3 = r0.<com.android.server.HardwarePropertiesManagerService: android.app.AppOpsManager mAppOps>;

        $i1 = staticinvoke <android.os.Binder: int getCallingUid()>();

        virtualinvoke $r3.<android.app.AppOpsManager: void checkPackage(int,java.lang.String)>($i1, r1);

        $i2 = staticinvoke <android.os.Binder: int getCallingUid()>();

        i0 = staticinvoke <android.os.UserHandle: int getUserId(int)>($i2);

        $r4 = staticinvoke <com.android.server.LocalServices: java.lang.Object getService(java.lang.Class)>(class "Lcom/android/server/vr/VrManagerInternal;");

        r2 = (com.android.server.vr.VrManagerInternal) $r4;

        $r5 = r0.<com.android.server.HardwarePropertiesManagerService: android.content.Context mContext>;

        $r6 = virtualinvoke $r5.<android.content.Context: java.lang.Object getSystemService(java.lang.Class)>(class "Landroid/app/admin/DevicePolicyManager;");

        $r7 = (android.app.admin.DevicePolicyManager) $r6;

        $z0 = virtualinvoke $r7.<android.app.admin.DevicePolicyManager: boolean isDeviceOwnerApp(java.lang.String)>(r1);

        if $z0 != 0 goto label2;

        $r8 = r0.<com.android.server.HardwarePropertiesManagerService: android.content.Context mContext>;

        $i3 = virtualinvoke $r8.<android.content.Context: int checkCallingOrSelfPermission(java.lang.String)>("android.permission.DEVICE_POWER");

        if $i3 == 0 goto label2;

        if r2 == null goto label1;

        $z1 = virtualinvoke r2.<com.android.server.vr.VrManagerInternal: boolean isCurrentVrListener(java.lang.String,int)>(r1, i0);

        if $z1 == 0 goto label1;

        goto label2;

     label1:
        $r9 = new java.lang.SecurityException;

        specialinvoke $r9.<java.lang.SecurityException: void <init>(java.lang.String)>("The caller is neither a device owner, nor holding the DEVICE_POWER permission, nor the current VrListener.");

        throw $r9;

     label2:
        return;
    }

    private java.lang.String getCallingPackageName()
    {
        com.android.server.HardwarePropertiesManagerService r0;
        java.lang.String[] r1;
        android.content.Context $r2;
        android.content.pm.PackageManager $r3;
        int $i0, $i1;
        java.lang.String $r4;

        r0 := @this: com.android.server.HardwarePropertiesManagerService;

        $r2 = r0.<com.android.server.HardwarePropertiesManagerService: android.content.Context mContext>;

        $r3 = virtualinvoke $r2.<android.content.Context: android.content.pm.PackageManager getPackageManager()>();

        $i0 = staticinvoke <android.os.Binder: int getCallingUid()>();

        r1 = virtualinvoke $r3.<android.content.pm.PackageManager: java.lang.String[] getPackagesForUid(int)>($i0);

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 <= 0 goto label1;

        $r4 = r1[0];

        return $r4;

     label1:
        return "unknown";
    }

    private static native android.os.CpuUsageInfo[] nativeGetCpuUsages();

    private static native float[] nativeGetDeviceTemperatures(int, int);

    private static native float[] nativeGetFanSpeeds();

    private static native void nativeInit();

    protected void dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[])
    {
        com.android.server.HardwarePropertiesManagerService r0;
        java.io.PrintWriter r1;
        java.lang.String r2, $r6, $r9, $r19;
        android.content.Context $r3;
        boolean $z0;
        java.lang.StringBuilder $r4, $r10;
        int $i0, i3;
        android.os.CpuUsageInfo $r14, $r17;
        long $l1, $l2;
        java.io.FileDescriptor r20;
        java.lang.String[] r21;
        float[] r22;
        android.os.CpuUsageInfo[] r24;

        r0 := @this: com.android.server.HardwarePropertiesManagerService;

        r20 := @parameter0: java.io.FileDescriptor;

        r1 := @parameter1: java.io.PrintWriter;

        r21 := @parameter2: java.lang.String[];

        $r3 = r0.<com.android.server.HardwarePropertiesManagerService: android.content.Context mContext>;

        $z0 = staticinvoke <com.android.internal.util.DumpUtils: boolean checkDumpPermission(android.content.Context,java.lang.String,java.io.PrintWriter)>($r3, "HardwarePropertiesManagerService", r1);

        if $z0 != 0 goto label1;

        return;

     label1:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("****** Dump of HardwarePropertiesManagerService ******");

        r2 = specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: java.lang.String getCallingPackageName()>();

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void dumpTempValues(java.lang.String,java.io.PrintWriter,int,java.lang.String)>(r2, r1, 0, "CPU ");

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void dumpTempValues(java.lang.String,java.io.PrintWriter,int,java.lang.String)>(r2, r1, 1, "GPU ");

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void dumpTempValues(java.lang.String,java.io.PrintWriter,int,java.lang.String)>(r2, r1, 2, "Battery ");

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void dumpTempValues(java.lang.String,java.io.PrintWriter,int,java.lang.String)>(r2, r1, 3, "Skin ");

        r22 = virtualinvoke r0.<com.android.server.HardwarePropertiesManagerService: float[] getFanSpeeds(java.lang.String)>(r2);

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Fan speed: ");

        $r6 = staticinvoke <java.util.Arrays: java.lang.String toString(float[])>(r22);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r9);

        r24 = virtualinvoke r0.<com.android.server.HardwarePropertiesManagerService: android.os.CpuUsageInfo[] getCpuUsages(java.lang.String)>(r2);

        i3 = 0;

     label2:
        $i0 = lengthof r24;

        if i3 >= $i0 goto label3;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cpu usage of core: ");

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", active = ");

        $r14 = r24[i3];

        $l1 = virtualinvoke $r14.<android.os.CpuUsageInfo: long getActive()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1);

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", total = ");

        $r17 = r24[i3];

        $l2 = virtualinvoke $r17.<android.os.CpuUsageInfo: long getTotal()>();

        virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l2);

        $r19 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>($r19);

        i3 = i3 + 1;

        goto label2;

     label3:
        virtualinvoke r1.<java.io.PrintWriter: void println(java.lang.String)>("****** End of HardwarePropertiesManagerService dump ******");

        return;
    }

    public android.os.CpuUsageInfo[] getCpuUsages(java.lang.String) throws java.lang.SecurityException
    {
        com.android.server.HardwarePropertiesManagerService r0;
        java.lang.Throwable $r1;
        java.lang.String r2;
        java.lang.Object r3;
        android.os.CpuUsageInfo[] r4;

        r0 := @this: com.android.server.HardwarePropertiesManagerService;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void enforceHardwarePropertiesRetrievalAllowed(java.lang.String)>(r2);

        r3 = r0.<com.android.server.HardwarePropertiesManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        r4 = staticinvoke <com.android.server.HardwarePropertiesManagerService: android.os.CpuUsageInfo[] nativeGetCpuUsages()>();

        exitmonitor r3;

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r3;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public float[] getDeviceTemperatures(java.lang.String, int, int) throws java.lang.SecurityException
    {
        com.android.server.HardwarePropertiesManagerService r0;
        int i0, i1;
        java.lang.Throwable $r1;
        java.lang.String r2;
        java.lang.Object r3;
        float[] r4;

        r0 := @this: com.android.server.HardwarePropertiesManagerService;

        r2 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void enforceHardwarePropertiesRetrievalAllowed(java.lang.String)>(r2);

        r3 = r0.<com.android.server.HardwarePropertiesManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        r4 = staticinvoke <com.android.server.HardwarePropertiesManagerService: float[] nativeGetDeviceTemperatures(int,int)>(i0, i1);

        exitmonitor r3;

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r3;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public float[] getFanSpeeds(java.lang.String) throws java.lang.SecurityException
    {
        com.android.server.HardwarePropertiesManagerService r0;
        java.lang.Throwable $r1;
        java.lang.String r2;
        java.lang.Object r3;
        float[] r4;

        r0 := @this: com.android.server.HardwarePropertiesManagerService;

        r2 := @parameter0: java.lang.String;

        specialinvoke r0.<com.android.server.HardwarePropertiesManagerService: void enforceHardwarePropertiesRetrievalAllowed(java.lang.String)>(r2);

        r3 = r0.<com.android.server.HardwarePropertiesManagerService: java.lang.Object mLock>;

        entermonitor r3;

     label1:
        r4 = staticinvoke <com.android.server.HardwarePropertiesManagerService: float[] nativeGetFanSpeeds()>();

        exitmonitor r3;

     label2:
        return r4;

     label3:
        $r1 := @caughtexception;

     label4:
        exitmonitor r3;

     label5:
        throw $r1;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static void <clinit>()
    {
        <com.android.server.HardwarePropertiesManagerService: java.lang.String TAG> = "HardwarePropertiesManagerService";

        return;
    }
}
