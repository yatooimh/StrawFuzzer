public final class com.android.server.IoThread extends com.android.server.ServiceThread
{
    private static android.os.Handler sHandler;
    private static android.os.HandlerExecutor sHandlerExecutor;
    private static com.android.server.IoThread sInstance;

    private void <init>()
    {
        com.android.server.IoThread r0;

        r0 := @this: com.android.server.IoThread;

        specialinvoke r0.<com.android.server.ServiceThread: void <init>(java.lang.String,int,boolean)>("android.io", 0, 1);

        return;
    }

    private static void ensureThreadLocked()
    {
        com.android.server.IoThread $r1, $r2, $r3, $r6;
        android.os.Looper $r4, $r7;
        android.os.Handler $r5, $r9;
        android.os.HandlerExecutor $r8;

        $r1 = <com.android.server.IoThread: com.android.server.IoThread sInstance>;

        if $r1 != null goto label1;

        $r2 = new com.android.server.IoThread;

        specialinvoke $r2.<com.android.server.IoThread: void <init>()>();

        <com.android.server.IoThread: com.android.server.IoThread sInstance> = $r2;

        virtualinvoke $r2.<com.android.server.IoThread: void start()>();

        $r3 = <com.android.server.IoThread: com.android.server.IoThread sInstance>;

        $r4 = virtualinvoke $r3.<com.android.server.IoThread: android.os.Looper getLooper()>();

        virtualinvoke $r4.<android.os.Looper: void setTraceTag(long)>(524288L);

        $r5 = new android.os.Handler;

        $r6 = <com.android.server.IoThread: com.android.server.IoThread sInstance>;

        $r7 = virtualinvoke $r6.<com.android.server.IoThread: android.os.Looper getLooper()>();

        specialinvoke $r5.<android.os.Handler: void <init>(android.os.Looper)>($r7);

        <com.android.server.IoThread: android.os.Handler sHandler> = $r5;

        $r8 = new android.os.HandlerExecutor;

        $r9 = <com.android.server.IoThread: android.os.Handler sHandler>;

        specialinvoke $r8.<android.os.HandlerExecutor: void <init>(android.os.Handler)>($r9);

        <com.android.server.IoThread: android.os.HandlerExecutor sHandlerExecutor> = $r8;

     label1:
        return;
    }

    public static com.android.server.IoThread get()
    {
        java.lang.Throwable $r0;
        com.android.server.IoThread r1;

        entermonitor class "Lcom/android/server/IoThread;";

     label1:
        staticinvoke <com.android.server.IoThread: void ensureThreadLocked()>();

        r1 = <com.android.server.IoThread: com.android.server.IoThread sInstance>;

        exitmonitor class "Lcom/android/server/IoThread;";

     label2:
        return r1;

     label3:
        $r0 := @caughtexception;

     label4:
        exitmonitor class "Lcom/android/server/IoThread;";

     label5:
        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static java.util.concurrent.Executor getExecutor()
    {
        java.lang.Throwable $r0;
        android.os.HandlerExecutor r1;

        entermonitor class "Lcom/android/server/IoThread;";

     label1:
        staticinvoke <com.android.server.IoThread: void ensureThreadLocked()>();

        r1 = <com.android.server.IoThread: android.os.HandlerExecutor sHandlerExecutor>;

        exitmonitor class "Lcom/android/server/IoThread;";

     label2:
        return r1;

     label3:
        $r0 := @caughtexception;

     label4:
        exitmonitor class "Lcom/android/server/IoThread;";

     label5:
        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }

    public static android.os.Handler getHandler()
    {
        java.lang.Throwable $r0;
        android.os.Handler r1;

        entermonitor class "Lcom/android/server/IoThread;";

     label1:
        staticinvoke <com.android.server.IoThread: void ensureThreadLocked()>();

        r1 = <com.android.server.IoThread: android.os.Handler sHandler>;

        exitmonitor class "Lcom/android/server/IoThread;";

     label2:
        return r1;

     label3:
        $r0 := @caughtexception;

     label4:
        exitmonitor class "Lcom/android/server/IoThread;";

     label5:
        throw $r0;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label4 to label5 with label3;
    }
}
