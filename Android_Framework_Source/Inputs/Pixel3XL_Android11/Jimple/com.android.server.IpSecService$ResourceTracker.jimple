class com.android.server.IpSecService$ResourceTracker extends java.lang.Object
{
    int mCurrent;
    private final int mMax;

    void <init>(int)
    {
        com.android.server.IpSecService$ResourceTracker r0;
        int i0;

        r0 := @this: com.android.server.IpSecService$ResourceTracker;

        i0 := @parameter0: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<com.android.server.IpSecService$ResourceTracker: int mMax> = i0;

        r0.<com.android.server.IpSecService$ResourceTracker: int mCurrent> = 0;

        return;
    }

    void give()
    {
        com.android.server.IpSecService$ResourceTracker r0;
        int $i0, $i1, $i2;

        r0 := @this: com.android.server.IpSecService$ResourceTracker;

        $i0 = r0.<com.android.server.IpSecService$ResourceTracker: int mCurrent>;

        if $i0 > 0 goto label1;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("IpSecService", "We\'ve released this resource too many times");

     label1:
        $i1 = r0.<com.android.server.IpSecService$ResourceTracker: int mCurrent>;

        $i2 = $i1 - 1;

        r0.<com.android.server.IpSecService$ResourceTracker: int mCurrent> = $i2;

        return;
    }

    boolean isAvailable()
    {
        com.android.server.IpSecService$ResourceTracker r0;
        int $i0, $i1;
        boolean z0;

        r0 := @this: com.android.server.IpSecService$ResourceTracker;

        $i1 = r0.<com.android.server.IpSecService$ResourceTracker: int mCurrent>;

        $i0 = r0.<com.android.server.IpSecService$ResourceTracker: int mMax>;

        if $i1 >= $i0 goto label1;

        z0 = 1;

        goto label2;

     label1:
        z0 = 0;

     label2:
        return z0;
    }

    void take()
    {
        com.android.server.IpSecService$ResourceTracker r0;
        boolean $z0;
        int $i0, $i1;

        r0 := @this: com.android.server.IpSecService$ResourceTracker;

        $z0 = virtualinvoke r0.<com.android.server.IpSecService$ResourceTracker: boolean isAvailable()>();

        if $z0 != 0 goto label1;

        staticinvoke <android.util.Log: int wtf(java.lang.String,java.lang.String)>("IpSecService", "Too many resources allocated!");

     label1:
        $i0 = r0.<com.android.server.IpSecService$ResourceTracker: int mCurrent>;

        $i1 = $i0 + 1;

        r0.<com.android.server.IpSecService$ResourceTracker: int mCurrent> = $i1;

        return;
    }

    public java.lang.String toString()
    {
        com.android.server.IpSecService$ResourceTracker r0;
        java.lang.StringBuilder $r2;
        int $i0, $i1;
        java.lang.String $r8;

        r0 := @this: com.android.server.IpSecService$ResourceTracker;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("{mCurrent=");

        $i0 = r0.<com.android.server.IpSecService$ResourceTracker: int mCurrent>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mMax=");

        $i1 = r0.<com.android.server.IpSecService$ResourceTracker: int mMax>;

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("}");

        $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }
}
